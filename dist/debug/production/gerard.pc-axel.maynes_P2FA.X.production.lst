

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Apr 01 17:51:07 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77   000000                     
    78                           ; Generated 05/12/2024 GMT
    79                           ; 
    80                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution. Publication is not required when
    94                           ;        this file is used in an embedded application.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4321 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112   000FE0                     bsr             equ	4064
   113   000FE9                     fsr0            equ	4073
   114   000FEA                     fsr0h           equ	4074
   115   000FE9                     fsr0l           equ	4073
   116   000FE1                     fsr1            equ	4065
   117   000FE2                     fsr1h           equ	4066
   118   000FE1                     fsr1l           equ	4065
   119   000FD9                     fsr2            equ	4057
   120   000FDA                     fsr2h           equ	4058
   121   000FD9                     fsr2l           equ	4057
   122   000FEF                     indf0           equ	4079
   123   000FE7                     indf1           equ	4071
   124   000FDF                     indf2           equ	4063
   125   000FF2                     intcon          equ	4082
   126   000000                     nvmcon          equ	0
   127   000FF9                     pcl             equ	4089
   128   000FFA                     pclath          equ	4090
   129   000FFB                     pclatu          equ	4091
   130   000FEB                     plusw0          equ	4075
   131   000FE3                     plusw1          equ	4067
   132   000FDB                     plusw2          equ	4059
   133   000FED                     postdec0        equ	4077
   134   000FE5                     postdec1        equ	4069
   135   000FDD                     postdec2        equ	4061
   136   000FEE                     postinc0        equ	4078
   137   000FE6                     postinc1        equ	4070
   138   000FDE                     postinc2        equ	4062
   139   000FEC                     preinc0         equ	4076
   140   000FE4                     preinc1         equ	4068
   141   000FDC                     preinc2         equ	4060
   142   000FF3                     prod            equ	4083
   143   000FF4                     prodh           equ	4084
   144   000FF3                     prodl           equ	4083
   145   000FD8                     status          equ	4056
   146   000FF5                     tablat          equ	4085
   147   000FF6                     tblptr          equ	4086
   148   000FF7                     tblptrh         equ	4087
   149   000FF6                     tblptrl         equ	4086
   150   000FF8                     tblptru         equ	4088
   151   000FFD                     tosl            equ	4093
   152   000FE8                     wreg            equ	4072
   153   000F80                     PORTA           equ	3968	;# 
   154   000F81                     PORTB           equ	3969	;# 
   155   000F82                     PORTC           equ	3970	;# 
   156   000F83                     PORTD           equ	3971	;# 
   157   000F84                     PORTE           equ	3972	;# 
   158   000F89                     LATA            equ	3977	;# 
   159   000F8A                     LATB            equ	3978	;# 
   160   000F8B                     LATC            equ	3979	;# 
   161   000F8C                     LATD            equ	3980	;# 
   162   000F8D                     LATE            equ	3981	;# 
   163   000F92                     TRISA           equ	3986	;# 
   164   000F92                     DDRA            equ	3986	;# 
   165   000F93                     TRISB           equ	3987	;# 
   166   000F93                     DDRB            equ	3987	;# 
   167   000F94                     TRISC           equ	3988	;# 
   168   000F94                     DDRC            equ	3988	;# 
   169   000F95                     TRISD           equ	3989	;# 
   170   000F95                     DDRD            equ	3989	;# 
   171   000F96                     TRISE           equ	3990	;# 
   172   000F96                     DDRE            equ	3990	;# 
   173   000F9B                     OSCTUNE         equ	3995	;# 
   174   000F9D                     PIE1            equ	3997	;# 
   175   000F9E                     PIR1            equ	3998	;# 
   176   000F9F                     IPR1            equ	3999	;# 
   177   000FA0                     PIE2            equ	4000	;# 
   178   000FA1                     PIR2            equ	4001	;# 
   179   000FA2                     IPR2            equ	4002	;# 
   180   000FA6                     EECON1          equ	4006	;# 
   181   000FA7                     EECON2          equ	4007	;# 
   182   000FA8                     EEDATA          equ	4008	;# 
   183   000FA9                     EEADR           equ	4009	;# 
   184   000FAB                     RCSTA           equ	4011	;# 
   185   000FAB                     RCSTA1          equ	4011	;# 
   186   000FAC                     TXSTA           equ	4012	;# 
   187   000FAC                     TXSTA1          equ	4012	;# 
   188   000FAD                     TXREG           equ	4013	;# 
   189   000FAD                     TXREG1          equ	4013	;# 
   190   000FAE                     RCREG           equ	4014	;# 
   191   000FAE                     RCREG1          equ	4014	;# 
   192   000FAF                     SPBRG           equ	4015	;# 
   193   000FAF                     SPBRG1          equ	4015	;# 
   194   000FB0                     SPBRGH          equ	4016	;# 
   195   000FB1                     T3CON           equ	4017	;# 
   196   000FB2                     TMR3            equ	4018	;# 
   197   000FB2                     TMR3L           equ	4018	;# 
   198   000FB3                     TMR3H           equ	4019	;# 
   199   000FB4                     CMCON           equ	4020	;# 
   200   000FB5                     CVRCON          equ	4021	;# 
   201   000FB6                     ECCP1AS         equ	4022	;# 
   202   000FB7                     ECCP1DEL        equ	4023	;# 
   203   000FB7                     PWM1CON         equ	4023	;# 
   204   000FB8                     BAUDCON         equ	4024	;# 
   205   000FB8                     BAUDCTL         equ	4024	;# 
   206   000FBA                     CCP2CON         equ	4026	;# 
   207   000FBB                     CCPR2           equ	4027	;# 
   208   000FBB                     CCPR2L          equ	4027	;# 
   209   000FBC                     CCPR2H          equ	4028	;# 
   210   000FBD                     CCP1CON         equ	4029	;# 
   211   000FBD                     ECCP1CON        equ	4029	;# 
   212   000FBE                     CCPR1           equ	4030	;# 
   213   000FBE                     CCPR1L          equ	4030	;# 
   214   000FBF                     CCPR1H          equ	4031	;# 
   215   000FC0                     ADCON2          equ	4032	;# 
   216   000FC1                     ADCON1          equ	4033	;# 
   217   000FC2                     ADCON0          equ	4034	;# 
   218   000FC3                     ADRES           equ	4035	;# 
   219   000FC3                     ADRESL          equ	4035	;# 
   220   000FC4                     ADRESH          equ	4036	;# 
   221   000FC5                     SSPCON2         equ	4037	;# 
   222   000FC6                     SSPCON1         equ	4038	;# 
   223   000FC7                     SSPSTAT         equ	4039	;# 
   224   000FC8                     SSPADD          equ	4040	;# 
   225   000FC9                     SSPBUF          equ	4041	;# 
   226   000FCA                     T2CON           equ	4042	;# 
   227   000FCB                     PR2             equ	4043	;# 
   228   000FCB                     MEMCON          equ	4043	;# 
   229   000FCC                     TMR2            equ	4044	;# 
   230   000FCD                     T1CON           equ	4045	;# 
   231   000FCE                     TMR1            equ	4046	;# 
   232   000FCE                     TMR1L           equ	4046	;# 
   233   000FCF                     TMR1H           equ	4047	;# 
   234   000FD0                     RCON            equ	4048	;# 
   235   000FD1                     WDTCON          equ	4049	;# 
   236   000FD2                     HLVDCON         equ	4050	;# 
   237   000FD2                     LVDCON          equ	4050	;# 
   238   000FD3                     OSCCON          equ	4051	;# 
   239   000FD5                     T0CON           equ	4053	;# 
   240   000FD6                     TMR0            equ	4054	;# 
   241   000FD6                     TMR0L           equ	4054	;# 
   242   000FD7                     TMR0H           equ	4055	;# 
   243   000FD8                     STATUS          equ	4056	;# 
   244   000FD9                     FSR2            equ	4057	;# 
   245   000FD9                     FSR2L           equ	4057	;# 
   246   000FDA                     FSR2H           equ	4058	;# 
   247   000FDB                     PLUSW2          equ	4059	;# 
   248   000FDC                     PREINC2         equ	4060	;# 
   249   000FDD                     POSTDEC2        equ	4061	;# 
   250   000FDE                     POSTINC2        equ	4062	;# 
   251   000FDF                     INDF2           equ	4063	;# 
   252   000FE0                     BSR             equ	4064	;# 
   253   000FE1                     FSR1            equ	4065	;# 
   254   000FE1                     FSR1L           equ	4065	;# 
   255   000FE2                     FSR1H           equ	4066	;# 
   256   000FE3                     PLUSW1          equ	4067	;# 
   257   000FE4                     PREINC1         equ	4068	;# 
   258   000FE5                     POSTDEC1        equ	4069	;# 
   259   000FE6                     POSTINC1        equ	4070	;# 
   260   000FE7                     INDF1           equ	4071	;# 
   261   000FE8                     WREG            equ	4072	;# 
   262   000FE9                     FSR0            equ	4073	;# 
   263   000FE9                     FSR0L           equ	4073	;# 
   264   000FEA                     FSR0H           equ	4074	;# 
   265   000FEB                     PLUSW0          equ	4075	;# 
   266   000FEC                     PREINC0         equ	4076	;# 
   267   000FED                     POSTDEC0        equ	4077	;# 
   268   000FEE                     POSTINC0        equ	4078	;# 
   269   000FEF                     INDF0           equ	4079	;# 
   270   000FF0                     INTCON3         equ	4080	;# 
   271   000FF1                     INTCON2         equ	4081	;# 
   272   000FF2                     INTCON          equ	4082	;# 
   273   000FF3                     PROD            equ	4083	;# 
   274   000FF3                     PRODL           equ	4083	;# 
   275   000FF4                     PRODH           equ	4084	;# 
   276   000FF5                     TABLAT          equ	4085	;# 
   277   000FF6                     TBLPTR          equ	4086	;# 
   278   000FF6                     TBLPTRL         equ	4086	;# 
   279   000FF7                     TBLPTRH         equ	4087	;# 
   280   000FF8                     TBLPTRU         equ	4088	;# 
   281   000FF9                     PCLAT           equ	4089	;# 
   282   000FF9                     PC              equ	4089	;# 
   283   000FF9                     PCL             equ	4089	;# 
   284   000FFA                     PCLATH          equ	4090	;# 
   285   000FFB                     PCLATU          equ	4091	;# 
   286   000FFC                     STKPTR          equ	4092	;# 
   287   000FFD                     TOS             equ	4093	;# 
   288   000FFD                     TOSL            equ	4093	;# 
   289   000FFE                     TOSH            equ	4094	;# 
   290   000FFF                     TOSU            equ	4095	;# 
   291   000F80                     PORTA           equ	3968	;# 
   292   000F81                     PORTB           equ	3969	;# 
   293   000F82                     PORTC           equ	3970	;# 
   294   000F83                     PORTD           equ	3971	;# 
   295   000F84                     PORTE           equ	3972	;# 
   296   000F89                     LATA            equ	3977	;# 
   297   000F8A                     LATB            equ	3978	;# 
   298   000F8B                     LATC            equ	3979	;# 
   299   000F8C                     LATD            equ	3980	;# 
   300   000F8D                     LATE            equ	3981	;# 
   301   000F92                     TRISA           equ	3986	;# 
   302   000F92                     DDRA            equ	3986	;# 
   303   000F93                     TRISB           equ	3987	;# 
   304   000F93                     DDRB            equ	3987	;# 
   305   000F94                     TRISC           equ	3988	;# 
   306   000F94                     DDRC            equ	3988	;# 
   307   000F95                     TRISD           equ	3989	;# 
   308   000F95                     DDRD            equ	3989	;# 
   309   000F96                     TRISE           equ	3990	;# 
   310   000F96                     DDRE            equ	3990	;# 
   311   000F9B                     OSCTUNE         equ	3995	;# 
   312   000F9D                     PIE1            equ	3997	;# 
   313   000F9E                     PIR1            equ	3998	;# 
   314   000F9F                     IPR1            equ	3999	;# 
   315   000FA0                     PIE2            equ	4000	;# 
   316   000FA1                     PIR2            equ	4001	;# 
   317   000FA2                     IPR2            equ	4002	;# 
   318   000FA6                     EECON1          equ	4006	;# 
   319   000FA7                     EECON2          equ	4007	;# 
   320   000FA8                     EEDATA          equ	4008	;# 
   321   000FA9                     EEADR           equ	4009	;# 
   322   000FAB                     RCSTA           equ	4011	;# 
   323   000FAB                     RCSTA1          equ	4011	;# 
   324   000FAC                     TXSTA           equ	4012	;# 
   325   000FAC                     TXSTA1          equ	4012	;# 
   326   000FAD                     TXREG           equ	4013	;# 
   327   000FAD                     TXREG1          equ	4013	;# 
   328   000FAE                     RCREG           equ	4014	;# 
   329   000FAE                     RCREG1          equ	4014	;# 
   330   000FAF                     SPBRG           equ	4015	;# 
   331   000FAF                     SPBRG1          equ	4015	;# 
   332   000FB0                     SPBRGH          equ	4016	;# 
   333   000FB1                     T3CON           equ	4017	;# 
   334   000FB2                     TMR3            equ	4018	;# 
   335   000FB2                     TMR3L           equ	4018	;# 
   336   000FB3                     TMR3H           equ	4019	;# 
   337   000FB4                     CMCON           equ	4020	;# 
   338   000FB5                     CVRCON          equ	4021	;# 
   339   000FB6                     ECCP1AS         equ	4022	;# 
   340   000FB7                     ECCP1DEL        equ	4023	;# 
   341   000FB7                     PWM1CON         equ	4023	;# 
   342   000FB8                     BAUDCON         equ	4024	;# 
   343   000FB8                     BAUDCTL         equ	4024	;# 
   344   000FBA                     CCP2CON         equ	4026	;# 
   345   000FBB                     CCPR2           equ	4027	;# 
   346   000FBB                     CCPR2L          equ	4027	;# 
   347   000FBC                     CCPR2H          equ	4028	;# 
   348   000FBD                     CCP1CON         equ	4029	;# 
   349   000FBD                     ECCP1CON        equ	4029	;# 
   350   000FBE                     CCPR1           equ	4030	;# 
   351   000FBE                     CCPR1L          equ	4030	;# 
   352   000FBF                     CCPR1H          equ	4031	;# 
   353   000FC0                     ADCON2          equ	4032	;# 
   354   000FC1                     ADCON1          equ	4033	;# 
   355   000FC2                     ADCON0          equ	4034	;# 
   356   000FC3                     ADRES           equ	4035	;# 
   357   000FC3                     ADRESL          equ	4035	;# 
   358   000FC4                     ADRESH          equ	4036	;# 
   359   000FC5                     SSPCON2         equ	4037	;# 
   360   000FC6                     SSPCON1         equ	4038	;# 
   361   000FC7                     SSPSTAT         equ	4039	;# 
   362   000FC8                     SSPADD          equ	4040	;# 
   363   000FC9                     SSPBUF          equ	4041	;# 
   364   000FCA                     T2CON           equ	4042	;# 
   365   000FCB                     PR2             equ	4043	;# 
   366   000FCB                     MEMCON          equ	4043	;# 
   367   000FCC                     TMR2            equ	4044	;# 
   368   000FCD                     T1CON           equ	4045	;# 
   369   000FCE                     TMR1            equ	4046	;# 
   370   000FCE                     TMR1L           equ	4046	;# 
   371   000FCF                     TMR1H           equ	4047	;# 
   372   000FD0                     RCON            equ	4048	;# 
   373   000FD1                     WDTCON          equ	4049	;# 
   374   000FD2                     HLVDCON         equ	4050	;# 
   375   000FD2                     LVDCON          equ	4050	;# 
   376   000FD3                     OSCCON          equ	4051	;# 
   377   000FD5                     T0CON           equ	4053	;# 
   378   000FD6                     TMR0            equ	4054	;# 
   379   000FD6                     TMR0L           equ	4054	;# 
   380   000FD7                     TMR0H           equ	4055	;# 
   381   000FD8                     STATUS          equ	4056	;# 
   382   000FD9                     FSR2            equ	4057	;# 
   383   000FD9                     FSR2L           equ	4057	;# 
   384   000FDA                     FSR2H           equ	4058	;# 
   385   000FDB                     PLUSW2          equ	4059	;# 
   386   000FDC                     PREINC2         equ	4060	;# 
   387   000FDD                     POSTDEC2        equ	4061	;# 
   388   000FDE                     POSTINC2        equ	4062	;# 
   389   000FDF                     INDF2           equ	4063	;# 
   390   000FE0                     BSR             equ	4064	;# 
   391   000FE1                     FSR1            equ	4065	;# 
   392   000FE1                     FSR1L           equ	4065	;# 
   393   000FE2                     FSR1H           equ	4066	;# 
   394   000FE3                     PLUSW1          equ	4067	;# 
   395   000FE4                     PREINC1         equ	4068	;# 
   396   000FE5                     POSTDEC1        equ	4069	;# 
   397   000FE6                     POSTINC1        equ	4070	;# 
   398   000FE7                     INDF1           equ	4071	;# 
   399   000FE8                     WREG            equ	4072	;# 
   400   000FE9                     FSR0            equ	4073	;# 
   401   000FE9                     FSR0L           equ	4073	;# 
   402   000FEA                     FSR0H           equ	4074	;# 
   403   000FEB                     PLUSW0          equ	4075	;# 
   404   000FEC                     PREINC0         equ	4076	;# 
   405   000FED                     POSTDEC0        equ	4077	;# 
   406   000FEE                     POSTINC0        equ	4078	;# 
   407   000FEF                     INDF0           equ	4079	;# 
   408   000FF0                     INTCON3         equ	4080	;# 
   409   000FF1                     INTCON2         equ	4081	;# 
   410   000FF2                     INTCON          equ	4082	;# 
   411   000FF3                     PROD            equ	4083	;# 
   412   000FF3                     PRODL           equ	4083	;# 
   413   000FF4                     PRODH           equ	4084	;# 
   414   000FF5                     TABLAT          equ	4085	;# 
   415   000FF6                     TBLPTR          equ	4086	;# 
   416   000FF6                     TBLPTRL         equ	4086	;# 
   417   000FF7                     TBLPTRH         equ	4087	;# 
   418   000FF8                     TBLPTRU         equ	4088	;# 
   419   000FF9                     PCLAT           equ	4089	;# 
   420   000FF9                     PC              equ	4089	;# 
   421   000FF9                     PCL             equ	4089	;# 
   422   000FFA                     PCLATH          equ	4090	;# 
   423   000FFB                     PCLATU          equ	4091	;# 
   424   000FFC                     STKPTR          equ	4092	;# 
   425   000FFD                     TOS             equ	4093	;# 
   426   000FFD                     TOSL            equ	4093	;# 
   427   000FFE                     TOSH            equ	4094	;# 
   428   000FFF                     TOSU            equ	4095	;# 
   429   000F80                     PORTA           equ	3968	;# 
   430   000F81                     PORTB           equ	3969	;# 
   431   000F82                     PORTC           equ	3970	;# 
   432   000F83                     PORTD           equ	3971	;# 
   433   000F84                     PORTE           equ	3972	;# 
   434   000F89                     LATA            equ	3977	;# 
   435   000F8A                     LATB            equ	3978	;# 
   436   000F8B                     LATC            equ	3979	;# 
   437   000F8C                     LATD            equ	3980	;# 
   438   000F8D                     LATE            equ	3981	;# 
   439   000F92                     TRISA           equ	3986	;# 
   440   000F92                     DDRA            equ	3986	;# 
   441   000F93                     TRISB           equ	3987	;# 
   442   000F93                     DDRB            equ	3987	;# 
   443   000F94                     TRISC           equ	3988	;# 
   444   000F94                     DDRC            equ	3988	;# 
   445   000F95                     TRISD           equ	3989	;# 
   446   000F95                     DDRD            equ	3989	;# 
   447   000F96                     TRISE           equ	3990	;# 
   448   000F96                     DDRE            equ	3990	;# 
   449   000F9B                     OSCTUNE         equ	3995	;# 
   450   000F9D                     PIE1            equ	3997	;# 
   451   000F9E                     PIR1            equ	3998	;# 
   452   000F9F                     IPR1            equ	3999	;# 
   453   000FA0                     PIE2            equ	4000	;# 
   454   000FA1                     PIR2            equ	4001	;# 
   455   000FA2                     IPR2            equ	4002	;# 
   456   000FA6                     EECON1          equ	4006	;# 
   457   000FA7                     EECON2          equ	4007	;# 
   458   000FA8                     EEDATA          equ	4008	;# 
   459   000FA9                     EEADR           equ	4009	;# 
   460   000FAB                     RCSTA           equ	4011	;# 
   461   000FAB                     RCSTA1          equ	4011	;# 
   462   000FAC                     TXSTA           equ	4012	;# 
   463   000FAC                     TXSTA1          equ	4012	;# 
   464   000FAD                     TXREG           equ	4013	;# 
   465   000FAD                     TXREG1          equ	4013	;# 
   466   000FAE                     RCREG           equ	4014	;# 
   467   000FAE                     RCREG1          equ	4014	;# 
   468   000FAF                     SPBRG           equ	4015	;# 
   469   000FAF                     SPBRG1          equ	4015	;# 
   470   000FB0                     SPBRGH          equ	4016	;# 
   471   000FB1                     T3CON           equ	4017	;# 
   472   000FB2                     TMR3            equ	4018	;# 
   473   000FB2                     TMR3L           equ	4018	;# 
   474   000FB3                     TMR3H           equ	4019	;# 
   475   000FB4                     CMCON           equ	4020	;# 
   476   000FB5                     CVRCON          equ	4021	;# 
   477   000FB6                     ECCP1AS         equ	4022	;# 
   478   000FB7                     ECCP1DEL        equ	4023	;# 
   479   000FB7                     PWM1CON         equ	4023	;# 
   480   000FB8                     BAUDCON         equ	4024	;# 
   481   000FB8                     BAUDCTL         equ	4024	;# 
   482   000FBA                     CCP2CON         equ	4026	;# 
   483   000FBB                     CCPR2           equ	4027	;# 
   484   000FBB                     CCPR2L          equ	4027	;# 
   485   000FBC                     CCPR2H          equ	4028	;# 
   486   000FBD                     CCP1CON         equ	4029	;# 
   487   000FBD                     ECCP1CON        equ	4029	;# 
   488   000FBE                     CCPR1           equ	4030	;# 
   489   000FBE                     CCPR1L          equ	4030	;# 
   490   000FBF                     CCPR1H          equ	4031	;# 
   491   000FC0                     ADCON2          equ	4032	;# 
   492   000FC1                     ADCON1          equ	4033	;# 
   493   000FC2                     ADCON0          equ	4034	;# 
   494   000FC3                     ADRES           equ	4035	;# 
   495   000FC3                     ADRESL          equ	4035	;# 
   496   000FC4                     ADRESH          equ	4036	;# 
   497   000FC5                     SSPCON2         equ	4037	;# 
   498   000FC6                     SSPCON1         equ	4038	;# 
   499   000FC7                     SSPSTAT         equ	4039	;# 
   500   000FC8                     SSPADD          equ	4040	;# 
   501   000FC9                     SSPBUF          equ	4041	;# 
   502   000FCA                     T2CON           equ	4042	;# 
   503   000FCB                     PR2             equ	4043	;# 
   504   000FCB                     MEMCON          equ	4043	;# 
   505   000FCC                     TMR2            equ	4044	;# 
   506   000FCD                     T1CON           equ	4045	;# 
   507   000FCE                     TMR1            equ	4046	;# 
   508   000FCE                     TMR1L           equ	4046	;# 
   509   000FCF                     TMR1H           equ	4047	;# 
   510   000FD0                     RCON            equ	4048	;# 
   511   000FD1                     WDTCON          equ	4049	;# 
   512   000FD2                     HLVDCON         equ	4050	;# 
   513   000FD2                     LVDCON          equ	4050	;# 
   514   000FD3                     OSCCON          equ	4051	;# 
   515   000FD5                     T0CON           equ	4053	;# 
   516   000FD6                     TMR0            equ	4054	;# 
   517   000FD6                     TMR0L           equ	4054	;# 
   518   000FD7                     TMR0H           equ	4055	;# 
   519   000FD8                     STATUS          equ	4056	;# 
   520   000FD9                     FSR2            equ	4057	;# 
   521   000FD9                     FSR2L           equ	4057	;# 
   522   000FDA                     FSR2H           equ	4058	;# 
   523   000FDB                     PLUSW2          equ	4059	;# 
   524   000FDC                     PREINC2         equ	4060	;# 
   525   000FDD                     POSTDEC2        equ	4061	;# 
   526   000FDE                     POSTINC2        equ	4062	;# 
   527   000FDF                     INDF2           equ	4063	;# 
   528   000FE0                     BSR             equ	4064	;# 
   529   000FE1                     FSR1            equ	4065	;# 
   530   000FE1                     FSR1L           equ	4065	;# 
   531   000FE2                     FSR1H           equ	4066	;# 
   532   000FE3                     PLUSW1          equ	4067	;# 
   533   000FE4                     PREINC1         equ	4068	;# 
   534   000FE5                     POSTDEC1        equ	4069	;# 
   535   000FE6                     POSTINC1        equ	4070	;# 
   536   000FE7                     INDF1           equ	4071	;# 
   537   000FE8                     WREG            equ	4072	;# 
   538   000FE9                     FSR0            equ	4073	;# 
   539   000FE9                     FSR0L           equ	4073	;# 
   540   000FEA                     FSR0H           equ	4074	;# 
   541   000FEB                     PLUSW0          equ	4075	;# 
   542   000FEC                     PREINC0         equ	4076	;# 
   543   000FED                     POSTDEC0        equ	4077	;# 
   544   000FEE                     POSTINC0        equ	4078	;# 
   545   000FEF                     INDF0           equ	4079	;# 
   546   000FF0                     INTCON3         equ	4080	;# 
   547   000FF1                     INTCON2         equ	4081	;# 
   548   000FF2                     INTCON          equ	4082	;# 
   549   000FF3                     PROD            equ	4083	;# 
   550   000FF3                     PRODL           equ	4083	;# 
   551   000FF4                     PRODH           equ	4084	;# 
   552   000FF5                     TABLAT          equ	4085	;# 
   553   000FF6                     TBLPTR          equ	4086	;# 
   554   000FF6                     TBLPTRL         equ	4086	;# 
   555   000FF7                     TBLPTRH         equ	4087	;# 
   556   000FF8                     TBLPTRU         equ	4088	;# 
   557   000FF9                     PCLAT           equ	4089	;# 
   558   000FF9                     PC              equ	4089	;# 
   559   000FF9                     PCL             equ	4089	;# 
   560   000FFA                     PCLATH          equ	4090	;# 
   561   000FFB                     PCLATU          equ	4091	;# 
   562   000FFC                     STKPTR          equ	4092	;# 
   563   000FFD                     TOS             equ	4093	;# 
   564   000FFD                     TOSL            equ	4093	;# 
   565   000FFE                     TOSH            equ	4094	;# 
   566   000FFF                     TOSU            equ	4095	;# 
   567   000F80                     PORTA           equ	3968	;# 
   568   000F81                     PORTB           equ	3969	;# 
   569   000F82                     PORTC           equ	3970	;# 
   570   000F83                     PORTD           equ	3971	;# 
   571   000F84                     PORTE           equ	3972	;# 
   572   000F89                     LATA            equ	3977	;# 
   573   000F8A                     LATB            equ	3978	;# 
   574   000F8B                     LATC            equ	3979	;# 
   575   000F8C                     LATD            equ	3980	;# 
   576   000F8D                     LATE            equ	3981	;# 
   577   000F92                     TRISA           equ	3986	;# 
   578   000F92                     DDRA            equ	3986	;# 
   579   000F93                     TRISB           equ	3987	;# 
   580   000F93                     DDRB            equ	3987	;# 
   581   000F94                     TRISC           equ	3988	;# 
   582   000F94                     DDRC            equ	3988	;# 
   583   000F95                     TRISD           equ	3989	;# 
   584   000F95                     DDRD            equ	3989	;# 
   585   000F96                     TRISE           equ	3990	;# 
   586   000F96                     DDRE            equ	3990	;# 
   587   000F9B                     OSCTUNE         equ	3995	;# 
   588   000F9D                     PIE1            equ	3997	;# 
   589   000F9E                     PIR1            equ	3998	;# 
   590   000F9F                     IPR1            equ	3999	;# 
   591   000FA0                     PIE2            equ	4000	;# 
   592   000FA1                     PIR2            equ	4001	;# 
   593   000FA2                     IPR2            equ	4002	;# 
   594   000FA6                     EECON1          equ	4006	;# 
   595   000FA7                     EECON2          equ	4007	;# 
   596   000FA8                     EEDATA          equ	4008	;# 
   597   000FA9                     EEADR           equ	4009	;# 
   598   000FAB                     RCSTA           equ	4011	;# 
   599   000FAB                     RCSTA1          equ	4011	;# 
   600   000FAC                     TXSTA           equ	4012	;# 
   601   000FAC                     TXSTA1          equ	4012	;# 
   602   000FAD                     TXREG           equ	4013	;# 
   603   000FAD                     TXREG1          equ	4013	;# 
   604   000FAE                     RCREG           equ	4014	;# 
   605   000FAE                     RCREG1          equ	4014	;# 
   606   000FAF                     SPBRG           equ	4015	;# 
   607   000FAF                     SPBRG1          equ	4015	;# 
   608   000FB0                     SPBRGH          equ	4016	;# 
   609   000FB1                     T3CON           equ	4017	;# 
   610   000FB2                     TMR3            equ	4018	;# 
   611   000FB2                     TMR3L           equ	4018	;# 
   612   000FB3                     TMR3H           equ	4019	;# 
   613   000FB4                     CMCON           equ	4020	;# 
   614   000FB5                     CVRCON          equ	4021	;# 
   615   000FB6                     ECCP1AS         equ	4022	;# 
   616   000FB7                     ECCP1DEL        equ	4023	;# 
   617   000FB7                     PWM1CON         equ	4023	;# 
   618   000FB8                     BAUDCON         equ	4024	;# 
   619   000FB8                     BAUDCTL         equ	4024	;# 
   620   000FBA                     CCP2CON         equ	4026	;# 
   621   000FBB                     CCPR2           equ	4027	;# 
   622   000FBB                     CCPR2L          equ	4027	;# 
   623   000FBC                     CCPR2H          equ	4028	;# 
   624   000FBD                     CCP1CON         equ	4029	;# 
   625   000FBD                     ECCP1CON        equ	4029	;# 
   626   000FBE                     CCPR1           equ	4030	;# 
   627   000FBE                     CCPR1L          equ	4030	;# 
   628   000FBF                     CCPR1H          equ	4031	;# 
   629   000FC0                     ADCON2          equ	4032	;# 
   630   000FC1                     ADCON1          equ	4033	;# 
   631   000FC2                     ADCON0          equ	4034	;# 
   632   000FC3                     ADRES           equ	4035	;# 
   633   000FC3                     ADRESL          equ	4035	;# 
   634   000FC4                     ADRESH          equ	4036	;# 
   635   000FC5                     SSPCON2         equ	4037	;# 
   636   000FC6                     SSPCON1         equ	4038	;# 
   637   000FC7                     SSPSTAT         equ	4039	;# 
   638   000FC8                     SSPADD          equ	4040	;# 
   639   000FC9                     SSPBUF          equ	4041	;# 
   640   000FCA                     T2CON           equ	4042	;# 
   641   000FCB                     PR2             equ	4043	;# 
   642   000FCB                     MEMCON          equ	4043	;# 
   643   000FCC                     TMR2            equ	4044	;# 
   644   000FCD                     T1CON           equ	4045	;# 
   645   000FCE                     TMR1            equ	4046	;# 
   646   000FCE                     TMR1L           equ	4046	;# 
   647   000FCF                     TMR1H           equ	4047	;# 
   648   000FD0                     RCON            equ	4048	;# 
   649   000FD1                     WDTCON          equ	4049	;# 
   650   000FD2                     HLVDCON         equ	4050	;# 
   651   000FD2                     LVDCON          equ	4050	;# 
   652   000FD3                     OSCCON          equ	4051	;# 
   653   000FD5                     T0CON           equ	4053	;# 
   654   000FD6                     TMR0            equ	4054	;# 
   655   000FD6                     TMR0L           equ	4054	;# 
   656   000FD7                     TMR0H           equ	4055	;# 
   657   000FD8                     STATUS          equ	4056	;# 
   658   000FD9                     FSR2            equ	4057	;# 
   659   000FD9                     FSR2L           equ	4057	;# 
   660   000FDA                     FSR2H           equ	4058	;# 
   661   000FDB                     PLUSW2          equ	4059	;# 
   662   000FDC                     PREINC2         equ	4060	;# 
   663   000FDD                     POSTDEC2        equ	4061	;# 
   664   000FDE                     POSTINC2        equ	4062	;# 
   665   000FDF                     INDF2           equ	4063	;# 
   666   000FE0                     BSR             equ	4064	;# 
   667   000FE1                     FSR1            equ	4065	;# 
   668   000FE1                     FSR1L           equ	4065	;# 
   669   000FE2                     FSR1H           equ	4066	;# 
   670   000FE3                     PLUSW1          equ	4067	;# 
   671   000FE4                     PREINC1         equ	4068	;# 
   672   000FE5                     POSTDEC1        equ	4069	;# 
   673   000FE6                     POSTINC1        equ	4070	;# 
   674   000FE7                     INDF1           equ	4071	;# 
   675   000FE8                     WREG            equ	4072	;# 
   676   000FE9                     FSR0            equ	4073	;# 
   677   000FE9                     FSR0L           equ	4073	;# 
   678   000FEA                     FSR0H           equ	4074	;# 
   679   000FEB                     PLUSW0          equ	4075	;# 
   680   000FEC                     PREINC0         equ	4076	;# 
   681   000FED                     POSTDEC0        equ	4077	;# 
   682   000FEE                     POSTINC0        equ	4078	;# 
   683   000FEF                     INDF0           equ	4079	;# 
   684   000FF0                     INTCON3         equ	4080	;# 
   685   000FF1                     INTCON2         equ	4081	;# 
   686   000FF2                     INTCON          equ	4082	;# 
   687   000FF3                     PROD            equ	4083	;# 
   688   000FF3                     PRODL           equ	4083	;# 
   689   000FF4                     PRODH           equ	4084	;# 
   690   000FF5                     TABLAT          equ	4085	;# 
   691   000FF6                     TBLPTR          equ	4086	;# 
   692   000FF6                     TBLPTRL         equ	4086	;# 
   693   000FF7                     TBLPTRH         equ	4087	;# 
   694   000FF8                     TBLPTRU         equ	4088	;# 
   695   000FF9                     PCLAT           equ	4089	;# 
   696   000FF9                     PC              equ	4089	;# 
   697   000FF9                     PCL             equ	4089	;# 
   698   000FFA                     PCLATH          equ	4090	;# 
   699   000FFB                     PCLATU          equ	4091	;# 
   700   000FFC                     STKPTR          equ	4092	;# 
   701   000FFD                     TOS             equ	4093	;# 
   702   000FFD                     TOSL            equ	4093	;# 
   703   000FFE                     TOSH            equ	4094	;# 
   704   000FFF                     TOSU            equ	4095	;# 
   705   000F80                     PORTA           equ	3968	;# 
   706   000F81                     PORTB           equ	3969	;# 
   707   000F82                     PORTC           equ	3970	;# 
   708   000F83                     PORTD           equ	3971	;# 
   709   000F84                     PORTE           equ	3972	;# 
   710   000F89                     LATA            equ	3977	;# 
   711   000F8A                     LATB            equ	3978	;# 
   712   000F8B                     LATC            equ	3979	;# 
   713   000F8C                     LATD            equ	3980	;# 
   714   000F8D                     LATE            equ	3981	;# 
   715   000F92                     TRISA           equ	3986	;# 
   716   000F92                     DDRA            equ	3986	;# 
   717   000F93                     TRISB           equ	3987	;# 
   718   000F93                     DDRB            equ	3987	;# 
   719   000F94                     TRISC           equ	3988	;# 
   720   000F94                     DDRC            equ	3988	;# 
   721   000F95                     TRISD           equ	3989	;# 
   722   000F95                     DDRD            equ	3989	;# 
   723   000F96                     TRISE           equ	3990	;# 
   724   000F96                     DDRE            equ	3990	;# 
   725   000F9B                     OSCTUNE         equ	3995	;# 
   726   000F9D                     PIE1            equ	3997	;# 
   727   000F9E                     PIR1            equ	3998	;# 
   728   000F9F                     IPR1            equ	3999	;# 
   729   000FA0                     PIE2            equ	4000	;# 
   730   000FA1                     PIR2            equ	4001	;# 
   731   000FA2                     IPR2            equ	4002	;# 
   732   000FA6                     EECON1          equ	4006	;# 
   733   000FA7                     EECON2          equ	4007	;# 
   734   000FA8                     EEDATA          equ	4008	;# 
   735   000FA9                     EEADR           equ	4009	;# 
   736   000FAB                     RCSTA           equ	4011	;# 
   737   000FAB                     RCSTA1          equ	4011	;# 
   738   000FAC                     TXSTA           equ	4012	;# 
   739   000FAC                     TXSTA1          equ	4012	;# 
   740   000FAD                     TXREG           equ	4013	;# 
   741   000FAD                     TXREG1          equ	4013	;# 
   742   000FAE                     RCREG           equ	4014	;# 
   743   000FAE                     RCREG1          equ	4014	;# 
   744   000FAF                     SPBRG           equ	4015	;# 
   745   000FAF                     SPBRG1          equ	4015	;# 
   746   000FB0                     SPBRGH          equ	4016	;# 
   747   000FB1                     T3CON           equ	4017	;# 
   748   000FB2                     TMR3            equ	4018	;# 
   749   000FB2                     TMR3L           equ	4018	;# 
   750   000FB3                     TMR3H           equ	4019	;# 
   751   000FB4                     CMCON           equ	4020	;# 
   752   000FB5                     CVRCON          equ	4021	;# 
   753   000FB6                     ECCP1AS         equ	4022	;# 
   754   000FB7                     ECCP1DEL        equ	4023	;# 
   755   000FB7                     PWM1CON         equ	4023	;# 
   756   000FB8                     BAUDCON         equ	4024	;# 
   757   000FB8                     BAUDCTL         equ	4024	;# 
   758   000FBA                     CCP2CON         equ	4026	;# 
   759   000FBB                     CCPR2           equ	4027	;# 
   760   000FBB                     CCPR2L          equ	4027	;# 
   761   000FBC                     CCPR2H          equ	4028	;# 
   762   000FBD                     CCP1CON         equ	4029	;# 
   763   000FBD                     ECCP1CON        equ	4029	;# 
   764   000FBE                     CCPR1           equ	4030	;# 
   765   000FBE                     CCPR1L          equ	4030	;# 
   766   000FBF                     CCPR1H          equ	4031	;# 
   767   000FC0                     ADCON2          equ	4032	;# 
   768   000FC1                     ADCON1          equ	4033	;# 
   769   000FC2                     ADCON0          equ	4034	;# 
   770   000FC3                     ADRES           equ	4035	;# 
   771   000FC3                     ADRESL          equ	4035	;# 
   772   000FC4                     ADRESH          equ	4036	;# 
   773   000FC5                     SSPCON2         equ	4037	;# 
   774   000FC6                     SSPCON1         equ	4038	;# 
   775   000FC7                     SSPSTAT         equ	4039	;# 
   776   000FC8                     SSPADD          equ	4040	;# 
   777   000FC9                     SSPBUF          equ	4041	;# 
   778   000FCA                     T2CON           equ	4042	;# 
   779   000FCB                     PR2             equ	4043	;# 
   780   000FCB                     MEMCON          equ	4043	;# 
   781   000FCC                     TMR2            equ	4044	;# 
   782   000FCD                     T1CON           equ	4045	;# 
   783   000FCE                     TMR1            equ	4046	;# 
   784   000FCE                     TMR1L           equ	4046	;# 
   785   000FCF                     TMR1H           equ	4047	;# 
   786   000FD0                     RCON            equ	4048	;# 
   787   000FD1                     WDTCON          equ	4049	;# 
   788   000FD2                     HLVDCON         equ	4050	;# 
   789   000FD2                     LVDCON          equ	4050	;# 
   790   000FD3                     OSCCON          equ	4051	;# 
   791   000FD5                     T0CON           equ	4053	;# 
   792   000FD6                     TMR0            equ	4054	;# 
   793   000FD6                     TMR0L           equ	4054	;# 
   794   000FD7                     TMR0H           equ	4055	;# 
   795   000FD8                     STATUS          equ	4056	;# 
   796   000FD9                     FSR2            equ	4057	;# 
   797   000FD9                     FSR2L           equ	4057	;# 
   798   000FDA                     FSR2H           equ	4058	;# 
   799   000FDB                     PLUSW2          equ	4059	;# 
   800   000FDC                     PREINC2         equ	4060	;# 
   801   000FDD                     POSTDEC2        equ	4061	;# 
   802   000FDE                     POSTINC2        equ	4062	;# 
   803   000FDF                     INDF2           equ	4063	;# 
   804   000FE0                     BSR             equ	4064	;# 
   805   000FE1                     FSR1            equ	4065	;# 
   806   000FE1                     FSR1L           equ	4065	;# 
   807   000FE2                     FSR1H           equ	4066	;# 
   808   000FE3                     PLUSW1          equ	4067	;# 
   809   000FE4                     PREINC1         equ	4068	;# 
   810   000FE5                     POSTDEC1        equ	4069	;# 
   811   000FE6                     POSTINC1        equ	4070	;# 
   812   000FE7                     INDF1           equ	4071	;# 
   813   000FE8                     WREG            equ	4072	;# 
   814   000FE9                     FSR0            equ	4073	;# 
   815   000FE9                     FSR0L           equ	4073	;# 
   816   000FEA                     FSR0H           equ	4074	;# 
   817   000FEB                     PLUSW0          equ	4075	;# 
   818   000FEC                     PREINC0         equ	4076	;# 
   819   000FED                     POSTDEC0        equ	4077	;# 
   820   000FEE                     POSTINC0        equ	4078	;# 
   821   000FEF                     INDF0           equ	4079	;# 
   822   000FF0                     INTCON3         equ	4080	;# 
   823   000FF1                     INTCON2         equ	4081	;# 
   824   000FF2                     INTCON          equ	4082	;# 
   825   000FF3                     PROD            equ	4083	;# 
   826   000FF3                     PRODL           equ	4083	;# 
   827   000FF4                     PRODH           equ	4084	;# 
   828   000FF5                     TABLAT          equ	4085	;# 
   829   000FF6                     TBLPTR          equ	4086	;# 
   830   000FF6                     TBLPTRL         equ	4086	;# 
   831   000FF7                     TBLPTRH         equ	4087	;# 
   832   000FF8                     TBLPTRU         equ	4088	;# 
   833   000FF9                     PCLAT           equ	4089	;# 
   834   000FF9                     PC              equ	4089	;# 
   835   000FF9                     PCL             equ	4089	;# 
   836   000FFA                     PCLATH          equ	4090	;# 
   837   000FFB                     PCLATU          equ	4091	;# 
   838   000FFC                     STKPTR          equ	4092	;# 
   839   000FFD                     TOS             equ	4093	;# 
   840   000FFD                     TOSL            equ	4093	;# 
   841   000FFE                     TOSH            equ	4094	;# 
   842   000FFF                     TOSU            equ	4095	;# 
   843   000F80                     PORTA           equ	3968	;# 
   844   000F81                     PORTB           equ	3969	;# 
   845   000F82                     PORTC           equ	3970	;# 
   846   000F83                     PORTD           equ	3971	;# 
   847   000F84                     PORTE           equ	3972	;# 
   848   000F89                     LATA            equ	3977	;# 
   849   000F8A                     LATB            equ	3978	;# 
   850   000F8B                     LATC            equ	3979	;# 
   851   000F8C                     LATD            equ	3980	;# 
   852   000F8D                     LATE            equ	3981	;# 
   853   000F92                     TRISA           equ	3986	;# 
   854   000F92                     DDRA            equ	3986	;# 
   855   000F93                     TRISB           equ	3987	;# 
   856   000F93                     DDRB            equ	3987	;# 
   857   000F94                     TRISC           equ	3988	;# 
   858   000F94                     DDRC            equ	3988	;# 
   859   000F95                     TRISD           equ	3989	;# 
   860   000F95                     DDRD            equ	3989	;# 
   861   000F96                     TRISE           equ	3990	;# 
   862   000F96                     DDRE            equ	3990	;# 
   863   000F9B                     OSCTUNE         equ	3995	;# 
   864   000F9D                     PIE1            equ	3997	;# 
   865   000F9E                     PIR1            equ	3998	;# 
   866   000F9F                     IPR1            equ	3999	;# 
   867   000FA0                     PIE2            equ	4000	;# 
   868   000FA1                     PIR2            equ	4001	;# 
   869   000FA2                     IPR2            equ	4002	;# 
   870   000FA6                     EECON1          equ	4006	;# 
   871   000FA7                     EECON2          equ	4007	;# 
   872   000FA8                     EEDATA          equ	4008	;# 
   873   000FA9                     EEADR           equ	4009	;# 
   874   000FAB                     RCSTA           equ	4011	;# 
   875   000FAB                     RCSTA1          equ	4011	;# 
   876   000FAC                     TXSTA           equ	4012	;# 
   877   000FAC                     TXSTA1          equ	4012	;# 
   878   000FAD                     TXREG           equ	4013	;# 
   879   000FAD                     TXREG1          equ	4013	;# 
   880   000FAE                     RCREG           equ	4014	;# 
   881   000FAE                     RCREG1          equ	4014	;# 
   882   000FAF                     SPBRG           equ	4015	;# 
   883   000FAF                     SPBRG1          equ	4015	;# 
   884   000FB0                     SPBRGH          equ	4016	;# 
   885   000FB1                     T3CON           equ	4017	;# 
   886   000FB2                     TMR3            equ	4018	;# 
   887   000FB2                     TMR3L           equ	4018	;# 
   888   000FB3                     TMR3H           equ	4019	;# 
   889   000FB4                     CMCON           equ	4020	;# 
   890   000FB5                     CVRCON          equ	4021	;# 
   891   000FB6                     ECCP1AS         equ	4022	;# 
   892   000FB7                     ECCP1DEL        equ	4023	;# 
   893   000FB7                     PWM1CON         equ	4023	;# 
   894   000FB8                     BAUDCON         equ	4024	;# 
   895   000FB8                     BAUDCTL         equ	4024	;# 
   896   000FBA                     CCP2CON         equ	4026	;# 
   897   000FBB                     CCPR2           equ	4027	;# 
   898   000FBB                     CCPR2L          equ	4027	;# 
   899   000FBC                     CCPR2H          equ	4028	;# 
   900   000FBD                     CCP1CON         equ	4029	;# 
   901   000FBD                     ECCP1CON        equ	4029	;# 
   902   000FBE                     CCPR1           equ	4030	;# 
   903   000FBE                     CCPR1L          equ	4030	;# 
   904   000FBF                     CCPR1H          equ	4031	;# 
   905   000FC0                     ADCON2          equ	4032	;# 
   906   000FC1                     ADCON1          equ	4033	;# 
   907   000FC2                     ADCON0          equ	4034	;# 
   908   000FC3                     ADRES           equ	4035	;# 
   909   000FC3                     ADRESL          equ	4035	;# 
   910   000FC4                     ADRESH          equ	4036	;# 
   911   000FC5                     SSPCON2         equ	4037	;# 
   912   000FC6                     SSPCON1         equ	4038	;# 
   913   000FC7                     SSPSTAT         equ	4039	;# 
   914   000FC8                     SSPADD          equ	4040	;# 
   915   000FC9                     SSPBUF          equ	4041	;# 
   916   000FCA                     T2CON           equ	4042	;# 
   917   000FCB                     PR2             equ	4043	;# 
   918   000FCB                     MEMCON          equ	4043	;# 
   919   000FCC                     TMR2            equ	4044	;# 
   920   000FCD                     T1CON           equ	4045	;# 
   921   000FCE                     TMR1            equ	4046	;# 
   922   000FCE                     TMR1L           equ	4046	;# 
   923   000FCF                     TMR1H           equ	4047	;# 
   924   000FD0                     RCON            equ	4048	;# 
   925   000FD1                     WDTCON          equ	4049	;# 
   926   000FD2                     HLVDCON         equ	4050	;# 
   927   000FD2                     LVDCON          equ	4050	;# 
   928   000FD3                     OSCCON          equ	4051	;# 
   929   000FD5                     T0CON           equ	4053	;# 
   930   000FD6                     TMR0            equ	4054	;# 
   931   000FD6                     TMR0L           equ	4054	;# 
   932   000FD7                     TMR0H           equ	4055	;# 
   933   000FD8                     STATUS          equ	4056	;# 
   934   000FD9                     FSR2            equ	4057	;# 
   935   000FD9                     FSR2L           equ	4057	;# 
   936   000FDA                     FSR2H           equ	4058	;# 
   937   000FDB                     PLUSW2          equ	4059	;# 
   938   000FDC                     PREINC2         equ	4060	;# 
   939   000FDD                     POSTDEC2        equ	4061	;# 
   940   000FDE                     POSTINC2        equ	4062	;# 
   941   000FDF                     INDF2           equ	4063	;# 
   942   000FE0                     BSR             equ	4064	;# 
   943   000FE1                     FSR1            equ	4065	;# 
   944   000FE1                     FSR1L           equ	4065	;# 
   945   000FE2                     FSR1H           equ	4066	;# 
   946   000FE3                     PLUSW1          equ	4067	;# 
   947   000FE4                     PREINC1         equ	4068	;# 
   948   000FE5                     POSTDEC1        equ	4069	;# 
   949   000FE6                     POSTINC1        equ	4070	;# 
   950   000FE7                     INDF1           equ	4071	;# 
   951   000FE8                     WREG            equ	4072	;# 
   952   000FE9                     FSR0            equ	4073	;# 
   953   000FE9                     FSR0L           equ	4073	;# 
   954   000FEA                     FSR0H           equ	4074	;# 
   955   000FEB                     PLUSW0          equ	4075	;# 
   956   000FEC                     PREINC0         equ	4076	;# 
   957   000FED                     POSTDEC0        equ	4077	;# 
   958   000FEE                     POSTINC0        equ	4078	;# 
   959   000FEF                     INDF0           equ	4079	;# 
   960   000FF0                     INTCON3         equ	4080	;# 
   961   000FF1                     INTCON2         equ	4081	;# 
   962   000FF2                     INTCON          equ	4082	;# 
   963   000FF3                     PROD            equ	4083	;# 
   964   000FF3                     PRODL           equ	4083	;# 
   965   000FF4                     PRODH           equ	4084	;# 
   966   000FF5                     TABLAT          equ	4085	;# 
   967   000FF6                     TBLPTR          equ	4086	;# 
   968   000FF6                     TBLPTRL         equ	4086	;# 
   969   000FF7                     TBLPTRH         equ	4087	;# 
   970   000FF8                     TBLPTRU         equ	4088	;# 
   971   000FF9                     PCLAT           equ	4089	;# 
   972   000FF9                     PC              equ	4089	;# 
   973   000FF9                     PCL             equ	4089	;# 
   974   000FFA                     PCLATH          equ	4090	;# 
   975   000FFB                     PCLATU          equ	4091	;# 
   976   000FFC                     STKPTR          equ	4092	;# 
   977   000FFD                     TOS             equ	4093	;# 
   978   000FFD                     TOSL            equ	4093	;# 
   979   000FFE                     TOSH            equ	4094	;# 
   980   000FFF                     TOSU            equ	4095	;# 
   981   000F80                     PORTA           equ	3968	;# 
   982   000F81                     PORTB           equ	3969	;# 
   983   000F82                     PORTC           equ	3970	;# 
   984   000F83                     PORTD           equ	3971	;# 
   985   000F84                     PORTE           equ	3972	;# 
   986   000F89                     LATA            equ	3977	;# 
   987   000F8A                     LATB            equ	3978	;# 
   988   000F8B                     LATC            equ	3979	;# 
   989   000F8C                     LATD            equ	3980	;# 
   990   000F8D                     LATE            equ	3981	;# 
   991   000F92                     TRISA           equ	3986	;# 
   992   000F92                     DDRA            equ	3986	;# 
   993   000F93                     TRISB           equ	3987	;# 
   994   000F93                     DDRB            equ	3987	;# 
   995   000F94                     TRISC           equ	3988	;# 
   996   000F94                     DDRC            equ	3988	;# 
   997   000F95                     TRISD           equ	3989	;# 
   998   000F95                     DDRD            equ	3989	;# 
   999   000F96                     TRISE           equ	3990	;# 
  1000   000F96                     DDRE            equ	3990	;# 
  1001   000F9B                     OSCTUNE         equ	3995	;# 
  1002   000F9D                     PIE1            equ	3997	;# 
  1003   000F9E                     PIR1            equ	3998	;# 
  1004   000F9F                     IPR1            equ	3999	;# 
  1005   000FA0                     PIE2            equ	4000	;# 
  1006   000FA1                     PIR2            equ	4001	;# 
  1007   000FA2                     IPR2            equ	4002	;# 
  1008   000FA6                     EECON1          equ	4006	;# 
  1009   000FA7                     EECON2          equ	4007	;# 
  1010   000FA8                     EEDATA          equ	4008	;# 
  1011   000FA9                     EEADR           equ	4009	;# 
  1012   000FAB                     RCSTA           equ	4011	;# 
  1013   000FAB                     RCSTA1          equ	4011	;# 
  1014   000FAC                     TXSTA           equ	4012	;# 
  1015   000FAC                     TXSTA1          equ	4012	;# 
  1016   000FAD                     TXREG           equ	4013	;# 
  1017   000FAD                     TXREG1          equ	4013	;# 
  1018   000FAE                     RCREG           equ	4014	;# 
  1019   000FAE                     RCREG1          equ	4014	;# 
  1020   000FAF                     SPBRG           equ	4015	;# 
  1021   000FAF                     SPBRG1          equ	4015	;# 
  1022   000FB0                     SPBRGH          equ	4016	;# 
  1023   000FB1                     T3CON           equ	4017	;# 
  1024   000FB2                     TMR3            equ	4018	;# 
  1025   000FB2                     TMR3L           equ	4018	;# 
  1026   000FB3                     TMR3H           equ	4019	;# 
  1027   000FB4                     CMCON           equ	4020	;# 
  1028   000FB5                     CVRCON          equ	4021	;# 
  1029   000FB6                     ECCP1AS         equ	4022	;# 
  1030   000FB7                     ECCP1DEL        equ	4023	;# 
  1031   000FB7                     PWM1CON         equ	4023	;# 
  1032   000FB8                     BAUDCON         equ	4024	;# 
  1033   000FB8                     BAUDCTL         equ	4024	;# 
  1034   000FBA                     CCP2CON         equ	4026	;# 
  1035   000FBB                     CCPR2           equ	4027	;# 
  1036   000FBB                     CCPR2L          equ	4027	;# 
  1037   000FBC                     CCPR2H          equ	4028	;# 
  1038   000FBD                     CCP1CON         equ	4029	;# 
  1039   000FBD                     ECCP1CON        equ	4029	;# 
  1040   000FBE                     CCPR1           equ	4030	;# 
  1041   000FBE                     CCPR1L          equ	4030	;# 
  1042   000FBF                     CCPR1H          equ	4031	;# 
  1043   000FC0                     ADCON2          equ	4032	;# 
  1044   000FC1                     ADCON1          equ	4033	;# 
  1045   000FC2                     ADCON0          equ	4034	;# 
  1046   000FC3                     ADRES           equ	4035	;# 
  1047   000FC3                     ADRESL          equ	4035	;# 
  1048   000FC4                     ADRESH          equ	4036	;# 
  1049   000FC5                     SSPCON2         equ	4037	;# 
  1050   000FC6                     SSPCON1         equ	4038	;# 
  1051   000FC7                     SSPSTAT         equ	4039	;# 
  1052   000FC8                     SSPADD          equ	4040	;# 
  1053   000FC9                     SSPBUF          equ	4041	;# 
  1054   000FCA                     T2CON           equ	4042	;# 
  1055   000FCB                     PR2             equ	4043	;# 
  1056   000FCB                     MEMCON          equ	4043	;# 
  1057   000FCC                     TMR2            equ	4044	;# 
  1058   000FCD                     T1CON           equ	4045	;# 
  1059   000FCE                     TMR1            equ	4046	;# 
  1060   000FCE                     TMR1L           equ	4046	;# 
  1061   000FCF                     TMR1H           equ	4047	;# 
  1062   000FD0                     RCON            equ	4048	;# 
  1063   000FD1                     WDTCON          equ	4049	;# 
  1064   000FD2                     HLVDCON         equ	4050	;# 
  1065   000FD2                     LVDCON          equ	4050	;# 
  1066   000FD3                     OSCCON          equ	4051	;# 
  1067   000FD5                     T0CON           equ	4053	;# 
  1068   000FD6                     TMR0            equ	4054	;# 
  1069   000FD6                     TMR0L           equ	4054	;# 
  1070   000FD7                     TMR0H           equ	4055	;# 
  1071   000FD8                     STATUS          equ	4056	;# 
  1072   000FD9                     FSR2            equ	4057	;# 
  1073   000FD9                     FSR2L           equ	4057	;# 
  1074   000FDA                     FSR2H           equ	4058	;# 
  1075   000FDB                     PLUSW2          equ	4059	;# 
  1076   000FDC                     PREINC2         equ	4060	;# 
  1077   000FDD                     POSTDEC2        equ	4061	;# 
  1078   000FDE                     POSTINC2        equ	4062	;# 
  1079   000FDF                     INDF2           equ	4063	;# 
  1080   000FE0                     BSR             equ	4064	;# 
  1081   000FE1                     FSR1            equ	4065	;# 
  1082   000FE1                     FSR1L           equ	4065	;# 
  1083   000FE2                     FSR1H           equ	4066	;# 
  1084   000FE3                     PLUSW1          equ	4067	;# 
  1085   000FE4                     PREINC1         equ	4068	;# 
  1086   000FE5                     POSTDEC1        equ	4069	;# 
  1087   000FE6                     POSTINC1        equ	4070	;# 
  1088   000FE7                     INDF1           equ	4071	;# 
  1089   000FE8                     WREG            equ	4072	;# 
  1090   000FE9                     FSR0            equ	4073	;# 
  1091   000FE9                     FSR0L           equ	4073	;# 
  1092   000FEA                     FSR0H           equ	4074	;# 
  1093   000FEB                     PLUSW0          equ	4075	;# 
  1094   000FEC                     PREINC0         equ	4076	;# 
  1095   000FED                     POSTDEC0        equ	4077	;# 
  1096   000FEE                     POSTINC0        equ	4078	;# 
  1097   000FEF                     INDF0           equ	4079	;# 
  1098   000FF0                     INTCON3         equ	4080	;# 
  1099   000FF1                     INTCON2         equ	4081	;# 
  1100   000FF2                     INTCON          equ	4082	;# 
  1101   000FF3                     PROD            equ	4083	;# 
  1102   000FF3                     PRODL           equ	4083	;# 
  1103   000FF4                     PRODH           equ	4084	;# 
  1104   000FF5                     TABLAT          equ	4085	;# 
  1105   000FF6                     TBLPTR          equ	4086	;# 
  1106   000FF6                     TBLPTRL         equ	4086	;# 
  1107   000FF7                     TBLPTRH         equ	4087	;# 
  1108   000FF8                     TBLPTRU         equ	4088	;# 
  1109   000FF9                     PCLAT           equ	4089	;# 
  1110   000FF9                     PC              equ	4089	;# 
  1111   000FF9                     PCL             equ	4089	;# 
  1112   000FFA                     PCLATH          equ	4090	;# 
  1113   000FFB                     PCLATU          equ	4091	;# 
  1114   000FFC                     STKPTR          equ	4092	;# 
  1115   000FFD                     TOS             equ	4093	;# 
  1116   000FFD                     TOSL            equ	4093	;# 
  1117   000FFE                     TOSH            equ	4094	;# 
  1118   000FFF                     TOSU            equ	4095	;# 
  1119   000F80                     PORTA           equ	3968	;# 
  1120   000F81                     PORTB           equ	3969	;# 
  1121   000F82                     PORTC           equ	3970	;# 
  1122   000F83                     PORTD           equ	3971	;# 
  1123   000F84                     PORTE           equ	3972	;# 
  1124   000F89                     LATA            equ	3977	;# 
  1125   000F8A                     LATB            equ	3978	;# 
  1126   000F8B                     LATC            equ	3979	;# 
  1127   000F8C                     LATD            equ	3980	;# 
  1128   000F8D                     LATE            equ	3981	;# 
  1129   000F92                     TRISA           equ	3986	;# 
  1130   000F92                     DDRA            equ	3986	;# 
  1131   000F93                     TRISB           equ	3987	;# 
  1132   000F93                     DDRB            equ	3987	;# 
  1133   000F94                     TRISC           equ	3988	;# 
  1134   000F94                     DDRC            equ	3988	;# 
  1135   000F95                     TRISD           equ	3989	;# 
  1136   000F95                     DDRD            equ	3989	;# 
  1137   000F96                     TRISE           equ	3990	;# 
  1138   000F96                     DDRE            equ	3990	;# 
  1139   000F9B                     OSCTUNE         equ	3995	;# 
  1140   000F9D                     PIE1            equ	3997	;# 
  1141   000F9E                     PIR1            equ	3998	;# 
  1142   000F9F                     IPR1            equ	3999	;# 
  1143   000FA0                     PIE2            equ	4000	;# 
  1144   000FA1                     PIR2            equ	4001	;# 
  1145   000FA2                     IPR2            equ	4002	;# 
  1146   000FA6                     EECON1          equ	4006	;# 
  1147   000FA7                     EECON2          equ	4007	;# 
  1148   000FA8                     EEDATA          equ	4008	;# 
  1149   000FA9                     EEADR           equ	4009	;# 
  1150   000FAB                     RCSTA           equ	4011	;# 
  1151   000FAB                     RCSTA1          equ	4011	;# 
  1152   000FAC                     TXSTA           equ	4012	;# 
  1153   000FAC                     TXSTA1          equ	4012	;# 
  1154   000FAD                     TXREG           equ	4013	;# 
  1155   000FAD                     TXREG1          equ	4013	;# 
  1156   000FAE                     RCREG           equ	4014	;# 
  1157   000FAE                     RCREG1          equ	4014	;# 
  1158   000FAF                     SPBRG           equ	4015	;# 
  1159   000FAF                     SPBRG1          equ	4015	;# 
  1160   000FB0                     SPBRGH          equ	4016	;# 
  1161   000FB1                     T3CON           equ	4017	;# 
  1162   000FB2                     TMR3            equ	4018	;# 
  1163   000FB2                     TMR3L           equ	4018	;# 
  1164   000FB3                     TMR3H           equ	4019	;# 
  1165   000FB4                     CMCON           equ	4020	;# 
  1166   000FB5                     CVRCON          equ	4021	;# 
  1167   000FB6                     ECCP1AS         equ	4022	;# 
  1168   000FB7                     ECCP1DEL        equ	4023	;# 
  1169   000FB7                     PWM1CON         equ	4023	;# 
  1170   000FB8                     BAUDCON         equ	4024	;# 
  1171   000FB8                     BAUDCTL         equ	4024	;# 
  1172   000FBA                     CCP2CON         equ	4026	;# 
  1173   000FBB                     CCPR2           equ	4027	;# 
  1174   000FBB                     CCPR2L          equ	4027	;# 
  1175   000FBC                     CCPR2H          equ	4028	;# 
  1176   000FBD                     CCP1CON         equ	4029	;# 
  1177   000FBD                     ECCP1CON        equ	4029	;# 
  1178   000FBE                     CCPR1           equ	4030	;# 
  1179   000FBE                     CCPR1L          equ	4030	;# 
  1180   000FBF                     CCPR1H          equ	4031	;# 
  1181   000FC0                     ADCON2          equ	4032	;# 
  1182   000FC1                     ADCON1          equ	4033	;# 
  1183   000FC2                     ADCON0          equ	4034	;# 
  1184   000FC3                     ADRES           equ	4035	;# 
  1185   000FC3                     ADRESL          equ	4035	;# 
  1186   000FC4                     ADRESH          equ	4036	;# 
  1187   000FC5                     SSPCON2         equ	4037	;# 
  1188   000FC6                     SSPCON1         equ	4038	;# 
  1189   000FC7                     SSPSTAT         equ	4039	;# 
  1190   000FC8                     SSPADD          equ	4040	;# 
  1191   000FC9                     SSPBUF          equ	4041	;# 
  1192   000FCA                     T2CON           equ	4042	;# 
  1193   000FCB                     PR2             equ	4043	;# 
  1194   000FCB                     MEMCON          equ	4043	;# 
  1195   000FCC                     TMR2            equ	4044	;# 
  1196   000FCD                     T1CON           equ	4045	;# 
  1197   000FCE                     TMR1            equ	4046	;# 
  1198   000FCE                     TMR1L           equ	4046	;# 
  1199   000FCF                     TMR1H           equ	4047	;# 
  1200   000FD0                     RCON            equ	4048	;# 
  1201   000FD1                     WDTCON          equ	4049	;# 
  1202   000FD2                     HLVDCON         equ	4050	;# 
  1203   000FD2                     LVDCON          equ	4050	;# 
  1204   000FD3                     OSCCON          equ	4051	;# 
  1205   000FD5                     T0CON           equ	4053	;# 
  1206   000FD6                     TMR0            equ	4054	;# 
  1207   000FD6                     TMR0L           equ	4054	;# 
  1208   000FD7                     TMR0H           equ	4055	;# 
  1209   000FD8                     STATUS          equ	4056	;# 
  1210   000FD9                     FSR2            equ	4057	;# 
  1211   000FD9                     FSR2L           equ	4057	;# 
  1212   000FDA                     FSR2H           equ	4058	;# 
  1213   000FDB                     PLUSW2          equ	4059	;# 
  1214   000FDC                     PREINC2         equ	4060	;# 
  1215   000FDD                     POSTDEC2        equ	4061	;# 
  1216   000FDE                     POSTINC2        equ	4062	;# 
  1217   000FDF                     INDF2           equ	4063	;# 
  1218   000FE0                     BSR             equ	4064	;# 
  1219   000FE1                     FSR1            equ	4065	;# 
  1220   000FE1                     FSR1L           equ	4065	;# 
  1221   000FE2                     FSR1H           equ	4066	;# 
  1222   000FE3                     PLUSW1          equ	4067	;# 
  1223   000FE4                     PREINC1         equ	4068	;# 
  1224   000FE5                     POSTDEC1        equ	4069	;# 
  1225   000FE6                     POSTINC1        equ	4070	;# 
  1226   000FE7                     INDF1           equ	4071	;# 
  1227   000FE8                     WREG            equ	4072	;# 
  1228   000FE9                     FSR0            equ	4073	;# 
  1229   000FE9                     FSR0L           equ	4073	;# 
  1230   000FEA                     FSR0H           equ	4074	;# 
  1231   000FEB                     PLUSW0          equ	4075	;# 
  1232   000FEC                     PREINC0         equ	4076	;# 
  1233   000FED                     POSTDEC0        equ	4077	;# 
  1234   000FEE                     POSTINC0        equ	4078	;# 
  1235   000FEF                     INDF0           equ	4079	;# 
  1236   000FF0                     INTCON3         equ	4080	;# 
  1237   000FF1                     INTCON2         equ	4081	;# 
  1238   000FF2                     INTCON          equ	4082	;# 
  1239   000FF3                     PROD            equ	4083	;# 
  1240   000FF3                     PRODL           equ	4083	;# 
  1241   000FF4                     PRODH           equ	4084	;# 
  1242   000FF5                     TABLAT          equ	4085	;# 
  1243   000FF6                     TBLPTR          equ	4086	;# 
  1244   000FF6                     TBLPTRL         equ	4086	;# 
  1245   000FF7                     TBLPTRH         equ	4087	;# 
  1246   000FF8                     TBLPTRU         equ	4088	;# 
  1247   000FF9                     PCLAT           equ	4089	;# 
  1248   000FF9                     PC              equ	4089	;# 
  1249   000FF9                     PCL             equ	4089	;# 
  1250   000FFA                     PCLATH          equ	4090	;# 
  1251   000FFB                     PCLATU          equ	4091	;# 
  1252   000FFC                     STKPTR          equ	4092	;# 
  1253   000FFD                     TOS             equ	4093	;# 
  1254   000FFD                     TOSL            equ	4093	;# 
  1255   000FFE                     TOSH            equ	4094	;# 
  1256   000FFF                     TOSU            equ	4095	;# 
  1257                           
  1258                           	psect	idataCOMRAM
  1259   001CD6                     __pidataCOMRAM:
  1260                           	callstack 0
  1261                           
  1262                           ;initializer for _currentTime
  1263   001CD6  30                 	db	48
  1264   001CD7  30                 	db	48
  1265   001CD8  30                 	db	48
  1266   001CD9  30                 	db	48
  1267                           
  1268                           ;initializer for motor_Read@MAX_TIMEOUT
  1269   001CDA  03E8               	dw	1000
  1270                           
  1271                           ;initializer for _index
  1272   001CDC  04                 	db	4
  1273                           
  1274                           	psect	idataBANK0
  1275   001B42                     __pidataBANK0:
  1276                           	callstack 0
  1277                           
  1278                           ;initializer for _userUIDs
  1279   001B42  65                 	db	101
  1280   001B43  DC                 	db	220
  1281   001B44  F9                 	db	249
  1282   001B45  03                 	db	3
  1283   001B46  43                 	db	67
  1284   001B47  DC                 	db	220
  1285   001B48  0D                 	db	13
  1286   001B49  F9                 	db	249
  1287   001B4A  03                 	db	3
  1288   001B4B  2B                 	db	43
  1289   001B4C  DF                 	db	223
  1290   001B4D  8B                 	db	139
  1291   001B4E  DF                 	db	223
  1292   001B4F  C4                 	db	196
  1293   001B50  4F                 	db	79
  1294   001B51  21                 	db	33
  1295   001B52  32                 	db	50
  1296   001B53  A9                 	db	169
  1297   001B54  89                 	db	137
  1298   001B55  33                 	db	51
  1299   001B56  00                 	db	0
  1300   001B57  00                 	db	0
  1301   001B58  00                 	db	0
  1302   001B59  00                 	db	0
  1303   001B5A  00                 	db	0
  1304                           
  1305                           ;initializer for controlLED@ledBits
  1306   001B5B  01                 	db	1
  1307   001B5C  02                 	db	2
  1308   001B5D  04                 	db	4
  1309   001B5E  08                 	db	8
  1310   001B5F  10                 	db	16
  1311   001B60  20                 	db	32
  1312                           
  1313                           ;initializer for _colValues
  1314   001B61  20                 	db	32
  1315   001B62  40                 	db	64
  1316   001B63  10                 	db	16
  1317                           
  1318                           ;initializer for motorTerminal@hour
  1319   001B64  30                 	db	48
  1320   001B65  30                 	db	48
  1321   001B66  30                 	db	48
  1322   001B67  30                 	db	48
  1323                           
  1324                           	psect	mediumconst
  1325   001E2A                     __pmediumconst:
  1326                           	callstack 0
  1327   001E2A  00                 	db	0
  1328   001E2B                     printfUID@hex:
  1329                           	callstack 0
  1330   001E2B  30                 	db	48
  1331   001E2C  31                 	db	49
  1332   001E2D  32                 	db	50
  1333   001E2E  33                 	db	51
  1334   001E2F  34                 	db	52
  1335   001E30  35                 	db	53
  1336   001E31  36                 	db	54
  1337   001E32  37                 	db	55
  1338   001E33  38                 	db	56
  1339   001E34  39                 	db	57
  1340   001E35  41                 	db	65
  1341   001E36  42                 	db	66
  1342   001E37  43                 	db	67
  1343   001E38  44                 	db	68
  1344   001E39  45                 	db	69
  1345   001E3A  46                 	db	70
  1346   001E3B  00                 	db	0
  1347   001E3C                     __end_ofprintfUID@hex:
  1348                           	callstack 0
  1349   001E3C                     _keymap:
  1350                           	callstack 0
  1351   001E3C  01                 	db	1
  1352   001E3D  02                 	db	2
  1353   001E3E  03                 	db	3
  1354   001E3F  04                 	db	4
  1355   001E40  05                 	db	5
  1356   001E41  06                 	db	6
  1357   001E42  07                 	db	7
  1358   001E43  08                 	db	8
  1359   001E44  09                 	db	9
  1360   001E45  0A                 	db	10
  1361   001E46  00                 	db	0
  1362   001E47  0B                 	db	11
  1363   001E48                     __end_of_keymap:
  1364                           	callstack 0
  1365   007F92                     _TMR0IF         set	32658
  1366   000FD6                     _TMR0           set	4054
  1367   000FD5                     _T0CON          set	4053
  1368   000FAD                     _TXREG          set	4013
  1369   000FAE                     _RCREG          set	4014
  1370   000F9E                     _PIR1bits       set	3998
  1371   000FB8                     _BAUDCON        set	4024
  1372   000FAF                     _SPBRG          set	4015
  1373   000FAB                     _RCSTA          set	4011
  1374   000FAC                     _TXSTA          set	4012
  1375   000F83                     _PORTD          set	3971
  1376   000F8C                     _LATD           set	3980
  1377   000F95                     _TRISD          set	3989
  1378   000F94                     _TRISCbits      set	3988
  1379   000F82                     _PORTCbits      set	3970
  1380   000F8B                     _LATCbits       set	3979
  1381   000F89                     _LATA           set	3977
  1382   000F96                     _TRISE          set	3990
  1383   000F92                     _TRISA          set	3986
  1384   000F84                     _PORTEbits      set	3972
  1385   000F8A                     _LATBbits       set	3978
  1386   000F93                     _TRISBbits      set	3987
  1387   000F96                     _TRISEbits      set	3990
  1388   000FC1                     _ADCON1         set	4033
  1389   000F8D                     _LATEbits       set	3981
  1390   000FF2                     _INTCONbits     set	4082
  1391   001E48                     STR_6:
  1392   001E48  09                 	db	9
  1393   001E49  31                 	db	49	;'1'
  1394   001E4A  2E                 	db	46
  1395   001E4B  20                 	db	32
  1396   001E4C  51                 	db	81	;'Q'
  1397   001E4D  75                 	db	117	;'u'
  1398   001E4E  69                 	db	105	;'i'
  1399   001E4F  20                 	db	32
  1400   001E50  68                 	db	104	;'h'
  1401   001E51  69                 	db	105	;'i'
  1402   001E52  20                 	db	32
  1403   001E53  68                 	db	104	;'h'
  1404   001E54  61                 	db	97	;'a'
  1405   001E55  20                 	db	32
  1406   001E56  61                 	db	97	;'a'
  1407   001E57  20                 	db	32
  1408   001E58  6C                 	db	108	;'l'
  1409   001E59  61                 	db	97	;'a'
  1410   001E5A  20                 	db	32
  1411   001E5B  73                 	db	115	;'s'
  1412   001E5C  61                 	db	97	;'a'
  1413   001E5D  6C                 	db	108	;'l'
  1414   001E5E  61                 	db	97	;'a'
  1415   001E5F  3F                 	db	63	;'?'
  1416   001E60  0D                 	db	13
  1417   001E61  0A                 	db	10
  1418   001E62  09                 	db	9
  1419   001E63  32                 	db	50	;'2'
  1420   001E64  2E                 	db	46
  1421   001E65  20                 	db	32
  1422   001E66  4D                 	db	77	;'M'
  1423   001E67  6F                 	db	111	;'o'
  1424   001E68  73                 	db	115	;'s'
  1425   001E69  74                 	db	116	;'t'
  1426   001E6A  72                 	db	114	;'r'
  1427   001E6B  61                 	db	97	;'a'
  1428   001E6C  72                 	db	114	;'r'
  1429   001E6D  20                 	db	32
  1430   001E6E  63                 	db	99	;'c'
  1431   001E6F  6F                 	db	111	;'o'
  1432   001E70  6E                 	db	110	;'n'
  1433   001E71  66                 	db	102	;'f'
  1434   001E72  69                 	db	105	;'i'
  1435   001E73  67                 	db	103	;'g'
  1436   001E74  75                 	db	117	;'u'
  1437   001E75  72                 	db	114	;'r'
  1438   001E76  61                 	db	97	;'a'
  1439   001E77  63                 	db	99	;'c'
  1440   001E78  69                 	db	105	;'i'
  1441   001E79  6F                 	db	111	;'o'
  1442   001E7A  6E                 	db	110	;'n'
  1443   001E7B  73                 	db	115	;'s'
  1444   001E7C  0D                 	db	13
  1445   001E7D  0A                 	db	10
  1446   001E7E  09                 	db	9
  1447   001E7F  33                 	db	51	;'3'
  1448   001E80  2E                 	db	46
  1449   001E81  20                 	db	32
  1450   001E82  4D                 	db	77	;'M'
  1451   001E83  6F                 	db	111	;'o'
  1452   001E84  64                 	db	100	;'d'
  1453   001E85  69                 	db	105	;'i'
  1454   001E86  66                 	db	102	;'f'
  1455   001E87  69                 	db	105	;'i'
  1456   001E88  63                 	db	99	;'c'
  1457   001E89  61                 	db	97	;'a'
  1458   001E8A  72                 	db	114	;'r'
  1459   001E8B  20                 	db	32
  1460   001E8C  68                 	db	104	;'h'
  1461   001E8D  6F                 	db	111	;'o'
  1462   001E8E  72                 	db	114	;'r'
  1463   001E8F  61                 	db	97	;'a'
  1464   001E90  20                 	db	32
  1465   001E91  64                 	db	100	;'d'
  1466   001E92  65                 	db	101	;'e'
  1467   001E93  6C                 	db	108	;'l'
  1468   001E94  20                 	db	32
  1469   001E95  73                 	db	115	;'s'
  1470   001E96  69                 	db	105	;'i'
  1471   001E97  73                 	db	115	;'s'
  1472   001E98  74                 	db	116	;'t'
  1473   001E99  65                 	db	101	;'e'
  1474   001E9A  6D                 	db	109	;'m'
  1475   001E9B  61                 	db	97	;'a'
  1476   001E9C  0D                 	db	13
  1477   001E9D  0A                 	db	10
  1478   001E9E  4F                 	db	79	;'O'
  1479   001E9F  70                 	db	112	;'p'
  1480   001EA0  63                 	db	99	;'c'
  1481   001EA1  69                 	db	105	;'i'
  1482   001EA2  C3                 	db	-61
  1483   001EA3  B3                 	db	-77
  1484   001EA4  3A                 	db	58	;':'
  1485   001EA5  20                 	db	32
  1486   001EA6  00                 	db	0
  1487   001EA7                     STR_5:
  1488   001EA7  4D                 	db	77	;'M'
  1489   001EA8  65                 	db	101	;'e'
  1490   001EA9  6E                 	db	110	;'n'
  1491   001EAA  C3                 	db	-61
  1492   001EAB  BA                 	db	-70
  1493   001EAC  20                 	db	32
  1494   001EAD  70                 	db	112	;'p'
  1495   001EAE  72                 	db	114	;'r'
  1496   001EAF  69                 	db	105	;'i'
  1497   001EB0  6E                 	db	110	;'n'
  1498   001EB1  63                 	db	99	;'c'
  1499   001EB2  69                 	db	105	;'i'
  1500   001EB3  70                 	db	112	;'p'
  1501   001EB4  61                 	db	97	;'a'
  1502   001EB5  6C                 	db	108	;'l'
  1503   001EB6  0D                 	db	13
  1504   001EB7  0A                 	db	10
  1505   001EB8  2D                 	db	45
  1506   001EB9  2D                 	db	45
  1507   001EBA  2D                 	db	45
  1508   001EBB  2D                 	db	45
  1509   001EBC  2D                 	db	45
  1510   001EBD  2D                 	db	45
  1511   001EBE  2D                 	db	45
  1512   001EBF  2D                 	db	45
  1513   001EC0  2D                 	db	45
  1514   001EC1  2D                 	db	45
  1515   001EC2  2D                 	db	45
  1516   001EC3  2D                 	db	45
  1517   001EC4  2D                 	db	45
  1518   001EC5  2D                 	db	45
  1519   001EC6  2D                 	db	45
  1520   001EC7  0D                 	db	13
  1521   001EC8  0A                 	db	10
  1522   001EC9  54                 	db	84	;'T'
  1523   001ECA  72                 	db	114	;'r'
  1524   001ECB  69                 	db	105	;'i'
  1525   001ECC  61                 	db	97	;'a'
  1526   001ECD  20                 	db	32
  1527   001ECE  75                 	db	117	;'u'
  1528   001ECF  6E                 	db	110	;'n'
  1529   001ED0  61                 	db	97	;'a'
  1530   001ED1  20                 	db	32
  1531   001ED2  6F                 	db	111	;'o'
  1532   001ED3  70                 	db	112	;'p'
  1533   001ED4  63                 	db	99	;'c'
  1534   001ED5  69                 	db	105	;'i'
  1535   001ED6  C3                 	db	-61
  1536   001ED7  B3                 	db	-77
  1537   001ED8  3A                 	db	58	;':'
  1538   001ED9  0D                 	db	13
  1539   001EDA  0A                 	db	10
  1540   001EDB  00                 	db	0
  1541   001EDC                     STR_1:
  1542   001EDC  0D                 	db	13
  1543   001EDD  0A                 	db	10
  1544   001EDE  4C                 	db	76	;'L'
  1545   001EDF  27                 	db	39
  1546   001EE0  75                 	db	117	;'u'
  1547   001EE1  73                 	db	115	;'s'
  1548   001EE2  75                 	db	117	;'u'
  1549   001EE3  61                 	db	97	;'a'
  1550   001EE4  72                 	db	114	;'r'
  1551   001EE5  69                 	db	105	;'i'
  1552   001EE6  20                 	db	32
  1553   001EE7  68                 	db	104	;'h'
  1554   001EE8  61                 	db	97	;'a'
  1555   001EE9  20                 	db	32
  1556   001EEA  73                 	db	115	;'s'
  1557   001EEB  6F                 	db	111	;'o'
  1558   001EEC  72                 	db	114	;'r'
  1559   001EED  74                 	db	116	;'t'
  1560   001EEE  69                 	db	105	;'i'
  1561   001EEF  74                 	db	116	;'t'
  1562   001EF0  20                 	db	32
  1563   001EF1  64                 	db	100	;'d'
  1564   001EF2  65                 	db	101	;'e'
  1565   001EF3  20                 	db	32
  1566   001EF4  6C                 	db	108	;'l'
  1567   001EF5  61                 	db	97	;'a'
  1568   001EF6  20                 	db	32
  1569   001EF7  73                 	db	115	;'s'
  1570   001EF8  61                 	db	97	;'a'
  1571   001EF9  6C                 	db	108	;'l'
  1572   001EFA  61                 	db	97	;'a'
  1573   001EFB  0D                 	db	13
  1574   001EFC  0A                 	db	10
  1575   001EFD  00                 	db	0
  1576   001EFE                     STR_10:
  1577   001EFE  4E                 	db	78	;'N'
  1578   001EFF  6F                 	db	111	;'o'
  1579   001F00  20                 	db	32
  1580   001F01  68                 	db	104	;'h'
  1581   001F02  69                 	db	105	;'i'
  1582   001F03  20                 	db	32
  1583   001F04  68                 	db	104	;'h'
  1584   001F05  61                 	db	97	;'a'
  1585   001F06  20                 	db	32
  1586   001F07  63                 	db	99	;'c'
  1587   001F08  61                 	db	97	;'a'
  1588   001F09  70                 	db	112	;'p'
  1589   001F0A  20                 	db	32
  1590   001F0B  75                 	db	117	;'u'
  1591   001F0C  73                 	db	115	;'s'
  1592   001F0D  75                 	db	117	;'u'
  1593   001F0E  61                 	db	97	;'a'
  1594   001F0F  72                 	db	114	;'r'
  1595   001F10  69                 	db	105	;'i'
  1596   001F11  20                 	db	32
  1597   001F12  61                 	db	97	;'a'
  1598   001F13  20                 	db	32
  1599   001F14  6C                 	db	108	;'l'
  1600   001F15  61                 	db	97	;'a'
  1601   001F16  20                 	db	32
  1602   001F17  73                 	db	115	;'s'
  1603   001F18  61                 	db	97	;'a'
  1604   001F19  6C                 	db	108	;'l'
  1605   001F1A  61                 	db	97	;'a'
  1606   001F1B  2E                 	db	46
  1607   001F1C  0D                 	db	13
  1608   001F1D  0A                 	db	10
  1609   001F1E  00                 	db	0
  1610   001F1F                     STR_8:
  1611   001F1F  45                 	db	69	;'E'
  1612   001F20  52                 	db	82	;'R'
  1613   001F21  52                 	db	82	;'R'
  1614   001F22  4F                 	db	79	;'O'
  1615   001F23  52                 	db	82	;'R'
  1616   001F24  2E                 	db	46
  1617   001F25  20                 	db	32
  1618   001F26  56                 	db	86	;'V'
  1619   001F27  61                 	db	97	;'a'
  1620   001F28  6C                 	db	108	;'l'
  1621   001F29  6F                 	db	111	;'o'
  1622   001F2A  72                 	db	114	;'r'
  1623   001F2B  20                 	db	32
  1624   001F2C  69                 	db	105	;'i'
  1625   001F2D  6E                 	db	110	;'n'
  1626   001F2E  74                 	db	116	;'t'
  1627   001F2F  72                 	db	114	;'r'
  1628   001F30  6F                 	db	111	;'o'
  1629   001F31  64                 	db	100	;'d'
  1630   001F32  75                 	db	117	;'u'
  1631   001F33  69                 	db	105	;'i'
  1632   001F34  74                 	db	116	;'t'
  1633   001F35  20                 	db	32
  1634   001F36  65                 	db	101	;'e'
  1635   001F37  72                 	db	114	;'r'
  1636   001F38  72                 	db	114	;'r'
  1637   001F39  6F                 	db	111	;'o'
  1638   001F3A  6E                 	db	110	;'n'
  1639   001F3B  69                 	db	105	;'i'
  1640   001F3C  2E                 	db	46
  1641   001F3D  0D                 	db	13
  1642   001F3E  0A                 	db	10
  1643   001F3F  00                 	db	0
  1644   001F40                     STR_16:
  1645   001F40  0D                 	db	13
  1646   001F41  0A                 	db	10
  1647   001F42  48                 	db	72	;'H'
  1648   001F43  6F                 	db	111	;'o'
  1649   001F44  72                 	db	114	;'r'
  1650   001F45  61                 	db	97	;'a'
  1651   001F46  20                 	db	32
  1652   001F47  69                 	db	105	;'i'
  1653   001F48  6E                 	db	110	;'n'
  1654   001F49  74                 	db	116	;'t'
  1655   001F4A  72                 	db	114	;'r'
  1656   001F4B  6F                 	db	111	;'o'
  1657   001F4C  64                 	db	100	;'d'
  1658   001F4D  75                 	db	117	;'u'
  1659   001F4E  69                 	db	105	;'i'
  1660   001F4F  64                 	db	100	;'d'
  1661   001F50  61                 	db	97	;'a'
  1662   001F51  20                 	db	32
  1663   001F52  63                 	db	99	;'c'
  1664   001F53  6F                 	db	111	;'o'
  1665   001F54  72                 	db	114	;'r'
  1666   001F55  72                 	db	114	;'r'
  1667   001F56  65                 	db	101	;'e'
  1668   001F57  63                 	db	99	;'c'
  1669   001F58  74                 	db	116	;'t'
  1670   001F59  61                 	db	97	;'a'
  1671   001F5A  6D                 	db	109	;'m'
  1672   001F5B  65                 	db	101	;'e'
  1673   001F5C  6E                 	db	110	;'n'
  1674   001F5D  74                 	db	116	;'t'
  1675   001F5E  0D                 	db	13
  1676   001F5F  0A                 	db	10
  1677   001F60  00                 	db	0
  1678   001F61                     STR_15:
  1679   001F61  49                 	db	73	;'I'
  1680   001F62  6E                 	db	110	;'n'
  1681   001F63  74                 	db	116	;'t'
  1682   001F64  72                 	db	114	;'r'
  1683   001F65  6F                 	db	111	;'o'
  1684   001F66  64                 	db	100	;'d'
  1685   001F67  75                 	db	117	;'u'
  1686   001F68  63                 	db	99	;'c'
  1687   001F69  65                 	db	101	;'e'
  1688   001F6A  20                 	db	32
  1689   001F6B  6C                 	db	108	;'l'
  1690   001F6C  61                 	db	97	;'a'
  1691   001F6D  20                 	db	32
  1692   001F6E  68                 	db	104	;'h'
  1693   001F6F  6F                 	db	111	;'o'
  1694   001F70  72                 	db	114	;'r'
  1695   001F71  61                 	db	97	;'a'
  1696   001F72  20                 	db	32
  1697   001F73  61                 	db	97	;'a'
  1698   001F74  63                 	db	99	;'c'
  1699   001F75  74                 	db	116	;'t'
  1700   001F76  75                 	db	117	;'u'
  1701   001F77  61                 	db	97	;'a'
  1702   001F78  6C                 	db	108	;'l'
  1703   001F79  28                 	db	40
  1704   001F7A  48                 	db	72	;'H'
  1705   001F7B  48                 	db	72	;'H'
  1706   001F7C  4D                 	db	77	;'M'
  1707   001F7D  4D                 	db	77	;'M'
  1708   001F7E  29                 	db	41
  1709   001F7F  3A                 	db	58	;':'
  1710   001F80  20                 	db	32
  1711   001F81  00                 	db	0
  1712   001F82                     STR_3:
  1713   001F82  09                 	db	9
  1714   001F83  4E                 	db	78	;'N'
  1715   001F84  6F                 	db	111	;'o'
  1716   001F85  20                 	db	32
  1717   001F86  68                 	db	104	;'h'
  1718   001F87  61                 	db	97	;'a'
  1719   001F88  79                 	db	121	;'y'
  1720   001F89  20                 	db	32
  1721   001F8A  75                 	db	117	;'u'
  1722   001F8B  73                 	db	115	;'s'
  1723   001F8C  75                 	db	117	;'u'
  1724   001F8D  61                 	db	97	;'a'
  1725   001F8E  72                 	db	114	;'r'
  1726   001F8F  69                 	db	105	;'i'
  1727   001F90  6F                 	db	111	;'o'
  1728   001F91  20                 	db	32
  1729   001F92  63                 	db	99	;'c'
  1730   001F93  6F                 	db	111	;'o'
  1731   001F94  6E                 	db	110	;'n'
  1732   001F95  66                 	db	102	;'f'
  1733   001F96  69                 	db	105	;'i'
  1734   001F97  67                 	db	103	;'g'
  1735   001F98  75                 	db	117	;'u'
  1736   001F99  72                 	db	114	;'r'
  1737   001F9A  61                 	db	97	;'a'
  1738   001F9B  64                 	db	100	;'d'
  1739   001F9C  6F                 	db	111	;'o'
  1740   001F9D  0D                 	db	13
  1741   001F9E  0A                 	db	10
  1742   001F9F  00                 	db	0
  1743   001FA0                     STR_2:
  1744   001FA0  0D                 	db	13
  1745   001FA1  0A                 	db	10
  1746   001FA2  53                 	db	83	;'S'
  1747   001FA3  27                 	db	39
  1748   001FA4  68                 	db	104	;'h'
  1749   001FA5  61                 	db	97	;'a'
  1750   001FA6  6E                 	db	110	;'n'
  1751   001FA7  20                 	db	32
  1752   001FA8  72                 	db	114	;'r'
  1753   001FA9  65                 	db	101	;'e'
  1754   001FAA  73                 	db	115	;'s'
  1755   001FAB  65                 	db	101	;'e'
  1756   001FAC  74                 	db	116	;'t'
  1757   001FAD  65                 	db	101	;'e'
  1758   001FAE  6A                 	db	106	;'j'
  1759   001FAF  61                 	db	97	;'a'
  1760   001FB0  74                 	db	116	;'t'
  1761   001FB1  20                 	db	32
  1762   001FB2  6C                 	db	108	;'l'
  1763   001FB3  65                 	db	101	;'e'
  1764   001FB4  73                 	db	115	;'s'
  1765   001FB5  20                 	db	32
  1766   001FB6  64                 	db	100	;'d'
  1767   001FB7  61                 	db	97	;'a'
  1768   001FB8  64                 	db	100	;'d'
  1769   001FB9  65                 	db	101	;'e'
  1770   001FBA  73                 	db	115	;'s'
  1771   001FBB  0D                 	db	13
  1772   001FBC  0A                 	db	10
  1773   001FBD  00                 	db	0
  1774   001FBE                     STR_17:
  1775   001FBE  0D                 	db	13
  1776   001FBF  0A                 	db	10
  1777   001FC0  54                 	db	84	;'T'
  1778   001FC1  61                 	db	97	;'a'
  1779   001FC2  72                 	db	114	;'r'
  1780   001FC3  67                 	db	103	;'g'
  1781   001FC4  65                 	db	101	;'e'
  1782   001FC5  74                 	db	116	;'t'
  1783   001FC6  61                 	db	97	;'a'
  1784   001FC7  20                 	db	32
  1785   001FC8  64                 	db	100	;'d'
  1786   001FC9  65                 	db	101	;'e'
  1787   001FCA  74                 	db	116	;'t'
  1788   001FCB  65                 	db	101	;'e'
  1789   001FCC  63                 	db	99	;'c'
  1790   001FCD  74                 	db	116	;'t'
  1791   001FCE  61                 	db	97	;'a'
  1792   001FCF  64                 	db	100	;'d'
  1793   001FD0  61                 	db	97	;'a'
  1794   001FD1  21                 	db	33
  1795   001FD2  00                 	db	0
  1796   001FD3                     STR_4:
  1797   001FD3  2D                 	db	45
  1798   001FD4  2D                 	db	45
  1799   001FD5  2D                 	db	45
  1800   001FD6  2D                 	db	45
  1801   001FD7  2D                 	db	45
  1802   001FD8  2D                 	db	45
  1803   001FD9  2D                 	db	45
  1804   001FDA  2D                 	db	45
  1805   001FDB  2D                 	db	45
  1806   001FDC  2D                 	db	45
  1807   001FDD  2D                 	db	45
  1808   001FDE  2D                 	db	45
  1809   001FDF  2D                 	db	45
  1810   001FE0  2D                 	db	45
  1811   001FE1  2D                 	db	45
  1812   001FE2  0D                 	db	13
  1813   001FE3  0A                 	db	10
  1814   001FE4  00                 	db	0
  1815   001FE5                     STR_12:
  1816   001FE5  43                 	db	67	;'C'
  1817   001FE6  6F                 	db	111	;'o'
  1818   001FE7  6E                 	db	110	;'n'
  1819   001FE8  66                 	db	102	;'f'
  1820   001FE9  69                 	db	105	;'i'
  1821   001FEA  67                 	db	103	;'g'
  1822   001FEB  75                 	db	117	;'u'
  1823   001FEC  72                 	db	114	;'r'
  1824   001FED  61                 	db	97	;'a'
  1825   001FEE  63                 	db	99	;'c'
  1826   001FEF  69                 	db	105	;'i'
  1827   001FF0  6F                 	db	111	;'o'
  1828   001FF1  6E                 	db	110	;'n'
  1829   001FF2  73                 	db	115	;'s'
  1830   001FF3  3A                 	db	58	;':'
  1831   001FF4  0D                 	db	13
  1832   001FF5  0A                 	db	10
  1833   001FF6  00                 	db	0
  1834   001FF7                     STR_9:
  1835   001FF7  55                 	db	85	;'U'
  1836   001FF8  73                 	db	115	;'s'
  1837   001FF9  75                 	db	117	;'u'
  1838   001FFA  61                 	db	97	;'a'
  1839   001FFB  72                 	db	114	;'r'
  1840   001FFC  69                 	db	105	;'i'
  1841   001FFD  20                 	db	32
  1842   001FFE  00                 	db	0
  1843   001FF7                     STR_13          equ	STR_9
  1844   001FE2                     STR_7           equ	STR_4+15
  1845   001FE2                     STR_11          equ	STR_4+15
  1846   001FE2                     STR_14          equ	STR_4+15
  1847   001FFF  00                 	db	0	; dummy byte at the end
  1848   001E2A                     __smallconst    set	__pmediumconst
  1849   001E2A                     __mediumconst   set	__pmediumconst
  1850   000002                     __activetblptr  equ	2
  1851                           
  1852                           ; #config settings
  1853                           
  1854                           	psect	cinit
  1855   0014D0                     __pcinit:
  1856                           	callstack 0
  1857   0014D0                     start_initialization:
  1858                           	callstack 0
  1859   0014D0                     __initialization:
  1860                           	callstack 0
  1861                           
  1862                           ; Initialize objects allocated to BANK0 (38 bytes)
  1863                           ; load TBLPTR registers with __pidataBANK0
  1864   0014D0  0E42               	movlw	low __pidataBANK0
  1865   0014D2  6EF6               	movwf	tblptrl,c
  1866   0014D4  0E1B               	movlw	high __pidataBANK0
  1867   0014D6  6EF7               	movwf	tblptrh,c
  1868   0014D8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1869   0014DA  6EF8               	movwf	tblptru,c
  1870   0014DC  EE00  F0C8         	lfsr	0,__pdataBANK0
  1871   0014E0  EE10 F026          	lfsr	1,38
  1872   0014E4                     copy_data0:
  1873   0014E4  0009               	tblrd		*+
  1874   0014E6  CFF5 FFEE          	movff	tablat,postinc0
  1875   0014EA  50E5               	movf	postdec1,w,c
  1876   0014EC  50E1               	movf	fsr1l,w,c
  1877   0014EE  E1FA               	bnz	copy_data0
  1878                           
  1879                           ; Initialize objects allocated to COMRAM (7 bytes)
  1880                           ; load TBLPTR registers with __pidataCOMRAM
  1881   0014F0  0ED6               	movlw	low __pidataCOMRAM
  1882   0014F2  6EF6               	movwf	tblptrl,c
  1883   0014F4  0E1C               	movlw	high __pidataCOMRAM
  1884   0014F6  6EF7               	movwf	tblptrh,c
  1885   0014F8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1886   0014FA  6EF8               	movwf	tblptru,c
  1887   0014FC  EE00  F077         	lfsr	0,__pdataCOMRAM
  1888   001500  EE10 F007          	lfsr	1,7
  1889   001504                     copy_data1:
  1890   001504  0009               	tblrd		*+
  1891   001506  CFF5 FFEE          	movff	tablat,postinc0
  1892   00150A  50E5               	movf	postdec1,w,c
  1893   00150C  50E1               	movf	fsr1l,w,c
  1894   00150E  E1FA               	bnz	copy_data1
  1895                           
  1896                           ; Clear objects allocated to BANK1 (80 bytes)
  1897   001510  EE01  F000         	lfsr	0,__pbssBANK1
  1898   001514  0E50               	movlw	80
  1899   001516                     clear_0:
  1900   001516  6AEE               	clrf	postinc0,c
  1901   001518  06E8               	decf	wreg,f,c
  1902   00151A  E1FD               	bnz	clear_0
  1903                           
  1904                           ; Clear objects allocated to BANK0 (72 bytes)
  1905   00151C  EE00  F080         	lfsr	0,__pbssBANK0
  1906   001520  0E48               	movlw	72
  1907   001522                     clear_1:
  1908   001522  6AEE               	clrf	postinc0,c
  1909   001524  06E8               	decf	wreg,f,c
  1910   001526  E1FD               	bnz	clear_1
  1911                           
  1912                           ; Clear objects allocated to COMRAM (85 bytes)
  1913   001528  EE00  F001         	lfsr	0,__pbssCOMRAM
  1914   00152C  0E55               	movlw	85
  1915   00152E                     clear_2:
  1916   00152E  6AEE               	clrf	postinc0,c
  1917   001530  06E8               	decf	wreg,f,c
  1918   001532  E1FD               	bnz	clear_2
  1919   001534                     end_of_initialization:
  1920                           	callstack 0
  1921   001534                     __end_of__initialization:
  1922                           	callstack 0
  1923   001534  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1924   001536  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1925   001538  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1926   00153A  6EF8               	movwf	tblptru,c
  1927   00153C  0100               	movlb	0
  1928   00153E  EFD5  F00C         	goto	_main	;jump to C main() function
  1929                           
  1930                           	psect	bssCOMRAM
  1931   000001                     __pbssCOMRAM:
  1932                           	callstack 0
  1933   000001                     motor_RFID@UID:
  1934                           	callstack 0
  1935   000001                     	ds	6
  1936   000007                     _Tics:
  1937                           	callstack 0
  1938   000007                     	ds	4
  1939   00000B                     motor_LEDs@lastTics:
  1940                           	callstack 0
  1941   00000B                     	ds	4
  1942   00000F                     _str_ptr:
  1943                           	callstack 0
  1944   00000F                     	ds	2
  1945   000011                     	ds	2
  1946   000013                     motor_Read@timeout_counter:
  1947                           	callstack 0
  1948   000013                     	ds	2
  1949   000015                     setLed@ledIndex:
  1950                           	callstack 0
  1951   000015                     	ds	1
  1952   000016                     setLed@modeLED:
  1953                           	callstack 0
  1954   000016                     	ds	1
  1955   000017                     motor_datos@i:
  1956                           	callstack 0
  1957   000017                     	ds	1
  1958   000018                     motor_datos@lastChar:
  1959                           	callstack 0
  1960   000018                     	ds	1
  1961   000019                     motor_datos@pointer:
  1962                           	callstack 0
  1963   000019                     	ds	1
  1964   00001A                     motor_datos@state:
  1965                           	callstack 0
  1966   00001A                     	ds	1
  1967   00001B                     motor_setCurrentUser@state_setCurrentUser:
  1968                           	callstack 0
  1969   00001B                     	ds	1
  1970   00001C                     _new_user:
  1971                           	callstack 0
  1972   00001C                     	ds	1
  1973   00001D                     _new_configuration:
  1974                           	callstack 0
  1975   00001D                     	ds	1
  1976   00001E                     motorTerminal@userNumber:
  1977                           	callstack 0
  1978   00001E                     	ds	1
  1979   00001F                     motorTerminal@index:
  1980                           	callstack 0
  1981   00001F                     	ds	1
  1982   000020                     motorTerminal@state:
  1983                           	callstack 0
  1984   000020                     	ds	1
  1985   000021                     _sending_string:
  1986                           	callstack 0
  1987   000021                     	ds	1
  1988   000022                     _hashtag_pressed:
  1989                           	callstack 0
  1990   000022                     	ds	1
  1991   000023                     _state_str:
  1992                           	callstack 0
  1993   000023                     	ds	1
  1994   000024                     _state:
  1995                           	callstack 0
  1996   000024                     	ds	1
  1997   000025                     _tecla:
  1998                           	callstack 0
  1999   000025                     	ds	1
  2000   000026                     _Columnas:
  2001                           	callstack 0
  2002   000026                     	ds	1
  2003   000027                     _Filas:
  2004                           	callstack 0
  2005   000027                     	ds	1
  2006   000028                     motor_RFID@value:
  2007                           	callstack 0
  2008   000028                     	ds	1
  2009   000029                     motor_RFID@addr:
  2010                           	callstack 0
  2011   000029                     	ds	1
  2012   00002A                     motor_RFID@operation_pending:
  2013                           	callstack 0
  2014   00002A                     	ds	1
  2015   00002B                     motor_RFID@last_state:
  2016                           	callstack 0
  2017   00002B                     	ds	1
  2018   00002C                     motor_RFID@cardRemoved:
  2019                           	callstack 0
  2020   00002C                     	ds	1
  2021   00002D                     motor_RFID@backBitsCalc:
  2022                           	callstack 0
  2023   00002D                     	ds	1
  2024   00002E                     motor_RFID@fifoLevel:
  2025                           	callstack 0
  2026   00002E                     	ds	1
  2027   00002F                     motor_RFID@lastBitsVal:
  2028                           	callstack 0
  2029   00002F                     	ds	1
  2030   000030                     motor_RFID@tempRegValue:
  2031                           	callstack 0
  2032   000030                     	ds	1
  2033   000031                     motor_RFID@allZero:
  2034                           	callstack 0
  2035   000031                     	ds	1
  2036   000032                     motor_RFID@checksum:
  2037                           	callstack 0
  2038   000032                     	ds	1
  2039   000033                     motor_RFID@TagType:
  2040                           	callstack 0
  2041   000033                     	ds	1
  2042   000034                     	ds	1
  2043   000035                     motor_RFID@i:
  2044                           	callstack 0
  2045   000035                     	ds	1
  2046   000036                     motor_RFID@n:
  2047                           	callstack 0
  2048   000036                     	ds	1
  2049   000037                     motor_RFID@waitIRq:
  2050                           	callstack 0
  2051   000037                     	ds	1
  2052   000038                     motor_RFID@irqEn:
  2053                           	callstack 0
  2054   000038                     	ds	1
  2055   000039                     motor_RFID@substate:
  2056                           	callstack 0
  2057   000039                     	ds	1
  2058   00003A                     motor_RFID@state:
  2059                           	callstack 0
  2060   00003A                     	ds	1
  2061   00003B                     motor_Read@ucResult:
  2062                           	callstack 0
  2063   00003B                     	ds	1
  2064   00003C                     _ColumnAct:
  2065                           	callstack 0
  2066   00003C                     	ds	1
  2067   00003D                     _RowAct:
  2068                           	callstack 0
  2069   00003D                     	ds	1
  2070   00003E                     _Columns:
  2071                           	callstack 0
  2072   00003E                     	ds	1
  2073   00003F                     _Rows:
  2074                           	callstack 0
  2075   00003F                     	ds	1
  2076   000040                     _currentUser:
  2077                           	callstack 0
  2078   000040                     	ds	5
  2079   000045                     motor_RFID@currentUser:
  2080                           	callstack 0
  2081   000045                     	ds	5
  2082   00004A                     _timer@TAD_DATOS$F1001:
  2083                           	callstack 0
  2084   00004A                     	ds	1
  2085   00004B                     _timer_teclado:
  2086                           	callstack 0
  2087   00004B                     	ds	1
  2088   00004C                     motor_Read@ucAddr:
  2089                           	callstack 0
  2090   00004C                     	ds	1
  2091   00004D                     motor_Read@bit_count:
  2092                           	callstack 0
  2093   00004D                     	ds	1
  2094   00004E                     motor_Write@ucValue:
  2095                           	callstack 0
  2096   00004E                     	ds	1
  2097   00004F                     motor_Write@ucAddr:
  2098                           	callstack 0
  2099   00004F                     	ds	1
  2100   000050                     motor_Write@bit_count:
  2101                           	callstack 0
  2102   000050                     	ds	1
  2103   000051                     _card_timer:
  2104                           	callstack 0
  2105   000051                     	ds	1
  2106   000052                     _state_write:
  2107                           	callstack 0
  2108   000052                     	ds	1
  2109   000053                     _state_read:
  2110                           	callstack 0
  2111   000053                     	ds	1
  2112   000054                     _timer:
  2113                           	callstack 0
  2114   000054                     	ds	1
  2115   000055                     _Timer:
  2116                           	callstack 0
  2117   000055                     	ds	1
  2118                           
  2119                           	psect	dataCOMRAM
  2120   000077                     __pdataCOMRAM:
  2121                           	callstack 0
  2122   000077                     _currentTime:
  2123                           	callstack 0
  2124   000077                     	ds	4
  2125   00007B                     	ds	2
  2126   00007D                     _index:
  2127                           	callstack 0
  2128   00007D                     	ds	1
  2129                           
  2130                           	psect	bssBANK0
  2131   000080                     __pbssBANK0:
  2132                           	callstack 0
  2133   000080                     _configurations:
  2134                           	callstack 0
  2135   000080                     	ds	30
  2136   00009E                     _Timers:
  2137                           	callstack 0
  2138   00009E                     	ds	25
  2139   0000B7                     	ds	6
  2140   0000BD                     _ActualLeds:
  2141                           	callstack 0
  2142   0000BD                     	ds	6
  2143   0000C3                     motorTerminal@currentUser:
  2144                           	callstack 0
  2145   0000C3                     	ds	5
  2146                           
  2147                           	psect	dataBANK0
  2148   0000C8                     __pdataBANK0:
  2149                           	callstack 0
  2150   0000C8                     _userUIDs:
  2151                           	callstack 0
  2152   0000C8                     	ds	25
  2153   0000E1                     controlLED@ledBits:
  2154                           	callstack 0
  2155   0000E1                     	ds	6
  2156   0000E7                     _colValues:
  2157                           	callstack 0
  2158   0000E7                     	ds	3
  2159   0000EA                     motorTerminal@hour:
  2160                           	callstack 0
  2161   0000EA                     	ds	4
  2162                           
  2163                           	psect	bssBANK1
  2164   000100                     __pbssBANK1:
  2165                           	callstack 0
  2166   000100                     printfUID@buffer:
  2167                           	callstack 0
  2168   000100                     	ds	80
  2169                           
  2170                           	psect	cstackCOMRAM
  2171   000056                     __pcstackCOMRAM:
  2172                           	callstack 0
  2173   000056                     ??_LowRSI:
  2174                           
  2175                           ; 1 bytes @ 0x0
  2176   000056                     	ds	1
  2177   000057                     ?_Terminal_TXAvailable:
  2178                           	callstack 0
  2179   000057                     ?_TI_GetTics:
  2180                           	callstack 0
  2181   000057                     controlLED@estado:
  2182                           	callstack 0
  2183   000057                     delay_us@howMany:
  2184                           	callstack 0
  2185   000057                     resetData@i:
  2186                           	callstack 0
  2187   000057                     getActualUID@UID:
  2188                           	callstack 0
  2189   000057                     getActualLeds@leds:
  2190                           	callstack 0
  2191   000057                     saveHourToData@hour:
  2192                           	callstack 0
  2193   000057                     setIndex@indexActual:
  2194                           	callstack 0
  2195   000057                     setLEDIntensity@ledIndex:
  2196                           	callstack 0
  2197   000057                     TI_Init@counter:
  2198                           	callstack 0
  2199   000057                     TI_NewTimer@TimerHandle:
  2200                           	callstack 0
  2201   000057                     TI_ResetTics@TimerHandle:
  2202                           	callstack 0
  2203   000057                     ??_EscriuPrimeraOrdre:
  2204   000057                     ??_CantaPartAlta:
  2205   000057                     ??_CantaPartBaixa:
  2206   000057                     ??_GetTecla:
  2207   000057                     
  2208                           ; 1 bytes @ 0x1
  2209   000057                     	ds	1
  2210   000058                     CantaPartAlta@c:
  2211                           	callstack 0
  2212   000058                     CantaPartBaixa@c:
  2213                           	callstack 0
  2214   000058                     EscriuPrimeraOrdre@ordre:
  2215                           	callstack 0
  2216   000058                     delay_us@x:
  2217                           	callstack 0
  2218   000058                     resetData@j:
  2219                           	callstack 0
  2220   000058                     getActualUID@userIndex:
  2221                           	callstack 0
  2222   000058                     getActualLeds@userIndex:
  2223                           	callstack 0
  2224   000058                     saveHourToData@i:
  2225                           	callstack 0
  2226   000058                     setLEDIntensity@intensity:
  2227                           	callstack 0
  2228   000058                     _controlLED$553:
  2229                           	callstack 0
  2230   000058                     
  2231                           ; 1 bytes @ 0x2
  2232   000058                     	ds	1
  2233   000059                     CantaIR@IR:
  2234                           	callstack 0
  2235   000059                     CantaData@Data:
  2236                           	callstack 0
  2237   000059                     processBit@val:
  2238                           	callstack 0
  2239   000059                     GetTecla@columna:
  2240                           	callstack 0
  2241   000059                     getActualUID@i_1014:
  2242                           	callstack 0
  2243   000059                     getActualLeds@i:
  2244                           	callstack 0
  2245   000059                     setLEDIntensity@userIndex:
  2246                           	callstack 0
  2247   000059                     TI_NewTimer@Comptador:
  2248                           	callstack 0
  2249   000059                     ??_Terminal_TXAvailable:
  2250   000059                     
  2251                           ; 1 bytes @ 0x3
  2252   000059                     	ds	1
  2253   00005A                     controlLED@ledActual:
  2254                           	callstack 0
  2255   00005A                     processBit@bit_count:
  2256                           	callstack 0
  2257   00005A                     GetTecla@fila:
  2258                           	callstack 0
  2259   00005A                     Terminal_SendChar@c:
  2260                           	callstack 0
  2261   00005A                     motor_SendChar@c:
  2262                           	callstack 0
  2263   00005A                     initData@i:
  2264                           	callstack 0
  2265   00005A                     getActualUID@i:
  2266                           	callstack 0
  2267   00005A                     getActualLeds@i_1020:
  2268                           	callstack 0
  2269   00005A                     setLed@tecla:
  2270                           	callstack 0
  2271   00005A                     
  2272                           ; 1 bytes @ 0x4
  2273   00005A                     	ds	1
  2274   00005B                     processBit@state:
  2275                           	callstack 0
  2276   00005B                     initData@j:
  2277                           	callstack 0
  2278   00005B                     getActualUID@i_1015:
  2279                           	callstack 0
  2280   00005B                     motor_StartSendString@str:
  2281                           	callstack 0
  2282   00005B                     ??_TI_GetTics:
  2283   00005B                     
  2284                           ; 1 bytes @ 0x5
  2285   00005B                     	ds	1
  2286   00005C                     processBit@next_state:
  2287                           	callstack 0
  2288   00005C                     initData@i_1006:
  2289                           	callstack 0
  2290                           
  2291                           ; 1 bytes @ 0x6
  2292   00005C                     	ds	1
  2293   00005D                     printfUID@currentUser:
  2294                           	callstack 0
  2295   00005D                     initData@i_1004:
  2296                           	callstack 0
  2297   00005D                     ??_processBit:
  2298                           
  2299                           ; 1 bytes @ 0x7
  2300   00005D                     	ds	1
  2301   00005E                     motor_Write@value:
  2302                           	callstack 0
  2303   00005E                     printfUID@userIndex:
  2304                           	callstack 0
  2305   00005E                     ??_motor_Read:
  2306                           
  2307                           ; 1 bytes @ 0x8
  2308   00005E                     	ds	1
  2309   00005F                     motor_Write@addr:
  2310                           	callstack 0
  2311   00005F                     motor_Read@addr:
  2312                           	callstack 0
  2313   00005F                     printfUID@extraString:
  2314                           	callstack 0
  2315   00005F                     TI_GetTics@CopiaTicsActual:
  2316                           	callstack 0
  2317   00005F                     
  2318                           ; 1 bytes @ 0x9
  2319   00005F                     	ds	1
  2320   000060                     _motor_Read$799:
  2321                           	callstack 0
  2322                           
  2323                           ; 2 bytes @ 0xA
  2324   000060                     	ds	1
  2325   000061                     ??_printfUID:
  2326                           
  2327                           ; 1 bytes @ 0xB
  2328   000061                     	ds	1
  2329   000062                     initRFID@regVal:
  2330                           	callstack 0
  2331   000062                     
  2332                           ; 1 bytes @ 0xC
  2333   000062                     	ds	1
  2334   000063                     TI_GetTics@TimerHandle:
  2335                           	callstack 0
  2336   000063                     printfUID@leds:
  2337                           	callstack 0
  2338                           
  2339                           ; 6 bytes @ 0xD
  2340   000063                     	ds	1
  2341   000064                     WaitForBusy@Busy:
  2342                           	callstack 0
  2343   000064                     Espera@Timer:
  2344                           	callstack 0
  2345   000064                     ??_motor_LEDs:
  2346   000064                     
  2347                           ; 1 bytes @ 0xE
  2348   000064                     	ds	1
  2349   000065                     LcGotoXY@Row:
  2350                           	callstack 0
  2351                           
  2352                           ; 1 bytes @ 0xF
  2353   000065                     	ds	1
  2354   000066                     Espera@ms:
  2355                           	callstack 0
  2356   000066                     ??_LcGotoXY:
  2357                           
  2358                           ; 1 bytes @ 0x10
  2359   000066                     	ds	2
  2360   000068                     _LcGotoXY$498:
  2361                           	callstack 0
  2362   000068                     ??_Espera:
  2363                           
  2364                           ; 1 bytes @ 0x12
  2365   000068                     	ds	1
  2366   000069                     printfUID@val:
  2367                           	callstack 0
  2368   000069                     motor_LEDs@currentTics:
  2369                           	callstack 0
  2370                           
  2371                           ; 4 bytes @ 0x13
  2372   000069                     	ds	1
  2373   00006A                     printfUID@i:
  2374                           	callstack 0
  2375   00006A                     LcGotoXY@Fisics:
  2376                           	callstack 0
  2377                           
  2378                           ; 2 bytes @ 0x14
  2379   00006A                     	ds	1
  2380   00006B                     printfUID@ptr:
  2381                           	callstack 0
  2382                           
  2383                           ; 2 bytes @ 0x15
  2384   00006B                     	ds	1
  2385   00006C                     LcInit@columns:
  2386                           	callstack 0
  2387   00006C                     LcGotoXY@Column:
  2388                           	callstack 0
  2389                           
  2390                           ; 1 bytes @ 0x16
  2391   00006C                     	ds	1
  2392   00006D                     LcInit@rows:
  2393                           	callstack 0
  2394   00006D                     LcPutChar@c:
  2395                           	callstack 0
  2396   00006D                     motor_LEDs@i:
  2397                           	callstack 0
  2398   00006D                     motorTerminal@opcion:
  2399                           	callstack 0
  2400   00006D                     motor_setCurrentUser@UID1:
  2401                           	callstack 0
  2402   00006D                     
  2403                           ; 1 bytes @ 0x17
  2404   00006D                     	ds	1
  2405   00006E                     motor_LEDs@i_559:
  2406                           	callstack 0
  2407   00006E                     motorTerminal@currentUserIndex:
  2408                           	callstack 0
  2409   00006E                     motor_setCurrentUser@UID2:
  2410                           	callstack 0
  2411   00006E                     LcInit@i:
  2412                           	callstack 0
  2413   00006E                     ??_motor_datos:
  2414                           
  2415                           ; 1 bytes @ 0x18
  2416   00006E                     	ds	1
  2417   00006F                     motor_setCurrentUser@UID3:
  2418                           	callstack 0
  2419   00006F                     motor_datos@c:
  2420                           	callstack 0
  2421                           
  2422                           ; 1 bytes @ 0x19
  2423   00006F                     	ds	1
  2424   000070                     motor_setCurrentUser@UID4:
  2425                           	callstack 0
  2426                           
  2427                           ; 1 bytes @ 0x1A
  2428   000070                     	ds	1
  2429   000071                     motor_setCurrentUser@UID0:
  2430                           	callstack 0
  2431   000071                     
  2432                           ; 1 bytes @ 0x1B
  2433   000071                     	ds	1
  2434   000072                     ??_motor_RFID:
  2435                           
  2436                           ; 1 bytes @ 0x1C
  2437   000072                     	ds	2
  2438   000074                     _motor_RFID$836:
  2439                           	callstack 0
  2440                           
  2441                           ; 2 bytes @ 0x1E
  2442   000074                     	ds	2
  2443   000076                     motor_RFID@flag:
  2444                           	callstack 0
  2445                           
  2446                           ; 1 bytes @ 0x20
  2447   000076                     	ds	1
  2448   000077                     
  2449                           ; 1 bytes @ 0x21
  2450 ;;
  2451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2452 ;;
  2453 ;; *************** function _main *****************
  2454 ;; Defined at:
  2455 ;;		line 39 in file "main.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1
  2469 ;;      Params:         0       0       0
  2470 ;;      Locals:         0       0       0
  2471 ;;      Temps:          0       0       0
  2472 ;;      Totals:         0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels required when called: 10
  2475 ;; This function calls:
  2476 ;;		_LcInit
  2477 ;;		_TI_Init
  2478 ;;		_Terminal_Init
  2479 ;;		_initData
  2480 ;;		_initLeds
  2481 ;;		_initPorts
  2482 ;;		_initRFID
  2483 ;;		_initTeclado
  2484 ;;		_motorTeclado
  2485 ;;		_motorTerminal
  2486 ;;		_motor_LEDs
  2487 ;;		_motor_RFID
  2488 ;;		_motor_datos
  2489 ;; This function is called by:
  2490 ;;		Startup code after reset
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text0
  2495   0019AA                     __ptext0:
  2496                           	callstack 0
  2497   0019AA                     _main:
  2498                           	callstack 21
  2499                           
  2500                           ;main.c: 40:  ADCON1 = 0x0F;
  2501                           
  2502                           ;incstack = 0
  2503   0019AA  EC78  F00D         	call	_TI_Init	;wreg free
  2504                           
  2505                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2506   0019AE  EC11  F00E         	call	_initTeclado	;wreg free
  2507                           
  2508                           ;main.c: 42: }
  2509   0019B2  ECD4  F008         	call	_initRFID	;wreg free
  2510                           
  2511                           ;main.c: 43: 
  2512   0019B6  EC49  F00E         	call	_Terminal_Init	;wreg free
  2513                           
  2514                           ;main.c: 44: 
  2515   0019BA  EC67  F00E         	call	_initPorts	;wreg free
  2516                           
  2517                           ;main.c: 45: 
  2518   0019BE  EC51  F00E         	call	_initLeds	;wreg free
  2519                           
  2520                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2521   0019C2  0E10               	movlw	16
  2522   0019C4  6E6C               	movwf	LcInit@columns^0,c
  2523   0019C6  0E02               	movlw	2
  2524   0019C8  ECF3  F007         	call	_LcInit
  2525                           
  2526                           ;main.c: 47: 
  2527   0019CC  ECDB  F00B         	call	_initData	;wreg free
  2528   0019D0  8EF2               	bsf	242,7,c	;volatile
  2529   0019D2  9CF2               	bcf	242,6,c	;volatile
  2530   0019D4                     l5082:
  2531   0019D4  EC67  F007         	call	_motorTeclado	;wreg free
  2532   0019D8  ECC9  F004         	call	_motorTerminal	;wreg free
  2533   0019DC  EC15  F000         	call	_motor_RFID	;wreg free
  2534   0019E0  EC6A  F008         	call	_motor_LEDs	;wreg free
  2535   0019E4  ECE0  F005         	call	_motor_datos	;wreg free
  2536   0019E8  748D               	btg	141,2,c	;volatile
  2537   0019EA  D7F4               	goto	l5082
  2538   0019EC                     __end_of_main:
  2539                           	callstack 0
  2540                           
  2541 ;; *************** function _motor_datos *****************
  2542 ;; Defined at:
  2543 ;;		line 157 in file "TAD_DATOS.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  c               1   25[COMRAM] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1
  2557 ;;      Params:         0       0       0
  2558 ;;      Locals:         1       0       0
  2559 ;;      Temps:          1       0       0
  2560 ;;      Totals:         2       0       0
  2561 ;;Total ram usage:        2 bytes
  2562 ;; Hardware stack levels used: 1
  2563 ;; Hardware stack levels required when called: 7
  2564 ;; This function calls:
  2565 ;;		_LcGotoXY
  2566 ;;		_LcPutChar
  2567 ;;		_TI_GetTics
  2568 ;;		_TI_ResetTics
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text1
  2575   000BC0                     __ptext1:
  2576                           	callstack 0
  2577   000BC0                     _motor_datos:
  2578                           	callstack 23
  2579                           
  2580                           ;TAD_DATOS.c: 158:     static char state = 0;;TAD_DATOS.c: 159:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 160:     static unsigned char lastChar;;TAD_DATOS.c: 161:     static c
      +                          har i = 0;;TAD_DATOS.c: 163:     if (TI_GetTics(timer) > 30000) {
  2581                           
  2582                           ;incstack = 0
  2583   000BC0  504A               	movf	_timer@TAD_DATOS$F1001^0,w,c
  2584   000BC2  EC8D  F00C         	call	_TI_GetTics
  2585   000BC6  505A               	movf	(?_TI_GetTics+3)^0,w,c
  2586   000BC8  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  2587   000BCA  E106               	bnz	u4520
  2588   000BCC  0E31               	movlw	49
  2589   000BCE  5C57               	subwf	?_TI_GetTics^0,w,c
  2590   000BD0  0E75               	movlw	117
  2591   000BD2  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  2592   000BD4  A0D8               	btfss	status,0,c
  2593   000BD6  D0BA               	goto	l5070
  2594   000BD8                     u4520:
  2595                           
  2596                           ;TAD_DATOS.c: 164:         new_configuration = 1;
  2597   000BD8  0E01               	movlw	1
  2598   000BDA  6E1D               	movwf	_new_configuration^0,c
  2599                           
  2600                           ;TAD_DATOS.c: 165:         if (currentTime[3] == '9') {
  2601   000BDC  0E39               	movlw	57
  2602   000BDE  187A               	xorwf	(_currentTime+3)^0,w,c
  2603   000BE0  A4D8               	btfss	status,2,c
  2604   000BE2  D01B               	goto	l4982
  2605                           
  2606                           ;TAD_DATOS.c: 166:             currentTime[3] = '0';
  2607   000BE4  0E30               	movlw	48
  2608   000BE6  6E7A               	movwf	(_currentTime+3)^0,c
  2609                           
  2610                           ;TAD_DATOS.c: 167:             if (currentTime[2] == '5') {
  2611   000BE8  0E35               	movlw	53
  2612   000BEA  1879               	xorwf	(_currentTime+2)^0,w,c
  2613   000BEC  A4D8               	btfss	status,2,c
  2614   000BEE  D013               	goto	l4980
  2615                           
  2616                           ;TAD_DATOS.c: 168:                 currentTime[2] = '0';
  2617   000BF0  0E30               	movlw	48
  2618   000BF2  6E79               	movwf	(_currentTime+2)^0,c
  2619                           
  2620                           ;TAD_DATOS.c: 169:                 if (currentTime[1] == '9') {
  2621   000BF4  0E39               	movlw	57
  2622   000BF6  1878               	xorwf	(_currentTime+1)^0,w,c
  2623   000BF8  A4D8               	btfss	status,2,c
  2624   000BFA  D00B               	goto	l4978
  2625                           
  2626                           ;TAD_DATOS.c: 170:                     currentTime[1] = '0';
  2627   000BFC  0E30               	movlw	48
  2628   000BFE  6E78               	movwf	(_currentTime+1)^0,c
  2629                           
  2630                           ;TAD_DATOS.c: 171:                     if (currentTime[0] == '2') {
  2631   000C00  0E32               	movlw	50
  2632   000C02  1877               	xorwf	_currentTime^0,w,c
  2633   000C04  A4D8               	btfss	status,2,c
  2634   000C06  D003               	goto	l4976
  2635                           
  2636                           ;TAD_DATOS.c: 172:                         currentTime[0] = '0';
  2637   000C08  0E30               	movlw	48
  2638   000C0A  6E77               	movwf	_currentTime^0,c
  2639                           
  2640                           ;TAD_DATOS.c: 173:                     } else {
  2641   000C0C  D007               	goto	l4984
  2642   000C0E                     l4976:
  2643                           
  2644                           ;TAD_DATOS.c: 174:                         currentTime[0]++;
  2645   000C0E  2A77               	incf	_currentTime^0,f,c
  2646   000C10  D005               	goto	l4984
  2647   000C12                     l4978:
  2648                           
  2649                           ;TAD_DATOS.c: 177:                     currentTime[1]++;
  2650   000C12  2A78               	incf	(_currentTime+1)^0,f,c
  2651   000C14  D003               	goto	l4984
  2652   000C16                     l4980:
  2653                           
  2654                           ;TAD_DATOS.c: 180:                 currentTime[2]++;
  2655   000C16  2A79               	incf	(_currentTime+2)^0,f,c
  2656   000C18  D001               	goto	l4984
  2657   000C1A                     l4982:
  2658                           
  2659                           ;TAD_DATOS.c: 183:             currentTime[3]++;
  2660   000C1A  2A7A               	incf	(_currentTime+3)^0,f,c
  2661   000C1C                     l4984:
  2662                           
  2663                           ;TAD_DATOS.c: 185:         TI_ResetTics(timer);
  2664   000C1C  504A               	movf	_timer@TAD_DATOS$F1001^0,w,c
  2665   000C1E  ECDA  F00D         	call	_TI_ResetTics
  2666   000C22  D094               	goto	l5070
  2667   000C24                     l4986:
  2668                           
  2669                           ;TAD_DATOS.c: 190:             if(new_configuration || new_user) {
  2670   000C24  501D               	movf	_new_configuration^0,w,c
  2671   000C26  A4D8               	btfss	status,2,c
  2672   000C28  D003               	goto	u4580
  2673   000C2A  501C               	movf	_new_user^0,w,c
  2674   000C2C  B4D8               	btfsc	status,2,c
  2675   000C2E  0012               	return	
  2676   000C30                     u4580:
  2677                           
  2678                           ;TAD_DATOS.c: 191:                 new_configuration = new_user = 0;
  2679   000C30  6A1C               	clrf	_new_user^0,c
  2680   000C32  6A1D               	clrf	_new_configuration^0,c
  2681                           
  2682                           ;TAD_DATOS.c: 192:                 state = 2;
  2683   000C34  0E02               	movlw	2
  2684   000C36  6E1A               	movwf	motor_datos@state^0,c
  2685   000C38  0012               	return	
  2686   000C3A                     l4992:
  2687                           
  2688                           ;TAD_DATOS.c: 198:             LcGotoXY(0, 0);
  2689   000C3A  0E00               	movlw	0
  2690   000C3C  6E65               	movwf	LcGotoXY@Row^0,c
  2691   000C3E  0E00               	movlw	0
  2692   000C40  ECA5  F009         	call	_LcGotoXY
  2693                           
  2694                           ;TAD_DATOS.c: 199:             state = 3;
  2695   000C44  0E03               	movlw	3
  2696   000C46  6E1A               	movwf	motor_datos@state^0,c
  2697                           
  2698                           ;TAD_DATOS.c: 200:             break;
  2699   000C48  0012               	return	
  2700   000C4A                     l877:
  2701                           
  2702                           ;TAD_DATOS.c: 204:             lastChar = currentUser[4];
  2703   000C4A  C044  F018         	movff	_currentUser+4,motor_datos@lastChar
  2704                           
  2705                           ;TAD_DATOS.c: 206:             if(index != 4) {
  2706   000C4E  0E04               	movlw	4
  2707   000C50  187D               	xorwf	_index^0,w,c
  2708   000C52  B4D8               	btfsc	status,2,c
  2709   000C54  D013               	goto	l5004
  2710                           
  2711                           ;TAD_DATOS.c: 207:                 if((lastChar & 0x0F) < 10) {
  2712   000C56  C018  F06E         	movff	motor_datos@lastChar,??_motor_datos
  2713   000C5A  0E0F               	movlw	15
  2714   000C5C  166E               	andwf	??_motor_datos^0,f,c
  2715   000C5E  0E0A               	movlw	10
  2716   000C60  606E               	cpfslt	??_motor_datos^0,c
  2717   000C62  D006               	goto	l5002
  2718                           
  2719                           ;TAD_DATOS.c: 208:                     LcPutChar('0' + (lastChar & 0x0F));
  2720   000C64  5018               	movf	motor_datos@lastChar^0,w,c
  2721   000C66  0B0F               	andlw	15
  2722   000C68  0F30               	addlw	48
  2723   000C6A  EC2E  F00A         	call	_LcPutChar
  2724                           
  2725                           ;TAD_DATOS.c: 209:                 }
  2726   000C6E  D009               	goto	l5006
  2727   000C70                     l5002:
  2728                           
  2729                           ;TAD_DATOS.c: 212:                     LcPutChar('A' + (lastChar & 0x0F) - 10);
  2730   000C70  5018               	movf	motor_datos@lastChar^0,w,c
  2731   000C72  0B0F               	andlw	15
  2732   000C74  0F37               	addlw	55
  2733   000C76  EC2E  F00A         	call	_LcPutChar
  2734   000C7A  D003               	goto	l5006
  2735   000C7C                     l5004:
  2736                           
  2737                           ;TAD_DATOS.c: 215:                 LcPutChar(' ');
  2738   000C7C  0E20               	movlw	32
  2739   000C7E  EC2E  F00A         	call	_LcPutChar
  2740   000C82                     l5006:
  2741                           
  2742                           ;TAD_DATOS.c: 217:             state = 4;
  2743   000C82  0E04               	movlw	4
  2744   000C84  6E1A               	movwf	motor_datos@state^0,c
  2745                           
  2746                           ;TAD_DATOS.c: 218:             break;
  2747   000C86  0012               	return	
  2748   000C88                     l5008:
  2749                           
  2750                           ;TAD_DATOS.c: 222:             LcPutChar(' ');
  2751   000C88  0E20               	movlw	32
  2752   000C8A  EC2E  F00A         	call	_LcPutChar
  2753                           
  2754                           ;TAD_DATOS.c: 223:             state = 5;
  2755   000C8E  0E05               	movlw	5
  2756   000C90  6E1A               	movwf	motor_datos@state^0,c
  2757                           
  2758                           ;TAD_DATOS.c: 224:             i = 0;
  2759   000C92  6A17               	clrf	motor_datos@i^0,c
  2760                           
  2761                           ;TAD_DATOS.c: 225:             break;
  2762   000C94  0012               	return	
  2763   000C96                     l5014:
  2764                           
  2765                           ;TAD_DATOS.c: 229:             if(i < 4) {
  2766   000C96  0E04               	movlw	4
  2767   000C98  6017               	cpfslt	motor_datos@i^0,c
  2768   000C9A  D00B               	goto	l5022
  2769                           
  2770                           ;TAD_DATOS.c: 230:                 LcPutChar(currentTime[i]);
  2771   000C9C  5017               	movf	motor_datos@i^0,w,c
  2772   000C9E  0F77               	addlw	low _currentTime
  2773   000CA0  6ED9               	movwf	fsr2l,c
  2774   000CA2  6ADA               	clrf	fsr2h,c
  2775   000CA4  50DF               	movf	indf2,w,c
  2776   000CA6  EC2E  F00A         	call	_LcPutChar
  2777                           
  2778                           ;TAD_DATOS.c: 231:                 i++;
  2779   000CAA  2A17               	incf	motor_datos@i^0,f,c
  2780                           
  2781                           ;TAD_DATOS.c: 232:                 state = 6;
  2782   000CAC  0E06               	movlw	6
  2783   000CAE  6E1A               	movwf	motor_datos@state^0,c
  2784                           
  2785                           ;TAD_DATOS.c: 233:             } else {
  2786   000CB0  0012               	return	
  2787   000CB2                     l5022:
  2788                           
  2789                           ;TAD_DATOS.c: 235:                 state = 9;
  2790   000CB2  0E09               	movlw	9
  2791   000CB4  6E1A               	movwf	motor_datos@state^0,c
  2792   000CB6  0012               	return	
  2793   000CB8                     l5024:
  2794                           
  2795                           ;TAD_DATOS.c: 241:             if(i == 2) {
  2796   000CB8  0E02               	movlw	2
  2797   000CBA  1817               	xorwf	motor_datos@i^0,w,c
  2798   000CBC  A4D8               	btfss	status,2,c
  2799   000CBE  D003               	goto	l5028
  2800                           
  2801                           ;TAD_DATOS.c: 242:                 LcPutChar(':');
  2802   000CC0  0E3A               	movlw	58
  2803   000CC2  EC2E  F00A         	call	_LcPutChar
  2804   000CC6                     l5028:
  2805                           
  2806                           ;TAD_DATOS.c: 244:             state = 5;
  2807   000CC6  0E05               	movlw	5
  2808   000CC8  6E1A               	movwf	motor_datos@state^0,c
  2809                           
  2810                           ;TAD_DATOS.c: 245:             break;
  2811   000CCA  0012               	return	
  2812   000CCC                     l5030:
  2813                           
  2814                           ;TAD_DATOS.c: 249:             LcPutChar(' ');
  2815   000CCC  0E20               	movlw	32
  2816   000CCE  EC2E  F00A         	call	_LcPutChar
  2817                           
  2818                           ;TAD_DATOS.c: 250:             pointer = 0;
  2819   000CD2  6A19               	clrf	motor_datos@pointer^0,c
  2820   000CD4                     l5034:
  2821                           
  2822                           ;TAD_DATOS.c: 251:             state = 10;
  2823   000CD4  0E0A               	movlw	10
  2824   000CD6  6E1A               	movwf	motor_datos@state^0,c
  2825                           
  2826                           ;TAD_DATOS.c: 252:             break;
  2827   000CD8  0012               	return	
  2828   000CDA                     l5036:
  2829                           
  2830                           ;TAD_DATOS.c: 256:             if(pointer < 6) {
  2831   000CDA  0E06               	movlw	6
  2832   000CDC  6019               	cpfslt	motor_datos@pointer^0,c
  2833   000CDE  D00C               	goto	l890
  2834                           
  2835                           ;TAD_DATOS.c: 257:                 if(pointer == 2) {
  2836   000CE0  0E02               	movlw	2
  2837   000CE2  1819               	xorwf	motor_datos@pointer^0,w,c
  2838   000CE4  A4D8               	btfss	status,2,c
  2839   000CE6  D005               	goto	l5042
  2840                           
  2841                           ;TAD_DATOS.c: 258:                     LcGotoXY(0, 1);
  2842   000CE8  0E01               	movlw	1
  2843   000CEA  6E65               	movwf	LcGotoXY@Row^0,c
  2844   000CEC  0E00               	movlw	0
  2845   000CEE  ECA5  F009         	call	_LcGotoXY
  2846   000CF2                     l5042:
  2847                           
  2848                           ;TAD_DATOS.c: 260:                 state = 11;
  2849   000CF2  0E0B               	movlw	11
  2850   000CF4  6E1A               	movwf	motor_datos@state^0,c
  2851                           
  2852                           ;TAD_DATOS.c: 261:             } else {
  2853   000CF6  0012               	return	
  2854   000CF8                     l890:
  2855                           
  2856                           ;TAD_DATOS.c: 263:                 pointer = 0;
  2857   000CF8  6A19               	clrf	motor_datos@pointer^0,c
  2858                           
  2859                           ;TAD_DATOS.c: 264:                 state = 0;
  2860   000CFA  6A1A               	clrf	motor_datos@state^0,c
  2861   000CFC  0012               	return	
  2862   000CFE                     l5044:
  2863                           
  2864                           ;TAD_DATOS.c: 270:             LcPutChar('1' + pointer);
  2865   000CFE  5019               	movf	motor_datos@pointer^0,w,c
  2866   000D00  0F31               	addlw	49
  2867   000D02  EC2E  F00A         	call	_LcPutChar
  2868                           
  2869                           ;TAD_DATOS.c: 271:             state = 12;
  2870   000D06  0E0C               	movlw	12
  2871   000D08  6E1A               	movwf	motor_datos@state^0,c
  2872                           
  2873                           ;TAD_DATOS.c: 272:             break;
  2874   000D0A  0012               	return	
  2875   000D0C                     l5048:
  2876                           
  2877                           ;TAD_DATOS.c: 276:             LcPutChar('-');
  2878   000D0C  0E2D               	movlw	45
  2879   000D0E  EC2E  F00A         	call	_LcPutChar
  2880                           
  2881                           ;TAD_DATOS.c: 277:             state = 13;
  2882   000D12  0E0D               	movlw	13
  2883   000D14  6E1A               	movwf	motor_datos@state^0,c
  2884                           
  2885                           ;TAD_DATOS.c: 278:             break;
  2886   000D16  0012               	return	
  2887   000D18                     l5052:
  2888                           
  2889                           ;TAD_DATOS.c: 282:             char c = '0' + configurations[index][pointer];
  2890   000D18  507D               	movf	_index^0,w,c
  2891   000D1A  0D06               	mullw	6
  2892   000D1C  50F3               	movf	243,w,c
  2893   000D1E  0F80               	addlw	low _configurations
  2894   000D20  2419               	addwf	motor_datos@pointer^0,w,c
  2895   000D22  6ED9               	movwf	fsr2l,c
  2896   000D24  6ADA               	clrf	fsr2h,c
  2897   000D26  50DF               	movf	indf2,w,c
  2898   000D28  0F30               	addlw	48
  2899   000D2A  6E6F               	movwf	motor_datos@c^0,c
  2900                           
  2901                           ;TAD_DATOS.c: 283:             if(c > '9') {
  2902   000D2C  0E39               	movlw	57
  2903   000D2E  646F               	cpfsgt	motor_datos@c^0,c
  2904   000D30  D002               	goto	l5058
  2905                           
  2906                           ;TAD_DATOS.c: 284:                 c = 'A';
  2907   000D32  0E41               	movlw	65
  2908   000D34  6E6F               	movwf	motor_datos@c^0,c
  2909   000D36                     l5058:
  2910                           
  2911                           ;TAD_DATOS.c: 286:             LcPutChar(c);
  2912   000D36  506F               	movf	motor_datos@c^0,w,c
  2913   000D38  EC2E  F00A         	call	_LcPutChar
  2914                           
  2915                           ;TAD_DATOS.c: 287:             state = 14;
  2916   000D3C  0E0E               	movlw	14
  2917   000D3E  6E1A               	movwf	motor_datos@state^0,c
  2918                           
  2919                           ;TAD_DATOS.c: 288:             break;
  2920   000D40  0012               	return	
  2921   000D42                     l5062:
  2922                           
  2923                           ;TAD_DATOS.c: 292:             LcPutChar(' ');
  2924   000D42  0E20               	movlw	32
  2925   000D44  EC2E  F00A         	call	_LcPutChar
  2926                           
  2927                           ;TAD_DATOS.c: 293:             pointer++;
  2928   000D48  2A19               	incf	motor_datos@pointer^0,f,c
  2929   000D4A  D7C4               	goto	l5034
  2930   000D4C                     l5070:
  2931   000D4C  501A               	movf	motor_datos@state^0,w,c
  2932                           
  2933                           ; Switch size 1, requested type "simple"
  2934                           ; Number of cases is 12, Range of values is 0 to 14
  2935                           ; switch strategies available:
  2936                           ; Name         Instructions Cycles
  2937                           ; simple_byte           37    19 (average)
  2938                           ;	Chosen strategy is simple_byte
  2939   000D4E  0A00               	xorlw	0	; case 0
  2940   000D50  B4D8               	btfsc	status,2,c
  2941   000D52  D768               	goto	l4986
  2942   000D54  0A02               	xorlw	2	; case 2
  2943   000D56  B4D8               	btfsc	status,2,c
  2944   000D58  D770               	goto	l4992
  2945   000D5A  0A01               	xorlw	1	; case 3
  2946   000D5C  B4D8               	btfsc	status,2,c
  2947   000D5E  D775               	goto	l877
  2948   000D60  0A07               	xorlw	7	; case 4
  2949   000D62  B4D8               	btfsc	status,2,c
  2950   000D64  D791               	goto	l5008
  2951   000D66  0A01               	xorlw	1	; case 5
  2952   000D68  B4D8               	btfsc	status,2,c
  2953   000D6A  D795               	goto	l5014
  2954   000D6C  0A03               	xorlw	3	; case 6
  2955   000D6E  B4D8               	btfsc	status,2,c
  2956   000D70  D7A3               	goto	l5024
  2957   000D72  0A0F               	xorlw	15	; case 9
  2958   000D74  B4D8               	btfsc	status,2,c
  2959   000D76  D7AA               	goto	l5030
  2960   000D78  0A03               	xorlw	3	; case 10
  2961   000D7A  B4D8               	btfsc	status,2,c
  2962   000D7C  D7AE               	goto	l5036
  2963   000D7E  0A01               	xorlw	1	; case 11
  2964   000D80  B4D8               	btfsc	status,2,c
  2965   000D82  D7BD               	goto	l5044
  2966   000D84  0A07               	xorlw	7	; case 12
  2967   000D86  B4D8               	btfsc	status,2,c
  2968   000D88  D7C1               	goto	l5048
  2969   000D8A  0A01               	xorlw	1	; case 13
  2970   000D8C  B4D8               	btfsc	status,2,c
  2971   000D8E  D7C4               	goto	l5052
  2972   000D90  0A03               	xorlw	3	; case 14
  2973   000D92  A4D8               	btfss	status,2,c
  2974   000D94  0012               	return	
  2975   000D96  D7D5               	goto	l5062
  2976   000D98                     __end_of_motor_datos:
  2977                           	callstack 0
  2978                           
  2979 ;; *************** function _LcPutChar *****************
  2980 ;; Defined at:
  2981 ;;		line 154 in file "TAD_DISPLAY.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  c               1    wreg     unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  c               1   23[COMRAM] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1
  2995 ;;      Params:         0       0       0
  2996 ;;      Locals:         1       0       0
  2997 ;;      Temps:          0       0       0
  2998 ;;      Totals:         1       0       0
  2999 ;;Total ram usage:        1 bytes
  3000 ;; Hardware stack levels used: 1
  3001 ;; Hardware stack levels required when called: 6
  3002 ;; This function calls:
  3003 ;;		_CantaData
  3004 ;;		_LcGotoXY
  3005 ;;		_WaitForBusy
  3006 ;; This function is called by:
  3007 ;;		_motor_datos
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text2
  3012   00145C                     __ptext2:
  3013                           	callstack 0
  3014   00145C                     _LcPutChar:
  3015                           	callstack 23
  3016                           
  3017                           ;incstack = 0
  3018                           ;LcPutChar@c stored from wreg
  3019   00145C  6E6D               	movwf	LcPutChar@c^0,c
  3020                           
  3021                           ;TAD_DISPLAY.c: 164:  WaitForBusy(); CantaData(c);
  3022   00145E  ECB3  F00C         	call	_WaitForBusy	;wreg free
  3023   001462  506D               	movf	LcPutChar@c^0,w,c
  3024   001464  EC2E  F00D         	call	_CantaData
  3025                           
  3026                           ;TAD_DISPLAY.c: 166:  ++ColumnAct;
  3027   001468  2A3C               	incf	_ColumnAct^0,f,c
  3028                           
  3029                           ;TAD_DISPLAY.c: 167:  if (Rows == 3) {
  3030   00146A  0E03               	movlw	3
  3031   00146C  183F               	xorwf	_Rows^0,w,c
  3032   00146E  A4D8               	btfss	status,2,c
  3033   001470  D00F               	goto	l3804
  3034                           
  3035                           ;TAD_DISPLAY.c: 168:   if (ColumnAct >= 20) {
  3036   001472  0E13               	movlw	19
  3037   001474  643C               	cpfsgt	_ColumnAct^0,c
  3038   001476  0012               	return	
  3039                           
  3040                           ;TAD_DISPLAY.c: 169:    ColumnAct = 0;
  3041   001478  6A3C               	clrf	_ColumnAct^0,c
  3042                           
  3043                           ;TAD_DISPLAY.c: 170:    if (++RowAct >= 4) RowAct = 0;
  3044   00147A  2A3D               	incf	_RowAct^0,f,c
  3045   00147C  0E03               	movlw	3
  3046   00147E  643D               	cpfsgt	_RowAct^0,c
  3047   001480  D001               	goto	l3802
  3048   001482  6A3D               	clrf	_RowAct^0,c
  3049   001484                     l3802:
  3050                           
  3051                           ;TAD_DISPLAY.c: 171:    LcGotoXY(ColumnAct, RowAct);
  3052   001484  C03D  F065         	movff	_RowAct,LcGotoXY@Row
  3053   001488  503C               	movf	_ColumnAct^0,w,c
  3054   00148A  ECA5  F009         	call	_LcGotoXY
  3055   00148E  0012               	return	
  3056   001490                     l3804:
  3057                           
  3058                           ;TAD_DISPLAY.c: 174:  if (Rows == 2) {
  3059   001490  0E02               	movlw	2
  3060   001492  183F               	xorwf	_Rows^0,w,c
  3061   001494  A4D8               	btfss	status,2,c
  3062   001496  D00F               	goto	l3816
  3063                           
  3064                           ;TAD_DISPLAY.c: 175:   if (ColumnAct >= 40) {
  3065   001498  0E27               	movlw	39
  3066   00149A  643C               	cpfsgt	_ColumnAct^0,c
  3067   00149C  0012               	return	
  3068                           
  3069                           ;TAD_DISPLAY.c: 176:    ColumnAct = 0;
  3070   00149E  6A3C               	clrf	_ColumnAct^0,c
  3071                           
  3072                           ;TAD_DISPLAY.c: 177:    if (++RowAct >= 2) RowAct = 0;
  3073   0014A0  2A3D               	incf	_RowAct^0,f,c
  3074   0014A2  0E01               	movlw	1
  3075   0014A4  643D               	cpfsgt	_RowAct^0,c
  3076   0014A6  D001               	goto	l3814
  3077   0014A8  6A3D               	clrf	_RowAct^0,c
  3078   0014AA                     l3814:
  3079                           
  3080                           ;TAD_DISPLAY.c: 178:    LcGotoXY(ColumnAct, RowAct);
  3081   0014AA  C03D  F065         	movff	_RowAct,LcGotoXY@Row
  3082   0014AE  503C               	movf	_ColumnAct^0,w,c
  3083   0014B0  ECA5  F009         	call	_LcGotoXY
  3084   0014B4  0012               	return	
  3085   0014B6                     l3816:
  3086                           
  3087                           ;TAD_DISPLAY.c: 181:  if (RowAct == 1) {
  3088   0014B6  043D               	decf	_RowAct^0,w,c
  3089   0014B8  A4D8               	btfss	status,2,c
  3090   0014BA  0012               	return	
  3091                           
  3092                           ;TAD_DISPLAY.c: 182:   if (ColumnAct >= 40) ColumnAct = 0;
  3093   0014BC  0E27               	movlw	39
  3094   0014BE  643C               	cpfsgt	_ColumnAct^0,c
  3095   0014C0  D001               	goto	l3822
  3096   0014C2  6A3C               	clrf	_ColumnAct^0,c
  3097   0014C4                     l3822:
  3098                           
  3099                           ;TAD_DISPLAY.c: 183:   LcGotoXY(ColumnAct, RowAct);
  3100   0014C4  C03D  F065         	movff	_RowAct,LcGotoXY@Row
  3101   0014C8  503C               	movf	_ColumnAct^0,w,c
  3102   0014CA  ECA5  F009         	call	_LcGotoXY
  3103   0014CE  0012               	return		;funcret
  3104   0014D0                     __end_of_LcPutChar:
  3105                           	callstack 0
  3106                           
  3107 ;; *************** function _LcGotoXY *****************
  3108 ;; Defined at:
  3109 ;;		line 127 in file "TAD_DISPLAY.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  Column          1    wreg     unsigned char 
  3112 ;;  Row             1   15[COMRAM] unsigned char 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  Column          1   22[COMRAM] unsigned char 
  3115 ;;  Fisics          2   20[COMRAM] int 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1
  3125 ;;      Params:         1       0       0
  3126 ;;      Locals:         5       0       0
  3127 ;;      Temps:          2       0       0
  3128 ;;      Totals:         8       0       0
  3129 ;;Total ram usage:        8 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 5
  3132 ;; This function calls:
  3133 ;;		_CantaIR
  3134 ;;		_WaitForBusy
  3135 ;; This function is called by:
  3136 ;;		_LcPutChar
  3137 ;;		_motor_datos
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text3
  3142   00134A                     __ptext3:
  3143                           	callstack 0
  3144   00134A                     _LcGotoXY:
  3145                           	callstack 23
  3146                           
  3147                           ;incstack = 0
  3148                           ;LcGotoXY@Column stored from wreg
  3149   00134A  6E6C               	movwf	LcGotoXY@Column^0,c
  3150                           
  3151                           ;TAD_DISPLAY.c: 131:  int Fisics;;TAD_DISPLAY.c: 133:  switch (Rows) {
  3152   00134C  D036               	goto	l3562
  3153   00134E                     l3540:
  3154                           
  3155                           ;TAD_DISPLAY.c: 135:    Fisics = Column + (!Row ? 0 : 0x40); break;
  3156   00134E  5065               	movf	LcGotoXY@Row^0,w,c
  3157   001350  B4D8               	btfsc	status,2,c
  3158   001352  D004               	goto	l3544
  3159   001354  0E00               	movlw	0
  3160   001356  6E69               	movwf	(_LcGotoXY$498+1)^0,c
  3161   001358  0E40               	movlw	64
  3162   00135A  D003               	goto	L1
  3163   00135C                     l3544:
  3164   00135C  0E00               	movlw	0
  3165   00135E  6E69               	movwf	(_LcGotoXY$498+1)^0,c
  3166   001360  0E00               	movlw	0
  3167   001362                     L1:
  3168   001362  6E68               	movwf	_LcGotoXY$498^0,c
  3169   001364  506C               	movf	LcGotoXY@Column^0,w,c
  3170   001366  2468               	addwf	_LcGotoXY$498^0,w,c
  3171   001368  6E6A               	movwf	LcGotoXY@Fisics^0,c
  3172   00136A  0E00               	movlw	0
  3173   00136C  2069               	addwfc	(_LcGotoXY$498+1)^0,w,c
  3174   00136E  6E6B               	movwf	(LcGotoXY@Fisics+1)^0,c
  3175   001370  D02F               	goto	l3564
  3176   001372                     l123:
  3177                           
  3178                           ;TAD_DISPLAY.c: 137:    Fisics = Column;
  3179   001372  C06C  F06A         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  3180   001376  6A6B               	clrf	(LcGotoXY@Fisics+1)^0,c
  3181                           
  3182                           ;TAD_DISPLAY.c: 138:    if (Row == 1) Fisics += 0x40; else
  3183   001378  0465               	decf	LcGotoXY@Row^0,w,c
  3184   00137A  A4D8               	btfss	status,2,c
  3185   00137C  D002               	goto	l3552
  3186   00137E  0E40               	movlw	64
  3187   001380  D005               	goto	L2
  3188   001382                     l3552:
  3189                           
  3190                           ;TAD_DISPLAY.c: 139:    if (Row == 2) Fisics += Columns; else
  3191   001382  0E02               	movlw	2
  3192   001384  1865               	xorwf	LcGotoXY@Row^0,w,c
  3193   001386  A4D8               	btfss	status,2,c
  3194   001388  D004               	goto	l3556
  3195   00138A  503E               	movf	_Columns^0,w,c
  3196   00138C                     L2:
  3197   00138C  266A               	addwf	LcGotoXY@Fisics^0,f,c
  3198   00138E  0E00               	movlw	0
  3199   001390  D00E               	goto	L3
  3200   001392                     l3556:
  3201                           
  3202                           ;TAD_DISPLAY.c: 140:    if (Row == 3) Fisics += 0x40+Columns;
  3203   001392  0E03               	movlw	3
  3204   001394  1865               	xorwf	LcGotoXY@Row^0,w,c
  3205   001396  A4D8               	btfss	status,2,c
  3206   001398  D01B               	goto	l3564
  3207   00139A  503E               	movf	_Columns^0,w,c
  3208   00139C  6E66               	movwf	??_LcGotoXY^0,c
  3209   00139E  6A67               	clrf	(??_LcGotoXY+1)^0,c
  3210   0013A0  0E40               	movlw	64
  3211   0013A2  2666               	addwf	??_LcGotoXY^0,f,c
  3212   0013A4  0E00               	movlw	0
  3213   0013A6  2267               	addwfc	(??_LcGotoXY+1)^0,f,c
  3214   0013A8  5066               	movf	??_LcGotoXY^0,w,c
  3215   0013AA  266A               	addwf	LcGotoXY@Fisics^0,f,c
  3216   0013AC  5067               	movf	(??_LcGotoXY+1)^0,w,c
  3217   0013AE                     L3:
  3218   0013AE  226B               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  3219                           
  3220                           ;TAD_DISPLAY.c: 141:    break;
  3221   0013B0  D00F               	goto	l3564
  3222   0013B2                     l130:
  3223                           
  3224                           ;TAD_DISPLAY.c: 144:    Fisics = Column; break;
  3225   0013B2  C06C  F06A         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  3226   0013B6  6A6B               	clrf	(LcGotoXY@Fisics+1)^0,c
  3227   0013B8  D00B               	goto	l3564
  3228   0013BA                     l3562:
  3229   0013BA  503F               	movf	_Rows^0,w,c
  3230                           
  3231                           ; Switch size 1, requested type "simple"
  3232                           ; Number of cases is 3, Range of values is 1 to 4
  3233                           ; switch strategies available:
  3234                           ; Name         Instructions Cycles
  3235                           ; simple_byte           10     6 (average)
  3236                           ;	Chosen strategy is simple_byte
  3237   0013BC  0A01               	xorlw	1	; case 1
  3238   0013BE  B4D8               	btfsc	status,2,c
  3239   0013C0  D7F8               	goto	l130
  3240   0013C2  0A03               	xorlw	3	; case 2
  3241   0013C4  B4D8               	btfsc	status,2,c
  3242   0013C6  D7C3               	goto	l3540
  3243   0013C8  0A06               	xorlw	6	; case 4
  3244   0013CA  B4D8               	btfsc	status,2,c
  3245   0013CC  D7D2               	goto	l123
  3246   0013CE  D7F1               	goto	l130
  3247   0013D0                     l3564:
  3248                           
  3249                           ;TAD_DISPLAY.c: 147:  WaitForBusy();
  3250   0013D0  ECB3  F00C         	call	_WaitForBusy	;wreg free
  3251                           
  3252                           ;TAD_DISPLAY.c: 148:  CantaIR((char)(0x80 | Fisics));
  3253   0013D4  506A               	movf	LcGotoXY@Fisics^0,w,c
  3254   0013D6  0980               	iorlw	128
  3255   0013D8  EC47  F00D         	call	_CantaIR
  3256                           
  3257                           ;TAD_DISPLAY.c: 150:  RowAct = Row;
  3258   0013DC  C065  F03D         	movff	LcGotoXY@Row,_RowAct
  3259                           
  3260                           ;TAD_DISPLAY.c: 151:  ColumnAct = Column;
  3261   0013E0  C06C  F03C         	movff	LcGotoXY@Column,_ColumnAct
  3262   0013E4  0012               	return		;funcret
  3263   0013E6                     __end_of_LcGotoXY:
  3264                           	callstack 0
  3265                           
  3266 ;; *************** function _CantaData *****************
  3267 ;; Defined at:
  3268 ;;		line 238 in file "TAD_DISPLAY.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  Data            1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  Data            1    3[COMRAM] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1
  3282 ;;      Params:         0       0       0
  3283 ;;      Locals:         1       0       0
  3284 ;;      Temps:          0       0       0
  3285 ;;      Totals:         1       0       0
  3286 ;;Total ram usage:        1 bytes
  3287 ;; Hardware stack levels used: 1
  3288 ;; Hardware stack levels required when called: 4
  3289 ;; This function calls:
  3290 ;;		_CantaPartAlta
  3291 ;;		_CantaPartBaixa
  3292 ;; This function is called by:
  3293 ;;		_LcPutChar
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text4
  3298   001A5C                     __ptext4:
  3299                           	callstack 0
  3300   001A5C                     _CantaData:
  3301                           	callstack 24
  3302                           
  3303                           ;incstack = 0
  3304                           ;CantaData@Data stored from wreg
  3305   001A5C  6E59               	movwf	CantaData@Data^0,c
  3306                           
  3307                           ;TAD_DISPLAY.c: 239:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  3308   001A5E  9096               	bcf	150,0,c	;volatile
  3309   001A60  9296               	bcf	150,1,c	;volatile
  3310   001A62  9A93               	bcf	147,5,c	;volatile
  3311   001A64  9893               	bcf	147,4,c	;volatile
  3312                           
  3313                           ;TAD_DISPLAY.c: 240:  (LATBbits.LATB3 = 1);
  3314   001A66  868A               	bsf	138,3,c	;volatile
  3315                           
  3316                           ;TAD_DISPLAY.c: 241:  (LATBbits.LATB2 = 0);
  3317   001A68  948A               	bcf	138,2,c	;volatile
  3318                           
  3319                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB1 = 1);
  3320   001A6A  828A               	bsf	138,1,c	;volatile
  3321                           
  3322                           ;TAD_DISPLAY.c: 243:  CantaPartAlta(Data);
  3323   001A6C  5059               	movf	CantaData@Data^0,w,c
  3324   001A6E  EC79  F00B         	call	_CantaPartAlta
  3325                           
  3326                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3327   001A72  828A               	bsf	138,1,c	;volatile
  3328                           
  3329                           ;TAD_DISPLAY.c: 245:  (LATBbits.LATB1 = 0);
  3330   001A74  928A               	bcf	138,1,c	;volatile
  3331                           
  3332                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 0);
  3333   001A76  928A               	bcf	138,1,c	;volatile
  3334                           
  3335                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 1);
  3336   001A78  828A               	bsf	138,1,c	;volatile
  3337                           
  3338                           ;TAD_DISPLAY.c: 248:  CantaPartBaixa(Data);
  3339   001A7A  5059               	movf	CantaData@Data^0,w,c
  3340   001A7C  EC47  F00B         	call	_CantaPartBaixa
  3341                           
  3342                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3343   001A80  828A               	bsf	138,1,c	;volatile
  3344                           
  3345                           ;TAD_DISPLAY.c: 250:  (LATBbits.LATB1 = 0);
  3346   001A82  928A               	bcf	138,1,c	;volatile
  3347                           
  3348                           ;TAD_DISPLAY.c: 251:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3349   001A84  8096               	bsf	150,0,c	;volatile
  3350   001A86  8296               	bsf	150,1,c	;volatile
  3351   001A88  8A93               	bsf	147,5,c	;volatile
  3352   001A8A  8893               	bsf	147,4,c	;volatile
  3353   001A8C  0012               	return		;funcret
  3354   001A8E                     __end_of_CantaData:
  3355                           	callstack 0
  3356                           
  3357 ;; *************** function _motor_RFID *****************
  3358 ;; Defined at:
  3359 ;;		line 169 in file "TAD_RFID.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  flag            1   32[COMRAM] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1
  3373 ;;      Params:         0       0       0
  3374 ;;      Locals:         3       0       0
  3375 ;;      Temps:          2       0       0
  3376 ;;      Totals:         5       0       0
  3377 ;;Total ram usage:        5 bytes
  3378 ;; Hardware stack levels used: 1
  3379 ;; Hardware stack levels required when called: 9
  3380 ;; This function calls:
  3381 ;;		_TI_GetTics
  3382 ;;		_TI_ResetTics
  3383 ;;		_getActualUID
  3384 ;;		_getCurrentUserIndex
  3385 ;;		_motor_Read
  3386 ;;		_motor_StartSendString
  3387 ;;		_motor_Write
  3388 ;;		_motor_setCurrentUser
  3389 ;;		_newConfiguration
  3390 ;;		_setIndex
  3391 ;;		_setStartSendString
  3392 ;; This function is called by:
  3393 ;;		_main
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text5
  3398   00002A                     __ptext5:
  3399                           	callstack 0
  3400   00002A                     _motor_RFID:
  3401                           	callstack 21
  3402                           
  3403                           ;TAD_RFID.c: 195:     if (operation_pending == 1) {
  3404                           
  3405                           ;incstack = 0
  3406   00002A  042A               	decf	motor_RFID@operation_pending^0,w,c
  3407   00002C  A4D8               	btfss	status,2,c
  3408   00002E  D00C               	goto	l4542
  3409                           
  3410                           ;TAD_RFID.c: 197:         flag = motor_Read(addr);
  3411   000030  5029               	movf	motor_RFID@addr^0,w,c
  3412   000032  EC3E  F009         	call	_motor_Read
  3413   000036  6E76               	movwf	motor_RFID@flag^0,c
  3414                           
  3415                           ;TAD_RFID.c: 198:         if (flag != 0xFE) {
  3416   000038  0EFE               	movlw	254
  3417   00003A  1876               	xorwf	motor_RFID@flag^0,w,c
  3418   00003C  B4D8               	btfsc	status,2,c
  3419   00003E  0012               	return	
  3420                           
  3421                           ;TAD_RFID.c: 199:             tempRegValue = flag;
  3422   000040  C076  F030         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3423                           
  3424                           ;TAD_RFID.c: 200:             operation_pending = 0;
  3425   000044  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3426                           
  3427                           ;TAD_RFID.c: 201:         } else {
  3428   000046  0012               	return	
  3429   000048                     l4542:
  3430   000048  0E02               	movlw	2
  3431   00004A  182A               	xorwf	motor_RFID@operation_pending^0,w,c
  3432   00004C  A4D8               	btfss	status,2,c
  3433   00004E  D00B               	goto	l4550
  3434                           
  3435                           ;TAD_RFID.c: 206:         flag = motor_Write(addr, value);
  3436   000050  C028  F05E         	movff	motor_RFID@value,motor_Write@value
  3437   000054  5029               	movf	motor_RFID@addr^0,w,c
  3438   000056  EC11  F00B         	call	_motor_Write
  3439   00005A  6E76               	movwf	motor_RFID@flag^0,c
  3440                           
  3441                           ;TAD_RFID.c: 207:         if (flag != 0) {
  3442   00005C  5076               	movf	motor_RFID@flag^0,w,c
  3443   00005E  B4D8               	btfsc	status,2,c
  3444   000060  0012               	return	
  3445                           
  3446                           ;TAD_RFID.c: 208:             operation_pending = 0;
  3447   000062  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3448                           
  3449                           ;TAD_RFID.c: 209:         } else {
  3450   000064  0012               	return	
  3451   000066                     l4550:
  3452                           
  3453                           ;TAD_RFID.c: 214:         if (state != last_state) {
  3454   000066  502B               	movf	motor_RFID@last_state^0,w,c
  3455   000068  183A               	xorwf	motor_RFID@state^0,w,c
  3456   00006A  B4D8               	btfsc	status,2,c
  3457   00006C  D008               	goto	l4558
  3458                           
  3459                           ;TAD_RFID.c: 215:             last_state = state;
  3460   00006E  C03A  F02B         	movff	motor_RFID@state,motor_RFID@last_state
  3461                           
  3462                           ;TAD_RFID.c: 218:             if (state == 1) {
  3463   000072  043A               	decf	motor_RFID@state^0,w,c
  3464   000074  A4D8               	btfss	status,2,c
  3465   000076  D003               	goto	l4558
  3466                           
  3467                           ;TAD_RFID.c: 219:                 TI_ResetTics(card_timer);
  3468   000078  5051               	movf	_card_timer^0,w,c
  3469   00007A  ECDA  F00D         	call	_TI_ResetTics
  3470   00007E                     l4558:
  3471                           
  3472                           ;TAD_RFID.c: 225:         if (state == 0 && TI_GetTics(card_timer) > 200) {
  3473   00007E  503A               	movf	motor_RFID@state^0,w,c
  3474   000080  A4D8               	btfss	status,2,c
  3475   000082  D304               	goto	l4914
  3476   000084  5051               	movf	_card_timer^0,w,c
  3477   000086  EC8D  F00C         	call	_TI_GetTics
  3478   00008A  505A               	movf	(?_TI_GetTics+3)^0,w,c
  3479   00008C  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  3480   00008E  1058               	iorwf	(?_TI_GetTics+1)^0,w,c
  3481   000090  E104               	bnz	u4000
  3482   000092  0EC9               	movlw	201
  3483   000094  5C57               	subwf	?_TI_GetTics^0,w,c
  3484   000096  A0D8               	btfss	status,0,c
  3485   000098  D2F9               	goto	l4914
  3486   00009A                     u4000:
  3487                           
  3488                           ;TAD_RFID.c: 226:             cardRemoved = 1;
  3489   00009A  0E01               	movlw	1
  3490   00009C  6E2C               	movwf	motor_RFID@cardRemoved^0,c
  3491                           
  3492                           ;TAD_RFID.c: 227:             TI_ResetTics(card_timer);
  3493   00009E  5051               	movf	_card_timer^0,w,c
  3494   0000A0  ECDA  F00D         	call	_TI_ResetTics
  3495   0000A4  D2F3               	goto	l4914
  3496   0000A6                     l4566:
  3497                           
  3498                           ;TAD_RFID.c: 235:                         addr = 0x0D;
  3499   0000A6  0E0D               	movlw	13
  3500   0000A8  6E29               	movwf	motor_RFID@addr^0,c
  3501                           
  3502                           ;TAD_RFID.c: 236:                         value = 0x07;
  3503   0000AA  0E07               	movlw	7
  3504   0000AC  6E28               	movwf	motor_RFID@value^0,c
  3505                           
  3506                           ;TAD_RFID.c: 237:                         operation_pending = 2;
  3507   0000AE  0E02               	movlw	2
  3508   0000B0  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3509                           
  3510                           ;TAD_RFID.c: 238:                         substate = 1;
  3511   0000B2  0E01               	movlw	1
  3512   0000B4  6E39               	movwf	motor_RFID@substate^0,c
  3513                           
  3514                           ;TAD_RFID.c: 239:                         break;
  3515   0000B6  0012               	return	
  3516   0000B8                     l4568:
  3517                           
  3518                           ;TAD_RFID.c: 241:                         TagType = 0x26;
  3519   0000B8  0E26               	movlw	38
  3520   0000BA  6E33               	movwf	motor_RFID@TagType^0,c
  3521                           
  3522                           ;TAD_RFID.c: 242:                         irqEn = 0x77;
  3523   0000BC  0E77               	movlw	119
  3524   0000BE  6E38               	movwf	motor_RFID@irqEn^0,c
  3525                           
  3526                           ;TAD_RFID.c: 243:                         waitIRq = 0x30;
  3527   0000C0  0E30               	movlw	48
  3528   0000C2  6E37               	movwf	motor_RFID@waitIRq^0,c
  3529                           
  3530                           ;TAD_RFID.c: 244:                         addr = 0x02;
  3531   0000C4  0E02               	movlw	2
  3532   0000C6  6E29               	movwf	motor_RFID@addr^0,c
  3533                           
  3534                           ;TAD_RFID.c: 245:                         value = irqEn | 0x80;
  3535   0000C8  5038               	movf	motor_RFID@irqEn^0,w,c
  3536   0000CA  0980               	iorlw	128
  3537   0000CC  6E28               	movwf	motor_RFID@value^0,c
  3538                           
  3539                           ;TAD_RFID.c: 246:                         operation_pending = 2;
  3540   0000CE  0E02               	movlw	2
  3541   0000D0  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3542                           
  3543                           ;TAD_RFID.c: 247:                         substate = 2;
  3544   0000D2  0E02               	movlw	2
  3545   0000D4  6E39               	movwf	motor_RFID@substate^0,c
  3546                           
  3547                           ;TAD_RFID.c: 248:                         break;
  3548   0000D6  0012               	return	
  3549   0000D8                     l4576:
  3550                           
  3551                           ;TAD_RFID.c: 250:                         addr = 0x04;
  3552   0000D8  0E04               	movlw	4
  3553   0000DA  6E29               	movwf	motor_RFID@addr^0,c
  3554                           
  3555                           ;TAD_RFID.c: 251:                         operation_pending = 1;
  3556   0000DC  0E01               	movlw	1
  3557   0000DE  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3558                           
  3559                           ;TAD_RFID.c: 252:                         substate = 3;
  3560   0000E0  0E03               	movlw	3
  3561   0000E2  6E39               	movwf	motor_RFID@substate^0,c
  3562                           
  3563                           ;TAD_RFID.c: 253:                         break;
  3564   0000E4  0012               	return	
  3565   0000E6                     l4578:
  3566                           
  3567                           ;TAD_RFID.c: 255:                         if (tempRegValue == 0xFF) {
  3568   0000E6  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3569   0000E8  A4D8               	btfss	status,2,c
  3570   0000EA  D002               	goto	l4582
  3571   0000EC                     u4010:
  3572                           
  3573                           ;TAD_RFID.c: 256:                             substate = 0;
  3574   0000EC  6A39               	clrf	motor_RFID@substate^0,c
  3575                           
  3576                           ;TAD_RFID.c: 257:                         } else {
  3577   0000EE  0012               	return	
  3578   0000F0                     l4582:
  3579                           
  3580                           ;TAD_RFID.c: 258:                             addr = 0x02;
  3581   0000F0  0E02               	movlw	2
  3582   0000F2  6E29               	movwf	motor_RFID@addr^0,c
  3583                           
  3584                           ;TAD_RFID.c: 259:                             value = tempRegValue & ~0x80;
  3585   0000F4  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3586   0000F6  0B7F               	andlw	127
  3587   0000F8  6E28               	movwf	motor_RFID@value^0,c
  3588                           
  3589                           ;TAD_RFID.c: 260:                             operation_pending = 2;
  3590   0000FA  0E02               	movlw	2
  3591   0000FC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3592                           
  3593                           ;TAD_RFID.c: 261:                             substate = 4;
  3594   0000FE  0E04               	movlw	4
  3595   000100  6E39               	movwf	motor_RFID@substate^0,c
  3596   000102  0012               	return	
  3597   000104                     l4590:
  3598                           
  3599                           ;TAD_RFID.c: 265:                         addr = 0x0A;
  3600   000104  0E0A               	movlw	10
  3601   000106  6E29               	movwf	motor_RFID@addr^0,c
  3602                           
  3603                           ;TAD_RFID.c: 266:                         operation_pending = 1;
  3604   000108  0E01               	movlw	1
  3605   00010A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3606                           
  3607                           ;TAD_RFID.c: 267:                         substate = 5;
  3608   00010C  0E05               	movlw	5
  3609   00010E  6E39               	movwf	motor_RFID@substate^0,c
  3610                           
  3611                           ;TAD_RFID.c: 268:                         break;
  3612   000110  0012               	return	
  3613   000112                     l4592:
  3614                           
  3615                           ;TAD_RFID.c: 270:                         if (tempRegValue == 0xFF) {
  3616   000112  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3617   000114  B4D8               	btfsc	status,2,c
  3618   000116  D7EA               	goto	u4010
  3619                           
  3620                           ;TAD_RFID.c: 273:                             addr = 0x0A;
  3621   000118  0E0A               	movlw	10
  3622   00011A  6E29               	movwf	motor_RFID@addr^0,c
  3623                           
  3624                           ;TAD_RFID.c: 274:                             value = tempRegValue | 0x80;
  3625   00011C  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3626   00011E  0980               	iorlw	128
  3627   000120  6E28               	movwf	motor_RFID@value^0,c
  3628                           
  3629                           ;TAD_RFID.c: 275:                             operation_pending = 2;
  3630   000122  0E02               	movlw	2
  3631   000124  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3632                           
  3633                           ;TAD_RFID.c: 276:                             substate = 6;
  3634   000126  0E06               	movlw	6
  3635   000128  6E39               	movwf	motor_RFID@substate^0,c
  3636   00012A  0012               	return	
  3637   00012C                     l4604:
  3638                           
  3639                           ;TAD_RFID.c: 280:                         addr = 0x01;
  3640   00012C  0E01               	movlw	1
  3641   00012E  6E29               	movwf	motor_RFID@addr^0,c
  3642                           
  3643                           ;TAD_RFID.c: 281:                         value = 0x00;
  3644   000130  6A28               	clrf	motor_RFID@value^0,c
  3645                           
  3646                           ;TAD_RFID.c: 282:                         operation_pending = 2;
  3647   000132  0E02               	movlw	2
  3648   000134  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3649                           
  3650                           ;TAD_RFID.c: 283:                         substate = 7;
  3651   000136  0E07               	movlw	7
  3652   000138  6E39               	movwf	motor_RFID@substate^0,c
  3653                           
  3654                           ;TAD_RFID.c: 284:                         break;
  3655   00013A  0012               	return	
  3656   00013C                     l4608:
  3657                           
  3658                           ;TAD_RFID.c: 286:                         addr = 0x09;
  3659   00013C  0E09               	movlw	9
  3660   00013E  6E29               	movwf	motor_RFID@addr^0,c
  3661                           
  3662                           ;TAD_RFID.c: 287:                         value = TagType;
  3663   000140  C033  F028         	movff	motor_RFID@TagType,motor_RFID@value
  3664                           
  3665                           ;TAD_RFID.c: 288:                         operation_pending = 2;
  3666   000144  0E02               	movlw	2
  3667   000146  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3668                           
  3669                           ;TAD_RFID.c: 289:                         substate = 8;
  3670   000148  0E08               	movlw	8
  3671   00014A  6E39               	movwf	motor_RFID@substate^0,c
  3672                           
  3673                           ;TAD_RFID.c: 290:                         break;
  3674   00014C  0012               	return	
  3675   00014E                     l4612:
  3676                           
  3677                           ;TAD_RFID.c: 292:                         addr = 0x01;
  3678   00014E  0E01               	movlw	1
  3679   000150  6E29               	movwf	motor_RFID@addr^0,c
  3680                           
  3681                           ;TAD_RFID.c: 293:                         value = 0x0C;
  3682   000152  0E0C               	movlw	12
  3683   000154  6E28               	movwf	motor_RFID@value^0,c
  3684                           
  3685                           ;TAD_RFID.c: 294:                         operation_pending = 2;
  3686   000156  0E02               	movlw	2
  3687   000158  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3688                           
  3689                           ;TAD_RFID.c: 295:                         substate = 9;
  3690   00015A  0E09               	movlw	9
  3691   00015C  6E39               	movwf	motor_RFID@substate^0,c
  3692                           
  3693                           ;TAD_RFID.c: 296:                         break;
  3694   00015E  0012               	return	
  3695   000160                     l4614:
  3696                           
  3697                           ;TAD_RFID.c: 298:                         addr = 0x0D;
  3698   000160  0E0D               	movlw	13
  3699   000162  6E29               	movwf	motor_RFID@addr^0,c
  3700                           
  3701                           ;TAD_RFID.c: 299:                         operation_pending = 1;
  3702   000164  0E01               	movlw	1
  3703   000166  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3704                           
  3705                           ;TAD_RFID.c: 300:                         substate = 10;
  3706   000168  0E0A               	movlw	10
  3707   00016A  6E39               	movwf	motor_RFID@substate^0,c
  3708                           
  3709                           ;TAD_RFID.c: 301:                         break;
  3710   00016C  0012               	return	
  3711   00016E                     l4616:
  3712                           
  3713                           ;TAD_RFID.c: 303:                         if (tempRegValue == 0xFF) {
  3714   00016E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3715   000170  B4D8               	btfsc	status,2,c
  3716   000172  D7BC               	goto	u4010
  3717                           
  3718                           ;TAD_RFID.c: 306:                             addr = 0x0D;
  3719   000174  0E0D               	movlw	13
  3720   000176  6E29               	movwf	motor_RFID@addr^0,c
  3721                           
  3722                           ;TAD_RFID.c: 307:                             value = tempRegValue | 0x80;
  3723   000178  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3724   00017A  0980               	iorlw	128
  3725   00017C  6E28               	movwf	motor_RFID@value^0,c
  3726                           
  3727                           ;TAD_RFID.c: 308:                             operation_pending = 2;
  3728   00017E  0E02               	movlw	2
  3729   000180  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3730                           
  3731                           ;TAD_RFID.c: 309:                             substate = 11;
  3732   000182  0E0B               	movlw	11
  3733   000184  6E39               	movwf	motor_RFID@substate^0,c
  3734   000186  0012               	return	
  3735   000188                     l417:
  3736                           
  3737                           ;TAD_RFID.c: 313:                         i = 0xFF;
  3738   000188  6835               	setf	motor_RFID@i^0,c
  3739                           
  3740                           ;TAD_RFID.c: 314:                         addr = 0x04;
  3741   00018A  0E04               	movlw	4
  3742   00018C  6E29               	movwf	motor_RFID@addr^0,c
  3743                           
  3744                           ;TAD_RFID.c: 315:                         operation_pending = 1;
  3745   00018E  0E01               	movlw	1
  3746   000190  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3747                           
  3748                           ;TAD_RFID.c: 316:                         substate = 12;
  3749   000192  0E0C               	movlw	12
  3750   000194  6E39               	movwf	motor_RFID@substate^0,c
  3751                           
  3752                           ;TAD_RFID.c: 317:                         break;
  3753   000196  0012               	return	
  3754   000198                     l4630:
  3755                           
  3756                           ;TAD_RFID.c: 319:                         if (tempRegValue == 0xFF) {
  3757   000198  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3758   00019A  B4D8               	btfsc	status,2,c
  3759   00019C  D7A7               	goto	u4010
  3760                           
  3761                           ;TAD_RFID.c: 322:                             n = tempRegValue;
  3762   00019E  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3763                           
  3764                           ;TAD_RFID.c: 323:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3765   0001A2  B036               	btfsc	motor_RFID@n^0,0,c
  3766   0001A4  D007               	goto	l4638
  3767   0001A6  5036               	movf	motor_RFID@n^0,w,c
  3768   0001A8  1437               	andwf	motor_RFID@waitIRq^0,w,c
  3769   0001AA  0900               	iorlw	0
  3770   0001AC  A4D8               	btfss	status,2,c
  3771   0001AE  D002               	goto	l4638
  3772   0001B0  2E35               	decfsz	motor_RFID@i^0,f,c
  3773   0001B2  D007               	goto	l4640
  3774   0001B4                     l4638:
  3775                           
  3776                           ;TAD_RFID.c: 324:                                 addr = 0x0D;
  3777   0001B4  0E0D               	movlw	13
  3778   0001B6  6E29               	movwf	motor_RFID@addr^0,c
  3779                           
  3780                           ;TAD_RFID.c: 325:                                 operation_pending = 1;
  3781   0001B8  0E01               	movlw	1
  3782   0001BA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3783                           
  3784                           ;TAD_RFID.c: 326:                                 substate = 13;
  3785   0001BC  0E0D               	movlw	13
  3786   0001BE  6E39               	movwf	motor_RFID@substate^0,c
  3787                           
  3788                           ;TAD_RFID.c: 327:                             } else {
  3789   0001C0  0012               	return	
  3790   0001C2                     l4640:
  3791                           
  3792                           ;TAD_RFID.c: 328:                                 addr = 0x04;
  3793   0001C2  0E04               	movlw	4
  3794   0001C4  6E29               	movwf	motor_RFID@addr^0,c
  3795                           
  3796                           ;TAD_RFID.c: 329:                                 operation_pending = 1;
  3797   0001C6  0E01               	movlw	1
  3798   0001C8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3799   0001CA  0012               	return	
  3800   0001CC                     l4642:
  3801                           
  3802                           ;TAD_RFID.c: 334:                         if (tempRegValue == 0xFF) {
  3803   0001CC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3804   0001CE  B4D8               	btfsc	status,2,c
  3805   0001D0  D78D               	goto	u4010
  3806   0001D2  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3807   0001D4  B4D8               	btfsc	status,2,c
  3808   0001D6  D00A               	goto	l4656
  3809                           
  3810                           ;TAD_RFID.c: 337:                             addr = 0x0D;
  3811   0001D8  0E0D               	movlw	13
  3812   0001DA  6E29               	movwf	motor_RFID@addr^0,c
  3813                           
  3814                           ;TAD_RFID.c: 338:                             value = tempRegValue & ~0x80;
  3815   0001DC  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3816   0001DE  0B7F               	andlw	127
  3817   0001E0  6E28               	movwf	motor_RFID@value^0,c
  3818                           
  3819                           ;TAD_RFID.c: 339:                             operation_pending = 2;
  3820   0001E2  0E02               	movlw	2
  3821   0001E4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3822                           
  3823                           ;TAD_RFID.c: 340:                             substate = 14;
  3824   0001E6  0E0E               	movlw	14
  3825   0001E8  6E39               	movwf	motor_RFID@substate^0,c
  3826                           
  3827                           ;TAD_RFID.c: 341:                         } else {
  3828   0001EA  0012               	return	
  3829   0001EC                     l4656:
  3830                           
  3831                           ;TAD_RFID.c: 342:                             addr = 0x0D;
  3832   0001EC  0E0D               	movlw	13
  3833   0001EE  6E29               	movwf	motor_RFID@addr^0,c
  3834                           
  3835                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3836   0001F0  0E01               	movlw	1
  3837   0001F2  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3838   0001F4  0012               	return	
  3839   0001F6                     l4658:
  3840                           
  3841                           ;TAD_RFID.c: 348:                         addr = 0x06;
  3842   0001F6  0E06               	movlw	6
  3843   0001F8  6E29               	movwf	motor_RFID@addr^0,c
  3844                           
  3845                           ;TAD_RFID.c: 349:                         operation_pending = 1;
  3846   0001FA  0E01               	movlw	1
  3847   0001FC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3848                           
  3849                           ;TAD_RFID.c: 350:                         substate = 15;
  3850   0001FE  0E0F               	movlw	15
  3851   000200  6E39               	movwf	motor_RFID@substate^0,c
  3852                           
  3853                           ;TAD_RFID.c: 351:                         break;
  3854   000202  0012               	return	
  3855   000204                     l4660:
  3856                           
  3857                           ;TAD_RFID.c: 353:                         if (tempRegValue == 0xFF) {
  3858   000204  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3859   000206  B4D8               	btfsc	status,2,c
  3860   000208  D771               	goto	u4010
  3861   00020A  5035               	movf	motor_RFID@i^0,w,c
  3862   00020C  B4D8               	btfsc	status,2,c
  3863   00020E  D00D               	goto	l434
  3864   000210  C030  F072         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3865   000214  0E1B               	movlw	27
  3866   000216  1672               	andwf	??_motor_RFID^0,f,c
  3867   000218  A4D8               	btfss	status,2,c
  3868   00021A  D007               	goto	l434
  3869                           
  3870                           ;TAD_RFID.c: 356:                             addr = 0x0A;
  3871   00021C  0E0A               	movlw	10
  3872   00021E  6E29               	movwf	motor_RFID@addr^0,c
  3873                           
  3874                           ;TAD_RFID.c: 357:                             operation_pending = 1;
  3875   000220  0E01               	movlw	1
  3876   000222  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3877                           
  3878                           ;TAD_RFID.c: 358:                             substate = 16;
  3879   000224  0E10               	movlw	16
  3880   000226  6E39               	movwf	motor_RFID@substate^0,c
  3881                           
  3882                           ;TAD_RFID.c: 359:                         } else {
  3883   000228  0012               	return	
  3884   00022A                     l434:
  3885                           
  3886                           ;TAD_RFID.c: 361:                             state = substate = 0;
  3887   00022A  6A39               	clrf	motor_RFID@substate^0,c
  3888   00022C  6A3A               	clrf	motor_RFID@state^0,c
  3889   00022E  0012               	return	
  3890   000230                     l4670:
  3891                           
  3892                           ;TAD_RFID.c: 365:                         if (tempRegValue == 0xFF) {
  3893   000230  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3894   000232  B4D8               	btfsc	status,2,c
  3895   000234  D75B               	goto	u4010
  3896                           
  3897                           ;TAD_RFID.c: 368:                             fifoLevel = tempRegValue;
  3898   000236  C030  F02E         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3899                           
  3900                           ;TAD_RFID.c: 369:                             addr = 0x0C;
  3901   00023A  0E0C               	movlw	12
  3902   00023C  6E29               	movwf	motor_RFID@addr^0,c
  3903                           
  3904                           ;TAD_RFID.c: 370:                             operation_pending = 1;
  3905   00023E  0E01               	movlw	1
  3906   000240  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3907                           
  3908                           ;TAD_RFID.c: 371:                             substate = 17;
  3909   000242  0E11               	movlw	17
  3910   000244  6E39               	movwf	motor_RFID@substate^0,c
  3911   000246  0012               	return	
  3912   000248                     l4676:
  3913                           
  3914                           ;TAD_RFID.c: 375:                         if (tempRegValue == 0xFF) {
  3915   000248  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3916   00024A  B4D8               	btfsc	status,2,c
  3917   00024C  D74F               	goto	u4010
  3918                           
  3919                           ;TAD_RFID.c: 378:                             lastBitsVal = tempRegValue & 0x07;
  3920   00024E  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3921   000250  0B07               	andlw	7
  3922   000252  6E2F               	movwf	motor_RFID@lastBitsVal^0,c
  3923                           
  3924                           ;TAD_RFID.c: 379:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3925   000254  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3926   000256  A4D8               	btfss	status,2,c
  3927   000258  D007               	goto	l4686
  3928   00025A  502E               	movf	motor_RFID@fifoLevel^0,w,c
  3929   00025C  0D08               	mullw	8
  3930   00025E  CFF3 F074          	movff	prodl,_motor_RFID$836
  3931   000262  CFF4 F075          	movff	prodh,_motor_RFID$836+1
  3932   000266  D016               	goto	l4688
  3933   000268                     l4686:
  3934   000268  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3935   00026A  C02E  F072         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3936   00026E  6A73               	clrf	(??_motor_RFID+1)^0,c
  3937   000270  90D8               	bcf	status,0,c
  3938   000272  3672               	rlcf	??_motor_RFID^0,f,c
  3939   000274  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3940   000276  90D8               	bcf	status,0,c
  3941   000278  3672               	rlcf	??_motor_RFID^0,f,c
  3942   00027A  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3943   00027C  90D8               	bcf	status,0,c
  3944   00027E  3672               	rlcf	??_motor_RFID^0,f,c
  3945   000280  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3946   000282  2672               	addwf	??_motor_RFID^0,f,c
  3947   000284  0E00               	movlw	0
  3948   000286  2273               	addwfc	(??_motor_RFID+1)^0,f,c
  3949   000288  0EF8               	movlw	248
  3950   00028A  2472               	addwf	??_motor_RFID^0,w,c
  3951   00028C  6E74               	movwf	_motor_RFID$836^0,c
  3952   00028E  0EFF               	movlw	255
  3953   000290  2073               	addwfc	(??_motor_RFID+1)^0,w,c
  3954   000292  6E75               	movwf	(_motor_RFID$836+1)^0,c
  3955   000294                     l4688:
  3956   000294  C074  F02D         	movff	_motor_RFID$836,motor_RFID@backBitsCalc
  3957                           
  3958                           ;TAD_RFID.c: 380:                             if (backBitsCalc == 0x10) {
  3959   000298  0E10               	movlw	16
  3960   00029A  182D               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3961   00029C  A4D8               	btfss	status,2,c
  3962   00029E  D7C5               	goto	l434
  3963                           
  3964                           ;TAD_RFID.c: 381:                                 state = 1;
  3965   0002A0  0E01               	movlw	1
  3966   0002A2  6E3A               	movwf	motor_RFID@state^0,c
  3967   0002A4  D723               	goto	u4010
  3968   0002A6                     l4696:
  3969   0002A6  5039               	movf	motor_RFID@substate^0,w,c
  3970                           
  3971                           ; Switch size 1, requested type "simple"
  3972                           ; Number of cases is 18, Range of values is 0 to 17
  3973                           ; switch strategies available:
  3974                           ; Name         Instructions Cycles
  3975                           ; simple_byte           55    28 (average)
  3976                           ;	Chosen strategy is simple_byte
  3977   0002A8  0A00               	xorlw	0	; case 0
  3978   0002AA  B4D8               	btfsc	status,2,c
  3979   0002AC  D6FC               	goto	l4566
  3980   0002AE  0A01               	xorlw	1	; case 1
  3981   0002B0  B4D8               	btfsc	status,2,c
  3982   0002B2  D702               	goto	l4568
  3983   0002B4  0A03               	xorlw	3	; case 2
  3984   0002B6  B4D8               	btfsc	status,2,c
  3985   0002B8  D70F               	goto	l4576
  3986   0002BA  0A01               	xorlw	1	; case 3
  3987   0002BC  B4D8               	btfsc	status,2,c
  3988   0002BE  D713               	goto	l4578
  3989   0002C0  0A07               	xorlw	7	; case 4
  3990   0002C2  B4D8               	btfsc	status,2,c
  3991   0002C4  D71F               	goto	l4590
  3992   0002C6  0A01               	xorlw	1	; case 5
  3993   0002C8  B4D8               	btfsc	status,2,c
  3994   0002CA  D723               	goto	l4592
  3995   0002CC  0A03               	xorlw	3	; case 6
  3996   0002CE  B4D8               	btfsc	status,2,c
  3997   0002D0  D72D               	goto	l4604
  3998   0002D2  0A01               	xorlw	1	; case 7
  3999   0002D4  B4D8               	btfsc	status,2,c
  4000   0002D6  D732               	goto	l4608
  4001   0002D8  0A0F               	xorlw	15	; case 8
  4002   0002DA  B4D8               	btfsc	status,2,c
  4003   0002DC  D738               	goto	l4612
  4004   0002DE  0A01               	xorlw	1	; case 9
  4005   0002E0  B4D8               	btfsc	status,2,c
  4006   0002E2  D73E               	goto	l4614
  4007   0002E4  0A03               	xorlw	3	; case 10
  4008   0002E6  B4D8               	btfsc	status,2,c
  4009   0002E8  D742               	goto	l4616
  4010   0002EA  0A01               	xorlw	1	; case 11
  4011   0002EC  B4D8               	btfsc	status,2,c
  4012   0002EE  D74C               	goto	l417
  4013   0002F0  0A07               	xorlw	7	; case 12
  4014   0002F2  B4D8               	btfsc	status,2,c
  4015   0002F4  D751               	goto	l4630
  4016   0002F6  0A01               	xorlw	1	; case 13
  4017   0002F8  B4D8               	btfsc	status,2,c
  4018   0002FA  D768               	goto	l4642
  4019   0002FC  0A03               	xorlw	3	; case 14
  4020   0002FE  B4D8               	btfsc	status,2,c
  4021   000300  D77A               	goto	l4658
  4022   000302  0A01               	xorlw	1	; case 15
  4023   000304  B4D8               	btfsc	status,2,c
  4024   000306  D77E               	goto	l4660
  4025   000308  0A1F               	xorlw	31	; case 16
  4026   00030A  B4D8               	btfsc	status,2,c
  4027   00030C  D791               	goto	l4670
  4028   00030E  0A01               	xorlw	1	; case 17
  4029   000310  A4D8               	btfss	status,2,c
  4030   000312  0012               	return	
  4031   000314  D799               	goto	l4676
  4032   000316                     l4698:
  4033                           
  4034                           ;TAD_RFID.c: 394:                         addr = 0x0D;
  4035   000316  0E0D               	movlw	13
  4036   000318  6E29               	movwf	motor_RFID@addr^0,c
  4037                           
  4038                           ;TAD_RFID.c: 395:                         value = 0x00;
  4039   00031A  6A28               	clrf	motor_RFID@value^0,c
  4040                           
  4041                           ;TAD_RFID.c: 396:                         operation_pending = 2;
  4042   00031C  0E02               	movlw	2
  4043   00031E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4044                           
  4045                           ;TAD_RFID.c: 397:                         substate = 1;
  4046   000320  0E01               	movlw	1
  4047   000322  6E39               	movwf	motor_RFID@substate^0,c
  4048                           
  4049                           ;TAD_RFID.c: 398:                         break;
  4050   000324  0012               	return	
  4051   000326                     l4702:
  4052                           
  4053                           ;TAD_RFID.c: 400:                         UID[0] = 0x93;
  4054   000326  0E93               	movlw	147
  4055   000328  6E01               	movwf	motor_RFID@UID^0,c
  4056                           
  4057                           ;TAD_RFID.c: 401:                         UID[1] = 0x20;
  4058   00032A  0E20               	movlw	32
  4059   00032C  6E02               	movwf	(motor_RFID@UID+1)^0,c
  4060                           
  4061                           ;TAD_RFID.c: 402:                         addr = 0x08;
  4062   00032E  0E08               	movlw	8
  4063   000330  6E29               	movwf	motor_RFID@addr^0,c
  4064                           
  4065                           ;TAD_RFID.c: 403:                         operation_pending = 1;
  4066   000332  0E01               	movlw	1
  4067   000334  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4068                           
  4069                           ;TAD_RFID.c: 404:                         substate = 2;
  4070   000336  0E02               	movlw	2
  4071   000338  6E39               	movwf	motor_RFID@substate^0,c
  4072                           
  4073                           ;TAD_RFID.c: 405:                         break;
  4074   00033A  0012               	return	
  4075   00033C                     l4704:
  4076                           
  4077                           ;TAD_RFID.c: 407:                         if (tempRegValue == 0xFF) {
  4078   00033C  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4079   00033E  B4D8               	btfsc	status,2,c
  4080   000340  D774               	goto	l434
  4081                           
  4082                           ;TAD_RFID.c: 410:                             addr = 0x08;
  4083   000342  0E08               	movlw	8
  4084   000344  6E29               	movwf	motor_RFID@addr^0,c
  4085                           
  4086                           ;TAD_RFID.c: 411:                             value = tempRegValue & ~0x08;
  4087   000346  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4088   000348  0BF7               	andlw	247
  4089   00034A  6E28               	movwf	motor_RFID@value^0,c
  4090                           
  4091                           ;TAD_RFID.c: 412:                             operation_pending = 2;
  4092   00034C  0E02               	movlw	2
  4093   00034E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4094                           
  4095                           ;TAD_RFID.c: 413:                             substate = 3;
  4096   000350  0E03               	movlw	3
  4097   000352  6E39               	movwf	motor_RFID@substate^0,c
  4098   000354  0012               	return	
  4099   000356                     l4716:
  4100                           
  4101                           ;TAD_RFID.c: 417:                         irqEn = 0x77;
  4102   000356  0E77               	movlw	119
  4103   000358  6E38               	movwf	motor_RFID@irqEn^0,c
  4104                           
  4105                           ;TAD_RFID.c: 418:                         waitIRq = 0x30;
  4106   00035A  0E30               	movlw	48
  4107   00035C  6E37               	movwf	motor_RFID@waitIRq^0,c
  4108                           
  4109                           ;TAD_RFID.c: 419:                         addr = 0x02;
  4110   00035E  0E02               	movlw	2
  4111   000360  6E29               	movwf	motor_RFID@addr^0,c
  4112                           
  4113                           ;TAD_RFID.c: 420:                         value = irqEn | 0x80;
  4114   000362  5038               	movf	motor_RFID@irqEn^0,w,c
  4115   000364  0980               	iorlw	128
  4116   000366  D6C8               	goto	L4
  4117   000368                     l4724:
  4118                           
  4119                           ;TAD_RFID.c: 425:                         addr = 0x04;
  4120   000368  0E04               	movlw	4
  4121   00036A  6E29               	movwf	motor_RFID@addr^0,c
  4122                           
  4123                           ;TAD_RFID.c: 426:                         operation_pending = 1;
  4124   00036C  0E01               	movlw	1
  4125   00036E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4126                           
  4127                           ;TAD_RFID.c: 427:                         substate = 5;
  4128   000370  0E05               	movlw	5
  4129   000372  6E39               	movwf	motor_RFID@substate^0,c
  4130                           
  4131                           ;TAD_RFID.c: 428:                         break;
  4132   000374  0012               	return	
  4133   000376                     l4726:
  4134                           
  4135                           ;TAD_RFID.c: 430:                         if (tempRegValue == 0xFF) {
  4136   000376  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4137   000378  B4D8               	btfsc	status,2,c
  4138   00037A  D757               	goto	l434
  4139                           
  4140                           ;TAD_RFID.c: 433:                             addr = 0x04;
  4141   00037C  0E04               	movlw	4
  4142   00037E  6E29               	movwf	motor_RFID@addr^0,c
  4143                           
  4144                           ;TAD_RFID.c: 434:                             value = tempRegValue & ~0x80;
  4145   000380  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4146   000382  0B7F               	andlw	127
  4147   000384  D6CD               	goto	L5
  4148   000386                     l4738:
  4149                           
  4150                           ;TAD_RFID.c: 440:                         addr = 0x0A;
  4151   000386  0E0A               	movlw	10
  4152   000388  6E29               	movwf	motor_RFID@addr^0,c
  4153                           
  4154                           ;TAD_RFID.c: 441:                         operation_pending = 1;
  4155   00038A  0E01               	movlw	1
  4156   00038C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4157                           
  4158                           ;TAD_RFID.c: 442:                         substate = 7;
  4159   00038E  0E07               	movlw	7
  4160   000390  6E39               	movwf	motor_RFID@substate^0,c
  4161                           
  4162                           ;TAD_RFID.c: 443:                         break;
  4163   000392  0012               	return	
  4164   000394                     l4740:
  4165                           
  4166                           ;TAD_RFID.c: 445:                         if (tempRegValue == 0xFF) {
  4167   000394  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4168   000396  B4D8               	btfsc	status,2,c
  4169   000398  D748               	goto	l434
  4170                           
  4171                           ;TAD_RFID.c: 448:                             addr = 0x0A;
  4172   00039A  0E0A               	movlw	10
  4173   00039C  6E29               	movwf	motor_RFID@addr^0,c
  4174                           
  4175                           ;TAD_RFID.c: 449:                             value = tempRegValue | 0x80;
  4176   00039E  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4177   0003A0  0980               	iorlw	128
  4178   0003A2  6E28               	movwf	motor_RFID@value^0,c
  4179                           
  4180                           ;TAD_RFID.c: 450:                             operation_pending = 2;
  4181   0003A4  0E02               	movlw	2
  4182   0003A6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4183                           
  4184                           ;TAD_RFID.c: 451:                             substate = 8;
  4185   0003A8  0E08               	movlw	8
  4186   0003AA  6E39               	movwf	motor_RFID@substate^0,c
  4187   0003AC  0012               	return	
  4188   0003AE                     l4752:
  4189                           
  4190                           ;TAD_RFID.c: 455:                         addr = 0x01;
  4191   0003AE  0E01               	movlw	1
  4192   0003B0  6E29               	movwf	motor_RFID@addr^0,c
  4193                           
  4194                           ;TAD_RFID.c: 456:                         value = 0x00;
  4195   0003B2  6A28               	clrf	motor_RFID@value^0,c
  4196                           
  4197                           ;TAD_RFID.c: 457:                         operation_pending = 2;
  4198   0003B4  0E02               	movlw	2
  4199   0003B6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4200                           
  4201                           ;TAD_RFID.c: 458:                         substate = 9;
  4202   0003B8  0E09               	movlw	9
  4203   0003BA  6E39               	movwf	motor_RFID@substate^0,c
  4204                           
  4205                           ;TAD_RFID.c: 459:                         break;
  4206   0003BC  0012               	return	
  4207   0003BE                     l4756:
  4208                           
  4209                           ;TAD_RFID.c: 461:                         addr = 0x09;
  4210   0003BE  0E09               	movlw	9
  4211   0003C0  6E29               	movwf	motor_RFID@addr^0,c
  4212                           
  4213                           ;TAD_RFID.c: 462:                         value = UID[0];
  4214   0003C2  C001  F028         	movff	motor_RFID@UID,motor_RFID@value
  4215                           
  4216                           ;TAD_RFID.c: 463:                         operation_pending = 2;
  4217   0003C6  0E02               	movlw	2
  4218   0003C8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4219                           
  4220                           ;TAD_RFID.c: 464:                         substate = 10;
  4221   0003CA  0E0A               	movlw	10
  4222   0003CC  6E39               	movwf	motor_RFID@substate^0,c
  4223                           
  4224                           ;TAD_RFID.c: 465:                         break;
  4225   0003CE  0012               	return	
  4226   0003D0                     l4760:
  4227                           
  4228                           ;TAD_RFID.c: 467:                         addr = 0x09;
  4229   0003D0  0E09               	movlw	9
  4230   0003D2  6E29               	movwf	motor_RFID@addr^0,c
  4231                           
  4232                           ;TAD_RFID.c: 468:                         value = UID[1];
  4233   0003D4  C002  F028         	movff	motor_RFID@UID+1,motor_RFID@value
  4234                           
  4235                           ;TAD_RFID.c: 469:                         operation_pending = 2;
  4236   0003D8  0E02               	movlw	2
  4237   0003DA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4238                           
  4239                           ;TAD_RFID.c: 470:                         substate = 11;
  4240   0003DC  0E0B               	movlw	11
  4241   0003DE  6E39               	movwf	motor_RFID@substate^0,c
  4242                           
  4243                           ;TAD_RFID.c: 471:                         break;
  4244   0003E0  0012               	return	
  4245   0003E2                     l4764:
  4246                           
  4247                           ;TAD_RFID.c: 473:                         addr = 0x01;
  4248   0003E2  0E01               	movlw	1
  4249   0003E4  6E29               	movwf	motor_RFID@addr^0,c
  4250                           
  4251                           ;TAD_RFID.c: 474:                         value = 0x0C;
  4252   0003E6  0E0C               	movlw	12
  4253   0003E8  6E28               	movwf	motor_RFID@value^0,c
  4254                           
  4255                           ;TAD_RFID.c: 475:                         operation_pending = 2;
  4256   0003EA  0E02               	movlw	2
  4257   0003EC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4258                           
  4259                           ;TAD_RFID.c: 476:                         substate = 12;
  4260   0003EE  0E0C               	movlw	12
  4261   0003F0  6E39               	movwf	motor_RFID@substate^0,c
  4262                           
  4263                           ;TAD_RFID.c: 477:                         break;
  4264   0003F2  0012               	return	
  4265   0003F4                     l4768:
  4266                           
  4267                           ;TAD_RFID.c: 484:                         if (tempRegValue == 0xFF) {
  4268   0003F4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4269   0003F6  B4D8               	btfsc	status,2,c
  4270   0003F8  D718               	goto	l434
  4271                           
  4272                           ;TAD_RFID.c: 487:                             addr = 0x0D;
  4273   0003FA  0E0D               	movlw	13
  4274   0003FC  6E29               	movwf	motor_RFID@addr^0,c
  4275                           
  4276                           ;TAD_RFID.c: 488:                             value = tempRegValue | 0x80;
  4277   0003FE  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4278   000400  0980               	iorlw	128
  4279   000402  D6EE               	goto	L6
  4280   000404                     l474:
  4281                           
  4282                           ;TAD_RFID.c: 494:                         i = 0xFF;
  4283   000404  6835               	setf	motor_RFID@i^0,c
  4284                           
  4285                           ;TAD_RFID.c: 495:                         addr = 0x04;
  4286   000406  0E04               	movlw	4
  4287   000408  6E29               	movwf	motor_RFID@addr^0,c
  4288                           
  4289                           ;TAD_RFID.c: 496:                         operation_pending = 1;
  4290   00040A  0E01               	movlw	1
  4291   00040C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4292                           
  4293                           ;TAD_RFID.c: 497:                         substate = 15;
  4294   00040E  0E0F               	movlw	15
  4295   000410  6E39               	movwf	motor_RFID@substate^0,c
  4296                           
  4297                           ;TAD_RFID.c: 498:                         break;
  4298   000412  0012               	return	
  4299   000414                     l4782:
  4300                           
  4301                           ;TAD_RFID.c: 500:                         if (tempRegValue == 0xFF) {
  4302   000414  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4303   000416  B4D8               	btfsc	status,2,c
  4304   000418  D708               	goto	l434
  4305                           
  4306                           ;TAD_RFID.c: 503:                             n = tempRegValue;
  4307   00041A  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  4308                           
  4309                           ;TAD_RFID.c: 504:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  4310   00041E  B036               	btfsc	motor_RFID@n^0,0,c
  4311   000420  D007               	goto	l4790
  4312   000422  5036               	movf	motor_RFID@n^0,w,c
  4313   000424  1437               	andwf	motor_RFID@waitIRq^0,w,c
  4314   000426  0900               	iorlw	0
  4315   000428  A4D8               	btfss	status,2,c
  4316   00042A  D002               	goto	l4790
  4317   00042C  2E35               	decfsz	motor_RFID@i^0,f,c
  4318   00042E  D6C9               	goto	l4640
  4319   000430                     l4790:
  4320                           
  4321                           ;TAD_RFID.c: 505:                                 addr = 0x0D;
  4322   000430  0E0D               	movlw	13
  4323   000432  6E29               	movwf	motor_RFID@addr^0,c
  4324                           
  4325                           ;TAD_RFID.c: 506:                                 operation_pending = 1;
  4326   000434  0E01               	movlw	1
  4327   000436  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4328                           
  4329                           ;TAD_RFID.c: 507:                                 substate = 16;
  4330   000438  0E10               	movlw	16
  4331   00043A  6E39               	movwf	motor_RFID@substate^0,c
  4332                           
  4333                           ;TAD_RFID.c: 508:                             } else {
  4334   00043C  0012               	return	
  4335   00043E                     l4794:
  4336                           
  4337                           ;TAD_RFID.c: 516:                         if (tempRegValue == 0xFF) {
  4338   00043E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4339   000440  B4D8               	btfsc	status,2,c
  4340   000442  D6F3               	goto	l434
  4341                           
  4342                           ;TAD_RFID.c: 519:                             addr = 0x0D;
  4343   000444  0E0D               	movlw	13
  4344   000446  6E29               	movwf	motor_RFID@addr^0,c
  4345                           
  4346                           ;TAD_RFID.c: 520:                             value = tempRegValue & ~0x80;
  4347   000448  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4348   00044A  0B7F               	andlw	127
  4349   00044C  6E28               	movwf	motor_RFID@value^0,c
  4350                           
  4351                           ;TAD_RFID.c: 521:                             operation_pending = 2;
  4352   00044E  0E02               	movlw	2
  4353   000450  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4354                           
  4355                           ;TAD_RFID.c: 522:                             substate = 17;
  4356   000452  0E11               	movlw	17
  4357   000454  6E39               	movwf	motor_RFID@substate^0,c
  4358   000456  0012               	return	
  4359   000458                     l4806:
  4360                           
  4361                           ;TAD_RFID.c: 526:                         addr = 0x06;
  4362   000458  0E06               	movlw	6
  4363   00045A  6E29               	movwf	motor_RFID@addr^0,c
  4364                           
  4365                           ;TAD_RFID.c: 527:                         operation_pending = 1;
  4366   00045C  0E01               	movlw	1
  4367   00045E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4368                           
  4369                           ;TAD_RFID.c: 528:                         substate = 18;
  4370   000460  0E12               	movlw	18
  4371   000462  6E39               	movwf	motor_RFID@substate^0,c
  4372                           
  4373                           ;TAD_RFID.c: 529:                         break;
  4374   000464  0012               	return	
  4375   000466                     l4808:
  4376                           
  4377                           ;TAD_RFID.c: 531:                         if (tempRegValue == 0xFF) {
  4378   000466  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4379   000468  B4D8               	btfsc	status,2,c
  4380   00046A  D6DF               	goto	l434
  4381   00046C  5035               	movf	motor_RFID@i^0,w,c
  4382   00046E  B4D8               	btfsc	status,2,c
  4383   000470  D6DC               	goto	l434
  4384   000472  C030  F072         	movff	motor_RFID@tempRegValue,??_motor_RFID
  4385   000476  0E1B               	movlw	27
  4386   000478  1672               	andwf	??_motor_RFID^0,f,c
  4387   00047A  A4D8               	btfss	status,2,c
  4388   00047C  D6D6               	goto	l434
  4389                           
  4390                           ;TAD_RFID.c: 534:                             addr = 0x09;
  4391   00047E  0E09               	movlw	9
  4392   000480  6E29               	movwf	motor_RFID@addr^0,c
  4393                           
  4394                           ;TAD_RFID.c: 535:                             operation_pending = 1;
  4395   000482  0E01               	movlw	1
  4396   000484  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4397                           
  4398                           ;TAD_RFID.c: 536:                             substate = 19;
  4399   000486  0E13               	movlw	19
  4400   000488  6E39               	movwf	motor_RFID@substate^0,c
  4401                           
  4402                           ;TAD_RFID.c: 537:                         } else {
  4403   00048A  0012               	return	
  4404   00048C                     l4818:
  4405                           
  4406                           ;TAD_RFID.c: 542:                         if (tempRegValue == 0xFF) {
  4407   00048C  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4408   00048E  B4D8               	btfsc	status,2,c
  4409   000490  D6CC               	goto	l434
  4410                           
  4411                           ;TAD_RFID.c: 545:                             UID[0] = tempRegValue;
  4412   000492  C030  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  4413                           
  4414                           ;TAD_RFID.c: 546:                             addr = 0x09;
  4415   000496  0E09               	movlw	9
  4416   000498  6E29               	movwf	motor_RFID@addr^0,c
  4417                           
  4418                           ;TAD_RFID.c: 547:                             operation_pending = 1;
  4419   00049A  0E01               	movlw	1
  4420   00049C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4421                           
  4422                           ;TAD_RFID.c: 548:                             substate = 20;
  4423   00049E  0E14               	movlw	20
  4424   0004A0  6E39               	movwf	motor_RFID@substate^0,c
  4425   0004A2  0012               	return	
  4426   0004A4                     l4824:
  4427                           
  4428                           ;TAD_RFID.c: 552:                         if (tempRegValue == 0xFF) {
  4429   0004A4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4430   0004A6  B4D8               	btfsc	status,2,c
  4431   0004A8  D6C0               	goto	l434
  4432                           
  4433                           ;TAD_RFID.c: 555:                             UID[1] = tempRegValue;
  4434   0004AA  C030  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4435                           
  4436                           ;TAD_RFID.c: 556:                             addr = 0x09;
  4437   0004AE  0E09               	movlw	9
  4438   0004B0  6E29               	movwf	motor_RFID@addr^0,c
  4439                           
  4440                           ;TAD_RFID.c: 557:                             operation_pending = 1;
  4441   0004B2  0E01               	movlw	1
  4442   0004B4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4443                           
  4444                           ;TAD_RFID.c: 558:                             substate = 21;
  4445   0004B6  0E15               	movlw	21
  4446   0004B8  6E39               	movwf	motor_RFID@substate^0,c
  4447   0004BA  0012               	return	
  4448   0004BC                     l4830:
  4449                           
  4450                           ;TAD_RFID.c: 562:                         if (tempRegValue == 0xFF) {
  4451   0004BC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4452   0004BE  B4D8               	btfsc	status,2,c
  4453   0004C0  D6B4               	goto	l434
  4454                           
  4455                           ;TAD_RFID.c: 565:                             UID[2] = tempRegValue;
  4456   0004C2  C030  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4457                           
  4458                           ;TAD_RFID.c: 566:                             addr = 0x09;
  4459   0004C6  0E09               	movlw	9
  4460   0004C8  6E29               	movwf	motor_RFID@addr^0,c
  4461                           
  4462                           ;TAD_RFID.c: 567:                             operation_pending = 1;
  4463   0004CA  0E01               	movlw	1
  4464   0004CC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4465                           
  4466                           ;TAD_RFID.c: 568:                             substate = 22;
  4467   0004CE  0E16               	movlw	22
  4468   0004D0  6E39               	movwf	motor_RFID@substate^0,c
  4469   0004D2  0012               	return	
  4470   0004D4                     l4836:
  4471                           
  4472                           ;TAD_RFID.c: 572:                         if (tempRegValue == 0xFF) {
  4473   0004D4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4474   0004D6  B4D8               	btfsc	status,2,c
  4475   0004D8  D6A8               	goto	l434
  4476                           
  4477                           ;TAD_RFID.c: 575:                             UID[3] = tempRegValue;
  4478   0004DA  C030  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4479                           
  4480                           ;TAD_RFID.c: 576:                             addr = 0x09;
  4481   0004DE  0E09               	movlw	9
  4482   0004E0  6E29               	movwf	motor_RFID@addr^0,c
  4483                           
  4484                           ;TAD_RFID.c: 577:                             operation_pending = 1;
  4485   0004E2  0E01               	movlw	1
  4486   0004E4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4487                           
  4488                           ;TAD_RFID.c: 578:                             substate = 23;
  4489   0004E6  0E17               	movlw	23
  4490   0004E8  6E39               	movwf	motor_RFID@substate^0,c
  4491   0004EA  0012               	return	
  4492   0004EC                     l4842:
  4493                           
  4494                           ;TAD_RFID.c: 582:                         if (tempRegValue == 0xFF) {
  4495   0004EC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4496   0004EE  B4D8               	btfsc	status,2,c
  4497   0004F0  D69C               	goto	l434
  4498                           
  4499                           ;TAD_RFID.c: 585:                             UID[4] = tempRegValue;
  4500   0004F2  C030  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4501                           
  4502                           ;TAD_RFID.c: 586:                             UID[5] = 0;
  4503   0004F6  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4504                           
  4505                           ;TAD_RFID.c: 587:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4506   0004F8  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4507   0004FA  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4508   0004FC  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4509   0004FE  1801               	xorwf	motor_RFID@UID^0,w,c
  4510   000500  6E32               	movwf	motor_RFID@checksum^0,c
  4511                           
  4512                           ;TAD_RFID.c: 588:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4513   000502  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4514   000504  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4515   000506  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4516   000508  1001               	iorwf	motor_RFID@UID^0,w,c
  4517   00050A  0900               	iorlw	0
  4518   00050C  A4D8               	btfss	status,2,c
  4519   00050E  D002               	goto	u4320
  4520   000510  0E01               	movlw	1
  4521   000512  D001               	goto	u4330
  4522   000514                     u4320:
  4523   000514  0E00               	movlw	0
  4524   000516                     u4330:
  4525   000516  6E31               	movwf	motor_RFID@allZero^0,c
  4526                           
  4527                           ;TAD_RFID.c: 589:                             substate = 24;
  4528   000518  0E18               	movlw	24
  4529   00051A  6E39               	movwf	motor_RFID@substate^0,c
  4530   00051C  0012               	return	
  4531   00051E                     l4850:
  4532                           
  4533                           ;TAD_RFID.c: 593:                         if (checksum != UID[4] || allZero) {
  4534   00051E  5032               	movf	motor_RFID@checksum^0,w,c
  4535   000520  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4536   000522  A4D8               	btfss	status,2,c
  4537   000524  D682               	goto	l434
  4538   000526  5031               	movf	motor_RFID@allZero^0,w,c
  4539   000528  A4D8               	btfss	status,2,c
  4540   00052A  D67F               	goto	l434
  4541                           
  4542                           ;TAD_RFID.c: 596:                             substate = 25;
  4543   00052C  0E19               	movlw	25
  4544   00052E  6E39               	movwf	motor_RFID@substate^0,c
  4545   000530  0012               	return	
  4546   000532                     l4856:
  4547                           
  4548                           ;TAD_RFID.c: 602:                         getActualUID(currentUser, 0xFF);
  4549   000532  0E45               	movlw	low motor_RFID@currentUser
  4550   000534  6E57               	movwf	getActualUID@UID^0,c
  4551   000536  0EFF               	movlw	255
  4552   000538  6E58               	movwf	getActualUID@userIndex^0,c
  4553   00053A  ECDA  F00A         	call	_getActualUID	;wreg free
  4554                           
  4555                           ;TAD_RFID.c: 603:                         if (getCurrentUserIndex() != 4) {
  4556   00053E  EC78  F00E         	call	_getCurrentUserIndex	;wreg free
  4557   000542  0A04               	xorlw	4
  4558   000544  B4D8               	btfsc	status,2,c
  4559   000546  D003               	goto	l4862
  4560                           
  4561                           ;TAD_RFID.c: 604:                             substate = 26;
  4562   000548  0E1A               	movlw	26
  4563   00054A  6E39               	movwf	motor_RFID@substate^0,c
  4564                           
  4565                           ;TAD_RFID.c: 605:                         } else if (cardRemoved == 1) {
  4566   00054C  0012               	return	
  4567   00054E                     l4862:
  4568   00054E  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4569   000550  A4D8               	btfss	status,2,c
  4570   000552  D003               	goto	l4866
  4571   000554                     u4370:
  4572                           
  4573                           ;TAD_RFID.c: 606:                             substate = 27;
  4574   000554  0E1B               	movlw	27
  4575   000556  6E39               	movwf	motor_RFID@substate^0,c
  4576                           
  4577                           ;TAD_RFID.c: 607:                         } else {
  4578   000558  0012               	return	
  4579   00055A                     l4866:
  4580                           
  4581                           ;TAD_RFID.c: 608:                             substate = 28;
  4582   00055A  0E1C               	movlw	28
  4583   00055C  6E39               	movwf	motor_RFID@substate^0,c
  4584   00055E  0012               	return	
  4585   000560                     l4868:
  4586                           
  4587                           ;TAD_RFID.c: 615:                         if(currentUser[0] == UID[0] && currentUser[1] 
      +                          == UID[1] &&
  4588   000560  5001               	movf	motor_RFID@UID^0,w,c
  4589   000562  1845               	xorwf	motor_RFID@currentUser^0,w,c
  4590   000564  A4D8               	btfss	status,2,c
  4591   000566  D7F6               	goto	u4370
  4592   000568  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4593   00056A  1846               	xorwf	(motor_RFID@currentUser+1)^0,w,c
  4594   00056C  A4D8               	btfss	status,2,c
  4595   00056E  D7F2               	goto	u4370
  4596   000570  5003               	movf	(motor_RFID@UID+2)^0,w,c
  4597   000572  1847               	xorwf	(motor_RFID@currentUser+2)^0,w,c
  4598   000574  A4D8               	btfss	status,2,c
  4599   000576  D7EE               	goto	u4370
  4600   000578  5004               	movf	(motor_RFID@UID+3)^0,w,c
  4601   00057A  1848               	xorwf	(motor_RFID@currentUser+3)^0,w,c
  4602   00057C  A4D8               	btfss	status,2,c
  4603   00057E  D7EA               	goto	u4370
  4604   000580  5005               	movf	(motor_RFID@UID+4)^0,w,c
  4605   000582  1849               	xorwf	(motor_RFID@currentUser+4)^0,w,c
  4606   000584  A4D8               	btfss	status,2,c
  4607   000586  D7E6               	goto	u4370
  4608                           
  4609                           ;TAD_RFID.c: 617:                            currentUser[4] == UID[4]) {;TAD_RFID.c: 618
      +                          :                             if (cardRemoved == 1) {
  4610   000588  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4611   00058A  A4D8               	btfss	status,2,c
  4612   00058C  D7E6               	goto	l4866
  4613                           
  4614                           ;TAD_RFID.c: 619:                                 motor_StartSendString("\r\nL'usuari ha
      +                           sortit de la sala\r\n");
  4615   00058E  0EDC               	movlw	low STR_1
  4616   000590  6E5B               	movwf	motor_StartSendString@str^0,c
  4617   000592  0E1E               	movlw	high STR_1
  4618   000594  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  4619   000596  EC05  F00E         	call	_motor_StartSendString	;wreg free
  4620                           
  4621                           ;TAD_RFID.c: 620:                                 setStartSendString();
  4622   00059A  EC72  F00E         	call	_setStartSendString	;wreg free
  4623                           
  4624                           ;TAD_RFID.c: 621:                                 setIndex(4);
  4625   00059E  0E04               	movlw	4
  4626   0005A0  EC63  F00E         	call	_setIndex
  4627                           
  4628                           ;TAD_RFID.c: 622:                                 newConfiguration();
  4629   0005A4  EC6F  F00E         	call	_newConfiguration	;wreg free
  4630   0005A8                     l4888:
  4631                           
  4632                           ;TAD_RFID.c: 623:                                 substate = 28;
  4633   0005A8  0E1C               	movlw	28
  4634   0005AA  6E39               	movwf	motor_RFID@substate^0,c
  4635                           
  4636                           ;TAD_RFID.c: 624:                                 cardRemoved = 0;
  4637   0005AC  6A2C               	clrf	motor_RFID@cardRemoved^0,c
  4638                           
  4639                           ;TAD_RFID.c: 625:                             } else {
  4640   0005AE  0012               	return	
  4641   0005B0                     l4896:
  4642                           
  4643                           ;TAD_RFID.c: 637:                         if(motor_setCurrentUser(UID[0], UID[1], UID[2]
      +                          , UID[3], UID[4]) == 1) {
  4644   0005B0  C002  F06D         	movff	motor_RFID@UID+1,motor_setCurrentUser@UID1
  4645   0005B4  C003  F06E         	movff	motor_RFID@UID+2,motor_setCurrentUser@UID2
  4646   0005B8  C004  F06F         	movff	motor_RFID@UID+3,motor_setCurrentUser@UID3
  4647   0005BC  C005  F070         	movff	motor_RFID@UID+4,motor_setCurrentUser@UID4
  4648   0005C0  5001               	movf	motor_RFID@UID^0,w,c
  4649   0005C2  ECCC  F006         	call	_motor_setCurrentUser
  4650   0005C6  06E8               	decf	wreg,f,c
  4651   0005C8  A4D8               	btfss	status,2,c
  4652   0005CA  0012               	return	
  4653   0005CC  D7ED               	goto	l4888
  4654   0005CE                     l4902:
  4655                           
  4656                           ;TAD_RFID.c: 645:                         addr = 0x0D;
  4657   0005CE  0E0D               	movlw	13
  4658   0005D0  6E29               	movwf	motor_RFID@addr^0,c
  4659                           
  4660                           ;TAD_RFID.c: 646:                         value = 0x00;
  4661   0005D2  6A28               	clrf	motor_RFID@value^0,c
  4662                           
  4663                           ;TAD_RFID.c: 647:                         operation_pending = 2;
  4664   0005D4  0E02               	movlw	2
  4665   0005D6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4666   0005D8  D628               	goto	l434
  4667   0005DA                     l4910:
  4668   0005DA  5039               	movf	motor_RFID@substate^0,w,c
  4669                           
  4670                           ; Switch size 1, requested type "simple"
  4671                           ; Number of cases is 29, Range of values is 0 to 28
  4672                           ; switch strategies available:
  4673                           ; Name         Instructions Cycles
  4674                           ; simple_byte           88    45 (average)
  4675                           ;	Chosen strategy is simple_byte
  4676   0005DC  0A00               	xorlw	0	; case 0
  4677   0005DE  B4D8               	btfsc	status,2,c
  4678   0005E0  D69A               	goto	l4698
  4679   0005E2  0A01               	xorlw	1	; case 1
  4680   0005E4  B4D8               	btfsc	status,2,c
  4681   0005E6  D69F               	goto	l4702
  4682   0005E8  0A03               	xorlw	3	; case 2
  4683   0005EA  B4D8               	btfsc	status,2,c
  4684   0005EC  D6A7               	goto	l4704
  4685   0005EE  0A01               	xorlw	1	; case 3
  4686   0005F0  B4D8               	btfsc	status,2,c
  4687   0005F2  D6B1               	goto	l4716
  4688   0005F4  0A07               	xorlw	7	; case 4
  4689   0005F6  B4D8               	btfsc	status,2,c
  4690   0005F8  D6B7               	goto	l4724
  4691   0005FA  0A01               	xorlw	1	; case 5
  4692   0005FC  B4D8               	btfsc	status,2,c
  4693   0005FE  D6BB               	goto	l4726
  4694   000600  0A03               	xorlw	3	; case 6
  4695   000602  B4D8               	btfsc	status,2,c
  4696   000604  D6C0               	goto	l4738
  4697   000606  0A01               	xorlw	1	; case 7
  4698   000608  B4D8               	btfsc	status,2,c
  4699   00060A  D6C4               	goto	l4740
  4700   00060C  0A0F               	xorlw	15	; case 8
  4701   00060E  B4D8               	btfsc	status,2,c
  4702   000610  D6CE               	goto	l4752
  4703   000612  0A01               	xorlw	1	; case 9
  4704   000614  B4D8               	btfsc	status,2,c
  4705   000616  D6D3               	goto	l4756
  4706   000618  0A03               	xorlw	3	; case 10
  4707   00061A  B4D8               	btfsc	status,2,c
  4708   00061C  D6D9               	goto	l4760
  4709   00061E  0A01               	xorlw	1	; case 11
  4710   000620  B4D8               	btfsc	status,2,c
  4711   000622  D6DF               	goto	l4764
  4712   000624  0A07               	xorlw	7	; case 12
  4713   000626  B4D8               	btfsc	status,2,c
  4714   000628  D5C5               	goto	l4638
  4715   00062A  0A01               	xorlw	1	; case 13
  4716   00062C  B4D8               	btfsc	status,2,c
  4717   00062E  D6E2               	goto	l4768
  4718   000630  0A03               	xorlw	3	; case 14
  4719   000632  B4D8               	btfsc	status,2,c
  4720   000634  D6E7               	goto	l474
  4721   000636  0A01               	xorlw	1	; case 15
  4722   000638  B4D8               	btfsc	status,2,c
  4723   00063A  D6EC               	goto	l4782
  4724   00063C  0A1F               	xorlw	31	; case 16
  4725   00063E  B4D8               	btfsc	status,2,c
  4726   000640  D6FE               	goto	l4794
  4727   000642  0A01               	xorlw	1	; case 17
  4728   000644  B4D8               	btfsc	status,2,c
  4729   000646  D708               	goto	l4806
  4730   000648  0A03               	xorlw	3	; case 18
  4731   00064A  B4D8               	btfsc	status,2,c
  4732   00064C  D70C               	goto	l4808
  4733   00064E  0A01               	xorlw	1	; case 19
  4734   000650  B4D8               	btfsc	status,2,c
  4735   000652  D71C               	goto	l4818
  4736   000654  0A07               	xorlw	7	; case 20
  4737   000656  B4D8               	btfsc	status,2,c
  4738   000658  D725               	goto	l4824
  4739   00065A  0A01               	xorlw	1	; case 21
  4740   00065C  B4D8               	btfsc	status,2,c
  4741   00065E  D72E               	goto	l4830
  4742   000660  0A03               	xorlw	3	; case 22
  4743   000662  B4D8               	btfsc	status,2,c
  4744   000664  D737               	goto	l4836
  4745   000666  0A01               	xorlw	1	; case 23
  4746   000668  B4D8               	btfsc	status,2,c
  4747   00066A  D740               	goto	l4842
  4748   00066C  0A0F               	xorlw	15	; case 24
  4749   00066E  B4D8               	btfsc	status,2,c
  4750   000670  D756               	goto	l4850
  4751   000672  0A01               	xorlw	1	; case 25
  4752   000674  B4D8               	btfsc	status,2,c
  4753   000676  D75D               	goto	l4856
  4754   000678  0A03               	xorlw	3	; case 26
  4755   00067A  B4D8               	btfsc	status,2,c
  4756   00067C  D771               	goto	l4868
  4757   00067E  0A01               	xorlw	1	; case 27
  4758   000680  B4D8               	btfsc	status,2,c
  4759   000682  D796               	goto	l4896
  4760   000684  0A07               	xorlw	7	; case 28
  4761   000686  A4D8               	btfss	status,2,c
  4762   000688  0012               	return	
  4763   00068A  D7A1               	goto	l4902
  4764   00068C                     l4914:
  4765   00068C  503A               	movf	motor_RFID@state^0,w,c
  4766                           
  4767                           ; Switch size 1, requested type "simple"
  4768                           ; Number of cases is 2, Range of values is 0 to 1
  4769                           ; switch strategies available:
  4770                           ; Name         Instructions Cycles
  4771                           ; simple_byte            7     4 (average)
  4772                           ;	Chosen strategy is simple_byte
  4773   00068E  0A00               	xorlw	0	; case 0
  4774   000690  B4D8               	btfsc	status,2,c
  4775   000692  D609               	goto	l4696
  4776   000694  0A01               	xorlw	1	; case 1
  4777   000696  A4D8               	btfss	status,2,c
  4778   000698  0012               	return	
  4779   00069A  D79F               	goto	l4910
  4780   00069C                     __end_of_motor_RFID:
  4781                           	callstack 0
  4782                           
  4783 ;; *************** function _setIndex *****************
  4784 ;; Defined at:
  4785 ;;		line 93 in file "TAD_DATOS.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  indexActual     1    wreg     unsigned char 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  indexActual     1    1[COMRAM] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1
  4799 ;;      Params:         0       0       0
  4800 ;;      Locals:         1       0       0
  4801 ;;      Temps:          0       0       0
  4802 ;;      Totals:         1       0       0
  4803 ;;Total ram usage:        1 bytes
  4804 ;; Hardware stack levels used: 1
  4805 ;; Hardware stack levels required when called: 3
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_motor_RFID
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text6
  4814   001CC6                     __ptext6:
  4815                           	callstack 0
  4816   001CC6                     _setIndex:
  4817                           	callstack 26
  4818                           
  4819                           ;incstack = 0
  4820                           ;setIndex@indexActual stored from wreg
  4821   001CC6  6E57               	movwf	setIndex@indexActual^0,c
  4822                           
  4823                           ;TAD_DATOS.c: 94:     index = indexActual;
  4824   001CC8  C057  F07D         	movff	setIndex@indexActual,_index
  4825   001CCC  0012               	return		;funcret
  4826   001CCE                     __end_of_setIndex:
  4827                           	callstack 0
  4828                           
  4829 ;; *************** function _motor_setCurrentUser *****************
  4830 ;; Defined at:
  4831 ;;		line 98 in file "TAD_DATOS.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  UID0            1    wreg     unsigned char 
  4834 ;;  UID1            1   23[COMRAM] unsigned char 
  4835 ;;  UID2            1   24[COMRAM] unsigned char 
  4836 ;;  UID3            1   25[COMRAM] unsigned char 
  4837 ;;  UID4            1   26[COMRAM] unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  UID0            1   27[COMRAM] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      unsigned char 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1
  4849 ;;      Params:         4       0       0
  4850 ;;      Locals:         1       0       0
  4851 ;;      Temps:          0       0       0
  4852 ;;      Totals:         5       0       0
  4853 ;;Total ram usage:        5 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; Hardware stack levels required when called: 8
  4856 ;; This function calls:
  4857 ;;		_printfUID
  4858 ;; This function is called by:
  4859 ;;		_motor_RFID
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text7
  4864   000D98                     __ptext7:
  4865                           	callstack 0
  4866   000D98                     _motor_setCurrentUser:
  4867                           	callstack 21
  4868                           
  4869                           ;incstack = 0
  4870                           ;motor_setCurrentUser@UID0 stored from wreg
  4871   000D98  6E71               	movwf	motor_setCurrentUser@UID0^0,c
  4872                           
  4873                           ;TAD_DATOS.c: 99:     static char state_setCurrentUser = 0;;TAD_DATOS.c: 101:     switch
      +                          (state_setCurrentUser) {
  4874   000D9A  D081               	goto	l4078
  4875   000D9C                     l3992:
  4876                           
  4877                           ;TAD_DATOS.c: 103:             currentUser[0] = UID0;
  4878   000D9C  C071  F040         	movff	motor_setCurrentUser@UID0,_currentUser
  4879                           
  4880                           ;TAD_DATOS.c: 104:             currentUser[1] = UID1;
  4881   000DA0  C06D  F041         	movff	motor_setCurrentUser@UID1,_currentUser+1
  4882                           
  4883                           ;TAD_DATOS.c: 105:             currentUser[2] = UID2;
  4884   000DA4  C06E  F042         	movff	motor_setCurrentUser@UID2,_currentUser+2
  4885                           
  4886                           ;TAD_DATOS.c: 106:             currentUser[3] = UID3;
  4887   000DA8  C06F  F043         	movff	motor_setCurrentUser@UID3,_currentUser+3
  4888                           
  4889                           ;TAD_DATOS.c: 107:             currentUser[4] = UID4;
  4890   000DAC  C070  F044         	movff	motor_setCurrentUser@UID4,_currentUser+4
  4891                           
  4892                           ;TAD_DATOS.c: 108:             new_user = 1;
  4893   000DB0  0E01               	movlw	1
  4894   000DB2  6E1C               	movwf	_new_user^0,c
  4895                           
  4896                           ;TAD_DATOS.c: 109:             state_setCurrentUser = 1;
  4897   000DB4  0E01               	movlw	1
  4898   000DB6  D02F               	goto	L9
  4899   000DB8                     l4006:
  4900                           
  4901                           ;TAD_DATOS.c: 113:             if (UID0 == 0x65 && UID1 == 0xDC && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x43) {
  4902   000DB8  0E65               	movlw	101
  4903   000DBA  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4904   000DBC  A4D8               	btfss	status,2,c
  4905   000DBE  D013               	goto	l4020
  4906   000DC0  0EDC               	movlw	220
  4907   000DC2  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4908   000DC4  A4D8               	btfss	status,2,c
  4909   000DC6  D00F               	goto	l4020
  4910   000DC8  0EF9               	movlw	249
  4911   000DCA  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4912   000DCC  A4D8               	btfss	status,2,c
  4913   000DCE  D00B               	goto	l4020
  4914   000DD0  0E03               	movlw	3
  4915   000DD2  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4916   000DD4  A4D8               	btfss	status,2,c
  4917   000DD6  D007               	goto	l4020
  4918   000DD8  0E43               	movlw	67
  4919   000DDA  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4920   000DDC  A4D8               	btfss	status,2,c
  4921   000DDE  D003               	goto	l4020
  4922                           
  4923                           ;TAD_DATOS.c: 114:                 index = 0;
  4924   000DE0  6A7D               	clrf	_index^0,c
  4925   000DE2                     l4018:
  4926                           
  4927                           ;TAD_DATOS.c: 115:                 state_setCurrentUser = 6;
  4928   000DE2  0E06               	movlw	6
  4929   000DE4  D018               	goto	L9
  4930   000DE6                     l4020:
  4931                           
  4932                           ;TAD_DATOS.c: 118:             state_setCurrentUser = 2;
  4933   000DE6  0E02               	movlw	2
  4934   000DE8  D016               	goto	L9
  4935   000DEA                     l4022:
  4936                           
  4937                           ;TAD_DATOS.c: 121:             if (UID0 == 0xDC && UID1 == 0x0D && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x2B) {
  4938   000DEA  0EDC               	movlw	220
  4939   000DEC  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4940   000DEE  A4D8               	btfss	status,2,c
  4941   000DF0  D014               	goto	l4034
  4942   000DF2  0E0D               	movlw	13
  4943   000DF4  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4944   000DF6  A4D8               	btfss	status,2,c
  4945   000DF8  D010               	goto	l4034
  4946   000DFA  0EF9               	movlw	249
  4947   000DFC  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4948   000DFE  A4D8               	btfss	status,2,c
  4949   000E00  D00C               	goto	l4034
  4950   000E02  0E03               	movlw	3
  4951   000E04  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4952   000E06  A4D8               	btfss	status,2,c
  4953   000E08  D008               	goto	l4034
  4954   000E0A  0E2B               	movlw	43
  4955   000E0C  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4956   000E0E  A4D8               	btfss	status,2,c
  4957   000E10  D004               	goto	l4034
  4958                           
  4959                           ;TAD_DATOS.c: 122:                 index = 1;
  4960   000E12  0E01               	movlw	1
  4961   000E14  D035               	goto	L12
  4962   000E16                     L9:
  4963   000E16  6E1B               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4964                           
  4965                           ;TAD_DATOS.c: 124:                 break;
  4966   000E18  D058               	goto	l4080
  4967   000E1A                     l4034:
  4968                           
  4969                           ;TAD_DATOS.c: 126:             state_setCurrentUser = 3;
  4970   000E1A  0E03               	movlw	3
  4971   000E1C  6E1B               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4972   000E1E                     l4036:
  4973                           
  4974                           ;TAD_DATOS.c: 128:             if (UID0 == 0xDF && UID1 == 0x8B && UID2 == 0xDF && UID3 
      +                          == 0xC4 && UID4 == 0x4F) {
  4975   000E1E  0EDF               	movlw	223
  4976   000E20  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4977   000E22  A4D8               	btfss	status,2,c
  4978   000E24  D012               	goto	l4048
  4979   000E26  0E8B               	movlw	139
  4980   000E28  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4981   000E2A  A4D8               	btfss	status,2,c
  4982   000E2C  D00E               	goto	l4048
  4983   000E2E  0EDF               	movlw	223
  4984   000E30  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4985   000E32  A4D8               	btfss	status,2,c
  4986   000E34  D00A               	goto	l4048
  4987   000E36  0EC4               	movlw	196
  4988   000E38  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4989   000E3A  A4D8               	btfss	status,2,c
  4990   000E3C  D006               	goto	l4048
  4991   000E3E  0E4F               	movlw	79
  4992   000E40  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4993   000E42  A4D8               	btfss	status,2,c
  4994   000E44  D002               	goto	l4048
  4995                           
  4996                           ;TAD_DATOS.c: 129:                 index = 2;
  4997   000E46  0E02               	movlw	2
  4998   000E48  D01B               	goto	L12
  4999   000E4A                     l4048:
  5000                           
  5001                           ;TAD_DATOS.c: 133:             state_setCurrentUser = 4;
  5002   000E4A  0E04               	movlw	4
  5003   000E4C  D7E4               	goto	L9
  5004   000E4E                     l4050:
  5005                           
  5006                           ;TAD_DATOS.c: 136:             if (UID0 == 0x21 && UID1 == 0x32 && UID2 == 0xA9 && UID3 
      +                          == 0x89 && UID4 == 0x33) {
  5007   000E4E  0E21               	movlw	33
  5008   000E50  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  5009   000E52  A4D8               	btfss	status,2,c
  5010   000E54  D012               	goto	l4062
  5011   000E56  0E32               	movlw	50
  5012   000E58  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  5013   000E5A  A4D8               	btfss	status,2,c
  5014   000E5C  D00E               	goto	l4062
  5015   000E5E  0EA9               	movlw	169
  5016   000E60  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  5017   000E62  A4D8               	btfss	status,2,c
  5018   000E64  D00A               	goto	l4062
  5019   000E66  0E89               	movlw	137
  5020   000E68  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  5021   000E6A  A4D8               	btfss	status,2,c
  5022   000E6C  D006               	goto	l4062
  5023   000E6E  0E33               	movlw	51
  5024   000E70  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  5025   000E72  A4D8               	btfss	status,2,c
  5026   000E74  D002               	goto	l4062
  5027                           
  5028                           ;TAD_DATOS.c: 137:                 index = 3;
  5029   000E76  0E03               	movlw	3
  5030   000E78  D003               	goto	L12
  5031   000E7A                     l4062:
  5032                           
  5033                           ;TAD_DATOS.c: 141:             state_setCurrentUser = 5;
  5034   000E7A  0E05               	movlw	5
  5035   000E7C  D7CC               	goto	L9
  5036   000E7E                     l4064:
  5037                           
  5038                           ;TAD_DATOS.c: 144:             index = 4;
  5039   000E7E  0E04               	movlw	4
  5040   000E80                     L12:
  5041   000E80  6E7D               	movwf	_index^0,c
  5042   000E82  D7AF               	goto	l4018
  5043   000E84                     l4066:
  5044                           
  5045                           ;TAD_DATOS.c: 148:             printfUID(currentUser, index, "\r\nTargeta detectada!");
  5046   000E84  0E40               	movlw	low _currentUser
  5047   000E86  6E5D               	movwf	printfUID@currentUser^0,c
  5048   000E88  C07D  F05E         	movff	_index,printfUID@userIndex
  5049   000E8C  0EBE               	movlw	low STR_17
  5050   000E8E  6E5F               	movwf	printfUID@extraString^0,c
  5051   000E90  0E1F               	movlw	high STR_17
  5052   000E92  6E60               	movwf	(printfUID@extraString+1)^0,c
  5053   000E94  EC4E  F003         	call	_printfUID	;wreg free
  5054                           
  5055                           ;TAD_DATOS.c: 149:             state_setCurrentUser = 0;
  5056   000E98  6A1B               	clrf	motor_setCurrentUser@state_setCurrentUser^0,c
  5057                           
  5058                           ;TAD_DATOS.c: 150:             return 1;
  5059   000E9A  0E01               	movlw	1
  5060   000E9C  0012               	return	
  5061   000E9E                     l4078:
  5062   000E9E  501B               	movf	motor_setCurrentUser@state_setCurrentUser^0,w,c
  5063                           
  5064                           ; Switch size 1, requested type "simple"
  5065                           ; Number of cases is 7, Range of values is 0 to 6
  5066                           ; switch strategies available:
  5067                           ; Name         Instructions Cycles
  5068                           ; simple_byte           22    12 (average)
  5069                           ;	Chosen strategy is simple_byte
  5070   000EA0  0A00               	xorlw	0	; case 0
  5071   000EA2  B4D8               	btfsc	status,2,c
  5072   000EA4  D77B               	goto	l3992
  5073   000EA6  0A01               	xorlw	1	; case 1
  5074   000EA8  B4D8               	btfsc	status,2,c
  5075   000EAA  D786               	goto	l4006
  5076   000EAC  0A03               	xorlw	3	; case 2
  5077   000EAE  B4D8               	btfsc	status,2,c
  5078   000EB0  D79C               	goto	l4022
  5079   000EB2  0A01               	xorlw	1	; case 3
  5080   000EB4  B4D8               	btfsc	status,2,c
  5081   000EB6  D7B3               	goto	l4036
  5082   000EB8  0A07               	xorlw	7	; case 4
  5083   000EBA  B4D8               	btfsc	status,2,c
  5084   000EBC  D7C8               	goto	l4050
  5085   000EBE  0A01               	xorlw	1	; case 5
  5086   000EC0  B4D8               	btfsc	status,2,c
  5087   000EC2  D7DD               	goto	l4064
  5088   000EC4  0A03               	xorlw	3	; case 6
  5089   000EC6  B4D8               	btfsc	status,2,c
  5090   000EC8  D7DD               	goto	l4066
  5091   000ECA                     l4080:
  5092                           
  5093                           ;TAD_DATOS.c: 153:     return 0;
  5094   000ECA  0E00               	movlw	0
  5095   000ECC  0012               	return		;funcret
  5096   000ECE                     __end_of_motor_setCurrentUser:
  5097                           	callstack 0
  5098                           
  5099 ;; *************** function _motor_LEDs *****************
  5100 ;; Defined at:
  5101 ;;		line 37 in file "TAD_LEDS.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  i               1   23[COMRAM] unsigned char 
  5106 ;;  currentTics     4   19[COMRAM] unsigned long 
  5107 ;;  i               1   24[COMRAM] unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1
  5117 ;;      Params:         0       0       0
  5118 ;;      Locals:         6       0       0
  5119 ;;      Temps:          5       0       0
  5120 ;;      Totals:        11       0       0
  5121 ;;Total ram usage:       11 bytes
  5122 ;; Hardware stack levels used: 1
  5123 ;; Hardware stack levels required when called: 4
  5124 ;; This function calls:
  5125 ;;		_TI_GetTics
  5126 ;;		_TI_ResetTics
  5127 ;;		_controlLED
  5128 ;;		_getActualLeds
  5129 ;; This function is called by:
  5130 ;;		_main
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text8
  5135   0010D4                     __ptext8:
  5136                           	callstack 0
  5137   0010D4                     _motor_LEDs:
  5138                           	callstack 26
  5139                           
  5140                           ;TAD_LEDS.c: 39:     getActualLeds(ActualLeds, 20);
  5141                           
  5142                           ;incstack = 0
  5143   0010D4  0EBD               	movlw	low _ActualLeds
  5144   0010D6  6E57               	movwf	getActualLeds@leds^0,c
  5145   0010D8  0E14               	movlw	20
  5146   0010DA  6E58               	movwf	getActualLeds@userIndex^0,c
  5147   0010DC  EC39  F00C         	call	_getActualLeds	;wreg free
  5148                           
  5149                           ;TAD_LEDS.c: 42:     static unsigned long lastTics = 0;;TAD_LEDS.c: 43:     unsigned lon
      +                          g currentTics = TI_GetTics(timer);
  5150   0010E0  5054               	movf	_timer^0,w,c
  5151   0010E2  EC8D  F00C         	call	_TI_GetTics
  5152   0010E6  C057  F069         	movff	?_TI_GetTics,motor_LEDs@currentTics
  5153   0010EA  C058  F06A         	movff	?_TI_GetTics+1,motor_LEDs@currentTics+1
  5154   0010EE  C059  F06B         	movff	?_TI_GetTics+2,motor_LEDs@currentTics+2
  5155   0010F2  C05A  F06C         	movff	?_TI_GetTics+3,motor_LEDs@currentTics+3
  5156                           
  5157                           ;TAD_LEDS.c: 46:     if (currentTics == lastTics) return;
  5158   0010F6  500B               	movf	motor_LEDs@lastTics^0,w,c
  5159   0010F8  1869               	xorwf	motor_LEDs@currentTics^0,w,c
  5160   0010FA  E10A               	bnz	l217
  5161   0010FC  500C               	movf	(motor_LEDs@lastTics+1)^0,w,c
  5162   0010FE  186A               	xorwf	(motor_LEDs@currentTics+1)^0,w,c
  5163   001100  E107               	bnz	l217
  5164   001102  500D               	movf	(motor_LEDs@lastTics+2)^0,w,c
  5165   001104  186B               	xorwf	(motor_LEDs@currentTics+2)^0,w,c
  5166   001106  E104               	bnz	l217
  5167   001108  500E               	movf	(motor_LEDs@lastTics+3)^0,w,c
  5168   00110A  186C               	xorwf	(motor_LEDs@currentTics+3)^0,w,c
  5169   00110C  B4D8               	btfsc	status,2,c
  5170   00110E  0012               	return	
  5171   001110                     l217:
  5172                           
  5173                           ;TAD_LEDS.c: 47:     lastTics = currentTics;
  5174   001110  C069  F00B         	movff	motor_LEDs@currentTics,motor_LEDs@lastTics
  5175   001114  C06A  F00C         	movff	motor_LEDs@currentTics+1,motor_LEDs@lastTics+1
  5176   001118  C06B  F00D         	movff	motor_LEDs@currentTics+2,motor_LEDs@lastTics+2
  5177   00111C  C06C  F00E         	movff	motor_LEDs@currentTics+3,motor_LEDs@lastTics+3
  5178                           
  5179                           ;TAD_LEDS.c: 50:     if (currentTics >= 10) {
  5180   001120  506C               	movf	(motor_LEDs@currentTics+3)^0,w,c
  5181   001122  106B               	iorwf	(motor_LEDs@currentTics+2)^0,w,c
  5182   001124  106A               	iorwf	(motor_LEDs@currentTics+1)^0,w,c
  5183   001126  E104               	bnz	u4460
  5184   001128  0E0A               	movlw	10
  5185   00112A  5C69               	subwf	motor_LEDs@currentTics^0,w,c
  5186   00112C  A0D8               	btfss	status,0,c
  5187   00112E  D015               	goto	l219
  5188   001130                     u4460:
  5189                           
  5190                           ;TAD_LEDS.c: 51:         TI_ResetTics(timer);
  5191   001130  5054               	movf	_timer^0,w,c
  5192   001132  ECDA  F00D         	call	_TI_ResetTics
  5193                           
  5194                           ;TAD_LEDS.c: 53:         char i;;TAD_LEDS.c: 54:         for (i = 0; i < 6; i++) {
  5195   001136  6A6D               	clrf	motor_LEDs@i^0,c
  5196   001138                     l4934:
  5197                           
  5198                           ;TAD_LEDS.c: 55:             if (ActualLeds[i] > 0) {
  5199   001138  506D               	movf	motor_LEDs@i^0,w,c
  5200   00113A  0FBD               	addlw	low _ActualLeds
  5201   00113C  6ED9               	movwf	fsr2l,c
  5202   00113E  6ADA               	clrf	fsr2h,c
  5203   001140  50DF               	movf	indf2,w,c
  5204   001142  B4D8               	btfsc	status,2,c
  5205   001144  D005               	goto	l4938
  5206                           
  5207                           ;TAD_LEDS.c: 56:                 controlLED(i, 1);
  5208   001146  0E01               	movlw	1
  5209   001148  6E57               	movwf	controlLED@estado^0,c
  5210   00114A  506D               	movf	motor_LEDs@i^0,w,c
  5211   00114C  EC66  F00C         	call	_controlLED
  5212   001150                     l4938:
  5213                           
  5214                           ;TAD_LEDS.c: 58:         }
  5215   001150  2A6D               	incf	motor_LEDs@i^0,f,c
  5216   001152  0E05               	movlw	5
  5217   001154  646D               	cpfsgt	motor_LEDs@i^0,c
  5218   001156  D7F0               	goto	l4934
  5219   001158  0012               	return	
  5220   00115A                     l219:
  5221                           
  5222                           ;TAD_LEDS.c: 63:     char i;;TAD_LEDS.c: 64:     for (i = 0; i < 6; i++) {
  5223   00115A  6A6E               	clrf	motor_LEDs@i_559^0,c
  5224   00115C                     l4946:
  5225                           
  5226                           ;TAD_LEDS.c: 65:         if (ActualLeds[i] < 0xA && currentTics >= ActualLeds[i])
  5227   00115C  506E               	movf	motor_LEDs@i_559^0,w,c
  5228   00115E  0FBD               	addlw	low _ActualLeds
  5229   001160  6ED9               	movwf	fsr2l,c
  5230   001162  6ADA               	clrf	fsr2h,c
  5231   001164  0E0A               	movlw	10
  5232   001166  60DF               	cpfslt	indf2,c
  5233   001168  D01A               	goto	l4952
  5234   00116A  506E               	movf	motor_LEDs@i_559^0,w,c
  5235   00116C  0FBD               	addlw	low _ActualLeds
  5236   00116E  6ED9               	movwf	fsr2l,c
  5237   001170  6ADA               	clrf	fsr2h,c
  5238   001172  50DF               	movf	indf2,w,c
  5239   001174  6E64               	movwf	??_motor_LEDs^0,c
  5240   001176  C064  F065         	movff	??_motor_LEDs,??_motor_LEDs+1
  5241   00117A  6A66               	clrf	(??_motor_LEDs+2)^0,c
  5242   00117C  6A67               	clrf	(??_motor_LEDs+3)^0,c
  5243   00117E  6A68               	clrf	(??_motor_LEDs+4)^0,c
  5244   001180  5065               	movf	(??_motor_LEDs+1)^0,w,c
  5245   001182  5C69               	subwf	motor_LEDs@currentTics^0,w,c
  5246   001184  5066               	movf	(??_motor_LEDs+2)^0,w,c
  5247   001186  586A               	subwfb	(motor_LEDs@currentTics+1)^0,w,c
  5248   001188  5067               	movf	(??_motor_LEDs+3)^0,w,c
  5249   00118A  586B               	subwfb	(motor_LEDs@currentTics+2)^0,w,c
  5250   00118C  5068               	movf	(??_motor_LEDs+4)^0,w,c
  5251   00118E  586C               	subwfb	(motor_LEDs@currentTics+3)^0,w,c
  5252   001190  A0D8               	btfss	status,0,c
  5253   001192  D005               	goto	l4952
  5254                           
  5255                           ;TAD_LEDS.c: 66:             controlLED(i, 0);
  5256   001194  0E00               	movlw	0
  5257   001196  6E57               	movwf	controlLED@estado^0,c
  5258   001198  506E               	movf	motor_LEDs@i_559^0,w,c
  5259   00119A  EC66  F00C         	call	_controlLED
  5260   00119E                     l4952:
  5261                           
  5262                           ;TAD_LEDS.c: 67:     }
  5263   00119E  2A6E               	incf	motor_LEDs@i_559^0,f,c
  5264   0011A0  0E05               	movlw	5
  5265   0011A2  646E               	cpfsgt	motor_LEDs@i_559^0,c
  5266   0011A4  D7DB               	goto	l4946
  5267   0011A6  0012               	return	
  5268   0011A8                     __end_of_motor_LEDs:
  5269                           	callstack 0
  5270                           
  5271 ;; *************** function _controlLED *****************
  5272 ;; Defined at:
  5273 ;;		line 16 in file "TAD_LEDS.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  ledActual       1    wreg     unsigned char 
  5276 ;;  estado          1    1[COMRAM] unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  ledActual       1    4[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1
  5288 ;;      Params:         1       0       0
  5289 ;;      Locals:         3       0       0
  5290 ;;      Temps:          0       0       0
  5291 ;;      Totals:         4       0       0
  5292 ;;Total ram usage:        4 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 3
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_motor_LEDs
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text9
  5303   0018CC                     __ptext9:
  5304                           	callstack 0
  5305   0018CC                     _controlLED:
  5306                           	callstack 26
  5307                           
  5308                           ;incstack = 0
  5309                           ;controlLED@ledActual stored from wreg
  5310   0018CC  6E5A               	movwf	controlLED@ledActual^0,c
  5311                           
  5312                           ;TAD_LEDS.c: 18:     static unsigned char ledBits[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x2
      +                          0};;TAD_LEDS.c: 20:     if (ledActual < 6) {
  5313   0018CE  0E06               	movlw	6
  5314   0018D0  605A               	cpfslt	controlLED@ledActual^0,c
  5315   0018D2  D012               	goto	l3832
  5316                           
  5317                           ;TAD_LEDS.c: 22:         if (estado)
  5318   0018D4  5057               	movf	controlLED@estado^0,w,c
  5319   0018D6  B4D8               	btfsc	status,2,c
  5320   0018D8  D007               	goto	l3830
  5321                           
  5322                           ;TAD_LEDS.c: 23:             LATA |= ledBits[ledActual];
  5323   0018DA  505A               	movf	controlLED@ledActual^0,w,c
  5324   0018DC  0FE1               	addlw	low controlLED@ledBits
  5325   0018DE  6ED9               	movwf	fsr2l,c
  5326   0018E0  6ADA               	clrf	fsr2h,c
  5327   0018E2  50DF               	movf	indf2,w,c
  5328   0018E4  1289               	iorwf	137,f,c	;volatile
  5329   0018E6  0012               	return	
  5330   0018E8                     l3830:
  5331                           
  5332                           ;TAD_LEDS.c: 25:             LATA &= ~ledBits[ledActual];
  5333   0018E8  505A               	movf	controlLED@ledActual^0,w,c
  5334   0018EA  0FE1               	addlw	low controlLED@ledBits
  5335   0018EC  6ED9               	movwf	fsr2l,c
  5336   0018EE  6ADA               	clrf	fsr2h,c
  5337   0018F0  50DF               	movf	indf2,w,c
  5338   0018F2  0AFF               	xorlw	255
  5339   0018F4  1689               	andwf	137,f,c	;volatile
  5340   0018F6  0012               	return	
  5341   0018F8                     l3832:
  5342   0018F8  285A               	incf	controlLED@ledActual^0,w,c
  5343   0018FA  A4D8               	btfss	status,2,c
  5344   0018FC  0012               	return	
  5345                           
  5346                           ;TAD_LEDS.c: 29:         LATA = estado ? 0x3F : 0x00;
  5347   0018FE  5057               	movf	controlLED@estado^0,w,c
  5348   001900  A4D8               	btfss	status,2,c
  5349   001902  D004               	goto	l3838
  5350   001904  0E00               	movlw	0
  5351   001906  6E59               	movwf	(_controlLED$553+1)^0,c
  5352   001908  0E00               	movlw	0
  5353   00190A  D003               	goto	L13
  5354   00190C                     l3838:
  5355   00190C  0E00               	movlw	0
  5356   00190E  6E59               	movwf	(_controlLED$553+1)^0,c
  5357   001910  0E3F               	movlw	63
  5358   001912                     L13:
  5359   001912  6E58               	movwf	_controlLED$553^0,c
  5360   001914  C058  FF89         	movff	_controlLED$553,3977	;volatile
  5361   001918  0012               	return		;funcret
  5362   00191A                     __end_of_controlLED:
  5363                           	callstack 0
  5364                           
  5365 ;; *************** function _motorTerminal *****************
  5366 ;; Defined at:
  5367 ;;		line 148 in file "TAD_TERMINAL.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  currentUserI    1   24[COMRAM] unsigned char 
  5372 ;;  opcion          1   23[COMRAM] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1
  5382 ;;      Params:         0       0       0
  5383 ;;      Locals:         2       0       0
  5384 ;;      Temps:          0       0       0
  5385 ;;      Totals:         2       0       0
  5386 ;;Total ram usage:        2 bytes
  5387 ;; Hardware stack levels used: 1
  5388 ;; Hardware stack levels required when called: 8
  5389 ;; This function calls:
  5390 ;;		_Terminal_RXAvailable
  5391 ;;		_Terminal_ReceiveChar
  5392 ;;		_Terminal_SendChar
  5393 ;;		_getActualUID
  5394 ;;		_getCurrentUserIndex
  5395 ;;		_motor_SendString
  5396 ;;		_motor_StartSendString
  5397 ;;		_newConfiguration
  5398 ;;		_printfUID
  5399 ;;		_saveHourToData
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text10
  5406   000992                     __ptext10:
  5407                           	callstack 0
  5408   000992                     _motorTerminal:
  5409                           	callstack 22
  5410                           
  5411                           ;TAD_TERMINAL.c: 149:  static char state = 0;;TAD_TERMINAL.c: 150:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 151:  static char index = 0;;TAD_TERMINAL.c: 152:  st
      +                          atic unsigned char leds[6];;TAD_TERMINAL.c: 153:  static unsigned char currentUser[5];;T
      +                          AD_TERMINAL.c: 154:  static char userNumber = 0;;TAD_TERMINAL.c: 156:  if (sending_strin
      +                          g) {
  5412                           
  5413                           ;incstack = 0
  5414   000992  5021               	movf	_sending_string^0,w,c
  5415   000994  B4D8               	btfsc	status,2,c
  5416   000996  D0F4               	goto	l4530
  5417                           
  5418                           ;TAD_TERMINAL.c: 157:   if (motor_SendString() == 1) {
  5419   000998  ECA1  F00A         	call	_motor_SendString	;wreg free
  5420   00099C  06E8               	decf	wreg,f,c
  5421   00099E  A4D8               	btfss	status,2,c
  5422   0009A0  0012               	return	
  5423                           
  5424                           ;TAD_TERMINAL.c: 158:    sending_string = 0;
  5425   0009A2  6A21               	clrf	_sending_string^0,c
  5426                           
  5427                           ;TAD_TERMINAL.c: 159:   } else {
  5428   0009A4  D0ED               	goto	l4530
  5429   0009A6                     l4400:
  5430                           
  5431                           ;TAD_TERMINAL.c: 166:    if (Terminal_RXAvailable() && Terminal_ReceiveChar() == 0x1B ||
      +                           hashtag_pressed) {
  5432   0009A6  EC58  F00E         	call	_Terminal_RXAvailable	;wreg free
  5433   0009AA  0900               	iorlw	0
  5434   0009AC  B4D8               	btfsc	status,2,c
  5435   0009AE  D005               	goto	u3770
  5436   0009B0  EC7A  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5437   0009B4  0A1B               	xorlw	27
  5438   0009B6  B4D8               	btfsc	status,2,c
  5439   0009B8  D003               	goto	u3780
  5440   0009BA                     u3770:
  5441   0009BA  5022               	movf	_hashtag_pressed^0,w,c
  5442   0009BC  B4D8               	btfsc	status,2,c
  5443   0009BE  0012               	return	
  5444   0009C0                     u3780:
  5445                           
  5446                           ;TAD_TERMINAL.c: 167:     motor_StartSendString("---------------\r\n");
  5447   0009C0  0ED3               	movlw	low STR_4
  5448   0009C2  6E5B               	movwf	motor_StartSendString@str^0,c
  5449   0009C4  0E1F               	movlw	high STR_4
  5450   0009C6  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5451   0009C8  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5452                           
  5453                           ;TAD_TERMINAL.c: 168:     sending_string = 1;
  5454   0009CC  0E01               	movlw	1
  5455   0009CE  6E21               	movwf	_sending_string^0,c
  5456                           
  5457                           ;TAD_TERMINAL.c: 169:     state = 10;
  5458   0009D0  0E0A               	movlw	10
  5459   0009D2  6E20               	movwf	motorTerminal@state^0,c
  5460                           
  5461                           ;TAD_TERMINAL.c: 170:     hashtag_pressed = 0;
  5462   0009D4  6A22               	clrf	_hashtag_pressed^0,c
  5463   0009D6  0012               	return	
  5464   0009D8                     l4414:
  5465                           
  5466                           ;TAD_TERMINAL.c: 175:    if (!sending_string) {
  5467   0009D8  5021               	movf	_sending_string^0,w,c
  5468   0009DA  A4D8               	btfss	status,2,c
  5469   0009DC  0012               	return	
  5470                           
  5471                           ;TAD_TERMINAL.c: 176:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  5472   0009DE  0EA7               	movlw	low STR_5
  5473   0009E0  6E5B               	movwf	motor_StartSendString@str^0,c
  5474   0009E2  0E1E               	movlw	high STR_5
  5475   0009E4  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5476   0009E6  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5477                           
  5478                           ;TAD_TERMINAL.c: 177:     sending_string = 1;
  5479   0009EA  0E01               	movlw	1
  5480   0009EC  6E21               	movwf	_sending_string^0,c
  5481                           
  5482                           ;TAD_TERMINAL.c: 178:     state = 13;
  5483   0009EE  0E0D               	movlw	13
  5484   0009F0  6E20               	movwf	motorTerminal@state^0,c
  5485   0009F2  0012               	return	
  5486   0009F4                     l4422:
  5487                           
  5488                           ;TAD_TERMINAL.c: 183:    if (!sending_string) {
  5489   0009F4  5021               	movf	_sending_string^0,w,c
  5490   0009F6  A4D8               	btfss	status,2,c
  5491   0009F8  0012               	return	
  5492                           
  5493                           ;TAD_TERMINAL.c: 184:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  5494   0009FA  0E48               	movlw	low STR_6
  5495   0009FC  6E5B               	movwf	motor_StartSendString@str^0,c
  5496   0009FE  0E1E               	movlw	high STR_6
  5497   000A00  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5498   000A02  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5499                           
  5500                           ;TAD_TERMINAL.c: 185:     sending_string = 1;
  5501   000A06  0E01               	movlw	1
  5502   000A08  6E21               	movwf	_sending_string^0,c
  5503                           
  5504                           ;TAD_TERMINAL.c: 186:     state = 1;
  5505   000A0A  0E01               	movlw	1
  5506   000A0C  6E20               	movwf	motorTerminal@state^0,c
  5507   000A0E  0012               	return	
  5508   000A10                     l4430:
  5509                           
  5510                           ;TAD_TERMINAL.c: 191:    if(Terminal_RXAvailable()) {
  5511   000A10  EC58  F00E         	call	_Terminal_RXAvailable	;wreg free
  5512   000A14  0900               	iorlw	0
  5513   000A16  B4D8               	btfsc	status,2,c
  5514   000A18  0012               	return	
  5515                           
  5516                           ;TAD_TERMINAL.c: 192:     char opcion = Terminal_ReceiveChar();
  5517   000A1A  EC7A  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5518   000A1E  6E6D               	movwf	motorTerminal@opcion^0,c
  5519                           
  5520                           ;TAD_TERMINAL.c: 193:     if (opcion >= '1' && opcion <= '3') {
  5521   000A20  0E30               	movlw	48
  5522   000A22  646D               	cpfsgt	motorTerminal@opcion^0,c
  5523   000A24  D011               	goto	l4444
  5524   000A26  0E34               	movlw	52
  5525   000A28  606D               	cpfslt	motorTerminal@opcion^0,c
  5526   000A2A  D00E               	goto	l4444
  5527                           
  5528                           ;TAD_TERMINAL.c: 194:      motor_StartSendString("\r\n");
  5529   000A2C  0EE2               	movlw	low (STR_4+15)
  5530   000A2E  6E5B               	movwf	motor_StartSendString@str^0,c
  5531   000A30  0E1F               	movlw	high (STR_4+15)
  5532   000A32  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5533   000A34  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5534                           
  5535                           ;TAD_TERMINAL.c: 195:      sending_string = 1;
  5536   000A38  0E01               	movlw	1
  5537   000A3A  6E21               	movwf	_sending_string^0,c
  5538                           
  5539                           ;TAD_TERMINAL.c: 196:      state = (opcion - '1') * 10 + 20;
  5540   000A3C  506D               	movf	motorTerminal@opcion^0,w,c
  5541   000A3E  0D0A               	mullw	10
  5542   000A40  50F3               	movf	243,w,c
  5543   000A42  0F2A               	addlw	42
  5544   000A44  6E20               	movwf	motorTerminal@state^0,c
  5545                           
  5546                           ;TAD_TERMINAL.c: 197:     } else {
  5547   000A46  0012               	return	
  5548   000A48                     l4444:
  5549                           
  5550                           ;TAD_TERMINAL.c: 198:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5551   000A48  0E1F               	movlw	low STR_8
  5552   000A4A  6E5B               	movwf	motor_StartSendString@str^0,c
  5553   000A4C  0E1F               	movlw	high STR_8
  5554   000A4E  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5555   000A50  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5556   000A54                     l4446:
  5557                           
  5558                           ;TAD_TERMINAL.c: 199:      sending_string = 1;
  5559   000A54  0E01               	movlw	1
  5560   000A56  6E21               	movwf	_sending_string^0,c
  5561                           
  5562                           ;TAD_TERMINAL.c: 200:      state = 0;
  5563   000A58  6A20               	clrf	motorTerminal@state^0,c
  5564   000A5A  0012               	return	
  5565   000A5C                     l4450:
  5566                           
  5567                           ;TAD_TERMINAL.c: 206:    if (!sending_string) {
  5568   000A5C  5021               	movf	_sending_string^0,w,c
  5569   000A5E  A4D8               	btfss	status,2,c
  5570   000A60  0012               	return	
  5571                           
  5572                           ;TAD_TERMINAL.c: 207:     unsigned char currentUserIndex = getCurrentUserIndex();
  5573   000A62  EC78  F00E         	call	_getCurrentUserIndex	;wreg free
  5574   000A66  6E6E               	movwf	motorTerminal@currentUserIndex^0,c
  5575                           
  5576                           ;TAD_TERMINAL.c: 208:     if (currentUserIndex != 4) {
  5577   000A68  0E04               	movlw	4
  5578   000A6A  186E               	xorwf	motorTerminal@currentUserIndex^0,w,c
  5579   000A6C  B4D8               	btfsc	status,2,c
  5580   000A6E  D013               	goto	l4462
  5581                           
  5582                           ;TAD_TERMINAL.c: 209:      getActualUID(currentUser, currentUserIndex);
  5583   000A70  0EC3               	movlw	low motorTerminal@currentUser
  5584   000A72  6E57               	movwf	getActualUID@UID^0,c
  5585   000A74  C06E  F058         	movff	motorTerminal@currentUserIndex,getActualUID@userIndex
  5586   000A78  ECDA  F00A         	call	_getActualUID	;wreg free
  5587                           
  5588                           ;TAD_TERMINAL.c: 210:      printfUID(currentUser, currentUserIndex, "Usuari ");
  5589   000A7C  0EC3               	movlw	low motorTerminal@currentUser
  5590   000A7E  6E5D               	movwf	printfUID@currentUser^0,c
  5591   000A80  C06E  F05E         	movff	motorTerminal@currentUserIndex,printfUID@userIndex
  5592   000A84  0EF7               	movlw	low STR_9
  5593   000A86  6E5F               	movwf	printfUID@extraString^0,c
  5594   000A88  0E1F               	movlw	high STR_9
  5595   000A8A  6E60               	movwf	(printfUID@extraString+1)^0,c
  5596   000A8C  EC4E  F003         	call	_printfUID	;wreg free
  5597   000A90                     l4460:
  5598                           
  5599                           ;TAD_TERMINAL.c: 211:      state = 25;
  5600   000A90  0E19               	movlw	25
  5601   000A92  6E20               	movwf	motorTerminal@state^0,c
  5602                           
  5603                           ;TAD_TERMINAL.c: 212:     } else {
  5604   000A94  0012               	return	
  5605   000A96                     l4462:
  5606                           
  5607                           ;TAD_TERMINAL.c: 213:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5608   000A96  0EFE               	movlw	low STR_10
  5609   000A98  6E5B               	movwf	motor_StartSendString@str^0,c
  5610   000A9A  0E1E               	movlw	high STR_10
  5611   000A9C  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5612   000A9E  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5613                           
  5614                           ;TAD_TERMINAL.c: 214:      sending_string = 1;
  5615   000AA2  0E01               	movlw	1
  5616   000AA4  6E21               	movwf	_sending_string^0,c
  5617   000AA6  D7F4               	goto	l4460
  5618   000AA8                     l4468:
  5619                           
  5620                           ;TAD_TERMINAL.c: 221:    if (!sending_string) {
  5621   000AA8  5021               	movf	_sending_string^0,w,c
  5622   000AAA  A4D8               	btfss	status,2,c
  5623   000AAC  0012               	return	
  5624                           
  5625                           ;TAD_TERMINAL.c: 222:     motor_StartSendString("\r\n");
  5626   000AAE  0EE2               	movlw	low (STR_4+15)
  5627   000AB0  6E5B               	movwf	motor_StartSendString@str^0,c
  5628   000AB2  0E1F               	movlw	high (STR_4+15)
  5629   000AB4  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5630   000AB6  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5631   000ABA  D7CC               	goto	l4446
  5632   000ABC                     l4476:
  5633                           
  5634                           ;TAD_TERMINAL.c: 229:    if (!sending_string) {
  5635   000ABC  5021               	movf	_sending_string^0,w,c
  5636   000ABE  A4D8               	btfss	status,2,c
  5637   000AC0  0012               	return	
  5638                           
  5639                           ;TAD_TERMINAL.c: 230:     motor_StartSendString("Configuracions:\r\n");
  5640   000AC2  0EE5               	movlw	low STR_12
  5641   000AC4  6E5B               	movwf	motor_StartSendString@str^0,c
  5642   000AC6  0E1F               	movlw	high STR_12
  5643   000AC8  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5644   000ACA  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5645                           
  5646                           ;TAD_TERMINAL.c: 231:     sending_string = 1;
  5647   000ACE  0E01               	movlw	1
  5648   000AD0  6E21               	movwf	_sending_string^0,c
  5649                           
  5650                           ;TAD_TERMINAL.c: 232:     userNumber = 0;
  5651   000AD2  6A1E               	clrf	motorTerminal@userNumber^0,c
  5652                           
  5653                           ;TAD_TERMINAL.c: 233:     state = 32;
  5654   000AD4  0E20               	movlw	32
  5655   000AD6  6E20               	movwf	motorTerminal@state^0,c
  5656   000AD8  0012               	return	
  5657   000ADA                     l4486:
  5658                           
  5659                           ;TAD_TERMINAL.c: 238:    if (!sending_string) {
  5660   000ADA  5021               	movf	_sending_string^0,w,c
  5661   000ADC  A4D8               	btfss	status,2,c
  5662   000ADE  0012               	return	
  5663                           
  5664                           ;TAD_TERMINAL.c: 239:     if (userNumber < 4) {
  5665   000AE0  0E04               	movlw	4
  5666   000AE2  601E               	cpfslt	motorTerminal@userNumber^0,c
  5667   000AE4  D012               	goto	l4496
  5668                           
  5669                           ;TAD_TERMINAL.c: 241:      getActualUID(currentUser, userNumber);
  5670   000AE6  0EC3               	movlw	low motorTerminal@currentUser
  5671   000AE8  6E57               	movwf	getActualUID@UID^0,c
  5672   000AEA  C01E  F058         	movff	motorTerminal@userNumber,getActualUID@userIndex
  5673   000AEE  ECDA  F00A         	call	_getActualUID	;wreg free
  5674                           
  5675                           ;TAD_TERMINAL.c: 243:      printfUID(currentUser, userNumber, "Usuari ");
  5676   000AF2  0EC3               	movlw	low motorTerminal@currentUser
  5677   000AF4  6E5D               	movwf	printfUID@currentUser^0,c
  5678   000AF6  C01E  F05E         	movff	motorTerminal@userNumber,printfUID@userIndex
  5679   000AFA  0EF7               	movlw	low STR_9
  5680   000AFC  6E5F               	movwf	printfUID@extraString^0,c
  5681   000AFE  0E1F               	movlw	high STR_9
  5682   000B00  6E60               	movwf	(printfUID@extraString+1)^0,c
  5683   000B02  EC4E  F003         	call	_printfUID	;wreg free
  5684                           
  5685                           ;TAD_TERMINAL.c: 245:      userNumber++;
  5686   000B06  2A1E               	incf	motorTerminal@userNumber^0,f,c
  5687                           
  5688                           ;TAD_TERMINAL.c: 246:     } else {
  5689   000B08  0012               	return	
  5690   000B0A                     l4496:
  5691                           
  5692                           ;TAD_TERMINAL.c: 247:      motor_StartSendString("\r\n");
  5693   000B0A  0EE2               	movlw	low (STR_4+15)
  5694   000B0C  6E5B               	movwf	motor_StartSendString@str^0,c
  5695   000B0E  0E1F               	movlw	high (STR_4+15)
  5696   000B10  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5697   000B12  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5698   000B16  D79E               	goto	l4446
  5699   000B18                     l4502:
  5700                           
  5701                           ;TAD_TERMINAL.c: 255:    if (!sending_string) {
  5702   000B18  5021               	movf	_sending_string^0,w,c
  5703   000B1A  A4D8               	btfss	status,2,c
  5704   000B1C  0012               	return	
  5705                           
  5706                           ;TAD_TERMINAL.c: 256:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5707   000B1E  0E61               	movlw	low STR_15
  5708   000B20  6E5B               	movwf	motor_StartSendString@str^0,c
  5709   000B22  0E1F               	movlw	high STR_15
  5710   000B24  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5711   000B26  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5712                           
  5713                           ;TAD_TERMINAL.c: 257:     sending_string = 1;
  5714   000B2A  0E01               	movlw	1
  5715   000B2C  6E21               	movwf	_sending_string^0,c
  5716                           
  5717                           ;TAD_TERMINAL.c: 258:     state = 2;
  5718   000B2E  0E02               	movlw	2
  5719   000B30  6E20               	movwf	motorTerminal@state^0,c
  5720                           
  5721                           ;TAD_TERMINAL.c: 259:     index = 0;
  5722   000B32  6A1F               	clrf	motorTerminal@index^0,c
  5723   000B34  0012               	return	
  5724   000B36                     l4512:
  5725                           
  5726                           ;TAD_TERMINAL.c: 264:    if(Terminal_RXAvailable()) {
  5727   000B36  EC58  F00E         	call	_Terminal_RXAvailable	;wreg free
  5728   000B3A  0900               	iorlw	0
  5729   000B3C  B4D8               	btfsc	status,2,c
  5730   000B3E  0012               	return	
  5731                           
  5732                           ;TAD_TERMINAL.c: 265:     hour[index] = Terminal_ReceiveChar();
  5733   000B40  501F               	movf	motorTerminal@index^0,w,c
  5734   000B42  0FEA               	addlw	low motorTerminal@hour
  5735   000B44  6ED9               	movwf	fsr2l,c
  5736   000B46  6ADA               	clrf	fsr2h,c
  5737   000B48  EC7A  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5738   000B4C  6EDF               	movwf	indf2,c
  5739                           
  5740                           ;TAD_TERMINAL.c: 266:     Terminal_SendChar(hour[index]);
  5741   000B4E  501F               	movf	motorTerminal@index^0,w,c
  5742   000B50  0FEA               	addlw	low motorTerminal@hour
  5743   000B52  6ED9               	movwf	fsr2l,c
  5744   000B54  6ADA               	clrf	fsr2h,c
  5745   000B56  50DF               	movf	indf2,w,c
  5746   000B58  EC35  F00E         	call	_Terminal_SendChar
  5747                           
  5748                           ;TAD_TERMINAL.c: 267:     if(++index == 4) {
  5749   000B5C  2A1F               	incf	motorTerminal@index^0,f,c
  5750   000B5E  0E04               	movlw	4
  5751   000B60  181F               	xorwf	motorTerminal@index^0,w,c
  5752   000B62  A4D8               	btfss	status,2,c
  5753   000B64  0012               	return	
  5754                           
  5755                           ;TAD_TERMINAL.c: 268:      saveHourToData(hour);
  5756   000B66  0EEA               	movlw	low motorTerminal@hour
  5757   000B68  6E57               	movwf	saveHourToData@hour^0,c
  5758   000B6A  ECB4  F00D         	call	_saveHourToData	;wreg free
  5759                           
  5760                           ;TAD_TERMINAL.c: 269:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5761   000B6E  0E40               	movlw	low STR_16
  5762   000B70  6E5B               	movwf	motor_StartSendString@str^0,c
  5763   000B72  0E1F               	movlw	high STR_16
  5764   000B74  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5765   000B76  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5766                           
  5767                           ;TAD_TERMINAL.c: 270:      newConfiguration();
  5768   000B7A  EC6F  F00E         	call	_newConfiguration	;wreg free
  5769   000B7E  D76A               	goto	l4446
  5770   000B80                     l4530:
  5771   000B80  5020               	movf	motorTerminal@state^0,w,c
  5772                           
  5773                           ; Switch size 1, requested type "simple"
  5774                           ; Number of cases is 10, Range of values is 0 to 40
  5775                           ; switch strategies available:
  5776                           ; Name         Instructions Cycles
  5777                           ; simple_byte           31    16 (average)
  5778                           ;	Chosen strategy is simple_byte
  5779   000B82  0A00               	xorlw	0	; case 0
  5780   000B84  B4D8               	btfsc	status,2,c
  5781   000B86  D70F               	goto	l4400
  5782   000B88  0A01               	xorlw	1	; case 1
  5783   000B8A  B4D8               	btfsc	status,2,c
  5784   000B8C  D741               	goto	l4430
  5785   000B8E  0A03               	xorlw	3	; case 2
  5786   000B90  B4D8               	btfsc	status,2,c
  5787   000B92  D7D1               	goto	l4512
  5788   000B94  0A08               	xorlw	8	; case 10
  5789   000B96  B4D8               	btfsc	status,2,c
  5790   000B98  D71F               	goto	l4414
  5791   000B9A  0A07               	xorlw	7	; case 13
  5792   000B9C  B4D8               	btfsc	status,2,c
  5793   000B9E  D72A               	goto	l4422
  5794   000BA0  0A19               	xorlw	25	; case 20
  5795   000BA2  B4D8               	btfsc	status,2,c
  5796   000BA4  D75B               	goto	l4450
  5797   000BA6  0A0D               	xorlw	13	; case 25
  5798   000BA8  B4D8               	btfsc	status,2,c
  5799   000BAA  D77E               	goto	l4468
  5800   000BAC  0A07               	xorlw	7	; case 30
  5801   000BAE  B4D8               	btfsc	status,2,c
  5802   000BB0  D785               	goto	l4476
  5803   000BB2  0A3E               	xorlw	62	; case 32
  5804   000BB4  B4D8               	btfsc	status,2,c
  5805   000BB6  D791               	goto	l4486
  5806   000BB8  0A08               	xorlw	8	; case 40
  5807   000BBA  A4D8               	btfss	status,2,c
  5808   000BBC  0012               	return	
  5809   000BBE  D7AC               	goto	l4502
  5810   000BC0                     __end_of_motorTerminal:
  5811                           	callstack 0
  5812                           
  5813 ;; *************** function _saveHourToData *****************
  5814 ;; Defined at:
  5815 ;;		line 88 in file "TAD_DATOS.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5818 ;;		 -> motorTerminal@hour(4), 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  i               1    2[COMRAM] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1
  5830 ;;      Params:         1       0       0
  5831 ;;      Locals:         1       0       0
  5832 ;;      Temps:          0       0       0
  5833 ;;      Totals:         2       0       0
  5834 ;;Total ram usage:        2 bytes
  5835 ;; Hardware stack levels used: 1
  5836 ;; Hardware stack levels required when called: 3
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_motorTerminal
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text11
  5845   001B68                     __ptext11:
  5846                           	callstack 0
  5847   001B68                     _saveHourToData:
  5848                           	callstack 26
  5849                           
  5850                           ;TAD_DATOS.c: 89:     if(!hour) return;
  5851                           
  5852                           ;incstack = 0
  5853   001B68  5057               	movf	saveHourToData@hour^0,w,c
  5854   001B6A  B4D8               	btfsc	status,2,c
  5855   001B6C  0012               	return	
  5856                           
  5857                           ;TAD_DATOS.c: 90:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5858   001B6E  6A58               	clrf	saveHourToData@i^0,c
  5859   001B70                     l4144:
  5860   001B70  5057               	movf	saveHourToData@hour^0,w,c
  5861   001B72  2458               	addwf	saveHourToData@i^0,w,c
  5862   001B74  6ED9               	movwf	fsr2l,c
  5863   001B76  6ADA               	clrf	fsr2h,c
  5864   001B78  5058               	movf	saveHourToData@i^0,w,c
  5865   001B7A  0F77               	addlw	low _currentTime
  5866   001B7C  6EE1               	movwf	fsr1l,c
  5867   001B7E  6AE2               	clrf	fsr1h,c
  5868   001B80  CFDF FFE7          	movff	indf2,indf1
  5869   001B84  2A58               	incf	saveHourToData@i^0,f,c
  5870   001B86  0E03               	movlw	3
  5871   001B88  6458               	cpfsgt	saveHourToData@i^0,c
  5872   001B8A  D7F2               	goto	l4144
  5873   001B8C  0012               	return	
  5874   001B8E                     __end_of_saveHourToData:
  5875                           	callstack 0
  5876                           
  5877 ;; *************** function _printfUID *****************
  5878 ;; Defined at:
  5879 ;;		line 60 in file "TAD_TERMINAL.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5882 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5883 ;;  userIndex       1    8[COMRAM] unsigned char 
  5884 ;;  extraString     2    9[COMRAM] PTR const unsigned char 
  5885 ;;		 -> STR_17(21), STR_13(8), STR_9(8), 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  val             1   19[COMRAM] unsigned char 
  5888 ;;  leds            6   13[COMRAM] unsigned char [6]
  5889 ;;  ptr             2   21[COMRAM] PTR unsigned char 
  5890 ;;		 -> printfUID@buffer(80), 
  5891 ;;  i               1   20[COMRAM] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1
  5901 ;;      Params:         4       0       0
  5902 ;;      Locals:        10       0       0
  5903 ;;      Temps:          2       0       0
  5904 ;;      Totals:        16       0       0
  5905 ;;Total ram usage:       16 bytes
  5906 ;; Hardware stack levels used: 1
  5907 ;; Hardware stack levels required when called: 7
  5908 ;; This function calls:
  5909 ;;		_getActualLeds
  5910 ;;		_motor_StartSendString
  5911 ;; This function is called by:
  5912 ;;		_motorTerminal
  5913 ;;		_motor_setCurrentUser
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text12
  5918   00069C                     __ptext12:
  5919                           	callstack 0
  5920   00069C                     _printfUID:
  5921                           	callstack 21
  5922                           
  5923                           ;TAD_TERMINAL.c: 62:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 6
      +                          4:     static char buffer[80];;TAD_TERMINAL.c: 65:     char *ptr = buffer;
  5924                           
  5925                           ;incstack = 0
  5926   00069C  0E00               	movlw	low printfUID@buffer
  5927   00069E  6E6B               	movwf	printfUID@ptr^0,c
  5928   0006A0  0E01               	movlw	high printfUID@buffer
  5929   0006A2  6E6C               	movwf	(printfUID@ptr+1)^0,c
  5930                           
  5931                           ;TAD_TERMINAL.c: 68:     if (currentUser == 0 || *currentUser == 0) {
  5932   0006A4  505D               	movf	printfUID@currentUser^0,w,c
  5933   0006A6  B4D8               	btfsc	status,2,c
  5934   0006A8  D006               	goto	u2760
  5935   0006AA  505D               	movf	printfUID@currentUser^0,w,c
  5936   0006AC  6ED9               	movwf	fsr2l,c
  5937   0006AE  6ADA               	clrf	fsr2h,c
  5938   0006B0  50DF               	movf	indf2,w,c
  5939   0006B2  A4D8               	btfss	status,2,c
  5940   0006B4  D007               	goto	l3612
  5941   0006B6                     u2760:
  5942                           
  5943                           ;TAD_TERMINAL.c: 69:         motor_StartSendString("\tNo hay usuario configurado\r\n");
  5944   0006B6  0E82               	movlw	low STR_3
  5945   0006B8  6E5B               	movwf	motor_StartSendString@str^0,c
  5946   0006BA  0E1F               	movlw	high STR_3
  5947   0006BC  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5948   0006BE  EC05  F00E         	call	_motor_StartSendString	;wreg free
  5949   0006C2  0012               	return	
  5950   0006C4                     l3612:
  5951                           
  5952                           ;TAD_TERMINAL.c: 74:     if (extraString) {
  5953   0006C4  505F               	movf	printfUID@extraString^0,w,c
  5954   0006C6  1060               	iorwf	(printfUID@extraString+1)^0,w,c
  5955   0006C8  A4D8               	btfss	status,2,c
  5956   0006CA  D010               	goto	l3622
  5957   0006CC  D066               	goto	l3654
  5958   0006CE                     l3616:
  5959                           
  5960                           ;TAD_TERMINAL.c: 76:             *ptr++ = *extraString++;
  5961   0006CE  C05F  FFF6         	movff	printfUID@extraString,tblptrl
  5962   0006D2  C060  FFF7         	movff	printfUID@extraString+1,tblptrh
  5963   0006D6                     	if	0	;tblptru may be non-zero
  5964   0006D6                     	endif
  5965   0006D6                     	if	0	;tblptru may be non-zero
  5966   0006D6                     	endif
  5967   0006D6  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  5968   0006DA  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  5969   0006DE  0008               	tblrd		*
  5970   0006E0  CFF5 FFDF          	movff	tablat,indf2
  5971   0006E4  4A5F               	infsnz	printfUID@extraString^0,f,c
  5972   0006E6  2A60               	incf	(printfUID@extraString+1)^0,f,c
  5973   0006E8  4A6B               	infsnz	printfUID@ptr^0,f,c
  5974   0006EA  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  5975   0006EC                     l3622:
  5976                           
  5977                           ;TAD_TERMINAL.c: 75:         while (*extraString) {
  5978   0006EC  C05F  FFF6         	movff	printfUID@extraString,tblptrl
  5979   0006F0  C060  FFF7         	movff	printfUID@extraString+1,tblptrh
  5980   0006F4                     	if	0	;tblptru may be non-zero
  5981   0006F4                     	endif
  5982   0006F4                     	if	0	;tblptru may be non-zero
  5983   0006F4                     	endif
  5984   0006F4  0008               	tblrd		*
  5985   0006F6  50F5               	movf	tablat,w,c
  5986   0006F8  0900               	iorlw	0
  5987   0006FA  A4D8               	btfss	status,2,c
  5988   0006FC  D7E8               	goto	l3616
  5989                           
  5990                           ;TAD_TERMINAL.c: 79:         if (buffer[0] == 'U' && buffer[1] == 's' && buffer[2] == 'u
      +                          ' &&
  5991   0006FE  0E55               	movlw	85
  5992   000700  0101               	movlb	1	; () banked
  5993   000702  1900               	xorwf	printfUID@buffer& (0+255),w,b
  5994   000704  A4D8               	btfss	status,2,c
  5995   000706  D031               	goto	l3646
  5996                           
  5997                           ; BSR set to: 1
  5998   000708  0E73               	movlw	115
  5999   00070A  1901               	xorwf	(printfUID@buffer+1)& (0+255),w,b
  6000   00070C  A4D8               	btfss	status,2,c
  6001   00070E  D02D               	goto	l3646
  6002                           
  6003                           ; BSR set to: 1
  6004   000710  0E75               	movlw	117
  6005   000712  1902               	xorwf	(printfUID@buffer+2)& (0+255),w,b
  6006   000714  A4D8               	btfss	status,2,c
  6007   000716  D029               	goto	l3646
  6008                           
  6009                           ; BSR set to: 1
  6010   000718  0E61               	movlw	97
  6011   00071A  1903               	xorwf	(printfUID@buffer+3)& (0+255),w,b
  6012   00071C  A4D8               	btfss	status,2,c
  6013   00071E  D025               	goto	l3646
  6014                           
  6015                           ; BSR set to: 1
  6016   000720  0E72               	movlw	114
  6017   000722  1904               	xorwf	(printfUID@buffer+4)& (0+255),w,b
  6018   000724  A4D8               	btfss	status,2,c
  6019   000726  D021               	goto	l3646
  6020                           
  6021                           ; BSR set to: 1
  6022   000728  0E69               	movlw	105
  6023   00072A  1905               	xorwf	(printfUID@buffer+5)& (0+255),w,b
  6024   00072C  A4D8               	btfss	status,2,c
  6025   00072E  D01D               	goto	l3646
  6026                           
  6027                           ; BSR set to: 1
  6028   000730  0E20               	movlw	32
  6029   000732  1906               	xorwf	(printfUID@buffer+6)& (0+255),w,b
  6030   000734  A4D8               	btfss	status,2,c
  6031   000736  D019               	goto	l3646
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;TAD_TERMINAL.c: 81:             buffer[6] == ' ') {;TAD_TERMINAL.c: 82:             *pt
      +                          r++ = '1' + userIndex;
  6035   000738  505E               	movf	printfUID@userIndex^0,w,c
  6036   00073A  0F31               	addlw	49
  6037   00073C  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6038   000740  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6039   000744  6EDF               	movwf	indf2,c
  6040                           
  6041                           ; BSR set to: 1
  6042   000746  4A6B               	infsnz	printfUID@ptr^0,f,c
  6043   000748  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6044                           
  6045                           ;TAD_TERMINAL.c: 83:             *ptr++ = ':';
  6046   00074A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6047   00074E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6048   000752  0E3A               	movlw	58
  6049   000754  6EDF               	movwf	indf2,c
  6050                           
  6051                           ; BSR set to: 1
  6052   000756  4A6B               	infsnz	printfUID@ptr^0,f,c
  6053   000758  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;TAD_TERMINAL.c: 84:             *ptr++ = ' ';
  6057   00075A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6058   00075E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6059   000762  0E20               	movlw	32
  6060   000764  6EDF               	movwf	indf2,c
  6061   000766  4A6B               	infsnz	printfUID@ptr^0,f,c
  6062   000768  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6063   00076A                     l3646:
  6064                           
  6065                           ; BSR set to: 1
  6066                           ;TAD_TERMINAL.c: 86:         *ptr++ = '\r';
  6067   00076A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6068   00076E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6069   000772  0E0D               	movlw	13
  6070   000774  6EDF               	movwf	indf2,c
  6071                           
  6072                           ; BSR set to: 1
  6073   000776  4A6B               	infsnz	printfUID@ptr^0,f,c
  6074   000778  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6075                           
  6076                           ;TAD_TERMINAL.c: 87:         *ptr++ = '\n';
  6077   00077A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6078   00077E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6079   000782  0E0A               	movlw	10
  6080   000784  6EDF               	movwf	indf2,c
  6081                           
  6082                           ; BSR set to: 1
  6083   000786  4A6B               	infsnz	printfUID@ptr^0,f,c
  6084   000788  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6085                           
  6086                           ; BSR set to: 1
  6087                           ;TAD_TERMINAL.c: 88:         *ptr++ = '\t';
  6088   00078A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6089   00078E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6090   000792  0E09               	movlw	9
  6091   000794  6EDF               	movwf	indf2,c
  6092   000796  4A6B               	infsnz	printfUID@ptr^0,f,c
  6093   000798  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6094   00079A                     l3654:
  6095                           
  6096                           ;TAD_TERMINAL.c: 91:     *ptr++ = 'U';
  6097   00079A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6098   00079E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6099   0007A2  0E55               	movlw	85
  6100   0007A4  6EDF               	movwf	indf2,c
  6101   0007A6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6102   0007A8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6103                           
  6104                           ;TAD_TERMINAL.c: 92:     *ptr++ = 'I';
  6105   0007AA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6106   0007AE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6107   0007B2  0E49               	movlw	73
  6108   0007B4  6EDF               	movwf	indf2,c
  6109   0007B6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6110   0007B8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6111                           
  6112                           ;TAD_TERMINAL.c: 93:     *ptr++ = 'D';
  6113   0007BA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6114   0007BE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6115   0007C2  0E44               	movlw	68
  6116   0007C4  6EDF               	movwf	indf2,c
  6117   0007C6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6118   0007C8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6119                           
  6120                           ;TAD_TERMINAL.c: 94:     *ptr++ = ':';
  6121   0007CA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6122   0007CE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6123   0007D2  0E3A               	movlw	58
  6124   0007D4  6EDF               	movwf	indf2,c
  6125   0007D6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6126   0007D8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6127                           
  6128                           ;TAD_TERMINAL.c: 95:     *ptr++ = ' ';
  6129   0007DA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6130   0007DE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6131   0007E2  0E20               	movlw	32
  6132   0007E4  6EDF               	movwf	indf2,c
  6133   0007E6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6134   0007E8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6135                           
  6136                           ;TAD_TERMINAL.c: 98:     char i;;TAD_TERMINAL.c: 99:     for(i = 0; i < 5; i++) {
  6137   0007EA  6A6A               	clrf	printfUID@i^0,c
  6138   0007EC                     l3674:
  6139                           
  6140                           ;TAD_TERMINAL.c: 100:         unsigned char val = currentUser[i];
  6141   0007EC  505D               	movf	printfUID@currentUser^0,w,c
  6142   0007EE  246A               	addwf	printfUID@i^0,w,c
  6143   0007F0  6ED9               	movwf	fsr2l,c
  6144   0007F2  6ADA               	clrf	fsr2h,c
  6145   0007F4  50DF               	movf	indf2,w,c
  6146   0007F6  6E69               	movwf	printfUID@val^0,c
  6147                           
  6148                           ;TAD_TERMINAL.c: 101:         *ptr++ = hex[val >> 4];
  6149   0007F8  3869               	swapf	printfUID@val^0,w,c
  6150   0007FA  0B0F               	andlw	15
  6151   0007FC  6E61               	movwf	??_printfUID^0,c
  6152   0007FE  6A62               	clrf	(??_printfUID+1)^0,c
  6153   000800  0E2B               	movlw	low printfUID@hex
  6154   000802  2461               	addwf	??_printfUID^0,w,c
  6155   000804  6EF6               	movwf	tblptrl,c
  6156   000806  0E1E               	movlw	high printfUID@hex
  6157   000808  2062               	addwfc	(??_printfUID+1)^0,w,c
  6158   00080A  6EF7               	movwf	tblptrh,c
  6159   00080C                     	if	0	;There are less than 3 active tblptr bytes
  6160   00080C                     	endif
  6161   00080C  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6162   000810  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6163   000814  0008               	tblrd		*
  6164   000816  CFF5 FFDF          	movff	tablat,indf2
  6165   00081A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6166   00081C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6167                           
  6168                           ;TAD_TERMINAL.c: 102:         *ptr++ = hex[val & 0x0F];
  6169   00081E  5069               	movf	printfUID@val^0,w,c
  6170   000820  0B0F               	andlw	15
  6171   000822  6E61               	movwf	??_printfUID^0,c
  6172   000824  6A62               	clrf	(??_printfUID+1)^0,c
  6173   000826  0E2B               	movlw	low printfUID@hex
  6174   000828  2461               	addwf	??_printfUID^0,w,c
  6175   00082A  6EF6               	movwf	tblptrl,c
  6176   00082C  0E1E               	movlw	high printfUID@hex
  6177   00082E  2062               	addwfc	(??_printfUID+1)^0,w,c
  6178   000830  6EF7               	movwf	tblptrh,c
  6179   000832                     	if	0	;There are less than 3 active tblptr bytes
  6180   000832                     	endif
  6181   000832  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6182   000836  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6183   00083A  0008               	tblrd		*
  6184   00083C  CFF5 FFDF          	movff	tablat,indf2
  6185   000840  4A6B               	infsnz	printfUID@ptr^0,f,c
  6186   000842  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6187                           
  6188                           ;TAD_TERMINAL.c: 103:         if(i < 4) *ptr++ = '-';
  6189   000844  0E04               	movlw	4
  6190   000846  606A               	cpfslt	printfUID@i^0,c
  6191   000848  D008               	goto	l3690
  6192   00084A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6193   00084E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6194   000852  0E2D               	movlw	45
  6195   000854  6EDF               	movwf	indf2,c
  6196   000856  4A6B               	infsnz	printfUID@ptr^0,f,c
  6197   000858  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6198   00085A                     l3690:
  6199                           
  6200                           ;TAD_TERMINAL.c: 104:     }
  6201   00085A  2A6A               	incf	printfUID@i^0,f,c
  6202   00085C  0E04               	movlw	4
  6203   00085E  646A               	cpfsgt	printfUID@i^0,c
  6204   000860  D7C5               	goto	l3674
  6205                           
  6206                           ;TAD_TERMINAL.c: 105:     *ptr++ = '\r';
  6207   000862  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6208   000866  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6209   00086A  0E0D               	movlw	13
  6210   00086C  6EDF               	movwf	indf2,c
  6211   00086E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6212   000870  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6213                           
  6214                           ;TAD_TERMINAL.c: 106:     *ptr++ = '\n';
  6215   000872  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6216   000876  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6217   00087A  0E0A               	movlw	10
  6218   00087C  6EDF               	movwf	indf2,c
  6219   00087E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6220   000880  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6221                           
  6222                           ;TAD_TERMINAL.c: 107:     *ptr++ = '\t';
  6223   000882  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6224   000886  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6225   00088A  0E09               	movlw	9
  6226   00088C  6EDF               	movwf	indf2,c
  6227   00088E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6228   000890  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6229                           
  6230                           ;TAD_TERMINAL.c: 109:     unsigned char leds[6];;TAD_TERMINAL.c: 110:     getActualLeds(
      +                          leds, userIndex);
  6231   000892  0E63               	movlw	low printfUID@leds
  6232   000894  6E57               	movwf	getActualLeds@leds^0,c
  6233   000896  C05E  F058         	movff	printfUID@userIndex,getActualLeds@userIndex
  6234   00089A  EC39  F00C         	call	_getActualLeds	;wreg free
  6235                           
  6236                           ;TAD_TERMINAL.c: 113:     for(i = 0; i < 6; i++) {
  6237   00089E  6A6A               	clrf	printfUID@i^0,c
  6238   0008A0                     l3712:
  6239                           
  6240                           ;TAD_TERMINAL.c: 115:         *ptr++ = 'L';
  6241   0008A0  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6242   0008A4  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6243   0008A8  0E4C               	movlw	76
  6244   0008AA  6EDF               	movwf	indf2,c
  6245   0008AC  4A6B               	infsnz	printfUID@ptr^0,f,c
  6246   0008AE  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6247                           
  6248                           ;TAD_TERMINAL.c: 116:         *ptr++ = '0' + i;
  6249   0008B0  506A               	movf	printfUID@i^0,w,c
  6250   0008B2  0F30               	addlw	48
  6251   0008B4  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6252   0008B8  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6253   0008BC  6EDF               	movwf	indf2,c
  6254   0008BE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6255   0008C0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6256                           
  6257                           ;TAD_TERMINAL.c: 117:         *ptr++ = ':';
  6258   0008C2  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6259   0008C6  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6260   0008CA  0E3A               	movlw	58
  6261   0008CC  6EDF               	movwf	indf2,c
  6262   0008CE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6263   0008D0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6264                           
  6265                           ;TAD_TERMINAL.c: 118:         *ptr++ = ' ';
  6266   0008D2  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6267   0008D6  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6268   0008DA  0E20               	movlw	32
  6269   0008DC  6EDF               	movwf	indf2,c
  6270   0008DE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6271   0008E0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6272                           
  6273                           ;TAD_TERMINAL.c: 119:   if (leds[i] < 10) {
  6274   0008E2  506A               	movf	printfUID@i^0,w,c
  6275   0008E4  0F63               	addlw	low printfUID@leds
  6276   0008E6  6ED9               	movwf	fsr2l,c
  6277   0008E8  6ADA               	clrf	fsr2h,c
  6278   0008EA  0E0A               	movlw	10
  6279   0008EC  60DF               	cpfslt	indf2,c
  6280   0008EE  D00E               	goto	l3728
  6281                           
  6282                           ;TAD_TERMINAL.c: 120:    *ptr++ = '0' + leds[i];
  6283   0008F0  506A               	movf	printfUID@i^0,w,c
  6284   0008F2  0F63               	addlw	low printfUID@leds
  6285   0008F4  6ED9               	movwf	fsr2l,c
  6286   0008F6  6ADA               	clrf	fsr2h,c
  6287   0008F8  50DF               	movf	indf2,w,c
  6288   0008FA  0F30               	addlw	48
  6289   0008FC  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6290   000900  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6291   000904  6EDF               	movwf	indf2,c
  6292   000906  4A6B               	infsnz	printfUID@ptr^0,f,c
  6293   000908  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6294                           
  6295                           ;TAD_TERMINAL.c: 121:   } else {
  6296   00090A  D006               	goto	l3732
  6297   00090C                     l3728:
  6298                           
  6299                           ;TAD_TERMINAL.c: 122:    *ptr++ = 'A';
  6300   00090C  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6301   000910  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6302   000914  0E41               	movlw	65
  6303   000916  D7F6               	goto	L14
  6304   000918                     l3732:
  6305                           
  6306                           ;TAD_TERMINAL.c: 126:         if(i < 5) {
  6307   000918  0E05               	movlw	5
  6308   00091A  606A               	cpfslt	printfUID@i^0,c
  6309   00091C  D018               	goto	l3744
  6310                           
  6311                           ;TAD_TERMINAL.c: 127:             *ptr++ = ' ';
  6312   00091E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6313   000922  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6314   000926  0E20               	movlw	32
  6315   000928  6EDF               	movwf	indf2,c
  6316   00092A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6317   00092C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6318                           
  6319                           ;TAD_TERMINAL.c: 128:             *ptr++ = '-';
  6320   00092E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6321   000932  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6322   000936  0E2D               	movlw	45
  6323   000938  6EDF               	movwf	indf2,c
  6324   00093A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6325   00093C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6326                           
  6327                           ;TAD_TERMINAL.c: 129:             *ptr++ = ' ';
  6328   00093E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6329   000942  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6330   000946  0E20               	movlw	32
  6331   000948  6EDF               	movwf	indf2,c
  6332   00094A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6333   00094C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6334   00094E                     l3744:
  6335                           
  6336                           ;TAD_TERMINAL.c: 131:     }
  6337   00094E  2A6A               	incf	printfUID@i^0,f,c
  6338   000950  0E05               	movlw	5
  6339   000952  646A               	cpfsgt	printfUID@i^0,c
  6340   000954  D7A5               	goto	l3712
  6341                           
  6342                           ;TAD_TERMINAL.c: 134:     *ptr++ = '\r';
  6343   000956  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6344   00095A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6345   00095E  0E0D               	movlw	13
  6346   000960  6EDF               	movwf	indf2,c
  6347   000962  4A6B               	infsnz	printfUID@ptr^0,f,c
  6348   000964  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6349                           
  6350                           ;TAD_TERMINAL.c: 135:     *ptr++ = '\n';
  6351   000966  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6352   00096A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6353   00096E  0E0A               	movlw	10
  6354   000970  6EDF               	movwf	indf2,c
  6355   000972  4A6B               	infsnz	printfUID@ptr^0,f,c
  6356   000974  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6357                           
  6358                           ;TAD_TERMINAL.c: 136:     *ptr = '\0';
  6359   000976  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6360   00097A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6361   00097E  6ADF               	clrf	indf2,c
  6362                           
  6363                           ;TAD_TERMINAL.c: 139:     motor_StartSendString(buffer);
  6364   000980  0E00               	movlw	low printfUID@buffer
  6365   000982  6E5B               	movwf	motor_StartSendString@str^0,c
  6366   000984  0E01               	movlw	high printfUID@buffer
  6367   000986  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  6368   000988  EC05  F00E         	call	_motor_StartSendString	;wreg free
  6369                           
  6370                           ;TAD_TERMINAL.c: 140:     sending_string = 1;
  6371   00098C  0E01               	movlw	1
  6372   00098E  6E21               	movwf	_sending_string^0,c
  6373   000990  0012               	return		;funcret
  6374   000992                     __end_of_printfUID:
  6375                           	callstack 0
  6376                           
  6377 ;; *************** function _getActualLeds *****************
  6378 ;; Defined at:
  6379 ;;		line 68 in file "TAD_DATOS.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  leds            1    1[COMRAM] PTR unsigned char 
  6382 ;;		 -> printfUID@leds(6), ActualLeds(6), 
  6383 ;;  userIndex       1    2[COMRAM] unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  i               1    4[COMRAM] unsigned char 
  6386 ;;  i               1    3[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1
  6396 ;;      Params:         2       0       0
  6397 ;;      Locals:         2       0       0
  6398 ;;      Temps:          0       0       0
  6399 ;;      Totals:         4       0       0
  6400 ;;Total ram usage:        4 bytes
  6401 ;; Hardware stack levels used: 1
  6402 ;; Hardware stack levels required when called: 3
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_motor_LEDs
  6407 ;;		_printfUID
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text13
  6412   001872                     __ptext13:
  6413                           	callstack 0
  6414   001872                     _getActualLeds:
  6415                           	callstack 24
  6416                           
  6417                           ;TAD_DATOS.c: 69:     if(!leds) return;
  6418                           
  6419                           ;incstack = 0
  6420   001872  5057               	movf	getActualLeds@leds^0,w,c
  6421   001874  B4D8               	btfsc	status,2,c
  6422   001876  0012               	return	
  6423                           
  6424                           ;TAD_DATOS.c: 70:     if(userIndex == 20) {
  6425   001878  0E14               	movlw	20
  6426   00187A  1858               	xorwf	getActualLeds@userIndex^0,w,c
  6427   00187C  A4D8               	btfss	status,2,c
  6428   00187E  D013               	goto	l815
  6429                           
  6430                           ;TAD_DATOS.c: 72:         for(char i = 0; i < 6; i++) {
  6431   001880  6A59               	clrf	getActualLeds@i^0,c
  6432   001882                     l3512:
  6433                           
  6434                           ;TAD_DATOS.c: 73:             leds[i] = configurations[index][i];
  6435   001882  507D               	movf	_index^0,w,c
  6436   001884  0D06               	mullw	6
  6437   001886  50F3               	movf	243,w,c
  6438   001888  0F80               	addlw	low _configurations
  6439   00188A  2459               	addwf	getActualLeds@i^0,w,c
  6440   00188C  6ED9               	movwf	fsr2l,c
  6441   00188E  6ADA               	clrf	fsr2h,c
  6442   001890  5057               	movf	getActualLeds@leds^0,w,c
  6443   001892  2459               	addwf	getActualLeds@i^0,w,c
  6444   001894  6EE1               	movwf	fsr1l,c
  6445   001896  6AE2               	clrf	fsr1h,c
  6446   001898  CFDF FFE7          	movff	indf2,indf1
  6447                           
  6448                           ;TAD_DATOS.c: 74:         }
  6449   00189C  2A59               	incf	getActualLeds@i^0,f,c
  6450   00189E  0E05               	movlw	5
  6451   0018A0  6459               	cpfsgt	getActualLeds@i^0,c
  6452   0018A2  D7EF               	goto	l3512
  6453   0018A4  0012               	return	
  6454   0018A6                     l815:
  6455                           
  6456                           ;TAD_DATOS.c: 77:         for(char i = 0; i < 6; i++) {
  6457   0018A6  6A5A               	clrf	getActualLeds@i_1020^0,c
  6458   0018A8                     l3522:
  6459                           
  6460                           ;TAD_DATOS.c: 78:             leds[i] = configurations[userIndex][i];
  6461   0018A8  5058               	movf	getActualLeds@userIndex^0,w,c
  6462   0018AA  0D06               	mullw	6
  6463   0018AC  50F3               	movf	243,w,c
  6464   0018AE  0F80               	addlw	low _configurations
  6465   0018B0  245A               	addwf	getActualLeds@i_1020^0,w,c
  6466   0018B2  6ED9               	movwf	fsr2l,c
  6467   0018B4  6ADA               	clrf	fsr2h,c
  6468   0018B6  5057               	movf	getActualLeds@leds^0,w,c
  6469   0018B8  245A               	addwf	getActualLeds@i_1020^0,w,c
  6470   0018BA  6EE1               	movwf	fsr1l,c
  6471   0018BC  6AE2               	clrf	fsr1h,c
  6472   0018BE  CFDF FFE7          	movff	indf2,indf1
  6473                           
  6474                           ;TAD_DATOS.c: 79:         }
  6475   0018C2  2A5A               	incf	getActualLeds@i_1020^0,f,c
  6476   0018C4  0E05               	movlw	5
  6477   0018C6  645A               	cpfsgt	getActualLeds@i_1020^0,c
  6478   0018C8  D7EF               	goto	l3522
  6479   0018CA  0012               	return	
  6480   0018CC                     __end_of_getActualLeds:
  6481                           	callstack 0
  6482                           
  6483 ;; *************** function _newConfiguration *****************
  6484 ;; Defined at:
  6485 ;;		line 84 in file "TAD_DATOS.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1
  6499 ;;      Params:         0       0       0
  6500 ;;      Locals:         0       0       0
  6501 ;;      Temps:          0       0       0
  6502 ;;      Totals:         0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used: 1
  6505 ;; Hardware stack levels required when called: 3
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_motor_RFID
  6510 ;;		_motorTerminal
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text14
  6515   001CDE                     __ptext14:
  6516                           	callstack 0
  6517   001CDE                     _newConfiguration:
  6518                           	callstack 26
  6519                           
  6520                           ;TAD_DATOS.c: 85:     new_configuration = 1;
  6521                           
  6522                           ;incstack = 0
  6523   001CDE  0E01               	movlw	1
  6524   001CE0  6E1D               	movwf	_new_configuration^0,c
  6525   001CE2  0012               	return		;funcret
  6526   001CE4                     __end_of_newConfiguration:
  6527                           	callstack 0
  6528                           
  6529 ;; *************** function _getCurrentUserIndex *****************
  6530 ;; Defined at:
  6531 ;;		line 325 in file "TAD_DATOS.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      unsigned char 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1
  6545 ;;      Params:         0       0       0
  6546 ;;      Locals:         0       0       0
  6547 ;;      Temps:          0       0       0
  6548 ;;      Totals:         0       0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used: 1
  6551 ;; Hardware stack levels required when called: 3
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_motor_RFID
  6556 ;;		_motorTerminal
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text15
  6561   001CF0                     __ptext15:
  6562                           	callstack 0
  6563   001CF0                     _getCurrentUserIndex:
  6564                           	callstack 26
  6565                           
  6566                           ;TAD_DATOS.c: 326:     return index;
  6567                           
  6568                           ;incstack = 0
  6569   001CF0  507D               	movf	_index^0,w,c
  6570   001CF2  0012               	return		;funcret
  6571   001CF4                     __end_of_getCurrentUserIndex:
  6572                           	callstack 0
  6573                           
  6574 ;; *************** function _getActualUID *****************
  6575 ;; Defined at:
  6576 ;;		line 48 in file "TAD_DATOS.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6579 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  6580 ;;  userIndex       1    2[COMRAM] unsigned char 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  i               1    3[COMRAM] unsigned char 
  6583 ;;  i               1    4[COMRAM] unsigned char 
  6584 ;;  i               1    5[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1
  6594 ;;      Params:         2       0       0
  6595 ;;      Locals:         3       0       0
  6596 ;;      Temps:          0       0       0
  6597 ;;      Totals:         5       0       0
  6598 ;;Total ram usage:        5 bytes
  6599 ;; Hardware stack levels used: 1
  6600 ;; Hardware stack levels required when called: 3
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_motor_RFID
  6605 ;;		_motorTerminal
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           	psect	text16
  6610   0015B4                     __ptext16:
  6611                           	callstack 0
  6612   0015B4                     _getActualUID:
  6613                           	callstack 26
  6614                           
  6615                           ;TAD_DATOS.c: 49:     if(!UID) return;
  6616                           
  6617                           ;incstack = 0
  6618   0015B4  5057               	movf	getActualUID@UID^0,w,c
  6619   0015B6  B4D8               	btfsc	status,2,c
  6620   0015B8  0012               	return	
  6621                           
  6622                           ;TAD_DATOS.c: 50:     if (userIndex == 0xFF) {
  6623   0015BA  2858               	incf	getActualUID@userIndex^0,w,c
  6624   0015BC  A4D8               	btfss	status,2,c
  6625   0015BE  D01E               	goto	l801
  6626                           
  6627                           ;TAD_DATOS.c: 51:         if (currentUser[0]) {
  6628   0015C0  5040               	movf	_currentUser^0,w,c
  6629   0015C2  B4D8               	btfsc	status,2,c
  6630   0015C4  D010               	goto	l802
  6631                           
  6632                           ;TAD_DATOS.c: 52:             for(unsigned char i = 0; i < 5; i++) {
  6633   0015C6  6A5A               	clrf	getActualUID@i^0,c
  6634   0015C8                     l3954:
  6635                           
  6636                           ;TAD_DATOS.c: 53:                 UID[i] = currentUser[i];
  6637   0015C8  505A               	movf	getActualUID@i^0,w,c
  6638   0015CA  0F40               	addlw	low _currentUser
  6639   0015CC  6ED9               	movwf	fsr2l,c
  6640   0015CE  6ADA               	clrf	fsr2h,c
  6641   0015D0  5057               	movf	getActualUID@UID^0,w,c
  6642   0015D2  245A               	addwf	getActualUID@i^0,w,c
  6643   0015D4  6EE1               	movwf	fsr1l,c
  6644   0015D6  6AE2               	clrf	fsr1h,c
  6645   0015D8  CFDF FFE7          	movff	indf2,indf1
  6646                           
  6647                           ;TAD_DATOS.c: 54:             }
  6648   0015DC  2A5A               	incf	getActualUID@i^0,f,c
  6649   0015DE  0E04               	movlw	4
  6650   0015E0  645A               	cpfsgt	getActualUID@i^0,c
  6651   0015E2  D7F2               	goto	l3954
  6652   0015E4  0012               	return	
  6653   0015E6                     l802:
  6654                           
  6655                           ;TAD_DATOS.c: 56:             for(unsigned char i = 0; i < 5; i++) {
  6656   0015E6  6A59               	clrf	getActualUID@i_1014^0,c
  6657   0015E8                     l3964:
  6658                           
  6659                           ;TAD_DATOS.c: 57:                 UID[i] = 0x00;
  6660   0015E8  5057               	movf	getActualUID@UID^0,w,c
  6661   0015EA  2459               	addwf	getActualUID@i_1014^0,w,c
  6662   0015EC  6ED9               	movwf	fsr2l,c
  6663   0015EE  6ADA               	clrf	fsr2h,c
  6664   0015F0  6ADF               	clrf	indf2,c
  6665                           
  6666                           ;TAD_DATOS.c: 58:             }
  6667   0015F2  2A59               	incf	getActualUID@i_1014^0,f,c
  6668   0015F4  0E04               	movlw	4
  6669   0015F6  6459               	cpfsgt	getActualUID@i_1014^0,c
  6670   0015F8  D7F7               	goto	l3964
  6671   0015FA  0012               	return	
  6672   0015FC                     l801:
  6673                           
  6674                           ;TAD_DATOS.c: 61:         for(unsigned char i = 0; i < 5; i++) {
  6675   0015FC  6A5B               	clrf	getActualUID@i_1015^0,c
  6676   0015FE                     l3974:
  6677                           
  6678                           ;TAD_DATOS.c: 62:             UID[i] = userUIDs[userIndex][i];
  6679   0015FE  5058               	movf	getActualUID@userIndex^0,w,c
  6680   001600  0D05               	mullw	5
  6681   001602  50F3               	movf	243,w,c
  6682   001604  0FC8               	addlw	low _userUIDs
  6683   001606  245B               	addwf	getActualUID@i_1015^0,w,c
  6684   001608  6ED9               	movwf	fsr2l,c
  6685   00160A  6ADA               	clrf	fsr2h,c
  6686   00160C  5057               	movf	getActualUID@UID^0,w,c
  6687   00160E  245B               	addwf	getActualUID@i_1015^0,w,c
  6688   001610  6EE1               	movwf	fsr1l,c
  6689   001612  6AE2               	clrf	fsr1h,c
  6690   001614  CFDF FFE7          	movff	indf2,indf1
  6691                           
  6692                           ;TAD_DATOS.c: 63:         }
  6693   001618  2A5B               	incf	getActualUID@i_1015^0,f,c
  6694   00161A  0E04               	movlw	4
  6695   00161C  645B               	cpfsgt	getActualUID@i_1015^0,c
  6696   00161E  D7EF               	goto	l3974
  6697   001620  0012               	return	
  6698   001622                     __end_of_getActualUID:
  6699                           	callstack 0
  6700                           
  6701 ;; *************** function _Terminal_SendChar *****************
  6702 ;; Defined at:
  6703 ;;		line 24 in file "TAD_TERMINAL.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  c               1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  c               1    4[COMRAM] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, status,2, status,0, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1
  6717 ;;      Params:         0       0       0
  6718 ;;      Locals:         1       0       0
  6719 ;;      Temps:          0       0       0
  6720 ;;      Totals:         1       0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used: 1
  6723 ;; Hardware stack levels required when called: 4
  6724 ;; This function calls:
  6725 ;;		_Terminal_TXAvailable
  6726 ;; This function is called by:
  6727 ;;		_motorTerminal
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text17
  6732   001C6A                     __ptext17:
  6733                           	callstack 0
  6734   001C6A                     _Terminal_SendChar:
  6735                           	callstack 25
  6736                           
  6737                           ;incstack = 0
  6738                           ;Terminal_SendChar@c stored from wreg
  6739   001C6A  6E5A               	movwf	Terminal_SendChar@c^0,c
  6740   001C6C                     
  6741                           ;TAD_TERMINAL.c: 25:  while (!Terminal_TXAvailable());
  6742   001C6C  EC3F  F00E         	call	_Terminal_TXAvailable	;wreg free
  6743   001C70  5057               	movf	?_Terminal_TXAvailable^0,w,c
  6744   001C72  1058               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6745   001C74  B4D8               	btfsc	status,2,c
  6746   001C76  D7FA               	goto	l4132
  6747                           
  6748                           ;TAD_TERMINAL.c: 26:  TXREG = c;
  6749   001C78  C05A  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  6750   001C7C  0012               	return		;funcret
  6751   001C7E                     __end_of_Terminal_SendChar:
  6752                           	callstack 0
  6753                           
  6754 ;; *************** function _Terminal_ReceiveChar *****************
  6755 ;; Defined at:
  6756 ;;		line 21 in file "TAD_TERMINAL.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1
  6770 ;;      Params:         0       0       0
  6771 ;;      Locals:         0       0       0
  6772 ;;      Temps:          0       0       0
  6773 ;;      Totals:         0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used: 1
  6776 ;; Hardware stack levels required when called: 3
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_motorTerminal
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text18
  6785   001CF4                     __ptext18:
  6786                           	callstack 0
  6787   001CF4                     _Terminal_ReceiveChar:
  6788                           	callstack 26
  6789                           
  6790                           ;incstack = 0
  6791   001CF4  50AE               	movf	174,w,c	;volatile
  6792   001CF6  0012               	return		;funcret
  6793   001CF8                     __end_of_Terminal_ReceiveChar:
  6794                           	callstack 0
  6795                           
  6796 ;; *************** function _Terminal_RXAvailable *****************
  6797 ;; Defined at:
  6798 ;;		line 20 in file "TAD_TERMINAL.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      unsigned char 
  6805 ;; Registers used:
  6806 ;;		wreg
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1
  6812 ;;      Params:         0       0       0
  6813 ;;      Locals:         0       0       0
  6814 ;;      Temps:          0       0       0
  6815 ;;      Totals:         0       0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used: 1
  6818 ;; Hardware stack levels required when called: 3
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_motorTerminal
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text19
  6827   001CB0                     __ptext19:
  6828                           	callstack 0
  6829   001CB0                     _Terminal_RXAvailable:
  6830                           	callstack 26
  6831                           
  6832                           ;incstack = 0
  6833   001CB0  AA9E               	btfss	158,5,c	;volatile
  6834   001CB2  D002               	goto	u3460
  6835   001CB4  0E01               	movlw	1
  6836   001CB6  0012               	return	
  6837   001CB8                     u3460:
  6838   001CB8  0E00               	movlw	0
  6839   001CBA  0012               	return		;funcret
  6840   001CBC                     __end_of_Terminal_RXAvailable:
  6841                           	callstack 0
  6842                           
  6843 ;; *************** function _motorTeclado *****************
  6844 ;; Defined at:
  6845 ;;		line 72 in file "TAD_TECLADO.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1
  6859 ;;      Params:         0       0       0
  6860 ;;      Locals:         0       0       0
  6861 ;;      Temps:          0       0       0
  6862 ;;      Totals:         0       0       0
  6863 ;;Total ram usage:        0 bytes
  6864 ;; Hardware stack levels used: 1
  6865 ;; Hardware stack levels required when called: 7
  6866 ;; This function calls:
  6867 ;;		_GetTecla
  6868 ;;		_TI_GetTics
  6869 ;;		_TI_ResetTics
  6870 ;;		_hashtag_pressed3s
  6871 ;;		_motor_StartSendString
  6872 ;;		_resetData
  6873 ;;		_setLed
  6874 ;;		_setStartSendString
  6875 ;;		_writeColumnas
  6876 ;; This function is called by:
  6877 ;;		_main
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text20
  6882   000ECE                     __ptext20:
  6883                           	callstack 0
  6884   000ECE                     _motorTeclado:
  6885                           	callstack 23
  6886                           
  6887                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  6888                           
  6889                           ;incstack = 0
  6890   000ECE  5083               	movf	131,w,c	;volatile
  6891   000ED0  0B0F               	andlw	15
  6892   000ED2  6E27               	movwf	_Filas^0,c
  6893                           
  6894                           ;TAD_TECLADO.c: 76:     switch(state) {
  6895   000ED4  D074               	goto	l4392
  6896   000ED6                     l4310:
  6897                           
  6898                           ;TAD_TECLADO.c: 78:             if (Filas) {
  6899   000ED6  5027               	movf	_Filas^0,w,c
  6900   000ED8  B4D8               	btfsc	status,2,c
  6901   000EDA  D006               	goto	l582
  6902                           
  6903                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer_teclado);
  6904   000EDC  504B               	movf	_timer_teclado^0,w,c
  6905   000EDE  ECDA  F00D         	call	_TI_ResetTics
  6906   000EE2                     l4314:
  6907                           
  6908                           ;TAD_TECLADO.c: 80:                 state = 3;
  6909   000EE2  0E03               	movlw	3
  6910   000EE4  6E24               	movwf	_state^0,c
  6911                           
  6912                           ;TAD_TECLADO.c: 81:             } else {
  6913   000EE6  0012               	return	
  6914   000EE8                     l582:
  6915                           
  6916                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  6917   000EE8  6A26               	clrf	_Columnas^0,c
  6918                           
  6919                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  6920   000EEA  ECF9  F00D         	call	_writeColumnas	;wreg free
  6921                           
  6922                           ;TAD_TECLADO.c: 84:                 state = 1;
  6923   000EEE  0E01               	movlw	1
  6924   000EF0  6E24               	movwf	_state^0,c
  6925   000EF2  0012               	return	
  6926   000EF4                     l4320:
  6927                           
  6928                           ;TAD_TECLADO.c: 89:             if (Filas) {
  6929   000EF4  5027               	movf	_Filas^0,w,c
  6930   000EF6  B4D8               	btfsc	status,2,c
  6931   000EF8  D004               	goto	l4326
  6932                           
  6933                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer_teclado);
  6934   000EFA  504B               	movf	_timer_teclado^0,w,c
  6935   000EFC  ECDA  F00D         	call	_TI_ResetTics
  6936   000F00  D7F0               	goto	l4314
  6937   000F02                     l4326:
  6938                           
  6939                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  6940   000F02  0E01               	movlw	1
  6941   000F04  6E26               	movwf	_Columnas^0,c
  6942                           
  6943                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  6944   000F06  ECF9  F00D         	call	_writeColumnas	;wreg free
  6945                           
  6946                           ;TAD_TECLADO.c: 95:                 state = 2;
  6947   000F0A  0E02               	movlw	2
  6948   000F0C  6E24               	movwf	_state^0,c
  6949   000F0E  0012               	return	
  6950   000F10                     l4332:
  6951                           
  6952                           ;TAD_TECLADO.c: 100:             if (Filas) {
  6953   000F10  5027               	movf	_Filas^0,w,c
  6954   000F12  B4D8               	btfsc	status,2,c
  6955   000F14  D004               	goto	l4338
  6956                           
  6957                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer_teclado);
  6958   000F16  504B               	movf	_timer_teclado^0,w,c
  6959   000F18  ECDA  F00D         	call	_TI_ResetTics
  6960   000F1C  D7E2               	goto	l4314
  6961   000F1E                     l4338:
  6962                           
  6963                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6964   000F1E  0E02               	movlw	2
  6965   000F20  6E26               	movwf	_Columnas^0,c
  6966                           
  6967                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6968   000F22  ECF9  F00D         	call	_writeColumnas	;wreg free
  6969                           
  6970                           ;TAD_TECLADO.c: 106:                 state = 0;
  6971   000F26  6A24               	clrf	_state^0,c
  6972   000F28  0012               	return	
  6973   000F2A                     l4344:
  6974                           
  6975                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6976   000F2A  ECAB  F00B         	call	_GetTecla	;wreg free
  6977   000F2E  6E25               	movwf	_tecla^0,c
  6978                           
  6979                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6980   000F30  5027               	movf	_Filas^0,w,c
  6981   000F32  B4D8               	btfsc	status,2,c
  6982   000F34  D7F4               	goto	l4338
  6983   000F36  504B               	movf	_timer_teclado^0,w,c
  6984   000F38  EC8D  F00C         	call	_TI_GetTics
  6985   000F3C  505A               	movf	(?_TI_GetTics+3)^0,w,c
  6986   000F3E  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  6987   000F40  1058               	iorwf	(?_TI_GetTics+1)^0,w,c
  6988   000F42  E104               	bnz	u3690
  6989   000F44  0E05               	movlw	5
  6990   000F46  5C57               	subwf	?_TI_GetTics^0,w,c
  6991   000F48  A0D8               	btfss	status,0,c
  6992   000F4A  0012               	return	
  6993   000F4C                     u3690:
  6994                           
  6995                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6996   000F4C  0E0B               	movlw	11
  6997   000F4E  1825               	xorwf	_tecla^0,w,c
  6998   000F50  B4D8               	btfsc	status,2,c
  6999   000F52  D006               	goto	l4362
  7000                           
  7001                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  7002   000F54  5025               	movf	_tecla^0,w,c
  7003   000F56  EC60  F00D         	call	_setLed
  7004                           
  7005                           ;TAD_TECLADO.c: 119:                     state = 5;
  7006   000F5A  0E05               	movlw	5
  7007   000F5C  6E24               	movwf	_state^0,c
  7008                           
  7009                           ;TAD_TECLADO.c: 120:                 } else {
  7010   000F5E  0012               	return	
  7011   000F60                     l4362:
  7012                           
  7013                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer_teclado);
  7014   000F60  504B               	movf	_timer_teclado^0,w,c
  7015   000F62  ECDA  F00D         	call	_TI_ResetTics
  7016                           
  7017                           ;TAD_TECLADO.c: 122:                     state = 4;
  7018   000F66  0E04               	movlw	4
  7019   000F68  6E24               	movwf	_state^0,c
  7020   000F6A  0012               	return	
  7021   000F6C                     l4366:
  7022                           
  7023                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  7024   000F6C  5027               	movf	_Filas^0,w,c
  7025   000F6E  A4D8               	btfss	status,2,c
  7026   000F70  D004               	goto	l4372
  7027                           
  7028                           ;TAD_TECLADO.c: 129:                 state = 0;
  7029   000F72  6A24               	clrf	_state^0,c
  7030                           
  7031                           ;TAD_TECLADO.c: 130:                 hashtag_pressed3s();
  7032   000F74  EC75  F00E         	call	_hashtag_pressed3s	;wreg free
  7033                           
  7034                           ;TAD_TECLADO.c: 131:             } else if (TI_GetTics(timer_teclado) > 1500) {
  7035   000F78  0012               	return	
  7036   000F7A                     l4372:
  7037   000F7A  504B               	movf	_timer_teclado^0,w,c
  7038   000F7C  EC8D  F00C         	call	_TI_GetTics
  7039   000F80  505A               	movf	(?_TI_GetTics+3)^0,w,c
  7040   000F82  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  7041   000F84  E106               	bnz	u3720
  7042   000F86  0EDD               	movlw	221
  7043   000F88  5C57               	subwf	?_TI_GetTics^0,w,c
  7044   000F8A  0E05               	movlw	5
  7045   000F8C  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  7046   000F8E  A0D8               	btfss	status,0,c
  7047   000F90  0012               	return	
  7048   000F92                     u3720:
  7049                           
  7050                           ;TAD_TECLADO.c: 132:                 state = 5;
  7051   000F92  0E05               	movlw	5
  7052   000F94  6E24               	movwf	_state^0,c
  7053                           
  7054                           ;TAD_TECLADO.c: 133:                 resetData();
  7055   000F96  ECC7  F00D         	call	_resetData	;wreg free
  7056                           
  7057                           ;TAD_TECLADO.c: 134:                 motor_StartSendString("\r\nS'han resetejat les dade
      +                          s\r\n");
  7058   000F9A  0EA0               	movlw	low STR_2
  7059   000F9C  6E5B               	movwf	motor_StartSendString@str^0,c
  7060   000F9E  0E1F               	movlw	high STR_2
  7061   000FA0  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  7062   000FA2  EC05  F00E         	call	_motor_StartSendString	;wreg free
  7063                           
  7064                           ;TAD_TECLADO.c: 135:                 setStartSendString();
  7065   000FA6  EC72  F00E         	call	_setStartSendString	;wreg free
  7066   000FAA  0012               	return	
  7067   000FAC                     l4382:
  7068                           
  7069                           ;TAD_TECLADO.c: 140:             if (!Filas) {
  7070   000FAC  5027               	movf	_Filas^0,w,c
  7071   000FAE  A4D8               	btfss	status,2,c
  7072   000FB0  0012               	return	
  7073                           
  7074                           ;TAD_TECLADO.c: 141:                 state = 0;
  7075   000FB2  6A24               	clrf	_state^0,c
  7076                           
  7077                           ;TAD_TECLADO.c: 142:                 Columnas = 2;
  7078   000FB4  0E02               	movlw	2
  7079   000FB6  6E26               	movwf	_Columnas^0,c
  7080                           
  7081                           ;TAD_TECLADO.c: 143:                 writeColumnas();
  7082   000FB8  ECF9  F00D         	call	_writeColumnas	;wreg free
  7083   000FBC  0012               	return	
  7084   000FBE                     l4392:
  7085   000FBE  5024               	movf	_state^0,w,c
  7086                           
  7087                           ; Switch size 1, requested type "simple"
  7088                           ; Number of cases is 6, Range of values is 0 to 5
  7089                           ; switch strategies available:
  7090                           ; Name         Instructions Cycles
  7091                           ; simple_byte           19    10 (average)
  7092                           ;	Chosen strategy is simple_byte
  7093   000FC0  0A00               	xorlw	0	; case 0
  7094   000FC2  B4D8               	btfsc	status,2,c
  7095   000FC4  D788               	goto	l4310
  7096   000FC6  0A01               	xorlw	1	; case 1
  7097   000FC8  B4D8               	btfsc	status,2,c
  7098   000FCA  D794               	goto	l4320
  7099   000FCC  0A03               	xorlw	3	; case 2
  7100   000FCE  B4D8               	btfsc	status,2,c
  7101   000FD0  D79F               	goto	l4332
  7102   000FD2  0A01               	xorlw	1	; case 3
  7103   000FD4  B4D8               	btfsc	status,2,c
  7104   000FD6  D7A9               	goto	l4344
  7105   000FD8  0A07               	xorlw	7	; case 4
  7106   000FDA  B4D8               	btfsc	status,2,c
  7107   000FDC  D7C7               	goto	l4366
  7108   000FDE  0A01               	xorlw	1	; case 5
  7109   000FE0  A4D8               	btfss	status,2,c
  7110   000FE2  0012               	return	
  7111   000FE4  D7E3               	goto	l4382
  7112   000FE6                     __end_of_motorTeclado:
  7113                           	callstack 0
  7114                           
  7115 ;; *************** function _writeColumnas *****************
  7116 ;; Defined at:
  7117 ;;		line 43 in file "TAD_TECLADO.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1
  7131 ;;      Params:         0       0       0
  7132 ;;      Locals:         0       0       0
  7133 ;;      Temps:          0       0       0
  7134 ;;      Totals:         0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used: 1
  7137 ;; Hardware stack levels required when called: 3
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_motorTeclado
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text21
  7146   001BF2                     __ptext21:
  7147                           	callstack 0
  7148   001BF2                     _writeColumnas:
  7149                           	callstack 26
  7150                           
  7151                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  7152                           
  7153                           ;incstack = 0
  7154   001BF2  0E03               	movlw	3
  7155   001BF4  6026               	cpfslt	_Columnas^0,c
  7156   001BF6  D007               	goto	l565
  7157                           
  7158                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  7159   001BF8  5026               	movf	_Columnas^0,w,c
  7160   001BFA  0FE7               	addlw	low _colValues
  7161   001BFC  6ED9               	movwf	fsr2l,c
  7162   001BFE  6ADA               	clrf	fsr2h,c
  7163   001C00  50DF               	movf	indf2,w,c
  7164   001C02  6E8C               	movwf	140,c	;volatile
  7165                           
  7166                           ;TAD_TECLADO.c: 46:     } else {
  7167   001C04  0012               	return	
  7168   001C06                     l565:
  7169                           
  7170                           ;TAD_TECLADO.c: 47:         LATD = 0;
  7171   001C06  6A8C               	clrf	140,c	;volatile
  7172   001C08  0012               	return		;funcret
  7173   001C0A                     __end_of_writeColumnas:
  7174                           	callstack 0
  7175                           
  7176 ;; *************** function _setStartSendString *****************
  7177 ;; Defined at:
  7178 ;;		line 143 in file "TAD_TERMINAL.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;		None
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1
  7192 ;;      Params:         0       0       0
  7193 ;;      Locals:         0       0       0
  7194 ;;      Temps:          0       0       0
  7195 ;;      Totals:         0       0       0
  7196 ;;Total ram usage:        0 bytes
  7197 ;; Hardware stack levels used: 1
  7198 ;; Hardware stack levels required when called: 3
  7199 ;; This function calls:
  7200 ;;		Nothing
  7201 ;; This function is called by:
  7202 ;;		_motor_RFID
  7203 ;;		_motorTeclado
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text22
  7208   001CE4                     __ptext22:
  7209                           	callstack 0
  7210   001CE4                     _setStartSendString:
  7211                           	callstack 26
  7212                           
  7213                           ;TAD_TERMINAL.c: 144:  sending_string = 1;
  7214                           
  7215                           ;incstack = 0
  7216   001CE4  0E01               	movlw	1
  7217   001CE6  6E21               	movwf	_sending_string^0,c
  7218   001CE8  0012               	return		;funcret
  7219   001CEA                     __end_of_setStartSendString:
  7220                           	callstack 0
  7221                           
  7222 ;; *************** function _setLed *****************
  7223 ;; Defined at:
  7224 ;;		line 307 in file "TAD_DATOS.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  tecla           1    wreg     unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  tecla           1    4[COMRAM] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1
  7238 ;;      Params:         0       0       0
  7239 ;;      Locals:         1       0       0
  7240 ;;      Temps:          0       0       0
  7241 ;;      Totals:         1       0       0
  7242 ;;Total ram usage:        1 bytes
  7243 ;; Hardware stack levels used: 1
  7244 ;; Hardware stack levels required when called: 4
  7245 ;; This function calls:
  7246 ;;		_setLEDIntensity
  7247 ;; This function is called by:
  7248 ;;		_motorTeclado
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text23
  7253   001AC0                     __ptext23:
  7254                           	callstack 0
  7255   001AC0                     _setLed:
  7256                           	callstack 25
  7257                           
  7258                           ;incstack = 0
  7259                           ;setLed@tecla stored from wreg
  7260   001AC0  6E5A               	movwf	setLed@tecla^0,c
  7261                           
  7262                           ;TAD_DATOS.c: 308:     static char modeLED = 0;;TAD_DATOS.c: 309:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 312:     if (index == 4) return;
  7263   001AC2  0E04               	movlw	4
  7264   001AC4  187D               	xorwf	_index^0,w,c
  7265   001AC6  B4D8               	btfsc	status,2,c
  7266   001AC8  0012               	return	
  7267                           
  7268                           ;TAD_DATOS.c: 314:     if(!modeLED) {
  7269   001ACA  5016               	movf	setLed@modeLED^0,w,c
  7270   001ACC  A4D8               	btfss	status,2,c
  7271   001ACE  D005               	goto	l4098
  7272                           
  7273                           ;TAD_DATOS.c: 315:         ledIndex = tecla - 1;
  7274   001AD0  045A               	decf	setLed@tecla^0,w,c
  7275   001AD2  6E15               	movwf	setLed@ledIndex^0,c
  7276                           
  7277                           ;TAD_DATOS.c: 316:         modeLED = 1;
  7278   001AD4  0E01               	movlw	1
  7279   001AD6  6E16               	movwf	setLed@modeLED^0,c
  7280                           
  7281                           ;TAD_DATOS.c: 317:     } else {
  7282   001AD8  0012               	return	
  7283   001ADA                     l4098:
  7284                           
  7285                           ;TAD_DATOS.c: 318:         setLEDIntensity(index, ledIndex, tecla);
  7286   001ADA  C015  F057         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  7287   001ADE  C05A  F058         	movff	setLed@tecla,setLEDIntensity@intensity
  7288   001AE2  507D               	movf	_index^0,w,c
  7289   001AE4  EC8D  F00D         	call	_setLEDIntensity
  7290                           
  7291                           ;TAD_DATOS.c: 319:         new_configuration = 1;
  7292   001AE8  0E01               	movlw	1
  7293   001AEA  6E1D               	movwf	_new_configuration^0,c
  7294                           
  7295                           ;TAD_DATOS.c: 320:         modeLED = 0;
  7296   001AEC  6A16               	clrf	setLed@modeLED^0,c
  7297   001AEE  0012               	return		;funcret
  7298   001AF0                     __end_of_setLed:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _setLEDIntensity *****************
  7302 ;; Defined at:
  7303 ;;		line 300 in file "TAD_DATOS.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  userIndex       1    wreg     unsigned char 
  7306 ;;  ledIndex        1    1[COMRAM] unsigned char 
  7307 ;;  intensity       1    2[COMRAM] unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  userIndex       1    3[COMRAM] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1
  7319 ;;      Params:         2       0       0
  7320 ;;      Locals:         1       0       0
  7321 ;;      Temps:          0       0       0
  7322 ;;      Totals:         3       0       0
  7323 ;;Total ram usage:        3 bytes
  7324 ;; Hardware stack levels used: 1
  7325 ;; Hardware stack levels required when called: 3
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_setLed
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text24
  7334   001B1A                     __ptext24:
  7335                           	callstack 0
  7336   001B1A                     _setLEDIntensity:
  7337                           	callstack 25
  7338                           
  7339                           ;incstack = 0
  7340                           ;setLEDIntensity@userIndex stored from wreg
  7341   001B1A  6E59               	movwf	setLEDIntensity@userIndex^0,c
  7342                           
  7343                           ;TAD_DATOS.c: 301:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  7344   001B1C  0E04               	movlw	4
  7345   001B1E  6059               	cpfslt	setLEDIntensity@userIndex^0,c
  7346   001B20  0012               	return	
  7347   001B22  0E06               	movlw	6
  7348   001B24  6057               	cpfslt	setLEDIntensity@ledIndex^0,c
  7349   001B26  0012               	return	
  7350   001B28  0E0B               	movlw	11
  7351   001B2A  6058               	cpfslt	setLEDIntensity@intensity^0,c
  7352   001B2C  0012               	return	
  7353                           
  7354                           ;TAD_DATOS.c: 302:         configurations[userIndex][ledIndex] = intensity;
  7355   001B2E  5059               	movf	setLEDIntensity@userIndex^0,w,c
  7356   001B30  0D06               	mullw	6
  7357   001B32  50F3               	movf	243,w,c
  7358   001B34  0F80               	addlw	low _configurations
  7359   001B36  2457               	addwf	setLEDIntensity@ledIndex^0,w,c
  7360   001B38  6ED9               	movwf	fsr2l,c
  7361   001B3A  6ADA               	clrf	fsr2h,c
  7362   001B3C  C058  FFDF         	movff	setLEDIntensity@intensity,indf2
  7363   001B40  0012               	return		;funcret
  7364   001B42                     __end_of_setLEDIntensity:
  7365                           	callstack 0
  7366                           
  7367 ;; *************** function _resetData *****************
  7368 ;; Defined at:
  7369 ;;		line 40 in file "TAD_DATOS.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  j               1    2[COMRAM] unsigned char 
  7374 ;;  i               1    1[COMRAM] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      void 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1
  7384 ;;      Params:         0       0       0
  7385 ;;      Locals:         2       0       0
  7386 ;;      Temps:          0       0       0
  7387 ;;      Totals:         2       0       0
  7388 ;;Total ram usage:        2 bytes
  7389 ;; Hardware stack levels used: 1
  7390 ;; Hardware stack levels required when called: 3
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_motorTeclado
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text25
  7399   001B8E                     __ptext25:
  7400                           	callstack 0
  7401   001B8E                     _resetData:
  7402                           	callstack 26
  7403                           
  7404                           ;TAD_DATOS.c: 41:     for (unsigned char i = 0; i < 4; i++) {
  7405                           
  7406                           ;incstack = 0
  7407   001B8E  6A57               	clrf	resetData@i^0,c
  7408   001B90                     l792:
  7409                           
  7410                           ;TAD_DATOS.c: 42:         for (unsigned char j = 0; j < 6; j++) {
  7411   001B90  6A58               	clrf	resetData@j^0,c
  7412   001B92                     l4114:
  7413                           
  7414                           ;TAD_DATOS.c: 43:             configurations[i][j] = 0;
  7415   001B92  5057               	movf	resetData@i^0,w,c
  7416   001B94  0D06               	mullw	6
  7417   001B96  50F3               	movf	243,w,c
  7418   001B98  0F80               	addlw	low _configurations
  7419   001B9A  2458               	addwf	resetData@j^0,w,c
  7420   001B9C  6ED9               	movwf	fsr2l,c
  7421   001B9E  6ADA               	clrf	fsr2h,c
  7422   001BA0  6ADF               	clrf	indf2,c
  7423                           
  7424                           ;TAD_DATOS.c: 44:         }
  7425   001BA2  2A58               	incf	resetData@j^0,f,c
  7426   001BA4  0E05               	movlw	5
  7427   001BA6  6458               	cpfsgt	resetData@j^0,c
  7428   001BA8  D7F4               	goto	l4114
  7429                           
  7430                           ;TAD_DATOS.c: 45:     }
  7431   001BAA  2A57               	incf	resetData@i^0,f,c
  7432   001BAC  0E03               	movlw	3
  7433   001BAE  6457               	cpfsgt	resetData@i^0,c
  7434   001BB0  D7EF               	goto	l792
  7435   001BB2  0012               	return	
  7436   001BB4                     __end_of_resetData:
  7437                           	callstack 0
  7438                           
  7439 ;; *************** function _motor_StartSendString *****************
  7440 ;; Defined at:
  7441 ;;		line 50 in file "TAD_TERMINAL.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  str             2    5[COMRAM] PTR const unsigned char 
  7444 ;;		 -> STR_16(33), STR_15(33), STR_14(3), STR_12(18), 
  7445 ;;		 -> STR_11(3), STR_10(33), STR_8(33), STR_7(3), 
  7446 ;;		 -> STR_6(95), STR_5(53), STR_4(18), STR_3(30), 
  7447 ;;		 -> printfUID@buffer(80), STR_2(30), STR_1(34), 
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      void 
  7452 ;; Registers used:
  7453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1
  7459 ;;      Params:         2       0       0
  7460 ;;      Locals:         0       0       0
  7461 ;;      Temps:          0       0       0
  7462 ;;      Totals:         2       0       0
  7463 ;;Total ram usage:        2 bytes
  7464 ;; Hardware stack levels used: 1
  7465 ;; Hardware stack levels required when called: 6
  7466 ;; This function calls:
  7467 ;;		_motor_SendString
  7468 ;; This function is called by:
  7469 ;;		_motor_RFID
  7470 ;;		_motorTeclado
  7471 ;;		_printfUID
  7472 ;;		_motorTerminal
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text26
  7477   001C0A                     __ptext26:
  7478                           	callstack 0
  7479   001C0A                     _motor_StartSendString:
  7480                           	callstack 21
  7481                           
  7482                           ;TAD_TERMINAL.c: 51:  if (motor_SendString() == 1) {
  7483                           
  7484                           ;incstack = 0
  7485   001C0A  ECA1  F00A         	call	_motor_SendString	;wreg free
  7486   001C0E  06E8               	decf	wreg,f,c
  7487   001C10  A4D8               	btfss	status,2,c
  7488   001C12  0012               	return	
  7489                           
  7490                           ;TAD_TERMINAL.c: 52:   str_ptr = str;
  7491   001C14  C05B  F00F         	movff	motor_StartSendString@str,_str_ptr
  7492   001C18  C05C  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  7493                           
  7494                           ;TAD_TERMINAL.c: 53:   state_str = 1;
  7495   001C1C  0E01               	movlw	1
  7496   001C1E  6E23               	movwf	_state_str^0,c
  7497   001C20  0012               	return		;funcret
  7498   001C22                     __end_of_motor_StartSendString:
  7499                           	callstack 0
  7500                           
  7501 ;; *************** function _motor_SendString *****************
  7502 ;; Defined at:
  7503 ;;		line 36 in file "TAD_TERMINAL.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      unsigned char 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1
  7517 ;;      Params:         0       0       0
  7518 ;;      Locals:         0       0       0
  7519 ;;      Temps:          0       0       0
  7520 ;;      Totals:         0       0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used: 1
  7523 ;; Hardware stack levels required when called: 5
  7524 ;; This function calls:
  7525 ;;		_motor_SendChar
  7526 ;; This function is called by:
  7527 ;;		_motor_StartSendString
  7528 ;;		_motorTerminal
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text27
  7533   001542                     __ptext27:
  7534                           	callstack 0
  7535   001542                     _motor_SendString:
  7536                           	callstack 21
  7537                           
  7538                           ;TAD_TERMINAL.c: 37:     switch(state_str) {
  7539                           
  7540                           ;incstack = 0
  7541   001542  D030               	goto	l3448
  7542   001544                     l3426:
  7543   001544  0E01               	movlw	1
  7544   001546  0012               	return	
  7545   001548                     l3430:
  7546                           
  7547                           ;TAD_TERMINAL.c: 40:    if (!*str_ptr) {
  7548   001548  C00F  FFF6         	movff	_str_ptr,tblptrl
  7549   00154C  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7550   001550  6AF8               	clrf	tblptru,c
  7551   001552  0E01               	movlw	(high __ramtop+-1)
  7552   001554  64F7               	cpfsgt	tblptrh,c
  7553   001556  D003               	bra	u2567
  7554   001558  0008               	tblrd		*
  7555   00155A  50F5               	movf	tablat,w,c
  7556   00155C  D005               	bra	u2560
  7557   00155E                     u2567:
  7558   00155E  CFF6 FFE1          	movff	tblptrl,fsr1l
  7559   001562  CFF7 FFE2          	movff	tblptrh,fsr1h
  7560   001566  50E7               	movf	indf1,w,c
  7561   001568                     u2560:
  7562   001568  0900               	iorlw	0
  7563   00156A  A4D8               	btfss	status,2,c
  7564   00156C  D002               	goto	l3438
  7565                           
  7566                           ;TAD_TERMINAL.c: 41:     state_str = 0;
  7567   00156E  6A23               	clrf	_state_str^0,c
  7568   001570  D7E9               	goto	l3426
  7569   001572                     l3438:
  7570                           
  7571                           ;TAD_TERMINAL.c: 44:    if (motor_SendChar(*str_ptr)) str_ptr++;
  7572   001572  C00F  FFF6         	movff	_str_ptr,tblptrl
  7573   001576  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7574   00157A  6AF8               	clrf	tblptru,c
  7575   00157C  0E01               	movlw	(high __ramtop+-1)
  7576   00157E  64F7               	cpfsgt	tblptrh,c
  7577   001580  D003               	bra	u2587
  7578   001582  0008               	tblrd		*
  7579   001584  50F5               	movf	tablat,w,c
  7580   001586  D005               	bra	u2580
  7581   001588                     u2587:
  7582   001588  CFF6 FFE1          	movff	tblptrl,fsr1l
  7583   00158C  CFF7 FFE2          	movff	tblptrh,fsr1h
  7584   001590  50E7               	movf	indf1,w,c
  7585   001592                     u2580:
  7586   001592  ECEC  F00D         	call	_motor_SendChar
  7587   001596  0900               	iorlw	0
  7588   001598  B4D8               	btfsc	status,2,c
  7589   00159A  D002               	goto	l3442
  7590   00159C  4A0F               	infsnz	_str_ptr^0,f,c
  7591   00159E  2A10               	incf	(_str_ptr+1)^0,f,c
  7592   0015A0                     l3442:
  7593                           
  7594                           ;TAD_TERMINAL.c: 45:    return 0;
  7595   0015A0  0E00               	movlw	0
  7596   0015A2  0012               	return	
  7597   0015A4                     l3448:
  7598   0015A4  5023               	movf	_state_str^0,w,c
  7599                           
  7600                           ; Switch size 1, requested type "simple"
  7601                           ; Number of cases is 2, Range of values is 0 to 1
  7602                           ; switch strategies available:
  7603                           ; Name         Instructions Cycles
  7604                           ; simple_byte            7     4 (average)
  7605                           ;	Chosen strategy is simple_byte
  7606   0015A6  0A00               	xorlw	0	; case 0
  7607   0015A8  B4D8               	btfsc	status,2,c
  7608   0015AA  D7CC               	goto	l3426
  7609   0015AC  0A01               	xorlw	1	; case 1
  7610   0015AE  B4D8               	btfsc	status,2,c
  7611   0015B0  D7CB               	goto	l3430
  7612   0015B2  D7F6               	goto	l3442
  7613   0015B4                     __end_of_motor_SendString:
  7614                           	callstack 0
  7615                           
  7616 ;; *************** function _motor_SendChar *****************
  7617 ;; Defined at:
  7618 ;;		line 29 in file "TAD_TERMINAL.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  c               1    wreg     unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  c               1    4[COMRAM] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      unsigned char 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1
  7632 ;;      Params:         0       0       0
  7633 ;;      Locals:         1       0       0
  7634 ;;      Temps:          0       0       0
  7635 ;;      Totals:         1       0       0
  7636 ;;Total ram usage:        1 bytes
  7637 ;; Hardware stack levels used: 1
  7638 ;; Hardware stack levels required when called: 4
  7639 ;; This function calls:
  7640 ;;		_Terminal_TXAvailable
  7641 ;; This function is called by:
  7642 ;;		_motor_SendString
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text28
  7647   001BD8                     __ptext28:
  7648                           	callstack 0
  7649   001BD8                     _motor_SendChar:
  7650                           	callstack 21
  7651                           
  7652                           ;incstack = 0
  7653                           ;motor_SendChar@c stored from wreg
  7654   001BD8  6E5A               	movwf	motor_SendChar@c^0,c
  7655                           
  7656                           ;TAD_TERMINAL.c: 30:  if (!Terminal_TXAvailable()) return 0;
  7657   001BDA  EC3F  F00E         	call	_Terminal_TXAvailable	;wreg free
  7658   001BDE  5057               	movf	?_Terminal_TXAvailable^0,w,c
  7659   001BE0  1058               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  7660   001BE2  A4D8               	btfss	status,2,c
  7661   001BE4  D002               	goto	l656
  7662   001BE6  0E00               	movlw	0
  7663   001BE8  0012               	return	
  7664   001BEA                     l656:
  7665                           
  7666                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  7667   001BEA  C05A  FFAD         	movff	motor_SendChar@c,4013	;volatile
  7668                           
  7669                           ;TAD_TERMINAL.c: 32:  return 1;
  7670   001BEE  0E01               	movlw	1
  7671   001BF0  0012               	return		;funcret
  7672   001BF2                     __end_of_motor_SendChar:
  7673                           	callstack 0
  7674                           
  7675 ;; *************** function _Terminal_TXAvailable *****************
  7676 ;; Defined at:
  7677 ;;		line 19 in file "TAD_TERMINAL.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  2    1[COMRAM] int 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1
  7691 ;;      Params:         2       0       0
  7692 ;;      Locals:         0       0       0
  7693 ;;      Temps:          1       0       0
  7694 ;;      Totals:         3       0       0
  7695 ;;Total ram usage:        3 bytes
  7696 ;; Hardware stack levels used: 1
  7697 ;; Hardware stack levels required when called: 3
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_Terminal_SendChar
  7702 ;;		_motor_SendChar
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text29
  7707   001C7E                     __ptext29:
  7708                           	callstack 0
  7709   001C7E                     _Terminal_TXAvailable:
  7710                           	callstack 21
  7711                           
  7712                           ;incstack = 0
  7713   001C7E  A89E               	btfss	158,4,c	;volatile
  7714   001C80  D003               	goto	u2380
  7715   001C82  6A59               	clrf	??_Terminal_TXAvailable^0,c
  7716   001C84  2A59               	incf	??_Terminal_TXAvailable^0,f,c
  7717   001C86  D001               	goto	u2388
  7718   001C88                     u2380:
  7719   001C88  6A59               	clrf	??_Terminal_TXAvailable^0,c
  7720   001C8A                     u2388:
  7721   001C8A  5059               	movf	??_Terminal_TXAvailable^0,w,c
  7722   001C8C  6E57               	movwf	?_Terminal_TXAvailable^0,c
  7723   001C8E  6A58               	clrf	(?_Terminal_TXAvailable+1)^0,c
  7724   001C90  0012               	return		;funcret
  7725   001C92                     __end_of_Terminal_TXAvailable:
  7726                           	callstack 0
  7727                           
  7728 ;; *************** function _hashtag_pressed3s *****************
  7729 ;; Defined at:
  7730 ;;		line 57 in file "TAD_TERMINAL.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;		None
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1
  7744 ;;      Params:         0       0       0
  7745 ;;      Locals:         0       0       0
  7746 ;;      Temps:          0       0       0
  7747 ;;      Totals:         0       0       0
  7748 ;;Total ram usage:        0 bytes
  7749 ;; Hardware stack levels used: 1
  7750 ;; Hardware stack levels required when called: 3
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_motorTeclado
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text30
  7759   001CEA                     __ptext30:
  7760                           	callstack 0
  7761   001CEA                     _hashtag_pressed3s:
  7762                           	callstack 26
  7763                           
  7764                           ;incstack = 0
  7765   001CEA  0E01               	movlw	1
  7766   001CEC  6E22               	movwf	_hashtag_pressed^0,c
  7767   001CEE  0012               	return		;funcret
  7768   001CF0                     __end_of_hashtag_pressed3s:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function _GetTecla *****************
  7772 ;; Defined at:
  7773 ;;		line 52 in file "TAD_TECLADO.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  fila            1    4[COMRAM] unsigned char 
  7778 ;;  columna         1    3[COMRAM] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      unsigned char 
  7781 ;; Registers used:
  7782 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1
  7788 ;;      Params:         0       0       0
  7789 ;;      Locals:         2       0       0
  7790 ;;      Temps:          2       0       0
  7791 ;;      Totals:         4       0       0
  7792 ;;Total ram usage:        4 bytes
  7793 ;; Hardware stack levels used: 1
  7794 ;; Hardware stack levels required when called: 3
  7795 ;; This function calls:
  7796 ;;		Nothing
  7797 ;; This function is called by:
  7798 ;;		_motorTeclado
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text31
  7803   001756                     __ptext31:
  7804                           	callstack 0
  7805   001756                     _GetTecla:
  7806                           	callstack 26
  7807                           
  7808                           ;incstack = 0
  7809   001756  6A59               	clrf	GetTecla@columna^0,c
  7810                           
  7811                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  7812   001758  D00B               	goto	l2358
  7813   00175A                     l571:
  7814   00175A  6A5A               	clrf	GetTecla@fila^0,c
  7815   00175C  D017               	goto	l572
  7816   00175E                     l2346:
  7817   00175E  0E01               	movlw	1
  7818   001760  D003               	goto	L16
  7819   001762                     l2348:
  7820   001762  0E02               	movlw	2
  7821   001764  D001               	goto	L16
  7822   001766                     l2350:
  7823   001766  0E03               	movlw	3
  7824   001768                     L16:
  7825   001768  6E5A               	movwf	GetTecla@fila^0,c
  7826   00176A  D010               	goto	l572
  7827   00176C                     l2352:
  7828   00176C  0EFF               	movlw	255
  7829   00176E  0012               	return	
  7830   001770                     l2358:
  7831   001770  5027               	movf	_Filas^0,w,c
  7832                           
  7833                           ; Switch size 1, requested type "simple"
  7834                           ; Number of cases is 4, Range of values is 1 to 8
  7835                           ; switch strategies available:
  7836                           ; Name         Instructions Cycles
  7837                           ; simple_byte           13     7 (average)
  7838                           ;	Chosen strategy is simple_byte
  7839   001772  0A01               	xorlw	1	; case 1
  7840   001774  B4D8               	btfsc	status,2,c
  7841   001776  D7F1               	goto	l571
  7842   001778  0A03               	xorlw	3	; case 2
  7843   00177A  B4D8               	btfsc	status,2,c
  7844   00177C  D7F0               	goto	l2346
  7845   00177E  0A06               	xorlw	6	; case 4
  7846   001780  B4D8               	btfsc	status,2,c
  7847   001782  D7EF               	goto	l2348
  7848   001784  0A0C               	xorlw	12	; case 8
  7849   001786  B4D8               	btfsc	status,2,c
  7850   001788  D7EE               	goto	l2350
  7851   00178A  D7F0               	goto	l2352
  7852   00178C                     l572:
  7853                           
  7854                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  7855   00178C  C026  F059         	movff	_Columnas,GetTecla@columna
  7856                           
  7857                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  7858   001790  505A               	movf	GetTecla@fila^0,w,c
  7859   001792  0D03               	mullw	3
  7860   001794  0E3C               	movlw	low _keymap
  7861   001796  24F3               	addwf	243,w,c
  7862   001798  6E57               	movwf	??_GetTecla^0,c
  7863   00179A  0E1E               	movlw	high _keymap
  7864   00179C  20F4               	addwfc	prodh,w,c
  7865   00179E  6E58               	movwf	(??_GetTecla+1)^0,c
  7866   0017A0  5059               	movf	GetTecla@columna^0,w,c
  7867   0017A2  2657               	addwf	??_GetTecla^0,f,c
  7868   0017A4  0E00               	movlw	0
  7869   0017A6  2258               	addwfc	(??_GetTecla+1)^0,f,c
  7870   0017A8  C057  FFF6         	movff	??_GetTecla,tblptrl
  7871   0017AC  C058  FFF7         	movff	??_GetTecla+1,tblptrh
  7872   0017B0                     	if	0	;tblptru may be non-zero
  7873   0017B0                     	endif
  7874   0017B0                     	if	0	;tblptru may be non-zero
  7875   0017B0                     	endif
  7876   0017B0  0008               	tblrd		*
  7877   0017B2  50F5               	movf	tablat,w,c
  7878   0017B4  0012               	return		;funcret
  7879   0017B6                     __end_of_GetTecla:
  7880                           	callstack 0
  7881                           
  7882 ;; *************** function _initTeclado *****************
  7883 ;; Defined at:
  7884 ;;		line 30 in file "TAD_TECLADO.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;		None
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1
  7898 ;;      Params:         0       0       0
  7899 ;;      Locals:         0       0       0
  7900 ;;      Temps:          0       0       0
  7901 ;;      Totals:         0       0       0
  7902 ;;Total ram usage:        0 bytes
  7903 ;; Hardware stack levels used: 1
  7904 ;; Hardware stack levels required when called: 4
  7905 ;; This function calls:
  7906 ;;		_TI_NewTimer
  7907 ;; This function is called by:
  7908 ;;		_main
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text32
  7913   001C22                     __ptext32:
  7914                           	callstack 0
  7915   001C22                     _initTeclado:
  7916                           	callstack 26
  7917                           
  7918                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  7919                           
  7920                           ;incstack = 0
  7921   001C22  0E0F               	movlw	15
  7922   001C24  6E95               	movwf	149,c	;volatile
  7923                           
  7924                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  7925   001C26  6A8C               	clrf	140,c	;volatile
  7926                           
  7927                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  7928   001C28  6A24               	clrf	_state^0,c
  7929   001C2A  6A25               	clrf	_tecla^0,c
  7930   001C2C  6A26               	clrf	_Columnas^0,c
  7931   001C2E  6A27               	clrf	_Filas^0,c
  7932                           
  7933                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer_teclado);
  7934   001C30  0E4B               	movlw	low _timer_teclado
  7935   001C32  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  7936   001C34  ECF6  F00C         	call	_TI_NewTimer	;wreg free
  7937   001C38  0012               	return		;funcret
  7938   001C3A                     __end_of_initTeclado:
  7939                           	callstack 0
  7940                           
  7941 ;; *************** function _initRFID *****************
  7942 ;; Defined at:
  7943 ;;		line 127 in file "TAD_RFID.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  regVal          1   12[COMRAM] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1
  7957 ;;      Params:         0       0       0
  7958 ;;      Locals:         1       0       0
  7959 ;;      Temps:          0       0       0
  7960 ;;      Totals:         1       0       0
  7961 ;;Total ram usage:        1 bytes
  7962 ;; Hardware stack levels used: 1
  7963 ;; Hardware stack levels required when called: 6
  7964 ;; This function calls:
  7965 ;;		_TI_NewTimer
  7966 ;;		_TI_ResetTics
  7967 ;;		_delay_us
  7968 ;;		_motor_Read
  7969 ;;		_motor_Write
  7970 ;; This function is called by:
  7971 ;;		_main
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text33
  7976   0011A8                     __ptext33:
  7977                           	callstack 0
  7978   0011A8                     _initRFID:
  7979                           	callstack 24
  7980                           
  7981                           ;TAD_RFID.c: 129:     TRISCbits.TRISC0 = 1;
  7982                           
  7983                           ;incstack = 0
  7984   0011A8  8094               	bsf	148,0,c	;volatile
  7985                           
  7986                           ;TAD_RFID.c: 130:     TRISCbits.TRISC1 = 0;
  7987   0011AA  9294               	bcf	148,1,c	;volatile
  7988                           
  7989                           ;TAD_RFID.c: 131:     TRISCbits.TRISC2 = 0;
  7990   0011AC  9494               	bcf	148,2,c	;volatile
  7991                           
  7992                           ;TAD_RFID.c: 132:     TRISCbits.TRISC3 = 0;
  7993   0011AE  9694               	bcf	148,3,c	;volatile
  7994                           
  7995                           ;TAD_RFID.c: 133:     TRISCbits.TRISC4 = 0;
  7996   0011B0  9894               	bcf	148,4,c	;volatile
  7997                           
  7998                           ;TAD_RFID.c: 135:     state_read = state_write = 0;
  7999   0011B2  6A52               	clrf	_state_write^0,c
  8000   0011B4  6A53               	clrf	_state_read^0,c
  8001                           
  8002                           ;TAD_RFID.c: 136:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8003   0011B6  848B               	bsf	139,2,c	;volatile
  8004   0011B8  868B               	bsf	139,3,c	;volatile
  8005                           
  8006                           ;TAD_RFID.c: 137:     LATCbits.LATC4 = 1;
  8007   0011BA  888B               	bsf	139,4,c	;volatile
  8008                           
  8009                           ;TAD_RFID.c: 138:     delay_us(1);
  8010   0011BC  0E01               	movlw	1
  8011   0011BE  EC1D  F00E         	call	_delay_us
  8012                           
  8013                           ;TAD_RFID.c: 139:     LATCbits.LATC4 = 0;
  8014   0011C2  988B               	bcf	139,4,c	;volatile
  8015                           
  8016                           ;TAD_RFID.c: 140:     delay_us(1);
  8017   0011C4  0E01               	movlw	1
  8018   0011C6  EC1D  F00E         	call	_delay_us
  8019                           
  8020                           ;TAD_RFID.c: 141:     LATCbits.LATC4 = 1;
  8021   0011CA  888B               	bsf	139,4,c	;volatile
  8022                           
  8023                           ;TAD_RFID.c: 142:     delay_us(1);
  8024   0011CC  0E01               	movlw	1
  8025   0011CE  EC1D  F00E         	call	_delay_us
  8026   0011D2                     l4184:
  8027   0011D2  0E0F               	movlw	15
  8028   0011D4  6E5E               	movwf	motor_Write@value^0,c
  8029   0011D6  0E01               	movlw	1
  8030   0011D8  EC11  F00B         	call	_motor_Write
  8031   0011DC  0900               	iorlw	0
  8032   0011DE  B4D8               	btfsc	status,2,c
  8033   0011E0  D7F8               	goto	l4184
  8034                           
  8035                           ;TAD_RFID.c: 146:     delay_us(1);
  8036   0011E2  0E01               	movlw	1
  8037   0011E4  EC1D  F00E         	call	_delay_us
  8038   0011E8                     l4188:
  8039   0011E8  0E8D               	movlw	141
  8040   0011EA  6E5E               	movwf	motor_Write@value^0,c
  8041   0011EC  0E2A               	movlw	42
  8042   0011EE  EC11  F00B         	call	_motor_Write
  8043   0011F2  0900               	iorlw	0
  8044   0011F4  B4D8               	btfsc	status,2,c
  8045   0011F6  D7F8               	goto	l4188
  8046   0011F8                     u3520:
  8047   0011F8  0E3E               	movlw	62
  8048   0011FA  6E5E               	movwf	motor_Write@value^0,c
  8049   0011FC  0E2B               	movlw	43
  8050   0011FE  EC11  F00B         	call	_motor_Write
  8051   001202  0900               	iorlw	0
  8052   001204  B4D8               	btfsc	status,2,c
  8053   001206  D7F8               	goto	u3520
  8054   001208                     u3530:
  8055   001208  0E1E               	movlw	30
  8056   00120A  6E5E               	movwf	motor_Write@value^0,c
  8057   00120C  0E2D               	movlw	45
  8058   00120E  EC11  F00B         	call	_motor_Write
  8059   001212  0900               	iorlw	0
  8060   001214  B4D8               	btfsc	status,2,c
  8061   001216  D7F8               	goto	u3530
  8062   001218                     u3540:
  8063   001218  0E00               	movlw	0
  8064   00121A  6E5E               	movwf	motor_Write@value^0,c
  8065   00121C  0E2C               	movlw	44
  8066   00121E  EC11  F00B         	call	_motor_Write
  8067   001222  0900               	iorlw	0
  8068   001224  B4D8               	btfsc	status,2,c
  8069   001226  D7F8               	goto	u3540
  8070   001228                     u3550:
  8071   001228  0E40               	movlw	64
  8072   00122A  6E5E               	movwf	motor_Write@value^0,c
  8073   00122C  0E15               	movlw	21
  8074   00122E  EC11  F00B         	call	_motor_Write
  8075   001232  0900               	iorlw	0
  8076   001234  B4D8               	btfsc	status,2,c
  8077   001236  D7F8               	goto	u3550
  8078   001238                     u3560:
  8079   001238  0E3D               	movlw	61
  8080   00123A  6E5E               	movwf	motor_Write@value^0,c
  8081   00123C  0E11               	movlw	17
  8082   00123E  EC11  F00B         	call	_motor_Write
  8083   001242  0900               	iorlw	0
  8084   001244  B4D8               	btfsc	status,2,c
  8085   001246  D7F8               	goto	u3560
  8086   001248                     u3570:
  8087                           
  8088                           ;TAD_RFID.c: 159:         regVal = motor_Read(0x14);
  8089   001248  0E14               	movlw	20
  8090   00124A  EC3E  F009         	call	_motor_Read
  8091   00124E  6E62               	movwf	initRFID@regVal^0,c
  8092                           
  8093                           ;TAD_RFID.c: 160:     } while (regVal == 0xFE);
  8094   001250  0EFE               	movlw	254
  8095   001252  1862               	xorwf	initRFID@regVal^0,w,c
  8096   001254  B4D8               	btfsc	status,2,c
  8097   001256  D7F8               	goto	u3570
  8098                           
  8099                           ;TAD_RFID.c: 161:     regVal |= 0x03;
  8100   001258  0E03               	movlw	3
  8101   00125A  1262               	iorwf	initRFID@regVal^0,f,c
  8102   00125C                     l4206:
  8103   00125C  C062  F05E         	movff	initRFID@regVal,motor_Write@value
  8104   001260  0E14               	movlw	20
  8105   001262  EC11  F00B         	call	_motor_Write
  8106   001266  0900               	iorlw	0
  8107   001268  B4D8               	btfsc	status,2,c
  8108   00126A  D7F8               	goto	l4206
  8109                           
  8110                           ;TAD_RFID.c: 165:     TI_NewTimer(&card_timer);
  8111   00126C  0E51               	movlw	low _card_timer
  8112   00126E  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8113   001270  ECF6  F00C         	call	_TI_NewTimer	;wreg free
  8114                           
  8115                           ;TAD_RFID.c: 166:     TI_ResetTics(card_timer);
  8116   001274  5051               	movf	_card_timer^0,w,c
  8117   001276  ECDA  F00D         	call	_TI_ResetTics
  8118   00127A  0012               	return		;funcret
  8119   00127C                     __end_of_initRFID:
  8120                           	callstack 0
  8121                           
  8122 ;; *************** function _motor_Write *****************
  8123 ;; Defined at:
  8124 ;;		line 47 in file "TAD_RFID.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  addr            1    wreg     unsigned char 
  8127 ;;  value           1    8[COMRAM] unsigned char 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  addr            1    9[COMRAM] unsigned char 
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      unsigned char 
  8132 ;; Registers used:
  8133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1
  8139 ;;      Params:         1       0       0
  8140 ;;      Locals:         1       0       0
  8141 ;;      Temps:          0       0       0
  8142 ;;      Totals:         2       0       0
  8143 ;;Total ram usage:        2 bytes
  8144 ;; Hardware stack levels used: 1
  8145 ;; Hardware stack levels required when called: 5
  8146 ;; This function calls:
  8147 ;;		_processBit
  8148 ;; This function is called by:
  8149 ;;		_initRFID
  8150 ;;		_motor_RFID
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text34
  8155   001622                     __ptext34:
  8156                           	callstack 0
  8157   001622                     _motor_Write:
  8158                           	callstack 24
  8159                           
  8160                           ;incstack = 0
  8161                           ;motor_Write@addr stored from wreg
  8162   001622  6E5F               	movwf	motor_Write@addr^0,c
  8163                           
  8164                           ;TAD_RFID.c: 48:     static char bit_count = 0;;TAD_RFID.c: 49:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 50:     static unsigned char ucValue;;TAD_RFID.c: 52:     switch (s
      +                          tate_write) {
  8165   001624  D028               	goto	l3866
  8166   001626                     l279:
  8167                           
  8168                           ;TAD_RFID.c: 54:             LATCbits.LATC2 = 0;
  8169   001626  948B               	bcf	139,2,c	;volatile
  8170                           
  8171                           ;TAD_RFID.c: 55:             LATCbits.LATC3 = 0;
  8172   001628  968B               	bcf	139,3,c	;volatile
  8173                           
  8174                           ;TAD_RFID.c: 56:             ucAddr = ((addr << 1) & 0x7E);
  8175   00162A  505F               	movf	motor_Write@addr^0,w,c
  8176   00162C  245F               	addwf	motor_Write@addr^0,w,c
  8177   00162E  0B7E               	andlw	126
  8178   001630  6E4F               	movwf	motor_Write@ucAddr^0,c
  8179                           
  8180                           ;TAD_RFID.c: 57:             ucValue = value;
  8181   001632  C05E  F04E         	movff	motor_Write@value,motor_Write@ucValue
  8182                           
  8183                           ;TAD_RFID.c: 58:             bit_count = 0;
  8184   001636  6A50               	clrf	motor_Write@bit_count^0,c
  8185                           
  8186                           ;TAD_RFID.c: 59:             state_write = 1;
  8187   001638  0E01               	movlw	1
  8188   00163A  6E52               	movwf	_state_write^0,c
  8189                           
  8190                           ;TAD_RFID.c: 60:             break;
  8191   00163C  D026               	goto	l3868
  8192   00163E                     l3852:
  8193                           
  8194                           ;TAD_RFID.c: 63:             processBit(&ucAddr, &bit_count, &state_write, 2);
  8195   00163E  0E4F               	movlw	low motor_Write@ucAddr
  8196   001640  6E59               	movwf	processBit@val^0,c
  8197   001642  0E50               	movlw	low motor_Write@bit_count
  8198   001644  6E5A               	movwf	processBit@bit_count^0,c
  8199   001646  0E52               	movlw	low _state_write
  8200   001648  6E5B               	movwf	processBit@state^0,c
  8201   00164A  0E02               	movlw	2
  8202   00164C  6E5C               	movwf	processBit@next_state^0,c
  8203   00164E  EC0B  F00C         	call	_processBit	;wreg free
  8204                           
  8205                           ;TAD_RFID.c: 64:             break;
  8206   001652  D01B               	goto	l3868
  8207   001654                     l3854:
  8208                           
  8209                           ;TAD_RFID.c: 67:             processBit(&ucValue, &bit_count, &state_write, 0);
  8210   001654  0E4E               	movlw	low motor_Write@ucValue
  8211   001656  6E59               	movwf	processBit@val^0,c
  8212   001658  0E50               	movlw	low motor_Write@bit_count
  8213   00165A  6E5A               	movwf	processBit@bit_count^0,c
  8214   00165C  0E52               	movlw	low _state_write
  8215   00165E  6E5B               	movwf	processBit@state^0,c
  8216   001660  0E00               	movlw	0
  8217   001662  6E5C               	movwf	processBit@next_state^0,c
  8218   001664  EC0B  F00C         	call	_processBit	;wreg free
  8219                           
  8220                           ;TAD_RFID.c: 68:             if (state_write == 0) {
  8221   001668  5052               	movf	_state_write^0,w,c
  8222   00166A  A4D8               	btfss	status,2,c
  8223   00166C  D00E               	goto	l3868
  8224                           
  8225                           ;TAD_RFID.c: 69:                 LATCbits.LATC3 = 1;
  8226   00166E  868B               	bsf	139,3,c	;volatile
  8227                           
  8228                           ;TAD_RFID.c: 70:                 LATCbits.LATC2 = 1;
  8229   001670  848B               	bsf	139,2,c	;volatile
  8230                           
  8231                           ;TAD_RFID.c: 71:                 return 1;
  8232   001672  0E01               	movlw	1
  8233   001674  0012               	return	
  8234   001676                     l3866:
  8235   001676  5052               	movf	_state_write^0,w,c
  8236                           
  8237                           ; Switch size 1, requested type "simple"
  8238                           ; Number of cases is 3, Range of values is 0 to 2
  8239                           ; switch strategies available:
  8240                           ; Name         Instructions Cycles
  8241                           ; simple_byte           10     6 (average)
  8242                           ;	Chosen strategy is simple_byte
  8243   001678  0A00               	xorlw	0	; case 0
  8244   00167A  B4D8               	btfsc	status,2,c
  8245   00167C  D7D4               	goto	l279
  8246   00167E  0A01               	xorlw	1	; case 1
  8247   001680  B4D8               	btfsc	status,2,c
  8248   001682  D7DD               	goto	l3852
  8249   001684  0A03               	xorlw	3	; case 2
  8250   001686  B4D8               	btfsc	status,2,c
  8251   001688  D7E5               	goto	l3854
  8252   00168A                     l3868:
  8253                           
  8254                           ;TAD_RFID.c: 75:     return 0;
  8255   00168A  0E00               	movlw	0
  8256   00168C  0012               	return		;funcret
  8257   00168E                     __end_of_motor_Write:
  8258                           	callstack 0
  8259                           
  8260 ;; *************** function _motor_Read *****************
  8261 ;; Defined at:
  8262 ;;		line 79 in file "TAD_RFID.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  addr            1    wreg     unsigned char 
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;  addr            1    9[COMRAM] unsigned char 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      unsigned char 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1
  8276 ;;      Params:         0       0       0
  8277 ;;      Locals:         3       0       0
  8278 ;;      Temps:          1       0       0
  8279 ;;      Totals:         4       0       0
  8280 ;;Total ram usage:        4 bytes
  8281 ;; Hardware stack levels used: 1
  8282 ;; Hardware stack levels required when called: 5
  8283 ;; This function calls:
  8284 ;;		_delay_us
  8285 ;;		_processBit
  8286 ;; This function is called by:
  8287 ;;		_initRFID
  8288 ;;		_motor_RFID
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text35
  8293   00127C                     __ptext35:
  8294                           	callstack 0
  8295   00127C                     _motor_Read:
  8296                           	callstack 24
  8297                           
  8298                           ;incstack = 0
  8299                           ;motor_Read@addr stored from wreg
  8300   00127C  6E5F               	movwf	motor_Read@addr^0,c
  8301                           
  8302                           ;TAD_RFID.c: 80:     static char bit_count = 0;;TAD_RFID.c: 81:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 82:     static unsigned char ucResult;;TAD_RFID.c: 83:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 84:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 86:     if (++timeout_counter > MAX_TIMEOUT) {
  8303   00127E  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  8304   001280  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  8305   001282  0EE9               	movlw	233
  8306   001284  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  8307   001286  0E03               	movlw	3
  8308   001288  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  8309   00128A  A0D8               	btfss	status,0,c
  8310   00128C  D053               	goto	l3934
  8311                           
  8312                           ;TAD_RFID.c: 87:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8313   00128E  848B               	bsf	139,2,c	;volatile
  8314   001290  868B               	bsf	139,3,c	;volatile
  8315                           
  8316                           ;TAD_RFID.c: 88:         state_read = 0;
  8317   001292  6A53               	clrf	_state_read^0,c
  8318                           
  8319                           ;TAD_RFID.c: 89:         timeout_counter = 0;
  8320   001294  0E00               	movlw	0
  8321   001296  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8322   001298  0E00               	movlw	0
  8323   00129A  6E13               	movwf	motor_Read@timeout_counter^0,c
  8324                           
  8325                           ;TAD_RFID.c: 90:         return 0xFF;
  8326   00129C  0EFF               	movlw	255
  8327   00129E  0012               	return	
  8328   0012A0                     l3882:
  8329                           
  8330                           ;TAD_RFID.c: 95:             timeout_counter = 0;
  8331   0012A0  0E00               	movlw	0
  8332   0012A2  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8333   0012A4  0E00               	movlw	0
  8334   0012A6  6E13               	movwf	motor_Read@timeout_counter^0,c
  8335                           
  8336                           ;TAD_RFID.c: 96:             LATCbits.LATC2 = 0;
  8337   0012A8  948B               	bcf	139,2,c	;volatile
  8338                           
  8339                           ;TAD_RFID.c: 97:             LATCbits.LATC3 = 0;
  8340   0012AA  968B               	bcf	139,3,c	;volatile
  8341                           
  8342                           ;TAD_RFID.c: 98:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  8343   0012AC  505F               	movf	motor_Read@addr^0,w,c
  8344   0012AE  245F               	addwf	motor_Read@addr^0,w,c
  8345   0012B0  0B7E               	andlw	126
  8346   0012B2  0980               	iorlw	128
  8347   0012B4  6E4C               	movwf	motor_Read@ucAddr^0,c
  8348                           
  8349                           ;TAD_RFID.c: 99:             ucResult = 0;
  8350   0012B6  6A3B               	clrf	motor_Read@ucResult^0,c
  8351                           
  8352                           ;TAD_RFID.c: 100:             bit_count = 0;
  8353   0012B8  6A4D               	clrf	motor_Read@bit_count^0,c
  8354                           
  8355                           ;TAD_RFID.c: 101:             state_read = 1;
  8356   0012BA  0E01               	movlw	1
  8357   0012BC  6E53               	movwf	_state_read^0,c
  8358   0012BE                     l3896:
  8359                           
  8360                           ;TAD_RFID.c: 102:             return 0xFE;
  8361   0012BE  0EFE               	movlw	254
  8362   0012C0  0012               	return	
  8363   0012C2                     l3900:
  8364                           
  8365                           ;TAD_RFID.c: 105:             processBit(&ucAddr, &bit_count, &state_read, 2);
  8366   0012C2  0E4C               	movlw	low motor_Read@ucAddr
  8367   0012C4  6E59               	movwf	processBit@val^0,c
  8368   0012C6  0E4D               	movlw	low motor_Read@bit_count
  8369   0012C8  6E5A               	movwf	processBit@bit_count^0,c
  8370   0012CA  0E53               	movlw	low _state_read
  8371   0012CC  6E5B               	movwf	processBit@state^0,c
  8372   0012CE  0E02               	movlw	2
  8373   0012D0  6E5C               	movwf	processBit@next_state^0,c
  8374   0012D2  EC0B  F00C         	call	_processBit	;wreg free
  8375   0012D6  D7F3               	goto	l3896
  8376   0012D8                     l302:
  8377                           
  8378                           ;TAD_RFID.c: 109:             LATCbits.LATC2 = 1;
  8379   0012D8  848B               	bsf	139,2,c	;volatile
  8380                           
  8381                           ;TAD_RFID.c: 110:             delay_us(5);
  8382   0012DA  0E05               	movlw	5
  8383   0012DC  EC1D  F00E         	call	_delay_us
  8384                           
  8385                           ;TAD_RFID.c: 111:             ucResult = (unsigned char)((ucResult << 1) | PORTCbits.RC0
      +                          );
  8386   0012E0  A082               	btfss	130,0,c	;volatile
  8387   0012E2  D003               	goto	u3110
  8388   0012E4  6A5E               	clrf	??_motor_Read^0,c
  8389   0012E6  2A5E               	incf	??_motor_Read^0,f,c
  8390   0012E8  D001               	goto	u3118
  8391   0012EA                     u3110:
  8392   0012EA  6A5E               	clrf	??_motor_Read^0,c
  8393   0012EC                     u3118:
  8394   0012EC  503B               	movf	motor_Read@ucResult^0,w,c
  8395   0012EE  243B               	addwf	motor_Read@ucResult^0,w,c
  8396   0012F0  105E               	iorwf	??_motor_Read^0,w,c
  8397   0012F2  6E3B               	movwf	motor_Read@ucResult^0,c
  8398                           
  8399                           ;TAD_RFID.c: 112:             LATCbits.LATC2 = 0;
  8400   0012F4  948B               	bcf	139,2,c	;volatile
  8401                           
  8402                           ;TAD_RFID.c: 113:             delay_us(5);
  8403   0012F6  0E05               	movlw	5
  8404   0012F8  EC1D  F00E         	call	_delay_us
  8405                           
  8406                           ;TAD_RFID.c: 115:             if (++bit_count >= 8) {
  8407   0012FC  2A4D               	incf	motor_Read@bit_count^0,f,c
  8408   0012FE  0E07               	movlw	7
  8409   001300  644D               	cpfsgt	motor_Read@bit_count^0,c
  8410   001302  D7DD               	goto	l3896
  8411                           
  8412                           ;TAD_RFID.c: 116:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8413   001304  848B               	bsf	139,2,c	;volatile
  8414   001306  868B               	bsf	139,3,c	;volatile
  8415                           
  8416                           ;TAD_RFID.c: 117:                 state_read = 0;
  8417   001308  6A53               	clrf	_state_read^0,c
  8418                           
  8419                           ;TAD_RFID.c: 118:                 timeout_counter = 0;
  8420   00130A  0E00               	movlw	0
  8421   00130C  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8422   00130E  0E00               	movlw	0
  8423   001310  6E13               	movwf	motor_Read@timeout_counter^0,c
  8424                           
  8425                           ;TAD_RFID.c: 119:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  8426   001312  0EFE               	movlw	254
  8427   001314  183B               	xorwf	motor_Read@ucResult^0,w,c
  8428   001316  B4D8               	btfsc	status,2,c
  8429   001318  D007               	goto	l3924
  8430   00131A  283B               	incf	motor_Read@ucResult^0,w,c
  8431   00131C  B4D8               	btfsc	status,2,c
  8432   00131E  D004               	goto	l3924
  8433   001320  C03B  F060         	movff	motor_Read@ucResult,_motor_Read$799
  8434   001324  6A61               	clrf	(_motor_Read$799+1)^0,c
  8435   001326  D004               	goto	l307
  8436   001328                     l3924:
  8437   001328  0E00               	movlw	0
  8438   00132A  6E61               	movwf	(_motor_Read$799+1)^0,c
  8439   00132C  0EFD               	movlw	253
  8440   00132E  6E60               	movwf	_motor_Read$799^0,c
  8441   001330                     l307:
  8442   001330  5060               	movf	_motor_Read$799^0,w,c
  8443   001332  0012               	return	
  8444   001334                     l3934:
  8445   001334  5053               	movf	_state_read^0,w,c
  8446                           
  8447                           ; Switch size 1, requested type "simple"
  8448                           ; Number of cases is 3, Range of values is 0 to 2
  8449                           ; switch strategies available:
  8450                           ; Name         Instructions Cycles
  8451                           ; simple_byte           10     6 (average)
  8452                           ;	Chosen strategy is simple_byte
  8453   001336  0A00               	xorlw	0	; case 0
  8454   001338  B4D8               	btfsc	status,2,c
  8455   00133A  D7B2               	goto	l3882
  8456   00133C  0A01               	xorlw	1	; case 1
  8457   00133E  B4D8               	btfsc	status,2,c
  8458   001340  D7C0               	goto	l3900
  8459   001342  0A03               	xorlw	3	; case 2
  8460   001344  B4D8               	btfsc	status,2,c
  8461   001346  D7C8               	goto	l302
  8462   001348  D7BA               	goto	l3896
  8463   00134A                     __end_of_motor_Read:
  8464                           	callstack 0
  8465                           
  8466 ;; *************** function _processBit *****************
  8467 ;; Defined at:
  8468 ;;		line 33 in file "TAD_RFID.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  val             1    3[COMRAM] PTR unsigned char 
  8471 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  8472 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  8473 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  8474 ;;  state           1    5[COMRAM] PTR unsigned char 
  8475 ;;		 -> state_read(1), state_write(1), 
  8476 ;;  next_state      1    6[COMRAM] unsigned char 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1
  8488 ;;      Params:         4       0       0
  8489 ;;      Locals:         0       0       0
  8490 ;;      Temps:          1       0       0
  8491 ;;      Totals:         5       0       0
  8492 ;;Total ram usage:        5 bytes
  8493 ;; Hardware stack levels used: 1
  8494 ;; Hardware stack levels required when called: 4
  8495 ;; This function calls:
  8496 ;;		_delay_us
  8497 ;; This function is called by:
  8498 ;;		_motor_Write
  8499 ;;		_motor_Read
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text36
  8504   001816                     __ptext36:
  8505                           	callstack 0
  8506   001816                     _processBit:
  8507                           	callstack 24
  8508                           
  8509                           ;TAD_RFID.c: 34:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  8510                           
  8511                           ;incstack = 0
  8512   001816  5059               	movf	processBit@val^0,w,c
  8513   001818  6ED9               	movwf	fsr2l,c
  8514   00181A  6ADA               	clrf	fsr2h,c
  8515   00181C  AEDF               	btfss	indf2,7,c
  8516   00181E  D003               	goto	u2720
  8517   001820  6A5D               	clrf	??_processBit^0,c
  8518   001822  2A5D               	incf	??_processBit^0,f,c
  8519   001824  D001               	goto	u2738
  8520   001826                     u2720:
  8521   001826  6A5D               	clrf	??_processBit^0,c
  8522   001828                     u2738:
  8523   001828  465D               	rlncf	??_processBit^0,f,c
  8524   00182A  508B               	movf	139,w,c	;volatile
  8525   00182C  185D               	xorwf	??_processBit^0,w,c
  8526   00182E  0BFD               	andlw	-3
  8527   001830  185D               	xorwf	??_processBit^0,w,c
  8528   001832  6E8B               	movwf	139,c	;volatile
  8529                           
  8530                           ;TAD_RFID.c: 35:     LATCbits.LATC2 = 1;
  8531   001834  848B               	bsf	139,2,c	;volatile
  8532                           
  8533                           ;TAD_RFID.c: 36:     *val <<= 1;
  8534   001836  5059               	movf	processBit@val^0,w,c
  8535   001838  6ED9               	movwf	fsr2l,c
  8536   00183A  6ADA               	clrf	fsr2h,c
  8537   00183C  90D8               	bcf	status,0,c
  8538   00183E  36DF               	rlcf	indf2,f,c
  8539                           
  8540                           ;TAD_RFID.c: 37:     delay_us(5);
  8541   001840  0E05               	movlw	5
  8542   001842  EC1D  F00E         	call	_delay_us
  8543                           
  8544                           ;TAD_RFID.c: 38:     LATCbits.LATC2 = 0;
  8545   001846  948B               	bcf	139,2,c	;volatile
  8546                           
  8547                           ;TAD_RFID.c: 39:     delay_us(5);
  8548   001848  0E05               	movlw	5
  8549   00184A  EC1D  F00E         	call	_delay_us
  8550                           
  8551                           ;TAD_RFID.c: 40:     if (++(*bit_count) == 8) {
  8552   00184E  505A               	movf	processBit@bit_count^0,w,c
  8553   001850  6ED9               	movwf	fsr2l,c
  8554   001852  6ADA               	clrf	fsr2h,c
  8555   001854  2ADF               	incf	indf2,f,c
  8556   001856  0E08               	movlw	8
  8557   001858  18DE               	xorwf	postinc2,w,c
  8558   00185A  A4D8               	btfss	status,2,c
  8559   00185C  0012               	return	
  8560                           
  8561                           ;TAD_RFID.c: 41:         *bit_count = 0;
  8562   00185E  505A               	movf	processBit@bit_count^0,w,c
  8563   001860  6ED9               	movwf	fsr2l,c
  8564   001862  6ADA               	clrf	fsr2h,c
  8565   001864  6ADF               	clrf	indf2,c
  8566                           
  8567                           ;TAD_RFID.c: 42:         *state = next_state;
  8568   001866  505B               	movf	processBit@state^0,w,c
  8569   001868  6ED9               	movwf	fsr2l,c
  8570   00186A  6ADA               	clrf	fsr2h,c
  8571   00186C  C05C  FFDF         	movff	processBit@next_state,indf2
  8572   001870  0012               	return		;funcret
  8573   001872                     __end_of_processBit:
  8574                           	callstack 0
  8575                           
  8576 ;; *************** function _delay_us *****************
  8577 ;; Defined at:
  8578 ;;		line 27 in file "TAD_RFID.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  howMany         1    wreg     unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  howMany         1    1[COMRAM] unsigned char 
  8583 ;;  x               1    2[COMRAM] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      void 
  8586 ;; Registers used:
  8587 ;;		wreg, status,2, status,0, prodl, prodh
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMRAM   BANK0   BANK1
  8593 ;;      Params:         0       0       0
  8594 ;;      Locals:         2       0       0
  8595 ;;      Temps:          0       0       0
  8596 ;;      Totals:         2       0       0
  8597 ;;Total ram usage:        2 bytes
  8598 ;; Hardware stack levels used: 1
  8599 ;; Hardware stack levels required when called: 3
  8600 ;; This function calls:
  8601 ;;		Nothing
  8602 ;; This function is called by:
  8603 ;;		_processBit
  8604 ;;		_motor_Read
  8605 ;;		_initRFID
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text37
  8610   001C3A                     __ptext37:
  8611                           	callstack 0
  8612   001C3A                     _delay_us:
  8613                           	callstack 24
  8614                           
  8615                           ;incstack = 0
  8616                           ;delay_us@howMany stored from wreg
  8617   001C3A  6E57               	movwf	delay_us@howMany^0,c
  8618                           
  8619                           ;TAD_RFID.c: 28:     char x = howMany * 8;
  8620   001C3C  5057               	movf	delay_us@howMany^0,w,c
  8621   001C3E  0D08               	mullw	8
  8622   001C40  CFF3 F058          	movff	prodl,delay_us@x
  8623                           
  8624                           ;TAD_RFID.c: 29:     while(x--) __nop();
  8625   001C44  D001               	goto	l3530
  8626   001C46                     l263:
  8627   001C46  0000               	nop	
  8628   001C48                     l3530:
  8629   001C48  0658               	decf	delay_us@x^0,f,c
  8630   001C4A  2858               	incf	delay_us@x^0,w,c
  8631   001C4C  B4D8               	btfsc	status,2,c
  8632   001C4E  0012               	return	
  8633   001C50  D7FA               	goto	l263
  8634   001C52                     __end_of_delay_us:
  8635                           	callstack 0
  8636                           
  8637 ;; *************** function _initPorts *****************
  8638 ;; Defined at:
  8639 ;;		line 63 in file "main.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;		None
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;		None
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1
  8653 ;;      Params:         0       0       0
  8654 ;;      Locals:         0       0       0
  8655 ;;      Temps:          0       0       0
  8656 ;;      Totals:         0       0       0
  8657 ;;Total ram usage:        0 bytes
  8658 ;; Hardware stack levels used: 1
  8659 ;; Hardware stack levels required when called: 3
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_main
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text38
  8668   001CCE                     __ptext38:
  8669                           	callstack 0
  8670   001CCE                     _initPorts:
  8671                           	callstack 27
  8672                           
  8673                           ;incstack = 0
  8674   001CCE  0E0F               	movlw	15
  8675   001CD0  6EC1               	movwf	193,c	;volatile
  8676   001CD2  9496               	bcf	150,2,c	;volatile
  8677   001CD4  0012               	return		;funcret
  8678   001CD6                     __end_of_initPorts:
  8679                           	callstack 0
  8680                           
  8681 ;; *************** function _initLeds *****************
  8682 ;; Defined at:
  8683 ;;		line 9 in file "TAD_LEDS.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;		None
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;		None
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1
  8697 ;;      Params:         0       0       0
  8698 ;;      Locals:         0       0       0
  8699 ;;      Temps:          0       0       0
  8700 ;;      Totals:         0       0       0
  8701 ;;Total ram usage:        0 bytes
  8702 ;; Hardware stack levels used: 1
  8703 ;; Hardware stack levels required when called: 4
  8704 ;; This function calls:
  8705 ;;		_TI_NewTimer
  8706 ;; This function is called by:
  8707 ;;		_main
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           	psect	text39
  8712   001CA2                     __ptext39:
  8713                           	callstack 0
  8714   001CA2                     _initLeds:
  8715                           	callstack 26
  8716                           
  8717                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  8718                           
  8719                           ;incstack = 0
  8720   001CA2  6A92               	clrf	146,c	;volatile
  8721                           
  8722                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  8723   001CA4  6A96               	clrf	150,c	;volatile
  8724                           
  8725                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  8726   001CA6  0E54               	movlw	low _timer
  8727   001CA8  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8728   001CAA  ECF6  F00C         	call	_TI_NewTimer	;wreg free
  8729   001CAE  0012               	return		;funcret
  8730   001CB0                     __end_of_initLeds:
  8731                           	callstack 0
  8732                           
  8733 ;; *************** function _initData *****************
  8734 ;; Defined at:
  8735 ;;		line 25 in file "TAD_DATOS.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;		None
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  j               1    5[COMRAM] unsigned char 
  8740 ;;  i               1    6[COMRAM] unsigned char 
  8741 ;;  i               1    7[COMRAM] unsigned char 
  8742 ;;  i               1    4[COMRAM] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      void 
  8745 ;; Registers used:
  8746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1
  8752 ;;      Params:         0       0       0
  8753 ;;      Locals:         4       0       0
  8754 ;;      Temps:          0       0       0
  8755 ;;      Totals:         4       0       0
  8756 ;;Total ram usage:        4 bytes
  8757 ;; Hardware stack levels used: 1
  8758 ;; Hardware stack levels required when called: 4
  8759 ;; This function calls:
  8760 ;;		_TI_NewTimer
  8761 ;; This function is called by:
  8762 ;;		_main
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           	psect	text40
  8767   0017B6                     __ptext40:
  8768                           	callstack 0
  8769   0017B6                     _initData:
  8770                           	callstack 26
  8771                           
  8772                           ;TAD_DATOS.c: 26:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  8773                           
  8774                           ;incstack = 0
  8775   0017B6  6A5A               	clrf	initData@i^0,c
  8776   0017B8                     l4268:
  8777   0017B8  505A               	movf	initData@i^0,w,c
  8778   0017BA  0F40               	addlw	low _currentUser
  8779   0017BC  6ED9               	movwf	fsr2l,c
  8780   0017BE  6ADA               	clrf	fsr2h,c
  8781   0017C0  6ADF               	clrf	indf2,c
  8782   0017C2  2A5A               	incf	initData@i^0,f,c
  8783   0017C4  0E04               	movlw	4
  8784   0017C6  645A               	cpfsgt	initData@i^0,c
  8785   0017C8  D7F7               	goto	l4268
  8786                           
  8787                           ;TAD_DATOS.c: 27:     for(char i = 0; i < 4; i++) {
  8788   0017CA  6A5D               	clrf	initData@i_1004^0,c
  8789   0017CC                     l783:
  8790                           
  8791                           ;TAD_DATOS.c: 28:         for(char j = 0; j < 6; j++) {
  8792   0017CC  6A5B               	clrf	initData@j^0,c
  8793   0017CE                     l4282:
  8794                           
  8795                           ;TAD_DATOS.c: 29:             configurations[i][j] = i;
  8796   0017CE  505D               	movf	initData@i_1004^0,w,c
  8797   0017D0  0D06               	mullw	6
  8798   0017D2  50F3               	movf	243,w,c
  8799   0017D4  0F80               	addlw	low _configurations
  8800   0017D6  245B               	addwf	initData@j^0,w,c
  8801   0017D8  6ED9               	movwf	fsr2l,c
  8802   0017DA  6ADA               	clrf	fsr2h,c
  8803   0017DC  C05D  FFDF         	movff	initData@i_1004,indf2
  8804                           
  8805                           ;TAD_DATOS.c: 30:         }
  8806   0017E0  2A5B               	incf	initData@j^0,f,c
  8807   0017E2  0E05               	movlw	5
  8808   0017E4  645B               	cpfsgt	initData@j^0,c
  8809   0017E6  D7F3               	goto	l4282
  8810                           
  8811                           ;TAD_DATOS.c: 31:     }
  8812   0017E8  2A5D               	incf	initData@i_1004^0,f,c
  8813   0017EA  0E03               	movlw	3
  8814   0017EC  645D               	cpfsgt	initData@i_1004^0,c
  8815   0017EE  D7EE               	goto	l783
  8816                           
  8817                           ;TAD_DATOS.c: 32:     for(char i = 0; i < 6; i++) {
  8818   0017F0  6A5C               	clrf	initData@i_1006^0,c
  8819   0017F2                     l4296:
  8820                           
  8821                           ;TAD_DATOS.c: 33:         configurations[4][i] = 0;
  8822   0017F2  505C               	movf	initData@i_1006^0,w,c
  8823   0017F4  0F98               	addlw	low (_configurations+24)
  8824   0017F6  6ED9               	movwf	fsr2l,c
  8825   0017F8  6ADA               	clrf	fsr2h,c
  8826   0017FA  6ADF               	clrf	indf2,c
  8827                           
  8828                           ;TAD_DATOS.c: 34:     }
  8829   0017FC  2A5C               	incf	initData@i_1006^0,f,c
  8830   0017FE  0E05               	movlw	5
  8831   001800  645C               	cpfsgt	initData@i_1006^0,c
  8832   001802  D7F7               	goto	l4296
  8833                           
  8834                           ;TAD_DATOS.c: 35:     index = 4;
  8835   001804  0E04               	movlw	4
  8836   001806  6E7D               	movwf	_index^0,c
  8837                           
  8838                           ;TAD_DATOS.c: 36:     TI_NewTimer(&timer);
  8839   001808  0E4A               	movlw	low _timer@TAD_DATOS$F1001
  8840   00180A  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8841   00180C  ECF6  F00C         	call	_TI_NewTimer	;wreg free
  8842                           
  8843                           ;TAD_DATOS.c: 37:     new_configuration = 1;
  8844   001810  0E01               	movlw	1
  8845   001812  6E1D               	movwf	_new_configuration^0,c
  8846   001814  0012               	return		;funcret
  8847   001816                     __end_of_initData:
  8848                           	callstack 0
  8849                           
  8850 ;; *************** function _Terminal_Init *****************
  8851 ;; Defined at:
  8852 ;;		line 10 in file "TAD_TERMINAL.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;		None
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, status,2
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1
  8866 ;;      Params:         0       0       0
  8867 ;;      Locals:         0       0       0
  8868 ;;      Temps:          0       0       0
  8869 ;;      Totals:         0       0       0
  8870 ;;Total ram usage:        0 bytes
  8871 ;; Hardware stack levels used: 1
  8872 ;; Hardware stack levels required when called: 3
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_main
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text41
  8881   001C92                     __ptext41:
  8882                           	callstack 0
  8883   001C92                     _Terminal_Init:
  8884                           	callstack 27
  8885                           
  8886                           ;TAD_TERMINAL.c: 11:  TXSTA = 0x24;
  8887                           
  8888                           ;incstack = 0
  8889   001C92  0E24               	movlw	36
  8890   001C94  6EAC               	movwf	172,c	;volatile
  8891                           
  8892                           ;TAD_TERMINAL.c: 12:  RCSTA = 0x90;
  8893   001C96  0E90               	movlw	144
  8894   001C98  6EAB               	movwf	171,c	;volatile
  8895                           
  8896                           ;TAD_TERMINAL.c: 13:  SPBRG = 255;
  8897   001C9A  68AF               	setf	175,c	;volatile
  8898                           
  8899                           ;TAD_TERMINAL.c: 14:  BAUDCON = 0x00;
  8900   001C9C  6AB8               	clrf	184,c	;volatile
  8901                           
  8902                           ;TAD_TERMINAL.c: 15:  hashtag_pressed = 0;
  8903   001C9E  6A22               	clrf	_hashtag_pressed^0,c
  8904   001CA0  0012               	return		;funcret
  8905   001CA2                     __end_of_Terminal_Init:
  8906                           	callstack 0
  8907                           
  8908 ;; *************** function _TI_Init *****************
  8909 ;; Defined at:
  8910 ;;		line 32 in file "TAD_TIMER.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;		None
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;  counter         1    1[COMRAM] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1
  8924 ;;      Params:         0       0       0
  8925 ;;      Locals:         1       0       0
  8926 ;;      Temps:          0       0       0
  8927 ;;      Totals:         1       0       0
  8928 ;;Total ram usage:        1 bytes
  8929 ;; Hardware stack levels used: 1
  8930 ;; Hardware stack levels required when called: 3
  8931 ;; This function calls:
  8932 ;;		Nothing
  8933 ;; This function is called by:
  8934 ;;		_main
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text42
  8939   001AF0                     __ptext42:
  8940                           	callstack 0
  8941   001AF0                     _TI_Init:
  8942                           	callstack 27
  8943                           
  8944                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<5; counter++) {
  8945                           
  8946                           ;incstack = 0
  8947   001AF0  6A57               	clrf	TI_Init@counter^0,c
  8948   001AF2                     l4156:
  8949                           
  8950                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  8951   001AF2  5057               	movf	TI_Init@counter^0,w,c
  8952   001AF4  0D05               	mullw	5
  8953   001AF6  50F3               	movf	243,w,c
  8954   001AF8  0FA2               	addlw	low (_Timers+4)
  8955   001AFA  6ED9               	movwf	fsr2l,c
  8956   001AFC  6ADA               	clrf	fsr2h,c
  8957   001AFE  6ADF               	clrf	indf2,c
  8958                           
  8959                           ;TAD_TIMER.c: 35:  }
  8960   001B00  2A57               	incf	TI_Init@counter^0,f,c
  8961   001B02  0E04               	movlw	4
  8962   001B04  6457               	cpfsgt	TI_Init@counter^0,c
  8963   001B06  D7F5               	goto	l4156
  8964                           
  8965                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  8966   001B08  0E82               	movlw	130
  8967   001B0A  6ED5               	movwf	213,c	;volatile
  8968                           
  8969                           ;TAD_TIMER.c: 37:     TMR0=63036;
  8970   001B0C  0EF6               	movlw	246
  8971   001B0E  6ED7               	movwf	215,c	;volatile
  8972   001B10  0E3C               	movlw	60
  8973   001B12  6ED6               	movwf	214,c	;volatile
  8974                           
  8975                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  8976   001B14  94F2               	bcf	242,2,c	;volatile
  8977                           
  8978                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  8979   001B16  8AF2               	bsf	242,5,c	;volatile
  8980   001B18  0012               	return		;funcret
  8981   001B1A                     __end_of_TI_Init:
  8982                           	callstack 0
  8983                           
  8984 ;; *************** function _LcInit *****************
  8985 ;; Defined at:
  8986 ;;		line 68 in file "TAD_DISPLAY.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;  rows            1    wreg     unsigned char 
  8989 ;;  columns         1   22[COMRAM] unsigned char 
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;  rows            1   23[COMRAM] unsigned char 
  8992 ;;  i               2   24[COMRAM] int 
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  1    wreg      void 
  8995 ;; Registers used:
  8996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMRAM   BANK0   BANK1
  9002 ;;      Params:         1       0       0
  9003 ;;      Locals:         3       0       0
  9004 ;;      Temps:          0       0       0
  9005 ;;      Totals:         4       0       0
  9006 ;;Total ram usage:        4 bytes
  9007 ;; Hardware stack levels used: 1
  9008 ;; Hardware stack levels required when called: 5
  9009 ;; This function calls:
  9010 ;;		_CantaIR
  9011 ;;		_EscriuPrimeraOrdre
  9012 ;;		_Espera
  9013 ;;		_TI_NewTimer
  9014 ;;		_WaitForBusy
  9015 ;; This function is called by:
  9016 ;;		_main
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text43
  9021   000FE6                     __ptext43:
  9022                           	callstack 0
  9023   000FE6                     _LcInit:
  9024                           	callstack 25
  9025                           
  9026                           ;incstack = 0
  9027                           ;LcInit@rows stored from wreg
  9028   000FE6  6E6D               	movwf	LcInit@rows^0,c
  9029                           
  9030                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  9031   000FE8  0E55               	movlw	low _Timer
  9032   000FEA  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  9033   000FEC  ECF6  F00C         	call	_TI_NewTimer	;wreg free
  9034                           
  9035                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  9036   000FF0  C06D  F03F         	movff	LcInit@rows,_Rows
  9037   000FF4  C06C  F03E         	movff	LcInit@columns,_Columns
  9038                           
  9039                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  9040   000FF8  6A3C               	clrf	_ColumnAct^0,c
  9041   000FFA  6A3D               	clrf	_RowAct^0,c
  9042                           
  9043                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  9044   000FFC  9293               	bcf	147,1,c	;volatile
  9045   000FFE  9493               	bcf	147,2,c	;volatile
  9046   001000  9693               	bcf	147,3,c	;volatile
  9047                           
  9048                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  9049   001002  0E00               	movlw	0
  9050   001004  6E6F               	movwf	(LcInit@i+1)^0,c
  9051   001006  0E00               	movlw	0
  9052   001008  6E6E               	movwf	LcInit@i^0,c
  9053   00100A                     l4230:
  9054                           
  9055                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  9056   00100A  C055  F064         	movff	_Timer,Espera@Timer
  9057   00100E  6A65               	clrf	(Espera@Timer+1)^0,c
  9058   001010  0E00               	movlw	0
  9059   001012  6E67               	movwf	(Espera@ms+1)^0,c
  9060   001014  0E64               	movlw	100
  9061   001016  6E66               	movwf	Espera@ms^0,c
  9062   001018  EC14  F00D         	call	_Espera	;wreg free
  9063                           
  9064                           ;TAD_DISPLAY.c: 81:   EscriuPrimeraOrdre(0x02 | 0x01);
  9065   00101C  0E03               	movlw	3
  9066   00101E  ECF3  F009         	call	_EscriuPrimeraOrdre
  9067                           
  9068                           ;TAD_DISPLAY.c: 82:   Espera(Timer, 4);
  9069   001022  C055  F064         	movff	_Timer,Espera@Timer
  9070   001026  6A65               	clrf	(Espera@Timer+1)^0,c
  9071   001028  0E00               	movlw	0
  9072   00102A  6E67               	movwf	(Espera@ms+1)^0,c
  9073   00102C  0E04               	movlw	4
  9074   00102E  6E66               	movwf	Espera@ms^0,c
  9075   001030  EC14  F00D         	call	_Espera	;wreg free
  9076                           
  9077                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  9078   001034  0E03               	movlw	3
  9079   001036  ECF3  F009         	call	_EscriuPrimeraOrdre
  9080                           
  9081                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 1);
  9082   00103A  C055  F064         	movff	_Timer,Espera@Timer
  9083   00103E  6A65               	clrf	(Espera@Timer+1)^0,c
  9084   001040  0E00               	movlw	0
  9085   001042  6E67               	movwf	(Espera@ms+1)^0,c
  9086   001044  0E01               	movlw	1
  9087   001046  6E66               	movwf	Espera@ms^0,c
  9088   001048  EC14  F00D         	call	_Espera	;wreg free
  9089                           
  9090                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  9091   00104C  0E03               	movlw	3
  9092   00104E  ECF3  F009         	call	_EscriuPrimeraOrdre
  9093                           
  9094                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  9095   001052  C055  F064         	movff	_Timer,Espera@Timer
  9096   001056  6A65               	clrf	(Espera@Timer+1)^0,c
  9097   001058  0E00               	movlw	0
  9098   00105A  6E67               	movwf	(Espera@ms+1)^0,c
  9099   00105C  0E01               	movlw	1
  9100   00105E  6E66               	movwf	Espera@ms^0,c
  9101   001060  EC14  F00D         	call	_Espera	;wreg free
  9102                           
  9103                           ;TAD_DISPLAY.c: 89:   EscriuPrimeraOrdre(0x02);
  9104   001064  0E02               	movlw	2
  9105   001066  ECF3  F009         	call	_EscriuPrimeraOrdre
  9106                           
  9107                           ;TAD_DISPLAY.c: 90:   Espera(Timer, 1);
  9108   00106A  C055  F064         	movff	_Timer,Espera@Timer
  9109   00106E  6A65               	clrf	(Espera@Timer+1)^0,c
  9110   001070  0E00               	movlw	0
  9111   001072  6E67               	movwf	(Espera@ms+1)^0,c
  9112   001074  0E01               	movlw	1
  9113   001076  6E66               	movwf	Espera@ms^0,c
  9114   001078  EC14  F00D         	call	_Espera	;wreg free
  9115                           
  9116                           ;TAD_DISPLAY.c: 91:   CantaIR(0x20 | 0x08);
  9117   00107C  0E28               	movlw	40
  9118   00107E  EC47  F00D         	call	_CantaIR
  9119                           
  9120                           ;TAD_DISPLAY.c: 94:   WaitForBusy(); CantaIR(0x08);
  9121   001082  ECB3  F00C         	call	_WaitForBusy	;wreg free
  9122   001086  0E08               	movlw	8
  9123   001088  EC47  F00D         	call	_CantaIR
  9124                           
  9125                           ;TAD_DISPLAY.c: 95:   WaitForBusy(); CantaIR(0x01);
  9126   00108C  ECB3  F00C         	call	_WaitForBusy	;wreg free
  9127   001090  0E01               	movlw	1
  9128   001092  EC47  F00D         	call	_CantaIR
  9129                           
  9130                           ;TAD_DISPLAY.c: 96:   Espera(Timer,2);
  9131   001096  C055  F064         	movff	_Timer,Espera@Timer
  9132   00109A  6A65               	clrf	(Espera@Timer+1)^0,c
  9133   00109C  0E00               	movlw	0
  9134   00109E  6E67               	movwf	(Espera@ms+1)^0,c
  9135   0010A0  0E02               	movlw	2
  9136   0010A2  6E66               	movwf	Espera@ms^0,c
  9137   0010A4  EC14  F00D         	call	_Espera	;wreg free
  9138                           
  9139                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9140   0010A8  ECB3  F00C         	call	_WaitForBusy	;wreg free
  9141   0010AC  0E06               	movlw	6
  9142   0010AE  EC47  F00D         	call	_CantaIR
  9143                           
  9144                           ;TAD_DISPLAY.c: 98:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9145   0010B2  ECB3  F00C         	call	_WaitForBusy	;wreg free
  9146   0010B6  0E0F               	movlw	15
  9147   0010B8  EC47  F00D         	call	_CantaIR
  9148                           
  9149                           ;TAD_DISPLAY.c: 99:  }
  9150   0010BC  4A6E               	infsnz	LcInit@i^0,f,c
  9151   0010BE  2A6F               	incf	(LcInit@i+1)^0,f,c
  9152   0010C0  BE6F               	btfsc	(LcInit@i+1)^0,7,c
  9153   0010C2  D7A3               	goto	l4230
  9154   0010C4  506F               	movf	(LcInit@i+1)^0,w,c
  9155   0010C6  E105               	bnz	u3600
  9156   0010C8  0E02               	movlw	2
  9157   0010CA  5C6E               	subwf	LcInit@i^0,w,c
  9158   0010CC  B0D8               	btfsc	status,0,c
  9159   0010CE  0012               	return	
  9160   0010D0  D79C               	goto	l4230
  9161   0010D2                     u3600:
  9162   0010D2  0012               	return		;funcret
  9163   0010D4                     __end_of_LcInit:
  9164                           	callstack 0
  9165                           
  9166 ;; *************** function _WaitForBusy *****************
  9167 ;; Defined at:
  9168 ;;		line 254 in file "TAD_DISPLAY.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;		None
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  Busy            1   14[COMRAM] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1
  9182 ;;      Params:         0       0       0
  9183 ;;      Locals:         1       0       0
  9184 ;;      Temps:          0       0       0
  9185 ;;      Totals:         1       0       0
  9186 ;;Total ram usage:        1 bytes
  9187 ;; Hardware stack levels used: 1
  9188 ;; Hardware stack levels required when called: 4
  9189 ;; This function calls:
  9190 ;;		_TI_GetTics
  9191 ;;		_TI_ResetTics
  9192 ;; This function is called by:
  9193 ;;		_LcInit
  9194 ;;		_LcGotoXY
  9195 ;;		_LcPutChar
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text44
  9200   001966                     __ptext44:
  9201                           	callstack 0
  9202   001966                     _WaitForBusy:
  9203                           	callstack 24
  9204                           
  9205                           ;TAD_DISPLAY.c: 255:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  9206                           
  9207                           ;incstack = 0
  9208   001966  8096               	bsf	150,0,c	;volatile
  9209   001968  8296               	bsf	150,1,c	;volatile
  9210   00196A  8A93               	bsf	147,5,c	;volatile
  9211   00196C  8893               	bsf	147,4,c	;volatile
  9212                           
  9213                           ;TAD_DISPLAY.c: 256:  (LATBbits.LATB3 = 0);
  9214   00196E  968A               	bcf	138,3,c	;volatile
  9215                           
  9216                           ;TAD_DISPLAY.c: 257:  (LATBbits.LATB2 = 1);
  9217   001970  848A               	bsf	138,2,c	;volatile
  9218                           
  9219                           ;TAD_DISPLAY.c: 258:  TI_ResetTics(Timer);
  9220   001972  5055               	movf	_Timer^0,w,c
  9221   001974  ECDA  F00D         	call	_TI_ResetTics
  9222   001978                     l3476:
  9223                           
  9224                           ;TAD_DISPLAY.c: 260:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  9225   001978  828A               	bsf	138,1,c	;volatile
  9226   00197A  828A               	bsf	138,1,c	;volatile
  9227                           
  9228                           ;TAD_DISPLAY.c: 261:   Busy = (PORTEbits.RE0);
  9229   00197C  0E00               	movlw	0
  9230   00197E  B084               	btfsc	132,0,c	;volatile
  9231   001980  0E01               	movlw	1
  9232   001982  6E64               	movwf	WaitForBusy@Busy^0,c
  9233                           
  9234                           ;TAD_DISPLAY.c: 262:   (LATBbits.LATB1 = 0);
  9235   001984  928A               	bcf	138,1,c	;volatile
  9236                           
  9237                           ;TAD_DISPLAY.c: 263:   (LATBbits.LATB1 = 0);
  9238   001986  928A               	bcf	138,1,c	;volatile
  9239                           
  9240                           ;TAD_DISPLAY.c: 264:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  9241   001988  828A               	bsf	138,1,c	;volatile
  9242   00198A  828A               	bsf	138,1,c	;volatile
  9243                           
  9244                           ;TAD_DISPLAY.c: 266:   (LATBbits.LATB1 = 0);
  9245   00198C  928A               	bcf	138,1,c	;volatile
  9246                           
  9247                           ;TAD_DISPLAY.c: 267:   (LATBbits.LATB1 = 0);
  9248   00198E  928A               	bcf	138,1,c	;volatile
  9249                           
  9250                           ;TAD_DISPLAY.c: 268:   if (TI_GetTics(Timer)) break;
  9251   001990  5055               	movf	_Timer^0,w,c
  9252   001992  EC8D  F00C         	call	_TI_GetTics
  9253   001996  5057               	movf	?_TI_GetTics^0,w,c
  9254   001998  1058               	iorwf	(?_TI_GetTics+1)^0,w,c
  9255   00199A  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  9256   00199C  105A               	iorwf	(?_TI_GetTics+3)^0,w,c
  9257   00199E  A4D8               	btfss	status,2,c
  9258   0019A0  0012               	return	
  9259                           
  9260                           ;TAD_DISPLAY.c: 269:  } while(Busy);
  9261   0019A2  5064               	movf	WaitForBusy@Busy^0,w,c
  9262   0019A4  B4D8               	btfsc	status,2,c
  9263   0019A6  0012               	return	
  9264   0019A8  D7E7               	goto	l3476
  9265   0019AA                     __end_of_WaitForBusy:
  9266                           	callstack 0
  9267                           
  9268 ;; *************** function _TI_NewTimer *****************
  9269 ;; Defined at:
  9270 ;;		line 43 in file "TAD_TIMER.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  9273 ;;		 -> timer@TAD_DATOS$F1001(1), timer_teclado(1), card_timer(1), timer(1), 
  9274 ;;		 -> Timer(1), 
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;  Comptador       1    3[COMRAM] unsigned char 
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      unsigned char 
  9279 ;; Registers used:
  9280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1
  9286 ;;      Params:         1       0       0
  9287 ;;      Locals:         1       0       0
  9288 ;;      Temps:          1       0       0
  9289 ;;      Totals:         3       0       0
  9290 ;;Total ram usage:        3 bytes
  9291 ;; Hardware stack levels used: 1
  9292 ;; Hardware stack levels required when called: 3
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_LcInit
  9297 ;;		_initLeds
  9298 ;;		_initRFID
  9299 ;;		_initTeclado
  9300 ;;		_initData
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           	psect	text45
  9305   0019EC                     __ptext45:
  9306                           	callstack 0
  9307   0019EC                     _TI_NewTimer:
  9308                           	callstack 26
  9309                           
  9310                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  9311                           
  9312                           ;incstack = 0
  9313   0019EC  6A59               	clrf	TI_NewTimer@Comptador^0,c
  9314                           
  9315                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9316   0019EE  D005               	goto	l3774
  9317   0019F0                     l3770:
  9318                           
  9319                           ;TAD_TIMER.c: 46:   if (++Comptador == 5) return (0);
  9320   0019F0  2A59               	incf	TI_NewTimer@Comptador^0,f,c
  9321   0019F2  0E05               	movlw	5
  9322   0019F4  1859               	xorwf	TI_NewTimer@Comptador^0,w,c
  9323   0019F6  B4D8               	btfsc	status,2,c
  9324   0019F8  0012               	return	
  9325   0019FA                     l3774:
  9326                           
  9327                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9328   0019FA  5059               	movf	TI_NewTimer@Comptador^0,w,c
  9329   0019FC  0D05               	mullw	5
  9330   0019FE  50F3               	movf	243,w,c
  9331   001A00  0FA2               	addlw	low (_Timers+4)
  9332   001A02  6ED9               	movwf	fsr2l,c
  9333   001A04  6ADA               	clrf	fsr2h,c
  9334   001A06  04DE               	decf	postinc2,w,c
  9335   001A08  B4D8               	btfsc	status,2,c
  9336   001A0A  D7F2               	goto	l3770
  9337                           
  9338                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  9339   001A0C  5059               	movf	TI_NewTimer@Comptador^0,w,c
  9340   001A0E  0D05               	mullw	5
  9341   001A10  50F3               	movf	243,w,c
  9342   001A12  0FA2               	addlw	low (_Timers+4)
  9343   001A14  6ED9               	movwf	fsr2l,c
  9344   001A16  6ADA               	clrf	fsr2h,c
  9345   001A18  0E01               	movlw	1
  9346   001A1A  6EDF               	movwf	indf2,c
  9347                           
  9348                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  9349   001A1C  5057               	movf	TI_NewTimer@TimerHandle^0,w,c
  9350   001A1E  6ED9               	movwf	fsr2l,c
  9351   001A20  6ADA               	clrf	fsr2h,c
  9352   001A22  C059  FFDF         	movff	TI_NewTimer@Comptador,indf2
  9353   001A26  0012               	return		;funcret
  9354   001A28                     __end_of_TI_NewTimer:
  9355                           	callstack 0
  9356                           
  9357 ;; *************** function _Espera *****************
  9358 ;; Defined at:
  9359 ;;		line 203 in file "TAD_DISPLAY.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  Timer           2   14[COMRAM] int 
  9362 ;;  ms              2   16[COMRAM] int 
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;		None
  9365 ;; Return value:  Size  Location     Type
  9366 ;;                  1    wreg      void 
  9367 ;; Registers used:
  9368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9369 ;; Tracked objects:
  9370 ;;		On entry : 0/0
  9371 ;;		On exit  : 0/0
  9372 ;;		Unchanged: 0/0
  9373 ;; Data sizes:     COMRAM   BANK0   BANK1
  9374 ;;      Params:         4       0       0
  9375 ;;      Locals:         0       0       0
  9376 ;;      Temps:          4       0       0
  9377 ;;      Totals:         8       0       0
  9378 ;;Total ram usage:        8 bytes
  9379 ;; Hardware stack levels used: 1
  9380 ;; Hardware stack levels required when called: 4
  9381 ;; This function calls:
  9382 ;;		_TI_GetTics
  9383 ;;		_TI_ResetTics
  9384 ;; This function is called by:
  9385 ;;		_LcInit
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text46
  9390   001A28                     __ptext46:
  9391                           	callstack 0
  9392   001A28                     _Espera:
  9393                           	callstack 25
  9394                           
  9395                           ;TAD_DISPLAY.c: 204:  TI_ResetTics((unsigned char)Timer);
  9396                           
  9397                           ;incstack = 0
  9398   001A28  5064               	movf	Espera@Timer^0,w,c
  9399   001A2A  ECDA  F00D         	call	_TI_ResetTics
  9400   001A2E                     l3784:
  9401   001A2E  C066  F068         	movff	Espera@ms,??_Espera
  9402   001A32  C067  F069         	movff	Espera@ms+1,??_Espera+1
  9403   001A36  0E00               	movlw	0
  9404   001A38  BE69               	btfsc	(??_Espera+1)^0,7,c
  9405   001A3A  0EFF               	movlw	255
  9406   001A3C  6E6A               	movwf	(??_Espera+2)^0,c
  9407   001A3E  6E6B               	movwf	(??_Espera+3)^0,c
  9408   001A40  5064               	movf	Espera@Timer^0,w,c
  9409   001A42  EC8D  F00C         	call	_TI_GetTics
  9410   001A46  5068               	movf	??_Espera^0,w,c
  9411   001A48  5C57               	subwf	?_TI_GetTics^0,w,c
  9412   001A4A  5069               	movf	(??_Espera+1)^0,w,c
  9413   001A4C  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  9414   001A4E  506A               	movf	(??_Espera+2)^0,w,c
  9415   001A50  5859               	subwfb	(?_TI_GetTics+2)^0,w,c
  9416   001A52  506B               	movf	(??_Espera+3)^0,w,c
  9417   001A54  585A               	subwfb	(?_TI_GetTics+3)^0,w,c
  9418   001A56  B0D8               	btfsc	status,0,c
  9419   001A58  0012               	return	
  9420   001A5A  D7E9               	goto	l3784
  9421   001A5C                     __end_of_Espera:
  9422                           	callstack 0
  9423                           
  9424 ;; *************** function _TI_ResetTics *****************
  9425 ;; Defined at:
  9426 ;;		line 53 in file "TAD_TIMER.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;  TimerHandle     1    wreg     unsigned char 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  9431 ;; Return value:  Size  Location     Type
  9432 ;;                  1    wreg      void 
  9433 ;; Registers used:
  9434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMRAM   BANK0   BANK1
  9440 ;;      Params:         0       0       0
  9441 ;;      Locals:         1       0       0
  9442 ;;      Temps:          0       0       0
  9443 ;;      Totals:         1       0       0
  9444 ;;Total ram usage:        1 bytes
  9445 ;; Hardware stack levels used: 1
  9446 ;; Hardware stack levels required when called: 3
  9447 ;; This function calls:
  9448 ;;		Nothing
  9449 ;; This function is called by:
  9450 ;;		_Espera
  9451 ;;		_WaitForBusy
  9452 ;;		_motor_LEDs
  9453 ;;		_initRFID
  9454 ;;		_motor_RFID
  9455 ;;		_motorTeclado
  9456 ;;		_motor_datos
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text47
  9461   001BB4                     __ptext47:
  9462                           	callstack 0
  9463   001BB4                     _TI_ResetTics:
  9464                           	callstack 26
  9465                           
  9466                           ;incstack = 0
  9467                           ;TI_ResetTics@TimerHandle stored from wreg
  9468   001BB4  6E57               	movwf	TI_ResetTics@TimerHandle^0,c
  9469                           
  9470                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  9471   001BB6  9EF2               	bcf	242,7,c	;volatile
  9472   001BB8  5057               	movf	TI_ResetTics@TimerHandle^0,w,c
  9473   001BBA  0D05               	mullw	5
  9474   001BBC  50F3               	movf	243,w,c
  9475   001BBE  0F9E               	addlw	low _Timers
  9476   001BC0  6ED9               	movwf	fsr2l,c
  9477   001BC2  6ADA               	clrf	fsr2h,c
  9478   001BC4  C007  FFDE         	movff	_Tics,postinc2	;volatile
  9479   001BC8  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  9480   001BCC  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  9481   001BD0  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  9482   001BD4  8EF2               	bsf	242,7,c	;volatile
  9483   001BD6  0012               	return		;funcret
  9484   001BD8                     __end_of_TI_ResetTics:
  9485                           	callstack 0
  9486                           
  9487 ;; *************** function _TI_GetTics *****************
  9488 ;; Defined at:
  9489 ;;		line 61 in file "TAD_TIMER.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  TimerHandle     1    wreg     unsigned char 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  9494 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  4    1[COMRAM] unsigned long 
  9497 ;; Registers used:
  9498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1
  9504 ;;      Params:         4       0       0
  9505 ;;      Locals:         5       0       0
  9506 ;;      Temps:          4       0       0
  9507 ;;      Totals:        13       0       0
  9508 ;;Total ram usage:       13 bytes
  9509 ;; Hardware stack levels used: 1
  9510 ;; Hardware stack levels required when called: 3
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_Espera
  9515 ;;		_WaitForBusy
  9516 ;;		_motor_LEDs
  9517 ;;		_motor_RFID
  9518 ;;		_motorTeclado
  9519 ;;		_motor_datos
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text48
  9524   00191A                     __ptext48:
  9525                           	callstack 0
  9526   00191A                     _TI_GetTics:
  9527                           	callstack 26
  9528                           
  9529                           ;incstack = 0
  9530                           ;TI_GetTics@TimerHandle stored from wreg
  9531   00191A  6E63               	movwf	TI_GetTics@TimerHandle^0,c
  9532                           
  9533                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  9534   00191C  9EF2               	bcf	242,7,c	;volatile
  9535   00191E  C007  F05F         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  9536   001922  C008  F060         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  9537   001926  C009  F061         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  9538   00192A  C00A  F062         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  9539   00192E  8EF2               	bsf	242,7,c	;volatile
  9540                           
  9541                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  9542   001930  5063               	movf	TI_GetTics@TimerHandle^0,w,c
  9543   001932  0D05               	mullw	5
  9544   001934  50F3               	movf	243,w,c
  9545   001936  0F9E               	addlw	low _Timers
  9546   001938  6ED9               	movwf	fsr2l,c
  9547   00193A  6ADA               	clrf	fsr2h,c
  9548   00193C  CFDE F05B          	movff	postinc2,??_TI_GetTics
  9549   001940  CFDE F05C          	movff	postinc2,??_TI_GetTics+1
  9550   001944  CFDE F05D          	movff	postinc2,??_TI_GetTics+2
  9551   001948  CFDE F05E          	movff	postinc2,??_TI_GetTics+3
  9552   00194C  505B               	movf	??_TI_GetTics^0,w,c
  9553   00194E  5C5F               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  9554   001950  6E57               	movwf	?_TI_GetTics^0,c
  9555   001952  505C               	movf	(??_TI_GetTics+1)^0,w,c
  9556   001954  5860               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  9557   001956  6E58               	movwf	(?_TI_GetTics+1)^0,c
  9558   001958  505D               	movf	(??_TI_GetTics+2)^0,w,c
  9559   00195A  5861               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  9560   00195C  6E59               	movwf	(?_TI_GetTics+2)^0,c
  9561   00195E  505E               	movf	(??_TI_GetTics+3)^0,w,c
  9562   001960  5862               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  9563   001962  6E5A               	movwf	(?_TI_GetTics+3)^0,c
  9564   001964  0012               	return		;funcret
  9565   001966                     __end_of_TI_GetTics:
  9566                           	callstack 0
  9567                           
  9568 ;; *************** function _EscriuPrimeraOrdre *****************
  9569 ;; Defined at:
  9570 ;;		line 271 in file "TAD_DISPLAY.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  ordre           1    wreg     unsigned char 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  ordre           1    2[COMRAM] unsigned char 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  1    wreg      void 
  9577 ;; Registers used:
  9578 ;;		wreg, status,2, status,0
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1
  9584 ;;      Params:         0       0       0
  9585 ;;      Locals:         1       0       0
  9586 ;;      Temps:          1       0       0
  9587 ;;      Totals:         2       0       0
  9588 ;;Total ram usage:        2 bytes
  9589 ;; Hardware stack levels used: 1
  9590 ;; Hardware stack levels required when called: 3
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_LcInit
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text49
  9599   0013E6                     __ptext49:
  9600                           	callstack 0
  9601   0013E6                     _EscriuPrimeraOrdre:
  9602                           	callstack 26
  9603                           
  9604                           ;incstack = 0
  9605                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9606   0013E6  6E58               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9607                           
  9608                           ;TAD_DISPLAY.c: 273:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  9609   0013E8  9096               	bcf	150,0,c	;volatile
  9610   0013EA  9296               	bcf	150,1,c	;volatile
  9611   0013EC  9A93               	bcf	147,5,c	;volatile
  9612   0013EE  9893               	bcf	147,4,c	;volatile
  9613   0013F0  968A               	bcf	138,3,c	;volatile
  9614   0013F2  948A               	bcf	138,2,c	;volatile
  9615                           
  9616                           ;TAD_DISPLAY.c: 274:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  9617   0013F4  828A               	bsf	138,1,c	;volatile
  9618   0013F6  828A               	bsf	138,1,c	;volatile
  9619                           
  9620                           ;TAD_DISPLAY.c: 275:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  9621   0013F8  A658               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9622   0013FA  D003               	goto	u600
  9623   0013FC  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9624   0013FE  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9625   001400  D001               	goto	u618
  9626   001402                     u600:
  9627   001402  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9628   001404                     u618:
  9629   001404  508D               	movf	141,w,c	;volatile
  9630   001406  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9631   001408  0BFE               	andlw	-2
  9632   00140A  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9633   00140C  6E8D               	movwf	141,c	;volatile
  9634                           
  9635                           ;TAD_DISPLAY.c: 276:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  9636   00140E  A458               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9637   001410  D003               	goto	u620
  9638   001412  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9639   001414  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9640   001416  D001               	goto	u638
  9641   001418                     u620:
  9642   001418  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9643   00141A                     u638:
  9644   00141A  4657               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9645   00141C  508D               	movf	141,w,c	;volatile
  9646   00141E  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9647   001420  0BFD               	andlw	-3
  9648   001422  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9649   001424  6E8D               	movwf	141,c	;volatile
  9650                           
  9651                           ;TAD_DISPLAY.c: 277:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  9652   001426  A258               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9653   001428  D003               	goto	u640
  9654   00142A  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9655   00142C  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9656   00142E  D001               	goto	u658
  9657   001430                     u640:
  9658   001430  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9659   001432                     u658:
  9660   001432  3A57               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9661   001434  4657               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9662   001436  508A               	movf	138,w,c	;volatile
  9663   001438  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9664   00143A  0BDF               	andlw	-33
  9665   00143C  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9666   00143E  6E8A               	movwf	138,c	;volatile
  9667                           
  9668                           ;TAD_DISPLAY.c: 278:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  9669   001440  A058               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9670   001442  D003               	goto	u660
  9671   001444  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9672   001446  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9673   001448  D001               	goto	u678
  9674   00144A                     u660:
  9675   00144A  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9676   00144C                     u678:
  9677   00144C  3A57               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9678   00144E  508A               	movf	138,w,c	;volatile
  9679   001450  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9680   001452  0BEF               	andlw	-17
  9681   001454  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9682   001456  6E8A               	movwf	138,c	;volatile
  9683                           
  9684                           ;TAD_DISPLAY.c: 279:  (LATBbits.LATB1 = 0);
  9685   001458  928A               	bcf	138,1,c	;volatile
  9686   00145A  0012               	return		;funcret
  9687   00145C                     __end_of_EscriuPrimeraOrdre:
  9688                           	callstack 0
  9689                           
  9690 ;; *************** function _CantaIR *****************
  9691 ;; Defined at:
  9692 ;;		line 222 in file "TAD_DISPLAY.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  IR              1    wreg     unsigned char 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  IR              1    3[COMRAM] unsigned char 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1
  9706 ;;      Params:         0       0       0
  9707 ;;      Locals:         1       0       0
  9708 ;;      Temps:          0       0       0
  9709 ;;      Totals:         1       0       0
  9710 ;;Total ram usage:        1 bytes
  9711 ;; Hardware stack levels used: 1
  9712 ;; Hardware stack levels required when called: 4
  9713 ;; This function calls:
  9714 ;;		_CantaPartAlta
  9715 ;;		_CantaPartBaixa
  9716 ;; This function is called by:
  9717 ;;		_LcInit
  9718 ;;		_LcGotoXY
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text50
  9723   001A8E                     __ptext50:
  9724                           	callstack 0
  9725   001A8E                     _CantaIR:
  9726                           	callstack 23
  9727                           
  9728                           ;incstack = 0
  9729                           ;CantaIR@IR stored from wreg
  9730   001A8E  6E59               	movwf	CantaIR@IR^0,c
  9731                           
  9732                           ;TAD_DISPLAY.c: 223:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  9733   001A90  9096               	bcf	150,0,c	;volatile
  9734   001A92  9296               	bcf	150,1,c	;volatile
  9735   001A94  9A93               	bcf	147,5,c	;volatile
  9736   001A96  9893               	bcf	147,4,c	;volatile
  9737                           
  9738                           ;TAD_DISPLAY.c: 224:  (LATBbits.LATB3 = 0);
  9739   001A98  968A               	bcf	138,3,c	;volatile
  9740                           
  9741                           ;TAD_DISPLAY.c: 225:  (LATBbits.LATB2 = 0);
  9742   001A9A  948A               	bcf	138,2,c	;volatile
  9743                           
  9744                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB1 = 1);
  9745   001A9C  828A               	bsf	138,1,c	;volatile
  9746                           
  9747                           ;TAD_DISPLAY.c: 227:  CantaPartAlta(IR);
  9748   001A9E  5059               	movf	CantaIR@IR^0,w,c
  9749   001AA0  EC79  F00B         	call	_CantaPartAlta
  9750                           
  9751                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  9752   001AA4  828A               	bsf	138,1,c	;volatile
  9753                           
  9754                           ;TAD_DISPLAY.c: 229:  (LATBbits.LATB1 = 0);
  9755   001AA6  928A               	bcf	138,1,c	;volatile
  9756                           
  9757                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 0);
  9758   001AA8  928A               	bcf	138,1,c	;volatile
  9759                           
  9760                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 1);
  9761   001AAA  828A               	bsf	138,1,c	;volatile
  9762                           
  9763                           ;TAD_DISPLAY.c: 232:  CantaPartBaixa(IR);
  9764   001AAC  5059               	movf	CantaIR@IR^0,w,c
  9765   001AAE  EC47  F00B         	call	_CantaPartBaixa
  9766                           
  9767                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  9768   001AB2  828A               	bsf	138,1,c	;volatile
  9769                           
  9770                           ;TAD_DISPLAY.c: 234:  (LATBbits.LATB1 = 0);
  9771   001AB4  928A               	bcf	138,1,c	;volatile
  9772                           
  9773                           ;TAD_DISPLAY.c: 235:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  9774   001AB6  8096               	bsf	150,0,c	;volatile
  9775   001AB8  8296               	bsf	150,1,c	;volatile
  9776   001ABA  8A93               	bsf	147,5,c	;volatile
  9777   001ABC  8893               	bsf	147,4,c	;volatile
  9778   001ABE  0012               	return		;funcret
  9779   001AC0                     __end_of_CantaIR:
  9780                           	callstack 0
  9781                           
  9782 ;; *************** function _CantaPartBaixa *****************
  9783 ;; Defined at:
  9784 ;;		line 215 in file "TAD_DISPLAY.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;  c               1    wreg     unsigned char 
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;  c               1    2[COMRAM] unsigned char 
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      void 
  9791 ;; Registers used:
  9792 ;;		wreg, status,2, status,0
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1
  9798 ;;      Params:         0       0       0
  9799 ;;      Locals:         1       0       0
  9800 ;;      Temps:          1       0       0
  9801 ;;      Totals:         2       0       0
  9802 ;;Total ram usage:        2 bytes
  9803 ;; Hardware stack levels used: 1
  9804 ;; Hardware stack levels required when called: 3
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		_CantaIR
  9809 ;;		_CantaData
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           	psect	text51
  9814   00168E                     __ptext51:
  9815                           	callstack 0
  9816   00168E                     _CantaPartBaixa:
  9817                           	callstack 23
  9818                           
  9819                           ;incstack = 0
  9820                           ;CantaPartBaixa@c stored from wreg
  9821   00168E  6E58               	movwf	CantaPartBaixa@c^0,c
  9822                           
  9823                           ;TAD_DISPLAY.c: 216:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  9824   001690  A658               	btfss	CantaPartBaixa@c^0,3,c
  9825   001692  D003               	goto	u2480
  9826   001694  6A57               	clrf	??_CantaPartBaixa^0,c
  9827   001696  2A57               	incf	??_CantaPartBaixa^0,f,c
  9828   001698  D001               	goto	u2498
  9829   00169A                     u2480:
  9830   00169A  6A57               	clrf	??_CantaPartBaixa^0,c
  9831   00169C                     u2498:
  9832   00169C  508D               	movf	141,w,c	;volatile
  9833   00169E  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9834   0016A0  0BFE               	andlw	-2
  9835   0016A2  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9836   0016A4  6E8D               	movwf	141,c	;volatile
  9837                           
  9838                           ;TAD_DISPLAY.c: 217:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9839   0016A6  A458               	btfss	CantaPartBaixa@c^0,2,c
  9840   0016A8  D003               	goto	u2500
  9841   0016AA  6A57               	clrf	??_CantaPartBaixa^0,c
  9842   0016AC  2A57               	incf	??_CantaPartBaixa^0,f,c
  9843   0016AE  D001               	goto	u2518
  9844   0016B0                     u2500:
  9845   0016B0  6A57               	clrf	??_CantaPartBaixa^0,c
  9846   0016B2                     u2518:
  9847   0016B2  4657               	rlncf	??_CantaPartBaixa^0,f,c
  9848   0016B4  508D               	movf	141,w,c	;volatile
  9849   0016B6  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9850   0016B8  0BFD               	andlw	-3
  9851   0016BA  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9852   0016BC  6E8D               	movwf	141,c	;volatile
  9853                           
  9854                           ;TAD_DISPLAY.c: 218:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  9855   0016BE  A258               	btfss	CantaPartBaixa@c^0,1,c
  9856   0016C0  D003               	goto	u2520
  9857   0016C2  6A57               	clrf	??_CantaPartBaixa^0,c
  9858   0016C4  2A57               	incf	??_CantaPartBaixa^0,f,c
  9859   0016C6  D001               	goto	u2538
  9860   0016C8                     u2520:
  9861   0016C8  6A57               	clrf	??_CantaPartBaixa^0,c
  9862   0016CA                     u2538:
  9863   0016CA  3A57               	swapf	??_CantaPartBaixa^0,f,c
  9864   0016CC  4657               	rlncf	??_CantaPartBaixa^0,f,c
  9865   0016CE  508A               	movf	138,w,c	;volatile
  9866   0016D0  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9867   0016D2  0BDF               	andlw	-33
  9868   0016D4  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9869   0016D6  6E8A               	movwf	138,c	;volatile
  9870                           
  9871                           ;TAD_DISPLAY.c: 219:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  9872   0016D8  A058               	btfss	CantaPartBaixa@c^0,0,c
  9873   0016DA  D003               	goto	u2540
  9874   0016DC  6A57               	clrf	??_CantaPartBaixa^0,c
  9875   0016DE  2A57               	incf	??_CantaPartBaixa^0,f,c
  9876   0016E0  D001               	goto	u2558
  9877   0016E2                     u2540:
  9878   0016E2  6A57               	clrf	??_CantaPartBaixa^0,c
  9879   0016E4                     u2558:
  9880   0016E4  3A57               	swapf	??_CantaPartBaixa^0,f,c
  9881   0016E6  508A               	movf	138,w,c	;volatile
  9882   0016E8  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9883   0016EA  0BEF               	andlw	-17
  9884   0016EC  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9885   0016EE  6E8A               	movwf	138,c	;volatile
  9886   0016F0  0012               	return		;funcret
  9887   0016F2                     __end_of_CantaPartBaixa:
  9888                           	callstack 0
  9889                           
  9890 ;; *************** function _CantaPartAlta *****************
  9891 ;; Defined at:
  9892 ;;		line 208 in file "TAD_DISPLAY.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  c               1    wreg     unsigned char 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  c               1    2[COMRAM] unsigned char 
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      void 
  9899 ;; Registers used:
  9900 ;;		wreg, status,2, status,0
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1
  9906 ;;      Params:         0       0       0
  9907 ;;      Locals:         1       0       0
  9908 ;;      Temps:          1       0       0
  9909 ;;      Totals:         2       0       0
  9910 ;;Total ram usage:        2 bytes
  9911 ;; Hardware stack levels used: 1
  9912 ;; Hardware stack levels required when called: 3
  9913 ;; This function calls:
  9914 ;;		Nothing
  9915 ;; This function is called by:
  9916 ;;		_CantaIR
  9917 ;;		_CantaData
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           	psect	text52
  9922   0016F2                     __ptext52:
  9923                           	callstack 0
  9924   0016F2                     _CantaPartAlta:
  9925                           	callstack 23
  9926                           
  9927                           ;incstack = 0
  9928                           ;CantaPartAlta@c stored from wreg
  9929   0016F2  6E58               	movwf	CantaPartAlta@c^0,c
  9930                           
  9931                           ;TAD_DISPLAY.c: 209:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  9932   0016F4  AE58               	btfss	CantaPartAlta@c^0,7,c
  9933   0016F6  D003               	goto	u2400
  9934   0016F8  6A57               	clrf	??_CantaPartAlta^0,c
  9935   0016FA  2A57               	incf	??_CantaPartAlta^0,f,c
  9936   0016FC  D001               	goto	u2418
  9937   0016FE                     u2400:
  9938   0016FE  6A57               	clrf	??_CantaPartAlta^0,c
  9939   001700                     u2418:
  9940   001700  508D               	movf	141,w,c	;volatile
  9941   001702  1857               	xorwf	??_CantaPartAlta^0,w,c
  9942   001704  0BFE               	andlw	-2
  9943   001706  1857               	xorwf	??_CantaPartAlta^0,w,c
  9944   001708  6E8D               	movwf	141,c	;volatile
  9945                           
  9946                           ;TAD_DISPLAY.c: 210:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9947   00170A  AC58               	btfss	CantaPartAlta@c^0,6,c
  9948   00170C  D003               	goto	u2420
  9949   00170E  6A57               	clrf	??_CantaPartAlta^0,c
  9950   001710  2A57               	incf	??_CantaPartAlta^0,f,c
  9951   001712  D001               	goto	u2438
  9952   001714                     u2420:
  9953   001714  6A57               	clrf	??_CantaPartAlta^0,c
  9954   001716                     u2438:
  9955   001716  4657               	rlncf	??_CantaPartAlta^0,f,c
  9956   001718  508D               	movf	141,w,c	;volatile
  9957   00171A  1857               	xorwf	??_CantaPartAlta^0,w,c
  9958   00171C  0BFD               	andlw	-3
  9959   00171E  1857               	xorwf	??_CantaPartAlta^0,w,c
  9960   001720  6E8D               	movwf	141,c	;volatile
  9961                           
  9962                           ;TAD_DISPLAY.c: 211:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  9963   001722  AA58               	btfss	CantaPartAlta@c^0,5,c
  9964   001724  D003               	goto	u2440
  9965   001726  6A57               	clrf	??_CantaPartAlta^0,c
  9966   001728  2A57               	incf	??_CantaPartAlta^0,f,c
  9967   00172A  D001               	goto	u2458
  9968   00172C                     u2440:
  9969   00172C  6A57               	clrf	??_CantaPartAlta^0,c
  9970   00172E                     u2458:
  9971   00172E  3A57               	swapf	??_CantaPartAlta^0,f,c
  9972   001730  4657               	rlncf	??_CantaPartAlta^0,f,c
  9973   001732  508A               	movf	138,w,c	;volatile
  9974   001734  1857               	xorwf	??_CantaPartAlta^0,w,c
  9975   001736  0BDF               	andlw	-33
  9976   001738  1857               	xorwf	??_CantaPartAlta^0,w,c
  9977   00173A  6E8A               	movwf	138,c	;volatile
  9978                           
  9979                           ;TAD_DISPLAY.c: 212:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  9980   00173C  A858               	btfss	CantaPartAlta@c^0,4,c
  9981   00173E  D003               	goto	u2460
  9982   001740  6A57               	clrf	??_CantaPartAlta^0,c
  9983   001742  2A57               	incf	??_CantaPartAlta^0,f,c
  9984   001744  D001               	goto	u2478
  9985   001746                     u2460:
  9986   001746  6A57               	clrf	??_CantaPartAlta^0,c
  9987   001748                     u2478:
  9988   001748  3A57               	swapf	??_CantaPartAlta^0,f,c
  9989   00174A  508A               	movf	138,w,c	;volatile
  9990   00174C  1857               	xorwf	??_CantaPartAlta^0,w,c
  9991   00174E  0BEF               	andlw	-17
  9992   001750  1857               	xorwf	??_CantaPartAlta^0,w,c
  9993   001752  6E8A               	movwf	138,c	;volatile
  9994   001754  0012               	return		;funcret
  9995   001756                     __end_of_CantaPartAlta:
  9996                           	callstack 0
  9997                           
  9998 ;; *************** function _LowRSI *****************
  9999 ;; Defined at:
 10000 ;;		line 34 in file "main.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		None
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1
 10014 ;;      Params:         0       0       0
 10015 ;;      Locals:         0       0       0
 10016 ;;      Temps:          1       0       0
 10017 ;;      Totals:         1       0       0
 10018 ;;Total ram usage:        1 bytes
 10019 ;; Hardware stack levels used: 1
 10020 ;; Hardware stack levels required when called: 2
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		Interrupt level 1
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           	psect	intcodelo
 10029   000018                     __pintcodelo:
 10030                           	callstack 0
 10031   000018                     _LowRSI:
 10032                           	callstack 21
 10033                           
 10034                           ;incstack = 0
 10035   000018  807E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10036   00001A  CFE0 F056          	movff	bsr,??_LowRSI
 10037   00001E  C056  FFE0         	movff	??_LowRSI,bsr
 10038   000022  907E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10039   000024  0010               	retfie	
 10040   000026                     __end_of_LowRSI:
 10041                           	callstack 0
 10042                           
 10043 ;; *************** function _HighRSI *****************
 10044 ;; Defined at:
 10045 ;;		line 30 in file "main.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1
 10059 ;;      Params:         0       0       0
 10060 ;;      Locals:         0       0       0
 10061 ;;      Temps:          0       0       0
 10062 ;;      Totals:         0       0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used: 1
 10065 ;; Hardware stack levels required when called: 1
 10066 ;; This function calls:
 10067 ;;		_RSI_Timer0
 10068 ;; This function is called by:
 10069 ;;		Interrupt level 2
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           	psect	intcode
 10074   000008                     __pintcode:
 10075                           	callstack 0
 10076   000008                     _HighRSI:
 10077                           	callstack 21
 10078                           
 10079                           ;incstack = 0
 10080   000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10081   00000A  EF5E  F00E         	goto	int_func
 10082                           
 10083                           	psect	intcode_body
 10084   001CBC                     __pintcode_body:
 10085                           	callstack 21
 10086   001CBC                     int_func:
 10087                           	callstack 21
 10088                           
 10089                           ;main.c: 32:      motor_RFID();
 10090   001CBC  B4F2               	btfsc	242,2,c	;volatile
 10091   001CBE  EC29  F00E         	call	_RSI_Timer0	;wreg free
 10092   001CC2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10093   001CC4  0011               	retfie		f
 10094   001CC6                     __end_of_HighRSI:
 10095                           	callstack 0
 10096                           
 10097 ;; *************** function _RSI_Timer0 *****************
 10098 ;; Defined at:
 10099 ;;		line 25 in file "TAD_TIMER.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      void 
 10106 ;; Registers used:
 10107 ;;		wreg, status,2, status,0
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMRAM   BANK0   BANK1
 10113 ;;      Params:         0       0       0
 10114 ;;      Locals:         0       0       0
 10115 ;;      Temps:          0       0       0
 10116 ;;      Totals:         0       0       0
 10117 ;;Total ram usage:        0 bytes
 10118 ;; Hardware stack levels used: 1
 10119 ;; This function calls:
 10120 ;;		Nothing
 10121 ;; This function is called by:
 10122 ;;		_HighRSI
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           	psect	text55
 10127   001C52                     __ptext55:
 10128                           	callstack 0
 10129   001C52                     _RSI_Timer0:
 10130                           	callstack 21
 10131                           
 10132                           ;TAD_TIMER.c: 27:     TMR0=63036;
 10133                           
 10134                           ;incstack = 0
 10135   001C52  0EF6               	movlw	246
 10136   001C54  6ED7               	movwf	215,c	;volatile
 10137   001C56  0E3C               	movlw	60
 10138   001C58  6ED6               	movwf	214,c	;volatile
 10139                           
 10140                           ;TAD_TIMER.c: 28:     TMR0IF=0;
 10141   001C5A  94F2               	bcf	4082,2,c	;volatile
 10142                           
 10143                           ;TAD_TIMER.c: 29:     Tics++;
 10144   001C5C  0E01               	movlw	1
 10145   001C5E  2607               	addwf	_Tics^0,f,c	;volatile
 10146   001C60  0E00               	movlw	0
 10147   001C62  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
 10148   001C64  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
 10149   001C66  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
 10150   001C68  0012               	return		;funcret
 10151   001C6A                     __end_of_RSI_Timer0:
 10152                           	callstack 0
 10153                           
 10154                           	psect	rparam
 10155   000001                     ___rparam_used  equ	1
 10156   000000                     ___param_bank   equ	0
 10157   000000                     __Lparam        equ	__Lrparam
 10158   000000                     __Hparam        equ	__Hrparam
 10159                           
 10160                           	psect	temp
 10161   00007E                     btemp:
 10162                           	callstack 0
 10163   00007E                     	ds	1
 10164   00007E                     int$flags       set	btemp
 10165   00007F                     wtemp8          set	btemp+1
 10166   00007F                     ttemp5          set	btemp+1
 10167   000082                     ttemp6          set	btemp+4
 10168   000086                     ttemp7          set	btemp+8
 10169                           
 10170                           	psect	idloc
 10171                           
 10172                           ;Config register IDLOC0 @ 0x200000
 10173                           ;	unspecified, using default values
 10174   200000                     	org	2097152
 10175   200000  FF                 	db	255
 10176                           
 10177                           ;Config register IDLOC1 @ 0x200001
 10178                           ;	unspecified, using default values
 10179   200001                     	org	2097153
 10180   200001  FF                 	db	255
 10181                           
 10182                           ;Config register IDLOC2 @ 0x200002
 10183                           ;	unspecified, using default values
 10184   200002                     	org	2097154
 10185   200002  FF                 	db	255
 10186                           
 10187                           ;Config register IDLOC3 @ 0x200003
 10188                           ;	unspecified, using default values
 10189   200003                     	org	2097155
 10190   200003  FF                 	db	255
 10191                           
 10192                           ;Config register IDLOC4 @ 0x200004
 10193                           ;	unspecified, using default values
 10194   200004                     	org	2097156
 10195   200004  FF                 	db	255
 10196                           
 10197                           ;Config register IDLOC5 @ 0x200005
 10198                           ;	unspecified, using default values
 10199   200005                     	org	2097157
 10200   200005  FF                 	db	255
 10201                           
 10202                           ;Config register IDLOC6 @ 0x200006
 10203                           ;	unspecified, using default values
 10204   200006                     	org	2097158
 10205   200006  FF                 	db	255
 10206                           
 10207                           ;Config register IDLOC7 @ 0x200007
 10208                           ;	unspecified, using default values
 10209   200007                     	org	2097159
 10210   200007  FF                 	db	255
 10211                           
 10212                           	psect	config
 10213                           
 10214                           ; Padding undefined space
 10215   300000                     	org	3145728
 10216   300000  FF                 	db	255
 10217                           
 10218                           ;Config register CONFIG1H @ 0x300001
 10219                           ;	Oscillator
 10220                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10221                           ;	Fail-Safe Clock Monitor Enable bit
 10222                           ;	FCMEN = 0x0, unprogrammed default
 10223                           ;	Internal/External Oscillator Switchover bit
 10224                           ;	IESO = 0x0, unprogrammed default
 10225   300001                     	org	3145729
 10226   300001  06                 	db	6
 10227                           
 10228                           ;Config register CONFIG2L @ 0x300002
 10229                           ;	Power-up Timer Enable bit
 10230                           ;	PWRT = OFF, PWRT disabled
 10231                           ;	Brown-out Reset Enable bits
 10232                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10233                           ;	Brown-out Reset Voltage bits
 10234                           ;	BORV = 0x3, unprogrammed default
 10235   300002                     	org	3145730
 10236   300002  19                 	db	25
 10237                           
 10238                           ;Config register CONFIG2H @ 0x300003
 10239                           ;	Watchdog Timer Enable bit
 10240                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10241                           ;	Watchdog Timer Postscale Select bits
 10242                           ;	WDTPS = 0xF, unprogrammed default
 10243   300003                     	org	3145731
 10244   300003  1E                 	db	30
 10245                           
 10246                           ; Padding undefined space
 10247   300004                     	org	3145732
 10248   300004  FF                 	db	255
 10249                           
 10250                           ;Config register CONFIG3H @ 0x300005
 10251                           ;	CCP2 MUX bit
 10252                           ;	CCP2MX = 0x1, unprogrammed default
 10253                           ;	PORTB A/D Enable bit
 10254                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10255                           ;	Low-Power Timer1 Oscillator Enable bit
 10256                           ;	LPT1OSC = 0x0, unprogrammed default
 10257                           ;	MCLR Pin Enable bit
 10258                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10259   300005                     	org	3145733
 10260   300005  81                 	db	129
 10261                           
 10262                           ;Config register CONFIG4L @ 0x300006
 10263                           ;	Stack Full/Underflow Reset Enable bit
 10264                           ;	STVREN = 0x1, unprogrammed default
 10265                           ;	Single-Supply ICSP Enable bit
 10266                           ;	LVP = OFF, Single-Supply ICSP disabled
 10267                           ;	Boot Block Size Select bits
 10268                           ;	BBSIZ = 0x0, unprogrammed default
 10269                           ;	Extended Instruction Set Enable bit
 10270                           ;	XINST = 0x0, unprogrammed default
 10271                           ;	Background Debugger Enable bit
 10272                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10273   300006                     	org	3145734
 10274   300006  81                 	db	129
 10275                           
 10276                           ; Padding undefined space
 10277   300007                     	org	3145735
 10278   300007  FF                 	db	255
 10279                           
 10280                           ;Config register CONFIG5L @ 0x300008
 10281                           ;	unspecified, using default values
 10282                           ;	Code Protection bit
 10283                           ;	CP0 = 0x1, unprogrammed default
 10284                           ;	Code Protection bit
 10285                           ;	CP1 = 0x1, unprogrammed default
 10286   300008                     	org	3145736
 10287   300008  03                 	db	3
 10288                           
 10289                           ;Config register CONFIG5H @ 0x300009
 10290                           ;	unspecified, using default values
 10291                           ;	Boot Block Code Protection bitProtect Boot
 10292                           ;	CPB = 0x1, unprogrammed default
 10293                           ;	Data EEPROM Code Protection bit
 10294                           ;	CPD = 0x1, unprogrammed default
 10295   300009                     	org	3145737
 10296   300009  C0                 	db	192
 10297                           
 10298                           ;Config register CONFIG6L @ 0x30000A
 10299                           ;	unspecified, using default values
 10300                           ;	Write Protection bit
 10301                           ;	WRT0 = 0x1, unprogrammed default
 10302                           ;	Write Protection bit
 10303                           ;	WRT1 = 0x1, unprogrammed default
 10304   30000A                     	org	3145738
 10305   30000A  03                 	db	3
 10306                           
 10307                           ;Config register CONFIG6H @ 0x30000B
 10308                           ;	unspecified, using default values
 10309                           ;	Configuration Register Write Protection bit
 10310                           ;	WRTC = 0x1, unprogrammed default
 10311                           ;	Boot Block Write Protection bit
 10312                           ;	WRTB = 0x1, unprogrammed default
 10313                           ;	Data EEPROM Write Protection bit
 10314                           ;	WRTD = 0x1, unprogrammed default
 10315   30000B                     	org	3145739
 10316   30000B  E0                 	db	224
 10317                           
 10318                           ;Config register CONFIG7L @ 0x30000C
 10319                           ;	unspecified, using default values
 10320                           ;	Table Read Protection bit
 10321                           ;	EBTR0 = 0x1, unprogrammed default
 10322                           ;	Table Read Protection bit
 10323                           ;	EBTR1 = 0x1, unprogrammed default
 10324   30000C                     	org	3145740
 10325   30000C  03                 	db	3
 10326                           
 10327                           ;Config register CONFIG7H @ 0x30000D
 10328                           ;	unspecified, using default values
 10329                           ;	Boot Block Table Read Protection bit
 10330                           ;	EBTRB = 0x1, unprogrammed default
 10331   30000D                     	org	3145741
 10332   30000D  40                 	db	64
 10333                           tosu	equ	0xFFF
 10334                           tosh	equ	0xFFE
 10335                           tosl	equ	0xFFD
 10336                           stkptr	equ	0xFFC
 10337                           pclatu	equ	0xFFB
 10338                           pclath	equ	0xFFA
 10339                           pcl	equ	0xFF9
 10340                           tblptru	equ	0xFF8
 10341                           tblptrh	equ	0xFF7
 10342                           tblptrl	equ	0xFF6
 10343                           tablat	equ	0xFF5
 10344                           prodh	equ	0xFF4
 10345                           prodl	equ	0xFF3
 10346                           indf0	equ	0xFEF
 10347                           postinc0	equ	0xFEE
 10348                           postdec0	equ	0xFED
 10349                           preinc0	equ	0xFEC
 10350                           plusw0	equ	0xFEB
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           postinc1	equ	0xFE6
 10356                           postdec1	equ	0xFE5
 10357                           preinc1	equ	0xFE4
 10358                           plusw1	equ	0xFE3
 10359                           fsr1h	equ	0xFE2
 10360                           fsr1l	equ	0xFE1
 10361                           bsr	equ	0xFE0
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           preinc2	equ	0xFDC
 10366                           plusw2	equ	0xFDB
 10367                           fsr2h	equ	0xFDA
 10368                           fsr2l	equ	0xFD9
 10369                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    29
    Data        45
    BSS         237
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     33     125
    BANK0           128      0     110
    BANK1           256      0      80

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(BANK0[6]), printfUID@leds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[30]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    printfUID@extraString	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_13(CODE[8]), STR_17(CODE[21]), STR_9(CODE[8]), 

    printfUID@ptr	PTR unsigned char  size(2) Largest target is 80
		 -> printfUID@buffer(BANK1[80]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(BANK0[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[30]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> card_timer(COMRAM[1]), timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_DATOS$F1001(COMRAM[1]), 
		 -> timer_teclado(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_motor_setCurrentUser
    _motor_setCurrentUser->_printfUID
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _printfUID->_motor_StartSendString
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_setLEDIntensity
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _initData->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_TI_GetTics
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11346
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          2     2      0    1904
                                             24 COMRAM     2     2      0
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1100
                                             23 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     677
                                             15 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           5     5      0    3378
                                             28 COMRAM     5     5      0
                         _TI_GetTics
                       _TI_ResetTics
                       _getActualUID
                _getCurrentUserIndex
                         _motor_Read
              _motor_StartSendString
                        _motor_Write
               _motor_setCurrentUser
                   _newConfiguration
                           _setIndex
                 _setStartSendString
 ---------------------------------------------------------------------------------
 (2) _setIndex                                             1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _motor_setCurrentUser                                 5     1      4    2166
                                             23 COMRAM     5     1      4
                          _printfUID
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                          11    11      0     852
                                             14 COMRAM    11    11      0
                         _TI_GetTics
                       _TI_ResetTics
                         _controlLED
                      _getActualLeds
 ---------------------------------------------------------------------------------
 (2) _controlLED                                           4     3      1     186
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        2     2      0    2356
                                             23 COMRAM     2     2      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                _getCurrentUserIndex
                   _motor_SendString
              _motor_StartSendString
                   _newConfiguration
                          _printfUID
                     _saveHourToData
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           16    12      4    1577
                                              7 COMRAM    16    12      4
                      _getActualLeds
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _getActualLeds                                        4     2      2     294
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _newConfiguration                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentUserIndex                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         5     3      2     386
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     519
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
              _motor_StartSendString
                          _resetData
                             _setLed
                 _setStartSendString
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setStartSendString                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetData                                            2     2      0     136
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      66
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     116
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     800
                                             12 COMRAM     1     1      0
                        _TI_NewTimer
                       _TI_ResetTics
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     116
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             4     4      0     410
                                              4 COMRAM     4     4      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     827
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     104
                                             14 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     116
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Espera                                               8     4      4     159
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _TI_Init
   _Terminal_Init
   _initData
     _TI_NewTimer
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _TI_NewTimer
     _TI_ResetTics
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _motor_StartSendString
       _motor_SendString
         _motor_SendChar
           _Terminal_TXAvailable
     _resetData
     _setLed
       _setLEDIntensity
     _setStartSendString
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _getCurrentUserIndex
     _motor_SendString
     _motor_StartSendString
     _newConfiguration
     _printfUID
       _getActualLeds
       _motor_StartSendString
     _saveHourToData
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _controlLED
     _getActualLeds
   _motor_RFID
     _TI_GetTics
     _TI_ResetTics
     _getActualUID
     _getCurrentUserIndex
     _motor_Read
     _motor_StartSendString
     _motor_Write
     _motor_setCurrentUser
       _printfUID
     _newConfiguration
     _setIndex
     _setStartSendString
   _motor_datos
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _TI_GetTics
     _TI_ResetTics

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      80     31.2%
BITBANK0           128      0       0      0.0%
BANK0              128      0     110     85.9%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     33     125     99.2%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         40      0       0      0.0%
BITBIGSFRll          2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     314      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Apr 01 17:51:07 2025

                     setIndex@indexActual 0057                     ?_Terminal_ReceiveChar 0056  
                              _RSI_Timer0 1C52                  setLEDIntensity@intensity 0058  
                              _TI_GetTics 191A                                        bsr 0FE0  
                             _state_write 0052                                       l130 13B2  
                                     l123 1372                                       l302 12D8  
                                     l217 1110                                       l307 1330  
                                     l219 115A                                       l263 1C46  
                                     l417 0188                                       l434 022A  
                                     l279 1626                                       l801 15FC  
                                     l802 15E6                                       l474 0404  
                                     l571 175A                                       l572 178C  
                                     l565 1C06                                       l582 0EE8  
                                     l815 18A6                                       l656 1BEA  
                                     l783 17CC                                       l792 1B90  
                                     l890 0CF8                                       l877 0C4A  
                                     u600 1402                                       u620 1418  
                                     u640 1430                                       u618 1404  
                                     u660 144A                                       u638 141A  
                                     u658 1432                                       u678 144C  
                            printfUID@hex 1E2B                              printfUID@val 0069  
                        ??_CantaPartBaixa 0057                              printfUID@ptr 006B  
                                     prod 0FF3                                       wreg 0FE8  
                    printfUID@extraString 005F                                      l4020 0DE6  
                                    l2350 1766                                      l4022 0DEA  
                                    l4006 0DB8                                      l2352 176C  
                                    l2346 175E                                      l4114 1B92  
                                    l4050 0E4E                                      l4034 0E1A  
                                    l4018 0DE2                                      l5002 0C70  
                                    l2348 1762                                      l4132 1C6C  
                                    l4036 0E1E                                      l5004 0C7C  
                                    l4230 100A                                      l4206 125C  
                                    l2358 1770                                      l3430 1548  
                                    l4310 0ED6                                      l4062 0E7A  
                                    l5030 0CCC                                      l5022 0CB2  
                                    l5014 0C96                                      l5006 0C82  
                                    l4320 0EF4                                      l3512 1882  
                                    l4144 1B70                                      l4400 09A6  
                                    l4064 0E7E                                      l4048 0E4A  
                                    l4080 0ECA                                      l5024 0CB8  
                                    l5008 0C88                                      l3530 1C48  
                                    l3442 15A0                                      l3426 1544  
                                    l4314 0EE2                                      l3522 18A8  
                                    l4066 0E84                                      l5042 0CF2  
                                    l5034 0CD4                                      l4156 1AF2  
                                    l4332 0F10                                      l3612 06C4  
                                    l3540 134E                                      l5052 0D18  
                                    l5044 0CFE                                      l5036 0CDA  
                                    l5028 0CC6                                      l3438 1572  
                                    l4326 0F02                                      l3622 06EC  
                                    l4502 0B18                                      l4430 0A10  
                                    l4422 09F4                                      l4414 09D8  
                                    l4078 0E9E                                      l5062 0D42  
                                    l5070 0D4C                                      l4184 11D2  
                                    l3448 15A4                                      l4344 0F2A  
                                    l3712 08A0                                      l3616 06CE  
                                    l4512 0B36                                      l3552 1382  
                                    l3544 135C                                      l5048 0D0C  
                                    l4282 17CE                                      l4098 1ADA  
                                    l4362 0F60                                      l4338 0F1E  
                                    l4450 0A5C                                      l4530 0B80  
                                    l3562 13BA                                      l3802 1484  
                                    l5058 0D36                                      l5082 19D4  
                             _TI_NewTimer 19EC                                      l3476 1978  
                                    l4268 17B8                                      l3900 12C2  
                                    l4188 11E8                                      l4372 0F7A  
                                    l3732 0918                                      l4460 0A90  
                                    l4444 0A48                                      l4612 014E  
                                    l4604 012C                                      l3556 1392  
                                    l3564 13D0                                      l3804 1490  
                                    l4382 0FAC                                      l4366 0F6C  
                                    l3646 076A                                      l3654 079A  
                                    l4462 0A96                                      l4446 0A54  
                                    l3830 18E8                                      l4702 0326  
                                    l4630 0198                                      l4614 0160  
                                    l4550 0066                                      l4542 0048  
                                    l3822 14C4                                      l3814 14AA  
                                    l4296 17F2                                      l4392 0FBE  
                                    l3744 094E                                      l3728 090C  
                                    l3832 18F8                                      l4704 033C  
                                    l4640 01C2                                      l4616 016E  
                                    l4608 013C                                      l3816 14B6  
                                    l3770 19F0                                      l3690 085A  
                                    l3674 07EC                                      l4642 01CC  
                                    l3924 1328                                      l3852 163E  
                                    l4476 0ABC                                      l4468 0AA8  
                                    l4740 0394                                      l4724 0368  
                                    l4716 0356                                      l4660 0204  
                                    l3774 19FA                                      l3934 1334  
                                    l3854 1654                                      l4486 0ADA  
                                    l3838 190C                                      l4910 05DA  
                                    l4902 05CE                                      l4830 04BC  
                                    l4806 0458                                      l4726 0376  
                                    l4670 0230                                      l4638 01B4  
                                    l4590 0104                                      l4582 00F0  
                                    l4566 00A6                                      l4558 007E  
                                    l3784 1A2E                                      l4496 0B0A  
                                    l4824 04A4                                      l4808 0466  
                                    l4760 03D0                                      l4752 03AE  
                                    l4656 01EC                                      l4592 0112  
                                    l4576 00D8                                      l4568 00B8  
                                    l3882 12A0                                      l3866 1676  
                                    l3954 15C8                                      l4850 051E  
                                    l4842 04EC                                      l4818 048C  
                                    l4738 0386                                      l4658 01F6  
                                    l4578 00E6                                      l4914 068C  
                                    l3868 168A                                      l3964 15E8  
                                    l4836 04D4                                      l4764 03E2  
                                    l4756 03BE                                      l4676 0248  
                                    l3974 15FE                                      l4934 1138  
                                    l4862 054E                                      l4790 0430  
                                    l4782 0414                                      l4686 0268  
                                    l3896 12BE                                      l4952 119E  
                                    l3992 0D9C                                      l4856 0532  
                                    l4768 03F4                                      l4696 02A6  
                                    l4688 0294                                      l4946 115C  
                                    l4938 1150                                      l4866 055A  
                                    l4794 043E                                      l4698 0316  
                                    l4868 0560                                      l4980 0C16  
                                    l4982 0C1A                                      l4896 05B0  
                                    l4888 05A8                                      l4992 0C3A  
                                    l4984 0C1C                                      l4976 0C0E  
                                    l4986 0C24                                      l4978 0C12  
                                    STR_1 1EDC                                      STR_2 1FA0  
                                    STR_3 1F82                                      STR_4 1FD3  
                                    STR_5 1EA7                                      STR_6 1E48  
                                    STR_7 1FE2                                      STR_8 1F1F  
                                    STR_9 1FF7                                      _LATA 0F89  
                                    u3110 12EA                                      u2400 16FE  
                                    u4000 009A                                      _LATD 0F8C  
                                    u4010 00EC                                      u2420 1714  
                                    u2500 16B0                                      u3118 12EC  
                                    u2440 172C                                      u2520 16C8  
                                    u2418 1700                                      u2460 1746  
                                    u2540 16E2                                      u2380 1C88  
                                    u2438 1716                                      u2518 16B2  
                                    u2480 169A                                      u3600 10D2  
                                    u2720 1826                                      u3520 11F8  
                                    u2560 1568                                      u4320 0514  
                                    u2458 172E                                      u2538 16CA  
                                    u3530 1208                                      u4330 0516  
                                    u3540 1218                                      u2388 1C8A  
                                    u2580 1592                                      u3460 1CB8  
                                    u2478 1748                                      u2558 16E4  
                                    u3550 1228                                      u2567 155E  
                                    u3560 1238                                      u3720 0F92  
                                    u2760 06B6                                      u4520 0BD8  
                                    u2498 169C                                      u2738 1828  
                                    u3570 1248                                      u4370 0554  
                                    u2587 1588                                      u4460 1130  
                                    u3690 0F4C                                      u3770 09BA  
                                    u3780 09C0                                      u4580 0C30  
                                    _TMR0 0FD6                  setLEDIntensity@userIndex 0059  
                              _ActualLeds 00BD                                      _Tics 0007  
                                    _Rows 003F                          motor_datos@state 001A  
                                    _main 19AA                             printfUID@leds 0063  
                                    fsr1h 0FE2                                      fsr2h 0FDA  
                                    indf1 0FE7                                      indf2 0FDF  
                                    fsr1l 0FE1                                      fsr2l 0FD9  
                                    btemp 007E                           __end_of_TI_Init 1B1A  
                                    prodh 0FF4                                      prodl 0FF3  
                                    start 0026                           __end_of_CantaIR 1AC0  
                         __end_of_HighRSI 1CC6                             LcInit@columns 006C  
                            ___param_bank 0000                              ?_initTeclado 0056  
                         motor_LEDs@i_559 006E                             processBit@val 0059  
                             Espera@Timer 0064                                     ?_main 0056  
                                   STR_10 1EFE                                     STR_11 1FE2  
                                   STR_12 1FE5                                     STR_13 1FF7  
                                   STR_14 1FE2                                     STR_15 1F61  
                                   STR_16 1F40                                     STR_17 1FBE  
                                   _T0CON 0FD5                                     _RCREG 0FAE  
                                   _RCSTA 0FAB                                     _SPBRG 0FAF  
                                   _PORTD 0F83                                     _TRISA 0F92  
                                   _TRISD 0F95                                     _TRISE 0F96  
                                   _TXREG 0FAD                                     _TXSTA 0FAC  
                    __end_of_getActualUID 1622                                     _Filas 0027  
                  ??_motor_setCurrentUser 0071                                     _Timer 0055  
                         motor_RFID@irqEn 0038                                     _index 007D  
                         motor_RFID@unLen 0011                              _TI_ResetTics 1BB4  
                                   _tecla 0025                           motor_RFID@value 0028  
                         motor_RFID@state 003A                                     _timer 0054  
                                   _state 0024                       motor_Read@bit_count 004D  
                                   tablat 0FF5                                     ttemp5 007F  
                                   ttemp6 0082                                     ttemp7 0086  
                          _saveHourToData 1B68                                     status 0FD8  
                                   wtemp8 007F                        Terminal_SendChar@c 005A  
                        __end_of_LcGotoXY 13E6                          __end_of_GetTecla 17B6  
                __end_of_newConfiguration 1CE4                   EscriuPrimeraOrdre@ordre 0058  
                  ??_Terminal_ReceiveChar 0057                           __initialization 14D0  
                            __end_of_main 19EC                               ?_RSI_Timer0 0056  
                          TI_Init@counter 0057                               ?_TI_GetTics 0057  
                   _motor_StartSendString 1C0A                            _controlLED$553 0058  
                                  ??_main 0077                             __activetblptr 0002  
                motor_setCurrentUser@UID0 0071                  motor_setCurrentUser@UID1 006D  
                motor_setCurrentUser@UID2 006E                  motor_setCurrentUser@UID3 006F  
                motor_setCurrentUser@UID4 0070                                    _ADCON1 0FC1  
                               ??_TI_Init 0057                    __end_of_saveHourToData 1B8E  
                               ??_CantaIR 0059                            LcGotoXY@Fisics 006A  
                          LcGotoXY@Column 006C                             ??_WaitForBusy 0064  
                                  _TMR0IF 7F92                                 ??_HighRSI 0056  
                                  _LcInit 0FE6                     __end_of_getActualLeds 18CC  
                        __end_of_delay_us 1C52                            getActualLeds@i 0059  
                                  _Espera 1A28                                    _LowRSI 0018  
                            _LcGotoXY$498 0068                                    _RowAct 003D  
                                  _Timers 009E                            initData@i_1004 005D  
                          initData@i_1006 005C                        motor_datos@pointer 0019  
                        __end_of_initRFID 127C                        motorTerminal@index 001F  
                        __end_of_initData 1816                          __end_of_initLeds 1CB0  
                      motorTerminal@state 0020                                    _keymap 1E3C  
                     getActualLeds@i_1020 005A                                    clear_0 1516  
                                  clear_1 1522                                    clear_2 152E  
                                  _setLed 1AC0                           printfUID@buffer 0100  
                            ?_motor_Write 005E                                    isa$std 0001  
                            ?_motor_datos 0056                          __end_of_setIndex 1CCE  
                            __pdataCOMRAM 0077                              __mediumconst 1E2A  
                         _setLEDIntensity 1B1A                                    tblptrh 0FF7  
                                  tblptrl 0FF6                                    tblptru 0FF8  
                       __end_of_CantaData 1A8E                     __end_of_Terminal_Init 1CA2  
                         ?_saveHourToData 0057                                __accesstop 0080  
                 __end_of__initialization 1534                         __end_of_LcPutChar 14D0  
                         delay_us@howMany 0057                             ___rparam_used 0001  
                      _setStartSendString 1CE4                             setLed@modeLED 0016  
                          __pcstackCOMRAM 0056                       __end_of_WaitForBusy 19AA  
                            __pidataBANK0 1B42                       ?_setStartSendString 0056  
                   _timer@TAD_DATOS$F1001 004A                    ?_motor_StartSendString 005B  
                    TI_NewTimer@Comptador 0059               motor_RFID@operation_pending 002A  
                        _motor_SendString 1542                       processBit@bit_count 005A  
                               ?_LcGotoXY 0065                                 ?_GetTecla 0056  
                    ??_setStartSendString 0057                              ?_TI_NewTimer 0057  
                              __pbssBANK0 0080                                __pbssBANK1 0100  
                              _card_timer 0051                               setLed@tecla 005A  
                   __end_of_motorTerminal 0BC0                                   ?_LcInit 006C  
                           _CantaPartAlta 16F2                    TI_NewTimer@TimerHandle 0057  
                                 ?_Espera 0064                                   ?_LowRSI 0056  
                            _getActualUID 15B4                           processBit@state 005B  
                 TI_ResetTics@TimerHandle 0057                             _writeColumnas 1BF2  
                                 _BAUDCON 0FB8                                   ?_setLed 0056  
                 __end_of_setLEDIntensity 1B42                            _sending_string 0021  
                         motor_SendChar@c 005A                                   LcInit@i 006E  
                              ??_LcGotoXY 0066                                 ?_delay_us 0056  
                         getActualUID@UID 0057                                ??_GetTecla 0057  
                       _Terminal_SendChar 1C6A                                   _TI_Init 1AF0  
                      ?_Terminal_SendChar 0056                                   _CantaIR 1A8E  
                               ?_initRFID 0056                                 ?_initData 0056  
motor_setCurrentUser@state_setCurrentUser 001B                                 ?_initLeds 0056  
                                 _HighRSI 0008                                _controlLED 18CC  
                    motor_RFID@last_state 002B                               _WaitForBusy 1966  
                          ?_CantaPartAlta 0056                                   _Columns 003E  
                     motor_datos@lastChar 0018                         motor_RFID@TagType 0033  
                     ??_Terminal_SendChar 005A                                 ?_setIndex 0056  
                                 __Hparam 0000                                   __Lparam 0000  
                       ?_newConfiguration 0056                              ??_RSI_Timer0 0056  
                          ?_writeColumnas 0056                        ??_newConfiguration 0057  
                            ??_TI_GetTics 005B                         motor_RFID@allZero 0031  
                                 __pcinit 14D0                                   __ramtop 0200  
                       motor_RFID@_status 0034                                   __ptext0 19AA  
                                 __ptext1 0BC0                                   __ptext2 145C  
                                 __ptext3 134A                                   __ptext4 1A5C  
                                 __ptext5 002A                                   __ptext6 1CC6  
                                 __ptext7 0D98                                   __ptext8 10D4  
                                 __ptext9 18CC                             ?_motorTeclado 0056  
                     motorTerminal@opcion 006D                                 CantaIR@IR 0059  
                       __end_of_initPorts 1CD6                 __end_of_Terminal_SendChar 1C7E  
                       motor_RFID@waitIRq 0037                  motorTerminal@currentUser 00C3  
                              ??_delay_us 0057                       _getCurrentUserIndex 1CF0  
                         WaitForBusy@Busy 0064                                   _str_ptr 000F  
                          __pintcode_body 1CBC                               motor_LEDs@i 006D  
                    end_of_initialization 1534                               motor_RFID@i 0035  
                             motor_RFID@n 0036                          controlLED@estado 0057  
                              ??_initRFID 0062                                ??_initData 005A  
                      __end_of_RSI_Timer0 1C6A                         __end_of_resetData 1BB4  
                              ??_initLeds 005A                             __Lmediumconst 1E2A  
                                 int_func 1CBC                        __end_of_TI_GetTics 1966  
                      saveHourToData@hour 0057                           motor_Write@addr 005F  
                              ??_setIndex 0057                         __end_of_printfUID 0992  
                    ?_getCurrentUserIndex 0056                                _motor_LEDs 10D4  
                              _motor_RFID 002A                                   postdec1 0FE5  
                              _motor_Read 127C                                   postinc0 0FEE  
                                 postinc2 0FDE                          ?_setLEDIntensity 0057  
                          ??_motorTeclado 0064                                 _PORTCbits 0F82  
                               _PORTEbits 0F84                                _processBit 1816  
                   TI_GetTics@TimerHandle 0063                            _motor_RFID$836 0074  
                        ??_saveHourToData 0058                                 _TRISBbits 0F93  
                               _TRISCbits 0F94                                 _TRISEbits 0F96  
                              _state_read 0053                            setLed@ledIndex 0015  
                         ??_CantaPartAlta 0057                               ?_controlLED 0057  
                               _CantaData 1A5C                  motor_StartSendString@str 005B  
                __end_of_motor_SendString 15B4                     ??_getCurrentUserIndex 0057  
                          __end_of_LcInit 10D4                       controlLED@ledActual 005A  
                 ??_motor_StartSendString 005D                           ??_writeColumnas 0057  
                               _LcPutChar 145C                            __end_of_Espera 1A5C  
                          __end_of_LowRSI 0026              __end_of_Terminal_RXAvailable 1CBC  
              __end_of_EscriuPrimeraOrdre 145C                             __pidataCOMRAM 1CD6  
               motor_Read@timeout_counter 0013                            _motor_Read$799 0060  
                          motor_RFID@addr 0029                            motor_RFID@flag 0076  
                               _ColumnAct 003C                            __end_of_keymap 1E48  
                          __end_of_setLed 1AF0                           saveHourToData@i 0058  
                       getActualLeds@leds 0057                     motor_RFID@cardRemoved 002C  
                     start_initialization 14D0                            _motor_SendChar 1BD8  
                      motor_Read@ucResult 003B              __end_of_Terminal_TXAvailable 1C92  
                   motor_Read@MAX_TIMEOUT 007B                                ?_CantaData 0056  
                                ??_LcInit 006D                             getActualUID@i 005A  
                                ??_Espera 0068                                  ??_LowRSI 0056  
                              ?_LcPutChar 0056                               ?_motor_LEDs 0056  
                             ?_motor_RFID 0056                         motorTerminal@leds 00B7  
                       motorTerminal@hour 00EA                               ?_motor_Read 0056  
                           ??_initTeclado 005A                               __pdataBANK0 00C8  
                                ??_setLed 005A                               ?_processBit 0059  
                  __end_of_motor_SendChar 1BF2                               __pbssCOMRAM 0001  
                           ?_TI_ResetTics 0056                          motor_Read@ucAddr 004C  
                                ?_TI_Init 0056                                  ?_CantaIR 0056  
                          _CantaPartBaixa 168E                                  ?_HighRSI 0056  
                            ?_WaitForBusy 0056                      __end_of_motorTeclado 0FE6  
                          motor_Read@addr 005F                       motor_RFID@fifoLevel 002E  
                           _getActualLeds 1872                                 __pintcode 0008  
                           __pmediumconst 1E2A                                 _colValues 00E7  
                         CantaPartBaixa@c 0058                               __pintcodelo 0018  
                      motor_Write@ucValue 004E                               __smallconst 1E2A  
                     __end_of_initTeclado 1C3A                           ?_motor_SendChar 0056  
                              resetData@i 0057                                resetData@j 0058  
           motorTerminal@currentUserIndex 006E                            ??_TI_ResetTics 0057  
                    processBit@next_state 005C                                 _initPorts 1CCE  
                  __end_of_CantaPartBaixa 16F2                             _Terminal_Init 1C92  
                    _Terminal_RXAvailable 1CB0                        motor_LEDs@lastTics 000B  
                             ??_CantaData 0059                                  _LATBbits 0F8A  
                                _LATCbits 0F8B                                  _LATEbits 0F8D  
                               delay_us@x 0058                      motor_Write@bit_count 0050  
                          ?_getActualLeds 0057                           _hashtag_pressed 0022  
                               _resetData 1B8E                                  _PIR1bits 0F9E  
                             ??_LcPutChar 006D                     motor_RFID@lastBitsVal 002F  
            __end_of_motor_setCurrentUser 0ECE                                 _printfUID 069C  
                           ??_motor_Write 005F                      _Terminal_TXAvailable 1C7E  
                            GetTecla@fila 005A                             ??_motor_datos 006E  
                               _state_str 0023                                printfUID@i 006A  
                  motor_RFID@tempRegValue 0030                                  Espera@ms 0066  
                                _LcGotoXY 134A                     motor_LEDs@currentTics 0069  
                                _GetTecla 1756              __end_of_Terminal_ReceiveChar 1CF8  
                              ?_initPorts 0056                             motor_RFID@UID 0001  
                          ?_Terminal_Init 0056                               LcGotoXY@Row 0065  
                               copy_data0 14E4                                 copy_data1 1504  
                         ?_CantaPartBaixa 0056                                  _Columnas 0026  
                   ?_Terminal_RXAvailable 0056                     motor_RFID@currentUser 0045  
                            ??_controlLED 0058                                 initData@i 005A  
                               initData@j 005B                             _motorTerminal 0992  
                    __end_ofprintfUID@hex 1E3C                         ?_motor_SendString 0056  
                              ?_resetData 0056                                  __Hrparam 0000  
                      printfUID@userIndex 005E                                  __Lrparam 0000  
                      ??_motor_SendString 005B             __end_of_motor_StartSendString 1C22  
                              ?_printfUID 005D                               _initTeclado 1C22  
                   ?_Terminal_TXAvailable 0057                   motorTerminal@userNumber 001E  
                      motor_RFID@checksum 0032                        __end_of_controlLED 191A  
                             _currentTime 0077                               _currentUser 0040  
                     __end_of_motor_Write 168E                                  _delay_us 1C3A  
                     __end_of_motor_datos 0D98                                  __ptext10 0992  
                                __ptext11 1B68                        _EscriuPrimeraOrdre 13E6  
                                __ptext20 0ECE                                  __ptext12 069C  
                                __ptext21 1BF2                                  __ptext13 1872  
                                __ptext30 1CEA                                  __ptext22 1CE4  
                                __ptext14 1CDE                                  __ptext31 1756  
                                __ptext23 1AC0                                  __ptext15 1CF0  
                                __ptext40 17B6                                  __ptext32 1C22  
                                __ptext24 1B1A                                  __ptext16 15B4  
                                __ptext41 1C92                                  __ptext33 11A8  
                                __ptext25 1B8E                                  __ptext17 1C6A  
                                __ptext50 1A8E                                  __ptext42 1AF0  
                                __ptext34 1622                                  __ptext26 1C0A  
                                __ptext18 1CF4                                  __ptext51 168E  
                                __ptext43 0FE6                                  __ptext35 127C  
                                __ptext27 1542                                  __ptext19 1CB0  
                                __ptext52 16F2                                  __ptext44 1966  
                                __ptext36 1816                                  __ptext28 1BD8  
                                __ptext45 19EC                                  __ptext37 1C3A  
                                __ptext29 1C7E                                  __ptext46 1A28  
                                __ptext38 1CCE                                  __ptext55 1C52  
                                __ptext47 1BB4                                  __ptext39 1CA2  
                                __ptext48 191A                                  __ptext49 13E6  
                           ??_TI_NewTimer 0058                            CantaPartAlta@c 0058  
                       motor_Write@ucAddr 004F               __end_of_getCurrentUserIndex 1CF4  
                                _initRFID 11A8                                  _initData 17B6  
                   getActualUID@userIndex 0058                                  _initLeds 1CA2  
                         ??_getActualLeds 0059                       ?_EscriuPrimeraOrdre 0056  
                          ?_motorTerminal 0056                     __end_of_CantaPartAlta 1756  
                           CantaData@Data 0059                                  _new_user 001C  
                                _setIndex 1CC6                             ?_getActualUID 0057  
                            ??_motor_LEDs 0064                              ??_motor_RFID 0072  
                                isa$xinst 0000                              ??_motor_Read 005E  
                    __end_of_TI_ResetTics 1BD8                                  int$flags 007E  
                   __end_of_writeColumnas 1C0A                        motor_RFID@substate 0039  
                                _userUIDs 00C8                         controlLED@ledBits 00E1  
                    ??_EscriuPrimeraOrdre 0057                                LcInit@rows 006D  
                            ??_processBit 005D                             _timer_teclado 004B  
                            _motorTeclado 0ECE                                _INTCONbits 0FF2  
                        _newConfiguration 1CDE                           ??_Terminal_Init 0057  
               TI_GetTics@CopiaTicsActual 005F                         _new_configuration 001D  
                             ??_initPorts 0057                    ??_Terminal_RXAvailable 0057  
                          _configurations 0080                         _hashtag_pressed3s 1CEA  
                    _motor_setCurrentUser 0D98                        __end_of_motor_LEDs 11A8  
                      __end_of_motor_RFID 069C                    getActualLeds@userIndex 0058  
                                intlevel1 0000                                  intlevel2 0000  
                      __end_of_motor_Read 134A                        ?_hashtag_pressed3s 0056  
                              LcPutChar@c 006D                          motor_Write@value 005E  
                     __end_of_TI_NewTimer 1A28                            ??_getActualUID 0059  
                             ??_resetData 0057                        __end_of_processBit 1872  
                     ??_hashtag_pressed3s 0057                    ??_Terminal_TXAvailable 0059  
                            motor_datos@c 006F                              motor_datos@i 0017  
                    _Terminal_ReceiveChar 1CF4                               ??_printfUID 0061  
                        ??_motor_SendChar 005A                               _motor_Write 1622  
                             _motor_datos 0BC0                        getActualUID@i_1014 0059  
                      getActualUID@i_1015 005B                    motor_RFID@backBitsCalc 002D  
               __end_of_hashtag_pressed3s 1CF0                __end_of_setStartSendString 1CEA  
                   ?_motor_setCurrentUser 006D                           ??_motorTerminal 006D  
                 setLEDIntensity@ledIndex 0057                      printfUID@currentUser 005D  
                          initRFID@regVal 0062                         ??_setLEDIntensity 0059  
                         GetTecla@columna 0059  

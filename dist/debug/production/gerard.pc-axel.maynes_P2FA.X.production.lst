

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Apr 01 16:17:59 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77   000000                     
    78                           ; Generated 05/12/2024 GMT
    79                           ; 
    80                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution. Publication is not required when
    94                           ;        this file is used in an embedded application.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4321 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112   000FE0                     bsr             equ	4064
   113   000FE9                     fsr0            equ	4073
   114   000FEA                     fsr0h           equ	4074
   115   000FE9                     fsr0l           equ	4073
   116   000FE1                     fsr1            equ	4065
   117   000FE2                     fsr1h           equ	4066
   118   000FE1                     fsr1l           equ	4065
   119   000FD9                     fsr2            equ	4057
   120   000FDA                     fsr2h           equ	4058
   121   000FD9                     fsr2l           equ	4057
   122   000FEF                     indf0           equ	4079
   123   000FE7                     indf1           equ	4071
   124   000FDF                     indf2           equ	4063
   125   000FF2                     intcon          equ	4082
   126   000000                     nvmcon          equ	0
   127   000FF9                     pcl             equ	4089
   128   000FFA                     pclath          equ	4090
   129   000FFB                     pclatu          equ	4091
   130   000FEB                     plusw0          equ	4075
   131   000FE3                     plusw1          equ	4067
   132   000FDB                     plusw2          equ	4059
   133   000FED                     postdec0        equ	4077
   134   000FE5                     postdec1        equ	4069
   135   000FDD                     postdec2        equ	4061
   136   000FEE                     postinc0        equ	4078
   137   000FE6                     postinc1        equ	4070
   138   000FDE                     postinc2        equ	4062
   139   000FEC                     preinc0         equ	4076
   140   000FE4                     preinc1         equ	4068
   141   000FDC                     preinc2         equ	4060
   142   000FF3                     prod            equ	4083
   143   000FF4                     prodh           equ	4084
   144   000FF3                     prodl           equ	4083
   145   000FD8                     status          equ	4056
   146   000FF5                     tablat          equ	4085
   147   000FF6                     tblptr          equ	4086
   148   000FF7                     tblptrh         equ	4087
   149   000FF6                     tblptrl         equ	4086
   150   000FF8                     tblptru         equ	4088
   151   000FFD                     tosl            equ	4093
   152   000FE8                     wreg            equ	4072
   153   000F80                     PORTA           equ	3968	;# 
   154   000F81                     PORTB           equ	3969	;# 
   155   000F82                     PORTC           equ	3970	;# 
   156   000F83                     PORTD           equ	3971	;# 
   157   000F84                     PORTE           equ	3972	;# 
   158   000F89                     LATA            equ	3977	;# 
   159   000F8A                     LATB            equ	3978	;# 
   160   000F8B                     LATC            equ	3979	;# 
   161   000F8C                     LATD            equ	3980	;# 
   162   000F8D                     LATE            equ	3981	;# 
   163   000F92                     TRISA           equ	3986	;# 
   164   000F92                     DDRA            equ	3986	;# 
   165   000F93                     TRISB           equ	3987	;# 
   166   000F93                     DDRB            equ	3987	;# 
   167   000F94                     TRISC           equ	3988	;# 
   168   000F94                     DDRC            equ	3988	;# 
   169   000F95                     TRISD           equ	3989	;# 
   170   000F95                     DDRD            equ	3989	;# 
   171   000F96                     TRISE           equ	3990	;# 
   172   000F96                     DDRE            equ	3990	;# 
   173   000F9B                     OSCTUNE         equ	3995	;# 
   174   000F9D                     PIE1            equ	3997	;# 
   175   000F9E                     PIR1            equ	3998	;# 
   176   000F9F                     IPR1            equ	3999	;# 
   177   000FA0                     PIE2            equ	4000	;# 
   178   000FA1                     PIR2            equ	4001	;# 
   179   000FA2                     IPR2            equ	4002	;# 
   180   000FA6                     EECON1          equ	4006	;# 
   181   000FA7                     EECON2          equ	4007	;# 
   182   000FA8                     EEDATA          equ	4008	;# 
   183   000FA9                     EEADR           equ	4009	;# 
   184   000FAB                     RCSTA           equ	4011	;# 
   185   000FAB                     RCSTA1          equ	4011	;# 
   186   000FAC                     TXSTA           equ	4012	;# 
   187   000FAC                     TXSTA1          equ	4012	;# 
   188   000FAD                     TXREG           equ	4013	;# 
   189   000FAD                     TXREG1          equ	4013	;# 
   190   000FAE                     RCREG           equ	4014	;# 
   191   000FAE                     RCREG1          equ	4014	;# 
   192   000FAF                     SPBRG           equ	4015	;# 
   193   000FAF                     SPBRG1          equ	4015	;# 
   194   000FB0                     SPBRGH          equ	4016	;# 
   195   000FB1                     T3CON           equ	4017	;# 
   196   000FB2                     TMR3            equ	4018	;# 
   197   000FB2                     TMR3L           equ	4018	;# 
   198   000FB3                     TMR3H           equ	4019	;# 
   199   000FB4                     CMCON           equ	4020	;# 
   200   000FB5                     CVRCON          equ	4021	;# 
   201   000FB6                     ECCP1AS         equ	4022	;# 
   202   000FB7                     ECCP1DEL        equ	4023	;# 
   203   000FB7                     PWM1CON         equ	4023	;# 
   204   000FB8                     BAUDCON         equ	4024	;# 
   205   000FB8                     BAUDCTL         equ	4024	;# 
   206   000FBA                     CCP2CON         equ	4026	;# 
   207   000FBB                     CCPR2           equ	4027	;# 
   208   000FBB                     CCPR2L          equ	4027	;# 
   209   000FBC                     CCPR2H          equ	4028	;# 
   210   000FBD                     CCP1CON         equ	4029	;# 
   211   000FBD                     ECCP1CON        equ	4029	;# 
   212   000FBE                     CCPR1           equ	4030	;# 
   213   000FBE                     CCPR1L          equ	4030	;# 
   214   000FBF                     CCPR1H          equ	4031	;# 
   215   000FC0                     ADCON2          equ	4032	;# 
   216   000FC1                     ADCON1          equ	4033	;# 
   217   000FC2                     ADCON0          equ	4034	;# 
   218   000FC3                     ADRES           equ	4035	;# 
   219   000FC3                     ADRESL          equ	4035	;# 
   220   000FC4                     ADRESH          equ	4036	;# 
   221   000FC5                     SSPCON2         equ	4037	;# 
   222   000FC6                     SSPCON1         equ	4038	;# 
   223   000FC7                     SSPSTAT         equ	4039	;# 
   224   000FC8                     SSPADD          equ	4040	;# 
   225   000FC9                     SSPBUF          equ	4041	;# 
   226   000FCA                     T2CON           equ	4042	;# 
   227   000FCB                     PR2             equ	4043	;# 
   228   000FCB                     MEMCON          equ	4043	;# 
   229   000FCC                     TMR2            equ	4044	;# 
   230   000FCD                     T1CON           equ	4045	;# 
   231   000FCE                     TMR1            equ	4046	;# 
   232   000FCE                     TMR1L           equ	4046	;# 
   233   000FCF                     TMR1H           equ	4047	;# 
   234   000FD0                     RCON            equ	4048	;# 
   235   000FD1                     WDTCON          equ	4049	;# 
   236   000FD2                     HLVDCON         equ	4050	;# 
   237   000FD2                     LVDCON          equ	4050	;# 
   238   000FD3                     OSCCON          equ	4051	;# 
   239   000FD5                     T0CON           equ	4053	;# 
   240   000FD6                     TMR0            equ	4054	;# 
   241   000FD6                     TMR0L           equ	4054	;# 
   242   000FD7                     TMR0H           equ	4055	;# 
   243   000FD8                     STATUS          equ	4056	;# 
   244   000FD9                     FSR2            equ	4057	;# 
   245   000FD9                     FSR2L           equ	4057	;# 
   246   000FDA                     FSR2H           equ	4058	;# 
   247   000FDB                     PLUSW2          equ	4059	;# 
   248   000FDC                     PREINC2         equ	4060	;# 
   249   000FDD                     POSTDEC2        equ	4061	;# 
   250   000FDE                     POSTINC2        equ	4062	;# 
   251   000FDF                     INDF2           equ	4063	;# 
   252   000FE0                     BSR             equ	4064	;# 
   253   000FE1                     FSR1            equ	4065	;# 
   254   000FE1                     FSR1L           equ	4065	;# 
   255   000FE2                     FSR1H           equ	4066	;# 
   256   000FE3                     PLUSW1          equ	4067	;# 
   257   000FE4                     PREINC1         equ	4068	;# 
   258   000FE5                     POSTDEC1        equ	4069	;# 
   259   000FE6                     POSTINC1        equ	4070	;# 
   260   000FE7                     INDF1           equ	4071	;# 
   261   000FE8                     WREG            equ	4072	;# 
   262   000FE9                     FSR0            equ	4073	;# 
   263   000FE9                     FSR0L           equ	4073	;# 
   264   000FEA                     FSR0H           equ	4074	;# 
   265   000FEB                     PLUSW0          equ	4075	;# 
   266   000FEC                     PREINC0         equ	4076	;# 
   267   000FED                     POSTDEC0        equ	4077	;# 
   268   000FEE                     POSTINC0        equ	4078	;# 
   269   000FEF                     INDF0           equ	4079	;# 
   270   000FF0                     INTCON3         equ	4080	;# 
   271   000FF1                     INTCON2         equ	4081	;# 
   272   000FF2                     INTCON          equ	4082	;# 
   273   000FF3                     PROD            equ	4083	;# 
   274   000FF3                     PRODL           equ	4083	;# 
   275   000FF4                     PRODH           equ	4084	;# 
   276   000FF5                     TABLAT          equ	4085	;# 
   277   000FF6                     TBLPTR          equ	4086	;# 
   278   000FF6                     TBLPTRL         equ	4086	;# 
   279   000FF7                     TBLPTRH         equ	4087	;# 
   280   000FF8                     TBLPTRU         equ	4088	;# 
   281   000FF9                     PCLAT           equ	4089	;# 
   282   000FF9                     PC              equ	4089	;# 
   283   000FF9                     PCL             equ	4089	;# 
   284   000FFA                     PCLATH          equ	4090	;# 
   285   000FFB                     PCLATU          equ	4091	;# 
   286   000FFC                     STKPTR          equ	4092	;# 
   287   000FFD                     TOS             equ	4093	;# 
   288   000FFD                     TOSL            equ	4093	;# 
   289   000FFE                     TOSH            equ	4094	;# 
   290   000FFF                     TOSU            equ	4095	;# 
   291   000F80                     PORTA           equ	3968	;# 
   292   000F81                     PORTB           equ	3969	;# 
   293   000F82                     PORTC           equ	3970	;# 
   294   000F83                     PORTD           equ	3971	;# 
   295   000F84                     PORTE           equ	3972	;# 
   296   000F89                     LATA            equ	3977	;# 
   297   000F8A                     LATB            equ	3978	;# 
   298   000F8B                     LATC            equ	3979	;# 
   299   000F8C                     LATD            equ	3980	;# 
   300   000F8D                     LATE            equ	3981	;# 
   301   000F92                     TRISA           equ	3986	;# 
   302   000F92                     DDRA            equ	3986	;# 
   303   000F93                     TRISB           equ	3987	;# 
   304   000F93                     DDRB            equ	3987	;# 
   305   000F94                     TRISC           equ	3988	;# 
   306   000F94                     DDRC            equ	3988	;# 
   307   000F95                     TRISD           equ	3989	;# 
   308   000F95                     DDRD            equ	3989	;# 
   309   000F96                     TRISE           equ	3990	;# 
   310   000F96                     DDRE            equ	3990	;# 
   311   000F9B                     OSCTUNE         equ	3995	;# 
   312   000F9D                     PIE1            equ	3997	;# 
   313   000F9E                     PIR1            equ	3998	;# 
   314   000F9F                     IPR1            equ	3999	;# 
   315   000FA0                     PIE2            equ	4000	;# 
   316   000FA1                     PIR2            equ	4001	;# 
   317   000FA2                     IPR2            equ	4002	;# 
   318   000FA6                     EECON1          equ	4006	;# 
   319   000FA7                     EECON2          equ	4007	;# 
   320   000FA8                     EEDATA          equ	4008	;# 
   321   000FA9                     EEADR           equ	4009	;# 
   322   000FAB                     RCSTA           equ	4011	;# 
   323   000FAB                     RCSTA1          equ	4011	;# 
   324   000FAC                     TXSTA           equ	4012	;# 
   325   000FAC                     TXSTA1          equ	4012	;# 
   326   000FAD                     TXREG           equ	4013	;# 
   327   000FAD                     TXREG1          equ	4013	;# 
   328   000FAE                     RCREG           equ	4014	;# 
   329   000FAE                     RCREG1          equ	4014	;# 
   330   000FAF                     SPBRG           equ	4015	;# 
   331   000FAF                     SPBRG1          equ	4015	;# 
   332   000FB0                     SPBRGH          equ	4016	;# 
   333   000FB1                     T3CON           equ	4017	;# 
   334   000FB2                     TMR3            equ	4018	;# 
   335   000FB2                     TMR3L           equ	4018	;# 
   336   000FB3                     TMR3H           equ	4019	;# 
   337   000FB4                     CMCON           equ	4020	;# 
   338   000FB5                     CVRCON          equ	4021	;# 
   339   000FB6                     ECCP1AS         equ	4022	;# 
   340   000FB7                     ECCP1DEL        equ	4023	;# 
   341   000FB7                     PWM1CON         equ	4023	;# 
   342   000FB8                     BAUDCON         equ	4024	;# 
   343   000FB8                     BAUDCTL         equ	4024	;# 
   344   000FBA                     CCP2CON         equ	4026	;# 
   345   000FBB                     CCPR2           equ	4027	;# 
   346   000FBB                     CCPR2L          equ	4027	;# 
   347   000FBC                     CCPR2H          equ	4028	;# 
   348   000FBD                     CCP1CON         equ	4029	;# 
   349   000FBD                     ECCP1CON        equ	4029	;# 
   350   000FBE                     CCPR1           equ	4030	;# 
   351   000FBE                     CCPR1L          equ	4030	;# 
   352   000FBF                     CCPR1H          equ	4031	;# 
   353   000FC0                     ADCON2          equ	4032	;# 
   354   000FC1                     ADCON1          equ	4033	;# 
   355   000FC2                     ADCON0          equ	4034	;# 
   356   000FC3                     ADRES           equ	4035	;# 
   357   000FC3                     ADRESL          equ	4035	;# 
   358   000FC4                     ADRESH          equ	4036	;# 
   359   000FC5                     SSPCON2         equ	4037	;# 
   360   000FC6                     SSPCON1         equ	4038	;# 
   361   000FC7                     SSPSTAT         equ	4039	;# 
   362   000FC8                     SSPADD          equ	4040	;# 
   363   000FC9                     SSPBUF          equ	4041	;# 
   364   000FCA                     T2CON           equ	4042	;# 
   365   000FCB                     PR2             equ	4043	;# 
   366   000FCB                     MEMCON          equ	4043	;# 
   367   000FCC                     TMR2            equ	4044	;# 
   368   000FCD                     T1CON           equ	4045	;# 
   369   000FCE                     TMR1            equ	4046	;# 
   370   000FCE                     TMR1L           equ	4046	;# 
   371   000FCF                     TMR1H           equ	4047	;# 
   372   000FD0                     RCON            equ	4048	;# 
   373   000FD1                     WDTCON          equ	4049	;# 
   374   000FD2                     HLVDCON         equ	4050	;# 
   375   000FD2                     LVDCON          equ	4050	;# 
   376   000FD3                     OSCCON          equ	4051	;# 
   377   000FD5                     T0CON           equ	4053	;# 
   378   000FD6                     TMR0            equ	4054	;# 
   379   000FD6                     TMR0L           equ	4054	;# 
   380   000FD7                     TMR0H           equ	4055	;# 
   381   000FD8                     STATUS          equ	4056	;# 
   382   000FD9                     FSR2            equ	4057	;# 
   383   000FD9                     FSR2L           equ	4057	;# 
   384   000FDA                     FSR2H           equ	4058	;# 
   385   000FDB                     PLUSW2          equ	4059	;# 
   386   000FDC                     PREINC2         equ	4060	;# 
   387   000FDD                     POSTDEC2        equ	4061	;# 
   388   000FDE                     POSTINC2        equ	4062	;# 
   389   000FDF                     INDF2           equ	4063	;# 
   390   000FE0                     BSR             equ	4064	;# 
   391   000FE1                     FSR1            equ	4065	;# 
   392   000FE1                     FSR1L           equ	4065	;# 
   393   000FE2                     FSR1H           equ	4066	;# 
   394   000FE3                     PLUSW1          equ	4067	;# 
   395   000FE4                     PREINC1         equ	4068	;# 
   396   000FE5                     POSTDEC1        equ	4069	;# 
   397   000FE6                     POSTINC1        equ	4070	;# 
   398   000FE7                     INDF1           equ	4071	;# 
   399   000FE8                     WREG            equ	4072	;# 
   400   000FE9                     FSR0            equ	4073	;# 
   401   000FE9                     FSR0L           equ	4073	;# 
   402   000FEA                     FSR0H           equ	4074	;# 
   403   000FEB                     PLUSW0          equ	4075	;# 
   404   000FEC                     PREINC0         equ	4076	;# 
   405   000FED                     POSTDEC0        equ	4077	;# 
   406   000FEE                     POSTINC0        equ	4078	;# 
   407   000FEF                     INDF0           equ	4079	;# 
   408   000FF0                     INTCON3         equ	4080	;# 
   409   000FF1                     INTCON2         equ	4081	;# 
   410   000FF2                     INTCON          equ	4082	;# 
   411   000FF3                     PROD            equ	4083	;# 
   412   000FF3                     PRODL           equ	4083	;# 
   413   000FF4                     PRODH           equ	4084	;# 
   414   000FF5                     TABLAT          equ	4085	;# 
   415   000FF6                     TBLPTR          equ	4086	;# 
   416   000FF6                     TBLPTRL         equ	4086	;# 
   417   000FF7                     TBLPTRH         equ	4087	;# 
   418   000FF8                     TBLPTRU         equ	4088	;# 
   419   000FF9                     PCLAT           equ	4089	;# 
   420   000FF9                     PC              equ	4089	;# 
   421   000FF9                     PCL             equ	4089	;# 
   422   000FFA                     PCLATH          equ	4090	;# 
   423   000FFB                     PCLATU          equ	4091	;# 
   424   000FFC                     STKPTR          equ	4092	;# 
   425   000FFD                     TOS             equ	4093	;# 
   426   000FFD                     TOSL            equ	4093	;# 
   427   000FFE                     TOSH            equ	4094	;# 
   428   000FFF                     TOSU            equ	4095	;# 
   429   000F80                     PORTA           equ	3968	;# 
   430   000F81                     PORTB           equ	3969	;# 
   431   000F82                     PORTC           equ	3970	;# 
   432   000F83                     PORTD           equ	3971	;# 
   433   000F84                     PORTE           equ	3972	;# 
   434   000F89                     LATA            equ	3977	;# 
   435   000F8A                     LATB            equ	3978	;# 
   436   000F8B                     LATC            equ	3979	;# 
   437   000F8C                     LATD            equ	3980	;# 
   438   000F8D                     LATE            equ	3981	;# 
   439   000F92                     TRISA           equ	3986	;# 
   440   000F92                     DDRA            equ	3986	;# 
   441   000F93                     TRISB           equ	3987	;# 
   442   000F93                     DDRB            equ	3987	;# 
   443   000F94                     TRISC           equ	3988	;# 
   444   000F94                     DDRC            equ	3988	;# 
   445   000F95                     TRISD           equ	3989	;# 
   446   000F95                     DDRD            equ	3989	;# 
   447   000F96                     TRISE           equ	3990	;# 
   448   000F96                     DDRE            equ	3990	;# 
   449   000F9B                     OSCTUNE         equ	3995	;# 
   450   000F9D                     PIE1            equ	3997	;# 
   451   000F9E                     PIR1            equ	3998	;# 
   452   000F9F                     IPR1            equ	3999	;# 
   453   000FA0                     PIE2            equ	4000	;# 
   454   000FA1                     PIR2            equ	4001	;# 
   455   000FA2                     IPR2            equ	4002	;# 
   456   000FA6                     EECON1          equ	4006	;# 
   457   000FA7                     EECON2          equ	4007	;# 
   458   000FA8                     EEDATA          equ	4008	;# 
   459   000FA9                     EEADR           equ	4009	;# 
   460   000FAB                     RCSTA           equ	4011	;# 
   461   000FAB                     RCSTA1          equ	4011	;# 
   462   000FAC                     TXSTA           equ	4012	;# 
   463   000FAC                     TXSTA1          equ	4012	;# 
   464   000FAD                     TXREG           equ	4013	;# 
   465   000FAD                     TXREG1          equ	4013	;# 
   466   000FAE                     RCREG           equ	4014	;# 
   467   000FAE                     RCREG1          equ	4014	;# 
   468   000FAF                     SPBRG           equ	4015	;# 
   469   000FAF                     SPBRG1          equ	4015	;# 
   470   000FB0                     SPBRGH          equ	4016	;# 
   471   000FB1                     T3CON           equ	4017	;# 
   472   000FB2                     TMR3            equ	4018	;# 
   473   000FB2                     TMR3L           equ	4018	;# 
   474   000FB3                     TMR3H           equ	4019	;# 
   475   000FB4                     CMCON           equ	4020	;# 
   476   000FB5                     CVRCON          equ	4021	;# 
   477   000FB6                     ECCP1AS         equ	4022	;# 
   478   000FB7                     ECCP1DEL        equ	4023	;# 
   479   000FB7                     PWM1CON         equ	4023	;# 
   480   000FB8                     BAUDCON         equ	4024	;# 
   481   000FB8                     BAUDCTL         equ	4024	;# 
   482   000FBA                     CCP2CON         equ	4026	;# 
   483   000FBB                     CCPR2           equ	4027	;# 
   484   000FBB                     CCPR2L          equ	4027	;# 
   485   000FBC                     CCPR2H          equ	4028	;# 
   486   000FBD                     CCP1CON         equ	4029	;# 
   487   000FBD                     ECCP1CON        equ	4029	;# 
   488   000FBE                     CCPR1           equ	4030	;# 
   489   000FBE                     CCPR1L          equ	4030	;# 
   490   000FBF                     CCPR1H          equ	4031	;# 
   491   000FC0                     ADCON2          equ	4032	;# 
   492   000FC1                     ADCON1          equ	4033	;# 
   493   000FC2                     ADCON0          equ	4034	;# 
   494   000FC3                     ADRES           equ	4035	;# 
   495   000FC3                     ADRESL          equ	4035	;# 
   496   000FC4                     ADRESH          equ	4036	;# 
   497   000FC5                     SSPCON2         equ	4037	;# 
   498   000FC6                     SSPCON1         equ	4038	;# 
   499   000FC7                     SSPSTAT         equ	4039	;# 
   500   000FC8                     SSPADD          equ	4040	;# 
   501   000FC9                     SSPBUF          equ	4041	;# 
   502   000FCA                     T2CON           equ	4042	;# 
   503   000FCB                     PR2             equ	4043	;# 
   504   000FCB                     MEMCON          equ	4043	;# 
   505   000FCC                     TMR2            equ	4044	;# 
   506   000FCD                     T1CON           equ	4045	;# 
   507   000FCE                     TMR1            equ	4046	;# 
   508   000FCE                     TMR1L           equ	4046	;# 
   509   000FCF                     TMR1H           equ	4047	;# 
   510   000FD0                     RCON            equ	4048	;# 
   511   000FD1                     WDTCON          equ	4049	;# 
   512   000FD2                     HLVDCON         equ	4050	;# 
   513   000FD2                     LVDCON          equ	4050	;# 
   514   000FD3                     OSCCON          equ	4051	;# 
   515   000FD5                     T0CON           equ	4053	;# 
   516   000FD6                     TMR0            equ	4054	;# 
   517   000FD6                     TMR0L           equ	4054	;# 
   518   000FD7                     TMR0H           equ	4055	;# 
   519   000FD8                     STATUS          equ	4056	;# 
   520   000FD9                     FSR2            equ	4057	;# 
   521   000FD9                     FSR2L           equ	4057	;# 
   522   000FDA                     FSR2H           equ	4058	;# 
   523   000FDB                     PLUSW2          equ	4059	;# 
   524   000FDC                     PREINC2         equ	4060	;# 
   525   000FDD                     POSTDEC2        equ	4061	;# 
   526   000FDE                     POSTINC2        equ	4062	;# 
   527   000FDF                     INDF2           equ	4063	;# 
   528   000FE0                     BSR             equ	4064	;# 
   529   000FE1                     FSR1            equ	4065	;# 
   530   000FE1                     FSR1L           equ	4065	;# 
   531   000FE2                     FSR1H           equ	4066	;# 
   532   000FE3                     PLUSW1          equ	4067	;# 
   533   000FE4                     PREINC1         equ	4068	;# 
   534   000FE5                     POSTDEC1        equ	4069	;# 
   535   000FE6                     POSTINC1        equ	4070	;# 
   536   000FE7                     INDF1           equ	4071	;# 
   537   000FE8                     WREG            equ	4072	;# 
   538   000FE9                     FSR0            equ	4073	;# 
   539   000FE9                     FSR0L           equ	4073	;# 
   540   000FEA                     FSR0H           equ	4074	;# 
   541   000FEB                     PLUSW0          equ	4075	;# 
   542   000FEC                     PREINC0         equ	4076	;# 
   543   000FED                     POSTDEC0        equ	4077	;# 
   544   000FEE                     POSTINC0        equ	4078	;# 
   545   000FEF                     INDF0           equ	4079	;# 
   546   000FF0                     INTCON3         equ	4080	;# 
   547   000FF1                     INTCON2         equ	4081	;# 
   548   000FF2                     INTCON          equ	4082	;# 
   549   000FF3                     PROD            equ	4083	;# 
   550   000FF3                     PRODL           equ	4083	;# 
   551   000FF4                     PRODH           equ	4084	;# 
   552   000FF5                     TABLAT          equ	4085	;# 
   553   000FF6                     TBLPTR          equ	4086	;# 
   554   000FF6                     TBLPTRL         equ	4086	;# 
   555   000FF7                     TBLPTRH         equ	4087	;# 
   556   000FF8                     TBLPTRU         equ	4088	;# 
   557   000FF9                     PCLAT           equ	4089	;# 
   558   000FF9                     PC              equ	4089	;# 
   559   000FF9                     PCL             equ	4089	;# 
   560   000FFA                     PCLATH          equ	4090	;# 
   561   000FFB                     PCLATU          equ	4091	;# 
   562   000FFC                     STKPTR          equ	4092	;# 
   563   000FFD                     TOS             equ	4093	;# 
   564   000FFD                     TOSL            equ	4093	;# 
   565   000FFE                     TOSH            equ	4094	;# 
   566   000FFF                     TOSU            equ	4095	;# 
   567   000F80                     PORTA           equ	3968	;# 
   568   000F81                     PORTB           equ	3969	;# 
   569   000F82                     PORTC           equ	3970	;# 
   570   000F83                     PORTD           equ	3971	;# 
   571   000F84                     PORTE           equ	3972	;# 
   572   000F89                     LATA            equ	3977	;# 
   573   000F8A                     LATB            equ	3978	;# 
   574   000F8B                     LATC            equ	3979	;# 
   575   000F8C                     LATD            equ	3980	;# 
   576   000F8D                     LATE            equ	3981	;# 
   577   000F92                     TRISA           equ	3986	;# 
   578   000F92                     DDRA            equ	3986	;# 
   579   000F93                     TRISB           equ	3987	;# 
   580   000F93                     DDRB            equ	3987	;# 
   581   000F94                     TRISC           equ	3988	;# 
   582   000F94                     DDRC            equ	3988	;# 
   583   000F95                     TRISD           equ	3989	;# 
   584   000F95                     DDRD            equ	3989	;# 
   585   000F96                     TRISE           equ	3990	;# 
   586   000F96                     DDRE            equ	3990	;# 
   587   000F9B                     OSCTUNE         equ	3995	;# 
   588   000F9D                     PIE1            equ	3997	;# 
   589   000F9E                     PIR1            equ	3998	;# 
   590   000F9F                     IPR1            equ	3999	;# 
   591   000FA0                     PIE2            equ	4000	;# 
   592   000FA1                     PIR2            equ	4001	;# 
   593   000FA2                     IPR2            equ	4002	;# 
   594   000FA6                     EECON1          equ	4006	;# 
   595   000FA7                     EECON2          equ	4007	;# 
   596   000FA8                     EEDATA          equ	4008	;# 
   597   000FA9                     EEADR           equ	4009	;# 
   598   000FAB                     RCSTA           equ	4011	;# 
   599   000FAB                     RCSTA1          equ	4011	;# 
   600   000FAC                     TXSTA           equ	4012	;# 
   601   000FAC                     TXSTA1          equ	4012	;# 
   602   000FAD                     TXREG           equ	4013	;# 
   603   000FAD                     TXREG1          equ	4013	;# 
   604   000FAE                     RCREG           equ	4014	;# 
   605   000FAE                     RCREG1          equ	4014	;# 
   606   000FAF                     SPBRG           equ	4015	;# 
   607   000FAF                     SPBRG1          equ	4015	;# 
   608   000FB0                     SPBRGH          equ	4016	;# 
   609   000FB1                     T3CON           equ	4017	;# 
   610   000FB2                     TMR3            equ	4018	;# 
   611   000FB2                     TMR3L           equ	4018	;# 
   612   000FB3                     TMR3H           equ	4019	;# 
   613   000FB4                     CMCON           equ	4020	;# 
   614   000FB5                     CVRCON          equ	4021	;# 
   615   000FB6                     ECCP1AS         equ	4022	;# 
   616   000FB7                     ECCP1DEL        equ	4023	;# 
   617   000FB7                     PWM1CON         equ	4023	;# 
   618   000FB8                     BAUDCON         equ	4024	;# 
   619   000FB8                     BAUDCTL         equ	4024	;# 
   620   000FBA                     CCP2CON         equ	4026	;# 
   621   000FBB                     CCPR2           equ	4027	;# 
   622   000FBB                     CCPR2L          equ	4027	;# 
   623   000FBC                     CCPR2H          equ	4028	;# 
   624   000FBD                     CCP1CON         equ	4029	;# 
   625   000FBD                     ECCP1CON        equ	4029	;# 
   626   000FBE                     CCPR1           equ	4030	;# 
   627   000FBE                     CCPR1L          equ	4030	;# 
   628   000FBF                     CCPR1H          equ	4031	;# 
   629   000FC0                     ADCON2          equ	4032	;# 
   630   000FC1                     ADCON1          equ	4033	;# 
   631   000FC2                     ADCON0          equ	4034	;# 
   632   000FC3                     ADRES           equ	4035	;# 
   633   000FC3                     ADRESL          equ	4035	;# 
   634   000FC4                     ADRESH          equ	4036	;# 
   635   000FC5                     SSPCON2         equ	4037	;# 
   636   000FC6                     SSPCON1         equ	4038	;# 
   637   000FC7                     SSPSTAT         equ	4039	;# 
   638   000FC8                     SSPADD          equ	4040	;# 
   639   000FC9                     SSPBUF          equ	4041	;# 
   640   000FCA                     T2CON           equ	4042	;# 
   641   000FCB                     PR2             equ	4043	;# 
   642   000FCB                     MEMCON          equ	4043	;# 
   643   000FCC                     TMR2            equ	4044	;# 
   644   000FCD                     T1CON           equ	4045	;# 
   645   000FCE                     TMR1            equ	4046	;# 
   646   000FCE                     TMR1L           equ	4046	;# 
   647   000FCF                     TMR1H           equ	4047	;# 
   648   000FD0                     RCON            equ	4048	;# 
   649   000FD1                     WDTCON          equ	4049	;# 
   650   000FD2                     HLVDCON         equ	4050	;# 
   651   000FD2                     LVDCON          equ	4050	;# 
   652   000FD3                     OSCCON          equ	4051	;# 
   653   000FD5                     T0CON           equ	4053	;# 
   654   000FD6                     TMR0            equ	4054	;# 
   655   000FD6                     TMR0L           equ	4054	;# 
   656   000FD7                     TMR0H           equ	4055	;# 
   657   000FD8                     STATUS          equ	4056	;# 
   658   000FD9                     FSR2            equ	4057	;# 
   659   000FD9                     FSR2L           equ	4057	;# 
   660   000FDA                     FSR2H           equ	4058	;# 
   661   000FDB                     PLUSW2          equ	4059	;# 
   662   000FDC                     PREINC2         equ	4060	;# 
   663   000FDD                     POSTDEC2        equ	4061	;# 
   664   000FDE                     POSTINC2        equ	4062	;# 
   665   000FDF                     INDF2           equ	4063	;# 
   666   000FE0                     BSR             equ	4064	;# 
   667   000FE1                     FSR1            equ	4065	;# 
   668   000FE1                     FSR1L           equ	4065	;# 
   669   000FE2                     FSR1H           equ	4066	;# 
   670   000FE3                     PLUSW1          equ	4067	;# 
   671   000FE4                     PREINC1         equ	4068	;# 
   672   000FE5                     POSTDEC1        equ	4069	;# 
   673   000FE6                     POSTINC1        equ	4070	;# 
   674   000FE7                     INDF1           equ	4071	;# 
   675   000FE8                     WREG            equ	4072	;# 
   676   000FE9                     FSR0            equ	4073	;# 
   677   000FE9                     FSR0L           equ	4073	;# 
   678   000FEA                     FSR0H           equ	4074	;# 
   679   000FEB                     PLUSW0          equ	4075	;# 
   680   000FEC                     PREINC0         equ	4076	;# 
   681   000FED                     POSTDEC0        equ	4077	;# 
   682   000FEE                     POSTINC0        equ	4078	;# 
   683   000FEF                     INDF0           equ	4079	;# 
   684   000FF0                     INTCON3         equ	4080	;# 
   685   000FF1                     INTCON2         equ	4081	;# 
   686   000FF2                     INTCON          equ	4082	;# 
   687   000FF3                     PROD            equ	4083	;# 
   688   000FF3                     PRODL           equ	4083	;# 
   689   000FF4                     PRODH           equ	4084	;# 
   690   000FF5                     TABLAT          equ	4085	;# 
   691   000FF6                     TBLPTR          equ	4086	;# 
   692   000FF6                     TBLPTRL         equ	4086	;# 
   693   000FF7                     TBLPTRH         equ	4087	;# 
   694   000FF8                     TBLPTRU         equ	4088	;# 
   695   000FF9                     PCLAT           equ	4089	;# 
   696   000FF9                     PC              equ	4089	;# 
   697   000FF9                     PCL             equ	4089	;# 
   698   000FFA                     PCLATH          equ	4090	;# 
   699   000FFB                     PCLATU          equ	4091	;# 
   700   000FFC                     STKPTR          equ	4092	;# 
   701   000FFD                     TOS             equ	4093	;# 
   702   000FFD                     TOSL            equ	4093	;# 
   703   000FFE                     TOSH            equ	4094	;# 
   704   000FFF                     TOSU            equ	4095	;# 
   705   000F80                     PORTA           equ	3968	;# 
   706   000F81                     PORTB           equ	3969	;# 
   707   000F82                     PORTC           equ	3970	;# 
   708   000F83                     PORTD           equ	3971	;# 
   709   000F84                     PORTE           equ	3972	;# 
   710   000F89                     LATA            equ	3977	;# 
   711   000F8A                     LATB            equ	3978	;# 
   712   000F8B                     LATC            equ	3979	;# 
   713   000F8C                     LATD            equ	3980	;# 
   714   000F8D                     LATE            equ	3981	;# 
   715   000F92                     TRISA           equ	3986	;# 
   716   000F92                     DDRA            equ	3986	;# 
   717   000F93                     TRISB           equ	3987	;# 
   718   000F93                     DDRB            equ	3987	;# 
   719   000F94                     TRISC           equ	3988	;# 
   720   000F94                     DDRC            equ	3988	;# 
   721   000F95                     TRISD           equ	3989	;# 
   722   000F95                     DDRD            equ	3989	;# 
   723   000F96                     TRISE           equ	3990	;# 
   724   000F96                     DDRE            equ	3990	;# 
   725   000F9B                     OSCTUNE         equ	3995	;# 
   726   000F9D                     PIE1            equ	3997	;# 
   727   000F9E                     PIR1            equ	3998	;# 
   728   000F9F                     IPR1            equ	3999	;# 
   729   000FA0                     PIE2            equ	4000	;# 
   730   000FA1                     PIR2            equ	4001	;# 
   731   000FA2                     IPR2            equ	4002	;# 
   732   000FA6                     EECON1          equ	4006	;# 
   733   000FA7                     EECON2          equ	4007	;# 
   734   000FA8                     EEDATA          equ	4008	;# 
   735   000FA9                     EEADR           equ	4009	;# 
   736   000FAB                     RCSTA           equ	4011	;# 
   737   000FAB                     RCSTA1          equ	4011	;# 
   738   000FAC                     TXSTA           equ	4012	;# 
   739   000FAC                     TXSTA1          equ	4012	;# 
   740   000FAD                     TXREG           equ	4013	;# 
   741   000FAD                     TXREG1          equ	4013	;# 
   742   000FAE                     RCREG           equ	4014	;# 
   743   000FAE                     RCREG1          equ	4014	;# 
   744   000FAF                     SPBRG           equ	4015	;# 
   745   000FAF                     SPBRG1          equ	4015	;# 
   746   000FB0                     SPBRGH          equ	4016	;# 
   747   000FB1                     T3CON           equ	4017	;# 
   748   000FB2                     TMR3            equ	4018	;# 
   749   000FB2                     TMR3L           equ	4018	;# 
   750   000FB3                     TMR3H           equ	4019	;# 
   751   000FB4                     CMCON           equ	4020	;# 
   752   000FB5                     CVRCON          equ	4021	;# 
   753   000FB6                     ECCP1AS         equ	4022	;# 
   754   000FB7                     ECCP1DEL        equ	4023	;# 
   755   000FB7                     PWM1CON         equ	4023	;# 
   756   000FB8                     BAUDCON         equ	4024	;# 
   757   000FB8                     BAUDCTL         equ	4024	;# 
   758   000FBA                     CCP2CON         equ	4026	;# 
   759   000FBB                     CCPR2           equ	4027	;# 
   760   000FBB                     CCPR2L          equ	4027	;# 
   761   000FBC                     CCPR2H          equ	4028	;# 
   762   000FBD                     CCP1CON         equ	4029	;# 
   763   000FBD                     ECCP1CON        equ	4029	;# 
   764   000FBE                     CCPR1           equ	4030	;# 
   765   000FBE                     CCPR1L          equ	4030	;# 
   766   000FBF                     CCPR1H          equ	4031	;# 
   767   000FC0                     ADCON2          equ	4032	;# 
   768   000FC1                     ADCON1          equ	4033	;# 
   769   000FC2                     ADCON0          equ	4034	;# 
   770   000FC3                     ADRES           equ	4035	;# 
   771   000FC3                     ADRESL          equ	4035	;# 
   772   000FC4                     ADRESH          equ	4036	;# 
   773   000FC5                     SSPCON2         equ	4037	;# 
   774   000FC6                     SSPCON1         equ	4038	;# 
   775   000FC7                     SSPSTAT         equ	4039	;# 
   776   000FC8                     SSPADD          equ	4040	;# 
   777   000FC9                     SSPBUF          equ	4041	;# 
   778   000FCA                     T2CON           equ	4042	;# 
   779   000FCB                     PR2             equ	4043	;# 
   780   000FCB                     MEMCON          equ	4043	;# 
   781   000FCC                     TMR2            equ	4044	;# 
   782   000FCD                     T1CON           equ	4045	;# 
   783   000FCE                     TMR1            equ	4046	;# 
   784   000FCE                     TMR1L           equ	4046	;# 
   785   000FCF                     TMR1H           equ	4047	;# 
   786   000FD0                     RCON            equ	4048	;# 
   787   000FD1                     WDTCON          equ	4049	;# 
   788   000FD2                     HLVDCON         equ	4050	;# 
   789   000FD2                     LVDCON          equ	4050	;# 
   790   000FD3                     OSCCON          equ	4051	;# 
   791   000FD5                     T0CON           equ	4053	;# 
   792   000FD6                     TMR0            equ	4054	;# 
   793   000FD6                     TMR0L           equ	4054	;# 
   794   000FD7                     TMR0H           equ	4055	;# 
   795   000FD8                     STATUS          equ	4056	;# 
   796   000FD9                     FSR2            equ	4057	;# 
   797   000FD9                     FSR2L           equ	4057	;# 
   798   000FDA                     FSR2H           equ	4058	;# 
   799   000FDB                     PLUSW2          equ	4059	;# 
   800   000FDC                     PREINC2         equ	4060	;# 
   801   000FDD                     POSTDEC2        equ	4061	;# 
   802   000FDE                     POSTINC2        equ	4062	;# 
   803   000FDF                     INDF2           equ	4063	;# 
   804   000FE0                     BSR             equ	4064	;# 
   805   000FE1                     FSR1            equ	4065	;# 
   806   000FE1                     FSR1L           equ	4065	;# 
   807   000FE2                     FSR1H           equ	4066	;# 
   808   000FE3                     PLUSW1          equ	4067	;# 
   809   000FE4                     PREINC1         equ	4068	;# 
   810   000FE5                     POSTDEC1        equ	4069	;# 
   811   000FE6                     POSTINC1        equ	4070	;# 
   812   000FE7                     INDF1           equ	4071	;# 
   813   000FE8                     WREG            equ	4072	;# 
   814   000FE9                     FSR0            equ	4073	;# 
   815   000FE9                     FSR0L           equ	4073	;# 
   816   000FEA                     FSR0H           equ	4074	;# 
   817   000FEB                     PLUSW0          equ	4075	;# 
   818   000FEC                     PREINC0         equ	4076	;# 
   819   000FED                     POSTDEC0        equ	4077	;# 
   820   000FEE                     POSTINC0        equ	4078	;# 
   821   000FEF                     INDF0           equ	4079	;# 
   822   000FF0                     INTCON3         equ	4080	;# 
   823   000FF1                     INTCON2         equ	4081	;# 
   824   000FF2                     INTCON          equ	4082	;# 
   825   000FF3                     PROD            equ	4083	;# 
   826   000FF3                     PRODL           equ	4083	;# 
   827   000FF4                     PRODH           equ	4084	;# 
   828   000FF5                     TABLAT          equ	4085	;# 
   829   000FF6                     TBLPTR          equ	4086	;# 
   830   000FF6                     TBLPTRL         equ	4086	;# 
   831   000FF7                     TBLPTRH         equ	4087	;# 
   832   000FF8                     TBLPTRU         equ	4088	;# 
   833   000FF9                     PCLAT           equ	4089	;# 
   834   000FF9                     PC              equ	4089	;# 
   835   000FF9                     PCL             equ	4089	;# 
   836   000FFA                     PCLATH          equ	4090	;# 
   837   000FFB                     PCLATU          equ	4091	;# 
   838   000FFC                     STKPTR          equ	4092	;# 
   839   000FFD                     TOS             equ	4093	;# 
   840   000FFD                     TOSL            equ	4093	;# 
   841   000FFE                     TOSH            equ	4094	;# 
   842   000FFF                     TOSU            equ	4095	;# 
   843   000F80                     PORTA           equ	3968	;# 
   844   000F81                     PORTB           equ	3969	;# 
   845   000F82                     PORTC           equ	3970	;# 
   846   000F83                     PORTD           equ	3971	;# 
   847   000F84                     PORTE           equ	3972	;# 
   848   000F89                     LATA            equ	3977	;# 
   849   000F8A                     LATB            equ	3978	;# 
   850   000F8B                     LATC            equ	3979	;# 
   851   000F8C                     LATD            equ	3980	;# 
   852   000F8D                     LATE            equ	3981	;# 
   853   000F92                     TRISA           equ	3986	;# 
   854   000F92                     DDRA            equ	3986	;# 
   855   000F93                     TRISB           equ	3987	;# 
   856   000F93                     DDRB            equ	3987	;# 
   857   000F94                     TRISC           equ	3988	;# 
   858   000F94                     DDRC            equ	3988	;# 
   859   000F95                     TRISD           equ	3989	;# 
   860   000F95                     DDRD            equ	3989	;# 
   861   000F96                     TRISE           equ	3990	;# 
   862   000F96                     DDRE            equ	3990	;# 
   863   000F9B                     OSCTUNE         equ	3995	;# 
   864   000F9D                     PIE1            equ	3997	;# 
   865   000F9E                     PIR1            equ	3998	;# 
   866   000F9F                     IPR1            equ	3999	;# 
   867   000FA0                     PIE2            equ	4000	;# 
   868   000FA1                     PIR2            equ	4001	;# 
   869   000FA2                     IPR2            equ	4002	;# 
   870   000FA6                     EECON1          equ	4006	;# 
   871   000FA7                     EECON2          equ	4007	;# 
   872   000FA8                     EEDATA          equ	4008	;# 
   873   000FA9                     EEADR           equ	4009	;# 
   874   000FAB                     RCSTA           equ	4011	;# 
   875   000FAB                     RCSTA1          equ	4011	;# 
   876   000FAC                     TXSTA           equ	4012	;# 
   877   000FAC                     TXSTA1          equ	4012	;# 
   878   000FAD                     TXREG           equ	4013	;# 
   879   000FAD                     TXREG1          equ	4013	;# 
   880   000FAE                     RCREG           equ	4014	;# 
   881   000FAE                     RCREG1          equ	4014	;# 
   882   000FAF                     SPBRG           equ	4015	;# 
   883   000FAF                     SPBRG1          equ	4015	;# 
   884   000FB0                     SPBRGH          equ	4016	;# 
   885   000FB1                     T3CON           equ	4017	;# 
   886   000FB2                     TMR3            equ	4018	;# 
   887   000FB2                     TMR3L           equ	4018	;# 
   888   000FB3                     TMR3H           equ	4019	;# 
   889   000FB4                     CMCON           equ	4020	;# 
   890   000FB5                     CVRCON          equ	4021	;# 
   891   000FB6                     ECCP1AS         equ	4022	;# 
   892   000FB7                     ECCP1DEL        equ	4023	;# 
   893   000FB7                     PWM1CON         equ	4023	;# 
   894   000FB8                     BAUDCON         equ	4024	;# 
   895   000FB8                     BAUDCTL         equ	4024	;# 
   896   000FBA                     CCP2CON         equ	4026	;# 
   897   000FBB                     CCPR2           equ	4027	;# 
   898   000FBB                     CCPR2L          equ	4027	;# 
   899   000FBC                     CCPR2H          equ	4028	;# 
   900   000FBD                     CCP1CON         equ	4029	;# 
   901   000FBD                     ECCP1CON        equ	4029	;# 
   902   000FBE                     CCPR1           equ	4030	;# 
   903   000FBE                     CCPR1L          equ	4030	;# 
   904   000FBF                     CCPR1H          equ	4031	;# 
   905   000FC0                     ADCON2          equ	4032	;# 
   906   000FC1                     ADCON1          equ	4033	;# 
   907   000FC2                     ADCON0          equ	4034	;# 
   908   000FC3                     ADRES           equ	4035	;# 
   909   000FC3                     ADRESL          equ	4035	;# 
   910   000FC4                     ADRESH          equ	4036	;# 
   911   000FC5                     SSPCON2         equ	4037	;# 
   912   000FC6                     SSPCON1         equ	4038	;# 
   913   000FC7                     SSPSTAT         equ	4039	;# 
   914   000FC8                     SSPADD          equ	4040	;# 
   915   000FC9                     SSPBUF          equ	4041	;# 
   916   000FCA                     T2CON           equ	4042	;# 
   917   000FCB                     PR2             equ	4043	;# 
   918   000FCB                     MEMCON          equ	4043	;# 
   919   000FCC                     TMR2            equ	4044	;# 
   920   000FCD                     T1CON           equ	4045	;# 
   921   000FCE                     TMR1            equ	4046	;# 
   922   000FCE                     TMR1L           equ	4046	;# 
   923   000FCF                     TMR1H           equ	4047	;# 
   924   000FD0                     RCON            equ	4048	;# 
   925   000FD1                     WDTCON          equ	4049	;# 
   926   000FD2                     HLVDCON         equ	4050	;# 
   927   000FD2                     LVDCON          equ	4050	;# 
   928   000FD3                     OSCCON          equ	4051	;# 
   929   000FD5                     T0CON           equ	4053	;# 
   930   000FD6                     TMR0            equ	4054	;# 
   931   000FD6                     TMR0L           equ	4054	;# 
   932   000FD7                     TMR0H           equ	4055	;# 
   933   000FD8                     STATUS          equ	4056	;# 
   934   000FD9                     FSR2            equ	4057	;# 
   935   000FD9                     FSR2L           equ	4057	;# 
   936   000FDA                     FSR2H           equ	4058	;# 
   937   000FDB                     PLUSW2          equ	4059	;# 
   938   000FDC                     PREINC2         equ	4060	;# 
   939   000FDD                     POSTDEC2        equ	4061	;# 
   940   000FDE                     POSTINC2        equ	4062	;# 
   941   000FDF                     INDF2           equ	4063	;# 
   942   000FE0                     BSR             equ	4064	;# 
   943   000FE1                     FSR1            equ	4065	;# 
   944   000FE1                     FSR1L           equ	4065	;# 
   945   000FE2                     FSR1H           equ	4066	;# 
   946   000FE3                     PLUSW1          equ	4067	;# 
   947   000FE4                     PREINC1         equ	4068	;# 
   948   000FE5                     POSTDEC1        equ	4069	;# 
   949   000FE6                     POSTINC1        equ	4070	;# 
   950   000FE7                     INDF1           equ	4071	;# 
   951   000FE8                     WREG            equ	4072	;# 
   952   000FE9                     FSR0            equ	4073	;# 
   953   000FE9                     FSR0L           equ	4073	;# 
   954   000FEA                     FSR0H           equ	4074	;# 
   955   000FEB                     PLUSW0          equ	4075	;# 
   956   000FEC                     PREINC0         equ	4076	;# 
   957   000FED                     POSTDEC0        equ	4077	;# 
   958   000FEE                     POSTINC0        equ	4078	;# 
   959   000FEF                     INDF0           equ	4079	;# 
   960   000FF0                     INTCON3         equ	4080	;# 
   961   000FF1                     INTCON2         equ	4081	;# 
   962   000FF2                     INTCON          equ	4082	;# 
   963   000FF3                     PROD            equ	4083	;# 
   964   000FF3                     PRODL           equ	4083	;# 
   965   000FF4                     PRODH           equ	4084	;# 
   966   000FF5                     TABLAT          equ	4085	;# 
   967   000FF6                     TBLPTR          equ	4086	;# 
   968   000FF6                     TBLPTRL         equ	4086	;# 
   969   000FF7                     TBLPTRH         equ	4087	;# 
   970   000FF8                     TBLPTRU         equ	4088	;# 
   971   000FF9                     PCLAT           equ	4089	;# 
   972   000FF9                     PC              equ	4089	;# 
   973   000FF9                     PCL             equ	4089	;# 
   974   000FFA                     PCLATH          equ	4090	;# 
   975   000FFB                     PCLATU          equ	4091	;# 
   976   000FFC                     STKPTR          equ	4092	;# 
   977   000FFD                     TOS             equ	4093	;# 
   978   000FFD                     TOSL            equ	4093	;# 
   979   000FFE                     TOSH            equ	4094	;# 
   980   000FFF                     TOSU            equ	4095	;# 
   981   000F80                     PORTA           equ	3968	;# 
   982   000F81                     PORTB           equ	3969	;# 
   983   000F82                     PORTC           equ	3970	;# 
   984   000F83                     PORTD           equ	3971	;# 
   985   000F84                     PORTE           equ	3972	;# 
   986   000F89                     LATA            equ	3977	;# 
   987   000F8A                     LATB            equ	3978	;# 
   988   000F8B                     LATC            equ	3979	;# 
   989   000F8C                     LATD            equ	3980	;# 
   990   000F8D                     LATE            equ	3981	;# 
   991   000F92                     TRISA           equ	3986	;# 
   992   000F92                     DDRA            equ	3986	;# 
   993   000F93                     TRISB           equ	3987	;# 
   994   000F93                     DDRB            equ	3987	;# 
   995   000F94                     TRISC           equ	3988	;# 
   996   000F94                     DDRC            equ	3988	;# 
   997   000F95                     TRISD           equ	3989	;# 
   998   000F95                     DDRD            equ	3989	;# 
   999   000F96                     TRISE           equ	3990	;# 
  1000   000F96                     DDRE            equ	3990	;# 
  1001   000F9B                     OSCTUNE         equ	3995	;# 
  1002   000F9D                     PIE1            equ	3997	;# 
  1003   000F9E                     PIR1            equ	3998	;# 
  1004   000F9F                     IPR1            equ	3999	;# 
  1005   000FA0                     PIE2            equ	4000	;# 
  1006   000FA1                     PIR2            equ	4001	;# 
  1007   000FA2                     IPR2            equ	4002	;# 
  1008   000FA6                     EECON1          equ	4006	;# 
  1009   000FA7                     EECON2          equ	4007	;# 
  1010   000FA8                     EEDATA          equ	4008	;# 
  1011   000FA9                     EEADR           equ	4009	;# 
  1012   000FAB                     RCSTA           equ	4011	;# 
  1013   000FAB                     RCSTA1          equ	4011	;# 
  1014   000FAC                     TXSTA           equ	4012	;# 
  1015   000FAC                     TXSTA1          equ	4012	;# 
  1016   000FAD                     TXREG           equ	4013	;# 
  1017   000FAD                     TXREG1          equ	4013	;# 
  1018   000FAE                     RCREG           equ	4014	;# 
  1019   000FAE                     RCREG1          equ	4014	;# 
  1020   000FAF                     SPBRG           equ	4015	;# 
  1021   000FAF                     SPBRG1          equ	4015	;# 
  1022   000FB0                     SPBRGH          equ	4016	;# 
  1023   000FB1                     T3CON           equ	4017	;# 
  1024   000FB2                     TMR3            equ	4018	;# 
  1025   000FB2                     TMR3L           equ	4018	;# 
  1026   000FB3                     TMR3H           equ	4019	;# 
  1027   000FB4                     CMCON           equ	4020	;# 
  1028   000FB5                     CVRCON          equ	4021	;# 
  1029   000FB6                     ECCP1AS         equ	4022	;# 
  1030   000FB7                     ECCP1DEL        equ	4023	;# 
  1031   000FB7                     PWM1CON         equ	4023	;# 
  1032   000FB8                     BAUDCON         equ	4024	;# 
  1033   000FB8                     BAUDCTL         equ	4024	;# 
  1034   000FBA                     CCP2CON         equ	4026	;# 
  1035   000FBB                     CCPR2           equ	4027	;# 
  1036   000FBB                     CCPR2L          equ	4027	;# 
  1037   000FBC                     CCPR2H          equ	4028	;# 
  1038   000FBD                     CCP1CON         equ	4029	;# 
  1039   000FBD                     ECCP1CON        equ	4029	;# 
  1040   000FBE                     CCPR1           equ	4030	;# 
  1041   000FBE                     CCPR1L          equ	4030	;# 
  1042   000FBF                     CCPR1H          equ	4031	;# 
  1043   000FC0                     ADCON2          equ	4032	;# 
  1044   000FC1                     ADCON1          equ	4033	;# 
  1045   000FC2                     ADCON0          equ	4034	;# 
  1046   000FC3                     ADRES           equ	4035	;# 
  1047   000FC3                     ADRESL          equ	4035	;# 
  1048   000FC4                     ADRESH          equ	4036	;# 
  1049   000FC5                     SSPCON2         equ	4037	;# 
  1050   000FC6                     SSPCON1         equ	4038	;# 
  1051   000FC7                     SSPSTAT         equ	4039	;# 
  1052   000FC8                     SSPADD          equ	4040	;# 
  1053   000FC9                     SSPBUF          equ	4041	;# 
  1054   000FCA                     T2CON           equ	4042	;# 
  1055   000FCB                     PR2             equ	4043	;# 
  1056   000FCB                     MEMCON          equ	4043	;# 
  1057   000FCC                     TMR2            equ	4044	;# 
  1058   000FCD                     T1CON           equ	4045	;# 
  1059   000FCE                     TMR1            equ	4046	;# 
  1060   000FCE                     TMR1L           equ	4046	;# 
  1061   000FCF                     TMR1H           equ	4047	;# 
  1062   000FD0                     RCON            equ	4048	;# 
  1063   000FD1                     WDTCON          equ	4049	;# 
  1064   000FD2                     HLVDCON         equ	4050	;# 
  1065   000FD2                     LVDCON          equ	4050	;# 
  1066   000FD3                     OSCCON          equ	4051	;# 
  1067   000FD5                     T0CON           equ	4053	;# 
  1068   000FD6                     TMR0            equ	4054	;# 
  1069   000FD6                     TMR0L           equ	4054	;# 
  1070   000FD7                     TMR0H           equ	4055	;# 
  1071   000FD8                     STATUS          equ	4056	;# 
  1072   000FD9                     FSR2            equ	4057	;# 
  1073   000FD9                     FSR2L           equ	4057	;# 
  1074   000FDA                     FSR2H           equ	4058	;# 
  1075   000FDB                     PLUSW2          equ	4059	;# 
  1076   000FDC                     PREINC2         equ	4060	;# 
  1077   000FDD                     POSTDEC2        equ	4061	;# 
  1078   000FDE                     POSTINC2        equ	4062	;# 
  1079   000FDF                     INDF2           equ	4063	;# 
  1080   000FE0                     BSR             equ	4064	;# 
  1081   000FE1                     FSR1            equ	4065	;# 
  1082   000FE1                     FSR1L           equ	4065	;# 
  1083   000FE2                     FSR1H           equ	4066	;# 
  1084   000FE3                     PLUSW1          equ	4067	;# 
  1085   000FE4                     PREINC1         equ	4068	;# 
  1086   000FE5                     POSTDEC1        equ	4069	;# 
  1087   000FE6                     POSTINC1        equ	4070	;# 
  1088   000FE7                     INDF1           equ	4071	;# 
  1089   000FE8                     WREG            equ	4072	;# 
  1090   000FE9                     FSR0            equ	4073	;# 
  1091   000FE9                     FSR0L           equ	4073	;# 
  1092   000FEA                     FSR0H           equ	4074	;# 
  1093   000FEB                     PLUSW0          equ	4075	;# 
  1094   000FEC                     PREINC0         equ	4076	;# 
  1095   000FED                     POSTDEC0        equ	4077	;# 
  1096   000FEE                     POSTINC0        equ	4078	;# 
  1097   000FEF                     INDF0           equ	4079	;# 
  1098   000FF0                     INTCON3         equ	4080	;# 
  1099   000FF1                     INTCON2         equ	4081	;# 
  1100   000FF2                     INTCON          equ	4082	;# 
  1101   000FF3                     PROD            equ	4083	;# 
  1102   000FF3                     PRODL           equ	4083	;# 
  1103   000FF4                     PRODH           equ	4084	;# 
  1104   000FF5                     TABLAT          equ	4085	;# 
  1105   000FF6                     TBLPTR          equ	4086	;# 
  1106   000FF6                     TBLPTRL         equ	4086	;# 
  1107   000FF7                     TBLPTRH         equ	4087	;# 
  1108   000FF8                     TBLPTRU         equ	4088	;# 
  1109   000FF9                     PCLAT           equ	4089	;# 
  1110   000FF9                     PC              equ	4089	;# 
  1111   000FF9                     PCL             equ	4089	;# 
  1112   000FFA                     PCLATH          equ	4090	;# 
  1113   000FFB                     PCLATU          equ	4091	;# 
  1114   000FFC                     STKPTR          equ	4092	;# 
  1115   000FFD                     TOS             equ	4093	;# 
  1116   000FFD                     TOSL            equ	4093	;# 
  1117   000FFE                     TOSH            equ	4094	;# 
  1118   000FFF                     TOSU            equ	4095	;# 
  1119   000F80                     PORTA           equ	3968	;# 
  1120   000F81                     PORTB           equ	3969	;# 
  1121   000F82                     PORTC           equ	3970	;# 
  1122   000F83                     PORTD           equ	3971	;# 
  1123   000F84                     PORTE           equ	3972	;# 
  1124   000F89                     LATA            equ	3977	;# 
  1125   000F8A                     LATB            equ	3978	;# 
  1126   000F8B                     LATC            equ	3979	;# 
  1127   000F8C                     LATD            equ	3980	;# 
  1128   000F8D                     LATE            equ	3981	;# 
  1129   000F92                     TRISA           equ	3986	;# 
  1130   000F92                     DDRA            equ	3986	;# 
  1131   000F93                     TRISB           equ	3987	;# 
  1132   000F93                     DDRB            equ	3987	;# 
  1133   000F94                     TRISC           equ	3988	;# 
  1134   000F94                     DDRC            equ	3988	;# 
  1135   000F95                     TRISD           equ	3989	;# 
  1136   000F95                     DDRD            equ	3989	;# 
  1137   000F96                     TRISE           equ	3990	;# 
  1138   000F96                     DDRE            equ	3990	;# 
  1139   000F9B                     OSCTUNE         equ	3995	;# 
  1140   000F9D                     PIE1            equ	3997	;# 
  1141   000F9E                     PIR1            equ	3998	;# 
  1142   000F9F                     IPR1            equ	3999	;# 
  1143   000FA0                     PIE2            equ	4000	;# 
  1144   000FA1                     PIR2            equ	4001	;# 
  1145   000FA2                     IPR2            equ	4002	;# 
  1146   000FA6                     EECON1          equ	4006	;# 
  1147   000FA7                     EECON2          equ	4007	;# 
  1148   000FA8                     EEDATA          equ	4008	;# 
  1149   000FA9                     EEADR           equ	4009	;# 
  1150   000FAB                     RCSTA           equ	4011	;# 
  1151   000FAB                     RCSTA1          equ	4011	;# 
  1152   000FAC                     TXSTA           equ	4012	;# 
  1153   000FAC                     TXSTA1          equ	4012	;# 
  1154   000FAD                     TXREG           equ	4013	;# 
  1155   000FAD                     TXREG1          equ	4013	;# 
  1156   000FAE                     RCREG           equ	4014	;# 
  1157   000FAE                     RCREG1          equ	4014	;# 
  1158   000FAF                     SPBRG           equ	4015	;# 
  1159   000FAF                     SPBRG1          equ	4015	;# 
  1160   000FB0                     SPBRGH          equ	4016	;# 
  1161   000FB1                     T3CON           equ	4017	;# 
  1162   000FB2                     TMR3            equ	4018	;# 
  1163   000FB2                     TMR3L           equ	4018	;# 
  1164   000FB3                     TMR3H           equ	4019	;# 
  1165   000FB4                     CMCON           equ	4020	;# 
  1166   000FB5                     CVRCON          equ	4021	;# 
  1167   000FB6                     ECCP1AS         equ	4022	;# 
  1168   000FB7                     ECCP1DEL        equ	4023	;# 
  1169   000FB7                     PWM1CON         equ	4023	;# 
  1170   000FB8                     BAUDCON         equ	4024	;# 
  1171   000FB8                     BAUDCTL         equ	4024	;# 
  1172   000FBA                     CCP2CON         equ	4026	;# 
  1173   000FBB                     CCPR2           equ	4027	;# 
  1174   000FBB                     CCPR2L          equ	4027	;# 
  1175   000FBC                     CCPR2H          equ	4028	;# 
  1176   000FBD                     CCP1CON         equ	4029	;# 
  1177   000FBD                     ECCP1CON        equ	4029	;# 
  1178   000FBE                     CCPR1           equ	4030	;# 
  1179   000FBE                     CCPR1L          equ	4030	;# 
  1180   000FBF                     CCPR1H          equ	4031	;# 
  1181   000FC0                     ADCON2          equ	4032	;# 
  1182   000FC1                     ADCON1          equ	4033	;# 
  1183   000FC2                     ADCON0          equ	4034	;# 
  1184   000FC3                     ADRES           equ	4035	;# 
  1185   000FC3                     ADRESL          equ	4035	;# 
  1186   000FC4                     ADRESH          equ	4036	;# 
  1187   000FC5                     SSPCON2         equ	4037	;# 
  1188   000FC6                     SSPCON1         equ	4038	;# 
  1189   000FC7                     SSPSTAT         equ	4039	;# 
  1190   000FC8                     SSPADD          equ	4040	;# 
  1191   000FC9                     SSPBUF          equ	4041	;# 
  1192   000FCA                     T2CON           equ	4042	;# 
  1193   000FCB                     PR2             equ	4043	;# 
  1194   000FCB                     MEMCON          equ	4043	;# 
  1195   000FCC                     TMR2            equ	4044	;# 
  1196   000FCD                     T1CON           equ	4045	;# 
  1197   000FCE                     TMR1            equ	4046	;# 
  1198   000FCE                     TMR1L           equ	4046	;# 
  1199   000FCF                     TMR1H           equ	4047	;# 
  1200   000FD0                     RCON            equ	4048	;# 
  1201   000FD1                     WDTCON          equ	4049	;# 
  1202   000FD2                     HLVDCON         equ	4050	;# 
  1203   000FD2                     LVDCON          equ	4050	;# 
  1204   000FD3                     OSCCON          equ	4051	;# 
  1205   000FD5                     T0CON           equ	4053	;# 
  1206   000FD6                     TMR0            equ	4054	;# 
  1207   000FD6                     TMR0L           equ	4054	;# 
  1208   000FD7                     TMR0H           equ	4055	;# 
  1209   000FD8                     STATUS          equ	4056	;# 
  1210   000FD9                     FSR2            equ	4057	;# 
  1211   000FD9                     FSR2L           equ	4057	;# 
  1212   000FDA                     FSR2H           equ	4058	;# 
  1213   000FDB                     PLUSW2          equ	4059	;# 
  1214   000FDC                     PREINC2         equ	4060	;# 
  1215   000FDD                     POSTDEC2        equ	4061	;# 
  1216   000FDE                     POSTINC2        equ	4062	;# 
  1217   000FDF                     INDF2           equ	4063	;# 
  1218   000FE0                     BSR             equ	4064	;# 
  1219   000FE1                     FSR1            equ	4065	;# 
  1220   000FE1                     FSR1L           equ	4065	;# 
  1221   000FE2                     FSR1H           equ	4066	;# 
  1222   000FE3                     PLUSW1          equ	4067	;# 
  1223   000FE4                     PREINC1         equ	4068	;# 
  1224   000FE5                     POSTDEC1        equ	4069	;# 
  1225   000FE6                     POSTINC1        equ	4070	;# 
  1226   000FE7                     INDF1           equ	4071	;# 
  1227   000FE8                     WREG            equ	4072	;# 
  1228   000FE9                     FSR0            equ	4073	;# 
  1229   000FE9                     FSR0L           equ	4073	;# 
  1230   000FEA                     FSR0H           equ	4074	;# 
  1231   000FEB                     PLUSW0          equ	4075	;# 
  1232   000FEC                     PREINC0         equ	4076	;# 
  1233   000FED                     POSTDEC0        equ	4077	;# 
  1234   000FEE                     POSTINC0        equ	4078	;# 
  1235   000FEF                     INDF0           equ	4079	;# 
  1236   000FF0                     INTCON3         equ	4080	;# 
  1237   000FF1                     INTCON2         equ	4081	;# 
  1238   000FF2                     INTCON          equ	4082	;# 
  1239   000FF3                     PROD            equ	4083	;# 
  1240   000FF3                     PRODL           equ	4083	;# 
  1241   000FF4                     PRODH           equ	4084	;# 
  1242   000FF5                     TABLAT          equ	4085	;# 
  1243   000FF6                     TBLPTR          equ	4086	;# 
  1244   000FF6                     TBLPTRL         equ	4086	;# 
  1245   000FF7                     TBLPTRH         equ	4087	;# 
  1246   000FF8                     TBLPTRU         equ	4088	;# 
  1247   000FF9                     PCLAT           equ	4089	;# 
  1248   000FF9                     PC              equ	4089	;# 
  1249   000FF9                     PCL             equ	4089	;# 
  1250   000FFA                     PCLATH          equ	4090	;# 
  1251   000FFB                     PCLATU          equ	4091	;# 
  1252   000FFC                     STKPTR          equ	4092	;# 
  1253   000FFD                     TOS             equ	4093	;# 
  1254   000FFD                     TOSL            equ	4093	;# 
  1255   000FFE                     TOSH            equ	4094	;# 
  1256   000FFF                     TOSU            equ	4095	;# 
  1257                           
  1258                           	psect	idataCOMRAM
  1259   001CA2                     __pidataCOMRAM:
  1260                           	callstack 0
  1261                           
  1262                           ;initializer for _currentTime
  1263   001CA2  30                 	db	48
  1264   001CA3  30                 	db	48
  1265   001CA4  30                 	db	48
  1266   001CA5  30                 	db	48
  1267                           
  1268                           ;initializer for motor_Read@MAX_TIMEOUT
  1269   001CA6  03E8               	dw	1000
  1270                           
  1271                           ;initializer for _index
  1272   001CA8  04                 	db	4
  1273                           
  1274                           	psect	idataBANK0
  1275   001B6E                     __pidataBANK0:
  1276                           	callstack 0
  1277                           
  1278                           ;initializer for _userUIDs
  1279   001B6E  65                 	db	101
  1280   001B6F  DC                 	db	220
  1281   001B70  F9                 	db	249
  1282   001B71  03                 	db	3
  1283   001B72  43                 	db	67
  1284   001B73  DC                 	db	220
  1285   001B74  0D                 	db	13
  1286   001B75  F9                 	db	249
  1287   001B76  03                 	db	3
  1288   001B77  2B                 	db	43
  1289   001B78  DF                 	db	223
  1290   001B79  8B                 	db	139
  1291   001B7A  DF                 	db	223
  1292   001B7B  C4                 	db	196
  1293   001B7C  4F                 	db	79
  1294   001B7D  21                 	db	33
  1295   001B7E  32                 	db	50
  1296   001B7F  A9                 	db	169
  1297   001B80  89                 	db	137
  1298   001B81  33                 	db	51
  1299                           
  1300                           ;initializer for controlLED@ledBits
  1301   001B82  01                 	db	1
  1302   001B83  02                 	db	2
  1303   001B84  04                 	db	4
  1304   001B85  08                 	db	8
  1305   001B86  10                 	db	16
  1306   001B87  20                 	db	32
  1307                           
  1308                           ;initializer for _colValues
  1309   001B88  20                 	db	32
  1310   001B89  40                 	db	64
  1311   001B8A  10                 	db	16
  1312                           
  1313                           ;initializer for motorTerminal@hour
  1314   001B8B  30                 	db	48
  1315   001B8C  30                 	db	48
  1316   001B8D  30                 	db	48
  1317   001B8E  30                 	db	48
  1318                           
  1319                           	psect	mediumconst
  1320   001E2A                     __pmediumconst:
  1321                           	callstack 0
  1322   001E2A  00                 	db	0
  1323   001E2B                     printfUID@hex:
  1324                           	callstack 0
  1325   001E2B  30                 	db	48
  1326   001E2C  31                 	db	49
  1327   001E2D  32                 	db	50
  1328   001E2E  33                 	db	51
  1329   001E2F  34                 	db	52
  1330   001E30  35                 	db	53
  1331   001E31  36                 	db	54
  1332   001E32  37                 	db	55
  1333   001E33  38                 	db	56
  1334   001E34  39                 	db	57
  1335   001E35  41                 	db	65
  1336   001E36  42                 	db	66
  1337   001E37  43                 	db	67
  1338   001E38  44                 	db	68
  1339   001E39  45                 	db	69
  1340   001E3A  46                 	db	70
  1341   001E3B  00                 	db	0
  1342   001E3C                     __end_ofprintfUID@hex:
  1343                           	callstack 0
  1344   001E3C                     _keymap:
  1345                           	callstack 0
  1346   001E3C  01                 	db	1
  1347   001E3D  02                 	db	2
  1348   001E3E  03                 	db	3
  1349   001E3F  04                 	db	4
  1350   001E40  05                 	db	5
  1351   001E41  06                 	db	6
  1352   001E42  07                 	db	7
  1353   001E43  08                 	db	8
  1354   001E44  09                 	db	9
  1355   001E45  0A                 	db	10
  1356   001E46  00                 	db	0
  1357   001E47  0B                 	db	11
  1358   001E48                     __end_of_keymap:
  1359                           	callstack 0
  1360   007F92                     _TMR0IF         set	32658
  1361   000FD6                     _TMR0           set	4054
  1362   000FD5                     _T0CON          set	4053
  1363   000FAD                     _TXREG          set	4013
  1364   000FAE                     _RCREG          set	4014
  1365   000F9E                     _PIR1bits       set	3998
  1366   000FB8                     _BAUDCON        set	4024
  1367   000FAF                     _SPBRG          set	4015
  1368   000FAB                     _RCSTA          set	4011
  1369   000FAC                     _TXSTA          set	4012
  1370   000F83                     _PORTD          set	3971
  1371   000F8C                     _LATD           set	3980
  1372   000F95                     _TRISD          set	3989
  1373   000F94                     _TRISCbits      set	3988
  1374   000F82                     _PORTCbits      set	3970
  1375   000F8B                     _LATCbits       set	3979
  1376   000F89                     _LATA           set	3977
  1377   000F96                     _TRISE          set	3990
  1378   000F92                     _TRISA          set	3986
  1379   000F8A                     _LATBbits       set	3978
  1380   000F93                     _TRISBbits      set	3987
  1381   000F96                     _TRISEbits      set	3990
  1382   000FC1                     _ADCON1         set	4033
  1383   000F8D                     _LATEbits       set	3981
  1384   000FF2                     _INTCONbits     set	4082
  1385   001E48                     STR_6:
  1386   001E48  09                 	db	9
  1387   001E49  31                 	db	49	;'1'
  1388   001E4A  2E                 	db	46
  1389   001E4B  20                 	db	32
  1390   001E4C  51                 	db	81	;'Q'
  1391   001E4D  75                 	db	117	;'u'
  1392   001E4E  69                 	db	105	;'i'
  1393   001E4F  20                 	db	32
  1394   001E50  68                 	db	104	;'h'
  1395   001E51  69                 	db	105	;'i'
  1396   001E52  20                 	db	32
  1397   001E53  68                 	db	104	;'h'
  1398   001E54  61                 	db	97	;'a'
  1399   001E55  20                 	db	32
  1400   001E56  61                 	db	97	;'a'
  1401   001E57  20                 	db	32
  1402   001E58  6C                 	db	108	;'l'
  1403   001E59  61                 	db	97	;'a'
  1404   001E5A  20                 	db	32
  1405   001E5B  73                 	db	115	;'s'
  1406   001E5C  61                 	db	97	;'a'
  1407   001E5D  6C                 	db	108	;'l'
  1408   001E5E  61                 	db	97	;'a'
  1409   001E5F  3F                 	db	63	;'?'
  1410   001E60  0D                 	db	13
  1411   001E61  0A                 	db	10
  1412   001E62  09                 	db	9
  1413   001E63  32                 	db	50	;'2'
  1414   001E64  2E                 	db	46
  1415   001E65  20                 	db	32
  1416   001E66  4D                 	db	77	;'M'
  1417   001E67  6F                 	db	111	;'o'
  1418   001E68  73                 	db	115	;'s'
  1419   001E69  74                 	db	116	;'t'
  1420   001E6A  72                 	db	114	;'r'
  1421   001E6B  61                 	db	97	;'a'
  1422   001E6C  72                 	db	114	;'r'
  1423   001E6D  20                 	db	32
  1424   001E6E  63                 	db	99	;'c'
  1425   001E6F  6F                 	db	111	;'o'
  1426   001E70  6E                 	db	110	;'n'
  1427   001E71  66                 	db	102	;'f'
  1428   001E72  69                 	db	105	;'i'
  1429   001E73  67                 	db	103	;'g'
  1430   001E74  75                 	db	117	;'u'
  1431   001E75  72                 	db	114	;'r'
  1432   001E76  61                 	db	97	;'a'
  1433   001E77  63                 	db	99	;'c'
  1434   001E78  69                 	db	105	;'i'
  1435   001E79  6F                 	db	111	;'o'
  1436   001E7A  6E                 	db	110	;'n'
  1437   001E7B  73                 	db	115	;'s'
  1438   001E7C  0D                 	db	13
  1439   001E7D  0A                 	db	10
  1440   001E7E  09                 	db	9
  1441   001E7F  33                 	db	51	;'3'
  1442   001E80  2E                 	db	46
  1443   001E81  20                 	db	32
  1444   001E82  4D                 	db	77	;'M'
  1445   001E83  6F                 	db	111	;'o'
  1446   001E84  64                 	db	100	;'d'
  1447   001E85  69                 	db	105	;'i'
  1448   001E86  66                 	db	102	;'f'
  1449   001E87  69                 	db	105	;'i'
  1450   001E88  63                 	db	99	;'c'
  1451   001E89  61                 	db	97	;'a'
  1452   001E8A  72                 	db	114	;'r'
  1453   001E8B  20                 	db	32
  1454   001E8C  68                 	db	104	;'h'
  1455   001E8D  6F                 	db	111	;'o'
  1456   001E8E  72                 	db	114	;'r'
  1457   001E8F  61                 	db	97	;'a'
  1458   001E90  20                 	db	32
  1459   001E91  64                 	db	100	;'d'
  1460   001E92  65                 	db	101	;'e'
  1461   001E93  6C                 	db	108	;'l'
  1462   001E94  20                 	db	32
  1463   001E95  73                 	db	115	;'s'
  1464   001E96  69                 	db	105	;'i'
  1465   001E97  73                 	db	115	;'s'
  1466   001E98  74                 	db	116	;'t'
  1467   001E99  65                 	db	101	;'e'
  1468   001E9A  6D                 	db	109	;'m'
  1469   001E9B  61                 	db	97	;'a'
  1470   001E9C  0D                 	db	13
  1471   001E9D  0A                 	db	10
  1472   001E9E  4F                 	db	79	;'O'
  1473   001E9F  70                 	db	112	;'p'
  1474   001EA0  63                 	db	99	;'c'
  1475   001EA1  69                 	db	105	;'i'
  1476   001EA2  C3                 	db	-61
  1477   001EA3  B3                 	db	-77
  1478   001EA4  3A                 	db	58	;':'
  1479   001EA5  20                 	db	32
  1480   001EA6  00                 	db	0
  1481   001EA7                     STR_5:
  1482   001EA7  4D                 	db	77	;'M'
  1483   001EA8  65                 	db	101	;'e'
  1484   001EA9  6E                 	db	110	;'n'
  1485   001EAA  C3                 	db	-61
  1486   001EAB  BA                 	db	-70
  1487   001EAC  20                 	db	32
  1488   001EAD  70                 	db	112	;'p'
  1489   001EAE  72                 	db	114	;'r'
  1490   001EAF  69                 	db	105	;'i'
  1491   001EB0  6E                 	db	110	;'n'
  1492   001EB1  63                 	db	99	;'c'
  1493   001EB2  69                 	db	105	;'i'
  1494   001EB3  70                 	db	112	;'p'
  1495   001EB4  61                 	db	97	;'a'
  1496   001EB5  6C                 	db	108	;'l'
  1497   001EB6  0D                 	db	13
  1498   001EB7  0A                 	db	10
  1499   001EB8  2D                 	db	45
  1500   001EB9  2D                 	db	45
  1501   001EBA  2D                 	db	45
  1502   001EBB  2D                 	db	45
  1503   001EBC  2D                 	db	45
  1504   001EBD  2D                 	db	45
  1505   001EBE  2D                 	db	45
  1506   001EBF  2D                 	db	45
  1507   001EC0  2D                 	db	45
  1508   001EC1  2D                 	db	45
  1509   001EC2  2D                 	db	45
  1510   001EC3  2D                 	db	45
  1511   001EC4  2D                 	db	45
  1512   001EC5  2D                 	db	45
  1513   001EC6  2D                 	db	45
  1514   001EC7  0D                 	db	13
  1515   001EC8  0A                 	db	10
  1516   001EC9  54                 	db	84	;'T'
  1517   001ECA  72                 	db	114	;'r'
  1518   001ECB  69                 	db	105	;'i'
  1519   001ECC  61                 	db	97	;'a'
  1520   001ECD  20                 	db	32
  1521   001ECE  75                 	db	117	;'u'
  1522   001ECF  6E                 	db	110	;'n'
  1523   001ED0  61                 	db	97	;'a'
  1524   001ED1  20                 	db	32
  1525   001ED2  6F                 	db	111	;'o'
  1526   001ED3  70                 	db	112	;'p'
  1527   001ED4  63                 	db	99	;'c'
  1528   001ED5  69                 	db	105	;'i'
  1529   001ED6  C3                 	db	-61
  1530   001ED7  B3                 	db	-77
  1531   001ED8  3A                 	db	58	;':'
  1532   001ED9  0D                 	db	13
  1533   001EDA  0A                 	db	10
  1534   001EDB  00                 	db	0
  1535   001EDC                     STR_1:
  1536   001EDC  0D                 	db	13
  1537   001EDD  0A                 	db	10
  1538   001EDE  4C                 	db	76	;'L'
  1539   001EDF  27                 	db	39
  1540   001EE0  75                 	db	117	;'u'
  1541   001EE1  73                 	db	115	;'s'
  1542   001EE2  75                 	db	117	;'u'
  1543   001EE3  61                 	db	97	;'a'
  1544   001EE4  72                 	db	114	;'r'
  1545   001EE5  69                 	db	105	;'i'
  1546   001EE6  20                 	db	32
  1547   001EE7  68                 	db	104	;'h'
  1548   001EE8  61                 	db	97	;'a'
  1549   001EE9  20                 	db	32
  1550   001EEA  73                 	db	115	;'s'
  1551   001EEB  6F                 	db	111	;'o'
  1552   001EEC  72                 	db	114	;'r'
  1553   001EED  74                 	db	116	;'t'
  1554   001EEE  69                 	db	105	;'i'
  1555   001EEF  74                 	db	116	;'t'
  1556   001EF0  20                 	db	32
  1557   001EF1  64                 	db	100	;'d'
  1558   001EF2  65                 	db	101	;'e'
  1559   001EF3  20                 	db	32
  1560   001EF4  6C                 	db	108	;'l'
  1561   001EF5  61                 	db	97	;'a'
  1562   001EF6  20                 	db	32
  1563   001EF7  73                 	db	115	;'s'
  1564   001EF8  61                 	db	97	;'a'
  1565   001EF9  6C                 	db	108	;'l'
  1566   001EFA  61                 	db	97	;'a'
  1567   001EFB  0D                 	db	13
  1568   001EFC  0A                 	db	10
  1569   001EFD  00                 	db	0
  1570   001EFE                     STR_10:
  1571   001EFE  4E                 	db	78	;'N'
  1572   001EFF  6F                 	db	111	;'o'
  1573   001F00  20                 	db	32
  1574   001F01  68                 	db	104	;'h'
  1575   001F02  69                 	db	105	;'i'
  1576   001F03  20                 	db	32
  1577   001F04  68                 	db	104	;'h'
  1578   001F05  61                 	db	97	;'a'
  1579   001F06  20                 	db	32
  1580   001F07  63                 	db	99	;'c'
  1581   001F08  61                 	db	97	;'a'
  1582   001F09  70                 	db	112	;'p'
  1583   001F0A  20                 	db	32
  1584   001F0B  75                 	db	117	;'u'
  1585   001F0C  73                 	db	115	;'s'
  1586   001F0D  75                 	db	117	;'u'
  1587   001F0E  61                 	db	97	;'a'
  1588   001F0F  72                 	db	114	;'r'
  1589   001F10  69                 	db	105	;'i'
  1590   001F11  20                 	db	32
  1591   001F12  61                 	db	97	;'a'
  1592   001F13  20                 	db	32
  1593   001F14  6C                 	db	108	;'l'
  1594   001F15  61                 	db	97	;'a'
  1595   001F16  20                 	db	32
  1596   001F17  73                 	db	115	;'s'
  1597   001F18  61                 	db	97	;'a'
  1598   001F19  6C                 	db	108	;'l'
  1599   001F1A  61                 	db	97	;'a'
  1600   001F1B  2E                 	db	46
  1601   001F1C  0D                 	db	13
  1602   001F1D  0A                 	db	10
  1603   001F1E  00                 	db	0
  1604   001F1F                     STR_8:
  1605   001F1F  45                 	db	69	;'E'
  1606   001F20  52                 	db	82	;'R'
  1607   001F21  52                 	db	82	;'R'
  1608   001F22  4F                 	db	79	;'O'
  1609   001F23  52                 	db	82	;'R'
  1610   001F24  2E                 	db	46
  1611   001F25  20                 	db	32
  1612   001F26  56                 	db	86	;'V'
  1613   001F27  61                 	db	97	;'a'
  1614   001F28  6C                 	db	108	;'l'
  1615   001F29  6F                 	db	111	;'o'
  1616   001F2A  72                 	db	114	;'r'
  1617   001F2B  20                 	db	32
  1618   001F2C  69                 	db	105	;'i'
  1619   001F2D  6E                 	db	110	;'n'
  1620   001F2E  74                 	db	116	;'t'
  1621   001F2F  72                 	db	114	;'r'
  1622   001F30  6F                 	db	111	;'o'
  1623   001F31  64                 	db	100	;'d'
  1624   001F32  75                 	db	117	;'u'
  1625   001F33  69                 	db	105	;'i'
  1626   001F34  74                 	db	116	;'t'
  1627   001F35  20                 	db	32
  1628   001F36  65                 	db	101	;'e'
  1629   001F37  72                 	db	114	;'r'
  1630   001F38  72                 	db	114	;'r'
  1631   001F39  6F                 	db	111	;'o'
  1632   001F3A  6E                 	db	110	;'n'
  1633   001F3B  69                 	db	105	;'i'
  1634   001F3C  2E                 	db	46
  1635   001F3D  0D                 	db	13
  1636   001F3E  0A                 	db	10
  1637   001F3F  00                 	db	0
  1638   001F40                     STR_16:
  1639   001F40  0D                 	db	13
  1640   001F41  0A                 	db	10
  1641   001F42  48                 	db	72	;'H'
  1642   001F43  6F                 	db	111	;'o'
  1643   001F44  72                 	db	114	;'r'
  1644   001F45  61                 	db	97	;'a'
  1645   001F46  20                 	db	32
  1646   001F47  69                 	db	105	;'i'
  1647   001F48  6E                 	db	110	;'n'
  1648   001F49  74                 	db	116	;'t'
  1649   001F4A  72                 	db	114	;'r'
  1650   001F4B  6F                 	db	111	;'o'
  1651   001F4C  64                 	db	100	;'d'
  1652   001F4D  75                 	db	117	;'u'
  1653   001F4E  69                 	db	105	;'i'
  1654   001F4F  64                 	db	100	;'d'
  1655   001F50  61                 	db	97	;'a'
  1656   001F51  20                 	db	32
  1657   001F52  63                 	db	99	;'c'
  1658   001F53  6F                 	db	111	;'o'
  1659   001F54  72                 	db	114	;'r'
  1660   001F55  72                 	db	114	;'r'
  1661   001F56  65                 	db	101	;'e'
  1662   001F57  63                 	db	99	;'c'
  1663   001F58  74                 	db	116	;'t'
  1664   001F59  61                 	db	97	;'a'
  1665   001F5A  6D                 	db	109	;'m'
  1666   001F5B  65                 	db	101	;'e'
  1667   001F5C  6E                 	db	110	;'n'
  1668   001F5D  74                 	db	116	;'t'
  1669   001F5E  0D                 	db	13
  1670   001F5F  0A                 	db	10
  1671   001F60  00                 	db	0
  1672   001F61                     STR_15:
  1673   001F61  49                 	db	73	;'I'
  1674   001F62  6E                 	db	110	;'n'
  1675   001F63  74                 	db	116	;'t'
  1676   001F64  72                 	db	114	;'r'
  1677   001F65  6F                 	db	111	;'o'
  1678   001F66  64                 	db	100	;'d'
  1679   001F67  75                 	db	117	;'u'
  1680   001F68  63                 	db	99	;'c'
  1681   001F69  65                 	db	101	;'e'
  1682   001F6A  20                 	db	32
  1683   001F6B  6C                 	db	108	;'l'
  1684   001F6C  61                 	db	97	;'a'
  1685   001F6D  20                 	db	32
  1686   001F6E  68                 	db	104	;'h'
  1687   001F6F  6F                 	db	111	;'o'
  1688   001F70  72                 	db	114	;'r'
  1689   001F71  61                 	db	97	;'a'
  1690   001F72  20                 	db	32
  1691   001F73  61                 	db	97	;'a'
  1692   001F74  63                 	db	99	;'c'
  1693   001F75  74                 	db	116	;'t'
  1694   001F76  75                 	db	117	;'u'
  1695   001F77  61                 	db	97	;'a'
  1696   001F78  6C                 	db	108	;'l'
  1697   001F79  28                 	db	40
  1698   001F7A  48                 	db	72	;'H'
  1699   001F7B  48                 	db	72	;'H'
  1700   001F7C  4D                 	db	77	;'M'
  1701   001F7D  4D                 	db	77	;'M'
  1702   001F7E  29                 	db	41
  1703   001F7F  3A                 	db	58	;':'
  1704   001F80  20                 	db	32
  1705   001F81  00                 	db	0
  1706   001F82                     STR_3:
  1707   001F82  09                 	db	9
  1708   001F83  4E                 	db	78	;'N'
  1709   001F84  6F                 	db	111	;'o'
  1710   001F85  20                 	db	32
  1711   001F86  68                 	db	104	;'h'
  1712   001F87  61                 	db	97	;'a'
  1713   001F88  79                 	db	121	;'y'
  1714   001F89  20                 	db	32
  1715   001F8A  75                 	db	117	;'u'
  1716   001F8B  73                 	db	115	;'s'
  1717   001F8C  75                 	db	117	;'u'
  1718   001F8D  61                 	db	97	;'a'
  1719   001F8E  72                 	db	114	;'r'
  1720   001F8F  69                 	db	105	;'i'
  1721   001F90  6F                 	db	111	;'o'
  1722   001F91  20                 	db	32
  1723   001F92  63                 	db	99	;'c'
  1724   001F93  6F                 	db	111	;'o'
  1725   001F94  6E                 	db	110	;'n'
  1726   001F95  66                 	db	102	;'f'
  1727   001F96  69                 	db	105	;'i'
  1728   001F97  67                 	db	103	;'g'
  1729   001F98  75                 	db	117	;'u'
  1730   001F99  72                 	db	114	;'r'
  1731   001F9A  61                 	db	97	;'a'
  1732   001F9B  64                 	db	100	;'d'
  1733   001F9C  6F                 	db	111	;'o'
  1734   001F9D  0D                 	db	13
  1735   001F9E  0A                 	db	10
  1736   001F9F  00                 	db	0
  1737   001FA0                     STR_2:
  1738   001FA0  0D                 	db	13
  1739   001FA1  0A                 	db	10
  1740   001FA2  53                 	db	83	;'S'
  1741   001FA3  27                 	db	39
  1742   001FA4  68                 	db	104	;'h'
  1743   001FA5  61                 	db	97	;'a'
  1744   001FA6  6E                 	db	110	;'n'
  1745   001FA7  20                 	db	32
  1746   001FA8  72                 	db	114	;'r'
  1747   001FA9  65                 	db	101	;'e'
  1748   001FAA  73                 	db	115	;'s'
  1749   001FAB  65                 	db	101	;'e'
  1750   001FAC  74                 	db	116	;'t'
  1751   001FAD  65                 	db	101	;'e'
  1752   001FAE  6A                 	db	106	;'j'
  1753   001FAF  61                 	db	97	;'a'
  1754   001FB0  74                 	db	116	;'t'
  1755   001FB1  20                 	db	32
  1756   001FB2  6C                 	db	108	;'l'
  1757   001FB3  65                 	db	101	;'e'
  1758   001FB4  73                 	db	115	;'s'
  1759   001FB5  20                 	db	32
  1760   001FB6  64                 	db	100	;'d'
  1761   001FB7  61                 	db	97	;'a'
  1762   001FB8  64                 	db	100	;'d'
  1763   001FB9  65                 	db	101	;'e'
  1764   001FBA  73                 	db	115	;'s'
  1765   001FBB  0D                 	db	13
  1766   001FBC  0A                 	db	10
  1767   001FBD  00                 	db	0
  1768   001FBE                     STR_17:
  1769   001FBE  0D                 	db	13
  1770   001FBF  0A                 	db	10
  1771   001FC0  54                 	db	84	;'T'
  1772   001FC1  61                 	db	97	;'a'
  1773   001FC2  72                 	db	114	;'r'
  1774   001FC3  67                 	db	103	;'g'
  1775   001FC4  65                 	db	101	;'e'
  1776   001FC5  74                 	db	116	;'t'
  1777   001FC6  61                 	db	97	;'a'
  1778   001FC7  20                 	db	32
  1779   001FC8  64                 	db	100	;'d'
  1780   001FC9  65                 	db	101	;'e'
  1781   001FCA  74                 	db	116	;'t'
  1782   001FCB  65                 	db	101	;'e'
  1783   001FCC  63                 	db	99	;'c'
  1784   001FCD  74                 	db	116	;'t'
  1785   001FCE  61                 	db	97	;'a'
  1786   001FCF  64                 	db	100	;'d'
  1787   001FD0  61                 	db	97	;'a'
  1788   001FD1  21                 	db	33
  1789   001FD2  00                 	db	0
  1790   001FD3                     STR_4:
  1791   001FD3  2D                 	db	45
  1792   001FD4  2D                 	db	45
  1793   001FD5  2D                 	db	45
  1794   001FD6  2D                 	db	45
  1795   001FD7  2D                 	db	45
  1796   001FD8  2D                 	db	45
  1797   001FD9  2D                 	db	45
  1798   001FDA  2D                 	db	45
  1799   001FDB  2D                 	db	45
  1800   001FDC  2D                 	db	45
  1801   001FDD  2D                 	db	45
  1802   001FDE  2D                 	db	45
  1803   001FDF  2D                 	db	45
  1804   001FE0  2D                 	db	45
  1805   001FE1  2D                 	db	45
  1806   001FE2  0D                 	db	13
  1807   001FE3  0A                 	db	10
  1808   001FE4  00                 	db	0
  1809   001FE5                     STR_12:
  1810   001FE5  43                 	db	67	;'C'
  1811   001FE6  6F                 	db	111	;'o'
  1812   001FE7  6E                 	db	110	;'n'
  1813   001FE8  66                 	db	102	;'f'
  1814   001FE9  69                 	db	105	;'i'
  1815   001FEA  67                 	db	103	;'g'
  1816   001FEB  75                 	db	117	;'u'
  1817   001FEC  72                 	db	114	;'r'
  1818   001FED  61                 	db	97	;'a'
  1819   001FEE  63                 	db	99	;'c'
  1820   001FEF  69                 	db	105	;'i'
  1821   001FF0  6F                 	db	111	;'o'
  1822   001FF1  6E                 	db	110	;'n'
  1823   001FF2  73                 	db	115	;'s'
  1824   001FF3  3A                 	db	58	;':'
  1825   001FF4  0D                 	db	13
  1826   001FF5  0A                 	db	10
  1827   001FF6  00                 	db	0
  1828   001FF7                     STR_9:
  1829   001FF7  55                 	db	85	;'U'
  1830   001FF8  73                 	db	115	;'s'
  1831   001FF9  75                 	db	117	;'u'
  1832   001FFA  61                 	db	97	;'a'
  1833   001FFB  72                 	db	114	;'r'
  1834   001FFC  69                 	db	105	;'i'
  1835   001FFD  20                 	db	32
  1836   001FFE  00                 	db	0
  1837   001FF7                     STR_13          equ	STR_9
  1838   001FE2                     STR_7           equ	STR_4+15
  1839   001FE2                     STR_11          equ	STR_4+15
  1840   001FE2                     STR_14          equ	STR_4+15
  1841   001FFF  00                 	db	0	; dummy byte at the end
  1842   001E2A                     __smallconst    set	__pmediumconst
  1843   001E2A                     __mediumconst   set	__pmediumconst
  1844   000002                     __activetblptr  equ	2
  1845                           
  1846                           ; #config settings
  1847                           
  1848                           	psect	cinit
  1849   0014C6                     __pcinit:
  1850                           	callstack 0
  1851   0014C6                     start_initialization:
  1852                           	callstack 0
  1853   0014C6                     __initialization:
  1854                           	callstack 0
  1855                           
  1856                           ; Initialize objects allocated to BANK0 (33 bytes)
  1857                           ; load TBLPTR registers with __pidataBANK0
  1858   0014C6  0E6E               	movlw	low __pidataBANK0
  1859   0014C8  6EF6               	movwf	tblptrl,c
  1860   0014CA  0E1B               	movlw	high __pidataBANK0
  1861   0014CC  6EF7               	movwf	tblptrh,c
  1862   0014CE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1863   0014D0  6EF8               	movwf	tblptru,c
  1864   0014D2  EE00  F0C8         	lfsr	0,__pdataBANK0
  1865   0014D6  EE10 F021          	lfsr	1,33
  1866   0014DA                     copy_data0:
  1867   0014DA  0009               	tblrd		*+
  1868   0014DC  CFF5 FFEE          	movff	tablat,postinc0
  1869   0014E0  50E5               	movf	postdec1,w,c
  1870   0014E2  50E1               	movf	fsr1l,w,c
  1871   0014E4  E1FA               	bnz	copy_data0
  1872                           
  1873                           ; Initialize objects allocated to COMRAM (7 bytes)
  1874                           ; load TBLPTR registers with __pidataCOMRAM
  1875   0014E6  0EA2               	movlw	low __pidataCOMRAM
  1876   0014E8  6EF6               	movwf	tblptrl,c
  1877   0014EA  0E1C               	movlw	high __pidataCOMRAM
  1878   0014EC  6EF7               	movwf	tblptrh,c
  1879   0014EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1880   0014F0  6EF8               	movwf	tblptru,c
  1881   0014F2  EE00  F077         	lfsr	0,__pdataCOMRAM
  1882   0014F6  EE10 F007          	lfsr	1,7
  1883   0014FA                     copy_data1:
  1884   0014FA  0009               	tblrd		*+
  1885   0014FC  CFF5 FFEE          	movff	tablat,postinc0
  1886   001500  50E5               	movf	postdec1,w,c
  1887   001502  50E1               	movf	fsr1l,w,c
  1888   001504  E1FA               	bnz	copy_data1
  1889                           
  1890                           ; Clear objects allocated to BANK1 (80 bytes)
  1891   001506  EE01  F000         	lfsr	0,__pbssBANK1
  1892   00150A  0E50               	movlw	80
  1893   00150C                     clear_0:
  1894   00150C  6AEE               	clrf	postinc0,c
  1895   00150E  06E8               	decf	wreg,f,c
  1896   001510  E1FD               	bnz	clear_0
  1897                           
  1898                           ; Clear objects allocated to BANK0 (72 bytes)
  1899   001512  EE00  F080         	lfsr	0,__pbssBANK0
  1900   001516  0E48               	movlw	72
  1901   001518                     clear_1:
  1902   001518  6AEE               	clrf	postinc0,c
  1903   00151A  06E8               	decf	wreg,f,c
  1904   00151C  E1FD               	bnz	clear_1
  1905                           
  1906                           ; Clear objects allocated to COMRAM (85 bytes)
  1907   00151E  EE00  F001         	lfsr	0,__pbssCOMRAM
  1908   001522  0E55               	movlw	85
  1909   001524                     clear_2:
  1910   001524  6AEE               	clrf	postinc0,c
  1911   001526  06E8               	decf	wreg,f,c
  1912   001528  E1FD               	bnz	clear_2
  1913   00152A                     end_of_initialization:
  1914                           	callstack 0
  1915   00152A                     __end_of__initialization:
  1916                           	callstack 0
  1917   00152A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1918   00152C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1919   00152E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1920   001530  6EF8               	movwf	tblptru,c
  1921   001532  0100               	movlb	0
  1922   001534  EFAE  F00C         	goto	_main	;jump to C main() function
  1923                           
  1924                           	psect	bssCOMRAM
  1925   000001                     __pbssCOMRAM:
  1926                           	callstack 0
  1927   000001                     motor_RFID@UID:
  1928                           	callstack 0
  1929   000001                     	ds	6
  1930   000007                     _Tics:
  1931                           	callstack 0
  1932   000007                     	ds	4
  1933   00000B                     motor_LEDs@lastTics:
  1934                           	callstack 0
  1935   00000B                     	ds	4
  1936   00000F                     _str_ptr:
  1937                           	callstack 0
  1938   00000F                     	ds	2
  1939   000011                     	ds	2
  1940   000013                     motor_Read@timeout_counter:
  1941                           	callstack 0
  1942   000013                     	ds	2
  1943   000015                     setLed@ledIndex:
  1944                           	callstack 0
  1945   000015                     	ds	1
  1946   000016                     setLed@modeLED:
  1947                           	callstack 0
  1948   000016                     	ds	1
  1949   000017                     motor_datos@i:
  1950                           	callstack 0
  1951   000017                     	ds	1
  1952   000018                     motor_datos@lastChar:
  1953                           	callstack 0
  1954   000018                     	ds	1
  1955   000019                     motor_datos@pointer:
  1956                           	callstack 0
  1957   000019                     	ds	1
  1958   00001A                     motor_datos@state:
  1959                           	callstack 0
  1960   00001A                     	ds	1
  1961   00001B                     motor_setCurrentUser@state_setCurrentUser:
  1962                           	callstack 0
  1963   00001B                     	ds	1
  1964   00001C                     _new_user:
  1965                           	callstack 0
  1966   00001C                     	ds	1
  1967   00001D                     _new_configuration:
  1968                           	callstack 0
  1969   00001D                     	ds	1
  1970   00001E                     motorTerminal@userNumber:
  1971                           	callstack 0
  1972   00001E                     	ds	1
  1973   00001F                     motorTerminal@index:
  1974                           	callstack 0
  1975   00001F                     	ds	1
  1976   000020                     motorTerminal@state:
  1977                           	callstack 0
  1978   000020                     	ds	1
  1979   000021                     _sending_string:
  1980                           	callstack 0
  1981   000021                     	ds	1
  1982   000022                     _hashtag_pressed:
  1983                           	callstack 0
  1984   000022                     	ds	1
  1985   000023                     _state_str:
  1986                           	callstack 0
  1987   000023                     	ds	1
  1988   000024                     _state:
  1989                           	callstack 0
  1990   000024                     	ds	1
  1991   000025                     _tecla:
  1992                           	callstack 0
  1993   000025                     	ds	1
  1994   000026                     _Columnas:
  1995                           	callstack 0
  1996   000026                     	ds	1
  1997   000027                     _Filas:
  1998                           	callstack 0
  1999   000027                     	ds	1
  2000   000028                     motor_RFID@value:
  2001                           	callstack 0
  2002   000028                     	ds	1
  2003   000029                     motor_RFID@addr:
  2004                           	callstack 0
  2005   000029                     	ds	1
  2006   00002A                     motor_RFID@operation_pending:
  2007                           	callstack 0
  2008   00002A                     	ds	1
  2009   00002B                     motor_RFID@last_state:
  2010                           	callstack 0
  2011   00002B                     	ds	1
  2012   00002C                     motor_RFID@cardRemoved:
  2013                           	callstack 0
  2014   00002C                     	ds	1
  2015   00002D                     motor_RFID@backBitsCalc:
  2016                           	callstack 0
  2017   00002D                     	ds	1
  2018   00002E                     motor_RFID@fifoLevel:
  2019                           	callstack 0
  2020   00002E                     	ds	1
  2021   00002F                     motor_RFID@lastBitsVal:
  2022                           	callstack 0
  2023   00002F                     	ds	1
  2024   000030                     motor_RFID@tempRegValue:
  2025                           	callstack 0
  2026   000030                     	ds	1
  2027   000031                     motor_RFID@allZero:
  2028                           	callstack 0
  2029   000031                     	ds	1
  2030   000032                     motor_RFID@checksum:
  2031                           	callstack 0
  2032   000032                     	ds	1
  2033   000033                     motor_RFID@TagType:
  2034                           	callstack 0
  2035   000033                     	ds	1
  2036   000034                     	ds	1
  2037   000035                     motor_RFID@i:
  2038                           	callstack 0
  2039   000035                     	ds	1
  2040   000036                     motor_RFID@n:
  2041                           	callstack 0
  2042   000036                     	ds	1
  2043   000037                     motor_RFID@waitIRq:
  2044                           	callstack 0
  2045   000037                     	ds	1
  2046   000038                     motor_RFID@irqEn:
  2047                           	callstack 0
  2048   000038                     	ds	1
  2049   000039                     motor_RFID@substate:
  2050                           	callstack 0
  2051   000039                     	ds	1
  2052   00003A                     motor_RFID@state:
  2053                           	callstack 0
  2054   00003A                     	ds	1
  2055   00003B                     motor_Read@ucResult:
  2056                           	callstack 0
  2057   00003B                     	ds	1
  2058   00003C                     _ColumnAct:
  2059                           	callstack 0
  2060   00003C                     	ds	1
  2061   00003D                     _RowAct:
  2062                           	callstack 0
  2063   00003D                     	ds	1
  2064   00003E                     _Columns:
  2065                           	callstack 0
  2066   00003E                     	ds	1
  2067   00003F                     _Rows:
  2068                           	callstack 0
  2069   00003F                     	ds	1
  2070   000040                     _currentUser:
  2071                           	callstack 0
  2072   000040                     	ds	5
  2073   000045                     motor_RFID@currentUser:
  2074                           	callstack 0
  2075   000045                     	ds	5
  2076   00004A                     _timer@TAD_DATOS$F903:
  2077                           	callstack 0
  2078   00004A                     	ds	1
  2079   00004B                     _timer_teclado:
  2080                           	callstack 0
  2081   00004B                     	ds	1
  2082   00004C                     motor_Read@ucAddr:
  2083                           	callstack 0
  2084   00004C                     	ds	1
  2085   00004D                     motor_Read@bit_count:
  2086                           	callstack 0
  2087   00004D                     	ds	1
  2088   00004E                     motor_Write@ucValue:
  2089                           	callstack 0
  2090   00004E                     	ds	1
  2091   00004F                     motor_Write@ucAddr:
  2092                           	callstack 0
  2093   00004F                     	ds	1
  2094   000050                     motor_Write@bit_count:
  2095                           	callstack 0
  2096   000050                     	ds	1
  2097   000051                     _card_timer:
  2098                           	callstack 0
  2099   000051                     	ds	1
  2100   000052                     _state_write:
  2101                           	callstack 0
  2102   000052                     	ds	1
  2103   000053                     _state_read:
  2104                           	callstack 0
  2105   000053                     	ds	1
  2106   000054                     _timer:
  2107                           	callstack 0
  2108   000054                     	ds	1
  2109   000055                     _Timer:
  2110                           	callstack 0
  2111   000055                     	ds	1
  2112                           
  2113                           	psect	dataCOMRAM
  2114   000077                     __pdataCOMRAM:
  2115                           	callstack 0
  2116   000077                     _currentTime:
  2117                           	callstack 0
  2118   000077                     	ds	4
  2119   00007B                     	ds	2
  2120   00007D                     _index:
  2121                           	callstack 0
  2122   00007D                     	ds	1
  2123                           
  2124                           	psect	bssBANK0
  2125   000080                     __pbssBANK0:
  2126                           	callstack 0
  2127   000080                     _configurations:
  2128                           	callstack 0
  2129   000080                     	ds	30
  2130   00009E                     _Timers:
  2131                           	callstack 0
  2132   00009E                     	ds	25
  2133   0000B7                     	ds	6
  2134   0000BD                     _ActualLeds:
  2135                           	callstack 0
  2136   0000BD                     	ds	6
  2137   0000C3                     motorTerminal@currentUser:
  2138                           	callstack 0
  2139   0000C3                     	ds	5
  2140                           
  2141                           	psect	dataBANK0
  2142   0000C8                     __pdataBANK0:
  2143                           	callstack 0
  2144   0000C8                     _userUIDs:
  2145                           	callstack 0
  2146   0000C8                     	ds	20
  2147   0000DC                     controlLED@ledBits:
  2148                           	callstack 0
  2149   0000DC                     	ds	6
  2150   0000E2                     _colValues:
  2151                           	callstack 0
  2152   0000E2                     	ds	3
  2153   0000E5                     motorTerminal@hour:
  2154                           	callstack 0
  2155   0000E5                     	ds	4
  2156                           
  2157                           	psect	bssBANK1
  2158   000100                     __pbssBANK1:
  2159                           	callstack 0
  2160   000100                     printfUID@buffer:
  2161                           	callstack 0
  2162   000100                     	ds	80
  2163                           
  2164                           	psect	cstackCOMRAM
  2165   000056                     __pcstackCOMRAM:
  2166                           	callstack 0
  2167   000056                     ??_LowRSI:
  2168                           
  2169                           ; 1 bytes @ 0x0
  2170   000056                     	ds	1
  2171   000057                     ?_Terminal_TXAvailable:
  2172                           	callstack 0
  2173   000057                     ?_TI_GetTics:
  2174                           	callstack 0
  2175   000057                     controlLED@estado:
  2176                           	callstack 0
  2177   000057                     delay_us@howMany:
  2178                           	callstack 0
  2179   000057                     resetData@i:
  2180                           	callstack 0
  2181   000057                     getActualUID@UID:
  2182                           	callstack 0
  2183   000057                     getActualLeds@leds:
  2184                           	callstack 0
  2185   000057                     saveHourToData@hour:
  2186                           	callstack 0
  2187   000057                     setIndex@indexActual:
  2188                           	callstack 0
  2189   000057                     setLEDIntensity@ledIndex:
  2190                           	callstack 0
  2191   000057                     TI_Init@counter:
  2192                           	callstack 0
  2193   000057                     TI_NewTimer@TimerHandle:
  2194                           	callstack 0
  2195   000057                     TI_ResetTics@TimerHandle:
  2196                           	callstack 0
  2197   000057                     ??_EscriuPrimeraOrdre:
  2198   000057                     ??_CantaPartAlta:
  2199   000057                     ??_CantaPartBaixa:
  2200   000057                     ??_GetTecla:
  2201   000057                     
  2202                           ; 1 bytes @ 0x1
  2203   000057                     	ds	1
  2204   000058                     CantaPartAlta@c:
  2205                           	callstack 0
  2206   000058                     CantaPartBaixa@c:
  2207                           	callstack 0
  2208   000058                     EscriuPrimeraOrdre@ordre:
  2209                           	callstack 0
  2210   000058                     delay_us@x:
  2211                           	callstack 0
  2212   000058                     resetData@j:
  2213                           	callstack 0
  2214   000058                     getActualUID@userIndex:
  2215                           	callstack 0
  2216   000058                     getActualLeds@userIndex:
  2217                           	callstack 0
  2218   000058                     saveHourToData@i:
  2219                           	callstack 0
  2220   000058                     setLEDIntensity@intensity:
  2221                           	callstack 0
  2222   000058                     _controlLED$455:
  2223                           	callstack 0
  2224   000058                     
  2225                           ; 1 bytes @ 0x2
  2226   000058                     	ds	1
  2227   000059                     CantaIR@IR:
  2228                           	callstack 0
  2229   000059                     CantaData@Data:
  2230                           	callstack 0
  2231   000059                     processBit@val:
  2232                           	callstack 0
  2233   000059                     GetTecla@columna:
  2234                           	callstack 0
  2235   000059                     getActualUID@i_916:
  2236                           	callstack 0
  2237   000059                     getActualLeds@i:
  2238                           	callstack 0
  2239   000059                     setLEDIntensity@userIndex:
  2240                           	callstack 0
  2241   000059                     TI_NewTimer@Comptador:
  2242                           	callstack 0
  2243   000059                     ??_Terminal_TXAvailable:
  2244   000059                     
  2245                           ; 1 bytes @ 0x3
  2246   000059                     	ds	1
  2247   00005A                     controlLED@ledActual:
  2248                           	callstack 0
  2249   00005A                     processBit@bit_count:
  2250                           	callstack 0
  2251   00005A                     GetTecla@fila:
  2252                           	callstack 0
  2253   00005A                     Terminal_SendChar@c:
  2254                           	callstack 0
  2255   00005A                     motor_SendChar@c:
  2256                           	callstack 0
  2257   00005A                     initData@i:
  2258                           	callstack 0
  2259   00005A                     getActualUID@i:
  2260                           	callstack 0
  2261   00005A                     getActualLeds@i_922:
  2262                           	callstack 0
  2263   00005A                     setLed@tecla:
  2264                           	callstack 0
  2265   00005A                     
  2266                           ; 1 bytes @ 0x4
  2267   00005A                     	ds	1
  2268   00005B                     processBit@state:
  2269                           	callstack 0
  2270   00005B                     initData@j:
  2271                           	callstack 0
  2272   00005B                     getActualUID@i_917:
  2273                           	callstack 0
  2274   00005B                     motor_StartSendString@str:
  2275                           	callstack 0
  2276   00005B                     ??_TI_GetTics:
  2277   00005B                     
  2278                           ; 1 bytes @ 0x5
  2279   00005B                     	ds	1
  2280   00005C                     processBit@next_state:
  2281                           	callstack 0
  2282   00005C                     initData@i_908:
  2283                           	callstack 0
  2284                           
  2285                           ; 1 bytes @ 0x6
  2286   00005C                     	ds	1
  2287   00005D                     printfUID@currentUser:
  2288                           	callstack 0
  2289   00005D                     initData@i_906:
  2290                           	callstack 0
  2291   00005D                     ??_processBit:
  2292                           
  2293                           ; 1 bytes @ 0x7
  2294   00005D                     	ds	1
  2295   00005E                     motor_Write@value:
  2296                           	callstack 0
  2297   00005E                     printfUID@userIndex:
  2298                           	callstack 0
  2299   00005E                     ??_motor_Read:
  2300                           
  2301                           ; 1 bytes @ 0x8
  2302   00005E                     	ds	1
  2303   00005F                     motor_Write@addr:
  2304                           	callstack 0
  2305   00005F                     motor_Read@addr:
  2306                           	callstack 0
  2307   00005F                     printfUID@extraString:
  2308                           	callstack 0
  2309   00005F                     TI_GetTics@CopiaTicsActual:
  2310                           	callstack 0
  2311   00005F                     
  2312                           ; 1 bytes @ 0x9
  2313   00005F                     	ds	1
  2314   000060                     _motor_Read$701:
  2315                           	callstack 0
  2316                           
  2317                           ; 2 bytes @ 0xA
  2318   000060                     	ds	1
  2319   000061                     ??_printfUID:
  2320                           
  2321                           ; 1 bytes @ 0xB
  2322   000061                     	ds	1
  2323   000062                     initRFID@regVal:
  2324                           	callstack 0
  2325   000062                     
  2326                           ; 1 bytes @ 0xC
  2327   000062                     	ds	1
  2328   000063                     TI_GetTics@TimerHandle:
  2329                           	callstack 0
  2330   000063                     printfUID@leds:
  2331                           	callstack 0
  2332                           
  2333                           ; 6 bytes @ 0xD
  2334   000063                     	ds	1
  2335   000064                     Espera@Timer:
  2336                           	callstack 0
  2337   000064                     ??_motor_LEDs:
  2338                           
  2339                           ; 1 bytes @ 0xE
  2340   000064                     	ds	2
  2341   000066                     Espera@ms:
  2342                           	callstack 0
  2343                           
  2344                           ; 2 bytes @ 0x10
  2345   000066                     	ds	2
  2346   000068                     ??_Espera:
  2347                           
  2348                           ; 1 bytes @ 0x12
  2349   000068                     	ds	1
  2350   000069                     printfUID@val:
  2351                           	callstack 0
  2352   000069                     motor_LEDs@currentTics:
  2353                           	callstack 0
  2354                           
  2355                           ; 4 bytes @ 0x13
  2356   000069                     	ds	1
  2357   00006A                     printfUID@i:
  2358                           	callstack 0
  2359                           
  2360                           ; 1 bytes @ 0x14
  2361   00006A                     	ds	1
  2362   00006B                     printfUID@ptr:
  2363                           	callstack 0
  2364                           
  2365                           ; 2 bytes @ 0x15
  2366   00006B                     	ds	1
  2367   00006C                     LcInit@columns:
  2368                           	callstack 0
  2369   00006C                     LcGotoXY@Row:
  2370                           	callstack 0
  2371   00006C                     
  2372                           ; 1 bytes @ 0x16
  2373   00006C                     	ds	1
  2374   00006D                     LcInit@rows:
  2375                           	callstack 0
  2376   00006D                     motor_LEDs@i:
  2377                           	callstack 0
  2378   00006D                     motorTerminal@opcion:
  2379                           	callstack 0
  2380   00006D                     motor_setCurrentUser@UID1:
  2381                           	callstack 0
  2382   00006D                     ??_LcGotoXY:
  2383                           
  2384                           ; 1 bytes @ 0x17
  2385   00006D                     	ds	1
  2386   00006E                     motor_LEDs@i_461:
  2387                           	callstack 0
  2388   00006E                     motorTerminal@currentUserIndex:
  2389                           	callstack 0
  2390   00006E                     motor_setCurrentUser@UID2:
  2391                           	callstack 0
  2392   00006E                     LcInit@i:
  2393                           	callstack 0
  2394                           
  2395                           ; 2 bytes @ 0x18
  2396   00006E                     	ds	1
  2397   00006F                     motor_setCurrentUser@UID3:
  2398                           	callstack 0
  2399   00006F                     _LcGotoXY$404:
  2400                           	callstack 0
  2401                           
  2402                           ; 2 bytes @ 0x19
  2403   00006F                     	ds	1
  2404   000070                     motor_setCurrentUser@UID4:
  2405                           	callstack 0
  2406                           
  2407                           ; 1 bytes @ 0x1A
  2408   000070                     	ds	1
  2409   000071                     motor_setCurrentUser@UID0:
  2410                           	callstack 0
  2411   000071                     LcGotoXY@Fisics:
  2412                           	callstack 0
  2413   000071                     
  2414                           ; 1 bytes @ 0x1B
  2415   000071                     	ds	1
  2416   000072                     ??_motor_RFID:
  2417                           
  2418                           ; 1 bytes @ 0x1C
  2419   000072                     	ds	1
  2420   000073                     LcGotoXY@Column:
  2421                           	callstack 0
  2422                           
  2423                           ; 1 bytes @ 0x1D
  2424   000073                     	ds	1
  2425   000074                     LcPutChar@c:
  2426                           	callstack 0
  2427   000074                     _motor_RFID$738:
  2428                           	callstack 0
  2429   000074                     
  2430                           ; 1 bytes @ 0x1E
  2431   000074                     	ds	1
  2432   000075                     ??_motor_datos:
  2433                           
  2434                           ; 1 bytes @ 0x1F
  2435   000075                     	ds	1
  2436   000076                     motor_RFID@flag:
  2437                           	callstack 0
  2438                           
  2439                           ; 1 bytes @ 0x20
  2440   000076                     	ds	1
  2441   000077                     
  2442                           ; 1 bytes @ 0x21
  2443 ;;
  2444 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2445 ;;
  2446 ;; *************** function _main *****************
  2447 ;; Defined at:
  2448 ;;		line 39 in file "main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1
  2462 ;;      Params:         0       0       0
  2463 ;;      Locals:         0       0       0
  2464 ;;      Temps:          0       0       0
  2465 ;;      Totals:         0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels required when called: 10
  2468 ;; This function calls:
  2469 ;;		_LcInit
  2470 ;;		_TI_Init
  2471 ;;		_Terminal_Init
  2472 ;;		_initData
  2473 ;;		_initLeds
  2474 ;;		_initPorts
  2475 ;;		_initRFID
  2476 ;;		_initTeclado
  2477 ;;		_motorTeclado
  2478 ;;		_motorTerminal
  2479 ;;		_motor_LEDs
  2480 ;;		_motor_RFID
  2481 ;;		_motor_datos
  2482 ;; This function is called by:
  2483 ;;		Startup code after reset
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text0
  2488   00195C                     __ptext0:
  2489                           	callstack 0
  2490   00195C                     _main:
  2491                           	callstack 21
  2492                           
  2493                           ;main.c: 40:  ADCON1 = 0x0F;
  2494                           
  2495                           ;incstack = 0
  2496   00195C  EC69  F00D         	call	_TI_Init	;wreg free
  2497                           
  2498                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2499   001960  ECED  F00D         	call	_initTeclado	;wreg free
  2500                           
  2501                           ;main.c: 42: }
  2502   001964  ECCF  F008         	call	_initRFID	;wreg free
  2503                           
  2504                           ;main.c: 43: 
  2505   001968  EC2F  F00E         	call	_Terminal_Init	;wreg free
  2506                           
  2507                           ;main.c: 44: 
  2508   00196C  EC4D  F00E         	call	_initPorts	;wreg free
  2509                           
  2510                           ;main.c: 45: 
  2511   001970  EC37  F00E         	call	_initLeds	;wreg free
  2512                           
  2513                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2514   001974  0E10               	movlw	16
  2515   001976  6E6C               	movwf	LcInit@columns^0,c
  2516   001978  0E02               	movlw	2
  2517   00197A  ECEE  F007         	call	_LcInit
  2518                           
  2519                           ;main.c: 47: 
  2520   00197E  ECD6  F00B         	call	_initData	;wreg free
  2521   001982  8EF2               	bsf	242,7,c	;volatile
  2522   001984  9CF2               	bcf	242,6,c	;volatile
  2523   001986                     l5012:
  2524   001986  EC62  F007         	call	_motorTeclado	;wreg free
  2525   00198A  ECC5  F004         	call	_motorTerminal	;wreg free
  2526   00198E  EC15  F000         	call	_motor_RFID	;wreg free
  2527   001992  EC65  F008         	call	_motor_LEDs	;wreg free
  2528   001996  ECDC  F005         	call	_motor_datos	;wreg free
  2529   00199A  748D               	btg	141,2,c	;volatile
  2530   00199C  D7F4               	goto	l5012
  2531   00199E                     __end_of_main:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _motor_datos *****************
  2535 ;; Defined at:
  2536 ;;		line 159 in file "TAD_DATOS.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1
  2550 ;;      Params:         0       0       0
  2551 ;;      Locals:         0       0       0
  2552 ;;      Temps:          1       0       0
  2553 ;;      Totals:         1       0       0
  2554 ;;Total ram usage:        1 bytes
  2555 ;; Hardware stack levels used: 1
  2556 ;; Hardware stack levels required when called: 8
  2557 ;; This function calls:
  2558 ;;		_LcGotoXY
  2559 ;;		_LcPutChar
  2560 ;;		_TI_GetTics
  2561 ;;		_TI_ResetTics
  2562 ;; This function is called by:
  2563 ;;		_main
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text1
  2568   000BB8                     __ptext1:
  2569                           	callstack 0
  2570   000BB8                     _motor_datos:
  2571                           	callstack 22
  2572                           
  2573                           ;TAD_DATOS.c: 160:     static char state = 0;;TAD_DATOS.c: 161:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 162:     static unsigned char lastChar;;TAD_DATOS.c: 163:     static c
      +                          har i = 0;;TAD_DATOS.c: 165:     if (TI_GetTics(timer) > 30000) {
  2574                           
  2575                           ;incstack = 0
  2576   000BB8  504A               	movf	_timer@TAD_DATOS$F903^0,w,c
  2577   000BBA  EC88  F00C         	call	_TI_GetTics
  2578   000BBE  505A               	movf	(?_TI_GetTics+3)^0,w,c
  2579   000BC0  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  2580   000BC2  E106               	bnz	u4470
  2581   000BC4  0E31               	movlw	49
  2582   000BC6  5C57               	subwf	?_TI_GetTics^0,w,c
  2583   000BC8  0E75               	movlw	117
  2584   000BCA  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  2585   000BCC  A0D8               	btfss	status,0,c
  2586   000BCE  D0B6               	goto	l5000
  2587   000BD0                     u4470:
  2588                           
  2589                           ;TAD_DATOS.c: 166:         new_configuration = 1;
  2590   000BD0  0E01               	movlw	1
  2591   000BD2  6E1D               	movwf	_new_configuration^0,c
  2592                           
  2593                           ;TAD_DATOS.c: 167:         if (currentTime[3] == '9') {
  2594   000BD4  0E39               	movlw	57
  2595   000BD6  187A               	xorwf	(_currentTime+3)^0,w,c
  2596   000BD8  A4D8               	btfss	status,2,c
  2597   000BDA  D01B               	goto	l4916
  2598                           
  2599                           ;TAD_DATOS.c: 168:             currentTime[3] = '0';
  2600   000BDC  0E30               	movlw	48
  2601   000BDE  6E7A               	movwf	(_currentTime+3)^0,c
  2602                           
  2603                           ;TAD_DATOS.c: 169:             if (currentTime[2] == '5') {
  2604   000BE0  0E35               	movlw	53
  2605   000BE2  1879               	xorwf	(_currentTime+2)^0,w,c
  2606   000BE4  A4D8               	btfss	status,2,c
  2607   000BE6  D013               	goto	l4914
  2608                           
  2609                           ;TAD_DATOS.c: 170:                 currentTime[2] = '0';
  2610   000BE8  0E30               	movlw	48
  2611   000BEA  6E79               	movwf	(_currentTime+2)^0,c
  2612                           
  2613                           ;TAD_DATOS.c: 171:                 if (currentTime[1] == '9') {
  2614   000BEC  0E39               	movlw	57
  2615   000BEE  1878               	xorwf	(_currentTime+1)^0,w,c
  2616   000BF0  A4D8               	btfss	status,2,c
  2617   000BF2  D00B               	goto	l4912
  2618                           
  2619                           ;TAD_DATOS.c: 172:                     currentTime[1] = '0';
  2620   000BF4  0E30               	movlw	48
  2621   000BF6  6E78               	movwf	(_currentTime+1)^0,c
  2622                           
  2623                           ;TAD_DATOS.c: 173:                     if (currentTime[0] == '2') {
  2624   000BF8  0E32               	movlw	50
  2625   000BFA  1877               	xorwf	_currentTime^0,w,c
  2626   000BFC  A4D8               	btfss	status,2,c
  2627   000BFE  D003               	goto	l4910
  2628                           
  2629                           ;TAD_DATOS.c: 174:                         currentTime[0] = '0';
  2630   000C00  0E30               	movlw	48
  2631   000C02  6E77               	movwf	_currentTime^0,c
  2632                           
  2633                           ;TAD_DATOS.c: 175:                     } else {
  2634   000C04  D007               	goto	l4918
  2635   000C06                     l4910:
  2636                           
  2637                           ;TAD_DATOS.c: 176:                         currentTime[0]++;
  2638   000C06  2A77               	incf	_currentTime^0,f,c
  2639   000C08  D005               	goto	l4918
  2640   000C0A                     l4912:
  2641                           
  2642                           ;TAD_DATOS.c: 179:                     currentTime[1]++;
  2643   000C0A  2A78               	incf	(_currentTime+1)^0,f,c
  2644   000C0C  D003               	goto	l4918
  2645   000C0E                     l4914:
  2646                           
  2647                           ;TAD_DATOS.c: 182:                 currentTime[2]++;
  2648   000C0E  2A79               	incf	(_currentTime+2)^0,f,c
  2649   000C10  D001               	goto	l4918
  2650   000C12                     l4916:
  2651                           
  2652                           ;TAD_DATOS.c: 185:             currentTime[3]++;
  2653   000C12  2A7A               	incf	(_currentTime+3)^0,f,c
  2654   000C14                     l4918:
  2655                           
  2656                           ;TAD_DATOS.c: 187:         TI_ResetTics(timer);
  2657   000C14  504A               	movf	_timer@TAD_DATOS$F903^0,w,c
  2658   000C16  ECA5  F00D         	call	_TI_ResetTics
  2659   000C1A  D090               	goto	l5000
  2660   000C1C                     l4920:
  2661                           
  2662                           ;TAD_DATOS.c: 192:             if(new_configuration || new_user) {
  2663   000C1C  501D               	movf	_new_configuration^0,w,c
  2664   000C1E  A4D8               	btfss	status,2,c
  2665   000C20  D003               	goto	u4530
  2666   000C22  501C               	movf	_new_user^0,w,c
  2667   000C24  B4D8               	btfsc	status,2,c
  2668   000C26  0012               	return	
  2669   000C28                     u4530:
  2670                           
  2671                           ;TAD_DATOS.c: 193:                 new_configuration = new_user = 0;
  2672   000C28  6A1C               	clrf	_new_user^0,c
  2673   000C2A  6A1D               	clrf	_new_configuration^0,c
  2674                           
  2675                           ;TAD_DATOS.c: 194:                 state = 1;
  2676   000C2C  0E01               	movlw	1
  2677   000C2E  6E1A               	movwf	motor_datos@state^0,c
  2678   000C30  0012               	return	
  2679   000C32                     l4926:
  2680                           
  2681                           ;TAD_DATOS.c: 201:             state = 2;
  2682   000C32  0E02               	movlw	2
  2683   000C34  6E1A               	movwf	motor_datos@state^0,c
  2684                           
  2685                           ;TAD_DATOS.c: 202:             break;
  2686   000C36  0012               	return	
  2687   000C38                     l4928:
  2688                           
  2689                           ;TAD_DATOS.c: 206:             LcGotoXY(0, 0);
  2690   000C38  0E00               	movlw	0
  2691   000C3A  6E6C               	movwf	LcGotoXY@Row^0,c
  2692   000C3C  0E00               	movlw	0
  2693   000C3E  ECA0  F009         	call	_LcGotoXY
  2694                           
  2695                           ;TAD_DATOS.c: 207:             state = 3;
  2696   000C42  0E03               	movlw	3
  2697   000C44  6E1A               	movwf	motor_datos@state^0,c
  2698                           
  2699                           ;TAD_DATOS.c: 208:             break;
  2700   000C46  0012               	return	
  2701   000C48                     l871:
  2702                           
  2703                           ;TAD_DATOS.c: 212:             lastChar = currentUser[4];
  2704   000C48  C044  F018         	movff	_currentUser+4,motor_datos@lastChar
  2705                           
  2706                           ;TAD_DATOS.c: 214:             if(index != 4) {
  2707   000C4C  0E04               	movlw	4
  2708   000C4E  187D               	xorwf	_index^0,w,c
  2709   000C50  B4D8               	btfsc	status,2,c
  2710   000C52  D013               	goto	l4940
  2711                           
  2712                           ;TAD_DATOS.c: 215:                 if((lastChar & 0x0F) < 10) {
  2713   000C54  C018  F075         	movff	motor_datos@lastChar,??_motor_datos
  2714   000C58  0E0F               	movlw	15
  2715   000C5A  1675               	andwf	??_motor_datos^0,f,c
  2716   000C5C  0E0A               	movlw	10
  2717   000C5E  6075               	cpfslt	??_motor_datos^0,c
  2718   000C60  D006               	goto	l4938
  2719                           
  2720                           ;TAD_DATOS.c: 216:                     LcPutChar('0' + (lastChar & 0x0F));
  2721   000C62  5018               	movf	motor_datos@lastChar^0,w,c
  2722   000C64  0B0F               	andlw	15
  2723   000C66  0F30               	addlw	48
  2724   000C68  EC29  F00A         	call	_LcPutChar
  2725                           
  2726                           ;TAD_DATOS.c: 217:                 }
  2727   000C6C  D009               	goto	l4942
  2728   000C6E                     l4938:
  2729                           
  2730                           ;TAD_DATOS.c: 220:                     LcPutChar('A' + (lastChar & 0x0F) - 10);
  2731   000C6E  5018               	movf	motor_datos@lastChar^0,w,c
  2732   000C70  0B0F               	andlw	15
  2733   000C72  0F37               	addlw	55
  2734   000C74  EC29  F00A         	call	_LcPutChar
  2735   000C78  D003               	goto	l4942
  2736   000C7A                     l4940:
  2737                           
  2738                           ;TAD_DATOS.c: 223:                 LcPutChar(' ');
  2739   000C7A  0E20               	movlw	32
  2740   000C7C  EC29  F00A         	call	_LcPutChar
  2741   000C80                     l4942:
  2742                           
  2743                           ;TAD_DATOS.c: 225:             state = 4;
  2744   000C80  0E04               	movlw	4
  2745   000C82  6E1A               	movwf	motor_datos@state^0,c
  2746                           
  2747                           ;TAD_DATOS.c: 226:             break;
  2748   000C84  0012               	return	
  2749   000C86                     l4944:
  2750                           
  2751                           ;TAD_DATOS.c: 230:             LcPutChar(' ');
  2752   000C86  0E20               	movlw	32
  2753   000C88  EC29  F00A         	call	_LcPutChar
  2754                           
  2755                           ;TAD_DATOS.c: 231:             state = 5;
  2756   000C8C  0E05               	movlw	5
  2757   000C8E  6E1A               	movwf	motor_datos@state^0,c
  2758                           
  2759                           ;TAD_DATOS.c: 232:             i = 0;
  2760   000C90  6A17               	clrf	motor_datos@i^0,c
  2761                           
  2762                           ;TAD_DATOS.c: 233:             break;
  2763   000C92  0012               	return	
  2764   000C94                     l4950:
  2765                           
  2766                           ;TAD_DATOS.c: 237:             if(i < 4) {
  2767   000C94  0E04               	movlw	4
  2768   000C96  6017               	cpfslt	motor_datos@i^0,c
  2769   000C98  D00B               	goto	l4958
  2770                           
  2771                           ;TAD_DATOS.c: 238:                 LcPutChar(currentTime[i]);
  2772   000C9A  5017               	movf	motor_datos@i^0,w,c
  2773   000C9C  0F77               	addlw	low _currentTime
  2774   000C9E  6ED9               	movwf	fsr2l,c
  2775   000CA0  6ADA               	clrf	fsr2h,c
  2776   000CA2  50DF               	movf	indf2,w,c
  2777   000CA4  EC29  F00A         	call	_LcPutChar
  2778                           
  2779                           ;TAD_DATOS.c: 239:                 i++;
  2780   000CA8  2A17               	incf	motor_datos@i^0,f,c
  2781                           
  2782                           ;TAD_DATOS.c: 240:                 state = 6;
  2783   000CAA  0E06               	movlw	6
  2784   000CAC  6E1A               	movwf	motor_datos@state^0,c
  2785                           
  2786                           ;TAD_DATOS.c: 241:             } else {
  2787   000CAE  0012               	return	
  2788   000CB0                     l4958:
  2789                           
  2790                           ;TAD_DATOS.c: 243:                 state = 9;
  2791   000CB0  0E09               	movlw	9
  2792   000CB2  6E1A               	movwf	motor_datos@state^0,c
  2793   000CB4  0012               	return	
  2794   000CB6                     l4960:
  2795                           
  2796                           ;TAD_DATOS.c: 249:             if(i == 2) {
  2797   000CB6  0E02               	movlw	2
  2798   000CB8  1817               	xorwf	motor_datos@i^0,w,c
  2799   000CBA  A4D8               	btfss	status,2,c
  2800   000CBC  D003               	goto	l4964
  2801                           
  2802                           ;TAD_DATOS.c: 250:                 LcPutChar(':');
  2803   000CBE  0E3A               	movlw	58
  2804   000CC0  EC29  F00A         	call	_LcPutChar
  2805   000CC4                     l4964:
  2806                           
  2807                           ;TAD_DATOS.c: 252:             state = 5;
  2808   000CC4  0E05               	movlw	5
  2809   000CC6  6E1A               	movwf	motor_datos@state^0,c
  2810                           
  2811                           ;TAD_DATOS.c: 253:             break;
  2812   000CC8  0012               	return	
  2813   000CCA                     l4966:
  2814                           
  2815                           ;TAD_DATOS.c: 257:             LcPutChar(' ');
  2816   000CCA  0E20               	movlw	32
  2817   000CCC  EC29  F00A         	call	_LcPutChar
  2818                           
  2819                           ;TAD_DATOS.c: 258:             pointer = 0;
  2820   000CD0  6A19               	clrf	motor_datos@pointer^0,c
  2821   000CD2                     l4970:
  2822                           
  2823                           ;TAD_DATOS.c: 259:             state = 10;
  2824   000CD2  0E0A               	movlw	10
  2825   000CD4  6E1A               	movwf	motor_datos@state^0,c
  2826                           
  2827                           ;TAD_DATOS.c: 260:             break;
  2828   000CD6  0012               	return	
  2829   000CD8                     l4972:
  2830                           
  2831                           ;TAD_DATOS.c: 264:             if(pointer < 6) {
  2832   000CD8  0E06               	movlw	6
  2833   000CDA  6019               	cpfslt	motor_datos@pointer^0,c
  2834   000CDC  D00C               	goto	l884
  2835                           
  2836                           ;TAD_DATOS.c: 265:                 if(pointer == 2) {
  2837   000CDE  0E02               	movlw	2
  2838   000CE0  1819               	xorwf	motor_datos@pointer^0,w,c
  2839   000CE2  A4D8               	btfss	status,2,c
  2840   000CE4  D005               	goto	l4978
  2841                           
  2842                           ;TAD_DATOS.c: 266:                     LcGotoXY(0, 1);
  2843   000CE6  0E01               	movlw	1
  2844   000CE8  6E6C               	movwf	LcGotoXY@Row^0,c
  2845   000CEA  0E00               	movlw	0
  2846   000CEC  ECA0  F009         	call	_LcGotoXY
  2847   000CF0                     l4978:
  2848                           
  2849                           ;TAD_DATOS.c: 268:                 state = 11;
  2850   000CF0  0E0B               	movlw	11
  2851   000CF2  6E1A               	movwf	motor_datos@state^0,c
  2852                           
  2853                           ;TAD_DATOS.c: 269:             } else {
  2854   000CF4  0012               	return	
  2855   000CF6                     l884:
  2856                           
  2857                           ;TAD_DATOS.c: 271:                 pointer = 0;
  2858   000CF6  6A19               	clrf	motor_datos@pointer^0,c
  2859                           
  2860                           ;TAD_DATOS.c: 272:                 state = 0;
  2861   000CF8  6A1A               	clrf	motor_datos@state^0,c
  2862   000CFA  0012               	return	
  2863   000CFC                     l4980:
  2864                           
  2865                           ;TAD_DATOS.c: 278:             LcPutChar('1' + pointer);
  2866   000CFC  5019               	movf	motor_datos@pointer^0,w,c
  2867   000CFE  0F31               	addlw	49
  2868   000D00  EC29  F00A         	call	_LcPutChar
  2869                           
  2870                           ;TAD_DATOS.c: 279:             state = 12;
  2871   000D04  0E0C               	movlw	12
  2872   000D06  6E1A               	movwf	motor_datos@state^0,c
  2873                           
  2874                           ;TAD_DATOS.c: 280:             break;
  2875   000D08  0012               	return	
  2876   000D0A                     l4984:
  2877                           
  2878                           ;TAD_DATOS.c: 284:             LcPutChar('-');
  2879   000D0A  0E2D               	movlw	45
  2880   000D0C  EC29  F00A         	call	_LcPutChar
  2881                           
  2882                           ;TAD_DATOS.c: 285:             state = 13;
  2883   000D10  0E0D               	movlw	13
  2884   000D12  6E1A               	movwf	motor_datos@state^0,c
  2885                           
  2886                           ;TAD_DATOS.c: 286:             break;
  2887   000D14  0012               	return	
  2888   000D16                     l4988:
  2889                           
  2890                           ;TAD_DATOS.c: 290:             LcPutChar('0' + configurations[index][pointer]);
  2891   000D16  507D               	movf	_index^0,w,c
  2892   000D18  0D06               	mullw	6
  2893   000D1A  50F3               	movf	243,w,c
  2894   000D1C  0F80               	addlw	low _configurations
  2895   000D1E  2419               	addwf	motor_datos@pointer^0,w,c
  2896   000D20  6ED9               	movwf	fsr2l,c
  2897   000D22  6ADA               	clrf	fsr2h,c
  2898   000D24  50DF               	movf	indf2,w,c
  2899   000D26  0F30               	addlw	48
  2900   000D28  EC29  F00A         	call	_LcPutChar
  2901                           
  2902                           ;TAD_DATOS.c: 291:             state = 14;
  2903   000D2C  0E0E               	movlw	14
  2904   000D2E  6E1A               	movwf	motor_datos@state^0,c
  2905                           
  2906                           ;TAD_DATOS.c: 292:             break;
  2907   000D30  0012               	return	
  2908   000D32                     l4992:
  2909                           
  2910                           ;TAD_DATOS.c: 296:             LcPutChar(' ');
  2911   000D32  0E20               	movlw	32
  2912   000D34  EC29  F00A         	call	_LcPutChar
  2913                           
  2914                           ;TAD_DATOS.c: 297:             pointer++;
  2915   000D38  2A19               	incf	motor_datos@pointer^0,f,c
  2916   000D3A  D7CB               	goto	l4970
  2917   000D3C                     l5000:
  2918   000D3C  501A               	movf	motor_datos@state^0,w,c
  2919                           
  2920                           ; Switch size 1, requested type "simple"
  2921                           ; Number of cases is 13, Range of values is 0 to 14
  2922                           ; switch strategies available:
  2923                           ; Name         Instructions Cycles
  2924                           ; simple_byte           40    21 (average)
  2925                           ;	Chosen strategy is simple_byte
  2926   000D3E  0A00               	xorlw	0	; case 0
  2927   000D40  B4D8               	btfsc	status,2,c
  2928   000D42  D76C               	goto	l4920
  2929   000D44  0A01               	xorlw	1	; case 1
  2930   000D46  B4D8               	btfsc	status,2,c
  2931   000D48  D774               	goto	l4926
  2932   000D4A  0A03               	xorlw	3	; case 2
  2933   000D4C  B4D8               	btfsc	status,2,c
  2934   000D4E  D774               	goto	l4928
  2935   000D50  0A01               	xorlw	1	; case 3
  2936   000D52  B4D8               	btfsc	status,2,c
  2937   000D54  D779               	goto	l871
  2938   000D56  0A07               	xorlw	7	; case 4
  2939   000D58  B4D8               	btfsc	status,2,c
  2940   000D5A  D795               	goto	l4944
  2941   000D5C  0A01               	xorlw	1	; case 5
  2942   000D5E  B4D8               	btfsc	status,2,c
  2943   000D60  D799               	goto	l4950
  2944   000D62  0A03               	xorlw	3	; case 6
  2945   000D64  B4D8               	btfsc	status,2,c
  2946   000D66  D7A7               	goto	l4960
  2947   000D68  0A0F               	xorlw	15	; case 9
  2948   000D6A  B4D8               	btfsc	status,2,c
  2949   000D6C  D7AE               	goto	l4966
  2950   000D6E  0A03               	xorlw	3	; case 10
  2951   000D70  B4D8               	btfsc	status,2,c
  2952   000D72  D7B2               	goto	l4972
  2953   000D74  0A01               	xorlw	1	; case 11
  2954   000D76  B4D8               	btfsc	status,2,c
  2955   000D78  D7C1               	goto	l4980
  2956   000D7A  0A07               	xorlw	7	; case 12
  2957   000D7C  B4D8               	btfsc	status,2,c
  2958   000D7E  D7C5               	goto	l4984
  2959   000D80  0A01               	xorlw	1	; case 13
  2960   000D82  B4D8               	btfsc	status,2,c
  2961   000D84  D7C8               	goto	l4988
  2962   000D86  0A03               	xorlw	3	; case 14
  2963   000D88  A4D8               	btfss	status,2,c
  2964   000D8A  0012               	return	
  2965   000D8C  D7D2               	goto	l4992
  2966   000D8E                     __end_of_motor_datos:
  2967                           	callstack 0
  2968                           
  2969 ;; *************** function _LcPutChar *****************
  2970 ;; Defined at:
  2971 ;;		line 154 in file "TAD_DISPLAY.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  c               1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  c               1   30[COMRAM] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1
  2985 ;;      Params:         0       0       0
  2986 ;;      Locals:         1       0       0
  2987 ;;      Temps:          0       0       0
  2988 ;;      Totals:         1       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; Hardware stack levels required when called: 7
  2992 ;; This function calls:
  2993 ;;		_CantaData
  2994 ;;		_LcGotoXY
  2995 ;;		_WaitForBusy
  2996 ;; This function is called by:
  2997 ;;		_motor_datos
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text2
  3002   001452                     __ptext2:
  3003                           	callstack 0
  3004   001452                     _LcPutChar:
  3005                           	callstack 22
  3006                           
  3007                           ;incstack = 0
  3008                           ;LcPutChar@c stored from wreg
  3009   001452  6E74               	movwf	LcPutChar@c^0,c
  3010                           
  3011                           ;TAD_DISPLAY.c: 164:  WaitForBusy(); CantaData(c);
  3012   001454  EC25  F00E         	call	_WaitForBusy	;wreg free
  3013   001458  5074               	movf	LcPutChar@c^0,w,c
  3014   00145A  EC22  F00D         	call	_CantaData
  3015                           
  3016                           ;TAD_DISPLAY.c: 166:  ++ColumnAct;
  3017   00145E  2A3C               	incf	_ColumnAct^0,f,c
  3018                           
  3019                           ;TAD_DISPLAY.c: 167:  if (Rows == 3) {
  3020   001460  0E03               	movlw	3
  3021   001462  183F               	xorwf	_Rows^0,w,c
  3022   001464  A4D8               	btfss	status,2,c
  3023   001466  D00F               	goto	l3734
  3024                           
  3025                           ;TAD_DISPLAY.c: 168:   if (ColumnAct >= 20) {
  3026   001468  0E13               	movlw	19
  3027   00146A  643C               	cpfsgt	_ColumnAct^0,c
  3028   00146C  0012               	return	
  3029                           
  3030                           ;TAD_DISPLAY.c: 169:    ColumnAct = 0;
  3031   00146E  6A3C               	clrf	_ColumnAct^0,c
  3032                           
  3033                           ;TAD_DISPLAY.c: 170:    if (++RowAct >= 4) RowAct = 0;
  3034   001470  2A3D               	incf	_RowAct^0,f,c
  3035   001472  0E03               	movlw	3
  3036   001474  643D               	cpfsgt	_RowAct^0,c
  3037   001476  D001               	goto	l3732
  3038   001478  6A3D               	clrf	_RowAct^0,c
  3039   00147A                     l3732:
  3040                           
  3041                           ;TAD_DISPLAY.c: 171:    LcGotoXY(ColumnAct, RowAct);
  3042   00147A  C03D  F06C         	movff	_RowAct,LcGotoXY@Row
  3043   00147E  503C               	movf	_ColumnAct^0,w,c
  3044   001480  ECA0  F009         	call	_LcGotoXY
  3045   001484  0012               	return	
  3046   001486                     l3734:
  3047                           
  3048                           ;TAD_DISPLAY.c: 174:  if (Rows == 2) {
  3049   001486  0E02               	movlw	2
  3050   001488  183F               	xorwf	_Rows^0,w,c
  3051   00148A  A4D8               	btfss	status,2,c
  3052   00148C  D00F               	goto	l3746
  3053                           
  3054                           ;TAD_DISPLAY.c: 175:   if (ColumnAct >= 40) {
  3055   00148E  0E27               	movlw	39
  3056   001490  643C               	cpfsgt	_ColumnAct^0,c
  3057   001492  0012               	return	
  3058                           
  3059                           ;TAD_DISPLAY.c: 176:    ColumnAct = 0;
  3060   001494  6A3C               	clrf	_ColumnAct^0,c
  3061                           
  3062                           ;TAD_DISPLAY.c: 177:    if (++RowAct >= 2) RowAct = 0;
  3063   001496  2A3D               	incf	_RowAct^0,f,c
  3064   001498  0E01               	movlw	1
  3065   00149A  643D               	cpfsgt	_RowAct^0,c
  3066   00149C  D001               	goto	l3744
  3067   00149E  6A3D               	clrf	_RowAct^0,c
  3068   0014A0                     l3744:
  3069                           
  3070                           ;TAD_DISPLAY.c: 178:    LcGotoXY(ColumnAct, RowAct);
  3071   0014A0  C03D  F06C         	movff	_RowAct,LcGotoXY@Row
  3072   0014A4  503C               	movf	_ColumnAct^0,w,c
  3073   0014A6  ECA0  F009         	call	_LcGotoXY
  3074   0014AA  0012               	return	
  3075   0014AC                     l3746:
  3076                           
  3077                           ;TAD_DISPLAY.c: 181:  if (RowAct == 1) {
  3078   0014AC  043D               	decf	_RowAct^0,w,c
  3079   0014AE  A4D8               	btfss	status,2,c
  3080   0014B0  0012               	return	
  3081                           
  3082                           ;TAD_DISPLAY.c: 182:   if (ColumnAct >= 40) ColumnAct = 0;
  3083   0014B2  0E27               	movlw	39
  3084   0014B4  643C               	cpfsgt	_ColumnAct^0,c
  3085   0014B6  D001               	goto	l3752
  3086   0014B8  6A3C               	clrf	_ColumnAct^0,c
  3087   0014BA                     l3752:
  3088                           
  3089                           ;TAD_DISPLAY.c: 183:   LcGotoXY(ColumnAct, RowAct);
  3090   0014BA  C03D  F06C         	movff	_RowAct,LcGotoXY@Row
  3091   0014BE  503C               	movf	_ColumnAct^0,w,c
  3092   0014C0  ECA0  F009         	call	_LcGotoXY
  3093   0014C4  0012               	return		;funcret
  3094   0014C6                     __end_of_LcPutChar:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _LcGotoXY *****************
  3098 ;; Defined at:
  3099 ;;		line 127 in file "TAD_DISPLAY.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  Column          1    wreg     unsigned char 
  3102 ;;  Row             1   22[COMRAM] unsigned char 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  Column          1   29[COMRAM] unsigned char 
  3105 ;;  Fisics          2   27[COMRAM] int 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1
  3115 ;;      Params:         1       0       0
  3116 ;;      Locals:         5       0       0
  3117 ;;      Temps:          2       0       0
  3118 ;;      Totals:         8       0       0
  3119 ;;Total ram usage:        8 bytes
  3120 ;; Hardware stack levels used: 1
  3121 ;; Hardware stack levels required when called: 6
  3122 ;; This function calls:
  3123 ;;		_CantaIR
  3124 ;;		_WaitForBusy
  3125 ;; This function is called by:
  3126 ;;		_LcPutChar
  3127 ;;		_motor_datos
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text3
  3132   001340                     __ptext3:
  3133                           	callstack 0
  3134   001340                     _LcGotoXY:
  3135                           	callstack 22
  3136                           
  3137                           ;incstack = 0
  3138                           ;LcGotoXY@Column stored from wreg
  3139   001340  6E73               	movwf	LcGotoXY@Column^0,c
  3140                           
  3141                           ;TAD_DISPLAY.c: 131:  int Fisics;;TAD_DISPLAY.c: 133:  switch (Rows) {
  3142   001342  D036               	goto	l3502
  3143   001344                     l3480:
  3144                           
  3145                           ;TAD_DISPLAY.c: 135:    Fisics = Column + (!Row ? 0 : 0x40); break;
  3146   001344  506C               	movf	LcGotoXY@Row^0,w,c
  3147   001346  B4D8               	btfsc	status,2,c
  3148   001348  D004               	goto	l3484
  3149   00134A  0E00               	movlw	0
  3150   00134C  6E70               	movwf	(_LcGotoXY$404+1)^0,c
  3151   00134E  0E40               	movlw	64
  3152   001350  D003               	goto	L1
  3153   001352                     l3484:
  3154   001352  0E00               	movlw	0
  3155   001354  6E70               	movwf	(_LcGotoXY$404+1)^0,c
  3156   001356  0E00               	movlw	0
  3157   001358                     L1:
  3158   001358  6E6F               	movwf	_LcGotoXY$404^0,c
  3159   00135A  5073               	movf	LcGotoXY@Column^0,w,c
  3160   00135C  246F               	addwf	_LcGotoXY$404^0,w,c
  3161   00135E  6E71               	movwf	LcGotoXY@Fisics^0,c
  3162   001360  0E00               	movlw	0
  3163   001362  2070               	addwfc	(_LcGotoXY$404+1)^0,w,c
  3164   001364  6E72               	movwf	(LcGotoXY@Fisics+1)^0,c
  3165   001366  D02F               	goto	l3504
  3166   001368                     l121:
  3167                           
  3168                           ;TAD_DISPLAY.c: 137:    Fisics = Column;
  3169   001368  C073  F071         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  3170   00136C  6A72               	clrf	(LcGotoXY@Fisics+1)^0,c
  3171                           
  3172                           ;TAD_DISPLAY.c: 138:    if (Row == 1) Fisics += 0x40; else
  3173   00136E  046C               	decf	LcGotoXY@Row^0,w,c
  3174   001370  A4D8               	btfss	status,2,c
  3175   001372  D002               	goto	l3492
  3176   001374  0E40               	movlw	64
  3177   001376  D005               	goto	L2
  3178   001378                     l3492:
  3179                           
  3180                           ;TAD_DISPLAY.c: 139:    if (Row == 2) Fisics += Columns; else
  3181   001378  0E02               	movlw	2
  3182   00137A  186C               	xorwf	LcGotoXY@Row^0,w,c
  3183   00137C  A4D8               	btfss	status,2,c
  3184   00137E  D004               	goto	l3496
  3185   001380  503E               	movf	_Columns^0,w,c
  3186   001382                     L2:
  3187   001382  2671               	addwf	LcGotoXY@Fisics^0,f,c
  3188   001384  0E00               	movlw	0
  3189   001386  D00E               	goto	L3
  3190   001388                     l3496:
  3191                           
  3192                           ;TAD_DISPLAY.c: 140:    if (Row == 3) Fisics += 0x40+Columns;
  3193   001388  0E03               	movlw	3
  3194   00138A  186C               	xorwf	LcGotoXY@Row^0,w,c
  3195   00138C  A4D8               	btfss	status,2,c
  3196   00138E  D01B               	goto	l3504
  3197   001390  503E               	movf	_Columns^0,w,c
  3198   001392  6E6D               	movwf	??_LcGotoXY^0,c
  3199   001394  6A6E               	clrf	(??_LcGotoXY+1)^0,c
  3200   001396  0E40               	movlw	64
  3201   001398  266D               	addwf	??_LcGotoXY^0,f,c
  3202   00139A  0E00               	movlw	0
  3203   00139C  226E               	addwfc	(??_LcGotoXY+1)^0,f,c
  3204   00139E  506D               	movf	??_LcGotoXY^0,w,c
  3205   0013A0  2671               	addwf	LcGotoXY@Fisics^0,f,c
  3206   0013A2  506E               	movf	(??_LcGotoXY+1)^0,w,c
  3207   0013A4                     L3:
  3208   0013A4  2272               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  3209                           
  3210                           ;TAD_DISPLAY.c: 141:    break;
  3211   0013A6  D00F               	goto	l3504
  3212   0013A8                     l128:
  3213                           
  3214                           ;TAD_DISPLAY.c: 144:    Fisics = Column; break;
  3215   0013A8  C073  F071         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  3216   0013AC  6A72               	clrf	(LcGotoXY@Fisics+1)^0,c
  3217   0013AE  D00B               	goto	l3504
  3218   0013B0                     l3502:
  3219   0013B0  503F               	movf	_Rows^0,w,c
  3220                           
  3221                           ; Switch size 1, requested type "simple"
  3222                           ; Number of cases is 3, Range of values is 1 to 4
  3223                           ; switch strategies available:
  3224                           ; Name         Instructions Cycles
  3225                           ; simple_byte           10     6 (average)
  3226                           ;	Chosen strategy is simple_byte
  3227   0013B2  0A01               	xorlw	1	; case 1
  3228   0013B4  B4D8               	btfsc	status,2,c
  3229   0013B6  D7F8               	goto	l128
  3230   0013B8  0A03               	xorlw	3	; case 2
  3231   0013BA  B4D8               	btfsc	status,2,c
  3232   0013BC  D7C3               	goto	l3480
  3233   0013BE  0A06               	xorlw	6	; case 4
  3234   0013C0  B4D8               	btfsc	status,2,c
  3235   0013C2  D7D2               	goto	l121
  3236   0013C4  D7F1               	goto	l128
  3237   0013C6                     l3504:
  3238                           
  3239                           ;TAD_DISPLAY.c: 147:  WaitForBusy();
  3240   0013C6  EC25  F00E         	call	_WaitForBusy	;wreg free
  3241                           
  3242                           ;TAD_DISPLAY.c: 148:  CantaIR((char)(0x80 | Fisics));
  3243   0013CA  5071               	movf	LcGotoXY@Fisics^0,w,c
  3244   0013CC  0980               	iorlw	128
  3245   0013CE  EC3B  F00D         	call	_CantaIR
  3246                           
  3247                           ;TAD_DISPLAY.c: 150:  RowAct = Row;
  3248   0013D2  C06C  F03D         	movff	LcGotoXY@Row,_RowAct
  3249                           
  3250                           ;TAD_DISPLAY.c: 151:  ColumnAct = Column;
  3251   0013D6  C073  F03C         	movff	LcGotoXY@Column,_ColumnAct
  3252   0013DA  0012               	return		;funcret
  3253   0013DC                     __end_of_LcGotoXY:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _CantaData *****************
  3257 ;; Defined at:
  3258 ;;		line 238 in file "TAD_DISPLAY.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  Data            1    wreg     unsigned char 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  Data            1    3[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1
  3272 ;;      Params:         0       0       0
  3273 ;;      Locals:         1       0       0
  3274 ;;      Temps:          0       0       0
  3275 ;;      Totals:         1       0       0
  3276 ;;Total ram usage:        1 bytes
  3277 ;; Hardware stack levels used: 1
  3278 ;; Hardware stack levels required when called: 4
  3279 ;; This function calls:
  3280 ;;		_CantaPartAlta
  3281 ;;		_CantaPartBaixa
  3282 ;; This function is called by:
  3283 ;;		_LcPutChar
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text4
  3288   001A44                     __ptext4:
  3289                           	callstack 0
  3290   001A44                     _CantaData:
  3291                           	callstack 24
  3292                           
  3293                           ;incstack = 0
  3294                           ;CantaData@Data stored from wreg
  3295   001A44  6E59               	movwf	CantaData@Data^0,c
  3296                           
  3297                           ;TAD_DISPLAY.c: 239:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  3298   001A46  9096               	bcf	150,0,c	;volatile
  3299   001A48  9296               	bcf	150,1,c	;volatile
  3300   001A4A  9A93               	bcf	147,5,c	;volatile
  3301   001A4C  9893               	bcf	147,4,c	;volatile
  3302                           
  3303                           ;TAD_DISPLAY.c: 240:  (LATBbits.LATB3 = 1);
  3304   001A4E  868A               	bsf	138,3,c	;volatile
  3305                           
  3306                           ;TAD_DISPLAY.c: 241:  (LATBbits.LATB2 = 0);
  3307   001A50  948A               	bcf	138,2,c	;volatile
  3308                           
  3309                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB1 = 1);
  3310   001A52  828A               	bsf	138,1,c	;volatile
  3311                           
  3312                           ;TAD_DISPLAY.c: 243:  CantaPartAlta(Data);
  3313   001A54  5059               	movf	CantaData@Data^0,w,c
  3314   001A56  EC74  F00B         	call	_CantaPartAlta
  3315                           
  3316                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3317   001A5A  828A               	bsf	138,1,c	;volatile
  3318                           
  3319                           ;TAD_DISPLAY.c: 245:  (LATBbits.LATB1 = 0);
  3320   001A5C  928A               	bcf	138,1,c	;volatile
  3321                           
  3322                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 0);
  3323   001A5E  928A               	bcf	138,1,c	;volatile
  3324                           
  3325                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 1);
  3326   001A60  828A               	bsf	138,1,c	;volatile
  3327                           
  3328                           ;TAD_DISPLAY.c: 248:  CantaPartBaixa(Data);
  3329   001A62  5059               	movf	CantaData@Data^0,w,c
  3330   001A64  EC42  F00B         	call	_CantaPartBaixa
  3331                           
  3332                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3333   001A68  828A               	bsf	138,1,c	;volatile
  3334                           
  3335                           ;TAD_DISPLAY.c: 250:  (LATBbits.LATB1 = 0);
  3336   001A6A  928A               	bcf	138,1,c	;volatile
  3337                           
  3338                           ;TAD_DISPLAY.c: 251:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3339   001A6C  8096               	bsf	150,0,c	;volatile
  3340   001A6E  8296               	bsf	150,1,c	;volatile
  3341   001A70  8A93               	bsf	147,5,c	;volatile
  3342   001A72  8893               	bsf	147,4,c	;volatile
  3343   001A74  0012               	return		;funcret
  3344   001A76                     __end_of_CantaData:
  3345                           	callstack 0
  3346                           
  3347 ;; *************** function _motor_RFID *****************
  3348 ;; Defined at:
  3349 ;;		line 169 in file "TAD_RFID.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  flag            1   32[COMRAM] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1
  3363 ;;      Params:         0       0       0
  3364 ;;      Locals:         3       0       0
  3365 ;;      Temps:          2       0       0
  3366 ;;      Totals:         5       0       0
  3367 ;;Total ram usage:        5 bytes
  3368 ;; Hardware stack levels used: 1
  3369 ;; Hardware stack levels required when called: 9
  3370 ;; This function calls:
  3371 ;;		_TI_GetTics
  3372 ;;		_TI_ResetTics
  3373 ;;		_getActualUID
  3374 ;;		_getCurrentUserIndex
  3375 ;;		_motor_Read
  3376 ;;		_motor_StartSendString
  3377 ;;		_motor_Write
  3378 ;;		_motor_setCurrentUser
  3379 ;;		_newConfiguration
  3380 ;;		_setIndex
  3381 ;;		_setStartSendString
  3382 ;; This function is called by:
  3383 ;;		_main
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text5
  3388   00002A                     __ptext5:
  3389                           	callstack 0
  3390   00002A                     _motor_RFID:
  3391                           	callstack 21
  3392                           
  3393                           ;TAD_RFID.c: 195:     if (operation_pending == 1) {
  3394                           
  3395                           ;incstack = 0
  3396   00002A  042A               	decf	motor_RFID@operation_pending^0,w,c
  3397   00002C  A4D8               	btfss	status,2,c
  3398   00002E  D00C               	goto	l4476
  3399                           
  3400                           ;TAD_RFID.c: 197:         flag = motor_Read(addr);
  3401   000030  5029               	movf	motor_RFID@addr^0,w,c
  3402   000032  EC39  F009         	call	_motor_Read
  3403   000036  6E76               	movwf	motor_RFID@flag^0,c
  3404                           
  3405                           ;TAD_RFID.c: 198:         if (flag != 0xFE) {
  3406   000038  0EFE               	movlw	254
  3407   00003A  1876               	xorwf	motor_RFID@flag^0,w,c
  3408   00003C  B4D8               	btfsc	status,2,c
  3409   00003E  0012               	return	
  3410                           
  3411                           ;TAD_RFID.c: 199:             tempRegValue = flag;
  3412   000040  C076  F030         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3413                           
  3414                           ;TAD_RFID.c: 200:             operation_pending = 0;
  3415   000044  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3416                           
  3417                           ;TAD_RFID.c: 201:         } else {
  3418   000046  0012               	return	
  3419   000048                     l4476:
  3420   000048  0E02               	movlw	2
  3421   00004A  182A               	xorwf	motor_RFID@operation_pending^0,w,c
  3422   00004C  A4D8               	btfss	status,2,c
  3423   00004E  D00B               	goto	l4484
  3424                           
  3425                           ;TAD_RFID.c: 206:         flag = motor_Write(addr, value);
  3426   000050  C028  F05E         	movff	motor_RFID@value,motor_Write@value
  3427   000054  5029               	movf	motor_RFID@addr^0,w,c
  3428   000056  EC0C  F00B         	call	_motor_Write
  3429   00005A  6E76               	movwf	motor_RFID@flag^0,c
  3430                           
  3431                           ;TAD_RFID.c: 207:         if (flag != 0) {
  3432   00005C  5076               	movf	motor_RFID@flag^0,w,c
  3433   00005E  B4D8               	btfsc	status,2,c
  3434   000060  0012               	return	
  3435                           
  3436                           ;TAD_RFID.c: 208:             operation_pending = 0;
  3437   000062  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3438                           
  3439                           ;TAD_RFID.c: 209:         } else {
  3440   000064  0012               	return	
  3441   000066                     l4484:
  3442                           
  3443                           ;TAD_RFID.c: 214:         if (state != last_state) {
  3444   000066  502B               	movf	motor_RFID@last_state^0,w,c
  3445   000068  183A               	xorwf	motor_RFID@state^0,w,c
  3446   00006A  B4D8               	btfsc	status,2,c
  3447   00006C  D008               	goto	l4492
  3448                           
  3449                           ;TAD_RFID.c: 215:             last_state = state;
  3450   00006E  C03A  F02B         	movff	motor_RFID@state,motor_RFID@last_state
  3451                           
  3452                           ;TAD_RFID.c: 218:             if (state == 1) {
  3453   000072  043A               	decf	motor_RFID@state^0,w,c
  3454   000074  A4D8               	btfss	status,2,c
  3455   000076  D003               	goto	l4492
  3456                           
  3457                           ;TAD_RFID.c: 219:                 TI_ResetTics(card_timer);
  3458   000078  5051               	movf	_card_timer^0,w,c
  3459   00007A  ECA5  F00D         	call	_TI_ResetTics
  3460   00007E                     l4492:
  3461                           
  3462                           ;TAD_RFID.c: 225:         if (state == 0 && TI_GetTics(card_timer) > 200) {
  3463   00007E  503A               	movf	motor_RFID@state^0,w,c
  3464   000080  A4D8               	btfss	status,2,c
  3465   000082  D304               	goto	l4848
  3466   000084  5051               	movf	_card_timer^0,w,c
  3467   000086  EC88  F00C         	call	_TI_GetTics
  3468   00008A  505A               	movf	(?_TI_GetTics+3)^0,w,c
  3469   00008C  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  3470   00008E  1058               	iorwf	(?_TI_GetTics+1)^0,w,c
  3471   000090  E104               	bnz	u3950
  3472   000092  0EC9               	movlw	201
  3473   000094  5C57               	subwf	?_TI_GetTics^0,w,c
  3474   000096  A0D8               	btfss	status,0,c
  3475   000098  D2F9               	goto	l4848
  3476   00009A                     u3950:
  3477                           
  3478                           ;TAD_RFID.c: 226:             cardRemoved = 1;
  3479   00009A  0E01               	movlw	1
  3480   00009C  6E2C               	movwf	motor_RFID@cardRemoved^0,c
  3481                           
  3482                           ;TAD_RFID.c: 227:             TI_ResetTics(card_timer);
  3483   00009E  5051               	movf	_card_timer^0,w,c
  3484   0000A0  ECA5  F00D         	call	_TI_ResetTics
  3485   0000A4  D2F3               	goto	l4848
  3486   0000A6                     l4500:
  3487                           
  3488                           ;TAD_RFID.c: 235:                         addr = 0x0D;
  3489   0000A6  0E0D               	movlw	13
  3490   0000A8  6E29               	movwf	motor_RFID@addr^0,c
  3491                           
  3492                           ;TAD_RFID.c: 236:                         value = 0x07;
  3493   0000AA  0E07               	movlw	7
  3494   0000AC  6E28               	movwf	motor_RFID@value^0,c
  3495                           
  3496                           ;TAD_RFID.c: 237:                         operation_pending = 2;
  3497   0000AE  0E02               	movlw	2
  3498   0000B0  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3499                           
  3500                           ;TAD_RFID.c: 238:                         substate = 1;
  3501   0000B2  0E01               	movlw	1
  3502   0000B4  6E39               	movwf	motor_RFID@substate^0,c
  3503                           
  3504                           ;TAD_RFID.c: 239:                         break;
  3505   0000B6  0012               	return	
  3506   0000B8                     l4502:
  3507                           
  3508                           ;TAD_RFID.c: 241:                         TagType = 0x26;
  3509   0000B8  0E26               	movlw	38
  3510   0000BA  6E33               	movwf	motor_RFID@TagType^0,c
  3511                           
  3512                           ;TAD_RFID.c: 242:                         irqEn = 0x77;
  3513   0000BC  0E77               	movlw	119
  3514   0000BE  6E38               	movwf	motor_RFID@irqEn^0,c
  3515                           
  3516                           ;TAD_RFID.c: 243:                         waitIRq = 0x30;
  3517   0000C0  0E30               	movlw	48
  3518   0000C2  6E37               	movwf	motor_RFID@waitIRq^0,c
  3519                           
  3520                           ;TAD_RFID.c: 244:                         addr = 0x02;
  3521   0000C4  0E02               	movlw	2
  3522   0000C6  6E29               	movwf	motor_RFID@addr^0,c
  3523                           
  3524                           ;TAD_RFID.c: 245:                         value = irqEn | 0x80;
  3525   0000C8  5038               	movf	motor_RFID@irqEn^0,w,c
  3526   0000CA  0980               	iorlw	128
  3527   0000CC  6E28               	movwf	motor_RFID@value^0,c
  3528                           
  3529                           ;TAD_RFID.c: 246:                         operation_pending = 2;
  3530   0000CE  0E02               	movlw	2
  3531   0000D0  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3532                           
  3533                           ;TAD_RFID.c: 247:                         substate = 2;
  3534   0000D2  0E02               	movlw	2
  3535   0000D4  6E39               	movwf	motor_RFID@substate^0,c
  3536                           
  3537                           ;TAD_RFID.c: 248:                         break;
  3538   0000D6  0012               	return	
  3539   0000D8                     l4510:
  3540                           
  3541                           ;TAD_RFID.c: 250:                         addr = 0x04;
  3542   0000D8  0E04               	movlw	4
  3543   0000DA  6E29               	movwf	motor_RFID@addr^0,c
  3544                           
  3545                           ;TAD_RFID.c: 251:                         operation_pending = 1;
  3546   0000DC  0E01               	movlw	1
  3547   0000DE  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3548                           
  3549                           ;TAD_RFID.c: 252:                         substate = 3;
  3550   0000E0  0E03               	movlw	3
  3551   0000E2  6E39               	movwf	motor_RFID@substate^0,c
  3552                           
  3553                           ;TAD_RFID.c: 253:                         break;
  3554   0000E4  0012               	return	
  3555   0000E6                     l4512:
  3556                           
  3557                           ;TAD_RFID.c: 255:                         if (tempRegValue == 0xFF) {
  3558   0000E6  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3559   0000E8  A4D8               	btfss	status,2,c
  3560   0000EA  D002               	goto	l4516
  3561   0000EC                     u3960:
  3562                           
  3563                           ;TAD_RFID.c: 256:                             substate = 0;
  3564   0000EC  6A39               	clrf	motor_RFID@substate^0,c
  3565                           
  3566                           ;TAD_RFID.c: 257:                         } else {
  3567   0000EE  0012               	return	
  3568   0000F0                     l4516:
  3569                           
  3570                           ;TAD_RFID.c: 258:                             addr = 0x02;
  3571   0000F0  0E02               	movlw	2
  3572   0000F2  6E29               	movwf	motor_RFID@addr^0,c
  3573                           
  3574                           ;TAD_RFID.c: 259:                             value = tempRegValue & ~0x80;
  3575   0000F4  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3576   0000F6  0B7F               	andlw	127
  3577   0000F8  6E28               	movwf	motor_RFID@value^0,c
  3578                           
  3579                           ;TAD_RFID.c: 260:                             operation_pending = 2;
  3580   0000FA  0E02               	movlw	2
  3581   0000FC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3582                           
  3583                           ;TAD_RFID.c: 261:                             substate = 4;
  3584   0000FE  0E04               	movlw	4
  3585   000100  6E39               	movwf	motor_RFID@substate^0,c
  3586   000102  0012               	return	
  3587   000104                     l4524:
  3588                           
  3589                           ;TAD_RFID.c: 265:                         addr = 0x0A;
  3590   000104  0E0A               	movlw	10
  3591   000106  6E29               	movwf	motor_RFID@addr^0,c
  3592                           
  3593                           ;TAD_RFID.c: 266:                         operation_pending = 1;
  3594   000108  0E01               	movlw	1
  3595   00010A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3596                           
  3597                           ;TAD_RFID.c: 267:                         substate = 5;
  3598   00010C  0E05               	movlw	5
  3599   00010E  6E39               	movwf	motor_RFID@substate^0,c
  3600                           
  3601                           ;TAD_RFID.c: 268:                         break;
  3602   000110  0012               	return	
  3603   000112                     l4526:
  3604                           
  3605                           ;TAD_RFID.c: 270:                         if (tempRegValue == 0xFF) {
  3606   000112  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3607   000114  B4D8               	btfsc	status,2,c
  3608   000116  D7EA               	goto	u3960
  3609                           
  3610                           ;TAD_RFID.c: 273:                             addr = 0x0A;
  3611   000118  0E0A               	movlw	10
  3612   00011A  6E29               	movwf	motor_RFID@addr^0,c
  3613                           
  3614                           ;TAD_RFID.c: 274:                             value = tempRegValue | 0x80;
  3615   00011C  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3616   00011E  0980               	iorlw	128
  3617   000120  6E28               	movwf	motor_RFID@value^0,c
  3618                           
  3619                           ;TAD_RFID.c: 275:                             operation_pending = 2;
  3620   000122  0E02               	movlw	2
  3621   000124  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3622                           
  3623                           ;TAD_RFID.c: 276:                             substate = 6;
  3624   000126  0E06               	movlw	6
  3625   000128  6E39               	movwf	motor_RFID@substate^0,c
  3626   00012A  0012               	return	
  3627   00012C                     l4538:
  3628                           
  3629                           ;TAD_RFID.c: 280:                         addr = 0x01;
  3630   00012C  0E01               	movlw	1
  3631   00012E  6E29               	movwf	motor_RFID@addr^0,c
  3632                           
  3633                           ;TAD_RFID.c: 281:                         value = 0x00;
  3634   000130  6A28               	clrf	motor_RFID@value^0,c
  3635                           
  3636                           ;TAD_RFID.c: 282:                         operation_pending = 2;
  3637   000132  0E02               	movlw	2
  3638   000134  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3639                           
  3640                           ;TAD_RFID.c: 283:                         substate = 7;
  3641   000136  0E07               	movlw	7
  3642   000138  6E39               	movwf	motor_RFID@substate^0,c
  3643                           
  3644                           ;TAD_RFID.c: 284:                         break;
  3645   00013A  0012               	return	
  3646   00013C                     l4542:
  3647                           
  3648                           ;TAD_RFID.c: 286:                         addr = 0x09;
  3649   00013C  0E09               	movlw	9
  3650   00013E  6E29               	movwf	motor_RFID@addr^0,c
  3651                           
  3652                           ;TAD_RFID.c: 287:                         value = TagType;
  3653   000140  C033  F028         	movff	motor_RFID@TagType,motor_RFID@value
  3654                           
  3655                           ;TAD_RFID.c: 288:                         operation_pending = 2;
  3656   000144  0E02               	movlw	2
  3657   000146  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3658                           
  3659                           ;TAD_RFID.c: 289:                         substate = 8;
  3660   000148  0E08               	movlw	8
  3661   00014A  6E39               	movwf	motor_RFID@substate^0,c
  3662                           
  3663                           ;TAD_RFID.c: 290:                         break;
  3664   00014C  0012               	return	
  3665   00014E                     l4546:
  3666                           
  3667                           ;TAD_RFID.c: 292:                         addr = 0x01;
  3668   00014E  0E01               	movlw	1
  3669   000150  6E29               	movwf	motor_RFID@addr^0,c
  3670                           
  3671                           ;TAD_RFID.c: 293:                         value = 0x0C;
  3672   000152  0E0C               	movlw	12
  3673   000154  6E28               	movwf	motor_RFID@value^0,c
  3674                           
  3675                           ;TAD_RFID.c: 294:                         operation_pending = 2;
  3676   000156  0E02               	movlw	2
  3677   000158  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3678                           
  3679                           ;TAD_RFID.c: 295:                         substate = 9;
  3680   00015A  0E09               	movlw	9
  3681   00015C  6E39               	movwf	motor_RFID@substate^0,c
  3682                           
  3683                           ;TAD_RFID.c: 296:                         break;
  3684   00015E  0012               	return	
  3685   000160                     l4548:
  3686                           
  3687                           ;TAD_RFID.c: 298:                         addr = 0x0D;
  3688   000160  0E0D               	movlw	13
  3689   000162  6E29               	movwf	motor_RFID@addr^0,c
  3690                           
  3691                           ;TAD_RFID.c: 299:                         operation_pending = 1;
  3692   000164  0E01               	movlw	1
  3693   000166  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3694                           
  3695                           ;TAD_RFID.c: 300:                         substate = 10;
  3696   000168  0E0A               	movlw	10
  3697   00016A  6E39               	movwf	motor_RFID@substate^0,c
  3698                           
  3699                           ;TAD_RFID.c: 301:                         break;
  3700   00016C  0012               	return	
  3701   00016E                     l4550:
  3702                           
  3703                           ;TAD_RFID.c: 303:                         if (tempRegValue == 0xFF) {
  3704   00016E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3705   000170  B4D8               	btfsc	status,2,c
  3706   000172  D7BC               	goto	u3960
  3707                           
  3708                           ;TAD_RFID.c: 306:                             addr = 0x0D;
  3709   000174  0E0D               	movlw	13
  3710   000176  6E29               	movwf	motor_RFID@addr^0,c
  3711                           
  3712                           ;TAD_RFID.c: 307:                             value = tempRegValue | 0x80;
  3713   000178  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3714   00017A  0980               	iorlw	128
  3715   00017C  6E28               	movwf	motor_RFID@value^0,c
  3716                           
  3717                           ;TAD_RFID.c: 308:                             operation_pending = 2;
  3718   00017E  0E02               	movlw	2
  3719   000180  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3720                           
  3721                           ;TAD_RFID.c: 309:                             substate = 11;
  3722   000182  0E0B               	movlw	11
  3723   000184  6E39               	movwf	motor_RFID@substate^0,c
  3724   000186  0012               	return	
  3725   000188                     l412:
  3726                           
  3727                           ;TAD_RFID.c: 313:                         i = 0xFF;
  3728   000188  6835               	setf	motor_RFID@i^0,c
  3729                           
  3730                           ;TAD_RFID.c: 314:                         addr = 0x04;
  3731   00018A  0E04               	movlw	4
  3732   00018C  6E29               	movwf	motor_RFID@addr^0,c
  3733                           
  3734                           ;TAD_RFID.c: 315:                         operation_pending = 1;
  3735   00018E  0E01               	movlw	1
  3736   000190  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3737                           
  3738                           ;TAD_RFID.c: 316:                         substate = 12;
  3739   000192  0E0C               	movlw	12
  3740   000194  6E39               	movwf	motor_RFID@substate^0,c
  3741                           
  3742                           ;TAD_RFID.c: 317:                         break;
  3743   000196  0012               	return	
  3744   000198                     l4564:
  3745                           
  3746                           ;TAD_RFID.c: 319:                         if (tempRegValue == 0xFF) {
  3747   000198  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3748   00019A  B4D8               	btfsc	status,2,c
  3749   00019C  D7A7               	goto	u3960
  3750                           
  3751                           ;TAD_RFID.c: 322:                             n = tempRegValue;
  3752   00019E  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3753                           
  3754                           ;TAD_RFID.c: 323:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3755   0001A2  B036               	btfsc	motor_RFID@n^0,0,c
  3756   0001A4  D007               	goto	l4572
  3757   0001A6  5036               	movf	motor_RFID@n^0,w,c
  3758   0001A8  1437               	andwf	motor_RFID@waitIRq^0,w,c
  3759   0001AA  0900               	iorlw	0
  3760   0001AC  A4D8               	btfss	status,2,c
  3761   0001AE  D002               	goto	l4572
  3762   0001B0  2E35               	decfsz	motor_RFID@i^0,f,c
  3763   0001B2  D007               	goto	l4574
  3764   0001B4                     l4572:
  3765                           
  3766                           ;TAD_RFID.c: 324:                                 addr = 0x0D;
  3767   0001B4  0E0D               	movlw	13
  3768   0001B6  6E29               	movwf	motor_RFID@addr^0,c
  3769                           
  3770                           ;TAD_RFID.c: 325:                                 operation_pending = 1;
  3771   0001B8  0E01               	movlw	1
  3772   0001BA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3773                           
  3774                           ;TAD_RFID.c: 326:                                 substate = 13;
  3775   0001BC  0E0D               	movlw	13
  3776   0001BE  6E39               	movwf	motor_RFID@substate^0,c
  3777                           
  3778                           ;TAD_RFID.c: 327:                             } else {
  3779   0001C0  0012               	return	
  3780   0001C2                     l4574:
  3781                           
  3782                           ;TAD_RFID.c: 328:                                 addr = 0x04;
  3783   0001C2  0E04               	movlw	4
  3784   0001C4  6E29               	movwf	motor_RFID@addr^0,c
  3785                           
  3786                           ;TAD_RFID.c: 329:                                 operation_pending = 1;
  3787   0001C6  0E01               	movlw	1
  3788   0001C8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3789   0001CA  0012               	return	
  3790   0001CC                     l4576:
  3791                           
  3792                           ;TAD_RFID.c: 334:                         if (tempRegValue == 0xFF) {
  3793   0001CC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3794   0001CE  B4D8               	btfsc	status,2,c
  3795   0001D0  D78D               	goto	u3960
  3796   0001D2  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3797   0001D4  B4D8               	btfsc	status,2,c
  3798   0001D6  D00A               	goto	l4590
  3799                           
  3800                           ;TAD_RFID.c: 337:                             addr = 0x0D;
  3801   0001D8  0E0D               	movlw	13
  3802   0001DA  6E29               	movwf	motor_RFID@addr^0,c
  3803                           
  3804                           ;TAD_RFID.c: 338:                             value = tempRegValue & ~0x80;
  3805   0001DC  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3806   0001DE  0B7F               	andlw	127
  3807   0001E0  6E28               	movwf	motor_RFID@value^0,c
  3808                           
  3809                           ;TAD_RFID.c: 339:                             operation_pending = 2;
  3810   0001E2  0E02               	movlw	2
  3811   0001E4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3812                           
  3813                           ;TAD_RFID.c: 340:                             substate = 14;
  3814   0001E6  0E0E               	movlw	14
  3815   0001E8  6E39               	movwf	motor_RFID@substate^0,c
  3816                           
  3817                           ;TAD_RFID.c: 341:                         } else {
  3818   0001EA  0012               	return	
  3819   0001EC                     l4590:
  3820                           
  3821                           ;TAD_RFID.c: 342:                             addr = 0x0D;
  3822   0001EC  0E0D               	movlw	13
  3823   0001EE  6E29               	movwf	motor_RFID@addr^0,c
  3824                           
  3825                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3826   0001F0  0E01               	movlw	1
  3827   0001F2  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3828   0001F4  0012               	return	
  3829   0001F6                     l4592:
  3830                           
  3831                           ;TAD_RFID.c: 348:                         addr = 0x06;
  3832   0001F6  0E06               	movlw	6
  3833   0001F8  6E29               	movwf	motor_RFID@addr^0,c
  3834                           
  3835                           ;TAD_RFID.c: 349:                         operation_pending = 1;
  3836   0001FA  0E01               	movlw	1
  3837   0001FC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3838                           
  3839                           ;TAD_RFID.c: 350:                         substate = 15;
  3840   0001FE  0E0F               	movlw	15
  3841   000200  6E39               	movwf	motor_RFID@substate^0,c
  3842                           
  3843                           ;TAD_RFID.c: 351:                         break;
  3844   000202  0012               	return	
  3845   000204                     l4594:
  3846                           
  3847                           ;TAD_RFID.c: 353:                         if (tempRegValue == 0xFF) {
  3848   000204  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3849   000206  B4D8               	btfsc	status,2,c
  3850   000208  D771               	goto	u3960
  3851   00020A  5035               	movf	motor_RFID@i^0,w,c
  3852   00020C  B4D8               	btfsc	status,2,c
  3853   00020E  D00D               	goto	l429
  3854   000210  C030  F072         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3855   000214  0E1B               	movlw	27
  3856   000216  1672               	andwf	??_motor_RFID^0,f,c
  3857   000218  A4D8               	btfss	status,2,c
  3858   00021A  D007               	goto	l429
  3859                           
  3860                           ;TAD_RFID.c: 356:                             addr = 0x0A;
  3861   00021C  0E0A               	movlw	10
  3862   00021E  6E29               	movwf	motor_RFID@addr^0,c
  3863                           
  3864                           ;TAD_RFID.c: 357:                             operation_pending = 1;
  3865   000220  0E01               	movlw	1
  3866   000222  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3867                           
  3868                           ;TAD_RFID.c: 358:                             substate = 16;
  3869   000224  0E10               	movlw	16
  3870   000226  6E39               	movwf	motor_RFID@substate^0,c
  3871                           
  3872                           ;TAD_RFID.c: 359:                         } else {
  3873   000228  0012               	return	
  3874   00022A                     l429:
  3875                           
  3876                           ;TAD_RFID.c: 361:                             state = substate = 0;
  3877   00022A  6A39               	clrf	motor_RFID@substate^0,c
  3878   00022C  6A3A               	clrf	motor_RFID@state^0,c
  3879   00022E  0012               	return	
  3880   000230                     l4604:
  3881                           
  3882                           ;TAD_RFID.c: 365:                         if (tempRegValue == 0xFF) {
  3883   000230  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3884   000232  B4D8               	btfsc	status,2,c
  3885   000234  D75B               	goto	u3960
  3886                           
  3887                           ;TAD_RFID.c: 368:                             fifoLevel = tempRegValue;
  3888   000236  C030  F02E         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3889                           
  3890                           ;TAD_RFID.c: 369:                             addr = 0x0C;
  3891   00023A  0E0C               	movlw	12
  3892   00023C  6E29               	movwf	motor_RFID@addr^0,c
  3893                           
  3894                           ;TAD_RFID.c: 370:                             operation_pending = 1;
  3895   00023E  0E01               	movlw	1
  3896   000240  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3897                           
  3898                           ;TAD_RFID.c: 371:                             substate = 17;
  3899   000242  0E11               	movlw	17
  3900   000244  6E39               	movwf	motor_RFID@substate^0,c
  3901   000246  0012               	return	
  3902   000248                     l4610:
  3903                           
  3904                           ;TAD_RFID.c: 375:                         if (tempRegValue == 0xFF) {
  3905   000248  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3906   00024A  B4D8               	btfsc	status,2,c
  3907   00024C  D74F               	goto	u3960
  3908                           
  3909                           ;TAD_RFID.c: 378:                             lastBitsVal = tempRegValue & 0x07;
  3910   00024E  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3911   000250  0B07               	andlw	7
  3912   000252  6E2F               	movwf	motor_RFID@lastBitsVal^0,c
  3913                           
  3914                           ;TAD_RFID.c: 379:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3915   000254  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3916   000256  A4D8               	btfss	status,2,c
  3917   000258  D007               	goto	l4620
  3918   00025A  502E               	movf	motor_RFID@fifoLevel^0,w,c
  3919   00025C  0D08               	mullw	8
  3920   00025E  CFF3 F074          	movff	prodl,_motor_RFID$738
  3921   000262  CFF4 F075          	movff	prodh,_motor_RFID$738+1
  3922   000266  D016               	goto	l4622
  3923   000268                     l4620:
  3924   000268  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3925   00026A  C02E  F072         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3926   00026E  6A73               	clrf	(??_motor_RFID+1)^0,c
  3927   000270  90D8               	bcf	status,0,c
  3928   000272  3672               	rlcf	??_motor_RFID^0,f,c
  3929   000274  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3930   000276  90D8               	bcf	status,0,c
  3931   000278  3672               	rlcf	??_motor_RFID^0,f,c
  3932   00027A  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3933   00027C  90D8               	bcf	status,0,c
  3934   00027E  3672               	rlcf	??_motor_RFID^0,f,c
  3935   000280  3673               	rlcf	(??_motor_RFID+1)^0,f,c
  3936   000282  2672               	addwf	??_motor_RFID^0,f,c
  3937   000284  0E00               	movlw	0
  3938   000286  2273               	addwfc	(??_motor_RFID+1)^0,f,c
  3939   000288  0EF8               	movlw	248
  3940   00028A  2472               	addwf	??_motor_RFID^0,w,c
  3941   00028C  6E74               	movwf	_motor_RFID$738^0,c
  3942   00028E  0EFF               	movlw	255
  3943   000290  2073               	addwfc	(??_motor_RFID+1)^0,w,c
  3944   000292  6E75               	movwf	(_motor_RFID$738+1)^0,c
  3945   000294                     l4622:
  3946   000294  C074  F02D         	movff	_motor_RFID$738,motor_RFID@backBitsCalc
  3947                           
  3948                           ;TAD_RFID.c: 380:                             if (backBitsCalc == 0x10) {
  3949   000298  0E10               	movlw	16
  3950   00029A  182D               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3951   00029C  A4D8               	btfss	status,2,c
  3952   00029E  D7C5               	goto	l429
  3953                           
  3954                           ;TAD_RFID.c: 381:                                 state = 1;
  3955   0002A0  0E01               	movlw	1
  3956   0002A2  6E3A               	movwf	motor_RFID@state^0,c
  3957   0002A4  D723               	goto	u3960
  3958   0002A6                     l4630:
  3959   0002A6  5039               	movf	motor_RFID@substate^0,w,c
  3960                           
  3961                           ; Switch size 1, requested type "simple"
  3962                           ; Number of cases is 18, Range of values is 0 to 17
  3963                           ; switch strategies available:
  3964                           ; Name         Instructions Cycles
  3965                           ; simple_byte           55    28 (average)
  3966                           ;	Chosen strategy is simple_byte
  3967   0002A8  0A00               	xorlw	0	; case 0
  3968   0002AA  B4D8               	btfsc	status,2,c
  3969   0002AC  D6FC               	goto	l4500
  3970   0002AE  0A01               	xorlw	1	; case 1
  3971   0002B0  B4D8               	btfsc	status,2,c
  3972   0002B2  D702               	goto	l4502
  3973   0002B4  0A03               	xorlw	3	; case 2
  3974   0002B6  B4D8               	btfsc	status,2,c
  3975   0002B8  D70F               	goto	l4510
  3976   0002BA  0A01               	xorlw	1	; case 3
  3977   0002BC  B4D8               	btfsc	status,2,c
  3978   0002BE  D713               	goto	l4512
  3979   0002C0  0A07               	xorlw	7	; case 4
  3980   0002C2  B4D8               	btfsc	status,2,c
  3981   0002C4  D71F               	goto	l4524
  3982   0002C6  0A01               	xorlw	1	; case 5
  3983   0002C8  B4D8               	btfsc	status,2,c
  3984   0002CA  D723               	goto	l4526
  3985   0002CC  0A03               	xorlw	3	; case 6
  3986   0002CE  B4D8               	btfsc	status,2,c
  3987   0002D0  D72D               	goto	l4538
  3988   0002D2  0A01               	xorlw	1	; case 7
  3989   0002D4  B4D8               	btfsc	status,2,c
  3990   0002D6  D732               	goto	l4542
  3991   0002D8  0A0F               	xorlw	15	; case 8
  3992   0002DA  B4D8               	btfsc	status,2,c
  3993   0002DC  D738               	goto	l4546
  3994   0002DE  0A01               	xorlw	1	; case 9
  3995   0002E0  B4D8               	btfsc	status,2,c
  3996   0002E2  D73E               	goto	l4548
  3997   0002E4  0A03               	xorlw	3	; case 10
  3998   0002E6  B4D8               	btfsc	status,2,c
  3999   0002E8  D742               	goto	l4550
  4000   0002EA  0A01               	xorlw	1	; case 11
  4001   0002EC  B4D8               	btfsc	status,2,c
  4002   0002EE  D74C               	goto	l412
  4003   0002F0  0A07               	xorlw	7	; case 12
  4004   0002F2  B4D8               	btfsc	status,2,c
  4005   0002F4  D751               	goto	l4564
  4006   0002F6  0A01               	xorlw	1	; case 13
  4007   0002F8  B4D8               	btfsc	status,2,c
  4008   0002FA  D768               	goto	l4576
  4009   0002FC  0A03               	xorlw	3	; case 14
  4010   0002FE  B4D8               	btfsc	status,2,c
  4011   000300  D77A               	goto	l4592
  4012   000302  0A01               	xorlw	1	; case 15
  4013   000304  B4D8               	btfsc	status,2,c
  4014   000306  D77E               	goto	l4594
  4015   000308  0A1F               	xorlw	31	; case 16
  4016   00030A  B4D8               	btfsc	status,2,c
  4017   00030C  D791               	goto	l4604
  4018   00030E  0A01               	xorlw	1	; case 17
  4019   000310  A4D8               	btfss	status,2,c
  4020   000312  0012               	return	
  4021   000314  D799               	goto	l4610
  4022   000316                     l4632:
  4023                           
  4024                           ;TAD_RFID.c: 394:                         addr = 0x0D;
  4025   000316  0E0D               	movlw	13
  4026   000318  6E29               	movwf	motor_RFID@addr^0,c
  4027                           
  4028                           ;TAD_RFID.c: 395:                         value = 0x00;
  4029   00031A  6A28               	clrf	motor_RFID@value^0,c
  4030                           
  4031                           ;TAD_RFID.c: 396:                         operation_pending = 2;
  4032   00031C  0E02               	movlw	2
  4033   00031E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4034                           
  4035                           ;TAD_RFID.c: 397:                         substate = 1;
  4036   000320  0E01               	movlw	1
  4037   000322  6E39               	movwf	motor_RFID@substate^0,c
  4038                           
  4039                           ;TAD_RFID.c: 398:                         break;
  4040   000324  0012               	return	
  4041   000326                     l4636:
  4042                           
  4043                           ;TAD_RFID.c: 400:                         UID[0] = 0x93;
  4044   000326  0E93               	movlw	147
  4045   000328  6E01               	movwf	motor_RFID@UID^0,c
  4046                           
  4047                           ;TAD_RFID.c: 401:                         UID[1] = 0x20;
  4048   00032A  0E20               	movlw	32
  4049   00032C  6E02               	movwf	(motor_RFID@UID+1)^0,c
  4050                           
  4051                           ;TAD_RFID.c: 402:                         addr = 0x08;
  4052   00032E  0E08               	movlw	8
  4053   000330  6E29               	movwf	motor_RFID@addr^0,c
  4054                           
  4055                           ;TAD_RFID.c: 403:                         operation_pending = 1;
  4056   000332  0E01               	movlw	1
  4057   000334  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4058                           
  4059                           ;TAD_RFID.c: 404:                         substate = 2;
  4060   000336  0E02               	movlw	2
  4061   000338  6E39               	movwf	motor_RFID@substate^0,c
  4062                           
  4063                           ;TAD_RFID.c: 405:                         break;
  4064   00033A  0012               	return	
  4065   00033C                     l4638:
  4066                           
  4067                           ;TAD_RFID.c: 407:                         if (tempRegValue == 0xFF) {
  4068   00033C  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4069   00033E  B4D8               	btfsc	status,2,c
  4070   000340  D774               	goto	l429
  4071                           
  4072                           ;TAD_RFID.c: 410:                             addr = 0x08;
  4073   000342  0E08               	movlw	8
  4074   000344  6E29               	movwf	motor_RFID@addr^0,c
  4075                           
  4076                           ;TAD_RFID.c: 411:                             value = tempRegValue & ~0x08;
  4077   000346  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4078   000348  0BF7               	andlw	247
  4079   00034A  6E28               	movwf	motor_RFID@value^0,c
  4080                           
  4081                           ;TAD_RFID.c: 412:                             operation_pending = 2;
  4082   00034C  0E02               	movlw	2
  4083   00034E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4084                           
  4085                           ;TAD_RFID.c: 413:                             substate = 3;
  4086   000350  0E03               	movlw	3
  4087   000352  6E39               	movwf	motor_RFID@substate^0,c
  4088   000354  0012               	return	
  4089   000356                     l4650:
  4090                           
  4091                           ;TAD_RFID.c: 417:                         irqEn = 0x77;
  4092   000356  0E77               	movlw	119
  4093   000358  6E38               	movwf	motor_RFID@irqEn^0,c
  4094                           
  4095                           ;TAD_RFID.c: 418:                         waitIRq = 0x30;
  4096   00035A  0E30               	movlw	48
  4097   00035C  6E37               	movwf	motor_RFID@waitIRq^0,c
  4098                           
  4099                           ;TAD_RFID.c: 419:                         addr = 0x02;
  4100   00035E  0E02               	movlw	2
  4101   000360  6E29               	movwf	motor_RFID@addr^0,c
  4102                           
  4103                           ;TAD_RFID.c: 420:                         value = irqEn | 0x80;
  4104   000362  5038               	movf	motor_RFID@irqEn^0,w,c
  4105   000364  0980               	iorlw	128
  4106   000366  D6C8               	goto	L4
  4107   000368                     l4658:
  4108                           
  4109                           ;TAD_RFID.c: 425:                         addr = 0x04;
  4110   000368  0E04               	movlw	4
  4111   00036A  6E29               	movwf	motor_RFID@addr^0,c
  4112                           
  4113                           ;TAD_RFID.c: 426:                         operation_pending = 1;
  4114   00036C  0E01               	movlw	1
  4115   00036E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4116                           
  4117                           ;TAD_RFID.c: 427:                         substate = 5;
  4118   000370  0E05               	movlw	5
  4119   000372  6E39               	movwf	motor_RFID@substate^0,c
  4120                           
  4121                           ;TAD_RFID.c: 428:                         break;
  4122   000374  0012               	return	
  4123   000376                     l4660:
  4124                           
  4125                           ;TAD_RFID.c: 430:                         if (tempRegValue == 0xFF) {
  4126   000376  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4127   000378  B4D8               	btfsc	status,2,c
  4128   00037A  D757               	goto	l429
  4129                           
  4130                           ;TAD_RFID.c: 433:                             addr = 0x04;
  4131   00037C  0E04               	movlw	4
  4132   00037E  6E29               	movwf	motor_RFID@addr^0,c
  4133                           
  4134                           ;TAD_RFID.c: 434:                             value = tempRegValue & ~0x80;
  4135   000380  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4136   000382  0B7F               	andlw	127
  4137   000384  D6CD               	goto	L5
  4138   000386                     l4672:
  4139                           
  4140                           ;TAD_RFID.c: 440:                         addr = 0x0A;
  4141   000386  0E0A               	movlw	10
  4142   000388  6E29               	movwf	motor_RFID@addr^0,c
  4143                           
  4144                           ;TAD_RFID.c: 441:                         operation_pending = 1;
  4145   00038A  0E01               	movlw	1
  4146   00038C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4147                           
  4148                           ;TAD_RFID.c: 442:                         substate = 7;
  4149   00038E  0E07               	movlw	7
  4150   000390  6E39               	movwf	motor_RFID@substate^0,c
  4151                           
  4152                           ;TAD_RFID.c: 443:                         break;
  4153   000392  0012               	return	
  4154   000394                     l4674:
  4155                           
  4156                           ;TAD_RFID.c: 445:                         if (tempRegValue == 0xFF) {
  4157   000394  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4158   000396  B4D8               	btfsc	status,2,c
  4159   000398  D748               	goto	l429
  4160                           
  4161                           ;TAD_RFID.c: 448:                             addr = 0x0A;
  4162   00039A  0E0A               	movlw	10
  4163   00039C  6E29               	movwf	motor_RFID@addr^0,c
  4164                           
  4165                           ;TAD_RFID.c: 449:                             value = tempRegValue | 0x80;
  4166   00039E  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4167   0003A0  0980               	iorlw	128
  4168   0003A2  6E28               	movwf	motor_RFID@value^0,c
  4169                           
  4170                           ;TAD_RFID.c: 450:                             operation_pending = 2;
  4171   0003A4  0E02               	movlw	2
  4172   0003A6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4173                           
  4174                           ;TAD_RFID.c: 451:                             substate = 8;
  4175   0003A8  0E08               	movlw	8
  4176   0003AA  6E39               	movwf	motor_RFID@substate^0,c
  4177   0003AC  0012               	return	
  4178   0003AE                     l4686:
  4179                           
  4180                           ;TAD_RFID.c: 455:                         addr = 0x01;
  4181   0003AE  0E01               	movlw	1
  4182   0003B0  6E29               	movwf	motor_RFID@addr^0,c
  4183                           
  4184                           ;TAD_RFID.c: 456:                         value = 0x00;
  4185   0003B2  6A28               	clrf	motor_RFID@value^0,c
  4186                           
  4187                           ;TAD_RFID.c: 457:                         operation_pending = 2;
  4188   0003B4  0E02               	movlw	2
  4189   0003B6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4190                           
  4191                           ;TAD_RFID.c: 458:                         substate = 9;
  4192   0003B8  0E09               	movlw	9
  4193   0003BA  6E39               	movwf	motor_RFID@substate^0,c
  4194                           
  4195                           ;TAD_RFID.c: 459:                         break;
  4196   0003BC  0012               	return	
  4197   0003BE                     l4690:
  4198                           
  4199                           ;TAD_RFID.c: 461:                         addr = 0x09;
  4200   0003BE  0E09               	movlw	9
  4201   0003C0  6E29               	movwf	motor_RFID@addr^0,c
  4202                           
  4203                           ;TAD_RFID.c: 462:                         value = UID[0];
  4204   0003C2  C001  F028         	movff	motor_RFID@UID,motor_RFID@value
  4205                           
  4206                           ;TAD_RFID.c: 463:                         operation_pending = 2;
  4207   0003C6  0E02               	movlw	2
  4208   0003C8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4209                           
  4210                           ;TAD_RFID.c: 464:                         substate = 10;
  4211   0003CA  0E0A               	movlw	10
  4212   0003CC  6E39               	movwf	motor_RFID@substate^0,c
  4213                           
  4214                           ;TAD_RFID.c: 465:                         break;
  4215   0003CE  0012               	return	
  4216   0003D0                     l4694:
  4217                           
  4218                           ;TAD_RFID.c: 467:                         addr = 0x09;
  4219   0003D0  0E09               	movlw	9
  4220   0003D2  6E29               	movwf	motor_RFID@addr^0,c
  4221                           
  4222                           ;TAD_RFID.c: 468:                         value = UID[1];
  4223   0003D4  C002  F028         	movff	motor_RFID@UID+1,motor_RFID@value
  4224                           
  4225                           ;TAD_RFID.c: 469:                         operation_pending = 2;
  4226   0003D8  0E02               	movlw	2
  4227   0003DA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4228                           
  4229                           ;TAD_RFID.c: 470:                         substate = 11;
  4230   0003DC  0E0B               	movlw	11
  4231   0003DE  6E39               	movwf	motor_RFID@substate^0,c
  4232                           
  4233                           ;TAD_RFID.c: 471:                         break;
  4234   0003E0  0012               	return	
  4235   0003E2                     l4698:
  4236                           
  4237                           ;TAD_RFID.c: 473:                         addr = 0x01;
  4238   0003E2  0E01               	movlw	1
  4239   0003E4  6E29               	movwf	motor_RFID@addr^0,c
  4240                           
  4241                           ;TAD_RFID.c: 474:                         value = 0x0C;
  4242   0003E6  0E0C               	movlw	12
  4243   0003E8  6E28               	movwf	motor_RFID@value^0,c
  4244                           
  4245                           ;TAD_RFID.c: 475:                         operation_pending = 2;
  4246   0003EA  0E02               	movlw	2
  4247   0003EC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4248                           
  4249                           ;TAD_RFID.c: 476:                         substate = 12;
  4250   0003EE  0E0C               	movlw	12
  4251   0003F0  6E39               	movwf	motor_RFID@substate^0,c
  4252                           
  4253                           ;TAD_RFID.c: 477:                         break;
  4254   0003F2  0012               	return	
  4255   0003F4                     l4702:
  4256                           
  4257                           ;TAD_RFID.c: 484:                         if (tempRegValue == 0xFF) {
  4258   0003F4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4259   0003F6  B4D8               	btfsc	status,2,c
  4260   0003F8  D718               	goto	l429
  4261                           
  4262                           ;TAD_RFID.c: 487:                             addr = 0x0D;
  4263   0003FA  0E0D               	movlw	13
  4264   0003FC  6E29               	movwf	motor_RFID@addr^0,c
  4265                           
  4266                           ;TAD_RFID.c: 488:                             value = tempRegValue | 0x80;
  4267   0003FE  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4268   000400  0980               	iorlw	128
  4269   000402  D6EE               	goto	L6
  4270   000404                     l469:
  4271                           
  4272                           ;TAD_RFID.c: 494:                         i = 0xFF;
  4273   000404  6835               	setf	motor_RFID@i^0,c
  4274                           
  4275                           ;TAD_RFID.c: 495:                         addr = 0x04;
  4276   000406  0E04               	movlw	4
  4277   000408  6E29               	movwf	motor_RFID@addr^0,c
  4278                           
  4279                           ;TAD_RFID.c: 496:                         operation_pending = 1;
  4280   00040A  0E01               	movlw	1
  4281   00040C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4282                           
  4283                           ;TAD_RFID.c: 497:                         substate = 15;
  4284   00040E  0E0F               	movlw	15
  4285   000410  6E39               	movwf	motor_RFID@substate^0,c
  4286                           
  4287                           ;TAD_RFID.c: 498:                         break;
  4288   000412  0012               	return	
  4289   000414                     l4716:
  4290                           
  4291                           ;TAD_RFID.c: 500:                         if (tempRegValue == 0xFF) {
  4292   000414  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4293   000416  B4D8               	btfsc	status,2,c
  4294   000418  D708               	goto	l429
  4295                           
  4296                           ;TAD_RFID.c: 503:                             n = tempRegValue;
  4297   00041A  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  4298                           
  4299                           ;TAD_RFID.c: 504:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  4300   00041E  B036               	btfsc	motor_RFID@n^0,0,c
  4301   000420  D007               	goto	l4724
  4302   000422  5036               	movf	motor_RFID@n^0,w,c
  4303   000424  1437               	andwf	motor_RFID@waitIRq^0,w,c
  4304   000426  0900               	iorlw	0
  4305   000428  A4D8               	btfss	status,2,c
  4306   00042A  D002               	goto	l4724
  4307   00042C  2E35               	decfsz	motor_RFID@i^0,f,c
  4308   00042E  D6C9               	goto	l4574
  4309   000430                     l4724:
  4310                           
  4311                           ;TAD_RFID.c: 505:                                 addr = 0x0D;
  4312   000430  0E0D               	movlw	13
  4313   000432  6E29               	movwf	motor_RFID@addr^0,c
  4314                           
  4315                           ;TAD_RFID.c: 506:                                 operation_pending = 1;
  4316   000434  0E01               	movlw	1
  4317   000436  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4318                           
  4319                           ;TAD_RFID.c: 507:                                 substate = 16;
  4320   000438  0E10               	movlw	16
  4321   00043A  6E39               	movwf	motor_RFID@substate^0,c
  4322                           
  4323                           ;TAD_RFID.c: 508:                             } else {
  4324   00043C  0012               	return	
  4325   00043E                     l4728:
  4326                           
  4327                           ;TAD_RFID.c: 516:                         if (tempRegValue == 0xFF) {
  4328   00043E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4329   000440  B4D8               	btfsc	status,2,c
  4330   000442  D6F3               	goto	l429
  4331                           
  4332                           ;TAD_RFID.c: 519:                             addr = 0x0D;
  4333   000444  0E0D               	movlw	13
  4334   000446  6E29               	movwf	motor_RFID@addr^0,c
  4335                           
  4336                           ;TAD_RFID.c: 520:                             value = tempRegValue & ~0x80;
  4337   000448  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4338   00044A  0B7F               	andlw	127
  4339   00044C  6E28               	movwf	motor_RFID@value^0,c
  4340                           
  4341                           ;TAD_RFID.c: 521:                             operation_pending = 2;
  4342   00044E  0E02               	movlw	2
  4343   000450  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4344                           
  4345                           ;TAD_RFID.c: 522:                             substate = 17;
  4346   000452  0E11               	movlw	17
  4347   000454  6E39               	movwf	motor_RFID@substate^0,c
  4348   000456  0012               	return	
  4349   000458                     l4740:
  4350                           
  4351                           ;TAD_RFID.c: 526:                         addr = 0x06;
  4352   000458  0E06               	movlw	6
  4353   00045A  6E29               	movwf	motor_RFID@addr^0,c
  4354                           
  4355                           ;TAD_RFID.c: 527:                         operation_pending = 1;
  4356   00045C  0E01               	movlw	1
  4357   00045E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4358                           
  4359                           ;TAD_RFID.c: 528:                         substate = 18;
  4360   000460  0E12               	movlw	18
  4361   000462  6E39               	movwf	motor_RFID@substate^0,c
  4362                           
  4363                           ;TAD_RFID.c: 529:                         break;
  4364   000464  0012               	return	
  4365   000466                     l4742:
  4366                           
  4367                           ;TAD_RFID.c: 531:                         if (tempRegValue == 0xFF) {
  4368   000466  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4369   000468  B4D8               	btfsc	status,2,c
  4370   00046A  D6DF               	goto	l429
  4371   00046C  5035               	movf	motor_RFID@i^0,w,c
  4372   00046E  B4D8               	btfsc	status,2,c
  4373   000470  D6DC               	goto	l429
  4374   000472  C030  F072         	movff	motor_RFID@tempRegValue,??_motor_RFID
  4375   000476  0E1B               	movlw	27
  4376   000478  1672               	andwf	??_motor_RFID^0,f,c
  4377   00047A  A4D8               	btfss	status,2,c
  4378   00047C  D6D6               	goto	l429
  4379                           
  4380                           ;TAD_RFID.c: 534:                             addr = 0x09;
  4381   00047E  0E09               	movlw	9
  4382   000480  6E29               	movwf	motor_RFID@addr^0,c
  4383                           
  4384                           ;TAD_RFID.c: 535:                             operation_pending = 1;
  4385   000482  0E01               	movlw	1
  4386   000484  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4387                           
  4388                           ;TAD_RFID.c: 536:                             substate = 19;
  4389   000486  0E13               	movlw	19
  4390   000488  6E39               	movwf	motor_RFID@substate^0,c
  4391                           
  4392                           ;TAD_RFID.c: 537:                         } else {
  4393   00048A  0012               	return	
  4394   00048C                     l4752:
  4395                           
  4396                           ;TAD_RFID.c: 542:                         if (tempRegValue == 0xFF) {
  4397   00048C  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4398   00048E  B4D8               	btfsc	status,2,c
  4399   000490  D6CC               	goto	l429
  4400                           
  4401                           ;TAD_RFID.c: 545:                             UID[0] = tempRegValue;
  4402   000492  C030  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  4403                           
  4404                           ;TAD_RFID.c: 546:                             addr = 0x09;
  4405   000496  0E09               	movlw	9
  4406   000498  6E29               	movwf	motor_RFID@addr^0,c
  4407                           
  4408                           ;TAD_RFID.c: 547:                             operation_pending = 1;
  4409   00049A  0E01               	movlw	1
  4410   00049C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4411                           
  4412                           ;TAD_RFID.c: 548:                             substate = 20;
  4413   00049E  0E14               	movlw	20
  4414   0004A0  6E39               	movwf	motor_RFID@substate^0,c
  4415   0004A2  0012               	return	
  4416   0004A4                     l4758:
  4417                           
  4418                           ;TAD_RFID.c: 552:                         if (tempRegValue == 0xFF) {
  4419   0004A4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4420   0004A6  B4D8               	btfsc	status,2,c
  4421   0004A8  D6C0               	goto	l429
  4422                           
  4423                           ;TAD_RFID.c: 555:                             UID[1] = tempRegValue;
  4424   0004AA  C030  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4425                           
  4426                           ;TAD_RFID.c: 556:                             addr = 0x09;
  4427   0004AE  0E09               	movlw	9
  4428   0004B0  6E29               	movwf	motor_RFID@addr^0,c
  4429                           
  4430                           ;TAD_RFID.c: 557:                             operation_pending = 1;
  4431   0004B2  0E01               	movlw	1
  4432   0004B4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4433                           
  4434                           ;TAD_RFID.c: 558:                             substate = 21;
  4435   0004B6  0E15               	movlw	21
  4436   0004B8  6E39               	movwf	motor_RFID@substate^0,c
  4437   0004BA  0012               	return	
  4438   0004BC                     l4764:
  4439                           
  4440                           ;TAD_RFID.c: 562:                         if (tempRegValue == 0xFF) {
  4441   0004BC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4442   0004BE  B4D8               	btfsc	status,2,c
  4443   0004C0  D6B4               	goto	l429
  4444                           
  4445                           ;TAD_RFID.c: 565:                             UID[2] = tempRegValue;
  4446   0004C2  C030  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4447                           
  4448                           ;TAD_RFID.c: 566:                             addr = 0x09;
  4449   0004C6  0E09               	movlw	9
  4450   0004C8  6E29               	movwf	motor_RFID@addr^0,c
  4451                           
  4452                           ;TAD_RFID.c: 567:                             operation_pending = 1;
  4453   0004CA  0E01               	movlw	1
  4454   0004CC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4455                           
  4456                           ;TAD_RFID.c: 568:                             substate = 22;
  4457   0004CE  0E16               	movlw	22
  4458   0004D0  6E39               	movwf	motor_RFID@substate^0,c
  4459   0004D2  0012               	return	
  4460   0004D4                     l4770:
  4461                           
  4462                           ;TAD_RFID.c: 572:                         if (tempRegValue == 0xFF) {
  4463   0004D4  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4464   0004D6  B4D8               	btfsc	status,2,c
  4465   0004D8  D6A8               	goto	l429
  4466                           
  4467                           ;TAD_RFID.c: 575:                             UID[3] = tempRegValue;
  4468   0004DA  C030  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4469                           
  4470                           ;TAD_RFID.c: 576:                             addr = 0x09;
  4471   0004DE  0E09               	movlw	9
  4472   0004E0  6E29               	movwf	motor_RFID@addr^0,c
  4473                           
  4474                           ;TAD_RFID.c: 577:                             operation_pending = 1;
  4475   0004E2  0E01               	movlw	1
  4476   0004E4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4477                           
  4478                           ;TAD_RFID.c: 578:                             substate = 23;
  4479   0004E6  0E17               	movlw	23
  4480   0004E8  6E39               	movwf	motor_RFID@substate^0,c
  4481   0004EA  0012               	return	
  4482   0004EC                     l4776:
  4483                           
  4484                           ;TAD_RFID.c: 582:                         if (tempRegValue == 0xFF) {
  4485   0004EC  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4486   0004EE  B4D8               	btfsc	status,2,c
  4487   0004F0  D69C               	goto	l429
  4488                           
  4489                           ;TAD_RFID.c: 585:                             UID[4] = tempRegValue;
  4490   0004F2  C030  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4491                           
  4492                           ;TAD_RFID.c: 586:                             UID[5] = 0;
  4493   0004F6  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4494                           
  4495                           ;TAD_RFID.c: 587:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4496   0004F8  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4497   0004FA  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4498   0004FC  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4499   0004FE  1801               	xorwf	motor_RFID@UID^0,w,c
  4500   000500  6E32               	movwf	motor_RFID@checksum^0,c
  4501                           
  4502                           ;TAD_RFID.c: 588:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4503   000502  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4504   000504  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4505   000506  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4506   000508  1001               	iorwf	motor_RFID@UID^0,w,c
  4507   00050A  0900               	iorlw	0
  4508   00050C  A4D8               	btfss	status,2,c
  4509   00050E  D002               	goto	u4270
  4510   000510  0E01               	movlw	1
  4511   000512  D001               	goto	u4280
  4512   000514                     u4270:
  4513   000514  0E00               	movlw	0
  4514   000516                     u4280:
  4515   000516  6E31               	movwf	motor_RFID@allZero^0,c
  4516                           
  4517                           ;TAD_RFID.c: 589:                             substate = 24;
  4518   000518  0E18               	movlw	24
  4519   00051A  6E39               	movwf	motor_RFID@substate^0,c
  4520   00051C  0012               	return	
  4521   00051E                     l4784:
  4522                           
  4523                           ;TAD_RFID.c: 593:                         if (checksum != UID[4] || allZero) {
  4524   00051E  5032               	movf	motor_RFID@checksum^0,w,c
  4525   000520  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4526   000522  A4D8               	btfss	status,2,c
  4527   000524  D682               	goto	l429
  4528   000526  5031               	movf	motor_RFID@allZero^0,w,c
  4529   000528  A4D8               	btfss	status,2,c
  4530   00052A  D67F               	goto	l429
  4531                           
  4532                           ;TAD_RFID.c: 596:                             substate = 25;
  4533   00052C  0E19               	movlw	25
  4534   00052E  6E39               	movwf	motor_RFID@substate^0,c
  4535   000530  0012               	return	
  4536   000532                     l4790:
  4537                           
  4538                           ;TAD_RFID.c: 602:                         getActualUID(currentUser, 0xFF);
  4539   000532  0E45               	movlw	low motor_RFID@currentUser
  4540   000534  6E57               	movwf	getActualUID@UID^0,c
  4541   000536  0EFF               	movlw	255
  4542   000538  6E58               	movwf	getActualUID@userIndex^0,c
  4543   00053A  ECD5  F00A         	call	_getActualUID	;wreg free
  4544                           
  4545                           ;TAD_RFID.c: 603:                         if (getCurrentUserIndex() != 4) {
  4546   00053E  EC5E  F00E         	call	_getCurrentUserIndex	;wreg free
  4547   000542  0A04               	xorlw	4
  4548   000544  B4D8               	btfsc	status,2,c
  4549   000546  D003               	goto	l4796
  4550                           
  4551                           ;TAD_RFID.c: 604:                             substate = 26;
  4552   000548  0E1A               	movlw	26
  4553   00054A  6E39               	movwf	motor_RFID@substate^0,c
  4554                           
  4555                           ;TAD_RFID.c: 605:                         } else if (cardRemoved == 1) {
  4556   00054C  0012               	return	
  4557   00054E                     l4796:
  4558   00054E  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4559   000550  A4D8               	btfss	status,2,c
  4560   000552  D003               	goto	l4800
  4561   000554                     u4320:
  4562                           
  4563                           ;TAD_RFID.c: 606:                             substate = 27;
  4564   000554  0E1B               	movlw	27
  4565   000556  6E39               	movwf	motor_RFID@substate^0,c
  4566                           
  4567                           ;TAD_RFID.c: 607:                         } else {
  4568   000558  0012               	return	
  4569   00055A                     l4800:
  4570                           
  4571                           ;TAD_RFID.c: 608:                             substate = 28;
  4572   00055A  0E1C               	movlw	28
  4573   00055C  6E39               	movwf	motor_RFID@substate^0,c
  4574   00055E  0012               	return	
  4575   000560                     l4802:
  4576                           
  4577                           ;TAD_RFID.c: 615:                         if(currentUser[0] == UID[0] && currentUser[1] 
      +                          == UID[1] &&
  4578   000560  5001               	movf	motor_RFID@UID^0,w,c
  4579   000562  1845               	xorwf	motor_RFID@currentUser^0,w,c
  4580   000564  A4D8               	btfss	status,2,c
  4581   000566  D7F6               	goto	u4320
  4582   000568  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4583   00056A  1846               	xorwf	(motor_RFID@currentUser+1)^0,w,c
  4584   00056C  A4D8               	btfss	status,2,c
  4585   00056E  D7F2               	goto	u4320
  4586   000570  5003               	movf	(motor_RFID@UID+2)^0,w,c
  4587   000572  1847               	xorwf	(motor_RFID@currentUser+2)^0,w,c
  4588   000574  A4D8               	btfss	status,2,c
  4589   000576  D7EE               	goto	u4320
  4590   000578  5004               	movf	(motor_RFID@UID+3)^0,w,c
  4591   00057A  1848               	xorwf	(motor_RFID@currentUser+3)^0,w,c
  4592   00057C  A4D8               	btfss	status,2,c
  4593   00057E  D7EA               	goto	u4320
  4594   000580  5005               	movf	(motor_RFID@UID+4)^0,w,c
  4595   000582  1849               	xorwf	(motor_RFID@currentUser+4)^0,w,c
  4596   000584  A4D8               	btfss	status,2,c
  4597   000586  D7E6               	goto	u4320
  4598                           
  4599                           ;TAD_RFID.c: 617:                            currentUser[4] == UID[4]) {;TAD_RFID.c: 618
      +                          :                             if (cardRemoved == 1) {
  4600   000588  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4601   00058A  A4D8               	btfss	status,2,c
  4602   00058C  D7E6               	goto	l4800
  4603                           
  4604                           ;TAD_RFID.c: 619:                                 motor_StartSendString("\r\nL'usuari ha
      +                           sortit de la sala\r\n");
  4605   00058E  0EDC               	movlw	low STR_1
  4606   000590  6E5B               	movwf	motor_StartSendString@str^0,c
  4607   000592  0E1E               	movlw	high STR_1
  4608   000594  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  4609   000596  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  4610                           
  4611                           ;TAD_RFID.c: 620:                                 setStartSendString();
  4612   00059A  EC58  F00E         	call	_setStartSendString	;wreg free
  4613                           
  4614                           ;TAD_RFID.c: 621:                                 setIndex(4);
  4615   00059E  0E04               	movlw	4
  4616   0005A0  EC49  F00E         	call	_setIndex
  4617                           
  4618                           ;TAD_RFID.c: 622:                                 newConfiguration();
  4619   0005A4  EC55  F00E         	call	_newConfiguration	;wreg free
  4620   0005A8                     l4822:
  4621                           
  4622                           ;TAD_RFID.c: 623:                                 substate = 28;
  4623   0005A8  0E1C               	movlw	28
  4624   0005AA  6E39               	movwf	motor_RFID@substate^0,c
  4625                           
  4626                           ;TAD_RFID.c: 624:                                 cardRemoved = 0;
  4627   0005AC  6A2C               	clrf	motor_RFID@cardRemoved^0,c
  4628                           
  4629                           ;TAD_RFID.c: 625:                             } else {
  4630   0005AE  0012               	return	
  4631   0005B0                     l4830:
  4632                           
  4633                           ;TAD_RFID.c: 637:                         if(motor_setCurrentUser(UID[0], UID[1], UID[2]
      +                          , UID[3], UID[4]) == 1) {
  4634   0005B0  C002  F06D         	movff	motor_RFID@UID+1,motor_setCurrentUser@UID1
  4635   0005B4  C003  F06E         	movff	motor_RFID@UID+2,motor_setCurrentUser@UID2
  4636   0005B8  C004  F06F         	movff	motor_RFID@UID+3,motor_setCurrentUser@UID3
  4637   0005BC  C005  F070         	movff	motor_RFID@UID+4,motor_setCurrentUser@UID4
  4638   0005C0  5001               	movf	motor_RFID@UID^0,w,c
  4639   0005C2  ECC7  F006         	call	_motor_setCurrentUser
  4640   0005C6  06E8               	decf	wreg,f,c
  4641   0005C8  A4D8               	btfss	status,2,c
  4642   0005CA  0012               	return	
  4643   0005CC  D7ED               	goto	l4822
  4644   0005CE                     l4836:
  4645                           
  4646                           ;TAD_RFID.c: 645:                         addr = 0x0D;
  4647   0005CE  0E0D               	movlw	13
  4648   0005D0  6E29               	movwf	motor_RFID@addr^0,c
  4649                           
  4650                           ;TAD_RFID.c: 646:                         value = 0x00;
  4651   0005D2  6A28               	clrf	motor_RFID@value^0,c
  4652                           
  4653                           ;TAD_RFID.c: 647:                         operation_pending = 2;
  4654   0005D4  0E02               	movlw	2
  4655   0005D6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4656   0005D8  D628               	goto	l429
  4657   0005DA                     l4844:
  4658   0005DA  5039               	movf	motor_RFID@substate^0,w,c
  4659                           
  4660                           ; Switch size 1, requested type "simple"
  4661                           ; Number of cases is 29, Range of values is 0 to 28
  4662                           ; switch strategies available:
  4663                           ; Name         Instructions Cycles
  4664                           ; simple_byte           88    45 (average)
  4665                           ;	Chosen strategy is simple_byte
  4666   0005DC  0A00               	xorlw	0	; case 0
  4667   0005DE  B4D8               	btfsc	status,2,c
  4668   0005E0  D69A               	goto	l4632
  4669   0005E2  0A01               	xorlw	1	; case 1
  4670   0005E4  B4D8               	btfsc	status,2,c
  4671   0005E6  D69F               	goto	l4636
  4672   0005E8  0A03               	xorlw	3	; case 2
  4673   0005EA  B4D8               	btfsc	status,2,c
  4674   0005EC  D6A7               	goto	l4638
  4675   0005EE  0A01               	xorlw	1	; case 3
  4676   0005F0  B4D8               	btfsc	status,2,c
  4677   0005F2  D6B1               	goto	l4650
  4678   0005F4  0A07               	xorlw	7	; case 4
  4679   0005F6  B4D8               	btfsc	status,2,c
  4680   0005F8  D6B7               	goto	l4658
  4681   0005FA  0A01               	xorlw	1	; case 5
  4682   0005FC  B4D8               	btfsc	status,2,c
  4683   0005FE  D6BB               	goto	l4660
  4684   000600  0A03               	xorlw	3	; case 6
  4685   000602  B4D8               	btfsc	status,2,c
  4686   000604  D6C0               	goto	l4672
  4687   000606  0A01               	xorlw	1	; case 7
  4688   000608  B4D8               	btfsc	status,2,c
  4689   00060A  D6C4               	goto	l4674
  4690   00060C  0A0F               	xorlw	15	; case 8
  4691   00060E  B4D8               	btfsc	status,2,c
  4692   000610  D6CE               	goto	l4686
  4693   000612  0A01               	xorlw	1	; case 9
  4694   000614  B4D8               	btfsc	status,2,c
  4695   000616  D6D3               	goto	l4690
  4696   000618  0A03               	xorlw	3	; case 10
  4697   00061A  B4D8               	btfsc	status,2,c
  4698   00061C  D6D9               	goto	l4694
  4699   00061E  0A01               	xorlw	1	; case 11
  4700   000620  B4D8               	btfsc	status,2,c
  4701   000622  D6DF               	goto	l4698
  4702   000624  0A07               	xorlw	7	; case 12
  4703   000626  B4D8               	btfsc	status,2,c
  4704   000628  D5C5               	goto	l4572
  4705   00062A  0A01               	xorlw	1	; case 13
  4706   00062C  B4D8               	btfsc	status,2,c
  4707   00062E  D6E2               	goto	l4702
  4708   000630  0A03               	xorlw	3	; case 14
  4709   000632  B4D8               	btfsc	status,2,c
  4710   000634  D6E7               	goto	l469
  4711   000636  0A01               	xorlw	1	; case 15
  4712   000638  B4D8               	btfsc	status,2,c
  4713   00063A  D6EC               	goto	l4716
  4714   00063C  0A1F               	xorlw	31	; case 16
  4715   00063E  B4D8               	btfsc	status,2,c
  4716   000640  D6FE               	goto	l4728
  4717   000642  0A01               	xorlw	1	; case 17
  4718   000644  B4D8               	btfsc	status,2,c
  4719   000646  D708               	goto	l4740
  4720   000648  0A03               	xorlw	3	; case 18
  4721   00064A  B4D8               	btfsc	status,2,c
  4722   00064C  D70C               	goto	l4742
  4723   00064E  0A01               	xorlw	1	; case 19
  4724   000650  B4D8               	btfsc	status,2,c
  4725   000652  D71C               	goto	l4752
  4726   000654  0A07               	xorlw	7	; case 20
  4727   000656  B4D8               	btfsc	status,2,c
  4728   000658  D725               	goto	l4758
  4729   00065A  0A01               	xorlw	1	; case 21
  4730   00065C  B4D8               	btfsc	status,2,c
  4731   00065E  D72E               	goto	l4764
  4732   000660  0A03               	xorlw	3	; case 22
  4733   000662  B4D8               	btfsc	status,2,c
  4734   000664  D737               	goto	l4770
  4735   000666  0A01               	xorlw	1	; case 23
  4736   000668  B4D8               	btfsc	status,2,c
  4737   00066A  D740               	goto	l4776
  4738   00066C  0A0F               	xorlw	15	; case 24
  4739   00066E  B4D8               	btfsc	status,2,c
  4740   000670  D756               	goto	l4784
  4741   000672  0A01               	xorlw	1	; case 25
  4742   000674  B4D8               	btfsc	status,2,c
  4743   000676  D75D               	goto	l4790
  4744   000678  0A03               	xorlw	3	; case 26
  4745   00067A  B4D8               	btfsc	status,2,c
  4746   00067C  D771               	goto	l4802
  4747   00067E  0A01               	xorlw	1	; case 27
  4748   000680  B4D8               	btfsc	status,2,c
  4749   000682  D796               	goto	l4830
  4750   000684  0A07               	xorlw	7	; case 28
  4751   000686  A4D8               	btfss	status,2,c
  4752   000688  0012               	return	
  4753   00068A  D7A1               	goto	l4836
  4754   00068C                     l4848:
  4755   00068C  503A               	movf	motor_RFID@state^0,w,c
  4756                           
  4757                           ; Switch size 1, requested type "simple"
  4758                           ; Number of cases is 2, Range of values is 0 to 1
  4759                           ; switch strategies available:
  4760                           ; Name         Instructions Cycles
  4761                           ; simple_byte            7     4 (average)
  4762                           ;	Chosen strategy is simple_byte
  4763   00068E  0A00               	xorlw	0	; case 0
  4764   000690  B4D8               	btfsc	status,2,c
  4765   000692  D609               	goto	l4630
  4766   000694  0A01               	xorlw	1	; case 1
  4767   000696  A4D8               	btfss	status,2,c
  4768   000698  0012               	return	
  4769   00069A  D79F               	goto	l4844
  4770   00069C                     __end_of_motor_RFID:
  4771                           	callstack 0
  4772                           
  4773 ;; *************** function _setIndex *****************
  4774 ;; Defined at:
  4775 ;;		line 95 in file "TAD_DATOS.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  indexActual     1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  indexActual     1    1[COMRAM] unsigned char 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1
  4789 ;;      Params:         0       0       0
  4790 ;;      Locals:         1       0       0
  4791 ;;      Temps:          0       0       0
  4792 ;;      Totals:         1       0       0
  4793 ;;Total ram usage:        1 bytes
  4794 ;; Hardware stack levels used: 1
  4795 ;; Hardware stack levels required when called: 3
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_motor_RFID
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text6
  4804   001C92                     __ptext6:
  4805                           	callstack 0
  4806   001C92                     _setIndex:
  4807                           	callstack 26
  4808                           
  4809                           ;incstack = 0
  4810                           ;setIndex@indexActual stored from wreg
  4811   001C92  6E57               	movwf	setIndex@indexActual^0,c
  4812                           
  4813                           ;TAD_DATOS.c: 96:     index = indexActual;
  4814   001C94  C057  F07D         	movff	setIndex@indexActual,_index
  4815   001C98  0012               	return		;funcret
  4816   001C9A                     __end_of_setIndex:
  4817                           	callstack 0
  4818                           
  4819 ;; *************** function _motor_setCurrentUser *****************
  4820 ;; Defined at:
  4821 ;;		line 100 in file "TAD_DATOS.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;  UID0            1    wreg     unsigned char 
  4824 ;;  UID1            1   23[COMRAM] unsigned char 
  4825 ;;  UID2            1   24[COMRAM] unsigned char 
  4826 ;;  UID3            1   25[COMRAM] unsigned char 
  4827 ;;  UID4            1   26[COMRAM] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  UID0            1   27[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      unsigned char 
  4832 ;; Registers used:
  4833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1
  4839 ;;      Params:         4       0       0
  4840 ;;      Locals:         1       0       0
  4841 ;;      Temps:          0       0       0
  4842 ;;      Totals:         5       0       0
  4843 ;;Total ram usage:        5 bytes
  4844 ;; Hardware stack levels used: 1
  4845 ;; Hardware stack levels required when called: 8
  4846 ;; This function calls:
  4847 ;;		_printfUID
  4848 ;; This function is called by:
  4849 ;;		_motor_RFID
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text7
  4854   000D8E                     __ptext7:
  4855                           	callstack 0
  4856   000D8E                     _motor_setCurrentUser:
  4857                           	callstack 21
  4858                           
  4859                           ;incstack = 0
  4860                           ;motor_setCurrentUser@UID0 stored from wreg
  4861   000D8E  6E71               	movwf	motor_setCurrentUser@UID0^0,c
  4862                           
  4863                           ;TAD_DATOS.c: 101:     static char state_setCurrentUser = 0;;TAD_DATOS.c: 103:     switc
      +                          h(state_setCurrentUser) {
  4864   000D90  D081               	goto	l4008
  4865   000D92                     l3922:
  4866                           
  4867                           ;TAD_DATOS.c: 105:             currentUser[0] = UID0;
  4868   000D92  C071  F040         	movff	motor_setCurrentUser@UID0,_currentUser
  4869                           
  4870                           ;TAD_DATOS.c: 106:             currentUser[1] = UID1;
  4871   000D96  C06D  F041         	movff	motor_setCurrentUser@UID1,_currentUser+1
  4872                           
  4873                           ;TAD_DATOS.c: 107:             currentUser[2] = UID2;
  4874   000D9A  C06E  F042         	movff	motor_setCurrentUser@UID2,_currentUser+2
  4875                           
  4876                           ;TAD_DATOS.c: 108:             currentUser[3] = UID3;
  4877   000D9E  C06F  F043         	movff	motor_setCurrentUser@UID3,_currentUser+3
  4878                           
  4879                           ;TAD_DATOS.c: 109:             currentUser[4] = UID4;
  4880   000DA2  C070  F044         	movff	motor_setCurrentUser@UID4,_currentUser+4
  4881                           
  4882                           ;TAD_DATOS.c: 110:             new_user = 1;
  4883   000DA6  0E01               	movlw	1
  4884   000DA8  6E1C               	movwf	_new_user^0,c
  4885                           
  4886                           ;TAD_DATOS.c: 111:             state_setCurrentUser = 1;
  4887   000DAA  0E01               	movlw	1
  4888   000DAC  D02F               	goto	L9
  4889   000DAE                     l3936:
  4890                           
  4891                           ;TAD_DATOS.c: 115:             if (UID0 == 0x65 && UID1 == 0xDC && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x43) {
  4892   000DAE  0E65               	movlw	101
  4893   000DB0  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4894   000DB2  A4D8               	btfss	status,2,c
  4895   000DB4  D013               	goto	l3950
  4896   000DB6  0EDC               	movlw	220
  4897   000DB8  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4898   000DBA  A4D8               	btfss	status,2,c
  4899   000DBC  D00F               	goto	l3950
  4900   000DBE  0EF9               	movlw	249
  4901   000DC0  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4902   000DC2  A4D8               	btfss	status,2,c
  4903   000DC4  D00B               	goto	l3950
  4904   000DC6  0E03               	movlw	3
  4905   000DC8  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4906   000DCA  A4D8               	btfss	status,2,c
  4907   000DCC  D007               	goto	l3950
  4908   000DCE  0E43               	movlw	67
  4909   000DD0  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4910   000DD2  A4D8               	btfss	status,2,c
  4911   000DD4  D003               	goto	l3950
  4912                           
  4913                           ;TAD_DATOS.c: 116:                 index = 0;
  4914   000DD6  6A7D               	clrf	_index^0,c
  4915   000DD8                     l3948:
  4916                           
  4917                           ;TAD_DATOS.c: 117:                 state_setCurrentUser = 6;
  4918   000DD8  0E06               	movlw	6
  4919   000DDA  D018               	goto	L9
  4920   000DDC                     l3950:
  4921                           
  4922                           ;TAD_DATOS.c: 120:             state_setCurrentUser = 2;
  4923   000DDC  0E02               	movlw	2
  4924   000DDE  D016               	goto	L9
  4925   000DE0                     l3952:
  4926                           
  4927                           ;TAD_DATOS.c: 123:             if (UID0 == 0xDC && UID1 == 0x0D && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x2B) {
  4928   000DE0  0EDC               	movlw	220
  4929   000DE2  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4930   000DE4  A4D8               	btfss	status,2,c
  4931   000DE6  D014               	goto	l3964
  4932   000DE8  0E0D               	movlw	13
  4933   000DEA  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4934   000DEC  A4D8               	btfss	status,2,c
  4935   000DEE  D010               	goto	l3964
  4936   000DF0  0EF9               	movlw	249
  4937   000DF2  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4938   000DF4  A4D8               	btfss	status,2,c
  4939   000DF6  D00C               	goto	l3964
  4940   000DF8  0E03               	movlw	3
  4941   000DFA  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4942   000DFC  A4D8               	btfss	status,2,c
  4943   000DFE  D008               	goto	l3964
  4944   000E00  0E2B               	movlw	43
  4945   000E02  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4946   000E04  A4D8               	btfss	status,2,c
  4947   000E06  D004               	goto	l3964
  4948                           
  4949                           ;TAD_DATOS.c: 124:                 index = 1;
  4950   000E08  0E01               	movlw	1
  4951   000E0A  D035               	goto	L12
  4952   000E0C                     L9:
  4953   000E0C  6E1B               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4954                           
  4955                           ;TAD_DATOS.c: 126:                 break;
  4956   000E0E  D058               	goto	l4010
  4957   000E10                     l3964:
  4958                           
  4959                           ;TAD_DATOS.c: 128:             state_setCurrentUser = 3;
  4960   000E10  0E03               	movlw	3
  4961   000E12  6E1B               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4962   000E14                     l3966:
  4963                           
  4964                           ;TAD_DATOS.c: 130:             if (UID0 == 0xDF && UID1 == 0x8B && UID2 == 0xDF && UID3 
      +                          == 0xC4 && UID4 == 0x4F) {
  4965   000E14  0EDF               	movlw	223
  4966   000E16  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4967   000E18  A4D8               	btfss	status,2,c
  4968   000E1A  D012               	goto	l3978
  4969   000E1C  0E8B               	movlw	139
  4970   000E1E  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4971   000E20  A4D8               	btfss	status,2,c
  4972   000E22  D00E               	goto	l3978
  4973   000E24  0EDF               	movlw	223
  4974   000E26  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4975   000E28  A4D8               	btfss	status,2,c
  4976   000E2A  D00A               	goto	l3978
  4977   000E2C  0EC4               	movlw	196
  4978   000E2E  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4979   000E30  A4D8               	btfss	status,2,c
  4980   000E32  D006               	goto	l3978
  4981   000E34  0E4F               	movlw	79
  4982   000E36  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4983   000E38  A4D8               	btfss	status,2,c
  4984   000E3A  D002               	goto	l3978
  4985                           
  4986                           ;TAD_DATOS.c: 131:                 index = 2;
  4987   000E3C  0E02               	movlw	2
  4988   000E3E  D01B               	goto	L12
  4989   000E40                     l3978:
  4990                           
  4991                           ;TAD_DATOS.c: 135:             state_setCurrentUser = 4;
  4992   000E40  0E04               	movlw	4
  4993   000E42  D7E4               	goto	L9
  4994   000E44                     l3980:
  4995                           
  4996                           ;TAD_DATOS.c: 138:             if (UID0 == 0x21 && UID1 == 0x32 && UID2 == 0xA9 && UID3 
      +                          == 0x89 && UID4 == 0x33) {
  4997   000E44  0E21               	movlw	33
  4998   000E46  1871               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4999   000E48  A4D8               	btfss	status,2,c
  5000   000E4A  D012               	goto	l3992
  5001   000E4C  0E32               	movlw	50
  5002   000E4E  186D               	xorwf	motor_setCurrentUser@UID1^0,w,c
  5003   000E50  A4D8               	btfss	status,2,c
  5004   000E52  D00E               	goto	l3992
  5005   000E54  0EA9               	movlw	169
  5006   000E56  186E               	xorwf	motor_setCurrentUser@UID2^0,w,c
  5007   000E58  A4D8               	btfss	status,2,c
  5008   000E5A  D00A               	goto	l3992
  5009   000E5C  0E89               	movlw	137
  5010   000E5E  186F               	xorwf	motor_setCurrentUser@UID3^0,w,c
  5011   000E60  A4D8               	btfss	status,2,c
  5012   000E62  D006               	goto	l3992
  5013   000E64  0E33               	movlw	51
  5014   000E66  1870               	xorwf	motor_setCurrentUser@UID4^0,w,c
  5015   000E68  A4D8               	btfss	status,2,c
  5016   000E6A  D002               	goto	l3992
  5017                           
  5018                           ;TAD_DATOS.c: 139:                 index = 3;
  5019   000E6C  0E03               	movlw	3
  5020   000E6E  D003               	goto	L12
  5021   000E70                     l3992:
  5022                           
  5023                           ;TAD_DATOS.c: 143:             state_setCurrentUser = 5;
  5024   000E70  0E05               	movlw	5
  5025   000E72  D7CC               	goto	L9
  5026   000E74                     l3994:
  5027                           
  5028                           ;TAD_DATOS.c: 146:             index = 4;
  5029   000E74  0E04               	movlw	4
  5030   000E76                     L12:
  5031   000E76  6E7D               	movwf	_index^0,c
  5032   000E78  D7AF               	goto	l3948
  5033   000E7A                     l3996:
  5034                           
  5035                           ;TAD_DATOS.c: 150:             printfUID(currentUser, index, "\r\nTargeta detectada!");
  5036   000E7A  0E40               	movlw	low _currentUser
  5037   000E7C  6E5D               	movwf	printfUID@currentUser^0,c
  5038   000E7E  C07D  F05E         	movff	_index,printfUID@userIndex
  5039   000E82  0EBE               	movlw	low STR_17
  5040   000E84  6E5F               	movwf	printfUID@extraString^0,c
  5041   000E86  0E1F               	movlw	high STR_17
  5042   000E88  6E60               	movwf	(printfUID@extraString+1)^0,c
  5043   000E8A  EC4E  F003         	call	_printfUID	;wreg free
  5044                           
  5045                           ;TAD_DATOS.c: 151:             state_setCurrentUser = 0;
  5046   000E8E  6A1B               	clrf	motor_setCurrentUser@state_setCurrentUser^0,c
  5047                           
  5048                           ;TAD_DATOS.c: 152:             return 1;
  5049   000E90  0E01               	movlw	1
  5050   000E92  0012               	return	
  5051   000E94                     l4008:
  5052   000E94  501B               	movf	motor_setCurrentUser@state_setCurrentUser^0,w,c
  5053                           
  5054                           ; Switch size 1, requested type "simple"
  5055                           ; Number of cases is 7, Range of values is 0 to 6
  5056                           ; switch strategies available:
  5057                           ; Name         Instructions Cycles
  5058                           ; simple_byte           22    12 (average)
  5059                           ;	Chosen strategy is simple_byte
  5060   000E96  0A00               	xorlw	0	; case 0
  5061   000E98  B4D8               	btfsc	status,2,c
  5062   000E9A  D77B               	goto	l3922
  5063   000E9C  0A01               	xorlw	1	; case 1
  5064   000E9E  B4D8               	btfsc	status,2,c
  5065   000EA0  D786               	goto	l3936
  5066   000EA2  0A03               	xorlw	3	; case 2
  5067   000EA4  B4D8               	btfsc	status,2,c
  5068   000EA6  D79C               	goto	l3952
  5069   000EA8  0A01               	xorlw	1	; case 3
  5070   000EAA  B4D8               	btfsc	status,2,c
  5071   000EAC  D7B3               	goto	l3966
  5072   000EAE  0A07               	xorlw	7	; case 4
  5073   000EB0  B4D8               	btfsc	status,2,c
  5074   000EB2  D7C8               	goto	l3980
  5075   000EB4  0A01               	xorlw	1	; case 5
  5076   000EB6  B4D8               	btfsc	status,2,c
  5077   000EB8  D7DD               	goto	l3994
  5078   000EBA  0A03               	xorlw	3	; case 6
  5079   000EBC  B4D8               	btfsc	status,2,c
  5080   000EBE  D7DD               	goto	l3996
  5081   000EC0                     l4010:
  5082                           
  5083                           ;TAD_DATOS.c: 155:     return 0;
  5084   000EC0  0E00               	movlw	0
  5085   000EC2  0012               	return		;funcret
  5086   000EC4                     __end_of_motor_setCurrentUser:
  5087                           	callstack 0
  5088                           
  5089 ;; *************** function _motor_LEDs *****************
  5090 ;; Defined at:
  5091 ;;		line 37 in file "TAD_LEDS.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  i               1   23[COMRAM] unsigned char 
  5096 ;;  currentTics     4   19[COMRAM] unsigned long 
  5097 ;;  i               1   24[COMRAM] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1
  5107 ;;      Params:         0       0       0
  5108 ;;      Locals:         6       0       0
  5109 ;;      Temps:          5       0       0
  5110 ;;      Totals:        11       0       0
  5111 ;;Total ram usage:       11 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 4
  5114 ;; This function calls:
  5115 ;;		_TI_GetTics
  5116 ;;		_TI_ResetTics
  5117 ;;		_controlLED
  5118 ;;		_getActualLeds
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text8
  5125   0010CA                     __ptext8:
  5126                           	callstack 0
  5127   0010CA                     _motor_LEDs:
  5128                           	callstack 26
  5129                           
  5130                           ;TAD_LEDS.c: 39:     getActualLeds(ActualLeds, 20);
  5131                           
  5132                           ;incstack = 0
  5133   0010CA  0EBD               	movlw	low _ActualLeds
  5134   0010CC  6E57               	movwf	getActualLeds@leds^0,c
  5135   0010CE  0E14               	movlw	20
  5136   0010D0  6E58               	movwf	getActualLeds@userIndex^0,c
  5137   0010D2  EC34  F00C         	call	_getActualLeds	;wreg free
  5138                           
  5139                           ;TAD_LEDS.c: 42:     static unsigned long lastTics = 0;;TAD_LEDS.c: 43:     unsigned lon
      +                          g currentTics = TI_GetTics(timer);
  5140   0010D6  5054               	movf	_timer^0,w,c
  5141   0010D8  EC88  F00C         	call	_TI_GetTics
  5142   0010DC  C057  F069         	movff	?_TI_GetTics,motor_LEDs@currentTics
  5143   0010E0  C058  F06A         	movff	?_TI_GetTics+1,motor_LEDs@currentTics+1
  5144   0010E4  C059  F06B         	movff	?_TI_GetTics+2,motor_LEDs@currentTics+2
  5145   0010E8  C05A  F06C         	movff	?_TI_GetTics+3,motor_LEDs@currentTics+3
  5146                           
  5147                           ;TAD_LEDS.c: 46:     if (currentTics == lastTics) return;
  5148   0010EC  500B               	movf	motor_LEDs@lastTics^0,w,c
  5149   0010EE  1869               	xorwf	motor_LEDs@currentTics^0,w,c
  5150   0010F0  E10A               	bnz	l212
  5151   0010F2  500C               	movf	(motor_LEDs@lastTics+1)^0,w,c
  5152   0010F4  186A               	xorwf	(motor_LEDs@currentTics+1)^0,w,c
  5153   0010F6  E107               	bnz	l212
  5154   0010F8  500D               	movf	(motor_LEDs@lastTics+2)^0,w,c
  5155   0010FA  186B               	xorwf	(motor_LEDs@currentTics+2)^0,w,c
  5156   0010FC  E104               	bnz	l212
  5157   0010FE  500E               	movf	(motor_LEDs@lastTics+3)^0,w,c
  5158   001100  186C               	xorwf	(motor_LEDs@currentTics+3)^0,w,c
  5159   001102  B4D8               	btfsc	status,2,c
  5160   001104  0012               	return	
  5161   001106                     l212:
  5162                           
  5163                           ;TAD_LEDS.c: 47:     lastTics = currentTics;
  5164   001106  C069  F00B         	movff	motor_LEDs@currentTics,motor_LEDs@lastTics
  5165   00110A  C06A  F00C         	movff	motor_LEDs@currentTics+1,motor_LEDs@lastTics+1
  5166   00110E  C06B  F00D         	movff	motor_LEDs@currentTics+2,motor_LEDs@lastTics+2
  5167   001112  C06C  F00E         	movff	motor_LEDs@currentTics+3,motor_LEDs@lastTics+3
  5168                           
  5169                           ;TAD_LEDS.c: 50:     if (currentTics >= 10) {
  5170   001116  506C               	movf	(motor_LEDs@currentTics+3)^0,w,c
  5171   001118  106B               	iorwf	(motor_LEDs@currentTics+2)^0,w,c
  5172   00111A  106A               	iorwf	(motor_LEDs@currentTics+1)^0,w,c
  5173   00111C  E104               	bnz	u4410
  5174   00111E  0E0A               	movlw	10
  5175   001120  5C69               	subwf	motor_LEDs@currentTics^0,w,c
  5176   001122  A0D8               	btfss	status,0,c
  5177   001124  D015               	goto	l214
  5178   001126                     u4410:
  5179                           
  5180                           ;TAD_LEDS.c: 51:         TI_ResetTics(timer);
  5181   001126  5054               	movf	_timer^0,w,c
  5182   001128  ECA5  F00D         	call	_TI_ResetTics
  5183                           
  5184                           ;TAD_LEDS.c: 53:         char i;;TAD_LEDS.c: 54:         for (i = 0; i < 6; i++) {
  5185   00112C  6A6D               	clrf	motor_LEDs@i^0,c
  5186   00112E                     l4868:
  5187                           
  5188                           ;TAD_LEDS.c: 55:             if (ActualLeds[i] > 0) {
  5189   00112E  506D               	movf	motor_LEDs@i^0,w,c
  5190   001130  0FBD               	addlw	low _ActualLeds
  5191   001132  6ED9               	movwf	fsr2l,c
  5192   001134  6ADA               	clrf	fsr2h,c
  5193   001136  50DF               	movf	indf2,w,c
  5194   001138  B4D8               	btfsc	status,2,c
  5195   00113A  D005               	goto	l4872
  5196                           
  5197                           ;TAD_LEDS.c: 56:                 controlLED(i, 1);
  5198   00113C  0E01               	movlw	1
  5199   00113E  6E57               	movwf	controlLED@estado^0,c
  5200   001140  506D               	movf	motor_LEDs@i^0,w,c
  5201   001142  EC61  F00C         	call	_controlLED
  5202   001146                     l4872:
  5203                           
  5204                           ;TAD_LEDS.c: 58:         }
  5205   001146  2A6D               	incf	motor_LEDs@i^0,f,c
  5206   001148  0E05               	movlw	5
  5207   00114A  646D               	cpfsgt	motor_LEDs@i^0,c
  5208   00114C  D7F0               	goto	l4868
  5209   00114E  0012               	return	
  5210   001150                     l214:
  5211                           
  5212                           ;TAD_LEDS.c: 63:     char i;;TAD_LEDS.c: 64:     for (i = 0; i < 6; i++) {
  5213   001150  6A6E               	clrf	motor_LEDs@i_461^0,c
  5214   001152                     l4880:
  5215                           
  5216                           ;TAD_LEDS.c: 65:         if (ActualLeds[i] < 0xA && currentTics >= ActualLeds[i])
  5217   001152  506E               	movf	motor_LEDs@i_461^0,w,c
  5218   001154  0FBD               	addlw	low _ActualLeds
  5219   001156  6ED9               	movwf	fsr2l,c
  5220   001158  6ADA               	clrf	fsr2h,c
  5221   00115A  0E0A               	movlw	10
  5222   00115C  60DF               	cpfslt	indf2,c
  5223   00115E  D01A               	goto	l4886
  5224   001160  506E               	movf	motor_LEDs@i_461^0,w,c
  5225   001162  0FBD               	addlw	low _ActualLeds
  5226   001164  6ED9               	movwf	fsr2l,c
  5227   001166  6ADA               	clrf	fsr2h,c
  5228   001168  50DF               	movf	indf2,w,c
  5229   00116A  6E64               	movwf	??_motor_LEDs^0,c
  5230   00116C  C064  F065         	movff	??_motor_LEDs,??_motor_LEDs+1
  5231   001170  6A66               	clrf	(??_motor_LEDs+2)^0,c
  5232   001172  6A67               	clrf	(??_motor_LEDs+3)^0,c
  5233   001174  6A68               	clrf	(??_motor_LEDs+4)^0,c
  5234   001176  5065               	movf	(??_motor_LEDs+1)^0,w,c
  5235   001178  5C69               	subwf	motor_LEDs@currentTics^0,w,c
  5236   00117A  5066               	movf	(??_motor_LEDs+2)^0,w,c
  5237   00117C  586A               	subwfb	(motor_LEDs@currentTics+1)^0,w,c
  5238   00117E  5067               	movf	(??_motor_LEDs+3)^0,w,c
  5239   001180  586B               	subwfb	(motor_LEDs@currentTics+2)^0,w,c
  5240   001182  5068               	movf	(??_motor_LEDs+4)^0,w,c
  5241   001184  586C               	subwfb	(motor_LEDs@currentTics+3)^0,w,c
  5242   001186  A0D8               	btfss	status,0,c
  5243   001188  D005               	goto	l4886
  5244                           
  5245                           ;TAD_LEDS.c: 66:             controlLED(i, 0);
  5246   00118A  0E00               	movlw	0
  5247   00118C  6E57               	movwf	controlLED@estado^0,c
  5248   00118E  506E               	movf	motor_LEDs@i_461^0,w,c
  5249   001190  EC61  F00C         	call	_controlLED
  5250   001194                     l4886:
  5251                           
  5252                           ;TAD_LEDS.c: 67:     }
  5253   001194  2A6E               	incf	motor_LEDs@i_461^0,f,c
  5254   001196  0E05               	movlw	5
  5255   001198  646E               	cpfsgt	motor_LEDs@i_461^0,c
  5256   00119A  D7DB               	goto	l4880
  5257   00119C  0012               	return	
  5258   00119E                     __end_of_motor_LEDs:
  5259                           	callstack 0
  5260                           
  5261 ;; *************** function _controlLED *****************
  5262 ;; Defined at:
  5263 ;;		line 16 in file "TAD_LEDS.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  ledActual       1    wreg     unsigned char 
  5266 ;;  estado          1    1[COMRAM] unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  ledActual       1    4[COMRAM] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1
  5278 ;;      Params:         1       0       0
  5279 ;;      Locals:         3       0       0
  5280 ;;      Temps:          0       0       0
  5281 ;;      Totals:         4       0       0
  5282 ;;Total ram usage:        4 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 3
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_motor_LEDs
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text9
  5293   0018C2                     __ptext9:
  5294                           	callstack 0
  5295   0018C2                     _controlLED:
  5296                           	callstack 26
  5297                           
  5298                           ;incstack = 0
  5299                           ;controlLED@ledActual stored from wreg
  5300   0018C2  6E5A               	movwf	controlLED@ledActual^0,c
  5301                           
  5302                           ;TAD_LEDS.c: 18:     static unsigned char ledBits[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x2
      +                          0};;TAD_LEDS.c: 20:     if (ledActual < 6) {
  5303   0018C4  0E06               	movlw	6
  5304   0018C6  605A               	cpfslt	controlLED@ledActual^0,c
  5305   0018C8  D012               	goto	l3762
  5306                           
  5307                           ;TAD_LEDS.c: 22:         if (estado)
  5308   0018CA  5057               	movf	controlLED@estado^0,w,c
  5309   0018CC  B4D8               	btfsc	status,2,c
  5310   0018CE  D007               	goto	l3760
  5311                           
  5312                           ;TAD_LEDS.c: 23:             LATA |= ledBits[ledActual];
  5313   0018D0  505A               	movf	controlLED@ledActual^0,w,c
  5314   0018D2  0FDC               	addlw	low controlLED@ledBits
  5315   0018D4  6ED9               	movwf	fsr2l,c
  5316   0018D6  6ADA               	clrf	fsr2h,c
  5317   0018D8  50DF               	movf	indf2,w,c
  5318   0018DA  1289               	iorwf	137,f,c	;volatile
  5319   0018DC  0012               	return	
  5320   0018DE                     l3760:
  5321                           
  5322                           ;TAD_LEDS.c: 25:             LATA &= ~ledBits[ledActual];
  5323   0018DE  505A               	movf	controlLED@ledActual^0,w,c
  5324   0018E0  0FDC               	addlw	low controlLED@ledBits
  5325   0018E2  6ED9               	movwf	fsr2l,c
  5326   0018E4  6ADA               	clrf	fsr2h,c
  5327   0018E6  50DF               	movf	indf2,w,c
  5328   0018E8  0AFF               	xorlw	255
  5329   0018EA  1689               	andwf	137,f,c	;volatile
  5330   0018EC  0012               	return	
  5331   0018EE                     l3762:
  5332   0018EE  285A               	incf	controlLED@ledActual^0,w,c
  5333   0018F0  A4D8               	btfss	status,2,c
  5334   0018F2  0012               	return	
  5335                           
  5336                           ;TAD_LEDS.c: 29:         LATA = estado ? 0x3F : 0x00;
  5337   0018F4  5057               	movf	controlLED@estado^0,w,c
  5338   0018F6  A4D8               	btfss	status,2,c
  5339   0018F8  D004               	goto	l3768
  5340   0018FA  0E00               	movlw	0
  5341   0018FC  6E59               	movwf	(_controlLED$455+1)^0,c
  5342   0018FE  0E00               	movlw	0
  5343   001900  D003               	goto	L13
  5344   001902                     l3768:
  5345   001902  0E00               	movlw	0
  5346   001904  6E59               	movwf	(_controlLED$455+1)^0,c
  5347   001906  0E3F               	movlw	63
  5348   001908                     L13:
  5349   001908  6E58               	movwf	_controlLED$455^0,c
  5350   00190A  C058  FF89         	movff	_controlLED$455,3977	;volatile
  5351   00190E  0012               	return		;funcret
  5352   001910                     __end_of_controlLED:
  5353                           	callstack 0
  5354                           
  5355 ;; *************** function _motorTerminal *****************
  5356 ;; Defined at:
  5357 ;;		line 144 in file "TAD_TERMINAL.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;		None
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  currentUserI    1   24[COMRAM] unsigned char 
  5362 ;;  opcion          1   23[COMRAM] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1
  5372 ;;      Params:         0       0       0
  5373 ;;      Locals:         2       0       0
  5374 ;;      Temps:          0       0       0
  5375 ;;      Totals:         2       0       0
  5376 ;;Total ram usage:        2 bytes
  5377 ;; Hardware stack levels used: 1
  5378 ;; Hardware stack levels required when called: 8
  5379 ;; This function calls:
  5380 ;;		_Terminal_RXAvailable
  5381 ;;		_Terminal_ReceiveChar
  5382 ;;		_Terminal_SendChar
  5383 ;;		_getActualUID
  5384 ;;		_getCurrentUserIndex
  5385 ;;		_motor_SendString
  5386 ;;		_motor_StartSendString
  5387 ;;		_newConfiguration
  5388 ;;		_printfUID
  5389 ;;		_saveHourToData
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text10
  5396   00098A                     __ptext10:
  5397                           	callstack 0
  5398   00098A                     _motorTerminal:
  5399                           	callstack 22
  5400                           
  5401                           ;TAD_TERMINAL.c: 145:  static char state = 0;;TAD_TERMINAL.c: 146:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 147:  static char index = 0;;TAD_TERMINAL.c: 148:  st
      +                          atic unsigned char leds[6];;TAD_TERMINAL.c: 149:  static unsigned char currentUser[5];;T
      +                          AD_TERMINAL.c: 150:  static char userNumber = 0;;TAD_TERMINAL.c: 152:  if (sending_strin
      +                          g) {
  5402                           
  5403                           ;incstack = 0
  5404   00098A  5021               	movf	_sending_string^0,w,c
  5405   00098C  B4D8               	btfsc	status,2,c
  5406   00098E  D0F4               	goto	l4464
  5407                           
  5408                           ;TAD_TERMINAL.c: 153:   if (motor_SendString() == 1) {
  5409   000990  EC9C  F00A         	call	_motor_SendString	;wreg free
  5410   000994  06E8               	decf	wreg,f,c
  5411   000996  A4D8               	btfss	status,2,c
  5412   000998  0012               	return	
  5413                           
  5414                           ;TAD_TERMINAL.c: 154:    sending_string = 0;
  5415   00099A  6A21               	clrf	_sending_string^0,c
  5416                           
  5417                           ;TAD_TERMINAL.c: 155:   } else {
  5418   00099C  D0ED               	goto	l4464
  5419   00099E                     l4334:
  5420                           
  5421                           ;TAD_TERMINAL.c: 162:    if (Terminal_RXAvailable() && Terminal_ReceiveChar() == 0x1B ||
      +                           hashtag_pressed) {
  5422   00099E  EC3E  F00E         	call	_Terminal_RXAvailable	;wreg free
  5423   0009A2  0900               	iorlw	0
  5424   0009A4  B4D8               	btfsc	status,2,c
  5425   0009A6  D005               	goto	u3720
  5426   0009A8  EC60  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5427   0009AC  0A1B               	xorlw	27
  5428   0009AE  B4D8               	btfsc	status,2,c
  5429   0009B0  D003               	goto	u3730
  5430   0009B2                     u3720:
  5431   0009B2  5022               	movf	_hashtag_pressed^0,w,c
  5432   0009B4  B4D8               	btfsc	status,2,c
  5433   0009B6  0012               	return	
  5434   0009B8                     u3730:
  5435                           
  5436                           ;TAD_TERMINAL.c: 163:     motor_StartSendString("---------------\r\n");
  5437   0009B8  0ED3               	movlw	low STR_4
  5438   0009BA  6E5B               	movwf	motor_StartSendString@str^0,c
  5439   0009BC  0E1F               	movlw	high STR_4
  5440   0009BE  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5441   0009C0  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5442                           
  5443                           ;TAD_TERMINAL.c: 164:     sending_string = 1;
  5444   0009C4  0E01               	movlw	1
  5445   0009C6  6E21               	movwf	_sending_string^0,c
  5446                           
  5447                           ;TAD_TERMINAL.c: 165:     state = 10;
  5448   0009C8  0E0A               	movlw	10
  5449   0009CA  6E20               	movwf	motorTerminal@state^0,c
  5450                           
  5451                           ;TAD_TERMINAL.c: 166:     hashtag_pressed = 0;
  5452   0009CC  6A22               	clrf	_hashtag_pressed^0,c
  5453   0009CE  0012               	return	
  5454   0009D0                     l4348:
  5455                           
  5456                           ;TAD_TERMINAL.c: 171:    if (!sending_string) {
  5457   0009D0  5021               	movf	_sending_string^0,w,c
  5458   0009D2  A4D8               	btfss	status,2,c
  5459   0009D4  0012               	return	
  5460                           
  5461                           ;TAD_TERMINAL.c: 172:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  5462   0009D6  0EA7               	movlw	low STR_5
  5463   0009D8  6E5B               	movwf	motor_StartSendString@str^0,c
  5464   0009DA  0E1E               	movlw	high STR_5
  5465   0009DC  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5466   0009DE  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5467                           
  5468                           ;TAD_TERMINAL.c: 173:     sending_string = 1;
  5469   0009E2  0E01               	movlw	1
  5470   0009E4  6E21               	movwf	_sending_string^0,c
  5471                           
  5472                           ;TAD_TERMINAL.c: 174:     state = 13;
  5473   0009E6  0E0D               	movlw	13
  5474   0009E8  6E20               	movwf	motorTerminal@state^0,c
  5475   0009EA  0012               	return	
  5476   0009EC                     l4356:
  5477                           
  5478                           ;TAD_TERMINAL.c: 179:    if (!sending_string) {
  5479   0009EC  5021               	movf	_sending_string^0,w,c
  5480   0009EE  A4D8               	btfss	status,2,c
  5481   0009F0  0012               	return	
  5482                           
  5483                           ;TAD_TERMINAL.c: 180:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  5484   0009F2  0E48               	movlw	low STR_6
  5485   0009F4  6E5B               	movwf	motor_StartSendString@str^0,c
  5486   0009F6  0E1E               	movlw	high STR_6
  5487   0009F8  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5488   0009FA  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5489                           
  5490                           ;TAD_TERMINAL.c: 181:     sending_string = 1;
  5491   0009FE  0E01               	movlw	1
  5492   000A00  6E21               	movwf	_sending_string^0,c
  5493                           
  5494                           ;TAD_TERMINAL.c: 182:     state = 1;
  5495   000A02  0E01               	movlw	1
  5496   000A04  6E20               	movwf	motorTerminal@state^0,c
  5497   000A06  0012               	return	
  5498   000A08                     l4364:
  5499                           
  5500                           ;TAD_TERMINAL.c: 187:    if(Terminal_RXAvailable()) {
  5501   000A08  EC3E  F00E         	call	_Terminal_RXAvailable	;wreg free
  5502   000A0C  0900               	iorlw	0
  5503   000A0E  B4D8               	btfsc	status,2,c
  5504   000A10  0012               	return	
  5505                           
  5506                           ;TAD_TERMINAL.c: 188:     char opcion = Terminal_ReceiveChar();
  5507   000A12  EC60  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5508   000A16  6E6D               	movwf	motorTerminal@opcion^0,c
  5509                           
  5510                           ;TAD_TERMINAL.c: 189:     if (opcion >= '1' && opcion <= '3') {
  5511   000A18  0E30               	movlw	48
  5512   000A1A  646D               	cpfsgt	motorTerminal@opcion^0,c
  5513   000A1C  D011               	goto	l4378
  5514   000A1E  0E34               	movlw	52
  5515   000A20  606D               	cpfslt	motorTerminal@opcion^0,c
  5516   000A22  D00E               	goto	l4378
  5517                           
  5518                           ;TAD_TERMINAL.c: 190:      motor_StartSendString("\r\n");
  5519   000A24  0EE2               	movlw	low (STR_4+15)
  5520   000A26  6E5B               	movwf	motor_StartSendString@str^0,c
  5521   000A28  0E1F               	movlw	high (STR_4+15)
  5522   000A2A  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5523   000A2C  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5524                           
  5525                           ;TAD_TERMINAL.c: 191:      sending_string = 1;
  5526   000A30  0E01               	movlw	1
  5527   000A32  6E21               	movwf	_sending_string^0,c
  5528                           
  5529                           ;TAD_TERMINAL.c: 192:      state = (opcion - '1') * 10 + 20;
  5530   000A34  506D               	movf	motorTerminal@opcion^0,w,c
  5531   000A36  0D0A               	mullw	10
  5532   000A38  50F3               	movf	243,w,c
  5533   000A3A  0F2A               	addlw	42
  5534   000A3C  6E20               	movwf	motorTerminal@state^0,c
  5535                           
  5536                           ;TAD_TERMINAL.c: 193:     } else {
  5537   000A3E  0012               	return	
  5538   000A40                     l4378:
  5539                           
  5540                           ;TAD_TERMINAL.c: 194:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5541   000A40  0E1F               	movlw	low STR_8
  5542   000A42  6E5B               	movwf	motor_StartSendString@str^0,c
  5543   000A44  0E1F               	movlw	high STR_8
  5544   000A46  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5545   000A48  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5546   000A4C                     l4380:
  5547                           
  5548                           ;TAD_TERMINAL.c: 195:      sending_string = 1;
  5549   000A4C  0E01               	movlw	1
  5550   000A4E  6E21               	movwf	_sending_string^0,c
  5551                           
  5552                           ;TAD_TERMINAL.c: 196:      state = 0;
  5553   000A50  6A20               	clrf	motorTerminal@state^0,c
  5554   000A52  0012               	return	
  5555   000A54                     l4384:
  5556                           
  5557                           ;TAD_TERMINAL.c: 202:    if (!sending_string) {
  5558   000A54  5021               	movf	_sending_string^0,w,c
  5559   000A56  A4D8               	btfss	status,2,c
  5560   000A58  0012               	return	
  5561                           
  5562                           ;TAD_TERMINAL.c: 203:     unsigned char currentUserIndex = getCurrentUserIndex();
  5563   000A5A  EC5E  F00E         	call	_getCurrentUserIndex	;wreg free
  5564   000A5E  6E6E               	movwf	motorTerminal@currentUserIndex^0,c
  5565                           
  5566                           ;TAD_TERMINAL.c: 204:     if (currentUserIndex != 4) {
  5567   000A60  0E04               	movlw	4
  5568   000A62  186E               	xorwf	motorTerminal@currentUserIndex^0,w,c
  5569   000A64  B4D8               	btfsc	status,2,c
  5570   000A66  D013               	goto	l4396
  5571                           
  5572                           ;TAD_TERMINAL.c: 205:      getActualUID(currentUser, currentUserIndex);
  5573   000A68  0EC3               	movlw	low motorTerminal@currentUser
  5574   000A6A  6E57               	movwf	getActualUID@UID^0,c
  5575   000A6C  C06E  F058         	movff	motorTerminal@currentUserIndex,getActualUID@userIndex
  5576   000A70  ECD5  F00A         	call	_getActualUID	;wreg free
  5577                           
  5578                           ;TAD_TERMINAL.c: 206:      printfUID(currentUser, currentUserIndex, "Usuari ");
  5579   000A74  0EC3               	movlw	low motorTerminal@currentUser
  5580   000A76  6E5D               	movwf	printfUID@currentUser^0,c
  5581   000A78  C06E  F05E         	movff	motorTerminal@currentUserIndex,printfUID@userIndex
  5582   000A7C  0EF7               	movlw	low STR_9
  5583   000A7E  6E5F               	movwf	printfUID@extraString^0,c
  5584   000A80  0E1F               	movlw	high STR_9
  5585   000A82  6E60               	movwf	(printfUID@extraString+1)^0,c
  5586   000A84  EC4E  F003         	call	_printfUID	;wreg free
  5587   000A88                     l4394:
  5588                           
  5589                           ;TAD_TERMINAL.c: 207:      state = 25;
  5590   000A88  0E19               	movlw	25
  5591   000A8A  6E20               	movwf	motorTerminal@state^0,c
  5592                           
  5593                           ;TAD_TERMINAL.c: 208:     } else {
  5594   000A8C  0012               	return	
  5595   000A8E                     l4396:
  5596                           
  5597                           ;TAD_TERMINAL.c: 209:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5598   000A8E  0EFE               	movlw	low STR_10
  5599   000A90  6E5B               	movwf	motor_StartSendString@str^0,c
  5600   000A92  0E1E               	movlw	high STR_10
  5601   000A94  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5602   000A96  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5603                           
  5604                           ;TAD_TERMINAL.c: 210:      sending_string = 1;
  5605   000A9A  0E01               	movlw	1
  5606   000A9C  6E21               	movwf	_sending_string^0,c
  5607   000A9E  D7F4               	goto	l4394
  5608   000AA0                     l4402:
  5609                           
  5610                           ;TAD_TERMINAL.c: 217:    if (!sending_string) {
  5611   000AA0  5021               	movf	_sending_string^0,w,c
  5612   000AA2  A4D8               	btfss	status,2,c
  5613   000AA4  0012               	return	
  5614                           
  5615                           ;TAD_TERMINAL.c: 218:     motor_StartSendString("\r\n");
  5616   000AA6  0EE2               	movlw	low (STR_4+15)
  5617   000AA8  6E5B               	movwf	motor_StartSendString@str^0,c
  5618   000AAA  0E1F               	movlw	high (STR_4+15)
  5619   000AAC  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5620   000AAE  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5621   000AB2  D7CC               	goto	l4380
  5622   000AB4                     l4410:
  5623                           
  5624                           ;TAD_TERMINAL.c: 225:    if (!sending_string) {
  5625   000AB4  5021               	movf	_sending_string^0,w,c
  5626   000AB6  A4D8               	btfss	status,2,c
  5627   000AB8  0012               	return	
  5628                           
  5629                           ;TAD_TERMINAL.c: 226:     motor_StartSendString("Configuracions:\r\n");
  5630   000ABA  0EE5               	movlw	low STR_12
  5631   000ABC  6E5B               	movwf	motor_StartSendString@str^0,c
  5632   000ABE  0E1F               	movlw	high STR_12
  5633   000AC0  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5634   000AC2  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5635                           
  5636                           ;TAD_TERMINAL.c: 227:     sending_string = 1;
  5637   000AC6  0E01               	movlw	1
  5638   000AC8  6E21               	movwf	_sending_string^0,c
  5639                           
  5640                           ;TAD_TERMINAL.c: 228:     userNumber = 0;
  5641   000ACA  6A1E               	clrf	motorTerminal@userNumber^0,c
  5642                           
  5643                           ;TAD_TERMINAL.c: 229:     state = 32;
  5644   000ACC  0E20               	movlw	32
  5645   000ACE  6E20               	movwf	motorTerminal@state^0,c
  5646   000AD0  0012               	return	
  5647   000AD2                     l4420:
  5648                           
  5649                           ;TAD_TERMINAL.c: 234:    if (!sending_string) {
  5650   000AD2  5021               	movf	_sending_string^0,w,c
  5651   000AD4  A4D8               	btfss	status,2,c
  5652   000AD6  0012               	return	
  5653                           
  5654                           ;TAD_TERMINAL.c: 235:     if (userNumber < 4) {
  5655   000AD8  0E04               	movlw	4
  5656   000ADA  601E               	cpfslt	motorTerminal@userNumber^0,c
  5657   000ADC  D012               	goto	l4430
  5658                           
  5659                           ;TAD_TERMINAL.c: 237:      getActualUID(currentUser, userNumber);
  5660   000ADE  0EC3               	movlw	low motorTerminal@currentUser
  5661   000AE0  6E57               	movwf	getActualUID@UID^0,c
  5662   000AE2  C01E  F058         	movff	motorTerminal@userNumber,getActualUID@userIndex
  5663   000AE6  ECD5  F00A         	call	_getActualUID	;wreg free
  5664                           
  5665                           ;TAD_TERMINAL.c: 239:      printfUID(currentUser, userNumber, "Usuari ");
  5666   000AEA  0EC3               	movlw	low motorTerminal@currentUser
  5667   000AEC  6E5D               	movwf	printfUID@currentUser^0,c
  5668   000AEE  C01E  F05E         	movff	motorTerminal@userNumber,printfUID@userIndex
  5669   000AF2  0EF7               	movlw	low STR_9
  5670   000AF4  6E5F               	movwf	printfUID@extraString^0,c
  5671   000AF6  0E1F               	movlw	high STR_9
  5672   000AF8  6E60               	movwf	(printfUID@extraString+1)^0,c
  5673   000AFA  EC4E  F003         	call	_printfUID	;wreg free
  5674                           
  5675                           ;TAD_TERMINAL.c: 241:      userNumber++;
  5676   000AFE  2A1E               	incf	motorTerminal@userNumber^0,f,c
  5677                           
  5678                           ;TAD_TERMINAL.c: 242:     } else {
  5679   000B00  0012               	return	
  5680   000B02                     l4430:
  5681                           
  5682                           ;TAD_TERMINAL.c: 243:      motor_StartSendString("\r\n");
  5683   000B02  0EE2               	movlw	low (STR_4+15)
  5684   000B04  6E5B               	movwf	motor_StartSendString@str^0,c
  5685   000B06  0E1F               	movlw	high (STR_4+15)
  5686   000B08  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5687   000B0A  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5688   000B0E  D79E               	goto	l4380
  5689   000B10                     l4436:
  5690                           
  5691                           ;TAD_TERMINAL.c: 251:    if (!sending_string) {
  5692   000B10  5021               	movf	_sending_string^0,w,c
  5693   000B12  A4D8               	btfss	status,2,c
  5694   000B14  0012               	return	
  5695                           
  5696                           ;TAD_TERMINAL.c: 252:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5697   000B16  0E61               	movlw	low STR_15
  5698   000B18  6E5B               	movwf	motor_StartSendString@str^0,c
  5699   000B1A  0E1F               	movlw	high STR_15
  5700   000B1C  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5701   000B1E  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5702                           
  5703                           ;TAD_TERMINAL.c: 253:     sending_string = 1;
  5704   000B22  0E01               	movlw	1
  5705   000B24  6E21               	movwf	_sending_string^0,c
  5706                           
  5707                           ;TAD_TERMINAL.c: 254:     state = 2;
  5708   000B26  0E02               	movlw	2
  5709   000B28  6E20               	movwf	motorTerminal@state^0,c
  5710                           
  5711                           ;TAD_TERMINAL.c: 255:     index = 0;
  5712   000B2A  6A1F               	clrf	motorTerminal@index^0,c
  5713   000B2C  0012               	return	
  5714   000B2E                     l4446:
  5715                           
  5716                           ;TAD_TERMINAL.c: 260:    if(Terminal_RXAvailable()) {
  5717   000B2E  EC3E  F00E         	call	_Terminal_RXAvailable	;wreg free
  5718   000B32  0900               	iorlw	0
  5719   000B34  B4D8               	btfsc	status,2,c
  5720   000B36  0012               	return	
  5721                           
  5722                           ;TAD_TERMINAL.c: 261:     hour[index] = Terminal_ReceiveChar();
  5723   000B38  501F               	movf	motorTerminal@index^0,w,c
  5724   000B3A  0FE5               	addlw	low motorTerminal@hour
  5725   000B3C  6ED9               	movwf	fsr2l,c
  5726   000B3E  6ADA               	clrf	fsr2h,c
  5727   000B40  EC60  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5728   000B44  6EDF               	movwf	indf2,c
  5729                           
  5730                           ;TAD_TERMINAL.c: 262:     Terminal_SendChar(hour[index]);
  5731   000B46  501F               	movf	motorTerminal@index^0,w,c
  5732   000B48  0FE5               	addlw	low motorTerminal@hour
  5733   000B4A  6ED9               	movwf	fsr2l,c
  5734   000B4C  6ADA               	clrf	fsr2h,c
  5735   000B4E  50DF               	movf	indf2,w,c
  5736   000B50  EC11  F00E         	call	_Terminal_SendChar
  5737                           
  5738                           ;TAD_TERMINAL.c: 263:     if(++index == 4) {
  5739   000B54  2A1F               	incf	motorTerminal@index^0,f,c
  5740   000B56  0E04               	movlw	4
  5741   000B58  181F               	xorwf	motorTerminal@index^0,w,c
  5742   000B5A  A4D8               	btfss	status,2,c
  5743   000B5C  0012               	return	
  5744                           
  5745                           ;TAD_TERMINAL.c: 264:      saveHourToData(hour);
  5746   000B5E  0EE5               	movlw	low motorTerminal@hour
  5747   000B60  6E57               	movwf	saveHourToData@hour^0,c
  5748   000B62  EC92  F00D         	call	_saveHourToData	;wreg free
  5749                           
  5750                           ;TAD_TERMINAL.c: 265:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5751   000B66  0E40               	movlw	low STR_16
  5752   000B68  6E5B               	movwf	motor_StartSendString@str^0,c
  5753   000B6A  0E1F               	movlw	high STR_16
  5754   000B6C  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5755   000B6E  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5756                           
  5757                           ;TAD_TERMINAL.c: 266:      newConfiguration();
  5758   000B72  EC55  F00E         	call	_newConfiguration	;wreg free
  5759   000B76  D76A               	goto	l4380
  5760   000B78                     l4464:
  5761   000B78  5020               	movf	motorTerminal@state^0,w,c
  5762                           
  5763                           ; Switch size 1, requested type "simple"
  5764                           ; Number of cases is 10, Range of values is 0 to 40
  5765                           ; switch strategies available:
  5766                           ; Name         Instructions Cycles
  5767                           ; simple_byte           31    16 (average)
  5768                           ;	Chosen strategy is simple_byte
  5769   000B7A  0A00               	xorlw	0	; case 0
  5770   000B7C  B4D8               	btfsc	status,2,c
  5771   000B7E  D70F               	goto	l4334
  5772   000B80  0A01               	xorlw	1	; case 1
  5773   000B82  B4D8               	btfsc	status,2,c
  5774   000B84  D741               	goto	l4364
  5775   000B86  0A03               	xorlw	3	; case 2
  5776   000B88  B4D8               	btfsc	status,2,c
  5777   000B8A  D7D1               	goto	l4446
  5778   000B8C  0A08               	xorlw	8	; case 10
  5779   000B8E  B4D8               	btfsc	status,2,c
  5780   000B90  D71F               	goto	l4348
  5781   000B92  0A07               	xorlw	7	; case 13
  5782   000B94  B4D8               	btfsc	status,2,c
  5783   000B96  D72A               	goto	l4356
  5784   000B98  0A19               	xorlw	25	; case 20
  5785   000B9A  B4D8               	btfsc	status,2,c
  5786   000B9C  D75B               	goto	l4384
  5787   000B9E  0A0D               	xorlw	13	; case 25
  5788   000BA0  B4D8               	btfsc	status,2,c
  5789   000BA2  D77E               	goto	l4402
  5790   000BA4  0A07               	xorlw	7	; case 30
  5791   000BA6  B4D8               	btfsc	status,2,c
  5792   000BA8  D785               	goto	l4410
  5793   000BAA  0A3E               	xorlw	62	; case 32
  5794   000BAC  B4D8               	btfsc	status,2,c
  5795   000BAE  D791               	goto	l4420
  5796   000BB0  0A08               	xorlw	8	; case 40
  5797   000BB2  A4D8               	btfss	status,2,c
  5798   000BB4  0012               	return	
  5799   000BB6  D7AC               	goto	l4436
  5800   000BB8                     __end_of_motorTerminal:
  5801                           	callstack 0
  5802                           
  5803 ;; *************** function _saveHourToData *****************
  5804 ;; Defined at:
  5805 ;;		line 90 in file "TAD_DATOS.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5808 ;;		 -> motorTerminal@hour(4), 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  i               1    2[COMRAM] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1
  5820 ;;      Params:         1       0       0
  5821 ;;      Locals:         1       0       0
  5822 ;;      Temps:          0       0       0
  5823 ;;      Totals:         2       0       0
  5824 ;;Total ram usage:        2 bytes
  5825 ;; Hardware stack levels used: 1
  5826 ;; Hardware stack levels required when called: 3
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_motorTerminal
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text11
  5835   001B24                     __ptext11:
  5836                           	callstack 0
  5837   001B24                     _saveHourToData:
  5838                           	callstack 26
  5839                           
  5840                           ;TAD_DATOS.c: 91:     if(!hour) return;
  5841                           
  5842                           ;incstack = 0
  5843   001B24  5057               	movf	saveHourToData@hour^0,w,c
  5844   001B26  B4D8               	btfsc	status,2,c
  5845   001B28  0012               	return	
  5846                           
  5847                           ;TAD_DATOS.c: 92:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5848   001B2A  6A58               	clrf	saveHourToData@i^0,c
  5849   001B2C                     l4078:
  5850   001B2C  5057               	movf	saveHourToData@hour^0,w,c
  5851   001B2E  2458               	addwf	saveHourToData@i^0,w,c
  5852   001B30  6ED9               	movwf	fsr2l,c
  5853   001B32  6ADA               	clrf	fsr2h,c
  5854   001B34  5058               	movf	saveHourToData@i^0,w,c
  5855   001B36  0F77               	addlw	low _currentTime
  5856   001B38  6EE1               	movwf	fsr1l,c
  5857   001B3A  6AE2               	clrf	fsr1h,c
  5858   001B3C  CFDF FFE7          	movff	indf2,indf1
  5859   001B40  2A58               	incf	saveHourToData@i^0,f,c
  5860   001B42  0E03               	movlw	3
  5861   001B44  6458               	cpfsgt	saveHourToData@i^0,c
  5862   001B46  D7F2               	goto	l4078
  5863   001B48  0012               	return	
  5864   001B4A                     __end_of_saveHourToData:
  5865                           	callstack 0
  5866                           
  5867 ;; *************** function _printfUID *****************
  5868 ;; Defined at:
  5869 ;;		line 60 in file "TAD_TERMINAL.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5872 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5873 ;;  userIndex       1    8[COMRAM] unsigned char 
  5874 ;;  extraString     2    9[COMRAM] PTR const unsigned char 
  5875 ;;		 -> STR_17(21), STR_13(8), STR_9(8), 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  val             1   19[COMRAM] unsigned char 
  5878 ;;  leds            6   13[COMRAM] unsigned char [6]
  5879 ;;  ptr             2   21[COMRAM] PTR unsigned char 
  5880 ;;		 -> printfUID@buffer(80), 
  5881 ;;  i               1   20[COMRAM] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      void 
  5884 ;; Registers used:
  5885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1
  5891 ;;      Params:         4       0       0
  5892 ;;      Locals:        10       0       0
  5893 ;;      Temps:          2       0       0
  5894 ;;      Totals:        16       0       0
  5895 ;;Total ram usage:       16 bytes
  5896 ;; Hardware stack levels used: 1
  5897 ;; Hardware stack levels required when called: 7
  5898 ;; This function calls:
  5899 ;;		_getActualLeds
  5900 ;;		_motor_StartSendString
  5901 ;; This function is called by:
  5902 ;;		_motorTerminal
  5903 ;;		_motor_setCurrentUser
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text12
  5908   00069C                     __ptext12:
  5909                           	callstack 0
  5910   00069C                     _printfUID:
  5911                           	callstack 21
  5912                           
  5913                           ;TAD_TERMINAL.c: 62:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 6
      +                          4:     static char buffer[80];;TAD_TERMINAL.c: 65:     char *ptr = buffer;
  5914                           
  5915                           ;incstack = 0
  5916   00069C  0E00               	movlw	low printfUID@buffer
  5917   00069E  6E6B               	movwf	printfUID@ptr^0,c
  5918   0006A0  0E01               	movlw	high printfUID@buffer
  5919   0006A2  6E6C               	movwf	(printfUID@ptr+1)^0,c
  5920                           
  5921                           ;TAD_TERMINAL.c: 68:     if (currentUser == 0 || *currentUser == 0) {
  5922   0006A4  505D               	movf	printfUID@currentUser^0,w,c
  5923   0006A6  B4D8               	btfsc	status,2,c
  5924   0006A8  D006               	goto	u2720
  5925   0006AA  505D               	movf	printfUID@currentUser^0,w,c
  5926   0006AC  6ED9               	movwf	fsr2l,c
  5927   0006AE  6ADA               	clrf	fsr2h,c
  5928   0006B0  50DF               	movf	indf2,w,c
  5929   0006B2  A4D8               	btfss	status,2,c
  5930   0006B4  D007               	goto	l3552
  5931   0006B6                     u2720:
  5932                           
  5933                           ;TAD_TERMINAL.c: 69:         motor_StartSendString("\tNo hay usuario configurado\r\n");
  5934   0006B6  0E82               	movlw	low STR_3
  5935   0006B8  6E5B               	movwf	motor_StartSendString@str^0,c
  5936   0006BA  0E1F               	movlw	high STR_3
  5937   0006BC  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  5938   0006BE  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  5939   0006C2  0012               	return	
  5940   0006C4                     l3552:
  5941                           
  5942                           ;TAD_TERMINAL.c: 74:     if (extraString) {
  5943   0006C4  505F               	movf	printfUID@extraString^0,w,c
  5944   0006C6  1060               	iorwf	(printfUID@extraString+1)^0,w,c
  5945   0006C8  A4D8               	btfss	status,2,c
  5946   0006CA  D010               	goto	l3562
  5947   0006CC  D066               	goto	l3594
  5948   0006CE                     l3556:
  5949                           
  5950                           ;TAD_TERMINAL.c: 76:             *ptr++ = *extraString++;
  5951   0006CE  C05F  FFF6         	movff	printfUID@extraString,tblptrl
  5952   0006D2  C060  FFF7         	movff	printfUID@extraString+1,tblptrh
  5953   0006D6                     	if	0	;tblptru may be non-zero
  5954   0006D6                     	endif
  5955   0006D6                     	if	0	;tblptru may be non-zero
  5956   0006D6                     	endif
  5957   0006D6  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  5958   0006DA  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  5959   0006DE  0008               	tblrd		*
  5960   0006E0  CFF5 FFDF          	movff	tablat,indf2
  5961   0006E4  4A5F               	infsnz	printfUID@extraString^0,f,c
  5962   0006E6  2A60               	incf	(printfUID@extraString+1)^0,f,c
  5963   0006E8  4A6B               	infsnz	printfUID@ptr^0,f,c
  5964   0006EA  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  5965   0006EC                     l3562:
  5966                           
  5967                           ;TAD_TERMINAL.c: 75:         while (*extraString) {
  5968   0006EC  C05F  FFF6         	movff	printfUID@extraString,tblptrl
  5969   0006F0  C060  FFF7         	movff	printfUID@extraString+1,tblptrh
  5970   0006F4                     	if	0	;tblptru may be non-zero
  5971   0006F4                     	endif
  5972   0006F4                     	if	0	;tblptru may be non-zero
  5973   0006F4                     	endif
  5974   0006F4  0008               	tblrd		*
  5975   0006F6  50F5               	movf	tablat,w,c
  5976   0006F8  0900               	iorlw	0
  5977   0006FA  A4D8               	btfss	status,2,c
  5978   0006FC  D7E8               	goto	l3556
  5979                           
  5980                           ;TAD_TERMINAL.c: 79:         if (buffer[0] == 'U' && buffer[1] == 's' && buffer[2] == 'u
      +                          ' &&
  5981   0006FE  0E55               	movlw	85
  5982   000700  0101               	movlb	1	; () banked
  5983   000702  1900               	xorwf	printfUID@buffer& (0+255),w,b
  5984   000704  A4D8               	btfss	status,2,c
  5985   000706  D031               	goto	l3586
  5986                           
  5987                           ; BSR set to: 1
  5988   000708  0E73               	movlw	115
  5989   00070A  1901               	xorwf	(printfUID@buffer+1)& (0+255),w,b
  5990   00070C  A4D8               	btfss	status,2,c
  5991   00070E  D02D               	goto	l3586
  5992                           
  5993                           ; BSR set to: 1
  5994   000710  0E75               	movlw	117
  5995   000712  1902               	xorwf	(printfUID@buffer+2)& (0+255),w,b
  5996   000714  A4D8               	btfss	status,2,c
  5997   000716  D029               	goto	l3586
  5998                           
  5999                           ; BSR set to: 1
  6000   000718  0E61               	movlw	97
  6001   00071A  1903               	xorwf	(printfUID@buffer+3)& (0+255),w,b
  6002   00071C  A4D8               	btfss	status,2,c
  6003   00071E  D025               	goto	l3586
  6004                           
  6005                           ; BSR set to: 1
  6006   000720  0E72               	movlw	114
  6007   000722  1904               	xorwf	(printfUID@buffer+4)& (0+255),w,b
  6008   000724  A4D8               	btfss	status,2,c
  6009   000726  D021               	goto	l3586
  6010                           
  6011                           ; BSR set to: 1
  6012   000728  0E69               	movlw	105
  6013   00072A  1905               	xorwf	(printfUID@buffer+5)& (0+255),w,b
  6014   00072C  A4D8               	btfss	status,2,c
  6015   00072E  D01D               	goto	l3586
  6016                           
  6017                           ; BSR set to: 1
  6018   000730  0E20               	movlw	32
  6019   000732  1906               	xorwf	(printfUID@buffer+6)& (0+255),w,b
  6020   000734  A4D8               	btfss	status,2,c
  6021   000736  D019               	goto	l3586
  6022                           
  6023                           ; BSR set to: 1
  6024                           ;TAD_TERMINAL.c: 81:             buffer[6] == ' ') {;TAD_TERMINAL.c: 82:             *pt
      +                          r++ = '1' + userIndex;
  6025   000738  505E               	movf	printfUID@userIndex^0,w,c
  6026   00073A  0F31               	addlw	49
  6027   00073C  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6028   000740  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6029   000744  6EDF               	movwf	indf2,c
  6030                           
  6031                           ; BSR set to: 1
  6032   000746  4A6B               	infsnz	printfUID@ptr^0,f,c
  6033   000748  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6034                           
  6035                           ;TAD_TERMINAL.c: 83:             *ptr++ = ':';
  6036   00074A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6037   00074E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6038   000752  0E3A               	movlw	58
  6039   000754  6EDF               	movwf	indf2,c
  6040                           
  6041                           ; BSR set to: 1
  6042   000756  4A6B               	infsnz	printfUID@ptr^0,f,c
  6043   000758  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6044                           
  6045                           ; BSR set to: 1
  6046                           ;TAD_TERMINAL.c: 84:             *ptr++ = ' ';
  6047   00075A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6048   00075E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6049   000762  0E20               	movlw	32
  6050   000764  6EDF               	movwf	indf2,c
  6051   000766  4A6B               	infsnz	printfUID@ptr^0,f,c
  6052   000768  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6053   00076A                     l3586:
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;TAD_TERMINAL.c: 86:         *ptr++ = '\r';
  6057   00076A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6058   00076E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6059   000772  0E0D               	movlw	13
  6060   000774  6EDF               	movwf	indf2,c
  6061                           
  6062                           ; BSR set to: 1
  6063   000776  4A6B               	infsnz	printfUID@ptr^0,f,c
  6064   000778  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6065                           
  6066                           ;TAD_TERMINAL.c: 87:         *ptr++ = '\n';
  6067   00077A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6068   00077E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6069   000782  0E0A               	movlw	10
  6070   000784  6EDF               	movwf	indf2,c
  6071                           
  6072                           ; BSR set to: 1
  6073   000786  4A6B               	infsnz	printfUID@ptr^0,f,c
  6074   000788  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6075                           
  6076                           ; BSR set to: 1
  6077                           ;TAD_TERMINAL.c: 88:         *ptr++ = '\t';
  6078   00078A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6079   00078E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6080   000792  0E09               	movlw	9
  6081   000794  6EDF               	movwf	indf2,c
  6082   000796  4A6B               	infsnz	printfUID@ptr^0,f,c
  6083   000798  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6084   00079A                     l3594:
  6085                           
  6086                           ;TAD_TERMINAL.c: 91:     *ptr++ = 'U';
  6087   00079A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6088   00079E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6089   0007A2  0E55               	movlw	85
  6090   0007A4  6EDF               	movwf	indf2,c
  6091   0007A6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6092   0007A8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6093                           
  6094                           ;TAD_TERMINAL.c: 92:     *ptr++ = 'I';
  6095   0007AA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6096   0007AE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6097   0007B2  0E49               	movlw	73
  6098   0007B4  6EDF               	movwf	indf2,c
  6099   0007B6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6100   0007B8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6101                           
  6102                           ;TAD_TERMINAL.c: 93:     *ptr++ = 'D';
  6103   0007BA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6104   0007BE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6105   0007C2  0E44               	movlw	68
  6106   0007C4  6EDF               	movwf	indf2,c
  6107   0007C6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6108   0007C8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6109                           
  6110                           ;TAD_TERMINAL.c: 94:     *ptr++ = ':';
  6111   0007CA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6112   0007CE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6113   0007D2  0E3A               	movlw	58
  6114   0007D4  6EDF               	movwf	indf2,c
  6115   0007D6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6116   0007D8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6117                           
  6118                           ;TAD_TERMINAL.c: 95:     *ptr++ = ' ';
  6119   0007DA  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6120   0007DE  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6121   0007E2  0E20               	movlw	32
  6122   0007E4  6EDF               	movwf	indf2,c
  6123   0007E6  4A6B               	infsnz	printfUID@ptr^0,f,c
  6124   0007E8  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6125                           
  6126                           ;TAD_TERMINAL.c: 98:     char i;;TAD_TERMINAL.c: 99:     for(i = 0; i < 5; i++) {
  6127   0007EA  6A6A               	clrf	printfUID@i^0,c
  6128   0007EC                     l3614:
  6129                           
  6130                           ;TAD_TERMINAL.c: 100:         unsigned char val = currentUser[i];
  6131   0007EC  505D               	movf	printfUID@currentUser^0,w,c
  6132   0007EE  246A               	addwf	printfUID@i^0,w,c
  6133   0007F0  6ED9               	movwf	fsr2l,c
  6134   0007F2  6ADA               	clrf	fsr2h,c
  6135   0007F4  50DF               	movf	indf2,w,c
  6136   0007F6  6E69               	movwf	printfUID@val^0,c
  6137                           
  6138                           ;TAD_TERMINAL.c: 101:         *ptr++ = hex[val >> 4];
  6139   0007F8  3869               	swapf	printfUID@val^0,w,c
  6140   0007FA  0B0F               	andlw	15
  6141   0007FC  6E61               	movwf	??_printfUID^0,c
  6142   0007FE  6A62               	clrf	(??_printfUID+1)^0,c
  6143   000800  0E2B               	movlw	low printfUID@hex
  6144   000802  2461               	addwf	??_printfUID^0,w,c
  6145   000804  6EF6               	movwf	tblptrl,c
  6146   000806  0E1E               	movlw	high printfUID@hex
  6147   000808  2062               	addwfc	(??_printfUID+1)^0,w,c
  6148   00080A  6EF7               	movwf	tblptrh,c
  6149   00080C                     	if	0	;There are less than 3 active tblptr bytes
  6150   00080C                     	endif
  6151   00080C  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6152   000810  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6153   000814  0008               	tblrd		*
  6154   000816  CFF5 FFDF          	movff	tablat,indf2
  6155   00081A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6156   00081C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6157                           
  6158                           ;TAD_TERMINAL.c: 102:         *ptr++ = hex[val & 0x0F];
  6159   00081E  5069               	movf	printfUID@val^0,w,c
  6160   000820  0B0F               	andlw	15
  6161   000822  6E61               	movwf	??_printfUID^0,c
  6162   000824  6A62               	clrf	(??_printfUID+1)^0,c
  6163   000826  0E2B               	movlw	low printfUID@hex
  6164   000828  2461               	addwf	??_printfUID^0,w,c
  6165   00082A  6EF6               	movwf	tblptrl,c
  6166   00082C  0E1E               	movlw	high printfUID@hex
  6167   00082E  2062               	addwfc	(??_printfUID+1)^0,w,c
  6168   000830  6EF7               	movwf	tblptrh,c
  6169   000832                     	if	0	;There are less than 3 active tblptr bytes
  6170   000832                     	endif
  6171   000832  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6172   000836  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6173   00083A  0008               	tblrd		*
  6174   00083C  CFF5 FFDF          	movff	tablat,indf2
  6175   000840  4A6B               	infsnz	printfUID@ptr^0,f,c
  6176   000842  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6177                           
  6178                           ;TAD_TERMINAL.c: 103:         if(i < 4) *ptr++ = '-';
  6179   000844  0E04               	movlw	4
  6180   000846  606A               	cpfslt	printfUID@i^0,c
  6181   000848  D008               	goto	l3630
  6182   00084A  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6183   00084E  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6184   000852  0E2D               	movlw	45
  6185   000854  6EDF               	movwf	indf2,c
  6186   000856  4A6B               	infsnz	printfUID@ptr^0,f,c
  6187   000858  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6188   00085A                     l3630:
  6189                           
  6190                           ;TAD_TERMINAL.c: 104:     }
  6191   00085A  2A6A               	incf	printfUID@i^0,f,c
  6192   00085C  0E04               	movlw	4
  6193   00085E  646A               	cpfsgt	printfUID@i^0,c
  6194   000860  D7C5               	goto	l3614
  6195                           
  6196                           ;TAD_TERMINAL.c: 105:     *ptr++ = '\r';
  6197   000862  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6198   000866  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6199   00086A  0E0D               	movlw	13
  6200   00086C  6EDF               	movwf	indf2,c
  6201   00086E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6202   000870  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6203                           
  6204                           ;TAD_TERMINAL.c: 106:     *ptr++ = '\n';
  6205   000872  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6206   000876  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6207   00087A  0E0A               	movlw	10
  6208   00087C  6EDF               	movwf	indf2,c
  6209   00087E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6210   000880  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6211                           
  6212                           ;TAD_TERMINAL.c: 107:     *ptr++ = '\t';
  6213   000882  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6214   000886  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6215   00088A  0E09               	movlw	9
  6216   00088C  6EDF               	movwf	indf2,c
  6217   00088E  4A6B               	infsnz	printfUID@ptr^0,f,c
  6218   000890  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6219                           
  6220                           ;TAD_TERMINAL.c: 109:     unsigned char leds[6];;TAD_TERMINAL.c: 110:     getActualLeds(
      +                          leds, userIndex);
  6221   000892  0E63               	movlw	low printfUID@leds
  6222   000894  6E57               	movwf	getActualLeds@leds^0,c
  6223   000896  C05E  F058         	movff	printfUID@userIndex,getActualLeds@userIndex
  6224   00089A  EC34  F00C         	call	_getActualLeds	;wreg free
  6225                           
  6226                           ;TAD_TERMINAL.c: 113:     for(i = 0; i < 6; i++) {
  6227   00089E  6A6A               	clrf	printfUID@i^0,c
  6228   0008A0                     l3652:
  6229                           
  6230                           ;TAD_TERMINAL.c: 115:         *ptr++ = 'L';
  6231   0008A0  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6232   0008A4  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6233   0008A8  0E4C               	movlw	76
  6234   0008AA  6EDF               	movwf	indf2,c
  6235   0008AC  4A6B               	infsnz	printfUID@ptr^0,f,c
  6236   0008AE  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6237                           
  6238                           ;TAD_TERMINAL.c: 116:         *ptr++ = '0' + i;
  6239   0008B0  506A               	movf	printfUID@i^0,w,c
  6240   0008B2  0F30               	addlw	48
  6241   0008B4  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6242   0008B8  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6243   0008BC  6EDF               	movwf	indf2,c
  6244   0008BE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6245   0008C0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6246                           
  6247                           ;TAD_TERMINAL.c: 117:         *ptr++ = ':';
  6248   0008C2  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6249   0008C6  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6250   0008CA  0E3A               	movlw	58
  6251   0008CC  6EDF               	movwf	indf2,c
  6252   0008CE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6253   0008D0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6254                           
  6255                           ;TAD_TERMINAL.c: 118:         *ptr++ = ' ';
  6256   0008D2  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6257   0008D6  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6258   0008DA  0E20               	movlw	32
  6259   0008DC  6EDF               	movwf	indf2,c
  6260   0008DE  4A6B               	infsnz	printfUID@ptr^0,f,c
  6261   0008E0  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6262                           
  6263                           ;TAD_TERMINAL.c: 119:         *ptr++ = hex[leds[i] & 0x0F];
  6264   0008E2  506A               	movf	printfUID@i^0,w,c
  6265   0008E4  0F63               	addlw	low printfUID@leds
  6266   0008E6  6ED9               	movwf	fsr2l,c
  6267   0008E8  6ADA               	clrf	fsr2h,c
  6268   0008EA  50DF               	movf	indf2,w,c
  6269   0008EC  0B0F               	andlw	15
  6270   0008EE  6E61               	movwf	??_printfUID^0,c
  6271   0008F0  6A62               	clrf	(??_printfUID+1)^0,c
  6272   0008F2  0E2B               	movlw	low printfUID@hex
  6273   0008F4  2461               	addwf	??_printfUID^0,w,c
  6274   0008F6  6EF6               	movwf	tblptrl,c
  6275   0008F8  0E1E               	movlw	high printfUID@hex
  6276   0008FA  2062               	addwfc	(??_printfUID+1)^0,w,c
  6277   0008FC  6EF7               	movwf	tblptrh,c
  6278   0008FE                     	if	0	;There are less than 3 active tblptr bytes
  6279   0008FE                     	endif
  6280   0008FE  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6281   000902  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6282   000906  0008               	tblrd		*
  6283   000908  CFF5 FFDF          	movff	tablat,indf2
  6284   00090C  4A6B               	infsnz	printfUID@ptr^0,f,c
  6285   00090E  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6286                           
  6287                           ;TAD_TERMINAL.c: 122:         if(i < 5) {
  6288   000910  0E05               	movlw	5
  6289   000912  606A               	cpfslt	printfUID@i^0,c
  6290   000914  D018               	goto	l3678
  6291                           
  6292                           ;TAD_TERMINAL.c: 123:             *ptr++ = ' ';
  6293   000916  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6294   00091A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6295   00091E  0E20               	movlw	32
  6296   000920  6EDF               	movwf	indf2,c
  6297   000922  4A6B               	infsnz	printfUID@ptr^0,f,c
  6298   000924  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6299                           
  6300                           ;TAD_TERMINAL.c: 124:             *ptr++ = '-';
  6301   000926  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6302   00092A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6303   00092E  0E2D               	movlw	45
  6304   000930  6EDF               	movwf	indf2,c
  6305   000932  4A6B               	infsnz	printfUID@ptr^0,f,c
  6306   000934  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6307                           
  6308                           ;TAD_TERMINAL.c: 125:             *ptr++ = ' ';
  6309   000936  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6310   00093A  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6311   00093E  0E20               	movlw	32
  6312   000940  6EDF               	movwf	indf2,c
  6313   000942  4A6B               	infsnz	printfUID@ptr^0,f,c
  6314   000944  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6315   000946                     l3678:
  6316                           
  6317                           ;TAD_TERMINAL.c: 127:     }
  6318   000946  2A6A               	incf	printfUID@i^0,f,c
  6319   000948  0E05               	movlw	5
  6320   00094A  646A               	cpfsgt	printfUID@i^0,c
  6321   00094C  D7A9               	goto	l3652
  6322                           
  6323                           ;TAD_TERMINAL.c: 130:     *ptr++ = '\r';
  6324   00094E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6325   000952  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6326   000956  0E0D               	movlw	13
  6327   000958  6EDF               	movwf	indf2,c
  6328   00095A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6329   00095C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6330                           
  6331                           ;TAD_TERMINAL.c: 131:     *ptr++ = '\n';
  6332   00095E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6333   000962  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6334   000966  0E0A               	movlw	10
  6335   000968  6EDF               	movwf	indf2,c
  6336   00096A  4A6B               	infsnz	printfUID@ptr^0,f,c
  6337   00096C  2A6C               	incf	(printfUID@ptr+1)^0,f,c
  6338                           
  6339                           ;TAD_TERMINAL.c: 132:     *ptr = '\0';
  6340   00096E  C06B  FFD9         	movff	printfUID@ptr,fsr2l
  6341   000972  C06C  FFDA         	movff	printfUID@ptr+1,fsr2h
  6342   000976  6ADF               	clrf	indf2,c
  6343                           
  6344                           ;TAD_TERMINAL.c: 135:     motor_StartSendString(buffer);
  6345   000978  0E00               	movlw	low printfUID@buffer
  6346   00097A  6E5B               	movwf	motor_StartSendString@str^0,c
  6347   00097C  0E01               	movlw	high printfUID@buffer
  6348   00097E  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  6349   000980  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  6350                           
  6351                           ;TAD_TERMINAL.c: 136:     sending_string = 1;
  6352   000984  0E01               	movlw	1
  6353   000986  6E21               	movwf	_sending_string^0,c
  6354   000988  0012               	return		;funcret
  6355   00098A                     __end_of_printfUID:
  6356                           	callstack 0
  6357                           
  6358 ;; *************** function _getActualLeds *****************
  6359 ;; Defined at:
  6360 ;;		line 70 in file "TAD_DATOS.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  leds            1    1[COMRAM] PTR unsigned char 
  6363 ;;		 -> printfUID@leds(6), ActualLeds(6), 
  6364 ;;  userIndex       1    2[COMRAM] unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  i               1    4[COMRAM] unsigned char 
  6367 ;;  i               1    3[COMRAM] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1
  6377 ;;      Params:         2       0       0
  6378 ;;      Locals:         2       0       0
  6379 ;;      Temps:          0       0       0
  6380 ;;      Totals:         4       0       0
  6381 ;;Total ram usage:        4 bytes
  6382 ;; Hardware stack levels used: 1
  6383 ;; Hardware stack levels required when called: 3
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_motor_LEDs
  6388 ;;		_printfUID
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text13
  6393   001868                     __ptext13:
  6394                           	callstack 0
  6395   001868                     _getActualLeds:
  6396                           	callstack 24
  6397                           
  6398                           ;TAD_DATOS.c: 71:     if(!leds) return;
  6399                           
  6400                           ;incstack = 0
  6401   001868  5057               	movf	getActualLeds@leds^0,w,c
  6402   00186A  B4D8               	btfsc	status,2,c
  6403   00186C  0012               	return	
  6404                           
  6405                           ;TAD_DATOS.c: 72:     if(userIndex == 20) {
  6406   00186E  0E14               	movlw	20
  6407   001870  1858               	xorwf	getActualLeds@userIndex^0,w,c
  6408   001872  A4D8               	btfss	status,2,c
  6409   001874  D013               	goto	l808
  6410                           
  6411                           ;TAD_DATOS.c: 74:         for(char i = 0; i < 6; i++) {
  6412   001876  6A59               	clrf	getActualLeds@i^0,c
  6413   001878                     l3452:
  6414                           
  6415                           ;TAD_DATOS.c: 75:             leds[i] = configurations[index][i];
  6416   001878  507D               	movf	_index^0,w,c
  6417   00187A  0D06               	mullw	6
  6418   00187C  50F3               	movf	243,w,c
  6419   00187E  0F80               	addlw	low _configurations
  6420   001880  2459               	addwf	getActualLeds@i^0,w,c
  6421   001882  6ED9               	movwf	fsr2l,c
  6422   001884  6ADA               	clrf	fsr2h,c
  6423   001886  5057               	movf	getActualLeds@leds^0,w,c
  6424   001888  2459               	addwf	getActualLeds@i^0,w,c
  6425   00188A  6EE1               	movwf	fsr1l,c
  6426   00188C  6AE2               	clrf	fsr1h,c
  6427   00188E  CFDF FFE7          	movff	indf2,indf1
  6428                           
  6429                           ;TAD_DATOS.c: 76:         }
  6430   001892  2A59               	incf	getActualLeds@i^0,f,c
  6431   001894  0E05               	movlw	5
  6432   001896  6459               	cpfsgt	getActualLeds@i^0,c
  6433   001898  D7EF               	goto	l3452
  6434   00189A  0012               	return	
  6435   00189C                     l808:
  6436                           
  6437                           ;TAD_DATOS.c: 79:         for(char i = 0; i < 6; i++) {
  6438   00189C  6A5A               	clrf	getActualLeds@i_922^0,c
  6439   00189E                     l3462:
  6440                           
  6441                           ;TAD_DATOS.c: 80:             leds[i] = configurations[userIndex][i];
  6442   00189E  5058               	movf	getActualLeds@userIndex^0,w,c
  6443   0018A0  0D06               	mullw	6
  6444   0018A2  50F3               	movf	243,w,c
  6445   0018A4  0F80               	addlw	low _configurations
  6446   0018A6  245A               	addwf	getActualLeds@i_922^0,w,c
  6447   0018A8  6ED9               	movwf	fsr2l,c
  6448   0018AA  6ADA               	clrf	fsr2h,c
  6449   0018AC  5057               	movf	getActualLeds@leds^0,w,c
  6450   0018AE  245A               	addwf	getActualLeds@i_922^0,w,c
  6451   0018B0  6EE1               	movwf	fsr1l,c
  6452   0018B2  6AE2               	clrf	fsr1h,c
  6453   0018B4  CFDF FFE7          	movff	indf2,indf1
  6454                           
  6455                           ;TAD_DATOS.c: 81:         }
  6456   0018B8  2A5A               	incf	getActualLeds@i_922^0,f,c
  6457   0018BA  0E05               	movlw	5
  6458   0018BC  645A               	cpfsgt	getActualLeds@i_922^0,c
  6459   0018BE  D7EF               	goto	l3462
  6460   0018C0  0012               	return	
  6461   0018C2                     __end_of_getActualLeds:
  6462                           	callstack 0
  6463                           
  6464 ;; *************** function _newConfiguration *****************
  6465 ;; Defined at:
  6466 ;;		line 86 in file "TAD_DATOS.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMRAM   BANK0   BANK1
  6480 ;;      Params:         0       0       0
  6481 ;;      Locals:         0       0       0
  6482 ;;      Temps:          0       0       0
  6483 ;;      Totals:         0       0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used: 1
  6486 ;; Hardware stack levels required when called: 3
  6487 ;; This function calls:
  6488 ;;		Nothing
  6489 ;; This function is called by:
  6490 ;;		_motor_RFID
  6491 ;;		_motorTerminal
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text14
  6496   001CAA                     __ptext14:
  6497                           	callstack 0
  6498   001CAA                     _newConfiguration:
  6499                           	callstack 26
  6500                           
  6501                           ;TAD_DATOS.c: 87:     new_configuration = 1;
  6502                           
  6503                           ;incstack = 0
  6504   001CAA  0E01               	movlw	1
  6505   001CAC  6E1D               	movwf	_new_configuration^0,c
  6506   001CAE  0012               	return		;funcret
  6507   001CB0                     __end_of_newConfiguration:
  6508                           	callstack 0
  6509                           
  6510 ;; *************** function _getCurrentUserIndex *****************
  6511 ;; Defined at:
  6512 ;;		line 331 in file "TAD_DATOS.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      unsigned char 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1
  6526 ;;      Params:         0       0       0
  6527 ;;      Locals:         0       0       0
  6528 ;;      Temps:          0       0       0
  6529 ;;      Totals:         0       0       0
  6530 ;;Total ram usage:        0 bytes
  6531 ;; Hardware stack levels used: 1
  6532 ;; Hardware stack levels required when called: 3
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		_motor_RFID
  6537 ;;		_motorTerminal
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text15
  6542   001CBC                     __ptext15:
  6543                           	callstack 0
  6544   001CBC                     _getCurrentUserIndex:
  6545                           	callstack 26
  6546                           
  6547                           ;TAD_DATOS.c: 332:     return index;
  6548                           
  6549                           ;incstack = 0
  6550   001CBC  507D               	movf	_index^0,w,c
  6551   001CBE  0012               	return		;funcret
  6552   001CC0                     __end_of_getCurrentUserIndex:
  6553                           	callstack 0
  6554                           
  6555 ;; *************** function _getActualUID *****************
  6556 ;; Defined at:
  6557 ;;		line 50 in file "TAD_DATOS.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6560 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  6561 ;;  userIndex       1    2[COMRAM] unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  i               1    3[COMRAM] unsigned char 
  6564 ;;  i               1    4[COMRAM] unsigned char 
  6565 ;;  i               1    5[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1
  6575 ;;      Params:         2       0       0
  6576 ;;      Locals:         3       0       0
  6577 ;;      Temps:          0       0       0
  6578 ;;      Totals:         5       0       0
  6579 ;;Total ram usage:        5 bytes
  6580 ;; Hardware stack levels used: 1
  6581 ;; Hardware stack levels required when called: 3
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_motor_RFID
  6586 ;;		_motorTerminal
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text16
  6591   0015AA                     __ptext16:
  6592                           	callstack 0
  6593   0015AA                     _getActualUID:
  6594                           	callstack 26
  6595                           
  6596                           ;TAD_DATOS.c: 51:     if(!UID) return;
  6597                           
  6598                           ;incstack = 0
  6599   0015AA  5057               	movf	getActualUID@UID^0,w,c
  6600   0015AC  B4D8               	btfsc	status,2,c
  6601   0015AE  0012               	return	
  6602                           
  6603                           ;TAD_DATOS.c: 52:     if (userIndex == 0xFF) {
  6604   0015B0  2858               	incf	getActualUID@userIndex^0,w,c
  6605   0015B2  A4D8               	btfss	status,2,c
  6606   0015B4  D01E               	goto	l794
  6607                           
  6608                           ;TAD_DATOS.c: 53:         if (currentUser[0]) {
  6609   0015B6  5040               	movf	_currentUser^0,w,c
  6610   0015B8  B4D8               	btfsc	status,2,c
  6611   0015BA  D010               	goto	l795
  6612                           
  6613                           ;TAD_DATOS.c: 54:             for(unsigned char i = 0; i < 5; i++) {
  6614   0015BC  6A5A               	clrf	getActualUID@i^0,c
  6615   0015BE                     l3884:
  6616                           
  6617                           ;TAD_DATOS.c: 55:                 UID[i] = currentUser[i];
  6618   0015BE  505A               	movf	getActualUID@i^0,w,c
  6619   0015C0  0F40               	addlw	low _currentUser
  6620   0015C2  6ED9               	movwf	fsr2l,c
  6621   0015C4  6ADA               	clrf	fsr2h,c
  6622   0015C6  5057               	movf	getActualUID@UID^0,w,c
  6623   0015C8  245A               	addwf	getActualUID@i^0,w,c
  6624   0015CA  6EE1               	movwf	fsr1l,c
  6625   0015CC  6AE2               	clrf	fsr1h,c
  6626   0015CE  CFDF FFE7          	movff	indf2,indf1
  6627                           
  6628                           ;TAD_DATOS.c: 56:             }
  6629   0015D2  2A5A               	incf	getActualUID@i^0,f,c
  6630   0015D4  0E04               	movlw	4
  6631   0015D6  645A               	cpfsgt	getActualUID@i^0,c
  6632   0015D8  D7F2               	goto	l3884
  6633   0015DA  0012               	return	
  6634   0015DC                     l795:
  6635                           
  6636                           ;TAD_DATOS.c: 58:             for(unsigned char i = 0; i < 5; i++) {
  6637   0015DC  6A59               	clrf	getActualUID@i_916^0,c
  6638   0015DE                     l3894:
  6639                           
  6640                           ;TAD_DATOS.c: 59:                 UID[i] = 0x00;
  6641   0015DE  5057               	movf	getActualUID@UID^0,w,c
  6642   0015E0  2459               	addwf	getActualUID@i_916^0,w,c
  6643   0015E2  6ED9               	movwf	fsr2l,c
  6644   0015E4  6ADA               	clrf	fsr2h,c
  6645   0015E6  6ADF               	clrf	indf2,c
  6646                           
  6647                           ;TAD_DATOS.c: 60:             }
  6648   0015E8  2A59               	incf	getActualUID@i_916^0,f,c
  6649   0015EA  0E04               	movlw	4
  6650   0015EC  6459               	cpfsgt	getActualUID@i_916^0,c
  6651   0015EE  D7F7               	goto	l3894
  6652   0015F0  0012               	return	
  6653   0015F2                     l794:
  6654                           
  6655                           ;TAD_DATOS.c: 63:         for(unsigned char i = 0; i < 5; i++) {
  6656   0015F2  6A5B               	clrf	getActualUID@i_917^0,c
  6657   0015F4                     l3904:
  6658                           
  6659                           ;TAD_DATOS.c: 64:             UID[i] = userUIDs[userIndex][i];
  6660   0015F4  5058               	movf	getActualUID@userIndex^0,w,c
  6661   0015F6  0D05               	mullw	5
  6662   0015F8  50F3               	movf	243,w,c
  6663   0015FA  0FC8               	addlw	low _userUIDs
  6664   0015FC  245B               	addwf	getActualUID@i_917^0,w,c
  6665   0015FE  6ED9               	movwf	fsr2l,c
  6666   001600  6ADA               	clrf	fsr2h,c
  6667   001602  5057               	movf	getActualUID@UID^0,w,c
  6668   001604  245B               	addwf	getActualUID@i_917^0,w,c
  6669   001606  6EE1               	movwf	fsr1l,c
  6670   001608  6AE2               	clrf	fsr1h,c
  6671   00160A  CFDF FFE7          	movff	indf2,indf1
  6672                           
  6673                           ;TAD_DATOS.c: 65:         }
  6674   00160E  2A5B               	incf	getActualUID@i_917^0,f,c
  6675   001610  0E04               	movlw	4
  6676   001612  645B               	cpfsgt	getActualUID@i_917^0,c
  6677   001614  D7EF               	goto	l3904
  6678   001616  0012               	return	
  6679   001618                     __end_of_getActualUID:
  6680                           	callstack 0
  6681                           
  6682 ;; *************** function _Terminal_SendChar *****************
  6683 ;; Defined at:
  6684 ;;		line 24 in file "TAD_TERMINAL.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  c               1    wreg     unsigned char 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  c               1    4[COMRAM] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2, status,0, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1
  6698 ;;      Params:         0       0       0
  6699 ;;      Locals:         1       0       0
  6700 ;;      Temps:          0       0       0
  6701 ;;      Totals:         1       0       0
  6702 ;;Total ram usage:        1 bytes
  6703 ;; Hardware stack levels used: 1
  6704 ;; Hardware stack levels required when called: 4
  6705 ;; This function calls:
  6706 ;;		_Terminal_TXAvailable
  6707 ;; This function is called by:
  6708 ;;		_motorTerminal
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text17
  6713   001C22                     __ptext17:
  6714                           	callstack 0
  6715   001C22                     _Terminal_SendChar:
  6716                           	callstack 25
  6717                           
  6718                           ;incstack = 0
  6719                           ;Terminal_SendChar@c stored from wreg
  6720   001C22  6E5A               	movwf	Terminal_SendChar@c^0,c
  6721   001C24                     
  6722                           ;TAD_TERMINAL.c: 25:  while (!Terminal_TXAvailable());
  6723   001C24  EC1B  F00E         	call	_Terminal_TXAvailable	;wreg free
  6724   001C28  5057               	movf	?_Terminal_TXAvailable^0,w,c
  6725   001C2A  1058               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6726   001C2C  B4D8               	btfsc	status,2,c
  6727   001C2E  D7FA               	goto	l4066
  6728                           
  6729                           ;TAD_TERMINAL.c: 26:  TXREG = c;
  6730   001C30  C05A  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  6731   001C34  0012               	return		;funcret
  6732   001C36                     __end_of_Terminal_SendChar:
  6733                           	callstack 0
  6734                           
  6735 ;; *************** function _Terminal_ReceiveChar *****************
  6736 ;; Defined at:
  6737 ;;		line 21 in file "TAD_TERMINAL.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      unsigned char 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1
  6751 ;;      Params:         0       0       0
  6752 ;;      Locals:         0       0       0
  6753 ;;      Temps:          0       0       0
  6754 ;;      Totals:         0       0       0
  6755 ;;Total ram usage:        0 bytes
  6756 ;; Hardware stack levels used: 1
  6757 ;; Hardware stack levels required when called: 3
  6758 ;; This function calls:
  6759 ;;		Nothing
  6760 ;; This function is called by:
  6761 ;;		_motorTerminal
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text18
  6766   001CC0                     __ptext18:
  6767                           	callstack 0
  6768   001CC0                     _Terminal_ReceiveChar:
  6769                           	callstack 26
  6770                           
  6771                           ;incstack = 0
  6772   001CC0  50AE               	movf	174,w,c	;volatile
  6773   001CC2  0012               	return		;funcret
  6774   001CC4                     __end_of_Terminal_ReceiveChar:
  6775                           	callstack 0
  6776                           
  6777 ;; *************** function _Terminal_RXAvailable *****************
  6778 ;; Defined at:
  6779 ;;		line 20 in file "TAD_TERMINAL.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;		None
  6784 ;; Return value:  Size  Location     Type
  6785 ;;                  1    wreg      unsigned char 
  6786 ;; Registers used:
  6787 ;;		wreg
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMRAM   BANK0   BANK1
  6793 ;;      Params:         0       0       0
  6794 ;;      Locals:         0       0       0
  6795 ;;      Temps:          0       0       0
  6796 ;;      Totals:         0       0       0
  6797 ;;Total ram usage:        0 bytes
  6798 ;; Hardware stack levels used: 1
  6799 ;; Hardware stack levels required when called: 3
  6800 ;; This function calls:
  6801 ;;		Nothing
  6802 ;; This function is called by:
  6803 ;;		_motorTerminal
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text19
  6808   001C7C                     __ptext19:
  6809                           	callstack 0
  6810   001C7C                     _Terminal_RXAvailable:
  6811                           	callstack 26
  6812                           
  6813                           ;incstack = 0
  6814   001C7C  AA9E               	btfss	158,5,c	;volatile
  6815   001C7E  D002               	goto	u3410
  6816   001C80  0E01               	movlw	1
  6817   001C82  0012               	return	
  6818   001C84                     u3410:
  6819   001C84  0E00               	movlw	0
  6820   001C86  0012               	return		;funcret
  6821   001C88                     __end_of_Terminal_RXAvailable:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _motorTeclado *****************
  6825 ;; Defined at:
  6826 ;;		line 72 in file "TAD_TECLADO.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1
  6840 ;;      Params:         0       0       0
  6841 ;;      Locals:         0       0       0
  6842 ;;      Temps:          0       0       0
  6843 ;;      Totals:         0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used: 1
  6846 ;; Hardware stack levels required when called: 7
  6847 ;; This function calls:
  6848 ;;		_GetTecla
  6849 ;;		_TI_GetTics
  6850 ;;		_TI_ResetTics
  6851 ;;		_hashtag_pressed3s
  6852 ;;		_motor_StartSendString
  6853 ;;		_resetData
  6854 ;;		_setLed
  6855 ;;		_setStartSendString
  6856 ;;		_writeColumnas
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text20
  6863   000EC4                     __ptext20:
  6864                           	callstack 0
  6865   000EC4                     _motorTeclado:
  6866                           	callstack 23
  6867                           
  6868                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  6869                           
  6870                           ;incstack = 0
  6871   000EC4  5083               	movf	131,w,c	;volatile
  6872   000EC6  0B0F               	andlw	15
  6873   000EC8  6E27               	movwf	_Filas^0,c
  6874                           
  6875                           ;TAD_TECLADO.c: 76:     switch(state) {
  6876   000ECA  D074               	goto	l4326
  6877   000ECC                     l4244:
  6878                           
  6879                           ;TAD_TECLADO.c: 78:             if (Filas) {
  6880   000ECC  5027               	movf	_Filas^0,w,c
  6881   000ECE  B4D8               	btfsc	status,2,c
  6882   000ED0  D006               	goto	l577
  6883                           
  6884                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer_teclado);
  6885   000ED2  504B               	movf	_timer_teclado^0,w,c
  6886   000ED4  ECA5  F00D         	call	_TI_ResetTics
  6887   000ED8                     l4248:
  6888                           
  6889                           ;TAD_TECLADO.c: 80:                 state = 3;
  6890   000ED8  0E03               	movlw	3
  6891   000EDA  6E24               	movwf	_state^0,c
  6892                           
  6893                           ;TAD_TECLADO.c: 81:             } else {
  6894   000EDC  0012               	return	
  6895   000EDE                     l577:
  6896                           
  6897                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  6898   000EDE  6A26               	clrf	_Columnas^0,c
  6899                           
  6900                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  6901   000EE0  ECD5  F00D         	call	_writeColumnas	;wreg free
  6902                           
  6903                           ;TAD_TECLADO.c: 84:                 state = 1;
  6904   000EE4  0E01               	movlw	1
  6905   000EE6  6E24               	movwf	_state^0,c
  6906   000EE8  0012               	return	
  6907   000EEA                     l4254:
  6908                           
  6909                           ;TAD_TECLADO.c: 89:             if (Filas) {
  6910   000EEA  5027               	movf	_Filas^0,w,c
  6911   000EEC  B4D8               	btfsc	status,2,c
  6912   000EEE  D004               	goto	l4260
  6913                           
  6914                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer_teclado);
  6915   000EF0  504B               	movf	_timer_teclado^0,w,c
  6916   000EF2  ECA5  F00D         	call	_TI_ResetTics
  6917   000EF6  D7F0               	goto	l4248
  6918   000EF8                     l4260:
  6919                           
  6920                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  6921   000EF8  0E01               	movlw	1
  6922   000EFA  6E26               	movwf	_Columnas^0,c
  6923                           
  6924                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  6925   000EFC  ECD5  F00D         	call	_writeColumnas	;wreg free
  6926                           
  6927                           ;TAD_TECLADO.c: 95:                 state = 2;
  6928   000F00  0E02               	movlw	2
  6929   000F02  6E24               	movwf	_state^0,c
  6930   000F04  0012               	return	
  6931   000F06                     l4266:
  6932                           
  6933                           ;TAD_TECLADO.c: 100:             if (Filas) {
  6934   000F06  5027               	movf	_Filas^0,w,c
  6935   000F08  B4D8               	btfsc	status,2,c
  6936   000F0A  D004               	goto	l4272
  6937                           
  6938                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer_teclado);
  6939   000F0C  504B               	movf	_timer_teclado^0,w,c
  6940   000F0E  ECA5  F00D         	call	_TI_ResetTics
  6941   000F12  D7E2               	goto	l4248
  6942   000F14                     l4272:
  6943                           
  6944                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6945   000F14  0E02               	movlw	2
  6946   000F16  6E26               	movwf	_Columnas^0,c
  6947                           
  6948                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6949   000F18  ECD5  F00D         	call	_writeColumnas	;wreg free
  6950                           
  6951                           ;TAD_TECLADO.c: 106:                 state = 0;
  6952   000F1C  6A24               	clrf	_state^0,c
  6953   000F1E  0012               	return	
  6954   000F20                     l4278:
  6955                           
  6956                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6957   000F20  ECA6  F00B         	call	_GetTecla	;wreg free
  6958   000F24  6E25               	movwf	_tecla^0,c
  6959                           
  6960                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6961   000F26  5027               	movf	_Filas^0,w,c
  6962   000F28  B4D8               	btfsc	status,2,c
  6963   000F2A  D7F4               	goto	l4272
  6964   000F2C  504B               	movf	_timer_teclado^0,w,c
  6965   000F2E  EC88  F00C         	call	_TI_GetTics
  6966   000F32  505A               	movf	(?_TI_GetTics+3)^0,w,c
  6967   000F34  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  6968   000F36  1058               	iorwf	(?_TI_GetTics+1)^0,w,c
  6969   000F38  E104               	bnz	u3640
  6970   000F3A  0E05               	movlw	5
  6971   000F3C  5C57               	subwf	?_TI_GetTics^0,w,c
  6972   000F3E  A0D8               	btfss	status,0,c
  6973   000F40  0012               	return	
  6974   000F42                     u3640:
  6975                           
  6976                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6977   000F42  0E0B               	movlw	11
  6978   000F44  1825               	xorwf	_tecla^0,w,c
  6979   000F46  B4D8               	btfsc	status,2,c
  6980   000F48  D006               	goto	l4296
  6981                           
  6982                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  6983   000F4A  5025               	movf	_tecla^0,w,c
  6984   000F4C  ECED  F00C         	call	_setLed
  6985                           
  6986                           ;TAD_TECLADO.c: 119:                     state = 5;
  6987   000F50  0E05               	movlw	5
  6988   000F52  6E24               	movwf	_state^0,c
  6989                           
  6990                           ;TAD_TECLADO.c: 120:                 } else {
  6991   000F54  0012               	return	
  6992   000F56                     l4296:
  6993                           
  6994                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer_teclado);
  6995   000F56  504B               	movf	_timer_teclado^0,w,c
  6996   000F58  ECA5  F00D         	call	_TI_ResetTics
  6997                           
  6998                           ;TAD_TECLADO.c: 122:                     state = 4;
  6999   000F5C  0E04               	movlw	4
  7000   000F5E  6E24               	movwf	_state^0,c
  7001   000F60  0012               	return	
  7002   000F62                     l4300:
  7003                           
  7004                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  7005   000F62  5027               	movf	_Filas^0,w,c
  7006   000F64  A4D8               	btfss	status,2,c
  7007   000F66  D004               	goto	l4306
  7008                           
  7009                           ;TAD_TECLADO.c: 129:                 state = 0;
  7010   000F68  6A24               	clrf	_state^0,c
  7011                           
  7012                           ;TAD_TECLADO.c: 130:                 hashtag_pressed3s();
  7013   000F6A  EC5B  F00E         	call	_hashtag_pressed3s	;wreg free
  7014                           
  7015                           ;TAD_TECLADO.c: 131:             } else if (TI_GetTics(timer_teclado) > 1500) {
  7016   000F6E  0012               	return	
  7017   000F70                     l4306:
  7018   000F70  504B               	movf	_timer_teclado^0,w,c
  7019   000F72  EC88  F00C         	call	_TI_GetTics
  7020   000F76  505A               	movf	(?_TI_GetTics+3)^0,w,c
  7021   000F78  1059               	iorwf	(?_TI_GetTics+2)^0,w,c
  7022   000F7A  E106               	bnz	u3670
  7023   000F7C  0EDD               	movlw	221
  7024   000F7E  5C57               	subwf	?_TI_GetTics^0,w,c
  7025   000F80  0E05               	movlw	5
  7026   000F82  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  7027   000F84  A0D8               	btfss	status,0,c
  7028   000F86  0012               	return	
  7029   000F88                     u3670:
  7030                           
  7031                           ;TAD_TECLADO.c: 132:                 state = 5;
  7032   000F88  0E05               	movlw	5
  7033   000F8A  6E24               	movwf	_state^0,c
  7034                           
  7035                           ;TAD_TECLADO.c: 133:                 resetData();
  7036   000F8C  EC54  F00D         	call	_resetData	;wreg free
  7037                           
  7038                           ;TAD_TECLADO.c: 134:                 motor_StartSendString("\r\nS'han resetejat les dade
      +                          s\r\n");
  7039   000F90  0EA0               	movlw	low STR_2
  7040   000F92  6E5B               	movwf	motor_StartSendString@str^0,c
  7041   000F94  0E1F               	movlw	high STR_2
  7042   000F96  6E5C               	movwf	(motor_StartSendString@str+1)^0,c
  7043   000F98  ECE1  F00D         	call	_motor_StartSendString	;wreg free
  7044                           
  7045                           ;TAD_TECLADO.c: 135:                 setStartSendString();
  7046   000F9C  EC58  F00E         	call	_setStartSendString	;wreg free
  7047   000FA0  0012               	return	
  7048   000FA2                     l4316:
  7049                           
  7050                           ;TAD_TECLADO.c: 140:             if (!Filas) {
  7051   000FA2  5027               	movf	_Filas^0,w,c
  7052   000FA4  A4D8               	btfss	status,2,c
  7053   000FA6  0012               	return	
  7054                           
  7055                           ;TAD_TECLADO.c: 141:                 state = 0;
  7056   000FA8  6A24               	clrf	_state^0,c
  7057                           
  7058                           ;TAD_TECLADO.c: 142:                 Columnas = 2;
  7059   000FAA  0E02               	movlw	2
  7060   000FAC  6E26               	movwf	_Columnas^0,c
  7061                           
  7062                           ;TAD_TECLADO.c: 143:                 writeColumnas();
  7063   000FAE  ECD5  F00D         	call	_writeColumnas	;wreg free
  7064   000FB2  0012               	return	
  7065   000FB4                     l4326:
  7066   000FB4  5024               	movf	_state^0,w,c
  7067                           
  7068                           ; Switch size 1, requested type "simple"
  7069                           ; Number of cases is 6, Range of values is 0 to 5
  7070                           ; switch strategies available:
  7071                           ; Name         Instructions Cycles
  7072                           ; simple_byte           19    10 (average)
  7073                           ;	Chosen strategy is simple_byte
  7074   000FB6  0A00               	xorlw	0	; case 0
  7075   000FB8  B4D8               	btfsc	status,2,c
  7076   000FBA  D788               	goto	l4244
  7077   000FBC  0A01               	xorlw	1	; case 1
  7078   000FBE  B4D8               	btfsc	status,2,c
  7079   000FC0  D794               	goto	l4254
  7080   000FC2  0A03               	xorlw	3	; case 2
  7081   000FC4  B4D8               	btfsc	status,2,c
  7082   000FC6  D79F               	goto	l4266
  7083   000FC8  0A01               	xorlw	1	; case 3
  7084   000FCA  B4D8               	btfsc	status,2,c
  7085   000FCC  D7A9               	goto	l4278
  7086   000FCE  0A07               	xorlw	7	; case 4
  7087   000FD0  B4D8               	btfsc	status,2,c
  7088   000FD2  D7C7               	goto	l4300
  7089   000FD4  0A01               	xorlw	1	; case 5
  7090   000FD6  A4D8               	btfss	status,2,c
  7091   000FD8  0012               	return	
  7092   000FDA  D7E3               	goto	l4316
  7093   000FDC                     __end_of_motorTeclado:
  7094                           	callstack 0
  7095                           
  7096 ;; *************** function _writeColumnas *****************
  7097 ;; Defined at:
  7098 ;;		line 43 in file "TAD_TECLADO.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1
  7112 ;;      Params:         0       0       0
  7113 ;;      Locals:         0       0       0
  7114 ;;      Temps:          0       0       0
  7115 ;;      Totals:         0       0       0
  7116 ;;Total ram usage:        0 bytes
  7117 ;; Hardware stack levels used: 1
  7118 ;; Hardware stack levels required when called: 3
  7119 ;; This function calls:
  7120 ;;		Nothing
  7121 ;; This function is called by:
  7122 ;;		_motorTeclado
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text21
  7127   001BAA                     __ptext21:
  7128                           	callstack 0
  7129   001BAA                     _writeColumnas:
  7130                           	callstack 26
  7131                           
  7132                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  7133                           
  7134                           ;incstack = 0
  7135   001BAA  0E03               	movlw	3
  7136   001BAC  6026               	cpfslt	_Columnas^0,c
  7137   001BAE  D007               	goto	l560
  7138                           
  7139                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  7140   001BB0  5026               	movf	_Columnas^0,w,c
  7141   001BB2  0FE2               	addlw	low _colValues
  7142   001BB4  6ED9               	movwf	fsr2l,c
  7143   001BB6  6ADA               	clrf	fsr2h,c
  7144   001BB8  50DF               	movf	indf2,w,c
  7145   001BBA  6E8C               	movwf	140,c	;volatile
  7146                           
  7147                           ;TAD_TECLADO.c: 46:     } else {
  7148   001BBC  0012               	return	
  7149   001BBE                     l560:
  7150                           
  7151                           ;TAD_TECLADO.c: 47:         LATD = 0;
  7152   001BBE  6A8C               	clrf	140,c	;volatile
  7153   001BC0  0012               	return		;funcret
  7154   001BC2                     __end_of_writeColumnas:
  7155                           	callstack 0
  7156                           
  7157 ;; *************** function _setStartSendString *****************
  7158 ;; Defined at:
  7159 ;;		line 139 in file "TAD_TERMINAL.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;		None
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;		None
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1
  7173 ;;      Params:         0       0       0
  7174 ;;      Locals:         0       0       0
  7175 ;;      Temps:          0       0       0
  7176 ;;      Totals:         0       0       0
  7177 ;;Total ram usage:        0 bytes
  7178 ;; Hardware stack levels used: 1
  7179 ;; Hardware stack levels required when called: 3
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_motor_RFID
  7184 ;;		_motorTeclado
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text22
  7189   001CB0                     __ptext22:
  7190                           	callstack 0
  7191   001CB0                     _setStartSendString:
  7192                           	callstack 26
  7193                           
  7194                           ;TAD_TERMINAL.c: 140:  sending_string = 1;
  7195                           
  7196                           ;incstack = 0
  7197   001CB0  0E01               	movlw	1
  7198   001CB2  6E21               	movwf	_sending_string^0,c
  7199   001CB4  0012               	return		;funcret
  7200   001CB6                     __end_of_setStartSendString:
  7201                           	callstack 0
  7202                           
  7203 ;; *************** function _setLed *****************
  7204 ;; Defined at:
  7205 ;;		line 311 in file "TAD_DATOS.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  tecla           1    wreg     unsigned char 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  tecla           1    4[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1
  7219 ;;      Params:         0       0       0
  7220 ;;      Locals:         1       0       0
  7221 ;;      Temps:          0       0       0
  7222 ;;      Totals:         1       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used: 1
  7225 ;; Hardware stack levels required when called: 4
  7226 ;; This function calls:
  7227 ;;		_setLEDIntensity
  7228 ;; This function is called by:
  7229 ;;		_motorTeclado
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text23
  7234   0019DA                     __ptext23:
  7235                           	callstack 0
  7236   0019DA                     _setLed:
  7237                           	callstack 25
  7238                           
  7239                           ;incstack = 0
  7240                           ;setLed@tecla stored from wreg
  7241   0019DA  6E5A               	movwf	setLed@tecla^0,c
  7242                           
  7243                           ;TAD_DATOS.c: 312:     static char modeLED = 0;;TAD_DATOS.c: 313:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 316:     if (index == 4) return;
  7244   0019DC  0E04               	movlw	4
  7245   0019DE  187D               	xorwf	_index^0,w,c
  7246   0019E0  B4D8               	btfsc	status,2,c
  7247   0019E2  0012               	return	
  7248                           
  7249                           ;TAD_DATOS.c: 318:     if(!modeLED) {
  7250   0019E4  5016               	movf	setLed@modeLED^0,w,c
  7251   0019E6  A4D8               	btfss	status,2,c
  7252   0019E8  D005               	goto	l4028
  7253                           
  7254                           ;TAD_DATOS.c: 319:         ledIndex = tecla - 1;
  7255   0019EA  045A               	decf	setLed@tecla^0,w,c
  7256   0019EC  6E15               	movwf	setLed@ledIndex^0,c
  7257                           
  7258                           ;TAD_DATOS.c: 320:         modeLED = 1;
  7259   0019EE  0E01               	movlw	1
  7260   0019F0  6E16               	movwf	setLed@modeLED^0,c
  7261                           
  7262                           ;TAD_DATOS.c: 321:     } else {
  7263   0019F2  0012               	return	
  7264   0019F4                     l4028:
  7265                           
  7266                           ;TAD_DATOS.c: 322:         if (index < 4) {
  7267   0019F4  0E04               	movlw	4
  7268   0019F6  607D               	cpfslt	_index^0,c
  7269   0019F8  D009               	goto	l4034
  7270                           
  7271                           ;TAD_DATOS.c: 323:             setLEDIntensity(index, ledIndex, tecla);
  7272   0019FA  C015  F057         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  7273   0019FE  C05A  F058         	movff	setLed@tecla,setLEDIntensity@intensity
  7274   001A02  507D               	movf	_index^0,w,c
  7275   001A04  EC7E  F00D         	call	_setLEDIntensity
  7276                           
  7277                           ;TAD_DATOS.c: 324:             new_configuration = 1;
  7278   001A08  0E01               	movlw	1
  7279   001A0A  6E1D               	movwf	_new_configuration^0,c
  7280   001A0C                     l4034:
  7281                           
  7282                           ;TAD_DATOS.c: 326:         modeLED = 0;
  7283   001A0C  6A16               	clrf	setLed@modeLED^0,c
  7284   001A0E  0012               	return		;funcret
  7285   001A10                     __end_of_setLed:
  7286                           	callstack 0
  7287                           
  7288 ;; *************** function _setLEDIntensity *****************
  7289 ;; Defined at:
  7290 ;;		line 304 in file "TAD_DATOS.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  userIndex       1    wreg     unsigned char 
  7293 ;;  ledIndex        1    1[COMRAM] unsigned char 
  7294 ;;  intensity       1    2[COMRAM] unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  userIndex       1    3[COMRAM] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1
  7306 ;;      Params:         2       0       0
  7307 ;;      Locals:         1       0       0
  7308 ;;      Temps:          0       0       0
  7309 ;;      Totals:         3       0       0
  7310 ;;Total ram usage:        3 bytes
  7311 ;; Hardware stack levels used: 1
  7312 ;; Hardware stack levels required when called: 3
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_setLed
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text24
  7321   001AFC                     __ptext24:
  7322                           	callstack 0
  7323   001AFC                     _setLEDIntensity:
  7324                           	callstack 25
  7325                           
  7326                           ;incstack = 0
  7327                           ;setLEDIntensity@userIndex stored from wreg
  7328   001AFC  6E59               	movwf	setLEDIntensity@userIndex^0,c
  7329                           
  7330                           ;TAD_DATOS.c: 305:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  7331   001AFE  0E04               	movlw	4
  7332   001B00  6059               	cpfslt	setLEDIntensity@userIndex^0,c
  7333   001B02  0012               	return	
  7334   001B04  0E06               	movlw	6
  7335   001B06  6057               	cpfslt	setLEDIntensity@ledIndex^0,c
  7336   001B08  0012               	return	
  7337   001B0A  0E0B               	movlw	11
  7338   001B0C  6058               	cpfslt	setLEDIntensity@intensity^0,c
  7339   001B0E  0012               	return	
  7340                           
  7341                           ;TAD_DATOS.c: 306:         configurations[userIndex][ledIndex] = intensity;
  7342   001B10  5059               	movf	setLEDIntensity@userIndex^0,w,c
  7343   001B12  0D06               	mullw	6
  7344   001B14  50F3               	movf	243,w,c
  7345   001B16  0F80               	addlw	low _configurations
  7346   001B18  2457               	addwf	setLEDIntensity@ledIndex^0,w,c
  7347   001B1A  6ED9               	movwf	fsr2l,c
  7348   001B1C  6ADA               	clrf	fsr2h,c
  7349   001B1E  C058  FFDF         	movff	setLEDIntensity@intensity,indf2
  7350   001B22  0012               	return		;funcret
  7351   001B24                     __end_of_setLEDIntensity:
  7352                           	callstack 0
  7353                           
  7354 ;; *************** function _resetData *****************
  7355 ;; Defined at:
  7356 ;;		line 41 in file "TAD_DATOS.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;  j               1    2[COMRAM] unsigned char 
  7361 ;;  i               1    1[COMRAM] unsigned char 
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1
  7371 ;;      Params:         0       0       0
  7372 ;;      Locals:         2       0       0
  7373 ;;      Temps:          0       0       0
  7374 ;;      Totals:         2       0       0
  7375 ;;Total ram usage:        2 bytes
  7376 ;; Hardware stack levels used: 1
  7377 ;; Hardware stack levels required when called: 3
  7378 ;; This function calls:
  7379 ;;		Nothing
  7380 ;; This function is called by:
  7381 ;;		_motorTeclado
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           	psect	text25
  7386   001AA8                     __ptext25:
  7387                           	callstack 0
  7388   001AA8                     _resetData:
  7389                           	callstack 26
  7390                           
  7391                           ;TAD_DATOS.c: 42:     for (unsigned char i = 0; i < 4; i++) {
  7392                           
  7393                           ;incstack = 0
  7394   001AA8  6A57               	clrf	resetData@i^0,c
  7395   001AAA                     l785:
  7396                           
  7397                           ;TAD_DATOS.c: 43:         for (unsigned char j = 0; j < 6; j++) {
  7398   001AAA  6A58               	clrf	resetData@j^0,c
  7399   001AAC                     l4046:
  7400                           
  7401                           ;TAD_DATOS.c: 44:             configurations[i][j] = 0;
  7402   001AAC  5057               	movf	resetData@i^0,w,c
  7403   001AAE  0D06               	mullw	6
  7404   001AB0  50F3               	movf	243,w,c
  7405   001AB2  0F80               	addlw	low _configurations
  7406   001AB4  2458               	addwf	resetData@j^0,w,c
  7407   001AB6  6ED9               	movwf	fsr2l,c
  7408   001AB8  6ADA               	clrf	fsr2h,c
  7409   001ABA  6ADF               	clrf	indf2,c
  7410                           
  7411                           ;TAD_DATOS.c: 45:         }
  7412   001ABC  2A58               	incf	resetData@j^0,f,c
  7413   001ABE  0E05               	movlw	5
  7414   001AC0  6458               	cpfsgt	resetData@j^0,c
  7415   001AC2  D7F4               	goto	l4046
  7416                           
  7417                           ;TAD_DATOS.c: 46:     }
  7418   001AC4  2A57               	incf	resetData@i^0,f,c
  7419   001AC6  0E03               	movlw	3
  7420   001AC8  6457               	cpfsgt	resetData@i^0,c
  7421   001ACA  D7EF               	goto	l785
  7422                           
  7423                           ;TAD_DATOS.c: 47:     new_configuration = 1;
  7424   001ACC  0E01               	movlw	1
  7425   001ACE  6E1D               	movwf	_new_configuration^0,c
  7426   001AD0  0012               	return		;funcret
  7427   001AD2                     __end_of_resetData:
  7428                           	callstack 0
  7429                           
  7430 ;; *************** function _motor_StartSendString *****************
  7431 ;; Defined at:
  7432 ;;		line 50 in file "TAD_TERMINAL.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  str             2    5[COMRAM] PTR const unsigned char 
  7435 ;;		 -> STR_16(33), STR_15(33), STR_14(3), STR_12(18), 
  7436 ;;		 -> STR_11(3), STR_10(33), STR_8(33), STR_7(3), 
  7437 ;;		 -> STR_6(95), STR_5(53), STR_4(18), STR_3(30), 
  7438 ;;		 -> printfUID@buffer(80), STR_2(30), STR_1(34), 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1
  7450 ;;      Params:         2       0       0
  7451 ;;      Locals:         0       0       0
  7452 ;;      Temps:          0       0       0
  7453 ;;      Totals:         2       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used: 1
  7456 ;; Hardware stack levels required when called: 6
  7457 ;; This function calls:
  7458 ;;		_motor_SendString
  7459 ;; This function is called by:
  7460 ;;		_motor_RFID
  7461 ;;		_motorTeclado
  7462 ;;		_printfUID
  7463 ;;		_motorTerminal
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	text26
  7468   001BC2                     __ptext26:
  7469                           	callstack 0
  7470   001BC2                     _motor_StartSendString:
  7471                           	callstack 21
  7472                           
  7473                           ;TAD_TERMINAL.c: 51:  if (motor_SendString() == 1) {
  7474                           
  7475                           ;incstack = 0
  7476   001BC2  EC9C  F00A         	call	_motor_SendString	;wreg free
  7477   001BC6  06E8               	decf	wreg,f,c
  7478   001BC8  A4D8               	btfss	status,2,c
  7479   001BCA  0012               	return	
  7480                           
  7481                           ;TAD_TERMINAL.c: 52:   str_ptr = str;
  7482   001BCC  C05B  F00F         	movff	motor_StartSendString@str,_str_ptr
  7483   001BD0  C05C  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  7484                           
  7485                           ;TAD_TERMINAL.c: 53:   state_str = 1;
  7486   001BD4  0E01               	movlw	1
  7487   001BD6  6E23               	movwf	_state_str^0,c
  7488   001BD8  0012               	return		;funcret
  7489   001BDA                     __end_of_motor_StartSendString:
  7490                           	callstack 0
  7491                           
  7492 ;; *************** function _motor_SendString *****************
  7493 ;; Defined at:
  7494 ;;		line 36 in file "TAD_TERMINAL.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;		None
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      unsigned char 
  7501 ;; Registers used:
  7502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1
  7508 ;;      Params:         0       0       0
  7509 ;;      Locals:         0       0       0
  7510 ;;      Temps:          0       0       0
  7511 ;;      Totals:         0       0       0
  7512 ;;Total ram usage:        0 bytes
  7513 ;; Hardware stack levels used: 1
  7514 ;; Hardware stack levels required when called: 5
  7515 ;; This function calls:
  7516 ;;		_motor_SendChar
  7517 ;; This function is called by:
  7518 ;;		_motor_StartSendString
  7519 ;;		_motorTerminal
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text27
  7524   001538                     __ptext27:
  7525                           	callstack 0
  7526   001538                     _motor_SendString:
  7527                           	callstack 21
  7528                           
  7529                           ;TAD_TERMINAL.c: 37:     switch(state_str) {
  7530                           
  7531                           ;incstack = 0
  7532   001538  D030               	goto	l3414
  7533   00153A                     l3392:
  7534   00153A  0E01               	movlw	1
  7535   00153C  0012               	return	
  7536   00153E                     l3396:
  7537                           
  7538                           ;TAD_TERMINAL.c: 40:    if (!*str_ptr) {
  7539   00153E  C00F  FFF6         	movff	_str_ptr,tblptrl
  7540   001542  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7541   001546  6AF8               	clrf	tblptru,c
  7542   001548  0E01               	movlw	(high __ramtop+-1)
  7543   00154A  64F7               	cpfsgt	tblptrh,c
  7544   00154C  D003               	bra	u2547
  7545   00154E  0008               	tblrd		*
  7546   001550  50F5               	movf	tablat,w,c
  7547   001552  D005               	bra	u2540
  7548   001554                     u2547:
  7549   001554  CFF6 FFE1          	movff	tblptrl,fsr1l
  7550   001558  CFF7 FFE2          	movff	tblptrh,fsr1h
  7551   00155C  50E7               	movf	indf1,w,c
  7552   00155E                     u2540:
  7553   00155E  0900               	iorlw	0
  7554   001560  A4D8               	btfss	status,2,c
  7555   001562  D002               	goto	l3404
  7556                           
  7557                           ;TAD_TERMINAL.c: 41:     state_str = 0;
  7558   001564  6A23               	clrf	_state_str^0,c
  7559   001566  D7E9               	goto	l3392
  7560   001568                     l3404:
  7561                           
  7562                           ;TAD_TERMINAL.c: 44:    if (motor_SendChar(*str_ptr)) str_ptr++;
  7563   001568  C00F  FFF6         	movff	_str_ptr,tblptrl
  7564   00156C  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7565   001570  6AF8               	clrf	tblptru,c
  7566   001572  0E01               	movlw	(high __ramtop+-1)
  7567   001574  64F7               	cpfsgt	tblptrh,c
  7568   001576  D003               	bra	u2567
  7569   001578  0008               	tblrd		*
  7570   00157A  50F5               	movf	tablat,w,c
  7571   00157C  D005               	bra	u2560
  7572   00157E                     u2567:
  7573   00157E  CFF6 FFE1          	movff	tblptrl,fsr1l
  7574   001582  CFF7 FFE2          	movff	tblptrh,fsr1h
  7575   001586  50E7               	movf	indf1,w,c
  7576   001588                     u2560:
  7577   001588  ECC8  F00D         	call	_motor_SendChar
  7578   00158C  0900               	iorlw	0
  7579   00158E  B4D8               	btfsc	status,2,c
  7580   001590  D002               	goto	l3408
  7581   001592  4A0F               	infsnz	_str_ptr^0,f,c
  7582   001594  2A10               	incf	(_str_ptr+1)^0,f,c
  7583   001596                     l3408:
  7584                           
  7585                           ;TAD_TERMINAL.c: 45:    return 0;
  7586   001596  0E00               	movlw	0
  7587   001598  0012               	return	
  7588   00159A                     l3414:
  7589   00159A  5023               	movf	_state_str^0,w,c
  7590                           
  7591                           ; Switch size 1, requested type "simple"
  7592                           ; Number of cases is 2, Range of values is 0 to 1
  7593                           ; switch strategies available:
  7594                           ; Name         Instructions Cycles
  7595                           ; simple_byte            7     4 (average)
  7596                           ;	Chosen strategy is simple_byte
  7597   00159C  0A00               	xorlw	0	; case 0
  7598   00159E  B4D8               	btfsc	status,2,c
  7599   0015A0  D7CC               	goto	l3392
  7600   0015A2  0A01               	xorlw	1	; case 1
  7601   0015A4  B4D8               	btfsc	status,2,c
  7602   0015A6  D7CB               	goto	l3396
  7603   0015A8  D7F6               	goto	l3408
  7604   0015AA                     __end_of_motor_SendString:
  7605                           	callstack 0
  7606                           
  7607 ;; *************** function _motor_SendChar *****************
  7608 ;; Defined at:
  7609 ;;		line 29 in file "TAD_TERMINAL.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  c               1    wreg     unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  c               1    4[COMRAM] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  1    wreg      unsigned char 
  7616 ;; Registers used:
  7617 ;;		wreg, status,2, status,0, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1
  7623 ;;      Params:         0       0       0
  7624 ;;      Locals:         1       0       0
  7625 ;;      Temps:          0       0       0
  7626 ;;      Totals:         1       0       0
  7627 ;;Total ram usage:        1 bytes
  7628 ;; Hardware stack levels used: 1
  7629 ;; Hardware stack levels required when called: 4
  7630 ;; This function calls:
  7631 ;;		_Terminal_TXAvailable
  7632 ;; This function is called by:
  7633 ;;		_motor_SendString
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           	psect	text28
  7638   001B90                     __ptext28:
  7639                           	callstack 0
  7640   001B90                     _motor_SendChar:
  7641                           	callstack 21
  7642                           
  7643                           ;incstack = 0
  7644                           ;motor_SendChar@c stored from wreg
  7645   001B90  6E5A               	movwf	motor_SendChar@c^0,c
  7646                           
  7647                           ;TAD_TERMINAL.c: 30:  if (!Terminal_TXAvailable()) return 0;
  7648   001B92  EC1B  F00E         	call	_Terminal_TXAvailable	;wreg free
  7649   001B96  5057               	movf	?_Terminal_TXAvailable^0,w,c
  7650   001B98  1058               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  7651   001B9A  A4D8               	btfss	status,2,c
  7652   001B9C  D002               	goto	l651
  7653   001B9E  0E00               	movlw	0
  7654   001BA0  0012               	return	
  7655   001BA2                     l651:
  7656                           
  7657                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  7658   001BA2  C05A  FFAD         	movff	motor_SendChar@c,4013	;volatile
  7659                           
  7660                           ;TAD_TERMINAL.c: 32:  return 1;
  7661   001BA6  0E01               	movlw	1
  7662   001BA8  0012               	return		;funcret
  7663   001BAA                     __end_of_motor_SendChar:
  7664                           	callstack 0
  7665                           
  7666 ;; *************** function _Terminal_TXAvailable *****************
  7667 ;; Defined at:
  7668 ;;		line 19 in file "TAD_TERMINAL.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  2    1[COMRAM] int 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1
  7682 ;;      Params:         2       0       0
  7683 ;;      Locals:         0       0       0
  7684 ;;      Temps:          1       0       0
  7685 ;;      Totals:         3       0       0
  7686 ;;Total ram usage:        3 bytes
  7687 ;; Hardware stack levels used: 1
  7688 ;; Hardware stack levels required when called: 3
  7689 ;; This function calls:
  7690 ;;		Nothing
  7691 ;; This function is called by:
  7692 ;;		_Terminal_SendChar
  7693 ;;		_motor_SendChar
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text29
  7698   001C36                     __ptext29:
  7699                           	callstack 0
  7700   001C36                     _Terminal_TXAvailable:
  7701                           	callstack 21
  7702                           
  7703                           ;incstack = 0
  7704   001C36  A89E               	btfss	158,4,c	;volatile
  7705   001C38  D003               	goto	u2350
  7706   001C3A  6A59               	clrf	??_Terminal_TXAvailable^0,c
  7707   001C3C  2A59               	incf	??_Terminal_TXAvailable^0,f,c
  7708   001C3E  D001               	goto	u2358
  7709   001C40                     u2350:
  7710   001C40  6A59               	clrf	??_Terminal_TXAvailable^0,c
  7711   001C42                     u2358:
  7712   001C42  5059               	movf	??_Terminal_TXAvailable^0,w,c
  7713   001C44  6E57               	movwf	?_Terminal_TXAvailable^0,c
  7714   001C46  6A58               	clrf	(?_Terminal_TXAvailable+1)^0,c
  7715   001C48  0012               	return		;funcret
  7716   001C4A                     __end_of_Terminal_TXAvailable:
  7717                           	callstack 0
  7718                           
  7719 ;; *************** function _hashtag_pressed3s *****************
  7720 ;; Defined at:
  7721 ;;		line 57 in file "TAD_TERMINAL.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1
  7735 ;;      Params:         0       0       0
  7736 ;;      Locals:         0       0       0
  7737 ;;      Temps:          0       0       0
  7738 ;;      Totals:         0       0       0
  7739 ;;Total ram usage:        0 bytes
  7740 ;; Hardware stack levels used: 1
  7741 ;; Hardware stack levels required when called: 3
  7742 ;; This function calls:
  7743 ;;		Nothing
  7744 ;; This function is called by:
  7745 ;;		_motorTeclado
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text30
  7750   001CB6                     __ptext30:
  7751                           	callstack 0
  7752   001CB6                     _hashtag_pressed3s:
  7753                           	callstack 26
  7754                           
  7755                           ;incstack = 0
  7756   001CB6  0E01               	movlw	1
  7757   001CB8  6E22               	movwf	_hashtag_pressed^0,c
  7758   001CBA  0012               	return		;funcret
  7759   001CBC                     __end_of_hashtag_pressed3s:
  7760                           	callstack 0
  7761                           
  7762 ;; *************** function _GetTecla *****************
  7763 ;; Defined at:
  7764 ;;		line 52 in file "TAD_TECLADO.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  fila            1    4[COMRAM] unsigned char 
  7769 ;;  columna         1    3[COMRAM] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      unsigned char 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1
  7779 ;;      Params:         0       0       0
  7780 ;;      Locals:         2       0       0
  7781 ;;      Temps:          2       0       0
  7782 ;;      Totals:         4       0       0
  7783 ;;Total ram usage:        4 bytes
  7784 ;; Hardware stack levels used: 1
  7785 ;; Hardware stack levels required when called: 3
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_motorTeclado
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           	psect	text31
  7794   00174C                     __ptext31:
  7795                           	callstack 0
  7796   00174C                     _GetTecla:
  7797                           	callstack 26
  7798                           
  7799                           ;incstack = 0
  7800   00174C  6A59               	clrf	GetTecla@columna^0,c
  7801                           
  7802                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  7803   00174E  D00B               	goto	l2320
  7804   001750                     l566:
  7805   001750  6A5A               	clrf	GetTecla@fila^0,c
  7806   001752  D017               	goto	l567
  7807   001754                     l2308:
  7808   001754  0E01               	movlw	1
  7809   001756  D003               	goto	L15
  7810   001758                     l2310:
  7811   001758  0E02               	movlw	2
  7812   00175A  D001               	goto	L15
  7813   00175C                     l2312:
  7814   00175C  0E03               	movlw	3
  7815   00175E                     L15:
  7816   00175E  6E5A               	movwf	GetTecla@fila^0,c
  7817   001760  D010               	goto	l567
  7818   001762                     l2314:
  7819   001762  0EFF               	movlw	255
  7820   001764  0012               	return	
  7821   001766                     l2320:
  7822   001766  5027               	movf	_Filas^0,w,c
  7823                           
  7824                           ; Switch size 1, requested type "simple"
  7825                           ; Number of cases is 4, Range of values is 1 to 8
  7826                           ; switch strategies available:
  7827                           ; Name         Instructions Cycles
  7828                           ; simple_byte           13     7 (average)
  7829                           ;	Chosen strategy is simple_byte
  7830   001768  0A01               	xorlw	1	; case 1
  7831   00176A  B4D8               	btfsc	status,2,c
  7832   00176C  D7F1               	goto	l566
  7833   00176E  0A03               	xorlw	3	; case 2
  7834   001770  B4D8               	btfsc	status,2,c
  7835   001772  D7F0               	goto	l2308
  7836   001774  0A06               	xorlw	6	; case 4
  7837   001776  B4D8               	btfsc	status,2,c
  7838   001778  D7EF               	goto	l2310
  7839   00177A  0A0C               	xorlw	12	; case 8
  7840   00177C  B4D8               	btfsc	status,2,c
  7841   00177E  D7EE               	goto	l2312
  7842   001780  D7F0               	goto	l2314
  7843   001782                     l567:
  7844                           
  7845                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  7846   001782  C026  F059         	movff	_Columnas,GetTecla@columna
  7847                           
  7848                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  7849   001786  505A               	movf	GetTecla@fila^0,w,c
  7850   001788  0D03               	mullw	3
  7851   00178A  0E3C               	movlw	low _keymap
  7852   00178C  24F3               	addwf	243,w,c
  7853   00178E  6E57               	movwf	??_GetTecla^0,c
  7854   001790  0E1E               	movlw	high _keymap
  7855   001792  20F4               	addwfc	prodh,w,c
  7856   001794  6E58               	movwf	(??_GetTecla+1)^0,c
  7857   001796  5059               	movf	GetTecla@columna^0,w,c
  7858   001798  2657               	addwf	??_GetTecla^0,f,c
  7859   00179A  0E00               	movlw	0
  7860   00179C  2258               	addwfc	(??_GetTecla+1)^0,f,c
  7861   00179E  C057  FFF6         	movff	??_GetTecla,tblptrl
  7862   0017A2  C058  FFF7         	movff	??_GetTecla+1,tblptrh
  7863   0017A6                     	if	0	;tblptru may be non-zero
  7864   0017A6                     	endif
  7865   0017A6                     	if	0	;tblptru may be non-zero
  7866   0017A6                     	endif
  7867   0017A6  0008               	tblrd		*
  7868   0017A8  50F5               	movf	tablat,w,c
  7869   0017AA  0012               	return		;funcret
  7870   0017AC                     __end_of_GetTecla:
  7871                           	callstack 0
  7872                           
  7873 ;; *************** function _initTeclado *****************
  7874 ;; Defined at:
  7875 ;;		line 30 in file "TAD_TECLADO.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;		None
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;		None
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  1    wreg      void 
  7882 ;; Registers used:
  7883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMRAM   BANK0   BANK1
  7889 ;;      Params:         0       0       0
  7890 ;;      Locals:         0       0       0
  7891 ;;      Temps:          0       0       0
  7892 ;;      Totals:         0       0       0
  7893 ;;Total ram usage:        0 bytes
  7894 ;; Hardware stack levels used: 1
  7895 ;; Hardware stack levels required when called: 4
  7896 ;; This function calls:
  7897 ;;		_TI_NewTimer
  7898 ;; This function is called by:
  7899 ;;		_main
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           	psect	text32
  7904   001BDA                     __ptext32:
  7905                           	callstack 0
  7906   001BDA                     _initTeclado:
  7907                           	callstack 26
  7908                           
  7909                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  7910                           
  7911                           ;incstack = 0
  7912   001BDA  0E0F               	movlw	15
  7913   001BDC  6E95               	movwf	149,c	;volatile
  7914                           
  7915                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  7916   001BDE  6A8C               	clrf	140,c	;volatile
  7917                           
  7918                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  7919   001BE0  6A24               	clrf	_state^0,c
  7920   001BE2  6A25               	clrf	_tecla^0,c
  7921   001BE4  6A26               	clrf	_Columnas^0,c
  7922   001BE6  6A27               	clrf	_Filas^0,c
  7923                           
  7924                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer_teclado);
  7925   001BE8  0E4B               	movlw	low _timer_teclado
  7926   001BEA  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  7927   001BEC  ECCF  F00C         	call	_TI_NewTimer	;wreg free
  7928   001BF0  0012               	return		;funcret
  7929   001BF2                     __end_of_initTeclado:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function _initRFID *****************
  7933 ;; Defined at:
  7934 ;;		line 127 in file "TAD_RFID.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  regVal          1   12[COMRAM] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1
  7948 ;;      Params:         0       0       0
  7949 ;;      Locals:         1       0       0
  7950 ;;      Temps:          0       0       0
  7951 ;;      Totals:         1       0       0
  7952 ;;Total ram usage:        1 bytes
  7953 ;; Hardware stack levels used: 1
  7954 ;; Hardware stack levels required when called: 6
  7955 ;; This function calls:
  7956 ;;		_TI_NewTimer
  7957 ;;		_TI_ResetTics
  7958 ;;		_delay_us
  7959 ;;		_motor_Read
  7960 ;;		_motor_Write
  7961 ;; This function is called by:
  7962 ;;		_main
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text33
  7967   00119E                     __ptext33:
  7968                           	callstack 0
  7969   00119E                     _initRFID:
  7970                           	callstack 24
  7971                           
  7972                           ;TAD_RFID.c: 129:     TRISCbits.TRISC0 = 1;
  7973                           
  7974                           ;incstack = 0
  7975   00119E  8094               	bsf	148,0,c	;volatile
  7976                           
  7977                           ;TAD_RFID.c: 130:     TRISCbits.TRISC1 = 0;
  7978   0011A0  9294               	bcf	148,1,c	;volatile
  7979                           
  7980                           ;TAD_RFID.c: 131:     TRISCbits.TRISC2 = 0;
  7981   0011A2  9494               	bcf	148,2,c	;volatile
  7982                           
  7983                           ;TAD_RFID.c: 132:     TRISCbits.TRISC3 = 0;
  7984   0011A4  9694               	bcf	148,3,c	;volatile
  7985                           
  7986                           ;TAD_RFID.c: 133:     TRISCbits.TRISC4 = 0;
  7987   0011A6  9894               	bcf	148,4,c	;volatile
  7988                           
  7989                           ;TAD_RFID.c: 135:     state_read = state_write = 0;
  7990   0011A8  6A52               	clrf	_state_write^0,c
  7991   0011AA  6A53               	clrf	_state_read^0,c
  7992                           
  7993                           ;TAD_RFID.c: 136:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7994   0011AC  848B               	bsf	139,2,c	;volatile
  7995   0011AE  868B               	bsf	139,3,c	;volatile
  7996                           
  7997                           ;TAD_RFID.c: 137:     LATCbits.LATC4 = 1;
  7998   0011B0  888B               	bsf	139,4,c	;volatile
  7999                           
  8000                           ;TAD_RFID.c: 138:     delay_us(1);
  8001   0011B2  0E01               	movlw	1
  8002   0011B4  ECF9  F00D         	call	_delay_us
  8003                           
  8004                           ;TAD_RFID.c: 139:     LATCbits.LATC4 = 0;
  8005   0011B8  988B               	bcf	139,4,c	;volatile
  8006                           
  8007                           ;TAD_RFID.c: 140:     delay_us(1);
  8008   0011BA  0E01               	movlw	1
  8009   0011BC  ECF9  F00D         	call	_delay_us
  8010                           
  8011                           ;TAD_RFID.c: 141:     LATCbits.LATC4 = 1;
  8012   0011C0  888B               	bsf	139,4,c	;volatile
  8013                           
  8014                           ;TAD_RFID.c: 142:     delay_us(1);
  8015   0011C2  0E01               	movlw	1
  8016   0011C4  ECF9  F00D         	call	_delay_us
  8017   0011C8                     l4118:
  8018   0011C8  0E0F               	movlw	15
  8019   0011CA  6E5E               	movwf	motor_Write@value^0,c
  8020   0011CC  0E01               	movlw	1
  8021   0011CE  EC0C  F00B         	call	_motor_Write
  8022   0011D2  0900               	iorlw	0
  8023   0011D4  B4D8               	btfsc	status,2,c
  8024   0011D6  D7F8               	goto	l4118
  8025                           
  8026                           ;TAD_RFID.c: 146:     delay_us(1);
  8027   0011D8  0E01               	movlw	1
  8028   0011DA  ECF9  F00D         	call	_delay_us
  8029   0011DE                     l4122:
  8030   0011DE  0E8D               	movlw	141
  8031   0011E0  6E5E               	movwf	motor_Write@value^0,c
  8032   0011E2  0E2A               	movlw	42
  8033   0011E4  EC0C  F00B         	call	_motor_Write
  8034   0011E8  0900               	iorlw	0
  8035   0011EA  B4D8               	btfsc	status,2,c
  8036   0011EC  D7F8               	goto	l4122
  8037   0011EE                     u3470:
  8038   0011EE  0E3E               	movlw	62
  8039   0011F0  6E5E               	movwf	motor_Write@value^0,c
  8040   0011F2  0E2B               	movlw	43
  8041   0011F4  EC0C  F00B         	call	_motor_Write
  8042   0011F8  0900               	iorlw	0
  8043   0011FA  B4D8               	btfsc	status,2,c
  8044   0011FC  D7F8               	goto	u3470
  8045   0011FE                     u3480:
  8046   0011FE  0E1E               	movlw	30
  8047   001200  6E5E               	movwf	motor_Write@value^0,c
  8048   001202  0E2D               	movlw	45
  8049   001204  EC0C  F00B         	call	_motor_Write
  8050   001208  0900               	iorlw	0
  8051   00120A  B4D8               	btfsc	status,2,c
  8052   00120C  D7F8               	goto	u3480
  8053   00120E                     u3490:
  8054   00120E  0E00               	movlw	0
  8055   001210  6E5E               	movwf	motor_Write@value^0,c
  8056   001212  0E2C               	movlw	44
  8057   001214  EC0C  F00B         	call	_motor_Write
  8058   001218  0900               	iorlw	0
  8059   00121A  B4D8               	btfsc	status,2,c
  8060   00121C  D7F8               	goto	u3490
  8061   00121E                     u3500:
  8062   00121E  0E40               	movlw	64
  8063   001220  6E5E               	movwf	motor_Write@value^0,c
  8064   001222  0E15               	movlw	21
  8065   001224  EC0C  F00B         	call	_motor_Write
  8066   001228  0900               	iorlw	0
  8067   00122A  B4D8               	btfsc	status,2,c
  8068   00122C  D7F8               	goto	u3500
  8069   00122E                     u3510:
  8070   00122E  0E3D               	movlw	61
  8071   001230  6E5E               	movwf	motor_Write@value^0,c
  8072   001232  0E11               	movlw	17
  8073   001234  EC0C  F00B         	call	_motor_Write
  8074   001238  0900               	iorlw	0
  8075   00123A  B4D8               	btfsc	status,2,c
  8076   00123C  D7F8               	goto	u3510
  8077   00123E                     u3520:
  8078                           
  8079                           ;TAD_RFID.c: 159:         regVal = motor_Read(0x14);
  8080   00123E  0E14               	movlw	20
  8081   001240  EC39  F009         	call	_motor_Read
  8082   001244  6E62               	movwf	initRFID@regVal^0,c
  8083                           
  8084                           ;TAD_RFID.c: 160:     } while (regVal == 0xFE);
  8085   001246  0EFE               	movlw	254
  8086   001248  1862               	xorwf	initRFID@regVal^0,w,c
  8087   00124A  B4D8               	btfsc	status,2,c
  8088   00124C  D7F8               	goto	u3520
  8089                           
  8090                           ;TAD_RFID.c: 161:     regVal |= 0x03;
  8091   00124E  0E03               	movlw	3
  8092   001250  1262               	iorwf	initRFID@regVal^0,f,c
  8093   001252                     l4140:
  8094   001252  C062  F05E         	movff	initRFID@regVal,motor_Write@value
  8095   001256  0E14               	movlw	20
  8096   001258  EC0C  F00B         	call	_motor_Write
  8097   00125C  0900               	iorlw	0
  8098   00125E  B4D8               	btfsc	status,2,c
  8099   001260  D7F8               	goto	l4140
  8100                           
  8101                           ;TAD_RFID.c: 165:     TI_NewTimer(&card_timer);
  8102   001262  0E51               	movlw	low _card_timer
  8103   001264  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8104   001266  ECCF  F00C         	call	_TI_NewTimer	;wreg free
  8105                           
  8106                           ;TAD_RFID.c: 166:     TI_ResetTics(card_timer);
  8107   00126A  5051               	movf	_card_timer^0,w,c
  8108   00126C  ECA5  F00D         	call	_TI_ResetTics
  8109   001270  0012               	return		;funcret
  8110   001272                     __end_of_initRFID:
  8111                           	callstack 0
  8112                           
  8113 ;; *************** function _motor_Write *****************
  8114 ;; Defined at:
  8115 ;;		line 47 in file "TAD_RFID.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  addr            1    wreg     unsigned char 
  8118 ;;  value           1    8[COMRAM] unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  addr            1    9[COMRAM] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      unsigned char 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1
  8130 ;;      Params:         1       0       0
  8131 ;;      Locals:         1       0       0
  8132 ;;      Temps:          0       0       0
  8133 ;;      Totals:         2       0       0
  8134 ;;Total ram usage:        2 bytes
  8135 ;; Hardware stack levels used: 1
  8136 ;; Hardware stack levels required when called: 5
  8137 ;; This function calls:
  8138 ;;		_processBit
  8139 ;; This function is called by:
  8140 ;;		_initRFID
  8141 ;;		_motor_RFID
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text34
  8146   001618                     __ptext34:
  8147                           	callstack 0
  8148   001618                     _motor_Write:
  8149                           	callstack 24
  8150                           
  8151                           ;incstack = 0
  8152                           ;motor_Write@addr stored from wreg
  8153   001618  6E5F               	movwf	motor_Write@addr^0,c
  8154                           
  8155                           ;TAD_RFID.c: 48:     static char bit_count = 0;;TAD_RFID.c: 49:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 50:     static unsigned char ucValue;;TAD_RFID.c: 52:     switch (s
      +                          tate_write) {
  8156   00161A  D028               	goto	l3796
  8157   00161C                     l274:
  8158                           
  8159                           ;TAD_RFID.c: 54:             LATCbits.LATC2 = 0;
  8160   00161C  948B               	bcf	139,2,c	;volatile
  8161                           
  8162                           ;TAD_RFID.c: 55:             LATCbits.LATC3 = 0;
  8163   00161E  968B               	bcf	139,3,c	;volatile
  8164                           
  8165                           ;TAD_RFID.c: 56:             ucAddr = ((addr << 1) & 0x7E);
  8166   001620  505F               	movf	motor_Write@addr^0,w,c
  8167   001622  245F               	addwf	motor_Write@addr^0,w,c
  8168   001624  0B7E               	andlw	126
  8169   001626  6E4F               	movwf	motor_Write@ucAddr^0,c
  8170                           
  8171                           ;TAD_RFID.c: 57:             ucValue = value;
  8172   001628  C05E  F04E         	movff	motor_Write@value,motor_Write@ucValue
  8173                           
  8174                           ;TAD_RFID.c: 58:             bit_count = 0;
  8175   00162C  6A50               	clrf	motor_Write@bit_count^0,c
  8176                           
  8177                           ;TAD_RFID.c: 59:             state_write = 1;
  8178   00162E  0E01               	movlw	1
  8179   001630  6E52               	movwf	_state_write^0,c
  8180                           
  8181                           ;TAD_RFID.c: 60:             break;
  8182   001632  D026               	goto	l3798
  8183   001634                     l3782:
  8184                           
  8185                           ;TAD_RFID.c: 63:             processBit(&ucAddr, &bit_count, &state_write, 2);
  8186   001634  0E4F               	movlw	low motor_Write@ucAddr
  8187   001636  6E59               	movwf	processBit@val^0,c
  8188   001638  0E50               	movlw	low motor_Write@bit_count
  8189   00163A  6E5A               	movwf	processBit@bit_count^0,c
  8190   00163C  0E52               	movlw	low _state_write
  8191   00163E  6E5B               	movwf	processBit@state^0,c
  8192   001640  0E02               	movlw	2
  8193   001642  6E5C               	movwf	processBit@next_state^0,c
  8194   001644  EC06  F00C         	call	_processBit	;wreg free
  8195                           
  8196                           ;TAD_RFID.c: 64:             break;
  8197   001648  D01B               	goto	l3798
  8198   00164A                     l3784:
  8199                           
  8200                           ;TAD_RFID.c: 67:             processBit(&ucValue, &bit_count, &state_write, 0);
  8201   00164A  0E4E               	movlw	low motor_Write@ucValue
  8202   00164C  6E59               	movwf	processBit@val^0,c
  8203   00164E  0E50               	movlw	low motor_Write@bit_count
  8204   001650  6E5A               	movwf	processBit@bit_count^0,c
  8205   001652  0E52               	movlw	low _state_write
  8206   001654  6E5B               	movwf	processBit@state^0,c
  8207   001656  0E00               	movlw	0
  8208   001658  6E5C               	movwf	processBit@next_state^0,c
  8209   00165A  EC06  F00C         	call	_processBit	;wreg free
  8210                           
  8211                           ;TAD_RFID.c: 68:             if (state_write == 0) {
  8212   00165E  5052               	movf	_state_write^0,w,c
  8213   001660  A4D8               	btfss	status,2,c
  8214   001662  D00E               	goto	l3798
  8215                           
  8216                           ;TAD_RFID.c: 69:                 LATCbits.LATC3 = 1;
  8217   001664  868B               	bsf	139,3,c	;volatile
  8218                           
  8219                           ;TAD_RFID.c: 70:                 LATCbits.LATC2 = 1;
  8220   001666  848B               	bsf	139,2,c	;volatile
  8221                           
  8222                           ;TAD_RFID.c: 71:                 return 1;
  8223   001668  0E01               	movlw	1
  8224   00166A  0012               	return	
  8225   00166C                     l3796:
  8226   00166C  5052               	movf	_state_write^0,w,c
  8227                           
  8228                           ; Switch size 1, requested type "simple"
  8229                           ; Number of cases is 3, Range of values is 0 to 2
  8230                           ; switch strategies available:
  8231                           ; Name         Instructions Cycles
  8232                           ; simple_byte           10     6 (average)
  8233                           ;	Chosen strategy is simple_byte
  8234   00166E  0A00               	xorlw	0	; case 0
  8235   001670  B4D8               	btfsc	status,2,c
  8236   001672  D7D4               	goto	l274
  8237   001674  0A01               	xorlw	1	; case 1
  8238   001676  B4D8               	btfsc	status,2,c
  8239   001678  D7DD               	goto	l3782
  8240   00167A  0A03               	xorlw	3	; case 2
  8241   00167C  B4D8               	btfsc	status,2,c
  8242   00167E  D7E5               	goto	l3784
  8243   001680                     l3798:
  8244                           
  8245                           ;TAD_RFID.c: 75:     return 0;
  8246   001680  0E00               	movlw	0
  8247   001682  0012               	return		;funcret
  8248   001684                     __end_of_motor_Write:
  8249                           	callstack 0
  8250                           
  8251 ;; *************** function _motor_Read *****************
  8252 ;; Defined at:
  8253 ;;		line 79 in file "TAD_RFID.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  addr            1    wreg     unsigned char 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  addr            1    9[COMRAM] unsigned char 
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      unsigned char 
  8260 ;; Registers used:
  8261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1
  8267 ;;      Params:         0       0       0
  8268 ;;      Locals:         3       0       0
  8269 ;;      Temps:          1       0       0
  8270 ;;      Totals:         4       0       0
  8271 ;;Total ram usage:        4 bytes
  8272 ;; Hardware stack levels used: 1
  8273 ;; Hardware stack levels required when called: 5
  8274 ;; This function calls:
  8275 ;;		_delay_us
  8276 ;;		_processBit
  8277 ;; This function is called by:
  8278 ;;		_initRFID
  8279 ;;		_motor_RFID
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           	psect	text35
  8284   001272                     __ptext35:
  8285                           	callstack 0
  8286   001272                     _motor_Read:
  8287                           	callstack 24
  8288                           
  8289                           ;incstack = 0
  8290                           ;motor_Read@addr stored from wreg
  8291   001272  6E5F               	movwf	motor_Read@addr^0,c
  8292                           
  8293                           ;TAD_RFID.c: 80:     static char bit_count = 0;;TAD_RFID.c: 81:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 82:     static unsigned char ucResult;;TAD_RFID.c: 83:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 84:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 86:     if (++timeout_counter > MAX_TIMEOUT) {
  8294   001274  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  8295   001276  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  8296   001278  0EE9               	movlw	233
  8297   00127A  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  8298   00127C  0E03               	movlw	3
  8299   00127E  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  8300   001280  A0D8               	btfss	status,0,c
  8301   001282  D053               	goto	l3864
  8302                           
  8303                           ;TAD_RFID.c: 87:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8304   001284  848B               	bsf	139,2,c	;volatile
  8305   001286  868B               	bsf	139,3,c	;volatile
  8306                           
  8307                           ;TAD_RFID.c: 88:         state_read = 0;
  8308   001288  6A53               	clrf	_state_read^0,c
  8309                           
  8310                           ;TAD_RFID.c: 89:         timeout_counter = 0;
  8311   00128A  0E00               	movlw	0
  8312   00128C  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8313   00128E  0E00               	movlw	0
  8314   001290  6E13               	movwf	motor_Read@timeout_counter^0,c
  8315                           
  8316                           ;TAD_RFID.c: 90:         return 0xFF;
  8317   001292  0EFF               	movlw	255
  8318   001294  0012               	return	
  8319   001296                     l3812:
  8320                           
  8321                           ;TAD_RFID.c: 95:             timeout_counter = 0;
  8322   001296  0E00               	movlw	0
  8323   001298  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8324   00129A  0E00               	movlw	0
  8325   00129C  6E13               	movwf	motor_Read@timeout_counter^0,c
  8326                           
  8327                           ;TAD_RFID.c: 96:             LATCbits.LATC2 = 0;
  8328   00129E  948B               	bcf	139,2,c	;volatile
  8329                           
  8330                           ;TAD_RFID.c: 97:             LATCbits.LATC3 = 0;
  8331   0012A0  968B               	bcf	139,3,c	;volatile
  8332                           
  8333                           ;TAD_RFID.c: 98:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  8334   0012A2  505F               	movf	motor_Read@addr^0,w,c
  8335   0012A4  245F               	addwf	motor_Read@addr^0,w,c
  8336   0012A6  0B7E               	andlw	126
  8337   0012A8  0980               	iorlw	128
  8338   0012AA  6E4C               	movwf	motor_Read@ucAddr^0,c
  8339                           
  8340                           ;TAD_RFID.c: 99:             ucResult = 0;
  8341   0012AC  6A3B               	clrf	motor_Read@ucResult^0,c
  8342                           
  8343                           ;TAD_RFID.c: 100:             bit_count = 0;
  8344   0012AE  6A4D               	clrf	motor_Read@bit_count^0,c
  8345                           
  8346                           ;TAD_RFID.c: 101:             state_read = 1;
  8347   0012B0  0E01               	movlw	1
  8348   0012B2  6E53               	movwf	_state_read^0,c
  8349   0012B4                     l3826:
  8350                           
  8351                           ;TAD_RFID.c: 102:             return 0xFE;
  8352   0012B4  0EFE               	movlw	254
  8353   0012B6  0012               	return	
  8354   0012B8                     l3830:
  8355                           
  8356                           ;TAD_RFID.c: 105:             processBit(&ucAddr, &bit_count, &state_read, 2);
  8357   0012B8  0E4C               	movlw	low motor_Read@ucAddr
  8358   0012BA  6E59               	movwf	processBit@val^0,c
  8359   0012BC  0E4D               	movlw	low motor_Read@bit_count
  8360   0012BE  6E5A               	movwf	processBit@bit_count^0,c
  8361   0012C0  0E53               	movlw	low _state_read
  8362   0012C2  6E5B               	movwf	processBit@state^0,c
  8363   0012C4  0E02               	movlw	2
  8364   0012C6  6E5C               	movwf	processBit@next_state^0,c
  8365   0012C8  EC06  F00C         	call	_processBit	;wreg free
  8366   0012CC  D7F3               	goto	l3826
  8367   0012CE                     l297:
  8368                           
  8369                           ;TAD_RFID.c: 109:             LATCbits.LATC2 = 1;
  8370   0012CE  848B               	bsf	139,2,c	;volatile
  8371                           
  8372                           ;TAD_RFID.c: 110:             delay_us(5);
  8373   0012D0  0E05               	movlw	5
  8374   0012D2  ECF9  F00D         	call	_delay_us
  8375                           
  8376                           ;TAD_RFID.c: 111:             ucResult = (unsigned char)((ucResult << 1) | PORTCbits.RC0
      +                          );
  8377   0012D6  A082               	btfss	130,0,c	;volatile
  8378   0012D8  D003               	goto	u3050
  8379   0012DA  6A5E               	clrf	??_motor_Read^0,c
  8380   0012DC  2A5E               	incf	??_motor_Read^0,f,c
  8381   0012DE  D001               	goto	u3058
  8382   0012E0                     u3050:
  8383   0012E0  6A5E               	clrf	??_motor_Read^0,c
  8384   0012E2                     u3058:
  8385   0012E2  503B               	movf	motor_Read@ucResult^0,w,c
  8386   0012E4  243B               	addwf	motor_Read@ucResult^0,w,c
  8387   0012E6  105E               	iorwf	??_motor_Read^0,w,c
  8388   0012E8  6E3B               	movwf	motor_Read@ucResult^0,c
  8389                           
  8390                           ;TAD_RFID.c: 112:             LATCbits.LATC2 = 0;
  8391   0012EA  948B               	bcf	139,2,c	;volatile
  8392                           
  8393                           ;TAD_RFID.c: 113:             delay_us(5);
  8394   0012EC  0E05               	movlw	5
  8395   0012EE  ECF9  F00D         	call	_delay_us
  8396                           
  8397                           ;TAD_RFID.c: 115:             if (++bit_count >= 8) {
  8398   0012F2  2A4D               	incf	motor_Read@bit_count^0,f,c
  8399   0012F4  0E07               	movlw	7
  8400   0012F6  644D               	cpfsgt	motor_Read@bit_count^0,c
  8401   0012F8  D7DD               	goto	l3826
  8402                           
  8403                           ;TAD_RFID.c: 116:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8404   0012FA  848B               	bsf	139,2,c	;volatile
  8405   0012FC  868B               	bsf	139,3,c	;volatile
  8406                           
  8407                           ;TAD_RFID.c: 117:                 state_read = 0;
  8408   0012FE  6A53               	clrf	_state_read^0,c
  8409                           
  8410                           ;TAD_RFID.c: 118:                 timeout_counter = 0;
  8411   001300  0E00               	movlw	0
  8412   001302  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8413   001304  0E00               	movlw	0
  8414   001306  6E13               	movwf	motor_Read@timeout_counter^0,c
  8415                           
  8416                           ;TAD_RFID.c: 119:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  8417   001308  0EFE               	movlw	254
  8418   00130A  183B               	xorwf	motor_Read@ucResult^0,w,c
  8419   00130C  B4D8               	btfsc	status,2,c
  8420   00130E  D007               	goto	l3854
  8421   001310  283B               	incf	motor_Read@ucResult^0,w,c
  8422   001312  B4D8               	btfsc	status,2,c
  8423   001314  D004               	goto	l3854
  8424   001316  C03B  F060         	movff	motor_Read@ucResult,_motor_Read$701
  8425   00131A  6A61               	clrf	(_motor_Read$701+1)^0,c
  8426   00131C  D004               	goto	l302
  8427   00131E                     l3854:
  8428   00131E  0E00               	movlw	0
  8429   001320  6E61               	movwf	(_motor_Read$701+1)^0,c
  8430   001322  0EFD               	movlw	253
  8431   001324  6E60               	movwf	_motor_Read$701^0,c
  8432   001326                     l302:
  8433   001326  5060               	movf	_motor_Read$701^0,w,c
  8434   001328  0012               	return	
  8435   00132A                     l3864:
  8436   00132A  5053               	movf	_state_read^0,w,c
  8437                           
  8438                           ; Switch size 1, requested type "simple"
  8439                           ; Number of cases is 3, Range of values is 0 to 2
  8440                           ; switch strategies available:
  8441                           ; Name         Instructions Cycles
  8442                           ; simple_byte           10     6 (average)
  8443                           ;	Chosen strategy is simple_byte
  8444   00132C  0A00               	xorlw	0	; case 0
  8445   00132E  B4D8               	btfsc	status,2,c
  8446   001330  D7B2               	goto	l3812
  8447   001332  0A01               	xorlw	1	; case 1
  8448   001334  B4D8               	btfsc	status,2,c
  8449   001336  D7C0               	goto	l3830
  8450   001338  0A03               	xorlw	3	; case 2
  8451   00133A  B4D8               	btfsc	status,2,c
  8452   00133C  D7C8               	goto	l297
  8453   00133E  D7BA               	goto	l3826
  8454   001340                     __end_of_motor_Read:
  8455                           	callstack 0
  8456                           
  8457 ;; *************** function _processBit *****************
  8458 ;; Defined at:
  8459 ;;		line 33 in file "TAD_RFID.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  val             1    3[COMRAM] PTR unsigned char 
  8462 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  8463 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  8464 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  8465 ;;  state           1    5[COMRAM] PTR unsigned char 
  8466 ;;		 -> state_read(1), state_write(1), 
  8467 ;;  next_state      1    6[COMRAM] unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;		None
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1
  8479 ;;      Params:         4       0       0
  8480 ;;      Locals:         0       0       0
  8481 ;;      Temps:          1       0       0
  8482 ;;      Totals:         5       0       0
  8483 ;;Total ram usage:        5 bytes
  8484 ;; Hardware stack levels used: 1
  8485 ;; Hardware stack levels required when called: 4
  8486 ;; This function calls:
  8487 ;;		_delay_us
  8488 ;; This function is called by:
  8489 ;;		_motor_Write
  8490 ;;		_motor_Read
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           	psect	text36
  8495   00180C                     __ptext36:
  8496                           	callstack 0
  8497   00180C                     _processBit:
  8498                           	callstack 24
  8499                           
  8500                           ;TAD_RFID.c: 34:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  8501                           
  8502                           ;incstack = 0
  8503   00180C  5059               	movf	processBit@val^0,w,c
  8504   00180E  6ED9               	movwf	fsr2l,c
  8505   001810  6ADA               	clrf	fsr2h,c
  8506   001812  AEDF               	btfss	indf2,7,c
  8507   001814  D003               	goto	u2680
  8508   001816  6A5D               	clrf	??_processBit^0,c
  8509   001818  2A5D               	incf	??_processBit^0,f,c
  8510   00181A  D001               	goto	u2698
  8511   00181C                     u2680:
  8512   00181C  6A5D               	clrf	??_processBit^0,c
  8513   00181E                     u2698:
  8514   00181E  465D               	rlncf	??_processBit^0,f,c
  8515   001820  508B               	movf	139,w,c	;volatile
  8516   001822  185D               	xorwf	??_processBit^0,w,c
  8517   001824  0BFD               	andlw	-3
  8518   001826  185D               	xorwf	??_processBit^0,w,c
  8519   001828  6E8B               	movwf	139,c	;volatile
  8520                           
  8521                           ;TAD_RFID.c: 35:     LATCbits.LATC2 = 1;
  8522   00182A  848B               	bsf	139,2,c	;volatile
  8523                           
  8524                           ;TAD_RFID.c: 36:     *val <<= 1;
  8525   00182C  5059               	movf	processBit@val^0,w,c
  8526   00182E  6ED9               	movwf	fsr2l,c
  8527   001830  6ADA               	clrf	fsr2h,c
  8528   001832  90D8               	bcf	status,0,c
  8529   001834  36DF               	rlcf	indf2,f,c
  8530                           
  8531                           ;TAD_RFID.c: 37:     delay_us(5);
  8532   001836  0E05               	movlw	5
  8533   001838  ECF9  F00D         	call	_delay_us
  8534                           
  8535                           ;TAD_RFID.c: 38:     LATCbits.LATC2 = 0;
  8536   00183C  948B               	bcf	139,2,c	;volatile
  8537                           
  8538                           ;TAD_RFID.c: 39:     delay_us(5);
  8539   00183E  0E05               	movlw	5
  8540   001840  ECF9  F00D         	call	_delay_us
  8541                           
  8542                           ;TAD_RFID.c: 40:     if (++(*bit_count) == 8) {
  8543   001844  505A               	movf	processBit@bit_count^0,w,c
  8544   001846  6ED9               	movwf	fsr2l,c
  8545   001848  6ADA               	clrf	fsr2h,c
  8546   00184A  2ADF               	incf	indf2,f,c
  8547   00184C  0E08               	movlw	8
  8548   00184E  18DE               	xorwf	postinc2,w,c
  8549   001850  A4D8               	btfss	status,2,c
  8550   001852  0012               	return	
  8551                           
  8552                           ;TAD_RFID.c: 41:         *bit_count = 0;
  8553   001854  505A               	movf	processBit@bit_count^0,w,c
  8554   001856  6ED9               	movwf	fsr2l,c
  8555   001858  6ADA               	clrf	fsr2h,c
  8556   00185A  6ADF               	clrf	indf2,c
  8557                           
  8558                           ;TAD_RFID.c: 42:         *state = next_state;
  8559   00185C  505B               	movf	processBit@state^0,w,c
  8560   00185E  6ED9               	movwf	fsr2l,c
  8561   001860  6ADA               	clrf	fsr2h,c
  8562   001862  C05C  FFDF         	movff	processBit@next_state,indf2
  8563   001866  0012               	return		;funcret
  8564   001868                     __end_of_processBit:
  8565                           	callstack 0
  8566                           
  8567 ;; *************** function _delay_us *****************
  8568 ;; Defined at:
  8569 ;;		line 27 in file "TAD_RFID.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  howMany         1    wreg     unsigned char 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  howMany         1    1[COMRAM] unsigned char 
  8574 ;;  x               1    2[COMRAM] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  1    wreg      void 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, prodl, prodh
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMRAM   BANK0   BANK1
  8584 ;;      Params:         0       0       0
  8585 ;;      Locals:         2       0       0
  8586 ;;      Temps:          0       0       0
  8587 ;;      Totals:         2       0       0
  8588 ;;Total ram usage:        2 bytes
  8589 ;; Hardware stack levels used: 1
  8590 ;; Hardware stack levels required when called: 3
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_processBit
  8595 ;;		_motor_Read
  8596 ;;		_initRFID
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text37
  8601   001BF2                     __ptext37:
  8602                           	callstack 0
  8603   001BF2                     _delay_us:
  8604                           	callstack 24
  8605                           
  8606                           ;incstack = 0
  8607                           ;delay_us@howMany stored from wreg
  8608   001BF2  6E57               	movwf	delay_us@howMany^0,c
  8609                           
  8610                           ;TAD_RFID.c: 28:     char x = howMany * 8;
  8611   001BF4  5057               	movf	delay_us@howMany^0,w,c
  8612   001BF6  0D08               	mullw	8
  8613   001BF8  CFF3 F058          	movff	prodl,delay_us@x
  8614                           
  8615                           ;TAD_RFID.c: 29:     while(x--) __nop();
  8616   001BFC  D001               	goto	l3470
  8617   001BFE                     l258:
  8618   001BFE  0000               	nop	
  8619   001C00                     l3470:
  8620   001C00  0658               	decf	delay_us@x^0,f,c
  8621   001C02  2858               	incf	delay_us@x^0,w,c
  8622   001C04  B4D8               	btfsc	status,2,c
  8623   001C06  0012               	return	
  8624   001C08  D7FA               	goto	l258
  8625   001C0A                     __end_of_delay_us:
  8626                           	callstack 0
  8627                           
  8628 ;; *************** function _initPorts *****************
  8629 ;; Defined at:
  8630 ;;		line 63 in file "main.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;		None
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;		None
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMRAM   BANK0   BANK1
  8644 ;;      Params:         0       0       0
  8645 ;;      Locals:         0       0       0
  8646 ;;      Temps:          0       0       0
  8647 ;;      Totals:         0       0       0
  8648 ;;Total ram usage:        0 bytes
  8649 ;; Hardware stack levels used: 1
  8650 ;; Hardware stack levels required when called: 3
  8651 ;; This function calls:
  8652 ;;		Nothing
  8653 ;; This function is called by:
  8654 ;;		_main
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text38
  8659   001C9A                     __ptext38:
  8660                           	callstack 0
  8661   001C9A                     _initPorts:
  8662                           	callstack 27
  8663                           
  8664                           ;incstack = 0
  8665   001C9A  0E0F               	movlw	15
  8666   001C9C  6EC1               	movwf	193,c	;volatile
  8667   001C9E  9496               	bcf	150,2,c	;volatile
  8668   001CA0  0012               	return		;funcret
  8669   001CA2                     __end_of_initPorts:
  8670                           	callstack 0
  8671                           
  8672 ;; *************** function _initLeds *****************
  8673 ;; Defined at:
  8674 ;;		line 9 in file "TAD_LEDS.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;		None
  8679 ;; Return value:  Size  Location     Type
  8680 ;;                  1    wreg      void 
  8681 ;; Registers used:
  8682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMRAM   BANK0   BANK1
  8688 ;;      Params:         0       0       0
  8689 ;;      Locals:         0       0       0
  8690 ;;      Temps:          0       0       0
  8691 ;;      Totals:         0       0       0
  8692 ;;Total ram usage:        0 bytes
  8693 ;; Hardware stack levels used: 1
  8694 ;; Hardware stack levels required when called: 4
  8695 ;; This function calls:
  8696 ;;		_TI_NewTimer
  8697 ;; This function is called by:
  8698 ;;		_main
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           	psect	text39
  8703   001C6E                     __ptext39:
  8704                           	callstack 0
  8705   001C6E                     _initLeds:
  8706                           	callstack 26
  8707                           
  8708                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  8709                           
  8710                           ;incstack = 0
  8711   001C6E  6A92               	clrf	146,c	;volatile
  8712                           
  8713                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  8714   001C70  6A96               	clrf	150,c	;volatile
  8715                           
  8716                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  8717   001C72  0E54               	movlw	low _timer
  8718   001C74  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8719   001C76  ECCF  F00C         	call	_TI_NewTimer	;wreg free
  8720   001C7A  0012               	return		;funcret
  8721   001C7C                     __end_of_initLeds:
  8722                           	callstack 0
  8723                           
  8724 ;; *************** function _initData *****************
  8725 ;; Defined at:
  8726 ;;		line 26 in file "TAD_DATOS.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  j               1    5[COMRAM] unsigned char 
  8731 ;;  i               1    6[COMRAM] unsigned char 
  8732 ;;  i               1    7[COMRAM] unsigned char 
  8733 ;;  i               1    4[COMRAM] unsigned char 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  1    wreg      void 
  8736 ;; Registers used:
  8737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1
  8743 ;;      Params:         0       0       0
  8744 ;;      Locals:         4       0       0
  8745 ;;      Temps:          0       0       0
  8746 ;;      Totals:         4       0       0
  8747 ;;Total ram usage:        4 bytes
  8748 ;; Hardware stack levels used: 1
  8749 ;; Hardware stack levels required when called: 4
  8750 ;; This function calls:
  8751 ;;		_TI_NewTimer
  8752 ;; This function is called by:
  8753 ;;		_main
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           	psect	text40
  8758   0017AC                     __ptext40:
  8759                           	callstack 0
  8760   0017AC                     _initData:
  8761                           	callstack 26
  8762                           
  8763                           ;TAD_DATOS.c: 27:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  8764                           
  8765                           ;incstack = 0
  8766   0017AC  6A5A               	clrf	initData@i^0,c
  8767   0017AE                     l4202:
  8768   0017AE  505A               	movf	initData@i^0,w,c
  8769   0017B0  0F40               	addlw	low _currentUser
  8770   0017B2  6ED9               	movwf	fsr2l,c
  8771   0017B4  6ADA               	clrf	fsr2h,c
  8772   0017B6  6ADF               	clrf	indf2,c
  8773   0017B8  2A5A               	incf	initData@i^0,f,c
  8774   0017BA  0E04               	movlw	4
  8775   0017BC  645A               	cpfsgt	initData@i^0,c
  8776   0017BE  D7F7               	goto	l4202
  8777                           
  8778                           ;TAD_DATOS.c: 28:     for(char i = 0; i < 4; i++) {
  8779   0017C0  6A5D               	clrf	initData@i_906^0,c
  8780   0017C2                     l776:
  8781                           
  8782                           ;TAD_DATOS.c: 29:         for(char j = 0; j < 6; j++) {
  8783   0017C2  6A5B               	clrf	initData@j^0,c
  8784   0017C4                     l4216:
  8785                           
  8786                           ;TAD_DATOS.c: 30:             configurations[i][j] = i;
  8787   0017C4  505D               	movf	initData@i_906^0,w,c
  8788   0017C6  0D06               	mullw	6
  8789   0017C8  50F3               	movf	243,w,c
  8790   0017CA  0F80               	addlw	low _configurations
  8791   0017CC  245B               	addwf	initData@j^0,w,c
  8792   0017CE  6ED9               	movwf	fsr2l,c
  8793   0017D0  6ADA               	clrf	fsr2h,c
  8794   0017D2  C05D  FFDF         	movff	initData@i_906,indf2
  8795                           
  8796                           ;TAD_DATOS.c: 31:         }
  8797   0017D6  2A5B               	incf	initData@j^0,f,c
  8798   0017D8  0E05               	movlw	5
  8799   0017DA  645B               	cpfsgt	initData@j^0,c
  8800   0017DC  D7F3               	goto	l4216
  8801                           
  8802                           ;TAD_DATOS.c: 32:     }
  8803   0017DE  2A5D               	incf	initData@i_906^0,f,c
  8804   0017E0  0E03               	movlw	3
  8805   0017E2  645D               	cpfsgt	initData@i_906^0,c
  8806   0017E4  D7EE               	goto	l776
  8807                           
  8808                           ;TAD_DATOS.c: 33:     for(char i = 0; i < 6; i++) {
  8809   0017E6  6A5C               	clrf	initData@i_908^0,c
  8810   0017E8                     l4230:
  8811                           
  8812                           ;TAD_DATOS.c: 34:         configurations[4][i] = 0;
  8813   0017E8  505C               	movf	initData@i_908^0,w,c
  8814   0017EA  0F98               	addlw	low (_configurations+24)
  8815   0017EC  6ED9               	movwf	fsr2l,c
  8816   0017EE  6ADA               	clrf	fsr2h,c
  8817   0017F0  6ADF               	clrf	indf2,c
  8818                           
  8819                           ;TAD_DATOS.c: 35:     }
  8820   0017F2  2A5C               	incf	initData@i_908^0,f,c
  8821   0017F4  0E05               	movlw	5
  8822   0017F6  645C               	cpfsgt	initData@i_908^0,c
  8823   0017F8  D7F7               	goto	l4230
  8824                           
  8825                           ;TAD_DATOS.c: 36:     index = 4;
  8826   0017FA  0E04               	movlw	4
  8827   0017FC  6E7D               	movwf	_index^0,c
  8828                           
  8829                           ;TAD_DATOS.c: 37:     TI_NewTimer(&timer);
  8830   0017FE  0E4A               	movlw	low _timer@TAD_DATOS$F903
  8831   001800  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  8832   001802  ECCF  F00C         	call	_TI_NewTimer	;wreg free
  8833                           
  8834                           ;TAD_DATOS.c: 38:     new_configuration = 1;
  8835   001806  0E01               	movlw	1
  8836   001808  6E1D               	movwf	_new_configuration^0,c
  8837   00180A  0012               	return		;funcret
  8838   00180C                     __end_of_initData:
  8839                           	callstack 0
  8840                           
  8841 ;; *************** function _Terminal_Init *****************
  8842 ;; Defined at:
  8843 ;;		line 10 in file "TAD_TERMINAL.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;		None
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;		None
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      void 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1
  8857 ;;      Params:         0       0       0
  8858 ;;      Locals:         0       0       0
  8859 ;;      Temps:          0       0       0
  8860 ;;      Totals:         0       0       0
  8861 ;;Total ram usage:        0 bytes
  8862 ;; Hardware stack levels used: 1
  8863 ;; Hardware stack levels required when called: 3
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_main
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text41
  8872   001C5E                     __ptext41:
  8873                           	callstack 0
  8874   001C5E                     _Terminal_Init:
  8875                           	callstack 27
  8876                           
  8877                           ;TAD_TERMINAL.c: 11:  TXSTA = 0x24;
  8878                           
  8879                           ;incstack = 0
  8880   001C5E  0E24               	movlw	36
  8881   001C60  6EAC               	movwf	172,c	;volatile
  8882                           
  8883                           ;TAD_TERMINAL.c: 12:  RCSTA = 0x90;
  8884   001C62  0E90               	movlw	144
  8885   001C64  6EAB               	movwf	171,c	;volatile
  8886                           
  8887                           ;TAD_TERMINAL.c: 13:  SPBRG = 255;
  8888   001C66  68AF               	setf	175,c	;volatile
  8889                           
  8890                           ;TAD_TERMINAL.c: 14:  BAUDCON = 0x00;
  8891   001C68  6AB8               	clrf	184,c	;volatile
  8892                           
  8893                           ;TAD_TERMINAL.c: 15:  hashtag_pressed = 0;
  8894   001C6A  6A22               	clrf	_hashtag_pressed^0,c
  8895   001C6C  0012               	return		;funcret
  8896   001C6E                     __end_of_Terminal_Init:
  8897                           	callstack 0
  8898                           
  8899 ;; *************** function _TI_Init *****************
  8900 ;; Defined at:
  8901 ;;		line 32 in file "TAD_TIMER.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  counter         1    1[COMRAM] unsigned char 
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  1    wreg      void 
  8908 ;; Registers used:
  8909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMRAM   BANK0   BANK1
  8915 ;;      Params:         0       0       0
  8916 ;;      Locals:         1       0       0
  8917 ;;      Temps:          0       0       0
  8918 ;;      Totals:         1       0       0
  8919 ;;Total ram usage:        1 bytes
  8920 ;; Hardware stack levels used: 1
  8921 ;; Hardware stack levels required when called: 3
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		_main
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text42
  8930   001AD2                     __ptext42:
  8931                           	callstack 0
  8932   001AD2                     _TI_Init:
  8933                           	callstack 27
  8934                           
  8935                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<5; counter++) {
  8936                           
  8937                           ;incstack = 0
  8938   001AD2  6A57               	clrf	TI_Init@counter^0,c
  8939   001AD4                     l4090:
  8940                           
  8941                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  8942   001AD4  5057               	movf	TI_Init@counter^0,w,c
  8943   001AD6  0D05               	mullw	5
  8944   001AD8  50F3               	movf	243,w,c
  8945   001ADA  0FA2               	addlw	low (_Timers+4)
  8946   001ADC  6ED9               	movwf	fsr2l,c
  8947   001ADE  6ADA               	clrf	fsr2h,c
  8948   001AE0  6ADF               	clrf	indf2,c
  8949                           
  8950                           ;TAD_TIMER.c: 35:  }
  8951   001AE2  2A57               	incf	TI_Init@counter^0,f,c
  8952   001AE4  0E04               	movlw	4
  8953   001AE6  6457               	cpfsgt	TI_Init@counter^0,c
  8954   001AE8  D7F5               	goto	l4090
  8955                           
  8956                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  8957   001AEA  0E82               	movlw	130
  8958   001AEC  6ED5               	movwf	213,c	;volatile
  8959                           
  8960                           ;TAD_TIMER.c: 37:     TMR0=63036;
  8961   001AEE  0EF6               	movlw	246
  8962   001AF0  6ED7               	movwf	215,c	;volatile
  8963   001AF2  0E3C               	movlw	60
  8964   001AF4  6ED6               	movwf	214,c	;volatile
  8965                           
  8966                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  8967   001AF6  94F2               	bcf	242,2,c	;volatile
  8968                           
  8969                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  8970   001AF8  8AF2               	bsf	242,5,c	;volatile
  8971   001AFA  0012               	return		;funcret
  8972   001AFC                     __end_of_TI_Init:
  8973                           	callstack 0
  8974                           
  8975 ;; *************** function _LcInit *****************
  8976 ;; Defined at:
  8977 ;;		line 68 in file "TAD_DISPLAY.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;  rows            1    wreg     unsigned char 
  8980 ;;  columns         1   22[COMRAM] unsigned char 
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  rows            1   23[COMRAM] unsigned char 
  8983 ;;  i               2   24[COMRAM] int 
  8984 ;; Return value:  Size  Location     Type
  8985 ;;                  1    wreg      void 
  8986 ;; Registers used:
  8987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMRAM   BANK0   BANK1
  8993 ;;      Params:         1       0       0
  8994 ;;      Locals:         3       0       0
  8995 ;;      Temps:          0       0       0
  8996 ;;      Totals:         4       0       0
  8997 ;;Total ram usage:        4 bytes
  8998 ;; Hardware stack levels used: 1
  8999 ;; Hardware stack levels required when called: 6
  9000 ;; This function calls:
  9001 ;;		_CantaIR
  9002 ;;		_EscriuPrimeraOrdre
  9003 ;;		_Espera
  9004 ;;		_TI_NewTimer
  9005 ;;		_WaitForBusy
  9006 ;; This function is called by:
  9007 ;;		_main
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text43
  9012   000FDC                     __ptext43:
  9013                           	callstack 0
  9014   000FDC                     _LcInit:
  9015                           	callstack 24
  9016                           
  9017                           ;incstack = 0
  9018                           ;LcInit@rows stored from wreg
  9019   000FDC  6E6D               	movwf	LcInit@rows^0,c
  9020                           
  9021                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  9022   000FDE  0E55               	movlw	low _Timer
  9023   000FE0  6E57               	movwf	TI_NewTimer@TimerHandle^0,c
  9024   000FE2  ECCF  F00C         	call	_TI_NewTimer	;wreg free
  9025                           
  9026                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  9027   000FE6  C06D  F03F         	movff	LcInit@rows,_Rows
  9028   000FEA  C06C  F03E         	movff	LcInit@columns,_Columns
  9029                           
  9030                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  9031   000FEE  6A3C               	clrf	_ColumnAct^0,c
  9032   000FF0  6A3D               	clrf	_RowAct^0,c
  9033                           
  9034                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  9035   000FF2  9293               	bcf	147,1,c	;volatile
  9036   000FF4  9493               	bcf	147,2,c	;volatile
  9037   000FF6  9693               	bcf	147,3,c	;volatile
  9038                           
  9039                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  9040   000FF8  0E00               	movlw	0
  9041   000FFA  6E6F               	movwf	(LcInit@i+1)^0,c
  9042   000FFC  0E00               	movlw	0
  9043   000FFE  6E6E               	movwf	LcInit@i^0,c
  9044   001000                     l4164:
  9045                           
  9046                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  9047   001000  C055  F064         	movff	_Timer,Espera@Timer
  9048   001004  6A65               	clrf	(Espera@Timer+1)^0,c
  9049   001006  0E00               	movlw	0
  9050   001008  6E67               	movwf	(Espera@ms+1)^0,c
  9051   00100A  0E64               	movlw	100
  9052   00100C  6E66               	movwf	Espera@ms^0,c
  9053   00100E  EC08  F00D         	call	_Espera	;wreg free
  9054                           
  9055                           ;TAD_DISPLAY.c: 81:   EscriuPrimeraOrdre(0x02 | 0x01);
  9056   001012  0E03               	movlw	3
  9057   001014  ECEE  F009         	call	_EscriuPrimeraOrdre
  9058                           
  9059                           ;TAD_DISPLAY.c: 82:   Espera(Timer, 4);
  9060   001018  C055  F064         	movff	_Timer,Espera@Timer
  9061   00101C  6A65               	clrf	(Espera@Timer+1)^0,c
  9062   00101E  0E00               	movlw	0
  9063   001020  6E67               	movwf	(Espera@ms+1)^0,c
  9064   001022  0E04               	movlw	4
  9065   001024  6E66               	movwf	Espera@ms^0,c
  9066   001026  EC08  F00D         	call	_Espera	;wreg free
  9067                           
  9068                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  9069   00102A  0E03               	movlw	3
  9070   00102C  ECEE  F009         	call	_EscriuPrimeraOrdre
  9071                           
  9072                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 1);
  9073   001030  C055  F064         	movff	_Timer,Espera@Timer
  9074   001034  6A65               	clrf	(Espera@Timer+1)^0,c
  9075   001036  0E00               	movlw	0
  9076   001038  6E67               	movwf	(Espera@ms+1)^0,c
  9077   00103A  0E01               	movlw	1
  9078   00103C  6E66               	movwf	Espera@ms^0,c
  9079   00103E  EC08  F00D         	call	_Espera	;wreg free
  9080                           
  9081                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  9082   001042  0E03               	movlw	3
  9083   001044  ECEE  F009         	call	_EscriuPrimeraOrdre
  9084                           
  9085                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  9086   001048  C055  F064         	movff	_Timer,Espera@Timer
  9087   00104C  6A65               	clrf	(Espera@Timer+1)^0,c
  9088   00104E  0E00               	movlw	0
  9089   001050  6E67               	movwf	(Espera@ms+1)^0,c
  9090   001052  0E01               	movlw	1
  9091   001054  6E66               	movwf	Espera@ms^0,c
  9092   001056  EC08  F00D         	call	_Espera	;wreg free
  9093                           
  9094                           ;TAD_DISPLAY.c: 89:   EscriuPrimeraOrdre(0x02);
  9095   00105A  0E02               	movlw	2
  9096   00105C  ECEE  F009         	call	_EscriuPrimeraOrdre
  9097                           
  9098                           ;TAD_DISPLAY.c: 90:   Espera(Timer, 1);
  9099   001060  C055  F064         	movff	_Timer,Espera@Timer
  9100   001064  6A65               	clrf	(Espera@Timer+1)^0,c
  9101   001066  0E00               	movlw	0
  9102   001068  6E67               	movwf	(Espera@ms+1)^0,c
  9103   00106A  0E01               	movlw	1
  9104   00106C  6E66               	movwf	Espera@ms^0,c
  9105   00106E  EC08  F00D         	call	_Espera	;wreg free
  9106                           
  9107                           ;TAD_DISPLAY.c: 91:   CantaIR(0x20 | 0x08);
  9108   001072  0E28               	movlw	40
  9109   001074  EC3B  F00D         	call	_CantaIR
  9110                           
  9111                           ;TAD_DISPLAY.c: 94:   WaitForBusy(); CantaIR(0x08);
  9112   001078  EC25  F00E         	call	_WaitForBusy	;wreg free
  9113   00107C  0E08               	movlw	8
  9114   00107E  EC3B  F00D         	call	_CantaIR
  9115                           
  9116                           ;TAD_DISPLAY.c: 95:   WaitForBusy(); CantaIR(0x01);
  9117   001082  EC25  F00E         	call	_WaitForBusy	;wreg free
  9118   001086  0E01               	movlw	1
  9119   001088  EC3B  F00D         	call	_CantaIR
  9120                           
  9121                           ;TAD_DISPLAY.c: 96:   Espera(Timer,2);
  9122   00108C  C055  F064         	movff	_Timer,Espera@Timer
  9123   001090  6A65               	clrf	(Espera@Timer+1)^0,c
  9124   001092  0E00               	movlw	0
  9125   001094  6E67               	movwf	(Espera@ms+1)^0,c
  9126   001096  0E02               	movlw	2
  9127   001098  6E66               	movwf	Espera@ms^0,c
  9128   00109A  EC08  F00D         	call	_Espera	;wreg free
  9129                           
  9130                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9131   00109E  EC25  F00E         	call	_WaitForBusy	;wreg free
  9132   0010A2  0E06               	movlw	6
  9133   0010A4  EC3B  F00D         	call	_CantaIR
  9134                           
  9135                           ;TAD_DISPLAY.c: 98:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9136   0010A8  EC25  F00E         	call	_WaitForBusy	;wreg free
  9137   0010AC  0E0F               	movlw	15
  9138   0010AE  EC3B  F00D         	call	_CantaIR
  9139                           
  9140                           ;TAD_DISPLAY.c: 99:  }
  9141   0010B2  4A6E               	infsnz	LcInit@i^0,f,c
  9142   0010B4  2A6F               	incf	(LcInit@i+1)^0,f,c
  9143   0010B6  BE6F               	btfsc	(LcInit@i+1)^0,7,c
  9144   0010B8  D7A3               	goto	l4164
  9145   0010BA  506F               	movf	(LcInit@i+1)^0,w,c
  9146   0010BC  E105               	bnz	u3550
  9147   0010BE  0E02               	movlw	2
  9148   0010C0  5C6E               	subwf	LcInit@i^0,w,c
  9149   0010C2  B0D8               	btfsc	status,0,c
  9150   0010C4  0012               	return	
  9151   0010C6  D79C               	goto	l4164
  9152   0010C8                     u3550:
  9153   0010C8  0012               	return		;funcret
  9154   0010CA                     __end_of_LcInit:
  9155                           	callstack 0
  9156                           
  9157 ;; *************** function _WaitForBusy *****************
  9158 ;; Defined at:
  9159 ;;		line 254 in file "TAD_DISPLAY.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;		None
  9162 ;; Auto vars:     Size  Location     Type
  9163 ;;  Busy            1    0        unsigned char 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  1    wreg      void 
  9166 ;; Registers used:
  9167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMRAM   BANK0   BANK1
  9173 ;;      Params:         0       0       0
  9174 ;;      Locals:         0       0       0
  9175 ;;      Temps:          0       0       0
  9176 ;;      Totals:         0       0       0
  9177 ;;Total ram usage:        0 bytes
  9178 ;; Hardware stack levels used: 1
  9179 ;; Hardware stack levels required when called: 5
  9180 ;; This function calls:
  9181 ;;		_Espera
  9182 ;; This function is called by:
  9183 ;;		_LcInit
  9184 ;;		_LcGotoXY
  9185 ;;		_LcPutChar
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           	psect	text44
  9190   001C4A                     __ptext44:
  9191                           	callstack 0
  9192   001C4A                     _WaitForBusy:
  9193                           	callstack 23
  9194                           
  9195                           ;TAD_DISPLAY.c: 255:  Espera(Timer, 2);
  9196                           
  9197                           ;incstack = 0
  9198   001C4A  C055  F064         	movff	_Timer,Espera@Timer
  9199   001C4E  6A65               	clrf	(Espera@Timer+1)^0,c
  9200   001C50  0E00               	movlw	0
  9201   001C52  6E67               	movwf	(Espera@ms+1)^0,c
  9202   001C54  0E02               	movlw	2
  9203   001C56  6E66               	movwf	Espera@ms^0,c
  9204   001C58  EC08  F00D         	call	_Espera	;wreg free
  9205   001C5C  0012               	return		;funcret
  9206   001C5E                     __end_of_WaitForBusy:
  9207                           	callstack 0
  9208                           
  9209 ;; *************** function _Espera *****************
  9210 ;; Defined at:
  9211 ;;		line 203 in file "TAD_DISPLAY.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;  Timer           2   14[COMRAM] int 
  9214 ;;  ms              2   16[COMRAM] int 
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      void 
  9219 ;; Registers used:
  9220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMRAM   BANK0   BANK1
  9226 ;;      Params:         4       0       0
  9227 ;;      Locals:         0       0       0
  9228 ;;      Temps:          4       0       0
  9229 ;;      Totals:         8       0       0
  9230 ;;Total ram usage:        8 bytes
  9231 ;; Hardware stack levels used: 1
  9232 ;; Hardware stack levels required when called: 4
  9233 ;; This function calls:
  9234 ;;		_TI_GetTics
  9235 ;;		_TI_ResetTics
  9236 ;; This function is called by:
  9237 ;;		_LcInit
  9238 ;;		_WaitForBusy
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text45
  9243   001A10                     __ptext45:
  9244                           	callstack 0
  9245   001A10                     _Espera:
  9246                           	callstack 23
  9247                           
  9248                           ;TAD_DISPLAY.c: 204:  TI_ResetTics((unsigned char)Timer);
  9249                           
  9250                           ;incstack = 0
  9251   001A10  5064               	movf	Espera@Timer^0,w,c
  9252   001A12  ECA5  F00D         	call	_TI_ResetTics
  9253   001A16                     l3384:
  9254   001A16  C066  F068         	movff	Espera@ms,??_Espera
  9255   001A1A  C067  F069         	movff	Espera@ms+1,??_Espera+1
  9256   001A1E  0E00               	movlw	0
  9257   001A20  BE69               	btfsc	(??_Espera+1)^0,7,c
  9258   001A22  0EFF               	movlw	255
  9259   001A24  6E6A               	movwf	(??_Espera+2)^0,c
  9260   001A26  6E6B               	movwf	(??_Espera+3)^0,c
  9261   001A28  5064               	movf	Espera@Timer^0,w,c
  9262   001A2A  EC88  F00C         	call	_TI_GetTics
  9263   001A2E  5068               	movf	??_Espera^0,w,c
  9264   001A30  5C57               	subwf	?_TI_GetTics^0,w,c
  9265   001A32  5069               	movf	(??_Espera+1)^0,w,c
  9266   001A34  5858               	subwfb	(?_TI_GetTics+1)^0,w,c
  9267   001A36  506A               	movf	(??_Espera+2)^0,w,c
  9268   001A38  5859               	subwfb	(?_TI_GetTics+2)^0,w,c
  9269   001A3A  506B               	movf	(??_Espera+3)^0,w,c
  9270   001A3C  585A               	subwfb	(?_TI_GetTics+3)^0,w,c
  9271   001A3E  B0D8               	btfsc	status,0,c
  9272   001A40  0012               	return	
  9273   001A42  D7E9               	goto	l3384
  9274   001A44                     __end_of_Espera:
  9275                           	callstack 0
  9276                           
  9277 ;; *************** function _TI_ResetTics *****************
  9278 ;; Defined at:
  9279 ;;		line 53 in file "TAD_TIMER.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  TimerHandle     1    wreg     unsigned char 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  1    wreg      void 
  9286 ;; Registers used:
  9287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMRAM   BANK0   BANK1
  9293 ;;      Params:         0       0       0
  9294 ;;      Locals:         1       0       0
  9295 ;;      Temps:          0       0       0
  9296 ;;      Totals:         1       0       0
  9297 ;;Total ram usage:        1 bytes
  9298 ;; Hardware stack levels used: 1
  9299 ;; Hardware stack levels required when called: 3
  9300 ;; This function calls:
  9301 ;;		Nothing
  9302 ;; This function is called by:
  9303 ;;		_Espera
  9304 ;;		_motor_LEDs
  9305 ;;		_initRFID
  9306 ;;		_motor_RFID
  9307 ;;		_motorTeclado
  9308 ;;		_motor_datos
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           	psect	text46
  9313   001B4A                     __ptext46:
  9314                           	callstack 0
  9315   001B4A                     _TI_ResetTics:
  9316                           	callstack 26
  9317                           
  9318                           ;incstack = 0
  9319                           ;TI_ResetTics@TimerHandle stored from wreg
  9320   001B4A  6E57               	movwf	TI_ResetTics@TimerHandle^0,c
  9321                           
  9322                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  9323   001B4C  9EF2               	bcf	242,7,c	;volatile
  9324   001B4E  5057               	movf	TI_ResetTics@TimerHandle^0,w,c
  9325   001B50  0D05               	mullw	5
  9326   001B52  50F3               	movf	243,w,c
  9327   001B54  0F9E               	addlw	low _Timers
  9328   001B56  6ED9               	movwf	fsr2l,c
  9329   001B58  6ADA               	clrf	fsr2h,c
  9330   001B5A  C007  FFDE         	movff	_Tics,postinc2	;volatile
  9331   001B5E  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  9332   001B62  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  9333   001B66  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  9334   001B6A  8EF2               	bsf	242,7,c	;volatile
  9335   001B6C  0012               	return		;funcret
  9336   001B6E                     __end_of_TI_ResetTics:
  9337                           	callstack 0
  9338                           
  9339 ;; *************** function _TI_GetTics *****************
  9340 ;; Defined at:
  9341 ;;		line 61 in file "TAD_TIMER.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;  TimerHandle     1    wreg     unsigned char 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  9346 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  4    1[COMRAM] unsigned long 
  9349 ;; Registers used:
  9350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1
  9356 ;;      Params:         4       0       0
  9357 ;;      Locals:         5       0       0
  9358 ;;      Temps:          4       0       0
  9359 ;;      Totals:        13       0       0
  9360 ;;Total ram usage:       13 bytes
  9361 ;; Hardware stack levels used: 1
  9362 ;; Hardware stack levels required when called: 3
  9363 ;; This function calls:
  9364 ;;		Nothing
  9365 ;; This function is called by:
  9366 ;;		_Espera
  9367 ;;		_motor_LEDs
  9368 ;;		_motor_RFID
  9369 ;;		_motorTeclado
  9370 ;;		_motor_datos
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           	psect	text47
  9375   001910                     __ptext47:
  9376                           	callstack 0
  9377   001910                     _TI_GetTics:
  9378                           	callstack 26
  9379                           
  9380                           ;incstack = 0
  9381                           ;TI_GetTics@TimerHandle stored from wreg
  9382   001910  6E63               	movwf	TI_GetTics@TimerHandle^0,c
  9383                           
  9384                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  9385   001912  9EF2               	bcf	242,7,c	;volatile
  9386   001914  C007  F05F         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  9387   001918  C008  F060         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  9388   00191C  C009  F061         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  9389   001920  C00A  F062         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  9390   001924  8EF2               	bsf	242,7,c	;volatile
  9391                           
  9392                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  9393   001926  5063               	movf	TI_GetTics@TimerHandle^0,w,c
  9394   001928  0D05               	mullw	5
  9395   00192A  50F3               	movf	243,w,c
  9396   00192C  0F9E               	addlw	low _Timers
  9397   00192E  6ED9               	movwf	fsr2l,c
  9398   001930  6ADA               	clrf	fsr2h,c
  9399   001932  CFDE F05B          	movff	postinc2,??_TI_GetTics
  9400   001936  CFDE F05C          	movff	postinc2,??_TI_GetTics+1
  9401   00193A  CFDE F05D          	movff	postinc2,??_TI_GetTics+2
  9402   00193E  CFDE F05E          	movff	postinc2,??_TI_GetTics+3
  9403   001942  505B               	movf	??_TI_GetTics^0,w,c
  9404   001944  5C5F               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  9405   001946  6E57               	movwf	?_TI_GetTics^0,c
  9406   001948  505C               	movf	(??_TI_GetTics+1)^0,w,c
  9407   00194A  5860               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  9408   00194C  6E58               	movwf	(?_TI_GetTics+1)^0,c
  9409   00194E  505D               	movf	(??_TI_GetTics+2)^0,w,c
  9410   001950  5861               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  9411   001952  6E59               	movwf	(?_TI_GetTics+2)^0,c
  9412   001954  505E               	movf	(??_TI_GetTics+3)^0,w,c
  9413   001956  5862               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  9414   001958  6E5A               	movwf	(?_TI_GetTics+3)^0,c
  9415   00195A  0012               	return		;funcret
  9416   00195C                     __end_of_TI_GetTics:
  9417                           	callstack 0
  9418                           
  9419 ;; *************** function _TI_NewTimer *****************
  9420 ;; Defined at:
  9421 ;;		line 43 in file "TAD_TIMER.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  9424 ;;		 -> timer@TAD_DATOS$F903(1), timer_teclado(1), card_timer(1), timer(1), 
  9425 ;;		 -> Timer(1), 
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;  Comptador       1    3[COMRAM] unsigned char 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      unsigned char 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1
  9437 ;;      Params:         1       0       0
  9438 ;;      Locals:         1       0       0
  9439 ;;      Temps:          1       0       0
  9440 ;;      Totals:         3       0       0
  9441 ;;Total ram usage:        3 bytes
  9442 ;; Hardware stack levels used: 1
  9443 ;; Hardware stack levels required when called: 3
  9444 ;; This function calls:
  9445 ;;		Nothing
  9446 ;; This function is called by:
  9447 ;;		_LcInit
  9448 ;;		_initLeds
  9449 ;;		_initRFID
  9450 ;;		_initTeclado
  9451 ;;		_initData
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text48
  9456   00199E                     __ptext48:
  9457                           	callstack 0
  9458   00199E                     _TI_NewTimer:
  9459                           	callstack 26
  9460                           
  9461                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  9462                           
  9463                           ;incstack = 0
  9464   00199E  6A59               	clrf	TI_NewTimer@Comptador^0,c
  9465                           
  9466                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9467   0019A0  D005               	goto	l3708
  9468   0019A2                     l3704:
  9469                           
  9470                           ;TAD_TIMER.c: 46:   if (++Comptador == 5) return (0);
  9471   0019A2  2A59               	incf	TI_NewTimer@Comptador^0,f,c
  9472   0019A4  0E05               	movlw	5
  9473   0019A6  1859               	xorwf	TI_NewTimer@Comptador^0,w,c
  9474   0019A8  B4D8               	btfsc	status,2,c
  9475   0019AA  0012               	return	
  9476   0019AC                     l3708:
  9477                           
  9478                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9479   0019AC  5059               	movf	TI_NewTimer@Comptador^0,w,c
  9480   0019AE  0D05               	mullw	5
  9481   0019B0  50F3               	movf	243,w,c
  9482   0019B2  0FA2               	addlw	low (_Timers+4)
  9483   0019B4  6ED9               	movwf	fsr2l,c
  9484   0019B6  6ADA               	clrf	fsr2h,c
  9485   0019B8  04DE               	decf	postinc2,w,c
  9486   0019BA  B4D8               	btfsc	status,2,c
  9487   0019BC  D7F2               	goto	l3704
  9488                           
  9489                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  9490   0019BE  5059               	movf	TI_NewTimer@Comptador^0,w,c
  9491   0019C0  0D05               	mullw	5
  9492   0019C2  50F3               	movf	243,w,c
  9493   0019C4  0FA2               	addlw	low (_Timers+4)
  9494   0019C6  6ED9               	movwf	fsr2l,c
  9495   0019C8  6ADA               	clrf	fsr2h,c
  9496   0019CA  0E01               	movlw	1
  9497   0019CC  6EDF               	movwf	indf2,c
  9498                           
  9499                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  9500   0019CE  5057               	movf	TI_NewTimer@TimerHandle^0,w,c
  9501   0019D0  6ED9               	movwf	fsr2l,c
  9502   0019D2  6ADA               	clrf	fsr2h,c
  9503   0019D4  C059  FFDF         	movff	TI_NewTimer@Comptador,indf2
  9504   0019D8  0012               	return		;funcret
  9505   0019DA                     __end_of_TI_NewTimer:
  9506                           	callstack 0
  9507                           
  9508 ;; *************** function _EscriuPrimeraOrdre *****************
  9509 ;; Defined at:
  9510 ;;		line 258 in file "TAD_DISPLAY.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;  ordre           1    wreg     unsigned char 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  ordre           1    2[COMRAM] unsigned char 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, status,2, status,0
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1
  9524 ;;      Params:         0       0       0
  9525 ;;      Locals:         1       0       0
  9526 ;;      Temps:          1       0       0
  9527 ;;      Totals:         2       0       0
  9528 ;;Total ram usage:        2 bytes
  9529 ;; Hardware stack levels used: 1
  9530 ;; Hardware stack levels required when called: 3
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_LcInit
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text49
  9539   0013DC                     __ptext49:
  9540                           	callstack 0
  9541   0013DC                     _EscriuPrimeraOrdre:
  9542                           	callstack 26
  9543                           
  9544                           ;incstack = 0
  9545                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9546   0013DC  6E58               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9547                           
  9548                           ;TAD_DISPLAY.c: 260:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  9549   0013DE  9096               	bcf	150,0,c	;volatile
  9550   0013E0  9296               	bcf	150,1,c	;volatile
  9551   0013E2  9A93               	bcf	147,5,c	;volatile
  9552   0013E4  9893               	bcf	147,4,c	;volatile
  9553   0013E6  968A               	bcf	138,3,c	;volatile
  9554   0013E8  948A               	bcf	138,2,c	;volatile
  9555                           
  9556                           ;TAD_DISPLAY.c: 261:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  9557   0013EA  828A               	bsf	138,1,c	;volatile
  9558   0013EC  828A               	bsf	138,1,c	;volatile
  9559                           
  9560                           ;TAD_DISPLAY.c: 262:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  9561   0013EE  A658               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9562   0013F0  D003               	goto	u570
  9563   0013F2  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9564   0013F4  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9565   0013F6  D001               	goto	u588
  9566   0013F8                     u570:
  9567   0013F8  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9568   0013FA                     u588:
  9569   0013FA  508D               	movf	141,w,c	;volatile
  9570   0013FC  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9571   0013FE  0BFE               	andlw	-2
  9572   001400  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9573   001402  6E8D               	movwf	141,c	;volatile
  9574                           
  9575                           ;TAD_DISPLAY.c: 263:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  9576   001404  A458               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9577   001406  D003               	goto	u590
  9578   001408  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9579   00140A  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9580   00140C  D001               	goto	u608
  9581   00140E                     u590:
  9582   00140E  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9583   001410                     u608:
  9584   001410  4657               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9585   001412  508D               	movf	141,w,c	;volatile
  9586   001414  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9587   001416  0BFD               	andlw	-3
  9588   001418  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9589   00141A  6E8D               	movwf	141,c	;volatile
  9590                           
  9591                           ;TAD_DISPLAY.c: 264:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  9592   00141C  A258               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9593   00141E  D003               	goto	u610
  9594   001420  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9595   001422  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9596   001424  D001               	goto	u628
  9597   001426                     u610:
  9598   001426  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9599   001428                     u628:
  9600   001428  3A57               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9601   00142A  4657               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9602   00142C  508A               	movf	138,w,c	;volatile
  9603   00142E  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9604   001430  0BDF               	andlw	-33
  9605   001432  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9606   001434  6E8A               	movwf	138,c	;volatile
  9607                           
  9608                           ;TAD_DISPLAY.c: 265:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  9609   001436  A058               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9610   001438  D003               	goto	u630
  9611   00143A  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9612   00143C  2A57               	incf	??_EscriuPrimeraOrdre^0,f,c
  9613   00143E  D001               	goto	u648
  9614   001440                     u630:
  9615   001440  6A57               	clrf	??_EscriuPrimeraOrdre^0,c
  9616   001442                     u648:
  9617   001442  3A57               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9618   001444  508A               	movf	138,w,c	;volatile
  9619   001446  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9620   001448  0BEF               	andlw	-17
  9621   00144A  1857               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9622   00144C  6E8A               	movwf	138,c	;volatile
  9623                           
  9624                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB1 = 0);
  9625   00144E  928A               	bcf	138,1,c	;volatile
  9626   001450  0012               	return		;funcret
  9627   001452                     __end_of_EscriuPrimeraOrdre:
  9628                           	callstack 0
  9629                           
  9630 ;; *************** function _CantaIR *****************
  9631 ;; Defined at:
  9632 ;;		line 222 in file "TAD_DISPLAY.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;  IR              1    wreg     unsigned char 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  IR              1    3[COMRAM] unsigned char 
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		wreg, status,2, status,0, cstack
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMRAM   BANK0   BANK1
  9646 ;;      Params:         0       0       0
  9647 ;;      Locals:         1       0       0
  9648 ;;      Temps:          0       0       0
  9649 ;;      Totals:         1       0       0
  9650 ;;Total ram usage:        1 bytes
  9651 ;; Hardware stack levels used: 1
  9652 ;; Hardware stack levels required when called: 4
  9653 ;; This function calls:
  9654 ;;		_CantaPartAlta
  9655 ;;		_CantaPartBaixa
  9656 ;; This function is called by:
  9657 ;;		_LcInit
  9658 ;;		_LcGotoXY
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text50
  9663   001A76                     __ptext50:
  9664                           	callstack 0
  9665   001A76                     _CantaIR:
  9666                           	callstack 23
  9667                           
  9668                           ;incstack = 0
  9669                           ;CantaIR@IR stored from wreg
  9670   001A76  6E59               	movwf	CantaIR@IR^0,c
  9671                           
  9672                           ;TAD_DISPLAY.c: 223:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  9673   001A78  9096               	bcf	150,0,c	;volatile
  9674   001A7A  9296               	bcf	150,1,c	;volatile
  9675   001A7C  9A93               	bcf	147,5,c	;volatile
  9676   001A7E  9893               	bcf	147,4,c	;volatile
  9677                           
  9678                           ;TAD_DISPLAY.c: 224:  (LATBbits.LATB3 = 0);
  9679   001A80  968A               	bcf	138,3,c	;volatile
  9680                           
  9681                           ;TAD_DISPLAY.c: 225:  (LATBbits.LATB2 = 0);
  9682   001A82  948A               	bcf	138,2,c	;volatile
  9683                           
  9684                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB1 = 1);
  9685   001A84  828A               	bsf	138,1,c	;volatile
  9686                           
  9687                           ;TAD_DISPLAY.c: 227:  CantaPartAlta(IR);
  9688   001A86  5059               	movf	CantaIR@IR^0,w,c
  9689   001A88  EC74  F00B         	call	_CantaPartAlta
  9690                           
  9691                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  9692   001A8C  828A               	bsf	138,1,c	;volatile
  9693                           
  9694                           ;TAD_DISPLAY.c: 229:  (LATBbits.LATB1 = 0);
  9695   001A8E  928A               	bcf	138,1,c	;volatile
  9696                           
  9697                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 0);
  9698   001A90  928A               	bcf	138,1,c	;volatile
  9699                           
  9700                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 1);
  9701   001A92  828A               	bsf	138,1,c	;volatile
  9702                           
  9703                           ;TAD_DISPLAY.c: 232:  CantaPartBaixa(IR);
  9704   001A94  5059               	movf	CantaIR@IR^0,w,c
  9705   001A96  EC42  F00B         	call	_CantaPartBaixa
  9706                           
  9707                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  9708   001A9A  828A               	bsf	138,1,c	;volatile
  9709                           
  9710                           ;TAD_DISPLAY.c: 234:  (LATBbits.LATB1 = 0);
  9711   001A9C  928A               	bcf	138,1,c	;volatile
  9712                           
  9713                           ;TAD_DISPLAY.c: 235:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  9714   001A9E  8096               	bsf	150,0,c	;volatile
  9715   001AA0  8296               	bsf	150,1,c	;volatile
  9716   001AA2  8A93               	bsf	147,5,c	;volatile
  9717   001AA4  8893               	bsf	147,4,c	;volatile
  9718   001AA6  0012               	return		;funcret
  9719   001AA8                     __end_of_CantaIR:
  9720                           	callstack 0
  9721                           
  9722 ;; *************** function _CantaPartBaixa *****************
  9723 ;; Defined at:
  9724 ;;		line 215 in file "TAD_DISPLAY.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  c               1    wreg     unsigned char 
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  c               1    2[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1
  9738 ;;      Params:         0       0       0
  9739 ;;      Locals:         1       0       0
  9740 ;;      Temps:          1       0       0
  9741 ;;      Totals:         2       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used: 1
  9744 ;; Hardware stack levels required when called: 3
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_CantaIR
  9749 ;;		_CantaData
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text51
  9754   001684                     __ptext51:
  9755                           	callstack 0
  9756   001684                     _CantaPartBaixa:
  9757                           	callstack 23
  9758                           
  9759                           ;incstack = 0
  9760                           ;CantaPartBaixa@c stored from wreg
  9761   001684  6E58               	movwf	CantaPartBaixa@c^0,c
  9762                           
  9763                           ;TAD_DISPLAY.c: 216:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  9764   001686  A658               	btfss	CantaPartBaixa@c^0,3,c
  9765   001688  D003               	goto	u2460
  9766   00168A  6A57               	clrf	??_CantaPartBaixa^0,c
  9767   00168C  2A57               	incf	??_CantaPartBaixa^0,f,c
  9768   00168E  D001               	goto	u2478
  9769   001690                     u2460:
  9770   001690  6A57               	clrf	??_CantaPartBaixa^0,c
  9771   001692                     u2478:
  9772   001692  508D               	movf	141,w,c	;volatile
  9773   001694  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9774   001696  0BFE               	andlw	-2
  9775   001698  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9776   00169A  6E8D               	movwf	141,c	;volatile
  9777                           
  9778                           ;TAD_DISPLAY.c: 217:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9779   00169C  A458               	btfss	CantaPartBaixa@c^0,2,c
  9780   00169E  D003               	goto	u2480
  9781   0016A0  6A57               	clrf	??_CantaPartBaixa^0,c
  9782   0016A2  2A57               	incf	??_CantaPartBaixa^0,f,c
  9783   0016A4  D001               	goto	u2498
  9784   0016A6                     u2480:
  9785   0016A6  6A57               	clrf	??_CantaPartBaixa^0,c
  9786   0016A8                     u2498:
  9787   0016A8  4657               	rlncf	??_CantaPartBaixa^0,f,c
  9788   0016AA  508D               	movf	141,w,c	;volatile
  9789   0016AC  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9790   0016AE  0BFD               	andlw	-3
  9791   0016B0  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9792   0016B2  6E8D               	movwf	141,c	;volatile
  9793                           
  9794                           ;TAD_DISPLAY.c: 218:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  9795   0016B4  A258               	btfss	CantaPartBaixa@c^0,1,c
  9796   0016B6  D003               	goto	u2500
  9797   0016B8  6A57               	clrf	??_CantaPartBaixa^0,c
  9798   0016BA  2A57               	incf	??_CantaPartBaixa^0,f,c
  9799   0016BC  D001               	goto	u2518
  9800   0016BE                     u2500:
  9801   0016BE  6A57               	clrf	??_CantaPartBaixa^0,c
  9802   0016C0                     u2518:
  9803   0016C0  3A57               	swapf	??_CantaPartBaixa^0,f,c
  9804   0016C2  4657               	rlncf	??_CantaPartBaixa^0,f,c
  9805   0016C4  508A               	movf	138,w,c	;volatile
  9806   0016C6  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9807   0016C8  0BDF               	andlw	-33
  9808   0016CA  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9809   0016CC  6E8A               	movwf	138,c	;volatile
  9810                           
  9811                           ;TAD_DISPLAY.c: 219:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  9812   0016CE  A058               	btfss	CantaPartBaixa@c^0,0,c
  9813   0016D0  D003               	goto	u2520
  9814   0016D2  6A57               	clrf	??_CantaPartBaixa^0,c
  9815   0016D4  2A57               	incf	??_CantaPartBaixa^0,f,c
  9816   0016D6  D001               	goto	u2538
  9817   0016D8                     u2520:
  9818   0016D8  6A57               	clrf	??_CantaPartBaixa^0,c
  9819   0016DA                     u2538:
  9820   0016DA  3A57               	swapf	??_CantaPartBaixa^0,f,c
  9821   0016DC  508A               	movf	138,w,c	;volatile
  9822   0016DE  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9823   0016E0  0BEF               	andlw	-17
  9824   0016E2  1857               	xorwf	??_CantaPartBaixa^0,w,c
  9825   0016E4  6E8A               	movwf	138,c	;volatile
  9826   0016E6  0012               	return		;funcret
  9827   0016E8                     __end_of_CantaPartBaixa:
  9828                           	callstack 0
  9829                           
  9830 ;; *************** function _CantaPartAlta *****************
  9831 ;; Defined at:
  9832 ;;		line 208 in file "TAD_DISPLAY.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;  c               1    wreg     unsigned char 
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;  c               1    2[COMRAM] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, status,2, status,0
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1
  9846 ;;      Params:         0       0       0
  9847 ;;      Locals:         1       0       0
  9848 ;;      Temps:          1       0       0
  9849 ;;      Totals:         2       0       0
  9850 ;;Total ram usage:        2 bytes
  9851 ;; Hardware stack levels used: 1
  9852 ;; Hardware stack levels required when called: 3
  9853 ;; This function calls:
  9854 ;;		Nothing
  9855 ;; This function is called by:
  9856 ;;		_CantaIR
  9857 ;;		_CantaData
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           	psect	text52
  9862   0016E8                     __ptext52:
  9863                           	callstack 0
  9864   0016E8                     _CantaPartAlta:
  9865                           	callstack 23
  9866                           
  9867                           ;incstack = 0
  9868                           ;CantaPartAlta@c stored from wreg
  9869   0016E8  6E58               	movwf	CantaPartAlta@c^0,c
  9870                           
  9871                           ;TAD_DISPLAY.c: 209:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  9872   0016EA  AE58               	btfss	CantaPartAlta@c^0,7,c
  9873   0016EC  D003               	goto	u2380
  9874   0016EE  6A57               	clrf	??_CantaPartAlta^0,c
  9875   0016F0  2A57               	incf	??_CantaPartAlta^0,f,c
  9876   0016F2  D001               	goto	u2398
  9877   0016F4                     u2380:
  9878   0016F4  6A57               	clrf	??_CantaPartAlta^0,c
  9879   0016F6                     u2398:
  9880   0016F6  508D               	movf	141,w,c	;volatile
  9881   0016F8  1857               	xorwf	??_CantaPartAlta^0,w,c
  9882   0016FA  0BFE               	andlw	-2
  9883   0016FC  1857               	xorwf	??_CantaPartAlta^0,w,c
  9884   0016FE  6E8D               	movwf	141,c	;volatile
  9885                           
  9886                           ;TAD_DISPLAY.c: 210:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9887   001700  AC58               	btfss	CantaPartAlta@c^0,6,c
  9888   001702  D003               	goto	u2400
  9889   001704  6A57               	clrf	??_CantaPartAlta^0,c
  9890   001706  2A57               	incf	??_CantaPartAlta^0,f,c
  9891   001708  D001               	goto	u2418
  9892   00170A                     u2400:
  9893   00170A  6A57               	clrf	??_CantaPartAlta^0,c
  9894   00170C                     u2418:
  9895   00170C  4657               	rlncf	??_CantaPartAlta^0,f,c
  9896   00170E  508D               	movf	141,w,c	;volatile
  9897   001710  1857               	xorwf	??_CantaPartAlta^0,w,c
  9898   001712  0BFD               	andlw	-3
  9899   001714  1857               	xorwf	??_CantaPartAlta^0,w,c
  9900   001716  6E8D               	movwf	141,c	;volatile
  9901                           
  9902                           ;TAD_DISPLAY.c: 211:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  9903   001718  AA58               	btfss	CantaPartAlta@c^0,5,c
  9904   00171A  D003               	goto	u2420
  9905   00171C  6A57               	clrf	??_CantaPartAlta^0,c
  9906   00171E  2A57               	incf	??_CantaPartAlta^0,f,c
  9907   001720  D001               	goto	u2438
  9908   001722                     u2420:
  9909   001722  6A57               	clrf	??_CantaPartAlta^0,c
  9910   001724                     u2438:
  9911   001724  3A57               	swapf	??_CantaPartAlta^0,f,c
  9912   001726  4657               	rlncf	??_CantaPartAlta^0,f,c
  9913   001728  508A               	movf	138,w,c	;volatile
  9914   00172A  1857               	xorwf	??_CantaPartAlta^0,w,c
  9915   00172C  0BDF               	andlw	-33
  9916   00172E  1857               	xorwf	??_CantaPartAlta^0,w,c
  9917   001730  6E8A               	movwf	138,c	;volatile
  9918                           
  9919                           ;TAD_DISPLAY.c: 212:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  9920   001732  A858               	btfss	CantaPartAlta@c^0,4,c
  9921   001734  D003               	goto	u2440
  9922   001736  6A57               	clrf	??_CantaPartAlta^0,c
  9923   001738  2A57               	incf	??_CantaPartAlta^0,f,c
  9924   00173A  D001               	goto	u2458
  9925   00173C                     u2440:
  9926   00173C  6A57               	clrf	??_CantaPartAlta^0,c
  9927   00173E                     u2458:
  9928   00173E  3A57               	swapf	??_CantaPartAlta^0,f,c
  9929   001740  508A               	movf	138,w,c	;volatile
  9930   001742  1857               	xorwf	??_CantaPartAlta^0,w,c
  9931   001744  0BEF               	andlw	-17
  9932   001746  1857               	xorwf	??_CantaPartAlta^0,w,c
  9933   001748  6E8A               	movwf	138,c	;volatile
  9934   00174A  0012               	return		;funcret
  9935   00174C                     __end_of_CantaPartAlta:
  9936                           	callstack 0
  9937                           
  9938 ;; *************** function _LowRSI *****************
  9939 ;; Defined at:
  9940 ;;		line 34 in file "main.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;		None
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;		None
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      void 
  9947 ;; Registers used:
  9948 ;;		None
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMRAM   BANK0   BANK1
  9954 ;;      Params:         0       0       0
  9955 ;;      Locals:         0       0       0
  9956 ;;      Temps:          1       0       0
  9957 ;;      Totals:         1       0       0
  9958 ;;Total ram usage:        1 bytes
  9959 ;; Hardware stack levels used: 1
  9960 ;; Hardware stack levels required when called: 2
  9961 ;; This function calls:
  9962 ;;		Nothing
  9963 ;; This function is called by:
  9964 ;;		Interrupt level 1
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	intcodelo
  9969   000018                     __pintcodelo:
  9970                           	callstack 0
  9971   000018                     _LowRSI:
  9972                           	callstack 21
  9973                           
  9974                           ;incstack = 0
  9975   000018  807E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9976   00001A  CFE0 F056          	movff	bsr,??_LowRSI
  9977   00001E  C056  FFE0         	movff	??_LowRSI,bsr
  9978   000022  907E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9979   000024  0010               	retfie	
  9980   000026                     __end_of_LowRSI:
  9981                           	callstack 0
  9982                           
  9983 ;; *************** function _HighRSI *****************
  9984 ;; Defined at:
  9985 ;;		line 30 in file "main.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  1    wreg      void 
  9992 ;; Registers used:
  9993 ;;		wreg, status,2, status,0, cstack
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMRAM   BANK0   BANK1
  9999 ;;      Params:         0       0       0
 10000 ;;      Locals:         0       0       0
 10001 ;;      Temps:          0       0       0
 10002 ;;      Totals:         0       0       0
 10003 ;;Total ram usage:        0 bytes
 10004 ;; Hardware stack levels used: 1
 10005 ;; Hardware stack levels required when called: 1
 10006 ;; This function calls:
 10007 ;;		_RSI_Timer0
 10008 ;; This function is called by:
 10009 ;;		Interrupt level 2
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           	psect	intcode
 10014   000008                     __pintcode:
 10015                           	callstack 0
 10016   000008                     _HighRSI:
 10017                           	callstack 21
 10018                           
 10019                           ;incstack = 0
 10020   000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10021   00000A  EF44  F00E         	goto	int_func
 10022                           
 10023                           	psect	intcode_body
 10024   001C88                     __pintcode_body:
 10025                           	callstack 21
 10026   001C88                     int_func:
 10027                           	callstack 21
 10028                           
 10029                           ;main.c: 32:      motor_RFID();
 10030   001C88  B4F2               	btfsc	242,2,c	;volatile
 10031   001C8A  EC05  F00E         	call	_RSI_Timer0	;wreg free
 10032   001C8E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10033   001C90  0011               	retfie		f
 10034   001C92                     __end_of_HighRSI:
 10035                           	callstack 0
 10036                           
 10037 ;; *************** function _RSI_Timer0 *****************
 10038 ;; Defined at:
 10039 ;;		line 25 in file "TAD_TIMER.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;		None
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;		None
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      void 
 10046 ;; Registers used:
 10047 ;;		wreg, status,2, status,0
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1
 10053 ;;      Params:         0       0       0
 10054 ;;      Locals:         0       0       0
 10055 ;;      Temps:          0       0       0
 10056 ;;      Totals:         0       0       0
 10057 ;;Total ram usage:        0 bytes
 10058 ;; Hardware stack levels used: 1
 10059 ;; This function calls:
 10060 ;;		Nothing
 10061 ;; This function is called by:
 10062 ;;		_HighRSI
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text55
 10067   001C0A                     __ptext55:
 10068                           	callstack 0
 10069   001C0A                     _RSI_Timer0:
 10070                           	callstack 21
 10071                           
 10072                           ;TAD_TIMER.c: 27:     TMR0=63036;
 10073                           
 10074                           ;incstack = 0
 10075   001C0A  0EF6               	movlw	246
 10076   001C0C  6ED7               	movwf	215,c	;volatile
 10077   001C0E  0E3C               	movlw	60
 10078   001C10  6ED6               	movwf	214,c	;volatile
 10079                           
 10080                           ;TAD_TIMER.c: 28:     TMR0IF=0;
 10081   001C12  94F2               	bcf	4082,2,c	;volatile
 10082                           
 10083                           ;TAD_TIMER.c: 29:     Tics++;
 10084   001C14  0E01               	movlw	1
 10085   001C16  2607               	addwf	_Tics^0,f,c	;volatile
 10086   001C18  0E00               	movlw	0
 10087   001C1A  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
 10088   001C1C  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
 10089   001C1E  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
 10090   001C20  0012               	return		;funcret
 10091   001C22                     __end_of_RSI_Timer0:
 10092                           	callstack 0
 10093                           
 10094                           	psect	rparam
 10095   000001                     ___rparam_used  equ	1
 10096   000000                     ___param_bank   equ	0
 10097   000000                     __Lparam        equ	__Lrparam
 10098   000000                     __Hparam        equ	__Hrparam
 10099                           
 10100                           	psect	temp
 10101   00007E                     btemp:
 10102                           	callstack 0
 10103   00007E                     	ds	1
 10104   00007E                     int$flags       set	btemp
 10105   00007F                     wtemp8          set	btemp+1
 10106   00007F                     ttemp5          set	btemp+1
 10107   000082                     ttemp6          set	btemp+4
 10108   000086                     ttemp7          set	btemp+8
 10109                           
 10110                           	psect	idloc
 10111                           
 10112                           ;Config register IDLOC0 @ 0x200000
 10113                           ;	unspecified, using default values
 10114   200000                     	org	2097152
 10115   200000  FF                 	db	255
 10116                           
 10117                           ;Config register IDLOC1 @ 0x200001
 10118                           ;	unspecified, using default values
 10119   200001                     	org	2097153
 10120   200001  FF                 	db	255
 10121                           
 10122                           ;Config register IDLOC2 @ 0x200002
 10123                           ;	unspecified, using default values
 10124   200002                     	org	2097154
 10125   200002  FF                 	db	255
 10126                           
 10127                           ;Config register IDLOC3 @ 0x200003
 10128                           ;	unspecified, using default values
 10129   200003                     	org	2097155
 10130   200003  FF                 	db	255
 10131                           
 10132                           ;Config register IDLOC4 @ 0x200004
 10133                           ;	unspecified, using default values
 10134   200004                     	org	2097156
 10135   200004  FF                 	db	255
 10136                           
 10137                           ;Config register IDLOC5 @ 0x200005
 10138                           ;	unspecified, using default values
 10139   200005                     	org	2097157
 10140   200005  FF                 	db	255
 10141                           
 10142                           ;Config register IDLOC6 @ 0x200006
 10143                           ;	unspecified, using default values
 10144   200006                     	org	2097158
 10145   200006  FF                 	db	255
 10146                           
 10147                           ;Config register IDLOC7 @ 0x200007
 10148                           ;	unspecified, using default values
 10149   200007                     	org	2097159
 10150   200007  FF                 	db	255
 10151                           
 10152                           	psect	config
 10153                           
 10154                           ; Padding undefined space
 10155   300000                     	org	3145728
 10156   300000  FF                 	db	255
 10157                           
 10158                           ;Config register CONFIG1H @ 0x300001
 10159                           ;	Oscillator
 10160                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10161                           ;	Fail-Safe Clock Monitor Enable bit
 10162                           ;	FCMEN = 0x0, unprogrammed default
 10163                           ;	Internal/External Oscillator Switchover bit
 10164                           ;	IESO = 0x0, unprogrammed default
 10165   300001                     	org	3145729
 10166   300001  06                 	db	6
 10167                           
 10168                           ;Config register CONFIG2L @ 0x300002
 10169                           ;	Power-up Timer Enable bit
 10170                           ;	PWRT = OFF, PWRT disabled
 10171                           ;	Brown-out Reset Enable bits
 10172                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10173                           ;	Brown-out Reset Voltage bits
 10174                           ;	BORV = 0x3, unprogrammed default
 10175   300002                     	org	3145730
 10176   300002  19                 	db	25
 10177                           
 10178                           ;Config register CONFIG2H @ 0x300003
 10179                           ;	Watchdog Timer Enable bit
 10180                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10181                           ;	Watchdog Timer Postscale Select bits
 10182                           ;	WDTPS = 0xF, unprogrammed default
 10183   300003                     	org	3145731
 10184   300003  1E                 	db	30
 10185                           
 10186                           ; Padding undefined space
 10187   300004                     	org	3145732
 10188   300004  FF                 	db	255
 10189                           
 10190                           ;Config register CONFIG3H @ 0x300005
 10191                           ;	CCP2 MUX bit
 10192                           ;	CCP2MX = 0x1, unprogrammed default
 10193                           ;	PORTB A/D Enable bit
 10194                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10195                           ;	Low-Power Timer1 Oscillator Enable bit
 10196                           ;	LPT1OSC = 0x0, unprogrammed default
 10197                           ;	MCLR Pin Enable bit
 10198                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10199   300005                     	org	3145733
 10200   300005  81                 	db	129
 10201                           
 10202                           ;Config register CONFIG4L @ 0x300006
 10203                           ;	Stack Full/Underflow Reset Enable bit
 10204                           ;	STVREN = 0x1, unprogrammed default
 10205                           ;	Single-Supply ICSP Enable bit
 10206                           ;	LVP = OFF, Single-Supply ICSP disabled
 10207                           ;	Boot Block Size Select bits
 10208                           ;	BBSIZ = 0x0, unprogrammed default
 10209                           ;	Extended Instruction Set Enable bit
 10210                           ;	XINST = 0x0, unprogrammed default
 10211                           ;	Background Debugger Enable bit
 10212                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10213   300006                     	org	3145734
 10214   300006  81                 	db	129
 10215                           
 10216                           ; Padding undefined space
 10217   300007                     	org	3145735
 10218   300007  FF                 	db	255
 10219                           
 10220                           ;Config register CONFIG5L @ 0x300008
 10221                           ;	unspecified, using default values
 10222                           ;	Code Protection bit
 10223                           ;	CP0 = 0x1, unprogrammed default
 10224                           ;	Code Protection bit
 10225                           ;	CP1 = 0x1, unprogrammed default
 10226   300008                     	org	3145736
 10227   300008  03                 	db	3
 10228                           
 10229                           ;Config register CONFIG5H @ 0x300009
 10230                           ;	unspecified, using default values
 10231                           ;	Boot Block Code Protection bitProtect Boot
 10232                           ;	CPB = 0x1, unprogrammed default
 10233                           ;	Data EEPROM Code Protection bit
 10234                           ;	CPD = 0x1, unprogrammed default
 10235   300009                     	org	3145737
 10236   300009  C0                 	db	192
 10237                           
 10238                           ;Config register CONFIG6L @ 0x30000A
 10239                           ;	unspecified, using default values
 10240                           ;	Write Protection bit
 10241                           ;	WRT0 = 0x1, unprogrammed default
 10242                           ;	Write Protection bit
 10243                           ;	WRT1 = 0x1, unprogrammed default
 10244   30000A                     	org	3145738
 10245   30000A  03                 	db	3
 10246                           
 10247                           ;Config register CONFIG6H @ 0x30000B
 10248                           ;	unspecified, using default values
 10249                           ;	Configuration Register Write Protection bit
 10250                           ;	WRTC = 0x1, unprogrammed default
 10251                           ;	Boot Block Write Protection bit
 10252                           ;	WRTB = 0x1, unprogrammed default
 10253                           ;	Data EEPROM Write Protection bit
 10254                           ;	WRTD = 0x1, unprogrammed default
 10255   30000B                     	org	3145739
 10256   30000B  E0                 	db	224
 10257                           
 10258                           ;Config register CONFIG7L @ 0x30000C
 10259                           ;	unspecified, using default values
 10260                           ;	Table Read Protection bit
 10261                           ;	EBTR0 = 0x1, unprogrammed default
 10262                           ;	Table Read Protection bit
 10263                           ;	EBTR1 = 0x1, unprogrammed default
 10264   30000C                     	org	3145740
 10265   30000C  03                 	db	3
 10266                           
 10267                           ;Config register CONFIG7H @ 0x30000D
 10268                           ;	unspecified, using default values
 10269                           ;	Boot Block Table Read Protection bit
 10270                           ;	EBTRB = 0x1, unprogrammed default
 10271   30000D                     	org	3145741
 10272   30000D  40                 	db	64
 10273                           tosu	equ	0xFFF
 10274                           tosh	equ	0xFFE
 10275                           tosl	equ	0xFFD
 10276                           stkptr	equ	0xFFC
 10277                           pclatu	equ	0xFFB
 10278                           pclath	equ	0xFFA
 10279                           pcl	equ	0xFF9
 10280                           tblptru	equ	0xFF8
 10281                           tblptrh	equ	0xFF7
 10282                           tblptrl	equ	0xFF6
 10283                           tablat	equ	0xFF5
 10284                           prodh	equ	0xFF4
 10285                           prodl	equ	0xFF3
 10286                           indf0	equ	0xFEF
 10287                           postinc0	equ	0xFEE
 10288                           postdec0	equ	0xFED
 10289                           preinc0	equ	0xFEC
 10290                           plusw0	equ	0xFEB
 10291                           fsr0h	equ	0xFEA
 10292                           fsr0l	equ	0xFE9
 10293                           wreg	equ	0xFE8
 10294                           indf1	equ	0xFE7
 10295                           postinc1	equ	0xFE6
 10296                           postdec1	equ	0xFE5
 10297                           preinc1	equ	0xFE4
 10298                           plusw1	equ	0xFE3
 10299                           fsr1h	equ	0xFE2
 10300                           fsr1l	equ	0xFE1
 10301                           bsr	equ	0xFE0
 10302                           indf2	equ	0xFDF
 10303                           postinc2	equ	0xFDE
 10304                           postdec2	equ	0xFDD
 10305                           preinc2	equ	0xFDC
 10306                           plusw2	equ	0xFDB
 10307                           fsr2h	equ	0xFDA
 10308                           fsr2l	equ	0xFD9
 10309                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    29
    Data        40
    BSS         237
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     33     125
    BANK0           128      0     105
    BANK1           256      0      80

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(BANK0[6]), printfUID@leds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[30]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    printfUID@extraString	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_13(CODE[8]), STR_17(CODE[21]), STR_9(CODE[8]), 

    printfUID@ptr	PTR unsigned char  size(2) Largest target is 80
		 -> printfUID@buffer(BANK1[80]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(BANK0[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[30]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> card_timer(COMRAM[1]), timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_DATOS$F903(COMRAM[1]), 
		 -> timer_teclado(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_motor_setCurrentUser
    _motor_setCurrentUser->_printfUID
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _printfUID->_motor_StartSendString
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_setLEDIntensity
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _initData->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11394
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          1     1      0    2029
                                             31 COMRAM     1     1      0
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1214
                                             30 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     734
                                             22 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           5     5      0    3310
                                             28 COMRAM     5     5      0
                         _TI_GetTics
                       _TI_ResetTics
                       _getActualUID
                _getCurrentUserIndex
                         _motor_Read
              _motor_StartSendString
                        _motor_Write
               _motor_setCurrentUser
                   _newConfiguration
                           _setIndex
                 _setStartSendString
 ---------------------------------------------------------------------------------
 (2) _setIndex                                             1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _motor_setCurrentUser                                 5     1      4    2098
                                             23 COMRAM     5     1      4
                          _printfUID
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                          11    11      0     852
                                             14 COMRAM    11    11      0
                         _TI_GetTics
                       _TI_ResetTics
                         _controlLED
                      _getActualLeds
 ---------------------------------------------------------------------------------
 (2) _controlLED                                           4     3      1     186
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        2     2      0    2288
                                             23 COMRAM     2     2      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                _getCurrentUserIndex
                   _motor_SendString
              _motor_StartSendString
                   _newConfiguration
                          _printfUID
                     _saveHourToData
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           16    12      4    1509
                                              7 COMRAM    16    12      4
                      _getActualLeds
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _getActualLeds                                        4     2      2     294
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _newConfiguration                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentUserIndex                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         5     3      2     386
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     519
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
              _motor_StartSendString
                          _resetData
                             _setLed
                 _setStartSendString
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setStartSendString                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetData                                            2     2      0     136
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      66
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     116
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     800
                                             12 COMRAM     1     1      0
                        _TI_NewTimer
                       _TI_ResetTics
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     116
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             4     4      0     410
                                              4 COMRAM     4     4      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     886
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     161
                             _Espera
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4     161
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     116
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
     _TI_NewTimer
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _TI_NewTimer
     _TI_ResetTics
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _motor_StartSendString
       _motor_SendString
         _motor_SendChar
           _Terminal_TXAvailable
     _resetData
     _setLed
       _setLEDIntensity
     _setStartSendString
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _getCurrentUserIndex
     _motor_SendString
     _motor_StartSendString
     _newConfiguration
     _printfUID
       _getActualLeds
       _motor_StartSendString
     _saveHourToData
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _controlLED
     _getActualLeds
   _motor_RFID
     _TI_GetTics
     _TI_ResetTics
     _getActualUID
     _getCurrentUserIndex
     _motor_Read
     _motor_StartSendString
     _motor_Write
     _motor_setCurrentUser
       _printfUID
     _newConfiguration
     _setIndex
     _setStartSendString
   _motor_datos
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _TI_GetTics
     _TI_ResetTics

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      80     31.2%
BITBANK0           128      0       0      0.0%
BANK0              128      0     105     82.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     33     125     99.2%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     309      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Apr 01 16:17:59 2025

                     setIndex@indexActual 0057                     ?_Terminal_ReceiveChar 0056  
                              _RSI_Timer0 1C0A                  setLEDIntensity@intensity 0058  
                              _TI_GetTics 1910                                        bsr 0FE0  
                             _state_write 0052                                       l121 1368  
                                     l212 1106                                       l302 1326  
                                     l214 1150                                       l128 13A8  
                                     l412 0188                                       l258 1BFE  
                                     l274 161C                                       l429 022A  
                                     l560 1BBE                                       l297 12CE  
                                     l651 1BA2                                       l469 0404  
                                     l566 1750                                       l567 1782  
                                     l808 189C                                       l577 0EDE  
                                     l871 0C48                                       l776 17C2  
                                     l785 1AAA                                       l794 15F2  
                                     l795 15DC                                       l884 0CF6  
                                     u610 1426                                       u630 1440  
                                     u608 1410                                       u570 13F8  
                                     u628 1428                                       u590 140E  
                                     u648 1442                                       u588 13FA  
                            printfUID@hex 1E2B                              printfUID@val 0069  
                        ??_CantaPartBaixa 0057                              printfUID@ptr 006B  
                                     prod 0FF3                                       wreg 0FE8  
                    printfUID@extraString 005F                                      l2310 1758  
                                    l2312 175C                                      l2320 1766  
                                    l2314 1762                                      l4010 0EC0  
                                    l2308 1754                                      l4008 0E94  
                                    l5000 0D3C                                      l4202 17AE  
                                    l4122 11DE                                      l4034 1A0C  
                                    l4140 1252                                      l3404 1568  
                                    l4028 19F4                                      l4300 0F62  
                                    l5012 1986                                      l4230 17E8  
                                    l4118 11C8                                      l3414 159A  
                                    l4046 1AAC                                      l3502 13B0  
                                    l4216 17C4                                      l3408 1596  
                                    l3504 13C6                                      l4090 1AD4  
                                    l4306 0F70                                      l4066 1C24  
                                    l4410 0AB4                                      l4402 0AA0  
                                    l4164 1000                                      l4316 0FA2  
                                    l4260 0EF8                                      l4244 0ECC  
                                    l3452 1878                                      l4420 0AD2  
                                    l4500 00A6                                      l3470 1C00  
                                    l4254 0EEA                                      l4326 0FB4  
                                    l3462 189E                                      l3630 085A  
                                    l3614 07EC                                      l4078 1B2C  
                                    l4430 0B02                                      l4334 099E  
                                    l4510 00D8                                      l4502 00B8  
                                    l3704 19A2                                      l3384 1A16  
                                    l3392 153A                                      l4272 0F14  
                                    l4248 0ED8                                      l3552 06C4  
                                    l4512 00E6                                      l3480 1344  
                                    l4266 0F06                                      l3562 06EC  
                                    l4610 0248                               _TI_NewTimer 199E  
                                    l3708 19AC                                      l3812 1296  
                                    l3396 153E                                      l3652 08A0  
                                    l3556 06CE                                      l4436 0B10  
                                    l4380 0A4C                                      l4364 0A08  
                                    l4356 09EC                                      l4348 09D0  
                                    l4620 0268                                      l4604 0230  
                                    l4524 0104                                      l4516 00F0  
                                    l3492 1378                                      l3484 1352  
                                    l3732 147A                                      l3830 12B8  
                                    l4278 0F20                                      l4446 0B2E  
                                    l4702 03F4                                      l4630 02A6  
                                    l4622 0294                                      l4550 016E  
                                    l4542 013C                                      l4526 0112  
                                    l3734 1486                                      l4296 0F56  
                                    l3904 15F4                                      l4384 0A54  
                                    l4464 0B78                                      l3760 18DE  
                                    l4800 055A                                      l4632 0316  
                                    l3496 1388                                      l3752 14BA  
                                    l3744 14A0                                      l3826 12B4  
                                    l3586 076A                                      l3594 079A  
                                    l4394 0A88                                      l4378 0A40  
                                    l3762 18EE                                      l3922 0D92  
                                    l4802 0560                                      l4650 0356  
                                    l4546 014E                                      l4538 012C  
                                    l3746 14AC                                      l4396 0A8E  
                                    l4740 0458                                      l4724 0430  
                                    l4716 0414                                      l4660 0376  
                                    l4636 0326                                      l4572 01B4  
                                    l4564 0198                                      l4548 0160  
                                    l4492 007E                                      l4484 0066  
                                    l4476 0048                                      l3854 131E  
                                    l3782 1634                                      l3678 0946  
                                    l3950 0DDC                                      l4830 05B0  
                                    l4822 05A8                                      l4742 0466  
                                    l4638 033C                                      l4590 01EC  
                                    l4574 01C2                                      l4910 0C06  
                                    l3864 132A                                      l3784 164A  
                                    l3768 1902                                      l3952 0DE0  
                                    l3936 0DAE                                      l4752 048C  
                                    l4728 043E                                      l4672 0386  
                                    l4592 01F6                                      l4576 01CC  
                                    l4920 0C1C                                      l4912 0C0A  
                                    l4770 04D4                                      l4690 03BE  
                                    l4674 0394                                      l4658 0368  
                                    l4594 0204                                      l4914 0C0E  
                                    l3796 166C                                      l3884 15BE  
                                    l3980 0E44                                      l3964 0E10  
                                    l3948 0DD8                                      l4844 05DA  
                                    l4836 05CE                                      l4764 04BC  
                                    l4940 0C7A                                      l4916 0C12  
                                    l3798 1680                                      l3894 15DE  
                                    l3966 0E14                                      l4790 0532  
                                    l4758 04A4                                      l4694 03D0  
                                    l4686 03AE                                      l4950 0C94  
                                    l4942 0C80                                      l4926 0C32  
                                    l4918 0C14                                      l4880 1152  
                                    l4872 1146                                      l3992 0E70  
                                    l4784 051E                                      l4776 04EC  
                                    l4848 068C                                      l4960 0CB6  
                                    l4944 0C86                                      l4928 0C38  
                                    l3994 0E74                                      l3978 0E40  
                                    l4698 03E2                                      l4970 0CD2  
                                    l4938 0C6E                                      l4868 112E  
                                    l3996 0E7A                                      l4796 054E  
                                    l4980 0CFC                                      l4972 0CD8  
                                    l4964 0CC4                                      l4886 1194  
                                    l4966 0CCA                                      l4958 0CB0  
                                    l4992 0D32                                      l4984 0D0A  
                                    l4978 0CF0                                      l4988 0D16  
                                    STR_1 1EDC                                      STR_2 1FA0  
                                    STR_3 1F82                                      STR_4 1FD3  
                                    STR_5 1EA7                                      STR_6 1E48  
                                    STR_7 1FE2                                      STR_8 1F1F  
                                    STR_9 1FF7                                      _LATA 0F89  
                                    u2400 170A                                      _LATD 0F8C  
                                    u3050 12E0                                      u2420 1722  
                                    u2500 16BE                                      u2350 1C40  
                                    u2440 173C                                      u2520 16D8  
                                    u2418 170C                                      u3058 12E2  
                                    u3410 1C84                                      u2380 16F4  
                                    u2460 1690                                      u3500 121E  
                                    u2540 155E                                      u2438 1724  
                                    u2518 16C0                                      u3510 122E  
                                    u2358 1C42                                      u2480 16A6  
                                    u3520 123E                                      u2560 1588  
                                    u2720 06B6                                      u4320 0554  
                                    u2458 173E                                      u2538 16DA  
                                    u4410 1126                                      u2547 1554  
                                    u2398 16F6                                      u2478 1692  
                                    u3550 10C8                                      u3470 11EE  
                                    u4270 0514                                      u2567 157E  
                                    u2680 181C                                      u3480 11FE  
                                    u3640 0F42                                      u3720 09B2  
                                    u4280 0516                                      u2498 16A8  
                                    u3490 120E                                      u3730 09B8  
                                    u4530 0C28                                      u3670 0F88  
                                    u4470 0BD0                                      u2698 181E  
                                    u3950 009A                                      u3960 00EC  
                                    _TMR0 0FD6                  setLEDIntensity@userIndex 0059  
                              _ActualLeds 00BD                                      _Tics 0007  
                                    _Rows 003F                          motor_datos@state 001A  
                                    _main 195C                             printfUID@leds 0063  
                                    fsr1h 0FE2                                      fsr2h 0FDA  
                                    indf1 0FE7                                      indf2 0FDF  
                                    fsr1l 0FE1                                      fsr2l 0FD9  
                                    btemp 007E                           __end_of_TI_Init 1AFC  
                                    prodh 0FF4                                      prodl 0FF3  
                                    start 0026                           __end_of_CantaIR 1AA8  
                         __end_of_HighRSI 1C92                             LcInit@columns 006C  
                            ___param_bank 0000                              ?_initTeclado 0056  
                         motor_LEDs@i_461 006E                             processBit@val 0059  
                             Espera@Timer 0064                                     ?_main 0056  
                                   STR_10 1EFE                                     STR_11 1FE2  
                                   STR_12 1FE5                                     STR_13 1FF7  
                                   STR_14 1FE2                                     STR_15 1F61  
                                   STR_16 1F40                                     STR_17 1FBE  
                                   _T0CON 0FD5                                     _RCREG 0FAE  
                                   _RCSTA 0FAB                                     _SPBRG 0FAF  
                                   _PORTD 0F83                                     _TRISA 0F92  
                                   _TRISD 0F95                                     _TRISE 0F96  
                                   _TXREG 0FAD                                     _TXSTA 0FAC  
                    __end_of_getActualUID 1618                                     _Filas 0027  
                  ??_motor_setCurrentUser 0071                                     _Timer 0055  
                         motor_RFID@irqEn 0038                                     _index 007D  
                         motor_RFID@unLen 0011                              _TI_ResetTics 1B4A  
                                   _tecla 0025                           motor_RFID@value 0028  
                      getActualLeds@i_922 005A                           motor_RFID@state 003A  
                                   _timer 0054                                     _state 0024  
                     motor_Read@bit_count 004D                                     tablat 0FF5  
                                   ttemp5 007F                                     ttemp6 0082  
                                   ttemp7 0086                            _saveHourToData 1B24  
                                   status 0FD8                                     wtemp8 007F  
                      Terminal_SendChar@c 005A                          __end_of_LcGotoXY 13DC  
                        __end_of_GetTecla 17AC                  __end_of_newConfiguration 1CB0  
                 EscriuPrimeraOrdre@ordre 0058                    ??_Terminal_ReceiveChar 0057  
                         __initialization 14C6                              __end_of_main 199E  
                             ?_RSI_Timer0 0056                            TI_Init@counter 0057  
                             ?_TI_GetTics 0057                     _motor_StartSendString 1BC2  
                          _controlLED$455 0058                                    ??_main 0077  
                           __activetblptr 0002                  motor_setCurrentUser@UID0 0071  
                motor_setCurrentUser@UID1 006D                  motor_setCurrentUser@UID2 006E  
                motor_setCurrentUser@UID3 006F                  motor_setCurrentUser@UID4 0070  
                                  _ADCON1 0FC1                                 ??_TI_Init 0057  
                  __end_of_saveHourToData 1B4A                                 ??_CantaIR 0059  
                          LcGotoXY@Fisics 0071                            LcGotoXY@Column 0073  
                           ??_WaitForBusy 006C                                    _TMR0IF 7F92  
                               ??_HighRSI 0056                                    _LcInit 0FDC  
                   __end_of_getActualLeds 18C2                          __end_of_delay_us 1C0A  
                          getActualLeds@i 0059                                    _Espera 1A10  
                                  _LowRSI 0018                              _LcGotoXY$404 006F  
                                  _RowAct 003D                                    _Timers 009E  
                      motor_datos@pointer 0019                          __end_of_initRFID 1272  
                      motorTerminal@index 001F                          __end_of_initData 180C  
                        __end_of_initLeds 1C7C                        motorTerminal@state 0020  
                                  _keymap 1E3C                                    clear_0 150C  
                                  clear_1 1518                                    clear_2 1524  
                                  _setLed 19DA                           printfUID@buffer 0100  
                            ?_motor_Write 005E                                    isa$std 0001  
                            ?_motor_datos 0056                          __end_of_setIndex 1C9A  
                            __pdataCOMRAM 0077                              __mediumconst 1E2A  
                         _setLEDIntensity 1AFC                                    tblptrh 0FF7  
                                  tblptrl 0FF6                                    tblptru 0FF8  
                       __end_of_CantaData 1A76                     __end_of_Terminal_Init 1C6E  
                         ?_saveHourToData 0057                                __accesstop 0080  
                 __end_of__initialization 152A                         __end_of_LcPutChar 14C6  
                         delay_us@howMany 0057                             ___rparam_used 0001  
                      _setStartSendString 1CB0                             setLed@modeLED 0016  
                          __pcstackCOMRAM 0056                       __end_of_WaitForBusy 1C5E  
                            __pidataBANK0 1B6E                       ?_setStartSendString 0056  
                  ?_motor_StartSendString 005B                      TI_NewTimer@Comptador 0059  
             motor_RFID@operation_pending 002A                          _motor_SendString 1538  
                     processBit@bit_count 005A                                 ?_LcGotoXY 006C  
                               ?_GetTecla 0056                      ??_setStartSendString 0057  
                            ?_TI_NewTimer 0057                                __pbssBANK0 0080  
                              __pbssBANK1 0100                                _card_timer 0051  
                             setLed@tecla 005A                     __end_of_motorTerminal 0BB8  
                                 ?_LcInit 006C                             _CantaPartAlta 16E8  
                  TI_NewTimer@TimerHandle 0057                                   ?_Espera 0064  
                                 ?_LowRSI 0056                              _getActualUID 15AA  
                         processBit@state 005B                   TI_ResetTics@TimerHandle 0057  
                           _writeColumnas 1BAA                                   _BAUDCON 0FB8  
                                 ?_setLed 0056                   __end_of_setLEDIntensity 1B24  
                          _sending_string 0021                           motor_SendChar@c 005A  
                                 LcInit@i 006E                                ??_LcGotoXY 006D  
                               ?_delay_us 0056                           getActualUID@UID 0057  
                              ??_GetTecla 0057                         _Terminal_SendChar 1C22  
                                 _TI_Init 1AD2                        ?_Terminal_SendChar 0056  
                                 _CantaIR 1A76                                 ?_initRFID 0056  
                               ?_initData 0056  motor_setCurrentUser@state_setCurrentUser 001B  
                               ?_initLeds 0056                                   _HighRSI 0008  
                              _controlLED 18C2                      motor_RFID@last_state 002B  
                             _WaitForBusy 1C4A                            ?_CantaPartAlta 0056  
                                 _Columns 003E                       motor_datos@lastChar 0018  
                       motor_RFID@TagType 0033                       ??_Terminal_SendChar 005A  
                               ?_setIndex 0056                                   __Hparam 0000  
                                 __Lparam 0000                         ?_newConfiguration 0056  
                            ??_RSI_Timer0 0056                            ?_writeColumnas 0056  
                      ??_newConfiguration 0057                              ??_TI_GetTics 005B  
                       motor_RFID@allZero 0031                                   __pcinit 14C6  
                                 __ramtop 0200                         motor_RFID@_status 0034  
                                 __ptext0 195C                                   __ptext1 0BB8  
                                 __ptext2 1452                                   __ptext3 1340  
                                 __ptext4 1A44                                   __ptext5 002A  
                                 __ptext6 1C92                                   __ptext7 0D8E  
                                 __ptext8 10CA                                   __ptext9 18C2  
                           ?_motorTeclado 0056                       motorTerminal@opcion 006D  
                               CantaIR@IR 0059                         __end_of_initPorts 1CA2  
               __end_of_Terminal_SendChar 1C36                         motor_RFID@waitIRq 0037  
                motorTerminal@currentUser 00C3                                ??_delay_us 0057  
                     _getCurrentUserIndex 1CBC                                   _str_ptr 000F  
                          __pintcode_body 1C88                               motor_LEDs@i 006D  
                    end_of_initialization 152A                               motor_RFID@i 0035  
                             motor_RFID@n 0036                          controlLED@estado 0057  
                              ??_initRFID 0062                                ??_initData 005A  
                      __end_of_RSI_Timer0 1C22                         __end_of_resetData 1AD2  
                              ??_initLeds 005A                             __Lmediumconst 1E2A  
                                 int_func 1C88                        __end_of_TI_GetTics 195C  
                      saveHourToData@hour 0057                           motor_Write@addr 005F  
                              ??_setIndex 0057                         __end_of_printfUID 098A  
                    ?_getCurrentUserIndex 0056                                _motor_LEDs 10CA  
                              _motor_RFID 002A                                   postdec1 0FE5  
                              _motor_Read 1272                                   postinc0 0FEE  
                                 postinc2 0FDE                         getActualUID@i_916 0059  
                       getActualUID@i_917 005B                          ?_setLEDIntensity 0057  
                          ??_motorTeclado 0064                                 _PORTCbits 0F82  
                              _processBit 180C                     TI_GetTics@TimerHandle 0063  
                          _motor_RFID$738 0074                          ??_saveHourToData 0058  
                               _TRISBbits 0F93                                 _TRISCbits 0F94  
                               _TRISEbits 0F96                                _state_read 0053  
                          setLed@ledIndex 0015                           ??_CantaPartAlta 0057  
                             ?_controlLED 0057                                 _CantaData 1A44  
                motor_StartSendString@str 005B                  __end_of_motor_SendString 15AA  
                   ??_getCurrentUserIndex 0057                            __end_of_LcInit 10CA  
                     controlLED@ledActual 005A                   ??_motor_StartSendString 005D  
                         ??_writeColumnas 0057                                 _LcPutChar 1452  
                          __end_of_Espera 1A44                            __end_of_LowRSI 0026  
            __end_of_Terminal_RXAvailable 1C88                __end_of_EscriuPrimeraOrdre 1452  
                           __pidataCOMRAM 1CA2                 motor_Read@timeout_counter 0013  
                          _motor_Read$701 0060                            motor_RFID@addr 0029  
                          motor_RFID@flag 0076                                 _ColumnAct 003C  
                          __end_of_keymap 1E48                            __end_of_setLed 1A10  
                         saveHourToData@i 0058                         getActualLeds@leds 0057  
                   motor_RFID@cardRemoved 002C                       start_initialization 14C6  
                          _motor_SendChar 1B90                        motor_Read@ucResult 003B  
            __end_of_Terminal_TXAvailable 1C4A                     motor_Read@MAX_TIMEOUT 007B  
                              ?_CantaData 0056                                  ??_LcInit 006D  
                           getActualUID@i 005A                                  ??_Espera 0068  
                                ??_LowRSI 0056                                ?_LcPutChar 0056  
                           initData@i_906 005D                             initData@i_908 005C  
                             ?_motor_LEDs 0056                               ?_motor_RFID 0056  
                       motorTerminal@leds 00B7                         motorTerminal@hour 00E5  
                             ?_motor_Read 0056                             ??_initTeclado 005A  
                             __pdataBANK0 00C8                                  ??_setLed 005A  
                             ?_processBit 0059                    __end_of_motor_SendChar 1BAA  
                             __pbssCOMRAM 0001                             ?_TI_ResetTics 0056  
                    _timer@TAD_DATOS$F903 004A                          motor_Read@ucAddr 004C  
                                ?_TI_Init 0056                                  ?_CantaIR 0056  
                          _CantaPartBaixa 1684                                  ?_HighRSI 0056  
                            ?_WaitForBusy 0056                      __end_of_motorTeclado 0FDC  
                          motor_Read@addr 005F                       motor_RFID@fifoLevel 002E  
                           _getActualLeds 1868                                 __pintcode 0008  
                           __pmediumconst 1E2A                                 _colValues 00E2  
                         CantaPartBaixa@c 0058                               __pintcodelo 0018  
                      motor_Write@ucValue 004E                               __smallconst 1E2A  
                     __end_of_initTeclado 1BF2                           ?_motor_SendChar 0056  
                              resetData@i 0057                                resetData@j 0058  
           motorTerminal@currentUserIndex 006E                            ??_TI_ResetTics 0057  
                    processBit@next_state 005C                                 _initPorts 1C9A  
                  __end_of_CantaPartBaixa 16E8                             _Terminal_Init 1C5E  
                    _Terminal_RXAvailable 1C7C                        motor_LEDs@lastTics 000B  
                             ??_CantaData 0059                                  _LATBbits 0F8A  
                                _LATCbits 0F8B                                  _LATEbits 0F8D  
                               delay_us@x 0058                      motor_Write@bit_count 0050  
                          ?_getActualLeds 0057                           _hashtag_pressed 0022  
                               _resetData 1AA8                                  _PIR1bits 0F9E  
                             ??_LcPutChar 0074                     motor_RFID@lastBitsVal 002F  
            __end_of_motor_setCurrentUser 0EC4                                 _printfUID 069C  
                           ??_motor_Write 005F                      _Terminal_TXAvailable 1C36  
                            GetTecla@fila 005A                             ??_motor_datos 0075  
                               _state_str 0023                                printfUID@i 006A  
                  motor_RFID@tempRegValue 0030                                  Espera@ms 0066  
                                _LcGotoXY 1340                     motor_LEDs@currentTics 0069  
                                _GetTecla 174C              __end_of_Terminal_ReceiveChar 1CC4  
                              ?_initPorts 0056                             motor_RFID@UID 0001  
                          ?_Terminal_Init 0056                               LcGotoXY@Row 006C  
                               copy_data0 14DA                                 copy_data1 14FA  
                         ?_CantaPartBaixa 0056                                  _Columnas 0026  
                   ?_Terminal_RXAvailable 0056                     motor_RFID@currentUser 0045  
                            ??_controlLED 0058                                 initData@i 005A  
                               initData@j 005B                             _motorTerminal 098A  
                    __end_ofprintfUID@hex 1E3C                         ?_motor_SendString 0056  
                              ?_resetData 0056                                  __Hrparam 0000  
                      printfUID@userIndex 005E                                  __Lrparam 0000  
                      ??_motor_SendString 005B             __end_of_motor_StartSendString 1BDA  
                              ?_printfUID 005D                               _initTeclado 1BDA  
                   ?_Terminal_TXAvailable 0057                   motorTerminal@userNumber 001E  
                      motor_RFID@checksum 0032                        __end_of_controlLED 1910  
                             _currentTime 0077                               _currentUser 0040  
                     __end_of_motor_Write 1684                                  _delay_us 1BF2  
                     __end_of_motor_datos 0D8E                                  __ptext10 098A  
                                __ptext11 1B24                        _EscriuPrimeraOrdre 13DC  
                                __ptext20 0EC4                                  __ptext12 069C  
                                __ptext21 1BAA                                  __ptext13 1868  
                                __ptext30 1CB6                                  __ptext22 1CB0  
                                __ptext14 1CAA                                  __ptext31 174C  
                                __ptext23 19DA                                  __ptext15 1CBC  
                                __ptext40 17AC                                  __ptext32 1BDA  
                                __ptext24 1AFC                                  __ptext16 15AA  
                                __ptext41 1C5E                                  __ptext33 119E  
                                __ptext25 1AA8                                  __ptext17 1C22  
                                __ptext50 1A76                                  __ptext42 1AD2  
                                __ptext34 1618                                  __ptext26 1BC2  
                                __ptext18 1CC0                                  __ptext51 1684  
                                __ptext43 0FDC                                  __ptext35 1272  
                                __ptext27 1538                                  __ptext19 1C7C  
                                __ptext52 16E8                                  __ptext44 1C4A  
                                __ptext36 180C                                  __ptext28 1B90  
                                __ptext45 1A10                                  __ptext37 1BF2  
                                __ptext29 1C36                                  __ptext46 1B4A  
                                __ptext38 1C9A                                  __ptext55 1C0A  
                                __ptext47 1910                                  __ptext39 1C6E  
                                __ptext48 199E                                  __ptext49 13DC  
                           ??_TI_NewTimer 0058                            CantaPartAlta@c 0058  
                       motor_Write@ucAddr 004F               __end_of_getCurrentUserIndex 1CC0  
                                _initRFID 119E                                  _initData 17AC  
                   getActualUID@userIndex 0058                                  _initLeds 1C6E  
                         ??_getActualLeds 0059                       ?_EscriuPrimeraOrdre 0056  
                          ?_motorTerminal 0056                     __end_of_CantaPartAlta 174C  
                           CantaData@Data 0059                                  _new_user 001C  
                                _setIndex 1C92                             ?_getActualUID 0057  
                            ??_motor_LEDs 0064                              ??_motor_RFID 0072  
                                isa$xinst 0000                              ??_motor_Read 005E  
                    __end_of_TI_ResetTics 1B6E                                  int$flags 007E  
                   __end_of_writeColumnas 1BC2                        motor_RFID@substate 0039  
                                _userUIDs 00C8                         controlLED@ledBits 00DC  
                    ??_EscriuPrimeraOrdre 0057                                LcInit@rows 006D  
                            ??_processBit 005D                             _timer_teclado 004B  
                            _motorTeclado 0EC4                                _INTCONbits 0FF2  
                        _newConfiguration 1CAA                           ??_Terminal_Init 0057  
               TI_GetTics@CopiaTicsActual 005F                         _new_configuration 001D  
                             ??_initPorts 0057                    ??_Terminal_RXAvailable 0057  
                          _configurations 0080                         _hashtag_pressed3s 1CB6  
                    _motor_setCurrentUser 0D8E                        __end_of_motor_LEDs 119E  
                      __end_of_motor_RFID 069C                    getActualLeds@userIndex 0058  
                                intlevel1 0000                                  intlevel2 0000  
                      __end_of_motor_Read 1340                        ?_hashtag_pressed3s 0056  
                              LcPutChar@c 0074                          motor_Write@value 005E  
                     __end_of_TI_NewTimer 19DA                            ??_getActualUID 0059  
                             ??_resetData 0057                        __end_of_processBit 1868  
                     ??_hashtag_pressed3s 0057                    ??_Terminal_TXAvailable 0059  
                            motor_datos@i 0017                      _Terminal_ReceiveChar 1CC0  
                             ??_printfUID 0061                          ??_motor_SendChar 005A  
                             _motor_Write 1618                               _motor_datos 0BB8  
                  motor_RFID@backBitsCalc 002D                 __end_of_hashtag_pressed3s 1CBC  
              __end_of_setStartSendString 1CB6                     ?_motor_setCurrentUser 006D  
                         ??_motorTerminal 006D                   setLEDIntensity@ledIndex 0057  
                    printfUID@currentUser 005D                            initRFID@regVal 0062  
                       ??_setLEDIntensity 0059                           GetTecla@columna 0059  

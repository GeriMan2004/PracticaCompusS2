

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Mar 31 17:17:27 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 05/12/2024 GMT
    78                           ; 
    79                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F4321 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000FE0                     bsr             equ	4064
   112   000FE9                     fsr0            equ	4073
   113   000FEA                     fsr0h           equ	4074
   114   000FE9                     fsr0l           equ	4073
   115   000FE1                     fsr1            equ	4065
   116   000FE2                     fsr1h           equ	4066
   117   000FE1                     fsr1l           equ	4065
   118   000FD9                     fsr2            equ	4057
   119   000FDA                     fsr2h           equ	4058
   120   000FD9                     fsr2l           equ	4057
   121   000FEF                     indf0           equ	4079
   122   000FE7                     indf1           equ	4071
   123   000FDF                     indf2           equ	4063
   124   000FF2                     intcon          equ	4082
   125   000000                     nvmcon          equ	0
   126   000FF9                     pcl             equ	4089
   127   000FFA                     pclath          equ	4090
   128   000FFB                     pclatu          equ	4091
   129   000FEB                     plusw0          equ	4075
   130   000FE3                     plusw1          equ	4067
   131   000FDB                     plusw2          equ	4059
   132   000FED                     postdec0        equ	4077
   133   000FE5                     postdec1        equ	4069
   134   000FDD                     postdec2        equ	4061
   135   000FEE                     postinc0        equ	4078
   136   000FE6                     postinc1        equ	4070
   137   000FDE                     postinc2        equ	4062
   138   000FEC                     preinc0         equ	4076
   139   000FE4                     preinc1         equ	4068
   140   000FDC                     preinc2         equ	4060
   141   000FF3                     prod            equ	4083
   142   000FF4                     prodh           equ	4084
   143   000FF3                     prodl           equ	4083
   144   000FD8                     status          equ	4056
   145   000FF5                     tablat          equ	4085
   146   000FF6                     tblptr          equ	4086
   147   000FF7                     tblptrh         equ	4087
   148   000FF6                     tblptrl         equ	4086
   149   000FF8                     tblptru         equ	4088
   150   000FFD                     tosl            equ	4093
   151   000FE8                     wreg            equ	4072
   152   000F80                     PORTA           equ	3968	;# 
   153   000F81                     PORTB           equ	3969	;# 
   154   000F82                     PORTC           equ	3970	;# 
   155   000F83                     PORTD           equ	3971	;# 
   156   000F84                     PORTE           equ	3972	;# 
   157   000F89                     LATA            equ	3977	;# 
   158   000F8A                     LATB            equ	3978	;# 
   159   000F8B                     LATC            equ	3979	;# 
   160   000F8C                     LATD            equ	3980	;# 
   161   000F8D                     LATE            equ	3981	;# 
   162   000F92                     TRISA           equ	3986	;# 
   163   000F92                     DDRA            equ	3986	;# 
   164   000F93                     TRISB           equ	3987	;# 
   165   000F93                     DDRB            equ	3987	;# 
   166   000F94                     TRISC           equ	3988	;# 
   167   000F94                     DDRC            equ	3988	;# 
   168   000F95                     TRISD           equ	3989	;# 
   169   000F95                     DDRD            equ	3989	;# 
   170   000F96                     TRISE           equ	3990	;# 
   171   000F96                     DDRE            equ	3990	;# 
   172   000F9B                     OSCTUNE         equ	3995	;# 
   173   000F9D                     PIE1            equ	3997	;# 
   174   000F9E                     PIR1            equ	3998	;# 
   175   000F9F                     IPR1            equ	3999	;# 
   176   000FA0                     PIE2            equ	4000	;# 
   177   000FA1                     PIR2            equ	4001	;# 
   178   000FA2                     IPR2            equ	4002	;# 
   179   000FA6                     EECON1          equ	4006	;# 
   180   000FA7                     EECON2          equ	4007	;# 
   181   000FA8                     EEDATA          equ	4008	;# 
   182   000FA9                     EEADR           equ	4009	;# 
   183   000FAB                     RCSTA           equ	4011	;# 
   184   000FAB                     RCSTA1          equ	4011	;# 
   185   000FAC                     TXSTA           equ	4012	;# 
   186   000FAC                     TXSTA1          equ	4012	;# 
   187   000FAD                     TXREG           equ	4013	;# 
   188   000FAD                     TXREG1          equ	4013	;# 
   189   000FAE                     RCREG           equ	4014	;# 
   190   000FAE                     RCREG1          equ	4014	;# 
   191   000FAF                     SPBRG           equ	4015	;# 
   192   000FAF                     SPBRG1          equ	4015	;# 
   193   000FB0                     SPBRGH          equ	4016	;# 
   194   000FB1                     T3CON           equ	4017	;# 
   195   000FB2                     TMR3            equ	4018	;# 
   196   000FB2                     TMR3L           equ	4018	;# 
   197   000FB3                     TMR3H           equ	4019	;# 
   198   000FB4                     CMCON           equ	4020	;# 
   199   000FB5                     CVRCON          equ	4021	;# 
   200   000FB6                     ECCP1AS         equ	4022	;# 
   201   000FB7                     ECCP1DEL        equ	4023	;# 
   202   000FB7                     PWM1CON         equ	4023	;# 
   203   000FB8                     BAUDCON         equ	4024	;# 
   204   000FB8                     BAUDCTL         equ	4024	;# 
   205   000FBA                     CCP2CON         equ	4026	;# 
   206   000FBB                     CCPR2           equ	4027	;# 
   207   000FBB                     CCPR2L          equ	4027	;# 
   208   000FBC                     CCPR2H          equ	4028	;# 
   209   000FBD                     CCP1CON         equ	4029	;# 
   210   000FBD                     ECCP1CON        equ	4029	;# 
   211   000FBE                     CCPR1           equ	4030	;# 
   212   000FBE                     CCPR1L          equ	4030	;# 
   213   000FBF                     CCPR1H          equ	4031	;# 
   214   000FC0                     ADCON2          equ	4032	;# 
   215   000FC1                     ADCON1          equ	4033	;# 
   216   000FC2                     ADCON0          equ	4034	;# 
   217   000FC3                     ADRES           equ	4035	;# 
   218   000FC3                     ADRESL          equ	4035	;# 
   219   000FC4                     ADRESH          equ	4036	;# 
   220   000FC5                     SSPCON2         equ	4037	;# 
   221   000FC6                     SSPCON1         equ	4038	;# 
   222   000FC7                     SSPSTAT         equ	4039	;# 
   223   000FC8                     SSPADD          equ	4040	;# 
   224   000FC9                     SSPBUF          equ	4041	;# 
   225   000FCA                     T2CON           equ	4042	;# 
   226   000FCB                     PR2             equ	4043	;# 
   227   000FCB                     MEMCON          equ	4043	;# 
   228   000FCC                     TMR2            equ	4044	;# 
   229   000FCD                     T1CON           equ	4045	;# 
   230   000FCE                     TMR1            equ	4046	;# 
   231   000FCE                     TMR1L           equ	4046	;# 
   232   000FCF                     TMR1H           equ	4047	;# 
   233   000FD0                     RCON            equ	4048	;# 
   234   000FD1                     WDTCON          equ	4049	;# 
   235   000FD2                     HLVDCON         equ	4050	;# 
   236   000FD2                     LVDCON          equ	4050	;# 
   237   000FD3                     OSCCON          equ	4051	;# 
   238   000FD5                     T0CON           equ	4053	;# 
   239   000FD6                     TMR0            equ	4054	;# 
   240   000FD6                     TMR0L           equ	4054	;# 
   241   000FD7                     TMR0H           equ	4055	;# 
   242   000FD8                     STATUS          equ	4056	;# 
   243   000FD9                     FSR2            equ	4057	;# 
   244   000FD9                     FSR2L           equ	4057	;# 
   245   000FDA                     FSR2H           equ	4058	;# 
   246   000FDB                     PLUSW2          equ	4059	;# 
   247   000FDC                     PREINC2         equ	4060	;# 
   248   000FDD                     POSTDEC2        equ	4061	;# 
   249   000FDE                     POSTINC2        equ	4062	;# 
   250   000FDF                     INDF2           equ	4063	;# 
   251   000FE0                     BSR             equ	4064	;# 
   252   000FE1                     FSR1            equ	4065	;# 
   253   000FE1                     FSR1L           equ	4065	;# 
   254   000FE2                     FSR1H           equ	4066	;# 
   255   000FE3                     PLUSW1          equ	4067	;# 
   256   000FE4                     PREINC1         equ	4068	;# 
   257   000FE5                     POSTDEC1        equ	4069	;# 
   258   000FE6                     POSTINC1        equ	4070	;# 
   259   000FE7                     INDF1           equ	4071	;# 
   260   000FE8                     WREG            equ	4072	;# 
   261   000FE9                     FSR0            equ	4073	;# 
   262   000FE9                     FSR0L           equ	4073	;# 
   263   000FEA                     FSR0H           equ	4074	;# 
   264   000FEB                     PLUSW0          equ	4075	;# 
   265   000FEC                     PREINC0         equ	4076	;# 
   266   000FED                     POSTDEC0        equ	4077	;# 
   267   000FEE                     POSTINC0        equ	4078	;# 
   268   000FEF                     INDF0           equ	4079	;# 
   269   000FF0                     INTCON3         equ	4080	;# 
   270   000FF1                     INTCON2         equ	4081	;# 
   271   000FF2                     INTCON          equ	4082	;# 
   272   000FF3                     PROD            equ	4083	;# 
   273   000FF3                     PRODL           equ	4083	;# 
   274   000FF4                     PRODH           equ	4084	;# 
   275   000FF5                     TABLAT          equ	4085	;# 
   276   000FF6                     TBLPTR          equ	4086	;# 
   277   000FF6                     TBLPTRL         equ	4086	;# 
   278   000FF7                     TBLPTRH         equ	4087	;# 
   279   000FF8                     TBLPTRU         equ	4088	;# 
   280   000FF9                     PCLAT           equ	4089	;# 
   281   000FF9                     PC              equ	4089	;# 
   282   000FF9                     PCL             equ	4089	;# 
   283   000FFA                     PCLATH          equ	4090	;# 
   284   000FFB                     PCLATU          equ	4091	;# 
   285   000FFC                     STKPTR          equ	4092	;# 
   286   000FFD                     TOS             equ	4093	;# 
   287   000FFD                     TOSL            equ	4093	;# 
   288   000FFE                     TOSH            equ	4094	;# 
   289   000FFF                     TOSU            equ	4095	;# 
   290   000F80                     PORTA           equ	3968	;# 
   291   000F81                     PORTB           equ	3969	;# 
   292   000F82                     PORTC           equ	3970	;# 
   293   000F83                     PORTD           equ	3971	;# 
   294   000F84                     PORTE           equ	3972	;# 
   295   000F89                     LATA            equ	3977	;# 
   296   000F8A                     LATB            equ	3978	;# 
   297   000F8B                     LATC            equ	3979	;# 
   298   000F8C                     LATD            equ	3980	;# 
   299   000F8D                     LATE            equ	3981	;# 
   300   000F92                     TRISA           equ	3986	;# 
   301   000F92                     DDRA            equ	3986	;# 
   302   000F93                     TRISB           equ	3987	;# 
   303   000F93                     DDRB            equ	3987	;# 
   304   000F94                     TRISC           equ	3988	;# 
   305   000F94                     DDRC            equ	3988	;# 
   306   000F95                     TRISD           equ	3989	;# 
   307   000F95                     DDRD            equ	3989	;# 
   308   000F96                     TRISE           equ	3990	;# 
   309   000F96                     DDRE            equ	3990	;# 
   310   000F9B                     OSCTUNE         equ	3995	;# 
   311   000F9D                     PIE1            equ	3997	;# 
   312   000F9E                     PIR1            equ	3998	;# 
   313   000F9F                     IPR1            equ	3999	;# 
   314   000FA0                     PIE2            equ	4000	;# 
   315   000FA1                     PIR2            equ	4001	;# 
   316   000FA2                     IPR2            equ	4002	;# 
   317   000FA6                     EECON1          equ	4006	;# 
   318   000FA7                     EECON2          equ	4007	;# 
   319   000FA8                     EEDATA          equ	4008	;# 
   320   000FA9                     EEADR           equ	4009	;# 
   321   000FAB                     RCSTA           equ	4011	;# 
   322   000FAB                     RCSTA1          equ	4011	;# 
   323   000FAC                     TXSTA           equ	4012	;# 
   324   000FAC                     TXSTA1          equ	4012	;# 
   325   000FAD                     TXREG           equ	4013	;# 
   326   000FAD                     TXREG1          equ	4013	;# 
   327   000FAE                     RCREG           equ	4014	;# 
   328   000FAE                     RCREG1          equ	4014	;# 
   329   000FAF                     SPBRG           equ	4015	;# 
   330   000FAF                     SPBRG1          equ	4015	;# 
   331   000FB0                     SPBRGH          equ	4016	;# 
   332   000FB1                     T3CON           equ	4017	;# 
   333   000FB2                     TMR3            equ	4018	;# 
   334   000FB2                     TMR3L           equ	4018	;# 
   335   000FB3                     TMR3H           equ	4019	;# 
   336   000FB4                     CMCON           equ	4020	;# 
   337   000FB5                     CVRCON          equ	4021	;# 
   338   000FB6                     ECCP1AS         equ	4022	;# 
   339   000FB7                     ECCP1DEL        equ	4023	;# 
   340   000FB7                     PWM1CON         equ	4023	;# 
   341   000FB8                     BAUDCON         equ	4024	;# 
   342   000FB8                     BAUDCTL         equ	4024	;# 
   343   000FBA                     CCP2CON         equ	4026	;# 
   344   000FBB                     CCPR2           equ	4027	;# 
   345   000FBB                     CCPR2L          equ	4027	;# 
   346   000FBC                     CCPR2H          equ	4028	;# 
   347   000FBD                     CCP1CON         equ	4029	;# 
   348   000FBD                     ECCP1CON        equ	4029	;# 
   349   000FBE                     CCPR1           equ	4030	;# 
   350   000FBE                     CCPR1L          equ	4030	;# 
   351   000FBF                     CCPR1H          equ	4031	;# 
   352   000FC0                     ADCON2          equ	4032	;# 
   353   000FC1                     ADCON1          equ	4033	;# 
   354   000FC2                     ADCON0          equ	4034	;# 
   355   000FC3                     ADRES           equ	4035	;# 
   356   000FC3                     ADRESL          equ	4035	;# 
   357   000FC4                     ADRESH          equ	4036	;# 
   358   000FC5                     SSPCON2         equ	4037	;# 
   359   000FC6                     SSPCON1         equ	4038	;# 
   360   000FC7                     SSPSTAT         equ	4039	;# 
   361   000FC8                     SSPADD          equ	4040	;# 
   362   000FC9                     SSPBUF          equ	4041	;# 
   363   000FCA                     T2CON           equ	4042	;# 
   364   000FCB                     PR2             equ	4043	;# 
   365   000FCB                     MEMCON          equ	4043	;# 
   366   000FCC                     TMR2            equ	4044	;# 
   367   000FCD                     T1CON           equ	4045	;# 
   368   000FCE                     TMR1            equ	4046	;# 
   369   000FCE                     TMR1L           equ	4046	;# 
   370   000FCF                     TMR1H           equ	4047	;# 
   371   000FD0                     RCON            equ	4048	;# 
   372   000FD1                     WDTCON          equ	4049	;# 
   373   000FD2                     HLVDCON         equ	4050	;# 
   374   000FD2                     LVDCON          equ	4050	;# 
   375   000FD3                     OSCCON          equ	4051	;# 
   376   000FD5                     T0CON           equ	4053	;# 
   377   000FD6                     TMR0            equ	4054	;# 
   378   000FD6                     TMR0L           equ	4054	;# 
   379   000FD7                     TMR0H           equ	4055	;# 
   380   000FD8                     STATUS          equ	4056	;# 
   381   000FD9                     FSR2            equ	4057	;# 
   382   000FD9                     FSR2L           equ	4057	;# 
   383   000FDA                     FSR2H           equ	4058	;# 
   384   000FDB                     PLUSW2          equ	4059	;# 
   385   000FDC                     PREINC2         equ	4060	;# 
   386   000FDD                     POSTDEC2        equ	4061	;# 
   387   000FDE                     POSTINC2        equ	4062	;# 
   388   000FDF                     INDF2           equ	4063	;# 
   389   000FE0                     BSR             equ	4064	;# 
   390   000FE1                     FSR1            equ	4065	;# 
   391   000FE1                     FSR1L           equ	4065	;# 
   392   000FE2                     FSR1H           equ	4066	;# 
   393   000FE3                     PLUSW1          equ	4067	;# 
   394   000FE4                     PREINC1         equ	4068	;# 
   395   000FE5                     POSTDEC1        equ	4069	;# 
   396   000FE6                     POSTINC1        equ	4070	;# 
   397   000FE7                     INDF1           equ	4071	;# 
   398   000FE8                     WREG            equ	4072	;# 
   399   000FE9                     FSR0            equ	4073	;# 
   400   000FE9                     FSR0L           equ	4073	;# 
   401   000FEA                     FSR0H           equ	4074	;# 
   402   000FEB                     PLUSW0          equ	4075	;# 
   403   000FEC                     PREINC0         equ	4076	;# 
   404   000FED                     POSTDEC0        equ	4077	;# 
   405   000FEE                     POSTINC0        equ	4078	;# 
   406   000FEF                     INDF0           equ	4079	;# 
   407   000FF0                     INTCON3         equ	4080	;# 
   408   000FF1                     INTCON2         equ	4081	;# 
   409   000FF2                     INTCON          equ	4082	;# 
   410   000FF3                     PROD            equ	4083	;# 
   411   000FF3                     PRODL           equ	4083	;# 
   412   000FF4                     PRODH           equ	4084	;# 
   413   000FF5                     TABLAT          equ	4085	;# 
   414   000FF6                     TBLPTR          equ	4086	;# 
   415   000FF6                     TBLPTRL         equ	4086	;# 
   416   000FF7                     TBLPTRH         equ	4087	;# 
   417   000FF8                     TBLPTRU         equ	4088	;# 
   418   000FF9                     PCLAT           equ	4089	;# 
   419   000FF9                     PC              equ	4089	;# 
   420   000FF9                     PCL             equ	4089	;# 
   421   000FFA                     PCLATH          equ	4090	;# 
   422   000FFB                     PCLATU          equ	4091	;# 
   423   000FFC                     STKPTR          equ	4092	;# 
   424   000FFD                     TOS             equ	4093	;# 
   425   000FFD                     TOSL            equ	4093	;# 
   426   000FFE                     TOSH            equ	4094	;# 
   427   000FFF                     TOSU            equ	4095	;# 
   428   000F80                     PORTA           equ	3968	;# 
   429   000F81                     PORTB           equ	3969	;# 
   430   000F82                     PORTC           equ	3970	;# 
   431   000F83                     PORTD           equ	3971	;# 
   432   000F84                     PORTE           equ	3972	;# 
   433   000F89                     LATA            equ	3977	;# 
   434   000F8A                     LATB            equ	3978	;# 
   435   000F8B                     LATC            equ	3979	;# 
   436   000F8C                     LATD            equ	3980	;# 
   437   000F8D                     LATE            equ	3981	;# 
   438   000F92                     TRISA           equ	3986	;# 
   439   000F92                     DDRA            equ	3986	;# 
   440   000F93                     TRISB           equ	3987	;# 
   441   000F93                     DDRB            equ	3987	;# 
   442   000F94                     TRISC           equ	3988	;# 
   443   000F94                     DDRC            equ	3988	;# 
   444   000F95                     TRISD           equ	3989	;# 
   445   000F95                     DDRD            equ	3989	;# 
   446   000F96                     TRISE           equ	3990	;# 
   447   000F96                     DDRE            equ	3990	;# 
   448   000F9B                     OSCTUNE         equ	3995	;# 
   449   000F9D                     PIE1            equ	3997	;# 
   450   000F9E                     PIR1            equ	3998	;# 
   451   000F9F                     IPR1            equ	3999	;# 
   452   000FA0                     PIE2            equ	4000	;# 
   453   000FA1                     PIR2            equ	4001	;# 
   454   000FA2                     IPR2            equ	4002	;# 
   455   000FA6                     EECON1          equ	4006	;# 
   456   000FA7                     EECON2          equ	4007	;# 
   457   000FA8                     EEDATA          equ	4008	;# 
   458   000FA9                     EEADR           equ	4009	;# 
   459   000FAB                     RCSTA           equ	4011	;# 
   460   000FAB                     RCSTA1          equ	4011	;# 
   461   000FAC                     TXSTA           equ	4012	;# 
   462   000FAC                     TXSTA1          equ	4012	;# 
   463   000FAD                     TXREG           equ	4013	;# 
   464   000FAD                     TXREG1          equ	4013	;# 
   465   000FAE                     RCREG           equ	4014	;# 
   466   000FAE                     RCREG1          equ	4014	;# 
   467   000FAF                     SPBRG           equ	4015	;# 
   468   000FAF                     SPBRG1          equ	4015	;# 
   469   000FB0                     SPBRGH          equ	4016	;# 
   470   000FB1                     T3CON           equ	4017	;# 
   471   000FB2                     TMR3            equ	4018	;# 
   472   000FB2                     TMR3L           equ	4018	;# 
   473   000FB3                     TMR3H           equ	4019	;# 
   474   000FB4                     CMCON           equ	4020	;# 
   475   000FB5                     CVRCON          equ	4021	;# 
   476   000FB6                     ECCP1AS         equ	4022	;# 
   477   000FB7                     ECCP1DEL        equ	4023	;# 
   478   000FB7                     PWM1CON         equ	4023	;# 
   479   000FB8                     BAUDCON         equ	4024	;# 
   480   000FB8                     BAUDCTL         equ	4024	;# 
   481   000FBA                     CCP2CON         equ	4026	;# 
   482   000FBB                     CCPR2           equ	4027	;# 
   483   000FBB                     CCPR2L          equ	4027	;# 
   484   000FBC                     CCPR2H          equ	4028	;# 
   485   000FBD                     CCP1CON         equ	4029	;# 
   486   000FBD                     ECCP1CON        equ	4029	;# 
   487   000FBE                     CCPR1           equ	4030	;# 
   488   000FBE                     CCPR1L          equ	4030	;# 
   489   000FBF                     CCPR1H          equ	4031	;# 
   490   000FC0                     ADCON2          equ	4032	;# 
   491   000FC1                     ADCON1          equ	4033	;# 
   492   000FC2                     ADCON0          equ	4034	;# 
   493   000FC3                     ADRES           equ	4035	;# 
   494   000FC3                     ADRESL          equ	4035	;# 
   495   000FC4                     ADRESH          equ	4036	;# 
   496   000FC5                     SSPCON2         equ	4037	;# 
   497   000FC6                     SSPCON1         equ	4038	;# 
   498   000FC7                     SSPSTAT         equ	4039	;# 
   499   000FC8                     SSPADD          equ	4040	;# 
   500   000FC9                     SSPBUF          equ	4041	;# 
   501   000FCA                     T2CON           equ	4042	;# 
   502   000FCB                     PR2             equ	4043	;# 
   503   000FCB                     MEMCON          equ	4043	;# 
   504   000FCC                     TMR2            equ	4044	;# 
   505   000FCD                     T1CON           equ	4045	;# 
   506   000FCE                     TMR1            equ	4046	;# 
   507   000FCE                     TMR1L           equ	4046	;# 
   508   000FCF                     TMR1H           equ	4047	;# 
   509   000FD0                     RCON            equ	4048	;# 
   510   000FD1                     WDTCON          equ	4049	;# 
   511   000FD2                     HLVDCON         equ	4050	;# 
   512   000FD2                     LVDCON          equ	4050	;# 
   513   000FD3                     OSCCON          equ	4051	;# 
   514   000FD5                     T0CON           equ	4053	;# 
   515   000FD6                     TMR0            equ	4054	;# 
   516   000FD6                     TMR0L           equ	4054	;# 
   517   000FD7                     TMR0H           equ	4055	;# 
   518   000FD8                     STATUS          equ	4056	;# 
   519   000FD9                     FSR2            equ	4057	;# 
   520   000FD9                     FSR2L           equ	4057	;# 
   521   000FDA                     FSR2H           equ	4058	;# 
   522   000FDB                     PLUSW2          equ	4059	;# 
   523   000FDC                     PREINC2         equ	4060	;# 
   524   000FDD                     POSTDEC2        equ	4061	;# 
   525   000FDE                     POSTINC2        equ	4062	;# 
   526   000FDF                     INDF2           equ	4063	;# 
   527   000FE0                     BSR             equ	4064	;# 
   528   000FE1                     FSR1            equ	4065	;# 
   529   000FE1                     FSR1L           equ	4065	;# 
   530   000FE2                     FSR1H           equ	4066	;# 
   531   000FE3                     PLUSW1          equ	4067	;# 
   532   000FE4                     PREINC1         equ	4068	;# 
   533   000FE5                     POSTDEC1        equ	4069	;# 
   534   000FE6                     POSTINC1        equ	4070	;# 
   535   000FE7                     INDF1           equ	4071	;# 
   536   000FE8                     WREG            equ	4072	;# 
   537   000FE9                     FSR0            equ	4073	;# 
   538   000FE9                     FSR0L           equ	4073	;# 
   539   000FEA                     FSR0H           equ	4074	;# 
   540   000FEB                     PLUSW0          equ	4075	;# 
   541   000FEC                     PREINC0         equ	4076	;# 
   542   000FED                     POSTDEC0        equ	4077	;# 
   543   000FEE                     POSTINC0        equ	4078	;# 
   544   000FEF                     INDF0           equ	4079	;# 
   545   000FF0                     INTCON3         equ	4080	;# 
   546   000FF1                     INTCON2         equ	4081	;# 
   547   000FF2                     INTCON          equ	4082	;# 
   548   000FF3                     PROD            equ	4083	;# 
   549   000FF3                     PRODL           equ	4083	;# 
   550   000FF4                     PRODH           equ	4084	;# 
   551   000FF5                     TABLAT          equ	4085	;# 
   552   000FF6                     TBLPTR          equ	4086	;# 
   553   000FF6                     TBLPTRL         equ	4086	;# 
   554   000FF7                     TBLPTRH         equ	4087	;# 
   555   000FF8                     TBLPTRU         equ	4088	;# 
   556   000FF9                     PCLAT           equ	4089	;# 
   557   000FF9                     PC              equ	4089	;# 
   558   000FF9                     PCL             equ	4089	;# 
   559   000FFA                     PCLATH          equ	4090	;# 
   560   000FFB                     PCLATU          equ	4091	;# 
   561   000FFC                     STKPTR          equ	4092	;# 
   562   000FFD                     TOS             equ	4093	;# 
   563   000FFD                     TOSL            equ	4093	;# 
   564   000FFE                     TOSH            equ	4094	;# 
   565   000FFF                     TOSU            equ	4095	;# 
   566   000F80                     PORTA           equ	3968	;# 
   567   000F81                     PORTB           equ	3969	;# 
   568   000F82                     PORTC           equ	3970	;# 
   569   000F83                     PORTD           equ	3971	;# 
   570   000F84                     PORTE           equ	3972	;# 
   571   000F89                     LATA            equ	3977	;# 
   572   000F8A                     LATB            equ	3978	;# 
   573   000F8B                     LATC            equ	3979	;# 
   574   000F8C                     LATD            equ	3980	;# 
   575   000F8D                     LATE            equ	3981	;# 
   576   000F92                     TRISA           equ	3986	;# 
   577   000F92                     DDRA            equ	3986	;# 
   578   000F93                     TRISB           equ	3987	;# 
   579   000F93                     DDRB            equ	3987	;# 
   580   000F94                     TRISC           equ	3988	;# 
   581   000F94                     DDRC            equ	3988	;# 
   582   000F95                     TRISD           equ	3989	;# 
   583   000F95                     DDRD            equ	3989	;# 
   584   000F96                     TRISE           equ	3990	;# 
   585   000F96                     DDRE            equ	3990	;# 
   586   000F9B                     OSCTUNE         equ	3995	;# 
   587   000F9D                     PIE1            equ	3997	;# 
   588   000F9E                     PIR1            equ	3998	;# 
   589   000F9F                     IPR1            equ	3999	;# 
   590   000FA0                     PIE2            equ	4000	;# 
   591   000FA1                     PIR2            equ	4001	;# 
   592   000FA2                     IPR2            equ	4002	;# 
   593   000FA6                     EECON1          equ	4006	;# 
   594   000FA7                     EECON2          equ	4007	;# 
   595   000FA8                     EEDATA          equ	4008	;# 
   596   000FA9                     EEADR           equ	4009	;# 
   597   000FAB                     RCSTA           equ	4011	;# 
   598   000FAB                     RCSTA1          equ	4011	;# 
   599   000FAC                     TXSTA           equ	4012	;# 
   600   000FAC                     TXSTA1          equ	4012	;# 
   601   000FAD                     TXREG           equ	4013	;# 
   602   000FAD                     TXREG1          equ	4013	;# 
   603   000FAE                     RCREG           equ	4014	;# 
   604   000FAE                     RCREG1          equ	4014	;# 
   605   000FAF                     SPBRG           equ	4015	;# 
   606   000FAF                     SPBRG1          equ	4015	;# 
   607   000FB0                     SPBRGH          equ	4016	;# 
   608   000FB1                     T3CON           equ	4017	;# 
   609   000FB2                     TMR3            equ	4018	;# 
   610   000FB2                     TMR3L           equ	4018	;# 
   611   000FB3                     TMR3H           equ	4019	;# 
   612   000FB4                     CMCON           equ	4020	;# 
   613   000FB5                     CVRCON          equ	4021	;# 
   614   000FB6                     ECCP1AS         equ	4022	;# 
   615   000FB7                     ECCP1DEL        equ	4023	;# 
   616   000FB7                     PWM1CON         equ	4023	;# 
   617   000FB8                     BAUDCON         equ	4024	;# 
   618   000FB8                     BAUDCTL         equ	4024	;# 
   619   000FBA                     CCP2CON         equ	4026	;# 
   620   000FBB                     CCPR2           equ	4027	;# 
   621   000FBB                     CCPR2L          equ	4027	;# 
   622   000FBC                     CCPR2H          equ	4028	;# 
   623   000FBD                     CCP1CON         equ	4029	;# 
   624   000FBD                     ECCP1CON        equ	4029	;# 
   625   000FBE                     CCPR1           equ	4030	;# 
   626   000FBE                     CCPR1L          equ	4030	;# 
   627   000FBF                     CCPR1H          equ	4031	;# 
   628   000FC0                     ADCON2          equ	4032	;# 
   629   000FC1                     ADCON1          equ	4033	;# 
   630   000FC2                     ADCON0          equ	4034	;# 
   631   000FC3                     ADRES           equ	4035	;# 
   632   000FC3                     ADRESL          equ	4035	;# 
   633   000FC4                     ADRESH          equ	4036	;# 
   634   000FC5                     SSPCON2         equ	4037	;# 
   635   000FC6                     SSPCON1         equ	4038	;# 
   636   000FC7                     SSPSTAT         equ	4039	;# 
   637   000FC8                     SSPADD          equ	4040	;# 
   638   000FC9                     SSPBUF          equ	4041	;# 
   639   000FCA                     T2CON           equ	4042	;# 
   640   000FCB                     PR2             equ	4043	;# 
   641   000FCB                     MEMCON          equ	4043	;# 
   642   000FCC                     TMR2            equ	4044	;# 
   643   000FCD                     T1CON           equ	4045	;# 
   644   000FCE                     TMR1            equ	4046	;# 
   645   000FCE                     TMR1L           equ	4046	;# 
   646   000FCF                     TMR1H           equ	4047	;# 
   647   000FD0                     RCON            equ	4048	;# 
   648   000FD1                     WDTCON          equ	4049	;# 
   649   000FD2                     HLVDCON         equ	4050	;# 
   650   000FD2                     LVDCON          equ	4050	;# 
   651   000FD3                     OSCCON          equ	4051	;# 
   652   000FD5                     T0CON           equ	4053	;# 
   653   000FD6                     TMR0            equ	4054	;# 
   654   000FD6                     TMR0L           equ	4054	;# 
   655   000FD7                     TMR0H           equ	4055	;# 
   656   000FD8                     STATUS          equ	4056	;# 
   657   000FD9                     FSR2            equ	4057	;# 
   658   000FD9                     FSR2L           equ	4057	;# 
   659   000FDA                     FSR2H           equ	4058	;# 
   660   000FDB                     PLUSW2          equ	4059	;# 
   661   000FDC                     PREINC2         equ	4060	;# 
   662   000FDD                     POSTDEC2        equ	4061	;# 
   663   000FDE                     POSTINC2        equ	4062	;# 
   664   000FDF                     INDF2           equ	4063	;# 
   665   000FE0                     BSR             equ	4064	;# 
   666   000FE1                     FSR1            equ	4065	;# 
   667   000FE1                     FSR1L           equ	4065	;# 
   668   000FE2                     FSR1H           equ	4066	;# 
   669   000FE3                     PLUSW1          equ	4067	;# 
   670   000FE4                     PREINC1         equ	4068	;# 
   671   000FE5                     POSTDEC1        equ	4069	;# 
   672   000FE6                     POSTINC1        equ	4070	;# 
   673   000FE7                     INDF1           equ	4071	;# 
   674   000FE8                     WREG            equ	4072	;# 
   675   000FE9                     FSR0            equ	4073	;# 
   676   000FE9                     FSR0L           equ	4073	;# 
   677   000FEA                     FSR0H           equ	4074	;# 
   678   000FEB                     PLUSW0          equ	4075	;# 
   679   000FEC                     PREINC0         equ	4076	;# 
   680   000FED                     POSTDEC0        equ	4077	;# 
   681   000FEE                     POSTINC0        equ	4078	;# 
   682   000FEF                     INDF0           equ	4079	;# 
   683   000FF0                     INTCON3         equ	4080	;# 
   684   000FF1                     INTCON2         equ	4081	;# 
   685   000FF2                     INTCON          equ	4082	;# 
   686   000FF3                     PROD            equ	4083	;# 
   687   000FF3                     PRODL           equ	4083	;# 
   688   000FF4                     PRODH           equ	4084	;# 
   689   000FF5                     TABLAT          equ	4085	;# 
   690   000FF6                     TBLPTR          equ	4086	;# 
   691   000FF6                     TBLPTRL         equ	4086	;# 
   692   000FF7                     TBLPTRH         equ	4087	;# 
   693   000FF8                     TBLPTRU         equ	4088	;# 
   694   000FF9                     PCLAT           equ	4089	;# 
   695   000FF9                     PC              equ	4089	;# 
   696   000FF9                     PCL             equ	4089	;# 
   697   000FFA                     PCLATH          equ	4090	;# 
   698   000FFB                     PCLATU          equ	4091	;# 
   699   000FFC                     STKPTR          equ	4092	;# 
   700   000FFD                     TOS             equ	4093	;# 
   701   000FFD                     TOSL            equ	4093	;# 
   702   000FFE                     TOSH            equ	4094	;# 
   703   000FFF                     TOSU            equ	4095	;# 
   704   000F80                     PORTA           equ	3968	;# 
   705   000F81                     PORTB           equ	3969	;# 
   706   000F82                     PORTC           equ	3970	;# 
   707   000F83                     PORTD           equ	3971	;# 
   708   000F84                     PORTE           equ	3972	;# 
   709   000F89                     LATA            equ	3977	;# 
   710   000F8A                     LATB            equ	3978	;# 
   711   000F8B                     LATC            equ	3979	;# 
   712   000F8C                     LATD            equ	3980	;# 
   713   000F8D                     LATE            equ	3981	;# 
   714   000F92                     TRISA           equ	3986	;# 
   715   000F92                     DDRA            equ	3986	;# 
   716   000F93                     TRISB           equ	3987	;# 
   717   000F93                     DDRB            equ	3987	;# 
   718   000F94                     TRISC           equ	3988	;# 
   719   000F94                     DDRC            equ	3988	;# 
   720   000F95                     TRISD           equ	3989	;# 
   721   000F95                     DDRD            equ	3989	;# 
   722   000F96                     TRISE           equ	3990	;# 
   723   000F96                     DDRE            equ	3990	;# 
   724   000F9B                     OSCTUNE         equ	3995	;# 
   725   000F9D                     PIE1            equ	3997	;# 
   726   000F9E                     PIR1            equ	3998	;# 
   727   000F9F                     IPR1            equ	3999	;# 
   728   000FA0                     PIE2            equ	4000	;# 
   729   000FA1                     PIR2            equ	4001	;# 
   730   000FA2                     IPR2            equ	4002	;# 
   731   000FA6                     EECON1          equ	4006	;# 
   732   000FA7                     EECON2          equ	4007	;# 
   733   000FA8                     EEDATA          equ	4008	;# 
   734   000FA9                     EEADR           equ	4009	;# 
   735   000FAB                     RCSTA           equ	4011	;# 
   736   000FAB                     RCSTA1          equ	4011	;# 
   737   000FAC                     TXSTA           equ	4012	;# 
   738   000FAC                     TXSTA1          equ	4012	;# 
   739   000FAD                     TXREG           equ	4013	;# 
   740   000FAD                     TXREG1          equ	4013	;# 
   741   000FAE                     RCREG           equ	4014	;# 
   742   000FAE                     RCREG1          equ	4014	;# 
   743   000FAF                     SPBRG           equ	4015	;# 
   744   000FAF                     SPBRG1          equ	4015	;# 
   745   000FB0                     SPBRGH          equ	4016	;# 
   746   000FB1                     T3CON           equ	4017	;# 
   747   000FB2                     TMR3            equ	4018	;# 
   748   000FB2                     TMR3L           equ	4018	;# 
   749   000FB3                     TMR3H           equ	4019	;# 
   750   000FB4                     CMCON           equ	4020	;# 
   751   000FB5                     CVRCON          equ	4021	;# 
   752   000FB6                     ECCP1AS         equ	4022	;# 
   753   000FB7                     ECCP1DEL        equ	4023	;# 
   754   000FB7                     PWM1CON         equ	4023	;# 
   755   000FB8                     BAUDCON         equ	4024	;# 
   756   000FB8                     BAUDCTL         equ	4024	;# 
   757   000FBA                     CCP2CON         equ	4026	;# 
   758   000FBB                     CCPR2           equ	4027	;# 
   759   000FBB                     CCPR2L          equ	4027	;# 
   760   000FBC                     CCPR2H          equ	4028	;# 
   761   000FBD                     CCP1CON         equ	4029	;# 
   762   000FBD                     ECCP1CON        equ	4029	;# 
   763   000FBE                     CCPR1           equ	4030	;# 
   764   000FBE                     CCPR1L          equ	4030	;# 
   765   000FBF                     CCPR1H          equ	4031	;# 
   766   000FC0                     ADCON2          equ	4032	;# 
   767   000FC1                     ADCON1          equ	4033	;# 
   768   000FC2                     ADCON0          equ	4034	;# 
   769   000FC3                     ADRES           equ	4035	;# 
   770   000FC3                     ADRESL          equ	4035	;# 
   771   000FC4                     ADRESH          equ	4036	;# 
   772   000FC5                     SSPCON2         equ	4037	;# 
   773   000FC6                     SSPCON1         equ	4038	;# 
   774   000FC7                     SSPSTAT         equ	4039	;# 
   775   000FC8                     SSPADD          equ	4040	;# 
   776   000FC9                     SSPBUF          equ	4041	;# 
   777   000FCA                     T2CON           equ	4042	;# 
   778   000FCB                     PR2             equ	4043	;# 
   779   000FCB                     MEMCON          equ	4043	;# 
   780   000FCC                     TMR2            equ	4044	;# 
   781   000FCD                     T1CON           equ	4045	;# 
   782   000FCE                     TMR1            equ	4046	;# 
   783   000FCE                     TMR1L           equ	4046	;# 
   784   000FCF                     TMR1H           equ	4047	;# 
   785   000FD0                     RCON            equ	4048	;# 
   786   000FD1                     WDTCON          equ	4049	;# 
   787   000FD2                     HLVDCON         equ	4050	;# 
   788   000FD2                     LVDCON          equ	4050	;# 
   789   000FD3                     OSCCON          equ	4051	;# 
   790   000FD5                     T0CON           equ	4053	;# 
   791   000FD6                     TMR0            equ	4054	;# 
   792   000FD6                     TMR0L           equ	4054	;# 
   793   000FD7                     TMR0H           equ	4055	;# 
   794   000FD8                     STATUS          equ	4056	;# 
   795   000FD9                     FSR2            equ	4057	;# 
   796   000FD9                     FSR2L           equ	4057	;# 
   797   000FDA                     FSR2H           equ	4058	;# 
   798   000FDB                     PLUSW2          equ	4059	;# 
   799   000FDC                     PREINC2         equ	4060	;# 
   800   000FDD                     POSTDEC2        equ	4061	;# 
   801   000FDE                     POSTINC2        equ	4062	;# 
   802   000FDF                     INDF2           equ	4063	;# 
   803   000FE0                     BSR             equ	4064	;# 
   804   000FE1                     FSR1            equ	4065	;# 
   805   000FE1                     FSR1L           equ	4065	;# 
   806   000FE2                     FSR1H           equ	4066	;# 
   807   000FE3                     PLUSW1          equ	4067	;# 
   808   000FE4                     PREINC1         equ	4068	;# 
   809   000FE5                     POSTDEC1        equ	4069	;# 
   810   000FE6                     POSTINC1        equ	4070	;# 
   811   000FE7                     INDF1           equ	4071	;# 
   812   000FE8                     WREG            equ	4072	;# 
   813   000FE9                     FSR0            equ	4073	;# 
   814   000FE9                     FSR0L           equ	4073	;# 
   815   000FEA                     FSR0H           equ	4074	;# 
   816   000FEB                     PLUSW0          equ	4075	;# 
   817   000FEC                     PREINC0         equ	4076	;# 
   818   000FED                     POSTDEC0        equ	4077	;# 
   819   000FEE                     POSTINC0        equ	4078	;# 
   820   000FEF                     INDF0           equ	4079	;# 
   821   000FF0                     INTCON3         equ	4080	;# 
   822   000FF1                     INTCON2         equ	4081	;# 
   823   000FF2                     INTCON          equ	4082	;# 
   824   000FF3                     PROD            equ	4083	;# 
   825   000FF3                     PRODL           equ	4083	;# 
   826   000FF4                     PRODH           equ	4084	;# 
   827   000FF5                     TABLAT          equ	4085	;# 
   828   000FF6                     TBLPTR          equ	4086	;# 
   829   000FF6                     TBLPTRL         equ	4086	;# 
   830   000FF7                     TBLPTRH         equ	4087	;# 
   831   000FF8                     TBLPTRU         equ	4088	;# 
   832   000FF9                     PCLAT           equ	4089	;# 
   833   000FF9                     PC              equ	4089	;# 
   834   000FF9                     PCL             equ	4089	;# 
   835   000FFA                     PCLATH          equ	4090	;# 
   836   000FFB                     PCLATU          equ	4091	;# 
   837   000FFC                     STKPTR          equ	4092	;# 
   838   000FFD                     TOS             equ	4093	;# 
   839   000FFD                     TOSL            equ	4093	;# 
   840   000FFE                     TOSH            equ	4094	;# 
   841   000FFF                     TOSU            equ	4095	;# 
   842   000F80                     PORTA           equ	3968	;# 
   843   000F81                     PORTB           equ	3969	;# 
   844   000F82                     PORTC           equ	3970	;# 
   845   000F83                     PORTD           equ	3971	;# 
   846   000F84                     PORTE           equ	3972	;# 
   847   000F89                     LATA            equ	3977	;# 
   848   000F8A                     LATB            equ	3978	;# 
   849   000F8B                     LATC            equ	3979	;# 
   850   000F8C                     LATD            equ	3980	;# 
   851   000F8D                     LATE            equ	3981	;# 
   852   000F92                     TRISA           equ	3986	;# 
   853   000F92                     DDRA            equ	3986	;# 
   854   000F93                     TRISB           equ	3987	;# 
   855   000F93                     DDRB            equ	3987	;# 
   856   000F94                     TRISC           equ	3988	;# 
   857   000F94                     DDRC            equ	3988	;# 
   858   000F95                     TRISD           equ	3989	;# 
   859   000F95                     DDRD            equ	3989	;# 
   860   000F96                     TRISE           equ	3990	;# 
   861   000F96                     DDRE            equ	3990	;# 
   862   000F9B                     OSCTUNE         equ	3995	;# 
   863   000F9D                     PIE1            equ	3997	;# 
   864   000F9E                     PIR1            equ	3998	;# 
   865   000F9F                     IPR1            equ	3999	;# 
   866   000FA0                     PIE2            equ	4000	;# 
   867   000FA1                     PIR2            equ	4001	;# 
   868   000FA2                     IPR2            equ	4002	;# 
   869   000FA6                     EECON1          equ	4006	;# 
   870   000FA7                     EECON2          equ	4007	;# 
   871   000FA8                     EEDATA          equ	4008	;# 
   872   000FA9                     EEADR           equ	4009	;# 
   873   000FAB                     RCSTA           equ	4011	;# 
   874   000FAB                     RCSTA1          equ	4011	;# 
   875   000FAC                     TXSTA           equ	4012	;# 
   876   000FAC                     TXSTA1          equ	4012	;# 
   877   000FAD                     TXREG           equ	4013	;# 
   878   000FAD                     TXREG1          equ	4013	;# 
   879   000FAE                     RCREG           equ	4014	;# 
   880   000FAE                     RCREG1          equ	4014	;# 
   881   000FAF                     SPBRG           equ	4015	;# 
   882   000FAF                     SPBRG1          equ	4015	;# 
   883   000FB0                     SPBRGH          equ	4016	;# 
   884   000FB1                     T3CON           equ	4017	;# 
   885   000FB2                     TMR3            equ	4018	;# 
   886   000FB2                     TMR3L           equ	4018	;# 
   887   000FB3                     TMR3H           equ	4019	;# 
   888   000FB4                     CMCON           equ	4020	;# 
   889   000FB5                     CVRCON          equ	4021	;# 
   890   000FB6                     ECCP1AS         equ	4022	;# 
   891   000FB7                     ECCP1DEL        equ	4023	;# 
   892   000FB7                     PWM1CON         equ	4023	;# 
   893   000FB8                     BAUDCON         equ	4024	;# 
   894   000FB8                     BAUDCTL         equ	4024	;# 
   895   000FBA                     CCP2CON         equ	4026	;# 
   896   000FBB                     CCPR2           equ	4027	;# 
   897   000FBB                     CCPR2L          equ	4027	;# 
   898   000FBC                     CCPR2H          equ	4028	;# 
   899   000FBD                     CCP1CON         equ	4029	;# 
   900   000FBD                     ECCP1CON        equ	4029	;# 
   901   000FBE                     CCPR1           equ	4030	;# 
   902   000FBE                     CCPR1L          equ	4030	;# 
   903   000FBF                     CCPR1H          equ	4031	;# 
   904   000FC0                     ADCON2          equ	4032	;# 
   905   000FC1                     ADCON1          equ	4033	;# 
   906   000FC2                     ADCON0          equ	4034	;# 
   907   000FC3                     ADRES           equ	4035	;# 
   908   000FC3                     ADRESL          equ	4035	;# 
   909   000FC4                     ADRESH          equ	4036	;# 
   910   000FC5                     SSPCON2         equ	4037	;# 
   911   000FC6                     SSPCON1         equ	4038	;# 
   912   000FC7                     SSPSTAT         equ	4039	;# 
   913   000FC8                     SSPADD          equ	4040	;# 
   914   000FC9                     SSPBUF          equ	4041	;# 
   915   000FCA                     T2CON           equ	4042	;# 
   916   000FCB                     PR2             equ	4043	;# 
   917   000FCB                     MEMCON          equ	4043	;# 
   918   000FCC                     TMR2            equ	4044	;# 
   919   000FCD                     T1CON           equ	4045	;# 
   920   000FCE                     TMR1            equ	4046	;# 
   921   000FCE                     TMR1L           equ	4046	;# 
   922   000FCF                     TMR1H           equ	4047	;# 
   923   000FD0                     RCON            equ	4048	;# 
   924   000FD1                     WDTCON          equ	4049	;# 
   925   000FD2                     HLVDCON         equ	4050	;# 
   926   000FD2                     LVDCON          equ	4050	;# 
   927   000FD3                     OSCCON          equ	4051	;# 
   928   000FD5                     T0CON           equ	4053	;# 
   929   000FD6                     TMR0            equ	4054	;# 
   930   000FD6                     TMR0L           equ	4054	;# 
   931   000FD7                     TMR0H           equ	4055	;# 
   932   000FD8                     STATUS          equ	4056	;# 
   933   000FD9                     FSR2            equ	4057	;# 
   934   000FD9                     FSR2L           equ	4057	;# 
   935   000FDA                     FSR2H           equ	4058	;# 
   936   000FDB                     PLUSW2          equ	4059	;# 
   937   000FDC                     PREINC2         equ	4060	;# 
   938   000FDD                     POSTDEC2        equ	4061	;# 
   939   000FDE                     POSTINC2        equ	4062	;# 
   940   000FDF                     INDF2           equ	4063	;# 
   941   000FE0                     BSR             equ	4064	;# 
   942   000FE1                     FSR1            equ	4065	;# 
   943   000FE1                     FSR1L           equ	4065	;# 
   944   000FE2                     FSR1H           equ	4066	;# 
   945   000FE3                     PLUSW1          equ	4067	;# 
   946   000FE4                     PREINC1         equ	4068	;# 
   947   000FE5                     POSTDEC1        equ	4069	;# 
   948   000FE6                     POSTINC1        equ	4070	;# 
   949   000FE7                     INDF1           equ	4071	;# 
   950   000FE8                     WREG            equ	4072	;# 
   951   000FE9                     FSR0            equ	4073	;# 
   952   000FE9                     FSR0L           equ	4073	;# 
   953   000FEA                     FSR0H           equ	4074	;# 
   954   000FEB                     PLUSW0          equ	4075	;# 
   955   000FEC                     PREINC0         equ	4076	;# 
   956   000FED                     POSTDEC0        equ	4077	;# 
   957   000FEE                     POSTINC0        equ	4078	;# 
   958   000FEF                     INDF0           equ	4079	;# 
   959   000FF0                     INTCON3         equ	4080	;# 
   960   000FF1                     INTCON2         equ	4081	;# 
   961   000FF2                     INTCON          equ	4082	;# 
   962   000FF3                     PROD            equ	4083	;# 
   963   000FF3                     PRODL           equ	4083	;# 
   964   000FF4                     PRODH           equ	4084	;# 
   965   000FF5                     TABLAT          equ	4085	;# 
   966   000FF6                     TBLPTR          equ	4086	;# 
   967   000FF6                     TBLPTRL         equ	4086	;# 
   968   000FF7                     TBLPTRH         equ	4087	;# 
   969   000FF8                     TBLPTRU         equ	4088	;# 
   970   000FF9                     PCLAT           equ	4089	;# 
   971   000FF9                     PC              equ	4089	;# 
   972   000FF9                     PCL             equ	4089	;# 
   973   000FFA                     PCLATH          equ	4090	;# 
   974   000FFB                     PCLATU          equ	4091	;# 
   975   000FFC                     STKPTR          equ	4092	;# 
   976   000FFD                     TOS             equ	4093	;# 
   977   000FFD                     TOSL            equ	4093	;# 
   978   000FFE                     TOSH            equ	4094	;# 
   979   000FFF                     TOSU            equ	4095	;# 
   980   000F80                     PORTA           equ	3968	;# 
   981   000F81                     PORTB           equ	3969	;# 
   982   000F82                     PORTC           equ	3970	;# 
   983   000F83                     PORTD           equ	3971	;# 
   984   000F84                     PORTE           equ	3972	;# 
   985   000F89                     LATA            equ	3977	;# 
   986   000F8A                     LATB            equ	3978	;# 
   987   000F8B                     LATC            equ	3979	;# 
   988   000F8C                     LATD            equ	3980	;# 
   989   000F8D                     LATE            equ	3981	;# 
   990   000F92                     TRISA           equ	3986	;# 
   991   000F92                     DDRA            equ	3986	;# 
   992   000F93                     TRISB           equ	3987	;# 
   993   000F93                     DDRB            equ	3987	;# 
   994   000F94                     TRISC           equ	3988	;# 
   995   000F94                     DDRC            equ	3988	;# 
   996   000F95                     TRISD           equ	3989	;# 
   997   000F95                     DDRD            equ	3989	;# 
   998   000F96                     TRISE           equ	3990	;# 
   999   000F96                     DDRE            equ	3990	;# 
  1000   000F9B                     OSCTUNE         equ	3995	;# 
  1001   000F9D                     PIE1            equ	3997	;# 
  1002   000F9E                     PIR1            equ	3998	;# 
  1003   000F9F                     IPR1            equ	3999	;# 
  1004   000FA0                     PIE2            equ	4000	;# 
  1005   000FA1                     PIR2            equ	4001	;# 
  1006   000FA2                     IPR2            equ	4002	;# 
  1007   000FA6                     EECON1          equ	4006	;# 
  1008   000FA7                     EECON2          equ	4007	;# 
  1009   000FA8                     EEDATA          equ	4008	;# 
  1010   000FA9                     EEADR           equ	4009	;# 
  1011   000FAB                     RCSTA           equ	4011	;# 
  1012   000FAB                     RCSTA1          equ	4011	;# 
  1013   000FAC                     TXSTA           equ	4012	;# 
  1014   000FAC                     TXSTA1          equ	4012	;# 
  1015   000FAD                     TXREG           equ	4013	;# 
  1016   000FAD                     TXREG1          equ	4013	;# 
  1017   000FAE                     RCREG           equ	4014	;# 
  1018   000FAE                     RCREG1          equ	4014	;# 
  1019   000FAF                     SPBRG           equ	4015	;# 
  1020   000FAF                     SPBRG1          equ	4015	;# 
  1021   000FB0                     SPBRGH          equ	4016	;# 
  1022   000FB1                     T3CON           equ	4017	;# 
  1023   000FB2                     TMR3            equ	4018	;# 
  1024   000FB2                     TMR3L           equ	4018	;# 
  1025   000FB3                     TMR3H           equ	4019	;# 
  1026   000FB4                     CMCON           equ	4020	;# 
  1027   000FB5                     CVRCON          equ	4021	;# 
  1028   000FB6                     ECCP1AS         equ	4022	;# 
  1029   000FB7                     ECCP1DEL        equ	4023	;# 
  1030   000FB7                     PWM1CON         equ	4023	;# 
  1031   000FB8                     BAUDCON         equ	4024	;# 
  1032   000FB8                     BAUDCTL         equ	4024	;# 
  1033   000FBA                     CCP2CON         equ	4026	;# 
  1034   000FBB                     CCPR2           equ	4027	;# 
  1035   000FBB                     CCPR2L          equ	4027	;# 
  1036   000FBC                     CCPR2H          equ	4028	;# 
  1037   000FBD                     CCP1CON         equ	4029	;# 
  1038   000FBD                     ECCP1CON        equ	4029	;# 
  1039   000FBE                     CCPR1           equ	4030	;# 
  1040   000FBE                     CCPR1L          equ	4030	;# 
  1041   000FBF                     CCPR1H          equ	4031	;# 
  1042   000FC0                     ADCON2          equ	4032	;# 
  1043   000FC1                     ADCON1          equ	4033	;# 
  1044   000FC2                     ADCON0          equ	4034	;# 
  1045   000FC3                     ADRES           equ	4035	;# 
  1046   000FC3                     ADRESL          equ	4035	;# 
  1047   000FC4                     ADRESH          equ	4036	;# 
  1048   000FC5                     SSPCON2         equ	4037	;# 
  1049   000FC6                     SSPCON1         equ	4038	;# 
  1050   000FC7                     SSPSTAT         equ	4039	;# 
  1051   000FC8                     SSPADD          equ	4040	;# 
  1052   000FC9                     SSPBUF          equ	4041	;# 
  1053   000FCA                     T2CON           equ	4042	;# 
  1054   000FCB                     PR2             equ	4043	;# 
  1055   000FCB                     MEMCON          equ	4043	;# 
  1056   000FCC                     TMR2            equ	4044	;# 
  1057   000FCD                     T1CON           equ	4045	;# 
  1058   000FCE                     TMR1            equ	4046	;# 
  1059   000FCE                     TMR1L           equ	4046	;# 
  1060   000FCF                     TMR1H           equ	4047	;# 
  1061   000FD0                     RCON            equ	4048	;# 
  1062   000FD1                     WDTCON          equ	4049	;# 
  1063   000FD2                     HLVDCON         equ	4050	;# 
  1064   000FD2                     LVDCON          equ	4050	;# 
  1065   000FD3                     OSCCON          equ	4051	;# 
  1066   000FD5                     T0CON           equ	4053	;# 
  1067   000FD6                     TMR0            equ	4054	;# 
  1068   000FD6                     TMR0L           equ	4054	;# 
  1069   000FD7                     TMR0H           equ	4055	;# 
  1070   000FD8                     STATUS          equ	4056	;# 
  1071   000FD9                     FSR2            equ	4057	;# 
  1072   000FD9                     FSR2L           equ	4057	;# 
  1073   000FDA                     FSR2H           equ	4058	;# 
  1074   000FDB                     PLUSW2          equ	4059	;# 
  1075   000FDC                     PREINC2         equ	4060	;# 
  1076   000FDD                     POSTDEC2        equ	4061	;# 
  1077   000FDE                     POSTINC2        equ	4062	;# 
  1078   000FDF                     INDF2           equ	4063	;# 
  1079   000FE0                     BSR             equ	4064	;# 
  1080   000FE1                     FSR1            equ	4065	;# 
  1081   000FE1                     FSR1L           equ	4065	;# 
  1082   000FE2                     FSR1H           equ	4066	;# 
  1083   000FE3                     PLUSW1          equ	4067	;# 
  1084   000FE4                     PREINC1         equ	4068	;# 
  1085   000FE5                     POSTDEC1        equ	4069	;# 
  1086   000FE6                     POSTINC1        equ	4070	;# 
  1087   000FE7                     INDF1           equ	4071	;# 
  1088   000FE8                     WREG            equ	4072	;# 
  1089   000FE9                     FSR0            equ	4073	;# 
  1090   000FE9                     FSR0L           equ	4073	;# 
  1091   000FEA                     FSR0H           equ	4074	;# 
  1092   000FEB                     PLUSW0          equ	4075	;# 
  1093   000FEC                     PREINC0         equ	4076	;# 
  1094   000FED                     POSTDEC0        equ	4077	;# 
  1095   000FEE                     POSTINC0        equ	4078	;# 
  1096   000FEF                     INDF0           equ	4079	;# 
  1097   000FF0                     INTCON3         equ	4080	;# 
  1098   000FF1                     INTCON2         equ	4081	;# 
  1099   000FF2                     INTCON          equ	4082	;# 
  1100   000FF3                     PROD            equ	4083	;# 
  1101   000FF3                     PRODL           equ	4083	;# 
  1102   000FF4                     PRODH           equ	4084	;# 
  1103   000FF5                     TABLAT          equ	4085	;# 
  1104   000FF6                     TBLPTR          equ	4086	;# 
  1105   000FF6                     TBLPTRL         equ	4086	;# 
  1106   000FF7                     TBLPTRH         equ	4087	;# 
  1107   000FF8                     TBLPTRU         equ	4088	;# 
  1108   000FF9                     PCLAT           equ	4089	;# 
  1109   000FF9                     PC              equ	4089	;# 
  1110   000FF9                     PCL             equ	4089	;# 
  1111   000FFA                     PCLATH          equ	4090	;# 
  1112   000FFB                     PCLATU          equ	4091	;# 
  1113   000FFC                     STKPTR          equ	4092	;# 
  1114   000FFD                     TOS             equ	4093	;# 
  1115   000FFD                     TOSL            equ	4093	;# 
  1116   000FFE                     TOSH            equ	4094	;# 
  1117   000FFF                     TOSU            equ	4095	;# 
  1118   000F80                     PORTA           equ	3968	;# 
  1119   000F81                     PORTB           equ	3969	;# 
  1120   000F82                     PORTC           equ	3970	;# 
  1121   000F83                     PORTD           equ	3971	;# 
  1122   000F84                     PORTE           equ	3972	;# 
  1123   000F89                     LATA            equ	3977	;# 
  1124   000F8A                     LATB            equ	3978	;# 
  1125   000F8B                     LATC            equ	3979	;# 
  1126   000F8C                     LATD            equ	3980	;# 
  1127   000F8D                     LATE            equ	3981	;# 
  1128   000F92                     TRISA           equ	3986	;# 
  1129   000F92                     DDRA            equ	3986	;# 
  1130   000F93                     TRISB           equ	3987	;# 
  1131   000F93                     DDRB            equ	3987	;# 
  1132   000F94                     TRISC           equ	3988	;# 
  1133   000F94                     DDRC            equ	3988	;# 
  1134   000F95                     TRISD           equ	3989	;# 
  1135   000F95                     DDRD            equ	3989	;# 
  1136   000F96                     TRISE           equ	3990	;# 
  1137   000F96                     DDRE            equ	3990	;# 
  1138   000F9B                     OSCTUNE         equ	3995	;# 
  1139   000F9D                     PIE1            equ	3997	;# 
  1140   000F9E                     PIR1            equ	3998	;# 
  1141   000F9F                     IPR1            equ	3999	;# 
  1142   000FA0                     PIE2            equ	4000	;# 
  1143   000FA1                     PIR2            equ	4001	;# 
  1144   000FA2                     IPR2            equ	4002	;# 
  1145   000FA6                     EECON1          equ	4006	;# 
  1146   000FA7                     EECON2          equ	4007	;# 
  1147   000FA8                     EEDATA          equ	4008	;# 
  1148   000FA9                     EEADR           equ	4009	;# 
  1149   000FAB                     RCSTA           equ	4011	;# 
  1150   000FAB                     RCSTA1          equ	4011	;# 
  1151   000FAC                     TXSTA           equ	4012	;# 
  1152   000FAC                     TXSTA1          equ	4012	;# 
  1153   000FAD                     TXREG           equ	4013	;# 
  1154   000FAD                     TXREG1          equ	4013	;# 
  1155   000FAE                     RCREG           equ	4014	;# 
  1156   000FAE                     RCREG1          equ	4014	;# 
  1157   000FAF                     SPBRG           equ	4015	;# 
  1158   000FAF                     SPBRG1          equ	4015	;# 
  1159   000FB0                     SPBRGH          equ	4016	;# 
  1160   000FB1                     T3CON           equ	4017	;# 
  1161   000FB2                     TMR3            equ	4018	;# 
  1162   000FB2                     TMR3L           equ	4018	;# 
  1163   000FB3                     TMR3H           equ	4019	;# 
  1164   000FB4                     CMCON           equ	4020	;# 
  1165   000FB5                     CVRCON          equ	4021	;# 
  1166   000FB6                     ECCP1AS         equ	4022	;# 
  1167   000FB7                     ECCP1DEL        equ	4023	;# 
  1168   000FB7                     PWM1CON         equ	4023	;# 
  1169   000FB8                     BAUDCON         equ	4024	;# 
  1170   000FB8                     BAUDCTL         equ	4024	;# 
  1171   000FBA                     CCP2CON         equ	4026	;# 
  1172   000FBB                     CCPR2           equ	4027	;# 
  1173   000FBB                     CCPR2L          equ	4027	;# 
  1174   000FBC                     CCPR2H          equ	4028	;# 
  1175   000FBD                     CCP1CON         equ	4029	;# 
  1176   000FBD                     ECCP1CON        equ	4029	;# 
  1177   000FBE                     CCPR1           equ	4030	;# 
  1178   000FBE                     CCPR1L          equ	4030	;# 
  1179   000FBF                     CCPR1H          equ	4031	;# 
  1180   000FC0                     ADCON2          equ	4032	;# 
  1181   000FC1                     ADCON1          equ	4033	;# 
  1182   000FC2                     ADCON0          equ	4034	;# 
  1183   000FC3                     ADRES           equ	4035	;# 
  1184   000FC3                     ADRESL          equ	4035	;# 
  1185   000FC4                     ADRESH          equ	4036	;# 
  1186   000FC5                     SSPCON2         equ	4037	;# 
  1187   000FC6                     SSPCON1         equ	4038	;# 
  1188   000FC7                     SSPSTAT         equ	4039	;# 
  1189   000FC8                     SSPADD          equ	4040	;# 
  1190   000FC9                     SSPBUF          equ	4041	;# 
  1191   000FCA                     T2CON           equ	4042	;# 
  1192   000FCB                     PR2             equ	4043	;# 
  1193   000FCB                     MEMCON          equ	4043	;# 
  1194   000FCC                     TMR2            equ	4044	;# 
  1195   000FCD                     T1CON           equ	4045	;# 
  1196   000FCE                     TMR1            equ	4046	;# 
  1197   000FCE                     TMR1L           equ	4046	;# 
  1198   000FCF                     TMR1H           equ	4047	;# 
  1199   000FD0                     RCON            equ	4048	;# 
  1200   000FD1                     WDTCON          equ	4049	;# 
  1201   000FD2                     HLVDCON         equ	4050	;# 
  1202   000FD2                     LVDCON          equ	4050	;# 
  1203   000FD3                     OSCCON          equ	4051	;# 
  1204   000FD5                     T0CON           equ	4053	;# 
  1205   000FD6                     TMR0            equ	4054	;# 
  1206   000FD6                     TMR0L           equ	4054	;# 
  1207   000FD7                     TMR0H           equ	4055	;# 
  1208   000FD8                     STATUS          equ	4056	;# 
  1209   000FD9                     FSR2            equ	4057	;# 
  1210   000FD9                     FSR2L           equ	4057	;# 
  1211   000FDA                     FSR2H           equ	4058	;# 
  1212   000FDB                     PLUSW2          equ	4059	;# 
  1213   000FDC                     PREINC2         equ	4060	;# 
  1214   000FDD                     POSTDEC2        equ	4061	;# 
  1215   000FDE                     POSTINC2        equ	4062	;# 
  1216   000FDF                     INDF2           equ	4063	;# 
  1217   000FE0                     BSR             equ	4064	;# 
  1218   000FE1                     FSR1            equ	4065	;# 
  1219   000FE1                     FSR1L           equ	4065	;# 
  1220   000FE2                     FSR1H           equ	4066	;# 
  1221   000FE3                     PLUSW1          equ	4067	;# 
  1222   000FE4                     PREINC1         equ	4068	;# 
  1223   000FE5                     POSTDEC1        equ	4069	;# 
  1224   000FE6                     POSTINC1        equ	4070	;# 
  1225   000FE7                     INDF1           equ	4071	;# 
  1226   000FE8                     WREG            equ	4072	;# 
  1227   000FE9                     FSR0            equ	4073	;# 
  1228   000FE9                     FSR0L           equ	4073	;# 
  1229   000FEA                     FSR0H           equ	4074	;# 
  1230   000FEB                     PLUSW0          equ	4075	;# 
  1231   000FEC                     PREINC0         equ	4076	;# 
  1232   000FED                     POSTDEC0        equ	4077	;# 
  1233   000FEE                     POSTINC0        equ	4078	;# 
  1234   000FEF                     INDF0           equ	4079	;# 
  1235   000FF0                     INTCON3         equ	4080	;# 
  1236   000FF1                     INTCON2         equ	4081	;# 
  1237   000FF2                     INTCON          equ	4082	;# 
  1238   000FF3                     PROD            equ	4083	;# 
  1239   000FF3                     PRODL           equ	4083	;# 
  1240   000FF4                     PRODH           equ	4084	;# 
  1241   000FF5                     TABLAT          equ	4085	;# 
  1242   000FF6                     TBLPTR          equ	4086	;# 
  1243   000FF6                     TBLPTRL         equ	4086	;# 
  1244   000FF7                     TBLPTRH         equ	4087	;# 
  1245   000FF8                     TBLPTRU         equ	4088	;# 
  1246   000FF9                     PCLAT           equ	4089	;# 
  1247   000FF9                     PC              equ	4089	;# 
  1248   000FF9                     PCL             equ	4089	;# 
  1249   000FFA                     PCLATH          equ	4090	;# 
  1250   000FFB                     PCLATU          equ	4091	;# 
  1251   000FFC                     STKPTR          equ	4092	;# 
  1252   000FFD                     TOS             equ	4093	;# 
  1253   000FFD                     TOSL            equ	4093	;# 
  1254   000FFE                     TOSH            equ	4094	;# 
  1255   000FFF                     TOSU            equ	4095	;# 
  1256                           
  1257                           	psect	idataCOMRAM
  1258   001B80                     __pidataCOMRAM:
  1259                           	callstack 0
  1260                           
  1261                           ;initializer for _colValues
  1262   001B80  20                 	db	32
  1263   001B81  40                 	db	64
  1264   001B82  10                 	db	16
  1265                           
  1266                           ;initializer for motor_Read@MAX_TIMEOUT
  1267   001B83  03E8               	dw	1000
  1268                           
  1269                           ;initializer for _index
  1270   001B85  04                 	db	4
  1271                           
  1272                           	psect	idataBANK0
  1273   001A4C                     __pidataBANK0:
  1274                           	callstack 0
  1275                           
  1276                           ;initializer for _userUIDs
  1277   001A4C  65                 	db	101
  1278   001A4D  DC                 	db	220
  1279   001A4E  F9                 	db	249
  1280   001A4F  03                 	db	3
  1281   001A50  43                 	db	67
  1282   001A51  DC                 	db	220
  1283   001A52  0D                 	db	13
  1284   001A53  F9                 	db	249
  1285   001A54  03                 	db	3
  1286   001A55  2B                 	db	43
  1287   001A56  DF                 	db	223
  1288   001A57  8B                 	db	139
  1289   001A58  DF                 	db	223
  1290   001A59  C4                 	db	196
  1291   001A5A  4F                 	db	79
  1292   001A5B  21                 	db	33
  1293   001A5C  32                 	db	50
  1294   001A5D  A9                 	db	169
  1295   001A5E  89                 	db	137
  1296   001A5F  33                 	db	51
  1297                           
  1298                           ;initializer for controlLED@ledBits
  1299   001A60  01                 	db	1
  1300   001A61  02                 	db	2
  1301   001A62  04                 	db	4
  1302   001A63  08                 	db	8
  1303   001A64  10                 	db	16
  1304   001A65  20                 	db	32
  1305                           
  1306                           ;initializer for _currentTime
  1307   001A66  30                 	db	48
  1308   001A67  30                 	db	48
  1309   001A68  30                 	db	48
  1310   001A69  30                 	db	48
  1311                           
  1312                           ;initializer for motorTerminal@hour
  1313   001A6A  30                 	db	48
  1314   001A6B  30                 	db	48
  1315   001A6C  30                 	db	48
  1316   001A6D  30                 	db	48
  1317                           
  1318                           	psect	mediumconst
  1319   001E2E                     __pmediumconst:
  1320                           	callstack 0
  1321   001E2E  00                 	db	0
  1322   001E2F                     printfUID@hex:
  1323                           	callstack 0
  1324   001E2F  30                 	db	48
  1325   001E30  31                 	db	49
  1326   001E31  32                 	db	50
  1327   001E32  33                 	db	51
  1328   001E33  34                 	db	52
  1329   001E34  35                 	db	53
  1330   001E35  36                 	db	54
  1331   001E36  37                 	db	55
  1332   001E37  38                 	db	56
  1333   001E38  39                 	db	57
  1334   001E39  41                 	db	65
  1335   001E3A  42                 	db	66
  1336   001E3B  43                 	db	67
  1337   001E3C  44                 	db	68
  1338   001E3D  45                 	db	69
  1339   001E3E  46                 	db	70
  1340   001E3F  00                 	db	0
  1341   001E40                     __end_ofprintfUID@hex:
  1342                           	callstack 0
  1343   001E40                     _keymap:
  1344                           	callstack 0
  1345   001E40  01                 	db	1
  1346   001E41  02                 	db	2
  1347   001E42  03                 	db	3
  1348   001E43  04                 	db	4
  1349   001E44  05                 	db	5
  1350   001E45  06                 	db	6
  1351   001E46  07                 	db	7
  1352   001E47  08                 	db	8
  1353   001E48  09                 	db	9
  1354   001E49  0A                 	db	10
  1355   001E4A  00                 	db	0
  1356   001E4B  0B                 	db	11
  1357   001E4C                     __end_of_keymap:
  1358                           	callstack 0
  1359   007F92                     _TMR0IF         set	32658
  1360   000FD6                     _TMR0           set	4054
  1361   000FD5                     _T0CON          set	4053
  1362   000FAD                     _TXREG          set	4013
  1363   000FAE                     _RCREG          set	4014
  1364   000F9E                     _PIR1bits       set	3998
  1365   000FB8                     _BAUDCON        set	4024
  1366   000FAF                     _SPBRG          set	4015
  1367   000FAB                     _RCSTA          set	4011
  1368   000FAC                     _TXSTA          set	4012
  1369   000F83                     _PORTD          set	3971
  1370   000F8C                     _LATD           set	3980
  1371   000F95                     _TRISD          set	3989
  1372   000F94                     _TRISCbits      set	3988
  1373   000F82                     _PORTCbits      set	3970
  1374   000F8B                     _LATCbits       set	3979
  1375   000F89                     _LATA           set	3977
  1376   000F96                     _TRISE          set	3990
  1377   000F92                     _TRISA          set	3986
  1378   000F8A                     _LATBbits       set	3978
  1379   000F93                     _TRISBbits      set	3987
  1380   000F96                     _TRISEbits      set	3990
  1381   000FC1                     _ADCON1         set	4033
  1382   000F8D                     _LATEbits       set	3981
  1383   000FF2                     _INTCONbits     set	4082
  1384   001E4C                     STR_6:
  1385   001E4C  09                 	db	9
  1386   001E4D  31                 	db	49	;'1'
  1387   001E4E  2E                 	db	46
  1388   001E4F  20                 	db	32
  1389   001E50  51                 	db	81	;'Q'
  1390   001E51  75                 	db	117	;'u'
  1391   001E52  69                 	db	105	;'i'
  1392   001E53  20                 	db	32
  1393   001E54  68                 	db	104	;'h'
  1394   001E55  69                 	db	105	;'i'
  1395   001E56  20                 	db	32
  1396   001E57  68                 	db	104	;'h'
  1397   001E58  61                 	db	97	;'a'
  1398   001E59  20                 	db	32
  1399   001E5A  61                 	db	97	;'a'
  1400   001E5B  20                 	db	32
  1401   001E5C  6C                 	db	108	;'l'
  1402   001E5D  61                 	db	97	;'a'
  1403   001E5E  20                 	db	32
  1404   001E5F  73                 	db	115	;'s'
  1405   001E60  61                 	db	97	;'a'
  1406   001E61  6C                 	db	108	;'l'
  1407   001E62  61                 	db	97	;'a'
  1408   001E63  3F                 	db	63	;'?'
  1409   001E64  0D                 	db	13
  1410   001E65  0A                 	db	10
  1411   001E66  09                 	db	9
  1412   001E67  32                 	db	50	;'2'
  1413   001E68  2E                 	db	46
  1414   001E69  20                 	db	32
  1415   001E6A  4D                 	db	77	;'M'
  1416   001E6B  6F                 	db	111	;'o'
  1417   001E6C  73                 	db	115	;'s'
  1418   001E6D  74                 	db	116	;'t'
  1419   001E6E  72                 	db	114	;'r'
  1420   001E6F  61                 	db	97	;'a'
  1421   001E70  72                 	db	114	;'r'
  1422   001E71  20                 	db	32
  1423   001E72  63                 	db	99	;'c'
  1424   001E73  6F                 	db	111	;'o'
  1425   001E74  6E                 	db	110	;'n'
  1426   001E75  66                 	db	102	;'f'
  1427   001E76  69                 	db	105	;'i'
  1428   001E77  67                 	db	103	;'g'
  1429   001E78  75                 	db	117	;'u'
  1430   001E79  72                 	db	114	;'r'
  1431   001E7A  61                 	db	97	;'a'
  1432   001E7B  63                 	db	99	;'c'
  1433   001E7C  69                 	db	105	;'i'
  1434   001E7D  6F                 	db	111	;'o'
  1435   001E7E  6E                 	db	110	;'n'
  1436   001E7F  73                 	db	115	;'s'
  1437   001E80  0D                 	db	13
  1438   001E81  0A                 	db	10
  1439   001E82  09                 	db	9
  1440   001E83  33                 	db	51	;'3'
  1441   001E84  2E                 	db	46
  1442   001E85  20                 	db	32
  1443   001E86  4D                 	db	77	;'M'
  1444   001E87  6F                 	db	111	;'o'
  1445   001E88  64                 	db	100	;'d'
  1446   001E89  69                 	db	105	;'i'
  1447   001E8A  66                 	db	102	;'f'
  1448   001E8B  69                 	db	105	;'i'
  1449   001E8C  63                 	db	99	;'c'
  1450   001E8D  61                 	db	97	;'a'
  1451   001E8E  72                 	db	114	;'r'
  1452   001E8F  20                 	db	32
  1453   001E90  68                 	db	104	;'h'
  1454   001E91  6F                 	db	111	;'o'
  1455   001E92  72                 	db	114	;'r'
  1456   001E93  61                 	db	97	;'a'
  1457   001E94  20                 	db	32
  1458   001E95  64                 	db	100	;'d'
  1459   001E96  65                 	db	101	;'e'
  1460   001E97  6C                 	db	108	;'l'
  1461   001E98  20                 	db	32
  1462   001E99  73                 	db	115	;'s'
  1463   001E9A  69                 	db	105	;'i'
  1464   001E9B  73                 	db	115	;'s'
  1465   001E9C  74                 	db	116	;'t'
  1466   001E9D  65                 	db	101	;'e'
  1467   001E9E  6D                 	db	109	;'m'
  1468   001E9F  61                 	db	97	;'a'
  1469   001EA0  0D                 	db	13
  1470   001EA1  0A                 	db	10
  1471   001EA2  4F                 	db	79	;'O'
  1472   001EA3  70                 	db	112	;'p'
  1473   001EA4  63                 	db	99	;'c'
  1474   001EA5  69                 	db	105	;'i'
  1475   001EA6  C3                 	db	-61
  1476   001EA7  B3                 	db	-77
  1477   001EA8  3A                 	db	58	;':'
  1478   001EA9  20                 	db	32
  1479   001EAA  00                 	db	0
  1480   001EAB                     STR_5:
  1481   001EAB  4D                 	db	77	;'M'
  1482   001EAC  65                 	db	101	;'e'
  1483   001EAD  6E                 	db	110	;'n'
  1484   001EAE  C3                 	db	-61
  1485   001EAF  BA                 	db	-70
  1486   001EB0  20                 	db	32
  1487   001EB1  70                 	db	112	;'p'
  1488   001EB2  72                 	db	114	;'r'
  1489   001EB3  69                 	db	105	;'i'
  1490   001EB4  6E                 	db	110	;'n'
  1491   001EB5  63                 	db	99	;'c'
  1492   001EB6  69                 	db	105	;'i'
  1493   001EB7  70                 	db	112	;'p'
  1494   001EB8  61                 	db	97	;'a'
  1495   001EB9  6C                 	db	108	;'l'
  1496   001EBA  0D                 	db	13
  1497   001EBB  0A                 	db	10
  1498   001EBC  2D                 	db	45
  1499   001EBD  2D                 	db	45
  1500   001EBE  2D                 	db	45
  1501   001EBF  2D                 	db	45
  1502   001EC0  2D                 	db	45
  1503   001EC1  2D                 	db	45
  1504   001EC2  2D                 	db	45
  1505   001EC3  2D                 	db	45
  1506   001EC4  2D                 	db	45
  1507   001EC5  2D                 	db	45
  1508   001EC6  2D                 	db	45
  1509   001EC7  2D                 	db	45
  1510   001EC8  2D                 	db	45
  1511   001EC9  2D                 	db	45
  1512   001ECA  2D                 	db	45
  1513   001ECB  0D                 	db	13
  1514   001ECC  0A                 	db	10
  1515   001ECD  54                 	db	84	;'T'
  1516   001ECE  72                 	db	114	;'r'
  1517   001ECF  69                 	db	105	;'i'
  1518   001ED0  61                 	db	97	;'a'
  1519   001ED1  20                 	db	32
  1520   001ED2  75                 	db	117	;'u'
  1521   001ED3  6E                 	db	110	;'n'
  1522   001ED4  61                 	db	97	;'a'
  1523   001ED5  20                 	db	32
  1524   001ED6  6F                 	db	111	;'o'
  1525   001ED7  70                 	db	112	;'p'
  1526   001ED8  63                 	db	99	;'c'
  1527   001ED9  69                 	db	105	;'i'
  1528   001EDA  C3                 	db	-61
  1529   001EDB  B3                 	db	-77
  1530   001EDC  3A                 	db	58	;':'
  1531   001EDD  0D                 	db	13
  1532   001EDE  0A                 	db	10
  1533   001EDF  00                 	db	0
  1534   001EE0                     STR_1:
  1535   001EE0  0D                 	db	13
  1536   001EE1  0A                 	db	10
  1537   001EE2  4C                 	db	76	;'L'
  1538   001EE3  27                 	db	39
  1539   001EE4  75                 	db	117	;'u'
  1540   001EE5  73                 	db	115	;'s'
  1541   001EE6  75                 	db	117	;'u'
  1542   001EE7  61                 	db	97	;'a'
  1543   001EE8  72                 	db	114	;'r'
  1544   001EE9  69                 	db	105	;'i'
  1545   001EEA  20                 	db	32
  1546   001EEB  68                 	db	104	;'h'
  1547   001EEC  61                 	db	97	;'a'
  1548   001EED  20                 	db	32
  1549   001EEE  73                 	db	115	;'s'
  1550   001EEF  6F                 	db	111	;'o'
  1551   001EF0  72                 	db	114	;'r'
  1552   001EF1  74                 	db	116	;'t'
  1553   001EF2  69                 	db	105	;'i'
  1554   001EF3  74                 	db	116	;'t'
  1555   001EF4  20                 	db	32
  1556   001EF5  64                 	db	100	;'d'
  1557   001EF6  65                 	db	101	;'e'
  1558   001EF7  20                 	db	32
  1559   001EF8  6C                 	db	108	;'l'
  1560   001EF9  61                 	db	97	;'a'
  1561   001EFA  20                 	db	32
  1562   001EFB  73                 	db	115	;'s'
  1563   001EFC  61                 	db	97	;'a'
  1564   001EFD  6C                 	db	108	;'l'
  1565   001EFE  61                 	db	97	;'a'
  1566   001EFF  0D                 	db	13
  1567   001F00  0A                 	db	10
  1568   001F01  00                 	db	0
  1569   001F02                     STR_10:
  1570   001F02  4E                 	db	78	;'N'
  1571   001F03  6F                 	db	111	;'o'
  1572   001F04  20                 	db	32
  1573   001F05  68                 	db	104	;'h'
  1574   001F06  69                 	db	105	;'i'
  1575   001F07  20                 	db	32
  1576   001F08  68                 	db	104	;'h'
  1577   001F09  61                 	db	97	;'a'
  1578   001F0A  20                 	db	32
  1579   001F0B  63                 	db	99	;'c'
  1580   001F0C  61                 	db	97	;'a'
  1581   001F0D  70                 	db	112	;'p'
  1582   001F0E  20                 	db	32
  1583   001F0F  75                 	db	117	;'u'
  1584   001F10  73                 	db	115	;'s'
  1585   001F11  75                 	db	117	;'u'
  1586   001F12  61                 	db	97	;'a'
  1587   001F13  72                 	db	114	;'r'
  1588   001F14  69                 	db	105	;'i'
  1589   001F15  20                 	db	32
  1590   001F16  61                 	db	97	;'a'
  1591   001F17  20                 	db	32
  1592   001F18  6C                 	db	108	;'l'
  1593   001F19  61                 	db	97	;'a'
  1594   001F1A  20                 	db	32
  1595   001F1B  73                 	db	115	;'s'
  1596   001F1C  61                 	db	97	;'a'
  1597   001F1D  6C                 	db	108	;'l'
  1598   001F1E  61                 	db	97	;'a'
  1599   001F1F  2E                 	db	46
  1600   001F20  0D                 	db	13
  1601   001F21  0A                 	db	10
  1602   001F22  00                 	db	0
  1603   001F23                     STR_8:
  1604   001F23  45                 	db	69	;'E'
  1605   001F24  52                 	db	82	;'R'
  1606   001F25  52                 	db	82	;'R'
  1607   001F26  4F                 	db	79	;'O'
  1608   001F27  52                 	db	82	;'R'
  1609   001F28  2E                 	db	46
  1610   001F29  20                 	db	32
  1611   001F2A  56                 	db	86	;'V'
  1612   001F2B  61                 	db	97	;'a'
  1613   001F2C  6C                 	db	108	;'l'
  1614   001F2D  6F                 	db	111	;'o'
  1615   001F2E  72                 	db	114	;'r'
  1616   001F2F  20                 	db	32
  1617   001F30  69                 	db	105	;'i'
  1618   001F31  6E                 	db	110	;'n'
  1619   001F32  74                 	db	116	;'t'
  1620   001F33  72                 	db	114	;'r'
  1621   001F34  6F                 	db	111	;'o'
  1622   001F35  64                 	db	100	;'d'
  1623   001F36  75                 	db	117	;'u'
  1624   001F37  69                 	db	105	;'i'
  1625   001F38  74                 	db	116	;'t'
  1626   001F39  20                 	db	32
  1627   001F3A  65                 	db	101	;'e'
  1628   001F3B  72                 	db	114	;'r'
  1629   001F3C  72                 	db	114	;'r'
  1630   001F3D  6F                 	db	111	;'o'
  1631   001F3E  6E                 	db	110	;'n'
  1632   001F3F  69                 	db	105	;'i'
  1633   001F40  2E                 	db	46
  1634   001F41  0D                 	db	13
  1635   001F42  0A                 	db	10
  1636   001F43  00                 	db	0
  1637   001F44                     STR_16:
  1638   001F44  0D                 	db	13
  1639   001F45  0A                 	db	10
  1640   001F46  48                 	db	72	;'H'
  1641   001F47  6F                 	db	111	;'o'
  1642   001F48  72                 	db	114	;'r'
  1643   001F49  61                 	db	97	;'a'
  1644   001F4A  20                 	db	32
  1645   001F4B  69                 	db	105	;'i'
  1646   001F4C  6E                 	db	110	;'n'
  1647   001F4D  74                 	db	116	;'t'
  1648   001F4E  72                 	db	114	;'r'
  1649   001F4F  6F                 	db	111	;'o'
  1650   001F50  64                 	db	100	;'d'
  1651   001F51  75                 	db	117	;'u'
  1652   001F52  69                 	db	105	;'i'
  1653   001F53  64                 	db	100	;'d'
  1654   001F54  61                 	db	97	;'a'
  1655   001F55  20                 	db	32
  1656   001F56  63                 	db	99	;'c'
  1657   001F57  6F                 	db	111	;'o'
  1658   001F58  72                 	db	114	;'r'
  1659   001F59  72                 	db	114	;'r'
  1660   001F5A  65                 	db	101	;'e'
  1661   001F5B  63                 	db	99	;'c'
  1662   001F5C  74                 	db	116	;'t'
  1663   001F5D  61                 	db	97	;'a'
  1664   001F5E  6D                 	db	109	;'m'
  1665   001F5F  65                 	db	101	;'e'
  1666   001F60  6E                 	db	110	;'n'
  1667   001F61  74                 	db	116	;'t'
  1668   001F62  0D                 	db	13
  1669   001F63  0A                 	db	10
  1670   001F64  00                 	db	0
  1671   001F65                     STR_15:
  1672   001F65  49                 	db	73	;'I'
  1673   001F66  6E                 	db	110	;'n'
  1674   001F67  74                 	db	116	;'t'
  1675   001F68  72                 	db	114	;'r'
  1676   001F69  6F                 	db	111	;'o'
  1677   001F6A  64                 	db	100	;'d'
  1678   001F6B  75                 	db	117	;'u'
  1679   001F6C  63                 	db	99	;'c'
  1680   001F6D  65                 	db	101	;'e'
  1681   001F6E  20                 	db	32
  1682   001F6F  6C                 	db	108	;'l'
  1683   001F70  61                 	db	97	;'a'
  1684   001F71  20                 	db	32
  1685   001F72  68                 	db	104	;'h'
  1686   001F73  6F                 	db	111	;'o'
  1687   001F74  72                 	db	114	;'r'
  1688   001F75  61                 	db	97	;'a'
  1689   001F76  20                 	db	32
  1690   001F77  61                 	db	97	;'a'
  1691   001F78  63                 	db	99	;'c'
  1692   001F79  74                 	db	116	;'t'
  1693   001F7A  75                 	db	117	;'u'
  1694   001F7B  61                 	db	97	;'a'
  1695   001F7C  6C                 	db	108	;'l'
  1696   001F7D  28                 	db	40
  1697   001F7E  48                 	db	72	;'H'
  1698   001F7F  48                 	db	72	;'H'
  1699   001F80  4D                 	db	77	;'M'
  1700   001F81  4D                 	db	77	;'M'
  1701   001F82  29                 	db	41
  1702   001F83  3A                 	db	58	;':'
  1703   001F84  20                 	db	32
  1704   001F85  00                 	db	0
  1705   001F86                     STR_3:
  1706   001F86  09                 	db	9
  1707   001F87  4E                 	db	78	;'N'
  1708   001F88  6F                 	db	111	;'o'
  1709   001F89  20                 	db	32
  1710   001F8A  68                 	db	104	;'h'
  1711   001F8B  61                 	db	97	;'a'
  1712   001F8C  79                 	db	121	;'y'
  1713   001F8D  20                 	db	32
  1714   001F8E  75                 	db	117	;'u'
  1715   001F8F  73                 	db	115	;'s'
  1716   001F90  75                 	db	117	;'u'
  1717   001F91  61                 	db	97	;'a'
  1718   001F92  72                 	db	114	;'r'
  1719   001F93  69                 	db	105	;'i'
  1720   001F94  6F                 	db	111	;'o'
  1721   001F95  20                 	db	32
  1722   001F96  63                 	db	99	;'c'
  1723   001F97  6F                 	db	111	;'o'
  1724   001F98  6E                 	db	110	;'n'
  1725   001F99  66                 	db	102	;'f'
  1726   001F9A  69                 	db	105	;'i'
  1727   001F9B  67                 	db	103	;'g'
  1728   001F9C  75                 	db	117	;'u'
  1729   001F9D  72                 	db	114	;'r'
  1730   001F9E  61                 	db	97	;'a'
  1731   001F9F  64                 	db	100	;'d'
  1732   001FA0  6F                 	db	111	;'o'
  1733   001FA1  0D                 	db	13
  1734   001FA2  0A                 	db	10
  1735   001FA3  00                 	db	0
  1736   001FA4                     STR_2:
  1737   001FA4  53                 	db	83	;'S'
  1738   001FA5  27                 	db	39
  1739   001FA6  68                 	db	104	;'h'
  1740   001FA7  61                 	db	97	;'a'
  1741   001FA8  6E                 	db	110	;'n'
  1742   001FA9  20                 	db	32
  1743   001FAA  72                 	db	114	;'r'
  1744   001FAB  65                 	db	101	;'e'
  1745   001FAC  73                 	db	115	;'s'
  1746   001FAD  65                 	db	101	;'e'
  1747   001FAE  74                 	db	116	;'t'
  1748   001FAF  65                 	db	101	;'e'
  1749   001FB0  6A                 	db	106	;'j'
  1750   001FB1  61                 	db	97	;'a'
  1751   001FB2  74                 	db	116	;'t'
  1752   001FB3  20                 	db	32
  1753   001FB4  6C                 	db	108	;'l'
  1754   001FB5  65                 	db	101	;'e'
  1755   001FB6  73                 	db	115	;'s'
  1756   001FB7  20                 	db	32
  1757   001FB8  64                 	db	100	;'d'
  1758   001FB9  61                 	db	97	;'a'
  1759   001FBA  64                 	db	100	;'d'
  1760   001FBB  65                 	db	101	;'e'
  1761   001FBC  73                 	db	115	;'s'
  1762   001FBD  00                 	db	0
  1763   001FBE                     STR_17:
  1764   001FBE  0D                 	db	13
  1765   001FBF  0A                 	db	10
  1766   001FC0  54                 	db	84	;'T'
  1767   001FC1  61                 	db	97	;'a'
  1768   001FC2  72                 	db	114	;'r'
  1769   001FC3  67                 	db	103	;'g'
  1770   001FC4  65                 	db	101	;'e'
  1771   001FC5  74                 	db	116	;'t'
  1772   001FC6  61                 	db	97	;'a'
  1773   001FC7  20                 	db	32
  1774   001FC8  64                 	db	100	;'d'
  1775   001FC9  65                 	db	101	;'e'
  1776   001FCA  74                 	db	116	;'t'
  1777   001FCB  65                 	db	101	;'e'
  1778   001FCC  63                 	db	99	;'c'
  1779   001FCD  74                 	db	116	;'t'
  1780   001FCE  61                 	db	97	;'a'
  1781   001FCF  64                 	db	100	;'d'
  1782   001FD0  61                 	db	97	;'a'
  1783   001FD1  21                 	db	33
  1784   001FD2  00                 	db	0
  1785   001FD3                     STR_4:
  1786   001FD3  2D                 	db	45
  1787   001FD4  2D                 	db	45
  1788   001FD5  2D                 	db	45
  1789   001FD6  2D                 	db	45
  1790   001FD7  2D                 	db	45
  1791   001FD8  2D                 	db	45
  1792   001FD9  2D                 	db	45
  1793   001FDA  2D                 	db	45
  1794   001FDB  2D                 	db	45
  1795   001FDC  2D                 	db	45
  1796   001FDD  2D                 	db	45
  1797   001FDE  2D                 	db	45
  1798   001FDF  2D                 	db	45
  1799   001FE0  2D                 	db	45
  1800   001FE1  2D                 	db	45
  1801   001FE2  0D                 	db	13
  1802   001FE3  0A                 	db	10
  1803   001FE4  00                 	db	0
  1804   001FE5                     STR_12:
  1805   001FE5  43                 	db	67	;'C'
  1806   001FE6  6F                 	db	111	;'o'
  1807   001FE7  6E                 	db	110	;'n'
  1808   001FE8  66                 	db	102	;'f'
  1809   001FE9  69                 	db	105	;'i'
  1810   001FEA  67                 	db	103	;'g'
  1811   001FEB  75                 	db	117	;'u'
  1812   001FEC  72                 	db	114	;'r'
  1813   001FED  61                 	db	97	;'a'
  1814   001FEE  63                 	db	99	;'c'
  1815   001FEF  69                 	db	105	;'i'
  1816   001FF0  6F                 	db	111	;'o'
  1817   001FF1  6E                 	db	110	;'n'
  1818   001FF2  73                 	db	115	;'s'
  1819   001FF3  3A                 	db	58	;':'
  1820   001FF4  0D                 	db	13
  1821   001FF5  0A                 	db	10
  1822   001FF6  00                 	db	0
  1823   001FF7                     STR_9:
  1824   001FF7  55                 	db	85	;'U'
  1825   001FF8  73                 	db	115	;'s'
  1826   001FF9  75                 	db	117	;'u'
  1827   001FFA  61                 	db	97	;'a'
  1828   001FFB  72                 	db	114	;'r'
  1829   001FFC  69                 	db	105	;'i'
  1830   001FFD  20                 	db	32
  1831   001FFE  00                 	db	0
  1832   001FF7                     STR_13          equ	STR_9
  1833   001FE2                     STR_7           equ	STR_4+15
  1834   001FE2                     STR_11          equ	STR_4+15
  1835   001FE2                     STR_14          equ	STR_4+15
  1836   001FFF  00                 	db	0	; dummy byte at the end
  1837   001E2E                     __smallconst    set	__pmediumconst
  1838   001E2E                     __mediumconst   set	__pmediumconst
  1839   000002                     __activetblptr  equ	2
  1840                           
  1841                           ; #config settings
  1842                           
  1843                           	psect	cinit
  1844   0013B4                     __pcinit:
  1845                           	callstack 0
  1846   0013B4                     start_initialization:
  1847                           	callstack 0
  1848   0013B4                     __initialization:
  1849                           	callstack 0
  1850                           
  1851                           ; Initialize objects allocated to BANK0 (34 bytes)
  1852                           ; load TBLPTR registers with __pidataBANK0
  1853   0013B4  0E4C               	movlw	low __pidataBANK0
  1854   0013B6  6EF6               	movwf	tblptrl,c
  1855   0013B8  0E1A               	movlw	high __pidataBANK0
  1856   0013BA  6EF7               	movwf	tblptrh,c
  1857   0013BC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1858   0013BE  6EF8               	movwf	tblptru,c
  1859   0013C0  EE00  F0C3         	lfsr	0,__pdataBANK0
  1860   0013C4  EE10 F022          	lfsr	1,34
  1861   0013C8                     copy_data0:
  1862   0013C8  0009               	tblrd		*+
  1863   0013CA  CFF5 FFEE          	movff	tablat,postinc0
  1864   0013CE  50E5               	movf	postdec1,w,c
  1865   0013D0  50E1               	movf	fsr1l,w,c
  1866   0013D2  E1FA               	bnz	copy_data0
  1867                           
  1868                           ; Initialize objects allocated to COMRAM (6 bytes)
  1869                           ; load TBLPTR registers with __pidataCOMRAM
  1870   0013D4  0E80               	movlw	low __pidataCOMRAM
  1871   0013D6  6EF6               	movwf	tblptrl,c
  1872   0013D8  0E1B               	movlw	high __pidataCOMRAM
  1873   0013DA  6EF7               	movwf	tblptrh,c
  1874   0013DC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1875   0013DE  6EF8               	movwf	tblptru,c
  1876   0013E0  EE00  F076         	lfsr	0,__pdataCOMRAM
  1877   0013E4  EE10 F006          	lfsr	1,6
  1878   0013E8                     copy_data1:
  1879   0013E8  0009               	tblrd		*+
  1880   0013EA  CFF5 FFEE          	movff	tablat,postinc0
  1881   0013EE  50E5               	movf	postdec1,w,c
  1882   0013F0  50E1               	movf	fsr1l,w,c
  1883   0013F2  E1FA               	bnz	copy_data1
  1884                           
  1885                           ; Clear objects allocated to BANK1 (80 bytes)
  1886   0013F4  EE01  F000         	lfsr	0,__pbssBANK1
  1887   0013F8  0E50               	movlw	80
  1888   0013FA                     clear_0:
  1889   0013FA  6AEE               	clrf	postinc0,c
  1890   0013FC  06E8               	decf	wreg,f,c
  1891   0013FE  E1FD               	bnz	clear_0
  1892                           
  1893                           ; Clear objects allocated to BANK0 (67 bytes)
  1894   001400  EE00  F080         	lfsr	0,__pbssBANK0
  1895   001404  0E43               	movlw	67
  1896   001406                     clear_1:
  1897   001406  6AEE               	clrf	postinc0,c
  1898   001408  06E8               	decf	wreg,f,c
  1899   00140A  E1FD               	bnz	clear_1
  1900                           
  1901                           ; Clear objects allocated to COMRAM (83 bytes)
  1902   00140C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1903   001410  0E53               	movlw	83
  1904   001412                     clear_2:
  1905   001412  6AEE               	clrf	postinc0,c
  1906   001414  06E8               	decf	wreg,f,c
  1907   001416  E1FD               	bnz	clear_2
  1908   001418                     end_of_initialization:
  1909                           	callstack 0
  1910   001418                     __end_of__initialization:
  1911                           	callstack 0
  1912   001418  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1913   00141A  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1914   00141C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1915   00141E  6EF8               	movwf	tblptru,c
  1916   001420  0100               	movlb	0
  1917   001422  EF1F  F00C         	goto	_main	;jump to C main() function
  1918                           
  1919                           	psect	bssCOMRAM
  1920   000001                     __pbssCOMRAM:
  1921                           	callstack 0
  1922   000001                     motor_RFID@UID:
  1923                           	callstack 0
  1924   000001                     	ds	6
  1925   000007                     _Tics:
  1926                           	callstack 0
  1927   000007                     	ds	4
  1928   00000B                     motor_LEDs@lastTics:
  1929                           	callstack 0
  1930   00000B                     	ds	4
  1931   00000F                     _str_ptr:
  1932                           	callstack 0
  1933   00000F                     	ds	2
  1934   000011                     	ds	2
  1935   000013                     motor_Read@timeout_counter:
  1936                           	callstack 0
  1937   000013                     	ds	2
  1938   000015                     setLed@ledIndex:
  1939                           	callstack 0
  1940   000015                     	ds	1
  1941   000016                     setLed@modeLED:
  1942                           	callstack 0
  1943   000016                     	ds	1
  1944   000017                     motor_datos@lastChar:
  1945                           	callstack 0
  1946   000017                     	ds	1
  1947   000018                     motor_datos@pointer:
  1948                           	callstack 0
  1949   000018                     	ds	1
  1950   000019                     motor_datos@state:
  1951                           	callstack 0
  1952   000019                     	ds	1
  1953   00001A                     motor_setCurrentUser@state_setCurrentUser:
  1954                           	callstack 0
  1955   00001A                     	ds	1
  1956   00001B                     _new_user:
  1957                           	callstack 0
  1958   00001B                     	ds	1
  1959   00001C                     _new_configuration:
  1960                           	callstack 0
  1961   00001C                     	ds	1
  1962   00001D                     motorTerminal@userNumber:
  1963                           	callstack 0
  1964   00001D                     	ds	1
  1965   00001E                     motorTerminal@index:
  1966                           	callstack 0
  1967   00001E                     	ds	1
  1968   00001F                     motorTerminal@state:
  1969                           	callstack 0
  1970   00001F                     	ds	1
  1971   000020                     _sending_string:
  1972                           	callstack 0
  1973   000020                     	ds	1
  1974   000021                     _hashtag_pressed:
  1975                           	callstack 0
  1976   000021                     	ds	1
  1977   000022                     _state_str:
  1978                           	callstack 0
  1979   000022                     	ds	1
  1980   000023                     _state:
  1981                           	callstack 0
  1982   000023                     	ds	1
  1983   000024                     _tecla:
  1984                           	callstack 0
  1985   000024                     	ds	1
  1986   000025                     _Columnas:
  1987                           	callstack 0
  1988   000025                     	ds	1
  1989   000026                     _Filas:
  1990                           	callstack 0
  1991   000026                     	ds	1
  1992   000027                     motor_RFID@value:
  1993                           	callstack 0
  1994   000027                     	ds	1
  1995   000028                     motor_RFID@addr:
  1996                           	callstack 0
  1997   000028                     	ds	1
  1998   000029                     motor_RFID@operation_pending:
  1999                           	callstack 0
  2000   000029                     	ds	1
  2001   00002A                     motor_RFID@last_state:
  2002                           	callstack 0
  2003   00002A                     	ds	1
  2004   00002B                     motor_RFID@cardRemoved:
  2005                           	callstack 0
  2006   00002B                     	ds	1
  2007   00002C                     motor_RFID@backBitsCalc:
  2008                           	callstack 0
  2009   00002C                     	ds	1
  2010   00002D                     motor_RFID@fifoLevel:
  2011                           	callstack 0
  2012   00002D                     	ds	1
  2013   00002E                     motor_RFID@lastBitsVal:
  2014                           	callstack 0
  2015   00002E                     	ds	1
  2016   00002F                     motor_RFID@tempRegValue:
  2017                           	callstack 0
  2018   00002F                     	ds	1
  2019   000030                     motor_RFID@allZero:
  2020                           	callstack 0
  2021   000030                     	ds	1
  2022   000031                     motor_RFID@checksum:
  2023                           	callstack 0
  2024   000031                     	ds	1
  2025   000032                     motor_RFID@TagType:
  2026                           	callstack 0
  2027   000032                     	ds	1
  2028   000033                     	ds	1
  2029   000034                     motor_RFID@i:
  2030                           	callstack 0
  2031   000034                     	ds	1
  2032   000035                     motor_RFID@n:
  2033                           	callstack 0
  2034   000035                     	ds	1
  2035   000036                     motor_RFID@waitIRq:
  2036                           	callstack 0
  2037   000036                     	ds	1
  2038   000037                     motor_RFID@irqEn:
  2039                           	callstack 0
  2040   000037                     	ds	1
  2041   000038                     motor_RFID@substate:
  2042                           	callstack 0
  2043   000038                     	ds	1
  2044   000039                     motor_RFID@state:
  2045                           	callstack 0
  2046   000039                     	ds	1
  2047   00003A                     motor_Read@ucResult:
  2048                           	callstack 0
  2049   00003A                     	ds	1
  2050   00003B                     _ColumnAct:
  2051                           	callstack 0
  2052   00003B                     	ds	1
  2053   00003C                     _RowAct:
  2054                           	callstack 0
  2055   00003C                     	ds	1
  2056   00003D                     _Columns:
  2057                           	callstack 0
  2058   00003D                     	ds	1
  2059   00003E                     _Rows:
  2060                           	callstack 0
  2061   00003E                     	ds	1
  2062   00003F                     _currentUser:
  2063                           	callstack 0
  2064   00003F                     	ds	5
  2065   000044                     motor_RFID@currentUser:
  2066                           	callstack 0
  2067   000044                     	ds	5
  2068   000049                     _timer_teclado:
  2069                           	callstack 0
  2070   000049                     	ds	1
  2071   00004A                     motor_Read@ucAddr:
  2072                           	callstack 0
  2073   00004A                     	ds	1
  2074   00004B                     motor_Read@bit_count:
  2075                           	callstack 0
  2076   00004B                     	ds	1
  2077   00004C                     motor_Write@ucValue:
  2078                           	callstack 0
  2079   00004C                     	ds	1
  2080   00004D                     motor_Write@ucAddr:
  2081                           	callstack 0
  2082   00004D                     	ds	1
  2083   00004E                     motor_Write@bit_count:
  2084                           	callstack 0
  2085   00004E                     	ds	1
  2086   00004F                     _card_timer:
  2087                           	callstack 0
  2088   00004F                     	ds	1
  2089   000050                     _state_write:
  2090                           	callstack 0
  2091   000050                     	ds	1
  2092   000051                     _state_read:
  2093                           	callstack 0
  2094   000051                     	ds	1
  2095   000052                     _timer:
  2096                           	callstack 0
  2097   000052                     	ds	1
  2098   000053                     _Timer:
  2099                           	callstack 0
  2100   000053                     	ds	1
  2101                           
  2102                           	psect	dataCOMRAM
  2103   000076                     __pdataCOMRAM:
  2104                           	callstack 0
  2105   000076                     _colValues:
  2106                           	callstack 0
  2107   000076                     	ds	3
  2108   000079                     	ds	2
  2109   00007B                     _index:
  2110                           	callstack 0
  2111   00007B                     	ds	1
  2112                           
  2113                           	psect	bssBANK0
  2114   000080                     __pbssBANK0:
  2115                           	callstack 0
  2116   000080                     _configurations:
  2117                           	callstack 0
  2118   000080                     	ds	30
  2119   00009E                     _Timers:
  2120                           	callstack 0
  2121   00009E                     	ds	20
  2122   0000B2                     	ds	6
  2123   0000B8                     _ActualLeds:
  2124                           	callstack 0
  2125   0000B8                     	ds	6
  2126   0000BE                     motorTerminal@currentUser:
  2127                           	callstack 0
  2128   0000BE                     	ds	5
  2129                           
  2130                           	psect	dataBANK0
  2131   0000C3                     __pdataBANK0:
  2132                           	callstack 0
  2133   0000C3                     _userUIDs:
  2134                           	callstack 0
  2135   0000C3                     	ds	20
  2136   0000D7                     controlLED@ledBits:
  2137                           	callstack 0
  2138   0000D7                     	ds	6
  2139   0000DD                     _currentTime:
  2140                           	callstack 0
  2141   0000DD                     	ds	4
  2142   0000E1                     motorTerminal@hour:
  2143                           	callstack 0
  2144   0000E1                     	ds	4
  2145                           
  2146                           	psect	bssBANK1
  2147   000100                     __pbssBANK1:
  2148                           	callstack 0
  2149   000100                     printfUID@buffer:
  2150                           	callstack 0
  2151   000100                     	ds	80
  2152                           
  2153                           	psect	cstackCOMRAM
  2154   000054                     __pcstackCOMRAM:
  2155                           	callstack 0
  2156   000054                     ??_LowRSI:
  2157                           
  2158                           ; 1 bytes @ 0x0
  2159   000054                     	ds	1
  2160   000055                     ?_Terminal_TXAvailable:
  2161                           	callstack 0
  2162   000055                     ?_TI_GetTics:
  2163                           	callstack 0
  2164   000055                     controlLED@estado:
  2165                           	callstack 0
  2166   000055                     delay_us@howMany:
  2167                           	callstack 0
  2168   000055                     initData@i:
  2169                           	callstack 0
  2170   000055                     resetData@i:
  2171                           	callstack 0
  2172   000055                     getActualUID@UID:
  2173                           	callstack 0
  2174   000055                     getActualLeds@leds:
  2175                           	callstack 0
  2176   000055                     saveHourToData@hour:
  2177                           	callstack 0
  2178   000055                     setIndex@indexActual:
  2179                           	callstack 0
  2180   000055                     setLEDIntensity@ledIndex:
  2181                           	callstack 0
  2182   000055                     TI_Init@counter:
  2183                           	callstack 0
  2184   000055                     TI_NewTimer@TimerHandle:
  2185                           	callstack 0
  2186   000055                     TI_ResetTics@TimerHandle:
  2187                           	callstack 0
  2188   000055                     ??_EscriuPrimeraOrdre:
  2189   000055                     ??_CantaPartAlta:
  2190   000055                     ??_CantaPartBaixa:
  2191   000055                     ??_GetTecla:
  2192   000055                     
  2193                           ; 1 bytes @ 0x1
  2194   000055                     	ds	1
  2195   000056                     CantaPartAlta@c:
  2196                           	callstack 0
  2197   000056                     CantaPartBaixa@c:
  2198                           	callstack 0
  2199   000056                     EscriuPrimeraOrdre@ordre:
  2200                           	callstack 0
  2201   000056                     delay_us@x:
  2202                           	callstack 0
  2203   000056                     initData@j:
  2204                           	callstack 0
  2205   000056                     resetData@j:
  2206                           	callstack 0
  2207   000056                     getActualUID@userIndex:
  2208                           	callstack 0
  2209   000056                     getActualLeds@userIndex:
  2210                           	callstack 0
  2211   000056                     saveHourToData@i:
  2212                           	callstack 0
  2213   000056                     setLEDIntensity@intensity:
  2214                           	callstack 0
  2215   000056                     _controlLED$455:
  2216                           	callstack 0
  2217   000056                     
  2218                           ; 1 bytes @ 0x2
  2219   000056                     	ds	1
  2220   000057                     CantaIR@IR:
  2221                           	callstack 0
  2222   000057                     CantaData@Data:
  2223                           	callstack 0
  2224   000057                     processBit@val:
  2225                           	callstack 0
  2226   000057                     GetTecla@columna:
  2227                           	callstack 0
  2228   000057                     initData@i_898:
  2229                           	callstack 0
  2230   000057                     getActualUID@i_906:
  2231                           	callstack 0
  2232   000057                     getActualLeds@i:
  2233                           	callstack 0
  2234   000057                     setLEDIntensity@userIndex:
  2235                           	callstack 0
  2236   000057                     TI_NewTimer@Comptador:
  2237                           	callstack 0
  2238   000057                     ??_Terminal_TXAvailable:
  2239   000057                     
  2240                           ; 1 bytes @ 0x3
  2241   000057                     	ds	1
  2242   000058                     controlLED@ledActual:
  2243                           	callstack 0
  2244   000058                     processBit@bit_count:
  2245                           	callstack 0
  2246   000058                     GetTecla@fila:
  2247                           	callstack 0
  2248   000058                     Terminal_SendChar@c:
  2249                           	callstack 0
  2250   000058                     motor_SendChar@c:
  2251                           	callstack 0
  2252   000058                     initData@i_896:
  2253                           	callstack 0
  2254   000058                     getActualUID@i:
  2255                           	callstack 0
  2256   000058                     getActualLeds@i_912:
  2257                           	callstack 0
  2258   000058                     setLed@tecla:
  2259                           	callstack 0
  2260   000058                     
  2261                           ; 1 bytes @ 0x4
  2262   000058                     	ds	1
  2263   000059                     processBit@state:
  2264                           	callstack 0
  2265   000059                     getActualUID@i_907:
  2266                           	callstack 0
  2267   000059                     motor_StartSendString@str:
  2268                           	callstack 0
  2269   000059                     ??_TI_GetTics:
  2270   000059                     
  2271                           ; 1 bytes @ 0x5
  2272   000059                     	ds	1
  2273   00005A                     processBit@next_state:
  2274                           	callstack 0
  2275                           
  2276                           ; 1 bytes @ 0x6
  2277   00005A                     	ds	1
  2278   00005B                     printfUID@currentUser:
  2279                           	callstack 0
  2280   00005B                     ??_processBit:
  2281                           
  2282                           ; 1 bytes @ 0x7
  2283   00005B                     	ds	1
  2284   00005C                     motor_Write@value:
  2285                           	callstack 0
  2286   00005C                     printfUID@userIndex:
  2287                           	callstack 0
  2288   00005C                     ??_motor_Read:
  2289                           
  2290                           ; 1 bytes @ 0x8
  2291   00005C                     	ds	1
  2292   00005D                     motor_Write@addr:
  2293                           	callstack 0
  2294   00005D                     motor_Read@addr:
  2295                           	callstack 0
  2296   00005D                     printfUID@extraString:
  2297                           	callstack 0
  2298   00005D                     TI_GetTics@CopiaTicsActual:
  2299                           	callstack 0
  2300   00005D                     
  2301                           ; 1 bytes @ 0x9
  2302   00005D                     	ds	1
  2303   00005E                     _motor_Read$697:
  2304                           	callstack 0
  2305                           
  2306                           ; 2 bytes @ 0xA
  2307   00005E                     	ds	1
  2308   00005F                     ??_printfUID:
  2309                           
  2310                           ; 1 bytes @ 0xB
  2311   00005F                     	ds	1
  2312   000060                     initRFID@regVal:
  2313                           	callstack 0
  2314   000060                     
  2315                           ; 1 bytes @ 0xC
  2316   000060                     	ds	1
  2317   000061                     TI_GetTics@TimerHandle:
  2318                           	callstack 0
  2319   000061                     printfUID@leds:
  2320                           	callstack 0
  2321                           
  2322                           ; 6 bytes @ 0xD
  2323   000061                     	ds	1
  2324   000062                     Espera@Timer:
  2325                           	callstack 0
  2326   000062                     ??_motor_LEDs:
  2327                           
  2328                           ; 1 bytes @ 0xE
  2329   000062                     	ds	2
  2330   000064                     Espera@ms:
  2331                           	callstack 0
  2332                           
  2333                           ; 2 bytes @ 0x10
  2334   000064                     	ds	2
  2335   000066                     ??_Espera:
  2336                           
  2337                           ; 1 bytes @ 0x12
  2338   000066                     	ds	1
  2339   000067                     printfUID@val:
  2340                           	callstack 0
  2341   000067                     motor_LEDs@currentTics:
  2342                           	callstack 0
  2343                           
  2344                           ; 4 bytes @ 0x13
  2345   000067                     	ds	1
  2346   000068                     printfUID@i:
  2347                           	callstack 0
  2348                           
  2349                           ; 1 bytes @ 0x14
  2350   000068                     	ds	1
  2351   000069                     printfUID@ptr:
  2352                           	callstack 0
  2353                           
  2354                           ; 2 bytes @ 0x15
  2355   000069                     	ds	1
  2356   00006A                     LcInit@columns:
  2357                           	callstack 0
  2358   00006A                     LcGotoXY@Row:
  2359                           	callstack 0
  2360   00006A                     
  2361                           ; 1 bytes @ 0x16
  2362   00006A                     	ds	1
  2363   00006B                     LcInit@rows:
  2364                           	callstack 0
  2365   00006B                     motor_LEDs@i:
  2366                           	callstack 0
  2367   00006B                     motorTerminal@opcion:
  2368                           	callstack 0
  2369   00006B                     motor_setCurrentUser@UID1:
  2370                           	callstack 0
  2371   00006B                     ??_LcGotoXY:
  2372                           
  2373                           ; 1 bytes @ 0x17
  2374   00006B                     	ds	1
  2375   00006C                     motor_LEDs@i_461:
  2376                           	callstack 0
  2377   00006C                     motorTerminal@currentUserIndex:
  2378                           	callstack 0
  2379   00006C                     motor_setCurrentUser@UID2:
  2380                           	callstack 0
  2381   00006C                     LcInit@i:
  2382                           	callstack 0
  2383                           
  2384                           ; 2 bytes @ 0x18
  2385   00006C                     	ds	1
  2386   00006D                     motor_setCurrentUser@UID3:
  2387                           	callstack 0
  2388   00006D                     _LcGotoXY$404:
  2389                           	callstack 0
  2390                           
  2391                           ; 2 bytes @ 0x19
  2392   00006D                     	ds	1
  2393   00006E                     motor_setCurrentUser@UID4:
  2394                           	callstack 0
  2395                           
  2396                           ; 1 bytes @ 0x1A
  2397   00006E                     	ds	1
  2398   00006F                     motor_setCurrentUser@UID0:
  2399                           	callstack 0
  2400   00006F                     LcGotoXY@Fisics:
  2401                           	callstack 0
  2402   00006F                     
  2403                           ; 1 bytes @ 0x1B
  2404   00006F                     	ds	1
  2405   000070                     ??_motor_RFID:
  2406                           
  2407                           ; 1 bytes @ 0x1C
  2408   000070                     	ds	1
  2409   000071                     LcGotoXY@Column:
  2410                           	callstack 0
  2411                           
  2412                           ; 1 bytes @ 0x1D
  2413   000071                     	ds	1
  2414   000072                     LcPutChar@c:
  2415                           	callstack 0
  2416   000072                     _motor_RFID$734:
  2417                           	callstack 0
  2418   000072                     
  2419                           ; 1 bytes @ 0x1E
  2420   000072                     	ds	1
  2421   000073                     _motor_datos$931:
  2422                           	callstack 0
  2423   000073                     
  2424                           ; 1 bytes @ 0x1F
  2425   000073                     	ds	1
  2426   000074                     motor_RFID@flag:
  2427                           	callstack 0
  2428                           
  2429                           ; 1 bytes @ 0x20
  2430   000074                     	ds	1
  2431   000075                     motor_datos@i:
  2432                           	callstack 0
  2433                           
  2434                           ; 1 bytes @ 0x21
  2435   000075                     	ds	1
  2436   000076                     
  2437                           ; 1 bytes @ 0x22
  2438 ;;
  2439 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2440 ;;
  2441 ;; *************** function _main *****************
  2442 ;; Defined at:
  2443 ;;		line 39 in file "main.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1
  2457 ;;      Params:         0       0       0
  2458 ;;      Locals:         0       0       0
  2459 ;;      Temps:          0       0       0
  2460 ;;      Totals:         0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels required when called: 10
  2463 ;; This function calls:
  2464 ;;		_LcInit
  2465 ;;		_TI_Init
  2466 ;;		_Terminal_Init
  2467 ;;		_initData
  2468 ;;		_initLeds
  2469 ;;		_initPorts
  2470 ;;		_initRFID
  2471 ;;		_initTeclado
  2472 ;;		_motorTeclado
  2473 ;;		_motorTerminal
  2474 ;;		_motor_LEDs
  2475 ;;		_motor_RFID
  2476 ;;		_motor_datos
  2477 ;; This function is called by:
  2478 ;;		Startup code after reset
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text0
  2483   00183E                     __ptext0:
  2484                           	callstack 0
  2485   00183E                     _main:
  2486                           	callstack 21
  2487                           
  2488                           ;main.c: 40:  ADCON1 = 0x0F;
  2489                           
  2490                           ;incstack = 0
  2491   00183E  ECC5  F00C         	call	_TI_Init	;wreg free
  2492                           
  2493                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2494   001842  EC5C  F00D         	call	_initTeclado	;wreg free
  2495                           
  2496                           ;main.c: 42: }
  2497   001846  ECE0  F007         	call	_initRFID	;wreg free
  2498                           
  2499                           ;main.c: 43: 
  2500   00184A  EC9E  F00D         	call	_Terminal_Init	;wreg free
  2501                           
  2502                           ;main.c: 44: 
  2503   00184E  ECBC  F00D         	call	_initPorts	;wreg free
  2504                           
  2505                           ;main.c: 45: 
  2506   001852  ECA6  F00D         	call	_initLeds	;wreg free
  2507                           
  2508                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2509   001856  0E10               	movlw	16
  2510   001858  6E6A               	movwf	LcInit@columns^0,c
  2511   00185A  0E02               	movlw	2
  2512   00185C  ECFF  F006         	call	_LcInit
  2513                           
  2514                           ;main.c: 47: 
  2515   001860  ECA8  F00B         	call	_initData	;wreg free
  2516   001864  8EF2               	bsf	242,7,c	;volatile
  2517   001866  9CF2               	bcf	242,6,c	;volatile
  2518   001868                     l4825:
  2519   001868  EC73  F006         	call	_motorTeclado	;wreg free
  2520   00186C  ECC3  F004         	call	_motorTerminal	;wreg free
  2521   001870  EC15  F000         	call	_motor_RFID	;wreg free
  2522   001874  EC76  F007         	call	_motor_LEDs	;wreg free
  2523   001878  ECB1  F008         	call	_motor_datos	;wreg free
  2524   00187C  748D               	btg	141,2,c	;volatile
  2525   00187E  D7F4               	goto	l4825
  2526   001880                     __end_of_main:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _motor_datos *****************
  2530 ;; Defined at:
  2531 ;;		line 154 in file "TAD_DATOS.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  i               1   33[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1
  2545 ;;      Params:         0       0       0
  2546 ;;      Locals:         3       0       0
  2547 ;;      Temps:          0       0       0
  2548 ;;      Totals:         3       0       0
  2549 ;;Total ram usage:        3 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 8
  2552 ;; This function calls:
  2553 ;;		_LcPutChar
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text1
  2560   001162                     __ptext1:
  2561                           	callstack 0
  2562   001162                     _motor_datos:
  2563                           	callstack 22
  2564                           
  2565                           ;TAD_DATOS.c: 155:     static char state = 0;;TAD_DATOS.c: 156:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 157:     static unsigned char lastChar;;TAD_DATOS.c: 159:     switch(s
      +                          tate) {
  2566                           
  2567                           ;incstack = 0
  2568   001162  D057               	goto	l4813
  2569   001164                     l4767:
  2570                           
  2571                           ;TAD_DATOS.c: 161:             if(new_configuration || new_user) {
  2572   001164  501C               	movf	_new_configuration^0,w,c
  2573   001166  A4D8               	btfss	status,2,c
  2574   001168  D003               	goto	u4400
  2575   00116A  501B               	movf	_new_user^0,w,c
  2576   00116C  B4D8               	btfsc	status,2,c
  2577   00116E  0012               	return	
  2578   001170                     u4400:
  2579                           
  2580                           ;TAD_DATOS.c: 162:                 new_configuration = new_user = 0;
  2581   001170  6A1B               	clrf	_new_user^0,c
  2582   001172  6A1C               	clrf	_new_configuration^0,c
  2583                           
  2584                           ;TAD_DATOS.c: 163:                 state = 1;
  2585   001174  0E01               	movlw	1
  2586   001176  6E19               	movwf	motor_datos@state^0,c
  2587   001178  0012               	return	
  2588   00117A                     l844:
  2589                           
  2590                           ;TAD_DATOS.c: 168:             lastChar = currentUser[4];
  2591   00117A  C043  F017         	movff	_currentUser+4,motor_datos@lastChar
  2592                           
  2593                           ;TAD_DATOS.c: 169:             LcPutChar((lastChar < 10) ? ('0' + lastChar) : ('A' + (la
      +                          stChar - 10)));
  2594   00117E  0E09               	movlw	9
  2595   001180  6417               	cpfsgt	motor_datos@lastChar^0,c
  2596   001182  D002               	goto	l4777
  2597   001184  0E37               	movlw	55
  2598   001186  D001               	goto	L1
  2599   001188                     l4777:
  2600   001188  0E30               	movlw	48
  2601   00118A                     L1:
  2602   00118A  2417               	addwf	motor_datos@lastChar^0,w,c
  2603   00118C  6E73               	movwf	_motor_datos$931^0,c
  2604   00118E  6A74               	clrf	(_motor_datos$931+1)^0,c
  2605   001190  0E00               	movlw	0
  2606   001192  2274               	addwfc	(_motor_datos$931+1)^0,f,c
  2607   001194  5073               	movf	_motor_datos$931^0,w,c
  2608   001196  ECA0  F009         	call	_LcPutChar
  2609                           
  2610                           ;TAD_DATOS.c: 170:             LcPutChar(' ');
  2611   00119A  0E20               	movlw	32
  2612   00119C  ECA0  F009         	call	_LcPutChar
  2613                           
  2614                           ;TAD_DATOS.c: 171:             state = 2;
  2615   0011A0  0E02               	movlw	2
  2616   0011A2  6E19               	movwf	motor_datos@state^0,c
  2617                           
  2618                           ;TAD_DATOS.c: 172:             break;
  2619   0011A4  0012               	return	
  2620   0011A6                     l849:
  2621                           
  2622                           ;TAD_DATOS.c: 175:             for(char i = 0; i < 4; i++) {
  2623   0011A6  6A75               	clrf	motor_datos@i^0,c
  2624   0011A8                     l4789:
  2625                           
  2626                           ;TAD_DATOS.c: 176:                 LcPutChar(currentTime[i]);
  2627   0011A8  5075               	movf	motor_datos@i^0,w,c
  2628   0011AA  0FDD               	addlw	low _currentTime
  2629   0011AC  6ED9               	movwf	fsr2l,c
  2630   0011AE  6ADA               	clrf	fsr2h,c
  2631   0011B0  50DF               	movf	indf2,w,c
  2632   0011B2  ECA0  F009         	call	_LcPutChar
  2633                           
  2634                           ;TAD_DATOS.c: 177:                 if(i == 1) LcPutChar(':');
  2635   0011B6  0475               	decf	motor_datos@i^0,w,c
  2636   0011B8  A4D8               	btfss	status,2,c
  2637   0011BA  D003               	goto	l4795
  2638   0011BC  0E3A               	movlw	58
  2639   0011BE  ECA0  F009         	call	_LcPutChar
  2640   0011C2                     l4795:
  2641                           
  2642                           ;TAD_DATOS.c: 178:             }
  2643   0011C2  2A75               	incf	motor_datos@i^0,f,c
  2644   0011C4  0E03               	movlw	3
  2645   0011C6  6475               	cpfsgt	motor_datos@i^0,c
  2646   0011C8  D7EF               	goto	l4789
  2647                           
  2648                           ;TAD_DATOS.c: 179:             LcPutChar(' ');
  2649   0011CA  0E20               	movlw	32
  2650   0011CC  ECA0  F009         	call	_LcPutChar
  2651                           
  2652                           ;TAD_DATOS.c: 180:             pointer = 0;
  2653   0011D0  6A18               	clrf	motor_datos@pointer^0,c
  2654                           
  2655                           ;TAD_DATOS.c: 181:             state = 3;
  2656   0011D2  0E03               	movlw	3
  2657   0011D4  6E19               	movwf	motor_datos@state^0,c
  2658                           
  2659                           ;TAD_DATOS.c: 182:             break;
  2660   0011D6  0012               	return	
  2661   0011D8                     l4805:
  2662                           
  2663                           ;TAD_DATOS.c: 185:             if(pointer < 6) {
  2664   0011D8  0E06               	movlw	6
  2665   0011DA  6018               	cpfslt	motor_datos@pointer^0,c
  2666   0011DC  D017               	goto	l854
  2667                           
  2668                           ;TAD_DATOS.c: 186:                 LcPutChar('1' + pointer);
  2669   0011DE  5018               	movf	motor_datos@pointer^0,w,c
  2670   0011E0  0F31               	addlw	49
  2671   0011E2  ECA0  F009         	call	_LcPutChar
  2672                           
  2673                           ;TAD_DATOS.c: 187:                 LcPutChar('-');
  2674   0011E6  0E2D               	movlw	45
  2675   0011E8  ECA0  F009         	call	_LcPutChar
  2676                           
  2677                           ;TAD_DATOS.c: 188:                 LcPutChar('0' + configurations[index][pointer]);
  2678   0011EC  507B               	movf	_index^0,w,c
  2679   0011EE  0D06               	mullw	6
  2680   0011F0  50F3               	movf	243,w,c
  2681   0011F2  0F80               	addlw	low _configurations
  2682   0011F4  2418               	addwf	motor_datos@pointer^0,w,c
  2683   0011F6  6ED9               	movwf	fsr2l,c
  2684   0011F8  6ADA               	clrf	fsr2h,c
  2685   0011FA  50DF               	movf	indf2,w,c
  2686   0011FC  0F30               	addlw	48
  2687   0011FE  ECA0  F009         	call	_LcPutChar
  2688                           
  2689                           ;TAD_DATOS.c: 189:                 LcPutChar(' ');
  2690   001202  0E20               	movlw	32
  2691   001204  ECA0  F009         	call	_LcPutChar
  2692                           
  2693                           ;TAD_DATOS.c: 190:                 pointer++;
  2694   001208  2A18               	incf	motor_datos@pointer^0,f,c
  2695                           
  2696                           ;TAD_DATOS.c: 191:             } else {
  2697   00120A  0012               	return	
  2698   00120C                     l854:
  2699                           
  2700                           ;TAD_DATOS.c: 192:                 pointer = 0;
  2701   00120C  6A18               	clrf	motor_datos@pointer^0,c
  2702                           
  2703                           ;TAD_DATOS.c: 193:                 state = 0;
  2704   00120E  6A19               	clrf	motor_datos@state^0,c
  2705   001210  0012               	return	
  2706   001212                     l4813:
  2707   001212  5019               	movf	motor_datos@state^0,w,c
  2708                           
  2709                           ; Switch size 1, requested type "simple"
  2710                           ; Number of cases is 4, Range of values is 0 to 3
  2711                           ; switch strategies available:
  2712                           ; Name         Instructions Cycles
  2713                           ; simple_byte           13     7 (average)
  2714                           ;	Chosen strategy is simple_byte
  2715   001214  0A00               	xorlw	0	; case 0
  2716   001216  B4D8               	btfsc	status,2,c
  2717   001218  D7A5               	goto	l4767
  2718   00121A  0A01               	xorlw	1	; case 1
  2719   00121C  B4D8               	btfsc	status,2,c
  2720   00121E  D7AD               	goto	l844
  2721   001220  0A03               	xorlw	3	; case 2
  2722   001222  B4D8               	btfsc	status,2,c
  2723   001224  D7C0               	goto	l849
  2724   001226  0A01               	xorlw	1	; case 3
  2725   001228  A4D8               	btfss	status,2,c
  2726   00122A  0012               	return	
  2727   00122C  D7D5               	goto	l4805
  2728   00122E                     __end_of_motor_datos:
  2729                           	callstack 0
  2730                           
  2731 ;; *************** function _LcPutChar *****************
  2732 ;; Defined at:
  2733 ;;		line 154 in file "TAD_DISPLAY.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  c               1    wreg     unsigned char 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  c               1   30[COMRAM] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1
  2747 ;;      Params:         0       0       0
  2748 ;;      Locals:         1       0       0
  2749 ;;      Temps:          0       0       0
  2750 ;;      Totals:         1       0       0
  2751 ;;Total ram usage:        1 bytes
  2752 ;; Hardware stack levels used: 1
  2753 ;; Hardware stack levels required when called: 7
  2754 ;; This function calls:
  2755 ;;		_CantaData
  2756 ;;		_LcGotoXY
  2757 ;;		_WaitForBusy
  2758 ;; This function is called by:
  2759 ;;		_motor_datos
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text2
  2764   001340                     __ptext2:
  2765                           	callstack 0
  2766   001340                     _LcPutChar:
  2767                           	callstack 22
  2768                           
  2769                           ;incstack = 0
  2770                           ;LcPutChar@c stored from wreg
  2771   001340  6E72               	movwf	LcPutChar@c^0,c
  2772                           
  2773                           ;TAD_DISPLAY.c: 164:  WaitForBusy(); CantaData(c);
  2774   001342  EC94  F00D         	call	_WaitForBusy	;wreg free
  2775   001346  5072               	movf	LcPutChar@c^0,w,c
  2776   001348  EC93  F00C         	call	_CantaData
  2777                           
  2778                           ;TAD_DISPLAY.c: 166:  ++ColumnAct;
  2779   00134C  2A3B               	incf	_ColumnAct^0,f,c
  2780                           
  2781                           ;TAD_DISPLAY.c: 167:  if (Rows == 3) {
  2782   00134E  0E03               	movlw	3
  2783   001350  183E               	xorwf	_Rows^0,w,c
  2784   001352  A4D8               	btfss	status,2,c
  2785   001354  D00F               	goto	l3625
  2786                           
  2787                           ;TAD_DISPLAY.c: 168:   if (ColumnAct >= 20) {
  2788   001356  0E13               	movlw	19
  2789   001358  643B               	cpfsgt	_ColumnAct^0,c
  2790   00135A  0012               	return	
  2791                           
  2792                           ;TAD_DISPLAY.c: 169:    ColumnAct = 0;
  2793   00135C  6A3B               	clrf	_ColumnAct^0,c
  2794                           
  2795                           ;TAD_DISPLAY.c: 170:    if (++RowAct >= 4) RowAct = 0;
  2796   00135E  2A3C               	incf	_RowAct^0,f,c
  2797   001360  0E03               	movlw	3
  2798   001362  643C               	cpfsgt	_RowAct^0,c
  2799   001364  D001               	goto	l3623
  2800   001366  6A3C               	clrf	_RowAct^0,c
  2801   001368                     l3623:
  2802                           
  2803                           ;TAD_DISPLAY.c: 171:    LcGotoXY(ColumnAct, RowAct);
  2804   001368  C03C  F06A         	movff	_RowAct,LcGotoXY@Row
  2805   00136C  503B               	movf	_ColumnAct^0,w,c
  2806   00136E  EC17  F009         	call	_LcGotoXY
  2807   001372  0012               	return	
  2808   001374                     l3625:
  2809                           
  2810                           ;TAD_DISPLAY.c: 174:  if (Rows == 2) {
  2811   001374  0E02               	movlw	2
  2812   001376  183E               	xorwf	_Rows^0,w,c
  2813   001378  A4D8               	btfss	status,2,c
  2814   00137A  D00F               	goto	l3637
  2815                           
  2816                           ;TAD_DISPLAY.c: 175:   if (ColumnAct >= 40) {
  2817   00137C  0E27               	movlw	39
  2818   00137E  643B               	cpfsgt	_ColumnAct^0,c
  2819   001380  0012               	return	
  2820                           
  2821                           ;TAD_DISPLAY.c: 176:    ColumnAct = 0;
  2822   001382  6A3B               	clrf	_ColumnAct^0,c
  2823                           
  2824                           ;TAD_DISPLAY.c: 177:    if (++RowAct >= 2) RowAct = 0;
  2825   001384  2A3C               	incf	_RowAct^0,f,c
  2826   001386  0E01               	movlw	1
  2827   001388  643C               	cpfsgt	_RowAct^0,c
  2828   00138A  D001               	goto	l3635
  2829   00138C  6A3C               	clrf	_RowAct^0,c
  2830   00138E                     l3635:
  2831                           
  2832                           ;TAD_DISPLAY.c: 178:    LcGotoXY(ColumnAct, RowAct);
  2833   00138E  C03C  F06A         	movff	_RowAct,LcGotoXY@Row
  2834   001392  503B               	movf	_ColumnAct^0,w,c
  2835   001394  EC17  F009         	call	_LcGotoXY
  2836   001398  0012               	return	
  2837   00139A                     l3637:
  2838                           
  2839                           ;TAD_DISPLAY.c: 181:  if (RowAct == 1) {
  2840   00139A  043C               	decf	_RowAct^0,w,c
  2841   00139C  A4D8               	btfss	status,2,c
  2842   00139E  0012               	return	
  2843                           
  2844                           ;TAD_DISPLAY.c: 182:   if (ColumnAct >= 40) ColumnAct = 0;
  2845   0013A0  0E27               	movlw	39
  2846   0013A2  643B               	cpfsgt	_ColumnAct^0,c
  2847   0013A4  D001               	goto	l3643
  2848   0013A6  6A3B               	clrf	_ColumnAct^0,c
  2849   0013A8                     l3643:
  2850                           
  2851                           ;TAD_DISPLAY.c: 183:   LcGotoXY(ColumnAct, RowAct);
  2852   0013A8  C03C  F06A         	movff	_RowAct,LcGotoXY@Row
  2853   0013AC  503B               	movf	_ColumnAct^0,w,c
  2854   0013AE  EC17  F009         	call	_LcGotoXY
  2855   0013B2  0012               	return		;funcret
  2856   0013B4                     __end_of_LcPutChar:
  2857                           	callstack 0
  2858                           
  2859 ;; *************** function _LcGotoXY *****************
  2860 ;; Defined at:
  2861 ;;		line 127 in file "TAD_DISPLAY.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  Column          1    wreg     unsigned char 
  2864 ;;  Row             1   22[COMRAM] unsigned char 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  Column          1   29[COMRAM] unsigned char 
  2867 ;;  Fisics          2   27[COMRAM] int 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1
  2877 ;;      Params:         1       0       0
  2878 ;;      Locals:         5       0       0
  2879 ;;      Temps:          2       0       0
  2880 ;;      Totals:         8       0       0
  2881 ;;Total ram usage:        8 bytes
  2882 ;; Hardware stack levels used: 1
  2883 ;; Hardware stack levels required when called: 6
  2884 ;; This function calls:
  2885 ;;		_CantaIR
  2886 ;;		_WaitForBusy
  2887 ;; This function is called by:
  2888 ;;		_LcPutChar
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text3
  2893   00122E                     __ptext3:
  2894                           	callstack 0
  2895   00122E                     _LcGotoXY:
  2896                           	callstack 22
  2897                           
  2898                           ;incstack = 0
  2899                           ;LcGotoXY@Column stored from wreg
  2900   00122E  6E71               	movwf	LcGotoXY@Column^0,c
  2901                           
  2902                           ;TAD_DISPLAY.c: 131:  int Fisics;;TAD_DISPLAY.c: 133:  switch (Rows) {
  2903   001230  D036               	goto	l3393
  2904   001232                     l3371:
  2905                           
  2906                           ;TAD_DISPLAY.c: 135:    Fisics = Column + (!Row ? 0 : 0x40); break;
  2907   001232  506A               	movf	LcGotoXY@Row^0,w,c
  2908   001234  B4D8               	btfsc	status,2,c
  2909   001236  D004               	goto	l3375
  2910   001238  0E00               	movlw	0
  2911   00123A  6E6E               	movwf	(_LcGotoXY$404+1)^0,c
  2912   00123C  0E40               	movlw	64
  2913   00123E  D003               	goto	L2
  2914   001240                     l3375:
  2915   001240  0E00               	movlw	0
  2916   001242  6E6E               	movwf	(_LcGotoXY$404+1)^0,c
  2917   001244  0E00               	movlw	0
  2918   001246                     L2:
  2919   001246  6E6D               	movwf	_LcGotoXY$404^0,c
  2920   001248  5071               	movf	LcGotoXY@Column^0,w,c
  2921   00124A  246D               	addwf	_LcGotoXY$404^0,w,c
  2922   00124C  6E6F               	movwf	LcGotoXY@Fisics^0,c
  2923   00124E  0E00               	movlw	0
  2924   001250  206E               	addwfc	(_LcGotoXY$404+1)^0,w,c
  2925   001252  6E70               	movwf	(LcGotoXY@Fisics+1)^0,c
  2926   001254  D02F               	goto	l3395
  2927   001256                     l121:
  2928                           
  2929                           ;TAD_DISPLAY.c: 137:    Fisics = Column;
  2930   001256  C071  F06F         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2931   00125A  6A70               	clrf	(LcGotoXY@Fisics+1)^0,c
  2932                           
  2933                           ;TAD_DISPLAY.c: 138:    if (Row == 1) Fisics += 0x40; else
  2934   00125C  046A               	decf	LcGotoXY@Row^0,w,c
  2935   00125E  A4D8               	btfss	status,2,c
  2936   001260  D002               	goto	l3383
  2937   001262  0E40               	movlw	64
  2938   001264  D005               	goto	L3
  2939   001266                     l3383:
  2940                           
  2941                           ;TAD_DISPLAY.c: 139:    if (Row == 2) Fisics += Columns; else
  2942   001266  0E02               	movlw	2
  2943   001268  186A               	xorwf	LcGotoXY@Row^0,w,c
  2944   00126A  A4D8               	btfss	status,2,c
  2945   00126C  D004               	goto	l3387
  2946   00126E  503D               	movf	_Columns^0,w,c
  2947   001270                     L3:
  2948   001270  266F               	addwf	LcGotoXY@Fisics^0,f,c
  2949   001272  0E00               	movlw	0
  2950   001274  D00E               	goto	L4
  2951   001276                     l3387:
  2952                           
  2953                           ;TAD_DISPLAY.c: 140:    if (Row == 3) Fisics += 0x40+Columns;
  2954   001276  0E03               	movlw	3
  2955   001278  186A               	xorwf	LcGotoXY@Row^0,w,c
  2956   00127A  A4D8               	btfss	status,2,c
  2957   00127C  D01B               	goto	l3395
  2958   00127E  503D               	movf	_Columns^0,w,c
  2959   001280  6E6B               	movwf	??_LcGotoXY^0,c
  2960   001282  6A6C               	clrf	(??_LcGotoXY+1)^0,c
  2961   001284  0E40               	movlw	64
  2962   001286  266B               	addwf	??_LcGotoXY^0,f,c
  2963   001288  0E00               	movlw	0
  2964   00128A  226C               	addwfc	(??_LcGotoXY+1)^0,f,c
  2965   00128C  506B               	movf	??_LcGotoXY^0,w,c
  2966   00128E  266F               	addwf	LcGotoXY@Fisics^0,f,c
  2967   001290  506C               	movf	(??_LcGotoXY+1)^0,w,c
  2968   001292                     L4:
  2969   001292  2270               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2970                           
  2971                           ;TAD_DISPLAY.c: 141:    break;
  2972   001294  D00F               	goto	l3395
  2973   001296                     l128:
  2974                           
  2975                           ;TAD_DISPLAY.c: 144:    Fisics = Column; break;
  2976   001296  C071  F06F         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2977   00129A  6A70               	clrf	(LcGotoXY@Fisics+1)^0,c
  2978   00129C  D00B               	goto	l3395
  2979   00129E                     l3393:
  2980   00129E  503E               	movf	_Rows^0,w,c
  2981                           
  2982                           ; Switch size 1, requested type "simple"
  2983                           ; Number of cases is 3, Range of values is 1 to 4
  2984                           ; switch strategies available:
  2985                           ; Name         Instructions Cycles
  2986                           ; simple_byte           10     6 (average)
  2987                           ;	Chosen strategy is simple_byte
  2988   0012A0  0A01               	xorlw	1	; case 1
  2989   0012A2  B4D8               	btfsc	status,2,c
  2990   0012A4  D7F8               	goto	l128
  2991   0012A6  0A03               	xorlw	3	; case 2
  2992   0012A8  B4D8               	btfsc	status,2,c
  2993   0012AA  D7C3               	goto	l3371
  2994   0012AC  0A06               	xorlw	6	; case 4
  2995   0012AE  B4D8               	btfsc	status,2,c
  2996   0012B0  D7D2               	goto	l121
  2997   0012B2  D7F1               	goto	l128
  2998   0012B4                     l3395:
  2999                           
  3000                           ;TAD_DISPLAY.c: 147:  WaitForBusy();
  3001   0012B4  EC94  F00D         	call	_WaitForBusy	;wreg free
  3002                           
  3003                           ;TAD_DISPLAY.c: 148:  CantaIR((char)(0x80 | Fisics));
  3004   0012B8  506F               	movf	LcGotoXY@Fisics^0,w,c
  3005   0012BA  0980               	iorlw	128
  3006   0012BC  ECAC  F00C         	call	_CantaIR
  3007                           
  3008                           ;TAD_DISPLAY.c: 150:  RowAct = Row;
  3009   0012C0  C06A  F03C         	movff	LcGotoXY@Row,_RowAct
  3010                           
  3011                           ;TAD_DISPLAY.c: 151:  ColumnAct = Column;
  3012   0012C4  C071  F03B         	movff	LcGotoXY@Column,_ColumnAct
  3013   0012C8  0012               	return		;funcret
  3014   0012CA                     __end_of_LcGotoXY:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _CantaData *****************
  3018 ;; Defined at:
  3019 ;;		line 238 in file "TAD_DISPLAY.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  Data            1    wreg     unsigned char 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  Data            1    3[COMRAM] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1
  3033 ;;      Params:         0       0       0
  3034 ;;      Locals:         1       0       0
  3035 ;;      Temps:          0       0       0
  3036 ;;      Totals:         1       0       0
  3037 ;;Total ram usage:        1 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 4
  3040 ;; This function calls:
  3041 ;;		_CantaPartAlta
  3042 ;;		_CantaPartBaixa
  3043 ;; This function is called by:
  3044 ;;		_LcPutChar
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text4
  3049   001926                     __ptext4:
  3050                           	callstack 0
  3051   001926                     _CantaData:
  3052                           	callstack 24
  3053                           
  3054                           ;incstack = 0
  3055                           ;CantaData@Data stored from wreg
  3056   001926  6E57               	movwf	CantaData@Data^0,c
  3057                           
  3058                           ;TAD_DISPLAY.c: 239:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  3059   001928  9096               	bcf	150,0,c	;volatile
  3060   00192A  9296               	bcf	150,1,c	;volatile
  3061   00192C  9A93               	bcf	147,5,c	;volatile
  3062   00192E  9893               	bcf	147,4,c	;volatile
  3063                           
  3064                           ;TAD_DISPLAY.c: 240:  (LATBbits.LATB3 = 1);
  3065   001930  868A               	bsf	138,3,c	;volatile
  3066                           
  3067                           ;TAD_DISPLAY.c: 241:  (LATBbits.LATB2 = 0);
  3068   001932  948A               	bcf	138,2,c	;volatile
  3069                           
  3070                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB1 = 1);
  3071   001934  828A               	bsf	138,1,c	;volatile
  3072                           
  3073                           ;TAD_DISPLAY.c: 243:  CantaPartAlta(Data);
  3074   001936  5057               	movf	CantaData@Data^0,w,c
  3075   001938  ECEB  F00A         	call	_CantaPartAlta
  3076                           
  3077                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3078   00193C  828A               	bsf	138,1,c	;volatile
  3079                           
  3080                           ;TAD_DISPLAY.c: 245:  (LATBbits.LATB1 = 0);
  3081   00193E  928A               	bcf	138,1,c	;volatile
  3082                           
  3083                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 0);
  3084   001940  928A               	bcf	138,1,c	;volatile
  3085                           
  3086                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 1);
  3087   001942  828A               	bsf	138,1,c	;volatile
  3088                           
  3089                           ;TAD_DISPLAY.c: 248:  CantaPartBaixa(Data);
  3090   001944  5057               	movf	CantaData@Data^0,w,c
  3091   001946  ECB9  F00A         	call	_CantaPartBaixa
  3092                           
  3093                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3094   00194A  828A               	bsf	138,1,c	;volatile
  3095                           
  3096                           ;TAD_DISPLAY.c: 250:  (LATBbits.LATB1 = 0);
  3097   00194C  928A               	bcf	138,1,c	;volatile
  3098                           
  3099                           ;TAD_DISPLAY.c: 251:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3100   00194E  8096               	bsf	150,0,c	;volatile
  3101   001950  8296               	bsf	150,1,c	;volatile
  3102   001952  8A93               	bsf	147,5,c	;volatile
  3103   001954  8893               	bsf	147,4,c	;volatile
  3104   001956  0012               	return		;funcret
  3105   001958                     __end_of_CantaData:
  3106                           	callstack 0
  3107                           
  3108 ;; *************** function _motor_RFID *****************
  3109 ;; Defined at:
  3110 ;;		line 169 in file "TAD_RFID.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  flag            1   32[COMRAM] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1
  3124 ;;      Params:         0       0       0
  3125 ;;      Locals:         3       0       0
  3126 ;;      Temps:          2       0       0
  3127 ;;      Totals:         5       0       0
  3128 ;;Total ram usage:        5 bytes
  3129 ;; Hardware stack levels used: 1
  3130 ;; Hardware stack levels required when called: 9
  3131 ;; This function calls:
  3132 ;;		_TI_GetTics
  3133 ;;		_TI_ResetTics
  3134 ;;		_getActualUID
  3135 ;;		_getCurrentUserIndex
  3136 ;;		_motor_Read
  3137 ;;		_motor_StartSendString
  3138 ;;		_motor_Write
  3139 ;;		_motor_setCurrentUser
  3140 ;;		_setIndex
  3141 ;;		_setStartSendString
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text5
  3148   00002A                     __ptext5:
  3149                           	callstack 0
  3150   00002A                     _motor_RFID:
  3151                           	callstack 21
  3152                           
  3153                           ;TAD_RFID.c: 195:     if (operation_pending == 1) {
  3154                           
  3155                           ;incstack = 0
  3156   00002A  0429               	decf	motor_RFID@operation_pending^0,w,c
  3157   00002C  A4D8               	btfss	status,2,c
  3158   00002E  D00C               	goto	l4353
  3159                           
  3160                           ;TAD_RFID.c: 197:         flag = motor_Read(addr);
  3161   000030  5028               	movf	motor_RFID@addr^0,w,c
  3162   000032  EC4A  F008         	call	_motor_Read
  3163   000036  6E74               	movwf	motor_RFID@flag^0,c
  3164                           
  3165                           ;TAD_RFID.c: 198:         if (flag != 0xFE) {
  3166   000038  0EFE               	movlw	254
  3167   00003A  1874               	xorwf	motor_RFID@flag^0,w,c
  3168   00003C  B4D8               	btfsc	status,2,c
  3169   00003E  0012               	return	
  3170                           
  3171                           ;TAD_RFID.c: 199:             tempRegValue = flag;
  3172   000040  C074  F02F         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3173                           
  3174                           ;TAD_RFID.c: 200:             operation_pending = 0;
  3175   000044  6A29               	clrf	motor_RFID@operation_pending^0,c
  3176                           
  3177                           ;TAD_RFID.c: 201:         } else {
  3178   000046  0012               	return	
  3179   000048                     l4353:
  3180   000048  0E02               	movlw	2
  3181   00004A  1829               	xorwf	motor_RFID@operation_pending^0,w,c
  3182   00004C  A4D8               	btfss	status,2,c
  3183   00004E  D00B               	goto	l4361
  3184                           
  3185                           ;TAD_RFID.c: 206:         flag = motor_Write(addr, value);
  3186   000050  C027  F05C         	movff	motor_RFID@value,motor_Write@value
  3187   000054  5028               	movf	motor_RFID@addr^0,w,c
  3188   000056  EC83  F00A         	call	_motor_Write
  3189   00005A  6E74               	movwf	motor_RFID@flag^0,c
  3190                           
  3191                           ;TAD_RFID.c: 207:         if (flag != 0) {
  3192   00005C  5074               	movf	motor_RFID@flag^0,w,c
  3193   00005E  B4D8               	btfsc	status,2,c
  3194   000060  0012               	return	
  3195                           
  3196                           ;TAD_RFID.c: 208:             operation_pending = 0;
  3197   000062  6A29               	clrf	motor_RFID@operation_pending^0,c
  3198                           
  3199                           ;TAD_RFID.c: 209:         } else {
  3200   000064  0012               	return	
  3201   000066                     l4361:
  3202                           
  3203                           ;TAD_RFID.c: 214:         if (state != last_state) {
  3204   000066  502A               	movf	motor_RFID@last_state^0,w,c
  3205   000068  1839               	xorwf	motor_RFID@state^0,w,c
  3206   00006A  B4D8               	btfsc	status,2,c
  3207   00006C  D008               	goto	l4369
  3208                           
  3209                           ;TAD_RFID.c: 215:             last_state = state;
  3210   00006E  C039  F02A         	movff	motor_RFID@state,motor_RFID@last_state
  3211                           
  3212                           ;TAD_RFID.c: 218:             if (state == 1) {
  3213   000072  0439               	decf	motor_RFID@state^0,w,c
  3214   000074  A4D8               	btfss	status,2,c
  3215   000076  D003               	goto	l4369
  3216                           
  3217                           ;TAD_RFID.c: 219:                 TI_ResetTics(card_timer);
  3218   000078  504F               	movf	_card_timer^0,w,c
  3219   00007A  EC14  F00D         	call	_TI_ResetTics
  3220   00007E                     l4369:
  3221                           
  3222                           ;TAD_RFID.c: 225:         if (state == 0 && TI_GetTics(card_timer) > 200) {
  3223   00007E  5039               	movf	motor_RFID@state^0,w,c
  3224   000080  A4D8               	btfss	status,2,c
  3225   000082  D302               	goto	l4723
  3226   000084  504F               	movf	_card_timer^0,w,c
  3227   000086  ECF9  F00B         	call	_TI_GetTics
  3228   00008A  5058               	movf	(?_TI_GetTics+3)^0,w,c
  3229   00008C  1057               	iorwf	(?_TI_GetTics+2)^0,w,c
  3230   00008E  1056               	iorwf	(?_TI_GetTics+1)^0,w,c
  3231   000090  E104               	bnz	u3870
  3232   000092  0EC9               	movlw	201
  3233   000094  5C55               	subwf	?_TI_GetTics^0,w,c
  3234   000096  A0D8               	btfss	status,0,c
  3235   000098  D2F7               	goto	l4723
  3236   00009A                     u3870:
  3237                           
  3238                           ;TAD_RFID.c: 226:             cardRemoved = 1;
  3239   00009A  0E01               	movlw	1
  3240   00009C  6E2B               	movwf	motor_RFID@cardRemoved^0,c
  3241                           
  3242                           ;TAD_RFID.c: 227:             TI_ResetTics(card_timer);
  3243   00009E  504F               	movf	_card_timer^0,w,c
  3244   0000A0  EC14  F00D         	call	_TI_ResetTics
  3245   0000A4  D2F1               	goto	l4723
  3246   0000A6                     l4377:
  3247                           
  3248                           ;TAD_RFID.c: 235:                         addr = 0x0D;
  3249   0000A6  0E0D               	movlw	13
  3250   0000A8  6E28               	movwf	motor_RFID@addr^0,c
  3251                           
  3252                           ;TAD_RFID.c: 236:                         value = 0x07;
  3253   0000AA  0E07               	movlw	7
  3254   0000AC  6E27               	movwf	motor_RFID@value^0,c
  3255                           
  3256                           ;TAD_RFID.c: 237:                         operation_pending = 2;
  3257   0000AE  0E02               	movlw	2
  3258   0000B0  6E29               	movwf	motor_RFID@operation_pending^0,c
  3259                           
  3260                           ;TAD_RFID.c: 238:                         substate = 1;
  3261   0000B2  0E01               	movlw	1
  3262   0000B4  6E38               	movwf	motor_RFID@substate^0,c
  3263                           
  3264                           ;TAD_RFID.c: 239:                         break;
  3265   0000B6  0012               	return	
  3266   0000B8                     l4379:
  3267                           
  3268                           ;TAD_RFID.c: 241:                         TagType = 0x26;
  3269   0000B8  0E26               	movlw	38
  3270   0000BA  6E32               	movwf	motor_RFID@TagType^0,c
  3271                           
  3272                           ;TAD_RFID.c: 242:                         irqEn = 0x77;
  3273   0000BC  0E77               	movlw	119
  3274   0000BE  6E37               	movwf	motor_RFID@irqEn^0,c
  3275                           
  3276                           ;TAD_RFID.c: 243:                         waitIRq = 0x30;
  3277   0000C0  0E30               	movlw	48
  3278   0000C2  6E36               	movwf	motor_RFID@waitIRq^0,c
  3279                           
  3280                           ;TAD_RFID.c: 244:                         addr = 0x02;
  3281   0000C4  0E02               	movlw	2
  3282   0000C6  6E28               	movwf	motor_RFID@addr^0,c
  3283                           
  3284                           ;TAD_RFID.c: 245:                         value = irqEn | 0x80;
  3285   0000C8  5037               	movf	motor_RFID@irqEn^0,w,c
  3286   0000CA  0980               	iorlw	128
  3287   0000CC  6E27               	movwf	motor_RFID@value^0,c
  3288                           
  3289                           ;TAD_RFID.c: 246:                         operation_pending = 2;
  3290   0000CE  0E02               	movlw	2
  3291   0000D0  6E29               	movwf	motor_RFID@operation_pending^0,c
  3292                           
  3293                           ;TAD_RFID.c: 247:                         substate = 2;
  3294   0000D2  0E02               	movlw	2
  3295   0000D4  6E38               	movwf	motor_RFID@substate^0,c
  3296                           
  3297                           ;TAD_RFID.c: 248:                         break;
  3298   0000D6  0012               	return	
  3299   0000D8                     l4387:
  3300                           
  3301                           ;TAD_RFID.c: 250:                         addr = 0x04;
  3302   0000D8  0E04               	movlw	4
  3303   0000DA  6E28               	movwf	motor_RFID@addr^0,c
  3304                           
  3305                           ;TAD_RFID.c: 251:                         operation_pending = 1;
  3306   0000DC  0E01               	movlw	1
  3307   0000DE  6E29               	movwf	motor_RFID@operation_pending^0,c
  3308                           
  3309                           ;TAD_RFID.c: 252:                         substate = 3;
  3310   0000E0  0E03               	movlw	3
  3311   0000E2  6E38               	movwf	motor_RFID@substate^0,c
  3312                           
  3313                           ;TAD_RFID.c: 253:                         break;
  3314   0000E4  0012               	return	
  3315   0000E6                     l4389:
  3316                           
  3317                           ;TAD_RFID.c: 255:                         if (tempRegValue == 0xFF) {
  3318   0000E6  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3319   0000E8  A4D8               	btfss	status,2,c
  3320   0000EA  D002               	goto	l4393
  3321   0000EC                     u3880:
  3322                           
  3323                           ;TAD_RFID.c: 256:                             substate = 0;
  3324   0000EC  6A38               	clrf	motor_RFID@substate^0,c
  3325                           
  3326                           ;TAD_RFID.c: 257:                         } else {
  3327   0000EE  0012               	return	
  3328   0000F0                     l4393:
  3329                           
  3330                           ;TAD_RFID.c: 258:                             addr = 0x02;
  3331   0000F0  0E02               	movlw	2
  3332   0000F2  6E28               	movwf	motor_RFID@addr^0,c
  3333                           
  3334                           ;TAD_RFID.c: 259:                             value = tempRegValue & ~0x80;
  3335   0000F4  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3336   0000F6  0B7F               	andlw	127
  3337   0000F8  6E27               	movwf	motor_RFID@value^0,c
  3338                           
  3339                           ;TAD_RFID.c: 260:                             operation_pending = 2;
  3340   0000FA  0E02               	movlw	2
  3341   0000FC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3342                           
  3343                           ;TAD_RFID.c: 261:                             substate = 4;
  3344   0000FE  0E04               	movlw	4
  3345   000100  6E38               	movwf	motor_RFID@substate^0,c
  3346   000102  0012               	return	
  3347   000104                     l4401:
  3348                           
  3349                           ;TAD_RFID.c: 265:                         addr = 0x0A;
  3350   000104  0E0A               	movlw	10
  3351   000106  6E28               	movwf	motor_RFID@addr^0,c
  3352                           
  3353                           ;TAD_RFID.c: 266:                         operation_pending = 1;
  3354   000108  0E01               	movlw	1
  3355   00010A  6E29               	movwf	motor_RFID@operation_pending^0,c
  3356                           
  3357                           ;TAD_RFID.c: 267:                         substate = 5;
  3358   00010C  0E05               	movlw	5
  3359   00010E  6E38               	movwf	motor_RFID@substate^0,c
  3360                           
  3361                           ;TAD_RFID.c: 268:                         break;
  3362   000110  0012               	return	
  3363   000112                     l4403:
  3364                           
  3365                           ;TAD_RFID.c: 270:                         if (tempRegValue == 0xFF) {
  3366   000112  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3367   000114  B4D8               	btfsc	status,2,c
  3368   000116  D7EA               	goto	u3880
  3369                           
  3370                           ;TAD_RFID.c: 273:                             addr = 0x0A;
  3371   000118  0E0A               	movlw	10
  3372   00011A  6E28               	movwf	motor_RFID@addr^0,c
  3373                           
  3374                           ;TAD_RFID.c: 274:                             value = tempRegValue | 0x80;
  3375   00011C  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3376   00011E  0980               	iorlw	128
  3377   000120  6E27               	movwf	motor_RFID@value^0,c
  3378                           
  3379                           ;TAD_RFID.c: 275:                             operation_pending = 2;
  3380   000122  0E02               	movlw	2
  3381   000124  6E29               	movwf	motor_RFID@operation_pending^0,c
  3382                           
  3383                           ;TAD_RFID.c: 276:                             substate = 6;
  3384   000126  0E06               	movlw	6
  3385   000128  6E38               	movwf	motor_RFID@substate^0,c
  3386   00012A  0012               	return	
  3387   00012C                     l4415:
  3388                           
  3389                           ;TAD_RFID.c: 280:                         addr = 0x01;
  3390   00012C  0E01               	movlw	1
  3391   00012E  6E28               	movwf	motor_RFID@addr^0,c
  3392                           
  3393                           ;TAD_RFID.c: 281:                         value = 0x00;
  3394   000130  6A27               	clrf	motor_RFID@value^0,c
  3395                           
  3396                           ;TAD_RFID.c: 282:                         operation_pending = 2;
  3397   000132  0E02               	movlw	2
  3398   000134  6E29               	movwf	motor_RFID@operation_pending^0,c
  3399                           
  3400                           ;TAD_RFID.c: 283:                         substate = 7;
  3401   000136  0E07               	movlw	7
  3402   000138  6E38               	movwf	motor_RFID@substate^0,c
  3403                           
  3404                           ;TAD_RFID.c: 284:                         break;
  3405   00013A  0012               	return	
  3406   00013C                     l4419:
  3407                           
  3408                           ;TAD_RFID.c: 286:                         addr = 0x09;
  3409   00013C  0E09               	movlw	9
  3410   00013E  6E28               	movwf	motor_RFID@addr^0,c
  3411                           
  3412                           ;TAD_RFID.c: 287:                         value = TagType;
  3413   000140  C032  F027         	movff	motor_RFID@TagType,motor_RFID@value
  3414                           
  3415                           ;TAD_RFID.c: 288:                         operation_pending = 2;
  3416   000144  0E02               	movlw	2
  3417   000146  6E29               	movwf	motor_RFID@operation_pending^0,c
  3418                           
  3419                           ;TAD_RFID.c: 289:                         substate = 8;
  3420   000148  0E08               	movlw	8
  3421   00014A  6E38               	movwf	motor_RFID@substate^0,c
  3422                           
  3423                           ;TAD_RFID.c: 290:                         break;
  3424   00014C  0012               	return	
  3425   00014E                     l4423:
  3426                           
  3427                           ;TAD_RFID.c: 292:                         addr = 0x01;
  3428   00014E  0E01               	movlw	1
  3429   000150  6E28               	movwf	motor_RFID@addr^0,c
  3430                           
  3431                           ;TAD_RFID.c: 293:                         value = 0x0C;
  3432   000152  0E0C               	movlw	12
  3433   000154  6E27               	movwf	motor_RFID@value^0,c
  3434                           
  3435                           ;TAD_RFID.c: 294:                         operation_pending = 2;
  3436   000156  0E02               	movlw	2
  3437   000158  6E29               	movwf	motor_RFID@operation_pending^0,c
  3438                           
  3439                           ;TAD_RFID.c: 295:                         substate = 9;
  3440   00015A  0E09               	movlw	9
  3441   00015C  6E38               	movwf	motor_RFID@substate^0,c
  3442                           
  3443                           ;TAD_RFID.c: 296:                         break;
  3444   00015E  0012               	return	
  3445   000160                     l4425:
  3446                           
  3447                           ;TAD_RFID.c: 298:                         addr = 0x0D;
  3448   000160  0E0D               	movlw	13
  3449   000162  6E28               	movwf	motor_RFID@addr^0,c
  3450                           
  3451                           ;TAD_RFID.c: 299:                         operation_pending = 1;
  3452   000164  0E01               	movlw	1
  3453   000166  6E29               	movwf	motor_RFID@operation_pending^0,c
  3454                           
  3455                           ;TAD_RFID.c: 300:                         substate = 10;
  3456   000168  0E0A               	movlw	10
  3457   00016A  6E38               	movwf	motor_RFID@substate^0,c
  3458                           
  3459                           ;TAD_RFID.c: 301:                         break;
  3460   00016C  0012               	return	
  3461   00016E                     l4427:
  3462                           
  3463                           ;TAD_RFID.c: 303:                         if (tempRegValue == 0xFF) {
  3464   00016E  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3465   000170  B4D8               	btfsc	status,2,c
  3466   000172  D7BC               	goto	u3880
  3467                           
  3468                           ;TAD_RFID.c: 306:                             addr = 0x0D;
  3469   000174  0E0D               	movlw	13
  3470   000176  6E28               	movwf	motor_RFID@addr^0,c
  3471                           
  3472                           ;TAD_RFID.c: 307:                             value = tempRegValue | 0x80;
  3473   000178  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3474   00017A  0980               	iorlw	128
  3475   00017C  6E27               	movwf	motor_RFID@value^0,c
  3476                           
  3477                           ;TAD_RFID.c: 308:                             operation_pending = 2;
  3478   00017E  0E02               	movlw	2
  3479   000180  6E29               	movwf	motor_RFID@operation_pending^0,c
  3480                           
  3481                           ;TAD_RFID.c: 309:                             substate = 11;
  3482   000182  0E0B               	movlw	11
  3483   000184  6E38               	movwf	motor_RFID@substate^0,c
  3484   000186  0012               	return	
  3485   000188                     l410:
  3486                           
  3487                           ;TAD_RFID.c: 313:                         i = 0xFF;
  3488   000188  6834               	setf	motor_RFID@i^0,c
  3489                           
  3490                           ;TAD_RFID.c: 314:                         addr = 0x04;
  3491   00018A  0E04               	movlw	4
  3492   00018C  6E28               	movwf	motor_RFID@addr^0,c
  3493                           
  3494                           ;TAD_RFID.c: 315:                         operation_pending = 1;
  3495   00018E  0E01               	movlw	1
  3496   000190  6E29               	movwf	motor_RFID@operation_pending^0,c
  3497                           
  3498                           ;TAD_RFID.c: 316:                         substate = 12;
  3499   000192  0E0C               	movlw	12
  3500   000194  6E38               	movwf	motor_RFID@substate^0,c
  3501                           
  3502                           ;TAD_RFID.c: 317:                         break;
  3503   000196  0012               	return	
  3504   000198                     l4441:
  3505                           
  3506                           ;TAD_RFID.c: 319:                         if (tempRegValue == 0xFF) {
  3507   000198  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3508   00019A  B4D8               	btfsc	status,2,c
  3509   00019C  D7A7               	goto	u3880
  3510                           
  3511                           ;TAD_RFID.c: 322:                             n = tempRegValue;
  3512   00019E  C02F  F035         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3513                           
  3514                           ;TAD_RFID.c: 323:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3515   0001A2  B035               	btfsc	motor_RFID@n^0,0,c
  3516   0001A4  D007               	goto	l4449
  3517   0001A6  5035               	movf	motor_RFID@n^0,w,c
  3518   0001A8  1436               	andwf	motor_RFID@waitIRq^0,w,c
  3519   0001AA  0900               	iorlw	0
  3520   0001AC  A4D8               	btfss	status,2,c
  3521   0001AE  D002               	goto	l4449
  3522   0001B0  2E34               	decfsz	motor_RFID@i^0,f,c
  3523   0001B2  D007               	goto	l4451
  3524   0001B4                     l4449:
  3525                           
  3526                           ;TAD_RFID.c: 324:                                 addr = 0x0D;
  3527   0001B4  0E0D               	movlw	13
  3528   0001B6  6E28               	movwf	motor_RFID@addr^0,c
  3529                           
  3530                           ;TAD_RFID.c: 325:                                 operation_pending = 1;
  3531   0001B8  0E01               	movlw	1
  3532   0001BA  6E29               	movwf	motor_RFID@operation_pending^0,c
  3533                           
  3534                           ;TAD_RFID.c: 326:                                 substate = 13;
  3535   0001BC  0E0D               	movlw	13
  3536   0001BE  6E38               	movwf	motor_RFID@substate^0,c
  3537                           
  3538                           ;TAD_RFID.c: 327:                             } else {
  3539   0001C0  0012               	return	
  3540   0001C2                     l4451:
  3541                           
  3542                           ;TAD_RFID.c: 328:                                 addr = 0x04;
  3543   0001C2  0E04               	movlw	4
  3544   0001C4  6E28               	movwf	motor_RFID@addr^0,c
  3545                           
  3546                           ;TAD_RFID.c: 329:                                 operation_pending = 1;
  3547   0001C6  0E01               	movlw	1
  3548   0001C8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3549   0001CA  0012               	return	
  3550   0001CC                     l4453:
  3551                           
  3552                           ;TAD_RFID.c: 334:                         if (tempRegValue == 0xFF) {
  3553   0001CC  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3554   0001CE  B4D8               	btfsc	status,2,c
  3555   0001D0  D78D               	goto	u3880
  3556   0001D2  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3557   0001D4  B4D8               	btfsc	status,2,c
  3558   0001D6  D00A               	goto	l4467
  3559                           
  3560                           ;TAD_RFID.c: 337:                             addr = 0x0D;
  3561   0001D8  0E0D               	movlw	13
  3562   0001DA  6E28               	movwf	motor_RFID@addr^0,c
  3563                           
  3564                           ;TAD_RFID.c: 338:                             value = tempRegValue & ~0x80;
  3565   0001DC  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3566   0001DE  0B7F               	andlw	127
  3567   0001E0  6E27               	movwf	motor_RFID@value^0,c
  3568                           
  3569                           ;TAD_RFID.c: 339:                             operation_pending = 2;
  3570   0001E2  0E02               	movlw	2
  3571   0001E4  6E29               	movwf	motor_RFID@operation_pending^0,c
  3572                           
  3573                           ;TAD_RFID.c: 340:                             substate = 14;
  3574   0001E6  0E0E               	movlw	14
  3575   0001E8  6E38               	movwf	motor_RFID@substate^0,c
  3576                           
  3577                           ;TAD_RFID.c: 341:                         } else {
  3578   0001EA  0012               	return	
  3579   0001EC                     l4467:
  3580                           
  3581                           ;TAD_RFID.c: 342:                             addr = 0x0D;
  3582   0001EC  0E0D               	movlw	13
  3583   0001EE  6E28               	movwf	motor_RFID@addr^0,c
  3584                           
  3585                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3586   0001F0  0E01               	movlw	1
  3587   0001F2  6E29               	movwf	motor_RFID@operation_pending^0,c
  3588   0001F4  0012               	return	
  3589   0001F6                     l4469:
  3590                           
  3591                           ;TAD_RFID.c: 348:                         addr = 0x06;
  3592   0001F6  0E06               	movlw	6
  3593   0001F8  6E28               	movwf	motor_RFID@addr^0,c
  3594                           
  3595                           ;TAD_RFID.c: 349:                         operation_pending = 1;
  3596   0001FA  0E01               	movlw	1
  3597   0001FC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3598                           
  3599                           ;TAD_RFID.c: 350:                         substate = 15;
  3600   0001FE  0E0F               	movlw	15
  3601   000200  6E38               	movwf	motor_RFID@substate^0,c
  3602                           
  3603                           ;TAD_RFID.c: 351:                         break;
  3604   000202  0012               	return	
  3605   000204                     l4471:
  3606                           
  3607                           ;TAD_RFID.c: 353:                         if (tempRegValue == 0xFF) {
  3608   000204  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3609   000206  B4D8               	btfsc	status,2,c
  3610   000208  D771               	goto	u3880
  3611   00020A  5034               	movf	motor_RFID@i^0,w,c
  3612   00020C  B4D8               	btfsc	status,2,c
  3613   00020E  D00D               	goto	l427
  3614   000210  C02F  F070         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3615   000214  0E1B               	movlw	27
  3616   000216  1670               	andwf	??_motor_RFID^0,f,c
  3617   000218  A4D8               	btfss	status,2,c
  3618   00021A  D007               	goto	l427
  3619                           
  3620                           ;TAD_RFID.c: 356:                             addr = 0x0A;
  3621   00021C  0E0A               	movlw	10
  3622   00021E  6E28               	movwf	motor_RFID@addr^0,c
  3623                           
  3624                           ;TAD_RFID.c: 357:                             operation_pending = 1;
  3625   000220  0E01               	movlw	1
  3626   000222  6E29               	movwf	motor_RFID@operation_pending^0,c
  3627                           
  3628                           ;TAD_RFID.c: 358:                             substate = 16;
  3629   000224  0E10               	movlw	16
  3630   000226  6E38               	movwf	motor_RFID@substate^0,c
  3631                           
  3632                           ;TAD_RFID.c: 359:                         } else {
  3633   000228  0012               	return	
  3634   00022A                     l427:
  3635                           
  3636                           ;TAD_RFID.c: 361:                             state = substate = 0;
  3637   00022A  6A38               	clrf	motor_RFID@substate^0,c
  3638   00022C  6A39               	clrf	motor_RFID@state^0,c
  3639   00022E  0012               	return	
  3640   000230                     l4481:
  3641                           
  3642                           ;TAD_RFID.c: 365:                         if (tempRegValue == 0xFF) {
  3643   000230  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3644   000232  B4D8               	btfsc	status,2,c
  3645   000234  D75B               	goto	u3880
  3646                           
  3647                           ;TAD_RFID.c: 368:                             fifoLevel = tempRegValue;
  3648   000236  C02F  F02D         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3649                           
  3650                           ;TAD_RFID.c: 369:                             addr = 0x0C;
  3651   00023A  0E0C               	movlw	12
  3652   00023C  6E28               	movwf	motor_RFID@addr^0,c
  3653                           
  3654                           ;TAD_RFID.c: 370:                             operation_pending = 1;
  3655   00023E  0E01               	movlw	1
  3656   000240  6E29               	movwf	motor_RFID@operation_pending^0,c
  3657                           
  3658                           ;TAD_RFID.c: 371:                             substate = 17;
  3659   000242  0E11               	movlw	17
  3660   000244  6E38               	movwf	motor_RFID@substate^0,c
  3661   000246  0012               	return	
  3662   000248                     l4487:
  3663                           
  3664                           ;TAD_RFID.c: 375:                         if (tempRegValue == 0xFF) {
  3665   000248  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3666   00024A  B4D8               	btfsc	status,2,c
  3667   00024C  D74F               	goto	u3880
  3668                           
  3669                           ;TAD_RFID.c: 378:                             lastBitsVal = tempRegValue & 0x07;
  3670   00024E  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3671   000250  0B07               	andlw	7
  3672   000252  6E2E               	movwf	motor_RFID@lastBitsVal^0,c
  3673                           
  3674                           ;TAD_RFID.c: 379:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3675   000254  502E               	movf	motor_RFID@lastBitsVal^0,w,c
  3676   000256  A4D8               	btfss	status,2,c
  3677   000258  D007               	goto	l4497
  3678   00025A  502D               	movf	motor_RFID@fifoLevel^0,w,c
  3679   00025C  0D08               	mullw	8
  3680   00025E  CFF3 F072          	movff	prodl,_motor_RFID$734
  3681   000262  CFF4 F073          	movff	prodh,_motor_RFID$734+1
  3682   000266  D016               	goto	l4499
  3683   000268                     l4497:
  3684   000268  502E               	movf	motor_RFID@lastBitsVal^0,w,c
  3685   00026A  C02D  F070         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3686   00026E  6A71               	clrf	(??_motor_RFID+1)^0,c
  3687   000270  90D8               	bcf	status,0,c
  3688   000272  3670               	rlcf	??_motor_RFID^0,f,c
  3689   000274  3671               	rlcf	(??_motor_RFID+1)^0,f,c
  3690   000276  90D8               	bcf	status,0,c
  3691   000278  3670               	rlcf	??_motor_RFID^0,f,c
  3692   00027A  3671               	rlcf	(??_motor_RFID+1)^0,f,c
  3693   00027C  90D8               	bcf	status,0,c
  3694   00027E  3670               	rlcf	??_motor_RFID^0,f,c
  3695   000280  3671               	rlcf	(??_motor_RFID+1)^0,f,c
  3696   000282  2670               	addwf	??_motor_RFID^0,f,c
  3697   000284  0E00               	movlw	0
  3698   000286  2271               	addwfc	(??_motor_RFID+1)^0,f,c
  3699   000288  0EF8               	movlw	248
  3700   00028A  2470               	addwf	??_motor_RFID^0,w,c
  3701   00028C  6E72               	movwf	_motor_RFID$734^0,c
  3702   00028E  0EFF               	movlw	255
  3703   000290  2071               	addwfc	(??_motor_RFID+1)^0,w,c
  3704   000292  6E73               	movwf	(_motor_RFID$734+1)^0,c
  3705   000294                     l4499:
  3706   000294  C072  F02C         	movff	_motor_RFID$734,motor_RFID@backBitsCalc
  3707                           
  3708                           ;TAD_RFID.c: 380:                             if (backBitsCalc == 0x10) {
  3709   000298  0E10               	movlw	16
  3710   00029A  182C               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3711   00029C  A4D8               	btfss	status,2,c
  3712   00029E  D7C5               	goto	l427
  3713                           
  3714                           ;TAD_RFID.c: 381:                                 state = 1;
  3715   0002A0  0E01               	movlw	1
  3716   0002A2  6E39               	movwf	motor_RFID@state^0,c
  3717   0002A4  D723               	goto	u3880
  3718   0002A6                     l4507:
  3719   0002A6  5038               	movf	motor_RFID@substate^0,w,c
  3720                           
  3721                           ; Switch size 1, requested type "simple"
  3722                           ; Number of cases is 18, Range of values is 0 to 17
  3723                           ; switch strategies available:
  3724                           ; Name         Instructions Cycles
  3725                           ; simple_byte           55    28 (average)
  3726                           ;	Chosen strategy is simple_byte
  3727   0002A8  0A00               	xorlw	0	; case 0
  3728   0002AA  B4D8               	btfsc	status,2,c
  3729   0002AC  D6FC               	goto	l4377
  3730   0002AE  0A01               	xorlw	1	; case 1
  3731   0002B0  B4D8               	btfsc	status,2,c
  3732   0002B2  D702               	goto	l4379
  3733   0002B4  0A03               	xorlw	3	; case 2
  3734   0002B6  B4D8               	btfsc	status,2,c
  3735   0002B8  D70F               	goto	l4387
  3736   0002BA  0A01               	xorlw	1	; case 3
  3737   0002BC  B4D8               	btfsc	status,2,c
  3738   0002BE  D713               	goto	l4389
  3739   0002C0  0A07               	xorlw	7	; case 4
  3740   0002C2  B4D8               	btfsc	status,2,c
  3741   0002C4  D71F               	goto	l4401
  3742   0002C6  0A01               	xorlw	1	; case 5
  3743   0002C8  B4D8               	btfsc	status,2,c
  3744   0002CA  D723               	goto	l4403
  3745   0002CC  0A03               	xorlw	3	; case 6
  3746   0002CE  B4D8               	btfsc	status,2,c
  3747   0002D0  D72D               	goto	l4415
  3748   0002D2  0A01               	xorlw	1	; case 7
  3749   0002D4  B4D8               	btfsc	status,2,c
  3750   0002D6  D732               	goto	l4419
  3751   0002D8  0A0F               	xorlw	15	; case 8
  3752   0002DA  B4D8               	btfsc	status,2,c
  3753   0002DC  D738               	goto	l4423
  3754   0002DE  0A01               	xorlw	1	; case 9
  3755   0002E0  B4D8               	btfsc	status,2,c
  3756   0002E2  D73E               	goto	l4425
  3757   0002E4  0A03               	xorlw	3	; case 10
  3758   0002E6  B4D8               	btfsc	status,2,c
  3759   0002E8  D742               	goto	l4427
  3760   0002EA  0A01               	xorlw	1	; case 11
  3761   0002EC  B4D8               	btfsc	status,2,c
  3762   0002EE  D74C               	goto	l410
  3763   0002F0  0A07               	xorlw	7	; case 12
  3764   0002F2  B4D8               	btfsc	status,2,c
  3765   0002F4  D751               	goto	l4441
  3766   0002F6  0A01               	xorlw	1	; case 13
  3767   0002F8  B4D8               	btfsc	status,2,c
  3768   0002FA  D768               	goto	l4453
  3769   0002FC  0A03               	xorlw	3	; case 14
  3770   0002FE  B4D8               	btfsc	status,2,c
  3771   000300  D77A               	goto	l4469
  3772   000302  0A01               	xorlw	1	; case 15
  3773   000304  B4D8               	btfsc	status,2,c
  3774   000306  D77E               	goto	l4471
  3775   000308  0A1F               	xorlw	31	; case 16
  3776   00030A  B4D8               	btfsc	status,2,c
  3777   00030C  D791               	goto	l4481
  3778   00030E  0A01               	xorlw	1	; case 17
  3779   000310  A4D8               	btfss	status,2,c
  3780   000312  0012               	return	
  3781   000314  D799               	goto	l4487
  3782   000316                     l4509:
  3783                           
  3784                           ;TAD_RFID.c: 394:                         addr = 0x0D;
  3785   000316  0E0D               	movlw	13
  3786   000318  6E28               	movwf	motor_RFID@addr^0,c
  3787                           
  3788                           ;TAD_RFID.c: 395:                         value = 0x00;
  3789   00031A  6A27               	clrf	motor_RFID@value^0,c
  3790                           
  3791                           ;TAD_RFID.c: 396:                         operation_pending = 2;
  3792   00031C  0E02               	movlw	2
  3793   00031E  6E29               	movwf	motor_RFID@operation_pending^0,c
  3794                           
  3795                           ;TAD_RFID.c: 397:                         substate = 1;
  3796   000320  0E01               	movlw	1
  3797   000322  6E38               	movwf	motor_RFID@substate^0,c
  3798                           
  3799                           ;TAD_RFID.c: 398:                         break;
  3800   000324  0012               	return	
  3801   000326                     l4513:
  3802                           
  3803                           ;TAD_RFID.c: 400:                         UID[0] = 0x93;
  3804   000326  0E93               	movlw	147
  3805   000328  6E01               	movwf	motor_RFID@UID^0,c
  3806                           
  3807                           ;TAD_RFID.c: 401:                         UID[1] = 0x20;
  3808   00032A  0E20               	movlw	32
  3809   00032C  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3810                           
  3811                           ;TAD_RFID.c: 402:                         addr = 0x08;
  3812   00032E  0E08               	movlw	8
  3813   000330  6E28               	movwf	motor_RFID@addr^0,c
  3814                           
  3815                           ;TAD_RFID.c: 403:                         operation_pending = 1;
  3816   000332  0E01               	movlw	1
  3817   000334  6E29               	movwf	motor_RFID@operation_pending^0,c
  3818                           
  3819                           ;TAD_RFID.c: 404:                         substate = 2;
  3820   000336  0E02               	movlw	2
  3821   000338  6E38               	movwf	motor_RFID@substate^0,c
  3822                           
  3823                           ;TAD_RFID.c: 405:                         break;
  3824   00033A  0012               	return	
  3825   00033C                     l4515:
  3826                           
  3827                           ;TAD_RFID.c: 407:                         if (tempRegValue == 0xFF) {
  3828   00033C  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3829   00033E  B4D8               	btfsc	status,2,c
  3830   000340  D774               	goto	l427
  3831                           
  3832                           ;TAD_RFID.c: 410:                             addr = 0x08;
  3833   000342  0E08               	movlw	8
  3834   000344  6E28               	movwf	motor_RFID@addr^0,c
  3835                           
  3836                           ;TAD_RFID.c: 411:                             value = tempRegValue & ~0x08;
  3837   000346  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3838   000348  0BF7               	andlw	247
  3839   00034A  6E27               	movwf	motor_RFID@value^0,c
  3840                           
  3841                           ;TAD_RFID.c: 412:                             operation_pending = 2;
  3842   00034C  0E02               	movlw	2
  3843   00034E  6E29               	movwf	motor_RFID@operation_pending^0,c
  3844                           
  3845                           ;TAD_RFID.c: 413:                             substate = 3;
  3846   000350  0E03               	movlw	3
  3847   000352  6E38               	movwf	motor_RFID@substate^0,c
  3848   000354  0012               	return	
  3849   000356                     l4527:
  3850                           
  3851                           ;TAD_RFID.c: 417:                         irqEn = 0x77;
  3852   000356  0E77               	movlw	119
  3853   000358  6E37               	movwf	motor_RFID@irqEn^0,c
  3854                           
  3855                           ;TAD_RFID.c: 418:                         waitIRq = 0x30;
  3856   00035A  0E30               	movlw	48
  3857   00035C  6E36               	movwf	motor_RFID@waitIRq^0,c
  3858                           
  3859                           ;TAD_RFID.c: 419:                         addr = 0x02;
  3860   00035E  0E02               	movlw	2
  3861   000360  6E28               	movwf	motor_RFID@addr^0,c
  3862                           
  3863                           ;TAD_RFID.c: 420:                         value = irqEn | 0x80;
  3864   000362  5037               	movf	motor_RFID@irqEn^0,w,c
  3865   000364  0980               	iorlw	128
  3866   000366  D6C8               	goto	L5
  3867   000368                     l4535:
  3868                           
  3869                           ;TAD_RFID.c: 425:                         addr = 0x04;
  3870   000368  0E04               	movlw	4
  3871   00036A  6E28               	movwf	motor_RFID@addr^0,c
  3872                           
  3873                           ;TAD_RFID.c: 426:                         operation_pending = 1;
  3874   00036C  0E01               	movlw	1
  3875   00036E  6E29               	movwf	motor_RFID@operation_pending^0,c
  3876                           
  3877                           ;TAD_RFID.c: 427:                         substate = 5;
  3878   000370  0E05               	movlw	5
  3879   000372  6E38               	movwf	motor_RFID@substate^0,c
  3880                           
  3881                           ;TAD_RFID.c: 428:                         break;
  3882   000374  0012               	return	
  3883   000376                     l4537:
  3884                           
  3885                           ;TAD_RFID.c: 430:                         if (tempRegValue == 0xFF) {
  3886   000376  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3887   000378  B4D8               	btfsc	status,2,c
  3888   00037A  D757               	goto	l427
  3889                           
  3890                           ;TAD_RFID.c: 433:                             addr = 0x04;
  3891   00037C  0E04               	movlw	4
  3892   00037E  6E28               	movwf	motor_RFID@addr^0,c
  3893                           
  3894                           ;TAD_RFID.c: 434:                             value = tempRegValue & ~0x80;
  3895   000380  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3896   000382  0B7F               	andlw	127
  3897   000384  D6CD               	goto	L6
  3898   000386                     l4549:
  3899                           
  3900                           ;TAD_RFID.c: 440:                         addr = 0x0A;
  3901   000386  0E0A               	movlw	10
  3902   000388  6E28               	movwf	motor_RFID@addr^0,c
  3903                           
  3904                           ;TAD_RFID.c: 441:                         operation_pending = 1;
  3905   00038A  0E01               	movlw	1
  3906   00038C  6E29               	movwf	motor_RFID@operation_pending^0,c
  3907                           
  3908                           ;TAD_RFID.c: 442:                         substate = 7;
  3909   00038E  0E07               	movlw	7
  3910   000390  6E38               	movwf	motor_RFID@substate^0,c
  3911                           
  3912                           ;TAD_RFID.c: 443:                         break;
  3913   000392  0012               	return	
  3914   000394                     l4551:
  3915                           
  3916                           ;TAD_RFID.c: 445:                         if (tempRegValue == 0xFF) {
  3917   000394  282F               	incf	motor_RFID@tempRegValue^0,w,c
  3918   000396  B4D8               	btfsc	status,2,c
  3919   000398  D748               	goto	l427
  3920                           
  3921                           ;TAD_RFID.c: 448:                             addr = 0x0A;
  3922   00039A  0E0A               	movlw	10
  3923   00039C  6E28               	movwf	motor_RFID@addr^0,c
  3924                           
  3925                           ;TAD_RFID.c: 449:                             value = tempRegValue | 0x80;
  3926   00039E  502F               	movf	motor_RFID@tempRegValue^0,w,c
  3927   0003A0  0980               	iorlw	128
  3928   0003A2  6E27               	movwf	motor_RFID@value^0,c
  3929                           
  3930                           ;TAD_RFID.c: 450:                             operation_pending = 2;
  3931   0003A4  0E02               	movlw	2
  3932   0003A6  6E29               	movwf	motor_RFID@operation_pending^0,c
  3933                           
  3934                           ;TAD_RFID.c: 451:                             substate = 8;
  3935   0003A8  0E08               	movlw	8
  3936   0003AA  6E38               	movwf	motor_RFID@substate^0,c
  3937   0003AC  0012               	return	
  3938   0003AE                     l4563:
  3939                           
  3940                           ;TAD_RFID.c: 455:                         addr = 0x01;
  3941   0003AE  0E01               	movlw	1
  3942   0003B0  6E28               	movwf	motor_RFID@addr^0,c
  3943                           
  3944                           ;TAD_RFID.c: 456:                         value = 0x00;
  3945   0003B2  6A27               	clrf	motor_RFID@value^0,c
  3946                           
  3947                           ;TAD_RFID.c: 457:                         operation_pending = 2;
  3948   0003B4  0E02               	movlw	2
  3949   0003B6  6E29               	movwf	motor_RFID@operation_pending^0,c
  3950                           
  3951                           ;TAD_RFID.c: 458:                         substate = 9;
  3952   0003B8  0E09               	movlw	9
  3953   0003BA  6E38               	movwf	motor_RFID@substate^0,c
  3954                           
  3955                           ;TAD_RFID.c: 459:                         break;
  3956   0003BC  0012               	return	
  3957   0003BE                     l4567:
  3958                           
  3959                           ;TAD_RFID.c: 461:                         addr = 0x09;
  3960   0003BE  0E09               	movlw	9
  3961   0003C0  6E28               	movwf	motor_RFID@addr^0,c
  3962                           
  3963                           ;TAD_RFID.c: 462:                         value = UID[0];
  3964   0003C2  C001  F027         	movff	motor_RFID@UID,motor_RFID@value
  3965                           
  3966                           ;TAD_RFID.c: 463:                         operation_pending = 2;
  3967   0003C6  0E02               	movlw	2
  3968   0003C8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3969                           
  3970                           ;TAD_RFID.c: 464:                         substate = 10;
  3971   0003CA  0E0A               	movlw	10
  3972   0003CC  6E38               	movwf	motor_RFID@substate^0,c
  3973                           
  3974                           ;TAD_RFID.c: 465:                         break;
  3975   0003CE  0012               	return	
  3976   0003D0                     l4571:
  3977                           
  3978                           ;TAD_RFID.c: 467:                         addr = 0x09;
  3979   0003D0  0E09               	movlw	9
  3980   0003D2  6E28               	movwf	motor_RFID@addr^0,c
  3981                           
  3982                           ;TAD_RFID.c: 468:                         value = UID[1];
  3983   0003D4  C002  F027         	movff	motor_RFID@UID+1,motor_RFID@value
  3984                           
  3985                           ;TAD_RFID.c: 469:                         operation_pending = 2;
  3986   0003D8  0E02               	movlw	2
  3987   0003DA  6E29               	movwf	motor_RFID@operation_pending^0,c
  3988                           
  3989                           ;TAD_RFID.c: 470:                         substate = 11;
  3990   0003DC  0E0B               	movlw	11
  3991   0003DE  6E38               	movwf	motor_RFID@substate^0,c
  3992                           
  3993                           ;TAD_RFID.c: 471:                         break;
  3994   0003E0  0012               	return	
  3995   0003E2                     l4575:
  3996                           
  3997                           ;TAD_RFID.c: 473:                         addr = 0x01;
  3998   0003E2  0E01               	movlw	1
  3999   0003E4  6E28               	movwf	motor_RFID@addr^0,c
  4000                           
  4001                           ;TAD_RFID.c: 474:                         value = 0x0C;
  4002   0003E6  0E0C               	movlw	12
  4003   0003E8  6E27               	movwf	motor_RFID@value^0,c
  4004                           
  4005                           ;TAD_RFID.c: 475:                         operation_pending = 2;
  4006   0003EA  0E02               	movlw	2
  4007   0003EC  6E29               	movwf	motor_RFID@operation_pending^0,c
  4008                           
  4009                           ;TAD_RFID.c: 476:                         substate = 12;
  4010   0003EE  0E0C               	movlw	12
  4011   0003F0  6E38               	movwf	motor_RFID@substate^0,c
  4012                           
  4013                           ;TAD_RFID.c: 477:                         break;
  4014   0003F2  0012               	return	
  4015   0003F4                     l4579:
  4016                           
  4017                           ;TAD_RFID.c: 484:                         if (tempRegValue == 0xFF) {
  4018   0003F4  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4019   0003F6  B4D8               	btfsc	status,2,c
  4020   0003F8  D718               	goto	l427
  4021                           
  4022                           ;TAD_RFID.c: 487:                             addr = 0x0D;
  4023   0003FA  0E0D               	movlw	13
  4024   0003FC  6E28               	movwf	motor_RFID@addr^0,c
  4025                           
  4026                           ;TAD_RFID.c: 488:                             value = tempRegValue | 0x80;
  4027   0003FE  502F               	movf	motor_RFID@tempRegValue^0,w,c
  4028   000400  0980               	iorlw	128
  4029   000402  D6EE               	goto	L7
  4030   000404                     l467:
  4031                           
  4032                           ;TAD_RFID.c: 494:                         i = 0xFF;
  4033   000404  6834               	setf	motor_RFID@i^0,c
  4034                           
  4035                           ;TAD_RFID.c: 495:                         addr = 0x04;
  4036   000406  0E04               	movlw	4
  4037   000408  6E28               	movwf	motor_RFID@addr^0,c
  4038                           
  4039                           ;TAD_RFID.c: 496:                         operation_pending = 1;
  4040   00040A  0E01               	movlw	1
  4041   00040C  6E29               	movwf	motor_RFID@operation_pending^0,c
  4042                           
  4043                           ;TAD_RFID.c: 497:                         substate = 15;
  4044   00040E  0E0F               	movlw	15
  4045   000410  6E38               	movwf	motor_RFID@substate^0,c
  4046                           
  4047                           ;TAD_RFID.c: 498:                         break;
  4048   000412  0012               	return	
  4049   000414                     l4593:
  4050                           
  4051                           ;TAD_RFID.c: 500:                         if (tempRegValue == 0xFF) {
  4052   000414  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4053   000416  B4D8               	btfsc	status,2,c
  4054   000418  D708               	goto	l427
  4055                           
  4056                           ;TAD_RFID.c: 503:                             n = tempRegValue;
  4057   00041A  C02F  F035         	movff	motor_RFID@tempRegValue,motor_RFID@n
  4058                           
  4059                           ;TAD_RFID.c: 504:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  4060   00041E  B035               	btfsc	motor_RFID@n^0,0,c
  4061   000420  D007               	goto	l4601
  4062   000422  5035               	movf	motor_RFID@n^0,w,c
  4063   000424  1436               	andwf	motor_RFID@waitIRq^0,w,c
  4064   000426  0900               	iorlw	0
  4065   000428  A4D8               	btfss	status,2,c
  4066   00042A  D002               	goto	l4601
  4067   00042C  2E34               	decfsz	motor_RFID@i^0,f,c
  4068   00042E  D6C9               	goto	l4451
  4069   000430                     l4601:
  4070                           
  4071                           ;TAD_RFID.c: 505:                                 addr = 0x0D;
  4072   000430  0E0D               	movlw	13
  4073   000432  6E28               	movwf	motor_RFID@addr^0,c
  4074                           
  4075                           ;TAD_RFID.c: 506:                                 operation_pending = 1;
  4076   000434  0E01               	movlw	1
  4077   000436  6E29               	movwf	motor_RFID@operation_pending^0,c
  4078                           
  4079                           ;TAD_RFID.c: 507:                                 substate = 16;
  4080   000438  0E10               	movlw	16
  4081   00043A  6E38               	movwf	motor_RFID@substate^0,c
  4082                           
  4083                           ;TAD_RFID.c: 508:                             } else {
  4084   00043C  0012               	return	
  4085   00043E                     l4605:
  4086                           
  4087                           ;TAD_RFID.c: 516:                         if (tempRegValue == 0xFF) {
  4088   00043E  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4089   000440  B4D8               	btfsc	status,2,c
  4090   000442  D6F3               	goto	l427
  4091                           
  4092                           ;TAD_RFID.c: 519:                             addr = 0x0D;
  4093   000444  0E0D               	movlw	13
  4094   000446  6E28               	movwf	motor_RFID@addr^0,c
  4095                           
  4096                           ;TAD_RFID.c: 520:                             value = tempRegValue & ~0x80;
  4097   000448  502F               	movf	motor_RFID@tempRegValue^0,w,c
  4098   00044A  0B7F               	andlw	127
  4099   00044C  6E27               	movwf	motor_RFID@value^0,c
  4100                           
  4101                           ;TAD_RFID.c: 521:                             operation_pending = 2;
  4102   00044E  0E02               	movlw	2
  4103   000450  6E29               	movwf	motor_RFID@operation_pending^0,c
  4104                           
  4105                           ;TAD_RFID.c: 522:                             substate = 17;
  4106   000452  0E11               	movlw	17
  4107   000454  6E38               	movwf	motor_RFID@substate^0,c
  4108   000456  0012               	return	
  4109   000458                     l4617:
  4110                           
  4111                           ;TAD_RFID.c: 526:                         addr = 0x06;
  4112   000458  0E06               	movlw	6
  4113   00045A  6E28               	movwf	motor_RFID@addr^0,c
  4114                           
  4115                           ;TAD_RFID.c: 527:                         operation_pending = 1;
  4116   00045C  0E01               	movlw	1
  4117   00045E  6E29               	movwf	motor_RFID@operation_pending^0,c
  4118                           
  4119                           ;TAD_RFID.c: 528:                         substate = 18;
  4120   000460  0E12               	movlw	18
  4121   000462  6E38               	movwf	motor_RFID@substate^0,c
  4122                           
  4123                           ;TAD_RFID.c: 529:                         break;
  4124   000464  0012               	return	
  4125   000466                     l4619:
  4126                           
  4127                           ;TAD_RFID.c: 531:                         if (tempRegValue == 0xFF) {
  4128   000466  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4129   000468  B4D8               	btfsc	status,2,c
  4130   00046A  D6DF               	goto	l427
  4131   00046C  5034               	movf	motor_RFID@i^0,w,c
  4132   00046E  B4D8               	btfsc	status,2,c
  4133   000470  D6DC               	goto	l427
  4134   000472  C02F  F070         	movff	motor_RFID@tempRegValue,??_motor_RFID
  4135   000476  0E1B               	movlw	27
  4136   000478  1670               	andwf	??_motor_RFID^0,f,c
  4137   00047A  A4D8               	btfss	status,2,c
  4138   00047C  D6D6               	goto	l427
  4139                           
  4140                           ;TAD_RFID.c: 534:                             addr = 0x09;
  4141   00047E  0E09               	movlw	9
  4142   000480  6E28               	movwf	motor_RFID@addr^0,c
  4143                           
  4144                           ;TAD_RFID.c: 535:                             operation_pending = 1;
  4145   000482  0E01               	movlw	1
  4146   000484  6E29               	movwf	motor_RFID@operation_pending^0,c
  4147                           
  4148                           ;TAD_RFID.c: 536:                             substate = 19;
  4149   000486  0E13               	movlw	19
  4150   000488  6E38               	movwf	motor_RFID@substate^0,c
  4151                           
  4152                           ;TAD_RFID.c: 537:                         } else {
  4153   00048A  0012               	return	
  4154   00048C                     l4629:
  4155                           
  4156                           ;TAD_RFID.c: 542:                         if (tempRegValue == 0xFF) {
  4157   00048C  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4158   00048E  B4D8               	btfsc	status,2,c
  4159   000490  D6CC               	goto	l427
  4160                           
  4161                           ;TAD_RFID.c: 545:                             UID[0] = tempRegValue;
  4162   000492  C02F  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  4163                           
  4164                           ;TAD_RFID.c: 546:                             addr = 0x09;
  4165   000496  0E09               	movlw	9
  4166   000498  6E28               	movwf	motor_RFID@addr^0,c
  4167                           
  4168                           ;TAD_RFID.c: 547:                             operation_pending = 1;
  4169   00049A  0E01               	movlw	1
  4170   00049C  6E29               	movwf	motor_RFID@operation_pending^0,c
  4171                           
  4172                           ;TAD_RFID.c: 548:                             substate = 20;
  4173   00049E  0E14               	movlw	20
  4174   0004A0  6E38               	movwf	motor_RFID@substate^0,c
  4175   0004A2  0012               	return	
  4176   0004A4                     l4635:
  4177                           
  4178                           ;TAD_RFID.c: 552:                         if (tempRegValue == 0xFF) {
  4179   0004A4  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4180   0004A6  B4D8               	btfsc	status,2,c
  4181   0004A8  D6C0               	goto	l427
  4182                           
  4183                           ;TAD_RFID.c: 555:                             UID[1] = tempRegValue;
  4184   0004AA  C02F  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4185                           
  4186                           ;TAD_RFID.c: 556:                             addr = 0x09;
  4187   0004AE  0E09               	movlw	9
  4188   0004B0  6E28               	movwf	motor_RFID@addr^0,c
  4189                           
  4190                           ;TAD_RFID.c: 557:                             operation_pending = 1;
  4191   0004B2  0E01               	movlw	1
  4192   0004B4  6E29               	movwf	motor_RFID@operation_pending^0,c
  4193                           
  4194                           ;TAD_RFID.c: 558:                             substate = 21;
  4195   0004B6  0E15               	movlw	21
  4196   0004B8  6E38               	movwf	motor_RFID@substate^0,c
  4197   0004BA  0012               	return	
  4198   0004BC                     l4641:
  4199                           
  4200                           ;TAD_RFID.c: 562:                         if (tempRegValue == 0xFF) {
  4201   0004BC  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4202   0004BE  B4D8               	btfsc	status,2,c
  4203   0004C0  D6B4               	goto	l427
  4204                           
  4205                           ;TAD_RFID.c: 565:                             UID[2] = tempRegValue;
  4206   0004C2  C02F  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4207                           
  4208                           ;TAD_RFID.c: 566:                             addr = 0x09;
  4209   0004C6  0E09               	movlw	9
  4210   0004C8  6E28               	movwf	motor_RFID@addr^0,c
  4211                           
  4212                           ;TAD_RFID.c: 567:                             operation_pending = 1;
  4213   0004CA  0E01               	movlw	1
  4214   0004CC  6E29               	movwf	motor_RFID@operation_pending^0,c
  4215                           
  4216                           ;TAD_RFID.c: 568:                             substate = 22;
  4217   0004CE  0E16               	movlw	22
  4218   0004D0  6E38               	movwf	motor_RFID@substate^0,c
  4219   0004D2  0012               	return	
  4220   0004D4                     l4647:
  4221                           
  4222                           ;TAD_RFID.c: 572:                         if (tempRegValue == 0xFF) {
  4223   0004D4  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4224   0004D6  B4D8               	btfsc	status,2,c
  4225   0004D8  D6A8               	goto	l427
  4226                           
  4227                           ;TAD_RFID.c: 575:                             UID[3] = tempRegValue;
  4228   0004DA  C02F  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4229                           
  4230                           ;TAD_RFID.c: 576:                             addr = 0x09;
  4231   0004DE  0E09               	movlw	9
  4232   0004E0  6E28               	movwf	motor_RFID@addr^0,c
  4233                           
  4234                           ;TAD_RFID.c: 577:                             operation_pending = 1;
  4235   0004E2  0E01               	movlw	1
  4236   0004E4  6E29               	movwf	motor_RFID@operation_pending^0,c
  4237                           
  4238                           ;TAD_RFID.c: 578:                             substate = 23;
  4239   0004E6  0E17               	movlw	23
  4240   0004E8  6E38               	movwf	motor_RFID@substate^0,c
  4241   0004EA  0012               	return	
  4242   0004EC                     l4653:
  4243                           
  4244                           ;TAD_RFID.c: 582:                         if (tempRegValue == 0xFF) {
  4245   0004EC  282F               	incf	motor_RFID@tempRegValue^0,w,c
  4246   0004EE  B4D8               	btfsc	status,2,c
  4247   0004F0  D69C               	goto	l427
  4248                           
  4249                           ;TAD_RFID.c: 585:                             UID[4] = tempRegValue;
  4250   0004F2  C02F  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4251                           
  4252                           ;TAD_RFID.c: 586:                             UID[5] = 0;
  4253   0004F6  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4254                           
  4255                           ;TAD_RFID.c: 587:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4256   0004F8  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4257   0004FA  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4258   0004FC  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4259   0004FE  1801               	xorwf	motor_RFID@UID^0,w,c
  4260   000500  6E31               	movwf	motor_RFID@checksum^0,c
  4261                           
  4262                           ;TAD_RFID.c: 588:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4263   000502  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4264   000504  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4265   000506  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4266   000508  1001               	iorwf	motor_RFID@UID^0,w,c
  4267   00050A  0900               	iorlw	0
  4268   00050C  A4D8               	btfss	status,2,c
  4269   00050E  D002               	goto	u4190
  4270   000510  0E01               	movlw	1
  4271   000512  D001               	goto	u4200
  4272   000514                     u4190:
  4273   000514  0E00               	movlw	0
  4274   000516                     u4200:
  4275   000516  6E30               	movwf	motor_RFID@allZero^0,c
  4276                           
  4277                           ;TAD_RFID.c: 589:                             substate = 24;
  4278   000518  0E18               	movlw	24
  4279   00051A  6E38               	movwf	motor_RFID@substate^0,c
  4280   00051C  0012               	return	
  4281   00051E                     l4661:
  4282                           
  4283                           ;TAD_RFID.c: 593:                         if (checksum != UID[4] || allZero) {
  4284   00051E  5031               	movf	motor_RFID@checksum^0,w,c
  4285   000520  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4286   000522  A4D8               	btfss	status,2,c
  4287   000524  D682               	goto	l427
  4288   000526  5030               	movf	motor_RFID@allZero^0,w,c
  4289   000528  A4D8               	btfss	status,2,c
  4290   00052A  D67F               	goto	l427
  4291                           
  4292                           ;TAD_RFID.c: 596:                             substate = 25;
  4293   00052C  0E19               	movlw	25
  4294   00052E  6E38               	movwf	motor_RFID@substate^0,c
  4295   000530  0012               	return	
  4296   000532                     l4667:
  4297                           
  4298                           ;TAD_RFID.c: 602:                         getActualUID(currentUser, 0xFF);
  4299   000532  0E44               	movlw	low motor_RFID@currentUser
  4300   000534  6E55               	movwf	getActualUID@UID^0,c
  4301   000536  0EFF               	movlw	255
  4302   000538  6E56               	movwf	getActualUID@userIndex^0,c
  4303   00053A  EC4C  F00A         	call	_getActualUID	;wreg free
  4304                           
  4305                           ;TAD_RFID.c: 603:                         if (getCurrentUserIndex() != 4) {
  4306   00053E  ECC9  F00D         	call	_getCurrentUserIndex	;wreg free
  4307   000542  0A04               	xorlw	4
  4308   000544  B4D8               	btfsc	status,2,c
  4309   000546  D003               	goto	l4673
  4310                           
  4311                           ;TAD_RFID.c: 604:                             substate = 26;
  4312   000548  0E1A               	movlw	26
  4313   00054A  6E38               	movwf	motor_RFID@substate^0,c
  4314                           
  4315                           ;TAD_RFID.c: 605:                         } else if (cardRemoved == 1) {
  4316   00054C  0012               	return	
  4317   00054E                     l4673:
  4318   00054E  042B               	decf	motor_RFID@cardRemoved^0,w,c
  4319   000550  A4D8               	btfss	status,2,c
  4320   000552  D003               	goto	l4677
  4321   000554                     u4240:
  4322                           
  4323                           ;TAD_RFID.c: 606:                             substate = 27;
  4324   000554  0E1B               	movlw	27
  4325   000556  6E38               	movwf	motor_RFID@substate^0,c
  4326                           
  4327                           ;TAD_RFID.c: 607:                         } else {
  4328   000558  0012               	return	
  4329   00055A                     l4677:
  4330                           
  4331                           ;TAD_RFID.c: 608:                             substate = 28;
  4332   00055A  0E1C               	movlw	28
  4333   00055C  6E38               	movwf	motor_RFID@substate^0,c
  4334   00055E  0012               	return	
  4335   000560                     l4679:
  4336                           
  4337                           ;TAD_RFID.c: 615:                         if(currentUser[0] == UID[0] && currentUser[1] 
      +                          == UID[1] &&
  4338   000560  5001               	movf	motor_RFID@UID^0,w,c
  4339   000562  1844               	xorwf	motor_RFID@currentUser^0,w,c
  4340   000564  A4D8               	btfss	status,2,c
  4341   000566  D7F6               	goto	u4240
  4342   000568  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4343   00056A  1845               	xorwf	(motor_RFID@currentUser+1)^0,w,c
  4344   00056C  A4D8               	btfss	status,2,c
  4345   00056E  D7F2               	goto	u4240
  4346   000570  5003               	movf	(motor_RFID@UID+2)^0,w,c
  4347   000572  1846               	xorwf	(motor_RFID@currentUser+2)^0,w,c
  4348   000574  A4D8               	btfss	status,2,c
  4349   000576  D7EE               	goto	u4240
  4350   000578  5004               	movf	(motor_RFID@UID+3)^0,w,c
  4351   00057A  1847               	xorwf	(motor_RFID@currentUser+3)^0,w,c
  4352   00057C  A4D8               	btfss	status,2,c
  4353   00057E  D7EA               	goto	u4240
  4354   000580  5005               	movf	(motor_RFID@UID+4)^0,w,c
  4355   000582  1848               	xorwf	(motor_RFID@currentUser+4)^0,w,c
  4356   000584  A4D8               	btfss	status,2,c
  4357   000586  D7E6               	goto	u4240
  4358                           
  4359                           ;TAD_RFID.c: 617:                            currentUser[4] == UID[4]) {;TAD_RFID.c: 618
      +                          :                             if (cardRemoved == 1) {
  4360   000588  042B               	decf	motor_RFID@cardRemoved^0,w,c
  4361   00058A  A4D8               	btfss	status,2,c
  4362   00058C  D7E6               	goto	l4677
  4363                           
  4364                           ;TAD_RFID.c: 619:                                 motor_StartSendString("\r\nL'usuari ha
      +                           sortit de la sala\r\n");
  4365   00058E  0EE0               	movlw	low STR_1
  4366   000590  6E59               	movwf	motor_StartSendString@str^0,c
  4367   000592  0E1E               	movlw	high STR_1
  4368   000594  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  4369   000596  EC50  F00D         	call	_motor_StartSendString	;wreg free
  4370                           
  4371                           ;TAD_RFID.c: 620:                                 setStartSendString();
  4372   00059A  ECC3  F00D         	call	_setStartSendString	;wreg free
  4373                           
  4374                           ;TAD_RFID.c: 621:                                 setIndex(4);
  4375   00059E  0E04               	movlw	4
  4376   0005A0  ECB8  F00D         	call	_setIndex
  4377   0005A4                     l4697:
  4378                           
  4379                           ;TAD_RFID.c: 622:                                 substate = 28;
  4380   0005A4  0E1C               	movlw	28
  4381   0005A6  6E38               	movwf	motor_RFID@substate^0,c
  4382                           
  4383                           ;TAD_RFID.c: 623:                                 cardRemoved = 0;
  4384   0005A8  6A2B               	clrf	motor_RFID@cardRemoved^0,c
  4385                           
  4386                           ;TAD_RFID.c: 624:                             } else {
  4387   0005AA  0012               	return	
  4388   0005AC                     l4705:
  4389                           
  4390                           ;TAD_RFID.c: 636:                         if(motor_setCurrentUser(UID[0], UID[1], UID[2]
      +                          , UID[3], UID[4]) == 1) {
  4391   0005AC  C002  F06B         	movff	motor_RFID@UID+1,motor_setCurrentUser@UID1
  4392   0005B0  C003  F06C         	movff	motor_RFID@UID+2,motor_setCurrentUser@UID2
  4393   0005B4  C004  F06D         	movff	motor_RFID@UID+3,motor_setCurrentUser@UID3
  4394   0005B8  C005  F06E         	movff	motor_RFID@UID+4,motor_setCurrentUser@UID4
  4395   0005BC  5001               	movf	motor_RFID@UID^0,w,c
  4396   0005BE  ECD8  F005         	call	_motor_setCurrentUser
  4397   0005C2  06E8               	decf	wreg,f,c
  4398   0005C4  A4D8               	btfss	status,2,c
  4399   0005C6  0012               	return	
  4400   0005C8  D7ED               	goto	l4697
  4401   0005CA                     l4711:
  4402                           
  4403                           ;TAD_RFID.c: 644:                         addr = 0x0D;
  4404   0005CA  0E0D               	movlw	13
  4405   0005CC  6E28               	movwf	motor_RFID@addr^0,c
  4406                           
  4407                           ;TAD_RFID.c: 645:                         value = 0x00;
  4408   0005CE  6A27               	clrf	motor_RFID@value^0,c
  4409                           
  4410                           ;TAD_RFID.c: 646:                         operation_pending = 2;
  4411   0005D0  0E02               	movlw	2
  4412   0005D2  6E29               	movwf	motor_RFID@operation_pending^0,c
  4413   0005D4  D62A               	goto	l427
  4414   0005D6                     l4719:
  4415   0005D6  5038               	movf	motor_RFID@substate^0,w,c
  4416                           
  4417                           ; Switch size 1, requested type "simple"
  4418                           ; Number of cases is 29, Range of values is 0 to 28
  4419                           ; switch strategies available:
  4420                           ; Name         Instructions Cycles
  4421                           ; simple_byte           88    45 (average)
  4422                           ;	Chosen strategy is simple_byte
  4423   0005D8  0A00               	xorlw	0	; case 0
  4424   0005DA  B4D8               	btfsc	status,2,c
  4425   0005DC  D69C               	goto	l4509
  4426   0005DE  0A01               	xorlw	1	; case 1
  4427   0005E0  B4D8               	btfsc	status,2,c
  4428   0005E2  D6A1               	goto	l4513
  4429   0005E4  0A03               	xorlw	3	; case 2
  4430   0005E6  B4D8               	btfsc	status,2,c
  4431   0005E8  D6A9               	goto	l4515
  4432   0005EA  0A01               	xorlw	1	; case 3
  4433   0005EC  B4D8               	btfsc	status,2,c
  4434   0005EE  D6B3               	goto	l4527
  4435   0005F0  0A07               	xorlw	7	; case 4
  4436   0005F2  B4D8               	btfsc	status,2,c
  4437   0005F4  D6B9               	goto	l4535
  4438   0005F6  0A01               	xorlw	1	; case 5
  4439   0005F8  B4D8               	btfsc	status,2,c
  4440   0005FA  D6BD               	goto	l4537
  4441   0005FC  0A03               	xorlw	3	; case 6
  4442   0005FE  B4D8               	btfsc	status,2,c
  4443   000600  D6C2               	goto	l4549
  4444   000602  0A01               	xorlw	1	; case 7
  4445   000604  B4D8               	btfsc	status,2,c
  4446   000606  D6C6               	goto	l4551
  4447   000608  0A0F               	xorlw	15	; case 8
  4448   00060A  B4D8               	btfsc	status,2,c
  4449   00060C  D6D0               	goto	l4563
  4450   00060E  0A01               	xorlw	1	; case 9
  4451   000610  B4D8               	btfsc	status,2,c
  4452   000612  D6D5               	goto	l4567
  4453   000614  0A03               	xorlw	3	; case 10
  4454   000616  B4D8               	btfsc	status,2,c
  4455   000618  D6DB               	goto	l4571
  4456   00061A  0A01               	xorlw	1	; case 11
  4457   00061C  B4D8               	btfsc	status,2,c
  4458   00061E  D6E1               	goto	l4575
  4459   000620  0A07               	xorlw	7	; case 12
  4460   000622  B4D8               	btfsc	status,2,c
  4461   000624  D5C7               	goto	l4449
  4462   000626  0A01               	xorlw	1	; case 13
  4463   000628  B4D8               	btfsc	status,2,c
  4464   00062A  D6E4               	goto	l4579
  4465   00062C  0A03               	xorlw	3	; case 14
  4466   00062E  B4D8               	btfsc	status,2,c
  4467   000630  D6E9               	goto	l467
  4468   000632  0A01               	xorlw	1	; case 15
  4469   000634  B4D8               	btfsc	status,2,c
  4470   000636  D6EE               	goto	l4593
  4471   000638  0A1F               	xorlw	31	; case 16
  4472   00063A  B4D8               	btfsc	status,2,c
  4473   00063C  D700               	goto	l4605
  4474   00063E  0A01               	xorlw	1	; case 17
  4475   000640  B4D8               	btfsc	status,2,c
  4476   000642  D70A               	goto	l4617
  4477   000644  0A03               	xorlw	3	; case 18
  4478   000646  B4D8               	btfsc	status,2,c
  4479   000648  D70E               	goto	l4619
  4480   00064A  0A01               	xorlw	1	; case 19
  4481   00064C  B4D8               	btfsc	status,2,c
  4482   00064E  D71E               	goto	l4629
  4483   000650  0A07               	xorlw	7	; case 20
  4484   000652  B4D8               	btfsc	status,2,c
  4485   000654  D727               	goto	l4635
  4486   000656  0A01               	xorlw	1	; case 21
  4487   000658  B4D8               	btfsc	status,2,c
  4488   00065A  D730               	goto	l4641
  4489   00065C  0A03               	xorlw	3	; case 22
  4490   00065E  B4D8               	btfsc	status,2,c
  4491   000660  D739               	goto	l4647
  4492   000662  0A01               	xorlw	1	; case 23
  4493   000664  B4D8               	btfsc	status,2,c
  4494   000666  D742               	goto	l4653
  4495   000668  0A0F               	xorlw	15	; case 24
  4496   00066A  B4D8               	btfsc	status,2,c
  4497   00066C  D758               	goto	l4661
  4498   00066E  0A01               	xorlw	1	; case 25
  4499   000670  B4D8               	btfsc	status,2,c
  4500   000672  D75F               	goto	l4667
  4501   000674  0A03               	xorlw	3	; case 26
  4502   000676  B4D8               	btfsc	status,2,c
  4503   000678  D773               	goto	l4679
  4504   00067A  0A01               	xorlw	1	; case 27
  4505   00067C  B4D8               	btfsc	status,2,c
  4506   00067E  D796               	goto	l4705
  4507   000680  0A07               	xorlw	7	; case 28
  4508   000682  A4D8               	btfss	status,2,c
  4509   000684  0012               	return	
  4510   000686  D7A1               	goto	l4711
  4511   000688                     l4723:
  4512   000688  5039               	movf	motor_RFID@state^0,w,c
  4513                           
  4514                           ; Switch size 1, requested type "simple"
  4515                           ; Number of cases is 2, Range of values is 0 to 1
  4516                           ; switch strategies available:
  4517                           ; Name         Instructions Cycles
  4518                           ; simple_byte            7     4 (average)
  4519                           ;	Chosen strategy is simple_byte
  4520   00068A  0A00               	xorlw	0	; case 0
  4521   00068C  B4D8               	btfsc	status,2,c
  4522   00068E  D60B               	goto	l4507
  4523   000690  0A01               	xorlw	1	; case 1
  4524   000692  A4D8               	btfss	status,2,c
  4525   000694  0012               	return	
  4526   000696  D79F               	goto	l4719
  4527   000698                     __end_of_motor_RFID:
  4528                           	callstack 0
  4529                           
  4530 ;; *************** function _setIndex *****************
  4531 ;; Defined at:
  4532 ;;		line 90 in file "TAD_DATOS.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  indexActual     1    wreg     unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  indexActual     1    1[COMRAM] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1
  4546 ;;      Params:         0       0       0
  4547 ;;      Locals:         1       0       0
  4548 ;;      Temps:          0       0       0
  4549 ;;      Totals:         1       0       0
  4550 ;;Total ram usage:        1 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; Hardware stack levels required when called: 3
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_motor_RFID
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text6
  4561   001B70                     __ptext6:
  4562                           	callstack 0
  4563   001B70                     _setIndex:
  4564                           	callstack 26
  4565                           
  4566                           ;incstack = 0
  4567                           ;setIndex@indexActual stored from wreg
  4568   001B70  6E55               	movwf	setIndex@indexActual^0,c
  4569                           
  4570                           ;TAD_DATOS.c: 91:     index = indexActual;
  4571   001B72  C055  F07B         	movff	setIndex@indexActual,_index
  4572   001B76  0012               	return		;funcret
  4573   001B78                     __end_of_setIndex:
  4574                           	callstack 0
  4575                           
  4576 ;; *************** function _motor_setCurrentUser *****************
  4577 ;; Defined at:
  4578 ;;		line 95 in file "TAD_DATOS.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  UID0            1    wreg     unsigned char 
  4581 ;;  UID1            1   23[COMRAM] unsigned char 
  4582 ;;  UID2            1   24[COMRAM] unsigned char 
  4583 ;;  UID3            1   25[COMRAM] unsigned char 
  4584 ;;  UID4            1   26[COMRAM] unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  UID0            1   27[COMRAM] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      unsigned char 
  4589 ;; Registers used:
  4590 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1
  4596 ;;      Params:         4       0       0
  4597 ;;      Locals:         1       0       0
  4598 ;;      Temps:          0       0       0
  4599 ;;      Totals:         5       0       0
  4600 ;;Total ram usage:        5 bytes
  4601 ;; Hardware stack levels used: 1
  4602 ;; Hardware stack levels required when called: 8
  4603 ;; This function calls:
  4604 ;;		_printfUID
  4605 ;; This function is called by:
  4606 ;;		_motor_RFID
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text7
  4611   000BB0                     __ptext7:
  4612                           	callstack 0
  4613   000BB0                     _motor_setCurrentUser:
  4614                           	callstack 21
  4615                           
  4616                           ;incstack = 0
  4617                           ;motor_setCurrentUser@UID0 stored from wreg
  4618   000BB0  6E6F               	movwf	motor_setCurrentUser@UID0^0,c
  4619                           
  4620                           ;TAD_DATOS.c: 96:     static char state_setCurrentUser = 0;;TAD_DATOS.c: 98:     switch(
      +                          state_setCurrentUser) {
  4621   000BB2  D081               	goto	l3897
  4622   000BB4                     l3811:
  4623                           
  4624                           ;TAD_DATOS.c: 100:             currentUser[0] = UID0;
  4625   000BB4  C06F  F03F         	movff	motor_setCurrentUser@UID0,_currentUser
  4626                           
  4627                           ;TAD_DATOS.c: 101:             currentUser[1] = UID1;
  4628   000BB8  C06B  F040         	movff	motor_setCurrentUser@UID1,_currentUser+1
  4629                           
  4630                           ;TAD_DATOS.c: 102:             currentUser[2] = UID2;
  4631   000BBC  C06C  F041         	movff	motor_setCurrentUser@UID2,_currentUser+2
  4632                           
  4633                           ;TAD_DATOS.c: 103:             currentUser[3] = UID3;
  4634   000BC0  C06D  F042         	movff	motor_setCurrentUser@UID3,_currentUser+3
  4635                           
  4636                           ;TAD_DATOS.c: 104:             currentUser[4] = UID4;
  4637   000BC4  C06E  F043         	movff	motor_setCurrentUser@UID4,_currentUser+4
  4638                           
  4639                           ;TAD_DATOS.c: 105:             new_user = 1;
  4640   000BC8  0E01               	movlw	1
  4641   000BCA  6E1B               	movwf	_new_user^0,c
  4642                           
  4643                           ;TAD_DATOS.c: 106:             state_setCurrentUser = 1;
  4644   000BCC  0E01               	movlw	1
  4645   000BCE  D02F               	goto	L10
  4646   000BD0                     l3825:
  4647                           
  4648                           ;TAD_DATOS.c: 110:             if (UID0 == 0x65 && UID1 == 0xDC && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x43) {
  4649   000BD0  0E65               	movlw	101
  4650   000BD2  186F               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4651   000BD4  A4D8               	btfss	status,2,c
  4652   000BD6  D013               	goto	l3839
  4653   000BD8  0EDC               	movlw	220
  4654   000BDA  186B               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4655   000BDC  A4D8               	btfss	status,2,c
  4656   000BDE  D00F               	goto	l3839
  4657   000BE0  0EF9               	movlw	249
  4658   000BE2  186C               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4659   000BE4  A4D8               	btfss	status,2,c
  4660   000BE6  D00B               	goto	l3839
  4661   000BE8  0E03               	movlw	3
  4662   000BEA  186D               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4663   000BEC  A4D8               	btfss	status,2,c
  4664   000BEE  D007               	goto	l3839
  4665   000BF0  0E43               	movlw	67
  4666   000BF2  186E               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4667   000BF4  A4D8               	btfss	status,2,c
  4668   000BF6  D003               	goto	l3839
  4669                           
  4670                           ;TAD_DATOS.c: 111:                 index = 0;
  4671   000BF8  6A7B               	clrf	_index^0,c
  4672   000BFA                     l3837:
  4673                           
  4674                           ;TAD_DATOS.c: 112:                 state_setCurrentUser = 6;
  4675   000BFA  0E06               	movlw	6
  4676   000BFC  D018               	goto	L10
  4677   000BFE                     l3839:
  4678                           
  4679                           ;TAD_DATOS.c: 115:             state_setCurrentUser = 2;
  4680   000BFE  0E02               	movlw	2
  4681   000C00  D016               	goto	L10
  4682   000C02                     l3841:
  4683                           
  4684                           ;TAD_DATOS.c: 118:             if (UID0 == 0xDC && UID1 == 0x0D && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x2B) {
  4685   000C02  0EDC               	movlw	220
  4686   000C04  186F               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4687   000C06  A4D8               	btfss	status,2,c
  4688   000C08  D014               	goto	l3853
  4689   000C0A  0E0D               	movlw	13
  4690   000C0C  186B               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4691   000C0E  A4D8               	btfss	status,2,c
  4692   000C10  D010               	goto	l3853
  4693   000C12  0EF9               	movlw	249
  4694   000C14  186C               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4695   000C16  A4D8               	btfss	status,2,c
  4696   000C18  D00C               	goto	l3853
  4697   000C1A  0E03               	movlw	3
  4698   000C1C  186D               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4699   000C1E  A4D8               	btfss	status,2,c
  4700   000C20  D008               	goto	l3853
  4701   000C22  0E2B               	movlw	43
  4702   000C24  186E               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4703   000C26  A4D8               	btfss	status,2,c
  4704   000C28  D004               	goto	l3853
  4705                           
  4706                           ;TAD_DATOS.c: 119:                 index = 1;
  4707   000C2A  0E01               	movlw	1
  4708   000C2C  D035               	goto	L13
  4709   000C2E                     L10:
  4710   000C2E  6E1A               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4711                           
  4712                           ;TAD_DATOS.c: 121:                 break;
  4713   000C30  D058               	goto	l3899
  4714   000C32                     l3853:
  4715                           
  4716                           ;TAD_DATOS.c: 123:             state_setCurrentUser = 3;
  4717   000C32  0E03               	movlw	3
  4718   000C34  6E1A               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4719   000C36                     l3855:
  4720                           
  4721                           ;TAD_DATOS.c: 125:             if (UID0 == 0xDF && UID1 == 0x8B && UID2 == 0xDF && UID3 
      +                          == 0xC4 && UID4 == 0x4F) {
  4722   000C36  0EDF               	movlw	223
  4723   000C38  186F               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4724   000C3A  A4D8               	btfss	status,2,c
  4725   000C3C  D012               	goto	l3867
  4726   000C3E  0E8B               	movlw	139
  4727   000C40  186B               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4728   000C42  A4D8               	btfss	status,2,c
  4729   000C44  D00E               	goto	l3867
  4730   000C46  0EDF               	movlw	223
  4731   000C48  186C               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4732   000C4A  A4D8               	btfss	status,2,c
  4733   000C4C  D00A               	goto	l3867
  4734   000C4E  0EC4               	movlw	196
  4735   000C50  186D               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4736   000C52  A4D8               	btfss	status,2,c
  4737   000C54  D006               	goto	l3867
  4738   000C56  0E4F               	movlw	79
  4739   000C58  186E               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4740   000C5A  A4D8               	btfss	status,2,c
  4741   000C5C  D002               	goto	l3867
  4742                           
  4743                           ;TAD_DATOS.c: 126:                 index = 2;
  4744   000C5E  0E02               	movlw	2
  4745   000C60  D01B               	goto	L13
  4746   000C62                     l3867:
  4747                           
  4748                           ;TAD_DATOS.c: 130:             state_setCurrentUser = 4;
  4749   000C62  0E04               	movlw	4
  4750   000C64  D7E4               	goto	L10
  4751   000C66                     l3869:
  4752                           
  4753                           ;TAD_DATOS.c: 133:             if (UID0 == 0x21 && UID1 == 0x32 && UID2 == 0xA9 && UID3 
      +                          == 0x89 && UID4 == 0x33) {
  4754   000C66  0E21               	movlw	33
  4755   000C68  186F               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4756   000C6A  A4D8               	btfss	status,2,c
  4757   000C6C  D012               	goto	l3881
  4758   000C6E  0E32               	movlw	50
  4759   000C70  186B               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4760   000C72  A4D8               	btfss	status,2,c
  4761   000C74  D00E               	goto	l3881
  4762   000C76  0EA9               	movlw	169
  4763   000C78  186C               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4764   000C7A  A4D8               	btfss	status,2,c
  4765   000C7C  D00A               	goto	l3881
  4766   000C7E  0E89               	movlw	137
  4767   000C80  186D               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4768   000C82  A4D8               	btfss	status,2,c
  4769   000C84  D006               	goto	l3881
  4770   000C86  0E33               	movlw	51
  4771   000C88  186E               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4772   000C8A  A4D8               	btfss	status,2,c
  4773   000C8C  D002               	goto	l3881
  4774                           
  4775                           ;TAD_DATOS.c: 134:                 index = 3;
  4776   000C8E  0E03               	movlw	3
  4777   000C90  D003               	goto	L13
  4778   000C92                     l3881:
  4779                           
  4780                           ;TAD_DATOS.c: 138:             state_setCurrentUser = 5;
  4781   000C92  0E05               	movlw	5
  4782   000C94  D7CC               	goto	L10
  4783   000C96                     l3883:
  4784                           
  4785                           ;TAD_DATOS.c: 141:             index = 4;
  4786   000C96  0E04               	movlw	4
  4787   000C98                     L13:
  4788   000C98  6E7B               	movwf	_index^0,c
  4789   000C9A  D7AF               	goto	l3837
  4790   000C9C                     l3885:
  4791                           
  4792                           ;TAD_DATOS.c: 145:             printfUID(currentUser, index, "\r\nTargeta detectada!");
  4793   000C9C  0E3F               	movlw	low _currentUser
  4794   000C9E  6E5B               	movwf	printfUID@currentUser^0,c
  4795   000CA0  C07B  F05C         	movff	_index,printfUID@userIndex
  4796   000CA4  0EBE               	movlw	low STR_17
  4797   000CA6  6E5D               	movwf	printfUID@extraString^0,c
  4798   000CA8  0E1F               	movlw	high STR_17
  4799   000CAA  6E5E               	movwf	(printfUID@extraString+1)^0,c
  4800   000CAC  EC4C  F003         	call	_printfUID	;wreg free
  4801                           
  4802                           ;TAD_DATOS.c: 146:             state_setCurrentUser = 0;
  4803   000CB0  6A1A               	clrf	motor_setCurrentUser@state_setCurrentUser^0,c
  4804                           
  4805                           ;TAD_DATOS.c: 147:             return 1;
  4806   000CB2  0E01               	movlw	1
  4807   000CB4  0012               	return	
  4808   000CB6                     l3897:
  4809   000CB6  501A               	movf	motor_setCurrentUser@state_setCurrentUser^0,w,c
  4810                           
  4811                           ; Switch size 1, requested type "simple"
  4812                           ; Number of cases is 7, Range of values is 0 to 6
  4813                           ; switch strategies available:
  4814                           ; Name         Instructions Cycles
  4815                           ; simple_byte           22    12 (average)
  4816                           ;	Chosen strategy is simple_byte
  4817   000CB8  0A00               	xorlw	0	; case 0
  4818   000CBA  B4D8               	btfsc	status,2,c
  4819   000CBC  D77B               	goto	l3811
  4820   000CBE  0A01               	xorlw	1	; case 1
  4821   000CC0  B4D8               	btfsc	status,2,c
  4822   000CC2  D786               	goto	l3825
  4823   000CC4  0A03               	xorlw	3	; case 2
  4824   000CC6  B4D8               	btfsc	status,2,c
  4825   000CC8  D79C               	goto	l3841
  4826   000CCA  0A01               	xorlw	1	; case 3
  4827   000CCC  B4D8               	btfsc	status,2,c
  4828   000CCE  D7B3               	goto	l3855
  4829   000CD0  0A07               	xorlw	7	; case 4
  4830   000CD2  B4D8               	btfsc	status,2,c
  4831   000CD4  D7C8               	goto	l3869
  4832   000CD6  0A01               	xorlw	1	; case 5
  4833   000CD8  B4D8               	btfsc	status,2,c
  4834   000CDA  D7DD               	goto	l3883
  4835   000CDC  0A03               	xorlw	3	; case 6
  4836   000CDE  B4D8               	btfsc	status,2,c
  4837   000CE0  D7DD               	goto	l3885
  4838   000CE2                     l3899:
  4839                           
  4840                           ;TAD_DATOS.c: 150:     return 0;
  4841   000CE2  0E00               	movlw	0
  4842   000CE4  0012               	return		;funcret
  4843   000CE6                     __end_of_motor_setCurrentUser:
  4844                           	callstack 0
  4845                           
  4846 ;; *************** function _motor_LEDs *****************
  4847 ;; Defined at:
  4848 ;;		line 37 in file "TAD_LEDS.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  i               1   23[COMRAM] unsigned char 
  4853 ;;  currentTics     4   19[COMRAM] unsigned long 
  4854 ;;  i               1   24[COMRAM] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1
  4864 ;;      Params:         0       0       0
  4865 ;;      Locals:         6       0       0
  4866 ;;      Temps:          5       0       0
  4867 ;;      Totals:        11       0       0
  4868 ;;Total ram usage:       11 bytes
  4869 ;; Hardware stack levels used: 1
  4870 ;; Hardware stack levels required when called: 4
  4871 ;; This function calls:
  4872 ;;		_TI_GetTics
  4873 ;;		_TI_ResetTics
  4874 ;;		_controlLED
  4875 ;;		_getActualLeds
  4876 ;; This function is called by:
  4877 ;;		_main
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text8
  4882   000EEC                     __ptext8:
  4883                           	callstack 0
  4884   000EEC                     _motor_LEDs:
  4885                           	callstack 26
  4886                           
  4887                           ;TAD_LEDS.c: 39:     getActualLeds(ActualLeds, 20);
  4888                           
  4889                           ;incstack = 0
  4890   000EEC  0EB8               	movlw	low _ActualLeds
  4891   000EEE  6E55               	movwf	getActualLeds@leds^0,c
  4892   000EF0  0E14               	movlw	20
  4893   000EF2  6E56               	movwf	getActualLeds@userIndex^0,c
  4894   000EF4  EC7B  F00B         	call	_getActualLeds	;wreg free
  4895                           
  4896                           ;TAD_LEDS.c: 42:     static unsigned long lastTics = 0;;TAD_LEDS.c: 43:     unsigned lon
      +                          g currentTics = TI_GetTics(timer);
  4897   000EF8  5052               	movf	_timer^0,w,c
  4898   000EFA  ECF9  F00B         	call	_TI_GetTics
  4899   000EFE  C055  F067         	movff	?_TI_GetTics,motor_LEDs@currentTics
  4900   000F02  C056  F068         	movff	?_TI_GetTics+1,motor_LEDs@currentTics+1
  4901   000F06  C057  F069         	movff	?_TI_GetTics+2,motor_LEDs@currentTics+2
  4902   000F0A  C058  F06A         	movff	?_TI_GetTics+3,motor_LEDs@currentTics+3
  4903                           
  4904                           ;TAD_LEDS.c: 46:     if (currentTics == lastTics) return;
  4905   000F0E  500B               	movf	motor_LEDs@lastTics^0,w,c
  4906   000F10  1867               	xorwf	motor_LEDs@currentTics^0,w,c
  4907   000F12  E10A               	bnz	l212
  4908   000F14  500C               	movf	(motor_LEDs@lastTics+1)^0,w,c
  4909   000F16  1868               	xorwf	(motor_LEDs@currentTics+1)^0,w,c
  4910   000F18  E107               	bnz	l212
  4911   000F1A  500D               	movf	(motor_LEDs@lastTics+2)^0,w,c
  4912   000F1C  1869               	xorwf	(motor_LEDs@currentTics+2)^0,w,c
  4913   000F1E  E104               	bnz	l212
  4914   000F20  500E               	movf	(motor_LEDs@lastTics+3)^0,w,c
  4915   000F22  186A               	xorwf	(motor_LEDs@currentTics+3)^0,w,c
  4916   000F24  B4D8               	btfsc	status,2,c
  4917   000F26  0012               	return	
  4918   000F28                     l212:
  4919                           
  4920                           ;TAD_LEDS.c: 47:     lastTics = currentTics;
  4921   000F28  C067  F00B         	movff	motor_LEDs@currentTics,motor_LEDs@lastTics
  4922   000F2C  C068  F00C         	movff	motor_LEDs@currentTics+1,motor_LEDs@lastTics+1
  4923   000F30  C069  F00D         	movff	motor_LEDs@currentTics+2,motor_LEDs@lastTics+2
  4924   000F34  C06A  F00E         	movff	motor_LEDs@currentTics+3,motor_LEDs@lastTics+3
  4925                           
  4926                           ;TAD_LEDS.c: 50:     if (currentTics >= 10) {
  4927   000F38  506A               	movf	(motor_LEDs@currentTics+3)^0,w,c
  4928   000F3A  1069               	iorwf	(motor_LEDs@currentTics+2)^0,w,c
  4929   000F3C  1068               	iorwf	(motor_LEDs@currentTics+1)^0,w,c
  4930   000F3E  E104               	bnz	u4330
  4931   000F40  0E0A               	movlw	10
  4932   000F42  5C67               	subwf	motor_LEDs@currentTics^0,w,c
  4933   000F44  A0D8               	btfss	status,0,c
  4934   000F46  D015               	goto	l214
  4935   000F48                     u4330:
  4936                           
  4937                           ;TAD_LEDS.c: 51:         TI_ResetTics(timer);
  4938   000F48  5052               	movf	_timer^0,w,c
  4939   000F4A  EC14  F00D         	call	_TI_ResetTics
  4940                           
  4941                           ;TAD_LEDS.c: 53:         char i;;TAD_LEDS.c: 54:         for (i = 0; i < 6; i++) {
  4942   000F4E  6A6B               	clrf	motor_LEDs@i^0,c
  4943   000F50                     l4743:
  4944                           
  4945                           ;TAD_LEDS.c: 55:             if (ActualLeds[i] > 0) {
  4946   000F50  506B               	movf	motor_LEDs@i^0,w,c
  4947   000F52  0FB8               	addlw	low _ActualLeds
  4948   000F54  6ED9               	movwf	fsr2l,c
  4949   000F56  6ADA               	clrf	fsr2h,c
  4950   000F58  50DF               	movf	indf2,w,c
  4951   000F5A  B4D8               	btfsc	status,2,c
  4952   000F5C  D005               	goto	l4747
  4953                           
  4954                           ;TAD_LEDS.c: 56:                 controlLED(i, 1);
  4955   000F5E  0E01               	movlw	1
  4956   000F60  6E55               	movwf	controlLED@estado^0,c
  4957   000F62  506B               	movf	motor_LEDs@i^0,w,c
  4958   000F64  ECD2  F00B         	call	_controlLED
  4959   000F68                     l4747:
  4960                           
  4961                           ;TAD_LEDS.c: 58:         }
  4962   000F68  2A6B               	incf	motor_LEDs@i^0,f,c
  4963   000F6A  0E05               	movlw	5
  4964   000F6C  646B               	cpfsgt	motor_LEDs@i^0,c
  4965   000F6E  D7F0               	goto	l4743
  4966   000F70  0012               	return	
  4967   000F72                     l214:
  4968                           
  4969                           ;TAD_LEDS.c: 63:     char i;;TAD_LEDS.c: 64:     for (i = 0; i < 6; i++) {
  4970   000F72  6A6C               	clrf	motor_LEDs@i_461^0,c
  4971   000F74                     l4755:
  4972                           
  4973                           ;TAD_LEDS.c: 65:         if (ActualLeds[i] < 0xA && currentTics >= ActualLeds[i])
  4974   000F74  506C               	movf	motor_LEDs@i_461^0,w,c
  4975   000F76  0FB8               	addlw	low _ActualLeds
  4976   000F78  6ED9               	movwf	fsr2l,c
  4977   000F7A  6ADA               	clrf	fsr2h,c
  4978   000F7C  0E0A               	movlw	10
  4979   000F7E  60DF               	cpfslt	indf2,c
  4980   000F80  D01A               	goto	l4761
  4981   000F82  506C               	movf	motor_LEDs@i_461^0,w,c
  4982   000F84  0FB8               	addlw	low _ActualLeds
  4983   000F86  6ED9               	movwf	fsr2l,c
  4984   000F88  6ADA               	clrf	fsr2h,c
  4985   000F8A  50DF               	movf	indf2,w,c
  4986   000F8C  6E62               	movwf	??_motor_LEDs^0,c
  4987   000F8E  C062  F063         	movff	??_motor_LEDs,??_motor_LEDs+1
  4988   000F92  6A64               	clrf	(??_motor_LEDs+2)^0,c
  4989   000F94  6A65               	clrf	(??_motor_LEDs+3)^0,c
  4990   000F96  6A66               	clrf	(??_motor_LEDs+4)^0,c
  4991   000F98  5063               	movf	(??_motor_LEDs+1)^0,w,c
  4992   000F9A  5C67               	subwf	motor_LEDs@currentTics^0,w,c
  4993   000F9C  5064               	movf	(??_motor_LEDs+2)^0,w,c
  4994   000F9E  5868               	subwfb	(motor_LEDs@currentTics+1)^0,w,c
  4995   000FA0  5065               	movf	(??_motor_LEDs+3)^0,w,c
  4996   000FA2  5869               	subwfb	(motor_LEDs@currentTics+2)^0,w,c
  4997   000FA4  5066               	movf	(??_motor_LEDs+4)^0,w,c
  4998   000FA6  586A               	subwfb	(motor_LEDs@currentTics+3)^0,w,c
  4999   000FA8  A0D8               	btfss	status,0,c
  5000   000FAA  D005               	goto	l4761
  5001                           
  5002                           ;TAD_LEDS.c: 66:             controlLED(i, 0);
  5003   000FAC  0E00               	movlw	0
  5004   000FAE  6E55               	movwf	controlLED@estado^0,c
  5005   000FB0  506C               	movf	motor_LEDs@i_461^0,w,c
  5006   000FB2  ECD2  F00B         	call	_controlLED
  5007   000FB6                     l4761:
  5008                           
  5009                           ;TAD_LEDS.c: 67:     }
  5010   000FB6  2A6C               	incf	motor_LEDs@i_461^0,f,c
  5011   000FB8  0E05               	movlw	5
  5012   000FBA  646C               	cpfsgt	motor_LEDs@i_461^0,c
  5013   000FBC  D7DB               	goto	l4755
  5014   000FBE  0012               	return	
  5015   000FC0                     __end_of_motor_LEDs:
  5016                           	callstack 0
  5017                           
  5018 ;; *************** function _controlLED *****************
  5019 ;; Defined at:
  5020 ;;		line 16 in file "TAD_LEDS.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;  ledActual       1    wreg     unsigned char 
  5023 ;;  estado          1    1[COMRAM] unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  ledActual       1    4[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1
  5035 ;;      Params:         1       0       0
  5036 ;;      Locals:         3       0       0
  5037 ;;      Temps:          0       0       0
  5038 ;;      Totals:         4       0       0
  5039 ;;Total ram usage:        4 bytes
  5040 ;; Hardware stack levels used: 1
  5041 ;; Hardware stack levels required when called: 3
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_motor_LEDs
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text9
  5050   0017A4                     __ptext9:
  5051                           	callstack 0
  5052   0017A4                     _controlLED:
  5053                           	callstack 26
  5054                           
  5055                           ;incstack = 0
  5056                           ;controlLED@ledActual stored from wreg
  5057   0017A4  6E58               	movwf	controlLED@ledActual^0,c
  5058                           
  5059                           ;TAD_LEDS.c: 18:     static unsigned char ledBits[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x2
      +                          0};;TAD_LEDS.c: 20:     if (ledActual < 6) {
  5060   0017A6  0E06               	movlw	6
  5061   0017A8  6058               	cpfslt	controlLED@ledActual^0,c
  5062   0017AA  D012               	goto	l3653
  5063                           
  5064                           ;TAD_LEDS.c: 22:         if (estado)
  5065   0017AC  5055               	movf	controlLED@estado^0,w,c
  5066   0017AE  B4D8               	btfsc	status,2,c
  5067   0017B0  D007               	goto	l3651
  5068                           
  5069                           ;TAD_LEDS.c: 23:             LATA |= ledBits[ledActual];
  5070   0017B2  5058               	movf	controlLED@ledActual^0,w,c
  5071   0017B4  0FD7               	addlw	low controlLED@ledBits
  5072   0017B6  6ED9               	movwf	fsr2l,c
  5073   0017B8  6ADA               	clrf	fsr2h,c
  5074   0017BA  50DF               	movf	indf2,w,c
  5075   0017BC  1289               	iorwf	137,f,c	;volatile
  5076   0017BE  0012               	return	
  5077   0017C0                     l3651:
  5078                           
  5079                           ;TAD_LEDS.c: 25:             LATA &= ~ledBits[ledActual];
  5080   0017C0  5058               	movf	controlLED@ledActual^0,w,c
  5081   0017C2  0FD7               	addlw	low controlLED@ledBits
  5082   0017C4  6ED9               	movwf	fsr2l,c
  5083   0017C6  6ADA               	clrf	fsr2h,c
  5084   0017C8  50DF               	movf	indf2,w,c
  5085   0017CA  0AFF               	xorlw	255
  5086   0017CC  1689               	andwf	137,f,c	;volatile
  5087   0017CE  0012               	return	
  5088   0017D0                     l3653:
  5089   0017D0  2858               	incf	controlLED@ledActual^0,w,c
  5090   0017D2  A4D8               	btfss	status,2,c
  5091   0017D4  0012               	return	
  5092                           
  5093                           ;TAD_LEDS.c: 29:         LATA = estado ? 0x3F : 0x00;
  5094   0017D6  5055               	movf	controlLED@estado^0,w,c
  5095   0017D8  A4D8               	btfss	status,2,c
  5096   0017DA  D004               	goto	l3659
  5097   0017DC  0E00               	movlw	0
  5098   0017DE  6E57               	movwf	(_controlLED$455+1)^0,c
  5099   0017E0  0E00               	movlw	0
  5100   0017E2  D003               	goto	L14
  5101   0017E4                     l3659:
  5102   0017E4  0E00               	movlw	0
  5103   0017E6  6E57               	movwf	(_controlLED$455+1)^0,c
  5104   0017E8  0E3F               	movlw	63
  5105   0017EA                     L14:
  5106   0017EA  6E56               	movwf	_controlLED$455^0,c
  5107   0017EC  C056  FF89         	movff	_controlLED$455,3977	;volatile
  5108   0017F0  0012               	return		;funcret
  5109   0017F2                     __end_of_controlLED:
  5110                           	callstack 0
  5111                           
  5112 ;; *************** function _motorTerminal *****************
  5113 ;; Defined at:
  5114 ;;		line 144 in file "TAD_TERMINAL.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  currentUserI    1   24[COMRAM] unsigned char 
  5119 ;;  opcion          1   23[COMRAM] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1
  5129 ;;      Params:         0       0       0
  5130 ;;      Locals:         2       0       0
  5131 ;;      Temps:          0       0       0
  5132 ;;      Totals:         2       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used: 1
  5135 ;; Hardware stack levels required when called: 8
  5136 ;; This function calls:
  5137 ;;		_Terminal_RXAvailable
  5138 ;;		_Terminal_ReceiveChar
  5139 ;;		_Terminal_SendChar
  5140 ;;		_getActualUID
  5141 ;;		_getCurrentUserIndex
  5142 ;;		_motor_SendString
  5143 ;;		_motor_StartSendString
  5144 ;;		_printfUID
  5145 ;;		_saveHourToData
  5146 ;; This function is called by:
  5147 ;;		_main
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text10
  5152   000986                     __ptext10:
  5153                           	callstack 0
  5154   000986                     _motorTerminal:
  5155                           	callstack 22
  5156                           
  5157                           ;TAD_TERMINAL.c: 145:  static char state = 0;;TAD_TERMINAL.c: 146:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 147:  static char index = 0;;TAD_TERMINAL.c: 148:  st
      +                          atic unsigned char leds[6];;TAD_TERMINAL.c: 149:  static unsigned char currentUser[5];;T
      +                          AD_TERMINAL.c: 150:  static char userNumber = 0;;TAD_TERMINAL.c: 152:  if (sending_strin
      +                          g) {
  5158                           
  5159                           ;incstack = 0
  5160   000986  5020               	movf	_sending_string^0,w,c
  5161   000988  B4D8               	btfsc	status,2,c
  5162   00098A  D0F2               	goto	l4341
  5163                           
  5164                           ;TAD_TERMINAL.c: 153:   if (motor_SendString() == 1) {
  5165   00098C  EC13  F00A         	call	_motor_SendString	;wreg free
  5166   000990  06E8               	decf	wreg,f,c
  5167   000992  A4D8               	btfss	status,2,c
  5168   000994  0012               	return	
  5169                           
  5170                           ;TAD_TERMINAL.c: 154:    sending_string = 0;
  5171   000996  6A20               	clrf	_sending_string^0,c
  5172                           
  5173                           ;TAD_TERMINAL.c: 155:   } else {
  5174   000998  D0EB               	goto	l4341
  5175   00099A                     l4213:
  5176                           
  5177                           ;TAD_TERMINAL.c: 162:    if (Terminal_RXAvailable() && Terminal_ReceiveChar() == 0x1B ||
      +                           hashtag_pressed) {
  5178   00099A  ECAD  F00D         	call	_Terminal_RXAvailable	;wreg free
  5179   00099E  0900               	iorlw	0
  5180   0009A0  B4D8               	btfsc	status,2,c
  5181   0009A2  D005               	goto	u3640
  5182   0009A4  ECCB  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5183   0009A8  0A1B               	xorlw	27
  5184   0009AA  B4D8               	btfsc	status,2,c
  5185   0009AC  D003               	goto	u3650
  5186   0009AE                     u3640:
  5187   0009AE  5021               	movf	_hashtag_pressed^0,w,c
  5188   0009B0  B4D8               	btfsc	status,2,c
  5189   0009B2  0012               	return	
  5190   0009B4                     u3650:
  5191                           
  5192                           ;TAD_TERMINAL.c: 163:     motor_StartSendString("---------------\r\n");
  5193   0009B4  0ED3               	movlw	low STR_4
  5194   0009B6  6E59               	movwf	motor_StartSendString@str^0,c
  5195   0009B8  0E1F               	movlw	high STR_4
  5196   0009BA  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5197   0009BC  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5198                           
  5199                           ;TAD_TERMINAL.c: 164:     sending_string = 1;
  5200   0009C0  0E01               	movlw	1
  5201   0009C2  6E20               	movwf	_sending_string^0,c
  5202                           
  5203                           ;TAD_TERMINAL.c: 165:     state = 10;
  5204   0009C4  0E0A               	movlw	10
  5205   0009C6  6E1F               	movwf	motorTerminal@state^0,c
  5206                           
  5207                           ;TAD_TERMINAL.c: 166:     hashtag_pressed = 0;
  5208   0009C8  6A21               	clrf	_hashtag_pressed^0,c
  5209   0009CA  0012               	return	
  5210   0009CC                     l4227:
  5211                           
  5212                           ;TAD_TERMINAL.c: 171:    if (!sending_string) {
  5213   0009CC  5020               	movf	_sending_string^0,w,c
  5214   0009CE  A4D8               	btfss	status,2,c
  5215   0009D0  0012               	return	
  5216                           
  5217                           ;TAD_TERMINAL.c: 172:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  5218   0009D2  0EAB               	movlw	low STR_5
  5219   0009D4  6E59               	movwf	motor_StartSendString@str^0,c
  5220   0009D6  0E1E               	movlw	high STR_5
  5221   0009D8  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5222   0009DA  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5223                           
  5224                           ;TAD_TERMINAL.c: 173:     sending_string = 1;
  5225   0009DE  0E01               	movlw	1
  5226   0009E0  6E20               	movwf	_sending_string^0,c
  5227                           
  5228                           ;TAD_TERMINAL.c: 174:     state = 13;
  5229   0009E2  0E0D               	movlw	13
  5230   0009E4  6E1F               	movwf	motorTerminal@state^0,c
  5231   0009E6  0012               	return	
  5232   0009E8                     l4235:
  5233                           
  5234                           ;TAD_TERMINAL.c: 179:    if (!sending_string) {
  5235   0009E8  5020               	movf	_sending_string^0,w,c
  5236   0009EA  A4D8               	btfss	status,2,c
  5237   0009EC  0012               	return	
  5238                           
  5239                           ;TAD_TERMINAL.c: 180:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  5240   0009EE  0E4C               	movlw	low STR_6
  5241   0009F0  6E59               	movwf	motor_StartSendString@str^0,c
  5242   0009F2  0E1E               	movlw	high STR_6
  5243   0009F4  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5244   0009F6  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5245                           
  5246                           ;TAD_TERMINAL.c: 181:     sending_string = 1;
  5247   0009FA  0E01               	movlw	1
  5248   0009FC  6E20               	movwf	_sending_string^0,c
  5249                           
  5250                           ;TAD_TERMINAL.c: 182:     state = 1;
  5251   0009FE  0E01               	movlw	1
  5252   000A00  6E1F               	movwf	motorTerminal@state^0,c
  5253   000A02  0012               	return	
  5254   000A04                     l4243:
  5255                           
  5256                           ;TAD_TERMINAL.c: 187:    if(Terminal_RXAvailable()) {
  5257   000A04  ECAD  F00D         	call	_Terminal_RXAvailable	;wreg free
  5258   000A08  0900               	iorlw	0
  5259   000A0A  B4D8               	btfsc	status,2,c
  5260   000A0C  0012               	return	
  5261                           
  5262                           ;TAD_TERMINAL.c: 188:     char opcion = Terminal_ReceiveChar();
  5263   000A0E  ECCB  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5264   000A12  6E6B               	movwf	motorTerminal@opcion^0,c
  5265                           
  5266                           ;TAD_TERMINAL.c: 189:     if (opcion >= '1' && opcion <= '3') {
  5267   000A14  0E30               	movlw	48
  5268   000A16  646B               	cpfsgt	motorTerminal@opcion^0,c
  5269   000A18  D011               	goto	l4257
  5270   000A1A  0E34               	movlw	52
  5271   000A1C  606B               	cpfslt	motorTerminal@opcion^0,c
  5272   000A1E  D00E               	goto	l4257
  5273                           
  5274                           ;TAD_TERMINAL.c: 190:      motor_StartSendString("\r\n");
  5275   000A20  0EE2               	movlw	low (STR_4+15)
  5276   000A22  6E59               	movwf	motor_StartSendString@str^0,c
  5277   000A24  0E1F               	movlw	high (STR_4+15)
  5278   000A26  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5279   000A28  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5280                           
  5281                           ;TAD_TERMINAL.c: 191:      sending_string = 1;
  5282   000A2C  0E01               	movlw	1
  5283   000A2E  6E20               	movwf	_sending_string^0,c
  5284                           
  5285                           ;TAD_TERMINAL.c: 192:      state = (opcion - '1') * 10 + 20;
  5286   000A30  506B               	movf	motorTerminal@opcion^0,w,c
  5287   000A32  0D0A               	mullw	10
  5288   000A34  50F3               	movf	243,w,c
  5289   000A36  0F2A               	addlw	42
  5290   000A38  6E1F               	movwf	motorTerminal@state^0,c
  5291                           
  5292                           ;TAD_TERMINAL.c: 193:     } else {
  5293   000A3A  0012               	return	
  5294   000A3C                     l4257:
  5295                           
  5296                           ;TAD_TERMINAL.c: 194:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5297   000A3C  0E23               	movlw	low STR_8
  5298   000A3E  6E59               	movwf	motor_StartSendString@str^0,c
  5299   000A40  0E1F               	movlw	high STR_8
  5300   000A42  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5301   000A44  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5302   000A48                     l4259:
  5303                           
  5304                           ;TAD_TERMINAL.c: 195:      sending_string = 1;
  5305   000A48  0E01               	movlw	1
  5306   000A4A  6E20               	movwf	_sending_string^0,c
  5307                           
  5308                           ;TAD_TERMINAL.c: 196:      state = 0;
  5309   000A4C  6A1F               	clrf	motorTerminal@state^0,c
  5310   000A4E  0012               	return	
  5311   000A50                     l4263:
  5312                           
  5313                           ;TAD_TERMINAL.c: 202:    if (!sending_string) {
  5314   000A50  5020               	movf	_sending_string^0,w,c
  5315   000A52  A4D8               	btfss	status,2,c
  5316   000A54  0012               	return	
  5317                           
  5318                           ;TAD_TERMINAL.c: 203:     unsigned char currentUserIndex = getCurrentUserIndex();
  5319   000A56  ECC9  F00D         	call	_getCurrentUserIndex	;wreg free
  5320   000A5A  6E6C               	movwf	motorTerminal@currentUserIndex^0,c
  5321                           
  5322                           ;TAD_TERMINAL.c: 204:     if (currentUserIndex != 4) {
  5323   000A5C  0E04               	movlw	4
  5324   000A5E  186C               	xorwf	motorTerminal@currentUserIndex^0,w,c
  5325   000A60  B4D8               	btfsc	status,2,c
  5326   000A62  D013               	goto	l4275
  5327                           
  5328                           ;TAD_TERMINAL.c: 205:      getActualUID(currentUser, currentUserIndex);
  5329   000A64  0EBE               	movlw	low motorTerminal@currentUser
  5330   000A66  6E55               	movwf	getActualUID@UID^0,c
  5331   000A68  C06C  F056         	movff	motorTerminal@currentUserIndex,getActualUID@userIndex
  5332   000A6C  EC4C  F00A         	call	_getActualUID	;wreg free
  5333                           
  5334                           ;TAD_TERMINAL.c: 206:      printfUID(currentUser, currentUserIndex, "Usuari ");
  5335   000A70  0EBE               	movlw	low motorTerminal@currentUser
  5336   000A72  6E5B               	movwf	printfUID@currentUser^0,c
  5337   000A74  C06C  F05C         	movff	motorTerminal@currentUserIndex,printfUID@userIndex
  5338   000A78  0EF7               	movlw	low STR_9
  5339   000A7A  6E5D               	movwf	printfUID@extraString^0,c
  5340   000A7C  0E1F               	movlw	high STR_9
  5341   000A7E  6E5E               	movwf	(printfUID@extraString+1)^0,c
  5342   000A80  EC4C  F003         	call	_printfUID	;wreg free
  5343   000A84                     l4273:
  5344                           
  5345                           ;TAD_TERMINAL.c: 207:      state = 25;
  5346   000A84  0E19               	movlw	25
  5347   000A86  6E1F               	movwf	motorTerminal@state^0,c
  5348                           
  5349                           ;TAD_TERMINAL.c: 208:     } else {
  5350   000A88  0012               	return	
  5351   000A8A                     l4275:
  5352                           
  5353                           ;TAD_TERMINAL.c: 209:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5354   000A8A  0E02               	movlw	low STR_10
  5355   000A8C  6E59               	movwf	motor_StartSendString@str^0,c
  5356   000A8E  0E1F               	movlw	high STR_10
  5357   000A90  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5358   000A92  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5359                           
  5360                           ;TAD_TERMINAL.c: 210:      sending_string = 1;
  5361   000A96  0E01               	movlw	1
  5362   000A98  6E20               	movwf	_sending_string^0,c
  5363   000A9A  D7F4               	goto	l4273
  5364   000A9C                     l4281:
  5365                           
  5366                           ;TAD_TERMINAL.c: 217:    if (!sending_string) {
  5367   000A9C  5020               	movf	_sending_string^0,w,c
  5368   000A9E  A4D8               	btfss	status,2,c
  5369   000AA0  0012               	return	
  5370                           
  5371                           ;TAD_TERMINAL.c: 218:     motor_StartSendString("\r\n");
  5372   000AA2  0EE2               	movlw	low (STR_4+15)
  5373   000AA4  6E59               	movwf	motor_StartSendString@str^0,c
  5374   000AA6  0E1F               	movlw	high (STR_4+15)
  5375   000AA8  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5376   000AAA  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5377   000AAE  D7CC               	goto	l4259
  5378   000AB0                     l4289:
  5379                           
  5380                           ;TAD_TERMINAL.c: 225:    if (!sending_string) {
  5381   000AB0  5020               	movf	_sending_string^0,w,c
  5382   000AB2  A4D8               	btfss	status,2,c
  5383   000AB4  0012               	return	
  5384                           
  5385                           ;TAD_TERMINAL.c: 226:     motor_StartSendString("Configuracions:\r\n");
  5386   000AB6  0EE5               	movlw	low STR_12
  5387   000AB8  6E59               	movwf	motor_StartSendString@str^0,c
  5388   000ABA  0E1F               	movlw	high STR_12
  5389   000ABC  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5390   000ABE  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5391                           
  5392                           ;TAD_TERMINAL.c: 227:     sending_string = 1;
  5393   000AC2  0E01               	movlw	1
  5394   000AC4  6E20               	movwf	_sending_string^0,c
  5395                           
  5396                           ;TAD_TERMINAL.c: 228:     userNumber = 0;
  5397   000AC6  6A1D               	clrf	motorTerminal@userNumber^0,c
  5398                           
  5399                           ;TAD_TERMINAL.c: 229:     state = 32;
  5400   000AC8  0E20               	movlw	32
  5401   000ACA  6E1F               	movwf	motorTerminal@state^0,c
  5402   000ACC  0012               	return	
  5403   000ACE                     l4299:
  5404                           
  5405                           ;TAD_TERMINAL.c: 234:    if (!sending_string) {
  5406   000ACE  5020               	movf	_sending_string^0,w,c
  5407   000AD0  A4D8               	btfss	status,2,c
  5408   000AD2  0012               	return	
  5409                           
  5410                           ;TAD_TERMINAL.c: 235:     if (userNumber < 4) {
  5411   000AD4  0E04               	movlw	4
  5412   000AD6  601D               	cpfslt	motorTerminal@userNumber^0,c
  5413   000AD8  D012               	goto	l4309
  5414                           
  5415                           ;TAD_TERMINAL.c: 237:      getActualUID(currentUser, userNumber);
  5416   000ADA  0EBE               	movlw	low motorTerminal@currentUser
  5417   000ADC  6E55               	movwf	getActualUID@UID^0,c
  5418   000ADE  C01D  F056         	movff	motorTerminal@userNumber,getActualUID@userIndex
  5419   000AE2  EC4C  F00A         	call	_getActualUID	;wreg free
  5420                           
  5421                           ;TAD_TERMINAL.c: 239:      printfUID(currentUser, userNumber, "Usuari ");
  5422   000AE6  0EBE               	movlw	low motorTerminal@currentUser
  5423   000AE8  6E5B               	movwf	printfUID@currentUser^0,c
  5424   000AEA  C01D  F05C         	movff	motorTerminal@userNumber,printfUID@userIndex
  5425   000AEE  0EF7               	movlw	low STR_9
  5426   000AF0  6E5D               	movwf	printfUID@extraString^0,c
  5427   000AF2  0E1F               	movlw	high STR_9
  5428   000AF4  6E5E               	movwf	(printfUID@extraString+1)^0,c
  5429   000AF6  EC4C  F003         	call	_printfUID	;wreg free
  5430                           
  5431                           ;TAD_TERMINAL.c: 241:      userNumber++;
  5432   000AFA  2A1D               	incf	motorTerminal@userNumber^0,f,c
  5433                           
  5434                           ;TAD_TERMINAL.c: 242:     } else {
  5435   000AFC  0012               	return	
  5436   000AFE                     l4309:
  5437                           
  5438                           ;TAD_TERMINAL.c: 243:      motor_StartSendString("\r\n");
  5439   000AFE  0EE2               	movlw	low (STR_4+15)
  5440   000B00  6E59               	movwf	motor_StartSendString@str^0,c
  5441   000B02  0E1F               	movlw	high (STR_4+15)
  5442   000B04  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5443   000B06  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5444   000B0A  D79E               	goto	l4259
  5445   000B0C                     l4315:
  5446                           
  5447                           ;TAD_TERMINAL.c: 251:    if (!sending_string) {
  5448   000B0C  5020               	movf	_sending_string^0,w,c
  5449   000B0E  A4D8               	btfss	status,2,c
  5450   000B10  0012               	return	
  5451                           
  5452                           ;TAD_TERMINAL.c: 252:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5453   000B12  0E65               	movlw	low STR_15
  5454   000B14  6E59               	movwf	motor_StartSendString@str^0,c
  5455   000B16  0E1F               	movlw	high STR_15
  5456   000B18  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5457   000B1A  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5458                           
  5459                           ;TAD_TERMINAL.c: 253:     sending_string = 1;
  5460   000B1E  0E01               	movlw	1
  5461   000B20  6E20               	movwf	_sending_string^0,c
  5462                           
  5463                           ;TAD_TERMINAL.c: 254:     state = 2;
  5464   000B22  0E02               	movlw	2
  5465   000B24  6E1F               	movwf	motorTerminal@state^0,c
  5466                           
  5467                           ;TAD_TERMINAL.c: 255:     index = 0;
  5468   000B26  6A1E               	clrf	motorTerminal@index^0,c
  5469   000B28  0012               	return	
  5470   000B2A                     l4325:
  5471                           
  5472                           ;TAD_TERMINAL.c: 260:    if(Terminal_RXAvailable()) {
  5473   000B2A  ECAD  F00D         	call	_Terminal_RXAvailable	;wreg free
  5474   000B2E  0900               	iorlw	0
  5475   000B30  B4D8               	btfsc	status,2,c
  5476   000B32  0012               	return	
  5477                           
  5478                           ;TAD_TERMINAL.c: 261:     hour[index] = Terminal_ReceiveChar();
  5479   000B34  501E               	movf	motorTerminal@index^0,w,c
  5480   000B36  0FE1               	addlw	low motorTerminal@hour
  5481   000B38  6ED9               	movwf	fsr2l,c
  5482   000B3A  6ADA               	clrf	fsr2h,c
  5483   000B3C  ECCB  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5484   000B40  6EDF               	movwf	indf2,c
  5485                           
  5486                           ;TAD_TERMINAL.c: 262:     Terminal_SendChar(hour[index]);
  5487   000B42  501E               	movf	motorTerminal@index^0,w,c
  5488   000B44  0FE1               	addlw	low motorTerminal@hour
  5489   000B46  6ED9               	movwf	fsr2l,c
  5490   000B48  6ADA               	clrf	fsr2h,c
  5491   000B4A  50DF               	movf	indf2,w,c
  5492   000B4C  EC80  F00D         	call	_Terminal_SendChar
  5493                           
  5494                           ;TAD_TERMINAL.c: 263:     if(++index == 4) {
  5495   000B50  2A1E               	incf	motorTerminal@index^0,f,c
  5496   000B52  0E04               	movlw	4
  5497   000B54  181E               	xorwf	motorTerminal@index^0,w,c
  5498   000B56  A4D8               	btfss	status,2,c
  5499   000B58  0012               	return	
  5500                           
  5501                           ;TAD_TERMINAL.c: 264:      saveHourToData(hour);
  5502   000B5A  0EE1               	movlw	low motorTerminal@hour
  5503   000B5C  6E55               	movwf	saveHourToData@hour^0,c
  5504   000B5E  ECEE  F00C         	call	_saveHourToData	;wreg free
  5505                           
  5506                           ;TAD_TERMINAL.c: 265:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5507   000B62  0E44               	movlw	low STR_16
  5508   000B64  6E59               	movwf	motor_StartSendString@str^0,c
  5509   000B66  0E1F               	movlw	high STR_16
  5510   000B68  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5511   000B6A  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5512   000B6E  D76C               	goto	l4259
  5513   000B70                     l4341:
  5514   000B70  501F               	movf	motorTerminal@state^0,w,c
  5515                           
  5516                           ; Switch size 1, requested type "simple"
  5517                           ; Number of cases is 10, Range of values is 0 to 40
  5518                           ; switch strategies available:
  5519                           ; Name         Instructions Cycles
  5520                           ; simple_byte           31    16 (average)
  5521                           ;	Chosen strategy is simple_byte
  5522   000B72  0A00               	xorlw	0	; case 0
  5523   000B74  B4D8               	btfsc	status,2,c
  5524   000B76  D711               	goto	l4213
  5525   000B78  0A01               	xorlw	1	; case 1
  5526   000B7A  B4D8               	btfsc	status,2,c
  5527   000B7C  D743               	goto	l4243
  5528   000B7E  0A03               	xorlw	3	; case 2
  5529   000B80  B4D8               	btfsc	status,2,c
  5530   000B82  D7D3               	goto	l4325
  5531   000B84  0A08               	xorlw	8	; case 10
  5532   000B86  B4D8               	btfsc	status,2,c
  5533   000B88  D721               	goto	l4227
  5534   000B8A  0A07               	xorlw	7	; case 13
  5535   000B8C  B4D8               	btfsc	status,2,c
  5536   000B8E  D72C               	goto	l4235
  5537   000B90  0A19               	xorlw	25	; case 20
  5538   000B92  B4D8               	btfsc	status,2,c
  5539   000B94  D75D               	goto	l4263
  5540   000B96  0A0D               	xorlw	13	; case 25
  5541   000B98  B4D8               	btfsc	status,2,c
  5542   000B9A  D780               	goto	l4281
  5543   000B9C  0A07               	xorlw	7	; case 30
  5544   000B9E  B4D8               	btfsc	status,2,c
  5545   000BA0  D787               	goto	l4289
  5546   000BA2  0A3E               	xorlw	62	; case 32
  5547   000BA4  B4D8               	btfsc	status,2,c
  5548   000BA6  D793               	goto	l4299
  5549   000BA8  0A08               	xorlw	8	; case 40
  5550   000BAA  A4D8               	btfss	status,2,c
  5551   000BAC  0012               	return	
  5552   000BAE  D7AE               	goto	l4315
  5553   000BB0                     __end_of_motorTerminal:
  5554                           	callstack 0
  5555                           
  5556 ;; *************** function _saveHourToData *****************
  5557 ;; Defined at:
  5558 ;;		line 85 in file "TAD_DATOS.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5561 ;;		 -> motorTerminal@hour(4), 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  i               1    2[COMRAM] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1
  5573 ;;      Params:         1       0       0
  5574 ;;      Locals:         1       0       0
  5575 ;;      Temps:          0       0       0
  5576 ;;      Totals:         2       0       0
  5577 ;;Total ram usage:        2 bytes
  5578 ;; Hardware stack levels used: 1
  5579 ;; Hardware stack levels required when called: 3
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_motorTerminal
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text11
  5588   0019DC                     __ptext11:
  5589                           	callstack 0
  5590   0019DC                     _saveHourToData:
  5591                           	callstack 26
  5592                           
  5593                           ;TAD_DATOS.c: 86:     if(!hour) return;
  5594                           
  5595                           ;incstack = 0
  5596   0019DC  5055               	movf	saveHourToData@hour^0,w,c
  5597   0019DE  B4D8               	btfsc	status,2,c
  5598   0019E0  0012               	return	
  5599                           
  5600                           ;TAD_DATOS.c: 87:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5601   0019E2  6A56               	clrf	saveHourToData@i^0,c
  5602   0019E4                     l3961:
  5603   0019E4  5055               	movf	saveHourToData@hour^0,w,c
  5604   0019E6  2456               	addwf	saveHourToData@i^0,w,c
  5605   0019E8  6ED9               	movwf	fsr2l,c
  5606   0019EA  6ADA               	clrf	fsr2h,c
  5607   0019EC  5056               	movf	saveHourToData@i^0,w,c
  5608   0019EE  0FDD               	addlw	low _currentTime
  5609   0019F0  6EE1               	movwf	fsr1l,c
  5610   0019F2  6AE2               	clrf	fsr1h,c
  5611   0019F4  CFDF FFE7          	movff	indf2,indf1
  5612   0019F8  2A56               	incf	saveHourToData@i^0,f,c
  5613   0019FA  0E03               	movlw	3
  5614   0019FC  6456               	cpfsgt	saveHourToData@i^0,c
  5615   0019FE  D7F2               	goto	l3961
  5616   001A00  0012               	return	
  5617   001A02                     __end_of_saveHourToData:
  5618                           	callstack 0
  5619                           
  5620 ;; *************** function _printfUID *****************
  5621 ;; Defined at:
  5622 ;;		line 60 in file "TAD_TERMINAL.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5625 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5626 ;;  userIndex       1    8[COMRAM] unsigned char 
  5627 ;;  extraString     2    9[COMRAM] PTR const unsigned char 
  5628 ;;		 -> STR_17(21), STR_13(8), STR_9(8), 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  val             1   19[COMRAM] unsigned char 
  5631 ;;  leds            6   13[COMRAM] unsigned char [6]
  5632 ;;  ptr             2   21[COMRAM] PTR unsigned char 
  5633 ;;		 -> printfUID@buffer(80), 
  5634 ;;  i               1   20[COMRAM] unsigned char 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1
  5644 ;;      Params:         4       0       0
  5645 ;;      Locals:        10       0       0
  5646 ;;      Temps:          2       0       0
  5647 ;;      Totals:        16       0       0
  5648 ;;Total ram usage:       16 bytes
  5649 ;; Hardware stack levels used: 1
  5650 ;; Hardware stack levels required when called: 7
  5651 ;; This function calls:
  5652 ;;		_getActualLeds
  5653 ;;		_motor_StartSendString
  5654 ;; This function is called by:
  5655 ;;		_motorTerminal
  5656 ;;		_motor_setCurrentUser
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text12
  5661   000698                     __ptext12:
  5662                           	callstack 0
  5663   000698                     _printfUID:
  5664                           	callstack 21
  5665                           
  5666                           ;TAD_TERMINAL.c: 62:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 6
      +                          4:     static char buffer[80];;TAD_TERMINAL.c: 65:     char *ptr = buffer;
  5667                           
  5668                           ;incstack = 0
  5669   000698  0E00               	movlw	low printfUID@buffer
  5670   00069A  6E69               	movwf	printfUID@ptr^0,c
  5671   00069C  0E01               	movlw	high printfUID@buffer
  5672   00069E  6E6A               	movwf	(printfUID@ptr+1)^0,c
  5673                           
  5674                           ;TAD_TERMINAL.c: 68:     if (currentUser == 0 || *currentUser == 0) {
  5675   0006A0  505B               	movf	printfUID@currentUser^0,w,c
  5676   0006A2  B4D8               	btfsc	status,2,c
  5677   0006A4  D006               	goto	u2650
  5678   0006A6  505B               	movf	printfUID@currentUser^0,w,c
  5679   0006A8  6ED9               	movwf	fsr2l,c
  5680   0006AA  6ADA               	clrf	fsr2h,c
  5681   0006AC  50DF               	movf	indf2,w,c
  5682   0006AE  A4D8               	btfss	status,2,c
  5683   0006B0  D007               	goto	l3443
  5684   0006B2                     u2650:
  5685                           
  5686                           ;TAD_TERMINAL.c: 69:         motor_StartSendString("\tNo hay usuario configurado\r\n");
  5687   0006B2  0E86               	movlw	low STR_3
  5688   0006B4  6E59               	movwf	motor_StartSendString@str^0,c
  5689   0006B6  0E1F               	movlw	high STR_3
  5690   0006B8  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  5691   0006BA  EC50  F00D         	call	_motor_StartSendString	;wreg free
  5692   0006BE  0012               	return	
  5693   0006C0                     l3443:
  5694                           
  5695                           ;TAD_TERMINAL.c: 74:     if (extraString) {
  5696   0006C0  505D               	movf	printfUID@extraString^0,w,c
  5697   0006C2  105E               	iorwf	(printfUID@extraString+1)^0,w,c
  5698   0006C4  A4D8               	btfss	status,2,c
  5699   0006C6  D010               	goto	l3453
  5700   0006C8  D066               	goto	l3485
  5701   0006CA                     l3447:
  5702                           
  5703                           ;TAD_TERMINAL.c: 76:             *ptr++ = *extraString++;
  5704   0006CA  C05D  FFF6         	movff	printfUID@extraString,tblptrl
  5705   0006CE  C05E  FFF7         	movff	printfUID@extraString+1,tblptrh
  5706   0006D2                     	if	0	;tblptru may be non-zero
  5707   0006D2                     	endif
  5708   0006D2                     	if	0	;tblptru may be non-zero
  5709   0006D2                     	endif
  5710   0006D2  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5711   0006D6  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5712   0006DA  0008               	tblrd		*
  5713   0006DC  CFF5 FFDF          	movff	tablat,indf2
  5714   0006E0  4A5D               	infsnz	printfUID@extraString^0,f,c
  5715   0006E2  2A5E               	incf	(printfUID@extraString+1)^0,f,c
  5716   0006E4  4A69               	infsnz	printfUID@ptr^0,f,c
  5717   0006E6  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5718   0006E8                     l3453:
  5719                           
  5720                           ;TAD_TERMINAL.c: 75:         while (*extraString) {
  5721   0006E8  C05D  FFF6         	movff	printfUID@extraString,tblptrl
  5722   0006EC  C05E  FFF7         	movff	printfUID@extraString+1,tblptrh
  5723   0006F0                     	if	0	;tblptru may be non-zero
  5724   0006F0                     	endif
  5725   0006F0                     	if	0	;tblptru may be non-zero
  5726   0006F0                     	endif
  5727   0006F0  0008               	tblrd		*
  5728   0006F2  50F5               	movf	tablat,w,c
  5729   0006F4  0900               	iorlw	0
  5730   0006F6  A4D8               	btfss	status,2,c
  5731   0006F8  D7E8               	goto	l3447
  5732                           
  5733                           ;TAD_TERMINAL.c: 79:         if (buffer[0] == 'U' && buffer[1] == 's' && buffer[2] == 'u
      +                          ' &&
  5734   0006FA  0E55               	movlw	85
  5735   0006FC  0101               	movlb	1	; () banked
  5736   0006FE  1900               	xorwf	printfUID@buffer& (0+255),w,b
  5737   000700  A4D8               	btfss	status,2,c
  5738   000702  D031               	goto	l3477
  5739                           
  5740                           ; BSR set to: 1
  5741   000704  0E73               	movlw	115
  5742   000706  1901               	xorwf	(printfUID@buffer+1)& (0+255),w,b
  5743   000708  A4D8               	btfss	status,2,c
  5744   00070A  D02D               	goto	l3477
  5745                           
  5746                           ; BSR set to: 1
  5747   00070C  0E75               	movlw	117
  5748   00070E  1902               	xorwf	(printfUID@buffer+2)& (0+255),w,b
  5749   000710  A4D8               	btfss	status,2,c
  5750   000712  D029               	goto	l3477
  5751                           
  5752                           ; BSR set to: 1
  5753   000714  0E61               	movlw	97
  5754   000716  1903               	xorwf	(printfUID@buffer+3)& (0+255),w,b
  5755   000718  A4D8               	btfss	status,2,c
  5756   00071A  D025               	goto	l3477
  5757                           
  5758                           ; BSR set to: 1
  5759   00071C  0E72               	movlw	114
  5760   00071E  1904               	xorwf	(printfUID@buffer+4)& (0+255),w,b
  5761   000720  A4D8               	btfss	status,2,c
  5762   000722  D021               	goto	l3477
  5763                           
  5764                           ; BSR set to: 1
  5765   000724  0E69               	movlw	105
  5766   000726  1905               	xorwf	(printfUID@buffer+5)& (0+255),w,b
  5767   000728  A4D8               	btfss	status,2,c
  5768   00072A  D01D               	goto	l3477
  5769                           
  5770                           ; BSR set to: 1
  5771   00072C  0E20               	movlw	32
  5772   00072E  1906               	xorwf	(printfUID@buffer+6)& (0+255),w,b
  5773   000730  A4D8               	btfss	status,2,c
  5774   000732  D019               	goto	l3477
  5775                           
  5776                           ; BSR set to: 1
  5777                           ;TAD_TERMINAL.c: 81:             buffer[6] == ' ') {;TAD_TERMINAL.c: 82:             *pt
      +                          r++ = '1' + userIndex;
  5778   000734  505C               	movf	printfUID@userIndex^0,w,c
  5779   000736  0F31               	addlw	49
  5780   000738  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5781   00073C  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5782   000740  6EDF               	movwf	indf2,c
  5783                           
  5784                           ; BSR set to: 1
  5785   000742  4A69               	infsnz	printfUID@ptr^0,f,c
  5786   000744  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5787                           
  5788                           ;TAD_TERMINAL.c: 83:             *ptr++ = ':';
  5789   000746  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5790   00074A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5791   00074E  0E3A               	movlw	58
  5792   000750  6EDF               	movwf	indf2,c
  5793                           
  5794                           ; BSR set to: 1
  5795   000752  4A69               	infsnz	printfUID@ptr^0,f,c
  5796   000754  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;TAD_TERMINAL.c: 84:             *ptr++ = ' ';
  5800   000756  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5801   00075A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5802   00075E  0E20               	movlw	32
  5803   000760  6EDF               	movwf	indf2,c
  5804   000762  4A69               	infsnz	printfUID@ptr^0,f,c
  5805   000764  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5806   000766                     l3477:
  5807                           
  5808                           ; BSR set to: 1
  5809                           ;TAD_TERMINAL.c: 86:         *ptr++ = '\r';
  5810   000766  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5811   00076A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5812   00076E  0E0D               	movlw	13
  5813   000770  6EDF               	movwf	indf2,c
  5814                           
  5815                           ; BSR set to: 1
  5816   000772  4A69               	infsnz	printfUID@ptr^0,f,c
  5817   000774  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5818                           
  5819                           ;TAD_TERMINAL.c: 87:         *ptr++ = '\n';
  5820   000776  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5821   00077A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5822   00077E  0E0A               	movlw	10
  5823   000780  6EDF               	movwf	indf2,c
  5824                           
  5825                           ; BSR set to: 1
  5826   000782  4A69               	infsnz	printfUID@ptr^0,f,c
  5827   000784  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5828                           
  5829                           ; BSR set to: 1
  5830                           ;TAD_TERMINAL.c: 88:         *ptr++ = '\t';
  5831   000786  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5832   00078A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5833   00078E  0E09               	movlw	9
  5834   000790  6EDF               	movwf	indf2,c
  5835   000792  4A69               	infsnz	printfUID@ptr^0,f,c
  5836   000794  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5837   000796                     l3485:
  5838                           
  5839                           ;TAD_TERMINAL.c: 91:     *ptr++ = 'U';
  5840   000796  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5841   00079A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5842   00079E  0E55               	movlw	85
  5843   0007A0  6EDF               	movwf	indf2,c
  5844   0007A2  4A69               	infsnz	printfUID@ptr^0,f,c
  5845   0007A4  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5846                           
  5847                           ;TAD_TERMINAL.c: 92:     *ptr++ = 'I';
  5848   0007A6  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5849   0007AA  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5850   0007AE  0E49               	movlw	73
  5851   0007B0  6EDF               	movwf	indf2,c
  5852   0007B2  4A69               	infsnz	printfUID@ptr^0,f,c
  5853   0007B4  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5854                           
  5855                           ;TAD_TERMINAL.c: 93:     *ptr++ = 'D';
  5856   0007B6  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5857   0007BA  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5858   0007BE  0E44               	movlw	68
  5859   0007C0  6EDF               	movwf	indf2,c
  5860   0007C2  4A69               	infsnz	printfUID@ptr^0,f,c
  5861   0007C4  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5862                           
  5863                           ;TAD_TERMINAL.c: 94:     *ptr++ = ':';
  5864   0007C6  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5865   0007CA  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5866   0007CE  0E3A               	movlw	58
  5867   0007D0  6EDF               	movwf	indf2,c
  5868   0007D2  4A69               	infsnz	printfUID@ptr^0,f,c
  5869   0007D4  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5870                           
  5871                           ;TAD_TERMINAL.c: 95:     *ptr++ = ' ';
  5872   0007D6  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5873   0007DA  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5874   0007DE  0E20               	movlw	32
  5875   0007E0  6EDF               	movwf	indf2,c
  5876   0007E2  4A69               	infsnz	printfUID@ptr^0,f,c
  5877   0007E4  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5878                           
  5879                           ;TAD_TERMINAL.c: 98:     char i;;TAD_TERMINAL.c: 99:     for(i = 0; i < 5; i++) {
  5880   0007E6  6A68               	clrf	printfUID@i^0,c
  5881   0007E8                     l3505:
  5882                           
  5883                           ;TAD_TERMINAL.c: 100:         unsigned char val = currentUser[i];
  5884   0007E8  505B               	movf	printfUID@currentUser^0,w,c
  5885   0007EA  2468               	addwf	printfUID@i^0,w,c
  5886   0007EC  6ED9               	movwf	fsr2l,c
  5887   0007EE  6ADA               	clrf	fsr2h,c
  5888   0007F0  50DF               	movf	indf2,w,c
  5889   0007F2  6E67               	movwf	printfUID@val^0,c
  5890                           
  5891                           ;TAD_TERMINAL.c: 101:         *ptr++ = hex[val >> 4];
  5892   0007F4  3867               	swapf	printfUID@val^0,w,c
  5893   0007F6  0B0F               	andlw	15
  5894   0007F8  6E5F               	movwf	??_printfUID^0,c
  5895   0007FA  6A60               	clrf	(??_printfUID+1)^0,c
  5896   0007FC  0E2F               	movlw	low printfUID@hex
  5897   0007FE  245F               	addwf	??_printfUID^0,w,c
  5898   000800  6EF6               	movwf	tblptrl,c
  5899   000802  0E1E               	movlw	high printfUID@hex
  5900   000804  2060               	addwfc	(??_printfUID+1)^0,w,c
  5901   000806  6EF7               	movwf	tblptrh,c
  5902   000808                     	if	0	;There are less than 3 active tblptr bytes
  5903   000808                     	endif
  5904   000808  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5905   00080C  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5906   000810  0008               	tblrd		*
  5907   000812  CFF5 FFDF          	movff	tablat,indf2
  5908   000816  4A69               	infsnz	printfUID@ptr^0,f,c
  5909   000818  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5910                           
  5911                           ;TAD_TERMINAL.c: 102:         *ptr++ = hex[val & 0x0F];
  5912   00081A  5067               	movf	printfUID@val^0,w,c
  5913   00081C  0B0F               	andlw	15
  5914   00081E  6E5F               	movwf	??_printfUID^0,c
  5915   000820  6A60               	clrf	(??_printfUID+1)^0,c
  5916   000822  0E2F               	movlw	low printfUID@hex
  5917   000824  245F               	addwf	??_printfUID^0,w,c
  5918   000826  6EF6               	movwf	tblptrl,c
  5919   000828  0E1E               	movlw	high printfUID@hex
  5920   00082A  2060               	addwfc	(??_printfUID+1)^0,w,c
  5921   00082C  6EF7               	movwf	tblptrh,c
  5922   00082E                     	if	0	;There are less than 3 active tblptr bytes
  5923   00082E                     	endif
  5924   00082E  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5925   000832  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5926   000836  0008               	tblrd		*
  5927   000838  CFF5 FFDF          	movff	tablat,indf2
  5928   00083C  4A69               	infsnz	printfUID@ptr^0,f,c
  5929   00083E  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5930                           
  5931                           ;TAD_TERMINAL.c: 103:         if(i < 4) *ptr++ = '-';
  5932   000840  0E04               	movlw	4
  5933   000842  6068               	cpfslt	printfUID@i^0,c
  5934   000844  D008               	goto	l3521
  5935   000846  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5936   00084A  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5937   00084E  0E2D               	movlw	45
  5938   000850  6EDF               	movwf	indf2,c
  5939   000852  4A69               	infsnz	printfUID@ptr^0,f,c
  5940   000854  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5941   000856                     l3521:
  5942                           
  5943                           ;TAD_TERMINAL.c: 104:     }
  5944   000856  2A68               	incf	printfUID@i^0,f,c
  5945   000858  0E04               	movlw	4
  5946   00085A  6468               	cpfsgt	printfUID@i^0,c
  5947   00085C  D7C5               	goto	l3505
  5948                           
  5949                           ;TAD_TERMINAL.c: 105:     *ptr++ = '\r';
  5950   00085E  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5951   000862  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5952   000866  0E0D               	movlw	13
  5953   000868  6EDF               	movwf	indf2,c
  5954   00086A  4A69               	infsnz	printfUID@ptr^0,f,c
  5955   00086C  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5956                           
  5957                           ;TAD_TERMINAL.c: 106:     *ptr++ = '\n';
  5958   00086E  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5959   000872  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5960   000876  0E0A               	movlw	10
  5961   000878  6EDF               	movwf	indf2,c
  5962   00087A  4A69               	infsnz	printfUID@ptr^0,f,c
  5963   00087C  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5964                           
  5965                           ;TAD_TERMINAL.c: 107:     *ptr++ = '\t';
  5966   00087E  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5967   000882  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5968   000886  0E09               	movlw	9
  5969   000888  6EDF               	movwf	indf2,c
  5970   00088A  4A69               	infsnz	printfUID@ptr^0,f,c
  5971   00088C  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5972                           
  5973                           ;TAD_TERMINAL.c: 109:     unsigned char leds[6];;TAD_TERMINAL.c: 110:     getActualLeds(
      +                          leds, userIndex);
  5974   00088E  0E61               	movlw	low printfUID@leds
  5975   000890  6E55               	movwf	getActualLeds@leds^0,c
  5976   000892  C05C  F056         	movff	printfUID@userIndex,getActualLeds@userIndex
  5977   000896  EC7B  F00B         	call	_getActualLeds	;wreg free
  5978                           
  5979                           ;TAD_TERMINAL.c: 113:     for(i = 0; i < 6; i++) {
  5980   00089A  6A68               	clrf	printfUID@i^0,c
  5981   00089C                     l3543:
  5982                           
  5983                           ;TAD_TERMINAL.c: 115:         *ptr++ = 'L';
  5984   00089C  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5985   0008A0  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5986   0008A4  0E4C               	movlw	76
  5987   0008A6  6EDF               	movwf	indf2,c
  5988   0008A8  4A69               	infsnz	printfUID@ptr^0,f,c
  5989   0008AA  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5990                           
  5991                           ;TAD_TERMINAL.c: 116:         *ptr++ = '0' + i;
  5992   0008AC  5068               	movf	printfUID@i^0,w,c
  5993   0008AE  0F30               	addlw	48
  5994   0008B0  C069  FFD9         	movff	printfUID@ptr,fsr2l
  5995   0008B4  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  5996   0008B8  6EDF               	movwf	indf2,c
  5997   0008BA  4A69               	infsnz	printfUID@ptr^0,f,c
  5998   0008BC  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  5999                           
  6000                           ;TAD_TERMINAL.c: 117:         *ptr++ = ':';
  6001   0008BE  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6002   0008C2  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6003   0008C6  0E3A               	movlw	58
  6004   0008C8  6EDF               	movwf	indf2,c
  6005   0008CA  4A69               	infsnz	printfUID@ptr^0,f,c
  6006   0008CC  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6007                           
  6008                           ;TAD_TERMINAL.c: 118:         *ptr++ = ' ';
  6009   0008CE  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6010   0008D2  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6011   0008D6  0E20               	movlw	32
  6012   0008D8  6EDF               	movwf	indf2,c
  6013   0008DA  4A69               	infsnz	printfUID@ptr^0,f,c
  6014   0008DC  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6015                           
  6016                           ;TAD_TERMINAL.c: 119:         *ptr++ = hex[leds[i] & 0x0F];
  6017   0008DE  5068               	movf	printfUID@i^0,w,c
  6018   0008E0  0F61               	addlw	low printfUID@leds
  6019   0008E2  6ED9               	movwf	fsr2l,c
  6020   0008E4  6ADA               	clrf	fsr2h,c
  6021   0008E6  50DF               	movf	indf2,w,c
  6022   0008E8  0B0F               	andlw	15
  6023   0008EA  6E5F               	movwf	??_printfUID^0,c
  6024   0008EC  6A60               	clrf	(??_printfUID+1)^0,c
  6025   0008EE  0E2F               	movlw	low printfUID@hex
  6026   0008F0  245F               	addwf	??_printfUID^0,w,c
  6027   0008F2  6EF6               	movwf	tblptrl,c
  6028   0008F4  0E1E               	movlw	high printfUID@hex
  6029   0008F6  2060               	addwfc	(??_printfUID+1)^0,w,c
  6030   0008F8  6EF7               	movwf	tblptrh,c
  6031   0008FA                     	if	0	;There are less than 3 active tblptr bytes
  6032   0008FA                     	endif
  6033   0008FA  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6034   0008FE  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6035   000902  0008               	tblrd		*
  6036   000904  CFF5 FFDF          	movff	tablat,indf2
  6037   000908  4A69               	infsnz	printfUID@ptr^0,f,c
  6038   00090A  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6039                           
  6040                           ;TAD_TERMINAL.c: 122:         if(i < 5) {
  6041   00090C  0E05               	movlw	5
  6042   00090E  6068               	cpfslt	printfUID@i^0,c
  6043   000910  D018               	goto	l3569
  6044                           
  6045                           ;TAD_TERMINAL.c: 123:             *ptr++ = ' ';
  6046   000912  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6047   000916  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6048   00091A  0E20               	movlw	32
  6049   00091C  6EDF               	movwf	indf2,c
  6050   00091E  4A69               	infsnz	printfUID@ptr^0,f,c
  6051   000920  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6052                           
  6053                           ;TAD_TERMINAL.c: 124:             *ptr++ = '-';
  6054   000922  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6055   000926  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6056   00092A  0E2D               	movlw	45
  6057   00092C  6EDF               	movwf	indf2,c
  6058   00092E  4A69               	infsnz	printfUID@ptr^0,f,c
  6059   000930  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6060                           
  6061                           ;TAD_TERMINAL.c: 125:             *ptr++ = ' ';
  6062   000932  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6063   000936  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6064   00093A  0E20               	movlw	32
  6065   00093C  6EDF               	movwf	indf2,c
  6066   00093E  4A69               	infsnz	printfUID@ptr^0,f,c
  6067   000940  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6068   000942                     l3569:
  6069                           
  6070                           ;TAD_TERMINAL.c: 127:     }
  6071   000942  2A68               	incf	printfUID@i^0,f,c
  6072   000944  0E05               	movlw	5
  6073   000946  6468               	cpfsgt	printfUID@i^0,c
  6074   000948  D7A9               	goto	l3543
  6075                           
  6076                           ;TAD_TERMINAL.c: 130:     *ptr++ = '\r';
  6077   00094A  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6078   00094E  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6079   000952  0E0D               	movlw	13
  6080   000954  6EDF               	movwf	indf2,c
  6081   000956  4A69               	infsnz	printfUID@ptr^0,f,c
  6082   000958  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6083                           
  6084                           ;TAD_TERMINAL.c: 131:     *ptr++ = '\n';
  6085   00095A  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6086   00095E  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6087   000962  0E0A               	movlw	10
  6088   000964  6EDF               	movwf	indf2,c
  6089   000966  4A69               	infsnz	printfUID@ptr^0,f,c
  6090   000968  2A6A               	incf	(printfUID@ptr+1)^0,f,c
  6091                           
  6092                           ;TAD_TERMINAL.c: 132:     *ptr = '\0';
  6093   00096A  C069  FFD9         	movff	printfUID@ptr,fsr2l
  6094   00096E  C06A  FFDA         	movff	printfUID@ptr+1,fsr2h
  6095   000972  6ADF               	clrf	indf2,c
  6096                           
  6097                           ;TAD_TERMINAL.c: 135:     motor_StartSendString(buffer);
  6098   000974  0E00               	movlw	low printfUID@buffer
  6099   000976  6E59               	movwf	motor_StartSendString@str^0,c
  6100   000978  0E01               	movlw	high printfUID@buffer
  6101   00097A  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  6102   00097C  EC50  F00D         	call	_motor_StartSendString	;wreg free
  6103                           
  6104                           ;TAD_TERMINAL.c: 136:     sending_string = 1;
  6105   000980  0E01               	movlw	1
  6106   000982  6E20               	movwf	_sending_string^0,c
  6107   000984  0012               	return		;funcret
  6108   000986                     __end_of_printfUID:
  6109                           	callstack 0
  6110                           
  6111 ;; *************** function _getActualLeds *****************
  6112 ;; Defined at:
  6113 ;;		line 65 in file "TAD_DATOS.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  leds            1    1[COMRAM] PTR unsigned char 
  6116 ;;		 -> printfUID@leds(6), ActualLeds(6), 
  6117 ;;  userIndex       1    2[COMRAM] unsigned char 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  i               1    4[COMRAM] unsigned char 
  6120 ;;  i               1    3[COMRAM] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1
  6130 ;;      Params:         2       0       0
  6131 ;;      Locals:         2       0       0
  6132 ;;      Temps:          0       0       0
  6133 ;;      Totals:         4       0       0
  6134 ;;Total ram usage:        4 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; Hardware stack levels required when called: 3
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_motor_LEDs
  6141 ;;		_printfUID
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text13
  6146   0016F6                     __ptext13:
  6147                           	callstack 0
  6148   0016F6                     _getActualLeds:
  6149                           	callstack 24
  6150                           
  6151                           ;TAD_DATOS.c: 66:     if(!leds) return;
  6152                           
  6153                           ;incstack = 0
  6154   0016F6  5055               	movf	getActualLeds@leds^0,w,c
  6155   0016F8  B4D8               	btfsc	status,2,c
  6156   0016FA  0012               	return	
  6157                           
  6158                           ;TAD_DATOS.c: 67:     if(userIndex == 20) {
  6159   0016FC  0E14               	movlw	20
  6160   0016FE  1856               	xorwf	getActualLeds@userIndex^0,w,c
  6161   001700  A4D8               	btfss	status,2,c
  6162   001702  D013               	goto	l794
  6163                           
  6164                           ;TAD_DATOS.c: 69:         for(char i = 0; i < 6; i++) {
  6165   001704  6A57               	clrf	getActualLeds@i^0,c
  6166   001706                     l3343:
  6167                           
  6168                           ;TAD_DATOS.c: 70:             leds[i] = configurations[index][i];
  6169   001706  507B               	movf	_index^0,w,c
  6170   001708  0D06               	mullw	6
  6171   00170A  50F3               	movf	243,w,c
  6172   00170C  0F80               	addlw	low _configurations
  6173   00170E  2457               	addwf	getActualLeds@i^0,w,c
  6174   001710  6ED9               	movwf	fsr2l,c
  6175   001712  6ADA               	clrf	fsr2h,c
  6176   001714  5055               	movf	getActualLeds@leds^0,w,c
  6177   001716  2457               	addwf	getActualLeds@i^0,w,c
  6178   001718  6EE1               	movwf	fsr1l,c
  6179   00171A  6AE2               	clrf	fsr1h,c
  6180   00171C  CFDF FFE7          	movff	indf2,indf1
  6181                           
  6182                           ;TAD_DATOS.c: 71:         }
  6183   001720  2A57               	incf	getActualLeds@i^0,f,c
  6184   001722  0E05               	movlw	5
  6185   001724  6457               	cpfsgt	getActualLeds@i^0,c
  6186   001726  D7EF               	goto	l3343
  6187   001728  0012               	return	
  6188   00172A                     l794:
  6189                           
  6190                           ;TAD_DATOS.c: 74:         for(char i = 0; i < 6; i++) {
  6191   00172A  6A58               	clrf	getActualLeds@i_912^0,c
  6192   00172C                     l3353:
  6193                           
  6194                           ;TAD_DATOS.c: 75:             leds[i] = configurations[userIndex][i];
  6195   00172C  5056               	movf	getActualLeds@userIndex^0,w,c
  6196   00172E  0D06               	mullw	6
  6197   001730  50F3               	movf	243,w,c
  6198   001732  0F80               	addlw	low _configurations
  6199   001734  2458               	addwf	getActualLeds@i_912^0,w,c
  6200   001736  6ED9               	movwf	fsr2l,c
  6201   001738  6ADA               	clrf	fsr2h,c
  6202   00173A  5055               	movf	getActualLeds@leds^0,w,c
  6203   00173C  2458               	addwf	getActualLeds@i_912^0,w,c
  6204   00173E  6EE1               	movwf	fsr1l,c
  6205   001740  6AE2               	clrf	fsr1h,c
  6206   001742  CFDF FFE7          	movff	indf2,indf1
  6207                           
  6208                           ;TAD_DATOS.c: 76:         }
  6209   001746  2A58               	incf	getActualLeds@i_912^0,f,c
  6210   001748  0E05               	movlw	5
  6211   00174A  6458               	cpfsgt	getActualLeds@i_912^0,c
  6212   00174C  D7EF               	goto	l3353
  6213   00174E  0012               	return	
  6214   001750                     __end_of_getActualLeds:
  6215                           	callstack 0
  6216                           
  6217 ;; *************** function _getCurrentUserIndex *****************
  6218 ;; Defined at:
  6219 ;;		line 227 in file "TAD_DATOS.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      unsigned char 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1
  6233 ;;      Params:         0       0       0
  6234 ;;      Locals:         0       0       0
  6235 ;;      Temps:          0       0       0
  6236 ;;      Totals:         0       0       0
  6237 ;;Total ram usage:        0 bytes
  6238 ;; Hardware stack levels used: 1
  6239 ;; Hardware stack levels required when called: 3
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_motor_RFID
  6244 ;;		_motorTerminal
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text14
  6249   001B92                     __ptext14:
  6250                           	callstack 0
  6251   001B92                     _getCurrentUserIndex:
  6252                           	callstack 26
  6253                           
  6254                           ;TAD_DATOS.c: 228:     return index;
  6255                           
  6256                           ;incstack = 0
  6257   001B92  507B               	movf	_index^0,w,c
  6258   001B94  0012               	return		;funcret
  6259   001B96                     __end_of_getCurrentUserIndex:
  6260                           	callstack 0
  6261                           
  6262 ;; *************** function _getActualUID *****************
  6263 ;; Defined at:
  6264 ;;		line 45 in file "TAD_DATOS.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6267 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  6268 ;;  userIndex       1    2[COMRAM] unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  i               1    3[COMRAM] unsigned char 
  6271 ;;  i               1    4[COMRAM] unsigned char 
  6272 ;;  i               1    5[COMRAM] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1
  6282 ;;      Params:         2       0       0
  6283 ;;      Locals:         3       0       0
  6284 ;;      Temps:          0       0       0
  6285 ;;      Totals:         5       0       0
  6286 ;;Total ram usage:        5 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 3
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_motor_RFID
  6293 ;;		_motorTerminal
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text15
  6298   001498                     __ptext15:
  6299                           	callstack 0
  6300   001498                     _getActualUID:
  6301                           	callstack 26
  6302                           
  6303                           ;TAD_DATOS.c: 46:     if(!UID) return;
  6304                           
  6305                           ;incstack = 0
  6306   001498  5055               	movf	getActualUID@UID^0,w,c
  6307   00149A  B4D8               	btfsc	status,2,c
  6308   00149C  0012               	return	
  6309                           
  6310                           ;TAD_DATOS.c: 47:     if (userIndex == 0xFF) {
  6311   00149E  2856               	incf	getActualUID@userIndex^0,w,c
  6312   0014A0  A4D8               	btfss	status,2,c
  6313   0014A2  D01E               	goto	l780
  6314                           
  6315                           ;TAD_DATOS.c: 48:         if (currentUser[0]) {
  6316   0014A4  503F               	movf	_currentUser^0,w,c
  6317   0014A6  B4D8               	btfsc	status,2,c
  6318   0014A8  D010               	goto	l781
  6319                           
  6320                           ;TAD_DATOS.c: 49:             for(unsigned char i = 0; i < 5; i++) {
  6321   0014AA  6A58               	clrf	getActualUID@i^0,c
  6322   0014AC                     l3775:
  6323                           
  6324                           ;TAD_DATOS.c: 50:                 UID[i] = currentUser[i];
  6325   0014AC  5058               	movf	getActualUID@i^0,w,c
  6326   0014AE  0F3F               	addlw	low _currentUser
  6327   0014B0  6ED9               	movwf	fsr2l,c
  6328   0014B2  6ADA               	clrf	fsr2h,c
  6329   0014B4  5055               	movf	getActualUID@UID^0,w,c
  6330   0014B6  2458               	addwf	getActualUID@i^0,w,c
  6331   0014B8  6EE1               	movwf	fsr1l,c
  6332   0014BA  6AE2               	clrf	fsr1h,c
  6333   0014BC  CFDF FFE7          	movff	indf2,indf1
  6334                           
  6335                           ;TAD_DATOS.c: 51:             }
  6336   0014C0  2A58               	incf	getActualUID@i^0,f,c
  6337   0014C2  0E04               	movlw	4
  6338   0014C4  6458               	cpfsgt	getActualUID@i^0,c
  6339   0014C6  D7F2               	goto	l3775
  6340   0014C8  0012               	return	
  6341   0014CA                     l781:
  6342                           
  6343                           ;TAD_DATOS.c: 53:             for(unsigned char i = 0; i < 5; i++) {
  6344   0014CA  6A57               	clrf	getActualUID@i_906^0,c
  6345   0014CC                     l3785:
  6346                           
  6347                           ;TAD_DATOS.c: 54:                 UID[i] = 0x00;
  6348   0014CC  5055               	movf	getActualUID@UID^0,w,c
  6349   0014CE  2457               	addwf	getActualUID@i_906^0,w,c
  6350   0014D0  6ED9               	movwf	fsr2l,c
  6351   0014D2  6ADA               	clrf	fsr2h,c
  6352   0014D4  6ADF               	clrf	indf2,c
  6353                           
  6354                           ;TAD_DATOS.c: 55:             }
  6355   0014D6  2A57               	incf	getActualUID@i_906^0,f,c
  6356   0014D8  0E04               	movlw	4
  6357   0014DA  6457               	cpfsgt	getActualUID@i_906^0,c
  6358   0014DC  D7F7               	goto	l3785
  6359   0014DE  0012               	return	
  6360   0014E0                     l780:
  6361                           
  6362                           ;TAD_DATOS.c: 58:         for(unsigned char i = 0; i < 5; i++) {
  6363   0014E0  6A59               	clrf	getActualUID@i_907^0,c
  6364   0014E2                     l3795:
  6365                           
  6366                           ;TAD_DATOS.c: 59:             UID[i] = userUIDs[userIndex][i];
  6367   0014E2  5056               	movf	getActualUID@userIndex^0,w,c
  6368   0014E4  0D05               	mullw	5
  6369   0014E6  50F3               	movf	243,w,c
  6370   0014E8  0FC3               	addlw	low _userUIDs
  6371   0014EA  2459               	addwf	getActualUID@i_907^0,w,c
  6372   0014EC  6ED9               	movwf	fsr2l,c
  6373   0014EE  6ADA               	clrf	fsr2h,c
  6374   0014F0  5055               	movf	getActualUID@UID^0,w,c
  6375   0014F2  2459               	addwf	getActualUID@i_907^0,w,c
  6376   0014F4  6EE1               	movwf	fsr1l,c
  6377   0014F6  6AE2               	clrf	fsr1h,c
  6378   0014F8  CFDF FFE7          	movff	indf2,indf1
  6379                           
  6380                           ;TAD_DATOS.c: 60:         }
  6381   0014FC  2A59               	incf	getActualUID@i_907^0,f,c
  6382   0014FE  0E04               	movlw	4
  6383   001500  6459               	cpfsgt	getActualUID@i_907^0,c
  6384   001502  D7EF               	goto	l3795
  6385   001504  0012               	return	
  6386   001506                     __end_of_getActualUID:
  6387                           	callstack 0
  6388                           
  6389 ;; *************** function _Terminal_SendChar *****************
  6390 ;; Defined at:
  6391 ;;		line 24 in file "TAD_TERMINAL.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  c               1    wreg     unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  c               1    4[COMRAM] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      void 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1
  6405 ;;      Params:         0       0       0
  6406 ;;      Locals:         1       0       0
  6407 ;;      Temps:          0       0       0
  6408 ;;      Totals:         1       0       0
  6409 ;;Total ram usage:        1 bytes
  6410 ;; Hardware stack levels used: 1
  6411 ;; Hardware stack levels required when called: 4
  6412 ;; This function calls:
  6413 ;;		_Terminal_TXAvailable
  6414 ;; This function is called by:
  6415 ;;		_motorTerminal
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text16
  6420   001B00                     __ptext16:
  6421                           	callstack 0
  6422   001B00                     _Terminal_SendChar:
  6423                           	callstack 25
  6424                           
  6425                           ;incstack = 0
  6426                           ;Terminal_SendChar@c stored from wreg
  6427   001B00  6E58               	movwf	Terminal_SendChar@c^0,c
  6428   001B02                     
  6429                           ;TAD_TERMINAL.c: 25:  while (!Terminal_TXAvailable());
  6430   001B02  EC8A  F00D         	call	_Terminal_TXAvailable	;wreg free
  6431   001B06  5055               	movf	?_Terminal_TXAvailable^0,w,c
  6432   001B08  1056               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6433   001B0A  B4D8               	btfsc	status,2,c
  6434   001B0C  D7FA               	goto	l3949
  6435                           
  6436                           ;TAD_TERMINAL.c: 26:  TXREG = c;
  6437   001B0E  C058  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  6438   001B12  0012               	return		;funcret
  6439   001B14                     __end_of_Terminal_SendChar:
  6440                           	callstack 0
  6441                           
  6442 ;; *************** function _Terminal_ReceiveChar *****************
  6443 ;; Defined at:
  6444 ;;		line 21 in file "TAD_TERMINAL.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      unsigned char 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1
  6458 ;;      Params:         0       0       0
  6459 ;;      Locals:         0       0       0
  6460 ;;      Temps:          0       0       0
  6461 ;;      Totals:         0       0       0
  6462 ;;Total ram usage:        0 bytes
  6463 ;; Hardware stack levels used: 1
  6464 ;; Hardware stack levels required when called: 3
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_motorTerminal
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text17
  6473   001B96                     __ptext17:
  6474                           	callstack 0
  6475   001B96                     _Terminal_ReceiveChar:
  6476                           	callstack 26
  6477                           
  6478                           ;incstack = 0
  6479   001B96  50AE               	movf	174,w,c	;volatile
  6480   001B98  0012               	return		;funcret
  6481   001B9A                     __end_of_Terminal_ReceiveChar:
  6482                           	callstack 0
  6483                           
  6484 ;; *************** function _Terminal_RXAvailable *****************
  6485 ;; Defined at:
  6486 ;;		line 20 in file "TAD_TERMINAL.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      unsigned char 
  6493 ;; Registers used:
  6494 ;;		wreg
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1
  6500 ;;      Params:         0       0       0
  6501 ;;      Locals:         0       0       0
  6502 ;;      Temps:          0       0       0
  6503 ;;      Totals:         0       0       0
  6504 ;;Total ram usage:        0 bytes
  6505 ;; Hardware stack levels used: 1
  6506 ;; Hardware stack levels required when called: 3
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_motorTerminal
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text18
  6515   001B5A                     __ptext18:
  6516                           	callstack 0
  6517   001B5A                     _Terminal_RXAvailable:
  6518                           	callstack 26
  6519                           
  6520                           ;incstack = 0
  6521   001B5A  AA9E               	btfss	158,5,c	;volatile
  6522   001B5C  D002               	goto	u3330
  6523   001B5E  0E01               	movlw	1
  6524   001B60  0012               	return	
  6525   001B62                     u3330:
  6526   001B62  0E00               	movlw	0
  6527   001B64  0012               	return		;funcret
  6528   001B66                     __end_of_Terminal_RXAvailable:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function _motorTeclado *****************
  6532 ;; Defined at:
  6533 ;;		line 72 in file "TAD_TECLADO.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1
  6547 ;;      Params:         0       0       0
  6548 ;;      Locals:         0       0       0
  6549 ;;      Temps:          0       0       0
  6550 ;;      Totals:         0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used: 1
  6553 ;; Hardware stack levels required when called: 7
  6554 ;; This function calls:
  6555 ;;		_GetTecla
  6556 ;;		_TI_GetTics
  6557 ;;		_TI_ResetTics
  6558 ;;		_hashtag_pressed3s
  6559 ;;		_motor_StartSendString
  6560 ;;		_resetData
  6561 ;;		_setLed
  6562 ;;		_setStartSendString
  6563 ;;		_writeColumnas
  6564 ;; This function is called by:
  6565 ;;		_main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text19
  6570   000CE6                     __ptext19:
  6571                           	callstack 0
  6572   000CE6                     _motorTeclado:
  6573                           	callstack 23
  6574                           
  6575                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  6576                           
  6577                           ;incstack = 0
  6578   000CE6  5083               	movf	131,w,c	;volatile
  6579   000CE8  0B0F               	andlw	15
  6580   000CEA  6E26               	movwf	_Filas^0,c
  6581                           
  6582                           ;TAD_TECLADO.c: 76:     switch(state) {
  6583   000CEC  D074               	goto	l4205
  6584   000CEE                     l4123:
  6585                           
  6586                           ;TAD_TECLADO.c: 78:             if (Filas) {
  6587   000CEE  5026               	movf	_Filas^0,w,c
  6588   000CF0  B4D8               	btfsc	status,2,c
  6589   000CF2  D006               	goto	l575
  6590                           
  6591                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer_teclado);
  6592   000CF4  5049               	movf	_timer_teclado^0,w,c
  6593   000CF6  EC14  F00D         	call	_TI_ResetTics
  6594   000CFA                     l4127:
  6595                           
  6596                           ;TAD_TECLADO.c: 80:                 state = 3;
  6597   000CFA  0E03               	movlw	3
  6598   000CFC  6E23               	movwf	_state^0,c
  6599                           
  6600                           ;TAD_TECLADO.c: 81:             } else {
  6601   000CFE  0012               	return	
  6602   000D00                     l575:
  6603                           
  6604                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  6605   000D00  6A25               	clrf	_Columnas^0,c
  6606                           
  6607                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  6608   000D02  EC44  F00D         	call	_writeColumnas	;wreg free
  6609                           
  6610                           ;TAD_TECLADO.c: 84:                 state = 1;
  6611   000D06  0E01               	movlw	1
  6612   000D08  6E23               	movwf	_state^0,c
  6613   000D0A  0012               	return	
  6614   000D0C                     l4133:
  6615                           
  6616                           ;TAD_TECLADO.c: 89:             if (Filas) {
  6617   000D0C  5026               	movf	_Filas^0,w,c
  6618   000D0E  B4D8               	btfsc	status,2,c
  6619   000D10  D004               	goto	l4139
  6620                           
  6621                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer_teclado);
  6622   000D12  5049               	movf	_timer_teclado^0,w,c
  6623   000D14  EC14  F00D         	call	_TI_ResetTics
  6624   000D18  D7F0               	goto	l4127
  6625   000D1A                     l4139:
  6626                           
  6627                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  6628   000D1A  0E01               	movlw	1
  6629   000D1C  6E25               	movwf	_Columnas^0,c
  6630                           
  6631                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  6632   000D1E  EC44  F00D         	call	_writeColumnas	;wreg free
  6633                           
  6634                           ;TAD_TECLADO.c: 95:                 state = 2;
  6635   000D22  0E02               	movlw	2
  6636   000D24  6E23               	movwf	_state^0,c
  6637   000D26  0012               	return	
  6638   000D28                     l4145:
  6639                           
  6640                           ;TAD_TECLADO.c: 100:             if (Filas) {
  6641   000D28  5026               	movf	_Filas^0,w,c
  6642   000D2A  B4D8               	btfsc	status,2,c
  6643   000D2C  D004               	goto	l4151
  6644                           
  6645                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer_teclado);
  6646   000D2E  5049               	movf	_timer_teclado^0,w,c
  6647   000D30  EC14  F00D         	call	_TI_ResetTics
  6648   000D34  D7E2               	goto	l4127
  6649   000D36                     l4151:
  6650                           
  6651                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6652   000D36  0E02               	movlw	2
  6653   000D38  6E25               	movwf	_Columnas^0,c
  6654                           
  6655                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6656   000D3A  EC44  F00D         	call	_writeColumnas	;wreg free
  6657                           
  6658                           ;TAD_TECLADO.c: 106:                 state = 0;
  6659   000D3E  6A23               	clrf	_state^0,c
  6660   000D40  0012               	return	
  6661   000D42                     l4157:
  6662                           
  6663                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6664   000D42  EC1D  F00B         	call	_GetTecla	;wreg free
  6665   000D46  6E24               	movwf	_tecla^0,c
  6666                           
  6667                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6668   000D48  5026               	movf	_Filas^0,w,c
  6669   000D4A  B4D8               	btfsc	status,2,c
  6670   000D4C  D7F4               	goto	l4151
  6671   000D4E  5049               	movf	_timer_teclado^0,w,c
  6672   000D50  ECF9  F00B         	call	_TI_GetTics
  6673   000D54  5058               	movf	(?_TI_GetTics+3)^0,w,c
  6674   000D56  1057               	iorwf	(?_TI_GetTics+2)^0,w,c
  6675   000D58  1056               	iorwf	(?_TI_GetTics+1)^0,w,c
  6676   000D5A  E104               	bnz	u3560
  6677   000D5C  0E05               	movlw	5
  6678   000D5E  5C55               	subwf	?_TI_GetTics^0,w,c
  6679   000D60  A0D8               	btfss	status,0,c
  6680   000D62  0012               	return	
  6681   000D64                     u3560:
  6682                           
  6683                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6684   000D64  0E0B               	movlw	11
  6685   000D66  1824               	xorwf	_tecla^0,w,c
  6686   000D68  B4D8               	btfsc	status,2,c
  6687   000D6A  D006               	goto	l4175
  6688                           
  6689                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  6690   000D6C  5024               	movf	_tecla^0,w,c
  6691   000D6E  EC5E  F00C         	call	_setLed
  6692                           
  6693                           ;TAD_TECLADO.c: 119:                     state = 5;
  6694   000D72  0E05               	movlw	5
  6695   000D74  6E23               	movwf	_state^0,c
  6696                           
  6697                           ;TAD_TECLADO.c: 120:                 } else {
  6698   000D76  0012               	return	
  6699   000D78                     l4175:
  6700                           
  6701                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer_teclado);
  6702   000D78  5049               	movf	_timer_teclado^0,w,c
  6703   000D7A  EC14  F00D         	call	_TI_ResetTics
  6704                           
  6705                           ;TAD_TECLADO.c: 122:                     state = 4;
  6706   000D7E  0E04               	movlw	4
  6707   000D80  6E23               	movwf	_state^0,c
  6708   000D82  0012               	return	
  6709   000D84                     l4179:
  6710                           
  6711                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  6712   000D84  5026               	movf	_Filas^0,w,c
  6713   000D86  A4D8               	btfss	status,2,c
  6714   000D88  D004               	goto	l4185
  6715                           
  6716                           ;TAD_TECLADO.c: 129:                 state = 0;
  6717   000D8A  6A23               	clrf	_state^0,c
  6718                           
  6719                           ;TAD_TECLADO.c: 130:                 hashtag_pressed3s();
  6720   000D8C  ECC6  F00D         	call	_hashtag_pressed3s	;wreg free
  6721                           
  6722                           ;TAD_TECLADO.c: 131:             } else if (TI_GetTics(timer_teclado) > 1500) {
  6723   000D90  0012               	return	
  6724   000D92                     l4185:
  6725   000D92  5049               	movf	_timer_teclado^0,w,c
  6726   000D94  ECF9  F00B         	call	_TI_GetTics
  6727   000D98  5058               	movf	(?_TI_GetTics+3)^0,w,c
  6728   000D9A  1057               	iorwf	(?_TI_GetTics+2)^0,w,c
  6729   000D9C  E106               	bnz	u3590
  6730   000D9E  0EDD               	movlw	221
  6731   000DA0  5C55               	subwf	?_TI_GetTics^0,w,c
  6732   000DA2  0E05               	movlw	5
  6733   000DA4  5856               	subwfb	(?_TI_GetTics+1)^0,w,c
  6734   000DA6  A0D8               	btfss	status,0,c
  6735   000DA8  0012               	return	
  6736   000DAA                     u3590:
  6737                           
  6738                           ;TAD_TECLADO.c: 132:                 state = 5;
  6739   000DAA  0E05               	movlw	5
  6740   000DAC  6E23               	movwf	_state^0,c
  6741                           
  6742                           ;TAD_TECLADO.c: 133:                 resetData();
  6743   000DAE  EC01  F00D         	call	_resetData	;wreg free
  6744                           
  6745                           ;TAD_TECLADO.c: 134:                 motor_StartSendString("S'han resetejat les dades");
  6746   000DB2  0EA4               	movlw	low STR_2
  6747   000DB4  6E59               	movwf	motor_StartSendString@str^0,c
  6748   000DB6  0E1F               	movlw	high STR_2
  6749   000DB8  6E5A               	movwf	(motor_StartSendString@str+1)^0,c
  6750   000DBA  EC50  F00D         	call	_motor_StartSendString	;wreg free
  6751                           
  6752                           ;TAD_TECLADO.c: 135:                 setStartSendString();
  6753   000DBE  ECC3  F00D         	call	_setStartSendString	;wreg free
  6754   000DC2  0012               	return	
  6755   000DC4                     l4195:
  6756                           
  6757                           ;TAD_TECLADO.c: 140:             if (!Filas) {
  6758   000DC4  5026               	movf	_Filas^0,w,c
  6759   000DC6  A4D8               	btfss	status,2,c
  6760   000DC8  0012               	return	
  6761                           
  6762                           ;TAD_TECLADO.c: 141:                 state = 0;
  6763   000DCA  6A23               	clrf	_state^0,c
  6764                           
  6765                           ;TAD_TECLADO.c: 142:                 Columnas = 2;
  6766   000DCC  0E02               	movlw	2
  6767   000DCE  6E25               	movwf	_Columnas^0,c
  6768                           
  6769                           ;TAD_TECLADO.c: 143:                 writeColumnas();
  6770   000DD0  EC44  F00D         	call	_writeColumnas	;wreg free
  6771   000DD4  0012               	return	
  6772   000DD6                     l4205:
  6773   000DD6  5023               	movf	_state^0,w,c
  6774                           
  6775                           ; Switch size 1, requested type "simple"
  6776                           ; Number of cases is 6, Range of values is 0 to 5
  6777                           ; switch strategies available:
  6778                           ; Name         Instructions Cycles
  6779                           ; simple_byte           19    10 (average)
  6780                           ;	Chosen strategy is simple_byte
  6781   000DD8  0A00               	xorlw	0	; case 0
  6782   000DDA  B4D8               	btfsc	status,2,c
  6783   000DDC  D788               	goto	l4123
  6784   000DDE  0A01               	xorlw	1	; case 1
  6785   000DE0  B4D8               	btfsc	status,2,c
  6786   000DE2  D794               	goto	l4133
  6787   000DE4  0A03               	xorlw	3	; case 2
  6788   000DE6  B4D8               	btfsc	status,2,c
  6789   000DE8  D79F               	goto	l4145
  6790   000DEA  0A01               	xorlw	1	; case 3
  6791   000DEC  B4D8               	btfsc	status,2,c
  6792   000DEE  D7A9               	goto	l4157
  6793   000DF0  0A07               	xorlw	7	; case 4
  6794   000DF2  B4D8               	btfsc	status,2,c
  6795   000DF4  D7C7               	goto	l4179
  6796   000DF6  0A01               	xorlw	1	; case 5
  6797   000DF8  A4D8               	btfss	status,2,c
  6798   000DFA  0012               	return	
  6799   000DFC  D7E3               	goto	l4195
  6800   000DFE                     __end_of_motorTeclado:
  6801                           	callstack 0
  6802                           
  6803 ;; *************** function _writeColumnas *****************
  6804 ;; Defined at:
  6805 ;;		line 43 in file "TAD_TECLADO.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;		None
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;		None
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMRAM   BANK0   BANK1
  6819 ;;      Params:         0       0       0
  6820 ;;      Locals:         0       0       0
  6821 ;;      Temps:          0       0       0
  6822 ;;      Totals:         0       0       0
  6823 ;;Total ram usage:        0 bytes
  6824 ;; Hardware stack levels used: 1
  6825 ;; Hardware stack levels required when called: 3
  6826 ;; This function calls:
  6827 ;;		Nothing
  6828 ;; This function is called by:
  6829 ;;		_motorTeclado
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           	psect	text20
  6834   001A88                     __ptext20:
  6835                           	callstack 0
  6836   001A88                     _writeColumnas:
  6837                           	callstack 26
  6838                           
  6839                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  6840                           
  6841                           ;incstack = 0
  6842   001A88  0E03               	movlw	3
  6843   001A8A  6025               	cpfslt	_Columnas^0,c
  6844   001A8C  D007               	goto	l558
  6845                           
  6846                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  6847   001A8E  5025               	movf	_Columnas^0,w,c
  6848   001A90  0F76               	addlw	low _colValues
  6849   001A92  6ED9               	movwf	fsr2l,c
  6850   001A94  6ADA               	clrf	fsr2h,c
  6851   001A96  50DF               	movf	indf2,w,c
  6852   001A98  6E8C               	movwf	140,c	;volatile
  6853                           
  6854                           ;TAD_TECLADO.c: 46:     } else {
  6855   001A9A  0012               	return	
  6856   001A9C                     l558:
  6857                           
  6858                           ;TAD_TECLADO.c: 47:         LATD = 0;
  6859   001A9C  6A8C               	clrf	140,c	;volatile
  6860   001A9E  0012               	return		;funcret
  6861   001AA0                     __end_of_writeColumnas:
  6862                           	callstack 0
  6863                           
  6864 ;; *************** function _setStartSendString *****************
  6865 ;; Defined at:
  6866 ;;		line 139 in file "TAD_TERMINAL.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1
  6880 ;;      Params:         0       0       0
  6881 ;;      Locals:         0       0       0
  6882 ;;      Temps:          0       0       0
  6883 ;;      Totals:         0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 3
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_motor_RFID
  6891 ;;		_motorTeclado
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text21
  6896   001B86                     __ptext21:
  6897                           	callstack 0
  6898   001B86                     _setStartSendString:
  6899                           	callstack 26
  6900                           
  6901                           ;TAD_TERMINAL.c: 140:  sending_string = 1;
  6902                           
  6903                           ;incstack = 0
  6904   001B86  0E01               	movlw	1
  6905   001B88  6E20               	movwf	_sending_string^0,c
  6906   001B8A  0012               	return		;funcret
  6907   001B8C                     __end_of_setStartSendString:
  6908                           	callstack 0
  6909                           
  6910 ;; *************** function _setLed *****************
  6911 ;; Defined at:
  6912 ;;		line 207 in file "TAD_DATOS.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  tecla           1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  tecla           1    4[COMRAM] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1
  6926 ;;      Params:         0       0       0
  6927 ;;      Locals:         1       0       0
  6928 ;;      Temps:          0       0       0
  6929 ;;      Totals:         1       0       0
  6930 ;;Total ram usage:        1 bytes
  6931 ;; Hardware stack levels used: 1
  6932 ;; Hardware stack levels required when called: 4
  6933 ;; This function calls:
  6934 ;;		_setLEDIntensity
  6935 ;; This function is called by:
  6936 ;;		_motorTeclado
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text22
  6941   0018BC                     __ptext22:
  6942                           	callstack 0
  6943   0018BC                     _setLed:
  6944                           	callstack 25
  6945                           
  6946                           ;incstack = 0
  6947                           ;setLed@tecla stored from wreg
  6948   0018BC  6E58               	movwf	setLed@tecla^0,c
  6949                           
  6950                           ;TAD_DATOS.c: 208:     static char modeLED = 0;;TAD_DATOS.c: 209:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 212:     if (index == 4) return;
  6951   0018BE  0E04               	movlw	4
  6952   0018C0  187B               	xorwf	_index^0,w,c
  6953   0018C2  B4D8               	btfsc	status,2,c
  6954   0018C4  0012               	return	
  6955                           
  6956                           ;TAD_DATOS.c: 214:     if(!modeLED) {
  6957   0018C6  5016               	movf	setLed@modeLED^0,w,c
  6958   0018C8  A4D8               	btfss	status,2,c
  6959   0018CA  D005               	goto	l3913
  6960                           
  6961                           ;TAD_DATOS.c: 215:         ledIndex = tecla - 1;
  6962   0018CC  0458               	decf	setLed@tecla^0,w,c
  6963   0018CE  6E15               	movwf	setLed@ledIndex^0,c
  6964                           
  6965                           ;TAD_DATOS.c: 216:         modeLED = 1;
  6966   0018D0  0E01               	movlw	1
  6967   0018D2  6E16               	movwf	setLed@modeLED^0,c
  6968                           
  6969                           ;TAD_DATOS.c: 217:     } else {
  6970   0018D4  0012               	return	
  6971   0018D6                     l3913:
  6972                           
  6973                           ;TAD_DATOS.c: 218:         if (index < 4) {
  6974   0018D6  0E04               	movlw	4
  6975   0018D8  607B               	cpfslt	_index^0,c
  6976   0018DA  D009               	goto	l3919
  6977                           
  6978                           ;TAD_DATOS.c: 219:             setLEDIntensity(index, ledIndex, tecla);
  6979   0018DC  C015  F055         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  6980   0018E0  C058  F056         	movff	setLed@tecla,setLEDIntensity@intensity
  6981   0018E4  507B               	movf	_index^0,w,c
  6982   0018E6  ECDA  F00C         	call	_setLEDIntensity
  6983                           
  6984                           ;TAD_DATOS.c: 220:             new_configuration = 1;
  6985   0018EA  0E01               	movlw	1
  6986   0018EC  6E1C               	movwf	_new_configuration^0,c
  6987   0018EE                     l3919:
  6988                           
  6989                           ;TAD_DATOS.c: 222:         modeLED = 0;
  6990   0018EE  6A16               	clrf	setLed@modeLED^0,c
  6991   0018F0  0012               	return		;funcret
  6992   0018F2                     __end_of_setLed:
  6993                           	callstack 0
  6994                           
  6995 ;; *************** function _setLEDIntensity *****************
  6996 ;; Defined at:
  6997 ;;		line 200 in file "TAD_DATOS.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  userIndex       1    wreg     unsigned char 
  7000 ;;  ledIndex        1    1[COMRAM] unsigned char 
  7001 ;;  intensity       1    2[COMRAM] unsigned char 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  userIndex       1    3[COMRAM] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1
  7013 ;;      Params:         2       0       0
  7014 ;;      Locals:         1       0       0
  7015 ;;      Temps:          0       0       0
  7016 ;;      Totals:         3       0       0
  7017 ;;Total ram usage:        3 bytes
  7018 ;; Hardware stack levels used: 1
  7019 ;; Hardware stack levels required when called: 3
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_setLed
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text23
  7028   0019B4                     __ptext23:
  7029                           	callstack 0
  7030   0019B4                     _setLEDIntensity:
  7031                           	callstack 25
  7032                           
  7033                           ;incstack = 0
  7034                           ;setLEDIntensity@userIndex stored from wreg
  7035   0019B4  6E57               	movwf	setLEDIntensity@userIndex^0,c
  7036                           
  7037                           ;TAD_DATOS.c: 201:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  7038   0019B6  0E04               	movlw	4
  7039   0019B8  6057               	cpfslt	setLEDIntensity@userIndex^0,c
  7040   0019BA  0012               	return	
  7041   0019BC  0E06               	movlw	6
  7042   0019BE  6055               	cpfslt	setLEDIntensity@ledIndex^0,c
  7043   0019C0  0012               	return	
  7044   0019C2  0E0B               	movlw	11
  7045   0019C4  6056               	cpfslt	setLEDIntensity@intensity^0,c
  7046   0019C6  0012               	return	
  7047                           
  7048                           ;TAD_DATOS.c: 202:         configurations[userIndex][ledIndex] = intensity;
  7049   0019C8  5057               	movf	setLEDIntensity@userIndex^0,w,c
  7050   0019CA  0D06               	mullw	6
  7051   0019CC  50F3               	movf	243,w,c
  7052   0019CE  0F80               	addlw	low _configurations
  7053   0019D0  2455               	addwf	setLEDIntensity@ledIndex^0,w,c
  7054   0019D2  6ED9               	movwf	fsr2l,c
  7055   0019D4  6ADA               	clrf	fsr2h,c
  7056   0019D6  C056  FFDF         	movff	setLEDIntensity@intensity,indf2
  7057   0019DA  0012               	return		;funcret
  7058   0019DC                     __end_of_setLEDIntensity:
  7059                           	callstack 0
  7060                           
  7061 ;; *************** function _resetData *****************
  7062 ;; Defined at:
  7063 ;;		line 37 in file "TAD_DATOS.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;		None
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  j               1    2[COMRAM] unsigned char 
  7068 ;;  i               1    1[COMRAM] unsigned char 
  7069 ;; Return value:  Size  Location     Type
  7070 ;;                  1    wreg      void 
  7071 ;; Registers used:
  7072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1
  7078 ;;      Params:         0       0       0
  7079 ;;      Locals:         2       0       0
  7080 ;;      Temps:          0       0       0
  7081 ;;      Totals:         2       0       0
  7082 ;;Total ram usage:        2 bytes
  7083 ;; Hardware stack levels used: 1
  7084 ;; Hardware stack levels required when called: 3
  7085 ;; This function calls:
  7086 ;;		Nothing
  7087 ;; This function is called by:
  7088 ;;		_motorTeclado
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           	psect	text24
  7093   001A02                     __ptext24:
  7094                           	callstack 0
  7095   001A02                     _resetData:
  7096                           	callstack 26
  7097                           
  7098                           ;TAD_DATOS.c: 38:     for (unsigned char i = 0; i < 4; i++) {
  7099                           
  7100                           ;incstack = 0
  7101   001A02  6A55               	clrf	resetData@i^0,c
  7102   001A04                     l771:
  7103                           
  7104                           ;TAD_DATOS.c: 39:         for (unsigned char j = 0; j < 6; j++) {
  7105   001A04  6A56               	clrf	resetData@j^0,c
  7106   001A06                     l3931:
  7107                           
  7108                           ;TAD_DATOS.c: 40:             configurations[i][j] = 0;
  7109   001A06  5055               	movf	resetData@i^0,w,c
  7110   001A08  0D06               	mullw	6
  7111   001A0A  50F3               	movf	243,w,c
  7112   001A0C  0F80               	addlw	low _configurations
  7113   001A0E  2456               	addwf	resetData@j^0,w,c
  7114   001A10  6ED9               	movwf	fsr2l,c
  7115   001A12  6ADA               	clrf	fsr2h,c
  7116   001A14  6ADF               	clrf	indf2,c
  7117                           
  7118                           ;TAD_DATOS.c: 41:         }
  7119   001A16  2A56               	incf	resetData@j^0,f,c
  7120   001A18  0E05               	movlw	5
  7121   001A1A  6456               	cpfsgt	resetData@j^0,c
  7122   001A1C  D7F4               	goto	l3931
  7123                           
  7124                           ;TAD_DATOS.c: 42:     }
  7125   001A1E  2A55               	incf	resetData@i^0,f,c
  7126   001A20  0E03               	movlw	3
  7127   001A22  6455               	cpfsgt	resetData@i^0,c
  7128   001A24  D7EF               	goto	l771
  7129   001A26  0012               	return	
  7130   001A28                     __end_of_resetData:
  7131                           	callstack 0
  7132                           
  7133 ;; *************** function _motor_StartSendString *****************
  7134 ;; Defined at:
  7135 ;;		line 50 in file "TAD_TERMINAL.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  str             2    5[COMRAM] PTR const unsigned char 
  7138 ;;		 -> STR_16(33), STR_15(33), STR_14(3), STR_12(18), 
  7139 ;;		 -> STR_11(3), STR_10(33), STR_8(33), STR_7(3), 
  7140 ;;		 -> STR_6(95), STR_5(53), STR_4(18), STR_3(30), 
  7141 ;;		 -> printfUID@buffer(80), STR_2(26), STR_1(34), 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1
  7153 ;;      Params:         2       0       0
  7154 ;;      Locals:         0       0       0
  7155 ;;      Temps:          0       0       0
  7156 ;;      Totals:         2       0       0
  7157 ;;Total ram usage:        2 bytes
  7158 ;; Hardware stack levels used: 1
  7159 ;; Hardware stack levels required when called: 6
  7160 ;; This function calls:
  7161 ;;		_motor_SendString
  7162 ;; This function is called by:
  7163 ;;		_motor_RFID
  7164 ;;		_motorTeclado
  7165 ;;		_printfUID
  7166 ;;		_motorTerminal
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text25
  7171   001AA0                     __ptext25:
  7172                           	callstack 0
  7173   001AA0                     _motor_StartSendString:
  7174                           	callstack 21
  7175                           
  7176                           ;TAD_TERMINAL.c: 51:  if (motor_SendString() == 1) {
  7177                           
  7178                           ;incstack = 0
  7179   001AA0  EC13  F00A         	call	_motor_SendString	;wreg free
  7180   001AA4  06E8               	decf	wreg,f,c
  7181   001AA6  A4D8               	btfss	status,2,c
  7182   001AA8  0012               	return	
  7183                           
  7184                           ;TAD_TERMINAL.c: 52:   str_ptr = str;
  7185   001AAA  C059  F00F         	movff	motor_StartSendString@str,_str_ptr
  7186   001AAE  C05A  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  7187                           
  7188                           ;TAD_TERMINAL.c: 53:   state_str = 1;
  7189   001AB2  0E01               	movlw	1
  7190   001AB4  6E22               	movwf	_state_str^0,c
  7191   001AB6  0012               	return		;funcret
  7192   001AB8                     __end_of_motor_StartSendString:
  7193                           	callstack 0
  7194                           
  7195 ;; *************** function _motor_SendString *****************
  7196 ;; Defined at:
  7197 ;;		line 36 in file "TAD_TERMINAL.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      unsigned char 
  7204 ;; Registers used:
  7205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1
  7211 ;;      Params:         0       0       0
  7212 ;;      Locals:         0       0       0
  7213 ;;      Temps:          0       0       0
  7214 ;;      Totals:         0       0       0
  7215 ;;Total ram usage:        0 bytes
  7216 ;; Hardware stack levels used: 1
  7217 ;; Hardware stack levels required when called: 5
  7218 ;; This function calls:
  7219 ;;		_motor_SendChar
  7220 ;; This function is called by:
  7221 ;;		_motor_StartSendString
  7222 ;;		_motorTerminal
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text26
  7227   001426                     __ptext26:
  7228                           	callstack 0
  7229   001426                     _motor_SendString:
  7230                           	callstack 21
  7231                           
  7232                           ;TAD_TERMINAL.c: 37:     switch(state_str) {
  7233                           
  7234                           ;incstack = 0
  7235   001426  D030               	goto	l3305
  7236   001428                     l3283:
  7237   001428  0E01               	movlw	1
  7238   00142A  0012               	return	
  7239   00142C                     l3287:
  7240                           
  7241                           ;TAD_TERMINAL.c: 40:    if (!*str_ptr) {
  7242   00142C  C00F  FFF6         	movff	_str_ptr,tblptrl
  7243   001430  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7244   001434  6AF8               	clrf	tblptru,c
  7245   001436  0E01               	movlw	(high __ramtop+-1)
  7246   001438  64F7               	cpfsgt	tblptrh,c
  7247   00143A  D003               	bra	u2477
  7248   00143C  0008               	tblrd		*
  7249   00143E  50F5               	movf	tablat,w,c
  7250   001440  D005               	bra	u2470
  7251   001442                     u2477:
  7252   001442  CFF6 FFE1          	movff	tblptrl,fsr1l
  7253   001446  CFF7 FFE2          	movff	tblptrh,fsr1h
  7254   00144A  50E7               	movf	indf1,w,c
  7255   00144C                     u2470:
  7256   00144C  0900               	iorlw	0
  7257   00144E  A4D8               	btfss	status,2,c
  7258   001450  D002               	goto	l3295
  7259                           
  7260                           ;TAD_TERMINAL.c: 41:     state_str = 0;
  7261   001452  6A22               	clrf	_state_str^0,c
  7262   001454  D7E9               	goto	l3283
  7263   001456                     l3295:
  7264                           
  7265                           ;TAD_TERMINAL.c: 44:    if (motor_SendChar(*str_ptr)) str_ptr++;
  7266   001456  C00F  FFF6         	movff	_str_ptr,tblptrl
  7267   00145A  C010  FFF7         	movff	_str_ptr+1,tblptrh
  7268   00145E  6AF8               	clrf	tblptru,c
  7269   001460  0E01               	movlw	(high __ramtop+-1)
  7270   001462  64F7               	cpfsgt	tblptrh,c
  7271   001464  D003               	bra	u2497
  7272   001466  0008               	tblrd		*
  7273   001468  50F5               	movf	tablat,w,c
  7274   00146A  D005               	bra	u2490
  7275   00146C                     u2497:
  7276   00146C  CFF6 FFE1          	movff	tblptrl,fsr1l
  7277   001470  CFF7 FFE2          	movff	tblptrh,fsr1h
  7278   001474  50E7               	movf	indf1,w,c
  7279   001476                     u2490:
  7280   001476  EC37  F00D         	call	_motor_SendChar
  7281   00147A  0900               	iorlw	0
  7282   00147C  B4D8               	btfsc	status,2,c
  7283   00147E  D002               	goto	l3299
  7284   001480  4A0F               	infsnz	_str_ptr^0,f,c
  7285   001482  2A10               	incf	(_str_ptr+1)^0,f,c
  7286   001484                     l3299:
  7287                           
  7288                           ;TAD_TERMINAL.c: 45:    return 0;
  7289   001484  0E00               	movlw	0
  7290   001486  0012               	return	
  7291   001488                     l3305:
  7292   001488  5022               	movf	_state_str^0,w,c
  7293                           
  7294                           ; Switch size 1, requested type "simple"
  7295                           ; Number of cases is 2, Range of values is 0 to 1
  7296                           ; switch strategies available:
  7297                           ; Name         Instructions Cycles
  7298                           ; simple_byte            7     4 (average)
  7299                           ;	Chosen strategy is simple_byte
  7300   00148A  0A00               	xorlw	0	; case 0
  7301   00148C  B4D8               	btfsc	status,2,c
  7302   00148E  D7CC               	goto	l3283
  7303   001490  0A01               	xorlw	1	; case 1
  7304   001492  B4D8               	btfsc	status,2,c
  7305   001494  D7CB               	goto	l3287
  7306   001496  D7F6               	goto	l3299
  7307   001498                     __end_of_motor_SendString:
  7308                           	callstack 0
  7309                           
  7310 ;; *************** function _motor_SendChar *****************
  7311 ;; Defined at:
  7312 ;;		line 29 in file "TAD_TERMINAL.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  c               1    wreg     unsigned char 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  c               1    4[COMRAM] unsigned char 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      unsigned char 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1
  7326 ;;      Params:         0       0       0
  7327 ;;      Locals:         1       0       0
  7328 ;;      Temps:          0       0       0
  7329 ;;      Totals:         1       0       0
  7330 ;;Total ram usage:        1 bytes
  7331 ;; Hardware stack levels used: 1
  7332 ;; Hardware stack levels required when called: 4
  7333 ;; This function calls:
  7334 ;;		_Terminal_TXAvailable
  7335 ;; This function is called by:
  7336 ;;		_motor_SendString
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text27
  7341   001A6E                     __ptext27:
  7342                           	callstack 0
  7343   001A6E                     _motor_SendChar:
  7344                           	callstack 21
  7345                           
  7346                           ;incstack = 0
  7347                           ;motor_SendChar@c stored from wreg
  7348   001A6E  6E58               	movwf	motor_SendChar@c^0,c
  7349                           
  7350                           ;TAD_TERMINAL.c: 30:  if (!Terminal_TXAvailable()) return 0;
  7351   001A70  EC8A  F00D         	call	_Terminal_TXAvailable	;wreg free
  7352   001A74  5055               	movf	?_Terminal_TXAvailable^0,w,c
  7353   001A76  1056               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  7354   001A78  A4D8               	btfss	status,2,c
  7355   001A7A  D002               	goto	l647
  7356   001A7C  0E00               	movlw	0
  7357   001A7E  0012               	return	
  7358   001A80                     l647:
  7359                           
  7360                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  7361   001A80  C058  FFAD         	movff	motor_SendChar@c,4013	;volatile
  7362                           
  7363                           ;TAD_TERMINAL.c: 32:  return 1;
  7364   001A84  0E01               	movlw	1
  7365   001A86  0012               	return		;funcret
  7366   001A88                     __end_of_motor_SendChar:
  7367                           	callstack 0
  7368                           
  7369 ;; *************** function _Terminal_TXAvailable *****************
  7370 ;; Defined at:
  7371 ;;		line 19 in file "TAD_TERMINAL.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  2    1[COMRAM] int 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1
  7385 ;;      Params:         2       0       0
  7386 ;;      Locals:         0       0       0
  7387 ;;      Temps:          1       0       0
  7388 ;;      Totals:         3       0       0
  7389 ;;Total ram usage:        3 bytes
  7390 ;; Hardware stack levels used: 1
  7391 ;; Hardware stack levels required when called: 3
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_Terminal_SendChar
  7396 ;;		_motor_SendChar
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text28
  7401   001B14                     __ptext28:
  7402                           	callstack 0
  7403   001B14                     _Terminal_TXAvailable:
  7404                           	callstack 21
  7405                           
  7406                           ;incstack = 0
  7407   001B14  A89E               	btfss	158,4,c	;volatile
  7408   001B16  D003               	goto	u2280
  7409   001B18  6A57               	clrf	??_Terminal_TXAvailable^0,c
  7410   001B1A  2A57               	incf	??_Terminal_TXAvailable^0,f,c
  7411   001B1C  D001               	goto	u2288
  7412   001B1E                     u2280:
  7413   001B1E  6A57               	clrf	??_Terminal_TXAvailable^0,c
  7414   001B20                     u2288:
  7415   001B20  5057               	movf	??_Terminal_TXAvailable^0,w,c
  7416   001B22  6E55               	movwf	?_Terminal_TXAvailable^0,c
  7417   001B24  6A56               	clrf	(?_Terminal_TXAvailable+1)^0,c
  7418   001B26  0012               	return		;funcret
  7419   001B28                     __end_of_Terminal_TXAvailable:
  7420                           	callstack 0
  7421                           
  7422 ;; *************** function _hashtag_pressed3s *****************
  7423 ;; Defined at:
  7424 ;;		line 57 in file "TAD_TERMINAL.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;		None
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;		None
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  1    wreg      void 
  7431 ;; Registers used:
  7432 ;;		wreg, status,2
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1
  7438 ;;      Params:         0       0       0
  7439 ;;      Locals:         0       0       0
  7440 ;;      Temps:          0       0       0
  7441 ;;      Totals:         0       0       0
  7442 ;;Total ram usage:        0 bytes
  7443 ;; Hardware stack levels used: 1
  7444 ;; Hardware stack levels required when called: 3
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_motorTeclado
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text29
  7453   001B8C                     __ptext29:
  7454                           	callstack 0
  7455   001B8C                     _hashtag_pressed3s:
  7456                           	callstack 26
  7457                           
  7458                           ;incstack = 0
  7459   001B8C  0E01               	movlw	1
  7460   001B8E  6E21               	movwf	_hashtag_pressed^0,c
  7461   001B90  0012               	return		;funcret
  7462   001B92                     __end_of_hashtag_pressed3s:
  7463                           	callstack 0
  7464                           
  7465 ;; *************** function _GetTecla *****************
  7466 ;; Defined at:
  7467 ;;		line 52 in file "TAD_TECLADO.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;  fila            1    4[COMRAM] unsigned char 
  7472 ;;  columna         1    3[COMRAM] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1
  7482 ;;      Params:         0       0       0
  7483 ;;      Locals:         2       0       0
  7484 ;;      Temps:          2       0       0
  7485 ;;      Totals:         4       0       0
  7486 ;;Total ram usage:        4 bytes
  7487 ;; Hardware stack levels used: 1
  7488 ;; Hardware stack levels required when called: 3
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		_motorTeclado
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text30
  7497   00163A                     __ptext30:
  7498                           	callstack 0
  7499   00163A                     _GetTecla:
  7500                           	callstack 26
  7501                           
  7502                           ;incstack = 0
  7503   00163A  6A57               	clrf	GetTecla@columna^0,c
  7504                           
  7505                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  7506   00163C  D00B               	goto	l2283
  7507   00163E                     l564:
  7508   00163E  6A58               	clrf	GetTecla@fila^0,c
  7509   001640  D017               	goto	l565
  7510   001642                     l2271:
  7511   001642  0E01               	movlw	1
  7512   001644  D003               	goto	L16
  7513   001646                     l2273:
  7514   001646  0E02               	movlw	2
  7515   001648  D001               	goto	L16
  7516   00164A                     l2275:
  7517   00164A  0E03               	movlw	3
  7518   00164C                     L16:
  7519   00164C  6E58               	movwf	GetTecla@fila^0,c
  7520   00164E  D010               	goto	l565
  7521   001650                     l2277:
  7522   001650  0EFF               	movlw	255
  7523   001652  0012               	return	
  7524   001654                     l2283:
  7525   001654  5026               	movf	_Filas^0,w,c
  7526                           
  7527                           ; Switch size 1, requested type "simple"
  7528                           ; Number of cases is 4, Range of values is 1 to 8
  7529                           ; switch strategies available:
  7530                           ; Name         Instructions Cycles
  7531                           ; simple_byte           13     7 (average)
  7532                           ;	Chosen strategy is simple_byte
  7533   001656  0A01               	xorlw	1	; case 1
  7534   001658  B4D8               	btfsc	status,2,c
  7535   00165A  D7F1               	goto	l564
  7536   00165C  0A03               	xorlw	3	; case 2
  7537   00165E  B4D8               	btfsc	status,2,c
  7538   001660  D7F0               	goto	l2271
  7539   001662  0A06               	xorlw	6	; case 4
  7540   001664  B4D8               	btfsc	status,2,c
  7541   001666  D7EF               	goto	l2273
  7542   001668  0A0C               	xorlw	12	; case 8
  7543   00166A  B4D8               	btfsc	status,2,c
  7544   00166C  D7EE               	goto	l2275
  7545   00166E  D7F0               	goto	l2277
  7546   001670                     l565:
  7547                           
  7548                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  7549   001670  C025  F057         	movff	_Columnas,GetTecla@columna
  7550                           
  7551                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  7552   001674  5058               	movf	GetTecla@fila^0,w,c
  7553   001676  0D03               	mullw	3
  7554   001678  0E40               	movlw	low _keymap
  7555   00167A  24F3               	addwf	243,w,c
  7556   00167C  6E55               	movwf	??_GetTecla^0,c
  7557   00167E  0E1E               	movlw	high _keymap
  7558   001680  20F4               	addwfc	prodh,w,c
  7559   001682  6E56               	movwf	(??_GetTecla+1)^0,c
  7560   001684  5057               	movf	GetTecla@columna^0,w,c
  7561   001686  2655               	addwf	??_GetTecla^0,f,c
  7562   001688  0E00               	movlw	0
  7563   00168A  2256               	addwfc	(??_GetTecla+1)^0,f,c
  7564   00168C  C055  FFF6         	movff	??_GetTecla,tblptrl
  7565   001690  C056  FFF7         	movff	??_GetTecla+1,tblptrh
  7566   001694                     	if	0	;tblptru may be non-zero
  7567   001694                     	endif
  7568   001694                     	if	0	;tblptru may be non-zero
  7569   001694                     	endif
  7570   001694  0008               	tblrd		*
  7571   001696  50F5               	movf	tablat,w,c
  7572   001698  0012               	return		;funcret
  7573   00169A                     __end_of_GetTecla:
  7574                           	callstack 0
  7575                           
  7576 ;; *************** function _initTeclado *****************
  7577 ;; Defined at:
  7578 ;;		line 30 in file "TAD_TECLADO.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      void 
  7585 ;; Registers used:
  7586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1
  7592 ;;      Params:         0       0       0
  7593 ;;      Locals:         0       0       0
  7594 ;;      Temps:          0       0       0
  7595 ;;      Totals:         0       0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used: 1
  7598 ;; Hardware stack levels required when called: 4
  7599 ;; This function calls:
  7600 ;;		_TI_NewTimer
  7601 ;; This function is called by:
  7602 ;;		_main
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text31
  7607   001AB8                     __ptext31:
  7608                           	callstack 0
  7609   001AB8                     _initTeclado:
  7610                           	callstack 26
  7611                           
  7612                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  7613                           
  7614                           ;incstack = 0
  7615   001AB8  0E0F               	movlw	15
  7616   001ABA  6E95               	movwf	149,c	;volatile
  7617                           
  7618                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  7619   001ABC  6A8C               	clrf	140,c	;volatile
  7620                           
  7621                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  7622   001ABE  6A23               	clrf	_state^0,c
  7623   001AC0  6A24               	clrf	_tecla^0,c
  7624   001AC2  6A25               	clrf	_Columnas^0,c
  7625   001AC4  6A26               	clrf	_Filas^0,c
  7626                           
  7627                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer_teclado);
  7628   001AC6  0E49               	movlw	low _timer_teclado
  7629   001AC8  6E55               	movwf	TI_NewTimer@TimerHandle^0,c
  7630   001ACA  EC40  F00C         	call	_TI_NewTimer	;wreg free
  7631   001ACE  0012               	return		;funcret
  7632   001AD0                     __end_of_initTeclado:
  7633                           	callstack 0
  7634                           
  7635 ;; *************** function _initRFID *****************
  7636 ;; Defined at:
  7637 ;;		line 127 in file "TAD_RFID.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  regVal          1   12[COMRAM] unsigned char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1
  7651 ;;      Params:         0       0       0
  7652 ;;      Locals:         1       0       0
  7653 ;;      Temps:          0       0       0
  7654 ;;      Totals:         1       0       0
  7655 ;;Total ram usage:        1 bytes
  7656 ;; Hardware stack levels used: 1
  7657 ;; Hardware stack levels required when called: 6
  7658 ;; This function calls:
  7659 ;;		_TI_NewTimer
  7660 ;;		_TI_ResetTics
  7661 ;;		_delay_us
  7662 ;;		_motor_Read
  7663 ;;		_motor_Write
  7664 ;; This function is called by:
  7665 ;;		_main
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text32
  7670   000FC0                     __ptext32:
  7671                           	callstack 0
  7672   000FC0                     _initRFID:
  7673                           	callstack 24
  7674                           
  7675                           ;TAD_RFID.c: 129:     TRISCbits.TRISC0 = 1;
  7676                           
  7677                           ;incstack = 0
  7678   000FC0  8094               	bsf	148,0,c	;volatile
  7679                           
  7680                           ;TAD_RFID.c: 130:     TRISCbits.TRISC1 = 0;
  7681   000FC2  9294               	bcf	148,1,c	;volatile
  7682                           
  7683                           ;TAD_RFID.c: 131:     TRISCbits.TRISC2 = 0;
  7684   000FC4  9494               	bcf	148,2,c	;volatile
  7685                           
  7686                           ;TAD_RFID.c: 132:     TRISCbits.TRISC3 = 0;
  7687   000FC6  9694               	bcf	148,3,c	;volatile
  7688                           
  7689                           ;TAD_RFID.c: 133:     TRISCbits.TRISC4 = 0;
  7690   000FC8  9894               	bcf	148,4,c	;volatile
  7691                           
  7692                           ;TAD_RFID.c: 135:     state_read = state_write = 0;
  7693   000FCA  6A50               	clrf	_state_write^0,c
  7694   000FCC  6A51               	clrf	_state_read^0,c
  7695                           
  7696                           ;TAD_RFID.c: 136:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7697   000FCE  848B               	bsf	139,2,c	;volatile
  7698   000FD0  868B               	bsf	139,3,c	;volatile
  7699                           
  7700                           ;TAD_RFID.c: 137:     LATCbits.LATC4 = 1;
  7701   000FD2  888B               	bsf	139,4,c	;volatile
  7702                           
  7703                           ;TAD_RFID.c: 138:     delay_us(1);
  7704   000FD4  0E01               	movlw	1
  7705   000FD6  EC68  F00D         	call	_delay_us
  7706                           
  7707                           ;TAD_RFID.c: 139:     LATCbits.LATC4 = 0;
  7708   000FDA  988B               	bcf	139,4,c	;volatile
  7709                           
  7710                           ;TAD_RFID.c: 140:     delay_us(1);
  7711   000FDC  0E01               	movlw	1
  7712   000FDE  EC68  F00D         	call	_delay_us
  7713                           
  7714                           ;TAD_RFID.c: 141:     LATCbits.LATC4 = 1;
  7715   000FE2  888B               	bsf	139,4,c	;volatile
  7716                           
  7717                           ;TAD_RFID.c: 142:     delay_us(1);
  7718   000FE4  0E01               	movlw	1
  7719   000FE6  EC68  F00D         	call	_delay_us
  7720   000FEA                     l4001:
  7721   000FEA  0E0F               	movlw	15
  7722   000FEC  6E5C               	movwf	motor_Write@value^0,c
  7723   000FEE  0E01               	movlw	1
  7724   000FF0  EC83  F00A         	call	_motor_Write
  7725   000FF4  0900               	iorlw	0
  7726   000FF6  B4D8               	btfsc	status,2,c
  7727   000FF8  D7F8               	goto	l4001
  7728                           
  7729                           ;TAD_RFID.c: 146:     delay_us(1);
  7730   000FFA  0E01               	movlw	1
  7731   000FFC  EC68  F00D         	call	_delay_us
  7732   001000                     l4005:
  7733   001000  0E8D               	movlw	141
  7734   001002  6E5C               	movwf	motor_Write@value^0,c
  7735   001004  0E2A               	movlw	42
  7736   001006  EC83  F00A         	call	_motor_Write
  7737   00100A  0900               	iorlw	0
  7738   00100C  B4D8               	btfsc	status,2,c
  7739   00100E  D7F8               	goto	l4005
  7740   001010                     u3390:
  7741   001010  0E3E               	movlw	62
  7742   001012  6E5C               	movwf	motor_Write@value^0,c
  7743   001014  0E2B               	movlw	43
  7744   001016  EC83  F00A         	call	_motor_Write
  7745   00101A  0900               	iorlw	0
  7746   00101C  B4D8               	btfsc	status,2,c
  7747   00101E  D7F8               	goto	u3390
  7748   001020                     u3400:
  7749   001020  0E1E               	movlw	30
  7750   001022  6E5C               	movwf	motor_Write@value^0,c
  7751   001024  0E2D               	movlw	45
  7752   001026  EC83  F00A         	call	_motor_Write
  7753   00102A  0900               	iorlw	0
  7754   00102C  B4D8               	btfsc	status,2,c
  7755   00102E  D7F8               	goto	u3400
  7756   001030                     u3410:
  7757   001030  0E00               	movlw	0
  7758   001032  6E5C               	movwf	motor_Write@value^0,c
  7759   001034  0E2C               	movlw	44
  7760   001036  EC83  F00A         	call	_motor_Write
  7761   00103A  0900               	iorlw	0
  7762   00103C  B4D8               	btfsc	status,2,c
  7763   00103E  D7F8               	goto	u3410
  7764   001040                     u3420:
  7765   001040  0E40               	movlw	64
  7766   001042  6E5C               	movwf	motor_Write@value^0,c
  7767   001044  0E15               	movlw	21
  7768   001046  EC83  F00A         	call	_motor_Write
  7769   00104A  0900               	iorlw	0
  7770   00104C  B4D8               	btfsc	status,2,c
  7771   00104E  D7F8               	goto	u3420
  7772   001050                     u3430:
  7773   001050  0E3D               	movlw	61
  7774   001052  6E5C               	movwf	motor_Write@value^0,c
  7775   001054  0E11               	movlw	17
  7776   001056  EC83  F00A         	call	_motor_Write
  7777   00105A  0900               	iorlw	0
  7778   00105C  B4D8               	btfsc	status,2,c
  7779   00105E  D7F8               	goto	u3430
  7780   001060                     u3440:
  7781                           
  7782                           ;TAD_RFID.c: 159:         regVal = motor_Read(0x14);
  7783   001060  0E14               	movlw	20
  7784   001062  EC4A  F008         	call	_motor_Read
  7785   001066  6E60               	movwf	initRFID@regVal^0,c
  7786                           
  7787                           ;TAD_RFID.c: 160:     } while (regVal == 0xFE);
  7788   001068  0EFE               	movlw	254
  7789   00106A  1860               	xorwf	initRFID@regVal^0,w,c
  7790   00106C  B4D8               	btfsc	status,2,c
  7791   00106E  D7F8               	goto	u3440
  7792                           
  7793                           ;TAD_RFID.c: 161:     regVal |= 0x03;
  7794   001070  0E03               	movlw	3
  7795   001072  1260               	iorwf	initRFID@regVal^0,f,c
  7796   001074                     l4023:
  7797   001074  C060  F05C         	movff	initRFID@regVal,motor_Write@value
  7798   001078  0E14               	movlw	20
  7799   00107A  EC83  F00A         	call	_motor_Write
  7800   00107E  0900               	iorlw	0
  7801   001080  B4D8               	btfsc	status,2,c
  7802   001082  D7F8               	goto	l4023
  7803                           
  7804                           ;TAD_RFID.c: 165:     TI_NewTimer(&card_timer);
  7805   001084  0E4F               	movlw	low _card_timer
  7806   001086  6E55               	movwf	TI_NewTimer@TimerHandle^0,c
  7807   001088  EC40  F00C         	call	_TI_NewTimer	;wreg free
  7808                           
  7809                           ;TAD_RFID.c: 166:     TI_ResetTics(card_timer);
  7810   00108C  504F               	movf	_card_timer^0,w,c
  7811   00108E  EC14  F00D         	call	_TI_ResetTics
  7812   001092  0012               	return		;funcret
  7813   001094                     __end_of_initRFID:
  7814                           	callstack 0
  7815                           
  7816 ;; *************** function _motor_Write *****************
  7817 ;; Defined at:
  7818 ;;		line 47 in file "TAD_RFID.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  addr            1    wreg     unsigned char 
  7821 ;;  value           1    8[COMRAM] unsigned char 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  addr            1    9[COMRAM] unsigned char 
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      unsigned char 
  7826 ;; Registers used:
  7827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMRAM   BANK0   BANK1
  7833 ;;      Params:         1       0       0
  7834 ;;      Locals:         1       0       0
  7835 ;;      Temps:          0       0       0
  7836 ;;      Totals:         2       0       0
  7837 ;;Total ram usage:        2 bytes
  7838 ;; Hardware stack levels used: 1
  7839 ;; Hardware stack levels required when called: 5
  7840 ;; This function calls:
  7841 ;;		_processBit
  7842 ;; This function is called by:
  7843 ;;		_initRFID
  7844 ;;		_motor_RFID
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           	psect	text33
  7849   001506                     __ptext33:
  7850                           	callstack 0
  7851   001506                     _motor_Write:
  7852                           	callstack 24
  7853                           
  7854                           ;incstack = 0
  7855                           ;motor_Write@addr stored from wreg
  7856   001506  6E5D               	movwf	motor_Write@addr^0,c
  7857                           
  7858                           ;TAD_RFID.c: 48:     static char bit_count = 0;;TAD_RFID.c: 49:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 50:     static unsigned char ucValue;;TAD_RFID.c: 52:     switch (s
      +                          tate_write) {
  7859   001508  D028               	goto	l3687
  7860   00150A                     l272:
  7861                           
  7862                           ;TAD_RFID.c: 54:             LATCbits.LATC2 = 0;
  7863   00150A  948B               	bcf	139,2,c	;volatile
  7864                           
  7865                           ;TAD_RFID.c: 55:             LATCbits.LATC3 = 0;
  7866   00150C  968B               	bcf	139,3,c	;volatile
  7867                           
  7868                           ;TAD_RFID.c: 56:             ucAddr = ((addr << 1) & 0x7E);
  7869   00150E  505D               	movf	motor_Write@addr^0,w,c
  7870   001510  245D               	addwf	motor_Write@addr^0,w,c
  7871   001512  0B7E               	andlw	126
  7872   001514  6E4D               	movwf	motor_Write@ucAddr^0,c
  7873                           
  7874                           ;TAD_RFID.c: 57:             ucValue = value;
  7875   001516  C05C  F04C         	movff	motor_Write@value,motor_Write@ucValue
  7876                           
  7877                           ;TAD_RFID.c: 58:             bit_count = 0;
  7878   00151A  6A4E               	clrf	motor_Write@bit_count^0,c
  7879                           
  7880                           ;TAD_RFID.c: 59:             state_write = 1;
  7881   00151C  0E01               	movlw	1
  7882   00151E  6E50               	movwf	_state_write^0,c
  7883                           
  7884                           ;TAD_RFID.c: 60:             break;
  7885   001520  D026               	goto	l3689
  7886   001522                     l3673:
  7887                           
  7888                           ;TAD_RFID.c: 63:             processBit(&ucAddr, &bit_count, &state_write, 2);
  7889   001522  0E4D               	movlw	low motor_Write@ucAddr
  7890   001524  6E57               	movwf	processBit@val^0,c
  7891   001526  0E4E               	movlw	low motor_Write@bit_count
  7892   001528  6E58               	movwf	processBit@bit_count^0,c
  7893   00152A  0E50               	movlw	low _state_write
  7894   00152C  6E59               	movwf	processBit@state^0,c
  7895   00152E  0E02               	movlw	2
  7896   001530  6E5A               	movwf	processBit@next_state^0,c
  7897   001532  EC4D  F00B         	call	_processBit	;wreg free
  7898                           
  7899                           ;TAD_RFID.c: 64:             break;
  7900   001536  D01B               	goto	l3689
  7901   001538                     l3675:
  7902                           
  7903                           ;TAD_RFID.c: 67:             processBit(&ucValue, &bit_count, &state_write, 0);
  7904   001538  0E4C               	movlw	low motor_Write@ucValue
  7905   00153A  6E57               	movwf	processBit@val^0,c
  7906   00153C  0E4E               	movlw	low motor_Write@bit_count
  7907   00153E  6E58               	movwf	processBit@bit_count^0,c
  7908   001540  0E50               	movlw	low _state_write
  7909   001542  6E59               	movwf	processBit@state^0,c
  7910   001544  0E00               	movlw	0
  7911   001546  6E5A               	movwf	processBit@next_state^0,c
  7912   001548  EC4D  F00B         	call	_processBit	;wreg free
  7913                           
  7914                           ;TAD_RFID.c: 68:             if (state_write == 0) {
  7915   00154C  5050               	movf	_state_write^0,w,c
  7916   00154E  A4D8               	btfss	status,2,c
  7917   001550  D00E               	goto	l3689
  7918                           
  7919                           ;TAD_RFID.c: 69:                 LATCbits.LATC3 = 1;
  7920   001552  868B               	bsf	139,3,c	;volatile
  7921                           
  7922                           ;TAD_RFID.c: 70:                 LATCbits.LATC2 = 1;
  7923   001554  848B               	bsf	139,2,c	;volatile
  7924                           
  7925                           ;TAD_RFID.c: 71:                 return 1;
  7926   001556  0E01               	movlw	1
  7927   001558  0012               	return	
  7928   00155A                     l3687:
  7929   00155A  5050               	movf	_state_write^0,w,c
  7930                           
  7931                           ; Switch size 1, requested type "simple"
  7932                           ; Number of cases is 3, Range of values is 0 to 2
  7933                           ; switch strategies available:
  7934                           ; Name         Instructions Cycles
  7935                           ; simple_byte           10     6 (average)
  7936                           ;	Chosen strategy is simple_byte
  7937   00155C  0A00               	xorlw	0	; case 0
  7938   00155E  B4D8               	btfsc	status,2,c
  7939   001560  D7D4               	goto	l272
  7940   001562  0A01               	xorlw	1	; case 1
  7941   001564  B4D8               	btfsc	status,2,c
  7942   001566  D7DD               	goto	l3673
  7943   001568  0A03               	xorlw	3	; case 2
  7944   00156A  B4D8               	btfsc	status,2,c
  7945   00156C  D7E5               	goto	l3675
  7946   00156E                     l3689:
  7947                           
  7948                           ;TAD_RFID.c: 75:     return 0;
  7949   00156E  0E00               	movlw	0
  7950   001570  0012               	return		;funcret
  7951   001572                     __end_of_motor_Write:
  7952                           	callstack 0
  7953                           
  7954 ;; *************** function _motor_Read *****************
  7955 ;; Defined at:
  7956 ;;		line 79 in file "TAD_RFID.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  addr            1    wreg     unsigned char 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  addr            1    9[COMRAM] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      unsigned char 
  7963 ;; Registers used:
  7964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1
  7970 ;;      Params:         0       0       0
  7971 ;;      Locals:         3       0       0
  7972 ;;      Temps:          1       0       0
  7973 ;;      Totals:         4       0       0
  7974 ;;Total ram usage:        4 bytes
  7975 ;; Hardware stack levels used: 1
  7976 ;; Hardware stack levels required when called: 5
  7977 ;; This function calls:
  7978 ;;		_delay_us
  7979 ;;		_processBit
  7980 ;; This function is called by:
  7981 ;;		_initRFID
  7982 ;;		_motor_RFID
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text34
  7987   001094                     __ptext34:
  7988                           	callstack 0
  7989   001094                     _motor_Read:
  7990                           	callstack 24
  7991                           
  7992                           ;incstack = 0
  7993                           ;motor_Read@addr stored from wreg
  7994   001094  6E5D               	movwf	motor_Read@addr^0,c
  7995                           
  7996                           ;TAD_RFID.c: 80:     static char bit_count = 0;;TAD_RFID.c: 81:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 82:     static unsigned char ucResult;;TAD_RFID.c: 83:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 84:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 86:     if (++timeout_counter > MAX_TIMEOUT) {
  7997   001096  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  7998   001098  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  7999   00109A  0EE9               	movlw	233
  8000   00109C  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  8001   00109E  0E03               	movlw	3
  8002   0010A0  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  8003   0010A2  A0D8               	btfss	status,0,c
  8004   0010A4  D053               	goto	l3755
  8005                           
  8006                           ;TAD_RFID.c: 87:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8007   0010A6  848B               	bsf	139,2,c	;volatile
  8008   0010A8  868B               	bsf	139,3,c	;volatile
  8009                           
  8010                           ;TAD_RFID.c: 88:         state_read = 0;
  8011   0010AA  6A51               	clrf	_state_read^0,c
  8012                           
  8013                           ;TAD_RFID.c: 89:         timeout_counter = 0;
  8014   0010AC  0E00               	movlw	0
  8015   0010AE  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8016   0010B0  0E00               	movlw	0
  8017   0010B2  6E13               	movwf	motor_Read@timeout_counter^0,c
  8018                           
  8019                           ;TAD_RFID.c: 90:         return 0xFF;
  8020   0010B4  0EFF               	movlw	255
  8021   0010B6  0012               	return	
  8022   0010B8                     l3703:
  8023                           
  8024                           ;TAD_RFID.c: 95:             timeout_counter = 0;
  8025   0010B8  0E00               	movlw	0
  8026   0010BA  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8027   0010BC  0E00               	movlw	0
  8028   0010BE  6E13               	movwf	motor_Read@timeout_counter^0,c
  8029                           
  8030                           ;TAD_RFID.c: 96:             LATCbits.LATC2 = 0;
  8031   0010C0  948B               	bcf	139,2,c	;volatile
  8032                           
  8033                           ;TAD_RFID.c: 97:             LATCbits.LATC3 = 0;
  8034   0010C2  968B               	bcf	139,3,c	;volatile
  8035                           
  8036                           ;TAD_RFID.c: 98:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  8037   0010C4  505D               	movf	motor_Read@addr^0,w,c
  8038   0010C6  245D               	addwf	motor_Read@addr^0,w,c
  8039   0010C8  0B7E               	andlw	126
  8040   0010CA  0980               	iorlw	128
  8041   0010CC  6E4A               	movwf	motor_Read@ucAddr^0,c
  8042                           
  8043                           ;TAD_RFID.c: 99:             ucResult = 0;
  8044   0010CE  6A3A               	clrf	motor_Read@ucResult^0,c
  8045                           
  8046                           ;TAD_RFID.c: 100:             bit_count = 0;
  8047   0010D0  6A4B               	clrf	motor_Read@bit_count^0,c
  8048                           
  8049                           ;TAD_RFID.c: 101:             state_read = 1;
  8050   0010D2  0E01               	movlw	1
  8051   0010D4  6E51               	movwf	_state_read^0,c
  8052   0010D6                     l3717:
  8053                           
  8054                           ;TAD_RFID.c: 102:             return 0xFE;
  8055   0010D6  0EFE               	movlw	254
  8056   0010D8  0012               	return	
  8057   0010DA                     l3721:
  8058                           
  8059                           ;TAD_RFID.c: 105:             processBit(&ucAddr, &bit_count, &state_read, 2);
  8060   0010DA  0E4A               	movlw	low motor_Read@ucAddr
  8061   0010DC  6E57               	movwf	processBit@val^0,c
  8062   0010DE  0E4B               	movlw	low motor_Read@bit_count
  8063   0010E0  6E58               	movwf	processBit@bit_count^0,c
  8064   0010E2  0E51               	movlw	low _state_read
  8065   0010E4  6E59               	movwf	processBit@state^0,c
  8066   0010E6  0E02               	movlw	2
  8067   0010E8  6E5A               	movwf	processBit@next_state^0,c
  8068   0010EA  EC4D  F00B         	call	_processBit	;wreg free
  8069   0010EE  D7F3               	goto	l3717
  8070   0010F0                     l295:
  8071                           
  8072                           ;TAD_RFID.c: 109:             LATCbits.LATC2 = 1;
  8073   0010F0  848B               	bsf	139,2,c	;volatile
  8074                           
  8075                           ;TAD_RFID.c: 110:             delay_us(5);
  8076   0010F2  0E05               	movlw	5
  8077   0010F4  EC68  F00D         	call	_delay_us
  8078                           
  8079                           ;TAD_RFID.c: 111:             ucResult = (unsigned char)((ucResult << 1) | PORTCbits.RC0
      +                          );
  8080   0010F8  A082               	btfss	130,0,c	;volatile
  8081   0010FA  D003               	goto	u2980
  8082   0010FC  6A5C               	clrf	??_motor_Read^0,c
  8083   0010FE  2A5C               	incf	??_motor_Read^0,f,c
  8084   001100  D001               	goto	u2988
  8085   001102                     u2980:
  8086   001102  6A5C               	clrf	??_motor_Read^0,c
  8087   001104                     u2988:
  8088   001104  503A               	movf	motor_Read@ucResult^0,w,c
  8089   001106  243A               	addwf	motor_Read@ucResult^0,w,c
  8090   001108  105C               	iorwf	??_motor_Read^0,w,c
  8091   00110A  6E3A               	movwf	motor_Read@ucResult^0,c
  8092                           
  8093                           ;TAD_RFID.c: 112:             LATCbits.LATC2 = 0;
  8094   00110C  948B               	bcf	139,2,c	;volatile
  8095                           
  8096                           ;TAD_RFID.c: 113:             delay_us(5);
  8097   00110E  0E05               	movlw	5
  8098   001110  EC68  F00D         	call	_delay_us
  8099                           
  8100                           ;TAD_RFID.c: 115:             if (++bit_count >= 8) {
  8101   001114  2A4B               	incf	motor_Read@bit_count^0,f,c
  8102   001116  0E07               	movlw	7
  8103   001118  644B               	cpfsgt	motor_Read@bit_count^0,c
  8104   00111A  D7DD               	goto	l3717
  8105                           
  8106                           ;TAD_RFID.c: 116:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  8107   00111C  848B               	bsf	139,2,c	;volatile
  8108   00111E  868B               	bsf	139,3,c	;volatile
  8109                           
  8110                           ;TAD_RFID.c: 117:                 state_read = 0;
  8111   001120  6A51               	clrf	_state_read^0,c
  8112                           
  8113                           ;TAD_RFID.c: 118:                 timeout_counter = 0;
  8114   001122  0E00               	movlw	0
  8115   001124  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  8116   001126  0E00               	movlw	0
  8117   001128  6E13               	movwf	motor_Read@timeout_counter^0,c
  8118                           
  8119                           ;TAD_RFID.c: 119:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  8120   00112A  0EFE               	movlw	254
  8121   00112C  183A               	xorwf	motor_Read@ucResult^0,w,c
  8122   00112E  B4D8               	btfsc	status,2,c
  8123   001130  D007               	goto	l3745
  8124   001132  283A               	incf	motor_Read@ucResult^0,w,c
  8125   001134  B4D8               	btfsc	status,2,c
  8126   001136  D004               	goto	l3745
  8127   001138  C03A  F05E         	movff	motor_Read@ucResult,_motor_Read$697
  8128   00113C  6A5F               	clrf	(_motor_Read$697+1)^0,c
  8129   00113E  D004               	goto	l300
  8130   001140                     l3745:
  8131   001140  0E00               	movlw	0
  8132   001142  6E5F               	movwf	(_motor_Read$697+1)^0,c
  8133   001144  0EFD               	movlw	253
  8134   001146  6E5E               	movwf	_motor_Read$697^0,c
  8135   001148                     l300:
  8136   001148  505E               	movf	_motor_Read$697^0,w,c
  8137   00114A  0012               	return	
  8138   00114C                     l3755:
  8139   00114C  5051               	movf	_state_read^0,w,c
  8140                           
  8141                           ; Switch size 1, requested type "simple"
  8142                           ; Number of cases is 3, Range of values is 0 to 2
  8143                           ; switch strategies available:
  8144                           ; Name         Instructions Cycles
  8145                           ; simple_byte           10     6 (average)
  8146                           ;	Chosen strategy is simple_byte
  8147   00114E  0A00               	xorlw	0	; case 0
  8148   001150  B4D8               	btfsc	status,2,c
  8149   001152  D7B2               	goto	l3703
  8150   001154  0A01               	xorlw	1	; case 1
  8151   001156  B4D8               	btfsc	status,2,c
  8152   001158  D7C0               	goto	l3721
  8153   00115A  0A03               	xorlw	3	; case 2
  8154   00115C  B4D8               	btfsc	status,2,c
  8155   00115E  D7C8               	goto	l295
  8156   001160  D7BA               	goto	l3717
  8157   001162                     __end_of_motor_Read:
  8158                           	callstack 0
  8159                           
  8160 ;; *************** function _processBit *****************
  8161 ;; Defined at:
  8162 ;;		line 33 in file "TAD_RFID.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;  val             1    3[COMRAM] PTR unsigned char 
  8165 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  8166 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  8167 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  8168 ;;  state           1    5[COMRAM] PTR unsigned char 
  8169 ;;		 -> state_read(1), state_write(1), 
  8170 ;;  next_state      1    6[COMRAM] unsigned char 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;		None
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      void 
  8175 ;; Registers used:
  8176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1
  8182 ;;      Params:         4       0       0
  8183 ;;      Locals:         0       0       0
  8184 ;;      Temps:          1       0       0
  8185 ;;      Totals:         5       0       0
  8186 ;;Total ram usage:        5 bytes
  8187 ;; Hardware stack levels used: 1
  8188 ;; Hardware stack levels required when called: 4
  8189 ;; This function calls:
  8190 ;;		_delay_us
  8191 ;; This function is called by:
  8192 ;;		_motor_Write
  8193 ;;		_motor_Read
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           	psect	text35
  8198   00169A                     __ptext35:
  8199                           	callstack 0
  8200   00169A                     _processBit:
  8201                           	callstack 24
  8202                           
  8203                           ;TAD_RFID.c: 34:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  8204                           
  8205                           ;incstack = 0
  8206   00169A  5057               	movf	processBit@val^0,w,c
  8207   00169C  6ED9               	movwf	fsr2l,c
  8208   00169E  6ADA               	clrf	fsr2h,c
  8209   0016A0  AEDF               	btfss	indf2,7,c
  8210   0016A2  D003               	goto	u2610
  8211   0016A4  6A5B               	clrf	??_processBit^0,c
  8212   0016A6  2A5B               	incf	??_processBit^0,f,c
  8213   0016A8  D001               	goto	u2628
  8214   0016AA                     u2610:
  8215   0016AA  6A5B               	clrf	??_processBit^0,c
  8216   0016AC                     u2628:
  8217   0016AC  465B               	rlncf	??_processBit^0,f,c
  8218   0016AE  508B               	movf	139,w,c	;volatile
  8219   0016B0  185B               	xorwf	??_processBit^0,w,c
  8220   0016B2  0BFD               	andlw	-3
  8221   0016B4  185B               	xorwf	??_processBit^0,w,c
  8222   0016B6  6E8B               	movwf	139,c	;volatile
  8223                           
  8224                           ;TAD_RFID.c: 35:     LATCbits.LATC2 = 1;
  8225   0016B8  848B               	bsf	139,2,c	;volatile
  8226                           
  8227                           ;TAD_RFID.c: 36:     *val <<= 1;
  8228   0016BA  5057               	movf	processBit@val^0,w,c
  8229   0016BC  6ED9               	movwf	fsr2l,c
  8230   0016BE  6ADA               	clrf	fsr2h,c
  8231   0016C0  90D8               	bcf	status,0,c
  8232   0016C2  36DF               	rlcf	indf2,f,c
  8233                           
  8234                           ;TAD_RFID.c: 37:     delay_us(5);
  8235   0016C4  0E05               	movlw	5
  8236   0016C6  EC68  F00D         	call	_delay_us
  8237                           
  8238                           ;TAD_RFID.c: 38:     LATCbits.LATC2 = 0;
  8239   0016CA  948B               	bcf	139,2,c	;volatile
  8240                           
  8241                           ;TAD_RFID.c: 39:     delay_us(5);
  8242   0016CC  0E05               	movlw	5
  8243   0016CE  EC68  F00D         	call	_delay_us
  8244                           
  8245                           ;TAD_RFID.c: 40:     if (++(*bit_count) == 8) {
  8246   0016D2  5058               	movf	processBit@bit_count^0,w,c
  8247   0016D4  6ED9               	movwf	fsr2l,c
  8248   0016D6  6ADA               	clrf	fsr2h,c
  8249   0016D8  2ADF               	incf	indf2,f,c
  8250   0016DA  0E08               	movlw	8
  8251   0016DC  18DE               	xorwf	postinc2,w,c
  8252   0016DE  A4D8               	btfss	status,2,c
  8253   0016E0  0012               	return	
  8254                           
  8255                           ;TAD_RFID.c: 41:         *bit_count = 0;
  8256   0016E2  5058               	movf	processBit@bit_count^0,w,c
  8257   0016E4  6ED9               	movwf	fsr2l,c
  8258   0016E6  6ADA               	clrf	fsr2h,c
  8259   0016E8  6ADF               	clrf	indf2,c
  8260                           
  8261                           ;TAD_RFID.c: 42:         *state = next_state;
  8262   0016EA  5059               	movf	processBit@state^0,w,c
  8263   0016EC  6ED9               	movwf	fsr2l,c
  8264   0016EE  6ADA               	clrf	fsr2h,c
  8265   0016F0  C05A  FFDF         	movff	processBit@next_state,indf2
  8266   0016F4  0012               	return		;funcret
  8267   0016F6                     __end_of_processBit:
  8268                           	callstack 0
  8269                           
  8270 ;; *************** function _delay_us *****************
  8271 ;; Defined at:
  8272 ;;		line 27 in file "TAD_RFID.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;  howMany         1    wreg     unsigned char 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  howMany         1    1[COMRAM] unsigned char 
  8277 ;;  x               1    2[COMRAM] unsigned char 
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0, prodl, prodh
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1
  8287 ;;      Params:         0       0       0
  8288 ;;      Locals:         2       0       0
  8289 ;;      Temps:          0       0       0
  8290 ;;      Totals:         2       0       0
  8291 ;;Total ram usage:        2 bytes
  8292 ;; Hardware stack levels used: 1
  8293 ;; Hardware stack levels required when called: 3
  8294 ;; This function calls:
  8295 ;;		Nothing
  8296 ;; This function is called by:
  8297 ;;		_processBit
  8298 ;;		_motor_Read
  8299 ;;		_initRFID
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text36
  8304   001AD0                     __ptext36:
  8305                           	callstack 0
  8306   001AD0                     _delay_us:
  8307                           	callstack 24
  8308                           
  8309                           ;incstack = 0
  8310                           ;delay_us@howMany stored from wreg
  8311   001AD0  6E55               	movwf	delay_us@howMany^0,c
  8312                           
  8313                           ;TAD_RFID.c: 28:     char x = howMany * 8;
  8314   001AD2  5055               	movf	delay_us@howMany^0,w,c
  8315   001AD4  0D08               	mullw	8
  8316   001AD6  CFF3 F056          	movff	prodl,delay_us@x
  8317                           
  8318                           ;TAD_RFID.c: 29:     while(x--) __nop();
  8319   001ADA  D001               	goto	l3361
  8320   001ADC                     l256:
  8321   001ADC  0000               	nop	
  8322   001ADE                     l3361:
  8323   001ADE  0656               	decf	delay_us@x^0,f,c
  8324   001AE0  2856               	incf	delay_us@x^0,w,c
  8325   001AE2  B4D8               	btfsc	status,2,c
  8326   001AE4  0012               	return	
  8327   001AE6  D7FA               	goto	l256
  8328   001AE8                     __end_of_delay_us:
  8329                           	callstack 0
  8330                           
  8331 ;; *************** function _initPorts *****************
  8332 ;; Defined at:
  8333 ;;		line 63 in file "main.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;		None
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1
  8347 ;;      Params:         0       0       0
  8348 ;;      Locals:         0       0       0
  8349 ;;      Temps:          0       0       0
  8350 ;;      Totals:         0       0       0
  8351 ;;Total ram usage:        0 bytes
  8352 ;; Hardware stack levels used: 1
  8353 ;; Hardware stack levels required when called: 3
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		_main
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           	psect	text37
  8362   001B78                     __ptext37:
  8363                           	callstack 0
  8364   001B78                     _initPorts:
  8365                           	callstack 27
  8366                           
  8367                           ;incstack = 0
  8368   001B78  0E0F               	movlw	15
  8369   001B7A  6EC1               	movwf	193,c	;volatile
  8370   001B7C  9496               	bcf	150,2,c	;volatile
  8371   001B7E  0012               	return		;funcret
  8372   001B80                     __end_of_initPorts:
  8373                           	callstack 0
  8374                           
  8375 ;; *************** function _initLeds *****************
  8376 ;; Defined at:
  8377 ;;		line 9 in file "TAD_LEDS.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1
  8391 ;;      Params:         0       0       0
  8392 ;;      Locals:         0       0       0
  8393 ;;      Temps:          0       0       0
  8394 ;;      Totals:         0       0       0
  8395 ;;Total ram usage:        0 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 4
  8398 ;; This function calls:
  8399 ;;		_TI_NewTimer
  8400 ;; This function is called by:
  8401 ;;		_main
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text38
  8406   001B4C                     __ptext38:
  8407                           	callstack 0
  8408   001B4C                     _initLeds:
  8409                           	callstack 26
  8410                           
  8411                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  8412                           
  8413                           ;incstack = 0
  8414   001B4C  6A92               	clrf	146,c	;volatile
  8415                           
  8416                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  8417   001B4E  6A96               	clrf	150,c	;volatile
  8418                           
  8419                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  8420   001B50  0E52               	movlw	low _timer
  8421   001B52  6E55               	movwf	TI_NewTimer@TimerHandle^0,c
  8422   001B54  EC40  F00C         	call	_TI_NewTimer	;wreg free
  8423   001B58  0012               	return		;funcret
  8424   001B5A                     __end_of_initLeds:
  8425                           	callstack 0
  8426                           
  8427 ;; *************** function _initData *****************
  8428 ;; Defined at:
  8429 ;;		line 24 in file "TAD_DATOS.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  j               1    2[COMRAM] unsigned char 
  8434 ;;  i               1    3[COMRAM] unsigned char 
  8435 ;;  i               1    4[COMRAM] unsigned char 
  8436 ;;  i               1    1[COMRAM] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1
  8446 ;;      Params:         0       0       0
  8447 ;;      Locals:         4       0       0
  8448 ;;      Temps:          0       0       0
  8449 ;;      Totals:         4       0       0
  8450 ;;Total ram usage:        4 bytes
  8451 ;; Hardware stack levels used: 1
  8452 ;; Hardware stack levels required when called: 3
  8453 ;; This function calls:
  8454 ;;		Nothing
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           	psect	text39
  8461   001750                     __ptext39:
  8462                           	callstack 0
  8463   001750                     _initData:
  8464                           	callstack 27
  8465                           
  8466                           ;TAD_DATOS.c: 25:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  8467                           
  8468                           ;incstack = 0
  8469   001750  6A55               	clrf	initData@i^0,c
  8470   001752                     l4085:
  8471   001752  5055               	movf	initData@i^0,w,c
  8472   001754  0F3F               	addlw	low _currentUser
  8473   001756  6ED9               	movwf	fsr2l,c
  8474   001758  6ADA               	clrf	fsr2h,c
  8475   00175A  6ADF               	clrf	indf2,c
  8476   00175C  2A55               	incf	initData@i^0,f,c
  8477   00175E  0E04               	movlw	4
  8478   001760  6455               	cpfsgt	initData@i^0,c
  8479   001762  D7F7               	goto	l4085
  8480                           
  8481                           ;TAD_DATOS.c: 26:     for(char i = 0; i < 4; i++) {
  8482   001764  6A58               	clrf	initData@i_896^0,c
  8483   001766                     l762:
  8484                           
  8485                           ;TAD_DATOS.c: 27:         for(char j = 0; j < 6; j++) {
  8486   001766  6A56               	clrf	initData@j^0,c
  8487   001768                     l4099:
  8488                           
  8489                           ;TAD_DATOS.c: 28:             configurations[i][j] = i;
  8490   001768  5058               	movf	initData@i_896^0,w,c
  8491   00176A  0D06               	mullw	6
  8492   00176C  50F3               	movf	243,w,c
  8493   00176E  0F80               	addlw	low _configurations
  8494   001770  2456               	addwf	initData@j^0,w,c
  8495   001772  6ED9               	movwf	fsr2l,c
  8496   001774  6ADA               	clrf	fsr2h,c
  8497   001776  C058  FFDF         	movff	initData@i_896,indf2
  8498                           
  8499                           ;TAD_DATOS.c: 29:         }
  8500   00177A  2A56               	incf	initData@j^0,f,c
  8501   00177C  0E05               	movlw	5
  8502   00177E  6456               	cpfsgt	initData@j^0,c
  8503   001780  D7F3               	goto	l4099
  8504                           
  8505                           ;TAD_DATOS.c: 30:     }
  8506   001782  2A58               	incf	initData@i_896^0,f,c
  8507   001784  0E03               	movlw	3
  8508   001786  6458               	cpfsgt	initData@i_896^0,c
  8509   001788  D7EE               	goto	l762
  8510                           
  8511                           ;TAD_DATOS.c: 31:     for(char i = 0; i < 6; i++) {
  8512   00178A  6A57               	clrf	initData@i_898^0,c
  8513   00178C                     l4113:
  8514                           
  8515                           ;TAD_DATOS.c: 32:         configurations[4][i] = 0;
  8516   00178C  5057               	movf	initData@i_898^0,w,c
  8517   00178E  0F98               	addlw	low (_configurations+24)
  8518   001790  6ED9               	movwf	fsr2l,c
  8519   001792  6ADA               	clrf	fsr2h,c
  8520   001794  6ADF               	clrf	indf2,c
  8521                           
  8522                           ;TAD_DATOS.c: 33:     }
  8523   001796  2A57               	incf	initData@i_898^0,f,c
  8524   001798  0E05               	movlw	5
  8525   00179A  6457               	cpfsgt	initData@i_898^0,c
  8526   00179C  D7F7               	goto	l4113
  8527                           
  8528                           ;TAD_DATOS.c: 34:     index = 4;
  8529   00179E  0E04               	movlw	4
  8530   0017A0  6E7B               	movwf	_index^0,c
  8531   0017A2  0012               	return		;funcret
  8532   0017A4                     __end_of_initData:
  8533                           	callstack 0
  8534                           
  8535 ;; *************** function _Terminal_Init *****************
  8536 ;; Defined at:
  8537 ;;		line 10 in file "TAD_TERMINAL.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;		None
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;		None
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  1    wreg      void 
  8544 ;; Registers used:
  8545 ;;		wreg, status,2
  8546 ;; Tracked objects:
  8547 ;;		On entry : 0/0
  8548 ;;		On exit  : 0/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMRAM   BANK0   BANK1
  8551 ;;      Params:         0       0       0
  8552 ;;      Locals:         0       0       0
  8553 ;;      Temps:          0       0       0
  8554 ;;      Totals:         0       0       0
  8555 ;;Total ram usage:        0 bytes
  8556 ;; Hardware stack levels used: 1
  8557 ;; Hardware stack levels required when called: 3
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_main
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text40
  8566   001B3C                     __ptext40:
  8567                           	callstack 0
  8568   001B3C                     _Terminal_Init:
  8569                           	callstack 27
  8570                           
  8571                           ;TAD_TERMINAL.c: 11:  TXSTA = 0x24;
  8572                           
  8573                           ;incstack = 0
  8574   001B3C  0E24               	movlw	36
  8575   001B3E  6EAC               	movwf	172,c	;volatile
  8576                           
  8577                           ;TAD_TERMINAL.c: 12:  RCSTA = 0x90;
  8578   001B40  0E90               	movlw	144
  8579   001B42  6EAB               	movwf	171,c	;volatile
  8580                           
  8581                           ;TAD_TERMINAL.c: 13:  SPBRG = 255;
  8582   001B44  68AF               	setf	175,c	;volatile
  8583                           
  8584                           ;TAD_TERMINAL.c: 14:  BAUDCON = 0x00;
  8585   001B46  6AB8               	clrf	184,c	;volatile
  8586                           
  8587                           ;TAD_TERMINAL.c: 15:  hashtag_pressed = 0;
  8588   001B48  6A21               	clrf	_hashtag_pressed^0,c
  8589   001B4A  0012               	return		;funcret
  8590   001B4C                     __end_of_Terminal_Init:
  8591                           	callstack 0
  8592                           
  8593 ;; *************** function _TI_Init *****************
  8594 ;; Defined at:
  8595 ;;		line 32 in file "TAD_TIMER.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;		None
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  counter         1    1[COMRAM] unsigned char 
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  1    wreg      void 
  8602 ;; Registers used:
  8603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMRAM   BANK0   BANK1
  8609 ;;      Params:         0       0       0
  8610 ;;      Locals:         1       0       0
  8611 ;;      Temps:          0       0       0
  8612 ;;      Totals:         1       0       0
  8613 ;;Total ram usage:        1 bytes
  8614 ;; Hardware stack levels used: 1
  8615 ;; Hardware stack levels required when called: 3
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_main
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           	psect	text41
  8624   00198A                     __ptext41:
  8625                           	callstack 0
  8626   00198A                     _TI_Init:
  8627                           	callstack 27
  8628                           
  8629                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  8630                           
  8631                           ;incstack = 0
  8632   00198A  6A55               	clrf	TI_Init@counter^0,c
  8633   00198C                     l3973:
  8634                           
  8635                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  8636   00198C  5055               	movf	TI_Init@counter^0,w,c
  8637   00198E  0D05               	mullw	5
  8638   001990  50F3               	movf	243,w,c
  8639   001992  0FA2               	addlw	low (_Timers+4)
  8640   001994  6ED9               	movwf	fsr2l,c
  8641   001996  6ADA               	clrf	fsr2h,c
  8642   001998  6ADF               	clrf	indf2,c
  8643                           
  8644                           ;TAD_TIMER.c: 35:  }
  8645   00199A  2A55               	incf	TI_Init@counter^0,f,c
  8646   00199C  0E03               	movlw	3
  8647   00199E  6455               	cpfsgt	TI_Init@counter^0,c
  8648   0019A0  D7F5               	goto	l3973
  8649                           
  8650                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  8651   0019A2  0E82               	movlw	130
  8652   0019A4  6ED5               	movwf	213,c	;volatile
  8653                           
  8654                           ;TAD_TIMER.c: 37:     TMR0=63036;
  8655   0019A6  0EF6               	movlw	246
  8656   0019A8  6ED7               	movwf	215,c	;volatile
  8657   0019AA  0E3C               	movlw	60
  8658   0019AC  6ED6               	movwf	214,c	;volatile
  8659                           
  8660                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  8661   0019AE  94F2               	bcf	242,2,c	;volatile
  8662                           
  8663                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  8664   0019B0  8AF2               	bsf	242,5,c	;volatile
  8665   0019B2  0012               	return		;funcret
  8666   0019B4                     __end_of_TI_Init:
  8667                           	callstack 0
  8668                           
  8669 ;; *************** function _LcInit *****************
  8670 ;; Defined at:
  8671 ;;		line 68 in file "TAD_DISPLAY.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  rows            1    wreg     unsigned char 
  8674 ;;  columns         1   22[COMRAM] unsigned char 
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  rows            1   23[COMRAM] unsigned char 
  8677 ;;  i               2   24[COMRAM] int 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      void 
  8680 ;; Registers used:
  8681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1
  8687 ;;      Params:         1       0       0
  8688 ;;      Locals:         3       0       0
  8689 ;;      Temps:          0       0       0
  8690 ;;      Totals:         4       0       0
  8691 ;;Total ram usage:        4 bytes
  8692 ;; Hardware stack levels used: 1
  8693 ;; Hardware stack levels required when called: 6
  8694 ;; This function calls:
  8695 ;;		_CantaIR
  8696 ;;		_EscriuPrimeraOrdre
  8697 ;;		_Espera
  8698 ;;		_TI_NewTimer
  8699 ;;		_WaitForBusy
  8700 ;; This function is called by:
  8701 ;;		_main
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text42
  8706   000DFE                     __ptext42:
  8707                           	callstack 0
  8708   000DFE                     _LcInit:
  8709                           	callstack 24
  8710                           
  8711                           ;incstack = 0
  8712                           ;LcInit@rows stored from wreg
  8713   000DFE  6E6B               	movwf	LcInit@rows^0,c
  8714                           
  8715                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  8716   000E00  0E53               	movlw	low _Timer
  8717   000E02  6E55               	movwf	TI_NewTimer@TimerHandle^0,c
  8718   000E04  EC40  F00C         	call	_TI_NewTimer	;wreg free
  8719                           
  8720                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  8721   000E08  C06B  F03E         	movff	LcInit@rows,_Rows
  8722   000E0C  C06A  F03D         	movff	LcInit@columns,_Columns
  8723                           
  8724                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  8725   000E10  6A3B               	clrf	_ColumnAct^0,c
  8726   000E12  6A3C               	clrf	_RowAct^0,c
  8727                           
  8728                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  8729   000E14  9293               	bcf	147,1,c	;volatile
  8730   000E16  9493               	bcf	147,2,c	;volatile
  8731   000E18  9693               	bcf	147,3,c	;volatile
  8732                           
  8733                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  8734   000E1A  0E00               	movlw	0
  8735   000E1C  6E6D               	movwf	(LcInit@i+1)^0,c
  8736   000E1E  0E00               	movlw	0
  8737   000E20  6E6C               	movwf	LcInit@i^0,c
  8738   000E22                     l4047:
  8739                           
  8740                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  8741   000E22  C053  F062         	movff	_Timer,Espera@Timer
  8742   000E26  6A63               	clrf	(Espera@Timer+1)^0,c
  8743   000E28  0E00               	movlw	0
  8744   000E2A  6E65               	movwf	(Espera@ms+1)^0,c
  8745   000E2C  0E64               	movlw	100
  8746   000E2E  6E64               	movwf	Espera@ms^0,c
  8747   000E30  EC79  F00C         	call	_Espera	;wreg free
  8748                           
  8749                           ;TAD_DISPLAY.c: 81:   EscriuPrimeraOrdre(0x02 | 0x01);
  8750   000E34  0E03               	movlw	3
  8751   000E36  EC65  F009         	call	_EscriuPrimeraOrdre
  8752                           
  8753                           ;TAD_DISPLAY.c: 82:   Espera(Timer, 4);
  8754   000E3A  C053  F062         	movff	_Timer,Espera@Timer
  8755   000E3E  6A63               	clrf	(Espera@Timer+1)^0,c
  8756   000E40  0E00               	movlw	0
  8757   000E42  6E65               	movwf	(Espera@ms+1)^0,c
  8758   000E44  0E04               	movlw	4
  8759   000E46  6E64               	movwf	Espera@ms^0,c
  8760   000E48  EC79  F00C         	call	_Espera	;wreg free
  8761                           
  8762                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  8763   000E4C  0E03               	movlw	3
  8764   000E4E  EC65  F009         	call	_EscriuPrimeraOrdre
  8765                           
  8766                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 1);
  8767   000E52  C053  F062         	movff	_Timer,Espera@Timer
  8768   000E56  6A63               	clrf	(Espera@Timer+1)^0,c
  8769   000E58  0E00               	movlw	0
  8770   000E5A  6E65               	movwf	(Espera@ms+1)^0,c
  8771   000E5C  0E01               	movlw	1
  8772   000E5E  6E64               	movwf	Espera@ms^0,c
  8773   000E60  EC79  F00C         	call	_Espera	;wreg free
  8774                           
  8775                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  8776   000E64  0E03               	movlw	3
  8777   000E66  EC65  F009         	call	_EscriuPrimeraOrdre
  8778                           
  8779                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  8780   000E6A  C053  F062         	movff	_Timer,Espera@Timer
  8781   000E6E  6A63               	clrf	(Espera@Timer+1)^0,c
  8782   000E70  0E00               	movlw	0
  8783   000E72  6E65               	movwf	(Espera@ms+1)^0,c
  8784   000E74  0E01               	movlw	1
  8785   000E76  6E64               	movwf	Espera@ms^0,c
  8786   000E78  EC79  F00C         	call	_Espera	;wreg free
  8787                           
  8788                           ;TAD_DISPLAY.c: 89:   EscriuPrimeraOrdre(0x02);
  8789   000E7C  0E02               	movlw	2
  8790   000E7E  EC65  F009         	call	_EscriuPrimeraOrdre
  8791                           
  8792                           ;TAD_DISPLAY.c: 90:   Espera(Timer, 1);
  8793   000E82  C053  F062         	movff	_Timer,Espera@Timer
  8794   000E86  6A63               	clrf	(Espera@Timer+1)^0,c
  8795   000E88  0E00               	movlw	0
  8796   000E8A  6E65               	movwf	(Espera@ms+1)^0,c
  8797   000E8C  0E01               	movlw	1
  8798   000E8E  6E64               	movwf	Espera@ms^0,c
  8799   000E90  EC79  F00C         	call	_Espera	;wreg free
  8800                           
  8801                           ;TAD_DISPLAY.c: 91:   CantaIR(0x20 | 0x08);
  8802   000E94  0E28               	movlw	40
  8803   000E96  ECAC  F00C         	call	_CantaIR
  8804                           
  8805                           ;TAD_DISPLAY.c: 94:   WaitForBusy(); CantaIR(0x08);
  8806   000E9A  EC94  F00D         	call	_WaitForBusy	;wreg free
  8807   000E9E  0E08               	movlw	8
  8808   000EA0  ECAC  F00C         	call	_CantaIR
  8809                           
  8810                           ;TAD_DISPLAY.c: 95:   WaitForBusy(); CantaIR(0x01);
  8811   000EA4  EC94  F00D         	call	_WaitForBusy	;wreg free
  8812   000EA8  0E01               	movlw	1
  8813   000EAA  ECAC  F00C         	call	_CantaIR
  8814                           
  8815                           ;TAD_DISPLAY.c: 96:   Espera(Timer,2);
  8816   000EAE  C053  F062         	movff	_Timer,Espera@Timer
  8817   000EB2  6A63               	clrf	(Espera@Timer+1)^0,c
  8818   000EB4  0E00               	movlw	0
  8819   000EB6  6E65               	movwf	(Espera@ms+1)^0,c
  8820   000EB8  0E02               	movlw	2
  8821   000EBA  6E64               	movwf	Espera@ms^0,c
  8822   000EBC  EC79  F00C         	call	_Espera	;wreg free
  8823                           
  8824                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8825   000EC0  EC94  F00D         	call	_WaitForBusy	;wreg free
  8826   000EC4  0E06               	movlw	6
  8827   000EC6  ECAC  F00C         	call	_CantaIR
  8828                           
  8829                           ;TAD_DISPLAY.c: 98:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8830   000ECA  EC94  F00D         	call	_WaitForBusy	;wreg free
  8831   000ECE  0E0F               	movlw	15
  8832   000ED0  ECAC  F00C         	call	_CantaIR
  8833                           
  8834                           ;TAD_DISPLAY.c: 99:  }
  8835   000ED4  4A6C               	infsnz	LcInit@i^0,f,c
  8836   000ED6  2A6D               	incf	(LcInit@i+1)^0,f,c
  8837   000ED8  BE6D               	btfsc	(LcInit@i+1)^0,7,c
  8838   000EDA  D7A3               	goto	l4047
  8839   000EDC  506D               	movf	(LcInit@i+1)^0,w,c
  8840   000EDE  E105               	bnz	u3470
  8841   000EE0  0E02               	movlw	2
  8842   000EE2  5C6C               	subwf	LcInit@i^0,w,c
  8843   000EE4  B0D8               	btfsc	status,0,c
  8844   000EE6  0012               	return	
  8845   000EE8  D79C               	goto	l4047
  8846   000EEA                     u3470:
  8847   000EEA  0012               	return		;funcret
  8848   000EEC                     __end_of_LcInit:
  8849                           	callstack 0
  8850                           
  8851 ;; *************** function _WaitForBusy *****************
  8852 ;; Defined at:
  8853 ;;		line 254 in file "TAD_DISPLAY.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;  Busy            1    0        unsigned char 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      void 
  8860 ;; Registers used:
  8861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1
  8867 ;;      Params:         0       0       0
  8868 ;;      Locals:         0       0       0
  8869 ;;      Temps:          0       0       0
  8870 ;;      Totals:         0       0       0
  8871 ;;Total ram usage:        0 bytes
  8872 ;; Hardware stack levels used: 1
  8873 ;; Hardware stack levels required when called: 5
  8874 ;; This function calls:
  8875 ;;		_Espera
  8876 ;; This function is called by:
  8877 ;;		_LcInit
  8878 ;;		_LcGotoXY
  8879 ;;		_LcPutChar
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           	psect	text43
  8884   001B28                     __ptext43:
  8885                           	callstack 0
  8886   001B28                     _WaitForBusy:
  8887                           	callstack 23
  8888                           
  8889                           ;TAD_DISPLAY.c: 255:  Espera(Timer, 2);
  8890                           
  8891                           ;incstack = 0
  8892   001B28  C053  F062         	movff	_Timer,Espera@Timer
  8893   001B2C  6A63               	clrf	(Espera@Timer+1)^0,c
  8894   001B2E  0E00               	movlw	0
  8895   001B30  6E65               	movwf	(Espera@ms+1)^0,c
  8896   001B32  0E02               	movlw	2
  8897   001B34  6E64               	movwf	Espera@ms^0,c
  8898   001B36  EC79  F00C         	call	_Espera	;wreg free
  8899   001B3A  0012               	return		;funcret
  8900   001B3C                     __end_of_WaitForBusy:
  8901                           	callstack 0
  8902                           
  8903 ;; *************** function _Espera *****************
  8904 ;; Defined at:
  8905 ;;		line 203 in file "TAD_DISPLAY.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  Timer           2   14[COMRAM] int 
  8908 ;;  ms              2   16[COMRAM] int 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1
  8920 ;;      Params:         4       0       0
  8921 ;;      Locals:         0       0       0
  8922 ;;      Temps:          4       0       0
  8923 ;;      Totals:         8       0       0
  8924 ;;Total ram usage:        8 bytes
  8925 ;; Hardware stack levels used: 1
  8926 ;; Hardware stack levels required when called: 4
  8927 ;; This function calls:
  8928 ;;		_TI_GetTics
  8929 ;;		_TI_ResetTics
  8930 ;; This function is called by:
  8931 ;;		_LcInit
  8932 ;;		_WaitForBusy
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text44
  8937   0018F2                     __ptext44:
  8938                           	callstack 0
  8939   0018F2                     _Espera:
  8940                           	callstack 23
  8941                           
  8942                           ;TAD_DISPLAY.c: 204:  TI_ResetTics((unsigned char)Timer);
  8943                           
  8944                           ;incstack = 0
  8945   0018F2  5062               	movf	Espera@Timer^0,w,c
  8946   0018F4  EC14  F00D         	call	_TI_ResetTics
  8947   0018F8                     l3275:
  8948   0018F8  C064  F066         	movff	Espera@ms,??_Espera
  8949   0018FC  C065  F067         	movff	Espera@ms+1,??_Espera+1
  8950   001900  0E00               	movlw	0
  8951   001902  BE67               	btfsc	(??_Espera+1)^0,7,c
  8952   001904  0EFF               	movlw	255
  8953   001906  6E68               	movwf	(??_Espera+2)^0,c
  8954   001908  6E69               	movwf	(??_Espera+3)^0,c
  8955   00190A  5062               	movf	Espera@Timer^0,w,c
  8956   00190C  ECF9  F00B         	call	_TI_GetTics
  8957   001910  5066               	movf	??_Espera^0,w,c
  8958   001912  5C55               	subwf	?_TI_GetTics^0,w,c
  8959   001914  5067               	movf	(??_Espera+1)^0,w,c
  8960   001916  5856               	subwfb	(?_TI_GetTics+1)^0,w,c
  8961   001918  5068               	movf	(??_Espera+2)^0,w,c
  8962   00191A  5857               	subwfb	(?_TI_GetTics+2)^0,w,c
  8963   00191C  5069               	movf	(??_Espera+3)^0,w,c
  8964   00191E  5858               	subwfb	(?_TI_GetTics+3)^0,w,c
  8965   001920  B0D8               	btfsc	status,0,c
  8966   001922  0012               	return	
  8967   001924  D7E9               	goto	l3275
  8968   001926                     __end_of_Espera:
  8969                           	callstack 0
  8970                           
  8971 ;; *************** function _TI_ResetTics *****************
  8972 ;; Defined at:
  8973 ;;		line 53 in file "TAD_TIMER.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  TimerHandle     1    wreg     unsigned char 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      void 
  8980 ;; Registers used:
  8981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1
  8987 ;;      Params:         0       0       0
  8988 ;;      Locals:         1       0       0
  8989 ;;      Temps:          0       0       0
  8990 ;;      Totals:         1       0       0
  8991 ;;Total ram usage:        1 bytes
  8992 ;; Hardware stack levels used: 1
  8993 ;; Hardware stack levels required when called: 3
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_Espera
  8998 ;;		_motor_LEDs
  8999 ;;		_initRFID
  9000 ;;		_motor_RFID
  9001 ;;		_motorTeclado
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text45
  9006   001A28                     __ptext45:
  9007                           	callstack 0
  9008   001A28                     _TI_ResetTics:
  9009                           	callstack 23
  9010                           
  9011                           ;incstack = 0
  9012                           ;TI_ResetTics@TimerHandle stored from wreg
  9013   001A28  6E55               	movwf	TI_ResetTics@TimerHandle^0,c
  9014                           
  9015                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  9016   001A2A  9EF2               	bcf	242,7,c	;volatile
  9017   001A2C  5055               	movf	TI_ResetTics@TimerHandle^0,w,c
  9018   001A2E  0D05               	mullw	5
  9019   001A30  50F3               	movf	243,w,c
  9020   001A32  0F9E               	addlw	low _Timers
  9021   001A34  6ED9               	movwf	fsr2l,c
  9022   001A36  6ADA               	clrf	fsr2h,c
  9023   001A38  C007  FFDE         	movff	_Tics,postinc2	;volatile
  9024   001A3C  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  9025   001A40  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  9026   001A44  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  9027   001A48  8EF2               	bsf	242,7,c	;volatile
  9028   001A4A  0012               	return		;funcret
  9029   001A4C                     __end_of_TI_ResetTics:
  9030                           	callstack 0
  9031                           
  9032 ;; *************** function _TI_GetTics *****************
  9033 ;; Defined at:
  9034 ;;		line 61 in file "TAD_TIMER.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  TimerHandle     1    wreg     unsigned char 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  9039 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  4    1[COMRAM] unsigned long 
  9042 ;; Registers used:
  9043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1
  9049 ;;      Params:         4       0       0
  9050 ;;      Locals:         5       0       0
  9051 ;;      Temps:          4       0       0
  9052 ;;      Totals:        13       0       0
  9053 ;;Total ram usage:       13 bytes
  9054 ;; Hardware stack levels used: 1
  9055 ;; Hardware stack levels required when called: 3
  9056 ;; This function calls:
  9057 ;;		Nothing
  9058 ;; This function is called by:
  9059 ;;		_Espera
  9060 ;;		_motor_LEDs
  9061 ;;		_motor_RFID
  9062 ;;		_motorTeclado
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text46
  9067   0017F2                     __ptext46:
  9068                           	callstack 0
  9069   0017F2                     _TI_GetTics:
  9070                           	callstack 23
  9071                           
  9072                           ;incstack = 0
  9073                           ;TI_GetTics@TimerHandle stored from wreg
  9074   0017F2  6E61               	movwf	TI_GetTics@TimerHandle^0,c
  9075                           
  9076                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  9077   0017F4  9EF2               	bcf	242,7,c	;volatile
  9078   0017F6  C007  F05D         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  9079   0017FA  C008  F05E         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  9080   0017FE  C009  F05F         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  9081   001802  C00A  F060         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  9082   001806  8EF2               	bsf	242,7,c	;volatile
  9083                           
  9084                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  9085   001808  5061               	movf	TI_GetTics@TimerHandle^0,w,c
  9086   00180A  0D05               	mullw	5
  9087   00180C  50F3               	movf	243,w,c
  9088   00180E  0F9E               	addlw	low _Timers
  9089   001810  6ED9               	movwf	fsr2l,c
  9090   001812  6ADA               	clrf	fsr2h,c
  9091   001814  CFDE F059          	movff	postinc2,??_TI_GetTics
  9092   001818  CFDE F05A          	movff	postinc2,??_TI_GetTics+1
  9093   00181C  CFDE F05B          	movff	postinc2,??_TI_GetTics+2
  9094   001820  CFDE F05C          	movff	postinc2,??_TI_GetTics+3
  9095   001824  5059               	movf	??_TI_GetTics^0,w,c
  9096   001826  5C5D               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  9097   001828  6E55               	movwf	?_TI_GetTics^0,c
  9098   00182A  505A               	movf	(??_TI_GetTics+1)^0,w,c
  9099   00182C  585E               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  9100   00182E  6E56               	movwf	(?_TI_GetTics+1)^0,c
  9101   001830  505B               	movf	(??_TI_GetTics+2)^0,w,c
  9102   001832  585F               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  9103   001834  6E57               	movwf	(?_TI_GetTics+2)^0,c
  9104   001836  505C               	movf	(??_TI_GetTics+3)^0,w,c
  9105   001838  5860               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  9106   00183A  6E58               	movwf	(?_TI_GetTics+3)^0,c
  9107   00183C  0012               	return		;funcret
  9108   00183E                     __end_of_TI_GetTics:
  9109                           	callstack 0
  9110                           
  9111 ;; *************** function _TI_NewTimer *****************
  9112 ;; Defined at:
  9113 ;;		line 43 in file "TAD_TIMER.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  9116 ;;		 -> timer_teclado(1), card_timer(1), timer(1), Timer(1), 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  Comptador       1    3[COMRAM] unsigned char 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      unsigned char 
  9121 ;; Registers used:
  9122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1
  9128 ;;      Params:         1       0       0
  9129 ;;      Locals:         1       0       0
  9130 ;;      Temps:          1       0       0
  9131 ;;      Totals:         3       0       0
  9132 ;;Total ram usage:        3 bytes
  9133 ;; Hardware stack levels used: 1
  9134 ;; Hardware stack levels required when called: 3
  9135 ;; This function calls:
  9136 ;;		Nothing
  9137 ;; This function is called by:
  9138 ;;		_LcInit
  9139 ;;		_initLeds
  9140 ;;		_initRFID
  9141 ;;		_initTeclado
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           	psect	text47
  9146   001880                     __ptext47:
  9147                           	callstack 0
  9148   001880                     _TI_NewTimer:
  9149                           	callstack 26
  9150                           
  9151                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  9152                           
  9153                           ;incstack = 0
  9154   001880  6A57               	clrf	TI_NewTimer@Comptador^0,c
  9155                           
  9156                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9157   001882  D005               	goto	l3599
  9158   001884                     l3595:
  9159                           
  9160                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  9161   001884  2A57               	incf	TI_NewTimer@Comptador^0,f,c
  9162   001886  0E04               	movlw	4
  9163   001888  1857               	xorwf	TI_NewTimer@Comptador^0,w,c
  9164   00188A  B4D8               	btfsc	status,2,c
  9165   00188C  0012               	return	
  9166   00188E                     l3599:
  9167                           
  9168                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  9169   00188E  5057               	movf	TI_NewTimer@Comptador^0,w,c
  9170   001890  0D05               	mullw	5
  9171   001892  50F3               	movf	243,w,c
  9172   001894  0FA2               	addlw	low (_Timers+4)
  9173   001896  6ED9               	movwf	fsr2l,c
  9174   001898  6ADA               	clrf	fsr2h,c
  9175   00189A  04DE               	decf	postinc2,w,c
  9176   00189C  B4D8               	btfsc	status,2,c
  9177   00189E  D7F2               	goto	l3595
  9178                           
  9179                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  9180   0018A0  5057               	movf	TI_NewTimer@Comptador^0,w,c
  9181   0018A2  0D05               	mullw	5
  9182   0018A4  50F3               	movf	243,w,c
  9183   0018A6  0FA2               	addlw	low (_Timers+4)
  9184   0018A8  6ED9               	movwf	fsr2l,c
  9185   0018AA  6ADA               	clrf	fsr2h,c
  9186   0018AC  0E01               	movlw	1
  9187   0018AE  6EDF               	movwf	indf2,c
  9188                           
  9189                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  9190   0018B0  5055               	movf	TI_NewTimer@TimerHandle^0,w,c
  9191   0018B2  6ED9               	movwf	fsr2l,c
  9192   0018B4  6ADA               	clrf	fsr2h,c
  9193   0018B6  C057  FFDF         	movff	TI_NewTimer@Comptador,indf2
  9194   0018BA  0012               	return		;funcret
  9195   0018BC                     __end_of_TI_NewTimer:
  9196                           	callstack 0
  9197                           
  9198 ;; *************** function _EscriuPrimeraOrdre *****************
  9199 ;; Defined at:
  9200 ;;		line 258 in file "TAD_DISPLAY.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;  ordre           1    wreg     unsigned char 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  ordre           1    2[COMRAM] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      void 
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1
  9214 ;;      Params:         0       0       0
  9215 ;;      Locals:         1       0       0
  9216 ;;      Temps:          1       0       0
  9217 ;;      Totals:         2       0       0
  9218 ;;Total ram usage:        2 bytes
  9219 ;; Hardware stack levels used: 1
  9220 ;; Hardware stack levels required when called: 3
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_LcInit
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text48
  9229   0012CA                     __ptext48:
  9230                           	callstack 0
  9231   0012CA                     _EscriuPrimeraOrdre:
  9232                           	callstack 26
  9233                           
  9234                           ;incstack = 0
  9235                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9236   0012CA  6E56               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9237                           
  9238                           ;TAD_DISPLAY.c: 260:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  9239   0012CC  9096               	bcf	150,0,c	;volatile
  9240   0012CE  9296               	bcf	150,1,c	;volatile
  9241   0012D0  9A93               	bcf	147,5,c	;volatile
  9242   0012D2  9893               	bcf	147,4,c	;volatile
  9243   0012D4  968A               	bcf	138,3,c	;volatile
  9244   0012D6  948A               	bcf	138,2,c	;volatile
  9245                           
  9246                           ;TAD_DISPLAY.c: 261:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  9247   0012D8  828A               	bsf	138,1,c	;volatile
  9248   0012DA  828A               	bsf	138,1,c	;volatile
  9249                           
  9250                           ;TAD_DISPLAY.c: 262:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  9251   0012DC  A656               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9252   0012DE  D003               	goto	u570
  9253   0012E0  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9254   0012E2  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9255   0012E4  D001               	goto	u588
  9256   0012E6                     u570:
  9257   0012E6  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9258   0012E8                     u588:
  9259   0012E8  508D               	movf	141,w,c	;volatile
  9260   0012EA  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9261   0012EC  0BFE               	andlw	-2
  9262   0012EE  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9263   0012F0  6E8D               	movwf	141,c	;volatile
  9264                           
  9265                           ;TAD_DISPLAY.c: 263:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  9266   0012F2  A456               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9267   0012F4  D003               	goto	u590
  9268   0012F6  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9269   0012F8  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9270   0012FA  D001               	goto	u608
  9271   0012FC                     u590:
  9272   0012FC  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9273   0012FE                     u608:
  9274   0012FE  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9275   001300  508D               	movf	141,w,c	;volatile
  9276   001302  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9277   001304  0BFD               	andlw	-3
  9278   001306  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9279   001308  6E8D               	movwf	141,c	;volatile
  9280                           
  9281                           ;TAD_DISPLAY.c: 264:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  9282   00130A  A256               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9283   00130C  D003               	goto	u610
  9284   00130E  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9285   001310  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9286   001312  D001               	goto	u628
  9287   001314                     u610:
  9288   001314  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9289   001316                     u628:
  9290   001316  3A55               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9291   001318  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9292   00131A  508A               	movf	138,w,c	;volatile
  9293   00131C  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9294   00131E  0BDF               	andlw	-33
  9295   001320  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9296   001322  6E8A               	movwf	138,c	;volatile
  9297                           
  9298                           ;TAD_DISPLAY.c: 265:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  9299   001324  A056               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9300   001326  D003               	goto	u630
  9301   001328  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9302   00132A  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9303   00132C  D001               	goto	u648
  9304   00132E                     u630:
  9305   00132E  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9306   001330                     u648:
  9307   001330  3A55               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9308   001332  508A               	movf	138,w,c	;volatile
  9309   001334  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9310   001336  0BEF               	andlw	-17
  9311   001338  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9312   00133A  6E8A               	movwf	138,c	;volatile
  9313                           
  9314                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB1 = 0);
  9315   00133C  928A               	bcf	138,1,c	;volatile
  9316   00133E  0012               	return		;funcret
  9317   001340                     __end_of_EscriuPrimeraOrdre:
  9318                           	callstack 0
  9319                           
  9320 ;; *************** function _CantaIR *****************
  9321 ;; Defined at:
  9322 ;;		line 222 in file "TAD_DISPLAY.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  IR              1    wreg     unsigned char 
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  IR              1    3[COMRAM] unsigned char 
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  1    wreg      void 
  9329 ;; Registers used:
  9330 ;;		wreg, status,2, status,0, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMRAM   BANK0   BANK1
  9336 ;;      Params:         0       0       0
  9337 ;;      Locals:         1       0       0
  9338 ;;      Temps:          0       0       0
  9339 ;;      Totals:         1       0       0
  9340 ;;Total ram usage:        1 bytes
  9341 ;; Hardware stack levels used: 1
  9342 ;; Hardware stack levels required when called: 4
  9343 ;; This function calls:
  9344 ;;		_CantaPartAlta
  9345 ;;		_CantaPartBaixa
  9346 ;; This function is called by:
  9347 ;;		_LcInit
  9348 ;;		_LcGotoXY
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text49
  9353   001958                     __ptext49:
  9354                           	callstack 0
  9355   001958                     _CantaIR:
  9356                           	callstack 23
  9357                           
  9358                           ;incstack = 0
  9359                           ;CantaIR@IR stored from wreg
  9360   001958  6E57               	movwf	CantaIR@IR^0,c
  9361                           
  9362                           ;TAD_DISPLAY.c: 223:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  9363   00195A  9096               	bcf	150,0,c	;volatile
  9364   00195C  9296               	bcf	150,1,c	;volatile
  9365   00195E  9A93               	bcf	147,5,c	;volatile
  9366   001960  9893               	bcf	147,4,c	;volatile
  9367                           
  9368                           ;TAD_DISPLAY.c: 224:  (LATBbits.LATB3 = 0);
  9369   001962  968A               	bcf	138,3,c	;volatile
  9370                           
  9371                           ;TAD_DISPLAY.c: 225:  (LATBbits.LATB2 = 0);
  9372   001964  948A               	bcf	138,2,c	;volatile
  9373                           
  9374                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB1 = 1);
  9375   001966  828A               	bsf	138,1,c	;volatile
  9376                           
  9377                           ;TAD_DISPLAY.c: 227:  CantaPartAlta(IR);
  9378   001968  5057               	movf	CantaIR@IR^0,w,c
  9379   00196A  ECEB  F00A         	call	_CantaPartAlta
  9380                           
  9381                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  9382   00196E  828A               	bsf	138,1,c	;volatile
  9383                           
  9384                           ;TAD_DISPLAY.c: 229:  (LATBbits.LATB1 = 0);
  9385   001970  928A               	bcf	138,1,c	;volatile
  9386                           
  9387                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 0);
  9388   001972  928A               	bcf	138,1,c	;volatile
  9389                           
  9390                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 1);
  9391   001974  828A               	bsf	138,1,c	;volatile
  9392                           
  9393                           ;TAD_DISPLAY.c: 232:  CantaPartBaixa(IR);
  9394   001976  5057               	movf	CantaIR@IR^0,w,c
  9395   001978  ECB9  F00A         	call	_CantaPartBaixa
  9396                           
  9397                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  9398   00197C  828A               	bsf	138,1,c	;volatile
  9399                           
  9400                           ;TAD_DISPLAY.c: 234:  (LATBbits.LATB1 = 0);
  9401   00197E  928A               	bcf	138,1,c	;volatile
  9402                           
  9403                           ;TAD_DISPLAY.c: 235:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  9404   001980  8096               	bsf	150,0,c	;volatile
  9405   001982  8296               	bsf	150,1,c	;volatile
  9406   001984  8A93               	bsf	147,5,c	;volatile
  9407   001986  8893               	bsf	147,4,c	;volatile
  9408   001988  0012               	return		;funcret
  9409   00198A                     __end_of_CantaIR:
  9410                           	callstack 0
  9411                           
  9412 ;; *************** function _CantaPartBaixa *****************
  9413 ;; Defined at:
  9414 ;;		line 215 in file "TAD_DISPLAY.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  c               1    wreg     unsigned char 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  c               1    2[COMRAM] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1
  9428 ;;      Params:         0       0       0
  9429 ;;      Locals:         1       0       0
  9430 ;;      Temps:          1       0       0
  9431 ;;      Totals:         2       0       0
  9432 ;;Total ram usage:        2 bytes
  9433 ;; Hardware stack levels used: 1
  9434 ;; Hardware stack levels required when called: 3
  9435 ;; This function calls:
  9436 ;;		Nothing
  9437 ;; This function is called by:
  9438 ;;		_CantaIR
  9439 ;;		_CantaData
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text50
  9444   001572                     __ptext50:
  9445                           	callstack 0
  9446   001572                     _CantaPartBaixa:
  9447                           	callstack 23
  9448                           
  9449                           ;incstack = 0
  9450                           ;CantaPartBaixa@c stored from wreg
  9451   001572  6E56               	movwf	CantaPartBaixa@c^0,c
  9452                           
  9453                           ;TAD_DISPLAY.c: 216:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  9454   001574  A656               	btfss	CantaPartBaixa@c^0,3,c
  9455   001576  D003               	goto	u2390
  9456   001578  6A55               	clrf	??_CantaPartBaixa^0,c
  9457   00157A  2A55               	incf	??_CantaPartBaixa^0,f,c
  9458   00157C  D001               	goto	u2408
  9459   00157E                     u2390:
  9460   00157E  6A55               	clrf	??_CantaPartBaixa^0,c
  9461   001580                     u2408:
  9462   001580  508D               	movf	141,w,c	;volatile
  9463   001582  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9464   001584  0BFE               	andlw	-2
  9465   001586  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9466   001588  6E8D               	movwf	141,c	;volatile
  9467                           
  9468                           ;TAD_DISPLAY.c: 217:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9469   00158A  A456               	btfss	CantaPartBaixa@c^0,2,c
  9470   00158C  D003               	goto	u2410
  9471   00158E  6A55               	clrf	??_CantaPartBaixa^0,c
  9472   001590  2A55               	incf	??_CantaPartBaixa^0,f,c
  9473   001592  D001               	goto	u2428
  9474   001594                     u2410:
  9475   001594  6A55               	clrf	??_CantaPartBaixa^0,c
  9476   001596                     u2428:
  9477   001596  4655               	rlncf	??_CantaPartBaixa^0,f,c
  9478   001598  508D               	movf	141,w,c	;volatile
  9479   00159A  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9480   00159C  0BFD               	andlw	-3
  9481   00159E  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9482   0015A0  6E8D               	movwf	141,c	;volatile
  9483                           
  9484                           ;TAD_DISPLAY.c: 218:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  9485   0015A2  A256               	btfss	CantaPartBaixa@c^0,1,c
  9486   0015A4  D003               	goto	u2430
  9487   0015A6  6A55               	clrf	??_CantaPartBaixa^0,c
  9488   0015A8  2A55               	incf	??_CantaPartBaixa^0,f,c
  9489   0015AA  D001               	goto	u2448
  9490   0015AC                     u2430:
  9491   0015AC  6A55               	clrf	??_CantaPartBaixa^0,c
  9492   0015AE                     u2448:
  9493   0015AE  3A55               	swapf	??_CantaPartBaixa^0,f,c
  9494   0015B0  4655               	rlncf	??_CantaPartBaixa^0,f,c
  9495   0015B2  508A               	movf	138,w,c	;volatile
  9496   0015B4  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9497   0015B6  0BDF               	andlw	-33
  9498   0015B8  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9499   0015BA  6E8A               	movwf	138,c	;volatile
  9500                           
  9501                           ;TAD_DISPLAY.c: 219:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  9502   0015BC  A056               	btfss	CantaPartBaixa@c^0,0,c
  9503   0015BE  D003               	goto	u2450
  9504   0015C0  6A55               	clrf	??_CantaPartBaixa^0,c
  9505   0015C2  2A55               	incf	??_CantaPartBaixa^0,f,c
  9506   0015C4  D001               	goto	u2468
  9507   0015C6                     u2450:
  9508   0015C6  6A55               	clrf	??_CantaPartBaixa^0,c
  9509   0015C8                     u2468:
  9510   0015C8  3A55               	swapf	??_CantaPartBaixa^0,f,c
  9511   0015CA  508A               	movf	138,w,c	;volatile
  9512   0015CC  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9513   0015CE  0BEF               	andlw	-17
  9514   0015D0  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9515   0015D2  6E8A               	movwf	138,c	;volatile
  9516   0015D4  0012               	return		;funcret
  9517   0015D6                     __end_of_CantaPartBaixa:
  9518                           	callstack 0
  9519                           
  9520 ;; *************** function _CantaPartAlta *****************
  9521 ;; Defined at:
  9522 ;;		line 208 in file "TAD_DISPLAY.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  c               1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  c               1    2[COMRAM] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  1    wreg      void 
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1
  9536 ;;      Params:         0       0       0
  9537 ;;      Locals:         1       0       0
  9538 ;;      Temps:          1       0       0
  9539 ;;      Totals:         2       0       0
  9540 ;;Total ram usage:        2 bytes
  9541 ;; Hardware stack levels used: 1
  9542 ;; Hardware stack levels required when called: 3
  9543 ;; This function calls:
  9544 ;;		Nothing
  9545 ;; This function is called by:
  9546 ;;		_CantaIR
  9547 ;;		_CantaData
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           	psect	text51
  9552   0015D6                     __ptext51:
  9553                           	callstack 0
  9554   0015D6                     _CantaPartAlta:
  9555                           	callstack 23
  9556                           
  9557                           ;incstack = 0
  9558                           ;CantaPartAlta@c stored from wreg
  9559   0015D6  6E56               	movwf	CantaPartAlta@c^0,c
  9560                           
  9561                           ;TAD_DISPLAY.c: 209:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  9562   0015D8  AE56               	btfss	CantaPartAlta@c^0,7,c
  9563   0015DA  D003               	goto	u2310
  9564   0015DC  6A55               	clrf	??_CantaPartAlta^0,c
  9565   0015DE  2A55               	incf	??_CantaPartAlta^0,f,c
  9566   0015E0  D001               	goto	u2328
  9567   0015E2                     u2310:
  9568   0015E2  6A55               	clrf	??_CantaPartAlta^0,c
  9569   0015E4                     u2328:
  9570   0015E4  508D               	movf	141,w,c	;volatile
  9571   0015E6  1855               	xorwf	??_CantaPartAlta^0,w,c
  9572   0015E8  0BFE               	andlw	-2
  9573   0015EA  1855               	xorwf	??_CantaPartAlta^0,w,c
  9574   0015EC  6E8D               	movwf	141,c	;volatile
  9575                           
  9576                           ;TAD_DISPLAY.c: 210:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9577   0015EE  AC56               	btfss	CantaPartAlta@c^0,6,c
  9578   0015F0  D003               	goto	u2330
  9579   0015F2  6A55               	clrf	??_CantaPartAlta^0,c
  9580   0015F4  2A55               	incf	??_CantaPartAlta^0,f,c
  9581   0015F6  D001               	goto	u2348
  9582   0015F8                     u2330:
  9583   0015F8  6A55               	clrf	??_CantaPartAlta^0,c
  9584   0015FA                     u2348:
  9585   0015FA  4655               	rlncf	??_CantaPartAlta^0,f,c
  9586   0015FC  508D               	movf	141,w,c	;volatile
  9587   0015FE  1855               	xorwf	??_CantaPartAlta^0,w,c
  9588   001600  0BFD               	andlw	-3
  9589   001602  1855               	xorwf	??_CantaPartAlta^0,w,c
  9590   001604  6E8D               	movwf	141,c	;volatile
  9591                           
  9592                           ;TAD_DISPLAY.c: 211:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  9593   001606  AA56               	btfss	CantaPartAlta@c^0,5,c
  9594   001608  D003               	goto	u2350
  9595   00160A  6A55               	clrf	??_CantaPartAlta^0,c
  9596   00160C  2A55               	incf	??_CantaPartAlta^0,f,c
  9597   00160E  D001               	goto	u2368
  9598   001610                     u2350:
  9599   001610  6A55               	clrf	??_CantaPartAlta^0,c
  9600   001612                     u2368:
  9601   001612  3A55               	swapf	??_CantaPartAlta^0,f,c
  9602   001614  4655               	rlncf	??_CantaPartAlta^0,f,c
  9603   001616  508A               	movf	138,w,c	;volatile
  9604   001618  1855               	xorwf	??_CantaPartAlta^0,w,c
  9605   00161A  0BDF               	andlw	-33
  9606   00161C  1855               	xorwf	??_CantaPartAlta^0,w,c
  9607   00161E  6E8A               	movwf	138,c	;volatile
  9608                           
  9609                           ;TAD_DISPLAY.c: 212:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  9610   001620  A856               	btfss	CantaPartAlta@c^0,4,c
  9611   001622  D003               	goto	u2370
  9612   001624  6A55               	clrf	??_CantaPartAlta^0,c
  9613   001626  2A55               	incf	??_CantaPartAlta^0,f,c
  9614   001628  D001               	goto	u2388
  9615   00162A                     u2370:
  9616   00162A  6A55               	clrf	??_CantaPartAlta^0,c
  9617   00162C                     u2388:
  9618   00162C  3A55               	swapf	??_CantaPartAlta^0,f,c
  9619   00162E  508A               	movf	138,w,c	;volatile
  9620   001630  1855               	xorwf	??_CantaPartAlta^0,w,c
  9621   001632  0BEF               	andlw	-17
  9622   001634  1855               	xorwf	??_CantaPartAlta^0,w,c
  9623   001636  6E8A               	movwf	138,c	;volatile
  9624   001638  0012               	return		;funcret
  9625   00163A                     __end_of_CantaPartAlta:
  9626                           	callstack 0
  9627                           
  9628 ;; *************** function _LowRSI *****************
  9629 ;; Defined at:
  9630 ;;		line 34 in file "main.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;		None
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      void 
  9637 ;; Registers used:
  9638 ;;		None
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMRAM   BANK0   BANK1
  9644 ;;      Params:         0       0       0
  9645 ;;      Locals:         0       0       0
  9646 ;;      Temps:          1       0       0
  9647 ;;      Totals:         1       0       0
  9648 ;;Total ram usage:        1 bytes
  9649 ;; Hardware stack levels used: 1
  9650 ;; Hardware stack levels required when called: 2
  9651 ;; This function calls:
  9652 ;;		Nothing
  9653 ;; This function is called by:
  9654 ;;		Interrupt level 1
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	intcodelo
  9659   000018                     __pintcodelo:
  9660                           	callstack 0
  9661   000018                     _LowRSI:
  9662                           	callstack 21
  9663                           
  9664                           ;incstack = 0
  9665   000018  807C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9666   00001A  CFE0 F054          	movff	bsr,??_LowRSI
  9667   00001E  C054  FFE0         	movff	??_LowRSI,bsr
  9668   000022  907C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9669   000024  0010               	retfie	
  9670   000026                     __end_of_LowRSI:
  9671                           	callstack 0
  9672                           
  9673 ;; *************** function _HighRSI *****************
  9674 ;; Defined at:
  9675 ;;		line 30 in file "main.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;		None
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, status,2, status,0, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1
  9689 ;;      Params:         0       0       0
  9690 ;;      Locals:         0       0       0
  9691 ;;      Temps:          0       0       0
  9692 ;;      Totals:         0       0       0
  9693 ;;Total ram usage:        0 bytes
  9694 ;; Hardware stack levels used: 1
  9695 ;; Hardware stack levels required when called: 1
  9696 ;; This function calls:
  9697 ;;		_RSI_Timer0
  9698 ;; This function is called by:
  9699 ;;		Interrupt level 2
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           	psect	intcode
  9704   000008                     __pintcode:
  9705                           	callstack 0
  9706   000008                     _HighRSI:
  9707                           	callstack 21
  9708                           
  9709                           ;incstack = 0
  9710   000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9711   00000A  EFB3  F00D         	goto	int_func
  9712                           
  9713                           	psect	intcode_body
  9714   001B66                     __pintcode_body:
  9715                           	callstack 21
  9716   001B66                     int_func:
  9717                           	callstack 21
  9718                           
  9719                           ;main.c: 32:      motor_RFID();
  9720   001B66  B4F2               	btfsc	242,2,c	;volatile
  9721   001B68  EC74  F00D         	call	_RSI_Timer0	;wreg free
  9722   001B6C  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9723   001B6E  0011               	retfie		f
  9724   001B70                     __end_of_HighRSI:
  9725                           	callstack 0
  9726                           
  9727 ;; *************** function _RSI_Timer0 *****************
  9728 ;; Defined at:
  9729 ;;		line 25 in file "TAD_TIMER.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;		None
  9734 ;; Return value:  Size  Location     Type
  9735 ;;                  1    wreg      void 
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMRAM   BANK0   BANK1
  9743 ;;      Params:         0       0       0
  9744 ;;      Locals:         0       0       0
  9745 ;;      Temps:          0       0       0
  9746 ;;      Totals:         0       0       0
  9747 ;;Total ram usage:        0 bytes
  9748 ;; Hardware stack levels used: 1
  9749 ;; This function calls:
  9750 ;;		Nothing
  9751 ;; This function is called by:
  9752 ;;		_HighRSI
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text54
  9757   001AE8                     __ptext54:
  9758                           	callstack 0
  9759   001AE8                     _RSI_Timer0:
  9760                           	callstack 21
  9761                           
  9762                           ;TAD_TIMER.c: 27:     TMR0=63036;
  9763                           
  9764                           ;incstack = 0
  9765   001AE8  0EF6               	movlw	246
  9766   001AEA  6ED7               	movwf	215,c	;volatile
  9767   001AEC  0E3C               	movlw	60
  9768   001AEE  6ED6               	movwf	214,c	;volatile
  9769                           
  9770                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  9771   001AF0  94F2               	bcf	4082,2,c	;volatile
  9772                           
  9773                           ;TAD_TIMER.c: 29:     Tics++;
  9774   001AF2  0E01               	movlw	1
  9775   001AF4  2607               	addwf	_Tics^0,f,c	;volatile
  9776   001AF6  0E00               	movlw	0
  9777   001AF8  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  9778   001AFA  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  9779   001AFC  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  9780   001AFE  0012               	return		;funcret
  9781   001B00                     __end_of_RSI_Timer0:
  9782                           	callstack 0
  9783                           
  9784                           	psect	rparam
  9785   000001                     ___rparam_used  equ	1
  9786   000000                     ___param_bank   equ	0
  9787   000000                     __Lparam        equ	__Lrparam
  9788   000000                     __Hparam        equ	__Hrparam
  9789                           
  9790                           	psect	temp
  9791   00007C                     btemp:
  9792                           	callstack 0
  9793   00007C                     	ds	1
  9794   00007C                     int$flags       set	btemp
  9795   00007D                     wtemp8          set	btemp+1
  9796   00007D                     ttemp5          set	btemp+1
  9797   000080                     ttemp6          set	btemp+4
  9798   000084                     ttemp7          set	btemp+8
  9799                           
  9800                           	psect	idloc
  9801                           
  9802                           ;Config register IDLOC0 @ 0x200000
  9803                           ;	unspecified, using default values
  9804   200000                     	org	2097152
  9805   200000  FF                 	db	255
  9806                           
  9807                           ;Config register IDLOC1 @ 0x200001
  9808                           ;	unspecified, using default values
  9809   200001                     	org	2097153
  9810   200001  FF                 	db	255
  9811                           
  9812                           ;Config register IDLOC2 @ 0x200002
  9813                           ;	unspecified, using default values
  9814   200002                     	org	2097154
  9815   200002  FF                 	db	255
  9816                           
  9817                           ;Config register IDLOC3 @ 0x200003
  9818                           ;	unspecified, using default values
  9819   200003                     	org	2097155
  9820   200003  FF                 	db	255
  9821                           
  9822                           ;Config register IDLOC4 @ 0x200004
  9823                           ;	unspecified, using default values
  9824   200004                     	org	2097156
  9825   200004  FF                 	db	255
  9826                           
  9827                           ;Config register IDLOC5 @ 0x200005
  9828                           ;	unspecified, using default values
  9829   200005                     	org	2097157
  9830   200005  FF                 	db	255
  9831                           
  9832                           ;Config register IDLOC6 @ 0x200006
  9833                           ;	unspecified, using default values
  9834   200006                     	org	2097158
  9835   200006  FF                 	db	255
  9836                           
  9837                           ;Config register IDLOC7 @ 0x200007
  9838                           ;	unspecified, using default values
  9839   200007                     	org	2097159
  9840   200007  FF                 	db	255
  9841                           
  9842                           	psect	config
  9843                           
  9844                           ; Padding undefined space
  9845   300000                     	org	3145728
  9846   300000  FF                 	db	255
  9847                           
  9848                           ;Config register CONFIG1H @ 0x300001
  9849                           ;	Oscillator
  9850                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9851                           ;	Fail-Safe Clock Monitor Enable bit
  9852                           ;	FCMEN = 0x0, unprogrammed default
  9853                           ;	Internal/External Oscillator Switchover bit
  9854                           ;	IESO = 0x0, unprogrammed default
  9855   300001                     	org	3145729
  9856   300001  06                 	db	6
  9857                           
  9858                           ;Config register CONFIG2L @ 0x300002
  9859                           ;	Power-up Timer Enable bit
  9860                           ;	PWRT = OFF, PWRT disabled
  9861                           ;	Brown-out Reset Enable bits
  9862                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9863                           ;	Brown-out Reset Voltage bits
  9864                           ;	BORV = 0x3, unprogrammed default
  9865   300002                     	org	3145730
  9866   300002  19                 	db	25
  9867                           
  9868                           ;Config register CONFIG2H @ 0x300003
  9869                           ;	Watchdog Timer Enable bit
  9870                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9871                           ;	Watchdog Timer Postscale Select bits
  9872                           ;	WDTPS = 0xF, unprogrammed default
  9873   300003                     	org	3145731
  9874   300003  1E                 	db	30
  9875                           
  9876                           ; Padding undefined space
  9877   300004                     	org	3145732
  9878   300004  FF                 	db	255
  9879                           
  9880                           ;Config register CONFIG3H @ 0x300005
  9881                           ;	CCP2 MUX bit
  9882                           ;	CCP2MX = 0x1, unprogrammed default
  9883                           ;	PORTB A/D Enable bit
  9884                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9885                           ;	Low-Power Timer1 Oscillator Enable bit
  9886                           ;	LPT1OSC = 0x0, unprogrammed default
  9887                           ;	MCLR Pin Enable bit
  9888                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9889   300005                     	org	3145733
  9890   300005  81                 	db	129
  9891                           
  9892                           ;Config register CONFIG4L @ 0x300006
  9893                           ;	Stack Full/Underflow Reset Enable bit
  9894                           ;	STVREN = 0x1, unprogrammed default
  9895                           ;	Single-Supply ICSP Enable bit
  9896                           ;	LVP = OFF, Single-Supply ICSP disabled
  9897                           ;	Boot Block Size Select bits
  9898                           ;	BBSIZ = 0x0, unprogrammed default
  9899                           ;	Extended Instruction Set Enable bit
  9900                           ;	XINST = 0x0, unprogrammed default
  9901                           ;	Background Debugger Enable bit
  9902                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9903   300006                     	org	3145734
  9904   300006  81                 	db	129
  9905                           
  9906                           ; Padding undefined space
  9907   300007                     	org	3145735
  9908   300007  FF                 	db	255
  9909                           
  9910                           ;Config register CONFIG5L @ 0x300008
  9911                           ;	unspecified, using default values
  9912                           ;	Code Protection bit
  9913                           ;	CP0 = 0x1, unprogrammed default
  9914                           ;	Code Protection bit
  9915                           ;	CP1 = 0x1, unprogrammed default
  9916   300008                     	org	3145736
  9917   300008  03                 	db	3
  9918                           
  9919                           ;Config register CONFIG5H @ 0x300009
  9920                           ;	unspecified, using default values
  9921                           ;	Boot Block Code Protection bitProtect Boot
  9922                           ;	CPB = 0x1, unprogrammed default
  9923                           ;	Data EEPROM Code Protection bit
  9924                           ;	CPD = 0x1, unprogrammed default
  9925   300009                     	org	3145737
  9926   300009  C0                 	db	192
  9927                           
  9928                           ;Config register CONFIG6L @ 0x30000A
  9929                           ;	unspecified, using default values
  9930                           ;	Write Protection bit
  9931                           ;	WRT0 = 0x1, unprogrammed default
  9932                           ;	Write Protection bit
  9933                           ;	WRT1 = 0x1, unprogrammed default
  9934   30000A                     	org	3145738
  9935   30000A  03                 	db	3
  9936                           
  9937                           ;Config register CONFIG6H @ 0x30000B
  9938                           ;	unspecified, using default values
  9939                           ;	Configuration Register Write Protection bit
  9940                           ;	WRTC = 0x1, unprogrammed default
  9941                           ;	Boot Block Write Protection bit
  9942                           ;	WRTB = 0x1, unprogrammed default
  9943                           ;	Data EEPROM Write Protection bit
  9944                           ;	WRTD = 0x1, unprogrammed default
  9945   30000B                     	org	3145739
  9946   30000B  E0                 	db	224
  9947                           
  9948                           ;Config register CONFIG7L @ 0x30000C
  9949                           ;	unspecified, using default values
  9950                           ;	Table Read Protection bit
  9951                           ;	EBTR0 = 0x1, unprogrammed default
  9952                           ;	Table Read Protection bit
  9953                           ;	EBTR1 = 0x1, unprogrammed default
  9954   30000C                     	org	3145740
  9955   30000C  03                 	db	3
  9956                           
  9957                           ;Config register CONFIG7H @ 0x30000D
  9958                           ;	unspecified, using default values
  9959                           ;	Boot Block Table Read Protection bit
  9960                           ;	EBTRB = 0x1, unprogrammed default
  9961   30000D                     	org	3145741
  9962   30000D  40                 	db	64
  9963                           tosu	equ	0xFFF
  9964                           tosh	equ	0xFFE
  9965                           tosl	equ	0xFFD
  9966                           stkptr	equ	0xFFC
  9967                           pclatu	equ	0xFFB
  9968                           pclath	equ	0xFFA
  9969                           pcl	equ	0xFF9
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           indf0	equ	0xFEF
  9977                           postinc0	equ	0xFEE
  9978                           postdec0	equ	0xFED
  9979                           preinc0	equ	0xFEC
  9980                           plusw0	equ	0xFEB
  9981                           fsr0h	equ	0xFEA
  9982                           fsr0l	equ	0xFE9
  9983                           wreg	equ	0xFE8
  9984                           indf1	equ	0xFE7
  9985                           postinc1	equ	0xFE6
  9986                           postdec1	equ	0xFE5
  9987                           preinc1	equ	0xFE4
  9988                           plusw1	equ	0xFE3
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           bsr	equ	0xFE0
  9992                           indf2	equ	0xFDF
  9993                           postinc2	equ	0xFDE
  9994                           postdec2	equ	0xFDD
  9995                           preinc2	equ	0xFDC
  9996                           plusw2	equ	0xFDB
  9997                           fsr2h	equ	0xFDA
  9998                           fsr2l	equ	0xFD9
  9999                           status	equ	0xFD8

Data Sizes:
    Strings     435
    Constant    29
    Data        40
    BSS         230
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     123
    BANK0           128      0     101
    BANK1           256      0      80

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(BANK0[6]), printfUID@leds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[26]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    printfUID@extraString	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_13(CODE[8]), STR_17(CODE[21]), STR_9(CODE[8]), 

    printfUID@ptr	PTR unsigned char  size(2) Largest target is 80
		 -> printfUID@buffer(BANK1[80]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(BANK0[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[34]), STR_10(CODE[33]), STR_11(CODE[3]), 
		 -> STR_12(CODE[18]), STR_14(CODE[3]), STR_15(CODE[33]), STR_16(CODE[33]), 
		 -> STR_2(CODE[26]), STR_3(CODE[30]), STR_4(CODE[18]), STR_5(CODE[53]), 
		 -> STR_6(CODE[95]), STR_7(CODE[3]), STR_8(CODE[33]), NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> card_timer(COMRAM[1]), timer(COMRAM[1]), Timer(COMRAM[1]), timer_teclado(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_datos
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_motor_setCurrentUser
    _motor_setCurrentUser->_printfUID
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _printfUID->_motor_StartSendString
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_setLEDIntensity
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10571
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          3     3      0    1326
                                             31 COMRAM     3     3      0
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1212
                                             30 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     732
                                             22 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           5     5      0    3310
                                             28 COMRAM     5     5      0
                         _TI_GetTics
                       _TI_ResetTics
                       _getActualUID
                _getCurrentUserIndex
                         _motor_Read
              _motor_StartSendString
                        _motor_Write
               _motor_setCurrentUser
                           _setIndex
                 _setStartSendString
 ---------------------------------------------------------------------------------
 (2) _setIndex                                             1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _motor_setCurrentUser                                 5     1      4    2098
                                             23 COMRAM     5     1      4
                          _printfUID
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                          11    11      0     852
                                             14 COMRAM    11    11      0
                         _TI_GetTics
                       _TI_ResetTics
                         _controlLED
                      _getActualLeds
 ---------------------------------------------------------------------------------
 (2) _controlLED                                           4     3      1     186
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        2     2      0    2288
                                             23 COMRAM     2     2      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                _getCurrentUserIndex
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           16    12      4    1509
                                              7 COMRAM    16    12      4
                      _getActualLeds
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _getActualLeds                                        4     2      2     294
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getCurrentUserIndex                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         5     3      2     386
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     519
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
              _motor_StartSendString
                          _resetData
                             _setLed
                 _setStartSendString
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setStartSendString                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetData                                            2     2      0     136
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      66
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     799
                                             12 COMRAM     1     1      0
                        _TI_NewTimer
                       _TI_ResetTics
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             4     4      0     294
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     885
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     161
                             _Espera
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4     161
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (5) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     115
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _TI_NewTimer
     _TI_ResetTics
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _motor_StartSendString
       _motor_SendString
         _motor_SendChar
           _Terminal_TXAvailable
     _resetData
     _setLed
       _setLEDIntensity
     _setStartSendString
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _getCurrentUserIndex
     _motor_SendString
     _motor_StartSendString
     _printfUID
       _getActualLeds
       _motor_StartSendString
     _saveHourToData
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _controlLED
     _getActualLeds
   _motor_RFID
     _TI_GetTics
     _TI_ResetTics
     _getActualUID
     _getCurrentUserIndex
     _motor_Read
     _motor_StartSendString
     _motor_Write
     _motor_setCurrentUser
       _printfUID
     _setIndex
     _setStartSendString
   _motor_datos
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _WaitForBusy

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      80     31.2%
BITBANK0           128      0       0      0.0%
BANK0              128      0     101     78.9%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     34     123     97.6%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     304      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Mar 31 17:17:27 2025

                     setIndex@indexActual 0055                     ?_Terminal_ReceiveChar 0054  
                              _RSI_Timer0 1AE8                  setLEDIntensity@intensity 0056  
                              _TI_GetTics 17F2                                        bsr 0FE0  
                             _state_write 0050                                       l121 1256  
                                     l300 1148                                       l212 0F28  
                                     l214 0F72                                       l128 1296  
                                     l410 0188                                       l256 1ADC  
                                     l272 150A                                       l427 022A  
                                     l295 10F0                                       l467 0404  
                                     l564 163E                                       l565 1670  
                                     l558 1A9C                                       l647 1A80  
                                     l575 0D00                                       l762 1766  
                                     l771 1A04                                       l780 14E0  
                                     l844 117A                                       l781 14CA  
                                     l854 120C                                       l849 11A6  
                                     l794 172A                                       u610 1314  
                                     u630 132E                                       u608 12FE  
                                     u570 12E6                                       u628 1316  
                                     u590 12FC                                       u648 1330  
                                     u588 12E8                              printfUID@hex 1E2F  
                            printfUID@val 0067                          ??_CantaPartBaixa 0055  
                            printfUID@ptr 0069                                       prod 0FF3  
                                     wreg 0FE8                      printfUID@extraString 005D  
                                    l4001 0FEA                                      l4005 1000  
                                    l4023 1074                                      l2271 1642  
                                    l4113 178C                                      l2273 1646  
                                    l3305 1488                                      l2275 164A  
                                    l2283 1654                                      l4123 0CEE  
                                    l2277 1650                                      l4133 0D0C  
                                    l4205 0DD6                                      l4213 099A  
                                    l4047 0E22                                      l4151 0D36  
                                    l4127 0CFA                                      l3343 1706  
                                    l3361 1ADE                                      l4145 0D28  
                                    l3353 172C                                      l3521 0856  
                                    l3505 07E8                                      l4401 0104  
                                    l3275 18F8                                      l3283 1428  
                                    l4139 0D1A                                      l3443 06C0  
                                    l4315 0B0C                                      l4243 0A04  
                                    l4235 09E8                                      l4227 09CC  
                                    l4403 0112                                      l3371 1232  
                                    l4085 1752                                      l4157 0D42  
                                    l3453 06E8                                      l4325 0B2A  
                                    l4309 0AFE                                      l4341 0B70  
                                    l3703 10B8                                      l3295 1456  
                                    l3287 142C                                      l4175 0D78  
                                    l3543 089C                                      l3447 06CA  
                                    l4263 0A50                                      l4423 014E  
                                    l4415 012C                                      l3383 1266  
                                    l3375 1240                                      l3623 1368  
                                    l3721 10DA                                      l4185 0D92  
                                    l4281 0A9C                                      l4273 0A84  
                                    l4257 0A3C                                      l4601 0430  
                                    l4513 0326                                      l4441 0198  
                                    l4425 0160                                      l4361 0066  
                                    l4353 0048                                      l3393 129E  
                                    l3625 1374                               _TI_NewTimer 1880  
                                    l4099 1768                                      l3299 1484  
                                    l4195 0DC4                                      l4179 0D84  
                                    l4275 0A8A                                      l4259 0A48  
                                    l3651 17C0                                      l3811 0BB4  
                                    l4515 033C                                      l4507 02A6  
                                    l4451 01C2                                      l4427 016E  
                                    l4419 013C                                      l3387 1276  
                                    l3395 12B4                                      l3643 13A8  
                                    l3635 138E                                      l3717 10D6  
                                    l3477 0766                                      l3485 0796  
                                    l3653 17D0                                      l4605 043E  
                                    l4509 0316                                      l4453 01CC  
                                    l3637 139A                                      l4711 05CA  
                                    l4551 0394                                      l4535 0368  
                                    l4527 0356                                      l4471 0204  
                                    l3745 1140                                      l3673 1522  
                                    l3913 18D6                                      l3569 0942  
                                    l4289 0AB0                                      l3841 0C02  
                                    l3825 0BD0                                      l4705 05AC  
                                    l4641 04BC                                      l4617 0458  
                                    l4537 0376                                      l4481 0230  
                                    l4449 01B4                                      l4393 00F0  
                                    l4377 00A6                                      l4369 007E  
                                    l3595 1884                                      l3755 114C  
                                    l3675 1538                                      l3931 1A06  
                                    l4299 0ACE                                      l3659 17E4  
                                    l4635 04A4                                      l4619 0466  
                                    l4571 03D0                                      l4563 03AE  
                                    l4467 01EC                                      l4387 00D8  
                                    l4379 00B8                                      l4723 0688  
                                    l3853 0C32                                      l3837 0BFA  
                                    l4661 051E                                      l4653 04EC  
                                    l4629 048C                                      l4549 0386  
                                    l4469 01F6                                      l4389 00E6  
                                    l4805 11D8                                      l4813 1212  
                                    l3599 188E                                      l3687 155A  
                                    l3919 18EE                                      l3775 14AC  
                                    l4743 0F50                                      l3855 0C36  
                                    l3839 0BFE                                      l4719 05D6  
                                    l4647 04D4                                      l4575 03E2  
                                    l4567 03BE                                      l4487 0248  
                                    l3689 156E                                      l3785 14CC  
                                    l3961 19E4                                      l4761 0FB6  
                                    l3881 0C92                                      l4673 054E  
                                    l4593 0414                                      l4497 0268  
                                    l4825 1868                                      l3795 14E2  
                                    l4755 0F74                                      l4747 0F68  
                                    l3883 0C96                                      l3867 0C62  
                                    l4667 0532                                      l4579 03F4  
                                    l4499 0294                                      l3973 198C  
                                    l3949 1B02                                      l3885 0C9C  
                                    l3869 0C66                                      l4677 055A  
                                    l4679 0560                                      l4767 1164  
                                    l3897 0CB6                                      l4697 05A4  
                                    l4777 1188                                      l3899 0CE2  
                                    l4795 11C2                                      l4789 11A8  
                                    STR_1 1EE0                                      STR_2 1FA4  
                                    STR_3 1F86                                      STR_4 1FD3  
                                    STR_5 1EAB                                      STR_6 1E4C  
                                    STR_7 1FE2                                      STR_8 1F23  
                                    STR_9 1FF7                                      _LATA 0F89  
                                    u2310 15E2                                      _LATD 0F8C  
                                    u2330 15F8                                      u2410 1594  
                                    u2350 1610                                      u2430 15AC  
                                    u2328 15E4                                      u2408 1580  
                                    u3400 1020                                      u2280 1B1E  
                                    u4200 0516                                      u2370 162A  
                                    u2450 15C6                                      u2610 16AA  
                                    u3410 1030                                      u3330 1B62  
                                    u2348 15FA                                      u2428 1596  
                                    u3420 1040                                      u2390 157E  
                                    u3430 1050                                      u2470 144C  
                                    u2368 1612                                      u2448 15AE  
                                    u3440 1060                                      u2288 1B20  
                                    u4240 0554                                      u4400 1170  
                                    u2490 1476                                      u2650 06B2  
                                    u4330 0F48                                      u2388 162C  
                                    u2468 15C8                                      u2628 16AC  
                                    u2477 1442                                      u3470 0EEA  
                                    u3390 1010                                      u4190 0514  
                                    u3560 0D64                                      u3640 09AE  
                                    u2497 146C                                      u3650 09B4  
                                    u3590 0DAA                                      u2980 1102  
                                    u3870 009A                                      u3880 00EC  
                                    u2988 1104                                      _TMR0 0FD6  
                setLEDIntensity@userIndex 0057                                _ActualLeds 00B8  
                                    _Tics 0007                                      _Rows 003E  
                        motor_datos@state 0019                                      _main 183E  
                           printfUID@leds 0061                                      fsr1h 0FE2  
                                    fsr2h 0FDA                                      indf1 0FE7  
                                    indf2 0FDF                                      fsr1l 0FE1  
                                    fsr2l 0FD9                                      btemp 007C  
                         __end_of_TI_Init 19B4                                      prodh 0FF4  
                                    prodl 0FF3                                      start 0026  
                         __end_of_CantaIR 198A                           __end_of_HighRSI 1B70  
                           LcInit@columns 006A                              ___param_bank 0000  
                            ?_initTeclado 0054                           motor_LEDs@i_461 006C  
                           processBit@val 0057                               Espera@Timer 0062  
                                   ?_main 0054                                     STR_10 1F02  
                                   STR_11 1FE2                                     STR_12 1FE5  
                                   STR_13 1FF7                                     STR_14 1FE2  
                                   STR_15 1F65                                     STR_16 1F44  
                                   STR_17 1FBE                                     _T0CON 0FD5  
                                   _RCREG 0FAE                                     _RCSTA 0FAB  
                                   _SPBRG 0FAF                                     _PORTD 0F83  
                                   _TRISA 0F92                                     _TRISD 0F95  
                                   _TRISE 0F96                                     _TXREG 0FAD  
                                   _TXSTA 0FAC                      __end_of_getActualUID 1506  
                                   _Filas 0026                    ??_motor_setCurrentUser 006F  
                                   _Timer 0053                           motor_RFID@irqEn 0037  
                                   _index 007B                           motor_RFID@unLen 0011  
                            _TI_ResetTics 1A28                                     _tecla 0024  
                         motor_RFID@value 0027                        getActualLeds@i_912 0058  
                         motor_RFID@state 0039                                     _timer 0052  
                                   _state 0023                       motor_Read@bit_count 004B  
                                   tablat 0FF5                                     ttemp5 007D  
                                   ttemp6 0080                                     ttemp7 0084  
                          _saveHourToData 19DC                                     status 0FD8  
                                   wtemp8 007D                        Terminal_SendChar@c 0058  
                        __end_of_LcGotoXY 12CA                          __end_of_GetTecla 169A  
                 EscriuPrimeraOrdre@ordre 0056                    ??_Terminal_ReceiveChar 0055  
                         __initialization 13B4                              __end_of_main 1880  
                             ?_RSI_Timer0 0054                            TI_Init@counter 0055  
                             ?_TI_GetTics 0055                     _motor_StartSendString 1AA0  
                          _controlLED$455 0056                                    ??_main 0076  
                           __activetblptr 0002                  motor_setCurrentUser@UID0 006F  
                motor_setCurrentUser@UID1 006B                  motor_setCurrentUser@UID2 006C  
                motor_setCurrentUser@UID3 006D                  motor_setCurrentUser@UID4 006E  
                                  _ADCON1 0FC1                                 ??_TI_Init 0055  
                  __end_of_saveHourToData 1A02                                 ??_CantaIR 0057  
                          LcGotoXY@Fisics 006F                            LcGotoXY@Column 0071  
                           ??_WaitForBusy 006A                                    _TMR0IF 7F92  
                               ??_HighRSI 0054                                    _LcInit 0DFE  
                   __end_of_getActualLeds 1750                          __end_of_delay_us 1AE8  
                          getActualLeds@i 0057                                    _Espera 18F2  
                                  _LowRSI 0018                              _LcGotoXY$404 006D  
                                  _RowAct 003C                                    _Timers 009E  
                      motor_datos@pointer 0018                          __end_of_initRFID 1094  
                      motorTerminal@index 001E                          __end_of_initData 17A4  
                        __end_of_initLeds 1B5A                           _motor_datos$931 0073  
                      motorTerminal@state 001F                                    _keymap 1E40  
                                  clear_0 13FA                                    clear_1 1406  
                                  clear_2 1412                                    _setLed 18BC  
                         printfUID@buffer 0100                              ?_motor_Write 005C  
                                  isa$std 0001                              ?_motor_datos 0054  
                        __end_of_setIndex 1B78                              __pdataCOMRAM 0076  
                            __mediumconst 1E2E                           _setLEDIntensity 19B4  
                                  tblptrh 0FF7                                    tblptrl 0FF6  
                                  tblptru 0FF8                         __end_of_CantaData 1958  
                   __end_of_Terminal_Init 1B4C                           ?_saveHourToData 0055  
                              __accesstop 0080                   __end_of__initialization 1418  
                       __end_of_LcPutChar 13B4                           delay_us@howMany 0055  
                           ___rparam_used 0001                        _setStartSendString 1B86  
                           setLed@modeLED 0016                            __pcstackCOMRAM 0054  
                     __end_of_WaitForBusy 1B3C                              __pidataBANK0 1A4C  
                     ?_setStartSendString 0054                    ?_motor_StartSendString 0059  
                    TI_NewTimer@Comptador 0057               motor_RFID@operation_pending 0029  
                        _motor_SendString 1426                       processBit@bit_count 0058  
                               ?_LcGotoXY 006A                                 ?_GetTecla 0054  
                    ??_setStartSendString 0055                              ?_TI_NewTimer 0055  
                              __pbssBANK0 0080                                __pbssBANK1 0100  
                              _card_timer 004F                               setLed@tecla 0058  
                   __end_of_motorTerminal 0BB0                                   ?_LcInit 006A  
                           _CantaPartAlta 15D6                    TI_NewTimer@TimerHandle 0055  
                                 ?_Espera 0062                                   ?_LowRSI 0054  
                            _getActualUID 1498                           processBit@state 0059  
                 TI_ResetTics@TimerHandle 0055                             _writeColumnas 1A88  
                                 _BAUDCON 0FB8                                   ?_setLed 0054  
                 __end_of_setLEDIntensity 19DC                            _sending_string 0020  
                         motor_SendChar@c 0058                                   LcInit@i 006C  
                              ??_LcGotoXY 006B                                 ?_delay_us 0054  
                         getActualUID@UID 0055                                ??_GetTecla 0055  
                       _Terminal_SendChar 1B00                                   _TI_Init 198A  
                      ?_Terminal_SendChar 0054                                   _CantaIR 1958  
                               ?_initRFID 0054                                 ?_initData 0054  
motor_setCurrentUser@state_setCurrentUser 001A                                 ?_initLeds 0054  
                                 _HighRSI 0008                                _controlLED 17A4  
                    motor_RFID@last_state 002A                               _WaitForBusy 1B28  
                          ?_CantaPartAlta 0054                                   _Columns 003D  
                     motor_datos@lastChar 0017                         motor_RFID@TagType 0032  
                     ??_Terminal_SendChar 0058                                 ?_setIndex 0054  
                                 __Hparam 0000                                   __Lparam 0000  
                            ??_RSI_Timer0 0054                            ?_writeColumnas 0054  
                            ??_TI_GetTics 0059                         motor_RFID@allZero 0030  
                                 __pcinit 13B4                                   __ramtop 0200  
                       motor_RFID@_status 0033                                   __ptext0 183E  
                                 __ptext1 1162                                   __ptext2 1340  
                                 __ptext3 122E                                   __ptext4 1926  
                                 __ptext5 002A                                   __ptext6 1B70  
                                 __ptext7 0BB0                                   __ptext8 0EEC  
                                 __ptext9 17A4                             ?_motorTeclado 0054  
                     motorTerminal@opcion 006B                                 CantaIR@IR 0057  
                       __end_of_initPorts 1B80                 __end_of_Terminal_SendChar 1B14  
                       motor_RFID@waitIRq 0036                  motorTerminal@currentUser 00BE  
                              ??_delay_us 0055                       _getCurrentUserIndex 1B92  
                                 _str_ptr 000F                            __pintcode_body 1B66  
                             motor_LEDs@i 006B                      end_of_initialization 1418  
                             motor_RFID@i 0034                               motor_RFID@n 0035  
                        controlLED@estado 0055                                ??_initRFID 0060  
                              ??_initData 0055                        __end_of_RSI_Timer0 1B00  
                       __end_of_resetData 1A28                                ??_initLeds 0058  
                           __Lmediumconst 1E2E                                   int_func 1B66  
                      __end_of_TI_GetTics 183E                        saveHourToData@hour 0055  
                         motor_Write@addr 005D                                ??_setIndex 0055  
                       __end_of_printfUID 0986                      ?_getCurrentUserIndex 0054  
                              _motor_LEDs 0EEC                                _motor_RFID 002A  
                                 postdec1 0FE5                                _motor_Read 1094  
                                 postinc0 0FEE                                   postinc2 0FDE  
                       getActualUID@i_906 0057                         getActualUID@i_907 0059  
                        ?_setLEDIntensity 0055                            ??_motorTeclado 0062  
                               _PORTCbits 0F82                                _processBit 169A  
                   TI_GetTics@TimerHandle 0061                            _motor_RFID$734 0072  
                        ??_saveHourToData 0056                                 _TRISBbits 0F93  
                               _TRISCbits 0F94                                 _TRISEbits 0F96  
                              _state_read 0051                            setLed@ledIndex 0015  
                         ??_CantaPartAlta 0055                               ?_controlLED 0055  
                               _CantaData 1926                  motor_StartSendString@str 0059  
                __end_of_motor_SendString 1498                     ??_getCurrentUserIndex 0055  
                          __end_of_LcInit 0EEC                       controlLED@ledActual 0058  
                 ??_motor_StartSendString 005B                           ??_writeColumnas 0055  
                               _LcPutChar 1340                            __end_of_Espera 1926  
                          __end_of_LowRSI 0026              __end_of_Terminal_RXAvailable 1B66  
              __end_of_EscriuPrimeraOrdre 1340                             __pidataCOMRAM 1B80  
               motor_Read@timeout_counter 0013                            _motor_Read$697 005E  
                          motor_RFID@addr 0028                            motor_RFID@flag 0074  
                               _ColumnAct 003B                            __end_of_keymap 1E4C  
                          __end_of_setLed 18F2                           saveHourToData@i 0056  
                       getActualLeds@leds 0055                     motor_RFID@cardRemoved 002B  
                     start_initialization 13B4                            _motor_SendChar 1A6E  
                      motor_Read@ucResult 003A              __end_of_Terminal_TXAvailable 1B28  
                   motor_Read@MAX_TIMEOUT 0079                                ?_CantaData 0054  
                                ??_LcInit 006B                             getActualUID@i 0058  
                                ??_Espera 0066                                  ??_LowRSI 0054  
                              ?_LcPutChar 0054                               ?_motor_LEDs 0054  
                           initData@i_896 0058                             initData@i_898 0057  
                             ?_motor_RFID 0054                         motorTerminal@leds 00B2  
                       motorTerminal@hour 00E1                               ?_motor_Read 0054  
                           ??_initTeclado 0058                               __pdataBANK0 00C3  
                                ??_setLed 0058                               ?_processBit 0057  
                  __end_of_motor_SendChar 1A88                               __pbssCOMRAM 0001  
                           ?_TI_ResetTics 0054                          motor_Read@ucAddr 004A  
                                ?_TI_Init 0054                                  ?_CantaIR 0054  
                          _CantaPartBaixa 1572                                  ?_HighRSI 0054  
                            ?_WaitForBusy 0054                      __end_of_motorTeclado 0DFE  
                          motor_Read@addr 005D                       motor_RFID@fifoLevel 002D  
                           _getActualLeds 16F6                                 __pintcode 0008  
                           __pmediumconst 1E2E                                 _colValues 0076  
                         CantaPartBaixa@c 0056                               __pintcodelo 0018  
                      motor_Write@ucValue 004C                               __smallconst 1E2E  
                     __end_of_initTeclado 1AD0                           ?_motor_SendChar 0054  
                              resetData@i 0055                                resetData@j 0056  
           motorTerminal@currentUserIndex 006C                            ??_TI_ResetTics 0055  
                    processBit@next_state 005A                                 _initPorts 1B78  
                  __end_of_CantaPartBaixa 15D6                             _Terminal_Init 1B3C  
                    _Terminal_RXAvailable 1B5A                        motor_LEDs@lastTics 000B  
                             ??_CantaData 0057                                  _LATBbits 0F8A  
                                _LATCbits 0F8B                                  _LATEbits 0F8D  
                               delay_us@x 0056                      motor_Write@bit_count 004E  
                          ?_getActualLeds 0055                           _hashtag_pressed 0021  
                               _resetData 1A02                                  _PIR1bits 0F9E  
                             ??_LcPutChar 0072                     motor_RFID@lastBitsVal 002E  
            __end_of_motor_setCurrentUser 0CE6                                 _printfUID 0698  
                           ??_motor_Write 005D                      _Terminal_TXAvailable 1B14  
                            GetTecla@fila 0058                             ??_motor_datos 0073  
                               _state_str 0022                                printfUID@i 0068  
                  motor_RFID@tempRegValue 002F                                  Espera@ms 0064  
                                _LcGotoXY 122E                     motor_LEDs@currentTics 0067  
                                _GetTecla 163A              __end_of_Terminal_ReceiveChar 1B9A  
                              ?_initPorts 0054                             motor_RFID@UID 0001  
                          ?_Terminal_Init 0054                               LcGotoXY@Row 006A  
                               copy_data0 13C8                                 copy_data1 13E8  
                         ?_CantaPartBaixa 0054                                  _Columnas 0025  
                   ?_Terminal_RXAvailable 0054                     motor_RFID@currentUser 0044  
                            ??_controlLED 0056                                 initData@i 0055  
                               initData@j 0056                             _motorTerminal 0986  
                    __end_ofprintfUID@hex 1E40                         ?_motor_SendString 0054  
                              ?_resetData 0054                                  __Hrparam 0000  
                      printfUID@userIndex 005C                                  __Lrparam 0000  
                      ??_motor_SendString 0059             __end_of_motor_StartSendString 1AB8  
                              ?_printfUID 005B                               _initTeclado 1AB8  
                   ?_Terminal_TXAvailable 0055                   motorTerminal@userNumber 001D  
                      motor_RFID@checksum 0031                        __end_of_controlLED 17F2  
                             _currentTime 00DD                               _currentUser 003F  
                     __end_of_motor_Write 1572                                  _delay_us 1AD0  
                     __end_of_motor_datos 122E                                  __ptext10 0986  
                                __ptext11 19DC                        _EscriuPrimeraOrdre 12CA  
                                __ptext20 1A88                                  __ptext12 0698  
                                __ptext21 1B86                                  __ptext13 16F6  
                                __ptext30 163A                                  __ptext22 18BC  
                                __ptext14 1B92                                  __ptext31 1AB8  
                                __ptext23 19B4                                  __ptext15 1498  
                                __ptext40 1B3C                                  __ptext32 0FC0  
                                __ptext24 1A02                                  __ptext16 1B00  
                                __ptext41 198A                                  __ptext33 1506  
                                __ptext25 1AA0                                  __ptext17 1B96  
                                __ptext50 1572                                  __ptext42 0DFE  
                                __ptext34 1094                                  __ptext26 1426  
                                __ptext18 1B5A                                  __ptext51 15D6  
                                __ptext43 1B28                                  __ptext35 169A  
                                __ptext27 1A6E                                  __ptext19 0CE6  
                                __ptext44 18F2                                  __ptext36 1AD0  
                                __ptext28 1B14                                  __ptext45 1A28  
                                __ptext37 1B78                                  __ptext29 1B8C  
                                __ptext54 1AE8                                  __ptext46 17F2  
                                __ptext38 1B4C                                  __ptext47 1880  
                                __ptext39 1750                                  __ptext48 12CA  
                                __ptext49 1958                             ??_TI_NewTimer 0056  
                          CantaPartAlta@c 0056                         motor_Write@ucAddr 004D  
             __end_of_getCurrentUserIndex 1B96                                  _initRFID 0FC0  
                                _initData 1750                     getActualUID@userIndex 0056  
                                _initLeds 1B4C                           ??_getActualLeds 0057  
                     ?_EscriuPrimeraOrdre 0054                            ?_motorTerminal 0054  
                   __end_of_CantaPartAlta 163A                             CantaData@Data 0057  
                                _new_user 001B                                  _setIndex 1B70  
                           ?_getActualUID 0055                              ??_motor_LEDs 0062  
                            ??_motor_RFID 0070                                  isa$xinst 0000  
                            ??_motor_Read 005C                      __end_of_TI_ResetTics 1A4C  
                                int$flags 007C                     __end_of_writeColumnas 1AA0  
                      motor_RFID@substate 0038                                  _userUIDs 00C3  
                       controlLED@ledBits 00D7                      ??_EscriuPrimeraOrdre 0055  
                              LcInit@rows 006B                              ??_processBit 005B  
                           _timer_teclado 0049                              _motorTeclado 0CE6  
                              _INTCONbits 0FF2                           ??_Terminal_Init 0055  
               TI_GetTics@CopiaTicsActual 005D                         _new_configuration 001C  
                             ??_initPorts 0055                    ??_Terminal_RXAvailable 0055  
                          _configurations 0080                         _hashtag_pressed3s 1B8C  
                    _motor_setCurrentUser 0BB0                        __end_of_motor_LEDs 0FC0  
                      __end_of_motor_RFID 0698                    getActualLeds@userIndex 0056  
                                intlevel1 0000                                  intlevel2 0000  
                      __end_of_motor_Read 1162                        ?_hashtag_pressed3s 0054  
                              LcPutChar@c 0072                          motor_Write@value 005C  
                     __end_of_TI_NewTimer 18BC                            ??_getActualUID 0057  
                             ??_resetData 0055                        __end_of_processBit 16F6  
                     ??_hashtag_pressed3s 0055                    ??_Terminal_TXAvailable 0057  
                            motor_datos@i 0075                      _Terminal_ReceiveChar 1B96  
                             ??_printfUID 005F                          ??_motor_SendChar 0058  
                             _motor_Write 1506                               _motor_datos 1162  
                  motor_RFID@backBitsCalc 002C                 __end_of_hashtag_pressed3s 1B92  
              __end_of_setStartSendString 1B8C                     ?_motor_setCurrentUser 006B  
                         ??_motorTerminal 006B                   setLEDIntensity@ledIndex 0055  
                    printfUID@currentUser 005B                            initRFID@regVal 0060  
                       ??_setLEDIntensity 0057                           GetTecla@columna 0057  

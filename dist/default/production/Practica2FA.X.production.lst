

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 13 01:42:09 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75   000000                     
    76                           ; Generated 05/12/2024 GMT
    77                           ; 
    78                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution. Publication is not required when
    92                           ;        this file is used in an embedded application.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F4321 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110   000FE0                     bsr             equ	4064
   111   000FE9                     fsr0            equ	4073
   112   000FEA                     fsr0h           equ	4074
   113   000FE9                     fsr0l           equ	4073
   114   000FE1                     fsr1            equ	4065
   115   000FE2                     fsr1h           equ	4066
   116   000FE1                     fsr1l           equ	4065
   117   000FD9                     fsr2            equ	4057
   118   000FDA                     fsr2h           equ	4058
   119   000FD9                     fsr2l           equ	4057
   120   000FEF                     indf0           equ	4079
   121   000FE7                     indf1           equ	4071
   122   000FDF                     indf2           equ	4063
   123   000FF2                     intcon          equ	4082
   124   000000                     nvmcon          equ	0
   125   000FF9                     pcl             equ	4089
   126   000FFA                     pclath          equ	4090
   127   000FFB                     pclatu          equ	4091
   128   000FEB                     plusw0          equ	4075
   129   000FE3                     plusw1          equ	4067
   130   000FDB                     plusw2          equ	4059
   131   000FED                     postdec0        equ	4077
   132   000FE5                     postdec1        equ	4069
   133   000FDD                     postdec2        equ	4061
   134   000FEE                     postinc0        equ	4078
   135   000FE6                     postinc1        equ	4070
   136   000FDE                     postinc2        equ	4062
   137   000FEC                     preinc0         equ	4076
   138   000FE4                     preinc1         equ	4068
   139   000FDC                     preinc2         equ	4060
   140   000FF3                     prod            equ	4083
   141   000FF4                     prodh           equ	4084
   142   000FF3                     prodl           equ	4083
   143   000FD8                     status          equ	4056
   144   000FF5                     tablat          equ	4085
   145   000FF6                     tblptr          equ	4086
   146   000FF7                     tblptrh         equ	4087
   147   000FF6                     tblptrl         equ	4086
   148   000FF8                     tblptru         equ	4088
   149   000FFD                     tosl            equ	4093
   150   000FE8                     wreg            equ	4072
   151   000F80                     PORTA           equ	3968	;# 
   152   000F81                     PORTB           equ	3969	;# 
   153   000F82                     PORTC           equ	3970	;# 
   154   000F83                     PORTD           equ	3971	;# 
   155   000F84                     PORTE           equ	3972	;# 
   156   000F89                     LATA            equ	3977	;# 
   157   000F8A                     LATB            equ	3978	;# 
   158   000F8B                     LATC            equ	3979	;# 
   159   000F8C                     LATD            equ	3980	;# 
   160   000F8D                     LATE            equ	3981	;# 
   161   000F92                     TRISA           equ	3986	;# 
   162   000F92                     DDRA            equ	3986	;# 
   163   000F93                     TRISB           equ	3987	;# 
   164   000F93                     DDRB            equ	3987	;# 
   165   000F94                     TRISC           equ	3988	;# 
   166   000F94                     DDRC            equ	3988	;# 
   167   000F95                     TRISD           equ	3989	;# 
   168   000F95                     DDRD            equ	3989	;# 
   169   000F96                     TRISE           equ	3990	;# 
   170   000F96                     DDRE            equ	3990	;# 
   171   000F9B                     OSCTUNE         equ	3995	;# 
   172   000F9D                     PIE1            equ	3997	;# 
   173   000F9E                     PIR1            equ	3998	;# 
   174   000F9F                     IPR1            equ	3999	;# 
   175   000FA0                     PIE2            equ	4000	;# 
   176   000FA1                     PIR2            equ	4001	;# 
   177   000FA2                     IPR2            equ	4002	;# 
   178   000FA6                     EECON1          equ	4006	;# 
   179   000FA7                     EECON2          equ	4007	;# 
   180   000FA8                     EEDATA          equ	4008	;# 
   181   000FA9                     EEADR           equ	4009	;# 
   182   000FAB                     RCSTA           equ	4011	;# 
   183   000FAB                     RCSTA1          equ	4011	;# 
   184   000FAC                     TXSTA           equ	4012	;# 
   185   000FAC                     TXSTA1          equ	4012	;# 
   186   000FAD                     TXREG           equ	4013	;# 
   187   000FAD                     TXREG1          equ	4013	;# 
   188   000FAE                     RCREG           equ	4014	;# 
   189   000FAE                     RCREG1          equ	4014	;# 
   190   000FAF                     SPBRG           equ	4015	;# 
   191   000FAF                     SPBRG1          equ	4015	;# 
   192   000FB0                     SPBRGH          equ	4016	;# 
   193   000FB1                     T3CON           equ	4017	;# 
   194   000FB2                     TMR3            equ	4018	;# 
   195   000FB2                     TMR3L           equ	4018	;# 
   196   000FB3                     TMR3H           equ	4019	;# 
   197   000FB4                     CMCON           equ	4020	;# 
   198   000FB5                     CVRCON          equ	4021	;# 
   199   000FB6                     ECCP1AS         equ	4022	;# 
   200   000FB7                     ECCP1DEL        equ	4023	;# 
   201   000FB7                     PWM1CON         equ	4023	;# 
   202   000FB8                     BAUDCON         equ	4024	;# 
   203   000FB8                     BAUDCTL         equ	4024	;# 
   204   000FBA                     CCP2CON         equ	4026	;# 
   205   000FBB                     CCPR2           equ	4027	;# 
   206   000FBB                     CCPR2L          equ	4027	;# 
   207   000FBC                     CCPR2H          equ	4028	;# 
   208   000FBD                     CCP1CON         equ	4029	;# 
   209   000FBD                     ECCP1CON        equ	4029	;# 
   210   000FBE                     CCPR1           equ	4030	;# 
   211   000FBE                     CCPR1L          equ	4030	;# 
   212   000FBF                     CCPR1H          equ	4031	;# 
   213   000FC0                     ADCON2          equ	4032	;# 
   214   000FC1                     ADCON1          equ	4033	;# 
   215   000FC2                     ADCON0          equ	4034	;# 
   216   000FC3                     ADRES           equ	4035	;# 
   217   000FC3                     ADRESL          equ	4035	;# 
   218   000FC4                     ADRESH          equ	4036	;# 
   219   000FC5                     SSPCON2         equ	4037	;# 
   220   000FC6                     SSPCON1         equ	4038	;# 
   221   000FC7                     SSPSTAT         equ	4039	;# 
   222   000FC8                     SSPADD          equ	4040	;# 
   223   000FC9                     SSPBUF          equ	4041	;# 
   224   000FCA                     T2CON           equ	4042	;# 
   225   000FCB                     PR2             equ	4043	;# 
   226   000FCB                     MEMCON          equ	4043	;# 
   227   000FCC                     TMR2            equ	4044	;# 
   228   000FCD                     T1CON           equ	4045	;# 
   229   000FCE                     TMR1            equ	4046	;# 
   230   000FCE                     TMR1L           equ	4046	;# 
   231   000FCF                     TMR1H           equ	4047	;# 
   232   000FD0                     RCON            equ	4048	;# 
   233   000FD1                     WDTCON          equ	4049	;# 
   234   000FD2                     HLVDCON         equ	4050	;# 
   235   000FD2                     LVDCON          equ	4050	;# 
   236   000FD3                     OSCCON          equ	4051	;# 
   237   000FD5                     T0CON           equ	4053	;# 
   238   000FD6                     TMR0            equ	4054	;# 
   239   000FD6                     TMR0L           equ	4054	;# 
   240   000FD7                     TMR0H           equ	4055	;# 
   241   000FD8                     STATUS          equ	4056	;# 
   242   000FD9                     FSR2            equ	4057	;# 
   243   000FD9                     FSR2L           equ	4057	;# 
   244   000FDA                     FSR2H           equ	4058	;# 
   245   000FDB                     PLUSW2          equ	4059	;# 
   246   000FDC                     PREINC2         equ	4060	;# 
   247   000FDD                     POSTDEC2        equ	4061	;# 
   248   000FDE                     POSTINC2        equ	4062	;# 
   249   000FDF                     INDF2           equ	4063	;# 
   250   000FE0                     BSR             equ	4064	;# 
   251   000FE1                     FSR1            equ	4065	;# 
   252   000FE1                     FSR1L           equ	4065	;# 
   253   000FE2                     FSR1H           equ	4066	;# 
   254   000FE3                     PLUSW1          equ	4067	;# 
   255   000FE4                     PREINC1         equ	4068	;# 
   256   000FE5                     POSTDEC1        equ	4069	;# 
   257   000FE6                     POSTINC1        equ	4070	;# 
   258   000FE7                     INDF1           equ	4071	;# 
   259   000FE8                     WREG            equ	4072	;# 
   260   000FE9                     FSR0            equ	4073	;# 
   261   000FE9                     FSR0L           equ	4073	;# 
   262   000FEA                     FSR0H           equ	4074	;# 
   263   000FEB                     PLUSW0          equ	4075	;# 
   264   000FEC                     PREINC0         equ	4076	;# 
   265   000FED                     POSTDEC0        equ	4077	;# 
   266   000FEE                     POSTINC0        equ	4078	;# 
   267   000FEF                     INDF0           equ	4079	;# 
   268   000FF0                     INTCON3         equ	4080	;# 
   269   000FF1                     INTCON2         equ	4081	;# 
   270   000FF2                     INTCON          equ	4082	;# 
   271   000FF3                     PROD            equ	4083	;# 
   272   000FF3                     PRODL           equ	4083	;# 
   273   000FF4                     PRODH           equ	4084	;# 
   274   000FF5                     TABLAT          equ	4085	;# 
   275   000FF6                     TBLPTR          equ	4086	;# 
   276   000FF6                     TBLPTRL         equ	4086	;# 
   277   000FF7                     TBLPTRH         equ	4087	;# 
   278   000FF8                     TBLPTRU         equ	4088	;# 
   279   000FF9                     PCLAT           equ	4089	;# 
   280   000FF9                     PC              equ	4089	;# 
   281   000FF9                     PCL             equ	4089	;# 
   282   000FFA                     PCLATH          equ	4090	;# 
   283   000FFB                     PCLATU          equ	4091	;# 
   284   000FFC                     STKPTR          equ	4092	;# 
   285   000FFD                     TOS             equ	4093	;# 
   286   000FFD                     TOSL            equ	4093	;# 
   287   000FFE                     TOSH            equ	4094	;# 
   288   000FFF                     TOSU            equ	4095	;# 
   289   000F80                     PORTA           equ	3968	;# 
   290   000F81                     PORTB           equ	3969	;# 
   291   000F82                     PORTC           equ	3970	;# 
   292   000F83                     PORTD           equ	3971	;# 
   293   000F84                     PORTE           equ	3972	;# 
   294   000F89                     LATA            equ	3977	;# 
   295   000F8A                     LATB            equ	3978	;# 
   296   000F8B                     LATC            equ	3979	;# 
   297   000F8C                     LATD            equ	3980	;# 
   298   000F8D                     LATE            equ	3981	;# 
   299   000F92                     TRISA           equ	3986	;# 
   300   000F92                     DDRA            equ	3986	;# 
   301   000F93                     TRISB           equ	3987	;# 
   302   000F93                     DDRB            equ	3987	;# 
   303   000F94                     TRISC           equ	3988	;# 
   304   000F94                     DDRC            equ	3988	;# 
   305   000F95                     TRISD           equ	3989	;# 
   306   000F95                     DDRD            equ	3989	;# 
   307   000F96                     TRISE           equ	3990	;# 
   308   000F96                     DDRE            equ	3990	;# 
   309   000F9B                     OSCTUNE         equ	3995	;# 
   310   000F9D                     PIE1            equ	3997	;# 
   311   000F9E                     PIR1            equ	3998	;# 
   312   000F9F                     IPR1            equ	3999	;# 
   313   000FA0                     PIE2            equ	4000	;# 
   314   000FA1                     PIR2            equ	4001	;# 
   315   000FA2                     IPR2            equ	4002	;# 
   316   000FA6                     EECON1          equ	4006	;# 
   317   000FA7                     EECON2          equ	4007	;# 
   318   000FA8                     EEDATA          equ	4008	;# 
   319   000FA9                     EEADR           equ	4009	;# 
   320   000FAB                     RCSTA           equ	4011	;# 
   321   000FAB                     RCSTA1          equ	4011	;# 
   322   000FAC                     TXSTA           equ	4012	;# 
   323   000FAC                     TXSTA1          equ	4012	;# 
   324   000FAD                     TXREG           equ	4013	;# 
   325   000FAD                     TXREG1          equ	4013	;# 
   326   000FAE                     RCREG           equ	4014	;# 
   327   000FAE                     RCREG1          equ	4014	;# 
   328   000FAF                     SPBRG           equ	4015	;# 
   329   000FAF                     SPBRG1          equ	4015	;# 
   330   000FB0                     SPBRGH          equ	4016	;# 
   331   000FB1                     T3CON           equ	4017	;# 
   332   000FB2                     TMR3            equ	4018	;# 
   333   000FB2                     TMR3L           equ	4018	;# 
   334   000FB3                     TMR3H           equ	4019	;# 
   335   000FB4                     CMCON           equ	4020	;# 
   336   000FB5                     CVRCON          equ	4021	;# 
   337   000FB6                     ECCP1AS         equ	4022	;# 
   338   000FB7                     ECCP1DEL        equ	4023	;# 
   339   000FB7                     PWM1CON         equ	4023	;# 
   340   000FB8                     BAUDCON         equ	4024	;# 
   341   000FB8                     BAUDCTL         equ	4024	;# 
   342   000FBA                     CCP2CON         equ	4026	;# 
   343   000FBB                     CCPR2           equ	4027	;# 
   344   000FBB                     CCPR2L          equ	4027	;# 
   345   000FBC                     CCPR2H          equ	4028	;# 
   346   000FBD                     CCP1CON         equ	4029	;# 
   347   000FBD                     ECCP1CON        equ	4029	;# 
   348   000FBE                     CCPR1           equ	4030	;# 
   349   000FBE                     CCPR1L          equ	4030	;# 
   350   000FBF                     CCPR1H          equ	4031	;# 
   351   000FC0                     ADCON2          equ	4032	;# 
   352   000FC1                     ADCON1          equ	4033	;# 
   353   000FC2                     ADCON0          equ	4034	;# 
   354   000FC3                     ADRES           equ	4035	;# 
   355   000FC3                     ADRESL          equ	4035	;# 
   356   000FC4                     ADRESH          equ	4036	;# 
   357   000FC5                     SSPCON2         equ	4037	;# 
   358   000FC6                     SSPCON1         equ	4038	;# 
   359   000FC7                     SSPSTAT         equ	4039	;# 
   360   000FC8                     SSPADD          equ	4040	;# 
   361   000FC9                     SSPBUF          equ	4041	;# 
   362   000FCA                     T2CON           equ	4042	;# 
   363   000FCB                     PR2             equ	4043	;# 
   364   000FCB                     MEMCON          equ	4043	;# 
   365   000FCC                     TMR2            equ	4044	;# 
   366   000FCD                     T1CON           equ	4045	;# 
   367   000FCE                     TMR1            equ	4046	;# 
   368   000FCE                     TMR1L           equ	4046	;# 
   369   000FCF                     TMR1H           equ	4047	;# 
   370   000FD0                     RCON            equ	4048	;# 
   371   000FD1                     WDTCON          equ	4049	;# 
   372   000FD2                     HLVDCON         equ	4050	;# 
   373   000FD2                     LVDCON          equ	4050	;# 
   374   000FD3                     OSCCON          equ	4051	;# 
   375   000FD5                     T0CON           equ	4053	;# 
   376   000FD6                     TMR0            equ	4054	;# 
   377   000FD6                     TMR0L           equ	4054	;# 
   378   000FD7                     TMR0H           equ	4055	;# 
   379   000FD8                     STATUS          equ	4056	;# 
   380   000FD9                     FSR2            equ	4057	;# 
   381   000FD9                     FSR2L           equ	4057	;# 
   382   000FDA                     FSR2H           equ	4058	;# 
   383   000FDB                     PLUSW2          equ	4059	;# 
   384   000FDC                     PREINC2         equ	4060	;# 
   385   000FDD                     POSTDEC2        equ	4061	;# 
   386   000FDE                     POSTINC2        equ	4062	;# 
   387   000FDF                     INDF2           equ	4063	;# 
   388   000FE0                     BSR             equ	4064	;# 
   389   000FE1                     FSR1            equ	4065	;# 
   390   000FE1                     FSR1L           equ	4065	;# 
   391   000FE2                     FSR1H           equ	4066	;# 
   392   000FE3                     PLUSW1          equ	4067	;# 
   393   000FE4                     PREINC1         equ	4068	;# 
   394   000FE5                     POSTDEC1        equ	4069	;# 
   395   000FE6                     POSTINC1        equ	4070	;# 
   396   000FE7                     INDF1           equ	4071	;# 
   397   000FE8                     WREG            equ	4072	;# 
   398   000FE9                     FSR0            equ	4073	;# 
   399   000FE9                     FSR0L           equ	4073	;# 
   400   000FEA                     FSR0H           equ	4074	;# 
   401   000FEB                     PLUSW0          equ	4075	;# 
   402   000FEC                     PREINC0         equ	4076	;# 
   403   000FED                     POSTDEC0        equ	4077	;# 
   404   000FEE                     POSTINC0        equ	4078	;# 
   405   000FEF                     INDF0           equ	4079	;# 
   406   000FF0                     INTCON3         equ	4080	;# 
   407   000FF1                     INTCON2         equ	4081	;# 
   408   000FF2                     INTCON          equ	4082	;# 
   409   000FF3                     PROD            equ	4083	;# 
   410   000FF3                     PRODL           equ	4083	;# 
   411   000FF4                     PRODH           equ	4084	;# 
   412   000FF5                     TABLAT          equ	4085	;# 
   413   000FF6                     TBLPTR          equ	4086	;# 
   414   000FF6                     TBLPTRL         equ	4086	;# 
   415   000FF7                     TBLPTRH         equ	4087	;# 
   416   000FF8                     TBLPTRU         equ	4088	;# 
   417   000FF9                     PCLAT           equ	4089	;# 
   418   000FF9                     PC              equ	4089	;# 
   419   000FF9                     PCL             equ	4089	;# 
   420   000FFA                     PCLATH          equ	4090	;# 
   421   000FFB                     PCLATU          equ	4091	;# 
   422   000FFC                     STKPTR          equ	4092	;# 
   423   000FFD                     TOS             equ	4093	;# 
   424   000FFD                     TOSL            equ	4093	;# 
   425   000FFE                     TOSH            equ	4094	;# 
   426   000FFF                     TOSU            equ	4095	;# 
   427   000F80                     PORTA           equ	3968	;# 
   428   000F81                     PORTB           equ	3969	;# 
   429   000F82                     PORTC           equ	3970	;# 
   430   000F83                     PORTD           equ	3971	;# 
   431   000F84                     PORTE           equ	3972	;# 
   432   000F89                     LATA            equ	3977	;# 
   433   000F8A                     LATB            equ	3978	;# 
   434   000F8B                     LATC            equ	3979	;# 
   435   000F8C                     LATD            equ	3980	;# 
   436   000F8D                     LATE            equ	3981	;# 
   437   000F92                     TRISA           equ	3986	;# 
   438   000F92                     DDRA            equ	3986	;# 
   439   000F93                     TRISB           equ	3987	;# 
   440   000F93                     DDRB            equ	3987	;# 
   441   000F94                     TRISC           equ	3988	;# 
   442   000F94                     DDRC            equ	3988	;# 
   443   000F95                     TRISD           equ	3989	;# 
   444   000F95                     DDRD            equ	3989	;# 
   445   000F96                     TRISE           equ	3990	;# 
   446   000F96                     DDRE            equ	3990	;# 
   447   000F9B                     OSCTUNE         equ	3995	;# 
   448   000F9D                     PIE1            equ	3997	;# 
   449   000F9E                     PIR1            equ	3998	;# 
   450   000F9F                     IPR1            equ	3999	;# 
   451   000FA0                     PIE2            equ	4000	;# 
   452   000FA1                     PIR2            equ	4001	;# 
   453   000FA2                     IPR2            equ	4002	;# 
   454   000FA6                     EECON1          equ	4006	;# 
   455   000FA7                     EECON2          equ	4007	;# 
   456   000FA8                     EEDATA          equ	4008	;# 
   457   000FA9                     EEADR           equ	4009	;# 
   458   000FAB                     RCSTA           equ	4011	;# 
   459   000FAB                     RCSTA1          equ	4011	;# 
   460   000FAC                     TXSTA           equ	4012	;# 
   461   000FAC                     TXSTA1          equ	4012	;# 
   462   000FAD                     TXREG           equ	4013	;# 
   463   000FAD                     TXREG1          equ	4013	;# 
   464   000FAE                     RCREG           equ	4014	;# 
   465   000FAE                     RCREG1          equ	4014	;# 
   466   000FAF                     SPBRG           equ	4015	;# 
   467   000FAF                     SPBRG1          equ	4015	;# 
   468   000FB0                     SPBRGH          equ	4016	;# 
   469   000FB1                     T3CON           equ	4017	;# 
   470   000FB2                     TMR3            equ	4018	;# 
   471   000FB2                     TMR3L           equ	4018	;# 
   472   000FB3                     TMR3H           equ	4019	;# 
   473   000FB4                     CMCON           equ	4020	;# 
   474   000FB5                     CVRCON          equ	4021	;# 
   475   000FB6                     ECCP1AS         equ	4022	;# 
   476   000FB7                     ECCP1DEL        equ	4023	;# 
   477   000FB7                     PWM1CON         equ	4023	;# 
   478   000FB8                     BAUDCON         equ	4024	;# 
   479   000FB8                     BAUDCTL         equ	4024	;# 
   480   000FBA                     CCP2CON         equ	4026	;# 
   481   000FBB                     CCPR2           equ	4027	;# 
   482   000FBB                     CCPR2L          equ	4027	;# 
   483   000FBC                     CCPR2H          equ	4028	;# 
   484   000FBD                     CCP1CON         equ	4029	;# 
   485   000FBD                     ECCP1CON        equ	4029	;# 
   486   000FBE                     CCPR1           equ	4030	;# 
   487   000FBE                     CCPR1L          equ	4030	;# 
   488   000FBF                     CCPR1H          equ	4031	;# 
   489   000FC0                     ADCON2          equ	4032	;# 
   490   000FC1                     ADCON1          equ	4033	;# 
   491   000FC2                     ADCON0          equ	4034	;# 
   492   000FC3                     ADRES           equ	4035	;# 
   493   000FC3                     ADRESL          equ	4035	;# 
   494   000FC4                     ADRESH          equ	4036	;# 
   495   000FC5                     SSPCON2         equ	4037	;# 
   496   000FC6                     SSPCON1         equ	4038	;# 
   497   000FC7                     SSPSTAT         equ	4039	;# 
   498   000FC8                     SSPADD          equ	4040	;# 
   499   000FC9                     SSPBUF          equ	4041	;# 
   500   000FCA                     T2CON           equ	4042	;# 
   501   000FCB                     PR2             equ	4043	;# 
   502   000FCB                     MEMCON          equ	4043	;# 
   503   000FCC                     TMR2            equ	4044	;# 
   504   000FCD                     T1CON           equ	4045	;# 
   505   000FCE                     TMR1            equ	4046	;# 
   506   000FCE                     TMR1L           equ	4046	;# 
   507   000FCF                     TMR1H           equ	4047	;# 
   508   000FD0                     RCON            equ	4048	;# 
   509   000FD1                     WDTCON          equ	4049	;# 
   510   000FD2                     HLVDCON         equ	4050	;# 
   511   000FD2                     LVDCON          equ	4050	;# 
   512   000FD3                     OSCCON          equ	4051	;# 
   513   000FD5                     T0CON           equ	4053	;# 
   514   000FD6                     TMR0            equ	4054	;# 
   515   000FD6                     TMR0L           equ	4054	;# 
   516   000FD7                     TMR0H           equ	4055	;# 
   517   000FD8                     STATUS          equ	4056	;# 
   518   000FD9                     FSR2            equ	4057	;# 
   519   000FD9                     FSR2L           equ	4057	;# 
   520   000FDA                     FSR2H           equ	4058	;# 
   521   000FDB                     PLUSW2          equ	4059	;# 
   522   000FDC                     PREINC2         equ	4060	;# 
   523   000FDD                     POSTDEC2        equ	4061	;# 
   524   000FDE                     POSTINC2        equ	4062	;# 
   525   000FDF                     INDF2           equ	4063	;# 
   526   000FE0                     BSR             equ	4064	;# 
   527   000FE1                     FSR1            equ	4065	;# 
   528   000FE1                     FSR1L           equ	4065	;# 
   529   000FE2                     FSR1H           equ	4066	;# 
   530   000FE3                     PLUSW1          equ	4067	;# 
   531   000FE4                     PREINC1         equ	4068	;# 
   532   000FE5                     POSTDEC1        equ	4069	;# 
   533   000FE6                     POSTINC1        equ	4070	;# 
   534   000FE7                     INDF1           equ	4071	;# 
   535   000FE8                     WREG            equ	4072	;# 
   536   000FE9                     FSR0            equ	4073	;# 
   537   000FE9                     FSR0L           equ	4073	;# 
   538   000FEA                     FSR0H           equ	4074	;# 
   539   000FEB                     PLUSW0          equ	4075	;# 
   540   000FEC                     PREINC0         equ	4076	;# 
   541   000FED                     POSTDEC0        equ	4077	;# 
   542   000FEE                     POSTINC0        equ	4078	;# 
   543   000FEF                     INDF0           equ	4079	;# 
   544   000FF0                     INTCON3         equ	4080	;# 
   545   000FF1                     INTCON2         equ	4081	;# 
   546   000FF2                     INTCON          equ	4082	;# 
   547   000FF3                     PROD            equ	4083	;# 
   548   000FF3                     PRODL           equ	4083	;# 
   549   000FF4                     PRODH           equ	4084	;# 
   550   000FF5                     TABLAT          equ	4085	;# 
   551   000FF6                     TBLPTR          equ	4086	;# 
   552   000FF6                     TBLPTRL         equ	4086	;# 
   553   000FF7                     TBLPTRH         equ	4087	;# 
   554   000FF8                     TBLPTRU         equ	4088	;# 
   555   000FF9                     PCLAT           equ	4089	;# 
   556   000FF9                     PC              equ	4089	;# 
   557   000FF9                     PCL             equ	4089	;# 
   558   000FFA                     PCLATH          equ	4090	;# 
   559   000FFB                     PCLATU          equ	4091	;# 
   560   000FFC                     STKPTR          equ	4092	;# 
   561   000FFD                     TOS             equ	4093	;# 
   562   000FFD                     TOSL            equ	4093	;# 
   563   000FFE                     TOSH            equ	4094	;# 
   564   000FFF                     TOSU            equ	4095	;# 
   565   000F80                     PORTA           equ	3968	;# 
   566   000F81                     PORTB           equ	3969	;# 
   567   000F82                     PORTC           equ	3970	;# 
   568   000F83                     PORTD           equ	3971	;# 
   569   000F84                     PORTE           equ	3972	;# 
   570   000F89                     LATA            equ	3977	;# 
   571   000F8A                     LATB            equ	3978	;# 
   572   000F8B                     LATC            equ	3979	;# 
   573   000F8C                     LATD            equ	3980	;# 
   574   000F8D                     LATE            equ	3981	;# 
   575   000F92                     TRISA           equ	3986	;# 
   576   000F92                     DDRA            equ	3986	;# 
   577   000F93                     TRISB           equ	3987	;# 
   578   000F93                     DDRB            equ	3987	;# 
   579   000F94                     TRISC           equ	3988	;# 
   580   000F94                     DDRC            equ	3988	;# 
   581   000F95                     TRISD           equ	3989	;# 
   582   000F95                     DDRD            equ	3989	;# 
   583   000F96                     TRISE           equ	3990	;# 
   584   000F96                     DDRE            equ	3990	;# 
   585   000F9B                     OSCTUNE         equ	3995	;# 
   586   000F9D                     PIE1            equ	3997	;# 
   587   000F9E                     PIR1            equ	3998	;# 
   588   000F9F                     IPR1            equ	3999	;# 
   589   000FA0                     PIE2            equ	4000	;# 
   590   000FA1                     PIR2            equ	4001	;# 
   591   000FA2                     IPR2            equ	4002	;# 
   592   000FA6                     EECON1          equ	4006	;# 
   593   000FA7                     EECON2          equ	4007	;# 
   594   000FA8                     EEDATA          equ	4008	;# 
   595   000FA9                     EEADR           equ	4009	;# 
   596   000FAB                     RCSTA           equ	4011	;# 
   597   000FAB                     RCSTA1          equ	4011	;# 
   598   000FAC                     TXSTA           equ	4012	;# 
   599   000FAC                     TXSTA1          equ	4012	;# 
   600   000FAD                     TXREG           equ	4013	;# 
   601   000FAD                     TXREG1          equ	4013	;# 
   602   000FAE                     RCREG           equ	4014	;# 
   603   000FAE                     RCREG1          equ	4014	;# 
   604   000FAF                     SPBRG           equ	4015	;# 
   605   000FAF                     SPBRG1          equ	4015	;# 
   606   000FB0                     SPBRGH          equ	4016	;# 
   607   000FB1                     T3CON           equ	4017	;# 
   608   000FB2                     TMR3            equ	4018	;# 
   609   000FB2                     TMR3L           equ	4018	;# 
   610   000FB3                     TMR3H           equ	4019	;# 
   611   000FB4                     CMCON           equ	4020	;# 
   612   000FB5                     CVRCON          equ	4021	;# 
   613   000FB6                     ECCP1AS         equ	4022	;# 
   614   000FB7                     ECCP1DEL        equ	4023	;# 
   615   000FB7                     PWM1CON         equ	4023	;# 
   616   000FB8                     BAUDCON         equ	4024	;# 
   617   000FB8                     BAUDCTL         equ	4024	;# 
   618   000FBA                     CCP2CON         equ	4026	;# 
   619   000FBB                     CCPR2           equ	4027	;# 
   620   000FBB                     CCPR2L          equ	4027	;# 
   621   000FBC                     CCPR2H          equ	4028	;# 
   622   000FBD                     CCP1CON         equ	4029	;# 
   623   000FBD                     ECCP1CON        equ	4029	;# 
   624   000FBE                     CCPR1           equ	4030	;# 
   625   000FBE                     CCPR1L          equ	4030	;# 
   626   000FBF                     CCPR1H          equ	4031	;# 
   627   000FC0                     ADCON2          equ	4032	;# 
   628   000FC1                     ADCON1          equ	4033	;# 
   629   000FC2                     ADCON0          equ	4034	;# 
   630   000FC3                     ADRES           equ	4035	;# 
   631   000FC3                     ADRESL          equ	4035	;# 
   632   000FC4                     ADRESH          equ	4036	;# 
   633   000FC5                     SSPCON2         equ	4037	;# 
   634   000FC6                     SSPCON1         equ	4038	;# 
   635   000FC7                     SSPSTAT         equ	4039	;# 
   636   000FC8                     SSPADD          equ	4040	;# 
   637   000FC9                     SSPBUF          equ	4041	;# 
   638   000FCA                     T2CON           equ	4042	;# 
   639   000FCB                     PR2             equ	4043	;# 
   640   000FCB                     MEMCON          equ	4043	;# 
   641   000FCC                     TMR2            equ	4044	;# 
   642   000FCD                     T1CON           equ	4045	;# 
   643   000FCE                     TMR1            equ	4046	;# 
   644   000FCE                     TMR1L           equ	4046	;# 
   645   000FCF                     TMR1H           equ	4047	;# 
   646   000FD0                     RCON            equ	4048	;# 
   647   000FD1                     WDTCON          equ	4049	;# 
   648   000FD2                     HLVDCON         equ	4050	;# 
   649   000FD2                     LVDCON          equ	4050	;# 
   650   000FD3                     OSCCON          equ	4051	;# 
   651   000FD5                     T0CON           equ	4053	;# 
   652   000FD6                     TMR0            equ	4054	;# 
   653   000FD6                     TMR0L           equ	4054	;# 
   654   000FD7                     TMR0H           equ	4055	;# 
   655   000FD8                     STATUS          equ	4056	;# 
   656   000FD9                     FSR2            equ	4057	;# 
   657   000FD9                     FSR2L           equ	4057	;# 
   658   000FDA                     FSR2H           equ	4058	;# 
   659   000FDB                     PLUSW2          equ	4059	;# 
   660   000FDC                     PREINC2         equ	4060	;# 
   661   000FDD                     POSTDEC2        equ	4061	;# 
   662   000FDE                     POSTINC2        equ	4062	;# 
   663   000FDF                     INDF2           equ	4063	;# 
   664   000FE0                     BSR             equ	4064	;# 
   665   000FE1                     FSR1            equ	4065	;# 
   666   000FE1                     FSR1L           equ	4065	;# 
   667   000FE2                     FSR1H           equ	4066	;# 
   668   000FE3                     PLUSW1          equ	4067	;# 
   669   000FE4                     PREINC1         equ	4068	;# 
   670   000FE5                     POSTDEC1        equ	4069	;# 
   671   000FE6                     POSTINC1        equ	4070	;# 
   672   000FE7                     INDF1           equ	4071	;# 
   673   000FE8                     WREG            equ	4072	;# 
   674   000FE9                     FSR0            equ	4073	;# 
   675   000FE9                     FSR0L           equ	4073	;# 
   676   000FEA                     FSR0H           equ	4074	;# 
   677   000FEB                     PLUSW0          equ	4075	;# 
   678   000FEC                     PREINC0         equ	4076	;# 
   679   000FED                     POSTDEC0        equ	4077	;# 
   680   000FEE                     POSTINC0        equ	4078	;# 
   681   000FEF                     INDF0           equ	4079	;# 
   682   000FF0                     INTCON3         equ	4080	;# 
   683   000FF1                     INTCON2         equ	4081	;# 
   684   000FF2                     INTCON          equ	4082	;# 
   685   000FF3                     PROD            equ	4083	;# 
   686   000FF3                     PRODL           equ	4083	;# 
   687   000FF4                     PRODH           equ	4084	;# 
   688   000FF5                     TABLAT          equ	4085	;# 
   689   000FF6                     TBLPTR          equ	4086	;# 
   690   000FF6                     TBLPTRL         equ	4086	;# 
   691   000FF7                     TBLPTRH         equ	4087	;# 
   692   000FF8                     TBLPTRU         equ	4088	;# 
   693   000FF9                     PCLAT           equ	4089	;# 
   694   000FF9                     PC              equ	4089	;# 
   695   000FF9                     PCL             equ	4089	;# 
   696   000FFA                     PCLATH          equ	4090	;# 
   697   000FFB                     PCLATU          equ	4091	;# 
   698   000FFC                     STKPTR          equ	4092	;# 
   699   000FFD                     TOS             equ	4093	;# 
   700   000FFD                     TOSL            equ	4093	;# 
   701   000FFE                     TOSH            equ	4094	;# 
   702   000FFF                     TOSU            equ	4095	;# 
   703   000F80                     PORTA           equ	3968	;# 
   704   000F81                     PORTB           equ	3969	;# 
   705   000F82                     PORTC           equ	3970	;# 
   706   000F83                     PORTD           equ	3971	;# 
   707   000F84                     PORTE           equ	3972	;# 
   708   000F89                     LATA            equ	3977	;# 
   709   000F8A                     LATB            equ	3978	;# 
   710   000F8B                     LATC            equ	3979	;# 
   711   000F8C                     LATD            equ	3980	;# 
   712   000F8D                     LATE            equ	3981	;# 
   713   000F92                     TRISA           equ	3986	;# 
   714   000F92                     DDRA            equ	3986	;# 
   715   000F93                     TRISB           equ	3987	;# 
   716   000F93                     DDRB            equ	3987	;# 
   717   000F94                     TRISC           equ	3988	;# 
   718   000F94                     DDRC            equ	3988	;# 
   719   000F95                     TRISD           equ	3989	;# 
   720   000F95                     DDRD            equ	3989	;# 
   721   000F96                     TRISE           equ	3990	;# 
   722   000F96                     DDRE            equ	3990	;# 
   723   000F9B                     OSCTUNE         equ	3995	;# 
   724   000F9D                     PIE1            equ	3997	;# 
   725   000F9E                     PIR1            equ	3998	;# 
   726   000F9F                     IPR1            equ	3999	;# 
   727   000FA0                     PIE2            equ	4000	;# 
   728   000FA1                     PIR2            equ	4001	;# 
   729   000FA2                     IPR2            equ	4002	;# 
   730   000FA6                     EECON1          equ	4006	;# 
   731   000FA7                     EECON2          equ	4007	;# 
   732   000FA8                     EEDATA          equ	4008	;# 
   733   000FA9                     EEADR           equ	4009	;# 
   734   000FAB                     RCSTA           equ	4011	;# 
   735   000FAB                     RCSTA1          equ	4011	;# 
   736   000FAC                     TXSTA           equ	4012	;# 
   737   000FAC                     TXSTA1          equ	4012	;# 
   738   000FAD                     TXREG           equ	4013	;# 
   739   000FAD                     TXREG1          equ	4013	;# 
   740   000FAE                     RCREG           equ	4014	;# 
   741   000FAE                     RCREG1          equ	4014	;# 
   742   000FAF                     SPBRG           equ	4015	;# 
   743   000FAF                     SPBRG1          equ	4015	;# 
   744   000FB0                     SPBRGH          equ	4016	;# 
   745   000FB1                     T3CON           equ	4017	;# 
   746   000FB2                     TMR3            equ	4018	;# 
   747   000FB2                     TMR3L           equ	4018	;# 
   748   000FB3                     TMR3H           equ	4019	;# 
   749   000FB4                     CMCON           equ	4020	;# 
   750   000FB5                     CVRCON          equ	4021	;# 
   751   000FB6                     ECCP1AS         equ	4022	;# 
   752   000FB7                     ECCP1DEL        equ	4023	;# 
   753   000FB7                     PWM1CON         equ	4023	;# 
   754   000FB8                     BAUDCON         equ	4024	;# 
   755   000FB8                     BAUDCTL         equ	4024	;# 
   756   000FBA                     CCP2CON         equ	4026	;# 
   757   000FBB                     CCPR2           equ	4027	;# 
   758   000FBB                     CCPR2L          equ	4027	;# 
   759   000FBC                     CCPR2H          equ	4028	;# 
   760   000FBD                     CCP1CON         equ	4029	;# 
   761   000FBD                     ECCP1CON        equ	4029	;# 
   762   000FBE                     CCPR1           equ	4030	;# 
   763   000FBE                     CCPR1L          equ	4030	;# 
   764   000FBF                     CCPR1H          equ	4031	;# 
   765   000FC0                     ADCON2          equ	4032	;# 
   766   000FC1                     ADCON1          equ	4033	;# 
   767   000FC2                     ADCON0          equ	4034	;# 
   768   000FC3                     ADRES           equ	4035	;# 
   769   000FC3                     ADRESL          equ	4035	;# 
   770   000FC4                     ADRESH          equ	4036	;# 
   771   000FC5                     SSPCON2         equ	4037	;# 
   772   000FC6                     SSPCON1         equ	4038	;# 
   773   000FC7                     SSPSTAT         equ	4039	;# 
   774   000FC8                     SSPADD          equ	4040	;# 
   775   000FC9                     SSPBUF          equ	4041	;# 
   776   000FCA                     T2CON           equ	4042	;# 
   777   000FCB                     PR2             equ	4043	;# 
   778   000FCB                     MEMCON          equ	4043	;# 
   779   000FCC                     TMR2            equ	4044	;# 
   780   000FCD                     T1CON           equ	4045	;# 
   781   000FCE                     TMR1            equ	4046	;# 
   782   000FCE                     TMR1L           equ	4046	;# 
   783   000FCF                     TMR1H           equ	4047	;# 
   784   000FD0                     RCON            equ	4048	;# 
   785   000FD1                     WDTCON          equ	4049	;# 
   786   000FD2                     HLVDCON         equ	4050	;# 
   787   000FD2                     LVDCON          equ	4050	;# 
   788   000FD3                     OSCCON          equ	4051	;# 
   789   000FD5                     T0CON           equ	4053	;# 
   790   000FD6                     TMR0            equ	4054	;# 
   791   000FD6                     TMR0L           equ	4054	;# 
   792   000FD7                     TMR0H           equ	4055	;# 
   793   000FD8                     STATUS          equ	4056	;# 
   794   000FD9                     FSR2            equ	4057	;# 
   795   000FD9                     FSR2L           equ	4057	;# 
   796   000FDA                     FSR2H           equ	4058	;# 
   797   000FDB                     PLUSW2          equ	4059	;# 
   798   000FDC                     PREINC2         equ	4060	;# 
   799   000FDD                     POSTDEC2        equ	4061	;# 
   800   000FDE                     POSTINC2        equ	4062	;# 
   801   000FDF                     INDF2           equ	4063	;# 
   802   000FE0                     BSR             equ	4064	;# 
   803   000FE1                     FSR1            equ	4065	;# 
   804   000FE1                     FSR1L           equ	4065	;# 
   805   000FE2                     FSR1H           equ	4066	;# 
   806   000FE3                     PLUSW1          equ	4067	;# 
   807   000FE4                     PREINC1         equ	4068	;# 
   808   000FE5                     POSTDEC1        equ	4069	;# 
   809   000FE6                     POSTINC1        equ	4070	;# 
   810   000FE7                     INDF1           equ	4071	;# 
   811   000FE8                     WREG            equ	4072	;# 
   812   000FE9                     FSR0            equ	4073	;# 
   813   000FE9                     FSR0L           equ	4073	;# 
   814   000FEA                     FSR0H           equ	4074	;# 
   815   000FEB                     PLUSW0          equ	4075	;# 
   816   000FEC                     PREINC0         equ	4076	;# 
   817   000FED                     POSTDEC0        equ	4077	;# 
   818   000FEE                     POSTINC0        equ	4078	;# 
   819   000FEF                     INDF0           equ	4079	;# 
   820   000FF0                     INTCON3         equ	4080	;# 
   821   000FF1                     INTCON2         equ	4081	;# 
   822   000FF2                     INTCON          equ	4082	;# 
   823   000FF3                     PROD            equ	4083	;# 
   824   000FF3                     PRODL           equ	4083	;# 
   825   000FF4                     PRODH           equ	4084	;# 
   826   000FF5                     TABLAT          equ	4085	;# 
   827   000FF6                     TBLPTR          equ	4086	;# 
   828   000FF6                     TBLPTRL         equ	4086	;# 
   829   000FF7                     TBLPTRH         equ	4087	;# 
   830   000FF8                     TBLPTRU         equ	4088	;# 
   831   000FF9                     PCLAT           equ	4089	;# 
   832   000FF9                     PC              equ	4089	;# 
   833   000FF9                     PCL             equ	4089	;# 
   834   000FFA                     PCLATH          equ	4090	;# 
   835   000FFB                     PCLATU          equ	4091	;# 
   836   000FFC                     STKPTR          equ	4092	;# 
   837   000FFD                     TOS             equ	4093	;# 
   838   000FFD                     TOSL            equ	4093	;# 
   839   000FFE                     TOSH            equ	4094	;# 
   840   000FFF                     TOSU            equ	4095	;# 
   841   000F80                     PORTA           equ	3968	;# 
   842   000F81                     PORTB           equ	3969	;# 
   843   000F82                     PORTC           equ	3970	;# 
   844   000F83                     PORTD           equ	3971	;# 
   845   000F84                     PORTE           equ	3972	;# 
   846   000F89                     LATA            equ	3977	;# 
   847   000F8A                     LATB            equ	3978	;# 
   848   000F8B                     LATC            equ	3979	;# 
   849   000F8C                     LATD            equ	3980	;# 
   850   000F8D                     LATE            equ	3981	;# 
   851   000F92                     TRISA           equ	3986	;# 
   852   000F92                     DDRA            equ	3986	;# 
   853   000F93                     TRISB           equ	3987	;# 
   854   000F93                     DDRB            equ	3987	;# 
   855   000F94                     TRISC           equ	3988	;# 
   856   000F94                     DDRC            equ	3988	;# 
   857   000F95                     TRISD           equ	3989	;# 
   858   000F95                     DDRD            equ	3989	;# 
   859   000F96                     TRISE           equ	3990	;# 
   860   000F96                     DDRE            equ	3990	;# 
   861   000F9B                     OSCTUNE         equ	3995	;# 
   862   000F9D                     PIE1            equ	3997	;# 
   863   000F9E                     PIR1            equ	3998	;# 
   864   000F9F                     IPR1            equ	3999	;# 
   865   000FA0                     PIE2            equ	4000	;# 
   866   000FA1                     PIR2            equ	4001	;# 
   867   000FA2                     IPR2            equ	4002	;# 
   868   000FA6                     EECON1          equ	4006	;# 
   869   000FA7                     EECON2          equ	4007	;# 
   870   000FA8                     EEDATA          equ	4008	;# 
   871   000FA9                     EEADR           equ	4009	;# 
   872   000FAB                     RCSTA           equ	4011	;# 
   873   000FAB                     RCSTA1          equ	4011	;# 
   874   000FAC                     TXSTA           equ	4012	;# 
   875   000FAC                     TXSTA1          equ	4012	;# 
   876   000FAD                     TXREG           equ	4013	;# 
   877   000FAD                     TXREG1          equ	4013	;# 
   878   000FAE                     RCREG           equ	4014	;# 
   879   000FAE                     RCREG1          equ	4014	;# 
   880   000FAF                     SPBRG           equ	4015	;# 
   881   000FAF                     SPBRG1          equ	4015	;# 
   882   000FB0                     SPBRGH          equ	4016	;# 
   883   000FB1                     T3CON           equ	4017	;# 
   884   000FB2                     TMR3            equ	4018	;# 
   885   000FB2                     TMR3L           equ	4018	;# 
   886   000FB3                     TMR3H           equ	4019	;# 
   887   000FB4                     CMCON           equ	4020	;# 
   888   000FB5                     CVRCON          equ	4021	;# 
   889   000FB6                     ECCP1AS         equ	4022	;# 
   890   000FB7                     ECCP1DEL        equ	4023	;# 
   891   000FB7                     PWM1CON         equ	4023	;# 
   892   000FB8                     BAUDCON         equ	4024	;# 
   893   000FB8                     BAUDCTL         equ	4024	;# 
   894   000FBA                     CCP2CON         equ	4026	;# 
   895   000FBB                     CCPR2           equ	4027	;# 
   896   000FBB                     CCPR2L          equ	4027	;# 
   897   000FBC                     CCPR2H          equ	4028	;# 
   898   000FBD                     CCP1CON         equ	4029	;# 
   899   000FBD                     ECCP1CON        equ	4029	;# 
   900   000FBE                     CCPR1           equ	4030	;# 
   901   000FBE                     CCPR1L          equ	4030	;# 
   902   000FBF                     CCPR1H          equ	4031	;# 
   903   000FC0                     ADCON2          equ	4032	;# 
   904   000FC1                     ADCON1          equ	4033	;# 
   905   000FC2                     ADCON0          equ	4034	;# 
   906   000FC3                     ADRES           equ	4035	;# 
   907   000FC3                     ADRESL          equ	4035	;# 
   908   000FC4                     ADRESH          equ	4036	;# 
   909   000FC5                     SSPCON2         equ	4037	;# 
   910   000FC6                     SSPCON1         equ	4038	;# 
   911   000FC7                     SSPSTAT         equ	4039	;# 
   912   000FC8                     SSPADD          equ	4040	;# 
   913   000FC9                     SSPBUF          equ	4041	;# 
   914   000FCA                     T2CON           equ	4042	;# 
   915   000FCB                     PR2             equ	4043	;# 
   916   000FCB                     MEMCON          equ	4043	;# 
   917   000FCC                     TMR2            equ	4044	;# 
   918   000FCD                     T1CON           equ	4045	;# 
   919   000FCE                     TMR1            equ	4046	;# 
   920   000FCE                     TMR1L           equ	4046	;# 
   921   000FCF                     TMR1H           equ	4047	;# 
   922   000FD0                     RCON            equ	4048	;# 
   923   000FD1                     WDTCON          equ	4049	;# 
   924   000FD2                     HLVDCON         equ	4050	;# 
   925   000FD2                     LVDCON          equ	4050	;# 
   926   000FD3                     OSCCON          equ	4051	;# 
   927   000FD5                     T0CON           equ	4053	;# 
   928   000FD6                     TMR0            equ	4054	;# 
   929   000FD6                     TMR0L           equ	4054	;# 
   930   000FD7                     TMR0H           equ	4055	;# 
   931   000FD8                     STATUS          equ	4056	;# 
   932   000FD9                     FSR2            equ	4057	;# 
   933   000FD9                     FSR2L           equ	4057	;# 
   934   000FDA                     FSR2H           equ	4058	;# 
   935   000FDB                     PLUSW2          equ	4059	;# 
   936   000FDC                     PREINC2         equ	4060	;# 
   937   000FDD                     POSTDEC2        equ	4061	;# 
   938   000FDE                     POSTINC2        equ	4062	;# 
   939   000FDF                     INDF2           equ	4063	;# 
   940   000FE0                     BSR             equ	4064	;# 
   941   000FE1                     FSR1            equ	4065	;# 
   942   000FE1                     FSR1L           equ	4065	;# 
   943   000FE2                     FSR1H           equ	4066	;# 
   944   000FE3                     PLUSW1          equ	4067	;# 
   945   000FE4                     PREINC1         equ	4068	;# 
   946   000FE5                     POSTDEC1        equ	4069	;# 
   947   000FE6                     POSTINC1        equ	4070	;# 
   948   000FE7                     INDF1           equ	4071	;# 
   949   000FE8                     WREG            equ	4072	;# 
   950   000FE9                     FSR0            equ	4073	;# 
   951   000FE9                     FSR0L           equ	4073	;# 
   952   000FEA                     FSR0H           equ	4074	;# 
   953   000FEB                     PLUSW0          equ	4075	;# 
   954   000FEC                     PREINC0         equ	4076	;# 
   955   000FED                     POSTDEC0        equ	4077	;# 
   956   000FEE                     POSTINC0        equ	4078	;# 
   957   000FEF                     INDF0           equ	4079	;# 
   958   000FF0                     INTCON3         equ	4080	;# 
   959   000FF1                     INTCON2         equ	4081	;# 
   960   000FF2                     INTCON          equ	4082	;# 
   961   000FF3                     PROD            equ	4083	;# 
   962   000FF3                     PRODL           equ	4083	;# 
   963   000FF4                     PRODH           equ	4084	;# 
   964   000FF5                     TABLAT          equ	4085	;# 
   965   000FF6                     TBLPTR          equ	4086	;# 
   966   000FF6                     TBLPTRL         equ	4086	;# 
   967   000FF7                     TBLPTRH         equ	4087	;# 
   968   000FF8                     TBLPTRU         equ	4088	;# 
   969   000FF9                     PCLAT           equ	4089	;# 
   970   000FF9                     PC              equ	4089	;# 
   971   000FF9                     PCL             equ	4089	;# 
   972   000FFA                     PCLATH          equ	4090	;# 
   973   000FFB                     PCLATU          equ	4091	;# 
   974   000FFC                     STKPTR          equ	4092	;# 
   975   000FFD                     TOS             equ	4093	;# 
   976   000FFD                     TOSL            equ	4093	;# 
   977   000FFE                     TOSH            equ	4094	;# 
   978   000FFF                     TOSU            equ	4095	;# 
   979   000F80                     PORTA           equ	3968	;# 
   980   000F81                     PORTB           equ	3969	;# 
   981   000F82                     PORTC           equ	3970	;# 
   982   000F83                     PORTD           equ	3971	;# 
   983   000F84                     PORTE           equ	3972	;# 
   984   000F89                     LATA            equ	3977	;# 
   985   000F8A                     LATB            equ	3978	;# 
   986   000F8B                     LATC            equ	3979	;# 
   987   000F8C                     LATD            equ	3980	;# 
   988   000F8D                     LATE            equ	3981	;# 
   989   000F92                     TRISA           equ	3986	;# 
   990   000F92                     DDRA            equ	3986	;# 
   991   000F93                     TRISB           equ	3987	;# 
   992   000F93                     DDRB            equ	3987	;# 
   993   000F94                     TRISC           equ	3988	;# 
   994   000F94                     DDRC            equ	3988	;# 
   995   000F95                     TRISD           equ	3989	;# 
   996   000F95                     DDRD            equ	3989	;# 
   997   000F96                     TRISE           equ	3990	;# 
   998   000F96                     DDRE            equ	3990	;# 
   999   000F9B                     OSCTUNE         equ	3995	;# 
  1000   000F9D                     PIE1            equ	3997	;# 
  1001   000F9E                     PIR1            equ	3998	;# 
  1002   000F9F                     IPR1            equ	3999	;# 
  1003   000FA0                     PIE2            equ	4000	;# 
  1004   000FA1                     PIR2            equ	4001	;# 
  1005   000FA2                     IPR2            equ	4002	;# 
  1006   000FA6                     EECON1          equ	4006	;# 
  1007   000FA7                     EECON2          equ	4007	;# 
  1008   000FA8                     EEDATA          equ	4008	;# 
  1009   000FA9                     EEADR           equ	4009	;# 
  1010   000FAB                     RCSTA           equ	4011	;# 
  1011   000FAB                     RCSTA1          equ	4011	;# 
  1012   000FAC                     TXSTA           equ	4012	;# 
  1013   000FAC                     TXSTA1          equ	4012	;# 
  1014   000FAD                     TXREG           equ	4013	;# 
  1015   000FAD                     TXREG1          equ	4013	;# 
  1016   000FAE                     RCREG           equ	4014	;# 
  1017   000FAE                     RCREG1          equ	4014	;# 
  1018   000FAF                     SPBRG           equ	4015	;# 
  1019   000FAF                     SPBRG1          equ	4015	;# 
  1020   000FB0                     SPBRGH          equ	4016	;# 
  1021   000FB1                     T3CON           equ	4017	;# 
  1022   000FB2                     TMR3            equ	4018	;# 
  1023   000FB2                     TMR3L           equ	4018	;# 
  1024   000FB3                     TMR3H           equ	4019	;# 
  1025   000FB4                     CMCON           equ	4020	;# 
  1026   000FB5                     CVRCON          equ	4021	;# 
  1027   000FB6                     ECCP1AS         equ	4022	;# 
  1028   000FB7                     ECCP1DEL        equ	4023	;# 
  1029   000FB7                     PWM1CON         equ	4023	;# 
  1030   000FB8                     BAUDCON         equ	4024	;# 
  1031   000FB8                     BAUDCTL         equ	4024	;# 
  1032   000FBA                     CCP2CON         equ	4026	;# 
  1033   000FBB                     CCPR2           equ	4027	;# 
  1034   000FBB                     CCPR2L          equ	4027	;# 
  1035   000FBC                     CCPR2H          equ	4028	;# 
  1036   000FBD                     CCP1CON         equ	4029	;# 
  1037   000FBD                     ECCP1CON        equ	4029	;# 
  1038   000FBE                     CCPR1           equ	4030	;# 
  1039   000FBE                     CCPR1L          equ	4030	;# 
  1040   000FBF                     CCPR1H          equ	4031	;# 
  1041   000FC0                     ADCON2          equ	4032	;# 
  1042   000FC1                     ADCON1          equ	4033	;# 
  1043   000FC2                     ADCON0          equ	4034	;# 
  1044   000FC3                     ADRES           equ	4035	;# 
  1045   000FC3                     ADRESL          equ	4035	;# 
  1046   000FC4                     ADRESH          equ	4036	;# 
  1047   000FC5                     SSPCON2         equ	4037	;# 
  1048   000FC6                     SSPCON1         equ	4038	;# 
  1049   000FC7                     SSPSTAT         equ	4039	;# 
  1050   000FC8                     SSPADD          equ	4040	;# 
  1051   000FC9                     SSPBUF          equ	4041	;# 
  1052   000FCA                     T2CON           equ	4042	;# 
  1053   000FCB                     PR2             equ	4043	;# 
  1054   000FCB                     MEMCON          equ	4043	;# 
  1055   000FCC                     TMR2            equ	4044	;# 
  1056   000FCD                     T1CON           equ	4045	;# 
  1057   000FCE                     TMR1            equ	4046	;# 
  1058   000FCE                     TMR1L           equ	4046	;# 
  1059   000FCF                     TMR1H           equ	4047	;# 
  1060   000FD0                     RCON            equ	4048	;# 
  1061   000FD1                     WDTCON          equ	4049	;# 
  1062   000FD2                     HLVDCON         equ	4050	;# 
  1063   000FD2                     LVDCON          equ	4050	;# 
  1064   000FD3                     OSCCON          equ	4051	;# 
  1065   000FD5                     T0CON           equ	4053	;# 
  1066   000FD6                     TMR0            equ	4054	;# 
  1067   000FD6                     TMR0L           equ	4054	;# 
  1068   000FD7                     TMR0H           equ	4055	;# 
  1069   000FD8                     STATUS          equ	4056	;# 
  1070   000FD9                     FSR2            equ	4057	;# 
  1071   000FD9                     FSR2L           equ	4057	;# 
  1072   000FDA                     FSR2H           equ	4058	;# 
  1073   000FDB                     PLUSW2          equ	4059	;# 
  1074   000FDC                     PREINC2         equ	4060	;# 
  1075   000FDD                     POSTDEC2        equ	4061	;# 
  1076   000FDE                     POSTINC2        equ	4062	;# 
  1077   000FDF                     INDF2           equ	4063	;# 
  1078   000FE0                     BSR             equ	4064	;# 
  1079   000FE1                     FSR1            equ	4065	;# 
  1080   000FE1                     FSR1L           equ	4065	;# 
  1081   000FE2                     FSR1H           equ	4066	;# 
  1082   000FE3                     PLUSW1          equ	4067	;# 
  1083   000FE4                     PREINC1         equ	4068	;# 
  1084   000FE5                     POSTDEC1        equ	4069	;# 
  1085   000FE6                     POSTINC1        equ	4070	;# 
  1086   000FE7                     INDF1           equ	4071	;# 
  1087   000FE8                     WREG            equ	4072	;# 
  1088   000FE9                     FSR0            equ	4073	;# 
  1089   000FE9                     FSR0L           equ	4073	;# 
  1090   000FEA                     FSR0H           equ	4074	;# 
  1091   000FEB                     PLUSW0          equ	4075	;# 
  1092   000FEC                     PREINC0         equ	4076	;# 
  1093   000FED                     POSTDEC0        equ	4077	;# 
  1094   000FEE                     POSTINC0        equ	4078	;# 
  1095   000FEF                     INDF0           equ	4079	;# 
  1096   000FF0                     INTCON3         equ	4080	;# 
  1097   000FF1                     INTCON2         equ	4081	;# 
  1098   000FF2                     INTCON          equ	4082	;# 
  1099   000FF3                     PROD            equ	4083	;# 
  1100   000FF3                     PRODL           equ	4083	;# 
  1101   000FF4                     PRODH           equ	4084	;# 
  1102   000FF5                     TABLAT          equ	4085	;# 
  1103   000FF6                     TBLPTR          equ	4086	;# 
  1104   000FF6                     TBLPTRL         equ	4086	;# 
  1105   000FF7                     TBLPTRH         equ	4087	;# 
  1106   000FF8                     TBLPTRU         equ	4088	;# 
  1107   000FF9                     PCLAT           equ	4089	;# 
  1108   000FF9                     PC              equ	4089	;# 
  1109   000FF9                     PCL             equ	4089	;# 
  1110   000FFA                     PCLATH          equ	4090	;# 
  1111   000FFB                     PCLATU          equ	4091	;# 
  1112   000FFC                     STKPTR          equ	4092	;# 
  1113   000FFD                     TOS             equ	4093	;# 
  1114   000FFD                     TOSL            equ	4093	;# 
  1115   000FFE                     TOSH            equ	4094	;# 
  1116   000FFF                     TOSU            equ	4095	;# 
  1117   000F80                     PORTA           equ	3968	;# 
  1118   000F81                     PORTB           equ	3969	;# 
  1119   000F82                     PORTC           equ	3970	;# 
  1120   000F83                     PORTD           equ	3971	;# 
  1121   000F84                     PORTE           equ	3972	;# 
  1122   000F89                     LATA            equ	3977	;# 
  1123   000F8A                     LATB            equ	3978	;# 
  1124   000F8B                     LATC            equ	3979	;# 
  1125   000F8C                     LATD            equ	3980	;# 
  1126   000F8D                     LATE            equ	3981	;# 
  1127   000F92                     TRISA           equ	3986	;# 
  1128   000F92                     DDRA            equ	3986	;# 
  1129   000F93                     TRISB           equ	3987	;# 
  1130   000F93                     DDRB            equ	3987	;# 
  1131   000F94                     TRISC           equ	3988	;# 
  1132   000F94                     DDRC            equ	3988	;# 
  1133   000F95                     TRISD           equ	3989	;# 
  1134   000F95                     DDRD            equ	3989	;# 
  1135   000F96                     TRISE           equ	3990	;# 
  1136   000F96                     DDRE            equ	3990	;# 
  1137   000F9B                     OSCTUNE         equ	3995	;# 
  1138   000F9D                     PIE1            equ	3997	;# 
  1139   000F9E                     PIR1            equ	3998	;# 
  1140   000F9F                     IPR1            equ	3999	;# 
  1141   000FA0                     PIE2            equ	4000	;# 
  1142   000FA1                     PIR2            equ	4001	;# 
  1143   000FA2                     IPR2            equ	4002	;# 
  1144   000FA6                     EECON1          equ	4006	;# 
  1145   000FA7                     EECON2          equ	4007	;# 
  1146   000FA8                     EEDATA          equ	4008	;# 
  1147   000FA9                     EEADR           equ	4009	;# 
  1148   000FAB                     RCSTA           equ	4011	;# 
  1149   000FAB                     RCSTA1          equ	4011	;# 
  1150   000FAC                     TXSTA           equ	4012	;# 
  1151   000FAC                     TXSTA1          equ	4012	;# 
  1152   000FAD                     TXREG           equ	4013	;# 
  1153   000FAD                     TXREG1          equ	4013	;# 
  1154   000FAE                     RCREG           equ	4014	;# 
  1155   000FAE                     RCREG1          equ	4014	;# 
  1156   000FAF                     SPBRG           equ	4015	;# 
  1157   000FAF                     SPBRG1          equ	4015	;# 
  1158   000FB0                     SPBRGH          equ	4016	;# 
  1159   000FB1                     T3CON           equ	4017	;# 
  1160   000FB2                     TMR3            equ	4018	;# 
  1161   000FB2                     TMR3L           equ	4018	;# 
  1162   000FB3                     TMR3H           equ	4019	;# 
  1163   000FB4                     CMCON           equ	4020	;# 
  1164   000FB5                     CVRCON          equ	4021	;# 
  1165   000FB6                     ECCP1AS         equ	4022	;# 
  1166   000FB7                     ECCP1DEL        equ	4023	;# 
  1167   000FB7                     PWM1CON         equ	4023	;# 
  1168   000FB8                     BAUDCON         equ	4024	;# 
  1169   000FB8                     BAUDCTL         equ	4024	;# 
  1170   000FBA                     CCP2CON         equ	4026	;# 
  1171   000FBB                     CCPR2           equ	4027	;# 
  1172   000FBB                     CCPR2L          equ	4027	;# 
  1173   000FBC                     CCPR2H          equ	4028	;# 
  1174   000FBD                     CCP1CON         equ	4029	;# 
  1175   000FBD                     ECCP1CON        equ	4029	;# 
  1176   000FBE                     CCPR1           equ	4030	;# 
  1177   000FBE                     CCPR1L          equ	4030	;# 
  1178   000FBF                     CCPR1H          equ	4031	;# 
  1179   000FC0                     ADCON2          equ	4032	;# 
  1180   000FC1                     ADCON1          equ	4033	;# 
  1181   000FC2                     ADCON0          equ	4034	;# 
  1182   000FC3                     ADRES           equ	4035	;# 
  1183   000FC3                     ADRESL          equ	4035	;# 
  1184   000FC4                     ADRESH          equ	4036	;# 
  1185   000FC5                     SSPCON2         equ	4037	;# 
  1186   000FC6                     SSPCON1         equ	4038	;# 
  1187   000FC7                     SSPSTAT         equ	4039	;# 
  1188   000FC8                     SSPADD          equ	4040	;# 
  1189   000FC9                     SSPBUF          equ	4041	;# 
  1190   000FCA                     T2CON           equ	4042	;# 
  1191   000FCB                     PR2             equ	4043	;# 
  1192   000FCB                     MEMCON          equ	4043	;# 
  1193   000FCC                     TMR2            equ	4044	;# 
  1194   000FCD                     T1CON           equ	4045	;# 
  1195   000FCE                     TMR1            equ	4046	;# 
  1196   000FCE                     TMR1L           equ	4046	;# 
  1197   000FCF                     TMR1H           equ	4047	;# 
  1198   000FD0                     RCON            equ	4048	;# 
  1199   000FD1                     WDTCON          equ	4049	;# 
  1200   000FD2                     HLVDCON         equ	4050	;# 
  1201   000FD2                     LVDCON          equ	4050	;# 
  1202   000FD3                     OSCCON          equ	4051	;# 
  1203   000FD5                     T0CON           equ	4053	;# 
  1204   000FD6                     TMR0            equ	4054	;# 
  1205   000FD6                     TMR0L           equ	4054	;# 
  1206   000FD7                     TMR0H           equ	4055	;# 
  1207   000FD8                     STATUS          equ	4056	;# 
  1208   000FD9                     FSR2            equ	4057	;# 
  1209   000FD9                     FSR2L           equ	4057	;# 
  1210   000FDA                     FSR2H           equ	4058	;# 
  1211   000FDB                     PLUSW2          equ	4059	;# 
  1212   000FDC                     PREINC2         equ	4060	;# 
  1213   000FDD                     POSTDEC2        equ	4061	;# 
  1214   000FDE                     POSTINC2        equ	4062	;# 
  1215   000FDF                     INDF2           equ	4063	;# 
  1216   000FE0                     BSR             equ	4064	;# 
  1217   000FE1                     FSR1            equ	4065	;# 
  1218   000FE1                     FSR1L           equ	4065	;# 
  1219   000FE2                     FSR1H           equ	4066	;# 
  1220   000FE3                     PLUSW1          equ	4067	;# 
  1221   000FE4                     PREINC1         equ	4068	;# 
  1222   000FE5                     POSTDEC1        equ	4069	;# 
  1223   000FE6                     POSTINC1        equ	4070	;# 
  1224   000FE7                     INDF1           equ	4071	;# 
  1225   000FE8                     WREG            equ	4072	;# 
  1226   000FE9                     FSR0            equ	4073	;# 
  1227   000FE9                     FSR0L           equ	4073	;# 
  1228   000FEA                     FSR0H           equ	4074	;# 
  1229   000FEB                     PLUSW0          equ	4075	;# 
  1230   000FEC                     PREINC0         equ	4076	;# 
  1231   000FED                     POSTDEC0        equ	4077	;# 
  1232   000FEE                     POSTINC0        equ	4078	;# 
  1233   000FEF                     INDF0           equ	4079	;# 
  1234   000FF0                     INTCON3         equ	4080	;# 
  1235   000FF1                     INTCON2         equ	4081	;# 
  1236   000FF2                     INTCON          equ	4082	;# 
  1237   000FF3                     PROD            equ	4083	;# 
  1238   000FF3                     PRODL           equ	4083	;# 
  1239   000FF4                     PRODH           equ	4084	;# 
  1240   000FF5                     TABLAT          equ	4085	;# 
  1241   000FF6                     TBLPTR          equ	4086	;# 
  1242   000FF6                     TBLPTRL         equ	4086	;# 
  1243   000FF7                     TBLPTRH         equ	4087	;# 
  1244   000FF8                     TBLPTRU         equ	4088	;# 
  1245   000FF9                     PCLAT           equ	4089	;# 
  1246   000FF9                     PC              equ	4089	;# 
  1247   000FF9                     PCL             equ	4089	;# 
  1248   000FFA                     PCLATH          equ	4090	;# 
  1249   000FFB                     PCLATU          equ	4091	;# 
  1250   000FFC                     STKPTR          equ	4092	;# 
  1251   000FFD                     TOS             equ	4093	;# 
  1252   000FFD                     TOSL            equ	4093	;# 
  1253   000FFE                     TOSH            equ	4094	;# 
  1254   000FFF                     TOSU            equ	4095	;# 
  1255                           
  1256                           	psect	idataCOMRAM
  1257   001D22                     __pidataCOMRAM:
  1258                           	callstack 0
  1259                           
  1260                           ;initializer for _currentTime
  1261   001D22  30                 	db	48
  1262   001D23  30                 	db	48
  1263   001D24  30                 	db	48
  1264   001D25  30                 	db	48
  1265                           
  1266                           ;initializer for motorTerminal@hour
  1267   001D26  30                 	db	48
  1268   001D27  30                 	db	48
  1269   001D28  30                 	db	48
  1270   001D29  30                 	db	48
  1271                           
  1272                           	psect	idataBANK0
  1273   0017DA                     __pidataBANK0:
  1274                           	callstack 0
  1275                           
  1276                           ;initializer for _userUIDs
  1277   0017DA  65                 	db	101
  1278   0017DB  DC                 	db	220
  1279   0017DC  F9                 	db	249
  1280   0017DD  03                 	db	3
  1281   0017DE  43                 	db	67
  1282   0017DF  00                 	db	0
  1283   0017E0  00                 	db	0
  1284   0017E1  00                 	db	0
  1285   0017E2  00                 	db	0
  1286   0017E3  00                 	db	0
  1287   0017E4  00                 	db	0
  1288   0017E5  00                 	db	0
  1289   0017E6  00                 	db	0
  1290   0017E7  00                 	db	0
  1291   0017E8  00                 	db	0
  1292   0017E9  00                 	db	0
  1293   0017EA  DC                 	db	220
  1294   0017EB  0D                 	db	13
  1295   0017EC  F9                 	db	249
  1296   0017ED  03                 	db	3
  1297   0017EE  2B                 	db	43
  1298   0017EF  00                 	db	0
  1299   0017F0  00                 	db	0
  1300   0017F1  00                 	db	0
  1301   0017F2  00                 	db	0
  1302   0017F3  00                 	db	0
  1303   0017F4  00                 	db	0
  1304   0017F5  00                 	db	0
  1305   0017F6  00                 	db	0
  1306   0017F7  00                 	db	0
  1307   0017F8  00                 	db	0
  1308   0017F9  00                 	db	0
  1309   0017FA  DF                 	db	223
  1310   0017FB  8B                 	db	139
  1311   0017FC  DF                 	db	223
  1312   0017FD  C4                 	db	196
  1313   0017FE  4F                 	db	79
  1314   0017FF  00                 	db	0
  1315   001800  00                 	db	0
  1316   001801  00                 	db	0
  1317   001802  00                 	db	0
  1318   001803  00                 	db	0
  1319   001804  00                 	db	0
  1320   001805  00                 	db	0
  1321   001806  00                 	db	0
  1322   001807  00                 	db	0
  1323   001808  00                 	db	0
  1324   001809  00                 	db	0
  1325   00180A  21                 	db	33
  1326   00180B  32                 	db	50
  1327   00180C  A9                 	db	169
  1328   00180D  89                 	db	137
  1329   00180E  33                 	db	51
  1330   00180F  00                 	db	0
  1331   001810  00                 	db	0
  1332   001811  00                 	db	0
  1333   001812  00                 	db	0
  1334   001813  00                 	db	0
  1335   001814  00                 	db	0
  1336   001815  00                 	db	0
  1337   001816  00                 	db	0
  1338   001817  00                 	db	0
  1339   001818  00                 	db	0
  1340   001819  00                 	db	0
  1341                           
  1342                           ;initializer for _configurations
  1343   00181A  01                 	db	1
  1344   00181B  01                 	db	1
  1345   00181C  01                 	db	1
  1346   00181D  01                 	db	1
  1347   00181E  01                 	db	1
  1348   00181F  01                 	db	1
  1349   001820  01                 	db	1
  1350   001821  01                 	db	1
  1351   001822  01                 	db	1
  1352   001823  01                 	db	1
  1353   001824  01                 	db	1
  1354   001825  01                 	db	1
  1355   001826  01                 	db	1
  1356   001827  01                 	db	1
  1357   001828  01                 	db	1
  1358   001829  01                 	db	1
  1359   00182A  01                 	db	1
  1360   00182B  01                 	db	1
  1361   00182C  01                 	db	1
  1362   00182D  01                 	db	1
  1363   00182E  01                 	db	1
  1364   00182F  01                 	db	1
  1365   001830  01                 	db	1
  1366   001831  01                 	db	1
  1367                           
  1368                           	psect	mediumconst
  1369   001EC4                     __pmediumconst:
  1370                           	callstack 0
  1371   001EC4  00                 	db	0
  1372   001EC5                     GetTecla@F2752:
  1373                           	callstack 0
  1374   001EC5  01                 	db	1
  1375   001EC6  02                 	db	2
  1376   001EC7  03                 	db	3
  1377   001EC8  04                 	db	4
  1378   001EC9  05                 	db	5
  1379   001ECA  06                 	db	6
  1380   001ECB  07                 	db	7
  1381   001ECC  08                 	db	8
  1382   001ECD  09                 	db	9
  1383   001ECE  0A                 	db	10
  1384   001ECF  00                 	db	0
  1385   001ED0  0B                 	db	11
  1386   001ED1                     __end_ofGetTecla@F2752:
  1387                           	callstack 0
  1388   007F92                     _TMR0IF         set	32658
  1389   000FD6                     _TMR0           set	4054
  1390   000F89                     _LATAbits       set	3977
  1391   000F96                     _TRISE          set	3990
  1392   000F92                     _TRISA          set	3986
  1393   000FAE                     _RCREG          set	4014
  1394   000FAD                     _TXREG          set	4013
  1395   000F9E                     _PIR1bits       set	3998
  1396   000FB8                     _BAUDCON        set	4024
  1397   000FAF                     _SPBRG          set	4015
  1398   000FAB                     _RCSTA          set	4011
  1399   000FAC                     _TXSTA          set	4012
  1400   000F8A                     _LATBbits       set	3978
  1401   000F93                     _TRISBbits      set	3987
  1402   000F82                     _PORTCbits      set	3970
  1403   000F8B                     _LATCbits       set	3979
  1404   000F94                     _TRISCbits      set	3988
  1405   000F8C                     _LATD           set	3980
  1406   000F95                     _TRISD          set	3989
  1407   000F83                     _PORTD          set	3971
  1408   000FD5                     _T0CON          set	4053
  1409   000F8B                     _LATC           set	3979
  1410   000F96                     _TRISEbits      set	3990
  1411   000FC1                     _ADCON1         set	4033
  1412   000F8D                     _LATEbits       set	3981
  1413   000FF2                     _INTCONbits     set	4082
  1414   001ED1                     STR_20:
  1415   001ED1  45                 	db	69	;'E'
  1416   001ED2  52                 	db	82	;'R'
  1417   001ED3  52                 	db	82	;'R'
  1418   001ED4  4F                 	db	79	;'O'
  1419   001ED5  52                 	db	82	;'R'
  1420   001ED6  2E                 	db	46
  1421   001ED7  20                 	db	32
  1422   001ED8  56                 	db	86	;'V'
  1423   001ED9  61                 	db	97	;'a'
  1424   001EDA  6C                 	db	108	;'l'
  1425   001EDB  6F                 	db	111	;'o'
  1426   001EDC  72                 	db	114	;'r'
  1427   001EDD  20                 	db	32
  1428   001EDE  69                 	db	105	;'i'
  1429   001EDF  6E                 	db	110	;'n'
  1430   001EE0  74                 	db	116	;'t'
  1431   001EE1  72                 	db	114	;'r'
  1432   001EE2  6F                 	db	111	;'o'
  1433   001EE3  64                 	db	100	;'d'
  1434   001EE4  75                 	db	117	;'u'
  1435   001EE5  69                 	db	105	;'i'
  1436   001EE6  74                 	db	116	;'t'
  1437   001EE7  20                 	db	32
  1438   001EE8  65                 	db	101	;'e'
  1439   001EE9  72                 	db	114	;'r'
  1440   001EEA  72                 	db	114	;'r'
  1441   001EEB  6F                 	db	111	;'o'
  1442   001EEC  6E                 	db	110	;'n'
  1443   001EED  69                 	db	105	;'i'
  1444   001EEE  2E                 	db	46
  1445   001EEF  0D                 	db	13
  1446   001EF0  0A                 	db	10
  1447   001EF1  00                 	db	0
  1448   001EF2                     STR_7:
  1449   001EF2  09                 	db	9
  1450   001EF3  33                 	db	51	;'3'
  1451   001EF4  2E                 	db	46
  1452   001EF5  20                 	db	32
  1453   001EF6  4D                 	db	77	;'M'
  1454   001EF7  6F                 	db	111	;'o'
  1455   001EF8  64                 	db	100	;'d'
  1456   001EF9  69                 	db	105	;'i'
  1457   001EFA  66                 	db	102	;'f'
  1458   001EFB  69                 	db	105	;'i'
  1459   001EFC  63                 	db	99	;'c'
  1460   001EFD  61                 	db	97	;'a'
  1461   001EFE  72                 	db	114	;'r'
  1462   001EFF  20                 	db	32
  1463   001F00  68                 	db	104	;'h'
  1464   001F01  6F                 	db	111	;'o'
  1465   001F02  72                 	db	114	;'r'
  1466   001F03  61                 	db	97	;'a'
  1467   001F04  20                 	db	32
  1468   001F05  64                 	db	100	;'d'
  1469   001F06  65                 	db	101	;'e'
  1470   001F07  6C                 	db	108	;'l'
  1471   001F08  20                 	db	32
  1472   001F09  73                 	db	115	;'s'
  1473   001F0A  69                 	db	105	;'i'
  1474   001F0B  73                 	db	115	;'s'
  1475   001F0C  74                 	db	116	;'t'
  1476   001F0D  65                 	db	101	;'e'
  1477   001F0E  6D                 	db	109	;'m'
  1478   001F0F  61                 	db	97	;'a'
  1479   001F10  0D                 	db	13
  1480   001F11  0A                 	db	10
  1481   001F12  00                 	db	0
  1482   001F13                     STR_21:
  1483   001F13  0D                 	db	13
  1484   001F14  0A                 	db	10
  1485   001F15  48                 	db	72	;'H'
  1486   001F16  6F                 	db	111	;'o'
  1487   001F17  72                 	db	114	;'r'
  1488   001F18  61                 	db	97	;'a'
  1489   001F19  20                 	db	32
  1490   001F1A  69                 	db	105	;'i'
  1491   001F1B  6E                 	db	110	;'n'
  1492   001F1C  74                 	db	116	;'t'
  1493   001F1D  72                 	db	114	;'r'
  1494   001F1E  6F                 	db	111	;'o'
  1495   001F1F  64                 	db	100	;'d'
  1496   001F20  75                 	db	117	;'u'
  1497   001F21  69                 	db	105	;'i'
  1498   001F22  64                 	db	100	;'d'
  1499   001F23  61                 	db	97	;'a'
  1500   001F24  20                 	db	32
  1501   001F25  63                 	db	99	;'c'
  1502   001F26  6F                 	db	111	;'o'
  1503   001F27  72                 	db	114	;'r'
  1504   001F28  72                 	db	114	;'r'
  1505   001F29  65                 	db	101	;'e'
  1506   001F2A  63                 	db	99	;'c'
  1507   001F2B  74                 	db	116	;'t'
  1508   001F2C  61                 	db	97	;'a'
  1509   001F2D  6D                 	db	109	;'m'
  1510   001F2E  65                 	db	101	;'e'
  1511   001F2F  6E                 	db	110	;'n'
  1512   001F30  74                 	db	116	;'t'
  1513   001F31  0D                 	db	13
  1514   001F32  0A                 	db	10
  1515   001F33  00                 	db	0
  1516   001F34                     STR_19:
  1517   001F34  49                 	db	73	;'I'
  1518   001F35  6E                 	db	110	;'n'
  1519   001F36  74                 	db	116	;'t'
  1520   001F37  72                 	db	114	;'r'
  1521   001F38  6F                 	db	111	;'o'
  1522   001F39  64                 	db	100	;'d'
  1523   001F3A  75                 	db	117	;'u'
  1524   001F3B  63                 	db	99	;'c'
  1525   001F3C  65                 	db	101	;'e'
  1526   001F3D  20                 	db	32
  1527   001F3E  6C                 	db	108	;'l'
  1528   001F3F  61                 	db	97	;'a'
  1529   001F40  20                 	db	32
  1530   001F41  68                 	db	104	;'h'
  1531   001F42  6F                 	db	111	;'o'
  1532   001F43  72                 	db	114	;'r'
  1533   001F44  61                 	db	97	;'a'
  1534   001F45  20                 	db	32
  1535   001F46  61                 	db	97	;'a'
  1536   001F47  63                 	db	99	;'c'
  1537   001F48  74                 	db	116	;'t'
  1538   001F49  75                 	db	117	;'u'
  1539   001F4A  61                 	db	97	;'a'
  1540   001F4B  6C                 	db	108	;'l'
  1541   001F4C  28                 	db	40
  1542   001F4D  48                 	db	72	;'H'
  1543   001F4E  48                 	db	72	;'H'
  1544   001F4F  4D                 	db	77	;'M'
  1545   001F50  4D                 	db	77	;'M'
  1546   001F51  29                 	db	41
  1547   001F52  3A                 	db	58	;':'
  1548   001F53  20                 	db	32
  1549   001F54  00                 	db	0
  1550   001F55                     STR_6:
  1551   001F55  09                 	db	9
  1552   001F56  32                 	db	50	;'2'
  1553   001F57  2E                 	db	46
  1554   001F58  20                 	db	32
  1555   001F59  4D                 	db	77	;'M'
  1556   001F5A  6F                 	db	111	;'o'
  1557   001F5B  73                 	db	115	;'s'
  1558   001F5C  74                 	db	116	;'t'
  1559   001F5D  72                 	db	114	;'r'
  1560   001F5E  61                 	db	97	;'a'
  1561   001F5F  72                 	db	114	;'r'
  1562   001F60  20                 	db	32
  1563   001F61  63                 	db	99	;'c'
  1564   001F62  6F                 	db	111	;'o'
  1565   001F63  6E                 	db	110	;'n'
  1566   001F64  66                 	db	102	;'f'
  1567   001F65  69                 	db	105	;'i'
  1568   001F66  67                 	db	103	;'g'
  1569   001F67  75                 	db	117	;'u'
  1570   001F68  72                 	db	114	;'r'
  1571   001F69  61                 	db	97	;'a'
  1572   001F6A  63                 	db	99	;'c'
  1573   001F6B  69                 	db	105	;'i'
  1574   001F6C  6F                 	db	111	;'o'
  1575   001F6D  6E                 	db	110	;'n'
  1576   001F6E  73                 	db	115	;'s'
  1577   001F6F  0D                 	db	13
  1578   001F70  0A                 	db	10
  1579   001F71  00                 	db	0
  1580   001F72                     STR_5:
  1581   001F72  09                 	db	9
  1582   001F73  31                 	db	49	;'1'
  1583   001F74  2E                 	db	46
  1584   001F75  20                 	db	32
  1585   001F76  51                 	db	81	;'Q'
  1586   001F77  75                 	db	117	;'u'
  1587   001F78  69                 	db	105	;'i'
  1588   001F79  20                 	db	32
  1589   001F7A  68                 	db	104	;'h'
  1590   001F7B  69                 	db	105	;'i'
  1591   001F7C  20                 	db	32
  1592   001F7D  68                 	db	104	;'h'
  1593   001F7E  61                 	db	97	;'a'
  1594   001F7F  20                 	db	32
  1595   001F80  61                 	db	97	;'a'
  1596   001F81  20                 	db	32
  1597   001F82  6C                 	db	108	;'l'
  1598   001F83  61                 	db	97	;'a'
  1599   001F84  20                 	db	32
  1600   001F85  73                 	db	115	;'s'
  1601   001F86  61                 	db	97	;'a'
  1602   001F87  6C                 	db	108	;'l'
  1603   001F88  61                 	db	97	;'a'
  1604   001F89  3F                 	db	63	;'?'
  1605   001F8A  0D                 	db	13
  1606   001F8B  0A                 	db	10
  1607   001F8C  00                 	db	0
  1608   001F8D                     STR_26:
  1609   001F8D  54                 	db	84	;'T'
  1610   001F8E  61                 	db	97	;'a'
  1611   001F8F  72                 	db	114	;'r'
  1612   001F90  67                 	db	103	;'g'
  1613   001F91  65                 	db	101	;'e'
  1614   001F92  74                 	db	116	;'t'
  1615   001F93  61                 	db	97	;'a'
  1616   001F94  20                 	db	32
  1617   001F95  64                 	db	100	;'d'
  1618   001F96  65                 	db	101	;'e'
  1619   001F97  74                 	db	116	;'t'
  1620   001F98  65                 	db	101	;'e'
  1621   001F99  63                 	db	99	;'c'
  1622   001F9A  74                 	db	116	;'t'
  1623   001F9B  61                 	db	97	;'a'
  1624   001F9C  64                 	db	100	;'d'
  1625   001F9D  61                 	db	97	;'a'
  1626   001F9E  21                 	db	33
  1627   001F9F  0D                 	db	13
  1628   001FA0  0A                 	db	10
  1629   001FA1  09                 	db	9
  1630   001FA2  00                 	db	0
  1631   001FA3                     STR_4:
  1632   001FA3  54                 	db	84	;'T'
  1633   001FA4  72                 	db	114	;'r'
  1634   001FA5  69                 	db	105	;'i'
  1635   001FA6  61                 	db	97	;'a'
  1636   001FA7  20                 	db	32
  1637   001FA8  75                 	db	117	;'u'
  1638   001FA9  6E                 	db	110	;'n'
  1639   001FAA  61                 	db	97	;'a'
  1640   001FAB  20                 	db	32
  1641   001FAC  6F                 	db	111	;'o'
  1642   001FAD  70                 	db	112	;'p'
  1643   001FAE  63                 	db	99	;'c'
  1644   001FAF  69                 	db	105	;'i'
  1645   001FB0  C3                 	db	-61
  1646   001FB1  B3                 	db	-77
  1647   001FB2  3A                 	db	58	;':'
  1648   001FB3  0D                 	db	13
  1649   001FB4  0A                 	db	10
  1650   001FB5  00                 	db	0
  1651   001FB6                     STR_1:
  1652   001FB6  2D                 	db	45
  1653   001FB7  2D                 	db	45
  1654   001FB8  2D                 	db	45
  1655   001FB9  2D                 	db	45
  1656   001FBA  2D                 	db	45
  1657   001FBB  2D                 	db	45
  1658   001FBC  2D                 	db	45
  1659   001FBD  2D                 	db	45
  1660   001FBE  2D                 	db	45
  1661   001FBF  2D                 	db	45
  1662   001FC0  2D                 	db	45
  1663   001FC1  2D                 	db	45
  1664   001FC2  2D                 	db	45
  1665   001FC3  2D                 	db	45
  1666   001FC4  2D                 	db	45
  1667   001FC5  0D                 	db	13
  1668   001FC6  0A                 	db	10
  1669   001FC7  00                 	db	0
  1670   001FC8                     STR_2:
  1671   001FC8  4D                 	db	77	;'M'
  1672   001FC9  65                 	db	101	;'e'
  1673   001FCA  6E                 	db	110	;'n'
  1674   001FCB  C3                 	db	-61
  1675   001FCC  BA                 	db	-70
  1676   001FCD  20                 	db	32
  1677   001FCE  70                 	db	112	;'p'
  1678   001FCF  72                 	db	114	;'r'
  1679   001FD0  69                 	db	105	;'i'
  1680   001FD1  6E                 	db	110	;'n'
  1681   001FD2  63                 	db	99	;'c'
  1682   001FD3  69                 	db	105	;'i'
  1683   001FD4  70                 	db	112	;'p'
  1684   001FD5  61                 	db	97	;'a'
  1685   001FD6  6C                 	db	108	;'l'
  1686   001FD7  0D                 	db	13
  1687   001FD8  0A                 	db	10
  1688   001FD9  00                 	db	0
  1689   001FDA                     STR_23:
  1690   001FDA  20                 	db	32
  1691   001FDB  43                 	db	67	;'C'
  1692   001FDC  6F                 	db	111	;'o'
  1693   001FDD  6E                 	db	110	;'n'
  1694   001FDE  66                 	db	102	;'f'
  1695   001FDF  69                 	db	105	;'i'
  1696   001FE0  67                 	db	103	;'g'
  1697   001FE1  3A                 	db	58	;':'
  1698   001FE2  20                 	db	32
  1699   001FE3  00                 	db	0
  1700   001FE4                     STR_8:
  1701   001FE4  4F                 	db	79	;'O'
  1702   001FE5  70                 	db	112	;'p'
  1703   001FE6  63                 	db	99	;'c'
  1704   001FE7  69                 	db	105	;'i'
  1705   001FE8  C3                 	db	-61
  1706   001FE9  B3                 	db	-77
  1707   001FEA  3A                 	db	58	;':'
  1708   001FEB  20                 	db	32
  1709   001FEC  00                 	db	0
  1710   001FED                     STR_22:
  1711   001FED  55                 	db	85	;'U'
  1712   001FEE  73                 	db	115	;'s'
  1713   001FEF  65                 	db	101	;'e'
  1714   001FF0  72                 	db	114	;'r'
  1715   001FF1  20                 	db	32
  1716   001FF2  00                 	db	0
  1717   001FF3                     STR_9:
  1718   001FF3  55                 	db	85	;'U'
  1719   001FF4  49                 	db	73	;'I'
  1720   001FF5  44                 	db	68	;'D'
  1721   001FF6  3A                 	db	58	;':'
  1722   001FF7  20                 	db	32
  1723   001FF8  00                 	db	0
  1724   001FF9                     STR_13:
  1725   001FF9  20                 	db	32
  1726   001FFA  2D                 	db	45
  1727   001FFB  20                 	db	32
  1728   001FFC  00                 	db	0
  1729   001FFD                     STR_10:
  1730   001FFD  2D                 	db	45
  1731   001FFE  00                 	db	0
  1732   001FEA                     STR_12          equ	STR_8+6
  1733   001FFB                     STR_24          equ	STR_13+2
  1734   001FB6                     STR_3           equ	STR_1
  1735   001FC5                     STR_11          equ	STR_1+15
  1736   001FC5                     STR_14          equ	STR_1+15
  1737   001FC5                     STR_15          equ	STR_1+15
  1738   001FC5                     STR_16          equ	STR_1+15
  1739   001FC5                     STR_17          equ	STR_1+15
  1740   001FC5                     STR_18          equ	STR_1+15
  1741   001FC5                     STR_25          equ	STR_1+15
  1742   001FA1                     STR_27          equ	STR_26+20
  1743   001FFF  00                 	db	0	; dummy byte at the end
  1744   001EC4                     __smallconst    set	__pmediumconst
  1745   001EC4                     __mediumconst   set	__pmediumconst
  1746   000002                     __activetblptr  equ	2
  1747                           
  1748                           ; #config settings
  1749                           
  1750                           	psect	cinit
  1751   0016B8                     __pcinit:
  1752                           	callstack 0
  1753   0016B8                     start_initialization:
  1754                           	callstack 0
  1755   0016B8                     __initialization:
  1756                           	callstack 0
  1757                           
  1758                           ; Initialize objects allocated to BANK0 (88 bytes)
  1759                           ; load TBLPTR registers with __pidataBANK0
  1760   0016B8  0EDA               	movlw	low __pidataBANK0
  1761   0016BA  6EF6               	movwf	tblptrl,c
  1762   0016BC  0E17               	movlw	high __pidataBANK0
  1763   0016BE  6EF7               	movwf	tblptrh,c
  1764   0016C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1765   0016C2  6EF8               	movwf	tblptru,c
  1766   0016C4  EE00  F080         	lfsr	0,__pdataBANK0
  1767   0016C8  EE10 F058          	lfsr	1,88
  1768   0016CC                     copy_data0:
  1769   0016CC  0009               	tblrd		*+
  1770   0016CE  CFF5 FFEE          	movff	tablat,postinc0
  1771   0016D2  50E5               	movf	postdec1,w,c
  1772   0016D4  50E1               	movf	fsr1l,w,c
  1773   0016D6  E1FA               	bnz	copy_data0
  1774                           
  1775                           ; Initialize objects allocated to COMRAM (8 bytes)
  1776                           ; load TBLPTR registers with __pidataCOMRAM
  1777   0016D8  0E22               	movlw	low __pidataCOMRAM
  1778   0016DA  6EF6               	movwf	tblptrl,c
  1779   0016DC  0E1D               	movlw	high __pidataCOMRAM
  1780   0016DE  6EF7               	movwf	tblptrh,c
  1781   0016E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1782   0016E2  6EF8               	movwf	tblptru,c
  1783   0016E4  EE00  F064         	lfsr	0,__pdataCOMRAM
  1784   0016E8  EE10 F008          	lfsr	1,8
  1785   0016EC                     copy_data1:
  1786   0016EC  0009               	tblrd		*+
  1787   0016EE  CFF5 FFEE          	movff	tablat,postinc0
  1788   0016F2  50E5               	movf	postdec1,w,c
  1789   0016F4  50E1               	movf	fsr1l,w,c
  1790   0016F6  E1FA               	bnz	copy_data1
  1791                           
  1792                           ; Clear objects allocated to BANK0 (20 bytes)
  1793   0016F8  EE00  F0D8         	lfsr	0,__pbssBANK0
  1794   0016FC  0E14               	movlw	20
  1795   0016FE                     clear_0:
  1796   0016FE  6AEE               	clrf	postinc0,c
  1797   001700  06E8               	decf	wreg,f,c
  1798   001702  E1FD               	bnz	clear_0
  1799                           
  1800                           ; Clear objects allocated to COMRAM (69 bytes)
  1801   001704  EE00  F001         	lfsr	0,__pbssCOMRAM
  1802   001708  0E45               	movlw	69
  1803   00170A                     clear_1:
  1804   00170A  6AEE               	clrf	postinc0,c
  1805   00170C  06E8               	decf	wreg,f,c
  1806   00170E  E1FD               	bnz	clear_1
  1807   001710                     end_of_initialization:
  1808                           	callstack 0
  1809   001710                     __end_of__initialization:
  1810                           	callstack 0
  1811   001710  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1812   001712  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1813   001714  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1814   001716  6EF8               	movwf	tblptru,c
  1815   001718  0100               	movlb	0
  1816   00171A  EF1B  F00D         	goto	_main	;jump to C main() function
  1817                           
  1818                           	psect	bssCOMRAM
  1819   000001                     __pbssCOMRAM:
  1820                           	callstack 0
  1821   000001                     motor_RFID@UID:
  1822                           	callstack 0
  1823   000001                     	ds	6
  1824   000007                     _Tics:
  1825                           	callstack 0
  1826   000007                     	ds	4
  1827   00000B                     _pointer:
  1828                           	callstack 0
  1829   00000B                     	ds	2
  1830   00000D                     _index:
  1831                           	callstack 0
  1832   00000D                     	ds	2
  1833   00000F                     	ds	2
  1834   000011                     setLed@userIndex:
  1835                           	callstack 0
  1836   000011                     	ds	1
  1837   000012                     setLed@ledIndex:
  1838                           	callstack 0
  1839   000012                     	ds	1
  1840   000013                     setLed@modeLED:
  1841                           	callstack 0
  1842   000013                     	ds	1
  1843   000014                     motor_datos@pointer:
  1844                           	callstack 0
  1845   000014                     	ds	1
  1846   000015                     motor_datos@state:
  1847                           	callstack 0
  1848   000015                     	ds	1
  1849   000016                     _new_user:
  1850                           	callstack 0
  1851   000016                     	ds	1
  1852   000017                     _new_configuration:
  1853                           	callstack 0
  1854   000017                     	ds	1
  1855   000018                     motorTerminal@index:
  1856                           	callstack 0
  1857   000018                     	ds	1
  1858   000019                     motorTerminal@state:
  1859                           	callstack 0
  1860   000019                     	ds	1
  1861   00001A                     _hashtag_pressed:
  1862                           	callstack 0
  1863   00001A                     	ds	1
  1864   00001B                     _ColumnAct:
  1865                           	callstack 0
  1866   00001B                     	ds	1
  1867   00001C                     _RowAct:
  1868                           	callstack 0
  1869   00001C                     	ds	1
  1870   00001D                     _Columns:
  1871                           	callstack 0
  1872   00001D                     	ds	1
  1873   00001E                     _Rows:
  1874                           	callstack 0
  1875   00001E                     	ds	1
  1876   00001F                     motor_RFID@fifoLevel:
  1877                           	callstack 0
  1878   00001F                     	ds	1
  1879   000020                     motor_RFID@lastBitsVal:
  1880                           	callstack 0
  1881   000020                     	ds	1
  1882   000021                     motor_RFID@tempRegValue:
  1883                           	callstack 0
  1884   000021                     	ds	1
  1885   000022                     motor_RFID@allZero:
  1886                           	callstack 0
  1887   000022                     	ds	1
  1888   000023                     motor_RFID@checksum:
  1889                           	callstack 0
  1890   000023                     	ds	1
  1891   000024                     motor_RFID@TagType:
  1892                           	callstack 0
  1893   000024                     	ds	1
  1894   000025                     	ds	1
  1895   000026                     motor_RFID@i:
  1896                           	callstack 0
  1897   000026                     	ds	1
  1898   000027                     motor_RFID@n:
  1899                           	callstack 0
  1900   000027                     	ds	1
  1901   000028                     motor_RFID@waitIRq:
  1902                           	callstack 0
  1903   000028                     	ds	1
  1904   000029                     motor_RFID@irqEn:
  1905                           	callstack 0
  1906   000029                     	ds	1
  1907   00002A                     motor_RFID@substate:
  1908                           	callstack 0
  1909   00002A                     	ds	1
  1910   00002B                     motor_RFID@state:
  1911                           	callstack 0
  1912   00002B                     	ds	1
  1913   00002C                     motor_Read@ucResult:
  1914                           	callstack 0
  1915   00002C                     	ds	1
  1916   00002D                     motor_Read@ucAddr:
  1917                           	callstack 0
  1918   00002D                     	ds	1
  1919   00002E                     motor_Read@bit_count:
  1920                           	callstack 0
  1921   00002E                     	ds	1
  1922   00002F                     motor_Read@state_read:
  1923                           	callstack 0
  1924   00002F                     	ds	1
  1925   000030                     motor_Write@bit_count:
  1926                           	callstack 0
  1927   000030                     	ds	1
  1928   000031                     motor_Write@ucValue:
  1929                           	callstack 0
  1930   000031                     	ds	1
  1931   000032                     motor_Write@ucAddr:
  1932                           	callstack 0
  1933   000032                     	ds	1
  1934   000033                     motor_Write@state_write:
  1935                           	callstack 0
  1936   000033                     	ds	1
  1937   000034                     _state:
  1938                           	callstack 0
  1939   000034                     	ds	1
  1940   000035                     _tecla:
  1941                           	callstack 0
  1942   000035                     	ds	1
  1943   000036                     _Columnas:
  1944                           	callstack 0
  1945   000036                     	ds	1
  1946   000037                     _Filas:
  1947                           	callstack 0
  1948   000037                     	ds	1
  1949   000038                     _ActualLeds:
  1950                           	callstack 0
  1951   000038                     	ds	6
  1952   00003E                     _currentUser:
  1953                           	callstack 0
  1954   00003E                     	ds	5
  1955   000043                     _timer@TAD_LEDS$F989:
  1956                           	callstack 0
  1957   000043                     	ds	1
  1958   000044                     _Timer:
  1959                           	callstack 0
  1960   000044                     	ds	1
  1961   000045                     _timer:
  1962                           	callstack 0
  1963   000045                     	ds	1
  1964                           
  1965                           	psect	dataCOMRAM
  1966   000064                     __pdataCOMRAM:
  1967                           	callstack 0
  1968   000064                     _currentTime:
  1969                           	callstack 0
  1970   000064                     	ds	4
  1971   000068                     motorTerminal@hour:
  1972                           	callstack 0
  1973   000068                     	ds	4
  1974                           
  1975                           	psect	bssBANK0
  1976   0000D8                     __pbssBANK0:
  1977                           	callstack 0
  1978   0000D8                     _Timers:
  1979                           	callstack 0
  1980   0000D8                     	ds	20
  1981                           
  1982                           	psect	dataBANK0
  1983   000080                     __pdataBANK0:
  1984                           	callstack 0
  1985   000080                     _userUIDs:
  1986                           	callstack 0
  1987   000080                     	ds	64
  1988   0000C0                     _configurations:
  1989                           	callstack 0
  1990   0000C0                     	ds	24
  1991                           
  1992                           	psect	cstackCOMRAM
  1993   000046                     __pcstackCOMRAM:
  1994                           	callstack 0
  1995   000046                     ??_LowRSI:
  1996                           
  1997                           ; 1 bytes @ 0x0
  1998   000046                     	ds	1
  1999   000047                     ?_Terminal_TXAvailable:
  2000                           	callstack 0
  2001   000047                     ?_TI_GetTics:
  2002                           	callstack 0
  2003   000047                     TI_Init@counter:
  2004                           	callstack 0
  2005   000047                     TI_NewTimer@TimerHandle:
  2006                           	callstack 0
  2007   000047                     TI_ResetTics@TimerHandle:
  2008                           	callstack 0
  2009   000047                     saveHourToData@hour:
  2010                           	callstack 0
  2011   000047                     setLEDIntensity@ledIndex:
  2012                           	callstack 0
  2013   000047                     ??_GetTecla:
  2014   000047                     ??_EscriuPrimeraOrdre:
  2015   000047                     ??_delay_us:
  2016   000047                     ??_CantaPartAlta:
  2017   000047                     ??_CantaPartBaixa:
  2018   000047                     
  2019                           ; 1 bytes @ 0x1
  2020   000047                     	ds	1
  2021   000048                     CantaPartAlta@c:
  2022                           	callstack 0
  2023   000048                     CantaPartBaixa@c:
  2024                           	callstack 0
  2025   000048                     EscriuPrimeraOrdre@ordre:
  2026                           	callstack 0
  2027   000048                     setLEDIntensity@intensity:
  2028                           	callstack 0
  2029   000048                     
  2030                           ; 1 bytes @ 0x2
  2031   000048                     	ds	1
  2032   000049                     TI_NewTimer@Comptador:
  2033                           	callstack 0
  2034   000049                     CantaIR@IR:
  2035                           	callstack 0
  2036   000049                     setLEDIntensity@userIndex:
  2037                           	callstack 0
  2038   000049                     GetTecla@keymap:
  2039                           	callstack 0
  2040   000049                     ??_Terminal_TXAvailable:
  2041   000049                     
  2042                           ; 1 bytes @ 0x3
  2043   000049                     	ds	1
  2044   00004A                     delay_us@howMany:
  2045                           	callstack 0
  2046   00004A                     Terminal_SendChar@c:
  2047                           	callstack 0
  2048   00004A                     setLed@tecla:
  2049                           	callstack 0
  2050   00004A                     
  2051                           ; 1 bytes @ 0x4
  2052   00004A                     	ds	1
  2053   00004B                     delay_us@x:
  2054                           	callstack 0
  2055   00004B                     Terminal_SendString@str:
  2056                           	callstack 0
  2057   00004B                     ??_TI_GetTics:
  2058                           
  2059                           ; 1 bytes @ 0x5
  2060   00004B                     	ds	1
  2061   00004C                     motor_Write@value:
  2062                           	callstack 0
  2063   00004C                     ??_MFRC522_Rd:
  2064   00004C                     ??_motor_Read:
  2065                           
  2066                           ; 1 bytes @ 0x6
  2067   00004C                     	ds	1
  2068   00004D                     MFRC522_Rd@Address:
  2069                           	callstack 0
  2070   00004D                     motor_Read@addr:
  2071                           	callstack 0
  2072   00004D                     printfUID@currentUser:
  2073                           	callstack 0
  2074   00004D                     printLedConfig@leds:
  2075                           	callstack 0
  2076   00004D                     showAllConfigurations@j:
  2077                           	callstack 0
  2078   00004D                     ??_motor_Write:
  2079   00004D                     
  2080                           ; 1 bytes @ 0x7
  2081   00004D                     	ds	1
  2082   00004E                     MFRC522_Rd@ucAddr:
  2083                           	callstack 0
  2084   00004E                     motor_Write@addr:
  2085                           	callstack 0
  2086   00004E                     _printLedConfig$867:
  2087                           	callstack 0
  2088   00004E                     ??_printfUID:
  2089   00004E                     
  2090                           ; 1 bytes @ 0x8
  2091   00004E                     	ds	1
  2092   00004F                     MFRC522_Rd@ucResult:
  2093                           	callstack 0
  2094   00004F                     _printfUID$857:
  2095                           	callstack 0
  2096   00004F                     showAllConfigurations@i:
  2097                           	callstack 0
  2098   00004F                     TI_GetTics@CopiaTicsActual:
  2099                           	callstack 0
  2100                           
  2101                           ; 4 bytes @ 0x9
  2102   00004F                     	ds	1
  2103   000050                     MFRC522_Rd@i:
  2104                           	callstack 0
  2105   000050                     printLedConfig@val:
  2106                           	callstack 0
  2107                           
  2108                           ; 1 bytes @ 0xA
  2109   000050                     	ds	1
  2110   000051                     MFRC522_Wr@value:
  2111                           	callstack 0
  2112   000051                     _printfUID$859:
  2113                           	callstack 0
  2114   000051                     printLedConfig@i:
  2115                           	callstack 0
  2116                           
  2117                           ; 2 bytes @ 0xB
  2118   000051                     	ds	1
  2119   000052                     ??_MFRC522_Wr:
  2120                           
  2121                           ; 1 bytes @ 0xC
  2122   000052                     	ds	1
  2123   000053                     TI_GetTics@TimerHandle:
  2124                           	callstack 0
  2125   000053                     MFRC522_Wr@Address:
  2126                           	callstack 0
  2127   000053                     printfUID@high:
  2128                           	callstack 0
  2129                           
  2130                           ; 1 bytes @ 0xD
  2131   000053                     	ds	1
  2132   000054                     MFRC522_Wr@ucAddr:
  2133                           	callstack 0
  2134   000054                     printfUID@low:
  2135                           	callstack 0
  2136   000054                     Espera@Timer:
  2137                           	callstack 0
  2138                           
  2139                           ; 2 bytes @ 0xE
  2140   000054                     	ds	1
  2141   000055                     GetTecla@columna:
  2142                           	callstack 0
  2143   000055                     MFRC522_Wr@i:
  2144                           	callstack 0
  2145   000055                     printfUID@i:
  2146                           	callstack 0
  2147                           
  2148                           ; 2 bytes @ 0xF
  2149   000055                     	ds	1
  2150   000056                     GetTecla@fila:
  2151                           	callstack 0
  2152   000056                     MFRC522_Clear_Bit@mask:
  2153                           	callstack 0
  2154   000056                     MFRC522_Set_Bit@mask:
  2155                           	callstack 0
  2156   000056                     Espera@ms:
  2157                           	callstack 0
  2158   000056                     
  2159                           ; 1 bytes @ 0x10
  2160   000056                     	ds	1
  2161   000057                     MFRC522_Set_Bit@addr:
  2162                           	callstack 0
  2163   000057                     motorTerminal@currentUser:
  2164                           	callstack 0
  2165   000057                     setCurrentUser@UID1:
  2166                           	callstack 0
  2167   000057                     ??_MFRC522_Clear_Bit:
  2168   000057                     
  2169                           ; 1 bytes @ 0x11
  2170   000057                     	ds	1
  2171   000058                     MFRC522_Clear_Bit@addr:
  2172                           	callstack 0
  2173   000058                     setCurrentUser@UID2:
  2174                           	callstack 0
  2175   000058                     ??_Espera:
  2176   000058                     
  2177                           ; 1 bytes @ 0x12
  2178   000058                     	ds	1
  2179   000059                     setCurrentUser@UID3:
  2180                           	callstack 0
  2181   000059                     
  2182                           ; 1 bytes @ 0x13
  2183   000059                     	ds	1
  2184   00005A                     setCurrentUser@UID4:
  2185                           	callstack 0
  2186                           
  2187                           ; 1 bytes @ 0x14
  2188   00005A                     	ds	1
  2189   00005B                     setCurrentUser@UID0:
  2190                           	callstack 0
  2191   00005B                     
  2192                           ; 1 bytes @ 0x15
  2193   00005B                     	ds	1
  2194   00005C                     LcInit@columns:
  2195                           	callstack 0
  2196   00005C                     ??_motor_RFID:
  2197   00005C                     
  2198                           ; 1 bytes @ 0x16
  2199   00005C                     	ds	1
  2200   00005D                     LcInit@rows:
  2201                           	callstack 0
  2202   00005D                     
  2203                           ; 1 bytes @ 0x17
  2204   00005D                     	ds	1
  2205   00005E                     motor_RFID@currentUser:
  2206                           	callstack 0
  2207   00005E                     LcInit@i:
  2208                           	callstack 0
  2209                           
  2210                           ; 2 bytes @ 0x18
  2211   00005E                     	ds	1
  2212   00005F                     motor_RFID@backBitsCalc:
  2213                           	callstack 0
  2214                           
  2215                           ; 1 bytes @ 0x19
  2216   00005F                     	ds	1
  2217   000060                     motor_RFID@differentUID:
  2218                           	callstack 0
  2219                           
  2220                           ; 1 bytes @ 0x1A
  2221   000060                     	ds	1
  2222   000061                     motor_RFID@i_581:
  2223                           	callstack 0
  2224                           
  2225                           ; 2 bytes @ 0x1B
  2226   000061                     	ds	2
  2227   000063                     motor_RFID@flag:
  2228                           	callstack 0
  2229                           
  2230                           ; 1 bytes @ 0x1D
  2231   000063                     	ds	1
  2232   000064                     
  2233                           ; 1 bytes @ 0x1E
  2234 ;;
  2235 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2236 ;;
  2237 ;; *************** function _main *****************
  2238 ;; Defined at:
  2239 ;;		line 39 in file "main.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1
  2253 ;;      Params:         0       0       0
  2254 ;;      Locals:         0       0       0
  2255 ;;      Temps:          0       0       0
  2256 ;;      Totals:         0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels required when called: 9
  2259 ;; This function calls:
  2260 ;;		_LcInit
  2261 ;;		_TI_Init
  2262 ;;		_Terminal_Init
  2263 ;;		_initLeds
  2264 ;;		_initPorts
  2265 ;;		_initRFID
  2266 ;;		_initTeclado
  2267 ;;		_motorTeclado
  2268 ;;		_motorTerminal
  2269 ;;		_motor_RFID
  2270 ;; This function is called by:
  2271 ;;		Startup code after reset
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text0
  2276   001A36                     __ptext0:
  2277                           	callstack 0
  2278   001A36                     _main:
  2279                           	callstack 22
  2280   001A36                     
  2281                           ;main.c: 40:  TRISEbits.TRISE2 = 0;
  2282   001A36  ECA7  F00D         	call	_TI_Init	;wreg free
  2283                           
  2284                           ;main.c: 41: }
  2285   001A3A  EC37  F00E         	call	_initTeclado	;wreg free
  2286   001A3E                     
  2287                           ;main.c: 42: 
  2288   001A3E  EC8C  F00E         	call	_initRFID	;wreg free
  2289   001A42                     
  2290                           ;main.c: 43: 
  2291   001A42  EC6B  F00E         	call	_Terminal_Init	;wreg free
  2292   001A46                     
  2293                           ;main.c: 44: 
  2294   001A46  EC99  F00E         	call	_initPorts	;wreg free
  2295   001A4A                     
  2296                           ;main.c: 45: void ProcessKey(unsigned char key) {
  2297   001A4A  EC73  F00E         	call	_initLeds	;wreg free
  2298   001A4E                     
  2299                           ;main.c: 46: 
  2300   001A4E  0E10               	movlw	16
  2301   001A50  6E5C               	movwf	LcInit@columns^0,c
  2302   001A52  0E02               	movlw	2
  2303   001A54  EC07  F007         	call	_LcInit
  2304   001A58  8EF2               	bsf	242,7,c	;volatile
  2305   001A5A  9CF2               	bcf	242,6,c	;volatile
  2306   001A5C                     l4102:
  2307   001A5C  EC6A  F004         	call	_motorTeclado	;wreg free
  2308   001A60  EC49  F006         	call	_motorTerminal	;wreg free
  2309   001A64  EC15  F000         	call	_motor_RFID	;wreg free
  2310   001A68  748D               	btg	141,2,c	;volatile
  2311   001A6A  EF2E  F00D         	goto	l4102
  2312   001A6E  EF13  F000         	goto	start
  2313   001A72                     __end_of_main:
  2314                           	callstack 0
  2315                           
  2316 ;; *************** function _motor_RFID *****************
  2317 ;; Defined at:
  2318 ;;		line 240 in file "TAD_RFID.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  i               2   27[COMRAM] int 
  2323 ;;  differentUID    1   26[COMRAM] unsigned char 
  2324 ;;  currentUser     1   24[COMRAM] PTR unsigned char 
  2325 ;;		 -> NULL(0), currentUser(5), 
  2326 ;;  flag            1   29[COMRAM] unsigned char 
  2327 ;;  backBitsCalc    1   25[COMRAM] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1
  2337 ;;      Params:         0       0       0
  2338 ;;      Locals:         6       0       0
  2339 ;;      Temps:          2       0       0
  2340 ;;      Totals:         8       0       0
  2341 ;;Total ram usage:        8 bytes
  2342 ;; Hardware stack levels used: 1
  2343 ;; Hardware stack levels required when called: 8
  2344 ;; This function calls:
  2345 ;;		_MFRC522_Rd
  2346 ;;		_getActualUID
  2347 ;;		_motor_Read
  2348 ;;		_motor_Write
  2349 ;;		_setCurrentUser
  2350 ;; This function is called by:
  2351 ;;		_main
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text1
  2356   00002A                     __ptext1:
  2357                           	callstack 0
  2358   00002A                     _motor_RFID:
  2359                           	callstack 22
  2360   00002A                     
  2361                           ;TAD_RFID.c: 253:     static unsigned char lastBitsVal;;TAD_RFID.c: 254:     static unsi
      +                          gned char fifoLevel;;TAD_RFID.c: 255:     unsigned char backBitsCalc;;TAD_RFID.c: 256:  
      +                             switch(state) {
  2362   00002A  EF5E  F004         	goto	l4034
  2363   00002E                     l3690:
  2364                           
  2365                           ;TAD_RFID.c: 262:                     flag = motor_Write(0x0D, 0x07);
  2366   00002E  0E07               	movlw	7
  2367   000030  6E4C               	movwf	motor_Write@value^0,c
  2368   000032  0E0D               	movlw	13
  2369   000034  ECFB  F007         	call	_motor_Write
  2370   000038  6E63               	movwf	motor_RFID@flag^0,c
  2371   00003A                     
  2372                           ;TAD_RFID.c: 263:                     if (flag != 0){
  2373   00003A  5063               	movf	motor_RFID@flag^0,w,c
  2374   00003C  B4D8               	btfsc	status,2,c
  2375   00003E  EF23  F000         	goto	u3001
  2376   000042  EF25  F000         	goto	u3000
  2377   000046                     u3001:
  2378   000046  EF69  F004         	goto	l431
  2379   00004A                     u3000:
  2380   00004A                     
  2381                           ;TAD_RFID.c: 264:                     TagType = 0x26;
  2382   00004A  0E26               	movlw	38
  2383   00004C  6E24               	movwf	motor_RFID@TagType^0,c
  2384                           
  2385                           ;TAD_RFID.c: 265:                     substate = 1;
  2386   00004E  0E01               	movlw	1
  2387   000050  6E2A               	movwf	motor_RFID@substate^0,c
  2388   000052  EF69  F004         	goto	l431
  2389   000056                     l3696:
  2390                           
  2391                           ;TAD_RFID.c: 270:                     irqEn = 0x77;
  2392   000056  0E77               	movlw	119
  2393   000058  6E29               	movwf	motor_RFID@irqEn^0,c
  2394                           
  2395                           ;TAD_RFID.c: 271:                     waitIRq = 0x30;
  2396   00005A  0E30               	movlw	48
  2397   00005C  6E28               	movwf	motor_RFID@waitIRq^0,c
  2398   00005E                     
  2399                           ;TAD_RFID.c: 272:                     flag = motor_Write(0x02, irqEn | 0x80);
  2400   00005E  0EF7               	movlw	247
  2401   000060  6E4C               	movwf	motor_Write@value^0,c
  2402   000062  0E02               	movlw	2
  2403   000064  ECFB  F007         	call	_motor_Write
  2404   000068  6E63               	movwf	motor_RFID@flag^0,c
  2405   00006A                     
  2406                           ;TAD_RFID.c: 273:                     if (flag != 0){
  2407   00006A  5063               	movf	motor_RFID@flag^0,w,c
  2408   00006C  B4D8               	btfsc	status,2,c
  2409   00006E  EF3B  F000         	goto	u3011
  2410   000072  EF3D  F000         	goto	u3010
  2411   000076                     u3011:
  2412   000076  EF69  F004         	goto	l431
  2413   00007A                     u3010:
  2414   00007A                     l3702:
  2415                           
  2416                           ;TAD_RFID.c: 274:                     substate = 2;
  2417   00007A  0E02               	movlw	2
  2418   00007C  6E2A               	movwf	motor_RFID@substate^0,c
  2419   00007E  EF69  F004         	goto	l431
  2420   000082                     l3704:
  2421                           
  2422                           ;TAD_RFID.c: 279:                     flag = motor_Read(0x04);
  2423   000082  0E04               	movlw	4
  2424   000084  EC6F  F008         	call	_motor_Read
  2425   000088  6E63               	movwf	motor_RFID@flag^0,c
  2426   00008A                     
  2427                           ;TAD_RFID.c: 280:                     if (flag != 0){
  2428   00008A  5063               	movf	motor_RFID@flag^0,w,c
  2429   00008C  B4D8               	btfsc	status,2,c
  2430   00008E  EF4B  F000         	goto	u3021
  2431   000092  EF4D  F000         	goto	u3020
  2432   000096                     u3021:
  2433   000096  EF69  F004         	goto	l431
  2434   00009A                     u3020:
  2435   00009A                     
  2436                           ;TAD_RFID.c: 281:                         tempRegValue = flag;
  2437   00009A  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2438   00009E                     l3710:
  2439                           
  2440                           ;TAD_RFID.c: 282:                         substate = 3;
  2441   00009E  0E03               	movlw	3
  2442   0000A0  6E2A               	movwf	motor_RFID@substate^0,c
  2443   0000A2  EF69  F004         	goto	l431
  2444   0000A6                     l3712:
  2445                           
  2446                           ;TAD_RFID.c: 287:                     flag = motor_Write(0x02, tempRegValue & ~0x80);
  2447   0000A6  5021               	movf	motor_RFID@tempRegValue^0,w,c
  2448   0000A8  0B7F               	andlw	127
  2449   0000AA  6E4C               	movwf	motor_Write@value^0,c
  2450   0000AC  0E02               	movlw	2
  2451   0000AE  ECFB  F007         	call	_motor_Write
  2452   0000B2  6E63               	movwf	motor_RFID@flag^0,c
  2453   0000B4                     
  2454                           ;TAD_RFID.c: 288:                     if (flag != 0){
  2455   0000B4  5063               	movf	motor_RFID@flag^0,w,c
  2456   0000B6  B4D8               	btfsc	status,2,c
  2457   0000B8  EF60  F000         	goto	u3031
  2458   0000BC  EF62  F000         	goto	u3030
  2459   0000C0                     u3031:
  2460   0000C0  EF69  F004         	goto	l431
  2461   0000C4                     u3030:
  2462   0000C4                     l3716:
  2463                           
  2464                           ;TAD_RFID.c: 289:                         substate = 4;
  2465   0000C4  0E04               	movlw	4
  2466   0000C6  6E2A               	movwf	motor_RFID@substate^0,c
  2467   0000C8  EF69  F004         	goto	l431
  2468   0000CC                     l3718:
  2469                           
  2470                           ;TAD_RFID.c: 294:                     tempRegValue = MFRC522_Rd(0x0A);
  2471   0000CC  0E0A               	movlw	10
  2472   0000CE  ECEC  F009         	call	_MFRC522_Rd
  2473   0000D2  6E21               	movwf	motor_RFID@tempRegValue^0,c
  2474   0000D4                     l3720:
  2475                           
  2476                           ;TAD_RFID.c: 295:                     substate = 5;
  2477   0000D4  0E05               	movlw	5
  2478   0000D6  6E2A               	movwf	motor_RFID@substate^0,c
  2479                           
  2480                           ;TAD_RFID.c: 296:                     break;
  2481   0000D8  EF69  F004         	goto	l431
  2482   0000DC                     l3722:
  2483                           
  2484                           ;TAD_RFID.c: 299:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  2485   0000DC  5021               	movf	motor_RFID@tempRegValue^0,w,c
  2486   0000DE  0980               	iorlw	128
  2487   0000E0  6E4C               	movwf	motor_Write@value^0,c
  2488   0000E2  0E0A               	movlw	10
  2489   0000E4  ECFB  F007         	call	_motor_Write
  2490   0000E8  6E63               	movwf	motor_RFID@flag^0,c
  2491   0000EA                     
  2492                           ;TAD_RFID.c: 300:                     if (flag != 0){
  2493   0000EA  5063               	movf	motor_RFID@flag^0,w,c
  2494   0000EC  B4D8               	btfsc	status,2,c
  2495   0000EE  EF7B  F000         	goto	u3041
  2496   0000F2  EF7D  F000         	goto	u3040
  2497   0000F6                     u3041:
  2498   0000F6  EF69  F004         	goto	l431
  2499   0000FA                     u3040:
  2500   0000FA                     l3726:
  2501                           
  2502                           ;TAD_RFID.c: 301:                         substate = 6;
  2503   0000FA  0E06               	movlw	6
  2504   0000FC  6E2A               	movwf	motor_RFID@substate^0,c
  2505   0000FE  EF69  F004         	goto	l431
  2506   000102                     l3728:
  2507                           
  2508                           ;TAD_RFID.c: 306:                     flag = motor_Write(0x01, 0x00);
  2509   000102  0E00               	movlw	0
  2510   000104  6E4C               	movwf	motor_Write@value^0,c
  2511   000106  0E01               	movlw	1
  2512   000108  ECFB  F007         	call	_motor_Write
  2513   00010C  6E63               	movwf	motor_RFID@flag^0,c
  2514   00010E                     
  2515                           ;TAD_RFID.c: 307:                     if (flag != 0){
  2516   00010E  5063               	movf	motor_RFID@flag^0,w,c
  2517   000110  B4D8               	btfsc	status,2,c
  2518   000112  EF8D  F000         	goto	u3051
  2519   000116  EF8F  F000         	goto	u3050
  2520   00011A                     u3051:
  2521   00011A  EF69  F004         	goto	l431
  2522   00011E                     u3050:
  2523   00011E                     l3732:
  2524                           
  2525                           ;TAD_RFID.c: 308:                         substate = 7;
  2526   00011E  0E07               	movlw	7
  2527   000120  6E2A               	movwf	motor_RFID@substate^0,c
  2528   000122  EF69  F004         	goto	l431
  2529   000126                     l3734:
  2530                           
  2531                           ;TAD_RFID.c: 313:                     flag = motor_Write(0x09, TagType);
  2532   000126  C024  F04C         	movff	motor_RFID@TagType,motor_Write@value
  2533   00012A  0E09               	movlw	9
  2534   00012C  ECFB  F007         	call	_motor_Write
  2535   000130  6E63               	movwf	motor_RFID@flag^0,c
  2536   000132                     
  2537                           ;TAD_RFID.c: 314:                     if (flag != 0){
  2538   000132  5063               	movf	motor_RFID@flag^0,w,c
  2539   000134  B4D8               	btfsc	status,2,c
  2540   000136  EF9F  F000         	goto	u3061
  2541   00013A  EFA1  F000         	goto	u3060
  2542   00013E                     u3061:
  2543   00013E  EF69  F004         	goto	l431
  2544   000142                     u3060:
  2545   000142                     l3738:
  2546                           
  2547                           ;TAD_RFID.c: 315:                         substate = 8;
  2548   000142  0E08               	movlw	8
  2549   000144  6E2A               	movwf	motor_RFID@substate^0,c
  2550   000146  EF69  F004         	goto	l431
  2551   00014A                     l3740:
  2552                           
  2553                           ;TAD_RFID.c: 320:                     flag = motor_Write(0x01, 0x0C);
  2554   00014A  0E0C               	movlw	12
  2555   00014C  6E4C               	movwf	motor_Write@value^0,c
  2556   00014E  0E01               	movlw	1
  2557   000150  ECFB  F007         	call	_motor_Write
  2558   000154  6E63               	movwf	motor_RFID@flag^0,c
  2559   000156                     
  2560                           ;TAD_RFID.c: 321:                     if (flag != 0){
  2561   000156  5063               	movf	motor_RFID@flag^0,w,c
  2562   000158  B4D8               	btfsc	status,2,c
  2563   00015A  EFB1  F000         	goto	u3071
  2564   00015E  EFB3  F000         	goto	u3070
  2565   000162                     u3071:
  2566   000162  EF69  F004         	goto	l431
  2567   000166                     u3070:
  2568   000166                     l3744:
  2569                           
  2570                           ;TAD_RFID.c: 322:                         substate = 9;
  2571   000166  0E09               	movlw	9
  2572   000168  6E2A               	movwf	motor_RFID@substate^0,c
  2573   00016A  EF69  F004         	goto	l431
  2574   00016E                     l3746:
  2575                           
  2576                           ;TAD_RFID.c: 327:                     flag = motor_Read(0x0D);
  2577   00016E  0E0D               	movlw	13
  2578   000170  EC6F  F008         	call	_motor_Read
  2579   000174  6E63               	movwf	motor_RFID@flag^0,c
  2580   000176                     
  2581                           ;TAD_RFID.c: 328:                     if (flag != 0){
  2582   000176  5063               	movf	motor_RFID@flag^0,w,c
  2583   000178  B4D8               	btfsc	status,2,c
  2584   00017A  EFC1  F000         	goto	u3081
  2585   00017E  EFC3  F000         	goto	u3080
  2586   000182                     u3081:
  2587   000182  EF69  F004         	goto	l431
  2588   000186                     u3080:
  2589   000186                     
  2590                           ;TAD_RFID.c: 329:                         tempRegValue = flag;
  2591   000186  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2592   00018A                     l3752:
  2593                           
  2594                           ;TAD_RFID.c: 330:                         substate = 10;
  2595   00018A  0E0A               	movlw	10
  2596   00018C  6E2A               	movwf	motor_RFID@substate^0,c
  2597   00018E  EF69  F004         	goto	l431
  2598   000192                     l3754:
  2599                           
  2600                           ;TAD_RFID.c: 335:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  2601   000192  5021               	movf	motor_RFID@tempRegValue^0,w,c
  2602   000194  0980               	iorlw	128
  2603   000196  6E4C               	movwf	motor_Write@value^0,c
  2604   000198  0E0D               	movlw	13
  2605   00019A  ECFB  F007         	call	_motor_Write
  2606   00019E  6E63               	movwf	motor_RFID@flag^0,c
  2607   0001A0                     
  2608                           ;TAD_RFID.c: 336:                     if (flag != 0){
  2609   0001A0  5063               	movf	motor_RFID@flag^0,w,c
  2610   0001A2  B4D8               	btfsc	status,2,c
  2611   0001A4  EFD6  F000         	goto	u3091
  2612   0001A8  EFD8  F000         	goto	u3090
  2613   0001AC                     u3091:
  2614   0001AC  EF69  F004         	goto	l431
  2615   0001B0                     u3090:
  2616   0001B0                     
  2617                           ;TAD_RFID.c: 337:                         i = 0xFF;
  2618   0001B0  6826               	setf	motor_RFID@i^0,c
  2619   0001B2                     l3760:
  2620                           
  2621                           ;TAD_RFID.c: 338:                         substate = 11;
  2622   0001B2  0E0B               	movlw	11
  2623   0001B4  6E2A               	movwf	motor_RFID@substate^0,c
  2624   0001B6  EF69  F004         	goto	l431
  2625   0001BA                     l3762:
  2626                           
  2627                           ;TAD_RFID.c: 343:                     flag = motor_Read(0x04);
  2628   0001BA  0E04               	movlw	4
  2629   0001BC  EC6F  F008         	call	_motor_Read
  2630   0001C0  6E63               	movwf	motor_RFID@flag^0,c
  2631   0001C2                     
  2632                           ;TAD_RFID.c: 344:                     if (flag != 0){
  2633   0001C2  5063               	movf	motor_RFID@flag^0,w,c
  2634   0001C4  B4D8               	btfsc	status,2,c
  2635   0001C6  EFE7  F000         	goto	u3101
  2636   0001CA  EFE9  F000         	goto	u3100
  2637   0001CE                     u3101:
  2638   0001CE  EF69  F004         	goto	l431
  2639   0001D2                     u3100:
  2640   0001D2                     
  2641                           ;TAD_RFID.c: 345:                         n = flag;
  2642   0001D2  C063  F027         	movff	motor_RFID@flag,motor_RFID@n
  2643                           
  2644                           ;TAD_RFID.c: 346:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  2645   0001D6  B027               	btfsc	motor_RFID@n^0,0,c
  2646   0001D8  EFF0  F000         	goto	u3111
  2647   0001DC  EFF2  F000         	goto	u3110
  2648   0001E0                     u3111:
  2649   0001E0  EFFF  F000         	goto	l3772
  2650   0001E4                     u3110:
  2651   0001E4  5027               	movf	motor_RFID@n^0,w,c
  2652   0001E6  1428               	andwf	motor_RFID@waitIRq^0,w,c
  2653   0001E8  0900               	iorlw	0
  2654   0001EA  A4D8               	btfss	status,2,c
  2655   0001EC  EFFA  F000         	goto	u3121
  2656   0001F0  EFFC  F000         	goto	u3120
  2657   0001F4                     u3121:
  2658   0001F4  EFFF  F000         	goto	l3772
  2659   0001F8                     u3120:
  2660   0001F8  2E26               	decfsz	motor_RFID@i^0,f,c
  2661   0001FA  EFD3  F001         	goto	l322
  2662   0001FE                     l3772:
  2663                           
  2664                           ;TAD_RFID.c: 347:                             substate = 12;
  2665   0001FE  0E0C               	movlw	12
  2666   000200  6E2A               	movwf	motor_RFID@substate^0,c
  2667   000202  EF69  F004         	goto	l431
  2668   000206                     l3774:
  2669                           
  2670                           ;TAD_RFID.c: 353:                     flag = motor_Read(0x0D);
  2671   000206  0E0D               	movlw	13
  2672   000208  EC6F  F008         	call	_motor_Read
  2673   00020C  6E63               	movwf	motor_RFID@flag^0,c
  2674   00020E                     
  2675                           ;TAD_RFID.c: 354:                     if (flag != 0){
  2676   00020E  5063               	movf	motor_RFID@flag^0,w,c
  2677   000210  B4D8               	btfsc	status,2,c
  2678   000212  EF0D  F001         	goto	u3131
  2679   000216  EF0F  F001         	goto	u3130
  2680   00021A                     u3131:
  2681   00021A  EF69  F004         	goto	l431
  2682   00021E                     u3130:
  2683   00021E                     
  2684                           ;TAD_RFID.c: 355:                         tempRegValue = flag;
  2685   00021E  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2686   000222                     l3780:
  2687                           
  2688                           ;TAD_RFID.c: 356:                         substate = 13;
  2689   000222  0E0D               	movlw	13
  2690   000224  6E2A               	movwf	motor_RFID@substate^0,c
  2691   000226  EF69  F004         	goto	l431
  2692   00022A                     l3782:
  2693                           
  2694                           ;TAD_RFID.c: 361:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  2695   00022A  5021               	movf	motor_RFID@tempRegValue^0,w,c
  2696   00022C  0B7F               	andlw	127
  2697   00022E  6E4C               	movwf	motor_Write@value^0,c
  2698   000230  0E0D               	movlw	13
  2699   000232  ECFB  F007         	call	_motor_Write
  2700   000236  6E63               	movwf	motor_RFID@flag^0,c
  2701   000238                     
  2702                           ;TAD_RFID.c: 362:                     if (flag != 0){
  2703   000238  5063               	movf	motor_RFID@flag^0,w,c
  2704   00023A  B4D8               	btfsc	status,2,c
  2705   00023C  EF22  F001         	goto	u3141
  2706   000240  EF24  F001         	goto	u3140
  2707   000244                     u3141:
  2708   000244  EF69  F004         	goto	l431
  2709   000248                     u3140:
  2710   000248                     l3786:
  2711                           
  2712                           ;TAD_RFID.c: 363:                         substate = 14;
  2713   000248  0E0E               	movlw	14
  2714   00024A  6E2A               	movwf	motor_RFID@substate^0,c
  2715   00024C  EF69  F004         	goto	l431
  2716   000250                     l3788:
  2717                           
  2718                           ;TAD_RFID.c: 368:                     tempRegValue = MFRC522_Rd(0x06);
  2719   000250  0E06               	movlw	6
  2720   000252  ECEC  F009         	call	_MFRC522_Rd
  2721   000256  6E21               	movwf	motor_RFID@tempRegValue^0,c
  2722   000258                     
  2723                           ;TAD_RFID.c: 369:                     if (i != 0 && !(tempRegValue & 0x1B)) {
  2724   000258  5026               	movf	motor_RFID@i^0,w,c
  2725   00025A  B4D8               	btfsc	status,2,c
  2726   00025C  EF32  F001         	goto	u3151
  2727   000260  EF34  F001         	goto	u3150
  2728   000264                     u3151:
  2729   000264  EF43  F001         	goto	l352
  2730   000268                     u3150:
  2731   000268  C021  F05C         	movff	motor_RFID@tempRegValue,??_motor_RFID
  2732   00026C  0E1B               	movlw	27
  2733   00026E  165C               	andwf	??_motor_RFID^0,f,c
  2734   000270  A4D8               	btfss	status,2,c
  2735   000272  EF3D  F001         	goto	u3161
  2736   000276  EF3F  F001         	goto	u3160
  2737   00027A                     u3161:
  2738   00027A  EF43  F001         	goto	l352
  2739   00027E                     u3160:
  2740   00027E                     l3794:
  2741                           
  2742                           ;TAD_RFID.c: 370:                         substate = 15;
  2743   00027E  0E0F               	movlw	15
  2744   000280  6E2A               	movwf	motor_RFID@substate^0,c
  2745                           
  2746                           ;TAD_RFID.c: 371:                     } else {
  2747   000282  EF69  F004         	goto	l431
  2748   000286                     l352:
  2749                           
  2750                           ;TAD_RFID.c: 372:                         substate = 0;
  2751   000286  6A2A               	clrf	motor_RFID@substate^0,c
  2752                           
  2753                           ;TAD_RFID.c: 373:                         state = 0;
  2754   000288  6A2B               	clrf	motor_RFID@state^0,c
  2755   00028A  EF69  F004         	goto	l431
  2756   00028E                     l3796:
  2757                           
  2758                           ;TAD_RFID.c: 379:                     fifoLevel = MFRC522_Rd(0x0A);
  2759   00028E  0E0A               	movlw	10
  2760   000290  ECEC  F009         	call	_MFRC522_Rd
  2761   000294  6E1F               	movwf	motor_RFID@fifoLevel^0,c
  2762   000296                     l3798:
  2763                           
  2764                           ;TAD_RFID.c: 380:                     substate = 16;
  2765   000296  0E10               	movlw	16
  2766   000298  6E2A               	movwf	motor_RFID@substate^0,c
  2767                           
  2768                           ;TAD_RFID.c: 381:                     break;
  2769   00029A  EF69  F004         	goto	l431
  2770   00029E                     l3800:
  2771                           
  2772                           ;TAD_RFID.c: 385:                     flag = motor_Read(0x0C);
  2773   00029E  0E0C               	movlw	12
  2774   0002A0  EC6F  F008         	call	_motor_Read
  2775   0002A4  6E63               	movwf	motor_RFID@flag^0,c
  2776   0002A6                     
  2777                           ;TAD_RFID.c: 386:                     if (flag != 0){
  2778   0002A6  5063               	movf	motor_RFID@flag^0,w,c
  2779   0002A8  B4D8               	btfsc	status,2,c
  2780   0002AA  EF59  F001         	goto	u3171
  2781   0002AE  EF5B  F001         	goto	u3170
  2782   0002B2                     u3171:
  2783   0002B2  EF69  F004         	goto	l431
  2784   0002B6                     u3170:
  2785   0002B6                     
  2786                           ;TAD_RFID.c: 387:                         lastBitsVal = flag & 0x07;
  2787   0002B6  5063               	movf	motor_RFID@flag^0,w,c
  2788   0002B8  0B07               	andlw	7
  2789   0002BA  6E20               	movwf	motor_RFID@lastBitsVal^0,c
  2790   0002BC                     l3806:
  2791                           
  2792                           ;TAD_RFID.c: 388:                         substate = 17;
  2793   0002BC  0E11               	movlw	17
  2794   0002BE  6E2A               	movwf	motor_RFID@substate^0,c
  2795   0002C0  EF69  F004         	goto	l431
  2796   0002C4                     l3808:
  2797                           
  2798                           ;TAD_RFID.c: 394:                     if (lastBitsVal)
  2799   0002C4  5020               	movf	motor_RFID@lastBitsVal^0,w,c
  2800   0002C6  B4D8               	btfsc	status,2,c
  2801   0002C8  EF68  F001         	goto	u3181
  2802   0002CC  EF6A  F001         	goto	u3180
  2803   0002D0                     u3181:
  2804   0002D0  EF72  F001         	goto	l3812
  2805   0002D4                     u3180:
  2806   0002D4                     
  2807                           ;TAD_RFID.c: 395:                         backBitsCalc = (fifoLevel - 1) * 8 + lastBitsV
      +                          al;
  2808   0002D4  501F               	movf	motor_RFID@fifoLevel^0,w,c
  2809   0002D6  0D08               	mullw	8
  2810   0002D8  50F3               	movf	243,w,c
  2811   0002DA  2420               	addwf	motor_RFID@lastBitsVal^0,w,c
  2812   0002DC  0FF8               	addlw	248
  2813   0002DE  6E5F               	movwf	motor_RFID@backBitsCalc^0,c
  2814   0002E0  EF76  F001         	goto	l3814
  2815   0002E4                     l3812:
  2816                           
  2817                           ;TAD_RFID.c: 397:                         backBitsCalc = fifoLevel * 8;
  2818   0002E4  501F               	movf	motor_RFID@fifoLevel^0,w,c
  2819   0002E6  0D08               	mullw	8
  2820   0002E8  CFF3 F05F          	movff	prodl,motor_RFID@backBitsCalc
  2821   0002EC                     l3814:
  2822                           
  2823                           ;TAD_RFID.c: 400:                     if (backBitsCalc == 0x10) {
  2824   0002EC  0E10               	movlw	16
  2825   0002EE  185F               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2826   0002F0  A4D8               	btfss	status,2,c
  2827   0002F2  EF7D  F001         	goto	u3191
  2828   0002F6  EF7F  F001         	goto	u3190
  2829   0002FA                     u3191:
  2830   0002FA  EF84  F001         	goto	l360
  2831   0002FE                     u3190:
  2832   0002FE                     
  2833                           ;TAD_RFID.c: 401:                         state = 1;
  2834   0002FE  0E01               	movlw	1
  2835   000300  6E2B               	movwf	motor_RFID@state^0,c
  2836   000302                     
  2837                           ;TAD_RFID.c: 402:                         substate = 0;
  2838   000302  6A2A               	clrf	motor_RFID@substate^0,c
  2839                           
  2840                           ;TAD_RFID.c: 403:                     } else {
  2841   000304  EF69  F004         	goto	l431
  2842   000308                     l360:
  2843                           
  2844                           ;TAD_RFID.c: 404:                         state = 0;
  2845   000308  6A2B               	clrf	motor_RFID@state^0,c
  2846                           
  2847                           ;TAD_RFID.c: 405:                         substate = 0;
  2848   00030A  6A2A               	clrf	motor_RFID@substate^0,c
  2849   00030C  EF69  F004         	goto	l431
  2850   000310                     l3822:
  2851   000310  502A               	movf	motor_RFID@substate^0,w,c
  2852                           
  2853                           ; Switch size 1, requested type "simple"
  2854                           ; Number of cases is 18, Range of values is 0 to 17
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte           55    28 (average)
  2858                           ;	Chosen strategy is simple_byte
  2859   000312  0A00               	xorlw	0	; case 0
  2860   000314  B4D8               	btfsc	status,2,c
  2861   000316  EF17  F000         	goto	l3690
  2862   00031A  0A01               	xorlw	1	; case 1
  2863   00031C  B4D8               	btfsc	status,2,c
  2864   00031E  EF2B  F000         	goto	l3696
  2865   000322  0A03               	xorlw	3	; case 2
  2866   000324  B4D8               	btfsc	status,2,c
  2867   000326  EF41  F000         	goto	l3704
  2868   00032A  0A01               	xorlw	1	; case 3
  2869   00032C  B4D8               	btfsc	status,2,c
  2870   00032E  EF53  F000         	goto	l3712
  2871   000332  0A07               	xorlw	7	; case 4
  2872   000334  B4D8               	btfsc	status,2,c
  2873   000336  EF66  F000         	goto	l3718
  2874   00033A  0A01               	xorlw	1	; case 5
  2875   00033C  B4D8               	btfsc	status,2,c
  2876   00033E  EF6E  F000         	goto	l3722
  2877   000342  0A03               	xorlw	3	; case 6
  2878   000344  B4D8               	btfsc	status,2,c
  2879   000346  EF81  F000         	goto	l3728
  2880   00034A  0A01               	xorlw	1	; case 7
  2881   00034C  B4D8               	btfsc	status,2,c
  2882   00034E  EF93  F000         	goto	l3734
  2883   000352  0A0F               	xorlw	15	; case 8
  2884   000354  B4D8               	btfsc	status,2,c
  2885   000356  EFA5  F000         	goto	l3740
  2886   00035A  0A01               	xorlw	1	; case 9
  2887   00035C  B4D8               	btfsc	status,2,c
  2888   00035E  EFB7  F000         	goto	l3746
  2889   000362  0A03               	xorlw	3	; case 10
  2890   000364  B4D8               	btfsc	status,2,c
  2891   000366  EFC9  F000         	goto	l3754
  2892   00036A  0A01               	xorlw	1	; case 11
  2893   00036C  B4D8               	btfsc	status,2,c
  2894   00036E  EFDD  F000         	goto	l3762
  2895   000372  0A07               	xorlw	7	; case 12
  2896   000374  B4D8               	btfsc	status,2,c
  2897   000376  EF03  F001         	goto	l3774
  2898   00037A  0A01               	xorlw	1	; case 13
  2899   00037C  B4D8               	btfsc	status,2,c
  2900   00037E  EF15  F001         	goto	l3782
  2901   000382  0A03               	xorlw	3	; case 14
  2902   000384  B4D8               	btfsc	status,2,c
  2903   000386  EF28  F001         	goto	l3788
  2904   00038A  0A01               	xorlw	1	; case 15
  2905   00038C  B4D8               	btfsc	status,2,c
  2906   00038E  EF47  F001         	goto	l3796
  2907   000392  0A1F               	xorlw	31	; case 16
  2908   000394  B4D8               	btfsc	status,2,c
  2909   000396  EF4F  F001         	goto	l3800
  2910   00039A  0A01               	xorlw	1	; case 17
  2911   00039C  B4D8               	btfsc	status,2,c
  2912   00039E  EF62  F001         	goto	l3808
  2913   0003A2  EF69  F004         	goto	l431
  2914   0003A6                     l322:
  2915                           
  2916                           ;TAD_RFID.c: 409:             break;
  2917   0003A6  EF69  F004         	goto	l431
  2918   0003AA                     l3824:
  2919                           
  2920                           ;TAD_RFID.c: 415:                     flag = motor_Write(0x0D, 0x00);
  2921   0003AA  0E00               	movlw	0
  2922   0003AC  6E4C               	movwf	motor_Write@value^0,c
  2923   0003AE  0E0D               	movlw	13
  2924   0003B0  ECFB  F007         	call	_motor_Write
  2925   0003B4  6E63               	movwf	motor_RFID@flag^0,c
  2926   0003B6                     
  2927                           ;TAD_RFID.c: 416:                     if (flag != 0){
  2928   0003B6  5063               	movf	motor_RFID@flag^0,w,c
  2929   0003B8  B4D8               	btfsc	status,2,c
  2930   0003BA  EFE1  F001         	goto	u3201
  2931   0003BE  EFE3  F001         	goto	u3200
  2932   0003C2                     u3201:
  2933   0003C2  EF69  F004         	goto	l431
  2934   0003C6                     u3200:
  2935   0003C6                     
  2936                           ;TAD_RFID.c: 417:                     UID[0] = 0x93;
  2937   0003C6  0E93               	movlw	147
  2938   0003C8  6E01               	movwf	motor_RFID@UID^0,c
  2939                           
  2940                           ;TAD_RFID.c: 418:                     UID[1] = 0x20;
  2941   0003CA  0E20               	movlw	32
  2942   0003CC  6E02               	movwf	(motor_RFID@UID+1)^0,c
  2943                           
  2944                           ;TAD_RFID.c: 419:                     substate = 1;
  2945   0003CE  0E01               	movlw	1
  2946   0003D0  6E2A               	movwf	motor_RFID@substate^0,c
  2947   0003D2  EF69  F004         	goto	l431
  2948   0003D6                     l3830:
  2949                           
  2950                           ;TAD_RFID.c: 424:                     flag = motor_Read(0x08);
  2951   0003D6  0E08               	movlw	8
  2952   0003D8  EC6F  F008         	call	_motor_Read
  2953   0003DC  6E63               	movwf	motor_RFID@flag^0,c
  2954   0003DE                     
  2955                           ;TAD_RFID.c: 425:                     if (flag != 0){
  2956   0003DE  5063               	movf	motor_RFID@flag^0,w,c
  2957   0003E0  B4D8               	btfsc	status,2,c
  2958   0003E2  EFF5  F001         	goto	u3211
  2959   0003E6  EFF7  F001         	goto	u3210
  2960   0003EA                     u3211:
  2961   0003EA  EF69  F004         	goto	l431
  2962   0003EE                     u3210:
  2963   0003EE                     
  2964                           ;TAD_RFID.c: 426:                         tempRegValue = flag;
  2965   0003EE  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2966   0003F2  EF3D  F000         	goto	l3702
  2967   0003F6                     l3838:
  2968                           
  2969                           ;TAD_RFID.c: 432:                     flag = motor_Write(0x08, tempRegValue & ~0x08);
  2970   0003F6  5021               	movf	motor_RFID@tempRegValue^0,w,c
  2971   0003F8  0BF7               	andlw	247
  2972   0003FA  6E4C               	movwf	motor_Write@value^0,c
  2973   0003FC  0E08               	movlw	8
  2974   0003FE  ECFB  F007         	call	_motor_Write
  2975   000402  6E63               	movwf	motor_RFID@flag^0,c
  2976   000404                     
  2977                           ;TAD_RFID.c: 433:                     if (flag != 0){
  2978   000404  5063               	movf	motor_RFID@flag^0,w,c
  2979   000406  B4D8               	btfsc	status,2,c
  2980   000408  EF08  F002         	goto	u3221
  2981   00040C  EF0A  F002         	goto	u3220
  2982   000410                     u3221:
  2983   000410  EF69  F004         	goto	l431
  2984   000414                     u3220:
  2985   000414  EF4F  F000         	goto	l3710
  2986   000418                     l3844:
  2987                           
  2988                           ;TAD_RFID.c: 439:                     irqEn = 0x77;
  2989   000418  0E77               	movlw	119
  2990   00041A  6E29               	movwf	motor_RFID@irqEn^0,c
  2991                           
  2992                           ;TAD_RFID.c: 440:                     waitIRq = 0x30;
  2993   00041C  0E30               	movlw	48
  2994   00041E  6E28               	movwf	motor_RFID@waitIRq^0,c
  2995   000420                     
  2996                           ;TAD_RFID.c: 441:                     flag = motor_Write(0x02, irqEn | 0x80);
  2997   000420  0EF7               	movlw	247
  2998   000422  6E4C               	movwf	motor_Write@value^0,c
  2999   000424  0E02               	movlw	2
  3000   000426  ECFB  F007         	call	_motor_Write
  3001   00042A  6E63               	movwf	motor_RFID@flag^0,c
  3002   00042C                     
  3003                           ;TAD_RFID.c: 442:                     if (flag != 0){
  3004   00042C  5063               	movf	motor_RFID@flag^0,w,c
  3005   00042E  B4D8               	btfsc	status,2,c
  3006   000430  EF1C  F002         	goto	u3231
  3007   000434  EF1E  F002         	goto	u3230
  3008   000438                     u3231:
  3009   000438  EF69  F004         	goto	l431
  3010   00043C                     u3230:
  3011   00043C  EF62  F000         	goto	l3716
  3012   000440                     l3852:
  3013                           
  3014                           ;TAD_RFID.c: 448:                     flag = motor_Read(0x04);
  3015   000440  0E04               	movlw	4
  3016   000442  EC6F  F008         	call	_motor_Read
  3017   000446  6E63               	movwf	motor_RFID@flag^0,c
  3018   000448                     
  3019                           ;TAD_RFID.c: 449:                     if (flag != 0){
  3020   000448  5063               	movf	motor_RFID@flag^0,w,c
  3021   00044A  B4D8               	btfsc	status,2,c
  3022   00044C  EF2A  F002         	goto	u3241
  3023   000450  EF2C  F002         	goto	u3240
  3024   000454                     u3241:
  3025   000454  EF69  F004         	goto	l431
  3026   000458                     u3240:
  3027   000458                     
  3028                           ;TAD_RFID.c: 450:                         tempRegValue = flag;
  3029   000458  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3030   00045C  EF6A  F000         	goto	l3720
  3031   000460                     l3860:
  3032                           
  3033                           ;TAD_RFID.c: 456:                     flag = motor_Write(0x04, tempRegValue & ~0x80);
  3034   000460  5021               	movf	motor_RFID@tempRegValue^0,w,c
  3035   000462  0B7F               	andlw	127
  3036   000464  6E4C               	movwf	motor_Write@value^0,c
  3037   000466  0E04               	movlw	4
  3038   000468  ECFB  F007         	call	_motor_Write
  3039   00046C  6E63               	movwf	motor_RFID@flag^0,c
  3040   00046E                     
  3041                           ;TAD_RFID.c: 457:                     if (flag != 0){
  3042   00046E  5063               	movf	motor_RFID@flag^0,w,c
  3043   000470  B4D8               	btfsc	status,2,c
  3044   000472  EF3D  F002         	goto	u3251
  3045   000476  EF3F  F002         	goto	u3250
  3046   00047A                     u3251:
  3047   00047A  EF69  F004         	goto	l431
  3048   00047E                     u3250:
  3049   00047E  EF7D  F000         	goto	l3726
  3050   000482                     l3866:
  3051                           
  3052                           ;TAD_RFID.c: 463:                     flag = motor_Read(0x0A);
  3053   000482  0E0A               	movlw	10
  3054   000484  EC6F  F008         	call	_motor_Read
  3055   000488  6E63               	movwf	motor_RFID@flag^0,c
  3056   00048A                     
  3057                           ;TAD_RFID.c: 464:                     if (flag != 0){
  3058   00048A  5063               	movf	motor_RFID@flag^0,w,c
  3059   00048C  B4D8               	btfsc	status,2,c
  3060   00048E  EF4B  F002         	goto	u3261
  3061   000492  EF4D  F002         	goto	u3260
  3062   000496                     u3261:
  3063   000496  EF69  F004         	goto	l431
  3064   00049A                     u3260:
  3065   00049A                     
  3066                           ;TAD_RFID.c: 465:                         tempRegValue = flag;
  3067   00049A  C063  F021         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3068   00049E  EF8F  F000         	goto	l3732
  3069   0004A2                     l3874:
  3070                           
  3071                           ;TAD_RFID.c: 471:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  3072   0004A2  5021               	movf	motor_RFID@tempRegValue^0,w,c
  3073   0004A4  0980               	iorlw	128
  3074   0004A6  6E4C               	movwf	motor_Write@value^0,c
  3075   0004A8  0E0A               	movlw	10
  3076   0004AA  ECFB  F007         	call	_motor_Write
  3077   0004AE  6E63               	movwf	motor_RFID@flag^0,c
  3078   0004B0                     
  3079                           ;TAD_RFID.c: 472:                     if (flag != 0){
  3080   0004B0  5063               	movf	motor_RFID@flag^0,w,c
  3081   0004B2  B4D8               	btfsc	status,2,c
  3082   0004B4  EF5E  F002         	goto	u3271
  3083   0004B8  EF60  F002         	goto	u3270
  3084   0004BC                     u3271:
  3085   0004BC  EF69  F004         	goto	l431
  3086   0004C0                     u3270:
  3087   0004C0  EFA1  F000         	goto	l3738
  3088   0004C4                     l3880:
  3089                           
  3090                           ;TAD_RFID.c: 478:                     flag = motor_Write(0x01, 0x00);
  3091   0004C4  0E00               	movlw	0
  3092   0004C6  6E4C               	movwf	motor_Write@value^0,c
  3093   0004C8  0E01               	movlw	1
  3094   0004CA  ECFB  F007         	call	_motor_Write
  3095   0004CE  6E63               	movwf	motor_RFID@flag^0,c
  3096   0004D0                     
  3097                           ;TAD_RFID.c: 479:                     if (flag != 0){
  3098   0004D0  5063               	movf	motor_RFID@flag^0,w,c
  3099   0004D2  B4D8               	btfsc	status,2,c
  3100   0004D4  EF6E  F002         	goto	u3281
  3101   0004D8  EF70  F002         	goto	u3280
  3102   0004DC                     u3281:
  3103   0004DC  EF69  F004         	goto	l431
  3104   0004E0                     u3280:
  3105   0004E0  EFB3  F000         	goto	l3744
  3106   0004E4                     l3886:
  3107                           
  3108                           ;TAD_RFID.c: 485:                     flag = motor_Write(0x09, UID[0]);
  3109   0004E4  C001  F04C         	movff	motor_RFID@UID,motor_Write@value
  3110   0004E8  0E09               	movlw	9
  3111   0004EA  ECFB  F007         	call	_motor_Write
  3112   0004EE  6E63               	movwf	motor_RFID@flag^0,c
  3113   0004F0                     
  3114                           ;TAD_RFID.c: 486:                     if (flag != 0){
  3115   0004F0  5063               	movf	motor_RFID@flag^0,w,c
  3116   0004F2  B4D8               	btfsc	status,2,c
  3117   0004F4  EF7E  F002         	goto	u3291
  3118   0004F8  EF80  F002         	goto	u3290
  3119   0004FC                     u3291:
  3120   0004FC  EF69  F004         	goto	l431
  3121   000500                     u3290:
  3122   000500  EFC5  F000         	goto	l3752
  3123   000504                     l3892:
  3124                           
  3125                           ;TAD_RFID.c: 491:                     flag = motor_Write(0x09, UID[1]);
  3126   000504  C002  F04C         	movff	motor_RFID@UID+1,motor_Write@value
  3127   000508  0E09               	movlw	9
  3128   00050A  ECFB  F007         	call	_motor_Write
  3129   00050E  6E63               	movwf	motor_RFID@flag^0,c
  3130   000510                     
  3131                           ;TAD_RFID.c: 492:                     if (flag != 0){
  3132   000510  5063               	movf	motor_RFID@flag^0,w,c
  3133   000512  B4D8               	btfsc	status,2,c
  3134   000514  EF8E  F002         	goto	u3301
  3135   000518  EF90  F002         	goto	u3300
  3136   00051C                     u3301:
  3137   00051C  EF69  F004         	goto	l431
  3138   000520                     u3300:
  3139   000520  EFD9  F000         	goto	l3760
  3140   000524                     l3898:
  3141                           
  3142                           ;TAD_RFID.c: 498:                     flag = motor_Write(0x01, 0x0C);
  3143   000524  0E0C               	movlw	12
  3144   000526  6E4C               	movwf	motor_Write@value^0,c
  3145   000528  0E01               	movlw	1
  3146   00052A  ECFB  F007         	call	_motor_Write
  3147   00052E  6E63               	movwf	motor_RFID@flag^0,c
  3148   000530                     
  3149                           ;TAD_RFID.c: 499:                     if (flag != 0){
  3150   000530  5063               	movf	motor_RFID@flag^0,w,c
  3151   000532  B4D8               	btfsc	status,2,c
  3152   000534  EF9E  F002         	goto	u3311
  3153   000538  EFA0  F002         	goto	u3310
  3154   00053C                     u3311:
  3155   00053C  EF69  F004         	goto	l431
  3156   000540                     u3310:
  3157   000540  EFFF  F000         	goto	l3772
  3158   000544                     l3904:
  3159                           
  3160                           ;TAD_RFID.c: 505:                     tempRegValue = MFRC522_Rd(0x0D);
  3161   000544  0E0D               	movlw	13
  3162   000546  ECEC  F009         	call	_MFRC522_Rd
  3163   00054A  6E21               	movwf	motor_RFID@tempRegValue^0,c
  3164   00054C  EF11  F001         	goto	l3780
  3165   000550                     l3908:
  3166                           
  3167                           ;TAD_RFID.c: 510:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  3168   000550  5021               	movf	motor_RFID@tempRegValue^0,w,c
  3169   000552  0980               	iorlw	128
  3170   000554  6E4C               	movwf	motor_Write@value^0,c
  3171   000556  0E0D               	movlw	13
  3172   000558  ECFB  F007         	call	_motor_Write
  3173   00055C  6E63               	movwf	motor_RFID@flag^0,c
  3174   00055E                     
  3175                           ;TAD_RFID.c: 511:                     if (flag != 0){
  3176   00055E  5063               	movf	motor_RFID@flag^0,w,c
  3177   000560  B4D8               	btfsc	status,2,c
  3178   000562  EFB5  F002         	goto	u3321
  3179   000566  EFB7  F002         	goto	u3320
  3180   00056A                     u3321:
  3181   00056A  EF69  F004         	goto	l431
  3182   00056E                     u3320:
  3183   00056E                     
  3184                           ;TAD_RFID.c: 512:                     i = 0xFF;
  3185   00056E  6826               	setf	motor_RFID@i^0,c
  3186   000570  EF24  F001         	goto	l3786
  3187   000574                     l3916:
  3188                           
  3189                           ;TAD_RFID.c: 518:                     n = MFRC522_Rd(0x04);
  3190   000574  0E04               	movlw	4
  3191   000576  ECEC  F009         	call	_MFRC522_Rd
  3192   00057A  6E27               	movwf	motor_RFID@n^0,c
  3193   00057C                     
  3194                           ;TAD_RFID.c: 519:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  3195   00057C  B027               	btfsc	motor_RFID@n^0,0,c
  3196   00057E  EFC3  F002         	goto	u3331
  3197   000582  EFC5  F002         	goto	u3330
  3198   000586                     u3331:
  3199   000586  EF3F  F001         	goto	l3794
  3200   00058A                     u3330:
  3201   00058A  5027               	movf	motor_RFID@n^0,w,c
  3202   00058C  1428               	andwf	motor_RFID@waitIRq^0,w,c
  3203   00058E  0900               	iorlw	0
  3204   000590  A4D8               	btfss	status,2,c
  3205   000592  EFCD  F002         	goto	u3341
  3206   000596  EFCF  F002         	goto	u3340
  3207   00059A                     u3341:
  3208   00059A  EF3F  F001         	goto	l3794
  3209   00059E                     u3340:
  3210   00059E  2E26               	decfsz	motor_RFID@i^0,f,c
  3211   0005A0  EF69  F004         	goto	l431
  3212   0005A4  EF3F  F001         	goto	l3794
  3213   0005A8                     l3926:
  3214                           
  3215                           ;TAD_RFID.c: 525:                     tempRegValue = MFRC522_Rd(0x0D);
  3216   0005A8  0E0D               	movlw	13
  3217   0005AA  ECEC  F009         	call	_MFRC522_Rd
  3218   0005AE  6E21               	movwf	motor_RFID@tempRegValue^0,c
  3219   0005B0  EF4B  F001         	goto	l3798
  3220   0005B4                     l3930:
  3221                           
  3222                           ;TAD_RFID.c: 530:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  3223   0005B4  5021               	movf	motor_RFID@tempRegValue^0,w,c
  3224   0005B6  0B7F               	andlw	127
  3225   0005B8  6E4C               	movwf	motor_Write@value^0,c
  3226   0005BA  0E0D               	movlw	13
  3227   0005BC  ECFB  F007         	call	_motor_Write
  3228   0005C0  6E63               	movwf	motor_RFID@flag^0,c
  3229   0005C2                     
  3230                           ;TAD_RFID.c: 531:                     if (flag != 0){
  3231   0005C2  5063               	movf	motor_RFID@flag^0,w,c
  3232   0005C4  B4D8               	btfsc	status,2,c
  3233   0005C6  EFE7  F002         	goto	u3351
  3234   0005CA  EFE9  F002         	goto	u3350
  3235   0005CE                     u3351:
  3236   0005CE  EF69  F004         	goto	l431
  3237   0005D2                     u3350:
  3238   0005D2  EF5E  F001         	goto	l3806
  3239   0005D6                     l3936:
  3240                           
  3241                           ;TAD_RFID.c: 537:                     tempRegValue = MFRC522_Rd(0x06);
  3242   0005D6  0E06               	movlw	6
  3243   0005D8  ECEC  F009         	call	_MFRC522_Rd
  3244   0005DC  6E21               	movwf	motor_RFID@tempRegValue^0,c
  3245   0005DE                     
  3246                           ;TAD_RFID.c: 538:                     if (i != 0 && !(tempRegValue & 0x1B)) {
  3247   0005DE  5026               	movf	motor_RFID@i^0,w,c
  3248   0005E0  B4D8               	btfsc	status,2,c
  3249   0005E2  EFF5  F002         	goto	u3361
  3250   0005E6  EFF7  F002         	goto	u3360
  3251   0005EA                     u3361:
  3252   0005EA  EF84  F001         	goto	l360
  3253   0005EE                     u3360:
  3254   0005EE  C021  F05C         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3255   0005F2  0E1B               	movlw	27
  3256   0005F4  165C               	andwf	??_motor_RFID^0,f,c
  3257   0005F6  A4D8               	btfss	status,2,c
  3258   0005F8  EF00  F003         	goto	u3371
  3259   0005FC  EF02  F003         	goto	u3370
  3260   000600                     u3371:
  3261   000600  EF84  F001         	goto	l360
  3262   000604                     u3370:
  3263   000604                     
  3264                           ;TAD_RFID.c: 540:                         substate = 18;
  3265   000604  0E12               	movlw	18
  3266   000606  6E2A               	movwf	motor_RFID@substate^0,c
  3267                           
  3268                           ;TAD_RFID.c: 541:                     } else {
  3269   000608  EF69  F004         	goto	l431
  3270   00060C                     l3944:
  3271                           
  3272                           ;TAD_RFID.c: 550:                     flag = motor_Read(0x09);
  3273   00060C  0E09               	movlw	9
  3274   00060E  EC6F  F008         	call	_motor_Read
  3275   000612  6E63               	movwf	motor_RFID@flag^0,c
  3276   000614                     
  3277                           ;TAD_RFID.c: 551:                     if (flag != 0){
  3278   000614  5063               	movf	motor_RFID@flag^0,w,c
  3279   000616  B4D8               	btfsc	status,2,c
  3280   000618  EF10  F003         	goto	u3381
  3281   00061C  EF12  F003         	goto	u3380
  3282   000620                     u3381:
  3283   000620  EF69  F004         	goto	l431
  3284   000624                     u3380:
  3285   000624                     
  3286                           ;TAD_RFID.c: 552:                         UID[0] = flag;
  3287   000624  C063  F001         	movff	motor_RFID@flag,motor_RFID@UID
  3288   000628                     
  3289                           ;TAD_RFID.c: 553:                         substate = 19;
  3290   000628  0E13               	movlw	19
  3291   00062A  6E2A               	movwf	motor_RFID@substate^0,c
  3292   00062C  EF69  F004         	goto	l431
  3293   000630                     l3952:
  3294                           
  3295                           ;TAD_RFID.c: 558:                     UID[1] = MFRC522_Rd(0x09);
  3296   000630  0E09               	movlw	9
  3297   000632  ECEC  F009         	call	_MFRC522_Rd
  3298   000636  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3299   000638                     
  3300                           ;TAD_RFID.c: 559:                     substate = 20;
  3301   000638  0E14               	movlw	20
  3302   00063A  6E2A               	movwf	motor_RFID@substate^0,c
  3303                           
  3304                           ;TAD_RFID.c: 560:                     break;
  3305   00063C  EF69  F004         	goto	l431
  3306   000640                     l3956:
  3307                           
  3308                           ;TAD_RFID.c: 563:                     UID[2] = MFRC522_Rd(0x09);
  3309   000640  0E09               	movlw	9
  3310   000642  ECEC  F009         	call	_MFRC522_Rd
  3311   000646  6E03               	movwf	(motor_RFID@UID+2)^0,c
  3312   000648                     
  3313                           ;TAD_RFID.c: 564:                     substate = 21;
  3314   000648  0E15               	movlw	21
  3315   00064A  6E2A               	movwf	motor_RFID@substate^0,c
  3316                           
  3317                           ;TAD_RFID.c: 565:                     break;
  3318   00064C  EF69  F004         	goto	l431
  3319   000650                     l3960:
  3320                           
  3321                           ;TAD_RFID.c: 568:                     flag = motor_Read(0x09);
  3322   000650  0E09               	movlw	9
  3323   000652  EC6F  F008         	call	_motor_Read
  3324   000656  6E63               	movwf	motor_RFID@flag^0,c
  3325   000658                     
  3326                           ;TAD_RFID.c: 569:                     if (flag != 0){
  3327   000658  5063               	movf	motor_RFID@flag^0,w,c
  3328   00065A  B4D8               	btfsc	status,2,c
  3329   00065C  EF32  F003         	goto	u3391
  3330   000660  EF34  F003         	goto	u3390
  3331   000664                     u3391:
  3332   000664  EF69  F004         	goto	l431
  3333   000668                     u3390:
  3334   000668                     
  3335                           ;TAD_RFID.c: 570:                         UID[3] = flag;
  3336   000668  C063  F004         	movff	motor_RFID@flag,motor_RFID@UID+3
  3337   00066C                     
  3338                           ;TAD_RFID.c: 571:                         substate = 22;
  3339   00066C  0E16               	movlw	22
  3340   00066E  6E2A               	movwf	motor_RFID@substate^0,c
  3341   000670  EF69  F004         	goto	l431
  3342   000674                     l3968:
  3343                           
  3344                           ;TAD_RFID.c: 577:                     UID[4] = MFRC522_Rd(0x09);
  3345   000674  0E09               	movlw	9
  3346   000676  ECEC  F009         	call	_MFRC522_Rd
  3347   00067A  6E05               	movwf	(motor_RFID@UID+4)^0,c
  3348   00067C                     
  3349                           ;TAD_RFID.c: 578:                     UID[5] = 0;
  3350   00067C  6A06               	clrf	(motor_RFID@UID+5)^0,c
  3351   00067E                     
  3352                           ;TAD_RFID.c: 579:                     substate = 23;
  3353   00067E  0E17               	movlw	23
  3354   000680  6E2A               	movwf	motor_RFID@substate^0,c
  3355                           
  3356                           ;TAD_RFID.c: 580:                     break;
  3357   000682  EF69  F004         	goto	l431
  3358   000686                     l3974:
  3359                           
  3360                           ;TAD_RFID.c: 584:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  3361   000686  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3362   000688  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  3363   00068A  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  3364   00068C  1801               	xorwf	motor_RFID@UID^0,w,c
  3365   00068E  6E23               	movwf	motor_RFID@checksum^0,c
  3366   000690                     
  3367                           ;TAD_RFID.c: 586:                     allZero = 1;
  3368   000690  0E01               	movlw	1
  3369   000692  6E22               	movwf	motor_RFID@allZero^0,c
  3370   000694                     
  3371                           ;TAD_RFID.c: 587:                     substate = 24;
  3372   000694  0E18               	movlw	24
  3373   000696  6E2A               	movwf	motor_RFID@substate^0,c
  3374                           
  3375                           ;TAD_RFID.c: 588:                     break;
  3376   000698  EF69  F004         	goto	l431
  3377   00069C                     l3980:
  3378                           
  3379                           ;TAD_RFID.c: 592:                     if (UID[0] != 0 || UID[1] != 0) {
  3380   00069C  5001               	movf	motor_RFID@UID^0,w,c
  3381   00069E  A4D8               	btfss	status,2,c
  3382   0006A0  EF54  F003         	goto	u3401
  3383   0006A4  EF56  F003         	goto	u3400
  3384   0006A8                     u3401:
  3385   0006A8  EF5E  F003         	goto	l414
  3386   0006AC                     u3400:
  3387   0006AC  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3388   0006AE  B4D8               	btfsc	status,2,c
  3389   0006B0  EF5C  F003         	goto	u3411
  3390   0006B4  EF5E  F003         	goto	u3410
  3391   0006B8                     u3411:
  3392   0006B8  EF5F  F003         	goto	l3984
  3393   0006BC                     u3410:
  3394   0006BC                     l414:
  3395                           
  3396                           ;TAD_RFID.c: 593:                         allZero = 0;
  3397   0006BC  6A22               	clrf	motor_RFID@allZero^0,c
  3398   0006BE                     l3984:
  3399                           
  3400                           ;TAD_RFID.c: 595:                     substate = 25;
  3401   0006BE  0E19               	movlw	25
  3402   0006C0  6E2A               	movwf	motor_RFID@substate^0,c
  3403                           
  3404                           ;TAD_RFID.c: 596:                     break;
  3405   0006C2  EF69  F004         	goto	l431
  3406   0006C6                     l3986:
  3407                           
  3408                           ;TAD_RFID.c: 600:                     if (UID[2] != 0 || UID[3] != 0) {
  3409   0006C6  5003               	movf	(motor_RFID@UID+2)^0,w,c
  3410   0006C8  A4D8               	btfss	status,2,c
  3411   0006CA  EF69  F003         	goto	u3421
  3412   0006CE  EF6B  F003         	goto	u3420
  3413   0006D2                     u3421:
  3414   0006D2  EF73  F003         	goto	l418
  3415   0006D6                     u3420:
  3416   0006D6  5004               	movf	(motor_RFID@UID+3)^0,w,c
  3417   0006D8  B4D8               	btfsc	status,2,c
  3418   0006DA  EF71  F003         	goto	u3431
  3419   0006DE  EF73  F003         	goto	u3430
  3420   0006E2                     u3431:
  3421   0006E2  EF74  F003         	goto	l3990
  3422   0006E6                     u3430:
  3423   0006E6                     l418:
  3424                           
  3425                           ;TAD_RFID.c: 601:                         allZero = 0;
  3426   0006E6  6A22               	clrf	motor_RFID@allZero^0,c
  3427   0006E8                     l3990:
  3428                           
  3429                           ;TAD_RFID.c: 603:                     substate = 26;
  3430   0006E8  0E1A               	movlw	26
  3431   0006EA  6E2A               	movwf	motor_RFID@substate^0,c
  3432                           
  3433                           ;TAD_RFID.c: 604:                     break;
  3434   0006EC  EF69  F004         	goto	l431
  3435   0006F0                     l3992:
  3436                           
  3437                           ;TAD_RFID.c: 608:                     if (checksum != UID[4] || allZero) {
  3438   0006F0  5023               	movf	motor_RFID@checksum^0,w,c
  3439   0006F2  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  3440   0006F4  A4D8               	btfss	status,2,c
  3441   0006F6  EF7F  F003         	goto	u3441
  3442   0006FA  EF81  F003         	goto	u3440
  3443   0006FE                     u3441:
  3444   0006FE  EF84  F001         	goto	l360
  3445   000702                     u3440:
  3446   000702  5022               	movf	motor_RFID@allZero^0,w,c
  3447   000704  B4D8               	btfsc	status,2,c
  3448   000706  EF87  F003         	goto	u3451
  3449   00070A  EF89  F003         	goto	u3450
  3450   00070E                     u3451:
  3451   00070E  EF8B  F003         	goto	l3996
  3452   000712                     u3450:
  3453   000712  EF84  F001         	goto	l360
  3454   000716                     l3996:
  3455                           
  3456                           ;TAD_RFID.c: 614:                         substate = 27;
  3457   000716  0E1B               	movlw	27
  3458   000718  6E2A               	movwf	motor_RFID@substate^0,c
  3459   00071A  EF69  F004         	goto	l431
  3460   00071E                     l3998:
  3461                           
  3462                           ;TAD_RFID.c: 619:                     {;TAD_RFID.c: 620:                         char di
      +                          fferentUID = 1;
  3463   00071E  0E01               	movlw	1
  3464   000720  6E60               	movwf	motor_RFID@differentUID^0,c
  3465   000722                     
  3466                           ;TAD_RFID.c: 621:                         unsigned char* currentUser = getActualUID();
  3467   000722  ECC0  F00B         	call	_getActualUID	;wreg free
  3468   000726  6E5E               	movwf	motor_RFID@currentUser^0,c
  3469   000728                     
  3470                           ;TAD_RFID.c: 622:                         for (int i = 0; i < 5; i++) {
  3471   000728  0E00               	movlw	0
  3472   00072A  6E62               	movwf	(motor_RFID@i_581+1)^0,c
  3473   00072C  0E00               	movlw	0
  3474   00072E  6E61               	movwf	motor_RFID@i_581^0,c
  3475   000730                     l4004:
  3476   000730  BE62               	btfsc	(motor_RFID@i_581+1)^0,7,c
  3477   000732  EFA4  F003         	goto	u3461
  3478   000736  5062               	movf	(motor_RFID@i_581+1)^0,w,c
  3479   000738  E109               	bnz	u3460
  3480   00073A  0E05               	movlw	5
  3481   00073C  5C61               	subwf	motor_RFID@i_581^0,w,c
  3482   00073E  A0D8               	btfss	status,0,c
  3483   000740  EFA4  F003         	goto	u3461
  3484   000744  EFA6  F003         	goto	u3460
  3485   000748                     u3461:
  3486   000748  EFA8  F003         	goto	l4008
  3487   00074C                     u3460:
  3488   00074C  EFC0  F003         	goto	l4016
  3489   000750                     l4008:
  3490                           
  3491                           ;TAD_RFID.c: 623:                             if(currentUser[i] != UID[i]) {
  3492   000750  5061               	movf	motor_RFID@i_581^0,w,c
  3493   000752  0F01               	addlw	low motor_RFID@UID
  3494   000754  6ED9               	movwf	fsr2l,c
  3495   000756  6ADA               	clrf	fsr2h,c
  3496   000758  505E               	movf	motor_RFID@currentUser^0,w,c
  3497   00075A  2461               	addwf	motor_RFID@i_581^0,w,c
  3498   00075C  6EE1               	movwf	fsr1l,c
  3499   00075E  6AE2               	clrf	fsr1h,c
  3500   000760  50DE               	movf	postinc2,w,c
  3501   000762  18E6               	xorwf	postinc1,w,c
  3502   000764  B4D8               	btfsc	status,2,c
  3503   000766  EFB7  F003         	goto	u3471
  3504   00076A  EFB9  F003         	goto	u3470
  3505   00076E                     u3471:
  3506   00076E  EFBC  F003         	goto	l4012
  3507   000772                     u3470:
  3508   000772                     
  3509                           ;TAD_RFID.c: 624:                                 differentUID = 0;
  3510   000772  6A60               	clrf	motor_RFID@differentUID^0,c
  3511                           
  3512                           ;TAD_RFID.c: 625:                                 break;
  3513   000774  EFC0  F003         	goto	l4016
  3514   000778                     l4012:
  3515                           
  3516                           ;TAD_RFID.c: 627:                         }
  3517   000778  4A61               	infsnz	motor_RFID@i_581^0,f,c
  3518   00077A  2A62               	incf	(motor_RFID@i_581+1)^0,f,c
  3519   00077C  EF98  F003         	goto	l4004
  3520   000780                     l4016:
  3521                           
  3522                           ;TAD_RFID.c: 628:                         if(differentUID == 0) {
  3523   000780  5060               	movf	motor_RFID@differentUID^0,w,c
  3524   000782  A4D8               	btfss	status,2,c
  3525   000784  EFC6  F003         	goto	u3481
  3526   000788  EFC8  F003         	goto	u3480
  3527   00078C                     u3481:
  3528   00078C  EFD3  F003         	goto	l4020
  3529   000790                     u3480:
  3530   000790                     
  3531                           ;TAD_RFID.c: 629:                             setCurrentUser(UID[0], UID[1], UID[2], UID
      +                          [3], UID[4]);
  3532   000790  C002  F057         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3533   000794  C003  F058         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3534   000798  C004  F059         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3535   00079C  C005  F05A         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3536   0007A0  5001               	movf	motor_RFID@UID^0,w,c
  3537   0007A2  EC91  F00C         	call	_setCurrentUser
  3538   0007A6                     l4020:
  3539                           
  3540                           ;TAD_RFID.c: 631:                         substate = 28;
  3541   0007A6  0E1C               	movlw	28
  3542   0007A8  6E2A               	movwf	motor_RFID@substate^0,c
  3543                           
  3544                           ;TAD_RFID.c: 632:                     };TAD_RFID.c: 633:                     break;
  3545   0007AA  EF69  F004         	goto	l431
  3546   0007AE                     l4022:
  3547                           
  3548                           ;TAD_RFID.c: 637:                     flag = motor_Write(0x0D, 0x00);
  3549   0007AE  0E00               	movlw	0
  3550   0007B0  6E4C               	movwf	motor_Write@value^0,c
  3551   0007B2  0E0D               	movlw	13
  3552   0007B4  ECFB  F007         	call	_motor_Write
  3553   0007B8  6E63               	movwf	motor_RFID@flag^0,c
  3554   0007BA                     
  3555                           ;TAD_RFID.c: 638:                     if (flag != 0){
  3556   0007BA  5063               	movf	motor_RFID@flag^0,w,c
  3557   0007BC  B4D8               	btfsc	status,2,c
  3558   0007BE  EFE3  F003         	goto	u3491
  3559   0007C2  EFE5  F003         	goto	u3490
  3560   0007C6                     u3491:
  3561   0007C6  EF69  F004         	goto	l431
  3562   0007CA                     u3490:
  3563   0007CA  EF84  F001         	goto	l360
  3564   0007CE                     l4030:
  3565   0007CE  502A               	movf	motor_RFID@substate^0,w,c
  3566                           
  3567                           ; Switch size 1, requested type "simple"
  3568                           ; Number of cases is 29, Range of values is 0 to 28
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte           88    45 (average)
  3572                           ;	Chosen strategy is simple_byte
  3573   0007D0  0A00               	xorlw	0	; case 0
  3574   0007D2  B4D8               	btfsc	status,2,c
  3575   0007D4  EFD5  F001         	goto	l3824
  3576   0007D8  0A01               	xorlw	1	; case 1
  3577   0007DA  B4D8               	btfsc	status,2,c
  3578   0007DC  EFEB  F001         	goto	l3830
  3579   0007E0  0A03               	xorlw	3	; case 2
  3580   0007E2  B4D8               	btfsc	status,2,c
  3581   0007E4  EFFB  F001         	goto	l3838
  3582   0007E8  0A01               	xorlw	1	; case 3
  3583   0007EA  B4D8               	btfsc	status,2,c
  3584   0007EC  EF0C  F002         	goto	l3844
  3585   0007F0  0A07               	xorlw	7	; case 4
  3586   0007F2  B4D8               	btfsc	status,2,c
  3587   0007F4  EF20  F002         	goto	l3852
  3588   0007F8  0A01               	xorlw	1	; case 5
  3589   0007FA  B4D8               	btfsc	status,2,c
  3590   0007FC  EF30  F002         	goto	l3860
  3591   000800  0A03               	xorlw	3	; case 6
  3592   000802  B4D8               	btfsc	status,2,c
  3593   000804  EF41  F002         	goto	l3866
  3594   000808  0A01               	xorlw	1	; case 7
  3595   00080A  B4D8               	btfsc	status,2,c
  3596   00080C  EF51  F002         	goto	l3874
  3597   000810  0A0F               	xorlw	15	; case 8
  3598   000812  B4D8               	btfsc	status,2,c
  3599   000814  EF62  F002         	goto	l3880
  3600   000818  0A01               	xorlw	1	; case 9
  3601   00081A  B4D8               	btfsc	status,2,c
  3602   00081C  EF72  F002         	goto	l3886
  3603   000820  0A03               	xorlw	3	; case 10
  3604   000822  B4D8               	btfsc	status,2,c
  3605   000824  EF82  F002         	goto	l3892
  3606   000828  0A01               	xorlw	1	; case 11
  3607   00082A  B4D8               	btfsc	status,2,c
  3608   00082C  EF92  F002         	goto	l3898
  3609   000830  0A07               	xorlw	7	; case 12
  3610   000832  B4D8               	btfsc	status,2,c
  3611   000834  EFA2  F002         	goto	l3904
  3612   000838  0A01               	xorlw	1	; case 13
  3613   00083A  B4D8               	btfsc	status,2,c
  3614   00083C  EFA8  F002         	goto	l3908
  3615   000840  0A03               	xorlw	3	; case 14
  3616   000842  B4D8               	btfsc	status,2,c
  3617   000844  EFBA  F002         	goto	l3916
  3618   000848  0A01               	xorlw	1	; case 15
  3619   00084A  B4D8               	btfsc	status,2,c
  3620   00084C  EFD4  F002         	goto	l3926
  3621   000850  0A1F               	xorlw	31	; case 16
  3622   000852  B4D8               	btfsc	status,2,c
  3623   000854  EFDA  F002         	goto	l3930
  3624   000858  0A01               	xorlw	1	; case 17
  3625   00085A  B4D8               	btfsc	status,2,c
  3626   00085C  EFEB  F002         	goto	l3936
  3627   000860  0A03               	xorlw	3	; case 18
  3628   000862  B4D8               	btfsc	status,2,c
  3629   000864  EF06  F003         	goto	l3944
  3630   000868  0A01               	xorlw	1	; case 19
  3631   00086A  B4D8               	btfsc	status,2,c
  3632   00086C  EF18  F003         	goto	l3952
  3633   000870  0A07               	xorlw	7	; case 20
  3634   000872  B4D8               	btfsc	status,2,c
  3635   000874  EF20  F003         	goto	l3956
  3636   000878  0A01               	xorlw	1	; case 21
  3637   00087A  B4D8               	btfsc	status,2,c
  3638   00087C  EF28  F003         	goto	l3960
  3639   000880  0A03               	xorlw	3	; case 22
  3640   000882  B4D8               	btfsc	status,2,c
  3641   000884  EF3A  F003         	goto	l3968
  3642   000888  0A01               	xorlw	1	; case 23
  3643   00088A  B4D8               	btfsc	status,2,c
  3644   00088C  EF43  F003         	goto	l3974
  3645   000890  0A0F               	xorlw	15	; case 24
  3646   000892  B4D8               	btfsc	status,2,c
  3647   000894  EF4E  F003         	goto	l3980
  3648   000898  0A01               	xorlw	1	; case 25
  3649   00089A  B4D8               	btfsc	status,2,c
  3650   00089C  EF63  F003         	goto	l3986
  3651   0008A0  0A03               	xorlw	3	; case 26
  3652   0008A2  B4D8               	btfsc	status,2,c
  3653   0008A4  EF78  F003         	goto	l3992
  3654   0008A8  0A01               	xorlw	1	; case 27
  3655   0008AA  B4D8               	btfsc	status,2,c
  3656   0008AC  EF8F  F003         	goto	l3998
  3657   0008B0  0A07               	xorlw	7	; case 28
  3658   0008B2  B4D8               	btfsc	status,2,c
  3659   0008B4  EFD7  F003         	goto	l4022
  3660   0008B8  EF69  F004         	goto	l431
  3661   0008BC                     l4034:
  3662   0008BC  502B               	movf	motor_RFID@state^0,w,c
  3663                           
  3664                           ; Switch size 1, requested type "simple"
  3665                           ; Number of cases is 2, Range of values is 0 to 1
  3666                           ; switch strategies available:
  3667                           ; Name         Instructions Cycles
  3668                           ; simple_byte            7     4 (average)
  3669                           ;	Chosen strategy is simple_byte
  3670   0008BE  0A00               	xorlw	0	; case 0
  3671   0008C0  B4D8               	btfsc	status,2,c
  3672   0008C2  EF88  F001         	goto	l3822
  3673   0008C6  0A01               	xorlw	1	; case 1
  3674   0008C8  B4D8               	btfsc	status,2,c
  3675   0008CA  EFE7  F003         	goto	l4030
  3676   0008CE  EF69  F004         	goto	l431
  3677   0008D2                     l431:
  3678   0008D2  0012               	return		;funcret
  3679   0008D4                     __end_of_motor_RFID:
  3680                           	callstack 0
  3681                           
  3682 ;; *************** function _setCurrentUser *****************
  3683 ;; Defined at:
  3684 ;;		line 68 in file "TAD_DATOS.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  UID0            1    wreg     unsigned char 
  3687 ;;  UID1            1   17[COMRAM] unsigned char 
  3688 ;;  UID2            1   18[COMRAM] unsigned char 
  3689 ;;  UID3            1   19[COMRAM] unsigned char 
  3690 ;;  UID4            1   20[COMRAM] unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  UID0            1   21[COMRAM] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1
  3702 ;;      Params:         4       0       0
  3703 ;;      Locals:         1       0       0
  3704 ;;      Temps:          0       0       0
  3705 ;;      Totals:         5       0       0
  3706 ;;Total ram usage:        5 bytes
  3707 ;; Hardware stack levels used: 1
  3708 ;; Hardware stack levels required when called: 7
  3709 ;; This function calls:
  3710 ;;		_Terminal_SendString
  3711 ;;		_printLedConfig
  3712 ;;		_printfUID
  3713 ;; This function is called by:
  3714 ;;		_motor_RFID
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text2
  3719   001922                     __ptext2:
  3720                           	callstack 0
  3721   001922                     _setCurrentUser:
  3722                           	callstack 22
  3723                           
  3724                           ;incstack = 0
  3725                           ;setCurrentUser@UID0 stored from wreg
  3726   001922  6E5B               	movwf	setCurrentUser@UID0^0,c
  3727   001924                     
  3728                           ;TAD_DATOS.c: 69:  currentUser[0] = UID0;
  3729   001924  C05B  F03E         	movff	setCurrentUser@UID0,_currentUser
  3730   001928                     
  3731                           ;TAD_DATOS.c: 70:  currentUser[1] = UID1;
  3732   001928  C057  F03F         	movff	setCurrentUser@UID1,_currentUser+1
  3733   00192C                     
  3734                           ;TAD_DATOS.c: 71:  currentUser[2] = UID2;
  3735   00192C  C058  F040         	movff	setCurrentUser@UID2,_currentUser+2
  3736   001930                     
  3737                           ;TAD_DATOS.c: 72:  currentUser[3] = UID3;
  3738   001930  C059  F041         	movff	setCurrentUser@UID3,_currentUser+3
  3739   001934                     
  3740                           ;TAD_DATOS.c: 73:  currentUser[4] = UID4;
  3741   001934  C05A  F042         	movff	setCurrentUser@UID4,_currentUser+4
  3742   001938                     
  3743                           ;TAD_DATOS.c: 74:  new_user = 1;
  3744   001938  0E01               	movlw	1
  3745   00193A  6E16               	movwf	_new_user^0,c
  3746   00193C                     
  3747                           ;TAD_DATOS.c: 75:  Terminal_SendString("Targeta detectada!\r\n\t");
  3748   00193C  0E8D               	movlw	low STR_26
  3749   00193E  6E4B               	movwf	Terminal_SendString@str^0,c
  3750   001940  0E1F               	movlw	high STR_26
  3751   001942  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  3752   001944  EC71  F00D         	call	_Terminal_SendString	;wreg free
  3753   001948                     
  3754                           ;TAD_DATOS.c: 76:  printfUID(currentUser);
  3755   001948  0E3E               	movlw	low _currentUser
  3756   00194A  6E4D               	movwf	printfUID@currentUser^0,c
  3757   00194C  EC83  F007         	call	_printfUID	;wreg free
  3758   001950                     
  3759                           ;TAD_DATOS.c: 77:  Terminal_SendString("\t");
  3760   001950  0EA1               	movlw	low (STR_26+20)
  3761   001952  6E4B               	movwf	Terminal_SendString@str^0,c
  3762   001954  0E1F               	movlw	high (STR_26+20)
  3763   001956  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  3764   001958  EC71  F00D         	call	_Terminal_SendString	;wreg free
  3765   00195C                     
  3766                           ;TAD_DATOS.c: 78:  printLedConfig(configurations[index]);
  3767   00195C  500D               	movf	_index^0,w,c
  3768   00195E  0D06               	mullw	6
  3769   001960  50F3               	movf	243,w,c
  3770   001962  0FC0               	addlw	low _configurations
  3771   001964  6E4D               	movwf	printLedConfig@leds^0,c
  3772   001966  EC3D  F009         	call	_printLedConfig	;wreg free
  3773   00196A  0012               	return		;funcret
  3774   00196C                     __end_of_setCurrentUser:
  3775                           	callstack 0
  3776                           
  3777 ;; *************** function _printLedConfig *****************
  3778 ;; Defined at:
  3779 ;;		line 77 in file "TAD_TERMINAL.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  leds            1    7[COMRAM] PTR unsigned char 
  3782 ;;		 -> configurations(24), 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  val             1   10[COMRAM] unsigned char 
  3785 ;;  i               2   11[COMRAM] int 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1
  3795 ;;      Params:         1       0       0
  3796 ;;      Locals:         5       0       0
  3797 ;;      Temps:          0       0       0
  3798 ;;      Totals:         6       0       0
  3799 ;;Total ram usage:        6 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 6
  3802 ;; This function calls:
  3803 ;;		_Terminal_SendChar
  3804 ;;		_Terminal_SendString
  3805 ;; This function is called by:
  3806 ;;		_setCurrentUser
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text3
  3811   00127A                     __ptext3:
  3812                           	callstack 0
  3813   00127A                     _printLedConfig:
  3814                           	callstack 22
  3815   00127A                     
  3816                           ;TAD_TERMINAL.c: 78:  for (int i = 0; i < 6; i++) {
  3817   00127A  0E00               	movlw	0
  3818   00127C  6E52               	movwf	(printLedConfig@i+1)^0,c
  3819   00127E  0E00               	movlw	0
  3820   001280  6E51               	movwf	printLedConfig@i^0,c
  3821   001282                     l3088:
  3822                           
  3823                           ;TAD_TERMINAL.c: 80:   Terminal_SendChar('L');
  3824   001282  0E4C               	movlw	76
  3825   001284  EC01  F00E         	call	_Terminal_SendChar
  3826                           
  3827                           ;TAD_TERMINAL.c: 81:   Terminal_SendChar('0' + i);
  3828   001288  5051               	movf	printLedConfig@i^0,w,c
  3829   00128A  0F30               	addlw	48
  3830   00128C  EC01  F00E         	call	_Terminal_SendChar
  3831   001290                     
  3832                           ;TAD_TERMINAL.c: 82:   Terminal_SendString(": ");
  3833   001290  0EEA               	movlw	low (STR_8+6)
  3834   001292  6E4B               	movwf	Terminal_SendString@str^0,c
  3835   001294  0E1F               	movlw	high (STR_8+6)
  3836   001296  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  3837   001298  EC71  F00D         	call	_Terminal_SendString	;wreg free
  3838   00129C                     
  3839                           ;TAD_TERMINAL.c: 85:   unsigned char val = leds[i];
  3840   00129C  504D               	movf	printLedConfig@leds^0,w,c
  3841   00129E  2451               	addwf	printLedConfig@i^0,w,c
  3842   0012A0  6ED9               	movwf	fsr2l,c
  3843   0012A2  6ADA               	clrf	fsr2h,c
  3844   0012A4  50DF               	movf	indf2,w,c
  3845   0012A6  6E50               	movwf	printLedConfig@val^0,c
  3846   0012A8                     
  3847                           ;TAD_TERMINAL.c: 86:   Terminal_SendChar(val < 10 ? '0' + val : 'A' + val - 10);
  3848   0012A8  0E09               	movlw	9
  3849   0012AA  6450               	cpfsgt	printLedConfig@val^0,c
  3850   0012AC  EF5A  F009         	goto	u2271
  3851   0012B0  EF5C  F009         	goto	u2270
  3852   0012B4                     u2271:
  3853   0012B4  EF64  F009         	goto	l3098
  3854   0012B8                     u2270:
  3855   0012B8  0E37               	movlw	55
  3856   0012BA  2450               	addwf	printLedConfig@val^0,w,c
  3857   0012BC  6E4E               	movwf	_printLedConfig$867^0,c
  3858   0012BE  6A4F               	clrf	(_printLedConfig$867+1)^0,c
  3859   0012C0  0E00               	movlw	0
  3860   0012C2  224F               	addwfc	(_printLedConfig$867+1)^0,f,c
  3861   0012C4  EF6A  F009         	goto	l3100
  3862   0012C8                     l3098:
  3863   0012C8  0E30               	movlw	48
  3864   0012CA  2450               	addwf	printLedConfig@val^0,w,c
  3865   0012CC  6E4E               	movwf	_printLedConfig$867^0,c
  3866   0012CE  6A4F               	clrf	(_printLedConfig$867+1)^0,c
  3867   0012D0  0E00               	movlw	0
  3868   0012D2  224F               	addwfc	(_printLedConfig$867+1)^0,f,c
  3869   0012D4                     l3100:
  3870   0012D4  504E               	movf	_printLedConfig$867^0,w,c
  3871   0012D6  EC01  F00E         	call	_Terminal_SendChar
  3872   0012DA                     
  3873                           ;TAD_TERMINAL.c: 89:   if (i < 6 - 1) Terminal_SendString(" - ");
  3874   0012DA  BE52               	btfsc	(printLedConfig@i+1)^0,7,c
  3875   0012DC  EF7B  F009         	goto	u2280
  3876   0012E0  5052               	movf	(printLedConfig@i+1)^0,w,c
  3877   0012E2  E107               	bnz	u2281
  3878   0012E4  0E05               	movlw	5
  3879   0012E6  5C51               	subwf	printLedConfig@i^0,w,c
  3880   0012E8  B0D8               	btfsc	status,0,c
  3881   0012EA  EF79  F009         	goto	u2281
  3882   0012EE  EF7B  F009         	goto	u2280
  3883   0012F2                     u2281:
  3884   0012F2  EF81  F009         	goto	l3106
  3885   0012F6                     u2280:
  3886   0012F6  0EF9               	movlw	low STR_13
  3887   0012F8  6E4B               	movwf	Terminal_SendString@str^0,c
  3888   0012FA  0E1F               	movlw	high STR_13
  3889   0012FC  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  3890   0012FE  EC71  F00D         	call	_Terminal_SendString	;wreg free
  3891   001302                     l3106:
  3892                           
  3893                           ;TAD_TERMINAL.c: 90:  }
  3894   001302  4A51               	infsnz	printLedConfig@i^0,f,c
  3895   001304  2A52               	incf	(printLedConfig@i+1)^0,f,c
  3896   001306  BE52               	btfsc	(printLedConfig@i+1)^0,7,c
  3897   001308  EF8F  F009         	goto	u2291
  3898   00130C  5052               	movf	(printLedConfig@i+1)^0,w,c
  3899   00130E  E109               	bnz	u2290
  3900   001310  0E06               	movlw	6
  3901   001312  5C51               	subwf	printLedConfig@i^0,w,c
  3902   001314  A0D8               	btfss	status,0,c
  3903   001316  EF8F  F009         	goto	u2291
  3904   00131A  EF91  F009         	goto	u2290
  3905   00131E                     u2291:
  3906   00131E  EF41  F009         	goto	l3088
  3907   001322                     u2290:
  3908   001322                     
  3909                           ;TAD_TERMINAL.c: 91:  Terminal_SendString("\r\n");
  3910   001322  0EC5               	movlw	low (STR_1+15)
  3911   001324  6E4B               	movwf	Terminal_SendString@str^0,c
  3912   001326  0E1F               	movlw	high (STR_1+15)
  3913   001328  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  3914   00132A  EC71  F00D         	call	_Terminal_SendString	;wreg free
  3915   00132E  0012               	return		;funcret
  3916   001330                     __end_of_printLedConfig:
  3917                           	callstack 0
  3918                           
  3919 ;; *************** function _motor_Write *****************
  3920 ;; Defined at:
  3921 ;;		line 132 in file "TAD_RFID.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;  addr            1    wreg     unsigned char 
  3924 ;;  value           1    6[COMRAM] unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  addr            1    8[COMRAM] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      unsigned char 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1
  3936 ;;      Params:         1       0       0
  3937 ;;      Locals:         1       0       0
  3938 ;;      Temps:          1       0       0
  3939 ;;      Totals:         3       0       0
  3940 ;;Total ram usage:        3 bytes
  3941 ;; Hardware stack levels used: 1
  3942 ;; Hardware stack levels required when called: 4
  3943 ;; This function calls:
  3944 ;;		_delay_us
  3945 ;; This function is called by:
  3946 ;;		_motor_RFID
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text4
  3951   000FF6                     __ptext4:
  3952                           	callstack 0
  3953   000FF6                     _motor_Write:
  3954                           	callstack 25
  3955                           
  3956                           ;incstack = 0
  3957                           ;motor_Write@addr stored from wreg
  3958   000FF6  6E4E               	movwf	motor_Write@addr^0,c
  3959   000FF8                     
  3960                           ;TAD_RFID.c: 133:     static char state_write = 0;;TAD_RFID.c: 134:     static unsigned 
      +                          char ucAddr;;TAD_RFID.c: 135:     static unsigned char ucValue;;TAD_RFID.c: 136:     sta
      +                          tic char bit_count = 0;;TAD_RFID.c: 138:     switch (state_write) {
  3961   000FF8  EF5E  F008         	goto	l3268
  3962   000FFC                     l257:
  3963                           
  3964                           ;TAD_RFID.c: 140:             LATCbits.LATC2 = 0;
  3965   000FFC  948B               	bcf	139,2,c	;volatile
  3966                           
  3967                           ;TAD_RFID.c: 141:             LATCbits.LATC3 = 0;
  3968   000FFE  968B               	bcf	139,3,c	;volatile
  3969   001000                     
  3970                           ;TAD_RFID.c: 142:             ucAddr = ((addr << 1) & 0x7E);
  3971   001000  504E               	movf	motor_Write@addr^0,w,c
  3972   001002  244E               	addwf	motor_Write@addr^0,w,c
  3973   001004  0B7E               	andlw	126
  3974   001006  6E32               	movwf	motor_Write@ucAddr^0,c
  3975   001008                     
  3976                           ;TAD_RFID.c: 143:             ucValue = value;
  3977   001008  C04C  F031         	movff	motor_Write@value,motor_Write@ucValue
  3978   00100C                     
  3979                           ;TAD_RFID.c: 144:             bit_count = 0;
  3980   00100C  6A30               	clrf	motor_Write@bit_count^0,c
  3981   00100E                     
  3982                           ;TAD_RFID.c: 145:             state_write = 1;
  3983   00100E  0E01               	movlw	1
  3984   001010  6E33               	movwf	motor_Write@state_write^0,c
  3985                           
  3986                           ;TAD_RFID.c: 146:             break;
  3987   001012  EF6D  F008         	goto	l3270
  3988   001016                     l3228:
  3989                           
  3990                           ;TAD_RFID.c: 149:             LATCbits.LATC1 = ((ucAddr & 0x80) != 0);
  3991   001016  BE32               	btfsc	motor_Write@ucAddr^0,7,c
  3992   001018  EF10  F008         	goto	u2561
  3993   00101C  EF14  F008         	goto	u2560
  3994   001020                     u2561:
  3995   001020  6A4D               	clrf	??_motor_Write^0,c
  3996   001022  2A4D               	incf	??_motor_Write^0,f,c
  3997   001024  EF15  F008         	goto	u2578
  3998   001028                     u2560:
  3999   001028  6A4D               	clrf	??_motor_Write^0,c
  4000   00102A                     u2578:
  4001   00102A  464D               	rlncf	??_motor_Write^0,f,c
  4002   00102C  508B               	movf	139,w,c	;volatile
  4003   00102E  184D               	xorwf	??_motor_Write^0,w,c
  4004   001030  0BFD               	andlw	-3
  4005   001032  184D               	xorwf	??_motor_Write^0,w,c
  4006   001034  6E8B               	movwf	139,c	;volatile
  4007   001036                     
  4008                           ;TAD_RFID.c: 150:             LATCbits.LATC2 = 1;
  4009   001036  848B               	bsf	139,2,c	;volatile
  4010                           
  4011                           ;TAD_RFID.c: 151:             ucAddr <<= 1;
  4012   001038  90D8               	bcf	status,0,c
  4013   00103A  3632               	rlcf	motor_Write@ucAddr^0,f,c
  4014   00103C                     
  4015                           ;TAD_RFID.c: 152:             delay_us(5);
  4016   00103C  0E05               	movlw	5
  4017   00103E  EC8C  F00D         	call	_delay_us
  4018   001042                     
  4019                           ;TAD_RFID.c: 153:             LATCbits.LATC2 = 0;
  4020   001042  948B               	bcf	139,2,c	;volatile
  4021   001044                     
  4022                           ;TAD_RFID.c: 154:             delay_us(5);
  4023   001044  0E05               	movlw	5
  4024   001046  EC8C  F00D         	call	_delay_us
  4025   00104A                     
  4026                           ;TAD_RFID.c: 155:             bit_count++;
  4027   00104A  2A30               	incf	motor_Write@bit_count^0,f,c
  4028   00104C                     
  4029                           ;TAD_RFID.c: 156:             if (bit_count == 8) {
  4030   00104C  0E08               	movlw	8
  4031   00104E  1830               	xorwf	motor_Write@bit_count^0,w,c
  4032   001050  A4D8               	btfss	status,2,c
  4033   001052  EF2D  F008         	goto	u2581
  4034   001056  EF2F  F008         	goto	u2580
  4035   00105A                     u2581:
  4036   00105A  EF6D  F008         	goto	l3270
  4037   00105E                     u2580:
  4038   00105E                     
  4039                           ;TAD_RFID.c: 157:                 bit_count = 0;
  4040   00105E  6A30               	clrf	motor_Write@bit_count^0,c
  4041   001060                     
  4042                           ;TAD_RFID.c: 158:                 state_write = 2;
  4043   001060  0E02               	movlw	2
  4044   001062  6E33               	movwf	motor_Write@state_write^0,c
  4045   001064  EF6D  F008         	goto	l3270
  4046   001068                     l3246:
  4047                           
  4048                           ;TAD_RFID.c: 163:             LATCbits.LATC1 = ((ucValue & 0x80) != 0);
  4049   001068  BE31               	btfsc	motor_Write@ucValue^0,7,c
  4050   00106A  EF39  F008         	goto	u2591
  4051   00106E  EF3D  F008         	goto	u2590
  4052   001072                     u2591:
  4053   001072  6A4D               	clrf	??_motor_Write^0,c
  4054   001074  2A4D               	incf	??_motor_Write^0,f,c
  4055   001076  EF3E  F008         	goto	u2608
  4056   00107A                     u2590:
  4057   00107A  6A4D               	clrf	??_motor_Write^0,c
  4058   00107C                     u2608:
  4059   00107C  464D               	rlncf	??_motor_Write^0,f,c
  4060   00107E  508B               	movf	139,w,c	;volatile
  4061   001080  184D               	xorwf	??_motor_Write^0,w,c
  4062   001082  0BFD               	andlw	-3
  4063   001084  184D               	xorwf	??_motor_Write^0,w,c
  4064   001086  6E8B               	movwf	139,c	;volatile
  4065   001088                     
  4066                           ;TAD_RFID.c: 164:             LATCbits.LATC2 = 1;
  4067   001088  848B               	bsf	139,2,c	;volatile
  4068                           
  4069                           ;TAD_RFID.c: 165:             ucValue <<= 1;
  4070   00108A  90D8               	bcf	status,0,c
  4071   00108C  3631               	rlcf	motor_Write@ucValue^0,f,c
  4072   00108E                     
  4073                           ;TAD_RFID.c: 166:             delay_us(5);
  4074   00108E  0E05               	movlw	5
  4075   001090  EC8C  F00D         	call	_delay_us
  4076   001094                     
  4077                           ;TAD_RFID.c: 167:             LATCbits.LATC2 = 0;
  4078   001094  948B               	bcf	139,2,c	;volatile
  4079   001096                     
  4080                           ;TAD_RFID.c: 168:             delay_us(5);
  4081   001096  0E05               	movlw	5
  4082   001098  EC8C  F00D         	call	_delay_us
  4083   00109C                     
  4084                           ;TAD_RFID.c: 169:             bit_count++;
  4085   00109C  2A30               	incf	motor_Write@bit_count^0,f,c
  4086   00109E                     
  4087                           ;TAD_RFID.c: 170:             if (bit_count == 8) {
  4088   00109E  0E08               	movlw	8
  4089   0010A0  1830               	xorwf	motor_Write@bit_count^0,w,c
  4090   0010A2  A4D8               	btfss	status,2,c
  4091   0010A4  EF56  F008         	goto	u2611
  4092   0010A8  EF58  F008         	goto	u2610
  4093   0010AC                     u2611:
  4094   0010AC  EF6D  F008         	goto	l3270
  4095   0010B0                     u2610:
  4096   0010B0                     
  4097                           ;TAD_RFID.c: 171:                 LATCbits.LATC3 = 1;
  4098   0010B0  868B               	bsf	139,3,c	;volatile
  4099                           
  4100                           ;TAD_RFID.c: 172:                 LATCbits.LATC2 = 1;
  4101   0010B2  848B               	bsf	139,2,c	;volatile
  4102                           
  4103                           ;TAD_RFID.c: 173:                 state_write = 0;
  4104   0010B4  6A33               	clrf	motor_Write@state_write^0,c
  4105   0010B6                     
  4106                           ;TAD_RFID.c: 174:                 return 1;
  4107   0010B6  0E01               	movlw	1
  4108   0010B8  EF6E  F008         	goto	l263
  4109   0010BC                     l3268:
  4110   0010BC  5033               	movf	motor_Write@state_write^0,w,c
  4111                           
  4112                           ; Switch size 1, requested type "simple"
  4113                           ; Number of cases is 3, Range of values is 0 to 2
  4114                           ; switch strategies available:
  4115                           ; Name         Instructions Cycles
  4116                           ; simple_byte           10     6 (average)
  4117                           ;	Chosen strategy is simple_byte
  4118   0010BE  0A00               	xorlw	0	; case 0
  4119   0010C0  B4D8               	btfsc	status,2,c
  4120   0010C2  EFFE  F007         	goto	l257
  4121   0010C6  0A01               	xorlw	1	; case 1
  4122   0010C8  B4D8               	btfsc	status,2,c
  4123   0010CA  EF0B  F008         	goto	l3228
  4124   0010CE  0A03               	xorlw	3	; case 2
  4125   0010D0  B4D8               	btfsc	status,2,c
  4126   0010D2  EF34  F008         	goto	l3246
  4127   0010D6  EF6D  F008         	goto	l3270
  4128   0010DA                     l3270:
  4129                           
  4130                           ;TAD_RFID.c: 178:     return 0;
  4131   0010DA  0E00               	movlw	0
  4132   0010DC                     l263:
  4133   0010DC  0012               	return		;funcret
  4134   0010DE                     __end_of_motor_Write:
  4135                           	callstack 0
  4136                           
  4137 ;; *************** function _motor_Read *****************
  4138 ;; Defined at:
  4139 ;;		line 182 in file "TAD_RFID.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  addr            1    wreg     unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  addr            1    7[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      unsigned char 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1
  4153 ;;      Params:         0       0       0
  4154 ;;      Locals:         1       0       0
  4155 ;;      Temps:          1       0       0
  4156 ;;      Totals:         2       0       0
  4157 ;;Total ram usage:        2 bytes
  4158 ;; Hardware stack levels used: 1
  4159 ;; Hardware stack levels required when called: 4
  4160 ;; This function calls:
  4161 ;;		_delay_us
  4162 ;; This function is called by:
  4163 ;;		_motor_RFID
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text5
  4168   0010DE                     __ptext5:
  4169                           	callstack 0
  4170   0010DE                     _motor_Read:
  4171                           	callstack 25
  4172                           
  4173                           ;incstack = 0
  4174                           ;motor_Read@addr stored from wreg
  4175   0010DE  6E4D               	movwf	motor_Read@addr^0,c
  4176   0010E0                     
  4177                           ;TAD_RFID.c: 183:     static char state_read = 0;;TAD_RFID.c: 184:     static char bit_c
      +                          ount = 0;;TAD_RFID.c: 185:     static unsigned char ucAddr;;TAD_RFID.c: 186:     static 
      +                          unsigned char ucResult;;TAD_RFID.c: 188:     switch(state_read) {
  4178   0010E0  EFCA  F008         	goto	l1960
  4179   0010E4                     l275:
  4180                           
  4181                           ;TAD_RFID.c: 190:             LATCbits.LATC2 = 0;
  4182   0010E4  948B               	bcf	139,2,c	;volatile
  4183                           
  4184                           ;TAD_RFID.c: 191:             LATCbits.LATC3 = 0;
  4185   0010E6  968B               	bcf	139,3,c	;volatile
  4186   0010E8                     
  4187                           ;TAD_RFID.c: 192:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  4188   0010E8  504D               	movf	motor_Read@addr^0,w,c
  4189   0010EA  244D               	addwf	motor_Read@addr^0,w,c
  4190   0010EC  0B7E               	andlw	126
  4191   0010EE  0980               	iorlw	128
  4192   0010F0  6E2D               	movwf	motor_Read@ucAddr^0,c
  4193   0010F2                     
  4194                           ;TAD_RFID.c: 193:             ucResult = 0;
  4195   0010F2  6A2C               	clrf	motor_Read@ucResult^0,c
  4196   0010F4                     
  4197                           ;TAD_RFID.c: 194:             bit_count = 0;
  4198   0010F4  6A2E               	clrf	motor_Read@bit_count^0,c
  4199   0010F6                     
  4200                           ;TAD_RFID.c: 195:             state_read = 1;
  4201   0010F6  0E01               	movlw	1
  4202   0010F8  6E2F               	movwf	motor_Read@state_read^0,c
  4203                           
  4204                           ;TAD_RFID.c: 196:             break;
  4205   0010FA  EFD9  F008         	goto	l1962
  4206   0010FE                     l1922:
  4207                           
  4208                           ;TAD_RFID.c: 199:             LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4209   0010FE  BE2D               	btfsc	motor_Read@ucAddr^0,7,c
  4210   001100  EF84  F008         	goto	u761
  4211   001104  EF88  F008         	goto	u760
  4212   001108                     u761:
  4213   001108  6A4C               	clrf	??_motor_Read^0,c
  4214   00110A  2A4C               	incf	??_motor_Read^0,f,c
  4215   00110C  EF89  F008         	goto	u778
  4216   001110                     u760:
  4217   001110  6A4C               	clrf	??_motor_Read^0,c
  4218   001112                     u778:
  4219   001112  464C               	rlncf	??_motor_Read^0,f,c
  4220   001114  508B               	movf	139,w,c	;volatile
  4221   001116  184C               	xorwf	??_motor_Read^0,w,c
  4222   001118  0BFD               	andlw	-3
  4223   00111A  184C               	xorwf	??_motor_Read^0,w,c
  4224   00111C  6E8B               	movwf	139,c	;volatile
  4225   00111E                     
  4226                           ;TAD_RFID.c: 200:             LATCbits.LATC2 = 1;
  4227   00111E  848B               	bsf	139,2,c	;volatile
  4228   001120                     
  4229                           ;TAD_RFID.c: 201:             delay_us(5);
  4230   001120  0E05               	movlw	5
  4231   001122  EC8C  F00D         	call	_delay_us
  4232   001126                     
  4233                           ;TAD_RFID.c: 202:             ucAddr <<= 1;
  4234   001126  90D8               	bcf	status,0,c
  4235   001128  362D               	rlcf	motor_Read@ucAddr^0,f,c
  4236   00112A                     
  4237                           ;TAD_RFID.c: 203:             LATCbits.LATC2 = 0;
  4238   00112A  948B               	bcf	139,2,c	;volatile
  4239                           
  4240                           ;TAD_RFID.c: 204:             delay_us(5);
  4241   00112C  0E05               	movlw	5
  4242   00112E  EC8C  F00D         	call	_delay_us
  4243   001132                     
  4244                           ;TAD_RFID.c: 205:             bit_count++;
  4245   001132  2A2E               	incf	motor_Read@bit_count^0,f,c
  4246   001134                     
  4247                           ;TAD_RFID.c: 207:             if (bit_count >= 8) {
  4248   001134  0E07               	movlw	7
  4249   001136  642E               	cpfsgt	motor_Read@bit_count^0,c
  4250   001138  EFA0  F008         	goto	u781
  4251   00113C  EFA2  F008         	goto	u780
  4252   001140                     u781:
  4253   001140  EFD9  F008         	goto	l1962
  4254   001144                     u780:
  4255   001144                     
  4256                           ;TAD_RFID.c: 208:                 bit_count = 0;
  4257   001144  6A2E               	clrf	motor_Read@bit_count^0,c
  4258   001146                     
  4259                           ;TAD_RFID.c: 209:                 state_read = 2;
  4260   001146  0E02               	movlw	2
  4261   001148  6E2F               	movwf	motor_Read@state_read^0,c
  4262   00114A  EFD9  F008         	goto	l1962
  4263   00114E                     l279:
  4264                           
  4265                           ;TAD_RFID.c: 214:             LATCbits.LATC2 = 1;
  4266   00114E  848B               	bsf	139,2,c	;volatile
  4267   001150                     
  4268                           ;TAD_RFID.c: 215:             delay_us(5);
  4269   001150  0E05               	movlw	5
  4270   001152  EC8C  F00D         	call	_delay_us
  4271   001156                     
  4272                           ;TAD_RFID.c: 216:             ucResult <<= 1;
  4273   001156  90D8               	bcf	status,0,c
  4274   001158  362C               	rlcf	motor_Read@ucResult^0,f,c
  4275   00115A                     
  4276                           ;TAD_RFID.c: 217:             ucResult |= PORTCbits.RC0;
  4277   00115A  B082               	btfsc	130,0,c	;volatile
  4278   00115C  EFB2  F008         	goto	u791
  4279   001160  EFB5  F008         	goto	u790
  4280   001164                     u791:
  4281   001164  0E01               	movlw	1
  4282   001166  EFB6  F008         	goto	u796
  4283   00116A                     u790:
  4284   00116A  0E00               	movlw	0
  4285   00116C                     u796:
  4286   00116C  122C               	iorwf	motor_Read@ucResult^0,f,c
  4287   00116E                     
  4288                           ;TAD_RFID.c: 218:             LATCbits.LATC2 = 0;
  4289   00116E  948B               	bcf	139,2,c	;volatile
  4290                           
  4291                           ;TAD_RFID.c: 219:             delay_us(5);
  4292   001170  0E05               	movlw	5
  4293   001172  EC8C  F00D         	call	_delay_us
  4294   001176                     
  4295                           ;TAD_RFID.c: 220:             bit_count++;
  4296   001176  2A2E               	incf	motor_Read@bit_count^0,f,c
  4297   001178                     
  4298                           ;TAD_RFID.c: 222:             if (bit_count >= 8) {
  4299   001178  0E07               	movlw	7
  4300   00117A  642E               	cpfsgt	motor_Read@bit_count^0,c
  4301   00117C  EFC2  F008         	goto	u801
  4302   001180  EFC4  F008         	goto	u800
  4303   001184                     u801:
  4304   001184  EFD9  F008         	goto	l1962
  4305   001188                     u800:
  4306   001188                     
  4307                           ;TAD_RFID.c: 223:                 LATCbits.LATC3 = 1;
  4308   001188  868B               	bsf	139,3,c	;volatile
  4309                           
  4310                           ;TAD_RFID.c: 224:                 LATCbits.LATC2 = 1;
  4311   00118A  848B               	bsf	139,2,c	;volatile
  4312                           
  4313                           ;TAD_RFID.c: 225:                 state_read = 0;
  4314   00118C  6A2F               	clrf	motor_Read@state_read^0,c
  4315   00118E                     
  4316                           ;TAD_RFID.c: 226:                 return ucResult;
  4317   00118E  502C               	movf	motor_Read@ucResult^0,w,c
  4318   001190  EFDA  F008         	goto	l281
  4319   001194                     l1960:
  4320   001194  502F               	movf	motor_Read@state_read^0,w,c
  4321                           
  4322                           ; Switch size 1, requested type "simple"
  4323                           ; Number of cases is 3, Range of values is 0 to 2
  4324                           ; switch strategies available:
  4325                           ; Name         Instructions Cycles
  4326                           ; simple_byte           10     6 (average)
  4327                           ;	Chosen strategy is simple_byte
  4328   001196  0A00               	xorlw	0	; case 0
  4329   001198  B4D8               	btfsc	status,2,c
  4330   00119A  EF72  F008         	goto	l275
  4331   00119E  0A01               	xorlw	1	; case 1
  4332   0011A0  B4D8               	btfsc	status,2,c
  4333   0011A2  EF7F  F008         	goto	l1922
  4334   0011A6  0A03               	xorlw	3	; case 2
  4335   0011A8  B4D8               	btfsc	status,2,c
  4336   0011AA  EFA7  F008         	goto	l279
  4337   0011AE  EFD9  F008         	goto	l1962
  4338   0011B2                     l1962:
  4339                           
  4340                           ;TAD_RFID.c: 230:     return 0;
  4341   0011B2  0E00               	movlw	0
  4342   0011B4                     l281:
  4343   0011B4  0012               	return		;funcret
  4344   0011B6                     __end_of_motor_Read:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _motorTerminal *****************
  4348 ;; Defined at:
  4349 ;;		line 94 in file "TAD_TERMINAL.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  currentUser     1   17[COMRAM] PTR unsigned char 
  4354 ;;		 -> NULL(0), currentUser(5), 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1
  4364 ;;      Params:         0       0       0
  4365 ;;      Locals:         1       0       0
  4366 ;;      Temps:          0       0       0
  4367 ;;      Totals:         1       0       0
  4368 ;;Total ram usage:        1 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; Hardware stack levels required when called: 7
  4371 ;; This function calls:
  4372 ;;		_Terminal_RXAvailable
  4373 ;;		_Terminal_ReceiveChar
  4374 ;;		_Terminal_SendChar
  4375 ;;		_Terminal_SendString
  4376 ;;		_getActualUID
  4377 ;;		_printfUID
  4378 ;;		_saveHourToData
  4379 ;;		_showAllConfigurations
  4380 ;;		_showMenu
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text6
  4387   000C92                     __ptext6:
  4388                           	callstack 0
  4389   000C92                     _motorTerminal:
  4390                           	callstack 23
  4391   000C92                     
  4392                           ;TAD_TERMINAL.c: 95:  static char state = 0;;TAD_TERMINAL.c: 97:  switch(state) {
  4393   000C92  EFF7  F006         	goto	l3686
  4394   000C96                     l3622:
  4395                           
  4396                           ;TAD_TERMINAL.c: 99:    if (Terminal_ReceiveChar() == 0x1B) {
  4397   000C96  ECA3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4398   000C9A  0A1B               	xorlw	27
  4399   000C9C  A4D8               	btfss	status,2,c
  4400   000C9E  EF53  F006         	goto	u2921
  4401   000CA2  EF55  F006         	goto	u2920
  4402   000CA6                     u2921:
  4403   000CA6  EF59  F006         	goto	l3628
  4404   000CAA                     u2920:
  4405   000CAA                     
  4406                           ;TAD_TERMINAL.c: 100:     showMenu();
  4407   000CAA  EC8F  F00B         	call	_showMenu	;wreg free
  4408   000CAE                     
  4409                           ;TAD_TERMINAL.c: 101:     state = 1;
  4410   000CAE  0E01               	movlw	1
  4411   000CB0  6E19               	movwf	motorTerminal@state^0,c
  4412   000CB2                     l3628:
  4413                           
  4414                           ;TAD_TERMINAL.c: 104:    if (hashtag_pressed == 1){
  4415   000CB2  041A               	decf	_hashtag_pressed^0,w,c
  4416   000CB4  A4D8               	btfss	status,2,c
  4417   000CB6  EF5F  F006         	goto	u2931
  4418   000CBA  EF61  F006         	goto	u2930
  4419   000CBE                     u2931:
  4420   000CBE  EF06  F007         	goto	l641
  4421   000CC2                     u2930:
  4422   000CC2                     
  4423                           ;TAD_TERMINAL.c: 105:     showMenu();
  4424   000CC2  EC8F  F00B         	call	_showMenu	;wreg free
  4425   000CC6                     
  4426                           ;TAD_TERMINAL.c: 106:     state = 1;
  4427   000CC6  0E01               	movlw	1
  4428   000CC8  6E19               	movwf	motorTerminal@state^0,c
  4429   000CCA                     
  4430                           ;TAD_TERMINAL.c: 107:     hashtag_pressed = 0;
  4431   000CCA  6A1A               	clrf	_hashtag_pressed^0,c
  4432   000CCC  EF06  F007         	goto	l641
  4433   000CD0                     l3636:
  4434                           
  4435                           ;TAD_TERMINAL.c: 111:    if(Terminal_RXAvailable() == 1){
  4436   000CD0  EC4D  F00E         	call	_Terminal_RXAvailable	;wreg free
  4437   000CD4  06E8               	decf	wreg,f,c
  4438   000CD6  A4D8               	btfss	status,2,c
  4439   000CD8  EF70  F006         	goto	u2941
  4440   000CDC  EF72  F006         	goto	u2940
  4441   000CE0                     u2941:
  4442   000CE0  EF06  F007         	goto	l641
  4443   000CE4                     u2940:
  4444   000CE4                     
  4445                           ;TAD_TERMINAL.c: 112:     if (Terminal_ReceiveChar() == '1') {
  4446   000CE4  ECA3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4447   000CE8  0A31               	xorlw	49
  4448   000CEA  A4D8               	btfss	status,2,c
  4449   000CEC  EF7A  F006         	goto	u2951
  4450   000CF0  EF7C  F006         	goto	u2950
  4451   000CF4                     u2951:
  4452   000CF4  EF92  F006         	goto	l3650
  4453   000CF8                     u2950:
  4454   000CF8                     
  4455                           ;TAD_TERMINAL.c: 113:      Terminal_SendString("\r\n");
  4456   000CF8  0EC5               	movlw	low (STR_1+15)
  4457   000CFA  6E4B               	movwf	Terminal_SendString@str^0,c
  4458   000CFC  0E1F               	movlw	high (STR_1+15)
  4459   000CFE  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4460   000D00  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4461   000D04                     
  4462                           ;TAD_TERMINAL.c: 114:      unsigned char *currentUser = getActualUID();
  4463   000D04  ECC0  F00B         	call	_getActualUID	;wreg free
  4464   000D08  6E57               	movwf	motorTerminal@currentUser^0,c
  4465   000D0A                     
  4466                           ;TAD_TERMINAL.c: 118:      printfUID(currentUser);
  4467   000D0A  C057  F04D         	movff	motorTerminal@currentUser,printfUID@currentUser
  4468   000D0E  EC83  F007         	call	_printfUID	;wreg free
  4469   000D12                     
  4470                           ;TAD_TERMINAL.c: 120:      Terminal_SendString("\r\n");
  4471   000D12  0EC5               	movlw	low (STR_1+15)
  4472   000D14  6E4B               	movwf	Terminal_SendString@str^0,c
  4473   000D16  0E1F               	movlw	high (STR_1+15)
  4474   000D18  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4475   000D1A  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4476   000D1E                     l3648:
  4477                           
  4478                           ;TAD_TERMINAL.c: 121:      state = 0;
  4479   000D1E  6A19               	clrf	motorTerminal@state^0,c
  4480                           
  4481                           ;TAD_TERMINAL.c: 122:     }
  4482   000D20  EF06  F007         	goto	l641
  4483   000D24                     l3650:
  4484   000D24  ECA3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4485   000D28  0A32               	xorlw	50
  4486   000D2A  A4D8               	btfss	status,2,c
  4487   000D2C  EF9A  F006         	goto	u2961
  4488   000D30  EF9C  F006         	goto	u2960
  4489   000D34                     u2961:
  4490   000D34  EFA6  F006         	goto	l3658
  4491   000D38                     u2960:
  4492   000D38                     
  4493                           ;TAD_TERMINAL.c: 124:      Terminal_SendString("\r\n");
  4494   000D38  0EC5               	movlw	low (STR_1+15)
  4495   000D3A  6E4B               	movwf	Terminal_SendString@str^0,c
  4496   000D3C  0E1F               	movlw	high (STR_1+15)
  4497   000D3E  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4498   000D40  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4499   000D44                     
  4500                           ;TAD_TERMINAL.c: 125:      showAllConfigurations();
  4501   000D44  EC3D  F00A         	call	_showAllConfigurations	;wreg free
  4502   000D48  EF8F  F006         	goto	l3648
  4503   000D4C                     l3658:
  4504   000D4C  ECA3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4505   000D50  0A33               	xorlw	51
  4506   000D52  A4D8               	btfss	status,2,c
  4507   000D54  EFAE  F006         	goto	u2971
  4508   000D58  EFB0  F006         	goto	u2970
  4509   000D5C                     u2971:
  4510   000D5C  EFC0  F006         	goto	l3664
  4511   000D60                     u2970:
  4512   000D60                     
  4513                           ;TAD_TERMINAL.c: 129:      Terminal_SendString("\r\n");
  4514   000D60  0EC5               	movlw	low (STR_1+15)
  4515   000D62  6E4B               	movwf	Terminal_SendString@str^0,c
  4516   000D64  0E1F               	movlw	high (STR_1+15)
  4517   000D66  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4518   000D68  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4519                           
  4520                           ;TAD_TERMINAL.c: 130:      Terminal_SendString("Introduce la hora actual(HHMM): ");
  4521   000D6C  0E34               	movlw	low STR_19
  4522   000D6E  6E4B               	movwf	Terminal_SendString@str^0,c
  4523   000D70  0E1F               	movlw	high STR_19
  4524   000D72  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4525   000D74  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4526   000D78                     
  4527                           ;TAD_TERMINAL.c: 131:      state = 2;
  4528   000D78  0E02               	movlw	2
  4529   000D7A  6E19               	movwf	motorTerminal@state^0,c
  4530                           
  4531                           ;TAD_TERMINAL.c: 132:     }
  4532   000D7C  EF06  F007         	goto	l641
  4533   000D80                     l3664:
  4534                           
  4535                           ;TAD_TERMINAL.c: 134:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  4536   000D80  0ED1               	movlw	low STR_20
  4537   000D82  6E4B               	movwf	Terminal_SendString@str^0,c
  4538   000D84  0E1E               	movlw	high STR_20
  4539   000D86  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4540   000D88  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4541   000D8C  EF8F  F006         	goto	l3648
  4542   000D90                     l3668:
  4543                           
  4544                           ;TAD_TERMINAL.c: 140:    if(Terminal_RXAvailable() == 1){
  4545   000D90  EC4D  F00E         	call	_Terminal_RXAvailable	;wreg free
  4546   000D94  06E8               	decf	wreg,f,c
  4547   000D96  A4D8               	btfss	status,2,c
  4548   000D98  EFD0  F006         	goto	u2981
  4549   000D9C  EFD2  F006         	goto	u2980
  4550   000DA0                     u2981:
  4551   000DA0  EF06  F007         	goto	l641
  4552   000DA4                     u2980:
  4553   000DA4                     
  4554                           ;TAD_TERMINAL.c: 141:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 142:   
      +                            static char index = 0;;TAD_TERMINAL.c: 143:     hour[index] = Terminal_ReceiveChar();
  4555   000DA4  5018               	movf	motorTerminal@index^0,w,c
  4556   000DA6  0F68               	addlw	low motorTerminal@hour
  4557   000DA8  6ED9               	movwf	fsr2l,c
  4558   000DAA  6ADA               	clrf	fsr2h,c
  4559   000DAC  ECA3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4560   000DB0  6EDF               	movwf	indf2,c
  4561                           
  4562                           ;TAD_TERMINAL.c: 144:     Terminal_SendChar(hour[index]);
  4563   000DB2  5018               	movf	motorTerminal@index^0,w,c
  4564   000DB4  0F68               	addlw	low motorTerminal@hour
  4565   000DB6  6ED9               	movwf	fsr2l,c
  4566   000DB8  6ADA               	clrf	fsr2h,c
  4567   000DBA  50DF               	movf	indf2,w,c
  4568   000DBC  EC01  F00E         	call	_Terminal_SendChar
  4569   000DC0                     
  4570                           ;TAD_TERMINAL.c: 145:     index++;
  4571   000DC0  2A18               	incf	motorTerminal@index^0,f,c
  4572   000DC2                     
  4573                           ;TAD_TERMINAL.c: 146:     if(index == 4){
  4574   000DC2  0E04               	movlw	4
  4575   000DC4  1818               	xorwf	motorTerminal@index^0,w,c
  4576   000DC6  A4D8               	btfss	status,2,c
  4577   000DC8  EFE8  F006         	goto	u2991
  4578   000DCC  EFEA  F006         	goto	u2990
  4579   000DD0                     u2991:
  4580   000DD0  EF06  F007         	goto	l641
  4581   000DD4                     u2990:
  4582   000DD4                     
  4583                           ;TAD_TERMINAL.c: 147:      saveHourToData(hour);
  4584   000DD4  0E68               	movlw	low motorTerminal@hour
  4585   000DD6  6E47               	movwf	saveHourToData@hour^0,c
  4586   000DD8  EC56  F00D         	call	_saveHourToData	;wreg free
  4587   000DDC                     
  4588                           ;TAD_TERMINAL.c: 148:      Terminal_SendString("\r\nHora introduida correctament\r\n");
  4589   000DDC  0E13               	movlw	low STR_21
  4590   000DDE  6E4B               	movwf	Terminal_SendString@str^0,c
  4591   000DE0  0E1F               	movlw	high STR_21
  4592   000DE2  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4593   000DE4  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4594   000DE8                     
  4595                           ;TAD_TERMINAL.c: 149:      index = 0;
  4596   000DE8  6A18               	clrf	motorTerminal@index^0,c
  4597   000DEA  EF8F  F006         	goto	l3648
  4598   000DEE                     l3686:
  4599   000DEE  5019               	movf	motorTerminal@state^0,w,c
  4600                           
  4601                           ; Switch size 1, requested type "simple"
  4602                           ; Number of cases is 3, Range of values is 0 to 2
  4603                           ; switch strategies available:
  4604                           ; Name         Instructions Cycles
  4605                           ; simple_byte           10     6 (average)
  4606                           ;	Chosen strategy is simple_byte
  4607   000DF0  0A00               	xorlw	0	; case 0
  4608   000DF2  B4D8               	btfsc	status,2,c
  4609   000DF4  EF4B  F006         	goto	l3622
  4610   000DF8  0A01               	xorlw	1	; case 1
  4611   000DFA  B4D8               	btfsc	status,2,c
  4612   000DFC  EF68  F006         	goto	l3636
  4613   000E00  0A03               	xorlw	3	; case 2
  4614   000E02  B4D8               	btfsc	status,2,c
  4615   000E04  EFC8  F006         	goto	l3668
  4616   000E08  EF06  F007         	goto	l641
  4617   000E0C                     l641:
  4618   000E0C  0012               	return		;funcret
  4619   000E0E                     __end_of_motorTerminal:
  4620                           	callstack 0
  4621                           
  4622 ;; *************** function _showMenu *****************
  4623 ;; Defined at:
  4624 ;;		line 45 in file "TAD_TERMINAL.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1
  4638 ;;      Params:         0       0       0
  4639 ;;      Locals:         0       0       0
  4640 ;;      Temps:          0       0       0
  4641 ;;      Totals:         0       0       0
  4642 ;;Total ram usage:        0 bytes
  4643 ;; Hardware stack levels used: 1
  4644 ;; Hardware stack levels required when called: 6
  4645 ;; This function calls:
  4646 ;;		_Terminal_SendString
  4647 ;; This function is called by:
  4648 ;;		_motorTerminal
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text7
  4653   00171E                     __ptext7:
  4654                           	callstack 0
  4655   00171E                     _showMenu:
  4656                           	callstack 23
  4657   00171E                     
  4658                           ;TAD_TERMINAL.c: 46:  Terminal_SendString("---------------\r\n");
  4659   00171E  0EB6               	movlw	low STR_1
  4660   001720  6E4B               	movwf	Terminal_SendString@str^0,c
  4661   001722  0E1F               	movlw	high STR_1
  4662   001724  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4663   001726  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4664                           
  4665                           ;TAD_TERMINAL.c: 47:  Terminal_SendString("MenÃº principal\r\n");
  4666   00172A  0EC8               	movlw	low STR_2
  4667   00172C  6E4B               	movwf	Terminal_SendString@str^0,c
  4668   00172E  0E1F               	movlw	high STR_2
  4669   001730  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4670   001732  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4671                           
  4672                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("---------------\r\n");
  4673   001736  0EB6               	movlw	low STR_1
  4674   001738  6E4B               	movwf	Terminal_SendString@str^0,c
  4675   00173A  0E1F               	movlw	high STR_1
  4676   00173C  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4677   00173E  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4678                           
  4679                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("Tria una opciÃ³:\r\n");
  4680   001742  0EA3               	movlw	low STR_4
  4681   001744  6E4B               	movwf	Terminal_SendString@str^0,c
  4682   001746  0E1F               	movlw	high STR_4
  4683   001748  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4684   00174A  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4685                           
  4686                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  4687   00174E  0E72               	movlw	low STR_5
  4688   001750  6E4B               	movwf	Terminal_SendString@str^0,c
  4689   001752  0E1F               	movlw	high STR_5
  4690   001754  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4691   001756  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4692                           
  4693                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  4694   00175A  0E55               	movlw	low STR_6
  4695   00175C  6E4B               	movwf	Terminal_SendString@str^0,c
  4696   00175E  0E1F               	movlw	high STR_6
  4697   001760  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4698   001762  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4699                           
  4700                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  4701   001766  0EF2               	movlw	low STR_7
  4702   001768  6E4B               	movwf	Terminal_SendString@str^0,c
  4703   00176A  0E1E               	movlw	high STR_7
  4704   00176C  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4705   00176E  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4706                           
  4707                           ;TAD_TERMINAL.c: 53:  Terminal_SendString("OpciÃ³: ");
  4708   001772  0EE4               	movlw	low STR_8
  4709   001774  6E4B               	movwf	Terminal_SendString@str^0,c
  4710   001776  0E1F               	movlw	high STR_8
  4711   001778  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4712   00177A  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4713   00177E  0012               	return		;funcret
  4714   001780                     __end_of_showMenu:
  4715                           	callstack 0
  4716                           
  4717 ;; *************** function _showAllConfigurations *****************
  4718 ;; Defined at:
  4719 ;;		line 41 in file "TAD_DATOS.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  j               2    7[COMRAM] int 
  4724 ;;  i               2    9[COMRAM] int 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1
  4734 ;;      Params:         0       0       0
  4735 ;;      Locals:         4       0       0
  4736 ;;      Temps:          0       0       0
  4737 ;;      Totals:         4       0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used: 1
  4740 ;; Hardware stack levels required when called: 6
  4741 ;; This function calls:
  4742 ;;		_Terminal_SendChar
  4743 ;;		_Terminal_SendString
  4744 ;; This function is called by:
  4745 ;;		_motorTerminal
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text8
  4750   00147A                     __ptext8:
  4751                           	callstack 0
  4752   00147A                     _showAllConfigurations:
  4753                           	callstack 23
  4754   00147A                     
  4755                           ;TAD_DATOS.c: 42:     for (int i = 0; i < 4; i++) {
  4756   00147A  0E00               	movlw	0
  4757   00147C  6E50               	movwf	(showAllConfigurations@i+1)^0,c
  4758   00147E  0E00               	movlw	0
  4759   001480  6E4F               	movwf	showAllConfigurations@i^0,c
  4760   001482                     l3390:
  4761                           
  4762                           ;TAD_DATOS.c: 43:         Terminal_SendString("User ");
  4763   001482  0EED               	movlw	low STR_22
  4764   001484  6E4B               	movwf	Terminal_SendString@str^0,c
  4765   001486  0E1F               	movlw	high STR_22
  4766   001488  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4767   00148A  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4768   00148E                     
  4769                           ;TAD_DATOS.c: 44:         Terminal_SendChar('1' + i);
  4770   00148E  504F               	movf	showAllConfigurations@i^0,w,c
  4771   001490  0F31               	addlw	49
  4772   001492  EC01  F00E         	call	_Terminal_SendChar
  4773   001496                     
  4774                           ;TAD_DATOS.c: 45:         Terminal_SendString(" Config: ");
  4775   001496  0EDA               	movlw	low STR_23
  4776   001498  6E4B               	movwf	Terminal_SendString@str^0,c
  4777   00149A  0E1F               	movlw	high STR_23
  4778   00149C  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4779   00149E  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4780   0014A2                     
  4781                           ;TAD_DATOS.c: 47:         for (int j = 0; j < 6; j++) {
  4782   0014A2  0E00               	movlw	0
  4783   0014A4  6E4E               	movwf	(showAllConfigurations@j+1)^0,c
  4784   0014A6  0E00               	movlw	0
  4785   0014A8  6E4D               	movwf	showAllConfigurations@j^0,c
  4786   0014AA                     l3402:
  4787                           
  4788                           ;TAD_DATOS.c: 49:             Terminal_SendChar('0' + configurations[i][j]);
  4789   0014AA  504F               	movf	showAllConfigurations@i^0,w,c
  4790   0014AC  0D06               	mullw	6
  4791   0014AE  50F3               	movf	243,w,c
  4792   0014B0  0FC0               	addlw	low _configurations
  4793   0014B2  244D               	addwf	showAllConfigurations@j^0,w,c
  4794   0014B4  6ED9               	movwf	fsr2l,c
  4795   0014B6  6ADA               	clrf	fsr2h,c
  4796   0014B8  50DF               	movf	indf2,w,c
  4797   0014BA  0F30               	addlw	48
  4798   0014BC  EC01  F00E         	call	_Terminal_SendChar
  4799   0014C0                     
  4800                           ;TAD_DATOS.c: 50:             Terminal_SendString(" ");
  4801   0014C0  0EFB               	movlw	low (STR_13+2)
  4802   0014C2  6E4B               	movwf	Terminal_SendString@str^0,c
  4803   0014C4  0E1F               	movlw	high (STR_13+2)
  4804   0014C6  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4805   0014C8  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4806   0014CC                     
  4807                           ;TAD_DATOS.c: 51:         }
  4808   0014CC  4A4D               	infsnz	showAllConfigurations@j^0,f,c
  4809   0014CE  2A4E               	incf	(showAllConfigurations@j+1)^0,f,c
  4810   0014D0  BE4E               	btfsc	(showAllConfigurations@j+1)^0,7,c
  4811   0014D2  EF74  F00A         	goto	u2711
  4812   0014D6  504E               	movf	(showAllConfigurations@j+1)^0,w,c
  4813   0014D8  E109               	bnz	u2710
  4814   0014DA  0E06               	movlw	6
  4815   0014DC  5C4D               	subwf	showAllConfigurations@j^0,w,c
  4816   0014DE  A0D8               	btfss	status,0,c
  4817   0014E0  EF74  F00A         	goto	u2711
  4818   0014E4  EF76  F00A         	goto	u2710
  4819   0014E8                     u2711:
  4820   0014E8  EF55  F00A         	goto	l3402
  4821   0014EC                     u2710:
  4822   0014EC                     
  4823                           ;TAD_DATOS.c: 52:         Terminal_SendString("\r\n");
  4824   0014EC  0EC5               	movlw	low (STR_1+15)
  4825   0014EE  6E4B               	movwf	Terminal_SendString@str^0,c
  4826   0014F0  0E1F               	movlw	high (STR_1+15)
  4827   0014F2  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4828   0014F4  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4829   0014F8                     
  4830                           ;TAD_DATOS.c: 53:     }
  4831   0014F8  4A4F               	infsnz	showAllConfigurations@i^0,f,c
  4832   0014FA  2A50               	incf	(showAllConfigurations@i+1)^0,f,c
  4833   0014FC  BE50               	btfsc	(showAllConfigurations@i+1)^0,7,c
  4834   0014FE  EF8A  F00A         	goto	u2721
  4835   001502  5050               	movf	(showAllConfigurations@i+1)^0,w,c
  4836   001504  E109               	bnz	u2720
  4837   001506  0E04               	movlw	4
  4838   001508  5C4F               	subwf	showAllConfigurations@i^0,w,c
  4839   00150A  A0D8               	btfss	status,0,c
  4840   00150C  EF8A  F00A         	goto	u2721
  4841   001510  EF8C  F00A         	goto	u2720
  4842   001514                     u2721:
  4843   001514  EF41  F00A         	goto	l3390
  4844   001518                     u2720:
  4845   001518  0012               	return		;funcret
  4846   00151A                     __end_of_showAllConfigurations:
  4847                           	callstack 0
  4848                           
  4849 ;; *************** function _saveHourToData *****************
  4850 ;; Defined at:
  4851 ;;		line 61 in file "TAD_DATOS.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  hour            1    1[COMRAM] PTR unsigned char 
  4854 ;;		 -> motorTerminal@hour(4), 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1
  4866 ;;      Params:         1       0       0
  4867 ;;      Locals:         0       0       0
  4868 ;;      Temps:          0       0       0
  4869 ;;      Totals:         1       0       0
  4870 ;;Total ram usage:        1 bytes
  4871 ;; Hardware stack levels used: 1
  4872 ;; Hardware stack levels required when called: 3
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_motorTerminal
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text9
  4881   001AAC                     __ptext9:
  4882                           	callstack 0
  4883   001AAC                     _saveHourToData:
  4884                           	callstack 26
  4885   001AAC                     
  4886                           ;TAD_DATOS.c: 62:     currentTime[0] = hour[0];
  4887   001AAC  5047               	movf	saveHourToData@hour^0,w,c
  4888   001AAE  6ED9               	movwf	fsr2l,c
  4889   001AB0  6ADA               	clrf	fsr2h,c
  4890   001AB2  50DF               	movf	indf2,w,c
  4891   001AB4  6E64               	movwf	_currentTime^0,c
  4892   001AB6                     
  4893                           ;TAD_DATOS.c: 63:     currentTime[1] = hour[1];
  4894   001AB6  5047               	movf	saveHourToData@hour^0,w,c
  4895   001AB8  6ED9               	movwf	fsr2l,c
  4896   001ABA  6ADA               	clrf	fsr2h,c
  4897   001ABC  0E01               	movlw	1
  4898   001ABE  26D9               	addwf	fsr2l,f,c
  4899   001AC0  50DF               	movf	indf2,w,c
  4900   001AC2  6E65               	movwf	(_currentTime+1)^0,c
  4901   001AC4                     
  4902                           ;TAD_DATOS.c: 64:     currentTime[2] = hour[2];
  4903   001AC4  5047               	movf	saveHourToData@hour^0,w,c
  4904   001AC6  6ED9               	movwf	fsr2l,c
  4905   001AC8  6ADA               	clrf	fsr2h,c
  4906   001ACA  0E02               	movlw	2
  4907   001ACC  26D9               	addwf	fsr2l,f,c
  4908   001ACE  50DF               	movf	indf2,w,c
  4909   001AD0  6E66               	movwf	(_currentTime+2)^0,c
  4910   001AD2                     
  4911                           ;TAD_DATOS.c: 65:     currentTime[3] = hour[3];
  4912   001AD2  5047               	movf	saveHourToData@hour^0,w,c
  4913   001AD4  6ED9               	movwf	fsr2l,c
  4914   001AD6  6ADA               	clrf	fsr2h,c
  4915   001AD8  0E03               	movlw	3
  4916   001ADA  26D9               	addwf	fsr2l,f,c
  4917   001ADC  50DF               	movf	indf2,w,c
  4918   001ADE  6E67               	movwf	(_currentTime+3)^0,c
  4919   001AE0  0012               	return		;funcret
  4920   001AE2                     __end_of_saveHourToData:
  4921                           	callstack 0
  4922                           
  4923 ;; *************** function _printfUID *****************
  4924 ;; Defined at:
  4925 ;;		line 60 in file "TAD_TERMINAL.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  4928 ;;		 -> NULL(0), currentUser(5), 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  low             1   14[COMRAM] unsigned char 
  4931 ;;  high            1   13[COMRAM] unsigned char 
  4932 ;;  i               2   15[COMRAM] int 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1
  4942 ;;      Params:         1       0       0
  4943 ;;      Locals:         8       0       0
  4944 ;;      Temps:          1       0       0
  4945 ;;      Totals:        10       0       0
  4946 ;;Total ram usage:       10 bytes
  4947 ;; Hardware stack levels used: 1
  4948 ;; Hardware stack levels required when called: 6
  4949 ;; This function calls:
  4950 ;;		_Terminal_SendChar
  4951 ;;		_Terminal_SendString
  4952 ;; This function is called by:
  4953 ;;		_motorTerminal
  4954 ;;		_setCurrentUser
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text10
  4959   000F06                     __ptext10:
  4960                           	callstack 0
  4961   000F06                     _printfUID:
  4962                           	callstack 22
  4963   000F06                     
  4964                           ;TAD_TERMINAL.c: 61:  Terminal_SendString("UID: ");
  4965   000F06  0EF3               	movlw	low STR_9
  4966   000F08  6E4B               	movwf	Terminal_SendString@str^0,c
  4967   000F0A  0E1F               	movlw	high STR_9
  4968   000F0C  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  4969   000F0E  EC71  F00D         	call	_Terminal_SendString	;wreg free
  4970   000F12                     
  4971                           ;TAD_TERMINAL.c: 62:  for (int i = 0; i < 5; i++) {
  4972   000F12  0E00               	movlw	0
  4973   000F14  6E56               	movwf	(printfUID@i+1)^0,c
  4974   000F16  0E00               	movlw	0
  4975   000F18  6E55               	movwf	printfUID@i^0,c
  4976   000F1A                     l3052:
  4977                           
  4978                           ;TAD_TERMINAL.c: 64:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  4979   000F1A  504D               	movf	printfUID@currentUser^0,w,c
  4980   000F1C  2455               	addwf	printfUID@i^0,w,c
  4981   000F1E  6ED9               	movwf	fsr2l,c
  4982   000F20  6ADA               	clrf	fsr2h,c
  4983   000F22  50DF               	movf	indf2,w,c
  4984   000F24  6E4E               	movwf	??_printfUID^0,c
  4985   000F26  384E               	swapf	??_printfUID^0,w,c
  4986   000F28  0B0F               	andlw	15
  4987   000F2A  0B0F               	andlw	15
  4988   000F2C  6E53               	movwf	printfUID@high^0,c
  4989   000F2E                     
  4990                           ;TAD_TERMINAL.c: 65:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  4991   000F2E  0E09               	movlw	9
  4992   000F30  6453               	cpfsgt	printfUID@high^0,c
  4993   000F32  EF9D  F007         	goto	u2231
  4994   000F36  EF9F  F007         	goto	u2230
  4995   000F3A                     u2231:
  4996   000F3A  EFA7  F007         	goto	l3058
  4997   000F3E                     u2230:
  4998   000F3E  0E37               	movlw	55
  4999   000F40  2453               	addwf	printfUID@high^0,w,c
  5000   000F42  6E4F               	movwf	_printfUID$857^0,c
  5001   000F44  6A50               	clrf	(_printfUID$857+1)^0,c
  5002   000F46  0E00               	movlw	0
  5003   000F48  2250               	addwfc	(_printfUID$857+1)^0,f,c
  5004   000F4A  EFAD  F007         	goto	l3060
  5005   000F4E                     l3058:
  5006   000F4E  0E30               	movlw	48
  5007   000F50  2453               	addwf	printfUID@high^0,w,c
  5008   000F52  6E4F               	movwf	_printfUID$857^0,c
  5009   000F54  6A50               	clrf	(_printfUID$857+1)^0,c
  5010   000F56  0E00               	movlw	0
  5011   000F58  2250               	addwfc	(_printfUID$857+1)^0,f,c
  5012   000F5A                     l3060:
  5013   000F5A  504F               	movf	_printfUID$857^0,w,c
  5014   000F5C  EC01  F00E         	call	_Terminal_SendChar
  5015   000F60                     
  5016                           ;TAD_TERMINAL.c: 68:   unsigned char low = currentUser[i] & 0x0F;
  5017   000F60  504D               	movf	printfUID@currentUser^0,w,c
  5018   000F62  2455               	addwf	printfUID@i^0,w,c
  5019   000F64  6ED9               	movwf	fsr2l,c
  5020   000F66  6ADA               	clrf	fsr2h,c
  5021   000F68  50DF               	movf	indf2,w,c
  5022   000F6A  0B0F               	andlw	15
  5023   000F6C  6E54               	movwf	printfUID@low^0,c
  5024   000F6E                     
  5025                           ;TAD_TERMINAL.c: 69:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  5026   000F6E  0E09               	movlw	9
  5027   000F70  6454               	cpfsgt	printfUID@low^0,c
  5028   000F72  EFBD  F007         	goto	u2241
  5029   000F76  EFBF  F007         	goto	u2240
  5030   000F7A                     u2241:
  5031   000F7A  EFC7  F007         	goto	l3068
  5032   000F7E                     u2240:
  5033   000F7E  0E37               	movlw	55
  5034   000F80  2454               	addwf	printfUID@low^0,w,c
  5035   000F82  6E51               	movwf	_printfUID$859^0,c
  5036   000F84  6A52               	clrf	(_printfUID$859+1)^0,c
  5037   000F86  0E00               	movlw	0
  5038   000F88  2252               	addwfc	(_printfUID$859+1)^0,f,c
  5039   000F8A  EFCD  F007         	goto	l3070
  5040   000F8E                     l3068:
  5041   000F8E  0E30               	movlw	48
  5042   000F90  2454               	addwf	printfUID@low^0,w,c
  5043   000F92  6E51               	movwf	_printfUID$859^0,c
  5044   000F94  6A52               	clrf	(_printfUID$859+1)^0,c
  5045   000F96  0E00               	movlw	0
  5046   000F98  2252               	addwfc	(_printfUID$859+1)^0,f,c
  5047   000F9A                     l3070:
  5048   000F9A  5051               	movf	_printfUID$859^0,w,c
  5049   000F9C  EC01  F00E         	call	_Terminal_SendChar
  5050   000FA0                     
  5051                           ;TAD_TERMINAL.c: 72:   if (i < 4) Terminal_SendString("-");
  5052   000FA0  BE56               	btfsc	(printfUID@i+1)^0,7,c
  5053   000FA2  EFDE  F007         	goto	u2250
  5054   000FA6  5056               	movf	(printfUID@i+1)^0,w,c
  5055   000FA8  E107               	bnz	u2251
  5056   000FAA  0E04               	movlw	4
  5057   000FAC  5C55               	subwf	printfUID@i^0,w,c
  5058   000FAE  B0D8               	btfsc	status,0,c
  5059   000FB0  EFDC  F007         	goto	u2251
  5060   000FB4  EFDE  F007         	goto	u2250
  5061   000FB8                     u2251:
  5062   000FB8  EFE4  F007         	goto	l3076
  5063   000FBC                     u2250:
  5064   000FBC  0EFD               	movlw	low STR_10
  5065   000FBE  6E4B               	movwf	Terminal_SendString@str^0,c
  5066   000FC0  0E1F               	movlw	high STR_10
  5067   000FC2  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  5068   000FC4  EC71  F00D         	call	_Terminal_SendString	;wreg free
  5069   000FC8                     l3076:
  5070                           
  5071                           ;TAD_TERMINAL.c: 73:  }
  5072   000FC8  4A55               	infsnz	printfUID@i^0,f,c
  5073   000FCA  2A56               	incf	(printfUID@i+1)^0,f,c
  5074   000FCC  BE56               	btfsc	(printfUID@i+1)^0,7,c
  5075   000FCE  EFF2  F007         	goto	u2261
  5076   000FD2  5056               	movf	(printfUID@i+1)^0,w,c
  5077   000FD4  E109               	bnz	u2260
  5078   000FD6  0E05               	movlw	5
  5079   000FD8  5C55               	subwf	printfUID@i^0,w,c
  5080   000FDA  A0D8               	btfss	status,0,c
  5081   000FDC  EFF2  F007         	goto	u2261
  5082   000FE0  EFF4  F007         	goto	u2260
  5083   000FE4                     u2261:
  5084   000FE4  EF8D  F007         	goto	l3052
  5085   000FE8                     u2260:
  5086   000FE8                     
  5087                           ;TAD_TERMINAL.c: 74:  Terminal_SendString("\r\n");
  5088   000FE8  0EC5               	movlw	low (STR_1+15)
  5089   000FEA  6E4B               	movwf	Terminal_SendString@str^0,c
  5090   000FEC  0E1F               	movlw	high (STR_1+15)
  5091   000FEE  6E4C               	movwf	(Terminal_SendString@str+1)^0,c
  5092   000FF0  EC71  F00D         	call	_Terminal_SendString	;wreg free
  5093   000FF4  0012               	return		;funcret
  5094   000FF6                     __end_of_printfUID:
  5095                           	callstack 0
  5096                           
  5097 ;; *************** function _Terminal_SendString *****************
  5098 ;; Defined at:
  5099 ;;		line 39 in file "TAD_TERMINAL.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5102 ;;		 -> STR_27(2), STR_26(22), STR_25(3), STR_24(2), 
  5103 ;;		 -> STR_23(10), STR_22(6), STR_21(33), STR_20(33), 
  5104 ;;		 -> STR_19(33), STR_18(3), STR_17(3), STR_16(3), 
  5105 ;;		 -> STR_15(3), STR_14(3), STR_13(4), STR_12(3), 
  5106 ;;		 -> STR_11(3), STR_10(2), STR_9(6), STR_8(9), 
  5107 ;;		 -> STR_7(33), STR_6(29), STR_5(27), STR_4(19), 
  5108 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1
  5120 ;;      Params:         2       0       0
  5121 ;;      Locals:         0       0       0
  5122 ;;      Temps:          0       0       0
  5123 ;;      Totals:         2       0       0
  5124 ;;Total ram usage:        2 bytes
  5125 ;; Hardware stack levels used: 1
  5126 ;; Hardware stack levels required when called: 5
  5127 ;; This function calls:
  5128 ;;		_Terminal_SendChar
  5129 ;; This function is called by:
  5130 ;;		_showMenu
  5131 ;;		_printfUID
  5132 ;;		_printLedConfig
  5133 ;;		_motorTerminal
  5134 ;;		_showAllConfigurations
  5135 ;;		_setCurrentUser
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text11
  5140   001AE2                     __ptext11:
  5141                           	callstack 0
  5142   001AE2                     _Terminal_SendString:
  5143                           	callstack 22
  5144   001AE2                     
  5145                           ;TAD_TERMINAL.c: 40:  while (*str) {
  5146   001AE2  EF7D  F00D         	goto	l3022
  5147   001AE6                     l3018:
  5148                           
  5149                           ;TAD_TERMINAL.c: 41:   Terminal_SendChar(*str++);
  5150   001AE6  C04B  FFF6         	movff	Terminal_SendString@str,tblptrl
  5151   001AEA  C04C  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5152   001AEE                     	if	0	;tblptru may be non-zero
  5153   001AEE                     	endif
  5154   001AEE                     	if	0	;tblptru may be non-zero
  5155   001AEE                     	endif
  5156   001AEE  0008               	tblrd		*
  5157   001AF0  50F5               	movf	tablat,w,c
  5158   001AF2  EC01  F00E         	call	_Terminal_SendChar
  5159   001AF6  4A4B               	infsnz	Terminal_SendString@str^0,f,c
  5160   001AF8  2A4C               	incf	(Terminal_SendString@str+1)^0,f,c
  5161   001AFA                     l3022:
  5162                           
  5163                           ;TAD_TERMINAL.c: 40:  while (*str) {
  5164   001AFA  C04B  FFF6         	movff	Terminal_SendString@str,tblptrl
  5165   001AFE  C04C  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5166   001B02                     	if	0	;tblptru may be non-zero
  5167   001B02                     	endif
  5168   001B02                     	if	0	;tblptru may be non-zero
  5169   001B02                     	endif
  5170   001B02  0008               	tblrd		*
  5171   001B04  50F5               	movf	tablat,w,c
  5172   001B06  0900               	iorlw	0
  5173   001B08  A4D8               	btfss	status,2,c
  5174   001B0A  EF89  F00D         	goto	u2051
  5175   001B0E  EF8B  F00D         	goto	u2050
  5176   001B12                     u2051:
  5177   001B12  EF73  F00D         	goto	l3018
  5178   001B16                     u2050:
  5179   001B16  0012               	return		;funcret
  5180   001B18                     __end_of_Terminal_SendString:
  5181                           	callstack 0
  5182                           
  5183 ;; *************** function _Terminal_SendChar *****************
  5184 ;; Defined at:
  5185 ;;		line 28 in file "TAD_TERMINAL.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  c               1    wreg     unsigned char 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  c               1    4[COMRAM] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  1    wreg      void 
  5192 ;; Registers used:
  5193 ;;		wreg, status,2, status,0, cstack
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMRAM   BANK0   BANK1
  5199 ;;      Params:         0       0       0
  5200 ;;      Locals:         1       0       0
  5201 ;;      Temps:          0       0       0
  5202 ;;      Totals:         1       0       0
  5203 ;;Total ram usage:        1 bytes
  5204 ;; Hardware stack levels used: 1
  5205 ;; Hardware stack levels required when called: 4
  5206 ;; This function calls:
  5207 ;;		_Terminal_TXAvailable
  5208 ;; This function is called by:
  5209 ;;		_Terminal_SendString
  5210 ;;		_printfUID
  5211 ;;		_printLedConfig
  5212 ;;		_motorTerminal
  5213 ;;		_showAllConfigurations
  5214 ;;		_motor_datos
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           	psect	text12
  5219   001C02                     __ptext12:
  5220                           	callstack 0
  5221   001C02                     _Terminal_SendChar:
  5222                           	callstack 22
  5223                           
  5224                           ;incstack = 0
  5225                           ;Terminal_SendChar@c stored from wreg
  5226   001C02  6E4A               	movwf	Terminal_SendChar@c^0,c
  5227   001C04                     l2998:
  5228   001C04  EC10  F00E         	call	_Terminal_TXAvailable	;wreg free
  5229   001C08  5047               	movf	?_Terminal_TXAvailable^0,w,c
  5230   001C0A  1048               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5231   001C0C  B4D8               	btfsc	status,2,c
  5232   001C0E  EF0B  F00E         	goto	u2041
  5233   001C12  EF0D  F00E         	goto	u2040
  5234   001C16                     u2041:
  5235   001C16  EF02  F00E         	goto	l2998
  5236   001C1A                     u2040:
  5237   001C1A                     
  5238                           ;TAD_TERMINAL.c: 30:  TXREG = c;
  5239   001C1A  C04A  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5240   001C1E  0012               	return		;funcret
  5241   001C20                     __end_of_Terminal_SendChar:
  5242                           	callstack 0
  5243                           
  5244 ;; *************** function _Terminal_TXAvailable *****************
  5245 ;; Defined at:
  5246 ;;		line 18 in file "TAD_TERMINAL.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  2    1[COMRAM] int 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1
  5260 ;;      Params:         2       0       0
  5261 ;;      Locals:         0       0       0
  5262 ;;      Temps:          1       0       0
  5263 ;;      Totals:         3       0       0
  5264 ;;Total ram usage:        3 bytes
  5265 ;; Hardware stack levels used: 1
  5266 ;; Hardware stack levels required when called: 3
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_Terminal_SendChar
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text13
  5275   001C20                     __ptext13:
  5276                           	callstack 0
  5277   001C20                     _Terminal_TXAvailable:
  5278                           	callstack 22
  5279   001C20                     
  5280                           ;TAD_TERMINAL.c: 19:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  5281   001C20  B89E               	btfsc	158,4,c	;volatile
  5282   001C22  EF15  F00E         	goto	u1971
  5283   001C26  EF19  F00E         	goto	u1970
  5284   001C2A                     u1971:
  5285   001C2A  6A49               	clrf	??_Terminal_TXAvailable^0,c
  5286   001C2C  2A49               	incf	??_Terminal_TXAvailable^0,f,c
  5287   001C2E  EF1A  F00E         	goto	u1978
  5288   001C32                     u1970:
  5289   001C32  6A49               	clrf	??_Terminal_TXAvailable^0,c
  5290   001C34                     u1978:
  5291   001C34  5049               	movf	??_Terminal_TXAvailable^0,w,c
  5292   001C36  6E47               	movwf	?_Terminal_TXAvailable^0,c
  5293   001C38  6A48               	clrf	(?_Terminal_TXAvailable+1)^0,c
  5294   001C3A  0012               	return		;funcret
  5295   001C3C                     __end_of_Terminal_TXAvailable:
  5296                           	callstack 0
  5297                           
  5298 ;; *************** function _getActualUID *****************
  5299 ;; Defined at:
  5300 ;;		line 28 in file "TAD_DATOS.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    1[COMRAM] PTR unsigned char 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1
  5314 ;;      Params:         2       0       0
  5315 ;;      Locals:         0       0       0
  5316 ;;      Temps:          0       0       0
  5317 ;;      Totals:         2       0       0
  5318 ;;Total ram usage:        2 bytes
  5319 ;; Hardware stack levels used: 1
  5320 ;; Hardware stack levels required when called: 3
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_motor_RFID
  5325 ;;		_motorTerminal
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text14
  5330   001780                     __ptext14:
  5331                           	callstack 0
  5332   001780                     _getActualUID:
  5333                           	callstack 26
  5334   001780                     
  5335                           ;TAD_DATOS.c: 29:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  5336   001780  503E               	movf	_currentUser^0,w,c
  5337   001782  A4D8               	btfss	status,2,c
  5338   001784  EFC6  F00B         	goto	u2621
  5339   001788  EFC8  F00B         	goto	u2620
  5340   00178C                     u2621:
  5341   00178C  EFEB  F00B         	goto	l3288
  5342   001790                     u2620:
  5343   001790  503F               	movf	(_currentUser+1)^0,w,c
  5344   001792  A4D8               	btfss	status,2,c
  5345   001794  EFCE  F00B         	goto	u2631
  5346   001798  EFD0  F00B         	goto	u2630
  5347   00179C                     u2631:
  5348   00179C  EFEB  F00B         	goto	l3288
  5349   0017A0                     u2630:
  5350   0017A0  5040               	movf	(_currentUser+2)^0,w,c
  5351   0017A2  A4D8               	btfss	status,2,c
  5352   0017A4  EFD6  F00B         	goto	u2641
  5353   0017A8  EFD8  F00B         	goto	u2640
  5354   0017AC                     u2641:
  5355   0017AC  EFEB  F00B         	goto	l3288
  5356   0017B0                     u2640:
  5357   0017B0  5041               	movf	(_currentUser+3)^0,w,c
  5358   0017B2  A4D8               	btfss	status,2,c
  5359   0017B4  EFDE  F00B         	goto	u2651
  5360   0017B8  EFE0  F00B         	goto	u2650
  5361   0017BC                     u2651:
  5362   0017BC  EFEB  F00B         	goto	l3288
  5363   0017C0                     u2650:
  5364   0017C0  5042               	movf	(_currentUser+4)^0,w,c
  5365   0017C2  A4D8               	btfss	status,2,c
  5366   0017C4  EFE6  F00B         	goto	u2661
  5367   0017C8  EFE8  F00B         	goto	u2660
  5368   0017CC                     u2661:
  5369   0017CC  EFEB  F00B         	goto	l3288
  5370   0017D0                     u2660:
  5371   0017D0                     
  5372                           ;TAD_DATOS.c: 30:   return ((void*)0);
  5373   0017D0  0E00               	movlw	0
  5374   0017D2  EFEC  F00B         	goto	l671
  5375   0017D6                     l3288:
  5376                           
  5377                           ;TAD_DATOS.c: 32:     return currentUser;
  5378   0017D6  0E3E               	movlw	_currentUser& (0+255)
  5379   0017D8                     l671:
  5380   0017D8  0012               	return		;funcret
  5381   0017DA                     __end_of_getActualUID:
  5382                           	callstack 0
  5383                           
  5384 ;; *************** function _Terminal_ReceiveChar *****************
  5385 ;; Defined at:
  5386 ;;		line 34 in file "TAD_TERMINAL.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      unsigned char 
  5393 ;; Registers used:
  5394 ;;		wreg, status,2
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1
  5400 ;;      Params:         0       0       0
  5401 ;;      Locals:         0       0       0
  5402 ;;      Temps:          0       0       0
  5403 ;;      Totals:         0       0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used: 1
  5406 ;; Hardware stack levels required when called: 3
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_motorTerminal
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text15
  5415   001D46                     __ptext15:
  5416                           	callstack 0
  5417   001D46                     _Terminal_ReceiveChar:
  5418                           	callstack 26
  5419   001D46                     
  5420                           ;TAD_TERMINAL.c: 35:  return RCREG;
  5421   001D46  50AE               	movf	174,w,c	;volatile
  5422   001D48  0012               	return		;funcret
  5423   001D4A                     __end_of_Terminal_ReceiveChar:
  5424                           	callstack 0
  5425                           
  5426 ;; *************** function _Terminal_RXAvailable *****************
  5427 ;; Defined at:
  5428 ;;		line 23 in file "TAD_TERMINAL.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      unsigned char 
  5435 ;; Registers used:
  5436 ;;		wreg
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1
  5442 ;;      Params:         0       0       0
  5443 ;;      Locals:         0       0       0
  5444 ;;      Temps:          0       0       0
  5445 ;;      Totals:         0       0       0
  5446 ;;Total ram usage:        0 bytes
  5447 ;; Hardware stack levels used: 1
  5448 ;; Hardware stack levels required when called: 3
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_motorTerminal
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text16
  5457   001C9A                     __ptext16:
  5458                           	callstack 0
  5459   001C9A                     _Terminal_RXAvailable:
  5460                           	callstack 26
  5461   001C9A                     
  5462                           ;TAD_TERMINAL.c: 24:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  5463   001C9A  BA9E               	btfsc	158,5,c	;volatile
  5464   001C9C  EF52  F00E         	goto	u981
  5465   001CA0  EF55  F00E         	goto	u980
  5466   001CA4                     u981:
  5467   001CA4  0E01               	movlw	1
  5468   001CA6  EF56  F00E         	goto	u986
  5469   001CAA                     u980:
  5470   001CAA  0E00               	movlw	0
  5471   001CAC                     u986:
  5472   001CAC  0012               	return		;funcret
  5473   001CAE                     __end_of_Terminal_RXAvailable:
  5474                           	callstack 0
  5475                           
  5476 ;; *************** function _motorTeclado *****************
  5477 ;; Defined at:
  5478 ;;		line 33 in file "TAD_TECLADO.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1
  5492 ;;      Params:         0       0       0
  5493 ;;      Locals:         0       0       0
  5494 ;;      Temps:          0       0       0
  5495 ;;      Totals:         0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used: 1
  5498 ;; Hardware stack levels required when called: 5
  5499 ;; This function calls:
  5500 ;;		_GetTecla
  5501 ;;		_ReadFilas
  5502 ;;		_TI_GetTics
  5503 ;;		_TI_ResetTics
  5504 ;;		_hashtag_pressed3s
  5505 ;;		_setLed
  5506 ;;		_writeColumnas
  5507 ;; This function is called by:
  5508 ;;		_main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text17
  5513   0008D4                     __ptext17:
  5514                           	callstack 0
  5515   0008D4                     _motorTeclado:
  5516                           	callstack 25
  5517   0008D4                     
  5518                           ;TAD_TECLADO.c: 34:  switch(state) {
  5519   0008D4  EF69  F005         	goto	l3618
  5520   0008D8                     l3512:
  5521                           
  5522                           ;TAD_TECLADO.c: 36:    Filas = ReadFilas();
  5523   0008D8  ECA0  F00E         	call	_ReadFilas	;wreg free
  5524   0008DC  6E37               	movwf	_Filas^0,c
  5525   0008DE                     
  5526                           ;TAD_TECLADO.c: 37:    if (Filas == 0x0) {
  5527   0008DE  5037               	movf	_Filas^0,w,c
  5528   0008E0  A4D8               	btfss	status,2,c
  5529   0008E2  EF75  F004         	goto	u2751
  5530   0008E6  EF77  F004         	goto	u2750
  5531   0008EA                     u2751:
  5532   0008EA  EF7F  F004         	goto	l3522
  5533   0008EE                     u2750:
  5534   0008EE                     
  5535                           ;TAD_TECLADO.c: 38:     Columnas = (0x01);
  5536   0008EE  0E01               	movlw	1
  5537   0008F0  6E36               	movwf	_Columnas^0,c
  5538   0008F2                     
  5539                           ;TAD_TECLADO.c: 39:     writeColumnas();
  5540   0008F2  ECB6  F00C         	call	_writeColumnas	;wreg free
  5541   0008F6                     
  5542                           ;TAD_TECLADO.c: 40:     state = 1;
  5543   0008F6  0E01               	movlw	1
  5544   0008F8  6E34               	movwf	_state^0,c
  5545                           
  5546                           ;TAD_TECLADO.c: 41:    }
  5547   0008FA  EF84  F005         	goto	l166
  5548   0008FE                     l3522:
  5549   0008FE  5037               	movf	_Filas^0,w,c
  5550   000900  B4D8               	btfsc	status,2,c
  5551   000902  EF85  F004         	goto	u2761
  5552   000906  EF87  F004         	goto	u2760
  5553   00090A                     u2761:
  5554   00090A  EF84  F005         	goto	l166
  5555   00090E                     u2760:
  5556   00090E                     
  5557                           ;TAD_TECLADO.c: 43:     TI_ResetTics(timer);
  5558   00090E  5045               	movf	_timer^0,w,c
  5559   000910  ECEF  F00D         	call	_TI_ResetTics
  5560   000914                     l3526:
  5561                           
  5562                           ;TAD_TECLADO.c: 44:     state = 3;
  5563   000914  0E03               	movlw	3
  5564   000916  6E34               	movwf	_state^0,c
  5565   000918  EF84  F005         	goto	l166
  5566   00091C                     l3528:
  5567                           
  5568                           ;TAD_TECLADO.c: 48:    Filas = ReadFilas();
  5569   00091C  ECA0  F00E         	call	_ReadFilas	;wreg free
  5570   000920  6E37               	movwf	_Filas^0,c
  5571   000922                     
  5572                           ;TAD_TECLADO.c: 49:    if (Filas == 0x0) {
  5573   000922  5037               	movf	_Filas^0,w,c
  5574   000924  A4D8               	btfss	status,2,c
  5575   000926  EF97  F004         	goto	u2771
  5576   00092A  EF99  F004         	goto	u2770
  5577   00092E                     u2771:
  5578   00092E  EFA1  F004         	goto	l3538
  5579   000932                     u2770:
  5580   000932                     
  5581                           ;TAD_TECLADO.c: 50:     Columnas = (0x02);
  5582   000932  0E02               	movlw	2
  5583   000934  6E36               	movwf	_Columnas^0,c
  5584   000936                     
  5585                           ;TAD_TECLADO.c: 51:     writeColumnas();
  5586   000936  ECB6  F00C         	call	_writeColumnas	;wreg free
  5587   00093A                     
  5588                           ;TAD_TECLADO.c: 52:     state = 2;
  5589   00093A  0E02               	movlw	2
  5590   00093C  6E34               	movwf	_state^0,c
  5591                           
  5592                           ;TAD_TECLADO.c: 53:    }
  5593   00093E  EF84  F005         	goto	l166
  5594   000942                     l3538:
  5595   000942  5037               	movf	_Filas^0,w,c
  5596   000944  B4D8               	btfsc	status,2,c
  5597   000946  EFA7  F004         	goto	u2781
  5598   00094A  EFA9  F004         	goto	u2780
  5599   00094E                     u2781:
  5600   00094E  EF84  F005         	goto	l166
  5601   000952                     u2780:
  5602   000952                     
  5603                           ;TAD_TECLADO.c: 55:     TI_ResetTics(timer);
  5604   000952  5045               	movf	_timer^0,w,c
  5605   000954  ECEF  F00D         	call	_TI_ResetTics
  5606   000958  EF8A  F004         	goto	l3526
  5607   00095C                     l3544:
  5608                           
  5609                           ;TAD_TECLADO.c: 60:    Filas = ReadFilas();
  5610   00095C  ECA0  F00E         	call	_ReadFilas	;wreg free
  5611   000960  6E37               	movwf	_Filas^0,c
  5612   000962                     
  5613                           ;TAD_TECLADO.c: 61:    if (Filas != 0x0) {
  5614   000962  5037               	movf	_Filas^0,w,c
  5615   000964  B4D8               	btfsc	status,2,c
  5616   000966  EFB7  F004         	goto	u2791
  5617   00096A  EFB9  F004         	goto	u2790
  5618   00096E                     u2791:
  5619   00096E  EFBE  F004         	goto	l3552
  5620   000972                     u2790:
  5621   000972                     
  5622                           ;TAD_TECLADO.c: 62:     TI_ResetTics(timer);
  5623   000972  5045               	movf	_timer^0,w,c
  5624   000974  ECEF  F00D         	call	_TI_ResetTics
  5625   000978  EF8A  F004         	goto	l3526
  5626   00097C                     l3552:
  5627   00097C  5037               	movf	_Filas^0,w,c
  5628   00097E  A4D8               	btfss	status,2,c
  5629   000980  EFC4  F004         	goto	u2801
  5630   000984  EFC6  F004         	goto	u2800
  5631   000988                     u2801:
  5632   000988  EF84  F005         	goto	l166
  5633   00098C                     u2800:
  5634   00098C                     l3554:
  5635                           
  5636                           ;TAD_TECLADO.c: 66:     Columnas = (0x04);
  5637   00098C  0E04               	movlw	4
  5638   00098E  6E36               	movwf	_Columnas^0,c
  5639   000990                     
  5640                           ;TAD_TECLADO.c: 67:     writeColumnas();
  5641   000990  ECB6  F00C         	call	_writeColumnas	;wreg free
  5642   000994                     l3558:
  5643                           
  5644                           ;TAD_TECLADO.c: 68:     state = 0;
  5645   000994  6A34               	clrf	_state^0,c
  5646   000996  EF84  F005         	goto	l166
  5647   00099A                     l3560:
  5648                           
  5649                           ;TAD_TECLADO.c: 72:    tecla = GetTecla ();
  5650   00099A  ECDB  F008         	call	_GetTecla	;wreg free
  5651   00099E  6E35               	movwf	_tecla^0,c
  5652   0009A0                     
  5653                           ;TAD_TECLADO.c: 73:    Filas = ReadFilas();
  5654   0009A0  ECA0  F00E         	call	_ReadFilas	;wreg free
  5655   0009A4  6E37               	movwf	_Filas^0,c
  5656   0009A6                     
  5657                           ;TAD_TECLADO.c: 74:    if (Filas == 0x0) {
  5658   0009A6  5037               	movf	_Filas^0,w,c
  5659   0009A8  A4D8               	btfss	status,2,c
  5660   0009AA  EFD9  F004         	goto	u2811
  5661   0009AE  EFDB  F004         	goto	u2810
  5662   0009B2                     u2811:
  5663   0009B2  EFDD  F004         	goto	l3572
  5664   0009B6                     u2810:
  5665   0009B6  EFC6  F004         	goto	l3554
  5666   0009BA                     l3572:
  5667   0009BA  5037               	movf	_Filas^0,w,c
  5668   0009BC  B4D8               	btfsc	status,2,c
  5669   0009BE  EFE3  F004         	goto	u2821
  5670   0009C2  EFE5  F004         	goto	u2820
  5671   0009C6                     u2821:
  5672   0009C6  EF05  F005         	goto	l3582
  5673   0009CA                     u2820:
  5674   0009CA  5045               	movf	_timer^0,w,c
  5675   0009CC  EC6B  F00C         	call	_TI_GetTics
  5676   0009D0  504A               	movf	(?_TI_GetTics+3)^0,w,c
  5677   0009D2  1049               	iorwf	(?_TI_GetTics+2)^0,w,c
  5678   0009D4  1048               	iorwf	(?_TI_GetTics+1)^0,w,c
  5679   0009D6  E109               	bnz	u2830
  5680   0009D8  0E05               	movlw	5
  5681   0009DA  5C47               	subwf	?_TI_GetTics^0,w,c
  5682   0009DC  A0D8               	btfss	status,0,c
  5683   0009DE  EFF3  F004         	goto	u2831
  5684   0009E2  EFF5  F004         	goto	u2830
  5685   0009E6                     u2831:
  5686   0009E6  EF05  F005         	goto	l3582
  5687   0009EA                     u2830:
  5688   0009EA  0E0B               	movlw	11
  5689   0009EC  1835               	xorwf	_tecla^0,w,c
  5690   0009EE  B4D8               	btfsc	status,2,c
  5691   0009F0  EFFC  F004         	goto	u2841
  5692   0009F4  EFFE  F004         	goto	u2840
  5693   0009F8                     u2841:
  5694   0009F8  EF05  F005         	goto	l3582
  5695   0009FC                     u2840:
  5696   0009FC                     
  5697                           ;TAD_TECLADO.c: 80:     setLed(tecla);
  5698   0009FC  5035               	movf	_tecla^0,w,c
  5699   0009FE  EC39  F00D         	call	_setLed
  5700   000A02                     l3580:
  5701                           
  5702                           ;TAD_TECLADO.c: 81:     state = 5;
  5703   000A02  0E05               	movlw	5
  5704   000A04  6E34               	movwf	_state^0,c
  5705                           
  5706                           ;TAD_TECLADO.c: 82:    }
  5707   000A06  EF84  F005         	goto	l166
  5708   000A0A                     l3582:
  5709   000A0A  5037               	movf	_Filas^0,w,c
  5710   000A0C  B4D8               	btfsc	status,2,c
  5711   000A0E  EF0B  F005         	goto	u2851
  5712   000A12  EF0D  F005         	goto	u2850
  5713   000A16                     u2851:
  5714   000A16  EF84  F005         	goto	l166
  5715   000A1A                     u2850:
  5716   000A1A  5045               	movf	_timer^0,w,c
  5717   000A1C  EC6B  F00C         	call	_TI_GetTics
  5718   000A20  504A               	movf	(?_TI_GetTics+3)^0,w,c
  5719   000A22  1049               	iorwf	(?_TI_GetTics+2)^0,w,c
  5720   000A24  1048               	iorwf	(?_TI_GetTics+1)^0,w,c
  5721   000A26  E109               	bnz	u2860
  5722   000A28  0E05               	movlw	5
  5723   000A2A  5C47               	subwf	?_TI_GetTics^0,w,c
  5724   000A2C  A0D8               	btfss	status,0,c
  5725   000A2E  EF1B  F005         	goto	u2861
  5726   000A32  EF1D  F005         	goto	u2860
  5727   000A36                     u2861:
  5728   000A36  EF84  F005         	goto	l166
  5729   000A3A                     u2860:
  5730   000A3A  0E0B               	movlw	11
  5731   000A3C  1835               	xorwf	_tecla^0,w,c
  5732   000A3E  A4D8               	btfss	status,2,c
  5733   000A40  EF24  F005         	goto	u2871
  5734   000A44  EF26  F005         	goto	u2870
  5735   000A48                     u2871:
  5736   000A48  EF84  F005         	goto	l166
  5737   000A4C                     u2870:
  5738   000A4C                     
  5739                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  5740   000A4C  5045               	movf	_timer^0,w,c
  5741   000A4E  ECEF  F00D         	call	_TI_ResetTics
  5742   000A52                     
  5743                           ;TAD_TECLADO.c: 85:     state = 4;
  5744   000A52  0E04               	movlw	4
  5745   000A54  6E34               	movwf	_state^0,c
  5746   000A56  EF84  F005         	goto	l166
  5747   000A5A                     l3592:
  5748                           
  5749                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  5750   000A5A  ECA0  F00E         	call	_ReadFilas	;wreg free
  5751   000A5E  6E37               	movwf	_Filas^0,c
  5752   000A60                     
  5753                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  5754   000A60  5037               	movf	_Filas^0,w,c
  5755   000A62  A4D8               	btfss	status,2,c
  5756   000A64  EF36  F005         	goto	u2881
  5757   000A68  EF38  F005         	goto	u2880
  5758   000A6C                     u2881:
  5759   000A6C  EF3A  F005         	goto	l3598
  5760   000A70                     u2880:
  5761   000A70  EFCA  F004         	goto	l3558
  5762   000A74                     l3598:
  5763   000A74  5037               	movf	_Filas^0,w,c
  5764   000A76  B4D8               	btfsc	status,2,c
  5765   000A78  EF40  F005         	goto	u2891
  5766   000A7C  EF42  F005         	goto	u2890
  5767   000A80                     u2891:
  5768   000A80  EF84  F005         	goto	l166
  5769   000A84                     u2890:
  5770   000A84  5045               	movf	_timer^0,w,c
  5771   000A86  EC6B  F00C         	call	_TI_GetTics
  5772   000A8A  504A               	movf	(?_TI_GetTics+3)^0,w,c
  5773   000A8C  1049               	iorwf	(?_TI_GetTics+2)^0,w,c
  5774   000A8E  E10B               	bnz	u2900
  5775   000A90  0EF5               	movlw	245
  5776   000A92  5C47               	subwf	?_TI_GetTics^0,w,c
  5777   000A94  0E01               	movlw	1
  5778   000A96  5848               	subwfb	(?_TI_GetTics+1)^0,w,c
  5779   000A98  A0D8               	btfss	status,0,c
  5780   000A9A  EF51  F005         	goto	u2901
  5781   000A9E  EF53  F005         	goto	u2900
  5782   000AA2                     u2901:
  5783   000AA2  EF84  F005         	goto	l166
  5784   000AA6                     u2900:
  5785   000AA6                     
  5786                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  5787   000AA6  EC9D  F00E         	call	_hashtag_pressed3s	;wreg free
  5788   000AAA  EF01  F005         	goto	l3580
  5789   000AAE                     l3606:
  5790                           
  5791                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  5792   000AAE  ECA0  F00E         	call	_ReadFilas	;wreg free
  5793   000AB2  6E37               	movwf	_Filas^0,c
  5794   000AB4                     
  5795                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  5796   000AB4  5037               	movf	_Filas^0,w,c
  5797   000AB6  A4D8               	btfss	status,2,c
  5798   000AB8  EF60  F005         	goto	u2911
  5799   000ABC  EF62  F005         	goto	u2910
  5800   000AC0                     u2911:
  5801   000AC0  EF84  F005         	goto	l166
  5802   000AC4                     u2910:
  5803   000AC4                     
  5804                           ;TAD_TECLADO.c: 102:     state = 0;
  5805   000AC4  6A34               	clrf	_state^0,c
  5806   000AC6                     
  5807                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  5808   000AC6  0E04               	movlw	4
  5809   000AC8  6E36               	movwf	_Columnas^0,c
  5810   000ACA                     
  5811                           ;TAD_TECLADO.c: 104:     writeColumnas();
  5812   000ACA  ECB6  F00C         	call	_writeColumnas	;wreg free
  5813   000ACE  EF84  F005         	goto	l166
  5814   000AD2                     l3618:
  5815   000AD2  5034               	movf	_state^0,w,c
  5816                           
  5817                           ; Switch size 1, requested type "simple"
  5818                           ; Number of cases is 6, Range of values is 0 to 5
  5819                           ; switch strategies available:
  5820                           ; Name         Instructions Cycles
  5821                           ; simple_byte           19    10 (average)
  5822                           ;	Chosen strategy is simple_byte
  5823   000AD4  0A00               	xorlw	0	; case 0
  5824   000AD6  B4D8               	btfsc	status,2,c
  5825   000AD8  EF6C  F004         	goto	l3512
  5826   000ADC  0A01               	xorlw	1	; case 1
  5827   000ADE  B4D8               	btfsc	status,2,c
  5828   000AE0  EF8E  F004         	goto	l3528
  5829   000AE4  0A03               	xorlw	3	; case 2
  5830   000AE6  B4D8               	btfsc	status,2,c
  5831   000AE8  EFAE  F004         	goto	l3544
  5832   000AEC  0A01               	xorlw	1	; case 3
  5833   000AEE  B4D8               	btfsc	status,2,c
  5834   000AF0  EFCD  F004         	goto	l3560
  5835   000AF4  0A07               	xorlw	7	; case 4
  5836   000AF6  B4D8               	btfsc	status,2,c
  5837   000AF8  EF2D  F005         	goto	l3592
  5838   000AFC  0A01               	xorlw	1	; case 5
  5839   000AFE  B4D8               	btfsc	status,2,c
  5840   000B00  EF57  F005         	goto	l3606
  5841   000B04  EF84  F005         	goto	l166
  5842   000B08                     l166:
  5843   000B08  0012               	return		;funcret
  5844   000B0A                     __end_of_motorTeclado:
  5845                           	callstack 0
  5846                           
  5847 ;; *************** function _writeColumnas *****************
  5848 ;; Defined at:
  5849 ;;		line 114 in file "TAD_TECLADO.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1
  5863 ;;      Params:         0       0       0
  5864 ;;      Locals:         0       0       0
  5865 ;;      Temps:          0       0       0
  5866 ;;      Totals:         0       0       0
  5867 ;;Total ram usage:        0 bytes
  5868 ;; Hardware stack levels used: 1
  5869 ;; Hardware stack levels required when called: 3
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_motorTeclado
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text18
  5878   00196C                     __ptext18:
  5879                           	callstack 0
  5880   00196C                     _writeColumnas:
  5881                           	callstack 26
  5882   00196C                     
  5883                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  5884   00196C  6A8C               	clrf	140,c	;volatile
  5885   00196E                     
  5886                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  5887   00196E  0436               	decf	_Columnas^0,w,c
  5888   001970  A4D8               	btfss	status,2,c
  5889   001972  EFBD  F00C         	goto	u651
  5890   001976  EFBF  F00C         	goto	u650
  5891   00197A                     u651:
  5892   00197A  EFC2  F00C         	goto	l1788
  5893   00197E                     u650:
  5894   00197E                     
  5895                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  5896   00197E  8A8C               	bsf	140,5,c	;volatile
  5897                           
  5898                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  5899   001980  EFD8  F00C         	goto	l174
  5900   001984                     l1788:
  5901   001984  0E02               	movlw	2
  5902   001986  1836               	xorwf	_Columnas^0,w,c
  5903   001988  A4D8               	btfss	status,2,c
  5904   00198A  EFC9  F00C         	goto	u661
  5905   00198E  EFCB  F00C         	goto	u660
  5906   001992                     u661:
  5907   001992  EFCE  F00C         	goto	l1792
  5908   001996                     u660:
  5909   001996                     
  5910                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  5911   001996  8C8C               	bsf	140,6,c	;volatile
  5912                           
  5913                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  5914   001998  EFD8  F00C         	goto	l174
  5915   00199C                     l1792:
  5916   00199C  0E04               	movlw	4
  5917   00199E  1836               	xorwf	_Columnas^0,w,c
  5918   0019A0  A4D8               	btfss	status,2,c
  5919   0019A2  EFD5  F00C         	goto	u671
  5920   0019A6  EFD7  F00C         	goto	u670
  5921   0019AA                     u671:
  5922   0019AA  EFD8  F00C         	goto	l174
  5923   0019AE                     u670:
  5924   0019AE                     
  5925                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  5926   0019AE  888C               	bsf	140,4,c	;volatile
  5927   0019B0                     l174:
  5928   0019B0  0012               	return		;funcret
  5929   0019B2                     __end_of_writeColumnas:
  5930                           	callstack 0
  5931                           
  5932 ;; *************** function _setLed *****************
  5933 ;; Defined at:
  5934 ;;		line 188 in file "TAD_DATOS.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  tecla           1    wreg     unsigned char 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;  tecla           1    4[COMRAM] unsigned char 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1
  5948 ;;      Params:         0       0       0
  5949 ;;      Locals:         1       0       0
  5950 ;;      Temps:          0       0       0
  5951 ;;      Totals:         1       0       0
  5952 ;;Total ram usage:        1 bytes
  5953 ;; Hardware stack levels used: 1
  5954 ;; Hardware stack levels required when called: 4
  5955 ;; This function calls:
  5956 ;;		_checkUserUID
  5957 ;;		_setLEDIntensity
  5958 ;; This function is called by:
  5959 ;;		_motorTeclado
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text19
  5964   001A72                     __ptext19:
  5965                           	callstack 0
  5966   001A72                     _setLed:
  5967                           	callstack 25
  5968                           
  5969                           ;incstack = 0
  5970                           ;setLed@tecla stored from wreg
  5971   001A72  6E4A               	movwf	setLed@tecla^0,c
  5972   001A74                     
  5973                           ;TAD_DATOS.c: 189:  static char modeLED = 0;;TAD_DATOS.c: 190:  static char ledIndex = 0
      +                          ;;TAD_DATOS.c: 191:  static char userIndex = 0;;TAD_DATOS.c: 193:  if(modeLED == 0){
  5974   001A74  5013               	movf	setLed@modeLED^0,w,c
  5975   001A76  A4D8               	btfss	status,2,c
  5976   001A78  EF40  F00D         	goto	u2551
  5977   001A7C  EF42  F00D         	goto	u2550
  5978   001A80                     u2551:
  5979   001A80  EF48  F00D         	goto	l3206
  5980   001A84                     u2550:
  5981   001A84                     
  5982                           ;TAD_DATOS.c: 194:   ledIndex = tecla - 1;
  5983   001A84  044A               	decf	setLed@tecla^0,w,c
  5984   001A86  6E12               	movwf	setLed@ledIndex^0,c
  5985   001A88                     
  5986                           ;TAD_DATOS.c: 195:   modeLED = 1;
  5987   001A88  0E01               	movlw	1
  5988   001A8A  6E13               	movwf	setLed@modeLED^0,c
  5989                           
  5990                           ;TAD_DATOS.c: 196:  } else{
  5991   001A8C  EF55  F00D         	goto	l740
  5992   001A90                     l3206:
  5993                           
  5994                           ;TAD_DATOS.c: 197:   userIndex = checkUserUID();
  5995   001A90  EC85  F005         	call	_checkUserUID	;wreg free
  5996   001A94  6E11               	movwf	setLed@userIndex^0,c
  5997   001A96                     
  5998                           ;TAD_DATOS.c: 198:   setLEDIntensity(userIndex, ledIndex, tecla);
  5999   001A96  C012  F047         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  6000   001A9A  C04A  F048         	movff	setLed@tecla,setLEDIntensity@intensity
  6001   001A9E  5011               	movf	setLed@userIndex^0,w,c
  6002   001AA0  ECD9  F00C         	call	_setLEDIntensity
  6003   001AA4                     
  6004                           ;TAD_DATOS.c: 199:   new_configuration = 1;
  6005   001AA4  0E01               	movlw	1
  6006   001AA6  6E17               	movwf	_new_configuration^0,c
  6007   001AA8                     
  6008                           ;TAD_DATOS.c: 200:   modeLED = 0;
  6009   001AA8  6A13               	clrf	setLed@modeLED^0,c
  6010   001AAA                     l740:
  6011   001AAA  0012               	return		;funcret
  6012   001AAC                     __end_of_setLed:
  6013                           	callstack 0
  6014                           
  6015 ;; *************** function _setLEDIntensity *****************
  6016 ;; Defined at:
  6017 ;;		line 180 in file "TAD_DATOS.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  userIndex       1    wreg     unsigned char 
  6020 ;;  ledIndex        1    1[COMRAM] unsigned char 
  6021 ;;  intensity       1    2[COMRAM] unsigned char 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  userIndex       1    3[COMRAM] unsigned char 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      void 
  6026 ;; Registers used:
  6027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1
  6033 ;;      Params:         2       0       0
  6034 ;;      Locals:         1       0       0
  6035 ;;      Temps:          0       0       0
  6036 ;;      Totals:         3       0       0
  6037 ;;Total ram usage:        3 bytes
  6038 ;; Hardware stack levels used: 1
  6039 ;; Hardware stack levels required when called: 3
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_setLed
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text20
  6048   0019B2                     __ptext20:
  6049                           	callstack 0
  6050   0019B2                     _setLEDIntensity:
  6051                           	callstack 25
  6052                           
  6053                           ;incstack = 0
  6054                           ;setLEDIntensity@userIndex stored from wreg
  6055   0019B2  6E49               	movwf	setLEDIntensity@userIndex^0,c
  6056   0019B4                     
  6057                           ;TAD_DATOS.c: 181:     if (userIndex < 4 && ledIndex < 6) {
  6058   0019B4  0E04               	movlw	4
  6059   0019B6  6049               	cpfslt	setLEDIntensity@userIndex^0,c
  6060   0019B8  EFE0  F00C         	goto	u2501
  6061   0019BC  EFE2  F00C         	goto	u2500
  6062   0019C0                     u2501:
  6063   0019C0  EFFB  F00C         	goto	l729
  6064   0019C4                     u2500:
  6065   0019C4  0E06               	movlw	6
  6066   0019C6  6047               	cpfslt	setLEDIntensity@ledIndex^0,c
  6067   0019C8  EFE8  F00C         	goto	u2511
  6068   0019CC  EFEA  F00C         	goto	u2510
  6069   0019D0                     u2511:
  6070   0019D0  EFFB  F00C         	goto	l729
  6071   0019D4                     u2510:
  6072   0019D4                     
  6073                           ;TAD_DATOS.c: 182:         if (intensity <= 0xA) {
  6074   0019D4  0E0B               	movlw	11
  6075   0019D6  6048               	cpfslt	setLEDIntensity@intensity^0,c
  6076   0019D8  EFF0  F00C         	goto	u2521
  6077   0019DC  EFF2  F00C         	goto	u2520
  6078   0019E0                     u2521:
  6079   0019E0  EFFB  F00C         	goto	l729
  6080   0019E4                     u2520:
  6081   0019E4                     
  6082                           ;TAD_DATOS.c: 183:             configurations[userIndex][ledIndex] = intensity;
  6083   0019E4  5049               	movf	setLEDIntensity@userIndex^0,w,c
  6084   0019E6  0D06               	mullw	6
  6085   0019E8  50F3               	movf	243,w,c
  6086   0019EA  0FC0               	addlw	low _configurations
  6087   0019EC  2447               	addwf	setLEDIntensity@ledIndex^0,w,c
  6088   0019EE  6ED9               	movwf	fsr2l,c
  6089   0019F0  6ADA               	clrf	fsr2h,c
  6090   0019F2  C048  FFDF         	movff	setLEDIntensity@intensity,indf2
  6091   0019F6                     l729:
  6092   0019F6  0012               	return		;funcret
  6093   0019F8                     __end_of_setLEDIntensity:
  6094                           	callstack 0
  6095                           
  6096 ;; *************** function _checkUserUID *****************
  6097 ;; Defined at:
  6098 ;;		line 81 in file "TAD_DATOS.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  1    wreg      unsigned char 
  6105 ;; Registers used:
  6106 ;;		wreg, status,2, status,0
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1
  6112 ;;      Params:         0       0       0
  6113 ;;      Locals:         0       0       0
  6114 ;;      Temps:          0       0       0
  6115 ;;      Totals:         0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used: 1
  6118 ;; Hardware stack levels required when called: 3
  6119 ;; This function calls:
  6120 ;;		Nothing
  6121 ;; This function is called by:
  6122 ;;		_setLed
  6123 ;;		_motor_datos
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text21
  6128   000B0A                     __ptext21:
  6129                           	callstack 0
  6130   000B0A                     _checkUserUID:
  6131                           	callstack 25
  6132   000B0A                     
  6133                           ;TAD_DATOS.c: 82:     if (currentUser[0] == userUIDs[0][0] && currentUser[1] == userUIDs
      +                          [0][1] &&
  6134   000B0A  0100               	movlb	0	; () banked
  6135   000B0C  5180               	movf	_userUIDs& (0+255),w,b
  6136   000B0E  183E               	xorwf	_currentUser^0,w,c
  6137   000B10  A4D8               	btfss	status,2,c
  6138   000B12  EF8D  F005         	goto	u2301
  6139   000B16  EF8F  F005         	goto	u2300
  6140   000B1A                     u2301:
  6141   000B1A  EFB6  F005         	goto	l3128
  6142   000B1E                     u2300:
  6143   000B1E                     
  6144                           ; BSR set to: 0
  6145   000B1E  5181               	movf	(_userUIDs+1)& (0+255),w,b
  6146   000B20  183F               	xorwf	(_currentUser+1)^0,w,c
  6147   000B22  A4D8               	btfss	status,2,c
  6148   000B24  EF96  F005         	goto	u2311
  6149   000B28  EF98  F005         	goto	u2310
  6150   000B2C                     u2311:
  6151   000B2C  EFB6  F005         	goto	l3128
  6152   000B30                     u2310:
  6153   000B30                     
  6154                           ; BSR set to: 0
  6155   000B30  5182               	movf	(_userUIDs+2)& (0+255),w,b
  6156   000B32  1840               	xorwf	(_currentUser+2)^0,w,c
  6157   000B34  A4D8               	btfss	status,2,c
  6158   000B36  EF9F  F005         	goto	u2321
  6159   000B3A  EFA1  F005         	goto	u2320
  6160   000B3E                     u2321:
  6161   000B3E  EFB6  F005         	goto	l3128
  6162   000B42                     u2320:
  6163   000B42                     
  6164                           ; BSR set to: 0
  6165   000B42  5183               	movf	(_userUIDs+3)& (0+255),w,b
  6166   000B44  1841               	xorwf	(_currentUser+3)^0,w,c
  6167   000B46  A4D8               	btfss	status,2,c
  6168   000B48  EFA8  F005         	goto	u2331
  6169   000B4C  EFAA  F005         	goto	u2330
  6170   000B50                     u2331:
  6171   000B50  EFB6  F005         	goto	l3128
  6172   000B54                     u2330:
  6173   000B54                     
  6174                           ; BSR set to: 0
  6175   000B54  5184               	movf	(_userUIDs+4)& (0+255),w,b
  6176   000B56  1842               	xorwf	(_currentUser+4)^0,w,c
  6177   000B58  A4D8               	btfss	status,2,c
  6178   000B5A  EFB1  F005         	goto	u2341
  6179   000B5E  EFB3  F005         	goto	u2340
  6180   000B62                     u2341:
  6181   000B62  EFB6  F005         	goto	l3128
  6182   000B66                     u2340:
  6183   000B66                     l3122:
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;TAD_DATOS.c: 84:         currentUser[4] == userUIDs[0][4]) {;TAD_DATOS.c: 85:         r
      +                          eturn 0;
  6187   000B66  0E00               	movlw	0
  6188   000B68  EF48  F006         	goto	l696
  6189   000B6C                     l3128:
  6190                           
  6191                           ; BSR set to: 0
  6192   000B6C  503E               	movf	_currentUser^0,w,c
  6193   000B6E  1990               	xorwf	(_userUIDs+16)& (0+255),w,b
  6194   000B70  A4D8               	btfss	status,2,c
  6195   000B72  EFBD  F005         	goto	u2351
  6196   000B76  EFBF  F005         	goto	u2350
  6197   000B7A                     u2351:
  6198   000B7A  EFE6  F005         	goto	l3144
  6199   000B7E                     u2350:
  6200   000B7E                     
  6201                           ; BSR set to: 0
  6202   000B7E  5191               	movf	(_userUIDs+17)& (0+255),w,b
  6203   000B80  183F               	xorwf	(_currentUser+1)^0,w,c
  6204   000B82  A4D8               	btfss	status,2,c
  6205   000B84  EFC6  F005         	goto	u2361
  6206   000B88  EFC8  F005         	goto	u2360
  6207   000B8C                     u2361:
  6208   000B8C  EFE6  F005         	goto	l3144
  6209   000B90                     u2360:
  6210   000B90                     
  6211                           ; BSR set to: 0
  6212   000B90  5192               	movf	(_userUIDs+18)& (0+255),w,b
  6213   000B92  1840               	xorwf	(_currentUser+2)^0,w,c
  6214   000B94  A4D8               	btfss	status,2,c
  6215   000B96  EFCF  F005         	goto	u2371
  6216   000B9A  EFD1  F005         	goto	u2370
  6217   000B9E                     u2371:
  6218   000B9E  EFE6  F005         	goto	l3144
  6219   000BA2                     u2370:
  6220   000BA2                     
  6221                           ; BSR set to: 0
  6222   000BA2  5193               	movf	(_userUIDs+19)& (0+255),w,b
  6223   000BA4  1841               	xorwf	(_currentUser+3)^0,w,c
  6224   000BA6  A4D8               	btfss	status,2,c
  6225   000BA8  EFD8  F005         	goto	u2381
  6226   000BAC  EFDA  F005         	goto	u2380
  6227   000BB0                     u2381:
  6228   000BB0  EFE6  F005         	goto	l3144
  6229   000BB4                     u2380:
  6230   000BB4                     
  6231                           ; BSR set to: 0
  6232   000BB4  5194               	movf	(_userUIDs+20)& (0+255),w,b
  6233   000BB6  1842               	xorwf	(_currentUser+4)^0,w,c
  6234   000BB8  A4D8               	btfss	status,2,c
  6235   000BBA  EFE1  F005         	goto	u2391
  6236   000BBE  EFE3  F005         	goto	u2390
  6237   000BC2                     u2391:
  6238   000BC2  EFE6  F005         	goto	l3144
  6239   000BC6                     u2390:
  6240   000BC6                     
  6241                           ; BSR set to: 0
  6242                           ;TAD_DATOS.c: 89:              currentUser[4] == userUIDs[1][4]) {;TAD_DATOS.c: 90:     
      +                              return 1;
  6243   000BC6  0E01               	movlw	1
  6244   000BC8  EF48  F006         	goto	l696
  6245   000BCC                     l3144:
  6246                           
  6247                           ; BSR set to: 0
  6248   000BCC  503E               	movf	_currentUser^0,w,c
  6249   000BCE  19A0               	xorwf	(_userUIDs+32)& (0+255),w,b
  6250   000BD0  A4D8               	btfss	status,2,c
  6251   000BD2  EFED  F005         	goto	u2401
  6252   000BD6  EFEF  F005         	goto	u2400
  6253   000BDA                     u2401:
  6254   000BDA  EF16  F006         	goto	l3160
  6255   000BDE                     u2400:
  6256   000BDE                     
  6257                           ; BSR set to: 0
  6258   000BDE  51A1               	movf	(_userUIDs+33)& (0+255),w,b
  6259   000BE0  183F               	xorwf	(_currentUser+1)^0,w,c
  6260   000BE2  A4D8               	btfss	status,2,c
  6261   000BE4  EFF6  F005         	goto	u2411
  6262   000BE8  EFF8  F005         	goto	u2410
  6263   000BEC                     u2411:
  6264   000BEC  EF16  F006         	goto	l3160
  6265   000BF0                     u2410:
  6266   000BF0                     
  6267                           ; BSR set to: 0
  6268   000BF0  51A2               	movf	(_userUIDs+34)& (0+255),w,b
  6269   000BF2  1840               	xorwf	(_currentUser+2)^0,w,c
  6270   000BF4  A4D8               	btfss	status,2,c
  6271   000BF6  EFFF  F005         	goto	u2421
  6272   000BFA  EF01  F006         	goto	u2420
  6273   000BFE                     u2421:
  6274   000BFE  EF16  F006         	goto	l3160
  6275   000C02                     u2420:
  6276   000C02                     
  6277                           ; BSR set to: 0
  6278   000C02  51A3               	movf	(_userUIDs+35)& (0+255),w,b
  6279   000C04  1841               	xorwf	(_currentUser+3)^0,w,c
  6280   000C06  A4D8               	btfss	status,2,c
  6281   000C08  EF08  F006         	goto	u2431
  6282   000C0C  EF0A  F006         	goto	u2430
  6283   000C10                     u2431:
  6284   000C10  EF16  F006         	goto	l3160
  6285   000C14                     u2430:
  6286   000C14                     
  6287                           ; BSR set to: 0
  6288   000C14  51A4               	movf	(_userUIDs+36)& (0+255),w,b
  6289   000C16  1842               	xorwf	(_currentUser+4)^0,w,c
  6290   000C18  A4D8               	btfss	status,2,c
  6291   000C1A  EF11  F006         	goto	u2441
  6292   000C1E  EF13  F006         	goto	u2440
  6293   000C22                     u2441:
  6294   000C22  EF16  F006         	goto	l3160
  6295   000C26                     u2440:
  6296   000C26                     
  6297                           ; BSR set to: 0
  6298                           ;TAD_DATOS.c: 94:              currentUser[4] == userUIDs[2][4]) {;TAD_DATOS.c: 95:     
      +                              return 2;
  6299   000C26  0E02               	movlw	2
  6300   000C28  EF48  F006         	goto	l696
  6301   000C2C                     l3160:
  6302                           
  6303                           ; BSR set to: 0
  6304   000C2C  503E               	movf	_currentUser^0,w,c
  6305   000C2E  19B0               	xorwf	(_userUIDs+48)& (0+255),w,b
  6306   000C30  A4D8               	btfss	status,2,c
  6307   000C32  EF1D  F006         	goto	u2451
  6308   000C36  EF1F  F006         	goto	u2450
  6309   000C3A                     u2451:
  6310   000C3A  EF46  F006         	goto	l699
  6311   000C3E                     u2450:
  6312   000C3E                     
  6313                           ; BSR set to: 0
  6314   000C3E  51B1               	movf	(_userUIDs+49)& (0+255),w,b
  6315   000C40  183F               	xorwf	(_currentUser+1)^0,w,c
  6316   000C42  A4D8               	btfss	status,2,c
  6317   000C44  EF26  F006         	goto	u2461
  6318   000C48  EF28  F006         	goto	u2460
  6319   000C4C                     u2461:
  6320   000C4C  EF46  F006         	goto	l699
  6321   000C50                     u2460:
  6322   000C50                     
  6323                           ; BSR set to: 0
  6324   000C50  51B2               	movf	(_userUIDs+50)& (0+255),w,b
  6325   000C52  1840               	xorwf	(_currentUser+2)^0,w,c
  6326   000C54  A4D8               	btfss	status,2,c
  6327   000C56  EF2F  F006         	goto	u2471
  6328   000C5A  EF31  F006         	goto	u2470
  6329   000C5E                     u2471:
  6330   000C5E  EF46  F006         	goto	l699
  6331   000C62                     u2470:
  6332   000C62                     
  6333                           ; BSR set to: 0
  6334   000C62  51B3               	movf	(_userUIDs+51)& (0+255),w,b
  6335   000C64  1841               	xorwf	(_currentUser+3)^0,w,c
  6336   000C66  A4D8               	btfss	status,2,c
  6337   000C68  EF38  F006         	goto	u2481
  6338   000C6C  EF3A  F006         	goto	u2480
  6339   000C70                     u2481:
  6340   000C70  EF46  F006         	goto	l699
  6341   000C74                     u2480:
  6342   000C74                     
  6343                           ; BSR set to: 0
  6344   000C74  51B4               	movf	(_userUIDs+52)& (0+255),w,b
  6345   000C76  1842               	xorwf	(_currentUser+4)^0,w,c
  6346   000C78  A4D8               	btfss	status,2,c
  6347   000C7A  EF41  F006         	goto	u2491
  6348   000C7E  EF43  F006         	goto	u2490
  6349   000C82                     u2491:
  6350   000C82  EF46  F006         	goto	l699
  6351   000C86                     u2490:
  6352   000C86                     
  6353                           ; BSR set to: 0
  6354                           ;TAD_DATOS.c: 99:              currentUser[4] == userUIDs[3][4]) {;TAD_DATOS.c: 100:    
      +                            return 3;
  6355   000C86  0E03               	movlw	3
  6356   000C88  EF48  F006         	goto	l696
  6357   000C8C                     l699:
  6358                           
  6359                           ; BSR set to: 0
  6360   000C8C  EFB3  F005         	goto	l3122
  6361   000C90                     l696:
  6362                           
  6363                           ; BSR set to: 0
  6364   000C90  0012               	return		;funcret
  6365   000C92                     __end_of_checkUserUID:
  6366                           	callstack 0
  6367                           
  6368 ;; *************** function _hashtag_pressed3s *****************
  6369 ;; Defined at:
  6370 ;;		line 56 in file "TAD_TERMINAL.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;		None
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg, status,2
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMRAM   BANK0   BANK1
  6384 ;;      Params:         0       0       0
  6385 ;;      Locals:         0       0       0
  6386 ;;      Temps:          0       0       0
  6387 ;;      Totals:         0       0       0
  6388 ;;Total ram usage:        0 bytes
  6389 ;; Hardware stack levels used: 1
  6390 ;; Hardware stack levels required when called: 3
  6391 ;; This function calls:
  6392 ;;		Nothing
  6393 ;; This function is called by:
  6394 ;;		_motorTeclado
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text22
  6399   001D3A                     __ptext22:
  6400                           	callstack 0
  6401   001D3A                     _hashtag_pressed3s:
  6402                           	callstack 26
  6403   001D3A                     
  6404                           ;TAD_TERMINAL.c: 57:  hashtag_pressed = 1;
  6405   001D3A  0E01               	movlw	1
  6406   001D3C  6E1A               	movwf	_hashtag_pressed^0,c
  6407   001D3E  0012               	return		;funcret
  6408   001D40                     __end_of_hashtag_pressed3s:
  6409                           	callstack 0
  6410                           
  6411 ;; *************** function _ReadFilas *****************
  6412 ;; Defined at:
  6413 ;;		line 9 in file "TAD_TECLADO.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      unsigned char 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1
  6427 ;;      Params:         0       0       0
  6428 ;;      Locals:         0       0       0
  6429 ;;      Temps:          0       0       0
  6430 ;;      Totals:         0       0       0
  6431 ;;Total ram usage:        0 bytes
  6432 ;; Hardware stack levels used: 1
  6433 ;; Hardware stack levels required when called: 3
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_motorTeclado
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text23
  6442   001D40                     __ptext23:
  6443                           	callstack 0
  6444   001D40                     _ReadFilas:
  6445                           	callstack 26
  6446   001D40                     
  6447                           ;TAD_TECLADO.c: 10:     return (PORTD & 0x0F);
  6448   001D40  5083               	movf	131,w,c	;volatile
  6449   001D42  0B0F               	andlw	15
  6450   001D44  0012               	return		;funcret
  6451   001D46                     __end_of_ReadFilas:
  6452                           	callstack 0
  6453                           
  6454 ;; *************** function _GetTecla *****************
  6455 ;; Defined at:
  6456 ;;		line 128 in file "TAD_TECLADO.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  6461 ;;  fila            1   16[COMRAM] unsigned char 
  6462 ;;  columna         1   15[COMRAM] unsigned char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1
  6472 ;;      Params:         0       0       0
  6473 ;;      Locals:        14       0       0
  6474 ;;      Temps:          2       0       0
  6475 ;;      Totals:        16       0       0
  6476 ;;Total ram usage:       16 bytes
  6477 ;; Hardware stack levels used: 1
  6478 ;; Hardware stack levels required when called: 3
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_motorTeclado
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text24
  6487   0011B6                     __ptext24:
  6488                           	callstack 0
  6489   0011B6                     _GetTecla:
  6490                           	callstack 26
  6491   0011B6                     
  6492                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  6493   0011B6  6A55               	clrf	GetTecla@columna^0,c
  6494                           
  6495                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  6496   0011B8  EFF0  F008         	goto	l1810
  6497   0011BC                     l178:
  6498   0011BC  6A56               	clrf	GetTecla@fila^0,c
  6499   0011BE  EF0E  F009         	goto	l1822
  6500   0011C2                     l1798:
  6501   0011C2  0E01               	movlw	1
  6502   0011C4  6E56               	movwf	GetTecla@fila^0,c
  6503   0011C6  EF0E  F009         	goto	l1822
  6504   0011CA                     l1800:
  6505   0011CA  0E02               	movlw	2
  6506   0011CC  6E56               	movwf	GetTecla@fila^0,c
  6507   0011CE  EF0E  F009         	goto	l1822
  6508   0011D2                     l1802:
  6509   0011D2  0E03               	movlw	3
  6510   0011D4  6E56               	movwf	GetTecla@fila^0,c
  6511   0011D6  EF0E  F009         	goto	l1822
  6512   0011DA                     l1804:
  6513   0011DA  0EFF               	movlw	255
  6514   0011DC  EF3C  F009         	goto	l184
  6515   0011E0                     l1810:
  6516   0011E0  5037               	movf	_Filas^0,w,c
  6517                           
  6518                           ; Switch size 1, requested type "simple"
  6519                           ; Number of cases is 4, Range of values is 1 to 8
  6520                           ; switch strategies available:
  6521                           ; Name         Instructions Cycles
  6522                           ; simple_byte           13     7 (average)
  6523                           ;	Chosen strategy is simple_byte
  6524   0011E2  0A01               	xorlw	1	; case 1
  6525   0011E4  B4D8               	btfsc	status,2,c
  6526   0011E6  EFDE  F008         	goto	l178
  6527   0011EA  0A03               	xorlw	3	; case 2
  6528   0011EC  B4D8               	btfsc	status,2,c
  6529   0011EE  EFE1  F008         	goto	l1798
  6530   0011F2  0A06               	xorlw	6	; case 4
  6531   0011F4  B4D8               	btfsc	status,2,c
  6532   0011F6  EFE5  F008         	goto	l1800
  6533   0011FA  0A0C               	xorlw	12	; case 8
  6534   0011FC  B4D8               	btfsc	status,2,c
  6535   0011FE  EFE9  F008         	goto	l1802
  6536   001202  EFED  F008         	goto	l1804
  6537   001206                     l186:
  6538   001206  6A55               	clrf	GetTecla@columna^0,c
  6539   001208  EF28  F009         	goto	l1824
  6540   00120C                     l1812:
  6541   00120C  0E01               	movlw	1
  6542   00120E  6E55               	movwf	GetTecla@columna^0,c
  6543   001210  EF28  F009         	goto	l1824
  6544   001214                     l1814:
  6545   001214  0E02               	movlw	2
  6546   001216  6E55               	movwf	GetTecla@columna^0,c
  6547   001218  EF28  F009         	goto	l1824
  6548   00121C                     l1822:
  6549   00121C  5036               	movf	_Columnas^0,w,c
  6550   00121E  0B07               	andlw	7
  6551   001220  6E47               	movwf	??_GetTecla^0,c
  6552   001222  6A48               	clrf	(??_GetTecla+1)^0,c
  6553                           
  6554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6555                           ; Switch size 1, requested type "simple"
  6556                           ; Number of cases is 1, Range of values is 0 to 0
  6557                           ; switch strategies available:
  6558                           ; Name         Instructions Cycles
  6559                           ; simple_byte            4     3 (average)
  6560                           ;	Chosen strategy is simple_byte
  6561   001224  5048               	movf	(??_GetTecla+1)^0,w,c
  6562   001226  0A00               	xorlw	0	; case 0
  6563   001228  B4D8               	btfsc	status,2,c
  6564   00122A  EF19  F009         	goto	l4222
  6565   00122E  EFED  F008         	goto	l1804
  6566   001232                     l4222:
  6567                           
  6568                           ; Switch size 1, requested type "simple"
  6569                           ; Number of cases is 3, Range of values is 1 to 4
  6570                           ; switch strategies available:
  6571                           ; Name         Instructions Cycles
  6572                           ; simple_byte           10     6 (average)
  6573                           ;	Chosen strategy is simple_byte
  6574   001232  5047               	movf	??_GetTecla^0,w,c
  6575   001234  0A01               	xorlw	1	; case 1
  6576   001236  B4D8               	btfsc	status,2,c
  6577   001238  EF03  F009         	goto	l186
  6578   00123C  0A03               	xorlw	3	; case 2
  6579   00123E  B4D8               	btfsc	status,2,c
  6580   001240  EF06  F009         	goto	l1812
  6581   001244  0A06               	xorlw	6	; case 4
  6582   001246  B4D8               	btfsc	status,2,c
  6583   001248  EF0A  F009         	goto	l1814
  6584   00124C  EFED  F008         	goto	l1804
  6585   001250                     l1824:
  6586                           
  6587                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  6588   001250  0EC5               	movlw	low GetTecla@F2752
  6589   001252  6EF6               	movwf	tblptrl,c
  6590   001254                     	if	1	;There is more than 1 active tblptr byte
  6591   001254  0E1E               	movlw	high GetTecla@F2752
  6592   001256  6EF7               	movwf	tblptrh,c
  6593   001258                     	endif
  6594   001258                     	if	0	;There are less than 3 active tblptr bytes
  6595   001258                     	endif
  6596   001258  EE20  F049         	lfsr	2,GetTecla@keymap
  6597   00125C  0E0B               	movlw	11
  6598   00125E                     u680:
  6599   00125E  0009               	tblrd		*+
  6600   001260  CFF5 FFDE          	movff	tablat,postinc2
  6601   001264  06E8               	decf	wreg,f,c
  6602   001266  E2FB               	bc	u680
  6603   001268                     
  6604                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  6605   001268  5056               	movf	GetTecla@fila^0,w,c
  6606   00126A  0D03               	mullw	3
  6607   00126C  50F3               	movf	243,w,c
  6608   00126E  0F49               	addlw	low GetTecla@keymap
  6609   001270  2455               	addwf	GetTecla@columna^0,w,c
  6610   001272  6ED9               	movwf	fsr2l,c
  6611   001274  6ADA               	clrf	fsr2h,c
  6612   001276  50DF               	movf	indf2,w,c
  6613   001278                     l184:
  6614   001278  0012               	return		;funcret
  6615   00127A                     __end_of_GetTecla:
  6616                           	callstack 0
  6617                           
  6618 ;; *************** function _initTeclado *****************
  6619 ;; Defined at:
  6620 ;;		line 13 in file "TAD_TECLADO.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1
  6634 ;;      Params:         0       0       0
  6635 ;;      Locals:         0       0       0
  6636 ;;      Temps:          0       0       0
  6637 ;;      Totals:         0       0       0
  6638 ;;Total ram usage:        0 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 4
  6641 ;; This function calls:
  6642 ;;		_TI_NewTimer
  6643 ;;		_initPortsTeclado
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text25
  6650   001C6E                     __ptext25:
  6651                           	callstack 0
  6652   001C6E                     _initTeclado:
  6653                           	callstack 26
  6654   001C6E                     
  6655                           ;TAD_TECLADO.c: 14:  initPortsTeclado();
  6656   001C6E  EC95  F00E         	call	_initPortsTeclado	;wreg free
  6657   001C72                     
  6658                           ;TAD_TECLADO.c: 15:     Filas = 0x00;
  6659   001C72  6A37               	clrf	_Filas^0,c
  6660   001C74                     
  6661                           ;TAD_TECLADO.c: 16:     Columnas = 0x00;
  6662   001C74  6A36               	clrf	_Columnas^0,c
  6663   001C76                     
  6664                           ;TAD_TECLADO.c: 17:     tecla = 0;
  6665   001C76  6A35               	clrf	_tecla^0,c
  6666   001C78                     
  6667                           ;TAD_TECLADO.c: 18:  state = 0;
  6668   001C78  6A34               	clrf	_state^0,c
  6669   001C7A                     
  6670                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  6671   001C7A  0E45               	movlw	low _timer
  6672   001C7C  6E47               	movwf	TI_NewTimer@TimerHandle^0,c
  6673   001C7E  EC19  F00C         	call	_TI_NewTimer	;wreg free
  6674   001C82  0012               	return		;funcret
  6675   001C84                     __end_of_initTeclado:
  6676                           	callstack 0
  6677                           
  6678 ;; *************** function _initPortsTeclado *****************
  6679 ;; Defined at:
  6680 ;;		line 22 in file "TAD_TECLADO.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      void 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1
  6694 ;;      Params:         0       0       0
  6695 ;;      Locals:         0       0       0
  6696 ;;      Temps:          0       0       0
  6697 ;;      Totals:         0       0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used: 1
  6700 ;; Hardware stack levels required when called: 3
  6701 ;; This function calls:
  6702 ;;		Nothing
  6703 ;; This function is called by:
  6704 ;;		_initTeclado
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           	psect	text26
  6709   001D2A                     __ptext26:
  6710                           	callstack 0
  6711   001D2A                     _initPortsTeclado:
  6712                           	callstack 26
  6713   001D2A                     
  6714                           ;TAD_TECLADO.c: 25:  TRISD = 0x0F;
  6715   001D2A  0E0F               	movlw	15
  6716   001D2C  6E95               	movwf	149,c	;volatile
  6717   001D2E                     
  6718                           ;TAD_TECLADO.c: 26:  LATD = 0x00;
  6719   001D2E  6A8C               	clrf	140,c	;volatile
  6720   001D30  0012               	return		;funcret
  6721   001D32                     __end_of_initPortsTeclado:
  6722                           	callstack 0
  6723                           
  6724 ;; *************** function _initRFID *****************
  6725 ;; Defined at:
  6726 ;;		line 234 in file "TAD_RFID.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1
  6740 ;;      Params:         0       0       0
  6741 ;;      Locals:         0       0       0
  6742 ;;      Temps:          0       0       0
  6743 ;;      Totals:         0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used: 1
  6746 ;; Hardware stack levels required when called: 8
  6747 ;; This function calls:
  6748 ;;		_InitPortDirections
  6749 ;;		_MFRC522_Init
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text27
  6756   001D18                     __ptext27:
  6757                           	callstack 0
  6758   001D18                     _initRFID:
  6759                           	callstack 22
  6760   001D18                     
  6761                           ;TAD_RFID.c: 235:     InitPortDirections();
  6762   001D18  EC86  F00E         	call	_InitPortDirections	;wreg free
  6763   001D1C                     
  6764                           ;TAD_RFID.c: 236:     MFRC522_Init();
  6765   001D1C  EC44  F00C         	call	_MFRC522_Init	;wreg free
  6766   001D20  0012               	return		;funcret
  6767   001D22                     __end_of_initRFID:
  6768                           	callstack 0
  6769                           
  6770 ;; *************** function _MFRC522_Init *****************
  6771 ;; Defined at:
  6772 ;;		line 116 in file "TAD_RFID.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1
  6786 ;;      Params:         0       0       0
  6787 ;;      Locals:         0       0       0
  6788 ;;      Temps:          0       0       0
  6789 ;;      Totals:         0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used: 1
  6792 ;; Hardware stack levels required when called: 7
  6793 ;; This function calls:
  6794 ;;		_MFRC522_AntennaOff
  6795 ;;		_MFRC522_AntennaOn
  6796 ;;		_MFRC522_Reset
  6797 ;;		_MFRC522_Wr
  6798 ;; This function is called by:
  6799 ;;		_initRFID
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text28
  6804   001888                     __ptext28:
  6805                           	callstack 0
  6806   001888                     _MFRC522_Init:
  6807                           	callstack 22
  6808   001888                     
  6809                           ;TAD_RFID.c: 117:     LATCbits.LATC3 = 1;
  6810   001888  868B               	bsf	139,3,c	;volatile
  6811                           
  6812                           ;TAD_RFID.c: 118:     LATCbits.LATC4 = 1;
  6813   00188A  888B               	bsf	139,4,c	;volatile
  6814   00188C                     
  6815                           ;TAD_RFID.c: 120:     MFRC522_Reset();
  6816   00188C  ECDA  F00D         	call	_MFRC522_Reset	;wreg free
  6817                           
  6818                           ;TAD_RFID.c: 121:     MFRC522_Wr(0x2A, 0x8D);
  6819   001890  0E8D               	movlw	141
  6820   001892  6E51               	movwf	MFRC522_Wr@value^0,c
  6821   001894  0E2A               	movlw	42
  6822   001896  EC98  F009         	call	_MFRC522_Wr
  6823                           
  6824                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2B, 0x3E);
  6825   00189A  0E3E               	movlw	62
  6826   00189C  6E51               	movwf	MFRC522_Wr@value^0,c
  6827   00189E  0E2B               	movlw	43
  6828   0018A0  EC98  F009         	call	_MFRC522_Wr
  6829                           
  6830                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2D, 30);
  6831   0018A4  0E1E               	movlw	30
  6832   0018A6  6E51               	movwf	MFRC522_Wr@value^0,c
  6833   0018A8  0E2D               	movlw	45
  6834   0018AA  EC98  F009         	call	_MFRC522_Wr
  6835                           
  6836                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2C, 0);
  6837   0018AE  0E00               	movlw	0
  6838   0018B0  6E51               	movwf	MFRC522_Wr@value^0,c
  6839   0018B2  0E2C               	movlw	44
  6840   0018B4  EC98  F009         	call	_MFRC522_Wr
  6841                           
  6842                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x15, 0x40);
  6843   0018B8  0E40               	movlw	64
  6844   0018BA  6E51               	movwf	MFRC522_Wr@value^0,c
  6845   0018BC  0E15               	movlw	21
  6846   0018BE  EC98  F009         	call	_MFRC522_Wr
  6847                           
  6848                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x11, 0x3D);
  6849   0018C2  0E3D               	movlw	61
  6850   0018C4  6E51               	movwf	MFRC522_Wr@value^0,c
  6851   0018C6  0E11               	movlw	17
  6852   0018C8  EC98  F009         	call	_MFRC522_Wr
  6853                           
  6854                           ;TAD_RFID.c: 128:     MFRC522_AntennaOff();
  6855   0018CC  EC80  F00E         	call	_MFRC522_AntennaOff	;wreg free
  6856                           
  6857                           ;TAD_RFID.c: 129:     MFRC522_AntennaOn();
  6858   0018D0  EC7A  F00E         	call	_MFRC522_AntennaOn	;wreg free
  6859   0018D4  0012               	return		;funcret
  6860   0018D6                     __end_of_MFRC522_Init:
  6861                           	callstack 0
  6862                           
  6863 ;; *************** function _MFRC522_Reset *****************
  6864 ;; Defined at:
  6865 ;;		line 97 in file "TAD_RFID.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;		None
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;		None
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1
  6879 ;;      Params:         0       0       0
  6880 ;;      Locals:         0       0       0
  6881 ;;      Temps:          0       0       0
  6882 ;;      Totals:         0       0       0
  6883 ;;Total ram usage:        0 bytes
  6884 ;; Hardware stack levels used: 1
  6885 ;; Hardware stack levels required when called: 5
  6886 ;; This function calls:
  6887 ;;		_MFRC522_Wr
  6888 ;;		_delay_us
  6889 ;; This function is called by:
  6890 ;;		_MFRC522_Init
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text29
  6895   001BB4                     __ptext29:
  6896                           	callstack 0
  6897   001BB4                     _MFRC522_Reset:
  6898                           	callstack 23
  6899   001BB4                     
  6900                           ;TAD_RFID.c: 98:     LATCbits.LATC4 = 1;
  6901   001BB4  888B               	bsf	139,4,c	;volatile
  6902   001BB6                     
  6903                           ;TAD_RFID.c: 99:     delay_us (1);
  6904   001BB6  0E01               	movlw	1
  6905   001BB8  EC8C  F00D         	call	_delay_us
  6906   001BBC                     
  6907                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 0;
  6908   001BBC  988B               	bcf	139,4,c	;volatile
  6909                           
  6910                           ;TAD_RFID.c: 101:     delay_us (1);
  6911   001BBE  0E01               	movlw	1
  6912   001BC0  EC8C  F00D         	call	_delay_us
  6913   001BC4                     
  6914                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 1;
  6915   001BC4  888B               	bsf	139,4,c	;volatile
  6916                           
  6917                           ;TAD_RFID.c: 103:     delay_us (1);
  6918   001BC6  0E01               	movlw	1
  6919   001BC8  EC8C  F00D         	call	_delay_us
  6920                           
  6921                           ;TAD_RFID.c: 104:     MFRC522_Wr(0x01, 0x0F);
  6922   001BCC  0E0F               	movlw	15
  6923   001BCE  6E51               	movwf	MFRC522_Wr@value^0,c
  6924   001BD0  0E01               	movlw	1
  6925   001BD2  EC98  F009         	call	_MFRC522_Wr
  6926                           
  6927                           ;TAD_RFID.c: 105:     delay_us (1);
  6928   001BD6  0E01               	movlw	1
  6929   001BD8  EC8C  F00D         	call	_delay_us
  6930   001BDC  0012               	return		;funcret
  6931   001BDE                     __end_of_MFRC522_Reset:
  6932                           	callstack 0
  6933                           
  6934 ;; *************** function _MFRC522_AntennaOn *****************
  6935 ;; Defined at:
  6936 ;;		line 108 in file "TAD_RFID.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;		None
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      void 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1
  6950 ;;      Params:         0       0       0
  6951 ;;      Locals:         0       0       0
  6952 ;;      Temps:          0       0       0
  6953 ;;      Totals:         0       0       0
  6954 ;;Total ram usage:        0 bytes
  6955 ;; Hardware stack levels used: 1
  6956 ;; Hardware stack levels required when called: 6
  6957 ;; This function calls:
  6958 ;;		_MFRC522_Set_Bit
  6959 ;; This function is called by:
  6960 ;;		_MFRC522_Init
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text30
  6965   001CF4                     __ptext30:
  6966                           	callstack 0
  6967   001CF4                     _MFRC522_AntennaOn:
  6968                           	callstack 22
  6969   001CF4                     
  6970                           ;TAD_RFID.c: 109:     MFRC522_Set_Bit(0x14, 0x03);
  6971   001CF4  0E03               	movlw	3
  6972   001CF6  6E56               	movwf	MFRC522_Set_Bit@mask^0,c
  6973   001CF8  0E14               	movlw	20
  6974   001CFA  EC57  F00E         	call	_MFRC522_Set_Bit
  6975   001CFE  0012               	return		;funcret
  6976   001D00                     __end_of_MFRC522_AntennaOn:
  6977                           	callstack 0
  6978                           
  6979 ;; *************** function _MFRC522_Set_Bit *****************
  6980 ;; Defined at:
  6981 ;;		line 93 in file "TAD_RFID.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  addr            1    wreg     unsigned char 
  6984 ;;  mask            1   16[COMRAM] unsigned char 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  addr            1   17[COMRAM] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMRAM   BANK0   BANK1
  6996 ;;      Params:         1       0       0
  6997 ;;      Locals:         1       0       0
  6998 ;;      Temps:          0       0       0
  6999 ;;      Totals:         2       0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used: 1
  7002 ;; Hardware stack levels required when called: 5
  7003 ;; This function calls:
  7004 ;;		_MFRC522_Rd
  7005 ;;		_MFRC522_Wr
  7006 ;; This function is called by:
  7007 ;;		_MFRC522_AntennaOn
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text31
  7012   001CAE                     __ptext31:
  7013                           	callstack 0
  7014   001CAE                     _MFRC522_Set_Bit:
  7015                           	callstack 22
  7016                           
  7017                           ;incstack = 0
  7018                           ;MFRC522_Set_Bit@addr stored from wreg
  7019   001CAE  6E57               	movwf	MFRC522_Set_Bit@addr^0,c
  7020   001CB0                     
  7021                           ;TAD_RFID.c: 94:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  7022   001CB0  5057               	movf	MFRC522_Set_Bit@addr^0,w,c
  7023   001CB2  ECEC  F009         	call	_MFRC522_Rd
  7024   001CB6  1056               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  7025   001CB8  6E51               	movwf	MFRC522_Wr@value^0,c
  7026   001CBA  5057               	movf	MFRC522_Set_Bit@addr^0,w,c
  7027   001CBC  EC98  F009         	call	_MFRC522_Wr
  7028   001CC0  0012               	return		;funcret
  7029   001CC2                     __end_of_MFRC522_Set_Bit:
  7030                           	callstack 0
  7031                           
  7032 ;; *************** function _MFRC522_AntennaOff *****************
  7033 ;; Defined at:
  7034 ;;		line 112 in file "TAD_RFID.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;		None
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1
  7048 ;;      Params:         0       0       0
  7049 ;;      Locals:         0       0       0
  7050 ;;      Temps:          0       0       0
  7051 ;;      Totals:         0       0       0
  7052 ;;Total ram usage:        0 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 6
  7055 ;; This function calls:
  7056 ;;		_MFRC522_Clear_Bit
  7057 ;; This function is called by:
  7058 ;;		_MFRC522_Init
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text32
  7063   001D00                     __ptext32:
  7064                           	callstack 0
  7065   001D00                     _MFRC522_AntennaOff:
  7066                           	callstack 22
  7067   001D00                     
  7068                           ;TAD_RFID.c: 113:     MFRC522_Clear_Bit(0x14, 0x03);
  7069   001D00  0E03               	movlw	3
  7070   001D02  6E56               	movwf	MFRC522_Clear_Bit@mask^0,c
  7071   001D04  0E14               	movlw	20
  7072   001D06  EC1E  F00E         	call	_MFRC522_Clear_Bit
  7073   001D0A  0012               	return		;funcret
  7074   001D0C                     __end_of_MFRC522_AntennaOff:
  7075                           	callstack 0
  7076                           
  7077 ;; *************** function _MFRC522_Clear_Bit *****************
  7078 ;; Defined at:
  7079 ;;		line 89 in file "TAD_RFID.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;  addr            1    wreg     unsigned char 
  7082 ;;  mask            1   16[COMRAM] unsigned char 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  addr            1   18[COMRAM] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1
  7094 ;;      Params:         1       0       0
  7095 ;;      Locals:         1       0       0
  7096 ;;      Temps:          1       0       0
  7097 ;;      Totals:         3       0       0
  7098 ;;Total ram usage:        3 bytes
  7099 ;; Hardware stack levels used: 1
  7100 ;; Hardware stack levels required when called: 5
  7101 ;; This function calls:
  7102 ;;		_MFRC522_Rd
  7103 ;;		_MFRC522_Wr
  7104 ;; This function is called by:
  7105 ;;		_MFRC522_AntennaOff
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text33
  7110   001C3C                     __ptext33:
  7111                           	callstack 0
  7112   001C3C                     _MFRC522_Clear_Bit:
  7113                           	callstack 22
  7114                           
  7115                           ;incstack = 0
  7116                           ;MFRC522_Clear_Bit@addr stored from wreg
  7117   001C3C  6E58               	movwf	MFRC522_Clear_Bit@addr^0,c
  7118   001C3E                     
  7119                           ;TAD_RFID.c: 90:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  7120   001C3E  5056               	movf	MFRC522_Clear_Bit@mask^0,w,c
  7121   001C40  0AFF               	xorlw	255
  7122   001C42  6E57               	movwf	??_MFRC522_Clear_Bit^0,c
  7123   001C44  5058               	movf	MFRC522_Clear_Bit@addr^0,w,c
  7124   001C46  ECEC  F009         	call	_MFRC522_Rd
  7125   001C4A  1457               	andwf	??_MFRC522_Clear_Bit^0,w,c
  7126   001C4C  6E51               	movwf	MFRC522_Wr@value^0,c
  7127   001C4E  5058               	movf	MFRC522_Clear_Bit@addr^0,w,c
  7128   001C50  EC98  F009         	call	_MFRC522_Wr
  7129   001C54  0012               	return		;funcret
  7130   001C56                     __end_of_MFRC522_Clear_Bit:
  7131                           	callstack 0
  7132                           
  7133 ;; *************** function _MFRC522_Wr *****************
  7134 ;; Defined at:
  7135 ;;		line 61 in file "TAD_RFID.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  Address         1    wreg     unsigned char 
  7138 ;;  value           1   11[COMRAM] unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  Address         1   13[COMRAM] unsigned char 
  7141 ;;  i               1   15[COMRAM] unsigned char 
  7142 ;;  ucAddr          1   14[COMRAM] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1
  7152 ;;      Params:         1       0       0
  7153 ;;      Locals:         3       0       0
  7154 ;;      Temps:          1       0       0
  7155 ;;      Totals:         5       0       0
  7156 ;;Total ram usage:        5 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 4
  7159 ;; This function calls:
  7160 ;;		_delay_us
  7161 ;; This function is called by:
  7162 ;;		_MFRC522_Clear_Bit
  7163 ;;		_MFRC522_Set_Bit
  7164 ;;		_MFRC522_Reset
  7165 ;;		_MFRC522_Init
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text34
  7170   001330                     __ptext34:
  7171                           	callstack 0
  7172   001330                     _MFRC522_Wr:
  7173                           	callstack 24
  7174                           
  7175                           ;incstack = 0
  7176                           ;MFRC522_Wr@Address stored from wreg
  7177   001330  6E53               	movwf	MFRC522_Wr@Address^0,c
  7178   001332                     
  7179                           ;TAD_RFID.c: 62:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  7180   001332  5053               	movf	MFRC522_Wr@Address^0,w,c
  7181   001334  2453               	addwf	MFRC522_Wr@Address^0,w,c
  7182   001336  0B7E               	andlw	126
  7183   001338  6E54               	movwf	MFRC522_Wr@ucAddr^0,c
  7184   00133A                     
  7185                           ;TAD_RFID.c: 63:     LATCbits.LATC2 = 0;
  7186   00133A  948B               	bcf	139,2,c	;volatile
  7187   00133C                     
  7188                           ;TAD_RFID.c: 64:     LATCbits.LATC3 = 0;
  7189   00133C  968B               	bcf	139,3,c	;volatile
  7190   00133E                     
  7191                           ;TAD_RFID.c: 65:     for (i = 8; i > 0; i--) {
  7192   00133E  0E08               	movlw	8
  7193   001340  6E55               	movwf	MFRC522_Wr@i^0,c
  7194   001342                     l2964:
  7195                           
  7196                           ;TAD_RFID.c: 66:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  7197   001342  BE54               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  7198   001344  EFA6  F009         	goto	u1981
  7199   001348  EFAA  F009         	goto	u1980
  7200   00134C                     u1981:
  7201   00134C  6A52               	clrf	??_MFRC522_Wr^0,c
  7202   00134E  2A52               	incf	??_MFRC522_Wr^0,f,c
  7203   001350  EFAB  F009         	goto	u1998
  7204   001354                     u1980:
  7205   001354  6A52               	clrf	??_MFRC522_Wr^0,c
  7206   001356                     u1998:
  7207   001356  4652               	rlncf	??_MFRC522_Wr^0,f,c
  7208   001358  508B               	movf	139,w,c	;volatile
  7209   00135A  1852               	xorwf	??_MFRC522_Wr^0,w,c
  7210   00135C  0BFD               	andlw	-3
  7211   00135E  1852               	xorwf	??_MFRC522_Wr^0,w,c
  7212   001360  6E8B               	movwf	139,c	;volatile
  7213   001362                     
  7214                           ;TAD_RFID.c: 67:         LATCbits.LATC2 = 1;
  7215   001362  848B               	bsf	139,2,c	;volatile
  7216                           
  7217                           ;TAD_RFID.c: 68:         ucAddr <<= 1;
  7218   001364  90D8               	bcf	status,0,c
  7219   001366  3654               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  7220   001368                     
  7221                           ;TAD_RFID.c: 69:         delay_us(5);
  7222   001368  0E05               	movlw	5
  7223   00136A  EC8C  F00D         	call	_delay_us
  7224   00136E                     
  7225                           ;TAD_RFID.c: 70:         LATCbits.LATC2 = 0;
  7226   00136E  948B               	bcf	139,2,c	;volatile
  7227   001370                     
  7228                           ;TAD_RFID.c: 71:         delay_us(5);
  7229   001370  0E05               	movlw	5
  7230   001372  EC8C  F00D         	call	_delay_us
  7231   001376                     
  7232                           ;TAD_RFID.c: 72:     }
  7233   001376  0655               	decf	MFRC522_Wr@i^0,f,c
  7234   001378  5055               	movf	MFRC522_Wr@i^0,w,c
  7235   00137A  A4D8               	btfss	status,2,c
  7236   00137C  EFC2  F009         	goto	u2001
  7237   001380  EFC4  F009         	goto	u2000
  7238   001384                     u2001:
  7239   001384  EFA1  F009         	goto	l2964
  7240   001388                     u2000:
  7241   001388                     
  7242                           ;TAD_RFID.c: 74:     for (i = 8; i > 0; i--) {
  7243   001388  0E08               	movlw	8
  7244   00138A  6E55               	movwf	MFRC522_Wr@i^0,c
  7245   00138C                     l2982:
  7246                           
  7247                           ;TAD_RFID.c: 75:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  7248   00138C  BE51               	btfsc	MFRC522_Wr@value^0,7,c
  7249   00138E  EFCB  F009         	goto	u2011
  7250   001392  EFCF  F009         	goto	u2010
  7251   001396                     u2011:
  7252   001396  6A52               	clrf	??_MFRC522_Wr^0,c
  7253   001398  2A52               	incf	??_MFRC522_Wr^0,f,c
  7254   00139A  EFD0  F009         	goto	u2028
  7255   00139E                     u2010:
  7256   00139E  6A52               	clrf	??_MFRC522_Wr^0,c
  7257   0013A0                     u2028:
  7258   0013A0  4652               	rlncf	??_MFRC522_Wr^0,f,c
  7259   0013A2  508B               	movf	139,w,c	;volatile
  7260   0013A4  1852               	xorwf	??_MFRC522_Wr^0,w,c
  7261   0013A6  0BFD               	andlw	-3
  7262   0013A8  1852               	xorwf	??_MFRC522_Wr^0,w,c
  7263   0013AA  6E8B               	movwf	139,c	;volatile
  7264   0013AC                     
  7265                           ;TAD_RFID.c: 76:         LATCbits.LATC2 = 1;
  7266   0013AC  848B               	bsf	139,2,c	;volatile
  7267                           
  7268                           ;TAD_RFID.c: 77:         value <<= 1;
  7269   0013AE  90D8               	bcf	status,0,c
  7270   0013B0  3651               	rlcf	MFRC522_Wr@value^0,f,c
  7271   0013B2                     
  7272                           ;TAD_RFID.c: 78:         delay_us(5);
  7273   0013B2  0E05               	movlw	5
  7274   0013B4  EC8C  F00D         	call	_delay_us
  7275   0013B8                     
  7276                           ;TAD_RFID.c: 79:         LATCbits.LATC2 = 0;
  7277   0013B8  948B               	bcf	139,2,c	;volatile
  7278   0013BA                     
  7279                           ;TAD_RFID.c: 80:         delay_us(5);
  7280   0013BA  0E05               	movlw	5
  7281   0013BC  EC8C  F00D         	call	_delay_us
  7282   0013C0                     
  7283                           ;TAD_RFID.c: 81:     }
  7284   0013C0  0655               	decf	MFRC522_Wr@i^0,f,c
  7285   0013C2  5055               	movf	MFRC522_Wr@i^0,w,c
  7286   0013C4  A4D8               	btfss	status,2,c
  7287   0013C6  EFE7  F009         	goto	u2031
  7288   0013CA  EFE9  F009         	goto	u2030
  7289   0013CE                     u2031:
  7290   0013CE  EFC6  F009         	goto	l2982
  7291   0013D2                     u2030:
  7292   0013D2                     
  7293                           ;TAD_RFID.c: 83:     LATCbits.LATC3 = 1;
  7294   0013D2  868B               	bsf	139,3,c	;volatile
  7295                           
  7296                           ;TAD_RFID.c: 84:     LATCbits.LATC2 = 1;
  7297   0013D4  848B               	bsf	139,2,c	;volatile
  7298   0013D6  0012               	return		;funcret
  7299   0013D8                     __end_of_MFRC522_Wr:
  7300                           	callstack 0
  7301                           
  7302 ;; *************** function _MFRC522_Rd *****************
  7303 ;; Defined at:
  7304 ;;		line 30 in file "TAD_RFID.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  Address         1    wreg     unsigned char 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  Address         1    7[COMRAM] unsigned char 
  7309 ;;  i               1   10[COMRAM] unsigned char 
  7310 ;;  ucResult        1    9[COMRAM] unsigned char 
  7311 ;;  ucAddr          1    8[COMRAM] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      unsigned char 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMRAM   BANK0   BANK1
  7321 ;;      Params:         0       0       0
  7322 ;;      Locals:         4       0       0
  7323 ;;      Temps:          1       0       0
  7324 ;;      Totals:         5       0       0
  7325 ;;Total ram usage:        5 bytes
  7326 ;; Hardware stack levels used: 1
  7327 ;; Hardware stack levels required when called: 4
  7328 ;; This function calls:
  7329 ;;		_delay_us
  7330 ;; This function is called by:
  7331 ;;		_MFRC522_Clear_Bit
  7332 ;;		_MFRC522_Set_Bit
  7333 ;;		_motor_RFID
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text35
  7338   0013D8                     __ptext35:
  7339                           	callstack 0
  7340   0013D8                     _MFRC522_Rd:
  7341                           	callstack 25
  7342                           
  7343                           ;incstack = 0
  7344                           ;MFRC522_Rd@Address stored from wreg
  7345   0013D8  6E4D               	movwf	MFRC522_Rd@Address^0,c
  7346   0013DA                     
  7347                           ;TAD_RFID.c: 31:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  7348   0013DA  504D               	movf	MFRC522_Rd@Address^0,w,c
  7349   0013DC  244D               	addwf	MFRC522_Rd@Address^0,w,c
  7350   0013DE  0B7E               	andlw	126
  7351   0013E0  0980               	iorlw	128
  7352   0013E2  6E4E               	movwf	MFRC522_Rd@ucAddr^0,c
  7353   0013E4                     
  7354                           ;TAD_RFID.c: 32:     unsigned char ucResult = 0;
  7355   0013E4  6A4F               	clrf	MFRC522_Rd@ucResult^0,c
  7356   0013E6                     
  7357                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 0;
  7358   0013E6  948B               	bcf	139,2,c	;volatile
  7359   0013E8                     
  7360                           ;TAD_RFID.c: 35:     LATCbits.LATC3 = 0;
  7361   0013E8  968B               	bcf	139,3,c	;volatile
  7362   0013EA                     
  7363                           ;TAD_RFID.c: 37:     for (i = 8; i > 0; i--) {
  7364   0013EA  0E08               	movlw	8
  7365   0013EC  6E50               	movwf	MFRC522_Rd@i^0,c
  7366   0013EE                     l1492:
  7367                           
  7368                           ;TAD_RFID.c: 38:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  7369   0013EE  BE4E               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  7370   0013F0  EFFC  F009         	goto	u31
  7371   0013F4  EF00  F00A         	goto	u30
  7372   0013F8                     u31:
  7373   0013F8  6A4C               	clrf	??_MFRC522_Rd^0,c
  7374   0013FA  2A4C               	incf	??_MFRC522_Rd^0,f,c
  7375   0013FC  EF01  F00A         	goto	u48
  7376   001400                     u30:
  7377   001400  6A4C               	clrf	??_MFRC522_Rd^0,c
  7378   001402                     u48:
  7379   001402  464C               	rlncf	??_MFRC522_Rd^0,f,c
  7380   001404  508B               	movf	139,w,c	;volatile
  7381   001406  184C               	xorwf	??_MFRC522_Rd^0,w,c
  7382   001408  0BFD               	andlw	-3
  7383   00140A  184C               	xorwf	??_MFRC522_Rd^0,w,c
  7384   00140C  6E8B               	movwf	139,c	;volatile
  7385   00140E                     
  7386                           ;TAD_RFID.c: 39:         LATCbits.LATC2 = 1;
  7387   00140E  848B               	bsf	139,2,c	;volatile
  7388   001410                     
  7389                           ;TAD_RFID.c: 40:         delay_us(5);
  7390   001410  0E05               	movlw	5
  7391   001412  EC8C  F00D         	call	_delay_us
  7392   001416                     
  7393                           ;TAD_RFID.c: 41:         ucAddr <<= 1;
  7394   001416  90D8               	bcf	status,0,c
  7395   001418  364E               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  7396   00141A                     
  7397                           ;TAD_RFID.c: 42:         LATCbits.LATC2 = 0;
  7398   00141A  948B               	bcf	139,2,c	;volatile
  7399                           
  7400                           ;TAD_RFID.c: 43:         delay_us(5);
  7401   00141C  0E05               	movlw	5
  7402   00141E  EC8C  F00D         	call	_delay_us
  7403   001422                     
  7404                           ;TAD_RFID.c: 44:     }
  7405   001422  0650               	decf	MFRC522_Rd@i^0,f,c
  7406   001424  5050               	movf	MFRC522_Rd@i^0,w,c
  7407   001426  A4D8               	btfss	status,2,c
  7408   001428  EF18  F00A         	goto	u51
  7409   00142C  EF1A  F00A         	goto	u50
  7410   001430                     u51:
  7411   001430  EFF7  F009         	goto	l1492
  7412   001434                     u50:
  7413   001434                     
  7414                           ;TAD_RFID.c: 46:     for (i = 8; i > 0; i--) {
  7415   001434  0E08               	movlw	8
  7416   001436  6E50               	movwf	MFRC522_Rd@i^0,c
  7417   001438                     l218:
  7418                           
  7419                           ;TAD_RFID.c: 47:         LATCbits.LATC2 = 1;
  7420   001438  848B               	bsf	139,2,c	;volatile
  7421   00143A                     
  7422                           ;TAD_RFID.c: 48:         delay_us(5);
  7423   00143A  0E05               	movlw	5
  7424   00143C  EC8C  F00D         	call	_delay_us
  7425   001440                     
  7426                           ;TAD_RFID.c: 49:         ucResult <<= 1;
  7427   001440  90D8               	bcf	status,0,c
  7428   001442  364F               	rlcf	MFRC522_Rd@ucResult^0,f,c
  7429   001444                     
  7430                           ;TAD_RFID.c: 50:         ucResult|= PORTCbits.RC0;
  7431   001444  B082               	btfsc	130,0,c	;volatile
  7432   001446  EF27  F00A         	goto	u61
  7433   00144A  EF2A  F00A         	goto	u60
  7434   00144E                     u61:
  7435   00144E  0E01               	movlw	1
  7436   001450  EF2B  F00A         	goto	u66
  7437   001454                     u60:
  7438   001454  0E00               	movlw	0
  7439   001456                     u66:
  7440   001456  124F               	iorwf	MFRC522_Rd@ucResult^0,f,c
  7441   001458                     
  7442                           ;TAD_RFID.c: 51:         LATCbits.LATC2 = 0;
  7443   001458  948B               	bcf	139,2,c	;volatile
  7444                           
  7445                           ;TAD_RFID.c: 52:         delay_us(5);
  7446   00145A  0E05               	movlw	5
  7447   00145C  EC8C  F00D         	call	_delay_us
  7448   001460                     
  7449                           ;TAD_RFID.c: 53:     }
  7450   001460  0650               	decf	MFRC522_Rd@i^0,f,c
  7451   001462  5050               	movf	MFRC522_Rd@i^0,w,c
  7452   001464  A4D8               	btfss	status,2,c
  7453   001466  EF37  F00A         	goto	u71
  7454   00146A  EF39  F00A         	goto	u70
  7455   00146E                     u71:
  7456   00146E  EF1C  F00A         	goto	l218
  7457   001472                     u70:
  7458   001472                     
  7459                           ;TAD_RFID.c: 55:     LATCbits.LATC3 = 1;
  7460   001472  868B               	bsf	139,3,c	;volatile
  7461                           
  7462                           ;TAD_RFID.c: 56:     LATCbits.LATC2 = 1;
  7463   001474  848B               	bsf	139,2,c	;volatile
  7464   001476                     
  7465                           ;TAD_RFID.c: 57:     return ucResult;
  7466   001476  504F               	movf	MFRC522_Rd@ucResult^0,w,c
  7467   001478  0012               	return		;funcret
  7468   00147A                     __end_of_MFRC522_Rd:
  7469                           	callstack 0
  7470                           
  7471 ;; *************** function _delay_us *****************
  7472 ;; Defined at:
  7473 ;;		line 25 in file "TAD_RFID.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  howMany         1    wreg     unsigned char 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  howMany         1    4[COMRAM] unsigned char 
  7478 ;;  x               1    5[COMRAM] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      void 
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, status,0, prodl, prodh
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1
  7488 ;;      Params:         0       0       0
  7489 ;;      Locals:         2       0       0
  7490 ;;      Temps:          3       0       0
  7491 ;;      Totals:         5       0       0
  7492 ;;Total ram usage:        5 bytes
  7493 ;; Hardware stack levels used: 1
  7494 ;; Hardware stack levels required when called: 3
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_MFRC522_Rd
  7499 ;;		_MFRC522_Wr
  7500 ;;		_MFRC522_Reset
  7501 ;;		_motor_Write
  7502 ;;		_motor_Read
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text36
  7507   001B18                     __ptext36:
  7508                           	callstack 0
  7509   001B18                     _delay_us:
  7510                           	callstack 25
  7511                           
  7512                           ;incstack = 0
  7513                           ;delay_us@howMany stored from wreg
  7514   001B18  6E4A               	movwf	delay_us@howMany^0,c
  7515   001B1A                     
  7516                           ;TAD_RFID.c: 26:     char x;;TAD_RFID.c: 27:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  7517   001B1A  6A4B               	clrf	delay_us@x^0,c
  7518   001B1C  EF92  F00D         	goto	l1472
  7519   001B20                     l211:
  7520   001B20  0000               	nop	
  7521   001B22  2A4B               	incf	delay_us@x^0,f,c
  7522   001B24                     l1472:
  7523   001B24  504A               	movf	delay_us@howMany^0,w,c
  7524   001B26  0D10               	mullw	16
  7525   001B28  504B               	movf	delay_us@x^0,w,c
  7526   001B2A  6E47               	movwf	??_delay_us^0,c
  7527   001B2C  6A48               	clrf	(??_delay_us+1)^0,c
  7528   001B2E  50F3               	movf	243,w,c
  7529   001B30  5C47               	subwf	??_delay_us^0,w,c
  7530   001B32  5048               	movf	(??_delay_us+1)^0,w,c
  7531   001B34  0A80               	xorlw	128
  7532   001B36  6E49               	movwf	(??_delay_us+2)^0,c
  7533   001B38  50F4               	movf	244,w,c
  7534   001B3A  0A80               	xorlw	128
  7535   001B3C  5849               	subwfb	(??_delay_us+2)^0,w,c
  7536   001B3E  A0D8               	btfss	status,0,c
  7537   001B40  EFA4  F00D         	goto	u11
  7538   001B44  EFA6  F00D         	goto	u10
  7539   001B48                     u11:
  7540   001B48  EF90  F00D         	goto	l211
  7541   001B4C                     u10:
  7542   001B4C  0012               	return		;funcret
  7543   001B4E                     __end_of_delay_us:
  7544                           	callstack 0
  7545                           
  7546 ;; *************** function _InitPortDirections *****************
  7547 ;; Defined at:
  7548 ;;		line 17 in file "TAD_RFID.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      void 
  7555 ;; Registers used:
  7556 ;;		None
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1
  7562 ;;      Params:         0       0       0
  7563 ;;      Locals:         0       0       0
  7564 ;;      Temps:          0       0       0
  7565 ;;      Totals:         0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used: 1
  7568 ;; Hardware stack levels required when called: 3
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_initRFID
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text37
  7577   001D0C                     __ptext37:
  7578                           	callstack 0
  7579   001D0C                     _InitPortDirections:
  7580                           	callstack 26
  7581   001D0C                     
  7582                           ;TAD_RFID.c: 18:     TRISCbits.TRISC0 = 1;
  7583   001D0C  8094               	bsf	148,0,c	;volatile
  7584                           
  7585                           ;TAD_RFID.c: 19:     TRISCbits.TRISC1 = 0;
  7586   001D0E  9294               	bcf	148,1,c	;volatile
  7587                           
  7588                           ;TAD_RFID.c: 20:     TRISCbits.TRISC2 = 0;
  7589   001D10  9494               	bcf	148,2,c	;volatile
  7590                           
  7591                           ;TAD_RFID.c: 21:     TRISCbits.TRISC3 = 0;
  7592   001D12  9694               	bcf	148,3,c	;volatile
  7593                           
  7594                           ;TAD_RFID.c: 22:     TRISCbits.TRISC4 = 0;
  7595   001D14  9894               	bcf	148,4,c	;volatile
  7596   001D16  0012               	return		;funcret
  7597   001D18                     __end_of_InitPortDirections:
  7598                           	callstack 0
  7599                           
  7600 ;; *************** function _initPorts *****************
  7601 ;; Defined at:
  7602 ;;		line 62 in file "main.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg, status,2
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1
  7616 ;;      Params:         0       0       0
  7617 ;;      Locals:         0       0       0
  7618 ;;      Temps:          0       0       0
  7619 ;;      Totals:         0       0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used: 1
  7622 ;; Hardware stack levels required when called: 3
  7623 ;; This function calls:
  7624 ;;		Nothing
  7625 ;; This function is called by:
  7626 ;;		_main
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text38
  7631   001D32                     __ptext38:
  7632                           	callstack 0
  7633   001D32                     _initPorts:
  7634                           	callstack 27
  7635   001D32  0E0F               	movlw	15
  7636   001D34  6EC1               	movwf	193,c	;volatile
  7637   001D36  9496               	bcf	150,2,c	;volatile
  7638   001D38  0012               	return		;funcret
  7639   001D3A                     __end_of_initPorts:
  7640                           	callstack 0
  7641                           
  7642 ;; *************** function _initLeds *****************
  7643 ;; Defined at:
  7644 ;;		line 9 in file "TAD_LEDS.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;		None
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;		None
  7649 ;; Return value:  Size  Location     Type
  7650 ;;                  1    wreg      void 
  7651 ;; Registers used:
  7652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1
  7658 ;;      Params:         0       0       0
  7659 ;;      Locals:         0       0       0
  7660 ;;      Temps:          0       0       0
  7661 ;;      Totals:         0       0       0
  7662 ;;Total ram usage:        0 bytes
  7663 ;; Hardware stack levels used: 1
  7664 ;; Hardware stack levels required when called: 4
  7665 ;; This function calls:
  7666 ;;		_TI_NewTimer
  7667 ;; This function is called by:
  7668 ;;		_main
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text39
  7673   001CE6                     __ptext39:
  7674                           	callstack 0
  7675   001CE6                     _initLeds:
  7676                           	callstack 26
  7677   001CE6                     
  7678                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  7679   001CE6  6A92               	clrf	146,c	;volatile
  7680                           
  7681                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  7682   001CE8  6A96               	clrf	150,c	;volatile
  7683   001CEA                     
  7684                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  7685   001CEA  0E43               	movlw	low _timer@TAD_LEDS$F989
  7686   001CEC  6E47               	movwf	TI_NewTimer@TimerHandle^0,c
  7687   001CEE  EC19  F00C         	call	_TI_NewTimer	;wreg free
  7688   001CF2  0012               	return		;funcret
  7689   001CF4                     __end_of_initLeds:
  7690                           	callstack 0
  7691                           
  7692 ;; *************** function _Terminal_Init *****************
  7693 ;; Defined at:
  7694 ;;		line 9 in file "TAD_TERMINAL.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;		None
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;		None
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1
  7708 ;;      Params:         0       0       0
  7709 ;;      Locals:         0       0       0
  7710 ;;      Temps:          0       0       0
  7711 ;;      Totals:         0       0       0
  7712 ;;Total ram usage:        0 bytes
  7713 ;; Hardware stack levels used: 1
  7714 ;; Hardware stack levels required when called: 3
  7715 ;; This function calls:
  7716 ;;		Nothing
  7717 ;; This function is called by:
  7718 ;;		_main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text40
  7723   001CD6                     __ptext40:
  7724                           	callstack 0
  7725   001CD6                     _Terminal_Init:
  7726                           	callstack 27
  7727   001CD6                     
  7728                           ;TAD_TERMINAL.c: 10:  TXSTA = 0x24;
  7729   001CD6  0E24               	movlw	36
  7730   001CD8  6EAC               	movwf	172,c	;volatile
  7731                           
  7732                           ;TAD_TERMINAL.c: 11:  RCSTA = 0x90;
  7733   001CDA  0E90               	movlw	144
  7734   001CDC  6EAB               	movwf	171,c	;volatile
  7735   001CDE                     
  7736                           ;TAD_TERMINAL.c: 12:  SPBRG = 255;
  7737   001CDE  68AF               	setf	175,c	;volatile
  7738   001CE0                     
  7739                           ;TAD_TERMINAL.c: 13:  BAUDCON = 0x00;
  7740   001CE0  6AB8               	clrf	184,c	;volatile
  7741   001CE2                     
  7742                           ;TAD_TERMINAL.c: 14:  hashtag_pressed = 0;
  7743   001CE2  6A1A               	clrf	_hashtag_pressed^0,c
  7744   001CE4  0012               	return		;funcret
  7745   001CE6                     __end_of_Terminal_Init:
  7746                           	callstack 0
  7747                           
  7748 ;; *************** function _TI_Init *****************
  7749 ;; Defined at:
  7750 ;;		line 32 in file "TAD_TIMER.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;		None
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  counter         1    1[COMRAM] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1
  7764 ;;      Params:         0       0       0
  7765 ;;      Locals:         1       0       0
  7766 ;;      Temps:          0       0       0
  7767 ;;      Totals:         1       0       0
  7768 ;;Total ram usage:        1 bytes
  7769 ;; Hardware stack levels used: 1
  7770 ;; Hardware stack levels required when called: 3
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_main
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text41
  7779   001B4E                     __ptext41:
  7780                           	callstack 0
  7781   001B4E                     _TI_Init:
  7782                           	callstack 27
  7783   001B4E                     
  7784                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7785   001B4E  6A47               	clrf	TI_Init@counter^0,c
  7786   001B50                     l3430:
  7787                           
  7788                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7789   001B50  5047               	movf	TI_Init@counter^0,w,c
  7790   001B52  0D05               	mullw	5
  7791   001B54  50F3               	movf	243,w,c
  7792   001B56  0FDC               	addlw	low (_Timers+4)
  7793   001B58  6ED9               	movwf	fsr2l,c
  7794   001B5A  6ADA               	clrf	fsr2h,c
  7795   001B5C  6ADF               	clrf	indf2,c
  7796   001B5E                     
  7797                           ;TAD_TIMER.c: 35:  }
  7798   001B5E  2A47               	incf	TI_Init@counter^0,f,c
  7799   001B60  0E03               	movlw	3
  7800   001B62  6447               	cpfsgt	TI_Init@counter^0,c
  7801   001B64  EFB6  F00D         	goto	u2731
  7802   001B68  EFB8  F00D         	goto	u2730
  7803   001B6C                     u2731:
  7804   001B6C  EFA8  F00D         	goto	l3430
  7805   001B70                     u2730:
  7806   001B70                     
  7807                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7808   001B70  0E82               	movlw	130
  7809   001B72  6ED5               	movwf	213,c	;volatile
  7810                           
  7811                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7812   001B74  0EF6               	movlw	246
  7813   001B76  6ED7               	movwf	215,c	;volatile
  7814   001B78  0E3C               	movlw	60
  7815   001B7A  6ED6               	movwf	214,c	;volatile
  7816   001B7C                     
  7817                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7818   001B7C  94F2               	bcf	242,2,c	;volatile
  7819   001B7E                     
  7820                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7821   001B7E  8AF2               	bsf	242,5,c	;volatile
  7822   001B80  0012               	return		;funcret
  7823   001B82                     __end_of_TI_Init:
  7824                           	callstack 0
  7825                           
  7826 ;; *************** function _LcInit *****************
  7827 ;; Defined at:
  7828 ;;		line 68 in file "TAD_DISPLAY.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;  rows            1    wreg     unsigned char 
  7831 ;;  columns         1   22[COMRAM] unsigned char 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  rows            1   23[COMRAM] unsigned char 
  7834 ;;  i               2   24[COMRAM] int 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1
  7844 ;;      Params:         1       0       0
  7845 ;;      Locals:         3       0       0
  7846 ;;      Temps:          0       0       0
  7847 ;;      Totals:         4       0       0
  7848 ;;Total ram usage:        4 bytes
  7849 ;; Hardware stack levels used: 1
  7850 ;; Hardware stack levels required when called: 6
  7851 ;; This function calls:
  7852 ;;		_CantaIR
  7853 ;;		_EscriuPrimeraOrdre
  7854 ;;		_Espera
  7855 ;;		_TI_NewTimer
  7856 ;;		_WaitForBusy
  7857 ;; This function is called by:
  7858 ;;		_main
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           	psect	text42
  7863   000E0E                     __ptext42:
  7864                           	callstack 0
  7865   000E0E                     _LcInit:
  7866                           	callstack 24
  7867                           
  7868                           ;incstack = 0
  7869                           ;LcInit@rows stored from wreg
  7870   000E0E  6E5D               	movwf	LcInit@rows^0,c
  7871   000E10                     
  7872                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7873   000E10  0E44               	movlw	low _Timer
  7874   000E12  6E47               	movwf	TI_NewTimer@TimerHandle^0,c
  7875   000E14  EC19  F00C         	call	_TI_NewTimer	;wreg free
  7876   000E18                     
  7877                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7878   000E18  C05D  F01E         	movff	LcInit@rows,_Rows
  7879   000E1C  C05C  F01D         	movff	LcInit@columns,_Columns
  7880   000E20                     
  7881                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7882   000E20  6A1B               	clrf	_ColumnAct^0,c
  7883   000E22  6A1C               	clrf	_RowAct^0,c
  7884   000E24                     
  7885                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7886   000E24  9293               	bcf	147,1,c	;volatile
  7887   000E26  9493               	bcf	147,2,c	;volatile
  7888   000E28  9693               	bcf	147,3,c	;volatile
  7889   000E2A                     
  7890                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7891   000E2A  0E00               	movlw	0
  7892   000E2C  6E5F               	movwf	(LcInit@i+1)^0,c
  7893   000E2E  0E00               	movlw	0
  7894   000E30  6E5E               	movwf	LcInit@i^0,c
  7895   000E32                     l3478:
  7896                           
  7897                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7898   000E32  C044  F054         	movff	_Timer,Espera@Timer
  7899   000E36  6A55               	clrf	(Espera@Timer+1)^0,c
  7900   000E38  0E00               	movlw	0
  7901   000E3A  6E57               	movwf	(Espera@ms+1)^0,c
  7902   000E3C  0E64               	movlw	100
  7903   000E3E  6E56               	movwf	Espera@ms^0,c
  7904   000E40  ECFC  F00C         	call	_Espera	;wreg free
  7905   000E44                     
  7906                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7907   000E44  0E03               	movlw	3
  7908   000E46  EC8D  F00A         	call	_EscriuPrimeraOrdre
  7909   000E4A                     
  7910                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7911   000E4A  C044  F054         	movff	_Timer,Espera@Timer
  7912   000E4E  6A55               	clrf	(Espera@Timer+1)^0,c
  7913   000E50  0E00               	movlw	0
  7914   000E52  6E57               	movwf	(Espera@ms+1)^0,c
  7915   000E54  0E04               	movlw	4
  7916   000E56  6E56               	movwf	Espera@ms^0,c
  7917   000E58  ECFC  F00C         	call	_Espera	;wreg free
  7918                           
  7919                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7920   000E5C  0E03               	movlw	3
  7921   000E5E  EC8D  F00A         	call	_EscriuPrimeraOrdre
  7922   000E62                     
  7923                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7924   000E62  C044  F054         	movff	_Timer,Espera@Timer
  7925   000E66  6A55               	clrf	(Espera@Timer+1)^0,c
  7926   000E68  0E00               	movlw	0
  7927   000E6A  6E57               	movwf	(Espera@ms+1)^0,c
  7928   000E6C  0E01               	movlw	1
  7929   000E6E  6E56               	movwf	Espera@ms^0,c
  7930   000E70  ECFC  F00C         	call	_Espera	;wreg free
  7931   000E74                     
  7932                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7933   000E74  0E03               	movlw	3
  7934   000E76  EC8D  F00A         	call	_EscriuPrimeraOrdre
  7935                           
  7936                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7937   000E7A  C044  F054         	movff	_Timer,Espera@Timer
  7938   000E7E  6A55               	clrf	(Espera@Timer+1)^0,c
  7939   000E80  0E00               	movlw	0
  7940   000E82  6E57               	movwf	(Espera@ms+1)^0,c
  7941   000E84  0E01               	movlw	1
  7942   000E86  6E56               	movwf	Espera@ms^0,c
  7943   000E88  ECFC  F00C         	call	_Espera	;wreg free
  7944   000E8C                     
  7945                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7946   000E8C  0E02               	movlw	2
  7947   000E8E  EC8D  F00A         	call	_EscriuPrimeraOrdre
  7948   000E92                     
  7949                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7950   000E92  C044  F054         	movff	_Timer,Espera@Timer
  7951   000E96  6A55               	clrf	(Espera@Timer+1)^0,c
  7952   000E98  0E00               	movlw	0
  7953   000E9A  6E57               	movwf	(Espera@ms+1)^0,c
  7954   000E9C  0E01               	movlw	1
  7955   000E9E  6E56               	movwf	Espera@ms^0,c
  7956   000EA0  ECFC  F00C         	call	_Espera	;wreg free
  7957                           
  7958                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7959   000EA4  0E28               	movlw	40
  7960   000EA6  ECC1  F00D         	call	_CantaIR
  7961   000EAA                     
  7962                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7963   000EAA  EC61  F00E         	call	_WaitForBusy	;wreg free
  7964   000EAE  0E08               	movlw	8
  7965   000EB0  ECC1  F00D         	call	_CantaIR
  7966                           
  7967                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7968   000EB4  EC61  F00E         	call	_WaitForBusy	;wreg free
  7969   000EB8  0E01               	movlw	1
  7970   000EBA  ECC1  F00D         	call	_CantaIR
  7971   000EBE                     
  7972                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7973   000EBE  C044  F054         	movff	_Timer,Espera@Timer
  7974   000EC2  6A55               	clrf	(Espera@Timer+1)^0,c
  7975   000EC4  0E00               	movlw	0
  7976   000EC6  6E57               	movwf	(Espera@ms+1)^0,c
  7977   000EC8  0E02               	movlw	2
  7978   000ECA  6E56               	movwf	Espera@ms^0,c
  7979   000ECC  ECFC  F00C         	call	_Espera	;wreg free
  7980   000ED0                     
  7981                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7982   000ED0  EC61  F00E         	call	_WaitForBusy	;wreg free
  7983   000ED4  0E06               	movlw	6
  7984   000ED6  ECC1  F00D         	call	_CantaIR
  7985                           
  7986                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7987   000EDA  EC61  F00E         	call	_WaitForBusy	;wreg free
  7988   000EDE  0E0F               	movlw	15
  7989   000EE0  ECC1  F00D         	call	_CantaIR
  7990   000EE4                     
  7991                           ;TAD_DISPLAY.c: 101:  }
  7992   000EE4  4A5E               	infsnz	LcInit@i^0,f,c
  7993   000EE6  2A5F               	incf	(LcInit@i+1)^0,f,c
  7994   000EE8  BE5F               	btfsc	(LcInit@i+1)^0,7,c
  7995   000EEA  EF80  F007         	goto	u2741
  7996   000EEE  505F               	movf	(LcInit@i+1)^0,w,c
  7997   000EF0  E109               	bnz	u2740
  7998   000EF2  0E02               	movlw	2
  7999   000EF4  5C5E               	subwf	LcInit@i^0,w,c
  8000   000EF6  A0D8               	btfss	status,0,c
  8001   000EF8  EF80  F007         	goto	u2741
  8002   000EFC  EF82  F007         	goto	u2740
  8003   000F00                     u2741:
  8004   000F00  EF19  F007         	goto	l3478
  8005   000F04                     u2740:
  8006   000F04  0012               	return		;funcret
  8007   000F06                     __end_of_LcInit:
  8008                           	callstack 0
  8009                           
  8010 ;; *************** function _WaitForBusy *****************
  8011 ;; Defined at:
  8012 ;;		line 256 in file "TAD_DISPLAY.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;		None
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  Busy            1    0        unsigned char 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      void 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1
  8026 ;;      Params:         0       0       0
  8027 ;;      Locals:         0       0       0
  8028 ;;      Temps:          0       0       0
  8029 ;;      Totals:         0       0       0
  8030 ;;Total ram usage:        0 bytes
  8031 ;; Hardware stack levels used: 1
  8032 ;; Hardware stack levels required when called: 5
  8033 ;; This function calls:
  8034 ;;		_Espera
  8035 ;; This function is called by:
  8036 ;;		_LcInit
  8037 ;;		_LcClear
  8038 ;;		_LcCursorOn
  8039 ;;		_LcCursorOff
  8040 ;;		_LcGotoXY
  8041 ;;		_LcPutChar
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text43
  8046   001CC2                     __ptext43:
  8047                           	callstack 0
  8048   001CC2                     _WaitForBusy:
  8049                           	callstack 24
  8050   001CC2                     
  8051                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  8052   001CC2  C044  F054         	movff	_Timer,Espera@Timer
  8053   001CC6  6A55               	clrf	(Espera@Timer+1)^0,c
  8054   001CC8  0E00               	movlw	0
  8055   001CCA  6E57               	movwf	(Espera@ms+1)^0,c
  8056   001CCC  0E02               	movlw	2
  8057   001CCE  6E56               	movwf	Espera@ms^0,c
  8058   001CD0  ECFC  F00C         	call	_Espera	;wreg free
  8059   001CD4  0012               	return		;funcret
  8060   001CD6                     __end_of_WaitForBusy:
  8061                           	callstack 0
  8062                           
  8063 ;; *************** function _Espera *****************
  8064 ;; Defined at:
  8065 ;;		line 205 in file "TAD_DISPLAY.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  Timer           2   14[COMRAM] int 
  8068 ;;  ms              2   16[COMRAM] int 
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      void 
  8073 ;; Registers used:
  8074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMRAM   BANK0   BANK1
  8080 ;;      Params:         4       0       0
  8081 ;;      Locals:         0       0       0
  8082 ;;      Temps:          4       0       0
  8083 ;;      Totals:         8       0       0
  8084 ;;Total ram usage:        8 bytes
  8085 ;; Hardware stack levels used: 1
  8086 ;; Hardware stack levels required when called: 4
  8087 ;; This function calls:
  8088 ;;		_TI_GetTics
  8089 ;;		_TI_ResetTics
  8090 ;; This function is called by:
  8091 ;;		_LcInit
  8092 ;;		_WaitForBusy
  8093 ;;		_LcClear
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text44
  8098   0019F8                     __ptext44:
  8099                           	callstack 0
  8100   0019F8                     _Espera:
  8101                           	callstack 24
  8102   0019F8                     
  8103                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  8104   0019F8  5054               	movf	Espera@Timer^0,w,c
  8105   0019FA  ECEF  F00D         	call	_TI_ResetTics
  8106   0019FE                     l3038:
  8107   0019FE  C056  F058         	movff	Espera@ms,??_Espera
  8108   001A02  C057  F059         	movff	Espera@ms+1,??_Espera+1
  8109   001A06  0E00               	movlw	0
  8110   001A08  BE59               	btfsc	(??_Espera+1)^0,7,c
  8111   001A0A  0EFF               	movlw	255
  8112   001A0C  6E5A               	movwf	(??_Espera+2)^0,c
  8113   001A0E  6E5B               	movwf	(??_Espera+3)^0,c
  8114   001A10  5054               	movf	Espera@Timer^0,w,c
  8115   001A12  EC6B  F00C         	call	_TI_GetTics
  8116   001A16  5058               	movf	??_Espera^0,w,c
  8117   001A18  5C47               	subwf	?_TI_GetTics^0,w,c
  8118   001A1A  5059               	movf	(??_Espera+1)^0,w,c
  8119   001A1C  5848               	subwfb	(?_TI_GetTics+1)^0,w,c
  8120   001A1E  505A               	movf	(??_Espera+2)^0,w,c
  8121   001A20  5849               	subwfb	(?_TI_GetTics+2)^0,w,c
  8122   001A22  505B               	movf	(??_Espera+3)^0,w,c
  8123   001A24  584A               	subwfb	(?_TI_GetTics+3)^0,w,c
  8124   001A26  A0D8               	btfss	status,0,c
  8125   001A28  EF18  F00D         	goto	u2061
  8126   001A2C  EF1A  F00D         	goto	u2060
  8127   001A30                     u2061:
  8128   001A30  EFFF  F00C         	goto	l3038
  8129   001A34                     u2060:
  8130   001A34  0012               	return		;funcret
  8131   001A36                     __end_of_Espera:
  8132                           	callstack 0
  8133                           
  8134 ;; *************** function _TI_ResetTics *****************
  8135 ;; Defined at:
  8136 ;;		line 53 in file "TAD_TIMER.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  TimerHandle     1    wreg     unsigned char 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1
  8150 ;;      Params:         0       0       0
  8151 ;;      Locals:         1       0       0
  8152 ;;      Temps:          0       0       0
  8153 ;;      Totals:         1       0       0
  8154 ;;Total ram usage:        1 bytes
  8155 ;; Hardware stack levels used: 1
  8156 ;; Hardware stack levels required when called: 3
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_motorTeclado
  8161 ;;		_Espera
  8162 ;;		_motor_LEDs
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text45
  8167   001BDE                     __ptext45:
  8168                           	callstack 0
  8169   001BDE                     _TI_ResetTics:
  8170                           	callstack 26
  8171                           
  8172                           ;incstack = 0
  8173                           ;TI_ResetTics@TimerHandle stored from wreg
  8174   001BDE  6E47               	movwf	TI_ResetTics@TimerHandle^0,c
  8175   001BE0                     
  8176                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8177   001BE0  9EF2               	bcf	242,7,c	;volatile
  8178   001BE2  5047               	movf	TI_ResetTics@TimerHandle^0,w,c
  8179   001BE4  0D05               	mullw	5
  8180   001BE6  50F3               	movf	243,w,c
  8181   001BE8  0FD8               	addlw	low _Timers
  8182   001BEA  6ED9               	movwf	fsr2l,c
  8183   001BEC  6ADA               	clrf	fsr2h,c
  8184   001BEE  C007  FFDE         	movff	_Tics,postinc2	;volatile
  8185   001BF2  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  8186   001BF6  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  8187   001BFA  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  8188   001BFE  8EF2               	bsf	242,7,c	;volatile
  8189   001C00  0012               	return		;funcret
  8190   001C02                     __end_of_TI_ResetTics:
  8191                           	callstack 0
  8192                           
  8193 ;; *************** function _TI_GetTics *****************
  8194 ;; Defined at:
  8195 ;;		line 61 in file "TAD_TIMER.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  TimerHandle     1    wreg     unsigned char 
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  8200 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  4    1[COMRAM] unsigned long 
  8203 ;; Registers used:
  8204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1
  8210 ;;      Params:         4       0       0
  8211 ;;      Locals:         5       0       0
  8212 ;;      Temps:          4       0       0
  8213 ;;      Totals:        13       0       0
  8214 ;;Total ram usage:       13 bytes
  8215 ;; Hardware stack levels used: 1
  8216 ;; Hardware stack levels required when called: 3
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_motorTeclado
  8221 ;;		_Espera
  8222 ;;		_motor_LEDs
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text46
  8227   0018D6                     __ptext46:
  8228                           	callstack 0
  8229   0018D6                     _TI_GetTics:
  8230                           	callstack 26
  8231                           
  8232                           ;incstack = 0
  8233                           ;TI_GetTics@TimerHandle stored from wreg
  8234   0018D6  6E53               	movwf	TI_GetTics@TimerHandle^0,c
  8235   0018D8                     
  8236                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8237   0018D8  9EF2               	bcf	242,7,c	;volatile
  8238   0018DA  C007  F04F         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8239   0018DE  C008  F050         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8240   0018E2  C009  F051         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8241   0018E6  C00A  F052         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8242   0018EA  8EF2               	bsf	242,7,c	;volatile
  8243   0018EC                     
  8244                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8245   0018EC  5053               	movf	TI_GetTics@TimerHandle^0,w,c
  8246   0018EE  0D05               	mullw	5
  8247   0018F0  50F3               	movf	243,w,c
  8248   0018F2  0FD8               	addlw	low _Timers
  8249   0018F4  6ED9               	movwf	fsr2l,c
  8250   0018F6  6ADA               	clrf	fsr2h,c
  8251   0018F8  CFDE F04B          	movff	postinc2,??_TI_GetTics
  8252   0018FC  CFDE F04C          	movff	postinc2,??_TI_GetTics+1
  8253   001900  CFDE F04D          	movff	postinc2,??_TI_GetTics+2
  8254   001904  CFDE F04E          	movff	postinc2,??_TI_GetTics+3
  8255   001908  504B               	movf	??_TI_GetTics^0,w,c
  8256   00190A  5C4F               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8257   00190C  6E47               	movwf	?_TI_GetTics^0,c
  8258   00190E  504C               	movf	(??_TI_GetTics+1)^0,w,c
  8259   001910  5850               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8260   001912  6E48               	movwf	(?_TI_GetTics+1)^0,c
  8261   001914  504D               	movf	(??_TI_GetTics+2)^0,w,c
  8262   001916  5851               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8263   001918  6E49               	movwf	(?_TI_GetTics+2)^0,c
  8264   00191A  504E               	movf	(??_TI_GetTics+3)^0,w,c
  8265   00191C  5852               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8266   00191E  6E4A               	movwf	(?_TI_GetTics+3)^0,c
  8267   001920  0012               	return		;funcret
  8268   001922                     __end_of_TI_GetTics:
  8269                           	callstack 0
  8270                           
  8271 ;; *************** function _TI_NewTimer *****************
  8272 ;; Defined at:
  8273 ;;		line 43 in file "TAD_TIMER.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8276 ;;		 -> timer@TAD_LEDS$F989(1), Timer(1), timer(1), 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  Comptador       1    3[COMRAM] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      unsigned char 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1
  8288 ;;      Params:         1       0       0
  8289 ;;      Locals:         1       0       0
  8290 ;;      Temps:          1       0       0
  8291 ;;      Totals:         3       0       0
  8292 ;;Total ram usage:        3 bytes
  8293 ;; Hardware stack levels used: 1
  8294 ;; Hardware stack levels required when called: 3
  8295 ;; This function calls:
  8296 ;;		Nothing
  8297 ;; This function is called by:
  8298 ;;		_initTeclado
  8299 ;;		_LcInit
  8300 ;;		_initLeds
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text47
  8305   001832                     __ptext47:
  8306                           	callstack 0
  8307   001832                     _TI_NewTimer:
  8308                           	callstack 26
  8309   001832                     
  8310                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8311   001832  6A49               	clrf	TI_NewTimer@Comptador^0,c
  8312                           
  8313                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8314   001834  EF28  F00C         	goto	l3192
  8315   001838                     l3188:
  8316                           
  8317                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8318   001838  2A49               	incf	TI_NewTimer@Comptador^0,f,c
  8319   00183A  0E04               	movlw	4
  8320   00183C  1849               	xorwf	TI_NewTimer@Comptador^0,w,c
  8321   00183E  A4D8               	btfss	status,2,c
  8322   001840  EF24  F00C         	goto	u2531
  8323   001844  EF26  F00C         	goto	u2530
  8324   001848                     u2531:
  8325   001848  EF28  F00C         	goto	l3192
  8326   00184C                     u2530:
  8327   00184C  EF43  F00C         	goto	l83
  8328   001850                     l3192:
  8329                           
  8330                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8331   001850  5049               	movf	TI_NewTimer@Comptador^0,w,c
  8332   001852  0D05               	mullw	5
  8333   001854  50F3               	movf	243,w,c
  8334   001856  0FDC               	addlw	low (_Timers+4)
  8335   001858  6ED9               	movwf	fsr2l,c
  8336   00185A  6ADA               	clrf	fsr2h,c
  8337   00185C  04DE               	decf	postinc2,w,c
  8338   00185E  B4D8               	btfsc	status,2,c
  8339   001860  EF34  F00C         	goto	u2541
  8340   001864  EF36  F00C         	goto	u2540
  8341   001868                     u2541:
  8342   001868  EF1C  F00C         	goto	l3188
  8343   00186C                     u2540:
  8344   00186C                     
  8345                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8346   00186C  5049               	movf	TI_NewTimer@Comptador^0,w,c
  8347   00186E  0D05               	mullw	5
  8348   001870  50F3               	movf	243,w,c
  8349   001872  0FDC               	addlw	low (_Timers+4)
  8350   001874  6ED9               	movwf	fsr2l,c
  8351   001876  6ADA               	clrf	fsr2h,c
  8352   001878  0E01               	movlw	1
  8353   00187A  6EDF               	movwf	indf2,c
  8354   00187C                     
  8355                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8356   00187C  5047               	movf	TI_NewTimer@TimerHandle^0,w,c
  8357   00187E  6ED9               	movwf	fsr2l,c
  8358   001880  6ADA               	clrf	fsr2h,c
  8359   001882  C049  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8360   001886                     l83:
  8361   001886  0012               	return		;funcret
  8362   001888                     __end_of_TI_NewTimer:
  8363                           	callstack 0
  8364                           
  8365 ;; *************** function _EscriuPrimeraOrdre *****************
  8366 ;; Defined at:
  8367 ;;		line 260 in file "TAD_DISPLAY.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  ordre           1    wreg     unsigned char 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  ordre           1    2[COMRAM] unsigned char 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      void 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMRAM   BANK0   BANK1
  8381 ;;      Params:         0       0       0
  8382 ;;      Locals:         1       0       0
  8383 ;;      Temps:          1       0       0
  8384 ;;      Totals:         2       0       0
  8385 ;;Total ram usage:        2 bytes
  8386 ;; Hardware stack levels used: 1
  8387 ;; Hardware stack levels required when called: 3
  8388 ;; This function calls:
  8389 ;;		Nothing
  8390 ;; This function is called by:
  8391 ;;		_LcInit
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text48
  8396   00151A                     __ptext48:
  8397                           	callstack 0
  8398   00151A                     _EscriuPrimeraOrdre:
  8399                           	callstack 26
  8400                           
  8401                           ;incstack = 0
  8402                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8403   00151A  6E48               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8404   00151C                     
  8405                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8406   00151C  9096               	bcf	150,0,c	;volatile
  8407   00151E  9296               	bcf	150,1,c	;volatile
  8408   001520  9A93               	bcf	147,5,c	;volatile
  8409   001522  9893               	bcf	147,4,c	;volatile
  8410   001524  968A               	bcf	138,3,c	;volatile
  8411   001526  948A               	bcf	138,2,c	;volatile
  8412                           
  8413                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8414   001528  828A               	bsf	138,1,c	;volatile
  8415   00152A  828A               	bsf	138,1,c	;volatile
  8416   00152C                     
  8417                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8418   00152C  B648               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8419   00152E  EF9B  F00A         	goto	u861
  8420   001532  EF9F  F00A         	goto	u860
  8421   001536                     u861:
  8422   001536  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8423   001538  2A47               	incf	??_EscriuPrimeraOrdre^0,f,c
  8424   00153A  EFA0  F00A         	goto	u878
  8425   00153E                     u860:
  8426   00153E  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8427   001540                     u878:
  8428   001540  508D               	movf	141,w,c	;volatile
  8429   001542  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8430   001544  0BFE               	andlw	-2
  8431   001546  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8432   001548  6E8D               	movwf	141,c	;volatile
  8433                           
  8434                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8435   00154A  B448               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8436   00154C  EFAA  F00A         	goto	u881
  8437   001550  EFAE  F00A         	goto	u880
  8438   001554                     u881:
  8439   001554  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8440   001556  2A47               	incf	??_EscriuPrimeraOrdre^0,f,c
  8441   001558  EFAF  F00A         	goto	u898
  8442   00155C                     u880:
  8443   00155C  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8444   00155E                     u898:
  8445   00155E  4647               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8446   001560  508D               	movf	141,w,c	;volatile
  8447   001562  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8448   001564  0BFD               	andlw	-3
  8449   001566  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8450   001568  6E8D               	movwf	141,c	;volatile
  8451                           
  8452                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8453   00156A  B248               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8454   00156C  EFBA  F00A         	goto	u901
  8455   001570  EFBE  F00A         	goto	u900
  8456   001574                     u901:
  8457   001574  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8458   001576  2A47               	incf	??_EscriuPrimeraOrdre^0,f,c
  8459   001578  EFBF  F00A         	goto	u918
  8460   00157C                     u900:
  8461   00157C  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8462   00157E                     u918:
  8463   00157E  3A47               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8464   001580  4647               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8465   001582  508A               	movf	138,w,c	;volatile
  8466   001584  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8467   001586  0BDF               	andlw	-33
  8468   001588  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8469   00158A  6E8A               	movwf	138,c	;volatile
  8470                           
  8471                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8472   00158C  B048               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8473   00158E  EFCB  F00A         	goto	u921
  8474   001592  EFCF  F00A         	goto	u920
  8475   001596                     u921:
  8476   001596  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8477   001598  2A47               	incf	??_EscriuPrimeraOrdre^0,f,c
  8478   00159A  EFD0  F00A         	goto	u938
  8479   00159E                     u920:
  8480   00159E  6A47               	clrf	??_EscriuPrimeraOrdre^0,c
  8481   0015A0                     u938:
  8482   0015A0  3A47               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8483   0015A2  508A               	movf	138,w,c	;volatile
  8484   0015A4  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8485   0015A6  0BEF               	andlw	-17
  8486   0015A8  1847               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8487   0015AA  6E8A               	movwf	138,c	;volatile
  8488   0015AC                     
  8489                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  8490   0015AC  928A               	bcf	138,1,c	;volatile
  8491   0015AE  0012               	return		;funcret
  8492   0015B0                     __end_of_EscriuPrimeraOrdre:
  8493                           	callstack 0
  8494                           
  8495 ;; *************** function _CantaIR *****************
  8496 ;; Defined at:
  8497 ;;		line 224 in file "TAD_DISPLAY.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  IR              1    wreg     unsigned char 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  IR              1    3[COMRAM] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      void 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1
  8511 ;;      Params:         0       0       0
  8512 ;;      Locals:         1       0       0
  8513 ;;      Temps:          0       0       0
  8514 ;;      Totals:         1       0       0
  8515 ;;Total ram usage:        1 bytes
  8516 ;; Hardware stack levels used: 1
  8517 ;; Hardware stack levels required when called: 4
  8518 ;; This function calls:
  8519 ;;		_CantaPartAlta
  8520 ;;		_CantaPartBaixa
  8521 ;; This function is called by:
  8522 ;;		_LcInit
  8523 ;;		_LcClear
  8524 ;;		_LcCursorOn
  8525 ;;		_LcCursorOff
  8526 ;;		_LcGotoXY
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text49
  8531   001B82                     __ptext49:
  8532                           	callstack 0
  8533   001B82                     _CantaIR:
  8534                           	callstack 25
  8535                           
  8536                           ;incstack = 0
  8537                           ;CantaIR@IR stored from wreg
  8538   001B82  6E49               	movwf	CantaIR@IR^0,c
  8539   001B84                     
  8540                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8541   001B84  9096               	bcf	150,0,c	;volatile
  8542   001B86  9296               	bcf	150,1,c	;volatile
  8543   001B88  9A93               	bcf	147,5,c	;volatile
  8544   001B8A  9893               	bcf	147,4,c	;volatile
  8545                           
  8546                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8547   001B8C  968A               	bcf	138,3,c	;volatile
  8548                           
  8549                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8550   001B8E  948A               	bcf	138,2,c	;volatile
  8551                           
  8552                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8553   001B90  828A               	bsf	138,1,c	;volatile
  8554   001B92                     
  8555                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8556   001B92  5049               	movf	CantaIR@IR^0,w,c
  8557   001B94  EC1A  F00B         	call	_CantaPartAlta
  8558   001B98                     
  8559                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8560   001B98  828A               	bsf	138,1,c	;volatile
  8561   001B9A                     
  8562                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8563   001B9A  928A               	bcf	138,1,c	;volatile
  8564   001B9C                     
  8565                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8566   001B9C  928A               	bcf	138,1,c	;volatile
  8567   001B9E                     
  8568                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8569   001B9E  828A               	bsf	138,1,c	;volatile
  8570                           
  8571                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8572   001BA0  5049               	movf	CantaIR@IR^0,w,c
  8573   001BA2  ECD8  F00A         	call	_CantaPartBaixa
  8574   001BA6                     
  8575                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8576   001BA6  828A               	bsf	138,1,c	;volatile
  8577   001BA8                     
  8578                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8579   001BA8  928A               	bcf	138,1,c	;volatile
  8580   001BAA                     
  8581                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8582   001BAA  8096               	bsf	150,0,c	;volatile
  8583   001BAC  8296               	bsf	150,1,c	;volatile
  8584   001BAE  8A93               	bsf	147,5,c	;volatile
  8585   001BB0  8893               	bsf	147,4,c	;volatile
  8586   001BB2  0012               	return		;funcret
  8587   001BB4                     __end_of_CantaIR:
  8588                           	callstack 0
  8589                           
  8590 ;; *************** function _CantaPartBaixa *****************
  8591 ;; Defined at:
  8592 ;;		line 217 in file "TAD_DISPLAY.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  c               1    wreg     unsigned char 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  c               1    2[COMRAM] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1
  8606 ;;      Params:         0       0       0
  8607 ;;      Locals:         1       0       0
  8608 ;;      Temps:          1       0       0
  8609 ;;      Totals:         2       0       0
  8610 ;;Total ram usage:        2 bytes
  8611 ;; Hardware stack levels used: 1
  8612 ;; Hardware stack levels required when called: 3
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_CantaIR
  8617 ;;		_CantaData
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text50
  8622   0015B0                     __ptext50:
  8623                           	callstack 0
  8624   0015B0                     _CantaPartBaixa:
  8625                           	callstack 25
  8626                           
  8627                           ;incstack = 0
  8628                           ;CantaPartBaixa@c stored from wreg
  8629   0015B0  6E48               	movwf	CantaPartBaixa@c^0,c
  8630   0015B2                     
  8631                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  8632   0015B2  B648               	btfsc	CantaPartBaixa@c^0,3,c
  8633   0015B4  EFDE  F00A         	goto	u2151
  8634   0015B8  EFE2  F00A         	goto	u2150
  8635   0015BC                     u2151:
  8636   0015BC  6A47               	clrf	??_CantaPartBaixa^0,c
  8637   0015BE  2A47               	incf	??_CantaPartBaixa^0,f,c
  8638   0015C0  EFE3  F00A         	goto	u2168
  8639   0015C4                     u2150:
  8640   0015C4  6A47               	clrf	??_CantaPartBaixa^0,c
  8641   0015C6                     u2168:
  8642   0015C6  508D               	movf	141,w,c	;volatile
  8643   0015C8  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8644   0015CA  0BFE               	andlw	-2
  8645   0015CC  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8646   0015CE  6E8D               	movwf	141,c	;volatile
  8647                           
  8648                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  8649   0015D0  B448               	btfsc	CantaPartBaixa@c^0,2,c
  8650   0015D2  EFED  F00A         	goto	u2171
  8651   0015D6  EFF1  F00A         	goto	u2170
  8652   0015DA                     u2171:
  8653   0015DA  6A47               	clrf	??_CantaPartBaixa^0,c
  8654   0015DC  2A47               	incf	??_CantaPartBaixa^0,f,c
  8655   0015DE  EFF2  F00A         	goto	u2188
  8656   0015E2                     u2170:
  8657   0015E2  6A47               	clrf	??_CantaPartBaixa^0,c
  8658   0015E4                     u2188:
  8659   0015E4  4647               	rlncf	??_CantaPartBaixa^0,f,c
  8660   0015E6  508D               	movf	141,w,c	;volatile
  8661   0015E8  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8662   0015EA  0BFD               	andlw	-3
  8663   0015EC  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8664   0015EE  6E8D               	movwf	141,c	;volatile
  8665                           
  8666                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  8667   0015F0  B248               	btfsc	CantaPartBaixa@c^0,1,c
  8668   0015F2  EFFD  F00A         	goto	u2191
  8669   0015F6  EF01  F00B         	goto	u2190
  8670   0015FA                     u2191:
  8671   0015FA  6A47               	clrf	??_CantaPartBaixa^0,c
  8672   0015FC  2A47               	incf	??_CantaPartBaixa^0,f,c
  8673   0015FE  EF02  F00B         	goto	u2208
  8674   001602                     u2190:
  8675   001602  6A47               	clrf	??_CantaPartBaixa^0,c
  8676   001604                     u2208:
  8677   001604  3A47               	swapf	??_CantaPartBaixa^0,f,c
  8678   001606  4647               	rlncf	??_CantaPartBaixa^0,f,c
  8679   001608  508A               	movf	138,w,c	;volatile
  8680   00160A  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8681   00160C  0BDF               	andlw	-33
  8682   00160E  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8683   001610  6E8A               	movwf	138,c	;volatile
  8684                           
  8685                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  8686   001612  B048               	btfsc	CantaPartBaixa@c^0,0,c
  8687   001614  EF0E  F00B         	goto	u2211
  8688   001618  EF12  F00B         	goto	u2210
  8689   00161C                     u2211:
  8690   00161C  6A47               	clrf	??_CantaPartBaixa^0,c
  8691   00161E  2A47               	incf	??_CantaPartBaixa^0,f,c
  8692   001620  EF13  F00B         	goto	u2228
  8693   001624                     u2210:
  8694   001624  6A47               	clrf	??_CantaPartBaixa^0,c
  8695   001626                     u2228:
  8696   001626  3A47               	swapf	??_CantaPartBaixa^0,f,c
  8697   001628  508A               	movf	138,w,c	;volatile
  8698   00162A  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8699   00162C  0BEF               	andlw	-17
  8700   00162E  1847               	xorwf	??_CantaPartBaixa^0,w,c
  8701   001630  6E8A               	movwf	138,c	;volatile
  8702   001632  0012               	return		;funcret
  8703   001634                     __end_of_CantaPartBaixa:
  8704                           	callstack 0
  8705                           
  8706 ;; *************** function _CantaPartAlta *****************
  8707 ;; Defined at:
  8708 ;;		line 210 in file "TAD_DISPLAY.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  c               1    wreg     unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  c               1    2[COMRAM] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1
  8722 ;;      Params:         0       0       0
  8723 ;;      Locals:         1       0       0
  8724 ;;      Temps:          1       0       0
  8725 ;;      Totals:         2       0       0
  8726 ;;Total ram usage:        2 bytes
  8727 ;; Hardware stack levels used: 1
  8728 ;; Hardware stack levels required when called: 3
  8729 ;; This function calls:
  8730 ;;		Nothing
  8731 ;; This function is called by:
  8732 ;;		_CantaIR
  8733 ;;		_CantaData
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text51
  8738   001634                     __ptext51:
  8739                           	callstack 0
  8740   001634                     _CantaPartAlta:
  8741                           	callstack 25
  8742                           
  8743                           ;incstack = 0
  8744                           ;CantaPartAlta@c stored from wreg
  8745   001634  6E48               	movwf	CantaPartAlta@c^0,c
  8746   001636                     
  8747                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8748   001636  BE48               	btfsc	CantaPartAlta@c^0,7,c
  8749   001638  EF20  F00B         	goto	u2071
  8750   00163C  EF24  F00B         	goto	u2070
  8751   001640                     u2071:
  8752   001640  6A47               	clrf	??_CantaPartAlta^0,c
  8753   001642  2A47               	incf	??_CantaPartAlta^0,f,c
  8754   001644  EF25  F00B         	goto	u2088
  8755   001648                     u2070:
  8756   001648  6A47               	clrf	??_CantaPartAlta^0,c
  8757   00164A                     u2088:
  8758   00164A  508D               	movf	141,w,c	;volatile
  8759   00164C  1847               	xorwf	??_CantaPartAlta^0,w,c
  8760   00164E  0BFE               	andlw	-2
  8761   001650  1847               	xorwf	??_CantaPartAlta^0,w,c
  8762   001652  6E8D               	movwf	141,c	;volatile
  8763                           
  8764                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8765   001654  BC48               	btfsc	CantaPartAlta@c^0,6,c
  8766   001656  EF2F  F00B         	goto	u2091
  8767   00165A  EF33  F00B         	goto	u2090
  8768   00165E                     u2091:
  8769   00165E  6A47               	clrf	??_CantaPartAlta^0,c
  8770   001660  2A47               	incf	??_CantaPartAlta^0,f,c
  8771   001662  EF34  F00B         	goto	u2108
  8772   001666                     u2090:
  8773   001666  6A47               	clrf	??_CantaPartAlta^0,c
  8774   001668                     u2108:
  8775   001668  4647               	rlncf	??_CantaPartAlta^0,f,c
  8776   00166A  508D               	movf	141,w,c	;volatile
  8777   00166C  1847               	xorwf	??_CantaPartAlta^0,w,c
  8778   00166E  0BFD               	andlw	-3
  8779   001670  1847               	xorwf	??_CantaPartAlta^0,w,c
  8780   001672  6E8D               	movwf	141,c	;volatile
  8781                           
  8782                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8783   001674  BA48               	btfsc	CantaPartAlta@c^0,5,c
  8784   001676  EF3F  F00B         	goto	u2111
  8785   00167A  EF43  F00B         	goto	u2110
  8786   00167E                     u2111:
  8787   00167E  6A47               	clrf	??_CantaPartAlta^0,c
  8788   001680  2A47               	incf	??_CantaPartAlta^0,f,c
  8789   001682  EF44  F00B         	goto	u2128
  8790   001686                     u2110:
  8791   001686  6A47               	clrf	??_CantaPartAlta^0,c
  8792   001688                     u2128:
  8793   001688  3A47               	swapf	??_CantaPartAlta^0,f,c
  8794   00168A  4647               	rlncf	??_CantaPartAlta^0,f,c
  8795   00168C  508A               	movf	138,w,c	;volatile
  8796   00168E  1847               	xorwf	??_CantaPartAlta^0,w,c
  8797   001690  0BDF               	andlw	-33
  8798   001692  1847               	xorwf	??_CantaPartAlta^0,w,c
  8799   001694  6E8A               	movwf	138,c	;volatile
  8800                           
  8801                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8802   001696  B848               	btfsc	CantaPartAlta@c^0,4,c
  8803   001698  EF50  F00B         	goto	u2131
  8804   00169C  EF54  F00B         	goto	u2130
  8805   0016A0                     u2131:
  8806   0016A0  6A47               	clrf	??_CantaPartAlta^0,c
  8807   0016A2  2A47               	incf	??_CantaPartAlta^0,f,c
  8808   0016A4  EF55  F00B         	goto	u2148
  8809   0016A8                     u2130:
  8810   0016A8  6A47               	clrf	??_CantaPartAlta^0,c
  8811   0016AA                     u2148:
  8812   0016AA  3A47               	swapf	??_CantaPartAlta^0,f,c
  8813   0016AC  508A               	movf	138,w,c	;volatile
  8814   0016AE  1847               	xorwf	??_CantaPartAlta^0,w,c
  8815   0016B0  0BEF               	andlw	-17
  8816   0016B2  1847               	xorwf	??_CantaPartAlta^0,w,c
  8817   0016B4  6E8A               	movwf	138,c	;volatile
  8818   0016B6  0012               	return		;funcret
  8819   0016B8                     __end_of_CantaPartAlta:
  8820                           	callstack 0
  8821                           
  8822 ;; *************** function _LowRSI *****************
  8823 ;; Defined at:
  8824 ;;		line 34 in file "main.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;		None
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;		None
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  1    wreg      void 
  8831 ;; Registers used:
  8832 ;;		None
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMRAM   BANK0   BANK1
  8838 ;;      Params:         0       0       0
  8839 ;;      Locals:         0       0       0
  8840 ;;      Temps:          1       0       0
  8841 ;;      Totals:         1       0       0
  8842 ;;Total ram usage:        1 bytes
  8843 ;; Hardware stack levels used: 1
  8844 ;; Hardware stack levels required when called: 2
  8845 ;; This function calls:
  8846 ;;		Nothing
  8847 ;; This function is called by:
  8848 ;;		Interrupt level 1
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	intcodelo
  8853   000018                     __pintcodelo:
  8854                           	callstack 0
  8855   000018                     _LowRSI:
  8856                           	callstack 22
  8857                           
  8858                           ;incstack = 0
  8859   000018  806C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8860   00001A  CFE0 F046          	movff	bsr,??_LowRSI
  8861   00001E  C046  FFE0         	movff	??_LowRSI,bsr
  8862   000022  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8863   000024  0010               	retfie	
  8864   000026                     __end_of_LowRSI:
  8865                           	callstack 0
  8866                           
  8867 ;; *************** function _HighRSI *****************
  8868 ;; Defined at:
  8869 ;;		line 30 in file "main.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;		None
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1
  8883 ;;      Params:         0       0       0
  8884 ;;      Locals:         0       0       0
  8885 ;;      Temps:          0       0       0
  8886 ;;      Totals:         0       0       0
  8887 ;;Total ram usage:        0 bytes
  8888 ;; Hardware stack levels used: 1
  8889 ;; Hardware stack levels required when called: 1
  8890 ;; This function calls:
  8891 ;;		_RSI_Timer0
  8892 ;; This function is called by:
  8893 ;;		Interrupt level 2
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	intcode
  8898   000008                     __pintcode:
  8899                           	callstack 0
  8900   000008                     _HighRSI:
  8901                           	callstack 22
  8902                           
  8903                           ;incstack = 0
  8904   000008  826C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8905   00000A  EF42  F00E         	goto	int_func
  8906                           
  8907                           	psect	intcode_body
  8908   001C84                     __pintcode_body:
  8909                           	callstack 22
  8910   001C84                     int_func:
  8911                           	callstack 22
  8912   001C84                     
  8913                           ;main.c: 32: 
  8914   001C84  A4F2               	btfss	242,2,c	;volatile
  8915   001C86  EF47  F00E         	goto	i2u187_41
  8916   001C8A  EF49  F00E         	goto	i2u187_40
  8917   001C8E                     i2u187_41:
  8918   001C8E  EF4B  F00E         	goto	i2l38
  8919   001C92                     i2u187_40:
  8920   001C92  EC2B  F00E         	call	_RSI_Timer0	;wreg free
  8921   001C96                     i2l38:
  8922   001C96  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8923   001C98  0011               	retfie		f
  8924   001C9A                     __end_of_HighRSI:
  8925                           	callstack 0
  8926                           
  8927 ;; *************** function _RSI_Timer0 *****************
  8928 ;; Defined at:
  8929 ;;		line 25 in file "TAD_TIMER.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1
  8943 ;;      Params:         0       0       0
  8944 ;;      Locals:         0       0       0
  8945 ;;      Temps:          0       0       0
  8946 ;;      Totals:         0       0       0
  8947 ;;Total ram usage:        0 bytes
  8948 ;; Hardware stack levels used: 1
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_HighRSI
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text54
  8957   001C56                     __ptext54:
  8958                           	callstack 0
  8959   001C56                     _RSI_Timer0:
  8960                           	callstack 22
  8961   001C56                     
  8962                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8963   001C56  0EF6               	movlw	246
  8964   001C58  6ED7               	movwf	215,c	;volatile
  8965   001C5A  0E3C               	movlw	60
  8966   001C5C  6ED6               	movwf	214,c	;volatile
  8967   001C5E                     
  8968                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8969   001C5E  94F2               	bcf	4082,2,c	;volatile
  8970   001C60                     
  8971                           ;TAD_TIMER.c: 29:     Tics++;
  8972   001C60  0E01               	movlw	1
  8973   001C62  2607               	addwf	_Tics^0,f,c	;volatile
  8974   001C64  0E00               	movlw	0
  8975   001C66  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  8976   001C68  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  8977   001C6A  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  8978   001C6C  0012               	return		;funcret
  8979   001C6E                     __end_of_RSI_Timer0:
  8980                           	callstack 0
  8981                           
  8982                           	psect	rparam
  8983   000001                     ___rparam_used  equ	1
  8984   000000                     ___param_bank   equ	0
  8985   000000                     __Lparam        equ	__Lrparam
  8986   000000                     __Hparam        equ	__Hrparam
  8987                           
  8988                           	psect	temp
  8989   00006C                     btemp:
  8990                           	callstack 0
  8991   00006C                     	ds	1
  8992   00006C                     int$flags       set	btemp
  8993   00006D                     wtemp8          set	btemp+1
  8994   00006D                     ttemp5          set	btemp+1
  8995   000070                     ttemp6          set	btemp+4
  8996   000074                     ttemp7          set	btemp+8
  8997                           
  8998                           	psect	idloc
  8999                           
  9000                           ;Config register IDLOC0 @ 0x200000
  9001                           ;	unspecified, using default values
  9002   200000                     	org	2097152
  9003   200000  FF                 	db	255
  9004                           
  9005                           ;Config register IDLOC1 @ 0x200001
  9006                           ;	unspecified, using default values
  9007   200001                     	org	2097153
  9008   200001  FF                 	db	255
  9009                           
  9010                           ;Config register IDLOC2 @ 0x200002
  9011                           ;	unspecified, using default values
  9012   200002                     	org	2097154
  9013   200002  FF                 	db	255
  9014                           
  9015                           ;Config register IDLOC3 @ 0x200003
  9016                           ;	unspecified, using default values
  9017   200003                     	org	2097155
  9018   200003  FF                 	db	255
  9019                           
  9020                           ;Config register IDLOC4 @ 0x200004
  9021                           ;	unspecified, using default values
  9022   200004                     	org	2097156
  9023   200004  FF                 	db	255
  9024                           
  9025                           ;Config register IDLOC5 @ 0x200005
  9026                           ;	unspecified, using default values
  9027   200005                     	org	2097157
  9028   200005  FF                 	db	255
  9029                           
  9030                           ;Config register IDLOC6 @ 0x200006
  9031                           ;	unspecified, using default values
  9032   200006                     	org	2097158
  9033   200006  FF                 	db	255
  9034                           
  9035                           ;Config register IDLOC7 @ 0x200007
  9036                           ;	unspecified, using default values
  9037   200007                     	org	2097159
  9038   200007  FF                 	db	255
  9039                           
  9040                           	psect	config
  9041                           
  9042                           ; Padding undefined space
  9043   300000                     	org	3145728
  9044   300000  FF                 	db	255
  9045                           
  9046                           ;Config register CONFIG1H @ 0x300001
  9047                           ;	Oscillator
  9048                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9049                           ;	Fail-Safe Clock Monitor Enable bit
  9050                           ;	FCMEN = 0x0, unprogrammed default
  9051                           ;	Internal/External Oscillator Switchover bit
  9052                           ;	IESO = 0x0, unprogrammed default
  9053   300001                     	org	3145729
  9054   300001  06                 	db	6
  9055                           
  9056                           ;Config register CONFIG2L @ 0x300002
  9057                           ;	Power-up Timer Enable bit
  9058                           ;	PWRT = OFF, PWRT disabled
  9059                           ;	Brown-out Reset Enable bits
  9060                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9061                           ;	Brown-out Reset Voltage bits
  9062                           ;	BORV = 0x3, unprogrammed default
  9063   300002                     	org	3145730
  9064   300002  19                 	db	25
  9065                           
  9066                           ;Config register CONFIG2H @ 0x300003
  9067                           ;	Watchdog Timer Enable bit
  9068                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9069                           ;	Watchdog Timer Postscale Select bits
  9070                           ;	WDTPS = 0xF, unprogrammed default
  9071   300003                     	org	3145731
  9072   300003  1E                 	db	30
  9073                           
  9074                           ; Padding undefined space
  9075   300004                     	org	3145732
  9076   300004  FF                 	db	255
  9077                           
  9078                           ;Config register CONFIG3H @ 0x300005
  9079                           ;	CCP2 MUX bit
  9080                           ;	CCP2MX = 0x1, unprogrammed default
  9081                           ;	PORTB A/D Enable bit
  9082                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9083                           ;	Low-Power Timer1 Oscillator Enable bit
  9084                           ;	LPT1OSC = 0x0, unprogrammed default
  9085                           ;	MCLR Pin Enable bit
  9086                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9087   300005                     	org	3145733
  9088   300005  81                 	db	129
  9089                           
  9090                           ;Config register CONFIG4L @ 0x300006
  9091                           ;	Stack Full/Underflow Reset Enable bit
  9092                           ;	STVREN = 0x1, unprogrammed default
  9093                           ;	Single-Supply ICSP Enable bit
  9094                           ;	LVP = OFF, Single-Supply ICSP disabled
  9095                           ;	Boot Block Size Select bits
  9096                           ;	BBSIZ = 0x0, unprogrammed default
  9097                           ;	Extended Instruction Set Enable bit
  9098                           ;	XINST = 0x0, unprogrammed default
  9099                           ;	Background Debugger Enable bit
  9100                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9101   300006                     	org	3145734
  9102   300006  81                 	db	129
  9103                           
  9104                           ; Padding undefined space
  9105   300007                     	org	3145735
  9106   300007  FF                 	db	255
  9107                           
  9108                           ;Config register CONFIG5L @ 0x300008
  9109                           ;	unspecified, using default values
  9110                           ;	Code Protection bit
  9111                           ;	CP0 = 0x1, unprogrammed default
  9112                           ;	Code Protection bit
  9113                           ;	CP1 = 0x1, unprogrammed default
  9114   300008                     	org	3145736
  9115   300008  03                 	db	3
  9116                           
  9117                           ;Config register CONFIG5H @ 0x300009
  9118                           ;	unspecified, using default values
  9119                           ;	Boot Block Code Protection bitProtect Boot
  9120                           ;	CPB = 0x1, unprogrammed default
  9121                           ;	Data EEPROM Code Protection bit
  9122                           ;	CPD = 0x1, unprogrammed default
  9123   300009                     	org	3145737
  9124   300009  C0                 	db	192
  9125                           
  9126                           ;Config register CONFIG6L @ 0x30000A
  9127                           ;	unspecified, using default values
  9128                           ;	Write Protection bit
  9129                           ;	WRT0 = 0x1, unprogrammed default
  9130                           ;	Write Protection bit
  9131                           ;	WRT1 = 0x1, unprogrammed default
  9132   30000A                     	org	3145738
  9133   30000A  03                 	db	3
  9134                           
  9135                           ;Config register CONFIG6H @ 0x30000B
  9136                           ;	unspecified, using default values
  9137                           ;	Configuration Register Write Protection bit
  9138                           ;	WRTC = 0x1, unprogrammed default
  9139                           ;	Boot Block Write Protection bit
  9140                           ;	WRTB = 0x1, unprogrammed default
  9141                           ;	Data EEPROM Write Protection bit
  9142                           ;	WRTD = 0x1, unprogrammed default
  9143   30000B                     	org	3145739
  9144   30000B  E0                 	db	224
  9145                           
  9146                           ;Config register CONFIG7L @ 0x30000C
  9147                           ;	unspecified, using default values
  9148                           ;	Table Read Protection bit
  9149                           ;	EBTR0 = 0x1, unprogrammed default
  9150                           ;	Table Read Protection bit
  9151                           ;	EBTR1 = 0x1, unprogrammed default
  9152   30000C                     	org	3145740
  9153   30000C  03                 	db	3
  9154                           
  9155                           ;Config register CONFIG7H @ 0x30000D
  9156                           ;	unspecified, using default values
  9157                           ;	Boot Block Table Read Protection bit
  9158                           ;	EBTRB = 0x1, unprogrammed default
  9159   30000D                     	org	3145741
  9160   30000D  40                 	db	64
  9161                           tosu	equ	0xFFF
  9162                           tosh	equ	0xFFE
  9163                           tosl	equ	0xFFD
  9164                           stkptr	equ	0xFFC
  9165                           pclatu	equ	0xFFB
  9166                           pclath	equ	0xFFA
  9167                           pcl	equ	0xFF9
  9168                           tblptru	equ	0xFF8
  9169                           tblptrh	equ	0xFF7
  9170                           tblptrl	equ	0xFF6
  9171                           tablat	equ	0xFF5
  9172                           prodh	equ	0xFF4
  9173                           prodl	equ	0xFF3
  9174                           indf0	equ	0xFEF
  9175                           postinc0	equ	0xFEE
  9176                           postdec0	equ	0xFED
  9177                           preinc0	equ	0xFEC
  9178                           plusw0	equ	0xFEB
  9179                           fsr0h	equ	0xFEA
  9180                           fsr0l	equ	0xFE9
  9181                           wreg	equ	0xFE8
  9182                           indf1	equ	0xFE7
  9183                           postinc1	equ	0xFE6
  9184                           postdec1	equ	0xFE5
  9185                           preinc1	equ	0xFE4
  9186                           plusw1	equ	0xFE3
  9187                           fsr1h	equ	0xFE2
  9188                           fsr1l	equ	0xFE1
  9189                           bsr	equ	0xFE0
  9190                           indf2	equ	0xFDF
  9191                           postinc2	equ	0xFDE
  9192                           postdec2	equ	0xFDD
  9193                           preinc2	equ	0xFDC
  9194                           plusw2	equ	0xFDB
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8

Data Sizes:
    Strings     302
    Constant    12
    Data        96
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     30     107
    BANK0           128      0     108
    BANK1           256      0       0

Pointer List with Targets:

    motor_RFID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    motorTerminal@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    sp__getActualUID	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_1(CODE[18]), STR_10(CODE[2]), STR_11(CODE[3]), STR_12(CODE[3]), 
		 -> STR_13(CODE[4]), STR_14(CODE[3]), STR_15(CODE[3]), STR_16(CODE[3]), 
		 -> STR_17(CODE[3]), STR_18(CODE[3]), STR_19(CODE[33]), STR_2(CODE[18]), 
		 -> STR_20(CODE[33]), STR_21(CODE[33]), STR_22(CODE[6]), STR_23(CODE[10]), 
		 -> STR_24(CODE[2]), STR_25(CODE[3]), STR_26(CODE[22]), STR_27(CODE[2]), 
		 -> STR_3(CODE[18]), STR_4(CODE[19]), STR_5(CODE[27]), STR_6(CODE[29]), 
		 -> STR_7(CODE[33]), STR_8(CODE[9]), STR_9(CODE[6]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F989(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motor_Write->_delay_us
    _motor_Read->_delay_us
    _motorTerminal->_printfUID
    _showMenu->_Terminal_SendString
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_GetTecla
    _setLed->_setLEDIntensity
    _initTeclado->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6332
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           8     8      0    2425
                                             22 COMRAM     8     8      0
                         _MFRC522_Rd
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1048
                                             17 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       6     5      1     356
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          3     2      1     102
                                              6 COMRAM     3     2      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           2     2      0      45
                                              6 COMRAM     2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        1     1      0    1101
                                             17 COMRAM     1     1      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                _Terminal_SendString
                       _getActualUID
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0     101
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     288
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           10     9      1     470
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2     101
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     332
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                       _checkUserUID
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _checkUserUID                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1290
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1290
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     237
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     423
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     423
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     423
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     423
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     207
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Rd                                           5     5      0     135
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _checkUserUID
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _Terminal_SendString
       _Terminal_SendChar
     _getActualUID
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Rd
     _getActualUID
     _motor_Read
       _delay_us
     _motor_Write
       _delay_us
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     108     84.4%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     30     107     84.9%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         35      0       0      0.0%
BITBIGSFRllh         5      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     215      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 13 01:42:09 2025

        __end_ofGetTecla@F2752 1ED1          ?_Terminal_ReceiveChar 0046                     _RSI_Timer0 1C56  
     setLEDIntensity@intensity 0048                    MFRC522_Rd@i 0050                    MFRC522_Wr@i 0055  
                           l54 1D38                             l90 1920                             l83 1886  
                           l77 1B80                             l87 1C00                             u10 1B4C  
                           u11 1B48                             u30 1400                             u31 13F8  
                           u50 1434                             u51 1430                             u60 1454  
                           u61 144E                             u70 1472                             u71 146E  
                           u48 1402                             u66 1456           __end_of_checkUserUID 0C92  
                   _TI_GetTics 18D6                             bsr 0FE0           ??_InitPortDirections 0047  
                          l211 1B20                            l131 1D44                            l220 1478  
                          l213 1B4C                            l230 1C54                            l134 1C82  
                          l207 1D16                            l233 1CC0                            l137 1D30  
                          l218 1438                            l226 13D2                            l242 1D0A  
                          l322 03A6                            l219 1472                            l227 13D6  
                          l236 1BDC                            l245 18D4                            l174 19B0  
                          l166 0B08                            l414 06BC                            l239 1CFE  
                          l263 10DC                            l431 08D2                            l184 1278  
                          l360 0308                            l352 0286                            l281 11B4  
                          l257 0FFC                            l522 1A34                            l186 1206  
                          l178 11BC                            l418 06E6                            l531 1BB2  
                          l275 10E4                            l540 15AE                            l284 1D20  
                          l525 16B6                            l470 0F04                            l606 0FF4  
                          l279 114E                            l528 1632                            l616 132E  
                          l537 1CD4                            l641 0E0C                            l571 1CAC  
                          l740 1AAA                            l580 1D48                            l565 1CE4  
                          l671 17D8                            l592 1D3E                            l568 1C3A  
                          l576 1C1A                            l761 1CF2                            l729 19F6  
                          l577 1C1E                            l586 1B16                            l683 1518  
                          l692 196A                            l589 177E                            l696 0C90  
                          l689 1AE0                            l699 0C8C                            u800 1188  
                          u801 1184                            u650 197E                            u651 197A  
                          u900 157C                            u660 1996                            u901 1574  
                          u661 1992                            u670 19AE                            u671 19AA  
                          u920 159E                            u680 125E                            u760 1110  
                          u921 1596                            u761 1108                            u860 153E  
                          u780 1144                            u861 1536                            u781 1140  
                          u918 157E                            u790 116A                            u791 1164  
                          u880 155C                            u881 1554                            u938 15A0  
                          u778 1112                            u980 1CAA                            u796 116C  
                          u981 1CA4                            u878 1540                            u898 155E  
                          u986 1CAC                   printfUID@low 0054               ??_CantaPartBaixa 0047  
                          wreg 0FE8                 ??_MFRC522_Init 0059                           l2004 151C  
                         l2006 152C                           l2008 15AC                           l3000 1BE0  
                         l3002 1BE2                           l3004 1BFE                           l1500 141A  
                         l3012 1C3E                           l3020 1AF6                           l3100 12D4  
                         l3006 18D8                           l1510 143A                           l1502 1422  
                         l3014 1CB0                           l3030 1BC4                           l3022 1AFA  
                         l3110 1322                           l3102 12DA                           l3040 1636  
                         l3008 18EC                           l1520 1462                           l1512 1440  
                         l1504 1424                           l3032 1CF4                           l3024 1BB4  
                         l3120 0B54                           l3112 0B0A                           l3200 1A74  
                         l2080 1C9A                           l3016 1AE2                           l3104 12F6  
                         l4000 0722                           l3042 15B2                           l2170 1CD6  
                         l1522 1476                           l1514 1444                           l1506 1434  
                         l3034 1D00                           l3026 1BB6                           l3130 0B7E  
                         l3122 0B66                           l3114 0B1E                           l3210 1AA4  
                         l3202 1A84                           l3018 1AE6                           l3106 1302  
                         l4010 0772                           l4002 0728                           l3036 19F8  
                         l2172 1CDE                           l2180 1D36                           l1516 1458  
                         l3028 1BBC                           l3132 0B90                           l3116 0B30  
                         l3212 1AA8                           l3204 1A88                           l2084 1D46  
                         l3060 0F5A                           l3052 0F1A                           l3044 0F06  
                         l3220 1000                           l3108 1306                           l3300 1934  
                         l4020 07A6                           l4012 0778                           l4004 0730  
                         l4100 1A5A                           l3038 19FE                           l2174 1CE0  
                         l1470 1B22                           l1518 1460                           l3214 1888  
                         l3150 0C02                           l3134 0BA2                           l3118 0B42  
                         l3206 1A90                           l3070 0F9A                           l3062 0F60  
                         l3054 0F2E                           l3046 0F12                           l3230 1036  
                         l3222 1008                           l3310 195C                           l3302 1938  
                         l4030 07CE                           l4022 07AE                           l4102 1A5C  
                         l3320 1B9C                           l3312 1B84                           l2176 1CE2  
                         l1472 1B24                           l1480 13E4                           l3216 188C  
                         l1800 11CA                           l3152 0C14                           l3160 0C2C  
                         l3136 0BB4                           l3144 0BCC                           l3128 0B6C  
                         l3208 1A96                           l3080 0FE8                           l3072 0FA0  
                         l3064 0F6E                           l3056 0F3E                           l3240 104C  
                         l3232 103C                           l3224 100C                           l3304 193C  
                         l4024 07BA                           l4016 0780                           l4008 0750  
                         l4104 1A60                           l3322 1B9E                           l3314 1B92  
                         l3330 1CC2                           l2178 1D32                           l1482 13E6  
                         l1802 11D2                           l1810 11E0                           l3170 0C86  
                         l3162 0C3E                           l3154 0C26                           l3146 0BDE  
                         l3138 0BC6                           l3074 0FBC                           l3066 0F7E  
                         l3058 0F4E                           l3410 14EC                           l3402 14AA  
                         l3250 108E                           l3242 105E                           l3234 1042  
                         l3226 100E                           l3218 0FF8                           l3090 1290  
                         l3082 127A                           l3306 1948                           l4018 0790  
                         l4034 08BC                           l4106 1A64                           l3324 1BA6  
                         l3316 1B98                           l3500 0ED0                           l1468 1B1A  
                         l1492 13EE                           l1484 13E8                           l1812 120C  
                         l1804 11DA                           l3164 0C50                           l3148 0BF0  
                         l3180 19C4                           l3076 0FC8                           l3068 0F8E  
                         l3420 1AC4                           l3412 14F8                           l3404 14C0  
                         l3260 10B0                           l3252 1094                           l3244 1060  
                         l3236 1044                           l3228 1016                           l3092 129C  
                         l3308 1950                           l4108 1A68                           l3326 1BA8  
                         l3318 1B9A                           l3502 0ED4                           l3430 1B50  
                         l1494 140E                           l1486 13EA                           l1478 13DA  
                         l4222 1232                           l1814 1214                           l1822 121C  
                         l3166 0C62                           l3182 19D4                           l3510 08D4  
                         l3078 0FCC                           l3422 1AD2                           l3414 14FC  
                         l3406 14CC                           l3262 10B6                           l3254 1096  
                         l3246 1068                           l3238 104A                           l3270 10DA  
                         l3094 12A8                           l3328 1BAA                           l3192 1850  
                         l3504 0EDE                           l3440 1B7E                           l3432 1B5E  
                         l3424 1B4E                           l1496 1410                           l1824 1250  
                         l3168 0C74                           l3184 19E4                           l3600 0A84  
                         l3520 08F6                           l3512 08D8                           l3280 17B0  
                         l3416 1AAC                           l3408 14D0                           l1920 10F6  
                         l1912 10E0                           l3256 109C                           l3248 1088  
                         l3096 12B8                           l3088 1282                           l3194 186C  
                         l3186 1832                           l3506 0EE4                           l3434 1B60  
                         l1850 1D0C                           l1498 1416                           l3450 1C78  
                         l3442 1C6E                           l1826 1268                           l3178 19B4  
                         l3610 0AC4                           l3602 0AA6                           l3530 0922  
                         l3522 08FE                           l3514 08DE                           l3282 17C0  
                         l3274 1780                           l3418 1AB6                           l1930 112A  
                         l1922 10FE                           l1914 10E8                           l3258 109E  
                         l3098 12C8                           l4090 1A42                           l3196 187C  
                         l3188 1838                           l3508 0EE8                           l3436 1B70  
                         l3460 1CEA                           l1780 1D2E                           l3452 1C7A  
                         l3444 1C72                           l3612 0AC6                           l3540 0952  
                         l3532 0932                           l3524 090E                           l3516 08EE  
                         l3284 17D0                           l3276 1790                           l3620 0C92  
                         l1940 1150                           l1932 1132                           l1924 111E  
                         l1916 10F2                           l3268 10BC                           l3292 1924  
                         l3700 006A                           l4092 1A46                           l3470 0E24  
                         l3462 0E10                           l3438 1B7C                           l3454 1D18  
                         l3446 1C74                           l1774 1D40                           l1790 1996  
                         l1782 196C                           l3614 0ACA                           l3606 0AAE  
                         l3534 0936                           l3526 0914                           l3518 08F2  
                         l3278 17A0                           l3390 1482                           l3382 171E  
                         l3630 0CC2                           l3622 0C96                           l1950 1178  
                         l1942 1156                           l1934 1134                           l1926 1120  
                         l1918 10F4                           l3294 1928                           l3710 009E  
                         l3702 007A                           l4094 1A4A                           l4086 1A36  
                         l3480 0E44                           l3472 0E2A                           l3464 0E18  
                         l3456 1D1C                           l3448 1C76                           l1848 1D3A  
                         l1792 199C                           l1784 196E                           l3608 0AB4  
                         l3560 099A                           l3552 097C                           l3544 095C  
                         l3536 093A                           l3528 091C                           l3288 17D6  
                         l3392 148E                           l3384 147A                           l3640 0CF8  
                         l3632 0CC6                           l3624 0CAA                           l1952 1188  
                         l1944 115A                           l1936 1144                           l1928 1126  
                         l1960 1194                           l3296 192C                           l3800 029E  
                         l3720 00D4                           l3712 00A6                           l3704 0082  
                         l4096 1A4E                           l4088 1A3E                           l3490 0E92  
                         l3482 0E4A                           l3466 0E1C                           l3458 1CE6  
                         l1778 1D2A                           l1794 19AE                           l1786 197E  
                         l3562 09A0                           l3554 098C                           l3546 0962  
                         l3538 0942                           l3618 0AD2                           l3394 1496  
                         l3642 0D04                           l3650 0D24                           l3634 0CCA  
                         l3626 0CAE                           l1954 118E                           l1946 116E  
                         l1938 1146                           l1962 11B2                           l3298 1930  
                         l3810 02D4                           l3802 02A6                           l3730 010E  
                         l3722 00DC                           l3714 00B4                           l3706 008A  
                         l4098 1A58                    _TI_NewTimer 1832                           l3492 0EAA  
                         l3484 0E62                           l3468 0E20                           l1796 11B6  
                         l1788 1984                           l3580 0A02                           l3572 09BA  
                         l3564 09A6                           l3556 0990                           l3548 0972  
                         l3396 14A2                           l3660 0D60                           l3652 0D38  
                         l3644 0D0A                           l3636 0CD0                           l3628 0CB2  
                         l1948 1176                           l3900 0530                           l3812 02E4  
                         l3804 02B6                           l3740 014A                           l3732 011E  
                         l3724 00EA                           l3716 00C4                           l3708 009A  
                         l3494 0EAE                           l3486 0E74                           l3478 0E32  
                         l1798 11C2                           l3590 0A52                           l3574 09CA  
                         l3582 0A0A                           l3558 0994                           l3670 0DA4  
                         l3662 0D78                           l3654 0D44                           l3646 0D12  
                         l3638 0CE4                           l3910 055E                           l3830 03D6  
                         l3822 0310                           l3814 02EC                           l3806 02BC  
                         l3750 0186                           l3742 0156                           l3734 0126  
                         l3726 00FA                           l3718 00CC                           l3496 0EB8  
                         l3488 0E8C                           l2952 1332                           l3592 0A5A  
                         l3584 0A1A                           l3576 09EA                           l3680 0DE8  
                         l3672 0DC0                           l3664 0D80                           l3648 0D1E  
                         l3920 058A                           l3912 056E                           l3904 0544  
                         l3840 0404                           l3832 03DE                           l3824 03AA  
                         l3816 02FE                           l3808 02C4                           l3760 01B2  
                         l3752 018A                           l3744 0166                           l3736 0132  
                         l3728 0102                           l3498 0EBE                           l2970 136E  
                         l2954 133A                           l3594 0A60                           l3586 0A3A  
                         l3578 09FC                           l3674 0DC2                           l3658 0D4C  
                         l3930 05B4                           l3922 059E                           l3834 03EE  
                         l3826 03B6                           l3818 0302                           l3770 01F8  
                         l3762 01BA                           l3754 0192                           l3746 016E  
                         l3738 0142                           l3690 002E                           l2972 1370  
                         l2964 1342                           l2956 133C                           l3588 0A4C  
                         l2948 1C20                           l3676 0DD4                           l3668 0D90  
                         l3940 05EE                           l3932 05C2                           l3916 0574  
                         l3908 0550                           l3860 0460                           l3852 0440  
                         l3844 0418                           l3828 03C6                           l3780 0222  
                         l3772 01FE                           l3764 01C2                           l3756 01A0  
                         l3748 0176                           l3692 003A                           l2990 13BA  
                         l2982 138C                           l2974 1376                           l2966 1362  
                         l2958 133E                           l3598 0A74                           l3678 0DDC  
                         l3686 0DEE                           l3950 0628                           l3942 0604  
                         l3926 05A8                           l3918 057C                           l3870 049A  
                         l3862 046E                           l3854 0448                           l3846 0420  
                         l3838 03F6                           l3790 0258                           l3782 022A  
                         l3774 0206                           l3766 01D2                           l3758 01B0  
                         l3694 004A                           l2992 13C0                           l2984 13AC  
                         l2976 1378                           l2968 1368                           l3960 0650  
                         l3952 0630                           l3944 060C                           l3936 05D6  
                         l3880 04C4                           l3856 0458                           l3848 042C  
                         l3792 0268                           l3784 0238                           l3776 020E  
                         l3768 01E4                           l3696 0056                           l3688 002A  
                         l2994 13C2                           l2986 13B2                           l2978 1388  
                         l3970 067C                           l3962 0658                           l3954 0638  
                         l3946 0614                           l3938 05DE                           l3882 04D0  
                         l3874 04A2                           l3866 0482                           l3794 027E  
                         l3786 0248                           l3778 021E                           l3698 005E  
                         l2988 13B8                           l2996 1C04                           l3980 069C  
                         l3972 067E                           l3964 0668                           l3956 0640  
                         l3948 0624                           l3892 0504                           l3876 04B0  
                         l3868 048A                           l3796 028E                           l3788 0250  
                         l2998 1C04                           l3990 06E8                           l3982 06AC  
                         l3974 0686                           l3966 066C                           l3958 0648  
                         l3894 0510                           l3886 04E4                           l3798 0296  
                         l3992 06F0                           l3984 06BE                           l3976 0690  
                         l3968 0674                           l3888 04F0                           l3994 0702  
                         l3986 06C6                           l3978 0694                           l3898 0524  
                         l3996 0716                           l3988 06D6                           l3998 071E  
                         STR_1 1FB6                           STR_2 1FC8                           STR_3 1FB6  
                         STR_4 1FA3                           STR_5 1F72                           STR_6 1F55  
                         STR_7 1EF2                           STR_8 1FE4                           STR_9 1FF3  
                         u2000 1388                           u2001 1384                           u2010 139E  
                         u2011 1396                           u2110 1686                           u2030 13D2  
                         u2111 167E                           u2031 13CE                           u2040 1C1A  
                         u3000 004A                           u2041 1C16                           u3001 0046  
                         u2130 16A8                           u2210 1624                           u2050 1B16  
                         u3010 007A                           u2131 16A0                           u2211 161C  
                         u2051 1B12                           u3011 0076                           u2108 1668  
                         u2060 1A34                           u2028 13A0                           u2300 0B1E  
                         u3100 01D2                           u3020 009A                           u2061 1A30  
                         u2301 0B1A                           u3101 01CE                           u3021 0096  
                         u2070 1648                           u2150 15C4                           u2310 0B30  
                         u2230 0F3E                           u3110 01E4                           u3030 00C4  
                         u2071 1640                           u2151 15BC                           u2311 0B2C  
                         u2231 0F3A                           u3111 01E0                           u3031 00C0  
                         _LATC 0F8B                           u2128 1688                           u2208 1604  
                         u2400 0BDE                           u2320 0B42                           u2240 0F7E  
                         u3200 03C6                           u3120 01F8                           u3040 00FA  
                         _LATD 0F8C                           u2401 0BDA                           u2321 0B3E  
                         u2241 0F7A                           u3201 03C2                           u3121 01F4  
                         u3041 00F6                           u2090 1666                           u2170 15E2  
                         u2410 0BF0                           u2330 0B54                           u2250 0FBC  
                         u3210 03EE                           u3130 021E                           u3050 011E  
                         u2091 165E                           u2171 15DA                           u2411 0BEC  
                         u2331 0B50                           u2251 0FB8                           u3211 03EA  
                         u3131 021A                           u3051 011A                           u2148 16AA  
                         u2228 1626                           u2420 0C02                           u2340 0B66  
                         u2500 19C4                           u2260 0FE8                           u3300 0520  
                         u3220 0414                           u3140 0248                           u3060 0142  
                         u2421 0BFE                           u2341 0B62                           u2501 19C0  
                         u2261 0FE4                           u3301 051C                           u3221 0410  
                         u3141 0244                           u3061 013E                           u2190 1602  
                         u2430 0C14                           u2350 0B7E                           u2510 19D4  
                         u2270 12B8                           u3310 0540                           u3230 043C  
                         u3150 0268                           u3070 0166                           u2191 15FA  
                         u2431 0C10                           u2351 0B7A                           u2511 19D0  
                         u2271 12B4                           u3311 053C                           u3231 0438  
                         u3151 0264                           u3071 0162                           u2088 164A  
                         u2168 15C6                           u2440 0C26                           u2360 0B90  
                         u2520 19E4                           u2280 12F6                           u3400 06AC  
                         u3320 056E                           u3240 0458                           u3160 027E  
                         u3080 0186                           u2441 0C22                           u2361 0B8C  
                         u2521 19E0                           u2281 12F2                           u3401 06A8  
                         u3321 056A                           u3241 0454                           u3161 027A  
                         u3081 0182                           u2530 184C                           u2450 0C3E  
                         u2370 0BA2                           u2610 10B0                           u2290 1322  
                         u3410 06BC                           u3330 058A                           u3250 047E  
                         u3170 02B6                           u3090 01B0                           u2531 1848  
                         u2451 0C3A                           u2371 0B9E                           u2611 10AC  
                         u2291 131E                           u3411 06B8                           u3331 0586  
                         u3251 047A                           u3171 02B2                           u3091 01AC  
                         u2188 15E4                           u2540 186C                           u2460 0C50  
                         u2380 0BB4                           u2620 1790                           u3420 06D6  
                         u3340 059E                           u3260 049A                           u3180 02D4  
                         u2541 1868                           u2461 0C4C                           u2381 0BB0  
                         u2621 178C                           u3421 06D2                           u3341 059A  
                         u3261 0496                           u3181 02D0                           u2470 0C62  
                         u2390 0BC6                           u2550 1A84                           u2630 17A0  
                         u2710 14EC                           u3430 06E6                           u3350 05D2  
                         u3270 04C0                           u3190 02FE                           u2471 0C5E  
                         u2391 0BC2                           u2551 1A80                           u2631 179C  
                         u2711 14E8                           u3431 06E2                           u3351 05CE  
                         u3271 04BC                           u3191 02FA                           u2480 0C74  
                         u2800 098C                           u2640 17B0                           u2720 1518  
                         u2608 107C                           u2560 1028                           u3440 0702  
                         u3360 05EE                           u3280 04E0                           u2481 0C70  
                         u2801 0988                           u2641 17AC                           u2721 1514  
                         u2561 1020                           u3441 06FE                           u3361 05EA  
                         u3281 04DC                           u2730 1B70                           u2490 0C86  
                         u2810 09B6                           u2650 17C0                           u3450 0712  
                         u3370 0604                           u3290 0500                           u2731 1B6C  
                         u2491 0C82                           u2811 09B2                           u2651 17BC  
                         u3451 070E                           u3371 0600                           u3291 04FC  
                         u2740 0F04                           u2900 0AA6                           u2820 09CA  
                         u2660 17D0                           u2580 105E                           u3460 074C  
                         u3380 0624                           u2741 0F00                           u2901 0AA2  
                         u2821 09C6                           u2661 17CC                           u2581 105A  
                         u3461 0748                           u3381 0620                           u2910 0AC4  
                         u2830 09EA                           u2750 08EE                           u2590 107A  
                         u3470 0772                           u3390 0668                           u2911 0AC0  
                         u2831 09E6                           u2751 08EA                           u2591 1072  
                         u3471 076E                           u3391 0664                           u2840 09FC  
                         u2760 090E                           u2920 0CAA                           u3480 0790  
                         u2841 09F8                           u2761 090A                           u2921 0CA6  
                         u3481 078C                           u2850 0A1A                           u2770 0932  
                         u1970 1C32                           u2930 0CC2                           u2578 102A  
                         u3490 07CA                           u2851 0A16                           u2771 092E  
                         u1971 1C2A                           u2931 0CBE                           u3491 07C6  
                         u1980 1354                           u2860 0A3A                           u2780 0952  
                         u2940 0CE4                           u1981 134C                           u2861 0A36  
                         u2781 094E                           u2941 0CE0                           u2870 0A4C  
                         u2790 0972                           u2950 0CF8                           u2871 0A48  
                         u2791 096E                           u2951 0CF4                           u2880 0A70  
                         u2960 0D38                           u2881 0A6C                           u2961 0D34  
                         u2890 0A84                           u1978 1C34                           u2970 0D60  
                         i1l43 001E                           u2891 0A80                           u2971 0D5C  
                         u2980 0DA4                           u2981 0DA0                           u1998 1356  
                         u2990 0DD4                           u2991 0DD0                           i2l38 1C96  
                         i2l72 1C6C                           _TMR0 0FD6       setLEDIntensity@userIndex 0049  
                   _ActualLeds 0038                           _Tics 0007          _showAllConfigurations 147A  
                         _Rows 001E               motor_datos@state 0015                           _main 1A36  
                printfUID@high 0053                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 006C                __end_of_TI_Init 1B82                           prodh 0FF4  
                         prodl 0FF3                           start 0026                __end_of_CantaIR 1BB4  
              __end_of_HighRSI 1C9A                  LcInit@columns 005C             setCurrentUser@UID0 005B  
           setCurrentUser@UID1 0057             setCurrentUser@UID2 0058             setCurrentUser@UID3 0059  
           setCurrentUser@UID4 005A                   ___param_bank 0000                printLedConfig@i 0051  
              ??_MFRC522_Reset 0056                   ?_initTeclado 0046                    Espera@Timer 0054  
                        ?_main 0046                          STR_10 1FFD                          STR_11 1FC5  
                        STR_12 1FEA                          STR_20 1ED1                          STR_13 1FF9  
                        STR_21 1F13                          STR_14 1FC5                          STR_22 1FED  
                        STR_15 1FC5                          STR_23 1FDA                          STR_16 1FC5  
                        STR_24 1FFB                          STR_25 1FC5                          STR_17 1FC5  
                        STR_18 1FC5                          STR_26 1F8D                          STR_27 1FA1  
                        STR_19 1F34                          _T0CON 0FD5                          _RCREG 0FAE  
                        _RCSTA 0FAB                          _SPBRG 0FAF                          _PORTD 0F83  
                        _TRISA 0F92                          _TRISD 0F95                          _TRISE 0F96  
                        _TXREG 0FAD                          _TXSTA 0FAC           __end_of_getActualUID 17DA  
                        _Filas 0037                motor_RFID@i_581 0061                          _Timer 0044  
              motor_RFID@irqEn 0029                          _index 000D                motor_RFID@unLen 000F  
                 _TI_ResetTics 1BDE                          _tecla 0035                motor_RFID@state 002B  
                        _timer 0045                          _state 0034                setLed@userIndex 0011  
          motor_Read@bit_count 002E                          tablat 0FF5              _MFRC522_Clear_Bit 1C3C  
                        ttemp5 006D                          ttemp6 0070                          ttemp7 0074  
               _saveHourToData 1AAC                          status 0FD8                          wtemp8 006D  
           Terminal_SendChar@c 004A             ?_MFRC522_Clear_Bit 0056               ??_printLedConfig 004E  
             __end_of_GetTecla 127A              _MFRC522_AntennaOn 1CF4        EscriuPrimeraOrdre@ordre 0048  
       ??_Terminal_ReceiveChar 0047                __initialization 16B8                   __end_of_main 1A72  
           ?_MFRC522_AntennaOn 0046            ??_MFRC522_Clear_Bit 0057                 _setCurrentUser 1922  
                  ?_RSI_Timer0 0046                 TI_Init@counter 0047               _initPortsTeclado 1D2A  
                  ?_TI_GetTics 0047                         ??_main 0064            ??_MFRC522_AntennaOn 0058  
                __activetblptr 0002             MFRC522_Rd@ucResult 004F                         _ADCON1 0FC1  
              MFRC522_Wr@value 0051      __end_of_MFRC522_Clear_Bit 1C56                      ??_TI_Init 0047  
       ?_showAllConfigurations 0046         __end_of_saveHourToData 1AE2                      ??_CantaIR 0049  
       Terminal_SendString@str 004B                         i2l2130 1C56                         i2l2132 1C5E  
                       i2l2134 1C60                         i2l2820 1C84                         i2l2822 1C92  
                ??_WaitForBusy 005C                         _TMR0IF 7F92                      ??_HighRSI 0046  
    __end_of_MFRC522_AntennaOn 1D00                         _LcInit 0E0E               __end_of_delay_us 1B4E  
                       _Espera 19F8                         _LowRSI 0018         __end_of_setCurrentUser 196C  
                       _RowAct 001C                         _Timers 00D8             motor_datos@pointer 0014  
         __end_of_MFRC522_Init 18D6               __end_of_initRFID 1D22             motorTerminal@index 0018  
             __end_of_initLeds 1CF4             motorTerminal@state 0019                         clear_0 16FE  
                       clear_1 170A                         _setLed 1A72                   ?_motor_Write 004C  
                       isa$std 0001                   __pdataCOMRAM 0064               __end_of_showMenu 1780  
                 __mediumconst 1EC4                _setLEDIntensity 19B2                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8         motor_Write@state_write 0033  
        __end_of_Terminal_Init 1CE6         motor_RFID@differentUID 0060                ?_saveHourToData 0047  
                 _checkUserUID 0B0A                     __accesstop 0080        __end_of__initialization 1710  
              delay_us@howMany 004A                  ___rparam_used 0001                   ??_MFRC522_Rd 004C  
                 ??_MFRC522_Wr 0052             _MFRC522_AntennaOff 1D00                  setLed@modeLED 0013  
              ?_setCurrentUser 0057                 __pcstackCOMRAM 0046            __end_of_WaitForBusy 1CD6  
                 __pidataBANK0 17DA            ?_MFRC522_AntennaOff 0046           TI_NewTimer@Comptador 0049  
            __end_of_ReadFilas 1D46               MFRC522_Rd@ucAddr 004E              printLedConfig@val 0050  
            ??_MFRC522_Set_Bit 0057             __end_of_MFRC522_Rd 147A             __end_of_MFRC522_Wr 13D8  
                    ?_GetTecla 0046           ??_MFRC522_AntennaOff 0059                   ?_TI_NewTimer 0047  
                   __pbssBANK0 00D8                    setLed@tecla 004A          __end_of_motorTerminal 0E0E  
                      ?_LcInit 005C                  _CantaPartAlta 1634         TI_NewTimer@TimerHandle 0047  
                      ?_Espera 0054                        ?_LowRSI 0046                   _getActualUID 1780  
             MFRC522_Wr@ucAddr 0054            _timer@TAD_LEDS$F989 0043        TI_ResetTics@TimerHandle 0047  
                _writeColumnas 196C                        _BAUDCON 0FB8                        ?_setLed 0046  
      __end_of_setLEDIntensity 19F8                        LcInit@i 005E                      ?_delay_us 0046  
                   ??_GetTecla 0047              _Terminal_SendChar 1C02                        _TI_Init 1B4E  
           ?_Terminal_SendChar 0046       __end_of_initPortsTeclado 1D32                        _CantaIR 1B82  
                    ?_initRFID 0046                      ?_initLeds 0046                        _HighRSI 0008  
                  _WaitForBusy 1CC2                 ?_CantaPartAlta 0046                        _Columns 001D  
         motor_Read@state_read 002F              motor_RFID@TagType 0024            ??_Terminal_SendChar 004A  
                      __Hparam 0000                        __Lparam 0000                      ?_showMenu 0046  
                 ??_RSI_Timer0 0046                 ?_writeColumnas 0046                   ??_TI_GetTics 004B  
            motor_RFID@allZero 0022                        __pcinit 16B8          __end_of_MFRC522_Reset 1BDE  
                      __ramtop 0200              motor_RFID@_status 0025                        __ptext0 1A36  
                      __ptext1 002A                        __ptext2 1922                        __ptext3 127A  
                      __ptext4 0FF6                        __ptext5 10DE                        __ptext6 0C92  
                      __ptext7 171E                        __ptext8 147A                        __ptext9 1AAC  
                ?_motorTeclado 0046                      CantaIR@IR 0049              __end_of_initPorts 1D3A  
    __end_of_Terminal_SendChar 1C20              motor_RFID@waitIRq 0028       motorTerminal@currentUser 0057  
                   ??_delay_us 0047        ??_showAllConfigurations 004D                        _pointer 000B  
                 _MFRC522_Init 1888                 __pintcode_body 1C84           end_of_initialization 1710  
                  motor_RFID@i 0026                    motor_RFID@n 0027                     ??_initRFID 0059  
           __end_of_RSI_Timer0 1C6E                     ??_initLeds 004A                  __Lmediumconst 1EC4  
                      int_func 1C84             __end_of_TI_GetTics 1922             saveHourToData@hour 0047  
              motor_Write@addr 004E              __end_of_printfUID 0FF6                     ??_showMenu 004D  
                   _motor_RFID 002A                        postdec1 0FE5                     _motor_Read 10DE  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
                GetTecla@F2752 1EC5         showAllConfigurations@i 004F         showAllConfigurations@j 004D  
             ?_setLEDIntensity 0047                 ??_motorTeclado 0057                      _PORTCbits 0F82  
          _Terminal_SendString 1AE2          TI_GetTics@TimerHandle 0053               ??_saveHourToData 0048  
                    _TRISBbits 0F93                      _TRISCbits 0F94                      _TRISEbits 0F96  
               setLed@ledIndex 0012                ??_CantaPartAlta 0047               ??_setCurrentUser 005B  
         ?_Terminal_SendString 004B                 __end_of_LcInit 0F06              MFRC522_Rd@Address 004D  
              ??_writeColumnas 0047                 __end_of_Espera 1A36                 __end_of_LowRSI 0026  
 __end_of_Terminal_RXAvailable 1CAE                _MFRC522_Set_Bit 1CAE     __end_of_EscriuPrimeraOrdre 15B0  
                __pidataCOMRAM 1D22                 motor_RFID@flag 0063                      _ColumnAct 001B  
               __end_of_setLed 1AAC            start_initialization 16B8                      _ReadFilas 1D40  
           motor_Read@ucResult 002C   __end_of_Terminal_TXAvailable 1C3C          ??_Terminal_SendString 004D  
                     ??_LcInit 005D             printLedConfig@leds 004D                       ??_Espera 0058  
                     ??_LowRSI 0046                    ?_motor_RFID 0046              motorTerminal@hour 0068  
                  ?_motor_Read 0046                  ??_initTeclado 004A                    __pdataBANK0 0080  
                     ??_setLed 004A                    __pbssCOMRAM 0001                     ?_ReadFilas 0046  
            MFRC522_Wr@Address 0053                  ?_TI_ResetTics 0046               motor_Read@ucAddr 002D  
                     ?_TI_Init 0046                       ?_CantaIR 0046              ?_initPortsTeclado 0046  
               _CantaPartBaixa 15B0                       ?_HighRSI 0046                   ?_WaitForBusy 0046  
         __end_of_motorTeclado 0B0A             ??_initPortsTeclado 0047                 motor_Read@addr 004D  
      __end_of_MFRC522_Set_Bit 1CC2            motor_RFID@fifoLevel 001F            MFRC522_Set_Bit@addr 0057  
          MFRC522_Set_Bit@mask 0056                      __pintcode 0008                  __pmediumconst 1EC4  
   __end_of_InitPortDirections 1D18                CantaPartBaixa@c 0048                    __pintcodelo 0018  
           motor_Write@ucValue 0031                    __smallconst 1EC4            __end_of_initTeclado 1C84  
               ??_TI_ResetTics 0047                      _initPorts 1D32  __end_of_showAllConfigurations 151A  
       __end_of_CantaPartBaixa 1634                  _Terminal_Init 1CD6           _Terminal_RXAvailable 1C9A  
                     _LATAbits 0F89                       _LATBbits 0F8A                       _LATCbits 0F8B  
                     _LATEbits 0F8D                      delay_us@x 004B           motor_Write@bit_count 0030  
              _hashtag_pressed 001A                       _PIR1bits 0F9E                       i2u187_40 1C92  
                     i2u187_41 1C8E          motor_RFID@lastBitsVal 0020                      _printfUID 0F06  
                ??_motor_Write 004D           _Terminal_TXAvailable 1C20                   GetTecla@fila 0056  
               _printLedConfig 127A                     printfUID@i 0055         motor_RFID@tempRegValue 0021  
                     Espera@ms 0056                    ??_ReadFilas 0047                       _GetTecla 11B6  
 __end_of_Terminal_ReceiveChar 1D4A                     ?_initPorts 0046                  motor_RFID@UID 0001  
               ?_Terminal_Init 0046                      copy_data0 16CC                      copy_data1 16EC  
              ?_CantaPartBaixa 0046                       _Columnas 0036          ?_Terminal_RXAvailable 0046  
                ?_checkUserUID 0046          motor_RFID@currentUser 005E                  _motorTerminal 0C92  
             ?_MFRC522_Set_Bit 0056                       __Hrparam 0000          MFRC522_Clear_Bit@addr 0058  
        MFRC522_Clear_Bit@mask 0056                       __Lrparam 0000         __end_of_printLedConfig 1330  
                   ?_printfUID 004D                    _initTeclado 1C6E          ?_Terminal_TXAvailable 0047  
           motor_RFID@checksum 0023                    _currentTime 0064                    _currentUser 003E  
          __end_of_motor_Write 10DE                       _delay_us 1B18                       __ptext10 0F06  
                     __ptext11 1AE2             _EscriuPrimeraOrdre 151A                       __ptext20 19B2  
                     __ptext12 1C02                       __ptext21 0B0A                       __ptext13 1C20  
                     __ptext30 1CF4                       __ptext22 1D3A                       __ptext14 1780  
                     __ptext31 1CAE                       __ptext23 1D40                       __ptext15 1D46  
                     __ptext40 1CD6                       __ptext32 1D00                       __ptext24 11B6  
                     __ptext16 1C9A                       __ptext41 1B4E                       __ptext33 1C3C  
                     __ptext25 1C6E                       __ptext17 08D4                       __ptext50 15B0  
                     __ptext42 0E0E                       __ptext34 1330                       __ptext26 1D2A  
                     __ptext18 196C                       __ptext51 1634                       __ptext43 1CC2  
                     __ptext35 13D8                       __ptext27 1D18                       __ptext19 1A72  
                     __ptext44 19F8                       __ptext36 1B18                       __ptext28 1888  
                     __ptext45 1BDE                       __ptext37 1D0C                       __ptext29 1BB4  
                     __ptext54 1C56                       __ptext46 18D6                       __ptext38 1D32  
                     __ptext47 1832                       __ptext39 1CE6                       __ptext48 151A  
                     __ptext49 1B82                  ??_TI_NewTimer 0048                 CantaPartAlta@c 0048  
            motor_Write@ucAddr 0032                 ??_checkUserUID 0047                       _initRFID 1D18  
                     _initLeds 1CE6            ?_EscriuPrimeraOrdre 0046                 ?_motorTerminal 0046  
        __end_of_CantaPartAlta 16B8                       _new_user 0016                     _MFRC522_Rd 13D8  
                   _MFRC522_Wr 1330                  ?_getActualUID 0047                   ??_motor_RFID 005C  
                     isa$xinst 0000                       _showMenu 171E                   ??_motor_Read 004C  
         __end_of_TI_ResetTics 1C02                       int$flags 006C          __end_of_writeColumnas 19B2  
           motor_RFID@substate 002A                ?_printLedConfig 004D                       _userUIDs 0080  
                _printfUID$857 004F                  _printfUID$859 0051           ??_EscriuPrimeraOrdre 0047  
                   LcInit@rows 005D                  _MFRC522_Reset 1BB4                   _motorTeclado 08D4  
                   _INTCONbits 0FF2                ??_Terminal_Init 0047      TI_GetTics@CopiaTicsActual 004F  
            _new_configuration 0017                    ??_initPorts 0047         ??_Terminal_RXAvailable 0047  
               _configurations 00C0              _hashtag_pressed3s 1D3A    __end_of_Terminal_SendString 1B18  
           __end_of_motor_RFID 08D4                       intlevel1 0000                       intlevel2 0000  
           __end_of_motor_Read 11B6             ?_hashtag_pressed3s 0046               motor_Write@value 004C  
          __end_of_TI_NewTimer 1888                 ??_getActualUID 0049            ??_hashtag_pressed3s 0047  
       ??_Terminal_TXAvailable 0049           _Terminal_ReceiveChar 1D46                    ??_printfUID 004E  
               ?_MFRC522_Reset 0046                    _motor_Write 0FF6         motor_RFID@backBitsCalc 005F  
           _printLedConfig$867 004E      __end_of_hashtag_pressed3s 1D40             _InitPortDirections 1D0C  
   __end_of_MFRC522_AntennaOff 1D0C                  ?_MFRC522_Init 0046                ??_motorTerminal 0057  
          ?_InitPortDirections 0046        setLEDIntensity@ledIndex 0047           printfUID@currentUser 004D  
            ??_setLEDIntensity 0049                GetTecla@columna 0055                    ?_MFRC522_Rd 0046  
                  ?_MFRC522_Wr 0051                 GetTecla@keymap 0049  

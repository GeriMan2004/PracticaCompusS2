

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 06 18:56:17 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 05/12/2024 GMT
    63                           ; 
    64                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4321 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000FE0                     bsr             equ	4064
    97   000FE9                     fsr0            equ	4073
    98   000FEA                     fsr0h           equ	4074
    99   000FE9                     fsr0l           equ	4073
   100   000FE1                     fsr1            equ	4065
   101   000FE2                     fsr1h           equ	4066
   102   000FE1                     fsr1l           equ	4065
   103   000FD9                     fsr2            equ	4057
   104   000FDA                     fsr2h           equ	4058
   105   000FD9                     fsr2l           equ	4057
   106   000FEF                     indf0           equ	4079
   107   000FE7                     indf1           equ	4071
   108   000FDF                     indf2           equ	4063
   109   000FF2                     intcon          equ	4082
   110   000000                     nvmcon          equ	0
   111   000FF9                     pcl             equ	4089
   112   000FFA                     pclath          equ	4090
   113   000FFB                     pclatu          equ	4091
   114   000FEB                     plusw0          equ	4075
   115   000FE3                     plusw1          equ	4067
   116   000FDB                     plusw2          equ	4059
   117   000FED                     postdec0        equ	4077
   118   000FE5                     postdec1        equ	4069
   119   000FDD                     postdec2        equ	4061
   120   000FEE                     postinc0        equ	4078
   121   000FE6                     postinc1        equ	4070
   122   000FDE                     postinc2        equ	4062
   123   000FEC                     preinc0         equ	4076
   124   000FE4                     preinc1         equ	4068
   125   000FDC                     preinc2         equ	4060
   126   000FF3                     prod            equ	4083
   127   000FF4                     prodh           equ	4084
   128   000FF3                     prodl           equ	4083
   129   000FD8                     status          equ	4056
   130   000FF5                     tablat          equ	4085
   131   000FF6                     tblptr          equ	4086
   132   000FF7                     tblptrh         equ	4087
   133   000FF6                     tblptrl         equ	4086
   134   000FF8                     tblptru         equ	4088
   135   000FFD                     tosl            equ	4093
   136   000FE8                     wreg            equ	4072
   137   000F80                     PORTA           equ	3968	;# 
   138   000F81                     PORTB           equ	3969	;# 
   139   000F82                     PORTC           equ	3970	;# 
   140   000F83                     PORTD           equ	3971	;# 
   141   000F84                     PORTE           equ	3972	;# 
   142   000F89                     LATA            equ	3977	;# 
   143   000F8A                     LATB            equ	3978	;# 
   144   000F8B                     LATC            equ	3979	;# 
   145   000F8C                     LATD            equ	3980	;# 
   146   000F8D                     LATE            equ	3981	;# 
   147   000F92                     TRISA           equ	3986	;# 
   148   000F92                     DDRA            equ	3986	;# 
   149   000F93                     TRISB           equ	3987	;# 
   150   000F93                     DDRB            equ	3987	;# 
   151   000F94                     TRISC           equ	3988	;# 
   152   000F94                     DDRC            equ	3988	;# 
   153   000F95                     TRISD           equ	3989	;# 
   154   000F95                     DDRD            equ	3989	;# 
   155   000F96                     TRISE           equ	3990	;# 
   156   000F96                     DDRE            equ	3990	;# 
   157   000F9B                     OSCTUNE         equ	3995	;# 
   158   000F9D                     PIE1            equ	3997	;# 
   159   000F9E                     PIR1            equ	3998	;# 
   160   000F9F                     IPR1            equ	3999	;# 
   161   000FA0                     PIE2            equ	4000	;# 
   162   000FA1                     PIR2            equ	4001	;# 
   163   000FA2                     IPR2            equ	4002	;# 
   164   000FA6                     EECON1          equ	4006	;# 
   165   000FA7                     EECON2          equ	4007	;# 
   166   000FA8                     EEDATA          equ	4008	;# 
   167   000FA9                     EEADR           equ	4009	;# 
   168   000FAB                     RCSTA           equ	4011	;# 
   169   000FAB                     RCSTA1          equ	4011	;# 
   170   000FAC                     TXSTA           equ	4012	;# 
   171   000FAC                     TXSTA1          equ	4012	;# 
   172   000FAD                     TXREG           equ	4013	;# 
   173   000FAD                     TXREG1          equ	4013	;# 
   174   000FAE                     RCREG           equ	4014	;# 
   175   000FAE                     RCREG1          equ	4014	;# 
   176   000FAF                     SPBRG           equ	4015	;# 
   177   000FAF                     SPBRG1          equ	4015	;# 
   178   000FB0                     SPBRGH          equ	4016	;# 
   179   000FB1                     T3CON           equ	4017	;# 
   180   000FB2                     TMR3            equ	4018	;# 
   181   000FB2                     TMR3L           equ	4018	;# 
   182   000FB3                     TMR3H           equ	4019	;# 
   183   000FB4                     CMCON           equ	4020	;# 
   184   000FB5                     CVRCON          equ	4021	;# 
   185   000FB6                     ECCP1AS         equ	4022	;# 
   186   000FB7                     ECCP1DEL        equ	4023	;# 
   187   000FB7                     PWM1CON         equ	4023	;# 
   188   000FB8                     BAUDCON         equ	4024	;# 
   189   000FB8                     BAUDCTL         equ	4024	;# 
   190   000FBA                     CCP2CON         equ	4026	;# 
   191   000FBB                     CCPR2           equ	4027	;# 
   192   000FBB                     CCPR2L          equ	4027	;# 
   193   000FBC                     CCPR2H          equ	4028	;# 
   194   000FBD                     CCP1CON         equ	4029	;# 
   195   000FBD                     ECCP1CON        equ	4029	;# 
   196   000FBE                     CCPR1           equ	4030	;# 
   197   000FBE                     CCPR1L          equ	4030	;# 
   198   000FBF                     CCPR1H          equ	4031	;# 
   199   000FC0                     ADCON2          equ	4032	;# 
   200   000FC1                     ADCON1          equ	4033	;# 
   201   000FC2                     ADCON0          equ	4034	;# 
   202   000FC3                     ADRES           equ	4035	;# 
   203   000FC3                     ADRESL          equ	4035	;# 
   204   000FC4                     ADRESH          equ	4036	;# 
   205   000FC5                     SSPCON2         equ	4037	;# 
   206   000FC6                     SSPCON1         equ	4038	;# 
   207   000FC7                     SSPSTAT         equ	4039	;# 
   208   000FC8                     SSPADD          equ	4040	;# 
   209   000FC9                     SSPBUF          equ	4041	;# 
   210   000FCA                     T2CON           equ	4042	;# 
   211   000FCB                     PR2             equ	4043	;# 
   212   000FCB                     MEMCON          equ	4043	;# 
   213   000FCC                     TMR2            equ	4044	;# 
   214   000FCD                     T1CON           equ	4045	;# 
   215   000FCE                     TMR1            equ	4046	;# 
   216   000FCE                     TMR1L           equ	4046	;# 
   217   000FCF                     TMR1H           equ	4047	;# 
   218   000FD0                     RCON            equ	4048	;# 
   219   000FD1                     WDTCON          equ	4049	;# 
   220   000FD2                     HLVDCON         equ	4050	;# 
   221   000FD2                     LVDCON          equ	4050	;# 
   222   000FD3                     OSCCON          equ	4051	;# 
   223   000FD5                     T0CON           equ	4053	;# 
   224   000FD6                     TMR0            equ	4054	;# 
   225   000FD6                     TMR0L           equ	4054	;# 
   226   000FD7                     TMR0H           equ	4055	;# 
   227   000FD8                     STATUS          equ	4056	;# 
   228   000FD9                     FSR2            equ	4057	;# 
   229   000FD9                     FSR2L           equ	4057	;# 
   230   000FDA                     FSR2H           equ	4058	;# 
   231   000FDB                     PLUSW2          equ	4059	;# 
   232   000FDC                     PREINC2         equ	4060	;# 
   233   000FDD                     POSTDEC2        equ	4061	;# 
   234   000FDE                     POSTINC2        equ	4062	;# 
   235   000FDF                     INDF2           equ	4063	;# 
   236   000FE0                     BSR             equ	4064	;# 
   237   000FE1                     FSR1            equ	4065	;# 
   238   000FE1                     FSR1L           equ	4065	;# 
   239   000FE2                     FSR1H           equ	4066	;# 
   240   000FE3                     PLUSW1          equ	4067	;# 
   241   000FE4                     PREINC1         equ	4068	;# 
   242   000FE5                     POSTDEC1        equ	4069	;# 
   243   000FE6                     POSTINC1        equ	4070	;# 
   244   000FE7                     INDF1           equ	4071	;# 
   245   000FE8                     WREG            equ	4072	;# 
   246   000FE9                     FSR0            equ	4073	;# 
   247   000FE9                     FSR0L           equ	4073	;# 
   248   000FEA                     FSR0H           equ	4074	;# 
   249   000FEB                     PLUSW0          equ	4075	;# 
   250   000FEC                     PREINC0         equ	4076	;# 
   251   000FED                     POSTDEC0        equ	4077	;# 
   252   000FEE                     POSTINC0        equ	4078	;# 
   253   000FEF                     INDF0           equ	4079	;# 
   254   000FF0                     INTCON3         equ	4080	;# 
   255   000FF1                     INTCON2         equ	4081	;# 
   256   000FF2                     INTCON          equ	4082	;# 
   257   000FF3                     PROD            equ	4083	;# 
   258   000FF3                     PRODL           equ	4083	;# 
   259   000FF4                     PRODH           equ	4084	;# 
   260   000FF5                     TABLAT          equ	4085	;# 
   261   000FF6                     TBLPTR          equ	4086	;# 
   262   000FF6                     TBLPTRL         equ	4086	;# 
   263   000FF7                     TBLPTRH         equ	4087	;# 
   264   000FF8                     TBLPTRU         equ	4088	;# 
   265   000FF9                     PCLAT           equ	4089	;# 
   266   000FF9                     PC              equ	4089	;# 
   267   000FF9                     PCL             equ	4089	;# 
   268   000FFA                     PCLATH          equ	4090	;# 
   269   000FFB                     PCLATU          equ	4091	;# 
   270   000FFC                     STKPTR          equ	4092	;# 
   271   000FFD                     TOS             equ	4093	;# 
   272   000FFD                     TOSL            equ	4093	;# 
   273   000FFE                     TOSH            equ	4094	;# 
   274   000FFF                     TOSU            equ	4095	;# 
   275   000F80                     PORTA           equ	3968	;# 
   276   000F81                     PORTB           equ	3969	;# 
   277   000F82                     PORTC           equ	3970	;# 
   278   000F83                     PORTD           equ	3971	;# 
   279   000F84                     PORTE           equ	3972	;# 
   280   000F89                     LATA            equ	3977	;# 
   281   000F8A                     LATB            equ	3978	;# 
   282   000F8B                     LATC            equ	3979	;# 
   283   000F8C                     LATD            equ	3980	;# 
   284   000F8D                     LATE            equ	3981	;# 
   285   000F92                     TRISA           equ	3986	;# 
   286   000F92                     DDRA            equ	3986	;# 
   287   000F93                     TRISB           equ	3987	;# 
   288   000F93                     DDRB            equ	3987	;# 
   289   000F94                     TRISC           equ	3988	;# 
   290   000F94                     DDRC            equ	3988	;# 
   291   000F95                     TRISD           equ	3989	;# 
   292   000F95                     DDRD            equ	3989	;# 
   293   000F96                     TRISE           equ	3990	;# 
   294   000F96                     DDRE            equ	3990	;# 
   295   000F9B                     OSCTUNE         equ	3995	;# 
   296   000F9D                     PIE1            equ	3997	;# 
   297   000F9E                     PIR1            equ	3998	;# 
   298   000F9F                     IPR1            equ	3999	;# 
   299   000FA0                     PIE2            equ	4000	;# 
   300   000FA1                     PIR2            equ	4001	;# 
   301   000FA2                     IPR2            equ	4002	;# 
   302   000FA6                     EECON1          equ	4006	;# 
   303   000FA7                     EECON2          equ	4007	;# 
   304   000FA8                     EEDATA          equ	4008	;# 
   305   000FA9                     EEADR           equ	4009	;# 
   306   000FAB                     RCSTA           equ	4011	;# 
   307   000FAB                     RCSTA1          equ	4011	;# 
   308   000FAC                     TXSTA           equ	4012	;# 
   309   000FAC                     TXSTA1          equ	4012	;# 
   310   000FAD                     TXREG           equ	4013	;# 
   311   000FAD                     TXREG1          equ	4013	;# 
   312   000FAE                     RCREG           equ	4014	;# 
   313   000FAE                     RCREG1          equ	4014	;# 
   314   000FAF                     SPBRG           equ	4015	;# 
   315   000FAF                     SPBRG1          equ	4015	;# 
   316   000FB0                     SPBRGH          equ	4016	;# 
   317   000FB1                     T3CON           equ	4017	;# 
   318   000FB2                     TMR3            equ	4018	;# 
   319   000FB2                     TMR3L           equ	4018	;# 
   320   000FB3                     TMR3H           equ	4019	;# 
   321   000FB4                     CMCON           equ	4020	;# 
   322   000FB5                     CVRCON          equ	4021	;# 
   323   000FB6                     ECCP1AS         equ	4022	;# 
   324   000FB7                     ECCP1DEL        equ	4023	;# 
   325   000FB7                     PWM1CON         equ	4023	;# 
   326   000FB8                     BAUDCON         equ	4024	;# 
   327   000FB8                     BAUDCTL         equ	4024	;# 
   328   000FBA                     CCP2CON         equ	4026	;# 
   329   000FBB                     CCPR2           equ	4027	;# 
   330   000FBB                     CCPR2L          equ	4027	;# 
   331   000FBC                     CCPR2H          equ	4028	;# 
   332   000FBD                     CCP1CON         equ	4029	;# 
   333   000FBD                     ECCP1CON        equ	4029	;# 
   334   000FBE                     CCPR1           equ	4030	;# 
   335   000FBE                     CCPR1L          equ	4030	;# 
   336   000FBF                     CCPR1H          equ	4031	;# 
   337   000FC0                     ADCON2          equ	4032	;# 
   338   000FC1                     ADCON1          equ	4033	;# 
   339   000FC2                     ADCON0          equ	4034	;# 
   340   000FC3                     ADRES           equ	4035	;# 
   341   000FC3                     ADRESL          equ	4035	;# 
   342   000FC4                     ADRESH          equ	4036	;# 
   343   000FC5                     SSPCON2         equ	4037	;# 
   344   000FC6                     SSPCON1         equ	4038	;# 
   345   000FC7                     SSPSTAT         equ	4039	;# 
   346   000FC8                     SSPADD          equ	4040	;# 
   347   000FC9                     SSPBUF          equ	4041	;# 
   348   000FCA                     T2CON           equ	4042	;# 
   349   000FCB                     PR2             equ	4043	;# 
   350   000FCB                     MEMCON          equ	4043	;# 
   351   000FCC                     TMR2            equ	4044	;# 
   352   000FCD                     T1CON           equ	4045	;# 
   353   000FCE                     TMR1            equ	4046	;# 
   354   000FCE                     TMR1L           equ	4046	;# 
   355   000FCF                     TMR1H           equ	4047	;# 
   356   000FD0                     RCON            equ	4048	;# 
   357   000FD1                     WDTCON          equ	4049	;# 
   358   000FD2                     HLVDCON         equ	4050	;# 
   359   000FD2                     LVDCON          equ	4050	;# 
   360   000FD3                     OSCCON          equ	4051	;# 
   361   000FD5                     T0CON           equ	4053	;# 
   362   000FD6                     TMR0            equ	4054	;# 
   363   000FD6                     TMR0L           equ	4054	;# 
   364   000FD7                     TMR0H           equ	4055	;# 
   365   000FD8                     STATUS          equ	4056	;# 
   366   000FD9                     FSR2            equ	4057	;# 
   367   000FD9                     FSR2L           equ	4057	;# 
   368   000FDA                     FSR2H           equ	4058	;# 
   369   000FDB                     PLUSW2          equ	4059	;# 
   370   000FDC                     PREINC2         equ	4060	;# 
   371   000FDD                     POSTDEC2        equ	4061	;# 
   372   000FDE                     POSTINC2        equ	4062	;# 
   373   000FDF                     INDF2           equ	4063	;# 
   374   000FE0                     BSR             equ	4064	;# 
   375   000FE1                     FSR1            equ	4065	;# 
   376   000FE1                     FSR1L           equ	4065	;# 
   377   000FE2                     FSR1H           equ	4066	;# 
   378   000FE3                     PLUSW1          equ	4067	;# 
   379   000FE4                     PREINC1         equ	4068	;# 
   380   000FE5                     POSTDEC1        equ	4069	;# 
   381   000FE6                     POSTINC1        equ	4070	;# 
   382   000FE7                     INDF1           equ	4071	;# 
   383   000FE8                     WREG            equ	4072	;# 
   384   000FE9                     FSR0            equ	4073	;# 
   385   000FE9                     FSR0L           equ	4073	;# 
   386   000FEA                     FSR0H           equ	4074	;# 
   387   000FEB                     PLUSW0          equ	4075	;# 
   388   000FEC                     PREINC0         equ	4076	;# 
   389   000FED                     POSTDEC0        equ	4077	;# 
   390   000FEE                     POSTINC0        equ	4078	;# 
   391   000FEF                     INDF0           equ	4079	;# 
   392   000FF0                     INTCON3         equ	4080	;# 
   393   000FF1                     INTCON2         equ	4081	;# 
   394   000FF2                     INTCON          equ	4082	;# 
   395   000FF3                     PROD            equ	4083	;# 
   396   000FF3                     PRODL           equ	4083	;# 
   397   000FF4                     PRODH           equ	4084	;# 
   398   000FF5                     TABLAT          equ	4085	;# 
   399   000FF6                     TBLPTR          equ	4086	;# 
   400   000FF6                     TBLPTRL         equ	4086	;# 
   401   000FF7                     TBLPTRH         equ	4087	;# 
   402   000FF8                     TBLPTRU         equ	4088	;# 
   403   000FF9                     PCLAT           equ	4089	;# 
   404   000FF9                     PC              equ	4089	;# 
   405   000FF9                     PCL             equ	4089	;# 
   406   000FFA                     PCLATH          equ	4090	;# 
   407   000FFB                     PCLATU          equ	4091	;# 
   408   000FFC                     STKPTR          equ	4092	;# 
   409   000FFD                     TOS             equ	4093	;# 
   410   000FFD                     TOSL            equ	4093	;# 
   411   000FFE                     TOSH            equ	4094	;# 
   412   000FFF                     TOSU            equ	4095	;# 
   413   000F80                     PORTA           equ	3968	;# 
   414   000F81                     PORTB           equ	3969	;# 
   415   000F82                     PORTC           equ	3970	;# 
   416   000F83                     PORTD           equ	3971	;# 
   417   000F84                     PORTE           equ	3972	;# 
   418   000F89                     LATA            equ	3977	;# 
   419   000F8A                     LATB            equ	3978	;# 
   420   000F8B                     LATC            equ	3979	;# 
   421   000F8C                     LATD            equ	3980	;# 
   422   000F8D                     LATE            equ	3981	;# 
   423   000F92                     TRISA           equ	3986	;# 
   424   000F92                     DDRA            equ	3986	;# 
   425   000F93                     TRISB           equ	3987	;# 
   426   000F93                     DDRB            equ	3987	;# 
   427   000F94                     TRISC           equ	3988	;# 
   428   000F94                     DDRC            equ	3988	;# 
   429   000F95                     TRISD           equ	3989	;# 
   430   000F95                     DDRD            equ	3989	;# 
   431   000F96                     TRISE           equ	3990	;# 
   432   000F96                     DDRE            equ	3990	;# 
   433   000F9B                     OSCTUNE         equ	3995	;# 
   434   000F9D                     PIE1            equ	3997	;# 
   435   000F9E                     PIR1            equ	3998	;# 
   436   000F9F                     IPR1            equ	3999	;# 
   437   000FA0                     PIE2            equ	4000	;# 
   438   000FA1                     PIR2            equ	4001	;# 
   439   000FA2                     IPR2            equ	4002	;# 
   440   000FA6                     EECON1          equ	4006	;# 
   441   000FA7                     EECON2          equ	4007	;# 
   442   000FA8                     EEDATA          equ	4008	;# 
   443   000FA9                     EEADR           equ	4009	;# 
   444   000FAB                     RCSTA           equ	4011	;# 
   445   000FAB                     RCSTA1          equ	4011	;# 
   446   000FAC                     TXSTA           equ	4012	;# 
   447   000FAC                     TXSTA1          equ	4012	;# 
   448   000FAD                     TXREG           equ	4013	;# 
   449   000FAD                     TXREG1          equ	4013	;# 
   450   000FAE                     RCREG           equ	4014	;# 
   451   000FAE                     RCREG1          equ	4014	;# 
   452   000FAF                     SPBRG           equ	4015	;# 
   453   000FAF                     SPBRG1          equ	4015	;# 
   454   000FB0                     SPBRGH          equ	4016	;# 
   455   000FB1                     T3CON           equ	4017	;# 
   456   000FB2                     TMR3            equ	4018	;# 
   457   000FB2                     TMR3L           equ	4018	;# 
   458   000FB3                     TMR3H           equ	4019	;# 
   459   000FB4                     CMCON           equ	4020	;# 
   460   000FB5                     CVRCON          equ	4021	;# 
   461   000FB6                     ECCP1AS         equ	4022	;# 
   462   000FB7                     ECCP1DEL        equ	4023	;# 
   463   000FB7                     PWM1CON         equ	4023	;# 
   464   000FB8                     BAUDCON         equ	4024	;# 
   465   000FB8                     BAUDCTL         equ	4024	;# 
   466   000FBA                     CCP2CON         equ	4026	;# 
   467   000FBB                     CCPR2           equ	4027	;# 
   468   000FBB                     CCPR2L          equ	4027	;# 
   469   000FBC                     CCPR2H          equ	4028	;# 
   470   000FBD                     CCP1CON         equ	4029	;# 
   471   000FBD                     ECCP1CON        equ	4029	;# 
   472   000FBE                     CCPR1           equ	4030	;# 
   473   000FBE                     CCPR1L          equ	4030	;# 
   474   000FBF                     CCPR1H          equ	4031	;# 
   475   000FC0                     ADCON2          equ	4032	;# 
   476   000FC1                     ADCON1          equ	4033	;# 
   477   000FC2                     ADCON0          equ	4034	;# 
   478   000FC3                     ADRES           equ	4035	;# 
   479   000FC3                     ADRESL          equ	4035	;# 
   480   000FC4                     ADRESH          equ	4036	;# 
   481   000FC5                     SSPCON2         equ	4037	;# 
   482   000FC6                     SSPCON1         equ	4038	;# 
   483   000FC7                     SSPSTAT         equ	4039	;# 
   484   000FC8                     SSPADD          equ	4040	;# 
   485   000FC9                     SSPBUF          equ	4041	;# 
   486   000FCA                     T2CON           equ	4042	;# 
   487   000FCB                     PR2             equ	4043	;# 
   488   000FCB                     MEMCON          equ	4043	;# 
   489   000FCC                     TMR2            equ	4044	;# 
   490   000FCD                     T1CON           equ	4045	;# 
   491   000FCE                     TMR1            equ	4046	;# 
   492   000FCE                     TMR1L           equ	4046	;# 
   493   000FCF                     TMR1H           equ	4047	;# 
   494   000FD0                     RCON            equ	4048	;# 
   495   000FD1                     WDTCON          equ	4049	;# 
   496   000FD2                     HLVDCON         equ	4050	;# 
   497   000FD2                     LVDCON          equ	4050	;# 
   498   000FD3                     OSCCON          equ	4051	;# 
   499   000FD5                     T0CON           equ	4053	;# 
   500   000FD6                     TMR0            equ	4054	;# 
   501   000FD6                     TMR0L           equ	4054	;# 
   502   000FD7                     TMR0H           equ	4055	;# 
   503   000FD8                     STATUS          equ	4056	;# 
   504   000FD9                     FSR2            equ	4057	;# 
   505   000FD9                     FSR2L           equ	4057	;# 
   506   000FDA                     FSR2H           equ	4058	;# 
   507   000FDB                     PLUSW2          equ	4059	;# 
   508   000FDC                     PREINC2         equ	4060	;# 
   509   000FDD                     POSTDEC2        equ	4061	;# 
   510   000FDE                     POSTINC2        equ	4062	;# 
   511   000FDF                     INDF2           equ	4063	;# 
   512   000FE0                     BSR             equ	4064	;# 
   513   000FE1                     FSR1            equ	4065	;# 
   514   000FE1                     FSR1L           equ	4065	;# 
   515   000FE2                     FSR1H           equ	4066	;# 
   516   000FE3                     PLUSW1          equ	4067	;# 
   517   000FE4                     PREINC1         equ	4068	;# 
   518   000FE5                     POSTDEC1        equ	4069	;# 
   519   000FE6                     POSTINC1        equ	4070	;# 
   520   000FE7                     INDF1           equ	4071	;# 
   521   000FE8                     WREG            equ	4072	;# 
   522   000FE9                     FSR0            equ	4073	;# 
   523   000FE9                     FSR0L           equ	4073	;# 
   524   000FEA                     FSR0H           equ	4074	;# 
   525   000FEB                     PLUSW0          equ	4075	;# 
   526   000FEC                     PREINC0         equ	4076	;# 
   527   000FED                     POSTDEC0        equ	4077	;# 
   528   000FEE                     POSTINC0        equ	4078	;# 
   529   000FEF                     INDF0           equ	4079	;# 
   530   000FF0                     INTCON3         equ	4080	;# 
   531   000FF1                     INTCON2         equ	4081	;# 
   532   000FF2                     INTCON          equ	4082	;# 
   533   000FF3                     PROD            equ	4083	;# 
   534   000FF3                     PRODL           equ	4083	;# 
   535   000FF4                     PRODH           equ	4084	;# 
   536   000FF5                     TABLAT          equ	4085	;# 
   537   000FF6                     TBLPTR          equ	4086	;# 
   538   000FF6                     TBLPTRL         equ	4086	;# 
   539   000FF7                     TBLPTRH         equ	4087	;# 
   540   000FF8                     TBLPTRU         equ	4088	;# 
   541   000FF9                     PCLAT           equ	4089	;# 
   542   000FF9                     PC              equ	4089	;# 
   543   000FF9                     PCL             equ	4089	;# 
   544   000FFA                     PCLATH          equ	4090	;# 
   545   000FFB                     PCLATU          equ	4091	;# 
   546   000FFC                     STKPTR          equ	4092	;# 
   547   000FFD                     TOS             equ	4093	;# 
   548   000FFD                     TOSL            equ	4093	;# 
   549   000FFE                     TOSH            equ	4094	;# 
   550   000FFF                     TOSU            equ	4095	;# 
   551   000F80                     PORTA           equ	3968	;# 
   552   000F81                     PORTB           equ	3969	;# 
   553   000F82                     PORTC           equ	3970	;# 
   554   000F83                     PORTD           equ	3971	;# 
   555   000F84                     PORTE           equ	3972	;# 
   556   000F89                     LATA            equ	3977	;# 
   557   000F8A                     LATB            equ	3978	;# 
   558   000F8B                     LATC            equ	3979	;# 
   559   000F8C                     LATD            equ	3980	;# 
   560   000F8D                     LATE            equ	3981	;# 
   561   000F92                     TRISA           equ	3986	;# 
   562   000F92                     DDRA            equ	3986	;# 
   563   000F93                     TRISB           equ	3987	;# 
   564   000F93                     DDRB            equ	3987	;# 
   565   000F94                     TRISC           equ	3988	;# 
   566   000F94                     DDRC            equ	3988	;# 
   567   000F95                     TRISD           equ	3989	;# 
   568   000F95                     DDRD            equ	3989	;# 
   569   000F96                     TRISE           equ	3990	;# 
   570   000F96                     DDRE            equ	3990	;# 
   571   000F9B                     OSCTUNE         equ	3995	;# 
   572   000F9D                     PIE1            equ	3997	;# 
   573   000F9E                     PIR1            equ	3998	;# 
   574   000F9F                     IPR1            equ	3999	;# 
   575   000FA0                     PIE2            equ	4000	;# 
   576   000FA1                     PIR2            equ	4001	;# 
   577   000FA2                     IPR2            equ	4002	;# 
   578   000FA6                     EECON1          equ	4006	;# 
   579   000FA7                     EECON2          equ	4007	;# 
   580   000FA8                     EEDATA          equ	4008	;# 
   581   000FA9                     EEADR           equ	4009	;# 
   582   000FAB                     RCSTA           equ	4011	;# 
   583   000FAB                     RCSTA1          equ	4011	;# 
   584   000FAC                     TXSTA           equ	4012	;# 
   585   000FAC                     TXSTA1          equ	4012	;# 
   586   000FAD                     TXREG           equ	4013	;# 
   587   000FAD                     TXREG1          equ	4013	;# 
   588   000FAE                     RCREG           equ	4014	;# 
   589   000FAE                     RCREG1          equ	4014	;# 
   590   000FAF                     SPBRG           equ	4015	;# 
   591   000FAF                     SPBRG1          equ	4015	;# 
   592   000FB0                     SPBRGH          equ	4016	;# 
   593   000FB1                     T3CON           equ	4017	;# 
   594   000FB2                     TMR3            equ	4018	;# 
   595   000FB2                     TMR3L           equ	4018	;# 
   596   000FB3                     TMR3H           equ	4019	;# 
   597   000FB4                     CMCON           equ	4020	;# 
   598   000FB5                     CVRCON          equ	4021	;# 
   599   000FB6                     ECCP1AS         equ	4022	;# 
   600   000FB7                     ECCP1DEL        equ	4023	;# 
   601   000FB7                     PWM1CON         equ	4023	;# 
   602   000FB8                     BAUDCON         equ	4024	;# 
   603   000FB8                     BAUDCTL         equ	4024	;# 
   604   000FBA                     CCP2CON         equ	4026	;# 
   605   000FBB                     CCPR2           equ	4027	;# 
   606   000FBB                     CCPR2L          equ	4027	;# 
   607   000FBC                     CCPR2H          equ	4028	;# 
   608   000FBD                     CCP1CON         equ	4029	;# 
   609   000FBD                     ECCP1CON        equ	4029	;# 
   610   000FBE                     CCPR1           equ	4030	;# 
   611   000FBE                     CCPR1L          equ	4030	;# 
   612   000FBF                     CCPR1H          equ	4031	;# 
   613   000FC0                     ADCON2          equ	4032	;# 
   614   000FC1                     ADCON1          equ	4033	;# 
   615   000FC2                     ADCON0          equ	4034	;# 
   616   000FC3                     ADRES           equ	4035	;# 
   617   000FC3                     ADRESL          equ	4035	;# 
   618   000FC4                     ADRESH          equ	4036	;# 
   619   000FC5                     SSPCON2         equ	4037	;# 
   620   000FC6                     SSPCON1         equ	4038	;# 
   621   000FC7                     SSPSTAT         equ	4039	;# 
   622   000FC8                     SSPADD          equ	4040	;# 
   623   000FC9                     SSPBUF          equ	4041	;# 
   624   000FCA                     T2CON           equ	4042	;# 
   625   000FCB                     PR2             equ	4043	;# 
   626   000FCB                     MEMCON          equ	4043	;# 
   627   000FCC                     TMR2            equ	4044	;# 
   628   000FCD                     T1CON           equ	4045	;# 
   629   000FCE                     TMR1            equ	4046	;# 
   630   000FCE                     TMR1L           equ	4046	;# 
   631   000FCF                     TMR1H           equ	4047	;# 
   632   000FD0                     RCON            equ	4048	;# 
   633   000FD1                     WDTCON          equ	4049	;# 
   634   000FD2                     HLVDCON         equ	4050	;# 
   635   000FD2                     LVDCON          equ	4050	;# 
   636   000FD3                     OSCCON          equ	4051	;# 
   637   000FD5                     T0CON           equ	4053	;# 
   638   000FD6                     TMR0            equ	4054	;# 
   639   000FD6                     TMR0L           equ	4054	;# 
   640   000FD7                     TMR0H           equ	4055	;# 
   641   000FD8                     STATUS          equ	4056	;# 
   642   000FD9                     FSR2            equ	4057	;# 
   643   000FD9                     FSR2L           equ	4057	;# 
   644   000FDA                     FSR2H           equ	4058	;# 
   645   000FDB                     PLUSW2          equ	4059	;# 
   646   000FDC                     PREINC2         equ	4060	;# 
   647   000FDD                     POSTDEC2        equ	4061	;# 
   648   000FDE                     POSTINC2        equ	4062	;# 
   649   000FDF                     INDF2           equ	4063	;# 
   650   000FE0                     BSR             equ	4064	;# 
   651   000FE1                     FSR1            equ	4065	;# 
   652   000FE1                     FSR1L           equ	4065	;# 
   653   000FE2                     FSR1H           equ	4066	;# 
   654   000FE3                     PLUSW1          equ	4067	;# 
   655   000FE4                     PREINC1         equ	4068	;# 
   656   000FE5                     POSTDEC1        equ	4069	;# 
   657   000FE6                     POSTINC1        equ	4070	;# 
   658   000FE7                     INDF1           equ	4071	;# 
   659   000FE8                     WREG            equ	4072	;# 
   660   000FE9                     FSR0            equ	4073	;# 
   661   000FE9                     FSR0L           equ	4073	;# 
   662   000FEA                     FSR0H           equ	4074	;# 
   663   000FEB                     PLUSW0          equ	4075	;# 
   664   000FEC                     PREINC0         equ	4076	;# 
   665   000FED                     POSTDEC0        equ	4077	;# 
   666   000FEE                     POSTINC0        equ	4078	;# 
   667   000FEF                     INDF0           equ	4079	;# 
   668   000FF0                     INTCON3         equ	4080	;# 
   669   000FF1                     INTCON2         equ	4081	;# 
   670   000FF2                     INTCON          equ	4082	;# 
   671   000FF3                     PROD            equ	4083	;# 
   672   000FF3                     PRODL           equ	4083	;# 
   673   000FF4                     PRODH           equ	4084	;# 
   674   000FF5                     TABLAT          equ	4085	;# 
   675   000FF6                     TBLPTR          equ	4086	;# 
   676   000FF6                     TBLPTRL         equ	4086	;# 
   677   000FF7                     TBLPTRH         equ	4087	;# 
   678   000FF8                     TBLPTRU         equ	4088	;# 
   679   000FF9                     PCLAT           equ	4089	;# 
   680   000FF9                     PC              equ	4089	;# 
   681   000FF9                     PCL             equ	4089	;# 
   682   000FFA                     PCLATH          equ	4090	;# 
   683   000FFB                     PCLATU          equ	4091	;# 
   684   000FFC                     STKPTR          equ	4092	;# 
   685   000FFD                     TOS             equ	4093	;# 
   686   000FFD                     TOSL            equ	4093	;# 
   687   000FFE                     TOSH            equ	4094	;# 
   688   000FFF                     TOSU            equ	4095	;# 
   689   000F80                     PORTA           equ	3968	;# 
   690   000F81                     PORTB           equ	3969	;# 
   691   000F82                     PORTC           equ	3970	;# 
   692   000F83                     PORTD           equ	3971	;# 
   693   000F84                     PORTE           equ	3972	;# 
   694   000F89                     LATA            equ	3977	;# 
   695   000F8A                     LATB            equ	3978	;# 
   696   000F8B                     LATC            equ	3979	;# 
   697   000F8C                     LATD            equ	3980	;# 
   698   000F8D                     LATE            equ	3981	;# 
   699   000F92                     TRISA           equ	3986	;# 
   700   000F92                     DDRA            equ	3986	;# 
   701   000F93                     TRISB           equ	3987	;# 
   702   000F93                     DDRB            equ	3987	;# 
   703   000F94                     TRISC           equ	3988	;# 
   704   000F94                     DDRC            equ	3988	;# 
   705   000F95                     TRISD           equ	3989	;# 
   706   000F95                     DDRD            equ	3989	;# 
   707   000F96                     TRISE           equ	3990	;# 
   708   000F96                     DDRE            equ	3990	;# 
   709   000F9B                     OSCTUNE         equ	3995	;# 
   710   000F9D                     PIE1            equ	3997	;# 
   711   000F9E                     PIR1            equ	3998	;# 
   712   000F9F                     IPR1            equ	3999	;# 
   713   000FA0                     PIE2            equ	4000	;# 
   714   000FA1                     PIR2            equ	4001	;# 
   715   000FA2                     IPR2            equ	4002	;# 
   716   000FA6                     EECON1          equ	4006	;# 
   717   000FA7                     EECON2          equ	4007	;# 
   718   000FA8                     EEDATA          equ	4008	;# 
   719   000FA9                     EEADR           equ	4009	;# 
   720   000FAB                     RCSTA           equ	4011	;# 
   721   000FAB                     RCSTA1          equ	4011	;# 
   722   000FAC                     TXSTA           equ	4012	;# 
   723   000FAC                     TXSTA1          equ	4012	;# 
   724   000FAD                     TXREG           equ	4013	;# 
   725   000FAD                     TXREG1          equ	4013	;# 
   726   000FAE                     RCREG           equ	4014	;# 
   727   000FAE                     RCREG1          equ	4014	;# 
   728   000FAF                     SPBRG           equ	4015	;# 
   729   000FAF                     SPBRG1          equ	4015	;# 
   730   000FB0                     SPBRGH          equ	4016	;# 
   731   000FB1                     T3CON           equ	4017	;# 
   732   000FB2                     TMR3            equ	4018	;# 
   733   000FB2                     TMR3L           equ	4018	;# 
   734   000FB3                     TMR3H           equ	4019	;# 
   735   000FB4                     CMCON           equ	4020	;# 
   736   000FB5                     CVRCON          equ	4021	;# 
   737   000FB6                     ECCP1AS         equ	4022	;# 
   738   000FB7                     ECCP1DEL        equ	4023	;# 
   739   000FB7                     PWM1CON         equ	4023	;# 
   740   000FB8                     BAUDCON         equ	4024	;# 
   741   000FB8                     BAUDCTL         equ	4024	;# 
   742   000FBA                     CCP2CON         equ	4026	;# 
   743   000FBB                     CCPR2           equ	4027	;# 
   744   000FBB                     CCPR2L          equ	4027	;# 
   745   000FBC                     CCPR2H          equ	4028	;# 
   746   000FBD                     CCP1CON         equ	4029	;# 
   747   000FBD                     ECCP1CON        equ	4029	;# 
   748   000FBE                     CCPR1           equ	4030	;# 
   749   000FBE                     CCPR1L          equ	4030	;# 
   750   000FBF                     CCPR1H          equ	4031	;# 
   751   000FC0                     ADCON2          equ	4032	;# 
   752   000FC1                     ADCON1          equ	4033	;# 
   753   000FC2                     ADCON0          equ	4034	;# 
   754   000FC3                     ADRES           equ	4035	;# 
   755   000FC3                     ADRESL          equ	4035	;# 
   756   000FC4                     ADRESH          equ	4036	;# 
   757   000FC5                     SSPCON2         equ	4037	;# 
   758   000FC6                     SSPCON1         equ	4038	;# 
   759   000FC7                     SSPSTAT         equ	4039	;# 
   760   000FC8                     SSPADD          equ	4040	;# 
   761   000FC9                     SSPBUF          equ	4041	;# 
   762   000FCA                     T2CON           equ	4042	;# 
   763   000FCB                     PR2             equ	4043	;# 
   764   000FCB                     MEMCON          equ	4043	;# 
   765   000FCC                     TMR2            equ	4044	;# 
   766   000FCD                     T1CON           equ	4045	;# 
   767   000FCE                     TMR1            equ	4046	;# 
   768   000FCE                     TMR1L           equ	4046	;# 
   769   000FCF                     TMR1H           equ	4047	;# 
   770   000FD0                     RCON            equ	4048	;# 
   771   000FD1                     WDTCON          equ	4049	;# 
   772   000FD2                     HLVDCON         equ	4050	;# 
   773   000FD2                     LVDCON          equ	4050	;# 
   774   000FD3                     OSCCON          equ	4051	;# 
   775   000FD5                     T0CON           equ	4053	;# 
   776   000FD6                     TMR0            equ	4054	;# 
   777   000FD6                     TMR0L           equ	4054	;# 
   778   000FD7                     TMR0H           equ	4055	;# 
   779   000FD8                     STATUS          equ	4056	;# 
   780   000FD9                     FSR2            equ	4057	;# 
   781   000FD9                     FSR2L           equ	4057	;# 
   782   000FDA                     FSR2H           equ	4058	;# 
   783   000FDB                     PLUSW2          equ	4059	;# 
   784   000FDC                     PREINC2         equ	4060	;# 
   785   000FDD                     POSTDEC2        equ	4061	;# 
   786   000FDE                     POSTINC2        equ	4062	;# 
   787   000FDF                     INDF2           equ	4063	;# 
   788   000FE0                     BSR             equ	4064	;# 
   789   000FE1                     FSR1            equ	4065	;# 
   790   000FE1                     FSR1L           equ	4065	;# 
   791   000FE2                     FSR1H           equ	4066	;# 
   792   000FE3                     PLUSW1          equ	4067	;# 
   793   000FE4                     PREINC1         equ	4068	;# 
   794   000FE5                     POSTDEC1        equ	4069	;# 
   795   000FE6                     POSTINC1        equ	4070	;# 
   796   000FE7                     INDF1           equ	4071	;# 
   797   000FE8                     WREG            equ	4072	;# 
   798   000FE9                     FSR0            equ	4073	;# 
   799   000FE9                     FSR0L           equ	4073	;# 
   800   000FEA                     FSR0H           equ	4074	;# 
   801   000FEB                     PLUSW0          equ	4075	;# 
   802   000FEC                     PREINC0         equ	4076	;# 
   803   000FED                     POSTDEC0        equ	4077	;# 
   804   000FEE                     POSTINC0        equ	4078	;# 
   805   000FEF                     INDF0           equ	4079	;# 
   806   000FF0                     INTCON3         equ	4080	;# 
   807   000FF1                     INTCON2         equ	4081	;# 
   808   000FF2                     INTCON          equ	4082	;# 
   809   000FF3                     PROD            equ	4083	;# 
   810   000FF3                     PRODL           equ	4083	;# 
   811   000FF4                     PRODH           equ	4084	;# 
   812   000FF5                     TABLAT          equ	4085	;# 
   813   000FF6                     TBLPTR          equ	4086	;# 
   814   000FF6                     TBLPTRL         equ	4086	;# 
   815   000FF7                     TBLPTRH         equ	4087	;# 
   816   000FF8                     TBLPTRU         equ	4088	;# 
   817   000FF9                     PCLAT           equ	4089	;# 
   818   000FF9                     PC              equ	4089	;# 
   819   000FF9                     PCL             equ	4089	;# 
   820   000FFA                     PCLATH          equ	4090	;# 
   821   000FFB                     PCLATU          equ	4091	;# 
   822   000FFC                     STKPTR          equ	4092	;# 
   823   000FFD                     TOS             equ	4093	;# 
   824   000FFD                     TOSL            equ	4093	;# 
   825   000FFE                     TOSH            equ	4094	;# 
   826   000FFF                     TOSU            equ	4095	;# 
   827   000F80                     PORTA           equ	3968	;# 
   828   000F81                     PORTB           equ	3969	;# 
   829   000F82                     PORTC           equ	3970	;# 
   830   000F83                     PORTD           equ	3971	;# 
   831   000F84                     PORTE           equ	3972	;# 
   832   000F89                     LATA            equ	3977	;# 
   833   000F8A                     LATB            equ	3978	;# 
   834   000F8B                     LATC            equ	3979	;# 
   835   000F8C                     LATD            equ	3980	;# 
   836   000F8D                     LATE            equ	3981	;# 
   837   000F92                     TRISA           equ	3986	;# 
   838   000F92                     DDRA            equ	3986	;# 
   839   000F93                     TRISB           equ	3987	;# 
   840   000F93                     DDRB            equ	3987	;# 
   841   000F94                     TRISC           equ	3988	;# 
   842   000F94                     DDRC            equ	3988	;# 
   843   000F95                     TRISD           equ	3989	;# 
   844   000F95                     DDRD            equ	3989	;# 
   845   000F96                     TRISE           equ	3990	;# 
   846   000F96                     DDRE            equ	3990	;# 
   847   000F9B                     OSCTUNE         equ	3995	;# 
   848   000F9D                     PIE1            equ	3997	;# 
   849   000F9E                     PIR1            equ	3998	;# 
   850   000F9F                     IPR1            equ	3999	;# 
   851   000FA0                     PIE2            equ	4000	;# 
   852   000FA1                     PIR2            equ	4001	;# 
   853   000FA2                     IPR2            equ	4002	;# 
   854   000FA6                     EECON1          equ	4006	;# 
   855   000FA7                     EECON2          equ	4007	;# 
   856   000FA8                     EEDATA          equ	4008	;# 
   857   000FA9                     EEADR           equ	4009	;# 
   858   000FAB                     RCSTA           equ	4011	;# 
   859   000FAB                     RCSTA1          equ	4011	;# 
   860   000FAC                     TXSTA           equ	4012	;# 
   861   000FAC                     TXSTA1          equ	4012	;# 
   862   000FAD                     TXREG           equ	4013	;# 
   863   000FAD                     TXREG1          equ	4013	;# 
   864   000FAE                     RCREG           equ	4014	;# 
   865   000FAE                     RCREG1          equ	4014	;# 
   866   000FAF                     SPBRG           equ	4015	;# 
   867   000FAF                     SPBRG1          equ	4015	;# 
   868   000FB0                     SPBRGH          equ	4016	;# 
   869   000FB1                     T3CON           equ	4017	;# 
   870   000FB2                     TMR3            equ	4018	;# 
   871   000FB2                     TMR3L           equ	4018	;# 
   872   000FB3                     TMR3H           equ	4019	;# 
   873   000FB4                     CMCON           equ	4020	;# 
   874   000FB5                     CVRCON          equ	4021	;# 
   875   000FB6                     ECCP1AS         equ	4022	;# 
   876   000FB7                     ECCP1DEL        equ	4023	;# 
   877   000FB7                     PWM1CON         equ	4023	;# 
   878   000FB8                     BAUDCON         equ	4024	;# 
   879   000FB8                     BAUDCTL         equ	4024	;# 
   880   000FBA                     CCP2CON         equ	4026	;# 
   881   000FBB                     CCPR2           equ	4027	;# 
   882   000FBB                     CCPR2L          equ	4027	;# 
   883   000FBC                     CCPR2H          equ	4028	;# 
   884   000FBD                     CCP1CON         equ	4029	;# 
   885   000FBD                     ECCP1CON        equ	4029	;# 
   886   000FBE                     CCPR1           equ	4030	;# 
   887   000FBE                     CCPR1L          equ	4030	;# 
   888   000FBF                     CCPR1H          equ	4031	;# 
   889   000FC0                     ADCON2          equ	4032	;# 
   890   000FC1                     ADCON1          equ	4033	;# 
   891   000FC2                     ADCON0          equ	4034	;# 
   892   000FC3                     ADRES           equ	4035	;# 
   893   000FC3                     ADRESL          equ	4035	;# 
   894   000FC4                     ADRESH          equ	4036	;# 
   895   000FC5                     SSPCON2         equ	4037	;# 
   896   000FC6                     SSPCON1         equ	4038	;# 
   897   000FC7                     SSPSTAT         equ	4039	;# 
   898   000FC8                     SSPADD          equ	4040	;# 
   899   000FC9                     SSPBUF          equ	4041	;# 
   900   000FCA                     T2CON           equ	4042	;# 
   901   000FCB                     PR2             equ	4043	;# 
   902   000FCB                     MEMCON          equ	4043	;# 
   903   000FCC                     TMR2            equ	4044	;# 
   904   000FCD                     T1CON           equ	4045	;# 
   905   000FCE                     TMR1            equ	4046	;# 
   906   000FCE                     TMR1L           equ	4046	;# 
   907   000FCF                     TMR1H           equ	4047	;# 
   908   000FD0                     RCON            equ	4048	;# 
   909   000FD1                     WDTCON          equ	4049	;# 
   910   000FD2                     HLVDCON         equ	4050	;# 
   911   000FD2                     LVDCON          equ	4050	;# 
   912   000FD3                     OSCCON          equ	4051	;# 
   913   000FD5                     T0CON           equ	4053	;# 
   914   000FD6                     TMR0            equ	4054	;# 
   915   000FD6                     TMR0L           equ	4054	;# 
   916   000FD7                     TMR0H           equ	4055	;# 
   917   000FD8                     STATUS          equ	4056	;# 
   918   000FD9                     FSR2            equ	4057	;# 
   919   000FD9                     FSR2L           equ	4057	;# 
   920   000FDA                     FSR2H           equ	4058	;# 
   921   000FDB                     PLUSW2          equ	4059	;# 
   922   000FDC                     PREINC2         equ	4060	;# 
   923   000FDD                     POSTDEC2        equ	4061	;# 
   924   000FDE                     POSTINC2        equ	4062	;# 
   925   000FDF                     INDF2           equ	4063	;# 
   926   000FE0                     BSR             equ	4064	;# 
   927   000FE1                     FSR1            equ	4065	;# 
   928   000FE1                     FSR1L           equ	4065	;# 
   929   000FE2                     FSR1H           equ	4066	;# 
   930   000FE3                     PLUSW1          equ	4067	;# 
   931   000FE4                     PREINC1         equ	4068	;# 
   932   000FE5                     POSTDEC1        equ	4069	;# 
   933   000FE6                     POSTINC1        equ	4070	;# 
   934   000FE7                     INDF1           equ	4071	;# 
   935   000FE8                     WREG            equ	4072	;# 
   936   000FE9                     FSR0            equ	4073	;# 
   937   000FE9                     FSR0L           equ	4073	;# 
   938   000FEA                     FSR0H           equ	4074	;# 
   939   000FEB                     PLUSW0          equ	4075	;# 
   940   000FEC                     PREINC0         equ	4076	;# 
   941   000FED                     POSTDEC0        equ	4077	;# 
   942   000FEE                     POSTINC0        equ	4078	;# 
   943   000FEF                     INDF0           equ	4079	;# 
   944   000FF0                     INTCON3         equ	4080	;# 
   945   000FF1                     INTCON2         equ	4081	;# 
   946   000FF2                     INTCON          equ	4082	;# 
   947   000FF3                     PROD            equ	4083	;# 
   948   000FF3                     PRODL           equ	4083	;# 
   949   000FF4                     PRODH           equ	4084	;# 
   950   000FF5                     TABLAT          equ	4085	;# 
   951   000FF6                     TBLPTR          equ	4086	;# 
   952   000FF6                     TBLPTRL         equ	4086	;# 
   953   000FF7                     TBLPTRH         equ	4087	;# 
   954   000FF8                     TBLPTRU         equ	4088	;# 
   955   000FF9                     PCLAT           equ	4089	;# 
   956   000FF9                     PC              equ	4089	;# 
   957   000FF9                     PCL             equ	4089	;# 
   958   000FFA                     PCLATH          equ	4090	;# 
   959   000FFB                     PCLATU          equ	4091	;# 
   960   000FFC                     STKPTR          equ	4092	;# 
   961   000FFD                     TOS             equ	4093	;# 
   962   000FFD                     TOSL            equ	4093	;# 
   963   000FFE                     TOSH            equ	4094	;# 
   964   000FFF                     TOSU            equ	4095	;# 
   965                           
   966                           	psect	mediumconst
   967   001EDC                     __pmediumconst:
   968                           	callstack 0
   969   001EDC  00                 	db	0
   970   001EDD                     GetTecla@F3221:
   971                           	callstack 0
   972   001EDD  01                 	db	1
   973   001EDE  02                 	db	2
   974   001EDF  03                 	db	3
   975   001EE0  04                 	db	4
   976   001EE1  05                 	db	5
   977   001EE2  06                 	db	6
   978   001EE3  07                 	db	7
   979   001EE4  08                 	db	8
   980   001EE5  09                 	db	9
   981   001EE6  0A                 	db	10
   982   001EE7  00                 	db	0
   983   001EE8  0B                 	db	11
   984   001EE9                     __end_ofGetTecla@F3221:
   985                           	callstack 0
   986   007F92                     _TMR0IF         set	32658
   987   000FD6                     _TMR0           set	4054
   988   000FAE                     _RCREG          set	4014
   989   000FAD                     _TXREG          set	4013
   990   000F9E                     _PIR1bits       set	3998
   991   000FB8                     _BAUDCON        set	4024
   992   000FAF                     _SPBRG          set	4015
   993   000FAB                     _RCSTA          set	4011
   994   000FAC                     _TXSTA          set	4012
   995   000F81                     _PORTBbits      set	3969
   996   000F8A                     _LATBbits       set	3978
   997   000F93                     _TRISBbits      set	3987
   998   000F82                     _PORTCbits      set	3970
   999   000F8B                     _LATCbits       set	3979
  1000   000F94                     _TRISCbits      set	3988
  1001   000F8C                     _LATD           set	3980
  1002   000F95                     _TRISD          set	3989
  1003   000F83                     _PORTD          set	3971
  1004   000FD5                     _T0CON          set	4053
  1005   000F8B                     _LATC           set	3979
  1006   000F92                     _TRISA          set	3986
  1007   000FC1                     _ADCON1         set	4033
  1008   000F89                     _LATA           set	3977
  1009   000FF2                     _INTCONbits     set	4082
  1010   001EE9                     STR_16:
  1011   001EE9  45                 	db	69	;'E'
  1012   001EEA  52                 	db	82	;'R'
  1013   001EEB  52                 	db	82	;'R'
  1014   001EEC  4F                 	db	79	;'O'
  1015   001EED  52                 	db	82	;'R'
  1016   001EEE  2E                 	db	46
  1017   001EEF  20                 	db	32
  1018   001EF0  56                 	db	86	;'V'
  1019   001EF1  61                 	db	97	;'a'
  1020   001EF2  6C                 	db	108	;'l'
  1021   001EF3  6F                 	db	111	;'o'
  1022   001EF4  72                 	db	114	;'r'
  1023   001EF5  20                 	db	32
  1024   001EF6  69                 	db	105	;'i'
  1025   001EF7  6E                 	db	110	;'n'
  1026   001EF8  74                 	db	116	;'t'
  1027   001EF9  72                 	db	114	;'r'
  1028   001EFA  6F                 	db	111	;'o'
  1029   001EFB  64                 	db	100	;'d'
  1030   001EFC  75                 	db	117	;'u'
  1031   001EFD  69                 	db	105	;'i'
  1032   001EFE  74                 	db	116	;'t'
  1033   001EFF  20                 	db	32
  1034   001F00  65                 	db	101	;'e'
  1035   001F01  72                 	db	114	;'r'
  1036   001F02  72                 	db	114	;'r'
  1037   001F03  6F                 	db	111	;'o'
  1038   001F04  6E                 	db	110	;'n'
  1039   001F05  69                 	db	105	;'i'
  1040   001F06  2E                 	db	46
  1041   001F07  0D                 	db	13
  1042   001F08  0A                 	db	10
  1043   001F09  00                 	db	0
  1044   001F0A                     STR_11:
  1045   001F0A  09                 	db	9
  1046   001F0B  33                 	db	51	;'3'
  1047   001F0C  2E                 	db	46
  1048   001F0D  20                 	db	32
  1049   001F0E  4D                 	db	77	;'M'
  1050   001F0F  6F                 	db	111	;'o'
  1051   001F10  64                 	db	100	;'d'
  1052   001F11  69                 	db	105	;'i'
  1053   001F12  66                 	db	102	;'f'
  1054   001F13  69                 	db	105	;'i'
  1055   001F14  63                 	db	99	;'c'
  1056   001F15  61                 	db	97	;'a'
  1057   001F16  72                 	db	114	;'r'
  1058   001F17  20                 	db	32
  1059   001F18  68                 	db	104	;'h'
  1060   001F19  6F                 	db	111	;'o'
  1061   001F1A  72                 	db	114	;'r'
  1062   001F1B  61                 	db	97	;'a'
  1063   001F1C  20                 	db	32
  1064   001F1D  64                 	db	100	;'d'
  1065   001F1E  65                 	db	101	;'e'
  1066   001F1F  6C                 	db	108	;'l'
  1067   001F20  20                 	db	32
  1068   001F21  73                 	db	115	;'s'
  1069   001F22  69                 	db	105	;'i'
  1070   001F23  73                 	db	115	;'s'
  1071   001F24  74                 	db	116	;'t'
  1072   001F25  65                 	db	101	;'e'
  1073   001F26  6D                 	db	109	;'m'
  1074   001F27  61                 	db	97	;'a'
  1075   001F28  0D                 	db	13
  1076   001F29  0A                 	db	10
  1077   001F2A  00                 	db	0
  1078   001F2B                     STR_4:
  1079   001F2B  55                 	db	85	;'U'
  1080   001F2C  49                 	db	73	;'I'
  1081   001F2D  44                 	db	68	;'D'
  1082   001F2E  3A                 	db	58	;':'
  1083   001F2F  20                 	db	32
  1084   001F30  25                 	db	37
  1085   001F31  30                 	db	48	;'0'
  1086   001F32  32                 	db	50	;'2'
  1087   001F33  58                 	db	88	;'X'
  1088   001F34  25                 	db	37
  1089   001F35  30                 	db	48	;'0'
  1090   001F36  32                 	db	50	;'2'
  1091   001F37  58                 	db	88	;'X'
  1092   001F38  25                 	db	37
  1093   001F39  30                 	db	48	;'0'
  1094   001F3A  32                 	db	50	;'2'
  1095   001F3B  58                 	db	88	;'X'
  1096   001F3C  25                 	db	37
  1097   001F3D  30                 	db	48	;'0'
  1098   001F3E  32                 	db	50	;'2'
  1099   001F3F  58                 	db	88	;'X'
  1100   001F40  25                 	db	37
  1101   001F41  30                 	db	48	;'0'
  1102   001F42  32                 	db	50	;'2'
  1103   001F43  58                 	db	88	;'X'
  1104   001F44  25                 	db	37
  1105   001F45  30                 	db	48	;'0'
  1106   001F46  32                 	db	50	;'2'
  1107   001F47  58                 	db	88	;'X'
  1108   001F48  0D                 	db	13
  1109   001F49  0A                 	db	10
  1110   001F4A  00                 	db	0
  1111   001F4B                     STR_10:
  1112   001F4B  09                 	db	9
  1113   001F4C  32                 	db	50	;'2'
  1114   001F4D  2E                 	db	46
  1115   001F4E  20                 	db	32
  1116   001F4F  4D                 	db	77	;'M'
  1117   001F50  6F                 	db	111	;'o'
  1118   001F51  73                 	db	115	;'s'
  1119   001F52  74                 	db	116	;'t'
  1120   001F53  72                 	db	114	;'r'
  1121   001F54  61                 	db	97	;'a'
  1122   001F55  72                 	db	114	;'r'
  1123   001F56  20                 	db	32
  1124   001F57  63                 	db	99	;'c'
  1125   001F58  6F                 	db	111	;'o'
  1126   001F59  6E                 	db	110	;'n'
  1127   001F5A  66                 	db	102	;'f'
  1128   001F5B  69                 	db	105	;'i'
  1129   001F5C  67                 	db	103	;'g'
  1130   001F5D  75                 	db	117	;'u'
  1131   001F5E  72                 	db	114	;'r'
  1132   001F5F  61                 	db	97	;'a'
  1133   001F60  63                 	db	99	;'c'
  1134   001F61  69                 	db	105	;'i'
  1135   001F62  6F                 	db	111	;'o'
  1136   001F63  6E                 	db	110	;'n'
  1137   001F64  73                 	db	115	;'s'
  1138   001F65  0D                 	db	13
  1139   001F66  0A                 	db	10
  1140   001F67  00                 	db	0
  1141   001F68                     STR_9:
  1142   001F68  09                 	db	9
  1143   001F69  31                 	db	49	;'1'
  1144   001F6A  2E                 	db	46
  1145   001F6B  20                 	db	32
  1146   001F6C  51                 	db	81	;'Q'
  1147   001F6D  75                 	db	117	;'u'
  1148   001F6E  69                 	db	105	;'i'
  1149   001F6F  20                 	db	32
  1150   001F70  68                 	db	104	;'h'
  1151   001F71  69                 	db	105	;'i'
  1152   001F72  20                 	db	32
  1153   001F73  68                 	db	104	;'h'
  1154   001F74  61                 	db	97	;'a'
  1155   001F75  20                 	db	32
  1156   001F76  61                 	db	97	;'a'
  1157   001F77  20                 	db	32
  1158   001F78  6C                 	db	108	;'l'
  1159   001F79  61                 	db	97	;'a'
  1160   001F7A  20                 	db	32
  1161   001F7B  73                 	db	115	;'s'
  1162   001F7C  61                 	db	97	;'a'
  1163   001F7D  6C                 	db	108	;'l'
  1164   001F7E  61                 	db	97	;'a'
  1165   001F7F  3F                 	db	63	;'?'
  1166   001F80  0D                 	db	13
  1167   001F81  0A                 	db	10
  1168   001F82  00                 	db	0
  1169   001F83                     STR_8:
  1170   001F83  54                 	db	84	;'T'
  1171   001F84  72                 	db	114	;'r'
  1172   001F85  69                 	db	105	;'i'
  1173   001F86  61                 	db	97	;'a'
  1174   001F87  20                 	db	32
  1175   001F88  75                 	db	117	;'u'
  1176   001F89  6E                 	db	110	;'n'
  1177   001F8A  61                 	db	97	;'a'
  1178   001F8B  20                 	db	32
  1179   001F8C  6F                 	db	111	;'o'
  1180   001F8D  70                 	db	112	;'p'
  1181   001F8E  63                 	db	99	;'c'
  1182   001F8F  69                 	db	105	;'i'
  1183   001F90  C3                 	db	-61
  1184   001F91  B3                 	db	-77
  1185   001F92  3A                 	db	58	;':'
  1186   001F93  0D                 	db	13
  1187   001F94  0A                 	db	10
  1188   001F95  00                 	db	0
  1189   001F96                     STR_5:
  1190   001F96  2D                 	db	45
  1191   001F97  2D                 	db	45
  1192   001F98  2D                 	db	45
  1193   001F99  2D                 	db	45
  1194   001F9A  2D                 	db	45
  1195   001F9B  2D                 	db	45
  1196   001F9C  2D                 	db	45
  1197   001F9D  2D                 	db	45
  1198   001F9E  2D                 	db	45
  1199   001F9F  2D                 	db	45
  1200   001FA0  2D                 	db	45
  1201   001FA1  2D                 	db	45
  1202   001FA2  2D                 	db	45
  1203   001FA3  2D                 	db	45
  1204   001FA4  2D                 	db	45
  1205   001FA5  0D                 	db	13
  1206   001FA6  0A                 	db	10
  1207   001FA7  00                 	db	0
  1208   001FA8                     STR_6:
  1209   001FA8  4D                 	db	77	;'M'
  1210   001FA9  65                 	db	101	;'e'
  1211   001FAA  6E                 	db	110	;'n'
  1212   001FAB  C3                 	db	-61
  1213   001FAC  BA                 	db	-70
  1214   001FAD  20                 	db	32
  1215   001FAE  70                 	db	112	;'p'
  1216   001FAF  72                 	db	114	;'r'
  1217   001FB0  69                 	db	105	;'i'
  1218   001FB1  6E                 	db	110	;'n'
  1219   001FB2  63                 	db	99	;'c'
  1220   001FB3  69                 	db	105	;'i'
  1221   001FB4  70                 	db	112	;'p'
  1222   001FB5  61                 	db	97	;'a'
  1223   001FB6  6C                 	db	108	;'l'
  1224   001FB7  0D                 	db	13
  1225   001FB8  0A                 	db	10
  1226   001FB9  00                 	db	0
  1227   001FBA                     STR_13:
  1228   001FBA  48                 	db	72	;'H'
  1229   001FBB  61                 	db	97	;'a'
  1230   001FBC  73                 	db	115	;'s'
  1231   001FBD  20                 	db	32
  1232   001FBE  70                 	db	112	;'p'
  1233   001FBF  75                 	db	117	;'u'
  1234   001FC0  6C                 	db	108	;'l'
  1235   001FC1  73                 	db	115	;'s'
  1236   001FC2  61                 	db	97	;'a'
  1237   001FC3  64                 	db	100	;'d'
  1238   001FC4  6F                 	db	111	;'o'
  1239   001FC5  20                 	db	32
  1240   001FC6  31                 	db	49	;'1'
  1241   001FC7  0D                 	db	13
  1242   001FC8  0A                 	db	10
  1243   001FC9  00                 	db	0
  1244   001FCA                     STR_14:
  1245   001FCA  48                 	db	72	;'H'
  1246   001FCB  61                 	db	97	;'a'
  1247   001FCC  73                 	db	115	;'s'
  1248   001FCD  20                 	db	32
  1249   001FCE  70                 	db	112	;'p'
  1250   001FCF  75                 	db	117	;'u'
  1251   001FD0  6C                 	db	108	;'l'
  1252   001FD1  73                 	db	115	;'s'
  1253   001FD2  61                 	db	97	;'a'
  1254   001FD3  64                 	db	100	;'d'
  1255   001FD4  6F                 	db	111	;'o'
  1256   001FD5  20                 	db	32
  1257   001FD6  32                 	db	50	;'2'
  1258   001FD7  0D                 	db	13
  1259   001FD8  0A                 	db	10
  1260   001FD9  00                 	db	0
  1261   001FDA                     STR_15:
  1262   001FDA  48                 	db	72	;'H'
  1263   001FDB  61                 	db	97	;'a'
  1264   001FDC  73                 	db	115	;'s'
  1265   001FDD  20                 	db	32
  1266   001FDE  70                 	db	112	;'p'
  1267   001FDF  75                 	db	117	;'u'
  1268   001FE0  6C                 	db	108	;'l'
  1269   001FE1  73                 	db	115	;'s'
  1270   001FE2  61                 	db	97	;'a'
  1271   001FE3  64                 	db	100	;'d'
  1272   001FE4  6F                 	db	111	;'o'
  1273   001FE5  20                 	db	32
  1274   001FE6  33                 	db	51	;'3'
  1275   001FE7  0D                 	db	13
  1276   001FE8  0A                 	db	10
  1277   001FE9  00                 	db	0
  1278   001FEA                     STR_12:
  1279   001FEA  4F                 	db	79	;'O'
  1280   001FEB  70                 	db	112	;'p'
  1281   001FEC  63                 	db	99	;'c'
  1282   001FED  69                 	db	105	;'i'
  1283   001FEE  C3                 	db	-61
  1284   001FEF  B3                 	db	-77
  1285   001FF0  3A                 	db	58	;':'
  1286   001FF1  20                 	db	32
  1287   001FF2  00                 	db	0
  1288   001FF3  55                 	db	85	;'U'
  1289   001FF4  49                 	db	73	;'I'
  1290   001FF5  44                 	db	68	;'D'
  1291   001FF6  3A                 	db	58	;':'
  1292   001FF7  20                 	db	32
  1293   001FF8  00                 	db	0
  1294   001FF9  25                 	db	37
  1295   001FFA  30                 	db	48	;'0'
  1296   001FFB  32                 	db	50	;'2'
  1297   001FFC  58                 	db	88	;'X'
  1298   001FFD  00                 	db	0
  1299   001F96                     STR_7           equ	STR_5
  1300   001FA6                     STR_3           equ	STR_5+16
  1301   001FFE  00                 	db	0	; dummy byte at the end
  1302   001EDC                     __smallconst    set	__pmediumconst
  1303   001EDC                     __mediumconst   set	__pmediumconst
  1304   000002                     __activetblptr  equ	2
  1305                           
  1306                           ; #config settings
  1307                           
  1308                           	psect	cinit
  1309   001230                     __pcinit:
  1310                           	callstack 0
  1311   001230                     start_initialization:
  1312                           	callstack 0
  1313   001230                     __initialization:
  1314                           	callstack 0
  1315                           
  1316                           ; Clear objects allocated to BANK0 (102 bytes)
  1317   001230  EE00  F080         	lfsr	0,__pbssBANK0
  1318   001234  0E66               	movlw	102
  1319   001236                     clear_0:
  1320   001236  6AEE               	clrf	postinc0,c
  1321   001238  06E8               	decf	wreg,f,c
  1322   00123A  E1FD               	bnz	clear_0
  1323                           
  1324                           ; Clear objects allocated to COMRAM (39 bytes)
  1325   00123C  EE00  F055         	lfsr	0,__pbssCOMRAM
  1326   001240  0E27               	movlw	39
  1327   001242                     clear_1:
  1328   001242  6AEE               	clrf	postinc0,c
  1329   001244  06E8               	decf	wreg,f,c
  1330   001246  E1FD               	bnz	clear_1
  1331   001248                     end_of_initialization:
  1332                           	callstack 0
  1333   001248                     __end_of__initialization:
  1334                           	callstack 0
  1335   001248  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1336   00124A  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1337   00124C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1338   00124E  6EF8               	movwf	tblptru,c
  1339   001250  0100               	movlb	0
  1340   001252  EFEB  F008         	goto	_main	;jump to C main() function
  1341                           
  1342                           	psect	bssCOMRAM
  1343   000055                     __pbssCOMRAM:
  1344                           	callstack 0
  1345   000055                     motor_RFID@UID:
  1346                           	callstack 0
  1347   000055                     	ds	6
  1348   00005B                     _Tics:
  1349                           	callstack 0
  1350   00005B                     	ds	4
  1351   00005F                     _width:
  1352                           	callstack 0
  1353   00005F                     	ds	2
  1354   000061                     _prec:
  1355                           	callstack 0
  1356   000061                     	ds	2
  1357   000063                     	ds	2
  1358   000065                     _flags:
  1359                           	callstack 0
  1360   000065                     	ds	1
  1361   000066                     motorTerminal@state:
  1362                           	callstack 0
  1363   000066                     	ds	1
  1364   000067                     _hashtag_pressed:
  1365                           	callstack 0
  1366   000067                     	ds	1
  1367   000068                     _ColumnAct:
  1368                           	callstack 0
  1369   000068                     	ds	1
  1370   000069                     _RowAct:
  1371                           	callstack 0
  1372   000069                     	ds	1
  1373   00006A                     _Columns:
  1374                           	callstack 0
  1375   00006A                     	ds	1
  1376   00006B                     _Rows:
  1377                           	callstack 0
  1378   00006B                     	ds	1
  1379   00006C                     motor_RFID@allZero:
  1380                           	callstack 0
  1381   00006C                     	ds	1
  1382   00006D                     motor_RFID@checksum:
  1383                           	callstack 0
  1384   00006D                     	ds	1
  1385   00006E                     motor_RFID@TagType:
  1386                           	callstack 0
  1387   00006E                     	ds	1
  1388   00006F                     	ds	1
  1389   000070                     motor_RFID@i:
  1390                           	callstack 0
  1391   000070                     	ds	1
  1392   000071                     motor_RFID@n:
  1393                           	callstack 0
  1394   000071                     	ds	1
  1395   000072                     motor_RFID@waitIRq:
  1396                           	callstack 0
  1397   000072                     	ds	1
  1398   000073                     motor_RFID@irqEn:
  1399                           	callstack 0
  1400   000073                     	ds	1
  1401   000074                     motor_RFID@substate:
  1402                           	callstack 0
  1403   000074                     	ds	1
  1404   000075                     motor_RFID@state:
  1405                           	callstack 0
  1406   000075                     	ds	1
  1407   000076                     _state:
  1408                           	callstack 0
  1409   000076                     	ds	1
  1410   000077                     _tecla:
  1411                           	callstack 0
  1412   000077                     	ds	1
  1413   000078                     _Columnas:
  1414                           	callstack 0
  1415   000078                     	ds	1
  1416   000079                     _Filas:
  1417                           	callstack 0
  1418   000079                     	ds	1
  1419   00007A                     _Timer:
  1420                           	callstack 0
  1421   00007A                     	ds	1
  1422   00007B                     _timer:
  1423                           	callstack 0
  1424   00007B                     	ds	1
  1425                           
  1426                           	psect	bssBANK0
  1427   000080                     __pbssBANK0:
  1428                           	callstack 0
  1429   000080                     _Timers:
  1430                           	callstack 0
  1431   000080                     	ds	20
  1432   000094                     motor_RFID@buffer:
  1433                           	callstack 0
  1434   000094                     	ds	50
  1435   0000C6                     _dbuf:
  1436                           	callstack 0
  1437   0000C6                     	ds	32
  1438                           
  1439                           	psect	cstackCOMRAM
  1440   000001                     __pcstackCOMRAM:
  1441                           	callstack 0
  1442   000001                     ??_LowRSI:
  1443                           
  1444                           ; 1 bytes @ 0x0
  1445   000001                     	ds	1
  1446   000002                     ?_Terminal_TXAvailable:
  1447                           	callstack 0
  1448   000002                     ?_read_prec_or_width:
  1449                           	callstack 0
  1450   000002                     ?_TI_GetTics:
  1451                           	callstack 0
  1452   000002                     TI_Init@counter:
  1453                           	callstack 0
  1454   000002                     TI_NewTimer@TimerHandle:
  1455                           	callstack 0
  1456   000002                     TI_ResetTics@TimerHandle:
  1457                           	callstack 0
  1458   000002                     Terminal_SendChar@c:
  1459                           	callstack 0
  1460   000002                     read_prec_or_width@fmt:
  1461                           	callstack 0
  1462   000002                     fputc@c:
  1463                           	callstack 0
  1464   000002                     ??_GetTecla:
  1465   000002                     ??_delay_us:
  1466   000002                     
  1467                           ; 1 bytes @ 0x1
  1468   000002                     	ds	1
  1469   000003                     read_prec_or_width@ap:
  1470                           	callstack 0
  1471   000003                     
  1472                           ; 1 bytes @ 0x2
  1473   000003                     	ds	1
  1474   000004                     TI_NewTimer@Comptador:
  1475                           	callstack 0
  1476   000004                     fputc@fp:
  1477                           	callstack 0
  1478   000004                     GetTecla@keymap:
  1479                           	callstack 0
  1480   000004                     ??_Terminal_TXAvailable:
  1481   000004                     ??_read_prec_or_width:
  1482                           
  1483                           ; 1 bytes @ 0x3
  1484   000004                     	ds	1
  1485   000005                     delay_us@howMany:
  1486                           	callstack 0
  1487   000005                     Terminal_SendString@str:
  1488                           	callstack 0
  1489   000005                     ??_fputc:
  1490                           
  1491                           ; 1 bytes @ 0x4
  1492   000005                     	ds	1
  1493   000006                     delay_us@x:
  1494                           	callstack 0
  1495   000006                     read_prec_or_width@c:
  1496                           	callstack 0
  1497   000006                     ??_TI_GetTics:
  1498                           
  1499                           ; 1 bytes @ 0x5
  1500   000006                     	ds	1
  1501   000007                     read_prec_or_width@n:
  1502                           	callstack 0
  1503   000007                     ??_MFRC522_Rd:
  1504   000007                     
  1505                           ; 1 bytes @ 0x6
  1506   000007                     	ds	1
  1507   000008                     MFRC522_Rd@Address:
  1508                           	callstack 0
  1509                           
  1510                           ; 1 bytes @ 0x7
  1511   000008                     	ds	1
  1512   000009                     MFRC522_Rd@ucAddr:
  1513                           	callstack 0
  1514                           
  1515                           ; 1 bytes @ 0x8
  1516   000009                     	ds	1
  1517   00000A                     MFRC522_Rd@ucResult:
  1518                           	callstack 0
  1519   00000A                     fputs@s:
  1520                           	callstack 0
  1521   00000A                     TI_GetTics@CopiaTicsActual:
  1522                           	callstack 0
  1523                           
  1524                           ; 4 bytes @ 0x9
  1525   00000A                     	ds	1
  1526   00000B                     MFRC522_Rd@i:
  1527                           	callstack 0
  1528   00000B                     fputs@fp:
  1529                           	callstack 0
  1530                           
  1531                           ; 1 bytes @ 0xA
  1532   00000B                     	ds	1
  1533   00000C                     MFRC522_Wr@value:
  1534                           	callstack 0
  1535   00000C                     fputs@c:
  1536                           	callstack 0
  1537   00000C                     
  1538                           ; 1 bytes @ 0xB
  1539   00000C                     	ds	1
  1540   00000D                     fputs@i:
  1541                           	callstack 0
  1542   00000D                     ??_MFRC522_Wr:
  1543                           
  1544                           ; 1 bytes @ 0xC
  1545   00000D                     	ds	1
  1546   00000E                     TI_GetTics@TimerHandle:
  1547                           	callstack 0
  1548   00000E                     MFRC522_Wr@Address:
  1549                           	callstack 0
  1550                           
  1551                           ; 1 bytes @ 0xD
  1552   00000E                     	ds	1
  1553   00000F                     MFRC522_Wr@ucAddr:
  1554                           	callstack 0
  1555   00000F                     pad@fp:
  1556                           	callstack 0
  1557                           
  1558                           ; 1 bytes @ 0xE
  1559   00000F                     	ds	1
  1560   000010                     GetTecla@columna:
  1561                           	callstack 0
  1562   000010                     MFRC522_Wr@i:
  1563                           	callstack 0
  1564   000010                     pad@buf:
  1565                           	callstack 0
  1566                           
  1567                           ; 1 bytes @ 0xF
  1568   000010                     	ds	1
  1569   000011                     GetTecla@fila:
  1570                           	callstack 0
  1571   000011                     MFRC522_Clear_Bit@mask:
  1572                           	callstack 0
  1573   000011                     MFRC522_Set_Bit@mask:
  1574                           	callstack 0
  1575   000011                     pad@p:
  1576                           	callstack 0
  1577   000011                     
  1578                           ; 1 bytes @ 0x10
  1579   000011                     	ds	1
  1580   000012                     MFRC522_Set_Bit@addr:
  1581                           	callstack 0
  1582   000012                     ??_MFRC522_Clear_Bit:
  1583   000012                     
  1584                           ; 1 bytes @ 0x11
  1585   000012                     	ds	1
  1586   000013                     MFRC522_Clear_Bit@addr:
  1587                           	callstack 0
  1588   000013                     ??_pad:
  1589                           
  1590                           ; 1 bytes @ 0x12
  1591   000013                     	ds	1
  1592   000014                     pad@i:
  1593                           	callstack 0
  1594   000014                     
  1595                           ; 1 bytes @ 0x13
  1596   000014                     	ds	2
  1597   000016                     xtoa@fp:
  1598                           	callstack 0
  1599                           
  1600                           ; 1 bytes @ 0x15
  1601   000016                     	ds	1
  1602   000017                     xtoa@d:
  1603                           	callstack 0
  1604                           
  1605                           ; 2 bytes @ 0x16
  1606   000017                     	ds	2
  1607   000019                     ??_xtoa:
  1608                           
  1609                           ; 1 bytes @ 0x18
  1610   000019                     	ds	3
  1611   00001C                     xtoa@p:
  1612                           	callstack 0
  1613                           
  1614                           ; 1 bytes @ 0x1B
  1615   00001C                     	ds	1
  1616   00001D                     xtoa@w:
  1617                           	callstack 0
  1618                           
  1619                           ; 2 bytes @ 0x1C
  1620   00001D                     	ds	2
  1621   00001F                     xtoa@c:
  1622                           	callstack 0
  1623                           
  1624                           ; 1 bytes @ 0x1E
  1625   00001F                     	ds	1
  1626   000020                     xtoa@i:
  1627                           	callstack 0
  1628                           
  1629                           ; 2 bytes @ 0x1F
  1630   000020                     	ds	2
  1631   000022                     vfpfcnvrt@fp:
  1632                           	callstack 0
  1633                           
  1634                           ; 1 bytes @ 0x21
  1635   000022                     	ds	1
  1636   000023                     vfpfcnvrt@fmt:
  1637                           	callstack 0
  1638                           
  1639                           ; 1 bytes @ 0x22
  1640   000023                     	ds	1
  1641   000024                     vfpfcnvrt@ap:
  1642                           	callstack 0
  1643                           
  1644                           ; 1 bytes @ 0x23
  1645   000024                     	ds	1
  1646   000025                     ??_vfpfcnvrt:
  1647                           
  1648                           ; 1 bytes @ 0x24
  1649   000025                     	ds	2
  1650   000027                     vfpfcnvrt@convarg:
  1651                           	callstack 0
  1652                           
  1653                           ; 4 bytes @ 0x26
  1654   000027                     	ds	4
  1655   00002B                     vfpfcnvrt@done:
  1656                           	callstack 0
  1657                           
  1658                           ; 1 bytes @ 0x2A
  1659   00002B                     	ds	1
  1660   00002C                     vfpfcnvrt@cp:
  1661                           	callstack 0
  1662                           
  1663                           ; 2 bytes @ 0x2B
  1664   00002C                     	ds	2
  1665   00002E                     ?_vfprintf:
  1666                           	callstack 0
  1667   00002E                     vfprintf@fp:
  1668                           	callstack 0
  1669                           
  1670                           ; 1 bytes @ 0x2D
  1671   00002E                     	ds	1
  1672   00002F                     vfprintf@fmt:
  1673                           	callstack 0
  1674                           
  1675                           ; 2 bytes @ 0x2E
  1676   00002F                     	ds	2
  1677   000031                     vfprintf@ap:
  1678                           	callstack 0
  1679                           
  1680                           ; 1 bytes @ 0x30
  1681   000031                     	ds	1
  1682   000032                     vfprintf@cfmt:
  1683                           	callstack 0
  1684   000032                     
  1685                           ; 1 bytes @ 0x31
  1686   000032                     	ds	2
  1687   000034                     ?_sprintf:
  1688                           	callstack 0
  1689   000034                     sprintf@s:
  1690                           	callstack 0
  1691                           
  1692                           ; 1 bytes @ 0x33
  1693   000034                     	ds	1
  1694   000035                     sprintf@fmt:
  1695                           	callstack 0
  1696                           
  1697                           ; 2 bytes @ 0x34
  1698   000035                     	ds	14
  1699   000043                     sprintf@ap:
  1700                           	callstack 0
  1701   000043                     
  1702                           ; 1 bytes @ 0x42
  1703   000043                     	ds	1
  1704   000044                     sprintf@f:
  1705                           	callstack 0
  1706                           
  1707                           ; 11 bytes @ 0x43
  1708   000044                     	ds	11
  1709   00004F                     ??_motor_RFID:
  1710                           
  1711                           ; 1 bytes @ 0x4E
  1712   00004F                     	ds	2
  1713   000051                     motor_RFID@backBitsCalc:
  1714                           	callstack 0
  1715                           
  1716                           ; 2 bytes @ 0x50
  1717   000051                     	ds	2
  1718   000053                     motor_RFID@fifoLevel:
  1719                           	callstack 0
  1720                           
  1721                           ; 1 bytes @ 0x52
  1722   000053                     	ds	1
  1723   000054                     motor_RFID@lastBitsVal:
  1724                           	callstack 0
  1725                           
  1726                           ; 1 bytes @ 0x53
  1727   000054                     	ds	1
  1728   000055                     
  1729                           ; 1 bytes @ 0x54
  1730 ;;
  1731 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1732 ;;
  1733 ;; *************** function _main *****************
  1734 ;; Defined at:
  1735 ;;		line 36 in file "main.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;		None
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;		None
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1
  1749 ;;      Params:         0       0       0
  1750 ;;      Locals:         0       0       0
  1751 ;;      Temps:          0       0       0
  1752 ;;      Totals:         0       0       0
  1753 ;;Total ram usage:        0 bytes
  1754 ;; Hardware stack levels required when called: 12
  1755 ;; This function calls:
  1756 ;;		_TI_Init
  1757 ;;		_Terminal_Init
  1758 ;;		_initPorts
  1759 ;;		_initRFID
  1760 ;;		_initTeclado
  1761 ;;		_motorTeclado
  1762 ;;		_motorTerminal
  1763 ;;		_motor_RFID
  1764 ;; This function is called by:
  1765 ;;		Startup code after reset
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text0
  1770   0011D6                     __ptext0:
  1771                           	callstack 0
  1772   0011D6                     _main:
  1773                           	callstack 19
  1774   0011D6                     
  1775                           ;main.c: 37:  ADCON1 = 0x0F;
  1776   0011D6  ECD1  F008         	call	_TI_Init	;wreg free
  1777                           
  1778                           ;main.c: 38:  TRISA = 0x00;
  1779   0011DA  EC64  F009         	call	_initTeclado	;wreg free
  1780   0011DE                     
  1781                           ;main.c: 39: }
  1782   0011DE  ECA8  F009         	call	_initRFID	;wreg free
  1783   0011E2                     
  1784                           ;main.c: 40: 
  1785   0011E2  EC8E  F009         	call	_Terminal_Init	;wreg free
  1786   0011E6                     
  1787                           ;main.c: 41: 
  1788   0011E6  ECB5  F009         	call	_initPorts	;wreg free
  1789   0011EA                     
  1790                           ;main.c: 44: 
  1791   0011EA  8EF2               	bsf	242,7,c	;volatile
  1792   0011EC                     
  1793                           ;main.c: 45: 
  1794   0011EC  8CF2               	bsf	242,6,c	;volatile
  1795   0011EE                     l3596:
  1796   0011EE  6A89               	clrf	137,c	;volatile
  1797   0011F0  EC99  F002         	call	_motorTeclado	;wreg free
  1798   0011F4  ECE8  F004         	call	_motorTerminal	;wreg free
  1799   0011F8  EC15  F000         	call	_motor_RFID	;wreg free
  1800   0011FC  6889               	setf	137,c	;volatile
  1801   0011FE  EFF7  F008         	goto	l3596
  1802   001202  EF13  F000         	goto	start
  1803   001206                     __end_of_main:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _motor_RFID *****************
  1807 ;; Defined at:
  1808 ;;		line 322 in file "TAD_RFID.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  backBitsCalc    2   80[COMRAM] unsigned int 
  1813 ;;  lastBitsVal     1   83[COMRAM] unsigned char 
  1814 ;;  fifoLevel       1   82[COMRAM] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1
  1824 ;;      Params:         0       0       0
  1825 ;;      Locals:         4       0       0
  1826 ;;      Temps:          2       0       0
  1827 ;;      Totals:         6       0       0
  1828 ;;Total ram usage:        6 bytes
  1829 ;; Hardware stack levels used: 1
  1830 ;; Hardware stack levels required when called: 11
  1831 ;; This function calls:
  1832 ;;		_MFRC522_Clear_Bit
  1833 ;;		_MFRC522_Rd
  1834 ;;		_MFRC522_Set_Bit
  1835 ;;		_MFRC522_Wr
  1836 ;;		_Terminal_SendString
  1837 ;;		_sprintf
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text1
  1844   00002A                     __ptext1:
  1845                           	callstack 0
  1846   00002A                     _motor_RFID:
  1847                           	callstack 19
  1848   00002A                     
  1849                           ;TAD_RFID.c: 323:     static char state = 0;;TAD_RFID.c: 324:     static char substate =
      +                           0;;TAD_RFID.c: 325:     static char irqEn, waitIRq, n;;TAD_RFID.c: 326:     static unsi
      +                          gned char i;;TAD_RFID.c: 327:     static char _status;;TAD_RFID.c: 328:     static unsig
      +                          ned unLen;;TAD_RFID.c: 329:     static char TagType;;TAD_RFID.c: 330:     static unsigne
      +                          d char UID[6];;TAD_RFID.c: 331:     static char buffer[50];;TAD_RFID.c: 332:     static 
      +                          unsigned char checksum;;TAD_RFID.c: 333:     static unsigned char allZero;
  1850   00002A  EF8D  F002         	goto	l3520
  1851   00002E                     l3322:
  1852                           
  1853                           ;TAD_RFID.c: 340:                     MFRC522_Wr(0x0D, 0x07);
  1854   00002E  0E07               	movlw	7
  1855   000030  6E0C               	movwf	MFRC522_Wr@value^0,c
  1856   000032  0E0D               	movlw	13
  1857   000034  EC6B  F006         	call	_MFRC522_Wr
  1858   000038                     
  1859                           ;TAD_RFID.c: 341:                     TagType = 0x26;
  1860   000038  0E26               	movlw	38
  1861   00003A  6E6E               	movwf	motor_RFID@TagType^0,c
  1862   00003C                     l3326:
  1863                           
  1864                           ;TAD_RFID.c: 342:                     substate = 1;
  1865   00003C  0E01               	movlw	1
  1866   00003E  6E74               	movwf	motor_RFID@substate^0,c
  1867                           
  1868                           ;TAD_RFID.c: 343:                     break;
  1869   000040  EF98  F002         	goto	l410
  1870   000044                     l3328:
  1871                           
  1872                           ;TAD_RFID.c: 346:                     irqEn = 0x77;
  1873   000044  0E77               	movlw	119
  1874   000046  6E73               	movwf	motor_RFID@irqEn^0,c
  1875                           
  1876                           ;TAD_RFID.c: 347:                     waitIRq = 0x30;
  1877   000048  0E30               	movlw	48
  1878   00004A  6E72               	movwf	motor_RFID@waitIRq^0,c
  1879   00004C                     
  1880                           ;TAD_RFID.c: 348:                     MFRC522_Wr(0x02, irqEn | 0x80);
  1881   00004C  0EF7               	movlw	247
  1882   00004E  6E0C               	movwf	MFRC522_Wr@value^0,c
  1883   000050  0E02               	movlw	2
  1884   000052  EC6B  F006         	call	_MFRC522_Wr
  1885   000056                     l3332:
  1886                           
  1887                           ;TAD_RFID.c: 349:                     substate = 2;
  1888   000056  0E02               	movlw	2
  1889   000058  6E74               	movwf	motor_RFID@substate^0,c
  1890                           
  1891                           ;TAD_RFID.c: 350:                     break;
  1892   00005A  EF98  F002         	goto	l410
  1893   00005E                     l3334:
  1894                           
  1895                           ;TAD_RFID.c: 353:                     MFRC522_Clear_Bit(0x04, 0x80);
  1896   00005E  0E80               	movlw	128
  1897   000060  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  1898   000062  0E04               	movlw	4
  1899   000064  EC4B  F009         	call	_MFRC522_Clear_Bit
  1900   000068                     l3336:
  1901                           
  1902                           ;TAD_RFID.c: 354:                     substate = 3;
  1903   000068  0E03               	movlw	3
  1904   00006A  6E74               	movwf	motor_RFID@substate^0,c
  1905                           
  1906                           ;TAD_RFID.c: 355:                     break;
  1907   00006C  EF98  F002         	goto	l410
  1908   000070                     l3338:
  1909                           
  1910                           ;TAD_RFID.c: 358:                     MFRC522_Set_Bit(0x0A, 0x80);
  1911   000070  0E80               	movlw	128
  1912   000072  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  1913   000074  0E0A               	movlw	10
  1914   000076  EC84  F009         	call	_MFRC522_Set_Bit
  1915   00007A                     l3340:
  1916                           
  1917                           ;TAD_RFID.c: 359:                     substate = 4;
  1918   00007A  0E04               	movlw	4
  1919   00007C  6E74               	movwf	motor_RFID@substate^0,c
  1920                           
  1921                           ;TAD_RFID.c: 360:                     break;
  1922   00007E  EF98  F002         	goto	l410
  1923   000082                     l3342:
  1924                           
  1925                           ;TAD_RFID.c: 363:                     MFRC522_Wr(0x01, 0x00);
  1926   000082  0E00               	movlw	0
  1927   000084  6E0C               	movwf	MFRC522_Wr@value^0,c
  1928   000086  0E01               	movlw	1
  1929   000088  EC6B  F006         	call	_MFRC522_Wr
  1930   00008C                     l3344:
  1931                           
  1932                           ;TAD_RFID.c: 364:                     substate = 5;
  1933   00008C  0E05               	movlw	5
  1934   00008E  6E74               	movwf	motor_RFID@substate^0,c
  1935                           
  1936                           ;TAD_RFID.c: 365:                     break;
  1937   000090  EF98  F002         	goto	l410
  1938   000094                     l3346:
  1939                           
  1940                           ;TAD_RFID.c: 368:                     MFRC522_Wr(0x09, TagType);
  1941   000094  C06E  F00C         	movff	motor_RFID@TagType,MFRC522_Wr@value
  1942   000098  0E09               	movlw	9
  1943   00009A  EC6B  F006         	call	_MFRC522_Wr
  1944   00009E                     l3348:
  1945                           
  1946                           ;TAD_RFID.c: 369:                     substate = 6;
  1947   00009E  0E06               	movlw	6
  1948   0000A0  6E74               	movwf	motor_RFID@substate^0,c
  1949                           
  1950                           ;TAD_RFID.c: 370:                     break;
  1951   0000A2  EF98  F002         	goto	l410
  1952   0000A6                     l3350:
  1953                           
  1954                           ;TAD_RFID.c: 373:                     MFRC522_Wr(0x01, 0x0C);
  1955   0000A6  0E0C               	movlw	12
  1956   0000A8  6E0C               	movwf	MFRC522_Wr@value^0,c
  1957   0000AA  0E01               	movlw	1
  1958   0000AC  EC6B  F006         	call	_MFRC522_Wr
  1959   0000B0                     l3352:
  1960                           
  1961                           ;TAD_RFID.c: 374:                     substate = 7;
  1962   0000B0  0E07               	movlw	7
  1963   0000B2  6E74               	movwf	motor_RFID@substate^0,c
  1964                           
  1965                           ;TAD_RFID.c: 375:                     break;
  1966   0000B4  EF98  F002         	goto	l410
  1967   0000B8                     l3354:
  1968                           
  1969                           ;TAD_RFID.c: 378:                     MFRC522_Set_Bit(0x0D, 0x80);
  1970   0000B8  0E80               	movlw	128
  1971   0000BA  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  1972   0000BC  0E0D               	movlw	13
  1973   0000BE  EC84  F009         	call	_MFRC522_Set_Bit
  1974   0000C2                     
  1975                           ;TAD_RFID.c: 379:                     i = 0xFF;
  1976   0000C2  6870               	setf	motor_RFID@i^0,c
  1977   0000C4                     l3358:
  1978                           
  1979                           ;TAD_RFID.c: 380:                     substate = 8;
  1980   0000C4  0E08               	movlw	8
  1981   0000C6  6E74               	movwf	motor_RFID@substate^0,c
  1982                           
  1983                           ;TAD_RFID.c: 381:                     break;
  1984   0000C8  EF98  F002         	goto	l410
  1985   0000CC                     l3360:
  1986                           
  1987                           ;TAD_RFID.c: 384:                     n = MFRC522_Rd(0x04);
  1988   0000CC  0E04               	movlw	4
  1989   0000CE  ECBF  F006         	call	_MFRC522_Rd
  1990   0000D2  6E71               	movwf	motor_RFID@n^0,c
  1991   0000D4                     
  1992                           ;TAD_RFID.c: 385:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  1993   0000D4  B071               	btfsc	motor_RFID@n^0,0,c
  1994   0000D6  EF6F  F000         	goto	u2521
  1995   0000DA  EF71  F000         	goto	u2520
  1996   0000DE                     u2521:
  1997   0000DE  EF7E  F000         	goto	l3368
  1998   0000E2                     u2520:
  1999   0000E2  5071               	movf	motor_RFID@n^0,w,c
  2000   0000E4  1472               	andwf	motor_RFID@waitIRq^0,w,c
  2001   0000E6  0900               	iorlw	0
  2002   0000E8  A4D8               	btfss	status,2,c
  2003   0000EA  EF79  F000         	goto	u2531
  2004   0000EE  EF7B  F000         	goto	u2530
  2005   0000F2                     u2531:
  2006   0000F2  EF7E  F000         	goto	l3368
  2007   0000F6                     u2530:
  2008   0000F6  2E70               	decfsz	motor_RFID@i^0,f,c
  2009   0000F8  EF98  F002         	goto	l410
  2010   0000FC                     l3368:
  2011                           
  2012                           ;TAD_RFID.c: 386:                         substate = 9;
  2013   0000FC  0E09               	movlw	9
  2014   0000FE  6E74               	movwf	motor_RFID@substate^0,c
  2015   000100  EF98  F002         	goto	l410
  2016   000104                     l3370:
  2017                           
  2018                           ;TAD_RFID.c: 391:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2019   000104  0E80               	movlw	128
  2020   000106  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2021   000108  0E0D               	movlw	13
  2022   00010A  EC4B  F009         	call	_MFRC522_Clear_Bit
  2023   00010E                     l3372:
  2024                           
  2025                           ;TAD_RFID.c: 392:                     substate = 10;
  2026   00010E  0E0A               	movlw	10
  2027   000110  6E74               	movwf	motor_RFID@substate^0,c
  2028                           
  2029                           ;TAD_RFID.c: 393:                     break;
  2030   000112  EF98  F002         	goto	l410
  2031   000116                     l3374:
  2032                           
  2033                           ;TAD_RFID.c: 396:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2034   000116  5070               	movf	motor_RFID@i^0,w,c
  2035   000118  B4D8               	btfsc	status,2,c
  2036   00011A  EF91  F000         	goto	u2541
  2037   00011E  EF93  F000         	goto	u2540
  2038   000122                     u2541:
  2039   000122  EFDD  F000         	goto	l3390
  2040   000126                     u2540:
  2041   000126  0E06               	movlw	6
  2042   000128  ECBF  F006         	call	_MFRC522_Rd
  2043   00012C  6E4F               	movwf	??_motor_RFID^0,c
  2044   00012E  0E1B               	movlw	27
  2045   000130  164F               	andwf	??_motor_RFID^0,f,c
  2046   000132  A4D8               	btfss	status,2,c
  2047   000134  EF9E  F000         	goto	u2551
  2048   000138  EFA0  F000         	goto	u2550
  2049   00013C                     u2551:
  2050   00013C  EFDD  F000         	goto	l3390
  2051   000140                     u2550:
  2052   000140                     
  2053                           ;TAD_RFID.c: 397:                         unsigned char fifoLevel = MFRC522_Rd(0x0A);
  2054   000140  0E0A               	movlw	10
  2055   000142  ECBF  F006         	call	_MFRC522_Rd
  2056   000146  6E53               	movwf	motor_RFID@fifoLevel^0,c
  2057                           
  2058                           ;TAD_RFID.c: 398:                         unsigned char lastBitsVal = MFRC522_Rd(0x0C) &
      +                           0x07;
  2059   000148  0E0C               	movlw	12
  2060   00014A  ECBF  F006         	call	_MFRC522_Rd
  2061   00014E  0B07               	andlw	7
  2062   000150  6E54               	movwf	motor_RFID@lastBitsVal^0,c
  2063   000152                     
  2064                           ;TAD_RFID.c: 399:                         unsigned backBitsCalc;;TAD_RFID.c: 400:       
      +                                            if (lastBitsVal)
  2065   000152  5054               	movf	motor_RFID@lastBitsVal^0,w,c
  2066   000154  B4D8               	btfsc	status,2,c
  2067   000156  EFAF  F000         	goto	u2561
  2068   00015A  EFB1  F000         	goto	u2560
  2069   00015E                     u2561:
  2070   00015E  EFC9  F000         	goto	l3384
  2071   000162                     u2560:
  2072   000162                     
  2073                           ;TAD_RFID.c: 401:                             backBitsCalc = (fifoLevel - 1) * 8 + lastB
      +                          itsVal;
  2074   000162  5054               	movf	motor_RFID@lastBitsVal^0,w,c
  2075   000164  C053  F04F         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2076   000168  6A50               	clrf	(??_motor_RFID+1)^0,c
  2077   00016A  90D8               	bcf	status,0,c
  2078   00016C  364F               	rlcf	??_motor_RFID^0,f,c
  2079   00016E  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  2080   000170  90D8               	bcf	status,0,c
  2081   000172  364F               	rlcf	??_motor_RFID^0,f,c
  2082   000174  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  2083   000176  90D8               	bcf	status,0,c
  2084   000178  364F               	rlcf	??_motor_RFID^0,f,c
  2085   00017A  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  2086   00017C  264F               	addwf	??_motor_RFID^0,f,c
  2087   00017E  0E00               	movlw	0
  2088   000180  2250               	addwfc	(??_motor_RFID+1)^0,f,c
  2089   000182  0EF8               	movlw	248
  2090   000184  244F               	addwf	??_motor_RFID^0,w,c
  2091   000186  6E51               	movwf	motor_RFID@backBitsCalc^0,c
  2092   000188  0EFF               	movlw	255
  2093   00018A  2050               	addwfc	(??_motor_RFID+1)^0,w,c
  2094   00018C  6E52               	movwf	(motor_RFID@backBitsCalc+1)^0,c
  2095   00018E  EFCF  F000         	goto	l3386
  2096   000192                     l3384:
  2097                           
  2098                           ;TAD_RFID.c: 403:                             backBitsCalc = fifoLevel * 8;
  2099   000192  5053               	movf	motor_RFID@fifoLevel^0,w,c
  2100   000194  0D08               	mullw	8
  2101   000196  CFF3 F051          	movff	prodl,motor_RFID@backBitsCalc
  2102   00019A  CFF4 F052          	movff	prodh,motor_RFID@backBitsCalc+1
  2103   00019E                     l3386:
  2104                           
  2105                           ;TAD_RFID.c: 405:                         if (backBitsCalc == 0x10) {
  2106   00019E  0E10               	movlw	16
  2107   0001A0  1851               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2108   0001A2  1052               	iorwf	(motor_RFID@backBitsCalc+1)^0,w,c
  2109   0001A4  A4D8               	btfss	status,2,c
  2110   0001A6  EFD7  F000         	goto	u2571
  2111   0001AA  EFD9  F000         	goto	u2570
  2112   0001AE                     u2571:
  2113   0001AE  EFDD  F000         	goto	l3390
  2114   0001B2                     u2570:
  2115   0001B2                     l3388:
  2116                           
  2117                           ;TAD_RFID.c: 406:                             substate = 11;
  2118   0001B2  0E0B               	movlw	11
  2119   0001B4  6E74               	movwf	motor_RFID@substate^0,c
  2120                           
  2121                           ;TAD_RFID.c: 407:                         } else {
  2122   0001B6  EF98  F002         	goto	l410
  2123   0001BA                     l3390:
  2124                           
  2125                           ;TAD_RFID.c: 408:                             substate = 12;
  2126   0001BA  0E0C               	movlw	12
  2127   0001BC  6E74               	movwf	motor_RFID@substate^0,c
  2128   0001BE  EF98  F002         	goto	l410
  2129   0001C2                     l3394:
  2130                           
  2131                           ;TAD_RFID.c: 416:                     state = 1;
  2132   0001C2  0E01               	movlw	1
  2133   0001C4  6E75               	movwf	motor_RFID@state^0,c
  2134   0001C6                     l3396:
  2135                           
  2136                           ;TAD_RFID.c: 417:                     substate = 0;
  2137   0001C6  6A74               	clrf	motor_RFID@substate^0,c
  2138                           
  2139                           ;TAD_RFID.c: 418:                     break;
  2140   0001C8  EF98  F002         	goto	l410
  2141   0001CC                     l370:
  2142                           
  2143                           ;TAD_RFID.c: 421:                     state = 0;
  2144   0001CC  6A75               	clrf	motor_RFID@state^0,c
  2145                           
  2146                           ;TAD_RFID.c: 422:                     substate = 0;
  2147   0001CE  6A74               	clrf	motor_RFID@substate^0,c
  2148                           
  2149                           ;TAD_RFID.c: 423:                     break;
  2150   0001D0  EF98  F002         	goto	l410
  2151   0001D4                     l3400:
  2152   0001D4  5074               	movf	motor_RFID@substate^0,w,c
  2153                           
  2154                           ; Switch size 1, requested type "simple"
  2155                           ; Number of cases is 13, Range of values is 0 to 12
  2156                           ; switch strategies available:
  2157                           ; Name         Instructions Cycles
  2158                           ; simple_byte           40    21 (average)
  2159                           ;	Chosen strategy is simple_byte
  2160   0001D6  0A00               	xorlw	0	; case 0
  2161   0001D8  B4D8               	btfsc	status,2,c
  2162   0001DA  EF17  F000         	goto	l3322
  2163   0001DE  0A01               	xorlw	1	; case 1
  2164   0001E0  B4D8               	btfsc	status,2,c
  2165   0001E2  EF22  F000         	goto	l3328
  2166   0001E6  0A03               	xorlw	3	; case 2
  2167   0001E8  B4D8               	btfsc	status,2,c
  2168   0001EA  EF2F  F000         	goto	l3334
  2169   0001EE  0A01               	xorlw	1	; case 3
  2170   0001F0  B4D8               	btfsc	status,2,c
  2171   0001F2  EF38  F000         	goto	l3338
  2172   0001F6  0A07               	xorlw	7	; case 4
  2173   0001F8  B4D8               	btfsc	status,2,c
  2174   0001FA  EF41  F000         	goto	l3342
  2175   0001FE  0A01               	xorlw	1	; case 5
  2176   000200  B4D8               	btfsc	status,2,c
  2177   000202  EF4A  F000         	goto	l3346
  2178   000206  0A03               	xorlw	3	; case 6
  2179   000208  B4D8               	btfsc	status,2,c
  2180   00020A  EF53  F000         	goto	l3350
  2181   00020E  0A01               	xorlw	1	; case 7
  2182   000210  B4D8               	btfsc	status,2,c
  2183   000212  EF5C  F000         	goto	l3354
  2184   000216  0A0F               	xorlw	15	; case 8
  2185   000218  B4D8               	btfsc	status,2,c
  2186   00021A  EF66  F000         	goto	l3360
  2187   00021E  0A01               	xorlw	1	; case 9
  2188   000220  B4D8               	btfsc	status,2,c
  2189   000222  EF82  F000         	goto	l3370
  2190   000226  0A03               	xorlw	3	; case 10
  2191   000228  B4D8               	btfsc	status,2,c
  2192   00022A  EF8B  F000         	goto	l3374
  2193   00022E  0A01               	xorlw	1	; case 11
  2194   000230  B4D8               	btfsc	status,2,c
  2195   000232  EFE1  F000         	goto	l3394
  2196   000236  0A07               	xorlw	7	; case 12
  2197   000238  B4D8               	btfsc	status,2,c
  2198   00023A  EFE6  F000         	goto	l370
  2199   00023E  EF98  F002         	goto	l410
  2200   000242                     l3402:
  2201                           
  2202                           ;TAD_RFID.c: 431:                     MFRC522_Wr(0x0D, 0x00);
  2203   000242  0E00               	movlw	0
  2204   000244  6E0C               	movwf	MFRC522_Wr@value^0,c
  2205   000246  0E0D               	movlw	13
  2206   000248  EC6B  F006         	call	_MFRC522_Wr
  2207   00024C                     
  2208                           ;TAD_RFID.c: 432:                     UID[0] = 0x93;
  2209   00024C  0E93               	movlw	147
  2210   00024E  6E55               	movwf	motor_RFID@UID^0,c
  2211   000250                     
  2212                           ;TAD_RFID.c: 433:                     UID[1] = 0x20;
  2213   000250  0E20               	movlw	32
  2214   000252  6E56               	movwf	(motor_RFID@UID+1)^0,c
  2215   000254  EF1E  F000         	goto	l3326
  2216   000258                     l3410:
  2217                           
  2218                           ;TAD_RFID.c: 438:                     MFRC522_Clear_Bit(0x08, 0x08);
  2219   000258  0E08               	movlw	8
  2220   00025A  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2221   00025C  0E08               	movlw	8
  2222   00025E  EC4B  F009         	call	_MFRC522_Clear_Bit
  2223   000262  EF2B  F000         	goto	l3332
  2224   000266                     l3414:
  2225                           
  2226                           ;TAD_RFID.c: 443:                     irqEn = 0x77;
  2227   000266  0E77               	movlw	119
  2228   000268  6E73               	movwf	motor_RFID@irqEn^0,c
  2229                           
  2230                           ;TAD_RFID.c: 444:                     waitIRq = 0x30;
  2231   00026A  0E30               	movlw	48
  2232   00026C  6E72               	movwf	motor_RFID@waitIRq^0,c
  2233   00026E                     
  2234                           ;TAD_RFID.c: 445:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2235   00026E  0EF7               	movlw	247
  2236   000270  6E0C               	movwf	MFRC522_Wr@value^0,c
  2237   000272  0E02               	movlw	2
  2238   000274  EC6B  F006         	call	_MFRC522_Wr
  2239   000278  EF34  F000         	goto	l3336
  2240   00027C                     l3420:
  2241                           
  2242                           ;TAD_RFID.c: 450:                     MFRC522_Clear_Bit(0x04, 0x80);
  2243   00027C  0E80               	movlw	128
  2244   00027E  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2245   000280  0E04               	movlw	4
  2246   000282  EC4B  F009         	call	_MFRC522_Clear_Bit
  2247   000286  EF3D  F000         	goto	l3340
  2248   00028A                     l3424:
  2249                           
  2250                           ;TAD_RFID.c: 455:                     MFRC522_Set_Bit(0x0A, 0x80);
  2251   00028A  0E80               	movlw	128
  2252   00028C  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2253   00028E  0E0A               	movlw	10
  2254   000290  EC84  F009         	call	_MFRC522_Set_Bit
  2255   000294  EF46  F000         	goto	l3344
  2256   000298                     l3428:
  2257                           
  2258                           ;TAD_RFID.c: 460:                     MFRC522_Wr(0x01, 0x00);
  2259   000298  0E00               	movlw	0
  2260   00029A  6E0C               	movwf	MFRC522_Wr@value^0,c
  2261   00029C  0E01               	movlw	1
  2262   00029E  EC6B  F006         	call	_MFRC522_Wr
  2263   0002A2  EF4F  F000         	goto	l3348
  2264   0002A6                     l3432:
  2265                           
  2266                           ;TAD_RFID.c: 465:                     MFRC522_Wr(0x09, UID[0]);
  2267   0002A6  C055  F00C         	movff	motor_RFID@UID,MFRC522_Wr@value
  2268   0002AA  0E09               	movlw	9
  2269   0002AC  EC6B  F006         	call	_MFRC522_Wr
  2270                           
  2271                           ;TAD_RFID.c: 466:                     MFRC522_Wr(0x09, UID[1]);
  2272   0002B0  C056  F00C         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2273   0002B4  0E09               	movlw	9
  2274   0002B6  EC6B  F006         	call	_MFRC522_Wr
  2275   0002BA  EF58  F000         	goto	l3352
  2276   0002BE                     l3436:
  2277                           
  2278                           ;TAD_RFID.c: 471:                     MFRC522_Wr(0x01, 0x0C);
  2279   0002BE  0E0C               	movlw	12
  2280   0002C0  6E0C               	movwf	MFRC522_Wr@value^0,c
  2281   0002C2  0E01               	movlw	1
  2282   0002C4  EC6B  F006         	call	_MFRC522_Wr
  2283   0002C8  EF62  F000         	goto	l3358
  2284   0002CC                     l3440:
  2285                           
  2286                           ;TAD_RFID.c: 476:                     MFRC522_Set_Bit(0x0D, 0x80);
  2287   0002CC  0E80               	movlw	128
  2288   0002CE  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2289   0002D0  0E0D               	movlw	13
  2290   0002D2  EC84  F009         	call	_MFRC522_Set_Bit
  2291   0002D6                     
  2292                           ;TAD_RFID.c: 477:                     i = 0xFF;
  2293   0002D6  6870               	setf	motor_RFID@i^0,c
  2294   0002D8  EF7E  F000         	goto	l3368
  2295   0002DC                     l3446:
  2296                           
  2297                           ;TAD_RFID.c: 482:                     n = MFRC522_Rd(0x04);
  2298   0002DC  0E04               	movlw	4
  2299   0002DE  ECBF  F006         	call	_MFRC522_Rd
  2300   0002E2  6E71               	movwf	motor_RFID@n^0,c
  2301   0002E4                     
  2302                           ;TAD_RFID.c: 483:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2303   0002E4  B071               	btfsc	motor_RFID@n^0,0,c
  2304   0002E6  EF77  F001         	goto	u2581
  2305   0002EA  EF79  F001         	goto	u2580
  2306   0002EE                     u2581:
  2307   0002EE  EF87  F000         	goto	l3372
  2308   0002F2                     u2580:
  2309   0002F2  5071               	movf	motor_RFID@n^0,w,c
  2310   0002F4  1472               	andwf	motor_RFID@waitIRq^0,w,c
  2311   0002F6  0900               	iorlw	0
  2312   0002F8  A4D8               	btfss	status,2,c
  2313   0002FA  EF81  F001         	goto	u2591
  2314   0002FE  EF83  F001         	goto	u2590
  2315   000302                     u2591:
  2316   000302  EF87  F000         	goto	l3372
  2317   000306                     u2590:
  2318   000306  2E70               	decfsz	motor_RFID@i^0,f,c
  2319   000308  EF98  F002         	goto	l410
  2320   00030C  EF87  F000         	goto	l3372
  2321   000310                     l3456:
  2322                           
  2323                           ;TAD_RFID.c: 489:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2324   000310  0E80               	movlw	128
  2325   000312  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2326   000314  0E0D               	movlw	13
  2327   000316  EC4B  F009         	call	_MFRC522_Clear_Bit
  2328   00031A  EFD9  F000         	goto	l3388
  2329   00031E                     l3460:
  2330                           
  2331                           ;TAD_RFID.c: 494:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2332   00031E  5070               	movf	motor_RFID@i^0,w,c
  2333   000320  B4D8               	btfsc	status,2,c
  2334   000322  EF95  F001         	goto	u2601
  2335   000326  EF97  F001         	goto	u2600
  2336   00032A                     u2601:
  2337   00032A  EFE6  F000         	goto	l370
  2338   00032E                     u2600:
  2339   00032E  0E06               	movlw	6
  2340   000330  ECBF  F006         	call	_MFRC522_Rd
  2341   000334  6E4F               	movwf	??_motor_RFID^0,c
  2342   000336  0E1B               	movlw	27
  2343   000338  164F               	andwf	??_motor_RFID^0,f,c
  2344   00033A  A4D8               	btfss	status,2,c
  2345   00033C  EFA2  F001         	goto	u2611
  2346   000340  EFA4  F001         	goto	u2610
  2347   000344                     u2611:
  2348   000344  EFE6  F000         	goto	l370
  2349   000348                     u2610:
  2350   000348                     
  2351                           ;TAD_RFID.c: 496:                         UID[0] = MFRC522_Rd(0x09);
  2352   000348  0E09               	movlw	9
  2353   00034A  ECBF  F006         	call	_MFRC522_Rd
  2354   00034E  6E55               	movwf	motor_RFID@UID^0,c
  2355                           
  2356                           ;TAD_RFID.c: 497:                         UID[1] = MFRC522_Rd(0x09);
  2357   000350  0E09               	movlw	9
  2358   000352  ECBF  F006         	call	_MFRC522_Rd
  2359   000356  6E56               	movwf	(motor_RFID@UID+1)^0,c
  2360   000358  EFDD  F000         	goto	l3390
  2361   00035C                     l3468:
  2362                           
  2363                           ;TAD_RFID.c: 507:                     UID[2] = MFRC522_Rd(0x09);
  2364   00035C  0E09               	movlw	9
  2365   00035E  ECBF  F006         	call	_MFRC522_Rd
  2366   000362  6E57               	movwf	(motor_RFID@UID+2)^0,c
  2367                           
  2368                           ;TAD_RFID.c: 508:                     UID[3] = MFRC522_Rd(0x09);
  2369   000364  0E09               	movlw	9
  2370   000366  ECBF  F006         	call	_MFRC522_Rd
  2371   00036A  6E58               	movwf	(motor_RFID@UID+3)^0,c
  2372   00036C                     
  2373                           ;TAD_RFID.c: 509:                     substate = 13;
  2374   00036C  0E0D               	movlw	13
  2375   00036E  6E74               	movwf	motor_RFID@substate^0,c
  2376                           
  2377                           ;TAD_RFID.c: 510:                     break;
  2378   000370  EF98  F002         	goto	l410
  2379   000374                     l3472:
  2380                           
  2381                           ;TAD_RFID.c: 513:                     UID[4] = MFRC522_Rd(0x09);
  2382   000374  0E09               	movlw	9
  2383   000376  ECBF  F006         	call	_MFRC522_Rd
  2384   00037A  6E59               	movwf	(motor_RFID@UID+4)^0,c
  2385   00037C                     
  2386                           ;TAD_RFID.c: 514:                     UID[5] = 0;
  2387   00037C  6A5A               	clrf	(motor_RFID@UID+5)^0,c
  2388   00037E                     
  2389                           ;TAD_RFID.c: 515:                     substate = 14;
  2390   00037E  0E0E               	movlw	14
  2391   000380  6E74               	movwf	motor_RFID@substate^0,c
  2392                           
  2393                           ;TAD_RFID.c: 516:                     break;
  2394   000382  EF98  F002         	goto	l410
  2395   000386                     l3478:
  2396                           
  2397                           ;TAD_RFID.c: 519:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  2398   000386  5056               	movf	(motor_RFID@UID+1)^0,w,c
  2399   000388  1857               	xorwf	(motor_RFID@UID+2)^0,w,c
  2400   00038A  1858               	xorwf	(motor_RFID@UID+3)^0,w,c
  2401   00038C  1855               	xorwf	motor_RFID@UID^0,w,c
  2402   00038E  6E6D               	movwf	motor_RFID@checksum^0,c
  2403   000390                     
  2404                           ;TAD_RFID.c: 521:                     allZero = 1;
  2405   000390  0E01               	movlw	1
  2406   000392  6E6C               	movwf	motor_RFID@allZero^0,c
  2407   000394                     
  2408                           ;TAD_RFID.c: 522:                     substate = 15;
  2409   000394  0E0F               	movlw	15
  2410   000396  6E74               	movwf	motor_RFID@substate^0,c
  2411                           
  2412                           ;TAD_RFID.c: 523:                     break;
  2413   000398  EF98  F002         	goto	l410
  2414   00039C                     l3484:
  2415                           
  2416                           ;TAD_RFID.c: 526:                     if (UID[0] != 0 || UID[1] != 0) {
  2417   00039C  5055               	movf	motor_RFID@UID^0,w,c
  2418   00039E  A4D8               	btfss	status,2,c
  2419   0003A0  EFD4  F001         	goto	u2621
  2420   0003A4  EFD6  F001         	goto	u2620
  2421   0003A8                     u2621:
  2422   0003A8  EFDE  F001         	goto	l398
  2423   0003AC                     u2620:
  2424   0003AC  5056               	movf	(motor_RFID@UID+1)^0,w,c
  2425   0003AE  B4D8               	btfsc	status,2,c
  2426   0003B0  EFDC  F001         	goto	u2631
  2427   0003B4  EFDE  F001         	goto	u2630
  2428   0003B8                     u2631:
  2429   0003B8  EFDF  F001         	goto	l3488
  2430   0003BC                     u2630:
  2431   0003BC                     l398:
  2432                           
  2433                           ;TAD_RFID.c: 527:                         allZero = 0;
  2434   0003BC  6A6C               	clrf	motor_RFID@allZero^0,c
  2435   0003BE                     l3488:
  2436                           
  2437                           ;TAD_RFID.c: 529:                     substate = 16;
  2438   0003BE  0E10               	movlw	16
  2439   0003C0  6E74               	movwf	motor_RFID@substate^0,c
  2440                           
  2441                           ;TAD_RFID.c: 530:                     break;
  2442   0003C2  EF98  F002         	goto	l410
  2443   0003C6                     l3490:
  2444                           
  2445                           ;TAD_RFID.c: 533:                     if (UID[2] != 0 || UID[3] != 0) {
  2446   0003C6  5057               	movf	(motor_RFID@UID+2)^0,w,c
  2447   0003C8  A4D8               	btfss	status,2,c
  2448   0003CA  EFE9  F001         	goto	u2641
  2449   0003CE  EFEB  F001         	goto	u2640
  2450   0003D2                     u2641:
  2451   0003D2  EFF3  F001         	goto	l402
  2452   0003D6                     u2640:
  2453   0003D6  5058               	movf	(motor_RFID@UID+3)^0,w,c
  2454   0003D8  B4D8               	btfsc	status,2,c
  2455   0003DA  EFF1  F001         	goto	u2651
  2456   0003DE  EFF3  F001         	goto	u2650
  2457   0003E2                     u2651:
  2458   0003E2  EFF4  F001         	goto	l3494
  2459   0003E6                     u2650:
  2460   0003E6                     l402:
  2461                           
  2462                           ;TAD_RFID.c: 534:                         allZero = 0;
  2463   0003E6  6A6C               	clrf	motor_RFID@allZero^0,c
  2464   0003E8                     l3494:
  2465                           
  2466                           ;TAD_RFID.c: 536:                     substate = 17;
  2467   0003E8  0E11               	movlw	17
  2468   0003EA  6E74               	movwf	motor_RFID@substate^0,c
  2469                           
  2470                           ;TAD_RFID.c: 537:                     break;
  2471   0003EC  EF98  F002         	goto	l410
  2472   0003F0                     l3496:
  2473                           
  2474                           ;TAD_RFID.c: 540:                     if (checksum != UID[4] || allZero) {
  2475   0003F0  506D               	movf	motor_RFID@checksum^0,w,c
  2476   0003F2  1859               	xorwf	(motor_RFID@UID+4)^0,w,c
  2477   0003F4  A4D8               	btfss	status,2,c
  2478   0003F6  EFFF  F001         	goto	u2661
  2479   0003FA  EF01  F002         	goto	u2660
  2480   0003FE                     u2661:
  2481   0003FE  EFE6  F000         	goto	l370
  2482   000402                     u2660:
  2483   000402  506C               	movf	motor_RFID@allZero^0,w,c
  2484   000404  B4D8               	btfsc	status,2,c
  2485   000406  EF07  F002         	goto	u2671
  2486   00040A  EF09  F002         	goto	u2670
  2487   00040E                     u2671:
  2488   00040E  EF0B  F002         	goto	l3500
  2489   000412                     u2670:
  2490   000412  EFE6  F000         	goto	l370
  2491   000416                     l3500:
  2492                           
  2493                           ;TAD_RFID.c: 546:                         substate = 18;
  2494   000416  0E12               	movlw	18
  2495   000418  6E74               	movwf	motor_RFID@substate^0,c
  2496   00041A  EF98  F002         	goto	l410
  2497   00041E                     l3502:
  2498                           
  2499                           ;TAD_RFID.c: 551:                     sprintf(buffer, "UID: %02X%02X%02X%02X%02X%02X\r\n
      +                          ", UID[0], UID[1], UID[2], UID[3], UID[4], UID[5]);
  2500   00041E  0E94               	movlw	low motor_RFID@buffer
  2501   000420  6E34               	movwf	sprintf@s^0,c
  2502   000422  0E2B               	movlw	low STR_4
  2503   000424  6E35               	movwf	sprintf@fmt^0,c
  2504   000426  0E1F               	movlw	high STR_4
  2505   000428  6E36               	movwf	(sprintf@fmt+1)^0,c
  2506   00042A  C055  F037         	movff	motor_RFID@UID,?_sprintf+3
  2507   00042E  6A38               	clrf	(?_sprintf+4)^0,c
  2508   000430  C056  F039         	movff	motor_RFID@UID+1,?_sprintf+5
  2509   000434  6A3A               	clrf	(?_sprintf+6)^0,c
  2510   000436  C057  F03B         	movff	motor_RFID@UID+2,?_sprintf+7
  2511   00043A  6A3C               	clrf	(?_sprintf+8)^0,c
  2512   00043C  C058  F03D         	movff	motor_RFID@UID+3,?_sprintf+9
  2513   000440  6A3E               	clrf	(?_sprintf+10)^0,c
  2514   000442  C059  F03F         	movff	motor_RFID@UID+4,?_sprintf+11
  2515   000446  6A40               	clrf	(?_sprintf+12)^0,c
  2516   000448  C05A  F041         	movff	motor_RFID@UID+5,?_sprintf+13
  2517   00044C  6A42               	clrf	(?_sprintf+14)^0,c
  2518   00044E  EC9A  F008         	call	_sprintf	;wreg free
  2519   000452                     
  2520                           ;TAD_RFID.c: 552:                     Terminal_SendString(buffer);
  2521   000452  0E94               	movlw	low motor_RFID@buffer
  2522   000454  6E05               	movwf	Terminal_SendString@str^0,c
  2523   000456  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2524   000458  EC55  F007         	call	_Terminal_SendString	;wreg free
  2525   00045C                     
  2526                           ;TAD_RFID.c: 553:                     substate = 19;
  2527   00045C  0E13               	movlw	19
  2528   00045E  6E74               	movwf	motor_RFID@substate^0,c
  2529                           
  2530                           ;TAD_RFID.c: 554:                     break;
  2531   000460  EF98  F002         	goto	l410
  2532   000464                     l3508:
  2533                           
  2534                           ;TAD_RFID.c: 557:                     MFRC522_Wr(0x0D, 0x00);
  2535   000464  0E00               	movlw	0
  2536   000466  6E0C               	movwf	MFRC522_Wr@value^0,c
  2537   000468  0E0D               	movlw	13
  2538   00046A  EC6B  F006         	call	_MFRC522_Wr
  2539   00046E                     
  2540                           ;TAD_RFID.c: 558:                     state = 0;
  2541   00046E  6A75               	clrf	motor_RFID@state^0,c
  2542   000470  EFE3  F000         	goto	l3396
  2543   000474                     l3516:
  2544   000474  5074               	movf	motor_RFID@substate^0,w,c
  2545                           
  2546                           ; Switch size 1, requested type "simple"
  2547                           ; Number of cases is 20, Range of values is 0 to 19
  2548                           ; switch strategies available:
  2549                           ; Name         Instructions Cycles
  2550                           ; simple_byte           61    31 (average)
  2551                           ;	Chosen strategy is simple_byte
  2552   000476  0A00               	xorlw	0	; case 0
  2553   000478  B4D8               	btfsc	status,2,c
  2554   00047A  EF21  F001         	goto	l3402
  2555   00047E  0A01               	xorlw	1	; case 1
  2556   000480  B4D8               	btfsc	status,2,c
  2557   000482  EF2C  F001         	goto	l3410
  2558   000486  0A03               	xorlw	3	; case 2
  2559   000488  B4D8               	btfsc	status,2,c
  2560   00048A  EF33  F001         	goto	l3414
  2561   00048E  0A01               	xorlw	1	; case 3
  2562   000490  B4D8               	btfsc	status,2,c
  2563   000492  EF3E  F001         	goto	l3420
  2564   000496  0A07               	xorlw	7	; case 4
  2565   000498  B4D8               	btfsc	status,2,c
  2566   00049A  EF45  F001         	goto	l3424
  2567   00049E  0A01               	xorlw	1	; case 5
  2568   0004A0  B4D8               	btfsc	status,2,c
  2569   0004A2  EF4C  F001         	goto	l3428
  2570   0004A6  0A03               	xorlw	3	; case 6
  2571   0004A8  B4D8               	btfsc	status,2,c
  2572   0004AA  EF53  F001         	goto	l3432
  2573   0004AE  0A01               	xorlw	1	; case 7
  2574   0004B0  B4D8               	btfsc	status,2,c
  2575   0004B2  EF5F  F001         	goto	l3436
  2576   0004B6  0A0F               	xorlw	15	; case 8
  2577   0004B8  B4D8               	btfsc	status,2,c
  2578   0004BA  EF66  F001         	goto	l3440
  2579   0004BE  0A01               	xorlw	1	; case 9
  2580   0004C0  B4D8               	btfsc	status,2,c
  2581   0004C2  EF6E  F001         	goto	l3446
  2582   0004C6  0A03               	xorlw	3	; case 10
  2583   0004C8  B4D8               	btfsc	status,2,c
  2584   0004CA  EF88  F001         	goto	l3456
  2585   0004CE  0A01               	xorlw	1	; case 11
  2586   0004D0  B4D8               	btfsc	status,2,c
  2587   0004D2  EF8F  F001         	goto	l3460
  2588   0004D6  0A07               	xorlw	7	; case 12
  2589   0004D8  B4D8               	btfsc	status,2,c
  2590   0004DA  EFAE  F001         	goto	l3468
  2591   0004DE  0A01               	xorlw	1	; case 13
  2592   0004E0  B4D8               	btfsc	status,2,c
  2593   0004E2  EFBA  F001         	goto	l3472
  2594   0004E6  0A03               	xorlw	3	; case 14
  2595   0004E8  B4D8               	btfsc	status,2,c
  2596   0004EA  EFC3  F001         	goto	l3478
  2597   0004EE  0A01               	xorlw	1	; case 15
  2598   0004F0  B4D8               	btfsc	status,2,c
  2599   0004F2  EFCE  F001         	goto	l3484
  2600   0004F6  0A1F               	xorlw	31	; case 16
  2601   0004F8  B4D8               	btfsc	status,2,c
  2602   0004FA  EFE3  F001         	goto	l3490
  2603   0004FE  0A01               	xorlw	1	; case 17
  2604   000500  B4D8               	btfsc	status,2,c
  2605   000502  EFF8  F001         	goto	l3496
  2606   000506  0A03               	xorlw	3	; case 18
  2607   000508  B4D8               	btfsc	status,2,c
  2608   00050A  EF0F  F002         	goto	l3502
  2609   00050E  0A01               	xorlw	1	; case 19
  2610   000510  B4D8               	btfsc	status,2,c
  2611   000512  EF32  F002         	goto	l3508
  2612   000516  EF98  F002         	goto	l410
  2613   00051A                     l3520:
  2614   00051A  5075               	movf	motor_RFID@state^0,w,c
  2615                           
  2616                           ; Switch size 1, requested type "simple"
  2617                           ; Number of cases is 2, Range of values is 0 to 1
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte            7     4 (average)
  2621                           ;	Chosen strategy is simple_byte
  2622   00051C  0A00               	xorlw	0	; case 0
  2623   00051E  B4D8               	btfsc	status,2,c
  2624   000520  EFEA  F000         	goto	l3400
  2625   000524  0A01               	xorlw	1	; case 1
  2626   000526  B4D8               	btfsc	status,2,c
  2627   000528  EF3A  F002         	goto	l3516
  2628   00052C  EF98  F002         	goto	l410
  2629   000530                     l410:
  2630   000530  0012               	return		;funcret
  2631   000532                     __end_of_motor_RFID:
  2632                           	callstack 0
  2633                           
  2634 ;; *************** function _sprintf *****************
  2635 ;; Defined at:
  2636 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  s               1   51[COMRAM] PTR unsigned char 
  2639 ;;		 -> motor_RFID@buffer(50), ReadRFID_NoCooperatiu@buffer(50), 
  2640 ;;  fmt             2   52[COMRAM] PTR const unsigned char 
  2641 ;;		 -> STR_4(32), STR_2(5), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  f              11   67[COMRAM] struct _IO_FILE
  2644 ;;  ret             2    0        int 
  2645 ;;  ap              1   66[COMRAM] PTR void [1]
  2646 ;;		 -> ?_sprintf(2), 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  2   51[COMRAM] int 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1
  2656 ;;      Params:        15       0       0
  2657 ;;      Locals:        12       0       0
  2658 ;;      Temps:          0       0       0
  2659 ;;      Totals:        27       0       0
  2660 ;;Total ram usage:       27 bytes
  2661 ;; Hardware stack levels used: 1
  2662 ;; Hardware stack levels required when called: 10
  2663 ;; This function calls:
  2664 ;;		_vfprintf
  2665 ;; This function is called by:
  2666 ;;		_motor_RFID
  2667 ;;		_ReadRFID_NoCooperatiu
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text2
  2672   001134                     __ptext2:
  2673                           	callstack 0
  2674   001134                     _sprintf:
  2675                           	callstack 19
  2676   001134  0E37               	movlw	low (?_sprintf+3)
  2677   001136  6E43               	movwf	sprintf@ap^0,c
  2678   001138  C034  F044         	movff	sprintf@s,sprintf@f
  2679   00113C  0E00               	movlw	0
  2680   00113E  6E47               	movwf	(sprintf@f+3)^0,c
  2681   001140  0E00               	movlw	0
  2682   001142  6E46               	movwf	(sprintf@f+2)^0,c
  2683   001144  0E00               	movlw	0
  2684   001146  6E4E               	movwf	(sprintf@f+10)^0,c
  2685   001148  0E00               	movlw	0
  2686   00114A  6E4D               	movwf	(sprintf@f+9)^0,c
  2687   00114C  0E44               	movlw	low sprintf@f
  2688   00114E  6E2E               	movwf	vfprintf@fp^0,c
  2689   001150  C035  F02F         	movff	sprintf@fmt,vfprintf@fmt
  2690   001154  C036  F030         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2691   001158  0E43               	movlw	low sprintf@ap
  2692   00115A  6E31               	movwf	vfprintf@ap^0,c
  2693   00115C  EC5B  F008         	call	_vfprintf	;wreg free
  2694   001160  5034               	movf	sprintf@s^0,w,c
  2695   001162  2446               	addwf	(sprintf@f+2)^0,w,c
  2696   001164  6ED9               	movwf	fsr2l,c
  2697   001166  6ADA               	clrf	fsr2h,c
  2698   001168  6ADF               	clrf	indf2,c
  2699   00116A  0012               	return		;funcret
  2700   00116C                     __end_of_sprintf:
  2701                           	callstack 0
  2702                           
  2703 ;; *************** function _vfprintf *****************
  2704 ;; Defined at:
  2705 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  2708 ;;		 -> sprintf@f(11), 
  2709 ;;  fmt             2   46[COMRAM] PTR const unsigned char 
  2710 ;;		 -> STR_4(32), STR_2(5), 
  2711 ;;  ap              1   48[COMRAM] PTR PTR void 
  2712 ;;		 -> sprintf@ap(1), 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  cfmt            2   49[COMRAM] PTR unsigned char 
  2715 ;;		 -> STR_4(32), STR_2(5), 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  2   45[COMRAM] int 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1
  2725 ;;      Params:         4       0       0
  2726 ;;      Locals:         2       0       0
  2727 ;;      Temps:          0       0       0
  2728 ;;      Totals:         6       0       0
  2729 ;;Total ram usage:        6 bytes
  2730 ;; Hardware stack levels used: 1
  2731 ;; Hardware stack levels required when called: 9
  2732 ;; This function calls:
  2733 ;;		_vfpfcnvrt
  2734 ;; This function is called by:
  2735 ;;		_sprintf
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text3
  2740   0010B6                     __ptext3:
  2741                           	callstack 0
  2742   0010B6                     _vfprintf:
  2743                           	callstack 19
  2744   0010B6                     
  2745                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2746   0010B6  C02F  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  2747   0010BA  C030  F033         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2748                           
  2749                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2750   0010BE  EF69  F008         	goto	l2996
  2751   0010C2                     l2994:
  2752                           
  2753                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2754   0010C2  C02E  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  2755   0010C6  0E32               	movlw	low vfprintf@cfmt
  2756   0010C8  6E23               	movwf	vfpfcnvrt@fmt^0,c
  2757   0010CA  C031  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  2758   0010CE  ECB1  F003         	call	_vfpfcnvrt	;wreg free
  2759   0010D2                     l2996:
  2760                           
  2761                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2762   0010D2  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  2763   0010D6  C033  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2764   0010DA                     	if	0	;tblptru may be non-zero
  2765   0010DA                     	endif
  2766   0010DA                     	if	0	;tblptru may be non-zero
  2767   0010DA                     	endif
  2768   0010DA  0008               	tblrd		*
  2769   0010DC  50F5               	movf	tablat,w,c
  2770   0010DE  0900               	iorlw	0
  2771   0010E0  A4D8               	btfss	status,2,c
  2772   0010E2  EF75  F008         	goto	u2151
  2773   0010E6  EF77  F008         	goto	u2150
  2774   0010EA                     u2151:
  2775   0010EA  EF61  F008         	goto	l2994
  2776   0010EE                     u2150:
  2777   0010EE                     
  2778                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2779   0010EE  0E00               	movlw	0
  2780   0010F0  6E2F               	movwf	(?_vfprintf+1)^0,c
  2781   0010F2  0E00               	movlw	0
  2782   0010F4  6E2E               	movwf	?_vfprintf^0,c
  2783   0010F6  0012               	return		;funcret
  2784   0010F8                     __end_of_vfprintf:
  2785                           	callstack 0
  2786                           
  2787 ;; *************** function _vfpfcnvrt *****************
  2788 ;; Defined at:
  2789 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  2792 ;;		 -> sprintf@f(11), 
  2793 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  2794 ;;		 -> vfprintf@cfmt(2), 
  2795 ;;  ap              1   35[COMRAM] PTR PTR void 
  2796 ;;		 -> sprintf@ap(1), 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  convarg         4   38[COMRAM] struct .
  2799 ;;  cp              2   43[COMRAM] PTR unsigned char 
  2800 ;;		 -> STR_4(32), STR_2(5), 
  2801 ;;  done            1   42[COMRAM] _Bool 
  2802 ;;  c               1    0        unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1
  2812 ;;      Params:         3       0       0
  2813 ;;      Locals:         7       0       0
  2814 ;;      Temps:          2       0       0
  2815 ;;      Totals:        12       0       0
  2816 ;;Total ram usage:       12 bytes
  2817 ;; Hardware stack levels used: 1
  2818 ;; Hardware stack levels required when called: 8
  2819 ;; This function calls:
  2820 ;;		_fputc
  2821 ;;		_read_prec_or_width
  2822 ;;		_xtoa
  2823 ;; This function is called by:
  2824 ;;		_vfprintf
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text4
  2829   000762                     __ptext4:
  2830                           	callstack 0
  2831   000762                     _vfpfcnvrt:
  2832                           	callstack 19
  2833   000762                     
  2834                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2835   000762  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2836   000764  6ED9               	movwf	fsr2l,c
  2837   000766  6ADA               	clrf	fsr2h,c
  2838   000768  CFDE FFF6          	movff	postinc2,tblptrl
  2839   00076C  CFDD FFF7          	movff	postdec2,tblptrh
  2840   000770                     	if	0	;tblptru may be non-zero
  2841   000770                     	endif
  2842   000770                     	if	0	;tblptru may be non-zero
  2843   000770                     	endif
  2844   000770  0008               	tblrd		*
  2845   000772  50F5               	movf	tablat,w,c
  2846   000774  0A25               	xorlw	37
  2847   000776  A4D8               	btfss	status,2,c
  2848   000778  EFC0  F003         	goto	u1921
  2849   00077C  EFC2  F003         	goto	u1920
  2850   000780                     u1921:
  2851   000780  EF5B  F004         	goto	l2866
  2852   000784                     u1920:
  2853   000784                     
  2854                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2855   000784  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2856   000786  6ED9               	movwf	fsr2l,c
  2857   000788  6ADA               	clrf	fsr2h,c
  2858   00078A  2ADE               	incf	postinc2,f,c
  2859   00078C  0E00               	movlw	0
  2860   00078E  22DD               	addwfc	postdec2,f,c
  2861   000790                     
  2862                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2863   000790  0E00               	movlw	0
  2864   000792  6E60               	movwf	(_width+1)^0,c
  2865   000794  0E00               	movlw	0
  2866   000796  6E5F               	movwf	_width^0,c
  2867   000798  C05F  F065         	movff	_width,_flags
  2868   00079C                     
  2869                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2870   00079C  6861               	setf	_prec^0,c
  2871   00079E  6862               	setf	(_prec+1)^0,c
  2872   0007A0                     
  2873                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2874   0007A0  6A2B               	clrf	vfpfcnvrt@done^0,c
  2875                           
  2876                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2877   0007A2  EFEF  F003         	goto	l2838
  2878   0007A6                     l2828:
  2879                           
  2880                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2881   0007A6  8265               	bsf	_flags^0,1,c
  2882   0007A8                     
  2883                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2884   0007A8  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2885   0007AA  6ED9               	movwf	fsr2l,c
  2886   0007AC  6ADA               	clrf	fsr2h,c
  2887   0007AE  2ADE               	incf	postinc2,f,c
  2888   0007B0  0E00               	movlw	0
  2889   0007B2  22DD               	addwfc	postdec2,f,c
  2890                           
  2891                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2892   0007B4  EFEF  F003         	goto	l2838
  2893   0007B8                     l2832:
  2894                           
  2895                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2896   0007B8  0E01               	movlw	1
  2897   0007BA  6E2B               	movwf	vfpfcnvrt@done^0,c
  2898                           
  2899                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2900   0007BC  EFEF  F003         	goto	l2838
  2901   0007C0                     l2836:
  2902   0007C0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2903   0007C2  6ED9               	movwf	fsr2l,c
  2904   0007C4  6ADA               	clrf	fsr2h,c
  2905   0007C6  CFDE FFF6          	movff	postinc2,tblptrl
  2906   0007CA  CFDD FFF7          	movff	postdec2,tblptrh
  2907   0007CE                     	if	0	;tblptru may be non-zero
  2908   0007CE                     	endif
  2909   0007CE                     	if	0	;tblptru may be non-zero
  2910   0007CE                     	endif
  2911   0007CE  0008               	tblrd		*
  2912   0007D0  50F5               	movf	tablat,w,c
  2913                           
  2914                           ; Switch size 1, requested type "simple"
  2915                           ; Number of cases is 1, Range of values is 48 to 48
  2916                           ; switch strategies available:
  2917                           ; Name         Instructions Cycles
  2918                           ; simple_byte            4     3 (average)
  2919                           ;	Chosen strategy is simple_byte
  2920   0007D2  0A30               	xorlw	48	; case 48
  2921   0007D4  B4D8               	btfsc	status,2,c
  2922   0007D6  EFD3  F003         	goto	l2828
  2923   0007DA  EFDC  F003         	goto	l2832
  2924   0007DE                     l2838:
  2925                           
  2926                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2927   0007DE  502B               	movf	vfpfcnvrt@done^0,w,c
  2928   0007E0  B4D8               	btfsc	status,2,c
  2929   0007E2  EFF5  F003         	goto	u1931
  2930   0007E6  EFF7  F003         	goto	u1930
  2931   0007EA                     u1931:
  2932   0007EA  EFE0  F003         	goto	l2836
  2933   0007EE                     u1930:
  2934   0007EE                     
  2935                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2936   0007EE  C023  F002         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2937   0007F2  C024  F003         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2938   0007F6  ECC0  F005         	call	_read_prec_or_width	;wreg free
  2939   0007FA  C002  F05F         	movff	?_read_prec_or_width,_width
  2940   0007FE  C003  F060         	movff	?_read_prec_or_width+1,_width+1
  2941   000802                     
  2942                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2943   000802  BE60               	btfsc	(_width+1)^0,7,c
  2944   000804  EF08  F004         	goto	u1940
  2945   000808  EF06  F004         	goto	u1941
  2946   00080C                     u1941:
  2947   00080C  EF0D  F004         	goto	l2846
  2948   000810                     u1940:
  2949   000810                     
  2950                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2951   000810  8065               	bsf	_flags^0,0,c
  2952                           
  2953                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2954   000812  6C5F               	negf	_width^0,c
  2955   000814  1E60               	comf	(_width+1)^0,f,c
  2956   000816  B0D8               	btfsc	status,0,c
  2957   000818  2A60               	incf	(_width+1)^0,f,c
  2958   00081A                     l2846:
  2959                           
  2960                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  2961   00081A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2962   00081C  6ED9               	movwf	fsr2l,c
  2963   00081E  6ADA               	clrf	fsr2h,c
  2964   000820  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  2965   000824  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  2966   000828  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2967   00082C  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2968   000830                     	if	0	;tblptru may be non-zero
  2969   000830                     	endif
  2970   000830                     	if	0	;tblptru may be non-zero
  2971   000830                     	endif
  2972   000830  0008               	tblrd		*
  2973   000832  50F5               	movf	tablat,w,c
  2974   000834  0A58               	xorlw	88
  2975   000836  A4D8               	btfss	status,2,c
  2976   000838  EF20  F004         	goto	u1951
  2977   00083C  EF22  F004         	goto	u1950
  2978   000840                     u1951:
  2979   000840  EF53  F004         	goto	l2862
  2980   000844                     u1950:
  2981   000844                     
  2982                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2983   000844  5024               	movf	vfpfcnvrt@ap^0,w,c
  2984   000846  6ED9               	movwf	fsr2l,c
  2985   000848  6ADA               	clrf	fsr2h,c
  2986   00084A  0E02               	movlw	2
  2987   00084C  26DF               	addwf	indf2,f,c
  2988   00084E  5CDF               	subwf	indf2,w,c
  2989   000850  6ED9               	movwf	fsr2l,c
  2990   000852  6ADA               	clrf	fsr2h,c
  2991   000854  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  2992   000858  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  2993   00085C                     
  2994                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2995   00085C  0E01               	movlw	1
  2996   00085E  242C               	addwf	vfpfcnvrt@cp^0,w,c
  2997   000860  6E25               	movwf	??_vfpfcnvrt^0,c
  2998   000862  0E00               	movlw	0
  2999   000864  202D               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3000   000866  6E26               	movwf	(??_vfpfcnvrt+1)^0,c
  3001   000868  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3002   00086A  6ED9               	movwf	fsr2l,c
  3003   00086C  6ADA               	clrf	fsr2h,c
  3004   00086E  C025  FFDE         	movff	??_vfpfcnvrt,postinc2
  3005   000872  C026  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3006                           
  3007                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3008   000876  EF47  F004         	goto	l2860
  3009   00087A                     l2854:
  3010                           
  3011                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (void) xtoa(fp,convarg.uint);;	Return value of _vfpfcnvrt is never used
  3012   00087A  C022  F016         	movff	vfpfcnvrt@fp,xtoa@fp
  3013   00087E  C027  F017         	movff	vfpfcnvrt@convarg,xtoa@d
  3014   000882  C028  F018         	movff	vfpfcnvrt@convarg+1,xtoa@d+1
  3015   000886  EC6D  F004         	call	_xtoa	;wreg free
  3016   00088A  EF6C  F004         	goto	l1330
  3017   00088E                     l2860:
  3018   00088E  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3019   000892  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3020   000896                     	if	0	;tblptru may be non-zero
  3021   000896                     	endif
  3022   000896                     	if	0	;tblptru may be non-zero
  3023   000896                     	endif
  3024   000896  0008               	tblrd		*
  3025   000898  50F5               	movf	tablat,w,c
  3026                           
  3027                           ; Switch size 1, requested type "simple"
  3028                           ; Number of cases is 1, Range of values is 88 to 88
  3029                           ; switch strategies available:
  3030                           ; Name         Instructions Cycles
  3031                           ; simple_byte            4     3 (average)
  3032                           ;	Chosen strategy is simple_byte
  3033   00089A  0A58               	xorlw	88	; case 88
  3034   00089C  B4D8               	btfsc	status,2,c
  3035   00089E  EF3D  F004         	goto	l2854
  3036   0008A2  EF53  F004         	goto	l2862
  3037   0008A6                     l2862:
  3038                           
  3039                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3040   0008A6  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3041   0008A8  6ED9               	movwf	fsr2l,c
  3042   0008AA  6ADA               	clrf	fsr2h,c
  3043   0008AC  2ADE               	incf	postinc2,f,c
  3044   0008AE  0E00               	movlw	0
  3045   0008B0  22DD               	addwfc	postdec2,f,c
  3046   0008B2  EF6C  F004         	goto	l1330
  3047   0008B6                     l2866:
  3048                           
  3049                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3050   0008B6  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3051   0008B8  6ED9               	movwf	fsr2l,c
  3052   0008BA  6ADA               	clrf	fsr2h,c
  3053   0008BC  CFDE FFF6          	movff	postinc2,tblptrl
  3054   0008C0  CFDD FFF7          	movff	postdec2,tblptrh
  3055   0008C4                     	if	0	;tblptru may be non-zero
  3056   0008C4                     	endif
  3057   0008C4                     	if	0	;tblptru may be non-zero
  3058   0008C4                     	endif
  3059   0008C4  0008               	tblrd		*
  3060   0008C6  50F5               	movf	tablat,w,c
  3061   0008C8  6E02               	movwf	fputc@c^0,c
  3062   0008CA  6A03               	clrf	(fputc@c+1)^0,c
  3063   0008CC  C022  F004         	movff	vfpfcnvrt@fp,fputc@fp
  3064   0008D0  EC16  F006         	call	_fputc	;wreg free
  3065   0008D4  EF53  F004         	goto	l2862
  3066   0008D8                     l1330:
  3067   0008D8  0012               	return		;funcret
  3068   0008DA                     __end_of_vfpfcnvrt:
  3069                           	callstack 0
  3070                           
  3071 ;; *************** function _xtoa *****************
  3072 ;; Defined at:
  3073 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  3076 ;;		 -> sprintf@f(11), 
  3077 ;;  d               2   22[COMRAM] unsigned int 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  i               2   31[COMRAM] int 
  3080 ;;  w               2   28[COMRAM] int 
  3081 ;;  c               1   30[COMRAM] unsigned char 
  3082 ;;  p               1   27[COMRAM] _Bool 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1
  3092 ;;      Params:         3       0       0
  3093 ;;      Locals:         6       0       0
  3094 ;;      Temps:          3       0       0
  3095 ;;      Totals:        12       0       0
  3096 ;;Total ram usage:       12 bytes
  3097 ;; Hardware stack levels used: 1
  3098 ;; Hardware stack levels required when called: 7
  3099 ;; This function calls:
  3100 ;;		_pad
  3101 ;; This function is called by:
  3102 ;;		_vfpfcnvrt
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text5
  3107   0008DA                     __ptext5:
  3108                           	callstack 0
  3109   0008DA                     _xtoa:
  3110                           	callstack 19
  3111   0008DA                     
  3112                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1055: static void
      +                           xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1059:  char c;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 
      +                          1063:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c
      +                          : 1067:  _Bool p = 1;
  3113   0008DA  0E01               	movlw	1
  3114   0008DC  6E1C               	movwf	xtoa@p^0,c
  3115   0008DE                     
  3116                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  3117   0008DE  C05F  F01D         	movff	_width,xtoa@w
  3118   0008E2  C060  F01E         	movff	_width+1,xtoa@w+1
  3119                           
  3120                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  3121   0008E6  0E00               	movlw	0
  3122   0008E8  6E21               	movwf	(xtoa@i+1)^0,c
  3123   0008EA  0E1F               	movlw	31
  3124   0008EC  6E20               	movwf	xtoa@i^0,c
  3125   0008EE                     
  3126                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  3127   0008EE  0100               	movlb	0	; () banked
  3128   0008F0  6BE5               	clrf	(_dbuf+31)& (0+255),b
  3129                           
  3130                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3131   0008F2  EFA9  F004         	goto	l2780
  3132   0008F6                     l2762:
  3133                           
  3134                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1107:         --i;
  3135   0008F6  0620               	decf	xtoa@i^0,f,c
  3136   0008F8  A0D8               	btfss	status,0,c
  3137   0008FA  0621               	decf	(xtoa@i+1)^0,f,c
  3138   0008FC                     
  3139                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  3140   0008FC  5017               	movf	xtoa@d^0,w,c
  3141   0008FE  0B0F               	andlw	15
  3142   000900  6E1F               	movwf	xtoa@c^0,c
  3143   000902                     
  3144                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  3145   000902  0E0A               	movlw	10
  3146   000904  601F               	cpfslt	xtoa@c^0,c
  3147   000906  EF87  F004         	goto	u1821
  3148   00090A  EF89  F004         	goto	u1820
  3149   00090E                     u1821:
  3150   00090E  EF8D  F004         	goto	l2770
  3151   000912                     u1820:
  3152   000912                     
  3153                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  3154   000912  0E30               	movlw	48
  3155   000914  261F               	addwf	xtoa@c^0,f,c
  3156                           
  3157                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1111:   }
  3158   000916  EF8F  F004         	goto	l2772
  3159   00091A                     l2770:
  3160                           
  3161                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  3162   00091A  0E37               	movlw	55
  3163   00091C  261F               	addwf	xtoa@c^0,f,c
  3164   00091E                     l2772:
  3165                           
  3166                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  3167   00091E  5020               	movf	xtoa@i^0,w,c
  3168   000920  0FC6               	addlw	low _dbuf
  3169   000922  6ED9               	movwf	fsr2l,c
  3170   000924  6ADA               	clrf	fsr2h,c
  3171   000926  C01F  FFDF         	movff	xtoa@c,indf2
  3172   00092A                     
  3173                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  3174   00092A  6A1C               	clrf	xtoa@p^0,c
  3175   00092C                     
  3176                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  3177   00092C  061D               	decf	xtoa@w^0,f,c
  3178   00092E  A0D8               	btfss	status,0,c
  3179   000930  061E               	decf	(xtoa@w+1)^0,f,c
  3180   000932                     
  3181                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  3182   000932  C017  F019         	movff	xtoa@d,??_xtoa
  3183   000936  C018  F01A         	movff	xtoa@d+1,??_xtoa+1
  3184   00093A  0E04               	movlw	4
  3185   00093C  6E1B               	movwf	(??_xtoa+2)^0,c
  3186   00093E                     u1835:
  3187   00093E  90D8               	bcf	status,0,c
  3188   000940  321A               	rrcf	(??_xtoa+1)^0,f,c
  3189   000942  3219               	rrcf	??_xtoa^0,f,c
  3190   000944  2E1B               	decfsz	(??_xtoa+2)^0,f,c
  3191   000946  EF9F  F004         	goto	u1835
  3192   00094A  C019  F017         	movff	??_xtoa,xtoa@d
  3193   00094E  C01A  F018         	movff	??_xtoa+1,xtoa@d+1
  3194   000952                     l2780:
  3195                           
  3196                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3197   000952  BE21               	btfsc	(xtoa@i+1)^0,7,c
  3198   000954  EFB5  F004         	goto	u1841
  3199   000958  5021               	movf	(xtoa@i+1)^0,w,c
  3200   00095A  E109               	bnz	u1840
  3201   00095C  0E02               	movlw	2
  3202   00095E  5C20               	subwf	xtoa@i^0,w,c
  3203   000960  A0D8               	btfss	status,0,c
  3204   000962  EFB5  F004         	goto	u1841
  3205   000966  EFB7  F004         	goto	u1840
  3206   00096A                     u1841:
  3207   00096A  EFDC  F004         	goto	l2790
  3208   00096E                     u1840:
  3209   00096E  5017               	movf	xtoa@d^0,w,c
  3210   000970  1018               	iorwf	(xtoa@d+1)^0,w,c
  3211   000972  A4D8               	btfss	status,2,c
  3212   000974  EFBE  F004         	goto	u1851
  3213   000978  EFC0  F004         	goto	u1850
  3214   00097C                     u1851:
  3215   00097C  EF7B  F004         	goto	l2762
  3216   000980                     u1850:
  3217   000980  501C               	movf	xtoa@p^0,w,c
  3218   000982  A4D8               	btfss	status,2,c
  3219   000984  EFC6  F004         	goto	u1861
  3220   000988  EFC8  F004         	goto	u1860
  3221   00098C                     u1861:
  3222   00098C  EF7B  F004         	goto	l2762
  3223   000990                     u1860:
  3224   000990  BE1E               	btfsc	(xtoa@w+1)^0,7,c
  3225   000992  EFD3  F004         	goto	u1871
  3226   000996  501E               	movf	(xtoa@w+1)^0,w,c
  3227   000998  E108               	bnz	u1870
  3228   00099A  041D               	decf	xtoa@w^0,w,c
  3229   00099C  A0D8               	btfss	status,0,c
  3230   00099E  EFD3  F004         	goto	u1871
  3231   0009A2  EFD5  F004         	goto	u1870
  3232   0009A6                     u1871:
  3233   0009A6  EFDC  F004         	goto	l2790
  3234   0009AA                     u1870:
  3235   0009AA  B265               	btfsc	_flags^0,1,c
  3236   0009AC  EFDA  F004         	goto	u1881
  3237   0009B0  EFDC  F004         	goto	u1880
  3238   0009B4                     u1881:
  3239   0009B4  EF7B  F004         	goto	l2762
  3240   0009B8                     u1880:
  3241   0009B8                     l2790:
  3242                           
  3243                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  3244   0009B8  C016  F00F         	movff	xtoa@fp,pad@fp
  3245   0009BC  5020               	movf	xtoa@i^0,w,c
  3246   0009BE  0FC6               	addlw	low _dbuf
  3247   0009C0  6E10               	movwf	pad@buf^0,c
  3248   0009C2  C01D  F011         	movff	xtoa@w,pad@p
  3249   0009C6  C01E  F012         	movff	xtoa@w+1,pad@p+1
  3250   0009CA  EC10  F007         	call	_pad	;wreg free
  3251   0009CE  0012               	return		;funcret
  3252   0009D0                     __end_of_xtoa:
  3253                           	callstack 0
  3254                           
  3255 ;; *************** function _pad *****************
  3256 ;; Defined at:
  3257 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  3260 ;;		 -> sprintf@f(11), 
  3261 ;;  buf             1   15[COMRAM] PTR unsigned char 
  3262 ;;		 -> dbuf(32), 
  3263 ;;  p               2   16[COMRAM] int 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  i               2   19[COMRAM] int 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1
  3275 ;;      Params:         4       0       0
  3276 ;;      Locals:         2       0       0
  3277 ;;      Temps:          1       0       0
  3278 ;;      Totals:         7       0       0
  3279 ;;Total ram usage:        7 bytes
  3280 ;; Hardware stack levels used: 1
  3281 ;; Hardware stack levels required when called: 6
  3282 ;; This function calls:
  3283 ;;		_fputc
  3284 ;;		_fputs
  3285 ;; This function is called by:
  3286 ;;		_xtoa
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text6
  3291   000E20                     __ptext6:
  3292                           	callstack 0
  3293   000E20                     _pad:
  3294                           	callstack 19
  3295   000E20                     
  3296                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  3297   000E20  A065               	btfss	_flags^0,0,c
  3298   000E22  EF15  F007         	goto	u1671
  3299   000E26  EF17  F007         	goto	u1670
  3300   000E2A                     u1671:
  3301   000E2A  EF1D  F007         	goto	l2652
  3302   000E2E                     u1670:
  3303   000E2E                     
  3304                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  3305   000E2E  C010  F00A         	movff	pad@buf,fputs@s
  3306   000E32  C00F  F00B         	movff	pad@fp,fputs@fp
  3307   000E36  EC7C  F008         	call	_fputs	;wreg free
  3308   000E3A                     l2652:
  3309                           
  3310                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  3311   000E3A  BE12               	btfsc	(pad@p+1)^0,7,c
  3312   000E3C  EF24  F007         	goto	u1680
  3313   000E40  EF22  F007         	goto	u1681
  3314   000E44                     u1681:
  3315   000E44  EF28  F007         	goto	l1288
  3316   000E48                     u1680:
  3317   000E48                     
  3318                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  3319   000E48  0E00               	movlw	0
  3320   000E4A  6E12               	movwf	(pad@p+1)^0,c
  3321   000E4C  0E00               	movlw	0
  3322   000E4E  6E11               	movwf	pad@p^0,c
  3323   000E50                     l1288:
  3324                           
  3325                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  3326   000E50  0E00               	movlw	0
  3327   000E52  6E15               	movwf	(pad@i+1)^0,c
  3328   000E54  0E00               	movlw	0
  3329   000E56  6E14               	movwf	pad@i^0,c
  3330                           
  3331                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3332   000E58  EF38  F007         	goto	l2660
  3333   000E5C                     l2656:
  3334                           
  3335                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3336   000E5C  0E00               	movlw	0
  3337   000E5E  6E03               	movwf	(fputc@c+1)^0,c
  3338   000E60  0E20               	movlw	32
  3339   000E62  6E02               	movwf	fputc@c^0,c
  3340   000E64  C00F  F004         	movff	pad@fp,fputc@fp
  3341   000E68  EC16  F006         	call	_fputc	;wreg free
  3342   000E6C                     
  3343                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3344   000E6C  4A14               	infsnz	pad@i^0,f,c
  3345   000E6E  2A15               	incf	(pad@i+1)^0,f,c
  3346   000E70                     l2660:
  3347                           
  3348                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3349   000E70  5011               	movf	pad@p^0,w,c
  3350   000E72  5C14               	subwf	pad@i^0,w,c
  3351   000E74  5015               	movf	(pad@i+1)^0,w,c
  3352   000E76  0A80               	xorlw	128
  3353   000E78  6E13               	movwf	??_pad^0,c
  3354   000E7A  5012               	movf	(pad@p+1)^0,w,c
  3355   000E7C  0A80               	xorlw	128
  3356   000E7E  5813               	subwfb	??_pad^0,w,c
  3357   000E80  A0D8               	btfss	status,0,c
  3358   000E82  EF45  F007         	goto	u1691
  3359   000E86  EF47  F007         	goto	u1690
  3360   000E8A                     u1691:
  3361   000E8A  EF2E  F007         	goto	l2656
  3362   000E8E                     u1690:
  3363   000E8E                     
  3364                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3365   000E8E  B065               	btfsc	_flags^0,0,c
  3366   000E90  EF4C  F007         	goto	u1701
  3367   000E94  EF4E  F007         	goto	u1700
  3368   000E98                     u1701:
  3369   000E98  EF54  F007         	goto	l1293
  3370   000E9C                     u1700:
  3371   000E9C                     
  3372                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3373   000E9C  C010  F00A         	movff	pad@buf,fputs@s
  3374   000EA0  C00F  F00B         	movff	pad@fp,fputs@fp
  3375   000EA4  EC7C  F008         	call	_fputs	;wreg free
  3376   000EA8                     l1293:
  3377   000EA8  0012               	return		;funcret
  3378   000EAA                     __end_of_pad:
  3379                           	callstack 0
  3380                           
  3381 ;; *************** function _fputs *****************
  3382 ;; Defined at:
  3383 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  s               1    9[COMRAM] PTR const unsigned char 
  3386 ;;		 -> dbuf(32), 
  3387 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  3388 ;;		 -> sprintf@f(11), 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  i               2   12[COMRAM] int 
  3391 ;;  c               1   11[COMRAM] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  2    9[COMRAM] int 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1
  3401 ;;      Params:         2       0       0
  3402 ;;      Locals:         3       0       0
  3403 ;;      Temps:          0       0       0
  3404 ;;      Totals:         5       0       0
  3405 ;;Total ram usage:        5 bytes
  3406 ;; Hardware stack levels used: 1
  3407 ;; Hardware stack levels required when called: 5
  3408 ;; This function calls:
  3409 ;;		_fputc
  3410 ;; This function is called by:
  3411 ;;		_pad
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text7
  3416   0010F8                     __ptext7:
  3417                           	callstack 0
  3418   0010F8                     _fputs:
  3419                           	callstack 19
  3420   0010F8  0E00               	movlw	0
  3421   0010FA  6E0E               	movwf	(fputs@i+1)^0,c
  3422   0010FC  0E00               	movlw	0
  3423   0010FE  6E0D               	movwf	fputs@i^0,c
  3424   001100  EF8B  F008         	goto	l2640
  3425   001104                     l2636:
  3426   001104  C00C  F002         	movff	fputs@c,fputc@c
  3427   001108  6A03               	clrf	(fputc@c+1)^0,c
  3428   00110A  C00B  F004         	movff	fputs@fp,fputc@fp
  3429   00110E  EC16  F006         	call	_fputc	;wreg free
  3430   001112  4A0D               	infsnz	fputs@i^0,f,c
  3431   001114  2A0E               	incf	(fputs@i+1)^0,f,c
  3432   001116                     l2640:
  3433   001116  500A               	movf	fputs@s^0,w,c
  3434   001118  240D               	addwf	fputs@i^0,w,c
  3435   00111A  6ED9               	movwf	fsr2l,c
  3436   00111C  6ADA               	clrf	fsr2h,c
  3437   00111E  50DF               	movf	indf2,w,c
  3438   001120  6E0C               	movwf	fputs@c^0,c
  3439   001122  500C               	movf	fputs@c^0,w,c
  3440   001124  A4D8               	btfss	status,2,c
  3441   001126  EF97  F008         	goto	u1651
  3442   00112A  EF99  F008         	goto	u1650
  3443   00112E                     u1651:
  3444   00112E  EF82  F008         	goto	l2636
  3445   001132                     u1650:
  3446   001132  0012               	return		;funcret
  3447   001134                     __end_of_fputs:
  3448                           	callstack 0
  3449                           
  3450 ;; *************** function _fputc *****************
  3451 ;; Defined at:
  3452 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  c               2    1[COMRAM] int 
  3455 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  3456 ;;		 -> sprintf@f(11), 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  2    1[COMRAM] int 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1
  3468 ;;      Params:         3       0       0
  3469 ;;      Locals:         0       0       0
  3470 ;;      Temps:          5       0       0
  3471 ;;      Totals:         8       0       0
  3472 ;;Total ram usage:        8 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 4
  3475 ;; This function calls:
  3476 ;;		_putch
  3477 ;; This function is called by:
  3478 ;;		_pad
  3479 ;;		_vfpfcnvrt
  3480 ;;		_fputs
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text8
  3485   000C2C                     __ptext8:
  3486                           	callstack 0
  3487   000C2C                     _fputc:
  3488                           	callstack 19
  3489   000C2C  5004               	movf	fputc@fp^0,w,c
  3490   000C2E  B4D8               	btfsc	status,2,c
  3491   000C30  EF1C  F006         	goto	u1611
  3492   000C34  EF1E  F006         	goto	u1610
  3493   000C38                     u1611:
  3494   000C38  EF26  F006         	goto	l2624
  3495   000C3C                     u1610:
  3496   000C3C  5004               	movf	fputc@fp^0,w,c
  3497   000C3E  A4D8               	btfss	status,2,c
  3498   000C40  EF24  F006         	goto	u1621
  3499   000C44  EF26  F006         	goto	u1620
  3500   000C48                     u1621:
  3501   000C48  EF2B  F006         	goto	l2626
  3502   000C4C                     u1620:
  3503   000C4C                     l2624:
  3504   000C4C  5002               	movf	fputc@c^0,w,c
  3505   000C4E  ECC1  F009         	call	_putch
  3506   000C52  EF6A  F006         	goto	l1349
  3507   000C56                     l2626:
  3508   000C56  5004               	movf	fputc@fp^0,w,c
  3509   000C58  6ED9               	movwf	fsr2l,c
  3510   000C5A  6ADA               	clrf	fsr2h,c
  3511   000C5C  0E09               	movlw	9
  3512   000C5E  26D9               	addwf	fsr2l,f,c
  3513   000C60  50DE               	movf	postinc2,w,c
  3514   000C62  10DE               	iorwf	postinc2,w,c
  3515   000C64  B4D8               	btfsc	status,2,c
  3516   000C66  EF37  F006         	goto	u1631
  3517   000C6A  EF39  F006         	goto	u1630
  3518   000C6E                     u1631:
  3519   000C6E  EF52  F006         	goto	l2630
  3520   000C72                     u1630:
  3521   000C72  5004               	movf	fputc@fp^0,w,c
  3522   000C74  6ED9               	movwf	fsr2l,c
  3523   000C76  6ADA               	clrf	fsr2h,c
  3524   000C78  0E09               	movlw	9
  3525   000C7A  26D9               	addwf	fsr2l,f,c
  3526   000C7C  5004               	movf	fputc@fp^0,w,c
  3527   000C7E  6EE1               	movwf	fsr1l,c
  3528   000C80  6AE2               	clrf	fsr1h,c
  3529   000C82  0E02               	movlw	2
  3530   000C84  26E1               	addwf	fsr1l,f,c
  3531   000C86  50DE               	movf	postinc2,w,c
  3532   000C88  5CE6               	subwf	postinc1,w,c
  3533   000C8A  50E6               	movf	postinc1,w,c
  3534   000C8C  0A80               	xorlw	128
  3535   000C8E  6E09               	movwf	(??_fputc+4)^0,c
  3536   000C90  50DE               	movf	postinc2,w,c
  3537   000C92  0A80               	xorlw	128
  3538   000C94  5809               	subwfb	(??_fputc+4)^0,w,c
  3539   000C96  B0D8               	btfsc	status,0,c
  3540   000C98  EF50  F006         	goto	u1641
  3541   000C9C  EF52  F006         	goto	u1640
  3542   000CA0                     u1641:
  3543   000CA0  EF6A  F006         	goto	l1349
  3544   000CA4                     u1640:
  3545   000CA4                     l2630:
  3546   000CA4  5004               	movf	fputc@fp^0,w,c
  3547   000CA6  6ED9               	movwf	fsr2l,c
  3548   000CA8  6ADA               	clrf	fsr2h,c
  3549   000CAA  0E02               	movlw	2
  3550   000CAC  26D9               	addwf	fsr2l,f,c
  3551   000CAE  50DF               	movf	indf2,w,c
  3552   000CB0  6E05               	movwf	??_fputc^0,c
  3553   000CB2  5004               	movf	fputc@fp^0,w,c
  3554   000CB4  6ED9               	movwf	fsr2l,c
  3555   000CB6  6ADA               	clrf	fsr2h,c
  3556   000CB8  50DF               	movf	indf2,w,c
  3557   000CBA  2405               	addwf	??_fputc^0,w,c
  3558   000CBC  6ED9               	movwf	fsr2l,c
  3559   000CBE  6ADA               	clrf	fsr2h,c
  3560   000CC0  C002  FFDF         	movff	fputc@c,indf2
  3561   000CC4  5004               	movf	fputc@fp^0,w,c
  3562   000CC6  6ED9               	movwf	fsr2l,c
  3563   000CC8  6ADA               	clrf	fsr2h,c
  3564   000CCA  0E02               	movlw	2
  3565   000CCC  26D9               	addwf	fsr2l,f,c
  3566   000CCE  2ADE               	incf	postinc2,f,c
  3567   000CD0  0E00               	movlw	0
  3568   000CD2  22DD               	addwfc	postdec2,f,c
  3569   000CD4                     l1349:
  3570   000CD4  0012               	return		;funcret
  3571   000CD6                     __end_of_fputc:
  3572                           	callstack 0
  3573                           
  3574 ;; *************** function _putch *****************
  3575 ;; Defined at:
  3576 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  c               1    wreg     unsigned char 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  c               1    0[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1
  3590 ;;      Params:         0       0       0
  3591 ;;      Locals:         0       0       0
  3592 ;;      Temps:          0       0       0
  3593 ;;      Totals:         0       0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used: 1
  3596 ;; Hardware stack levels required when called: 3
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_fputc
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text9
  3605   001382                     __ptext9:
  3606                           	callstack 0
  3607   001382                     _putch:
  3608                           	callstack 19
  3609   001382  0012               	return		;funcret
  3610   001384                     __end_of_putch:
  3611                           	callstack 0
  3612                           
  3613 ;; *************** function _read_prec_or_width *****************
  3614 ;; Defined at:
  3615 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  fmt             1    1[COMRAM] PTR PTR const unsigned c
  3618 ;;		 -> vfprintf@cfmt(2), 
  3619 ;;  ap              1    2[COMRAM] PTR PTR void [1]
  3620 ;;		 -> sprintf@ap(1), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  c               1    5[COMRAM] unsigned char 
  3623 ;;  n               2    6[COMRAM] int 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  2    1[COMRAM] int 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1
  3633 ;;      Params:         2       0       0
  3634 ;;      Locals:         3       0       0
  3635 ;;      Temps:          2       0       0
  3636 ;;      Totals:         7       0       0
  3637 ;;Total ram usage:        7 bytes
  3638 ;; Hardware stack levels used: 1
  3639 ;; Hardware stack levels required when called: 3
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_vfpfcnvrt
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text10
  3648   000B80                     __ptext10:
  3649                           	callstack 0
  3650   000B80                     _read_prec_or_width:
  3651                           	callstack 23
  3652   000B80                     
  3653                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  3654   000B80  0E00               	movlw	0
  3655   000B82  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3656   000B84  0E00               	movlw	0
  3657   000B86  6E07               	movwf	read_prec_or_width@n^0,c
  3658   000B88                     
  3659                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  3660   000B88  5002               	movf	read_prec_or_width@fmt^0,w,c
  3661   000B8A  6ED9               	movwf	fsr2l,c
  3662   000B8C  6ADA               	clrf	fsr2h,c
  3663   000B8E  CFDE FFF6          	movff	postinc2,tblptrl
  3664   000B92  CFDD FFF7          	movff	postdec2,tblptrh
  3665   000B96                     	if	0	;tblptru may be non-zero
  3666   000B96                     	endif
  3667   000B96                     	if	0	;tblptru may be non-zero
  3668   000B96                     	endif
  3669   000B96  0008               	tblrd		*
  3670   000B98  50F5               	movf	tablat,w,c
  3671   000B9A  0A2A               	xorlw	42
  3672   000B9C  A4D8               	btfss	status,2,c
  3673   000B9E  EFD3  F005         	goto	u1891
  3674   000BA2  EFD5  F005         	goto	u1890
  3675   000BA6                     u1891:
  3676   000BA6  EFFE  F005         	goto	l2806
  3677   000BAA                     u1890:
  3678   000BAA                     
  3679                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  3680   000BAA  5002               	movf	read_prec_or_width@fmt^0,w,c
  3681   000BAC  6ED9               	movwf	fsr2l,c
  3682   000BAE  6ADA               	clrf	fsr2h,c
  3683   000BB0  2ADE               	incf	postinc2,f,c
  3684   000BB2  0E00               	movlw	0
  3685   000BB4  22DD               	addwfc	postdec2,f,c
  3686   000BB6                     
  3687                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  3688   000BB6  5003               	movf	read_prec_or_width@ap^0,w,c
  3689   000BB8  6ED9               	movwf	fsr2l,c
  3690   000BBA  6ADA               	clrf	fsr2h,c
  3691   000BBC  0E02               	movlw	2
  3692   000BBE  26DF               	addwf	indf2,f,c
  3693   000BC0  5CDF               	subwf	indf2,w,c
  3694   000BC2  6ED9               	movwf	fsr2l,c
  3695   000BC4  6ADA               	clrf	fsr2h,c
  3696   000BC6  CFDE F007          	movff	postinc2,read_prec_or_width@n
  3697   000BCA  CFDE F008          	movff	postinc2,read_prec_or_width@n+1
  3698                           
  3699                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  3700   000BCE  EF11  F006         	goto	l1309
  3701   000BD2                     l2802:
  3702                           
  3703                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  3704   000BD2  0E0A               	movlw	10
  3705   000BD4  0207               	mulwf	read_prec_or_width@n^0,c
  3706   000BD6  CFF3 F004          	movff	prodl,??_read_prec_or_width
  3707   000BDA  CFF4 F005          	movff	prodh,??_read_prec_or_width+1
  3708   000BDE  0208               	mulwf	(read_prec_or_width@n+1)^0,c
  3709   000BE0  50F3               	movf	prodl,w,c
  3710   000BE2  2605               	addwf	(??_read_prec_or_width+1)^0,f,c
  3711   000BE4  5006               	movf	read_prec_or_width@c^0,w,c
  3712   000BE6  2404               	addwf	??_read_prec_or_width^0,w,c
  3713   000BE8  6E07               	movwf	read_prec_or_width@n^0,c
  3714   000BEA  0E00               	movlw	0
  3715   000BEC  2005               	addwfc	(??_read_prec_or_width+1)^0,w,c
  3716   000BEE  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3717   000BF0                     
  3718                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  3719   000BF0  5002               	movf	read_prec_or_width@fmt^0,w,c
  3720   000BF2  6ED9               	movwf	fsr2l,c
  3721   000BF4  6ADA               	clrf	fsr2h,c
  3722   000BF6  2ADE               	incf	postinc2,f,c
  3723   000BF8  0E00               	movlw	0
  3724   000BFA  22DD               	addwfc	postdec2,f,c
  3725   000BFC                     l2806:
  3726                           
  3727                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  3728   000BFC  5002               	movf	read_prec_or_width@fmt^0,w,c
  3729   000BFE  6ED9               	movwf	fsr2l,c
  3730   000C00  6ADA               	clrf	fsr2h,c
  3731   000C02  CFDE FFF6          	movff	postinc2,tblptrl
  3732   000C06  CFDD FFF7          	movff	postdec2,tblptrh
  3733   000C0A                     	if	0	;tblptru may be non-zero
  3734   000C0A                     	endif
  3735   000C0A                     	if	0	;tblptru may be non-zero
  3736   000C0A                     	endif
  3737   000C0A  0008               	tblrd		*
  3738   000C0C  50F5               	movf	tablat,w,c
  3739   000C0E  0FD0               	addlw	208
  3740   000C10  6E06               	movwf	read_prec_or_width@c^0,c
  3741   000C12  0E09               	movlw	9
  3742   000C14  6406               	cpfsgt	read_prec_or_width@c^0,c
  3743   000C16  EF0F  F006         	goto	u1901
  3744   000C1A  EF11  F006         	goto	u1900
  3745   000C1E                     u1901:
  3746   000C1E  EFE9  F005         	goto	l2802
  3747   000C22                     u1900:
  3748   000C22                     l1309:
  3749                           
  3750                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  3751   000C22  C007  F002         	movff	read_prec_or_width@n,?_read_prec_or_width
  3752   000C26  C008  F003         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  3753   000C2A  0012               	return		;funcret
  3754   000C2C                     __end_of_read_prec_or_width:
  3755                           	callstack 0
  3756                           
  3757 ;; *************** function _motorTerminal *****************
  3758 ;; Defined at:
  3759 ;;		line 63 in file "TAD_TERMINAL.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1
  3773 ;;      Params:         0       0       0
  3774 ;;      Locals:         0       0       0
  3775 ;;      Temps:          0       0       0
  3776 ;;      Totals:         0       0       0
  3777 ;;Total ram usage:        0 bytes
  3778 ;; Hardware stack levels used: 1
  3779 ;; Hardware stack levels required when called: 6
  3780 ;; This function calls:
  3781 ;;		_Terminal_RXAvailable
  3782 ;;		_Terminal_ReceiveChar
  3783 ;;		_Terminal_SendString
  3784 ;;		_initTeclado
  3785 ;;		_showMenu
  3786 ;; This function is called by:
  3787 ;;		_main
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text11
  3792   0009D0                     __ptext11:
  3793                           	callstack 0
  3794   0009D0                     _motorTerminal:
  3795                           	callstack 24
  3796   0009D0                     
  3797                           ;TAD_TERMINAL.c: 64:  static char state = 0;;TAD_TERMINAL.c: 66:  switch(state) {
  3798   0009D0  EF52  F005         	goto	l3318
  3799   0009D4                     l3276:
  3800                           
  3801                           ;TAD_TERMINAL.c: 68:    if (Terminal_ReceiveChar() == 0x1B) {
  3802   0009D4  ECBF  F009         	call	_Terminal_ReceiveChar	;wreg free
  3803   0009D8  0A1B               	xorlw	27
  3804   0009DA  A4D8               	btfss	status,2,c
  3805   0009DC  EFF2  F004         	goto	u2461
  3806   0009E0  EFF4  F004         	goto	u2460
  3807   0009E4                     u2461:
  3808   0009E4  EFF8  F004         	goto	l3282
  3809   0009E8                     u2460:
  3810   0009E8                     
  3811                           ;TAD_TERMINAL.c: 69:     showMenu();
  3812   0009E8  EC8F  F007         	call	_showMenu	;wreg free
  3813   0009EC                     
  3814                           ;TAD_TERMINAL.c: 70:     state = 1;
  3815   0009EC  0E01               	movlw	1
  3816   0009EE  6E66               	movwf	motorTerminal@state^0,c
  3817   0009F0                     l3282:
  3818                           
  3819                           ;TAD_TERMINAL.c: 72:    if (hashtag_pressed == 1){
  3820   0009F0  0467               	decf	_hashtag_pressed^0,w,c
  3821   0009F2  A4D8               	btfss	status,2,c
  3822   0009F4  EFFE  F004         	goto	u2471
  3823   0009F8  EF00  F005         	goto	u2470
  3824   0009FC                     u2471:
  3825   0009FC  EF5D  F005         	goto	l589
  3826   000A00                     u2470:
  3827   000A00                     
  3828                           ;TAD_TERMINAL.c: 73:     showMenu();
  3829   000A00  EC8F  F007         	call	_showMenu	;wreg free
  3830   000A04                     
  3831                           ;TAD_TERMINAL.c: 74:     state = 1;
  3832   000A04  0E01               	movlw	1
  3833   000A06  6E66               	movwf	motorTerminal@state^0,c
  3834   000A08                     
  3835                           ;TAD_TERMINAL.c: 75:     hashtag_pressed = 0;
  3836   000A08  6A67               	clrf	_hashtag_pressed^0,c
  3837   000A0A  EF5D  F005         	goto	l589
  3838   000A0E                     l3290:
  3839                           
  3840                           ;TAD_TERMINAL.c: 79:    if(Terminal_RXAvailable() == 1){
  3841   000A0E  EC7A  F009         	call	_Terminal_RXAvailable	;wreg free
  3842   000A12  06E8               	decf	wreg,f,c
  3843   000A14  A4D8               	btfss	status,2,c
  3844   000A16  EF0F  F005         	goto	u2481
  3845   000A1A  EF11  F005         	goto	u2480
  3846   000A1E                     u2481:
  3847   000A1E  EF5D  F005         	goto	l589
  3848   000A22                     u2480:
  3849   000A22                     
  3850                           ;TAD_TERMINAL.c: 80:     initTeclado();
  3851   000A22  EC64  F009         	call	_initTeclado	;wreg free
  3852   000A26                     
  3853                           ;TAD_TERMINAL.c: 81:     if (Terminal_ReceiveChar() == '1') {
  3854   000A26  ECBF  F009         	call	_Terminal_ReceiveChar	;wreg free
  3855   000A2A  0A31               	xorlw	49
  3856   000A2C  A4D8               	btfss	status,2,c
  3857   000A2E  EF1B  F005         	goto	u2491
  3858   000A32  EF1D  F005         	goto	u2490
  3859   000A36                     u2491:
  3860   000A36  EF26  F005         	goto	l3300
  3861   000A3A                     u2490:
  3862   000A3A                     
  3863                           ;TAD_TERMINAL.c: 82:      Terminal_SendString("Has pulsado 1\r\n");
  3864   000A3A  0EBA               	movlw	low STR_13
  3865   000A3C  6E05               	movwf	Terminal_SendString@str^0,c
  3866   000A3E  0E1F               	movlw	high STR_13
  3867   000A40  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3868   000A42  EC55  F007         	call	_Terminal_SendString	;wreg free
  3869   000A46                     l3298:
  3870                           
  3871                           ;TAD_TERMINAL.c: 84:      state = 0;
  3872   000A46  6A66               	clrf	motorTerminal@state^0,c
  3873                           
  3874                           ;TAD_TERMINAL.c: 85:     }
  3875   000A48  EF5D  F005         	goto	l589
  3876   000A4C                     l3300:
  3877   000A4C  ECBF  F009         	call	_Terminal_ReceiveChar	;wreg free
  3878   000A50  0A32               	xorlw	50
  3879   000A52  A4D8               	btfss	status,2,c
  3880   000A54  EF2E  F005         	goto	u2501
  3881   000A58  EF30  F005         	goto	u2500
  3882   000A5C                     u2501:
  3883   000A5C  EF38  F005         	goto	l3306
  3884   000A60                     u2500:
  3885   000A60                     
  3886                           ;TAD_TERMINAL.c: 87:      Terminal_SendString("Has pulsado 2\r\n");
  3887   000A60  0ECA               	movlw	low STR_14
  3888   000A62  6E05               	movwf	Terminal_SendString@str^0,c
  3889   000A64  0E1F               	movlw	high STR_14
  3890   000A66  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3891   000A68  EC55  F007         	call	_Terminal_SendString	;wreg free
  3892   000A6C  EF23  F005         	goto	l3298
  3893   000A70                     l3306:
  3894   000A70  ECBF  F009         	call	_Terminal_ReceiveChar	;wreg free
  3895   000A74  0A33               	xorlw	51
  3896   000A76  A4D8               	btfss	status,2,c
  3897   000A78  EF40  F005         	goto	u2511
  3898   000A7C  EF42  F005         	goto	u2510
  3899   000A80                     u2511:
  3900   000A80  EF4A  F005         	goto	l3312
  3901   000A84                     u2510:
  3902   000A84                     
  3903                           ;TAD_TERMINAL.c: 92:      Terminal_SendString("Has pulsado 3\r\n");
  3904   000A84  0EDA               	movlw	low STR_15
  3905   000A86  6E05               	movwf	Terminal_SendString@str^0,c
  3906   000A88  0E1F               	movlw	high STR_15
  3907   000A8A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3908   000A8C  EC55  F007         	call	_Terminal_SendString	;wreg free
  3909   000A90  EF23  F005         	goto	l3298
  3910   000A94                     l3312:
  3911                           
  3912                           ;TAD_TERMINAL.c: 97:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  3913   000A94  0EE9               	movlw	low STR_16
  3914   000A96  6E05               	movwf	Terminal_SendString@str^0,c
  3915   000A98  0E1E               	movlw	high STR_16
  3916   000A9A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3917   000A9C  EC55  F007         	call	_Terminal_SendString	;wreg free
  3918   000AA0  EF23  F005         	goto	l3298
  3919   000AA4                     l3318:
  3920   000AA4  5066               	movf	motorTerminal@state^0,w,c
  3921                           
  3922                           ; Switch size 1, requested type "simple"
  3923                           ; Number of cases is 2, Range of values is 0 to 1
  3924                           ; switch strategies available:
  3925                           ; Name         Instructions Cycles
  3926                           ; simple_byte            7     4 (average)
  3927                           ;	Chosen strategy is simple_byte
  3928   000AA6  0A00               	xorlw	0	; case 0
  3929   000AA8  B4D8               	btfsc	status,2,c
  3930   000AAA  EFEA  F004         	goto	l3276
  3931   000AAE  0A01               	xorlw	1	; case 1
  3932   000AB0  B4D8               	btfsc	status,2,c
  3933   000AB2  EF07  F005         	goto	l3290
  3934   000AB6  EF5D  F005         	goto	l589
  3935   000ABA                     l589:
  3936   000ABA  0012               	return		;funcret
  3937   000ABC                     __end_of_motorTerminal:
  3938                           	callstack 0
  3939                           
  3940 ;; *************** function _showMenu *****************
  3941 ;; Defined at:
  3942 ;;		line 47 in file "TAD_TERMINAL.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1
  3956 ;;      Params:         0       0       0
  3957 ;;      Locals:         0       0       0
  3958 ;;      Temps:          0       0       0
  3959 ;;      Totals:         0       0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used: 1
  3962 ;; Hardware stack levels required when called: 5
  3963 ;; This function calls:
  3964 ;;		_Terminal_SendString
  3965 ;; This function is called by:
  3966 ;;		_motorTerminal
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text12
  3971   000F1E                     __ptext12:
  3972                           	callstack 0
  3973   000F1E                     _showMenu:
  3974                           	callstack 24
  3975   000F1E                     
  3976                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("---------------\r\n");
  3977   000F1E  0E96               	movlw	low STR_5
  3978   000F20  6E05               	movwf	Terminal_SendString@str^0,c
  3979   000F22  0E1F               	movlw	high STR_5
  3980   000F24  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3981   000F26  EC55  F007         	call	_Terminal_SendString	;wreg free
  3982                           
  3983                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("MenÃº principal\r\n");
  3984   000F2A  0EA8               	movlw	low STR_6
  3985   000F2C  6E05               	movwf	Terminal_SendString@str^0,c
  3986   000F2E  0E1F               	movlw	high STR_6
  3987   000F30  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3988   000F32  EC55  F007         	call	_Terminal_SendString	;wreg free
  3989                           
  3990                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("---------------\r\n");
  3991   000F36  0E96               	movlw	low STR_5
  3992   000F38  6E05               	movwf	Terminal_SendString@str^0,c
  3993   000F3A  0E1F               	movlw	high STR_5
  3994   000F3C  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3995   000F3E  EC55  F007         	call	_Terminal_SendString	;wreg free
  3996                           
  3997                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("Tria una opciÃ³:\r\n");
  3998   000F42  0E83               	movlw	low STR_8
  3999   000F44  6E05               	movwf	Terminal_SendString@str^0,c
  4000   000F46  0E1F               	movlw	high STR_8
  4001   000F48  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4002   000F4A  EC55  F007         	call	_Terminal_SendString	;wreg free
  4003                           
  4004                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  4005   000F4E  0E68               	movlw	low STR_9
  4006   000F50  6E05               	movwf	Terminal_SendString@str^0,c
  4007   000F52  0E1F               	movlw	high STR_9
  4008   000F54  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4009   000F56  EC55  F007         	call	_Terminal_SendString	;wreg free
  4010                           
  4011                           ;TAD_TERMINAL.c: 53:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  4012   000F5A  0E4B               	movlw	low STR_10
  4013   000F5C  6E05               	movwf	Terminal_SendString@str^0,c
  4014   000F5E  0E1F               	movlw	high STR_10
  4015   000F60  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4016   000F62  EC55  F007         	call	_Terminal_SendString	;wreg free
  4017                           
  4018                           ;TAD_TERMINAL.c: 54:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  4019   000F66  0E0A               	movlw	low STR_11
  4020   000F68  6E05               	movwf	Terminal_SendString@str^0,c
  4021   000F6A  0E1F               	movlw	high STR_11
  4022   000F6C  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4023   000F6E  EC55  F007         	call	_Terminal_SendString	;wreg free
  4024                           
  4025                           ;TAD_TERMINAL.c: 55:  Terminal_SendString("OpciÃ³: ");
  4026   000F72  0EEA               	movlw	low STR_12
  4027   000F74  6E05               	movwf	Terminal_SendString@str^0,c
  4028   000F76  0E1F               	movlw	high STR_12
  4029   000F78  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4030   000F7A  EC55  F007         	call	_Terminal_SendString	;wreg free
  4031   000F7E  0012               	return		;funcret
  4032   000F80                     __end_of_showMenu:
  4033                           	callstack 0
  4034                           
  4035 ;; *************** function _Terminal_SendString *****************
  4036 ;; Defined at:
  4037 ;;		line 40 in file "TAD_TERMINAL.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  str             2    4[COMRAM] PTR const unsigned char 
  4040 ;;		 -> STR_16(33), STR_15(16), STR_14(16), STR_13(16), 
  4041 ;;		 -> STR_12(9), STR_11(33), STR_10(29), STR_9(27), 
  4042 ;;		 -> STR_8(19), STR_7(18), STR_6(18), STR_5(18), 
  4043 ;;		 -> motor_RFID@buffer(50), STR_3(2), ReadRFID_NoCooperatiu@buffer(50), STR_1(6), 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1
  4055 ;;      Params:         2       0       0
  4056 ;;      Locals:         0       0       0
  4057 ;;      Temps:          0       0       0
  4058 ;;      Totals:         2       0       0
  4059 ;;Total ram usage:        2 bytes
  4060 ;; Hardware stack levels used: 1
  4061 ;; Hardware stack levels required when called: 4
  4062 ;; This function calls:
  4063 ;;		_Terminal_SendChar
  4064 ;;		_Terminal_TXAvailable
  4065 ;; This function is called by:
  4066 ;;		_motor_RFID
  4067 ;;		_showMenu
  4068 ;;		_motorTerminal
  4069 ;;		_ReadRFID_NoCooperatiu
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text13
  4074   000EAA                     __ptext13:
  4075                           	callstack 0
  4076   000EAA                     _Terminal_SendString:
  4077                           	callstack 25
  4078   000EAA                     
  4079                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4080   000EAA  EF76  F007         	goto	l2990
  4081   000EAE                     l2984:
  4082   000EAE  EC3D  F009         	call	_Terminal_TXAvailable	;wreg free
  4083   000EB2  5002               	movf	?_Terminal_TXAvailable^0,w,c
  4084   000EB4  1003               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  4085   000EB6  B4D8               	btfsc	status,2,c
  4086   000EB8  EF60  F007         	goto	u2111
  4087   000EBC  EF62  F007         	goto	u2110
  4088   000EC0                     u2111:
  4089   000EC0  EF57  F007         	goto	l2984
  4090   000EC4                     u2110:
  4091   000EC4                     
  4092                           ;TAD_TERMINAL.c: 43:   Terminal_SendChar(*str++);
  4093   000EC4  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4094   000EC8  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4095   000ECC  6AF8               	clrf	tblptru,c
  4096   000ECE  0E01               	movlw	(high __ramtop+-1)
  4097   000ED0  64F7               	cpfsgt	tblptrh,c
  4098   000ED2  D003               	bra	u2127
  4099   000ED4  0008               	tblrd		*
  4100   000ED6  50F5               	movf	tablat,w,c
  4101   000ED8  D005               	bra	u2120
  4102   000EDA                     u2127:
  4103   000EDA  CFF6 FFE9          	movff	tblptrl,fsr0l
  4104   000EDE  CFF7 FFEA          	movff	tblptrh,fsr0h
  4105   000EE2  50EF               	movf	indf0,w,c
  4106   000EE4                     u2120:
  4107   000EE4  ECAD  F009         	call	_Terminal_SendChar
  4108   000EE8  4A05               	infsnz	Terminal_SendString@str^0,f,c
  4109   000EEA  2A06               	incf	(Terminal_SendString@str+1)^0,f,c
  4110   000EEC                     l2990:
  4111                           
  4112                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4113   000EEC  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4114   000EF0  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4115   000EF4  6AF8               	clrf	tblptru,c
  4116   000EF6  0E01               	movlw	(high __ramtop+-1)
  4117   000EF8  64F7               	cpfsgt	tblptrh,c
  4118   000EFA  D003               	bra	u2137
  4119   000EFC  0008               	tblrd		*
  4120   000EFE  50F5               	movf	tablat,w,c
  4121   000F00  D005               	bra	u2130
  4122   000F02                     u2137:
  4123   000F02  CFF6 FFE9          	movff	tblptrl,fsr0l
  4124   000F06  CFF7 FFEA          	movff	tblptrh,fsr0h
  4125   000F0A  50EF               	movf	indf0,w,c
  4126   000F0C                     u2130:
  4127   000F0C  0900               	iorlw	0
  4128   000F0E  A4D8               	btfss	status,2,c
  4129   000F10  EF8C  F007         	goto	u2141
  4130   000F14  EF8E  F007         	goto	u2140
  4131   000F18                     u2141:
  4132   000F18  EF57  F007         	goto	l2984
  4133   000F1C                     u2140:
  4134   000F1C  0012               	return		;funcret
  4135   000F1E                     __end_of_Terminal_SendString:
  4136                           	callstack 0
  4137                           
  4138 ;; *************** function _Terminal_TXAvailable *****************
  4139 ;; Defined at:
  4140 ;;		line 20 in file "TAD_TERMINAL.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2    1[COMRAM] int 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1
  4154 ;;      Params:         2       0       0
  4155 ;;      Locals:         0       0       0
  4156 ;;      Temps:          1       0       0
  4157 ;;      Totals:         3       0       0
  4158 ;;Total ram usage:        3 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 3
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_Terminal_SendString
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text14
  4169   00127A                     __ptext14:
  4170                           	callstack 0
  4171   00127A                     _Terminal_TXAvailable:
  4172                           	callstack 25
  4173   00127A                     
  4174                           ;TAD_TERMINAL.c: 21:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  4175   00127A  B89E               	btfsc	158,4,c	;volatile
  4176   00127C  EF42  F009         	goto	u1911
  4177   001280  EF46  F009         	goto	u1910
  4178   001284                     u1911:
  4179   001284  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4180   001286  2A04               	incf	??_Terminal_TXAvailable^0,f,c
  4181   001288  EF47  F009         	goto	u1918
  4182   00128C                     u1910:
  4183   00128C  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4184   00128E                     u1918:
  4185   00128E  5004               	movf	??_Terminal_TXAvailable^0,w,c
  4186   001290  6E02               	movwf	?_Terminal_TXAvailable^0,c
  4187   001292  6A03               	clrf	(?_Terminal_TXAvailable+1)^0,c
  4188   001294  0012               	return		;funcret
  4189   001296                     __end_of_Terminal_TXAvailable:
  4190                           	callstack 0
  4191                           
  4192 ;; *************** function _Terminal_SendChar *****************
  4193 ;; Defined at:
  4194 ;;		line 30 in file "TAD_TERMINAL.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  c               1    wreg     unsigned char 
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;  c               1    1[COMRAM] unsigned char 
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1
  4208 ;;      Params:         0       0       0
  4209 ;;      Locals:         1       0       0
  4210 ;;      Temps:          0       0       0
  4211 ;;      Totals:         1       0       0
  4212 ;;Total ram usage:        1 bytes
  4213 ;; Hardware stack levels used: 1
  4214 ;; Hardware stack levels required when called: 3
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_Terminal_SendString
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text15
  4223   00135A                     __ptext15:
  4224                           	callstack 0
  4225   00135A                     _Terminal_SendChar:
  4226                           	callstack 25
  4227                           
  4228                           ;incstack = 0
  4229                           ;Terminal_SendChar@c stored from wreg
  4230   00135A  6E02               	movwf	Terminal_SendChar@c^0,c
  4231   00135C                     
  4232                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  4233   00135C  C002  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  4234   001360  0012               	return		;funcret
  4235   001362                     __end_of_Terminal_SendChar:
  4236                           	callstack 0
  4237                           
  4238 ;; *************** function _initTeclado *****************
  4239 ;; Defined at:
  4240 ;;		line 14 in file "TAD_TECLADO.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1
  4254 ;;      Params:         0       0       0
  4255 ;;      Locals:         0       0       0
  4256 ;;      Temps:          0       0       0
  4257 ;;      Totals:         0       0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 4
  4261 ;; This function calls:
  4262 ;;		_TI_NewTimer
  4263 ;;		_initPortsTeclado
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;;		_motorTerminal
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text16
  4271   0012C8                     __ptext16:
  4272                           	callstack 0
  4273   0012C8                     _initTeclado:
  4274                           	callstack 25
  4275   0012C8                     
  4276                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  4277   0012C8  ECB1  F009         	call	_initPortsTeclado	;wreg free
  4278   0012CC                     
  4279                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  4280   0012CC  6A79               	clrf	_Filas^0,c
  4281   0012CE                     
  4282                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  4283   0012CE  6A78               	clrf	_Columnas^0,c
  4284   0012D0                     
  4285                           ;TAD_TECLADO.c: 18:     tecla = 0;
  4286   0012D0  6A77               	clrf	_tecla^0,c
  4287   0012D2                     
  4288                           ;TAD_TECLADO.c: 19:  state = 0;
  4289   0012D2  6A76               	clrf	_state^0,c
  4290   0012D4                     
  4291                           ;TAD_TECLADO.c: 20:     TI_NewTimer(&timer);
  4292   0012D4  0E7B               	movlw	low _timer
  4293   0012D6  6E02               	movwf	TI_NewTimer@TimerHandle^0,c
  4294   0012D8  ECC0  F007         	call	_TI_NewTimer	;wreg free
  4295   0012DC  0012               	return		;funcret
  4296   0012DE                     __end_of_initTeclado:
  4297                           	callstack 0
  4298                           
  4299 ;; *************** function _initPortsTeclado *****************
  4300 ;; Defined at:
  4301 ;;		line 23 in file "TAD_TECLADO.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1
  4315 ;;      Params:         0       0       0
  4316 ;;      Locals:         0       0       0
  4317 ;;      Temps:          0       0       0
  4318 ;;      Totals:         0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used: 1
  4321 ;; Hardware stack levels required when called: 3
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_initTeclado
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text17
  4330   001362                     __ptext17:
  4331                           	callstack 0
  4332   001362                     _initPortsTeclado:
  4333                           	callstack 25
  4334   001362                     
  4335                           ;TAD_TECLADO.c: 26:  TRISD = 0x0F;
  4336   001362  0E0F               	movlw	15
  4337   001364  6E95               	movwf	149,c	;volatile
  4338   001366                     
  4339                           ;TAD_TECLADO.c: 27:  LATD = 0x00;
  4340   001366  6A8C               	clrf	140,c	;volatile
  4341   001368  0012               	return		;funcret
  4342   00136A                     __end_of_initPortsTeclado:
  4343                           	callstack 0
  4344                           
  4345 ;; *************** function _TI_NewTimer *****************
  4346 ;; Defined at:
  4347 ;;		line 43 in file "TAD_TIMER.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  4350 ;;		 -> Timer(1), timer(1), 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  Comptador       1    3[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      unsigned char 
  4355 ;; Registers used:
  4356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1
  4362 ;;      Params:         1       0       0
  4363 ;;      Locals:         1       0       0
  4364 ;;      Temps:          1       0       0
  4365 ;;      Totals:         3       0       0
  4366 ;;Total ram usage:        3 bytes
  4367 ;; Hardware stack levels used: 1
  4368 ;; Hardware stack levels required when called: 3
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_initTeclado
  4373 ;;		_LcInit
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text18
  4378   000F80                     __ptext18:
  4379                           	callstack 0
  4380   000F80                     _TI_NewTimer:
  4381                           	callstack 25
  4382   000F80                     
  4383                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  4384   000F80  6A04               	clrf	TI_NewTimer@Comptador^0,c
  4385                           
  4386                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4387   000F82  EFCF  F007         	goto	l2878
  4388   000F86                     l2874:
  4389                           
  4390                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  4391   000F86  2A04               	incf	TI_NewTimer@Comptador^0,f,c
  4392   000F88  0E04               	movlw	4
  4393   000F8A  1804               	xorwf	TI_NewTimer@Comptador^0,w,c
  4394   000F8C  A4D8               	btfss	status,2,c
  4395   000F8E  EFCB  F007         	goto	u1961
  4396   000F92  EFCD  F007         	goto	u1960
  4397   000F96                     u1961:
  4398   000F96  EFCF  F007         	goto	l2878
  4399   000F9A                     u1960:
  4400   000F9A  EFEA  F007         	goto	l79
  4401   000F9E                     l2878:
  4402                           
  4403                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4404   000F9E  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4405   000FA0  0D05               	mullw	5
  4406   000FA2  50F3               	movf	243,w,c
  4407   000FA4  0F84               	addlw	low (_Timers+4)
  4408   000FA6  6ED9               	movwf	fsr2l,c
  4409   000FA8  6ADA               	clrf	fsr2h,c
  4410   000FAA  04DE               	decf	postinc2,w,c
  4411   000FAC  B4D8               	btfsc	status,2,c
  4412   000FAE  EFDB  F007         	goto	u1971
  4413   000FB2  EFDD  F007         	goto	u1970
  4414   000FB6                     u1971:
  4415   000FB6  EFC3  F007         	goto	l2874
  4416   000FBA                     u1970:
  4417   000FBA                     
  4418                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  4419   000FBA  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4420   000FBC  0D05               	mullw	5
  4421   000FBE  50F3               	movf	243,w,c
  4422   000FC0  0F84               	addlw	low (_Timers+4)
  4423   000FC2  6ED9               	movwf	fsr2l,c
  4424   000FC4  6ADA               	clrf	fsr2h,c
  4425   000FC6  0E01               	movlw	1
  4426   000FC8  6EDF               	movwf	indf2,c
  4427   000FCA                     
  4428                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  4429   000FCA  5002               	movf	TI_NewTimer@TimerHandle^0,w,c
  4430   000FCC  6ED9               	movwf	fsr2l,c
  4431   000FCE  6ADA               	clrf	fsr2h,c
  4432   000FD0  C004  FFDF         	movff	TI_NewTimer@Comptador,indf2
  4433   000FD4                     l79:
  4434   000FD4  0012               	return		;funcret
  4435   000FD6                     __end_of_TI_NewTimer:
  4436                           	callstack 0
  4437                           
  4438 ;; *************** function _Terminal_ReceiveChar *****************
  4439 ;; Defined at:
  4440 ;;		line 35 in file "TAD_TERMINAL.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;		None
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      unsigned char 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1
  4454 ;;      Params:         0       0       0
  4455 ;;      Locals:         0       0       0
  4456 ;;      Temps:          0       0       0
  4457 ;;      Totals:         0       0       0
  4458 ;;Total ram usage:        0 bytes
  4459 ;; Hardware stack levels used: 1
  4460 ;; Hardware stack levels required when called: 3
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_motorTerminal
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text19
  4469   00137E                     __ptext19:
  4470                           	callstack 0
  4471   00137E                     _Terminal_ReceiveChar:
  4472                           	callstack 26
  4473   00137E                     
  4474                           ;TAD_TERMINAL.c: 36:  return RCREG;
  4475   00137E  50AE               	movf	174,w,c	;volatile
  4476   001380  0012               	return		;funcret
  4477   001382                     __end_of_Terminal_ReceiveChar:
  4478                           	callstack 0
  4479                           
  4480 ;; *************** function _Terminal_RXAvailable *****************
  4481 ;; Defined at:
  4482 ;;		line 25 in file "TAD_TERMINAL.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1
  4496 ;;      Params:         0       0       0
  4497 ;;      Locals:         0       0       0
  4498 ;;      Temps:          0       0       0
  4499 ;;      Totals:         0       0       0
  4500 ;;Total ram usage:        0 bytes
  4501 ;; Hardware stack levels used: 1
  4502 ;; Hardware stack levels required when called: 3
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_motorTerminal
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text20
  4511   0012F4                     __ptext20:
  4512                           	callstack 0
  4513   0012F4                     _Terminal_RXAvailable:
  4514                           	callstack 26
  4515   0012F4                     
  4516                           ;TAD_TERMINAL.c: 26:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4517   0012F4  BA9E               	btfsc	158,5,c	;volatile
  4518   0012F6  EF7F  F009         	goto	u721
  4519   0012FA  EF82  F009         	goto	u720
  4520   0012FE                     u721:
  4521   0012FE  0E01               	movlw	1
  4522   001300  EF83  F009         	goto	u726
  4523   001304                     u720:
  4524   001304  0E00               	movlw	0
  4525   001306                     u726:
  4526   001306  0012               	return		;funcret
  4527   001308                     __end_of_Terminal_RXAvailable:
  4528                           	callstack 0
  4529                           
  4530 ;; *************** function _motorTeclado *****************
  4531 ;; Defined at:
  4532 ;;		line 34 in file "TAD_TECLADO.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;		None
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1
  4546 ;;      Params:         0       0       0
  4547 ;;      Locals:         0       0       0
  4548 ;;      Temps:          0       0       0
  4549 ;;      Totals:         0       0       0
  4550 ;;Total ram usage:        0 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; Hardware stack levels required when called: 4
  4553 ;; This function calls:
  4554 ;;		_GetTecla
  4555 ;;		_ReadFilas
  4556 ;;		_TI_GetTics
  4557 ;;		_TI_ResetTics
  4558 ;;		_hashtag_pressed3s
  4559 ;;		_writeColumnas
  4560 ;; This function is called by:
  4561 ;;		_main
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text21
  4566   000532                     __ptext21:
  4567                           	callstack 0
  4568   000532                     _motorTeclado:
  4569                           	callstack 26
  4570   000532                     
  4571                           ;TAD_TECLADO.c: 35:  switch(state) {
  4572   000532  EF95  F003         	goto	l3272
  4573   000536                     l3168:
  4574                           
  4575                           ;TAD_TECLADO.c: 37:    Filas = ReadFilas();
  4576   000536  ECBC  F009         	call	_ReadFilas	;wreg free
  4577   00053A  6E79               	movwf	_Filas^0,c
  4578   00053C                     
  4579                           ;TAD_TECLADO.c: 38:    if (Filas == 0x0) {
  4580   00053C  5079               	movf	_Filas^0,w,c
  4581   00053E  A4D8               	btfss	status,2,c
  4582   000540  EFA4  F002         	goto	u2291
  4583   000544  EFA6  F002         	goto	u2290
  4584   000548                     u2291:
  4585   000548  EFAE  F002         	goto	l3178
  4586   00054C                     u2290:
  4587   00054C                     
  4588                           ;TAD_TECLADO.c: 39:     Columnas = (0x01);
  4589   00054C  0E01               	movlw	1
  4590   00054E  6E78               	movwf	_Columnas^0,c
  4591   000550                     
  4592                           ;TAD_TECLADO.c: 40:     writeColumnas();
  4593   000550  EC38  F008         	call	_writeColumnas	;wreg free
  4594   000554                     
  4595                           ;TAD_TECLADO.c: 41:     state = 1;
  4596   000554  0E01               	movlw	1
  4597   000556  6E76               	movwf	_state^0,c
  4598                           
  4599                           ;TAD_TECLADO.c: 42:    }
  4600   000558  EFB0  F003         	goto	l160
  4601   00055C                     l3178:
  4602   00055C  5079               	movf	_Filas^0,w,c
  4603   00055E  B4D8               	btfsc	status,2,c
  4604   000560  EFB4  F002         	goto	u2301
  4605   000564  EFB6  F002         	goto	u2300
  4606   000568                     u2301:
  4607   000568  EFB0  F003         	goto	l160
  4608   00056C                     u2300:
  4609   00056C                     
  4610                           ;TAD_TECLADO.c: 44:     TI_ResetTics(timer);
  4611   00056C  507B               	movf	_timer^0,w,c
  4612   00056E  EC2B  F009         	call	_TI_ResetTics
  4613   000572                     l3182:
  4614                           
  4615                           ;TAD_TECLADO.c: 45:     state = 3;
  4616   000572  0E03               	movlw	3
  4617   000574  6E76               	movwf	_state^0,c
  4618   000576  EFB0  F003         	goto	l160
  4619   00057A                     l3184:
  4620                           
  4621                           ;TAD_TECLADO.c: 49:    Filas = ReadFilas();
  4622   00057A  ECBC  F009         	call	_ReadFilas	;wreg free
  4623   00057E  6E79               	movwf	_Filas^0,c
  4624   000580                     
  4625                           ;TAD_TECLADO.c: 50:    if (Filas == 0x0) {
  4626   000580  5079               	movf	_Filas^0,w,c
  4627   000582  A4D8               	btfss	status,2,c
  4628   000584  EFC6  F002         	goto	u2311
  4629   000588  EFC8  F002         	goto	u2310
  4630   00058C                     u2311:
  4631   00058C  EFD0  F002         	goto	l3194
  4632   000590                     u2310:
  4633   000590                     
  4634                           ;TAD_TECLADO.c: 51:     Columnas = (0x02);
  4635   000590  0E02               	movlw	2
  4636   000592  6E78               	movwf	_Columnas^0,c
  4637   000594                     
  4638                           ;TAD_TECLADO.c: 52:     writeColumnas();
  4639   000594  EC38  F008         	call	_writeColumnas	;wreg free
  4640   000598                     
  4641                           ;TAD_TECLADO.c: 53:     state = 2;
  4642   000598  0E02               	movlw	2
  4643   00059A  6E76               	movwf	_state^0,c
  4644                           
  4645                           ;TAD_TECLADO.c: 54:    }
  4646   00059C  EFB0  F003         	goto	l160
  4647   0005A0                     l3194:
  4648   0005A0  5079               	movf	_Filas^0,w,c
  4649   0005A2  B4D8               	btfsc	status,2,c
  4650   0005A4  EFD6  F002         	goto	u2321
  4651   0005A8  EFD8  F002         	goto	u2320
  4652   0005AC                     u2321:
  4653   0005AC  EFB0  F003         	goto	l160
  4654   0005B0                     u2320:
  4655   0005B0                     
  4656                           ;TAD_TECLADO.c: 56:     TI_ResetTics(timer);
  4657   0005B0  507B               	movf	_timer^0,w,c
  4658   0005B2  EC2B  F009         	call	_TI_ResetTics
  4659   0005B6  EFB9  F002         	goto	l3182
  4660   0005BA                     l3200:
  4661                           
  4662                           ;TAD_TECLADO.c: 61:    Filas = ReadFilas();
  4663   0005BA  ECBC  F009         	call	_ReadFilas	;wreg free
  4664   0005BE  6E79               	movwf	_Filas^0,c
  4665   0005C0                     
  4666                           ;TAD_TECLADO.c: 62:    if (Filas != 0x0) {
  4667   0005C0  5079               	movf	_Filas^0,w,c
  4668   0005C2  B4D8               	btfsc	status,2,c
  4669   0005C4  EFE6  F002         	goto	u2331
  4670   0005C8  EFE8  F002         	goto	u2330
  4671   0005CC                     u2331:
  4672   0005CC  EFED  F002         	goto	l3208
  4673   0005D0                     u2330:
  4674   0005D0                     
  4675                           ;TAD_TECLADO.c: 63:     TI_ResetTics(timer);
  4676   0005D0  507B               	movf	_timer^0,w,c
  4677   0005D2  EC2B  F009         	call	_TI_ResetTics
  4678   0005D6  EFB9  F002         	goto	l3182
  4679   0005DA                     l3208:
  4680   0005DA  5079               	movf	_Filas^0,w,c
  4681   0005DC  A4D8               	btfss	status,2,c
  4682   0005DE  EFF3  F002         	goto	u2341
  4683   0005E2  EFF5  F002         	goto	u2340
  4684   0005E6                     u2341:
  4685   0005E6  EFB0  F003         	goto	l160
  4686   0005EA                     u2340:
  4687   0005EA                     l3210:
  4688                           
  4689                           ;TAD_TECLADO.c: 67:     Columnas = (0x04);
  4690   0005EA  0E04               	movlw	4
  4691   0005EC  6E78               	movwf	_Columnas^0,c
  4692   0005EE                     
  4693                           ;TAD_TECLADO.c: 68:     writeColumnas();
  4694   0005EE  EC38  F008         	call	_writeColumnas	;wreg free
  4695   0005F2                     l3214:
  4696                           
  4697                           ;TAD_TECLADO.c: 69:     state = 0;
  4698   0005F2  6A76               	clrf	_state^0,c
  4699   0005F4  EFB0  F003         	goto	l160
  4700   0005F8                     l3216:
  4701                           
  4702                           ;TAD_TECLADO.c: 73:    tecla = GetTecla ();
  4703   0005F8  EC5E  F005         	call	_GetTecla	;wreg free
  4704   0005FC  6E77               	movwf	_tecla^0,c
  4705   0005FE                     
  4706                           ;TAD_TECLADO.c: 74:    Filas = ReadFilas();
  4707   0005FE  ECBC  F009         	call	_ReadFilas	;wreg free
  4708   000602  6E79               	movwf	_Filas^0,c
  4709   000604                     
  4710                           ;TAD_TECLADO.c: 75:    if (Filas == 0x0) {
  4711   000604  5079               	movf	_Filas^0,w,c
  4712   000606  A4D8               	btfss	status,2,c
  4713   000608  EF08  F003         	goto	u2351
  4714   00060C  EF0A  F003         	goto	u2350
  4715   000610                     u2351:
  4716   000610  EF0C  F003         	goto	l3228
  4717   000614                     u2350:
  4718   000614  EFF5  F002         	goto	l3210
  4719   000618                     l3228:
  4720   000618  5079               	movf	_Filas^0,w,c
  4721   00061A  B4D8               	btfsc	status,2,c
  4722   00061C  EF12  F003         	goto	u2361
  4723   000620  EF14  F003         	goto	u2360
  4724   000624                     u2361:
  4725   000624  EF31  F003         	goto	l3236
  4726   000628                     u2360:
  4727   000628  507B               	movf	_timer^0,w,c
  4728   00062A  EC12  F008         	call	_TI_GetTics
  4729   00062E  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4730   000630  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4731   000632  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4732   000634  E109               	bnz	u2370
  4733   000636  0E09               	movlw	9
  4734   000638  5C02               	subwf	?_TI_GetTics^0,w,c
  4735   00063A  A0D8               	btfss	status,0,c
  4736   00063C  EF22  F003         	goto	u2371
  4737   000640  EF24  F003         	goto	u2370
  4738   000644                     u2371:
  4739   000644  EF31  F003         	goto	l3236
  4740   000648                     u2370:
  4741   000648  0E0B               	movlw	11
  4742   00064A  1877               	xorwf	_tecla^0,w,c
  4743   00064C  B4D8               	btfsc	status,2,c
  4744   00064E  EF2B  F003         	goto	u2381
  4745   000652  EF2D  F003         	goto	u2380
  4746   000656                     u2381:
  4747   000656  EF31  F003         	goto	l3236
  4748   00065A                     u2380:
  4749   00065A                     l3234:
  4750                           
  4751                           ;TAD_TECLADO.c: 81:     state = 5;
  4752   00065A  0E05               	movlw	5
  4753   00065C  6E76               	movwf	_state^0,c
  4754                           
  4755                           ;TAD_TECLADO.c: 82:    }
  4756   00065E  EFB0  F003         	goto	l160
  4757   000662                     l3236:
  4758   000662  5079               	movf	_Filas^0,w,c
  4759   000664  B4D8               	btfsc	status,2,c
  4760   000666  EF37  F003         	goto	u2391
  4761   00066A  EF39  F003         	goto	u2390
  4762   00066E                     u2391:
  4763   00066E  EFB0  F003         	goto	l160
  4764   000672                     u2390:
  4765   000672  507B               	movf	_timer^0,w,c
  4766   000674  EC12  F008         	call	_TI_GetTics
  4767   000678  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4768   00067A  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4769   00067C  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4770   00067E  E109               	bnz	u2400
  4771   000680  0E09               	movlw	9
  4772   000682  5C02               	subwf	?_TI_GetTics^0,w,c
  4773   000684  A0D8               	btfss	status,0,c
  4774   000686  EF47  F003         	goto	u2401
  4775   00068A  EF49  F003         	goto	u2400
  4776   00068E                     u2401:
  4777   00068E  EFB0  F003         	goto	l160
  4778   000692                     u2400:
  4779   000692  0E0B               	movlw	11
  4780   000694  1877               	xorwf	_tecla^0,w,c
  4781   000696  A4D8               	btfss	status,2,c
  4782   000698  EF50  F003         	goto	u2411
  4783   00069C  EF52  F003         	goto	u2410
  4784   0006A0                     u2411:
  4785   0006A0  EFB0  F003         	goto	l160
  4786   0006A4                     u2410:
  4787   0006A4                     
  4788                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  4789   0006A4  507B               	movf	_timer^0,w,c
  4790   0006A6  EC2B  F009         	call	_TI_ResetTics
  4791   0006AA                     
  4792                           ;TAD_TECLADO.c: 85:     state = 4;
  4793   0006AA  0E04               	movlw	4
  4794   0006AC  6E76               	movwf	_state^0,c
  4795   0006AE  EFB0  F003         	goto	l160
  4796   0006B2                     l3246:
  4797                           
  4798                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  4799   0006B2  ECBC  F009         	call	_ReadFilas	;wreg free
  4800   0006B6  6E79               	movwf	_Filas^0,c
  4801   0006B8                     
  4802                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  4803   0006B8  5079               	movf	_Filas^0,w,c
  4804   0006BA  A4D8               	btfss	status,2,c
  4805   0006BC  EF62  F003         	goto	u2421
  4806   0006C0  EF64  F003         	goto	u2420
  4807   0006C4                     u2421:
  4808   0006C4  EF66  F003         	goto	l3252
  4809   0006C8                     u2420:
  4810   0006C8  EFF9  F002         	goto	l3214
  4811   0006CC                     l3252:
  4812   0006CC  5079               	movf	_Filas^0,w,c
  4813   0006CE  B4D8               	btfsc	status,2,c
  4814   0006D0  EF6C  F003         	goto	u2431
  4815   0006D4  EF6E  F003         	goto	u2430
  4816   0006D8                     u2431:
  4817   0006D8  EFB0  F003         	goto	l160
  4818   0006DC                     u2430:
  4819   0006DC  507B               	movf	_timer^0,w,c
  4820   0006DE  EC12  F008         	call	_TI_GetTics
  4821   0006E2  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4822   0006E4  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4823   0006E6  E10B               	bnz	u2440
  4824   0006E8  0EDD               	movlw	221
  4825   0006EA  5C02               	subwf	?_TI_GetTics^0,w,c
  4826   0006EC  0E05               	movlw	5
  4827   0006EE  5803               	subwfb	(?_TI_GetTics+1)^0,w,c
  4828   0006F0  A0D8               	btfss	status,0,c
  4829   0006F2  EF7D  F003         	goto	u2441
  4830   0006F6  EF7F  F003         	goto	u2440
  4831   0006FA                     u2441:
  4832   0006FA  EFB0  F003         	goto	l160
  4833   0006FE                     u2440:
  4834   0006FE                     
  4835                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  4836   0006FE  ECB9  F009         	call	_hashtag_pressed3s	;wreg free
  4837   000702  EF2D  F003         	goto	l3234
  4838   000706                     l3260:
  4839                           
  4840                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  4841   000706  ECBC  F009         	call	_ReadFilas	;wreg free
  4842   00070A  6E79               	movwf	_Filas^0,c
  4843   00070C                     
  4844                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  4845   00070C  5079               	movf	_Filas^0,w,c
  4846   00070E  A4D8               	btfss	status,2,c
  4847   000710  EF8C  F003         	goto	u2451
  4848   000714  EF8E  F003         	goto	u2450
  4849   000718                     u2451:
  4850   000718  EFB0  F003         	goto	l160
  4851   00071C                     u2450:
  4852   00071C                     
  4853                           ;TAD_TECLADO.c: 102:     state = 0;
  4854   00071C  6A76               	clrf	_state^0,c
  4855   00071E                     
  4856                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  4857   00071E  0E04               	movlw	4
  4858   000720  6E78               	movwf	_Columnas^0,c
  4859   000722                     
  4860                           ;TAD_TECLADO.c: 104:     writeColumnas();
  4861   000722  EC38  F008         	call	_writeColumnas	;wreg free
  4862   000726  EFB0  F003         	goto	l160
  4863   00072A                     l3272:
  4864   00072A  5076               	movf	_state^0,w,c
  4865                           
  4866                           ; Switch size 1, requested type "simple"
  4867                           ; Number of cases is 6, Range of values is 0 to 5
  4868                           ; switch strategies available:
  4869                           ; Name         Instructions Cycles
  4870                           ; simple_byte           19    10 (average)
  4871                           ;	Chosen strategy is simple_byte
  4872   00072C  0A00               	xorlw	0	; case 0
  4873   00072E  B4D8               	btfsc	status,2,c
  4874   000730  EF9B  F002         	goto	l3168
  4875   000734  0A01               	xorlw	1	; case 1
  4876   000736  B4D8               	btfsc	status,2,c
  4877   000738  EFBD  F002         	goto	l3184
  4878   00073C  0A03               	xorlw	3	; case 2
  4879   00073E  B4D8               	btfsc	status,2,c
  4880   000740  EFDD  F002         	goto	l3200
  4881   000744  0A01               	xorlw	1	; case 3
  4882   000746  B4D8               	btfsc	status,2,c
  4883   000748  EFFC  F002         	goto	l3216
  4884   00074C  0A07               	xorlw	7	; case 4
  4885   00074E  B4D8               	btfsc	status,2,c
  4886   000750  EF59  F003         	goto	l3246
  4887   000754  0A01               	xorlw	1	; case 5
  4888   000756  B4D8               	btfsc	status,2,c
  4889   000758  EF83  F003         	goto	l3260
  4890   00075C  EFB0  F003         	goto	l160
  4891   000760                     l160:
  4892   000760  0012               	return		;funcret
  4893   000762                     __end_of_motorTeclado:
  4894                           	callstack 0
  4895                           
  4896 ;; *************** function _writeColumnas *****************
  4897 ;; Defined at:
  4898 ;;		line 114 in file "TAD_TECLADO.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      void 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1
  4912 ;;      Params:         0       0       0
  4913 ;;      Locals:         0       0       0
  4914 ;;      Temps:          0       0       0
  4915 ;;      Totals:         0       0       0
  4916 ;;Total ram usage:        0 bytes
  4917 ;; Hardware stack levels used: 1
  4918 ;; Hardware stack levels required when called: 3
  4919 ;; This function calls:
  4920 ;;		Nothing
  4921 ;; This function is called by:
  4922 ;;		_motorTeclado
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text22
  4927   001070                     __ptext22:
  4928                           	callstack 0
  4929   001070                     _writeColumnas:
  4930                           	callstack 26
  4931   001070                     
  4932                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  4933   001070  6A8C               	clrf	140,c	;volatile
  4934   001072                     
  4935                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  4936   001072  0478               	decf	_Columnas^0,w,c
  4937   001074  A4D8               	btfss	status,2,c
  4938   001076  EF3F  F008         	goto	u561
  4939   00107A  EF41  F008         	goto	u560
  4940   00107E                     u561:
  4941   00107E  EF44  F008         	goto	l1782
  4942   001082                     u560:
  4943   001082                     
  4944                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  4945   001082  8A8C               	bsf	140,5,c	;volatile
  4946                           
  4947                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  4948   001084  EF5A  F008         	goto	l168
  4949   001088                     l1782:
  4950   001088  0E02               	movlw	2
  4951   00108A  1878               	xorwf	_Columnas^0,w,c
  4952   00108C  A4D8               	btfss	status,2,c
  4953   00108E  EF4B  F008         	goto	u571
  4954   001092  EF4D  F008         	goto	u570
  4955   001096                     u571:
  4956   001096  EF50  F008         	goto	l1786
  4957   00109A                     u570:
  4958   00109A                     
  4959                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  4960   00109A  8C8C               	bsf	140,6,c	;volatile
  4961                           
  4962                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  4963   00109C  EF5A  F008         	goto	l168
  4964   0010A0                     l1786:
  4965   0010A0  0E04               	movlw	4
  4966   0010A2  1878               	xorwf	_Columnas^0,w,c
  4967   0010A4  A4D8               	btfss	status,2,c
  4968   0010A6  EF57  F008         	goto	u581
  4969   0010AA  EF59  F008         	goto	u580
  4970   0010AE                     u581:
  4971   0010AE  EF5A  F008         	goto	l168
  4972   0010B2                     u580:
  4973   0010B2                     
  4974                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  4975   0010B2  888C               	bsf	140,4,c	;volatile
  4976   0010B4                     l168:
  4977   0010B4  0012               	return		;funcret
  4978   0010B6                     __end_of_writeColumnas:
  4979                           	callstack 0
  4980                           
  4981 ;; *************** function _hashtag_pressed3s *****************
  4982 ;; Defined at:
  4983 ;;		line 58 in file "TAD_TERMINAL.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1
  4997 ;;      Params:         0       0       0
  4998 ;;      Locals:         0       0       0
  4999 ;;      Temps:          0       0       0
  5000 ;;      Totals:         0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used: 1
  5003 ;; Hardware stack levels required when called: 3
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_motorTeclado
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text23
  5012   001372                     __ptext23:
  5013                           	callstack 0
  5014   001372                     _hashtag_pressed3s:
  5015                           	callstack 26
  5016   001372                     
  5017                           ;TAD_TERMINAL.c: 59:  hashtag_pressed = 1;
  5018   001372  0E01               	movlw	1
  5019   001374  6E67               	movwf	_hashtag_pressed^0,c
  5020   001376  0012               	return		;funcret
  5021   001378                     __end_of_hashtag_pressed3s:
  5022                           	callstack 0
  5023                           
  5024 ;; *************** function _TI_ResetTics *****************
  5025 ;; Defined at:
  5026 ;;		line 53 in file "TAD_TIMER.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  TimerHandle     1    wreg     unsigned char 
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1
  5040 ;;      Params:         0       0       0
  5041 ;;      Locals:         1       0       0
  5042 ;;      Temps:          0       0       0
  5043 ;;      Totals:         1       0       0
  5044 ;;Total ram usage:        1 bytes
  5045 ;; Hardware stack levels used: 1
  5046 ;; Hardware stack levels required when called: 3
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_motorTeclado
  5051 ;;		_Espera
  5052 ;;		_WaitForBusy
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text24
  5057   001256                     __ptext24:
  5058                           	callstack 0
  5059   001256                     _TI_ResetTics:
  5060                           	callstack 26
  5061                           
  5062                           ;incstack = 0
  5063                           ;TI_ResetTics@TimerHandle stored from wreg
  5064   001256  6E02               	movwf	TI_ResetTics@TimerHandle^0,c
  5065   001258                     
  5066                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  5067   001258  9EF2               	bcf	242,7,c	;volatile
  5068   00125A  5002               	movf	TI_ResetTics@TimerHandle^0,w,c
  5069   00125C  0D05               	mullw	5
  5070   00125E  50F3               	movf	243,w,c
  5071   001260  0F80               	addlw	low _Timers
  5072   001262  6ED9               	movwf	fsr2l,c
  5073   001264  6ADA               	clrf	fsr2h,c
  5074   001266  C05B  FFDE         	movff	_Tics,postinc2	;volatile
  5075   00126A  C05C  FFDE         	movff	_Tics+1,postinc2	;volatile
  5076   00126E  C05D  FFDE         	movff	_Tics+2,postinc2	;volatile
  5077   001272  C05E  FFDE         	movff	_Tics+3,postinc2	;volatile
  5078   001276  8EF2               	bsf	242,7,c	;volatile
  5079   001278  0012               	return		;funcret
  5080   00127A                     __end_of_TI_ResetTics:
  5081                           	callstack 0
  5082                           
  5083 ;; *************** function _TI_GetTics *****************
  5084 ;; Defined at:
  5085 ;;		line 61 in file "TAD_TIMER.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  TimerHandle     1    wreg     unsigned char 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  5090 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  4    1[COMRAM] unsigned long 
  5093 ;; Registers used:
  5094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1
  5100 ;;      Params:         4       0       0
  5101 ;;      Locals:         5       0       0
  5102 ;;      Temps:          4       0       0
  5103 ;;      Totals:        13       0       0
  5104 ;;Total ram usage:       13 bytes
  5105 ;; Hardware stack levels used: 1
  5106 ;; Hardware stack levels required when called: 3
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_motorTeclado
  5111 ;;		_Espera
  5112 ;;		_WaitForBusy
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text25
  5117   001024                     __ptext25:
  5118                           	callstack 0
  5119   001024                     _TI_GetTics:
  5120                           	callstack 26
  5121                           
  5122                           ;incstack = 0
  5123                           ;TI_GetTics@TimerHandle stored from wreg
  5124   001024  6E0E               	movwf	TI_GetTics@TimerHandle^0,c
  5125   001026                     
  5126                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  5127   001026  9EF2               	bcf	242,7,c	;volatile
  5128   001028  C05B  F00A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  5129   00102C  C05C  F00B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  5130   001030  C05D  F00C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  5131   001034  C05E  F00D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  5132   001038  8EF2               	bsf	242,7,c	;volatile
  5133   00103A                     
  5134                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  5135   00103A  500E               	movf	TI_GetTics@TimerHandle^0,w,c
  5136   00103C  0D05               	mullw	5
  5137   00103E  50F3               	movf	243,w,c
  5138   001040  0F80               	addlw	low _Timers
  5139   001042  6ED9               	movwf	fsr2l,c
  5140   001044  6ADA               	clrf	fsr2h,c
  5141   001046  CFDE F006          	movff	postinc2,??_TI_GetTics
  5142   00104A  CFDE F007          	movff	postinc2,??_TI_GetTics+1
  5143   00104E  CFDE F008          	movff	postinc2,??_TI_GetTics+2
  5144   001052  CFDE F009          	movff	postinc2,??_TI_GetTics+3
  5145   001056  5006               	movf	??_TI_GetTics^0,w,c
  5146   001058  5C0A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  5147   00105A  6E02               	movwf	?_TI_GetTics^0,c
  5148   00105C  5007               	movf	(??_TI_GetTics+1)^0,w,c
  5149   00105E  580B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  5150   001060  6E03               	movwf	(?_TI_GetTics+1)^0,c
  5151   001062  5008               	movf	(??_TI_GetTics+2)^0,w,c
  5152   001064  580C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  5153   001066  6E04               	movwf	(?_TI_GetTics+2)^0,c
  5154   001068  5009               	movf	(??_TI_GetTics+3)^0,w,c
  5155   00106A  580D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  5156   00106C  6E05               	movwf	(?_TI_GetTics+3)^0,c
  5157   00106E  0012               	return		;funcret
  5158   001070                     __end_of_TI_GetTics:
  5159                           	callstack 0
  5160                           
  5161 ;; *************** function _ReadFilas *****************
  5162 ;; Defined at:
  5163 ;;		line 10 in file "TAD_TECLADO.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      unsigned char 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1
  5177 ;;      Params:         0       0       0
  5178 ;;      Locals:         0       0       0
  5179 ;;      Temps:          0       0       0
  5180 ;;      Totals:         0       0       0
  5181 ;;Total ram usage:        0 bytes
  5182 ;; Hardware stack levels used: 1
  5183 ;; Hardware stack levels required when called: 3
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_motorTeclado
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text26
  5192   001378                     __ptext26:
  5193                           	callstack 0
  5194   001378                     _ReadFilas:
  5195                           	callstack 26
  5196   001378                     
  5197                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  5198   001378  5083               	movf	131,w,c	;volatile
  5199   00137A  0B0F               	andlw	15
  5200   00137C  0012               	return		;funcret
  5201   00137E                     __end_of_ReadFilas:
  5202                           	callstack 0
  5203                           
  5204 ;; *************** function _GetTecla *****************
  5205 ;; Defined at:
  5206 ;;		line 128 in file "TAD_TECLADO.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  5211 ;;  fila            1   16[COMRAM] unsigned char 
  5212 ;;  columna         1   15[COMRAM] unsigned char 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      unsigned char 
  5215 ;; Registers used:
  5216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1
  5222 ;;      Params:         0       0       0
  5223 ;;      Locals:        14       0       0
  5224 ;;      Temps:          2       0       0
  5225 ;;      Totals:        16       0       0
  5226 ;;Total ram usage:       16 bytes
  5227 ;; Hardware stack levels used: 1
  5228 ;; Hardware stack levels required when called: 3
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_motorTeclado
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text27
  5237   000ABC                     __ptext27:
  5238                           	callstack 0
  5239   000ABC                     _GetTecla:
  5240                           	callstack 26
  5241   000ABC                     
  5242                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  5243   000ABC  6A10               	clrf	GetTecla@columna^0,c
  5244                           
  5245                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  5246   000ABE  EF73  F005         	goto	l1804
  5247   000AC2                     l172:
  5248   000AC2  6A11               	clrf	GetTecla@fila^0,c
  5249   000AC4  EF91  F005         	goto	l1816
  5250   000AC8                     l1792:
  5251   000AC8  0E01               	movlw	1
  5252   000ACA  6E11               	movwf	GetTecla@fila^0,c
  5253   000ACC  EF91  F005         	goto	l1816
  5254   000AD0                     l1794:
  5255   000AD0  0E02               	movlw	2
  5256   000AD2  6E11               	movwf	GetTecla@fila^0,c
  5257   000AD4  EF91  F005         	goto	l1816
  5258   000AD8                     l1796:
  5259   000AD8  0E03               	movlw	3
  5260   000ADA  6E11               	movwf	GetTecla@fila^0,c
  5261   000ADC  EF91  F005         	goto	l1816
  5262   000AE0                     l1798:
  5263   000AE0  0EFF               	movlw	255
  5264   000AE2  EFBF  F005         	goto	l178
  5265   000AE6                     l1804:
  5266   000AE6  5079               	movf	_Filas^0,w,c
  5267                           
  5268                           ; Switch size 1, requested type "simple"
  5269                           ; Number of cases is 4, Range of values is 1 to 8
  5270                           ; switch strategies available:
  5271                           ; Name         Instructions Cycles
  5272                           ; simple_byte           13     7 (average)
  5273                           ;	Chosen strategy is simple_byte
  5274   000AE8  0A01               	xorlw	1	; case 1
  5275   000AEA  B4D8               	btfsc	status,2,c
  5276   000AEC  EF61  F005         	goto	l172
  5277   000AF0  0A03               	xorlw	3	; case 2
  5278   000AF2  B4D8               	btfsc	status,2,c
  5279   000AF4  EF64  F005         	goto	l1792
  5280   000AF8  0A06               	xorlw	6	; case 4
  5281   000AFA  B4D8               	btfsc	status,2,c
  5282   000AFC  EF68  F005         	goto	l1794
  5283   000B00  0A0C               	xorlw	12	; case 8
  5284   000B02  B4D8               	btfsc	status,2,c
  5285   000B04  EF6C  F005         	goto	l1796
  5286   000B08  EF70  F005         	goto	l1798
  5287   000B0C                     l180:
  5288   000B0C  6A10               	clrf	GetTecla@columna^0,c
  5289   000B0E  EFAB  F005         	goto	l1818
  5290   000B12                     l1806:
  5291   000B12  0E01               	movlw	1
  5292   000B14  6E10               	movwf	GetTecla@columna^0,c
  5293   000B16  EFAB  F005         	goto	l1818
  5294   000B1A                     l1808:
  5295   000B1A  0E02               	movlw	2
  5296   000B1C  6E10               	movwf	GetTecla@columna^0,c
  5297   000B1E  EFAB  F005         	goto	l1818
  5298   000B22                     l1816:
  5299   000B22  5078               	movf	_Columnas^0,w,c
  5300   000B24  0B07               	andlw	7
  5301   000B26  6E02               	movwf	??_GetTecla^0,c
  5302   000B28  6A03               	clrf	(??_GetTecla+1)^0,c
  5303                           
  5304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5305                           ; Switch size 1, requested type "simple"
  5306                           ; Number of cases is 1, Range of values is 0 to 0
  5307                           ; switch strategies available:
  5308                           ; Name         Instructions Cycles
  5309                           ; simple_byte            4     3 (average)
  5310                           ;	Chosen strategy is simple_byte
  5311   000B2A  5003               	movf	(??_GetTecla+1)^0,w,c
  5312   000B2C  0A00               	xorlw	0	; case 0
  5313   000B2E  B4D8               	btfsc	status,2,c
  5314   000B30  EF9C  F005         	goto	l3782
  5315   000B34  EF70  F005         	goto	l1798
  5316   000B38                     l3782:
  5317                           
  5318                           ; Switch size 1, requested type "simple"
  5319                           ; Number of cases is 3, Range of values is 1 to 4
  5320                           ; switch strategies available:
  5321                           ; Name         Instructions Cycles
  5322                           ; simple_byte           10     6 (average)
  5323                           ;	Chosen strategy is simple_byte
  5324   000B38  5002               	movf	??_GetTecla^0,w,c
  5325   000B3A  0A01               	xorlw	1	; case 1
  5326   000B3C  B4D8               	btfsc	status,2,c
  5327   000B3E  EF86  F005         	goto	l180
  5328   000B42  0A03               	xorlw	3	; case 2
  5329   000B44  B4D8               	btfsc	status,2,c
  5330   000B46  EF89  F005         	goto	l1806
  5331   000B4A  0A06               	xorlw	6	; case 4
  5332   000B4C  B4D8               	btfsc	status,2,c
  5333   000B4E  EF8D  F005         	goto	l1808
  5334   000B52  EF70  F005         	goto	l1798
  5335   000B56                     l1818:
  5336                           
  5337                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  5338   000B56  0EDD               	movlw	low GetTecla@F3221
  5339   000B58  6EF6               	movwf	tblptrl,c
  5340   000B5A                     	if	1	;There is more than 1 active tblptr byte
  5341   000B5A  0E1E               	movlw	high GetTecla@F3221
  5342   000B5C  6EF7               	movwf	tblptrh,c
  5343   000B5E                     	endif
  5344   000B5E                     	if	0	;There are less than 3 active tblptr bytes
  5345   000B5E                     	endif
  5346   000B5E  EE20  F004         	lfsr	2,GetTecla@keymap
  5347   000B62  0E0B               	movlw	11
  5348   000B64                     u590:
  5349   000B64  0009               	tblrd		*+
  5350   000B66  CFF5 FFDE          	movff	tablat,postinc2
  5351   000B6A  06E8               	decf	wreg,f,c
  5352   000B6C  E2FB               	bc	u590
  5353   000B6E                     
  5354                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  5355   000B6E  5011               	movf	GetTecla@fila^0,w,c
  5356   000B70  0D03               	mullw	3
  5357   000B72  50F3               	movf	243,w,c
  5358   000B74  0F04               	addlw	low GetTecla@keymap
  5359   000B76  2410               	addwf	GetTecla@columna^0,w,c
  5360   000B78  6ED9               	movwf	fsr2l,c
  5361   000B7A  6ADA               	clrf	fsr2h,c
  5362   000B7C  50DF               	movf	indf2,w,c
  5363   000B7E                     l178:
  5364   000B7E  0012               	return		;funcret
  5365   000B80                     __end_of_GetTecla:
  5366                           	callstack 0
  5367                           
  5368 ;; *************** function _initRFID *****************
  5369 ;; Defined at:
  5370 ;;		line 297 in file "TAD_RFID.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      void 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMRAM   BANK0   BANK1
  5384 ;;      Params:         0       0       0
  5385 ;;      Locals:         0       0       0
  5386 ;;      Temps:          0       0       0
  5387 ;;      Totals:         0       0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used: 1
  5390 ;; Hardware stack levels required when called: 8
  5391 ;; This function calls:
  5392 ;;		_InitPortDirections
  5393 ;;		_MFRC522_Init
  5394 ;; This function is called by:
  5395 ;;		_main
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text28
  5400   001350                     __ptext28:
  5401                           	callstack 0
  5402   001350                     _initRFID:
  5403                           	callstack 22
  5404   001350                     
  5405                           ;TAD_RFID.c: 298:     InitPortDirections();
  5406   001350  ECA2  F009         	call	_InitPortDirections	;wreg free
  5407   001354                     
  5408                           ;TAD_RFID.c: 299:     MFRC522_Init();
  5409   001354  ECEB  F007         	call	_MFRC522_Init	;wreg free
  5410   001358  0012               	return		;funcret
  5411   00135A                     __end_of_initRFID:
  5412                           	callstack 0
  5413                           
  5414 ;; *************** function _MFRC522_Init *****************
  5415 ;; Defined at:
  5416 ;;		line 118 in file "TAD_RFID.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;		None
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      void 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1
  5430 ;;      Params:         0       0       0
  5431 ;;      Locals:         0       0       0
  5432 ;;      Temps:          0       0       0
  5433 ;;      Totals:         0       0       0
  5434 ;;Total ram usage:        0 bytes
  5435 ;; Hardware stack levels used: 1
  5436 ;; Hardware stack levels required when called: 7
  5437 ;; This function calls:
  5438 ;;		_MFRC522_AntennaOff
  5439 ;;		_MFRC522_AntennaOn
  5440 ;;		_MFRC522_Reset
  5441 ;;		_MFRC522_Wr
  5442 ;; This function is called by:
  5443 ;;		_initRFID
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text29
  5448   000FD6                     __ptext29:
  5449                           	callstack 0
  5450   000FD6                     _MFRC522_Init:
  5451                           	callstack 22
  5452   000FD6                     
  5453                           ;TAD_RFID.c: 119:     LATCbits.LATC3 = 1;
  5454   000FD6  868B               	bsf	139,3,c	;volatile
  5455                           
  5456                           ;TAD_RFID.c: 120:     LATCbits.LATC4 = 1;
  5457   000FD8  888B               	bsf	139,4,c	;volatile
  5458   000FDA                     
  5459                           ;TAD_RFID.c: 122:     MFRC522_Reset();
  5460   000FDA  EC03  F009         	call	_MFRC522_Reset	;wreg free
  5461                           
  5462                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2A, 0x8D);
  5463   000FDE  0E8D               	movlw	141
  5464   000FE0  6E0C               	movwf	MFRC522_Wr@value^0,c
  5465   000FE2  0E2A               	movlw	42
  5466   000FE4  EC6B  F006         	call	_MFRC522_Wr
  5467                           
  5468                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2B, 0x3E);
  5469   000FE8  0E3E               	movlw	62
  5470   000FEA  6E0C               	movwf	MFRC522_Wr@value^0,c
  5471   000FEC  0E2B               	movlw	43
  5472   000FEE  EC6B  F006         	call	_MFRC522_Wr
  5473                           
  5474                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x2D, 30);
  5475   000FF2  0E1E               	movlw	30
  5476   000FF4  6E0C               	movwf	MFRC522_Wr@value^0,c
  5477   000FF6  0E2D               	movlw	45
  5478   000FF8  EC6B  F006         	call	_MFRC522_Wr
  5479                           
  5480                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x2C, 0);
  5481   000FFC  0E00               	movlw	0
  5482   000FFE  6E0C               	movwf	MFRC522_Wr@value^0,c
  5483   001000  0E2C               	movlw	44
  5484   001002  EC6B  F006         	call	_MFRC522_Wr
  5485                           
  5486                           ;TAD_RFID.c: 127:     MFRC522_Wr(0x15, 0x40);
  5487   001006  0E40               	movlw	64
  5488   001008  6E0C               	movwf	MFRC522_Wr@value^0,c
  5489   00100A  0E15               	movlw	21
  5490   00100C  EC6B  F006         	call	_MFRC522_Wr
  5491                           
  5492                           ;TAD_RFID.c: 128:     MFRC522_Wr(0x11, 0x3D);
  5493   001010  0E3D               	movlw	61
  5494   001012  6E0C               	movwf	MFRC522_Wr@value^0,c
  5495   001014  0E11               	movlw	17
  5496   001016  EC6B  F006         	call	_MFRC522_Wr
  5497                           
  5498                           ;TAD_RFID.c: 130:     MFRC522_AntennaOff();
  5499   00101A  EC9C  F009         	call	_MFRC522_AntennaOff	;wreg free
  5500                           
  5501                           ;TAD_RFID.c: 131:     MFRC522_AntennaOn();
  5502   00101E  EC96  F009         	call	_MFRC522_AntennaOn	;wreg free
  5503   001022  0012               	return		;funcret
  5504   001024                     __end_of_MFRC522_Init:
  5505                           	callstack 0
  5506                           
  5507 ;; *************** function _MFRC522_Reset *****************
  5508 ;; Defined at:
  5509 ;;		line 99 in file "TAD_RFID.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;		None
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;		None
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      void 
  5516 ;; Registers used:
  5517 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1
  5523 ;;      Params:         0       0       0
  5524 ;;      Locals:         0       0       0
  5525 ;;      Temps:          0       0       0
  5526 ;;      Totals:         0       0       0
  5527 ;;Total ram usage:        0 bytes
  5528 ;; Hardware stack levels used: 1
  5529 ;; Hardware stack levels required when called: 5
  5530 ;; This function calls:
  5531 ;;		_MFRC522_Wr
  5532 ;;		_delay_us
  5533 ;; This function is called by:
  5534 ;;		_MFRC522_Init
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text30
  5539   001206                     __ptext30:
  5540                           	callstack 0
  5541   001206                     _MFRC522_Reset:
  5542                           	callstack 23
  5543   001206                     
  5544                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 1;
  5545   001206  888B               	bsf	139,4,c	;volatile
  5546   001208                     
  5547                           ;TAD_RFID.c: 101:     delay_us (1);
  5548   001208  0E01               	movlw	1
  5549   00120A  ECB6  F008         	call	_delay_us
  5550   00120E                     
  5551                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 0;
  5552   00120E  988B               	bcf	139,4,c	;volatile
  5553                           
  5554                           ;TAD_RFID.c: 103:     delay_us (1);
  5555   001210  0E01               	movlw	1
  5556   001212  ECB6  F008         	call	_delay_us
  5557   001216                     
  5558                           ;TAD_RFID.c: 104:     LATCbits.LATC4 = 1;
  5559   001216  888B               	bsf	139,4,c	;volatile
  5560                           
  5561                           ;TAD_RFID.c: 105:     delay_us (1);
  5562   001218  0E01               	movlw	1
  5563   00121A  ECB6  F008         	call	_delay_us
  5564                           
  5565                           ;TAD_RFID.c: 106:     MFRC522_Wr(0x01, 0x0F);
  5566   00121E  0E0F               	movlw	15
  5567   001220  6E0C               	movwf	MFRC522_Wr@value^0,c
  5568   001222  0E01               	movlw	1
  5569   001224  EC6B  F006         	call	_MFRC522_Wr
  5570                           
  5571                           ;TAD_RFID.c: 107:     delay_us (1);
  5572   001228  0E01               	movlw	1
  5573   00122A  ECB6  F008         	call	_delay_us
  5574   00122E  0012               	return		;funcret
  5575   001230                     __end_of_MFRC522_Reset:
  5576                           	callstack 0
  5577                           
  5578 ;; *************** function _MFRC522_AntennaOn *****************
  5579 ;; Defined at:
  5580 ;;		line 110 in file "TAD_RFID.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1
  5594 ;;      Params:         0       0       0
  5595 ;;      Locals:         0       0       0
  5596 ;;      Temps:          0       0       0
  5597 ;;      Totals:         0       0       0
  5598 ;;Total ram usage:        0 bytes
  5599 ;; Hardware stack levels used: 1
  5600 ;; Hardware stack levels required when called: 6
  5601 ;; This function calls:
  5602 ;;		_MFRC522_Set_Bit
  5603 ;; This function is called by:
  5604 ;;		_MFRC522_Init
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text31
  5609   00132C                     __ptext31:
  5610                           	callstack 0
  5611   00132C                     _MFRC522_AntennaOn:
  5612                           	callstack 22
  5613   00132C                     
  5614                           ;TAD_RFID.c: 111:     MFRC522_Set_Bit(0x14, 0x03);
  5615   00132C  0E03               	movlw	3
  5616   00132E  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  5617   001330  0E14               	movlw	20
  5618   001332  EC84  F009         	call	_MFRC522_Set_Bit
  5619   001336  0012               	return		;funcret
  5620   001338                     __end_of_MFRC522_AntennaOn:
  5621                           	callstack 0
  5622                           
  5623 ;; *************** function _MFRC522_Set_Bit *****************
  5624 ;; Defined at:
  5625 ;;		line 95 in file "TAD_RFID.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  addr            1    wreg     unsigned char 
  5628 ;;  mask            1   16[COMRAM] unsigned char 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  addr            1   17[COMRAM] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1
  5640 ;;      Params:         1       0       0
  5641 ;;      Locals:         1       0       0
  5642 ;;      Temps:          0       0       0
  5643 ;;      Totals:         2       0       0
  5644 ;;Total ram usage:        2 bytes
  5645 ;; Hardware stack levels used: 1
  5646 ;; Hardware stack levels required when called: 5
  5647 ;; This function calls:
  5648 ;;		_MFRC522_Rd
  5649 ;;		_MFRC522_Wr
  5650 ;; This function is called by:
  5651 ;;		_MFRC522_AntennaOn
  5652 ;;		_motor_RFID
  5653 ;;		_MFRC522_ToCard
  5654 ;;		_MFRC522_CRC
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text32
  5659   001308                     __ptext32:
  5660                           	callstack 0
  5661   001308                     _MFRC522_Set_Bit:
  5662                           	callstack 24
  5663                           
  5664                           ;incstack = 0
  5665                           ;MFRC522_Set_Bit@addr stored from wreg
  5666   001308  6E12               	movwf	MFRC522_Set_Bit@addr^0,c
  5667   00130A                     
  5668                           ;TAD_RFID.c: 96:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  5669   00130A  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5670   00130C  ECBF  F006         	call	_MFRC522_Rd
  5671   001310  1011               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  5672   001312  6E0C               	movwf	MFRC522_Wr@value^0,c
  5673   001314  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5674   001316  EC6B  F006         	call	_MFRC522_Wr
  5675   00131A  0012               	return		;funcret
  5676   00131C                     __end_of_MFRC522_Set_Bit:
  5677                           	callstack 0
  5678                           
  5679 ;; *************** function _MFRC522_AntennaOff *****************
  5680 ;; Defined at:
  5681 ;;		line 114 in file "TAD_RFID.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1
  5695 ;;      Params:         0       0       0
  5696 ;;      Locals:         0       0       0
  5697 ;;      Temps:          0       0       0
  5698 ;;      Totals:         0       0       0
  5699 ;;Total ram usage:        0 bytes
  5700 ;; Hardware stack levels used: 1
  5701 ;; Hardware stack levels required when called: 6
  5702 ;; This function calls:
  5703 ;;		_MFRC522_Clear_Bit
  5704 ;; This function is called by:
  5705 ;;		_MFRC522_Init
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text33
  5710   001338                     __ptext33:
  5711                           	callstack 0
  5712   001338                     _MFRC522_AntennaOff:
  5713                           	callstack 22
  5714   001338                     
  5715                           ;TAD_RFID.c: 115:     MFRC522_Clear_Bit(0x14, 0x03);
  5716   001338  0E03               	movlw	3
  5717   00133A  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  5718   00133C  0E14               	movlw	20
  5719   00133E  EC4B  F009         	call	_MFRC522_Clear_Bit
  5720   001342  0012               	return		;funcret
  5721   001344                     __end_of_MFRC522_AntennaOff:
  5722                           	callstack 0
  5723                           
  5724 ;; *************** function _MFRC522_Clear_Bit *****************
  5725 ;; Defined at:
  5726 ;;		line 91 in file "TAD_RFID.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  addr            1    wreg     unsigned char 
  5729 ;;  mask            1   16[COMRAM] unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  addr            1   18[COMRAM] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1
  5741 ;;      Params:         1       0       0
  5742 ;;      Locals:         1       0       0
  5743 ;;      Temps:          1       0       0
  5744 ;;      Totals:         3       0       0
  5745 ;;Total ram usage:        3 bytes
  5746 ;; Hardware stack levels used: 1
  5747 ;; Hardware stack levels required when called: 5
  5748 ;; This function calls:
  5749 ;;		_MFRC522_Rd
  5750 ;;		_MFRC522_Wr
  5751 ;; This function is called by:
  5752 ;;		_MFRC522_AntennaOff
  5753 ;;		_motor_RFID
  5754 ;;		_MFRC522_ToCard
  5755 ;;		_MFRC522_CRC
  5756 ;;		_MFRC522_Halt
  5757 ;;		_MFRC522_AntiColl
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text34
  5762   001296                     __ptext34:
  5763                           	callstack 0
  5764   001296                     _MFRC522_Clear_Bit:
  5765                           	callstack 24
  5766                           
  5767                           ;incstack = 0
  5768                           ;MFRC522_Clear_Bit@addr stored from wreg
  5769   001296  6E13               	movwf	MFRC522_Clear_Bit@addr^0,c
  5770   001298                     
  5771                           ;TAD_RFID.c: 92:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  5772   001298  5011               	movf	MFRC522_Clear_Bit@mask^0,w,c
  5773   00129A  0AFF               	xorlw	255
  5774   00129C  6E12               	movwf	??_MFRC522_Clear_Bit^0,c
  5775   00129E  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5776   0012A0  ECBF  F006         	call	_MFRC522_Rd
  5777   0012A4  1412               	andwf	??_MFRC522_Clear_Bit^0,w,c
  5778   0012A6  6E0C               	movwf	MFRC522_Wr@value^0,c
  5779   0012A8  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5780   0012AA  EC6B  F006         	call	_MFRC522_Wr
  5781   0012AE  0012               	return		;funcret
  5782   0012B0                     __end_of_MFRC522_Clear_Bit:
  5783                           	callstack 0
  5784                           
  5785 ;; *************** function _MFRC522_Wr *****************
  5786 ;; Defined at:
  5787 ;;		line 63 in file "TAD_RFID.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  Address         1    wreg     unsigned char 
  5790 ;;  value           1   11[COMRAM] unsigned char 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  Address         1   13[COMRAM] unsigned char 
  5793 ;;  i               1   15[COMRAM] unsigned char 
  5794 ;;  ucAddr          1   14[COMRAM] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      void 
  5797 ;; Registers used:
  5798 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1
  5804 ;;      Params:         1       0       0
  5805 ;;      Locals:         3       0       0
  5806 ;;      Temps:          1       0       0
  5807 ;;      Totals:         5       0       0
  5808 ;;Total ram usage:        5 bytes
  5809 ;; Hardware stack levels used: 1
  5810 ;; Hardware stack levels required when called: 4
  5811 ;; This function calls:
  5812 ;;		_delay_us
  5813 ;; This function is called by:
  5814 ;;		_MFRC522_Clear_Bit
  5815 ;;		_MFRC522_Set_Bit
  5816 ;;		_MFRC522_Reset
  5817 ;;		_MFRC522_Init
  5818 ;;		_motor_RFID
  5819 ;;		_MFRC522_ToCard
  5820 ;;		_MFRC522_Request
  5821 ;;		_MFRC522_CRC
  5822 ;;		_MFRC522_AntiColl
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text35
  5827   000CD6                     __ptext35:
  5828                           	callstack 0
  5829   000CD6                     _MFRC522_Wr:
  5830                           	callstack 25
  5831                           
  5832                           ;incstack = 0
  5833                           ;MFRC522_Wr@Address stored from wreg
  5834   000CD6  6E0E               	movwf	MFRC522_Wr@Address^0,c
  5835   000CD8                     
  5836                           ;TAD_RFID.c: 64:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  5837   000CD8  500E               	movf	MFRC522_Wr@Address^0,w,c
  5838   000CDA  240E               	addwf	MFRC522_Wr@Address^0,w,c
  5839   000CDC  0B7E               	andlw	126
  5840   000CDE  6E0F               	movwf	MFRC522_Wr@ucAddr^0,c
  5841   000CE0                     
  5842                           ;TAD_RFID.c: 65:     LATCbits.LATC2 = 0;
  5843   000CE0  948B               	bcf	139,2,c	;volatile
  5844   000CE2                     
  5845                           ;TAD_RFID.c: 66:     LATCbits.LATC3 = 0;
  5846   000CE2  968B               	bcf	139,3,c	;volatile
  5847   000CE4                     
  5848                           ;TAD_RFID.c: 67:     for (i = 8; i > 0; i--) {
  5849   000CE4  0E08               	movlw	8
  5850   000CE6  6E10               	movwf	MFRC522_Wr@i^0,c
  5851   000CE8                     l2724:
  5852                           
  5853                           ;TAD_RFID.c: 68:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5854   000CE8  BE0F               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  5855   000CEA  EF79  F006         	goto	u1761
  5856   000CEE  EF7D  F006         	goto	u1760
  5857   000CF2                     u1761:
  5858   000CF2  6A0D               	clrf	??_MFRC522_Wr^0,c
  5859   000CF4  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5860   000CF6  EF7E  F006         	goto	u1778
  5861   000CFA                     u1760:
  5862   000CFA  6A0D               	clrf	??_MFRC522_Wr^0,c
  5863   000CFC                     u1778:
  5864   000CFC  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5865   000CFE  508B               	movf	139,w,c	;volatile
  5866   000D00  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5867   000D02  0BFD               	andlw	-3
  5868   000D04  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5869   000D06  6E8B               	movwf	139,c	;volatile
  5870   000D08                     
  5871                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 1;
  5872   000D08  848B               	bsf	139,2,c	;volatile
  5873                           
  5874                           ;TAD_RFID.c: 70:         ucAddr <<= 1;
  5875   000D0A  90D8               	bcf	status,0,c
  5876   000D0C  360F               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  5877   000D0E                     
  5878                           ;TAD_RFID.c: 71:         delay_us(5);
  5879   000D0E  0E05               	movlw	5
  5880   000D10  ECB6  F008         	call	_delay_us
  5881   000D14                     
  5882                           ;TAD_RFID.c: 72:         LATCbits.LATC2 = 0;
  5883   000D14  948B               	bcf	139,2,c	;volatile
  5884   000D16                     
  5885                           ;TAD_RFID.c: 73:         delay_us(5);
  5886   000D16  0E05               	movlw	5
  5887   000D18  ECB6  F008         	call	_delay_us
  5888   000D1C                     
  5889                           ;TAD_RFID.c: 74:     }
  5890   000D1C  0610               	decf	MFRC522_Wr@i^0,f,c
  5891   000D1E  5010               	movf	MFRC522_Wr@i^0,w,c
  5892   000D20  A4D8               	btfss	status,2,c
  5893   000D22  EF95  F006         	goto	u1781
  5894   000D26  EF97  F006         	goto	u1780
  5895   000D2A                     u1781:
  5896   000D2A  EF74  F006         	goto	l2724
  5897   000D2E                     u1780:
  5898   000D2E                     
  5899                           ;TAD_RFID.c: 76:     for (i = 8; i > 0; i--) {
  5900   000D2E  0E08               	movlw	8
  5901   000D30  6E10               	movwf	MFRC522_Wr@i^0,c
  5902   000D32                     l2742:
  5903                           
  5904                           ;TAD_RFID.c: 77:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  5905   000D32  BE0C               	btfsc	MFRC522_Wr@value^0,7,c
  5906   000D34  EF9E  F006         	goto	u1791
  5907   000D38  EFA2  F006         	goto	u1790
  5908   000D3C                     u1791:
  5909   000D3C  6A0D               	clrf	??_MFRC522_Wr^0,c
  5910   000D3E  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5911   000D40  EFA3  F006         	goto	u1808
  5912   000D44                     u1790:
  5913   000D44  6A0D               	clrf	??_MFRC522_Wr^0,c
  5914   000D46                     u1808:
  5915   000D46  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5916   000D48  508B               	movf	139,w,c	;volatile
  5917   000D4A  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5918   000D4C  0BFD               	andlw	-3
  5919   000D4E  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5920   000D50  6E8B               	movwf	139,c	;volatile
  5921   000D52                     
  5922                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 1;
  5923   000D52  848B               	bsf	139,2,c	;volatile
  5924                           
  5925                           ;TAD_RFID.c: 79:         value <<= 1;
  5926   000D54  90D8               	bcf	status,0,c
  5927   000D56  360C               	rlcf	MFRC522_Wr@value^0,f,c
  5928   000D58                     
  5929                           ;TAD_RFID.c: 80:         delay_us(5);
  5930   000D58  0E05               	movlw	5
  5931   000D5A  ECB6  F008         	call	_delay_us
  5932   000D5E                     
  5933                           ;TAD_RFID.c: 81:         LATCbits.LATC2 = 0;
  5934   000D5E  948B               	bcf	139,2,c	;volatile
  5935   000D60                     
  5936                           ;TAD_RFID.c: 82:         delay_us(5);
  5937   000D60  0E05               	movlw	5
  5938   000D62  ECB6  F008         	call	_delay_us
  5939   000D66                     
  5940                           ;TAD_RFID.c: 83:     }
  5941   000D66  0610               	decf	MFRC522_Wr@i^0,f,c
  5942   000D68  5010               	movf	MFRC522_Wr@i^0,w,c
  5943   000D6A  A4D8               	btfss	status,2,c
  5944   000D6C  EFBA  F006         	goto	u1811
  5945   000D70  EFBC  F006         	goto	u1810
  5946   000D74                     u1811:
  5947   000D74  EF99  F006         	goto	l2742
  5948   000D78                     u1810:
  5949   000D78                     
  5950                           ;TAD_RFID.c: 85:     LATCbits.LATC3 = 1;
  5951   000D78  868B               	bsf	139,3,c	;volatile
  5952                           
  5953                           ;TAD_RFID.c: 86:     LATCbits.LATC2 = 1;
  5954   000D7A  848B               	bsf	139,2,c	;volatile
  5955   000D7C  0012               	return		;funcret
  5956   000D7E                     __end_of_MFRC522_Wr:
  5957                           	callstack 0
  5958                           
  5959 ;; *************** function _MFRC522_Rd *****************
  5960 ;; Defined at:
  5961 ;;		line 32 in file "TAD_RFID.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  Address         1    wreg     unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  Address         1    7[COMRAM] unsigned char 
  5966 ;;  i               1   10[COMRAM] unsigned char 
  5967 ;;  ucResult        1    9[COMRAM] unsigned char 
  5968 ;;  ucAddr          1    8[COMRAM] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      unsigned char 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1
  5978 ;;      Params:         0       0       0
  5979 ;;      Locals:         4       0       0
  5980 ;;      Temps:          1       0       0
  5981 ;;      Totals:         5       0       0
  5982 ;;Total ram usage:        5 bytes
  5983 ;; Hardware stack levels used: 1
  5984 ;; Hardware stack levels required when called: 4
  5985 ;; This function calls:
  5986 ;;		_delay_us
  5987 ;; This function is called by:
  5988 ;;		_MFRC522_Clear_Bit
  5989 ;;		_MFRC522_Set_Bit
  5990 ;;		_motor_RFID
  5991 ;;		_MFRC522_ToCard
  5992 ;;		_MFRC522_CRC
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text36
  5997   000D7E                     __ptext36:
  5998                           	callstack 0
  5999   000D7E                     _MFRC522_Rd:
  6000                           	callstack 24
  6001                           
  6002                           ;incstack = 0
  6003                           ;MFRC522_Rd@Address stored from wreg
  6004   000D7E  6E08               	movwf	MFRC522_Rd@Address^0,c
  6005   000D80                     
  6006                           ;TAD_RFID.c: 33:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  6007   000D80  5008               	movf	MFRC522_Rd@Address^0,w,c
  6008   000D82  2408               	addwf	MFRC522_Rd@Address^0,w,c
  6009   000D84  0B7E               	andlw	126
  6010   000D86  0980               	iorlw	128
  6011   000D88  6E09               	movwf	MFRC522_Rd@ucAddr^0,c
  6012   000D8A                     
  6013                           ;TAD_RFID.c: 34:     unsigned char ucResult = 0;
  6014   000D8A  6A0A               	clrf	MFRC522_Rd@ucResult^0,c
  6015   000D8C                     
  6016                           ;TAD_RFID.c: 36:     LATCbits.LATC2 = 0;
  6017   000D8C  948B               	bcf	139,2,c	;volatile
  6018   000D8E                     
  6019                           ;TAD_RFID.c: 37:     LATCbits.LATC3 = 0;
  6020   000D8E  968B               	bcf	139,3,c	;volatile
  6021   000D90                     
  6022                           ;TAD_RFID.c: 39:     for (i = 8; i > 0; i--) {
  6023   000D90  0E08               	movlw	8
  6024   000D92  6E0B               	movwf	MFRC522_Rd@i^0,c
  6025   000D94                     l2678:
  6026                           
  6027                           ;TAD_RFID.c: 40:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6028   000D94  BE09               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  6029   000D96  EFCF  F006         	goto	u1711
  6030   000D9A  EFD3  F006         	goto	u1710
  6031   000D9E                     u1711:
  6032   000D9E  6A07               	clrf	??_MFRC522_Rd^0,c
  6033   000DA0  2A07               	incf	??_MFRC522_Rd^0,f,c
  6034   000DA2  EFD4  F006         	goto	u1728
  6035   000DA6                     u1710:
  6036   000DA6  6A07               	clrf	??_MFRC522_Rd^0,c
  6037   000DA8                     u1728:
  6038   000DA8  4607               	rlncf	??_MFRC522_Rd^0,f,c
  6039   000DAA  508B               	movf	139,w,c	;volatile
  6040   000DAC  1807               	xorwf	??_MFRC522_Rd^0,w,c
  6041   000DAE  0BFD               	andlw	-3
  6042   000DB0  1807               	xorwf	??_MFRC522_Rd^0,w,c
  6043   000DB2  6E8B               	movwf	139,c	;volatile
  6044   000DB4                     
  6045                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 1;
  6046   000DB4  848B               	bsf	139,2,c	;volatile
  6047   000DB6                     
  6048                           ;TAD_RFID.c: 42:         delay_us(5);
  6049   000DB6  0E05               	movlw	5
  6050   000DB8  ECB6  F008         	call	_delay_us
  6051   000DBC                     
  6052                           ;TAD_RFID.c: 43:         ucAddr <<= 1;
  6053   000DBC  90D8               	bcf	status,0,c
  6054   000DBE  3609               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  6055   000DC0                     
  6056                           ;TAD_RFID.c: 44:         LATCbits.LATC2 = 0;
  6057   000DC0  948B               	bcf	139,2,c	;volatile
  6058                           
  6059                           ;TAD_RFID.c: 45:         delay_us(5);
  6060   000DC2  0E05               	movlw	5
  6061   000DC4  ECB6  F008         	call	_delay_us
  6062   000DC8                     
  6063                           ;TAD_RFID.c: 46:     }
  6064   000DC8  060B               	decf	MFRC522_Rd@i^0,f,c
  6065   000DCA  500B               	movf	MFRC522_Rd@i^0,w,c
  6066   000DCC  A4D8               	btfss	status,2,c
  6067   000DCE  EFEB  F006         	goto	u1731
  6068   000DD2  EFED  F006         	goto	u1730
  6069   000DD6                     u1731:
  6070   000DD6  EFCA  F006         	goto	l2678
  6071   000DDA                     u1730:
  6072   000DDA                     
  6073                           ;TAD_RFID.c: 48:     for (i = 8; i > 0; i--) {
  6074   000DDA  0E08               	movlw	8
  6075   000DDC  6E0B               	movwf	MFRC522_Rd@i^0,c
  6076   000DDE                     l212:
  6077                           
  6078                           ;TAD_RFID.c: 49:         LATCbits.LATC2 = 1;
  6079   000DDE  848B               	bsf	139,2,c	;volatile
  6080   000DE0                     
  6081                           ;TAD_RFID.c: 50:         delay_us(5);
  6082   000DE0  0E05               	movlw	5
  6083   000DE2  ECB6  F008         	call	_delay_us
  6084   000DE6                     
  6085                           ;TAD_RFID.c: 51:         ucResult <<= 1;
  6086   000DE6  90D8               	bcf	status,0,c
  6087   000DE8  360A               	rlcf	MFRC522_Rd@ucResult^0,f,c
  6088   000DEA                     
  6089                           ;TAD_RFID.c: 52:         ucResult|= PORTCbits.RC0;
  6090   000DEA  B082               	btfsc	130,0,c	;volatile
  6091   000DEC  EFFA  F006         	goto	u1741
  6092   000DF0  EFFD  F006         	goto	u1740
  6093   000DF4                     u1741:
  6094   000DF4  0E01               	movlw	1
  6095   000DF6  EFFE  F006         	goto	u1746
  6096   000DFA                     u1740:
  6097   000DFA  0E00               	movlw	0
  6098   000DFC                     u1746:
  6099   000DFC  120A               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6100   000DFE                     
  6101                           ;TAD_RFID.c: 53:         LATCbits.LATC2 = 0;
  6102   000DFE  948B               	bcf	139,2,c	;volatile
  6103                           
  6104                           ;TAD_RFID.c: 54:         delay_us(5);
  6105   000E00  0E05               	movlw	5
  6106   000E02  ECB6  F008         	call	_delay_us
  6107   000E06                     
  6108                           ;TAD_RFID.c: 55:     }
  6109   000E06  060B               	decf	MFRC522_Rd@i^0,f,c
  6110   000E08  500B               	movf	MFRC522_Rd@i^0,w,c
  6111   000E0A  A4D8               	btfss	status,2,c
  6112   000E0C  EF0A  F007         	goto	u1751
  6113   000E10  EF0C  F007         	goto	u1750
  6114   000E14                     u1751:
  6115   000E14  EFEF  F006         	goto	l212
  6116   000E18                     u1750:
  6117   000E18                     
  6118                           ;TAD_RFID.c: 57:     LATCbits.LATC3 = 1;
  6119   000E18  868B               	bsf	139,3,c	;volatile
  6120                           
  6121                           ;TAD_RFID.c: 58:     LATCbits.LATC2 = 1;
  6122   000E1A  848B               	bsf	139,2,c	;volatile
  6123   000E1C                     
  6124                           ;TAD_RFID.c: 59:     return ucResult;
  6125   000E1C  500A               	movf	MFRC522_Rd@ucResult^0,w,c
  6126   000E1E  0012               	return		;funcret
  6127   000E20                     __end_of_MFRC522_Rd:
  6128                           	callstack 0
  6129                           
  6130 ;; *************** function _delay_us *****************
  6131 ;; Defined at:
  6132 ;;		line 27 in file "TAD_RFID.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  howMany         1    wreg     unsigned char 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  howMany         1    4[COMRAM] unsigned char 
  6137 ;;  x               1    5[COMRAM] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0, prodl, prodh
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1
  6147 ;;      Params:         0       0       0
  6148 ;;      Locals:         2       0       0
  6149 ;;      Temps:          3       0       0
  6150 ;;      Totals:         5       0       0
  6151 ;;Total ram usage:        5 bytes
  6152 ;; Hardware stack levels used: 1
  6153 ;; Hardware stack levels required when called: 3
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_MFRC522_Rd
  6158 ;;		_MFRC522_Wr
  6159 ;;		_MFRC522_Reset
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text37
  6164   00116C                     __ptext37:
  6165                           	callstack 0
  6166   00116C                     _delay_us:
  6167                           	callstack 25
  6168                           
  6169                           ;incstack = 0
  6170                           ;delay_us@howMany stored from wreg
  6171   00116C  6E05               	movwf	delay_us@howMany^0,c
  6172   00116E                     
  6173                           ;TAD_RFID.c: 28:     char x;;TAD_RFID.c: 29:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  6174   00116E  6A06               	clrf	delay_us@x^0,c
  6175   001170  EFBC  F008         	goto	l2646
  6176   001174                     l205:
  6177   001174  0000               	nop	
  6178   001176  2A06               	incf	delay_us@x^0,f,c
  6179   001178                     l2646:
  6180   001178  5005               	movf	delay_us@howMany^0,w,c
  6181   00117A  0D10               	mullw	16
  6182   00117C  5006               	movf	delay_us@x^0,w,c
  6183   00117E  6E02               	movwf	??_delay_us^0,c
  6184   001180  6A03               	clrf	(??_delay_us+1)^0,c
  6185   001182  50F3               	movf	243,w,c
  6186   001184  5C02               	subwf	??_delay_us^0,w,c
  6187   001186  5003               	movf	(??_delay_us+1)^0,w,c
  6188   001188  0A80               	xorlw	128
  6189   00118A  6E04               	movwf	(??_delay_us+2)^0,c
  6190   00118C  50F4               	movf	244,w,c
  6191   00118E  0A80               	xorlw	128
  6192   001190  5804               	subwfb	(??_delay_us+2)^0,w,c
  6193   001192  A0D8               	btfss	status,0,c
  6194   001194  EFCE  F008         	goto	u1661
  6195   001198  EFD0  F008         	goto	u1660
  6196   00119C                     u1661:
  6197   00119C  EFBA  F008         	goto	l205
  6198   0011A0                     u1660:
  6199   0011A0  0012               	return		;funcret
  6200   0011A2                     __end_of_delay_us:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _InitPortDirections *****************
  6204 ;; Defined at:
  6205 ;;		line 19 in file "TAD_RFID.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		None
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1
  6219 ;;      Params:         0       0       0
  6220 ;;      Locals:         0       0       0
  6221 ;;      Temps:          0       0       0
  6222 ;;      Totals:         0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used: 1
  6225 ;; Hardware stack levels required when called: 3
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_initRFID
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text38
  6234   001344                     __ptext38:
  6235                           	callstack 0
  6236   001344                     _InitPortDirections:
  6237                           	callstack 26
  6238   001344                     
  6239                           ;TAD_RFID.c: 20:     TRISCbits.TRISC0 = 1;
  6240   001344  8094               	bsf	148,0,c	;volatile
  6241                           
  6242                           ;TAD_RFID.c: 21:     TRISCbits.TRISC1 = 0;
  6243   001346  9294               	bcf	148,1,c	;volatile
  6244                           
  6245                           ;TAD_RFID.c: 22:     TRISCbits.TRISC2 = 0;
  6246   001348  9494               	bcf	148,2,c	;volatile
  6247                           
  6248                           ;TAD_RFID.c: 23:     TRISCbits.TRISC3 = 0;
  6249   00134A  9694               	bcf	148,3,c	;volatile
  6250                           
  6251                           ;TAD_RFID.c: 24:     TRISCbits.TRISC4 = 0;
  6252   00134C  9894               	bcf	148,4,c	;volatile
  6253   00134E  0012               	return		;funcret
  6254   001350                     __end_of_InitPortDirections:
  6255                           	callstack 0
  6256                           
  6257 ;; *************** function _initPorts *****************
  6258 ;; Defined at:
  6259 ;;		line 57 in file "main.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;		None
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1
  6273 ;;      Params:         0       0       0
  6274 ;;      Locals:         0       0       0
  6275 ;;      Temps:          0       0       0
  6276 ;;      Totals:         0       0       0
  6277 ;;Total ram usage:        0 bytes
  6278 ;; Hardware stack levels used: 1
  6279 ;; Hardware stack levels required when called: 3
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text39
  6288   00136A                     __ptext39:
  6289                           	callstack 0
  6290   00136A                     _initPorts:
  6291                           	callstack 27
  6292   00136A  0E0F               	movlw	15
  6293   00136C  6EC1               	movwf	193,c	;volatile
  6294   00136E  6A92               	clrf	146,c	;volatile
  6295   001370  0012               	return		;funcret
  6296   001372                     __end_of_initPorts:
  6297                           	callstack 0
  6298                           
  6299 ;; *************** function _Terminal_Init *****************
  6300 ;; Defined at:
  6301 ;;		line 11 in file "TAD_TERMINAL.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;		None
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      void 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1
  6315 ;;      Params:         0       0       0
  6316 ;;      Locals:         0       0       0
  6317 ;;      Temps:          0       0       0
  6318 ;;      Totals:         0       0       0
  6319 ;;Total ram usage:        0 bytes
  6320 ;; Hardware stack levels used: 1
  6321 ;; Hardware stack levels required when called: 3
  6322 ;; This function calls:
  6323 ;;		Nothing
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text40
  6330   00131C                     __ptext40:
  6331                           	callstack 0
  6332   00131C                     _Terminal_Init:
  6333                           	callstack 27
  6334   00131C                     
  6335                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  6336   00131C  0E24               	movlw	36
  6337   00131E  6EAC               	movwf	172,c	;volatile
  6338                           
  6339                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  6340   001320  0E90               	movlw	144
  6341   001322  6EAB               	movwf	171,c	;volatile
  6342   001324                     
  6343                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  6344   001324  68AF               	setf	175,c	;volatile
  6345   001326                     
  6346                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  6347   001326  6AB8               	clrf	184,c	;volatile
  6348   001328                     
  6349                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  6350   001328  6A67               	clrf	_hashtag_pressed^0,c
  6351   00132A  0012               	return		;funcret
  6352   00132C                     __end_of_Terminal_Init:
  6353                           	callstack 0
  6354                           
  6355 ;; *************** function _TI_Init *****************
  6356 ;; Defined at:
  6357 ;;		line 32 in file "TAD_TIMER.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  counter         1    1[COMRAM] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1
  6371 ;;      Params:         0       0       0
  6372 ;;      Locals:         1       0       0
  6373 ;;      Temps:          0       0       0
  6374 ;;      Totals:         1       0       0
  6375 ;;Total ram usage:        1 bytes
  6376 ;; Hardware stack levels used: 1
  6377 ;; Hardware stack levels required when called: 3
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		_main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text41
  6386   0011A2                     __ptext41:
  6387                           	callstack 0
  6388   0011A2                     _TI_Init:
  6389                           	callstack 27
  6390   0011A2                     
  6391                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  6392   0011A2  6A02               	clrf	TI_Init@counter^0,c
  6393   0011A4                     l3150:
  6394                           
  6395                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  6396   0011A4  5002               	movf	TI_Init@counter^0,w,c
  6397   0011A6  0D05               	mullw	5
  6398   0011A8  50F3               	movf	243,w,c
  6399   0011AA  0F84               	addlw	low (_Timers+4)
  6400   0011AC  6ED9               	movwf	fsr2l,c
  6401   0011AE  6ADA               	clrf	fsr2h,c
  6402   0011B0  6ADF               	clrf	indf2,c
  6403   0011B2                     
  6404                           ;TAD_TIMER.c: 35:  }
  6405   0011B2  2A02               	incf	TI_Init@counter^0,f,c
  6406   0011B4  0E03               	movlw	3
  6407   0011B6  6402               	cpfsgt	TI_Init@counter^0,c
  6408   0011B8  EFE0  F008         	goto	u2281
  6409   0011BC  EFE2  F008         	goto	u2280
  6410   0011C0                     u2281:
  6411   0011C0  EFD2  F008         	goto	l3150
  6412   0011C4                     u2280:
  6413   0011C4                     
  6414                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  6415   0011C4  0E82               	movlw	130
  6416   0011C6  6ED5               	movwf	213,c	;volatile
  6417                           
  6418                           ;TAD_TIMER.c: 37:     TMR0=63036;
  6419   0011C8  0EF6               	movlw	246
  6420   0011CA  6ED7               	movwf	215,c	;volatile
  6421   0011CC  0E3C               	movlw	60
  6422   0011CE  6ED6               	movwf	214,c	;volatile
  6423   0011D0                     
  6424                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  6425   0011D0  94F2               	bcf	242,2,c	;volatile
  6426   0011D2                     
  6427                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  6428   0011D2  8AF2               	bsf	242,5,c	;volatile
  6429   0011D4  0012               	return		;funcret
  6430   0011D6                     __end_of_TI_Init:
  6431                           	callstack 0
  6432                           
  6433 ;; *************** function _LowRSI *****************
  6434 ;; Defined at:
  6435 ;;		line 31 in file "main.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		None
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1
  6449 ;;      Params:         0       0       0
  6450 ;;      Locals:         0       0       0
  6451 ;;      Temps:          1       0       0
  6452 ;;      Totals:         1       0       0
  6453 ;;Total ram usage:        1 bytes
  6454 ;; Hardware stack levels used: 1
  6455 ;; Hardware stack levels required when called: 2
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		Interrupt level 1
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	intcodelo
  6464   000018                     __pintcodelo:
  6465                           	callstack 0
  6466   000018                     _LowRSI:
  6467                           	callstack 19
  6468                           
  6469                           ;incstack = 0
  6470   000018  807C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6471   00001A  CFE0 F001          	movff	bsr,??_LowRSI
  6472   00001E  C001  FFE0         	movff	??_LowRSI,bsr
  6473   000022  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6474   000024  0010               	retfie	
  6475   000026                     __end_of_LowRSI:
  6476                           	callstack 0
  6477                           
  6478 ;; *************** function _HighRSI *****************
  6479 ;; Defined at:
  6480 ;;		line 27 in file "main.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1
  6494 ;;      Params:         0       0       0
  6495 ;;      Locals:         0       0       0
  6496 ;;      Temps:          0       0       0
  6497 ;;      Totals:         0       0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used: 1
  6500 ;; Hardware stack levels required when called: 1
  6501 ;; This function calls:
  6502 ;;		_RSI_Timer0
  6503 ;; This function is called by:
  6504 ;;		Interrupt level 2
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	intcode
  6509   000008                     __pintcode:
  6510                           	callstack 0
  6511   000008                     _HighRSI:
  6512                           	callstack 19
  6513                           
  6514                           ;incstack = 0
  6515   000008  827C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6516   00000A  EF6F  F009         	goto	int_func
  6517                           
  6518                           	psect	intcode_body
  6519   0012DE                     __pintcode_body:
  6520                           	callstack 19
  6521   0012DE                     int_func:
  6522                           	callstack 19
  6523   0012DE                     
  6524                           ;main.c: 29:      motorTerminal();
  6525   0012DE  A4F2               	btfss	242,2,c	;volatile
  6526   0012E0  EF74  F009         	goto	i2u141_41
  6527   0012E4  EF76  F009         	goto	i2u141_40
  6528   0012E8                     i2u141_41:
  6529   0012E8  EF78  F009         	goto	i2l34
  6530   0012EC                     i2u141_40:
  6531   0012EC  EC58  F009         	call	_RSI_Timer0	;wreg free
  6532   0012F0                     i2l34:
  6533   0012F0  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6534   0012F2  0011               	retfie		f
  6535   0012F4                     __end_of_HighRSI:
  6536                           	callstack 0
  6537                           
  6538 ;; *************** function _RSI_Timer0 *****************
  6539 ;; Defined at:
  6540 ;;		line 25 in file "TAD_TIMER.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1
  6554 ;;      Params:         0       0       0
  6555 ;;      Locals:         0       0       0
  6556 ;;      Temps:          0       0       0
  6557 ;;      Totals:         0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used: 1
  6560 ;; This function calls:
  6561 ;;		Nothing
  6562 ;; This function is called by:
  6563 ;;		_HighRSI
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text44
  6568   0012B0                     __ptext44:
  6569                           	callstack 0
  6570   0012B0                     _RSI_Timer0:
  6571                           	callstack 19
  6572   0012B0                     
  6573                           ;TAD_TIMER.c: 27:     TMR0=63036;
  6574   0012B0  0EF6               	movlw	246
  6575   0012B2  6ED7               	movwf	215,c	;volatile
  6576   0012B4  0E3C               	movlw	60
  6577   0012B6  6ED6               	movwf	214,c	;volatile
  6578   0012B8                     
  6579                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  6580   0012B8  94F2               	bcf	4082,2,c	;volatile
  6581   0012BA                     
  6582                           ;TAD_TIMER.c: 29:     Tics++;
  6583   0012BA  0E01               	movlw	1
  6584   0012BC  265B               	addwf	_Tics^0,f,c	;volatile
  6585   0012BE  0E00               	movlw	0
  6586   0012C0  225C               	addwfc	(_Tics+1)^0,f,c	;volatile
  6587   0012C2  225D               	addwfc	(_Tics+2)^0,f,c	;volatile
  6588   0012C4  225E               	addwfc	(_Tics+3)^0,f,c	;volatile
  6589   0012C6  0012               	return		;funcret
  6590   0012C8                     __end_of_RSI_Timer0:
  6591                           	callstack 0
  6592                           
  6593                           	psect	rparam
  6594   000001                     ___rparam_used  equ	1
  6595   000000                     ___param_bank   equ	0
  6596   000000                     __Lparam        equ	__Lrparam
  6597   000000                     __Hparam        equ	__Hrparam
  6598                           
  6599                           	psect	temp
  6600   00007C                     btemp:
  6601                           	callstack 0
  6602   00007C                     	ds	1
  6603   00007C                     int$flags       set	btemp
  6604   00007D                     wtemp8          set	btemp+1
  6605   00007D                     ttemp5          set	btemp+1
  6606   000080                     ttemp6          set	btemp+4
  6607   000084                     ttemp7          set	btemp+8
  6608                           
  6609                           	psect	idloc
  6610                           
  6611                           ;Config register IDLOC0 @ 0x200000
  6612                           ;	unspecified, using default values
  6613   200000                     	org	2097152
  6614   200000  FF                 	db	255
  6615                           
  6616                           ;Config register IDLOC1 @ 0x200001
  6617                           ;	unspecified, using default values
  6618   200001                     	org	2097153
  6619   200001  FF                 	db	255
  6620                           
  6621                           ;Config register IDLOC2 @ 0x200002
  6622                           ;	unspecified, using default values
  6623   200002                     	org	2097154
  6624   200002  FF                 	db	255
  6625                           
  6626                           ;Config register IDLOC3 @ 0x200003
  6627                           ;	unspecified, using default values
  6628   200003                     	org	2097155
  6629   200003  FF                 	db	255
  6630                           
  6631                           ;Config register IDLOC4 @ 0x200004
  6632                           ;	unspecified, using default values
  6633   200004                     	org	2097156
  6634   200004  FF                 	db	255
  6635                           
  6636                           ;Config register IDLOC5 @ 0x200005
  6637                           ;	unspecified, using default values
  6638   200005                     	org	2097157
  6639   200005  FF                 	db	255
  6640                           
  6641                           ;Config register IDLOC6 @ 0x200006
  6642                           ;	unspecified, using default values
  6643   200006                     	org	2097158
  6644   200006  FF                 	db	255
  6645                           
  6646                           ;Config register IDLOC7 @ 0x200007
  6647                           ;	unspecified, using default values
  6648   200007                     	org	2097159
  6649   200007  FF                 	db	255
  6650                           
  6651                           	psect	config
  6652                           
  6653                           ; Padding undefined space
  6654   300000                     	org	3145728
  6655   300000  FF                 	db	255
  6656                           
  6657                           ;Config register CONFIG1H @ 0x300001
  6658                           ;	Oscillator
  6659                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  6660                           ;	Fail-Safe Clock Monitor Enable bit
  6661                           ;	FCMEN = 0x0, unprogrammed default
  6662                           ;	Internal/External Oscillator Switchover bit
  6663                           ;	IESO = 0x0, unprogrammed default
  6664   300001                     	org	3145729
  6665   300001  06                 	db	6
  6666                           
  6667                           ;Config register CONFIG2L @ 0x300002
  6668                           ;	Power-up Timer Enable bit
  6669                           ;	PWRT = OFF, PWRT disabled
  6670                           ;	Brown-out Reset Enable bits
  6671                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6672                           ;	Brown-out Reset Voltage bits
  6673                           ;	BORV = 0x3, unprogrammed default
  6674   300002                     	org	3145730
  6675   300002  19                 	db	25
  6676                           
  6677                           ;Config register CONFIG2H @ 0x300003
  6678                           ;	Watchdog Timer Enable bit
  6679                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6680                           ;	Watchdog Timer Postscale Select bits
  6681                           ;	WDTPS = 0xF, unprogrammed default
  6682   300003                     	org	3145731
  6683   300003  1E                 	db	30
  6684                           
  6685                           ; Padding undefined space
  6686   300004                     	org	3145732
  6687   300004  FF                 	db	255
  6688                           
  6689                           ;Config register CONFIG3H @ 0x300005
  6690                           ;	CCP2 MUX bit
  6691                           ;	CCP2MX = 0x1, unprogrammed default
  6692                           ;	PORTB A/D Enable bit
  6693                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6694                           ;	Low-Power Timer1 Oscillator Enable bit
  6695                           ;	LPT1OSC = 0x0, unprogrammed default
  6696                           ;	MCLR Pin Enable bit
  6697                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  6698   300005                     	org	3145733
  6699   300005  01                 	db	1
  6700                           
  6701                           ;Config register CONFIG4L @ 0x300006
  6702                           ;	Stack Full/Underflow Reset Enable bit
  6703                           ;	STVREN = 0x1, unprogrammed default
  6704                           ;	Single-Supply ICSP Enable bit
  6705                           ;	LVP = OFF, Single-Supply ICSP disabled
  6706                           ;	Boot Block Size Select bits
  6707                           ;	BBSIZ = 0x0, unprogrammed default
  6708                           ;	Extended Instruction Set Enable bit
  6709                           ;	XINST = 0x0, unprogrammed default
  6710                           ;	Background Debugger Enable bit
  6711                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  6712   300006                     	org	3145734
  6713   300006  81                 	db	129
  6714                           
  6715                           ; Padding undefined space
  6716   300007                     	org	3145735
  6717   300007  FF                 	db	255
  6718                           
  6719                           ;Config register CONFIG5L @ 0x300008
  6720                           ;	unspecified, using default values
  6721                           ;	Code Protection bit
  6722                           ;	CP0 = 0x1, unprogrammed default
  6723                           ;	Code Protection bit
  6724                           ;	CP1 = 0x1, unprogrammed default
  6725   300008                     	org	3145736
  6726   300008  03                 	db	3
  6727                           
  6728                           ;Config register CONFIG5H @ 0x300009
  6729                           ;	unspecified, using default values
  6730                           ;	Boot Block Code Protection bitProtect Boot
  6731                           ;	CPB = 0x1, unprogrammed default
  6732                           ;	Data EEPROM Code Protection bit
  6733                           ;	CPD = 0x1, unprogrammed default
  6734   300009                     	org	3145737
  6735   300009  C0                 	db	192
  6736                           
  6737                           ;Config register CONFIG6L @ 0x30000A
  6738                           ;	unspecified, using default values
  6739                           ;	Write Protection bit
  6740                           ;	WRT0 = 0x1, unprogrammed default
  6741                           ;	Write Protection bit
  6742                           ;	WRT1 = 0x1, unprogrammed default
  6743   30000A                     	org	3145738
  6744   30000A  03                 	db	3
  6745                           
  6746                           ;Config register CONFIG6H @ 0x30000B
  6747                           ;	unspecified, using default values
  6748                           ;	Configuration Register Write Protection bit
  6749                           ;	WRTC = 0x1, unprogrammed default
  6750                           ;	Boot Block Write Protection bit
  6751                           ;	WRTB = 0x1, unprogrammed default
  6752                           ;	Data EEPROM Write Protection bit
  6753                           ;	WRTD = 0x1, unprogrammed default
  6754   30000B                     	org	3145739
  6755   30000B  E0                 	db	224
  6756                           
  6757                           ;Config register CONFIG7L @ 0x30000C
  6758                           ;	unspecified, using default values
  6759                           ;	Table Read Protection bit
  6760                           ;	EBTR0 = 0x1, unprogrammed default
  6761                           ;	Table Read Protection bit
  6762                           ;	EBTR1 = 0x1, unprogrammed default
  6763   30000C                     	org	3145740
  6764   30000C  03                 	db	3
  6765                           
  6766                           ;Config register CONFIG7H @ 0x30000D
  6767                           ;	unspecified, using default values
  6768                           ;	Boot Block Table Read Protection bit
  6769                           ;	EBTRB = 0x1, unprogrammed default
  6770   30000D                     	org	3145741
  6771   30000D  40                 	db	64
  6772                           tosu	equ	0xFFF
  6773                           tosh	equ	0xFFE
  6774                           tosl	equ	0xFFD
  6775                           stkptr	equ	0xFFC
  6776                           pclatu	equ	0xFFB
  6777                           pclath	equ	0xFFA
  6778                           pcl	equ	0xFF9
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           indf0	equ	0xFEF
  6786                           postinc0	equ	0xFEE
  6787                           postdec0	equ	0xFED
  6788                           preinc0	equ	0xFEC
  6789                           plusw0	equ	0xFEB
  6790                           fsr0h	equ	0xFEA
  6791                           fsr0l	equ	0xFE9
  6792                           wreg	equ	0xFE8
  6793                           indf1	equ	0xFE7
  6794                           postinc1	equ	0xFE6
  6795                           postdec1	equ	0xFE5
  6796                           preinc1	equ	0xFE4
  6797                           plusw1	equ	0xFE3
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           bsr	equ	0xFE0
  6801                           indf2	equ	0xFDF
  6802                           postinc2	equ	0xFDE
  6803                           postdec2	equ	0xFDD
  6804                           preinc2	equ	0xFDC
  6805                           plusw2	equ	0xFDB
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8

Data Sizes:
    Strings     277
    Constant    12
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     84     123
    BANK0           128      0     102
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S1300$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    S1300$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[5]), STR_4(CODE[32]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), STR_1(CODE[6]), STR_10(CODE[29]), 
		 -> STR_11(CODE[33]), STR_12(CODE[9]), STR_13(CODE[16]), STR_14(CODE[16]), 
		 -> STR_15(CODE[16]), STR_16(CODE[33]), STR_3(CODE[2]), STR_5(CODE[18]), 
		 -> STR_6(CODE[18]), STR_7(CODE[18]), STR_8(CODE[19]), STR_9(CODE[27]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[5]), STR_4(CODE[32]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[5]), STR_4(CODE[32]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[5]), STR_4(CODE[32]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _motorTeclado->_GetTecla
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6305
                            _TI_Init
                      _Terminal_Init
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           6     6      0    4026
                                             78 COMRAM     6     6      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
                _Terminal_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             29    14     15    2223
                                             51 COMRAM    27    12     15
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    2018
                                             45 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    1884
                                             33 COMRAM    12     9      3
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                12     9      3    1045
                                             21 COMRAM    12     9      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  7     3      4     747
                                             14 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                5     3      2     333
                                              9 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                8     5      3     232
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   7     5      2     182
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     293
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      90
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendString                                  2     0      2      90
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (3) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendChar                                    1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     126
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1679
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1679
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     303
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     561
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Set_Bit                                      2     1      1     561
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     565
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     565
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     250
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           5     5      0     223
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      53
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowRSI                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _HighRSI                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (12) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _initTeclado
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Clear_Bit
     _MFRC522_Rd
     _MFRC522_Set_Bit
     _MFRC522_Wr
     _Terminal_SendString
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
           _read_prec_or_width
           _xtoa
             _pad
               _fputc
               _fputs
                 _fputc

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     102     79.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     84     123     97.6%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     225      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 06 18:56:17 2025

       __end_ofGetTecla@F3221 1EE9         ?_Terminal_ReceiveChar 0001                    _RSI_Timer0 12B0  
                 MFRC522_Rd@i 000B                   MFRC522_Wr@i 0010                            l50 1370  
                          l73 11D4                            l83 1278                            l86 106E  
                          l79 0FD4                    _TI_GetTics 1024                            bsr 0FE0  
        ??_InitPortDirections 0002                           l201 134E                           l131 1368  
                         l212 0DDE                           l220 0D78                           l205 1174  
                         l213 0E18                           l221 0D7C                           l125 137C  
                         l214 0E1E                           l230 122E                           l207 11A0  
                         l224 12AE                           l160 0760                           l128 12DC  
                         l233 1336                           l402 03E6                           l410 0530  
                         l227 131A                           l236 1342                           l180 0B0C  
                         l172 0AC2                           l309 1358                           l239 1022  
                         l168 10B4                           l178 0B7E                           l370 01CC  
                         l550 1306                           l544 132A                           l553 1360  
                         l571 1376                           l547 1294                           l556 1380  
                         l565 0F1C                           l398 03BC                           l568 0F7E  
                         l589 0ABA                           u560 1082                           u720 1304  
                         u561 107E                           u721 12FE                           u570 109A  
                         u571 1096                           u580 10B2                           u581 10AE  
                         u590 0B64                           u726 1306                           _pad 0E20  
                         wreg 0FE8                ??_MFRC522_Init 0014                          l1313 0C2A  
                        l1305 09CE                          l3010 12D2                          l3002 12C8  
                        l1330 08D8                          l3020 1026                          l3012 12D4  
                        l3004 12CC                          l3100 113C                          l1309 0C22  
                        l3022 103A                          l3014 1258                          l3006 12CE  
                        l1270 116A                          l3102 1144                          l3016 125A  
                        l3200 05BA                          l3008 12D0                          l1360 1382  
                        l3104 114C                          l1337 10F6                          l3026 0FD6  
                        l3018 1276                          l3210 05EA                          l3202 05C0  
                        l3106 1160                          l1291 0E8E                          l3028 0FDA  
                        l3220 0604                          l3212 05EE                          l3204 05D0  
                        l3300 0A4C                          l1349 0CD4                          l1357 1132  
                        l1293 0EA8                          l3150 11A4                          l3230 0628  
                        l3214 05F2                          l1630 1366                          l3142 0F1E  
                        l3302 0A60                          l3160 11D2                          l3152 11B2  
                        l3144 11A2                          l3240 0692                          l3232 0648  
                        l3216 05F8                          l3208 05DA                          l3312 0A94  
                        l1288 0E50                          l3400 01D4                          l3320 002A  
                        l3154 11B4                          l3162 1350                          l3242 06A4  
                        l3234 065A                          l3218 05FE                          l3170 053C  
                        l3306 0A70                          l3410 0258                          l3402 0242  
                        l3330 004C                          l3322 002E                          l3156 11C4  
                        l2700 0DEA                          l3164 1354                          l1820 0B6E  
                        l1804 0AE6                          l3260 0706                          l3252 06CC  
                        l3244 06AA                          l3236 0662                          l3228 0618  
                        l3180 056C                          l3172 054C                          l1628 1362  
                        l3308 0A84                          l2620 0C2C                          l3500 0416  
                        l3420 027C                          l3404 024C                          l3340 007A  
                        l3332 0056                          l3324 0038                          l3158 11D0  
                        l1830 1344                          l2702 0DFE                          l1806 0B12  
                        l3262 070C                          l3254 06DC                          l3246 06B2  
                        l3238 0672                          l3190 0594                          l3182 0572  
                        l3174 0550                          l3166 0532                          l3318 0AA4  
                        l2630 0CA4                          l2622 0C3C                          l3510 046E  
                        l3502 041E                          l3414 0266                          l3406 0250  
                        l3350 00A6                          l3342 0082                          l3334 005E  
                        l3326 003C                          l2704 0E06                          l2712 0CD8  
                        l1808 0B1A                          l1816 0B22                          l3264 071C  
                        l3256 06FE                          l3248 06B8                          l3192 0598  
                        l3184 057A                          l3176 0554                          l3168 0536  
                        l3272 072A                          l3280 09EC                          l2800 0BB6  
                        l2624 0C4C                          l2640 1116                          l3504 0452  
                        l3440 02CC                          l3432 02A6                          l3424 028A  
                        l3416 026E                          l3360 00CC                          l3352 00B0  
                        l3344 008C                          l3336 0068                          l3328 0044  
                        l3520 051A                          l3600 11F4                          l2642 116E  
                        l2706 0E08                          l2730 0D14                          l2714 0CE0  
                        l2810 130A                          l1818 0B56                          l3266 071E  
                        l3194 05A0                          l3186 0580                          l3178 055C  
                        l3290 0A0E                          l3282 09F0                          l3274 09D0  
                        l2802 0BD2                          l2626 0C56                          l2634 10F8  
                        l2650 0E2E                          l3098 1134                          l3506 045C  
                        l3450 02F2                          l3442 02D6                          l3370 0104  
                        l3362 00D4                          l3354 00B8                          l3346 0094  
                        l3338 0070                          l3602 11F8                          l2644 1176  
                        l2708 0E1C                          l2732 0D16                          l2724 0CE8  
                        l2716 0CE2                          l1772 1378                          l1828 1372  
                        l1780 1082                          l3268 0722                          l3196 05B0  
                        l3188 0590                          l2812 127A                          l3292 0A22  
                        l3284 0A00                          l3276 09D4                          l2804 0BF0  
                        l2628 0C72                          l2636 1104                          l2660 0E70  
                        l2652 0E3A                          l2820 0784                          l3516 0474  
                        l3508 0464                          l3460 031E                          l3452 0306  
                        l3436 02BE                          l3428 0298                          l3380 0152  
                        l3372 010E                          l3364 00E2                          l3356 00C2  
                        l3348 009E                          l3604 11FC                          l2646 1178  
                        l2670 0D8E                          l2750 0D60                          l2742 0D32  
                        l2734 0D1C                          l2726 0D08                          l2718 0CE4  
                        l1790 0ABC                          l1782 1088                          l1950 137E  
                        l3294 0A26                          l3286 0A04                          l3278 09E8  
                        l2806 0BFC                          l2638 1112                          l2662 0E9C  
                        l2654 0E48                          l2830 07A8                          l2822 0790  
                        l3470 036C                          l3462 032E                          l3446 02DC  
                        l3382 0162                          l3390 01BA                          l3374 0116  
                        l3366 00F6                          l3358 00C4                          l2680 0DB4  
                        l2672 0D90                          l2664 0D80                          l2752 0D66  
                        l2744 0D52                          l2736 0D1E                          l2728 0D0E  
                        l2808 1298                          l1792 0AC8                          l1784 109A  
                        l1776 1070                          l2816 135C                          l3296 0A3A  
                        l3288 0A08                          l2656 0E5C                          l2648 0E20  
                        l2760 08EE                          l2840 07EE                          l2832 07B8  
                        l2824 079C                          l3480 0390                          l3472 0374  
                        l3464 0348                          l3456 0310                          l3448 02E4  
                        l3384 0192                          l3376 0126                          l3368 00FC  
                        l2690 0DCA                          l2682 0DB6                          l2666 0D8A  
                        l2754 0D68                          l2746 0D58                          l2738 0D2E  
                        l1794 0AD0                          l1786 10A0                          l1778 1072  
                        l1946 12F4                          l3298 0A46                          l2658 0E6C  
                        l2770 091A                          l2762 08F6                          l2850 0844  
                        l2842 0802                          l2826 07A0                          l2818 0762  
                        l3490 03C6                          l3482 0394                          l3474 037C  
                        l3394 01C2                          l3386 019E                          l3378 0140  
                 _TI_NewTimer 0F80                          l2692 0DDA                          l2684 0DBC  
                        l2668 0D8C                          l2748 0D5E                          l1796 0AD8  
                        l1788 10B2                          l2772 091E                          l2764 08FC  
                        l2780 0952                          l2756 08DA                          l2860 088E  
                        l2852 085C                          l2844 0810                          l2836 07C0  
                        l2828 07A6                          l3492 03D6                          l3484 039C  
                        l3476 037E                          l3468 035C                          l3396 01C6  
                        l3388 01B2                          l1990 1328                          l2686 0DC0  
                        l2678 0D94                          l1798 0AE0                          l2782 096E  
                        l2790 09B8                          l2774 092A                          l2766 0902  
                        l2758 08DE                          l2854 087A                          l2862 08A6  
                        l2846 081A                          l2838 07DE                          l3494 03E8  
                        l3486 03AC                          l3478 0386                          l3590 11E6  
                        ?_pad 000F                          l1984 131C                          l1992 136A  
                        l2696 0DE0                          l2688 0DC8                          l2880 0FBA  
                        l2872 0F80                          l2784 0980                          l2776 092C  
                        l2768 0912                          l2848 0828                          l3496 03F0  
                        l3488 03BE                          l3592 11EA                          l3584 11D6  
                        l1986 1324                          l1994 136E                          l2698 0DE6  
                        l2890 120E                          l2882 0FCA                          l2874 0F86  
                        l2794 0B80                          l2786 0990                          l2778 0932  
                        l2866 08B6                          l3498 0402                          l3594 11EC  
                        l3586 11DE                          l1988 1326                          l2892 1216  
                        l2796 0B88                          l2788 09AA                          l3596 11EE  
                        l3588 11E2                          l2894 132C                          l2886 1206  
                        l3782 0B38                          l2878 0F9E                          l2990 0EEC  
                        l2982 0EAA                          l2798 0BAA                          l3598 11F0  
                        l2896 1338                          l2888 1208                          l2984 0EAE  
                        l2992 10B6                          l2986 0EC4                          l2994 10C2  
                        l2988 0EE8                          l2996 10D2                          l2998 10EE  
                        STR_1 1FF3                          STR_2 1FF9                          STR_4 1F2B  
                        STR_5 1F96                          STR_6 1FA8                          STR_7 1F96  
                        STR_8 1F83                          STR_9 1F68                          u2110 0EC4  
                        u2111 0EC0                          u2120 0EE4                          u2130 0F0C  
                        u2300 056C                          u2140 0F1C                          u2301 0568  
                        u2141 0F18                          _LATA 0F89                          u2310 0590  
                        u2150 10EE                          u2311 058C                          u2127 0EDA  
                        u2151 10EA                          _LATC 0F8B                          u2400 0692  
                        u2320 05B0                          _LATD 0F8C                          u2401 068E  
                        u2321 05AC                          u2137 0F02                          u2410 06A4  
                        u2330 05D0                          u1610 0C3C                          u2411 06A0  
                        u2331 05CC                          u1611 0C38                          u2420 06C8  
                        u2340 05EA                          u2500 0A60                          u1620 0C4C  
                        u1700 0E9C                          u2421 06C4                          u2341 05E6  
                        u2501 0A5C                          u1621 0C48                          u1701 0E98  
                        u1710 0DA6                          u2430 06DC                          u2350 0614  
                        u2510 0A84                          u1630 0C72                          u1711 0D9E  
                        u2431 06D8                          u2351 0610                          u2511 0A80  
                        u1631 0C6E                          u2280 11C4                          u2440 06FE  
                        u2360 0628                          u1640 0CA4                          u2600 032E  
                        u2520 00E2                          u2281 11C0                          u2441 06FA  
                        u2361 0624                          u1641 0CA0                          u2601 032A  
                        u2521 00DE                          u1730 0DDA                          u1810 0D78  
                        u2450 071C                          u2370 0648                          u2290 054C  
                        u1650 1132                          u2610 0348                          u2530 00F6  
                        u1731 0DD6                          u1811 0D74                          u2451 0718  
                        u2371 0644                          u2291 0548                          u1651 112E  
                        u2611 0344                          u2531 00F2                          u1660 11A0  
                        u1740 0DFA                          u2380 065A                          u2460 09E8  
                        u1900 0C22                          u1820 0912                          u2620 03AC  
                        u2540 0126                          u1661 119C                          u1741 0DF4  
                        u2381 0656                          u2461 09E4                          u1901 0C1E  
                        u1821 090E                          u2621 03A8                          u2541 0122  
                        u1750 0E18                          u2390 0672                          u1910 128C  
                        u2470 0A00                          u1670 0E2E                          u2630 03BC  
                        u2550 0140                          u1751 0E14                          u2391 066E  
                        u1911 1284                          u2471 09FC                          u1671 0E2A  
                        u2631 03B8                          u2551 013C                          u1728 0DA8  
                        u1808 0D46                          u1760 0CFA                          u2480 0A22  
                        u1680 0E48                          u1840 096E                          u1920 0784  
                        u2640 03D6                          u2560 0162                          u1761 0CF2  
                        u2481 0A1E                          u1681 0E44                          u1841 096A  
                        u1921 0780                          u2641 03D2                          u2561 015E  
                        u1746 0DFC                          u2490 0A3A                          u1690 0E8E  
                        u1850 0980                          u1930 07EE                          u2650 03E6  
                        u2570 01B2                          u2491 0A36                          u1691 0E8A  
                        u1851 097C                          u1835 093E                          u1931 07EA  
                        u2651 03E2                          u2571 01AE                          u1780 0D2E  
                        u1860 0990                          u1940 0810                          u2660 0402  
                        u2580 02F2                          u1781 0D2A                          u1861 098C  
                        u1941 080C                          u2661 03FE                          u2581 02EE  
                        u1790 0D44                          u1918 128E                          u1870 09AA  
                        u1950 0844                          u2670 0412                          u2590 0306  
                        u1791 0D3C                          u1871 09A6                          u1951 0840  
                        u2671 040E                          u2591 0302                          u1960 0F9A  
                        u1880 09B8                          u1961 0F96                          u1881 09B4  
                        u1778 0CFC                          u1970 0FBA                          u1890 0BAA  
                        u1971 0FB6                          u1891 0BA6                          i1l39 001E  
                        i2l34 12F0                          i2l68 12C6                          _TMR0 0FD6  
                        _Tics 005B                          _Rows 006B                          _dbuf 00C6  
                        _main 11D6                          _prec 0061                          pad@i 0014  
                        pad@p 0011                          fsr0h 0FEA                          fsr1h 0FE2  
                        indf0 0FEF                          fsr2h 0FDA                          fsr0l 0FE9  
                        indf2 0FDF                          fsr1l 0FE1                          fsr2l 0FD9  
                        btemp 007C                          _xtoa 08DA               __end_of_TI_Init 11D6  
                        prodh 0FF4                          prodl 0FF3                          start 0026  
             __end_of_HighRSI 12F4                  ___param_bank 0000               ??_MFRC522_Reset 0011  
                ?_initTeclado 0001                         ??_pad 0013                         ?_main 0001  
                       STR_10 1F4B                         STR_11 1F0A                         STR_12 1FEA  
                       STR_13 1FBA                         STR_14 1FCA                         STR_15 1FDA  
                       STR_16 1EE9                         _T0CON 0FD5                         ?_xtoa 0016  
                       _RCREG 0FAE                         _RCSTA 0FAB                  vfpfcnvrt@fmt 0023  
                       _SPBRG 0FAF                         _PORTD 0F83                         _TRISA 0F92  
                       _TRISD 0F95                         _TXREG 0FAD                         _TXSTA 0FAC  
                       _Filas 0079                         _Timer 007A                         _flags 0065  
             motor_RFID@irqEn 0073           read_prec_or_width@c 0006           read_prec_or_width@n 0007  
             motor_RFID@unLen 0063                         _fputc 0C2C                         _fputs 10F8  
                _TI_ResetTics 1256                         _tecla 0077               motor_RFID@state 0075  
                       _timer 007B                         pad@fp 000F                         _width 005F  
                       _state 0076                         _putch 1382                         tablat 0FF5  
           _MFRC522_Clear_Bit 1296                         ttemp5 007D                         ttemp6 0080  
                       ttemp7 0084                         status 0FD8                         wtemp8 007D  
             __end_of_sprintf 116C                         xtoa@c 001F                         xtoa@d 0017  
                       xtoa@i 0020                         xtoa@p 001C                         xtoa@w 001D  
          Terminal_SendChar@c 0002            ?_MFRC522_Clear_Bit 0011              __end_of_GetTecla 0B80  
           _MFRC522_AntennaOn 132C        ??_Terminal_ReceiveChar 0002               __initialization 1230  
                __end_of_main 1206            ?_MFRC522_AntennaOn 0001           ??_MFRC522_Clear_Bit 0012  
                __end_of_xtoa 09D0                   ?_RSI_Timer0 0001                TI_Init@counter 0002  
            _initPortsTeclado 1362                   ?_TI_GetTics 0002                        ??_main 0055  
         ??_MFRC522_AntennaOn 0013                        ??_xtoa 0019                 __activetblptr 0002  
          MFRC522_Rd@ucResult 000A    __end_of_read_prec_or_width 0C2C                        _ADCON1 0FC1  
             MFRC522_Wr@value 000C     __end_of_MFRC522_Clear_Bit 12B0                        ?_fputc 0002  
                      ?_fputs 000A                        ?_putch 0001                     ??_TI_Init 0002  
      Terminal_SendString@str 0005                        i2l2416 12DE                        i2l2418 12EC  
                      i2l1960 12BA                        i2l1956 12B0                        i2l1958 12B8  
               vfpfcnvrt@done 002B                        _TMR0IF 7F92                     ??_HighRSI 0001  
   __end_of_MFRC522_AntennaOn 1338              __end_of_delay_us 11A2                        _LowRSI 0018  
                      _RowAct 0069                        _Timers 0080                  vfprintf@cfmt 0032  
        __end_of_MFRC522_Init 1024              __end_of_initRFID 135A              motor_RFID@buffer 0094  
          motorTerminal@state 0066          read_prec_or_width@ap 0003                        clear_0 1236  
                      clear_1 1242                        isa$std 0001                        pad@buf 0010  
                      fputc@c 0002                        fputs@c 000C                        fputs@i 000D  
                      fputs@s 000A              __end_of_showMenu 0F80                  __mediumconst 1EDC  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
                      putch@c 0001              __end_of_vfprintf 10F8         __end_of_Terminal_Init 132C  
                   ??_sprintf 0043                        xtoa@fp 0016                    __accesstop 0080  
     __end_of__initialization 1248               delay_us@howMany 0005                 ___rparam_used 0001  
                ??_MFRC522_Rd 0007                  ??_MFRC522_Wr 000D            _MFRC522_AntennaOff 1338  
              __pcstackCOMRAM 0001           ?_MFRC522_AntennaOff 0001                 __end_of_fputc 0CD6  
               __end_of_fputs 1134                 __end_of_putch 1384          TI_NewTimer@Comptador 0004  
           __end_of_ReadFilas 137E              MFRC522_Rd@ucAddr 0009             ??_MFRC522_Set_Bit 0012  
          __end_of_MFRC522_Rd 0E20            __end_of_MFRC522_Wr 0D7E                     ?_GetTecla 0001  
                     ??_fputc 0005                       ??_fputs 000C          ??_MFRC522_AntennaOff 0014  
                ?_TI_NewTimer 0002                       ??_putch 0002                    __pbssBANK0 0080  
       __end_of_motorTerminal 0ABC        TI_NewTimer@TimerHandle 0002                       ?_LowRSI 0001  
            MFRC522_Wr@ucAddr 000F       TI_ResetTics@TimerHandle 0002                 _writeColumnas 1070  
                     _BAUDCON 0FB8                     ?_delay_us 0001                    ??_GetTecla 0002  
           _Terminal_SendChar 135A                       _TI_Init 11A2            ?_Terminal_SendChar 0001  
    __end_of_initPortsTeclado 136A                     ?_initRFID 0001                       _HighRSI 0008  
                     _Columns 006A             motor_RFID@TagType 006E           ??_Terminal_SendChar 0002  
                     __Hparam 0000                       __Lparam 0000                     ?_showMenu 0001  
                ??_RSI_Timer0 0001                ?_writeColumnas 0001                     ?_vfprintf 002E  
                ??_TI_GetTics 0006             motor_RFID@allZero 006C                       __pcinit 1230  
       __end_of_MFRC522_Reset 1230                       __ramtop 0200             motor_RFID@_status 006F  
                     __ptext0 11D6                       __ptext1 002A                       __ptext2 1134  
                     __ptext3 10B6                       __ptext4 0762                       __ptext5 08DA  
                     __ptext6 0E20                       __ptext7 10F8                       __ptext8 0C2C  
                     __ptext9 1382                 ?_motorTeclado 0001             __end_of_initPorts 1372  
       read_prec_or_width@fmt 0002     __end_of_Terminal_SendChar 1362             motor_RFID@waitIRq 0072  
                  ??_delay_us 0002                       _sprintf 1134                  _MFRC522_Init 0FD6  
              __pintcode_body 12DE          end_of_initialization 1248                   motor_RFID@i 0070  
                 motor_RFID@n 0071                    ??_initRFID 0014            __end_of_RSI_Timer0 12C8  
                     fputc@fp 0004                 __Lmediumconst 1EDC                       int_func 12DE  
                     fputs@fp 000B            __end_of_TI_GetTics 1070            _read_prec_or_width 0B80  
           __end_of_vfpfcnvrt 08DA                    ??_showMenu 0007                    _motor_RFID 002A  
                     postdec2 0FDD           ?_read_prec_or_width 0002                       postinc0 0FEE  
                     postinc1 0FE6                       postinc2 0FDE              vfpfcnvrt@convarg 0027  
               GetTecla@F3221 1EDD                    ??_vfprintf 0032                ??_motorTeclado 0012  
                   _PORTBbits 0F81                     _PORTCbits 0F82           _Terminal_SendString 0EAA  
       TI_GetTics@TimerHandle 000E                     _TRISBbits 0F93                     _TRISCbits 0F94  
        ??_read_prec_or_width 0004          ?_Terminal_SendString 0005             MFRC522_Rd@Address 0008  
             ??_writeColumnas 0002                __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 1308  
             _MFRC522_Set_Bit 1308                   vfpfcnvrt@ap 0024                   vfpfcnvrt@cp 002C  
                 vfpfcnvrt@fp 0022                     _ColumnAct 0068           start_initialization 1230  
                   _ReadFilas 1378                   __end_of_pad 0EAA  __end_of_Terminal_TXAvailable 1296  
       ??_Terminal_SendString 0007                      ??_LowRSI 0001                   vfprintf@fmt 002F  
                 ?_motor_RFID 0001                 ??_initTeclado 0005                   __pbssCOMRAM 0055  
                  ?_ReadFilas 0001             MFRC522_Wr@Address 000E                 ?_TI_ResetTics 0001  
                    ?_TI_Init 0001             ?_initPortsTeclado 0001                      ?_HighRSI 0001  
        __end_of_motorTeclado 0762            ??_initPortsTeclado 0002       __end_of_MFRC522_Set_Bit 131C  
         motor_RFID@fifoLevel 0053           MFRC522_Set_Bit@addr 0012           MFRC522_Set_Bit@mask 0011  
                   __pintcode 0008                 __pmediumconst 1EDC    __end_of_InitPortDirections 1350  
                 __pintcodelo 0018                   __smallconst 1EDC           __end_of_initTeclado 12DE  
              ??_TI_ResetTics 0002                     _initPorts 136A                      ?_sprintf 0034  
               _Terminal_Init 131C          _Terminal_RXAvailable 12F4                      _LATBbits 0F8A  
                    _LATCbits 0F8B                     delay_us@x 0006               _hashtag_pressed 0067  
                    i2u141_40 12EC                      i2u141_41 12E8                      _PIR1bits 0F9E  
       motor_RFID@lastBitsVal 0054                     _vfpfcnvrt 0762          _Terminal_TXAvailable 127A  
                GetTecla@fila 0011                   ??_ReadFilas 0002                      _GetTecla 0ABC  
__end_of_Terminal_ReceiveChar 1382                    ?_initPorts 0001                 motor_RFID@UID 0055  
              ?_Terminal_Init 0001                      _Columnas 0078         ?_Terminal_RXAvailable 0001  
               _motorTerminal 09D0              ?_MFRC522_Set_Bit 0011                      __Hrparam 0000  
       MFRC522_Clear_Bit@addr 0013         MFRC522_Clear_Bit@mask 0011                    vfprintf@ap 0031  
                    __Lrparam 0000                    vfprintf@fp 002E                   _initTeclado 12C8  
       ?_Terminal_TXAvailable 0002                    ?_vfpfcnvrt 0022            motor_RFID@checksum 006D  
                  sprintf@fmt 0035                      _delay_us 116C                      __ptext10 0B80  
                    __ptext11 09D0                      __ptext20 12F4                      __ptext12 0F1E  
                    __ptext21 0532                      __ptext13 0EAA                      __ptext30 1206  
                    __ptext22 1070                      __ptext14 127A                      __ptext31 132C  
                    __ptext23 1372                      __ptext15 135A                      __ptext40 131C  
                    __ptext32 1308                      __ptext24 1256                      __ptext16 12C8  
                    __ptext41 11A2                      __ptext33 1338                      __ptext25 1024  
                    __ptext17 1362                      __ptext34 1296                      __ptext26 1378  
                    __ptext18 0F80                      __ptext35 0CD6                      __ptext27 0ABC  
                    __ptext19 137E                      __ptext44 12B0                      __ptext36 0D7E  
                    __ptext28 1350                      __ptext37 116C                      __ptext29 0FD6  
                    __ptext38 1344                      __ptext39 136A                 ??_TI_NewTimer 0003  
                    _initRFID 1350                ?_motorTerminal 0001                    _MFRC522_Rd 0D7E  
                  _MFRC522_Wr 0CD6                  ??_motor_RFID 004F                      isa$xinst 0000  
                    _showMenu 0F1E          __end_of_TI_ResetTics 127A                      int$flags 007C  
       __end_of_writeColumnas 10B6            motor_RFID@substate 0074                      _vfprintf 10B6  
               _MFRC522_Reset 1206                  _motorTeclado 0532                    _INTCONbits 0FF2  
             ??_Terminal_Init 0002     TI_GetTics@CopiaTicsActual 000A                   ??_initPorts 0002  
      ??_Terminal_RXAvailable 0002             _hashtag_pressed3s 1372   __end_of_Terminal_SendString 0F1E  
          __end_of_motor_RFID 0532                      intlevel1 0000                      intlevel2 0000  
                   sprintf@ap 0043            ?_hashtag_pressed3s 0001           __end_of_TI_NewTimer 0FD6  
         ??_hashtag_pressed3s 0002        ??_Terminal_TXAvailable 0004          _Terminal_ReceiveChar 137E  
                 ??_vfpfcnvrt 0025                ?_MFRC522_Reset 0001                      sprintf@f 0044  
      motor_RFID@backBitsCalc 0051                      sprintf@s 0034     __end_of_hashtag_pressed3s 1378  
          _InitPortDirections 1344    __end_of_MFRC522_AntennaOff 1344                 ?_MFRC522_Init 0001  
             ??_motorTerminal 0007           ?_InitPortDirections 0001               GetTecla@columna 0010  
                 ?_MFRC522_Rd 0001                   ?_MFRC522_Wr 000C                GetTecla@keymap 0004  

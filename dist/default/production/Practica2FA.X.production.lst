

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Mar 04 16:31:50 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=3
    27                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1,group=3
    28                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 05/12/2024 GMT
    61                           ; 
    62                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4321 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000FE0                     bsr             equ	4064
    95   000FE9                     fsr0            equ	4073
    96   000FEA                     fsr0h           equ	4074
    97   000FE9                     fsr0l           equ	4073
    98   000FE1                     fsr1            equ	4065
    99   000FE2                     fsr1h           equ	4066
   100   000FE1                     fsr1l           equ	4065
   101   000FD9                     fsr2            equ	4057
   102   000FDA                     fsr2h           equ	4058
   103   000FD9                     fsr2l           equ	4057
   104   000FEF                     indf0           equ	4079
   105   000FE7                     indf1           equ	4071
   106   000FDF                     indf2           equ	4063
   107   000FF2                     intcon          equ	4082
   108   000000                     nvmcon          equ	0
   109   000FF9                     pcl             equ	4089
   110   000FFA                     pclath          equ	4090
   111   000FFB                     pclatu          equ	4091
   112   000FEB                     plusw0          equ	4075
   113   000FE3                     plusw1          equ	4067
   114   000FDB                     plusw2          equ	4059
   115   000FED                     postdec0        equ	4077
   116   000FE5                     postdec1        equ	4069
   117   000FDD                     postdec2        equ	4061
   118   000FEE                     postinc0        equ	4078
   119   000FE6                     postinc1        equ	4070
   120   000FDE                     postinc2        equ	4062
   121   000FEC                     preinc0         equ	4076
   122   000FE4                     preinc1         equ	4068
   123   000FDC                     preinc2         equ	4060
   124   000FF3                     prod            equ	4083
   125   000FF4                     prodh           equ	4084
   126   000FF3                     prodl           equ	4083
   127   000FD8                     status          equ	4056
   128   000FF5                     tablat          equ	4085
   129   000FF6                     tblptr          equ	4086
   130   000FF7                     tblptrh         equ	4087
   131   000FF6                     tblptrl         equ	4086
   132   000FF8                     tblptru         equ	4088
   133   000FFD                     tosl            equ	4093
   134   000FE8                     wreg            equ	4072
   135   000F80                     PORTA           equ	3968	;# 
   136   000F81                     PORTB           equ	3969	;# 
   137   000F82                     PORTC           equ	3970	;# 
   138   000F83                     PORTD           equ	3971	;# 
   139   000F84                     PORTE           equ	3972	;# 
   140   000F89                     LATA            equ	3977	;# 
   141   000F8A                     LATB            equ	3978	;# 
   142   000F8B                     LATC            equ	3979	;# 
   143   000F8C                     LATD            equ	3980	;# 
   144   000F8D                     LATE            equ	3981	;# 
   145   000F92                     TRISA           equ	3986	;# 
   146   000F92                     DDRA            equ	3986	;# 
   147   000F93                     TRISB           equ	3987	;# 
   148   000F93                     DDRB            equ	3987	;# 
   149   000F94                     TRISC           equ	3988	;# 
   150   000F94                     DDRC            equ	3988	;# 
   151   000F95                     TRISD           equ	3989	;# 
   152   000F95                     DDRD            equ	3989	;# 
   153   000F96                     TRISE           equ	3990	;# 
   154   000F96                     DDRE            equ	3990	;# 
   155   000F9B                     OSCTUNE         equ	3995	;# 
   156   000F9D                     PIE1            equ	3997	;# 
   157   000F9E                     PIR1            equ	3998	;# 
   158   000F9F                     IPR1            equ	3999	;# 
   159   000FA0                     PIE2            equ	4000	;# 
   160   000FA1                     PIR2            equ	4001	;# 
   161   000FA2                     IPR2            equ	4002	;# 
   162   000FA6                     EECON1          equ	4006	;# 
   163   000FA7                     EECON2          equ	4007	;# 
   164   000FA8                     EEDATA          equ	4008	;# 
   165   000FA9                     EEADR           equ	4009	;# 
   166   000FAB                     RCSTA           equ	4011	;# 
   167   000FAB                     RCSTA1          equ	4011	;# 
   168   000FAC                     TXSTA           equ	4012	;# 
   169   000FAC                     TXSTA1          equ	4012	;# 
   170   000FAD                     TXREG           equ	4013	;# 
   171   000FAD                     TXREG1          equ	4013	;# 
   172   000FAE                     RCREG           equ	4014	;# 
   173   000FAE                     RCREG1          equ	4014	;# 
   174   000FAF                     SPBRG           equ	4015	;# 
   175   000FAF                     SPBRG1          equ	4015	;# 
   176   000FB0                     SPBRGH          equ	4016	;# 
   177   000FB1                     T3CON           equ	4017	;# 
   178   000FB2                     TMR3            equ	4018	;# 
   179   000FB2                     TMR3L           equ	4018	;# 
   180   000FB3                     TMR3H           equ	4019	;# 
   181   000FB4                     CMCON           equ	4020	;# 
   182   000FB5                     CVRCON          equ	4021	;# 
   183   000FB6                     ECCP1AS         equ	4022	;# 
   184   000FB7                     ECCP1DEL        equ	4023	;# 
   185   000FB7                     PWM1CON         equ	4023	;# 
   186   000FB8                     BAUDCON         equ	4024	;# 
   187   000FB8                     BAUDCTL         equ	4024	;# 
   188   000FBA                     CCP2CON         equ	4026	;# 
   189   000FBB                     CCPR2           equ	4027	;# 
   190   000FBB                     CCPR2L          equ	4027	;# 
   191   000FBC                     CCPR2H          equ	4028	;# 
   192   000FBD                     CCP1CON         equ	4029	;# 
   193   000FBD                     ECCP1CON        equ	4029	;# 
   194   000FBE                     CCPR1           equ	4030	;# 
   195   000FBE                     CCPR1L          equ	4030	;# 
   196   000FBF                     CCPR1H          equ	4031	;# 
   197   000FC0                     ADCON2          equ	4032	;# 
   198   000FC1                     ADCON1          equ	4033	;# 
   199   000FC2                     ADCON0          equ	4034	;# 
   200   000FC3                     ADRES           equ	4035	;# 
   201   000FC3                     ADRESL          equ	4035	;# 
   202   000FC4                     ADRESH          equ	4036	;# 
   203   000FC5                     SSPCON2         equ	4037	;# 
   204   000FC6                     SSPCON1         equ	4038	;# 
   205   000FC7                     SSPSTAT         equ	4039	;# 
   206   000FC8                     SSPADD          equ	4040	;# 
   207   000FC9                     SSPBUF          equ	4041	;# 
   208   000FCA                     T2CON           equ	4042	;# 
   209   000FCB                     PR2             equ	4043	;# 
   210   000FCB                     MEMCON          equ	4043	;# 
   211   000FCC                     TMR2            equ	4044	;# 
   212   000FCD                     T1CON           equ	4045	;# 
   213   000FCE                     TMR1            equ	4046	;# 
   214   000FCE                     TMR1L           equ	4046	;# 
   215   000FCF                     TMR1H           equ	4047	;# 
   216   000FD0                     RCON            equ	4048	;# 
   217   000FD1                     WDTCON          equ	4049	;# 
   218   000FD2                     HLVDCON         equ	4050	;# 
   219   000FD2                     LVDCON          equ	4050	;# 
   220   000FD3                     OSCCON          equ	4051	;# 
   221   000FD5                     T0CON           equ	4053	;# 
   222   000FD6                     TMR0            equ	4054	;# 
   223   000FD6                     TMR0L           equ	4054	;# 
   224   000FD7                     TMR0H           equ	4055	;# 
   225   000FD8                     STATUS          equ	4056	;# 
   226   000FD9                     FSR2            equ	4057	;# 
   227   000FD9                     FSR2L           equ	4057	;# 
   228   000FDA                     FSR2H           equ	4058	;# 
   229   000FDB                     PLUSW2          equ	4059	;# 
   230   000FDC                     PREINC2         equ	4060	;# 
   231   000FDD                     POSTDEC2        equ	4061	;# 
   232   000FDE                     POSTINC2        equ	4062	;# 
   233   000FDF                     INDF2           equ	4063	;# 
   234   000FE0                     BSR             equ	4064	;# 
   235   000FE1                     FSR1            equ	4065	;# 
   236   000FE1                     FSR1L           equ	4065	;# 
   237   000FE2                     FSR1H           equ	4066	;# 
   238   000FE3                     PLUSW1          equ	4067	;# 
   239   000FE4                     PREINC1         equ	4068	;# 
   240   000FE5                     POSTDEC1        equ	4069	;# 
   241   000FE6                     POSTINC1        equ	4070	;# 
   242   000FE7                     INDF1           equ	4071	;# 
   243   000FE8                     WREG            equ	4072	;# 
   244   000FE9                     FSR0            equ	4073	;# 
   245   000FE9                     FSR0L           equ	4073	;# 
   246   000FEA                     FSR0H           equ	4074	;# 
   247   000FEB                     PLUSW0          equ	4075	;# 
   248   000FEC                     PREINC0         equ	4076	;# 
   249   000FED                     POSTDEC0        equ	4077	;# 
   250   000FEE                     POSTINC0        equ	4078	;# 
   251   000FEF                     INDF0           equ	4079	;# 
   252   000FF0                     INTCON3         equ	4080	;# 
   253   000FF1                     INTCON2         equ	4081	;# 
   254   000FF2                     INTCON          equ	4082	;# 
   255   000FF3                     PROD            equ	4083	;# 
   256   000FF3                     PRODL           equ	4083	;# 
   257   000FF4                     PRODH           equ	4084	;# 
   258   000FF5                     TABLAT          equ	4085	;# 
   259   000FF6                     TBLPTR          equ	4086	;# 
   260   000FF6                     TBLPTRL         equ	4086	;# 
   261   000FF7                     TBLPTRH         equ	4087	;# 
   262   000FF8                     TBLPTRU         equ	4088	;# 
   263   000FF9                     PCLAT           equ	4089	;# 
   264   000FF9                     PC              equ	4089	;# 
   265   000FF9                     PCL             equ	4089	;# 
   266   000FFA                     PCLATH          equ	4090	;# 
   267   000FFB                     PCLATU          equ	4091	;# 
   268   000FFC                     STKPTR          equ	4092	;# 
   269   000FFD                     TOS             equ	4093	;# 
   270   000FFD                     TOSL            equ	4093	;# 
   271   000FFE                     TOSH            equ	4094	;# 
   272   000FFF                     TOSU            equ	4095	;# 
   273   000F80                     PORTA           equ	3968	;# 
   274   000F81                     PORTB           equ	3969	;# 
   275   000F82                     PORTC           equ	3970	;# 
   276   000F83                     PORTD           equ	3971	;# 
   277   000F84                     PORTE           equ	3972	;# 
   278   000F89                     LATA            equ	3977	;# 
   279   000F8A                     LATB            equ	3978	;# 
   280   000F8B                     LATC            equ	3979	;# 
   281   000F8C                     LATD            equ	3980	;# 
   282   000F8D                     LATE            equ	3981	;# 
   283   000F92                     TRISA           equ	3986	;# 
   284   000F92                     DDRA            equ	3986	;# 
   285   000F93                     TRISB           equ	3987	;# 
   286   000F93                     DDRB            equ	3987	;# 
   287   000F94                     TRISC           equ	3988	;# 
   288   000F94                     DDRC            equ	3988	;# 
   289   000F95                     TRISD           equ	3989	;# 
   290   000F95                     DDRD            equ	3989	;# 
   291   000F96                     TRISE           equ	3990	;# 
   292   000F96                     DDRE            equ	3990	;# 
   293   000F9B                     OSCTUNE         equ	3995	;# 
   294   000F9D                     PIE1            equ	3997	;# 
   295   000F9E                     PIR1            equ	3998	;# 
   296   000F9F                     IPR1            equ	3999	;# 
   297   000FA0                     PIE2            equ	4000	;# 
   298   000FA1                     PIR2            equ	4001	;# 
   299   000FA2                     IPR2            equ	4002	;# 
   300   000FA6                     EECON1          equ	4006	;# 
   301   000FA7                     EECON2          equ	4007	;# 
   302   000FA8                     EEDATA          equ	4008	;# 
   303   000FA9                     EEADR           equ	4009	;# 
   304   000FAB                     RCSTA           equ	4011	;# 
   305   000FAB                     RCSTA1          equ	4011	;# 
   306   000FAC                     TXSTA           equ	4012	;# 
   307   000FAC                     TXSTA1          equ	4012	;# 
   308   000FAD                     TXREG           equ	4013	;# 
   309   000FAD                     TXREG1          equ	4013	;# 
   310   000FAE                     RCREG           equ	4014	;# 
   311   000FAE                     RCREG1          equ	4014	;# 
   312   000FAF                     SPBRG           equ	4015	;# 
   313   000FAF                     SPBRG1          equ	4015	;# 
   314   000FB0                     SPBRGH          equ	4016	;# 
   315   000FB1                     T3CON           equ	4017	;# 
   316   000FB2                     TMR3            equ	4018	;# 
   317   000FB2                     TMR3L           equ	4018	;# 
   318   000FB3                     TMR3H           equ	4019	;# 
   319   000FB4                     CMCON           equ	4020	;# 
   320   000FB5                     CVRCON          equ	4021	;# 
   321   000FB6                     ECCP1AS         equ	4022	;# 
   322   000FB7                     ECCP1DEL        equ	4023	;# 
   323   000FB7                     PWM1CON         equ	4023	;# 
   324   000FB8                     BAUDCON         equ	4024	;# 
   325   000FB8                     BAUDCTL         equ	4024	;# 
   326   000FBA                     CCP2CON         equ	4026	;# 
   327   000FBB                     CCPR2           equ	4027	;# 
   328   000FBB                     CCPR2L          equ	4027	;# 
   329   000FBC                     CCPR2H          equ	4028	;# 
   330   000FBD                     CCP1CON         equ	4029	;# 
   331   000FBD                     ECCP1CON        equ	4029	;# 
   332   000FBE                     CCPR1           equ	4030	;# 
   333   000FBE                     CCPR1L          equ	4030	;# 
   334   000FBF                     CCPR1H          equ	4031	;# 
   335   000FC0                     ADCON2          equ	4032	;# 
   336   000FC1                     ADCON1          equ	4033	;# 
   337   000FC2                     ADCON0          equ	4034	;# 
   338   000FC3                     ADRES           equ	4035	;# 
   339   000FC3                     ADRESL          equ	4035	;# 
   340   000FC4                     ADRESH          equ	4036	;# 
   341   000FC5                     SSPCON2         equ	4037	;# 
   342   000FC6                     SSPCON1         equ	4038	;# 
   343   000FC7                     SSPSTAT         equ	4039	;# 
   344   000FC8                     SSPADD          equ	4040	;# 
   345   000FC9                     SSPBUF          equ	4041	;# 
   346   000FCA                     T2CON           equ	4042	;# 
   347   000FCB                     PR2             equ	4043	;# 
   348   000FCB                     MEMCON          equ	4043	;# 
   349   000FCC                     TMR2            equ	4044	;# 
   350   000FCD                     T1CON           equ	4045	;# 
   351   000FCE                     TMR1            equ	4046	;# 
   352   000FCE                     TMR1L           equ	4046	;# 
   353   000FCF                     TMR1H           equ	4047	;# 
   354   000FD0                     RCON            equ	4048	;# 
   355   000FD1                     WDTCON          equ	4049	;# 
   356   000FD2                     HLVDCON         equ	4050	;# 
   357   000FD2                     LVDCON          equ	4050	;# 
   358   000FD3                     OSCCON          equ	4051	;# 
   359   000FD5                     T0CON           equ	4053	;# 
   360   000FD6                     TMR0            equ	4054	;# 
   361   000FD6                     TMR0L           equ	4054	;# 
   362   000FD7                     TMR0H           equ	4055	;# 
   363   000FD8                     STATUS          equ	4056	;# 
   364   000FD9                     FSR2            equ	4057	;# 
   365   000FD9                     FSR2L           equ	4057	;# 
   366   000FDA                     FSR2H           equ	4058	;# 
   367   000FDB                     PLUSW2          equ	4059	;# 
   368   000FDC                     PREINC2         equ	4060	;# 
   369   000FDD                     POSTDEC2        equ	4061	;# 
   370   000FDE                     POSTINC2        equ	4062	;# 
   371   000FDF                     INDF2           equ	4063	;# 
   372   000FE0                     BSR             equ	4064	;# 
   373   000FE1                     FSR1            equ	4065	;# 
   374   000FE1                     FSR1L           equ	4065	;# 
   375   000FE2                     FSR1H           equ	4066	;# 
   376   000FE3                     PLUSW1          equ	4067	;# 
   377   000FE4                     PREINC1         equ	4068	;# 
   378   000FE5                     POSTDEC1        equ	4069	;# 
   379   000FE6                     POSTINC1        equ	4070	;# 
   380   000FE7                     INDF1           equ	4071	;# 
   381   000FE8                     WREG            equ	4072	;# 
   382   000FE9                     FSR0            equ	4073	;# 
   383   000FE9                     FSR0L           equ	4073	;# 
   384   000FEA                     FSR0H           equ	4074	;# 
   385   000FEB                     PLUSW0          equ	4075	;# 
   386   000FEC                     PREINC0         equ	4076	;# 
   387   000FED                     POSTDEC0        equ	4077	;# 
   388   000FEE                     POSTINC0        equ	4078	;# 
   389   000FEF                     INDF0           equ	4079	;# 
   390   000FF0                     INTCON3         equ	4080	;# 
   391   000FF1                     INTCON2         equ	4081	;# 
   392   000FF2                     INTCON          equ	4082	;# 
   393   000FF3                     PROD            equ	4083	;# 
   394   000FF3                     PRODL           equ	4083	;# 
   395   000FF4                     PRODH           equ	4084	;# 
   396   000FF5                     TABLAT          equ	4085	;# 
   397   000FF6                     TBLPTR          equ	4086	;# 
   398   000FF6                     TBLPTRL         equ	4086	;# 
   399   000FF7                     TBLPTRH         equ	4087	;# 
   400   000FF8                     TBLPTRU         equ	4088	;# 
   401   000FF9                     PCLAT           equ	4089	;# 
   402   000FF9                     PC              equ	4089	;# 
   403   000FF9                     PCL             equ	4089	;# 
   404   000FFA                     PCLATH          equ	4090	;# 
   405   000FFB                     PCLATU          equ	4091	;# 
   406   000FFC                     STKPTR          equ	4092	;# 
   407   000FFD                     TOS             equ	4093	;# 
   408   000FFD                     TOSL            equ	4093	;# 
   409   000FFE                     TOSH            equ	4094	;# 
   410   000FFF                     TOSU            equ	4095	;# 
   411   000F80                     PORTA           equ	3968	;# 
   412   000F81                     PORTB           equ	3969	;# 
   413   000F82                     PORTC           equ	3970	;# 
   414   000F83                     PORTD           equ	3971	;# 
   415   000F84                     PORTE           equ	3972	;# 
   416   000F89                     LATA            equ	3977	;# 
   417   000F8A                     LATB            equ	3978	;# 
   418   000F8B                     LATC            equ	3979	;# 
   419   000F8C                     LATD            equ	3980	;# 
   420   000F8D                     LATE            equ	3981	;# 
   421   000F92                     TRISA           equ	3986	;# 
   422   000F92                     DDRA            equ	3986	;# 
   423   000F93                     TRISB           equ	3987	;# 
   424   000F93                     DDRB            equ	3987	;# 
   425   000F94                     TRISC           equ	3988	;# 
   426   000F94                     DDRC            equ	3988	;# 
   427   000F95                     TRISD           equ	3989	;# 
   428   000F95                     DDRD            equ	3989	;# 
   429   000F96                     TRISE           equ	3990	;# 
   430   000F96                     DDRE            equ	3990	;# 
   431   000F9B                     OSCTUNE         equ	3995	;# 
   432   000F9D                     PIE1            equ	3997	;# 
   433   000F9E                     PIR1            equ	3998	;# 
   434   000F9F                     IPR1            equ	3999	;# 
   435   000FA0                     PIE2            equ	4000	;# 
   436   000FA1                     PIR2            equ	4001	;# 
   437   000FA2                     IPR2            equ	4002	;# 
   438   000FA6                     EECON1          equ	4006	;# 
   439   000FA7                     EECON2          equ	4007	;# 
   440   000FA8                     EEDATA          equ	4008	;# 
   441   000FA9                     EEADR           equ	4009	;# 
   442   000FAB                     RCSTA           equ	4011	;# 
   443   000FAB                     RCSTA1          equ	4011	;# 
   444   000FAC                     TXSTA           equ	4012	;# 
   445   000FAC                     TXSTA1          equ	4012	;# 
   446   000FAD                     TXREG           equ	4013	;# 
   447   000FAD                     TXREG1          equ	4013	;# 
   448   000FAE                     RCREG           equ	4014	;# 
   449   000FAE                     RCREG1          equ	4014	;# 
   450   000FAF                     SPBRG           equ	4015	;# 
   451   000FAF                     SPBRG1          equ	4015	;# 
   452   000FB0                     SPBRGH          equ	4016	;# 
   453   000FB1                     T3CON           equ	4017	;# 
   454   000FB2                     TMR3            equ	4018	;# 
   455   000FB2                     TMR3L           equ	4018	;# 
   456   000FB3                     TMR3H           equ	4019	;# 
   457   000FB4                     CMCON           equ	4020	;# 
   458   000FB5                     CVRCON          equ	4021	;# 
   459   000FB6                     ECCP1AS         equ	4022	;# 
   460   000FB7                     ECCP1DEL        equ	4023	;# 
   461   000FB7                     PWM1CON         equ	4023	;# 
   462   000FB8                     BAUDCON         equ	4024	;# 
   463   000FB8                     BAUDCTL         equ	4024	;# 
   464   000FBA                     CCP2CON         equ	4026	;# 
   465   000FBB                     CCPR2           equ	4027	;# 
   466   000FBB                     CCPR2L          equ	4027	;# 
   467   000FBC                     CCPR2H          equ	4028	;# 
   468   000FBD                     CCP1CON         equ	4029	;# 
   469   000FBD                     ECCP1CON        equ	4029	;# 
   470   000FBE                     CCPR1           equ	4030	;# 
   471   000FBE                     CCPR1L          equ	4030	;# 
   472   000FBF                     CCPR1H          equ	4031	;# 
   473   000FC0                     ADCON2          equ	4032	;# 
   474   000FC1                     ADCON1          equ	4033	;# 
   475   000FC2                     ADCON0          equ	4034	;# 
   476   000FC3                     ADRES           equ	4035	;# 
   477   000FC3                     ADRESL          equ	4035	;# 
   478   000FC4                     ADRESH          equ	4036	;# 
   479   000FC5                     SSPCON2         equ	4037	;# 
   480   000FC6                     SSPCON1         equ	4038	;# 
   481   000FC7                     SSPSTAT         equ	4039	;# 
   482   000FC8                     SSPADD          equ	4040	;# 
   483   000FC9                     SSPBUF          equ	4041	;# 
   484   000FCA                     T2CON           equ	4042	;# 
   485   000FCB                     PR2             equ	4043	;# 
   486   000FCB                     MEMCON          equ	4043	;# 
   487   000FCC                     TMR2            equ	4044	;# 
   488   000FCD                     T1CON           equ	4045	;# 
   489   000FCE                     TMR1            equ	4046	;# 
   490   000FCE                     TMR1L           equ	4046	;# 
   491   000FCF                     TMR1H           equ	4047	;# 
   492   000FD0                     RCON            equ	4048	;# 
   493   000FD1                     WDTCON          equ	4049	;# 
   494   000FD2                     HLVDCON         equ	4050	;# 
   495   000FD2                     LVDCON          equ	4050	;# 
   496   000FD3                     OSCCON          equ	4051	;# 
   497   000FD5                     T0CON           equ	4053	;# 
   498   000FD6                     TMR0            equ	4054	;# 
   499   000FD6                     TMR0L           equ	4054	;# 
   500   000FD7                     TMR0H           equ	4055	;# 
   501   000FD8                     STATUS          equ	4056	;# 
   502   000FD9                     FSR2            equ	4057	;# 
   503   000FD9                     FSR2L           equ	4057	;# 
   504   000FDA                     FSR2H           equ	4058	;# 
   505   000FDB                     PLUSW2          equ	4059	;# 
   506   000FDC                     PREINC2         equ	4060	;# 
   507   000FDD                     POSTDEC2        equ	4061	;# 
   508   000FDE                     POSTINC2        equ	4062	;# 
   509   000FDF                     INDF2           equ	4063	;# 
   510   000FE0                     BSR             equ	4064	;# 
   511   000FE1                     FSR1            equ	4065	;# 
   512   000FE1                     FSR1L           equ	4065	;# 
   513   000FE2                     FSR1H           equ	4066	;# 
   514   000FE3                     PLUSW1          equ	4067	;# 
   515   000FE4                     PREINC1         equ	4068	;# 
   516   000FE5                     POSTDEC1        equ	4069	;# 
   517   000FE6                     POSTINC1        equ	4070	;# 
   518   000FE7                     INDF1           equ	4071	;# 
   519   000FE8                     WREG            equ	4072	;# 
   520   000FE9                     FSR0            equ	4073	;# 
   521   000FE9                     FSR0L           equ	4073	;# 
   522   000FEA                     FSR0H           equ	4074	;# 
   523   000FEB                     PLUSW0          equ	4075	;# 
   524   000FEC                     PREINC0         equ	4076	;# 
   525   000FED                     POSTDEC0        equ	4077	;# 
   526   000FEE                     POSTINC0        equ	4078	;# 
   527   000FEF                     INDF0           equ	4079	;# 
   528   000FF0                     INTCON3         equ	4080	;# 
   529   000FF1                     INTCON2         equ	4081	;# 
   530   000FF2                     INTCON          equ	4082	;# 
   531   000FF3                     PROD            equ	4083	;# 
   532   000FF3                     PRODL           equ	4083	;# 
   533   000FF4                     PRODH           equ	4084	;# 
   534   000FF5                     TABLAT          equ	4085	;# 
   535   000FF6                     TBLPTR          equ	4086	;# 
   536   000FF6                     TBLPTRL         equ	4086	;# 
   537   000FF7                     TBLPTRH         equ	4087	;# 
   538   000FF8                     TBLPTRU         equ	4088	;# 
   539   000FF9                     PCLAT           equ	4089	;# 
   540   000FF9                     PC              equ	4089	;# 
   541   000FF9                     PCL             equ	4089	;# 
   542   000FFA                     PCLATH          equ	4090	;# 
   543   000FFB                     PCLATU          equ	4091	;# 
   544   000FFC                     STKPTR          equ	4092	;# 
   545   000FFD                     TOS             equ	4093	;# 
   546   000FFD                     TOSL            equ	4093	;# 
   547   000FFE                     TOSH            equ	4094	;# 
   548   000FFF                     TOSU            equ	4095	;# 
   549   000F80                     PORTA           equ	3968	;# 
   550   000F81                     PORTB           equ	3969	;# 
   551   000F82                     PORTC           equ	3970	;# 
   552   000F83                     PORTD           equ	3971	;# 
   553   000F84                     PORTE           equ	3972	;# 
   554   000F89                     LATA            equ	3977	;# 
   555   000F8A                     LATB            equ	3978	;# 
   556   000F8B                     LATC            equ	3979	;# 
   557   000F8C                     LATD            equ	3980	;# 
   558   000F8D                     LATE            equ	3981	;# 
   559   000F92                     TRISA           equ	3986	;# 
   560   000F92                     DDRA            equ	3986	;# 
   561   000F93                     TRISB           equ	3987	;# 
   562   000F93                     DDRB            equ	3987	;# 
   563   000F94                     TRISC           equ	3988	;# 
   564   000F94                     DDRC            equ	3988	;# 
   565   000F95                     TRISD           equ	3989	;# 
   566   000F95                     DDRD            equ	3989	;# 
   567   000F96                     TRISE           equ	3990	;# 
   568   000F96                     DDRE            equ	3990	;# 
   569   000F9B                     OSCTUNE         equ	3995	;# 
   570   000F9D                     PIE1            equ	3997	;# 
   571   000F9E                     PIR1            equ	3998	;# 
   572   000F9F                     IPR1            equ	3999	;# 
   573   000FA0                     PIE2            equ	4000	;# 
   574   000FA1                     PIR2            equ	4001	;# 
   575   000FA2                     IPR2            equ	4002	;# 
   576   000FA6                     EECON1          equ	4006	;# 
   577   000FA7                     EECON2          equ	4007	;# 
   578   000FA8                     EEDATA          equ	4008	;# 
   579   000FA9                     EEADR           equ	4009	;# 
   580   000FAB                     RCSTA           equ	4011	;# 
   581   000FAB                     RCSTA1          equ	4011	;# 
   582   000FAC                     TXSTA           equ	4012	;# 
   583   000FAC                     TXSTA1          equ	4012	;# 
   584   000FAD                     TXREG           equ	4013	;# 
   585   000FAD                     TXREG1          equ	4013	;# 
   586   000FAE                     RCREG           equ	4014	;# 
   587   000FAE                     RCREG1          equ	4014	;# 
   588   000FAF                     SPBRG           equ	4015	;# 
   589   000FAF                     SPBRG1          equ	4015	;# 
   590   000FB0                     SPBRGH          equ	4016	;# 
   591   000FB1                     T3CON           equ	4017	;# 
   592   000FB2                     TMR3            equ	4018	;# 
   593   000FB2                     TMR3L           equ	4018	;# 
   594   000FB3                     TMR3H           equ	4019	;# 
   595   000FB4                     CMCON           equ	4020	;# 
   596   000FB5                     CVRCON          equ	4021	;# 
   597   000FB6                     ECCP1AS         equ	4022	;# 
   598   000FB7                     ECCP1DEL        equ	4023	;# 
   599   000FB7                     PWM1CON         equ	4023	;# 
   600   000FB8                     BAUDCON         equ	4024	;# 
   601   000FB8                     BAUDCTL         equ	4024	;# 
   602   000FBA                     CCP2CON         equ	4026	;# 
   603   000FBB                     CCPR2           equ	4027	;# 
   604   000FBB                     CCPR2L          equ	4027	;# 
   605   000FBC                     CCPR2H          equ	4028	;# 
   606   000FBD                     CCP1CON         equ	4029	;# 
   607   000FBD                     ECCP1CON        equ	4029	;# 
   608   000FBE                     CCPR1           equ	4030	;# 
   609   000FBE                     CCPR1L          equ	4030	;# 
   610   000FBF                     CCPR1H          equ	4031	;# 
   611   000FC0                     ADCON2          equ	4032	;# 
   612   000FC1                     ADCON1          equ	4033	;# 
   613   000FC2                     ADCON0          equ	4034	;# 
   614   000FC3                     ADRES           equ	4035	;# 
   615   000FC3                     ADRESL          equ	4035	;# 
   616   000FC4                     ADRESH          equ	4036	;# 
   617   000FC5                     SSPCON2         equ	4037	;# 
   618   000FC6                     SSPCON1         equ	4038	;# 
   619   000FC7                     SSPSTAT         equ	4039	;# 
   620   000FC8                     SSPADD          equ	4040	;# 
   621   000FC9                     SSPBUF          equ	4041	;# 
   622   000FCA                     T2CON           equ	4042	;# 
   623   000FCB                     PR2             equ	4043	;# 
   624   000FCB                     MEMCON          equ	4043	;# 
   625   000FCC                     TMR2            equ	4044	;# 
   626   000FCD                     T1CON           equ	4045	;# 
   627   000FCE                     TMR1            equ	4046	;# 
   628   000FCE                     TMR1L           equ	4046	;# 
   629   000FCF                     TMR1H           equ	4047	;# 
   630   000FD0                     RCON            equ	4048	;# 
   631   000FD1                     WDTCON          equ	4049	;# 
   632   000FD2                     HLVDCON         equ	4050	;# 
   633   000FD2                     LVDCON          equ	4050	;# 
   634   000FD3                     OSCCON          equ	4051	;# 
   635   000FD5                     T0CON           equ	4053	;# 
   636   000FD6                     TMR0            equ	4054	;# 
   637   000FD6                     TMR0L           equ	4054	;# 
   638   000FD7                     TMR0H           equ	4055	;# 
   639   000FD8                     STATUS          equ	4056	;# 
   640   000FD9                     FSR2            equ	4057	;# 
   641   000FD9                     FSR2L           equ	4057	;# 
   642   000FDA                     FSR2H           equ	4058	;# 
   643   000FDB                     PLUSW2          equ	4059	;# 
   644   000FDC                     PREINC2         equ	4060	;# 
   645   000FDD                     POSTDEC2        equ	4061	;# 
   646   000FDE                     POSTINC2        equ	4062	;# 
   647   000FDF                     INDF2           equ	4063	;# 
   648   000FE0                     BSR             equ	4064	;# 
   649   000FE1                     FSR1            equ	4065	;# 
   650   000FE1                     FSR1L           equ	4065	;# 
   651   000FE2                     FSR1H           equ	4066	;# 
   652   000FE3                     PLUSW1          equ	4067	;# 
   653   000FE4                     PREINC1         equ	4068	;# 
   654   000FE5                     POSTDEC1        equ	4069	;# 
   655   000FE6                     POSTINC1        equ	4070	;# 
   656   000FE7                     INDF1           equ	4071	;# 
   657   000FE8                     WREG            equ	4072	;# 
   658   000FE9                     FSR0            equ	4073	;# 
   659   000FE9                     FSR0L           equ	4073	;# 
   660   000FEA                     FSR0H           equ	4074	;# 
   661   000FEB                     PLUSW0          equ	4075	;# 
   662   000FEC                     PREINC0         equ	4076	;# 
   663   000FED                     POSTDEC0        equ	4077	;# 
   664   000FEE                     POSTINC0        equ	4078	;# 
   665   000FEF                     INDF0           equ	4079	;# 
   666   000FF0                     INTCON3         equ	4080	;# 
   667   000FF1                     INTCON2         equ	4081	;# 
   668   000FF2                     INTCON          equ	4082	;# 
   669   000FF3                     PROD            equ	4083	;# 
   670   000FF3                     PRODL           equ	4083	;# 
   671   000FF4                     PRODH           equ	4084	;# 
   672   000FF5                     TABLAT          equ	4085	;# 
   673   000FF6                     TBLPTR          equ	4086	;# 
   674   000FF6                     TBLPTRL         equ	4086	;# 
   675   000FF7                     TBLPTRH         equ	4087	;# 
   676   000FF8                     TBLPTRU         equ	4088	;# 
   677   000FF9                     PCLAT           equ	4089	;# 
   678   000FF9                     PC              equ	4089	;# 
   679   000FF9                     PCL             equ	4089	;# 
   680   000FFA                     PCLATH          equ	4090	;# 
   681   000FFB                     PCLATU          equ	4091	;# 
   682   000FFC                     STKPTR          equ	4092	;# 
   683   000FFD                     TOS             equ	4093	;# 
   684   000FFD                     TOSL            equ	4093	;# 
   685   000FFE                     TOSH            equ	4094	;# 
   686   000FFF                     TOSU            equ	4095	;# 
   687   000F80                     PORTA           equ	3968	;# 
   688   000F81                     PORTB           equ	3969	;# 
   689   000F82                     PORTC           equ	3970	;# 
   690   000F83                     PORTD           equ	3971	;# 
   691   000F84                     PORTE           equ	3972	;# 
   692   000F89                     LATA            equ	3977	;# 
   693   000F8A                     LATB            equ	3978	;# 
   694   000F8B                     LATC            equ	3979	;# 
   695   000F8C                     LATD            equ	3980	;# 
   696   000F8D                     LATE            equ	3981	;# 
   697   000F92                     TRISA           equ	3986	;# 
   698   000F92                     DDRA            equ	3986	;# 
   699   000F93                     TRISB           equ	3987	;# 
   700   000F93                     DDRB            equ	3987	;# 
   701   000F94                     TRISC           equ	3988	;# 
   702   000F94                     DDRC            equ	3988	;# 
   703   000F95                     TRISD           equ	3989	;# 
   704   000F95                     DDRD            equ	3989	;# 
   705   000F96                     TRISE           equ	3990	;# 
   706   000F96                     DDRE            equ	3990	;# 
   707   000F9B                     OSCTUNE         equ	3995	;# 
   708   000F9D                     PIE1            equ	3997	;# 
   709   000F9E                     PIR1            equ	3998	;# 
   710   000F9F                     IPR1            equ	3999	;# 
   711   000FA0                     PIE2            equ	4000	;# 
   712   000FA1                     PIR2            equ	4001	;# 
   713   000FA2                     IPR2            equ	4002	;# 
   714   000FA6                     EECON1          equ	4006	;# 
   715   000FA7                     EECON2          equ	4007	;# 
   716   000FA8                     EEDATA          equ	4008	;# 
   717   000FA9                     EEADR           equ	4009	;# 
   718   000FAB                     RCSTA           equ	4011	;# 
   719   000FAB                     RCSTA1          equ	4011	;# 
   720   000FAC                     TXSTA           equ	4012	;# 
   721   000FAC                     TXSTA1          equ	4012	;# 
   722   000FAD                     TXREG           equ	4013	;# 
   723   000FAD                     TXREG1          equ	4013	;# 
   724   000FAE                     RCREG           equ	4014	;# 
   725   000FAE                     RCREG1          equ	4014	;# 
   726   000FAF                     SPBRG           equ	4015	;# 
   727   000FAF                     SPBRG1          equ	4015	;# 
   728   000FB0                     SPBRGH          equ	4016	;# 
   729   000FB1                     T3CON           equ	4017	;# 
   730   000FB2                     TMR3            equ	4018	;# 
   731   000FB2                     TMR3L           equ	4018	;# 
   732   000FB3                     TMR3H           equ	4019	;# 
   733   000FB4                     CMCON           equ	4020	;# 
   734   000FB5                     CVRCON          equ	4021	;# 
   735   000FB6                     ECCP1AS         equ	4022	;# 
   736   000FB7                     ECCP1DEL        equ	4023	;# 
   737   000FB7                     PWM1CON         equ	4023	;# 
   738   000FB8                     BAUDCON         equ	4024	;# 
   739   000FB8                     BAUDCTL         equ	4024	;# 
   740   000FBA                     CCP2CON         equ	4026	;# 
   741   000FBB                     CCPR2           equ	4027	;# 
   742   000FBB                     CCPR2L          equ	4027	;# 
   743   000FBC                     CCPR2H          equ	4028	;# 
   744   000FBD                     CCP1CON         equ	4029	;# 
   745   000FBD                     ECCP1CON        equ	4029	;# 
   746   000FBE                     CCPR1           equ	4030	;# 
   747   000FBE                     CCPR1L          equ	4030	;# 
   748   000FBF                     CCPR1H          equ	4031	;# 
   749   000FC0                     ADCON2          equ	4032	;# 
   750   000FC1                     ADCON1          equ	4033	;# 
   751   000FC2                     ADCON0          equ	4034	;# 
   752   000FC3                     ADRES           equ	4035	;# 
   753   000FC3                     ADRESL          equ	4035	;# 
   754   000FC4                     ADRESH          equ	4036	;# 
   755   000FC5                     SSPCON2         equ	4037	;# 
   756   000FC6                     SSPCON1         equ	4038	;# 
   757   000FC7                     SSPSTAT         equ	4039	;# 
   758   000FC8                     SSPADD          equ	4040	;# 
   759   000FC9                     SSPBUF          equ	4041	;# 
   760   000FCA                     T2CON           equ	4042	;# 
   761   000FCB                     PR2             equ	4043	;# 
   762   000FCB                     MEMCON          equ	4043	;# 
   763   000FCC                     TMR2            equ	4044	;# 
   764   000FCD                     T1CON           equ	4045	;# 
   765   000FCE                     TMR1            equ	4046	;# 
   766   000FCE                     TMR1L           equ	4046	;# 
   767   000FCF                     TMR1H           equ	4047	;# 
   768   000FD0                     RCON            equ	4048	;# 
   769   000FD1                     WDTCON          equ	4049	;# 
   770   000FD2                     HLVDCON         equ	4050	;# 
   771   000FD2                     LVDCON          equ	4050	;# 
   772   000FD3                     OSCCON          equ	4051	;# 
   773   000FD5                     T0CON           equ	4053	;# 
   774   000FD6                     TMR0            equ	4054	;# 
   775   000FD6                     TMR0L           equ	4054	;# 
   776   000FD7                     TMR0H           equ	4055	;# 
   777   000FD8                     STATUS          equ	4056	;# 
   778   000FD9                     FSR2            equ	4057	;# 
   779   000FD9                     FSR2L           equ	4057	;# 
   780   000FDA                     FSR2H           equ	4058	;# 
   781   000FDB                     PLUSW2          equ	4059	;# 
   782   000FDC                     PREINC2         equ	4060	;# 
   783   000FDD                     POSTDEC2        equ	4061	;# 
   784   000FDE                     POSTINC2        equ	4062	;# 
   785   000FDF                     INDF2           equ	4063	;# 
   786   000FE0                     BSR             equ	4064	;# 
   787   000FE1                     FSR1            equ	4065	;# 
   788   000FE1                     FSR1L           equ	4065	;# 
   789   000FE2                     FSR1H           equ	4066	;# 
   790   000FE3                     PLUSW1          equ	4067	;# 
   791   000FE4                     PREINC1         equ	4068	;# 
   792   000FE5                     POSTDEC1        equ	4069	;# 
   793   000FE6                     POSTINC1        equ	4070	;# 
   794   000FE7                     INDF1           equ	4071	;# 
   795   000FE8                     WREG            equ	4072	;# 
   796   000FE9                     FSR0            equ	4073	;# 
   797   000FE9                     FSR0L           equ	4073	;# 
   798   000FEA                     FSR0H           equ	4074	;# 
   799   000FEB                     PLUSW0          equ	4075	;# 
   800   000FEC                     PREINC0         equ	4076	;# 
   801   000FED                     POSTDEC0        equ	4077	;# 
   802   000FEE                     POSTINC0        equ	4078	;# 
   803   000FEF                     INDF0           equ	4079	;# 
   804   000FF0                     INTCON3         equ	4080	;# 
   805   000FF1                     INTCON2         equ	4081	;# 
   806   000FF2                     INTCON          equ	4082	;# 
   807   000FF3                     PROD            equ	4083	;# 
   808   000FF3                     PRODL           equ	4083	;# 
   809   000FF4                     PRODH           equ	4084	;# 
   810   000FF5                     TABLAT          equ	4085	;# 
   811   000FF6                     TBLPTR          equ	4086	;# 
   812   000FF6                     TBLPTRL         equ	4086	;# 
   813   000FF7                     TBLPTRH         equ	4087	;# 
   814   000FF8                     TBLPTRU         equ	4088	;# 
   815   000FF9                     PCLAT           equ	4089	;# 
   816   000FF9                     PC              equ	4089	;# 
   817   000FF9                     PCL             equ	4089	;# 
   818   000FFA                     PCLATH          equ	4090	;# 
   819   000FFB                     PCLATU          equ	4091	;# 
   820   000FFC                     STKPTR          equ	4092	;# 
   821   000FFD                     TOS             equ	4093	;# 
   822   000FFD                     TOSL            equ	4093	;# 
   823   000FFE                     TOSH            equ	4094	;# 
   824   000FFF                     TOSU            equ	4095	;# 
   825   000F80                     PORTA           equ	3968	;# 
   826   000F81                     PORTB           equ	3969	;# 
   827   000F82                     PORTC           equ	3970	;# 
   828   000F83                     PORTD           equ	3971	;# 
   829   000F84                     PORTE           equ	3972	;# 
   830   000F89                     LATA            equ	3977	;# 
   831   000F8A                     LATB            equ	3978	;# 
   832   000F8B                     LATC            equ	3979	;# 
   833   000F8C                     LATD            equ	3980	;# 
   834   000F8D                     LATE            equ	3981	;# 
   835   000F92                     TRISA           equ	3986	;# 
   836   000F92                     DDRA            equ	3986	;# 
   837   000F93                     TRISB           equ	3987	;# 
   838   000F93                     DDRB            equ	3987	;# 
   839   000F94                     TRISC           equ	3988	;# 
   840   000F94                     DDRC            equ	3988	;# 
   841   000F95                     TRISD           equ	3989	;# 
   842   000F95                     DDRD            equ	3989	;# 
   843   000F96                     TRISE           equ	3990	;# 
   844   000F96                     DDRE            equ	3990	;# 
   845   000F9B                     OSCTUNE         equ	3995	;# 
   846   000F9D                     PIE1            equ	3997	;# 
   847   000F9E                     PIR1            equ	3998	;# 
   848   000F9F                     IPR1            equ	3999	;# 
   849   000FA0                     PIE2            equ	4000	;# 
   850   000FA1                     PIR2            equ	4001	;# 
   851   000FA2                     IPR2            equ	4002	;# 
   852   000FA6                     EECON1          equ	4006	;# 
   853   000FA7                     EECON2          equ	4007	;# 
   854   000FA8                     EEDATA          equ	4008	;# 
   855   000FA9                     EEADR           equ	4009	;# 
   856   000FAB                     RCSTA           equ	4011	;# 
   857   000FAB                     RCSTA1          equ	4011	;# 
   858   000FAC                     TXSTA           equ	4012	;# 
   859   000FAC                     TXSTA1          equ	4012	;# 
   860   000FAD                     TXREG           equ	4013	;# 
   861   000FAD                     TXREG1          equ	4013	;# 
   862   000FAE                     RCREG           equ	4014	;# 
   863   000FAE                     RCREG1          equ	4014	;# 
   864   000FAF                     SPBRG           equ	4015	;# 
   865   000FAF                     SPBRG1          equ	4015	;# 
   866   000FB0                     SPBRGH          equ	4016	;# 
   867   000FB1                     T3CON           equ	4017	;# 
   868   000FB2                     TMR3            equ	4018	;# 
   869   000FB2                     TMR3L           equ	4018	;# 
   870   000FB3                     TMR3H           equ	4019	;# 
   871   000FB4                     CMCON           equ	4020	;# 
   872   000FB5                     CVRCON          equ	4021	;# 
   873   000FB6                     ECCP1AS         equ	4022	;# 
   874   000FB7                     ECCP1DEL        equ	4023	;# 
   875   000FB7                     PWM1CON         equ	4023	;# 
   876   000FB8                     BAUDCON         equ	4024	;# 
   877   000FB8                     BAUDCTL         equ	4024	;# 
   878   000FBA                     CCP2CON         equ	4026	;# 
   879   000FBB                     CCPR2           equ	4027	;# 
   880   000FBB                     CCPR2L          equ	4027	;# 
   881   000FBC                     CCPR2H          equ	4028	;# 
   882   000FBD                     CCP1CON         equ	4029	;# 
   883   000FBD                     ECCP1CON        equ	4029	;# 
   884   000FBE                     CCPR1           equ	4030	;# 
   885   000FBE                     CCPR1L          equ	4030	;# 
   886   000FBF                     CCPR1H          equ	4031	;# 
   887   000FC0                     ADCON2          equ	4032	;# 
   888   000FC1                     ADCON1          equ	4033	;# 
   889   000FC2                     ADCON0          equ	4034	;# 
   890   000FC3                     ADRES           equ	4035	;# 
   891   000FC3                     ADRESL          equ	4035	;# 
   892   000FC4                     ADRESH          equ	4036	;# 
   893   000FC5                     SSPCON2         equ	4037	;# 
   894   000FC6                     SSPCON1         equ	4038	;# 
   895   000FC7                     SSPSTAT         equ	4039	;# 
   896   000FC8                     SSPADD          equ	4040	;# 
   897   000FC9                     SSPBUF          equ	4041	;# 
   898   000FCA                     T2CON           equ	4042	;# 
   899   000FCB                     PR2             equ	4043	;# 
   900   000FCB                     MEMCON          equ	4043	;# 
   901   000FCC                     TMR2            equ	4044	;# 
   902   000FCD                     T1CON           equ	4045	;# 
   903   000FCE                     TMR1            equ	4046	;# 
   904   000FCE                     TMR1L           equ	4046	;# 
   905   000FCF                     TMR1H           equ	4047	;# 
   906   000FD0                     RCON            equ	4048	;# 
   907   000FD1                     WDTCON          equ	4049	;# 
   908   000FD2                     HLVDCON         equ	4050	;# 
   909   000FD2                     LVDCON          equ	4050	;# 
   910   000FD3                     OSCCON          equ	4051	;# 
   911   000FD5                     T0CON           equ	4053	;# 
   912   000FD6                     TMR0            equ	4054	;# 
   913   000FD6                     TMR0L           equ	4054	;# 
   914   000FD7                     TMR0H           equ	4055	;# 
   915   000FD8                     STATUS          equ	4056	;# 
   916   000FD9                     FSR2            equ	4057	;# 
   917   000FD9                     FSR2L           equ	4057	;# 
   918   000FDA                     FSR2H           equ	4058	;# 
   919   000FDB                     PLUSW2          equ	4059	;# 
   920   000FDC                     PREINC2         equ	4060	;# 
   921   000FDD                     POSTDEC2        equ	4061	;# 
   922   000FDE                     POSTINC2        equ	4062	;# 
   923   000FDF                     INDF2           equ	4063	;# 
   924   000FE0                     BSR             equ	4064	;# 
   925   000FE1                     FSR1            equ	4065	;# 
   926   000FE1                     FSR1L           equ	4065	;# 
   927   000FE2                     FSR1H           equ	4066	;# 
   928   000FE3                     PLUSW1          equ	4067	;# 
   929   000FE4                     PREINC1         equ	4068	;# 
   930   000FE5                     POSTDEC1        equ	4069	;# 
   931   000FE6                     POSTINC1        equ	4070	;# 
   932   000FE7                     INDF1           equ	4071	;# 
   933   000FE8                     WREG            equ	4072	;# 
   934   000FE9                     FSR0            equ	4073	;# 
   935   000FE9                     FSR0L           equ	4073	;# 
   936   000FEA                     FSR0H           equ	4074	;# 
   937   000FEB                     PLUSW0          equ	4075	;# 
   938   000FEC                     PREINC0         equ	4076	;# 
   939   000FED                     POSTDEC0        equ	4077	;# 
   940   000FEE                     POSTINC0        equ	4078	;# 
   941   000FEF                     INDF0           equ	4079	;# 
   942   000FF0                     INTCON3         equ	4080	;# 
   943   000FF1                     INTCON2         equ	4081	;# 
   944   000FF2                     INTCON          equ	4082	;# 
   945   000FF3                     PROD            equ	4083	;# 
   946   000FF3                     PRODL           equ	4083	;# 
   947   000FF4                     PRODH           equ	4084	;# 
   948   000FF5                     TABLAT          equ	4085	;# 
   949   000FF6                     TBLPTR          equ	4086	;# 
   950   000FF6                     TBLPTRL         equ	4086	;# 
   951   000FF7                     TBLPTRH         equ	4087	;# 
   952   000FF8                     TBLPTRU         equ	4088	;# 
   953   000FF9                     PCLAT           equ	4089	;# 
   954   000FF9                     PC              equ	4089	;# 
   955   000FF9                     PCL             equ	4089	;# 
   956   000FFA                     PCLATH          equ	4090	;# 
   957   000FFB                     PCLATU          equ	4091	;# 
   958   000FFC                     STKPTR          equ	4092	;# 
   959   000FFD                     TOS             equ	4093	;# 
   960   000FFD                     TOSL            equ	4093	;# 
   961   000FFE                     TOSH            equ	4094	;# 
   962   000FFF                     TOSU            equ	4095	;# 
   963                           
   964                           	psect	mediumconst
   965   001EEC                     __pmediumconst:
   966                           	callstack 0
   967   001EEC  00                 	db	0
   968   001EED                     GetTecla@F3225:
   969                           	callstack 0
   970   001EED  01                 	db	1
   971   001EEE  02                 	db	2
   972   001EEF  03                 	db	3
   973   001EF0  04                 	db	4
   974   001EF1  05                 	db	5
   975   001EF2  06                 	db	6
   976   001EF3  07                 	db	7
   977   001EF4  08                 	db	8
   978   001EF5  09                 	db	9
   979   001EF6  0A                 	db	10
   980   001EF7  00                 	db	0
   981   001EF8  0B                 	db	11
   982   001EF9                     __end_ofGetTecla@F3225:
   983                           	callstack 0
   984   007F92                     _TMR0IF         set	32658
   985   000FD6                     _TMR0           set	4054
   986   000FAE                     _RCREG          set	4014
   987   000FAD                     _TXREG          set	4013
   988   000F9E                     _PIR1bits       set	3998
   989   000FB8                     _BAUDCON        set	4024
   990   000FAF                     _SPBRG          set	4015
   991   000FAB                     _RCSTA          set	4011
   992   000FAC                     _TXSTA          set	4012
   993   000F81                     _PORTBbits      set	3969
   994   000F8A                     _LATBbits       set	3978
   995   000F93                     _TRISBbits      set	3987
   996   000F82                     _PORTCbits      set	3970
   997   000F8B                     _LATCbits       set	3979
   998   000F94                     _TRISCbits      set	3988
   999   000F8C                     _LATD           set	3980
  1000   000F95                     _TRISD          set	3989
  1001   000F83                     _PORTD          set	3971
  1002   000FD5                     _T0CON          set	4053
  1003   000F8B                     _LATC           set	3979
  1004   000FF2                     _INTCONbits     set	4082
  1005   001EF9                     STR_1:
  1006                           
  1007                           ; BSR set to: 0
  1008   001EF9  53                 	db	83	;'S'
  1009   001EFA  74                 	db	116	;'t'
  1010   001EFB  61                 	db	97	;'a'
  1011   001EFC  74                 	db	116	;'t'
  1012   001EFD  65                 	db	101	;'e'
  1013   001EFE  3A                 	db	58	;':'
  1014   001EFF  20                 	db	32
  1015   001F00  25                 	db	37
  1016   001F01  64                 	db	100	;'d'
  1017   001F02  09                 	db	9
  1018   001F03  46                 	db	70	;'F'
  1019   001F04  69                 	db	105	;'i'
  1020   001F05  6C                 	db	108	;'l'
  1021   001F06  61                 	db	97	;'a'
  1022   001F07  73                 	db	115	;'s'
  1023   001F08  3A                 	db	58	;':'
  1024   001F09  20                 	db	32
  1025   001F0A  25                 	db	37
  1026   001F0B  64                 	db	100	;'d'
  1027   001F0C  09                 	db	9
  1028   001F0D  43                 	db	67	;'C'
  1029   001F0E  6F                 	db	111	;'o'
  1030   001F0F  6C                 	db	108	;'l'
  1031   001F10  75                 	db	117	;'u'
  1032   001F11  6D                 	db	109	;'m'
  1033   001F12  6E                 	db	110	;'n'
  1034   001F13  61                 	db	97	;'a'
  1035   001F14  73                 	db	115	;'s'
  1036   001F15  3A                 	db	58	;':'
  1037   001F16  20                 	db	32
  1038   001F17  25                 	db	37
  1039   001F18  64                 	db	100	;'d'
  1040   001F19  09                 	db	9
  1041   001F1A  54                 	db	84	;'T'
  1042   001F1B  65                 	db	101	;'e'
  1043   001F1C  63                 	db	99	;'c'
  1044   001F1D  6C                 	db	108	;'l'
  1045   001F1E  61                 	db	97	;'a'
  1046   001F1F  3A                 	db	58	;':'
  1047   001F20  20                 	db	32
  1048   001F21  25                 	db	37
  1049   001F22  64                 	db	100	;'d'
  1050   001F23  0D                 	db	13
  1051   001F24  0A                 	db	10
  1052   001F25  00                 	db	0
  1053   001F26                     STR_14:
  1054                           
  1055                           ; BSR set to: 0
  1056   001F26  45                 	db	69	;'E'
  1057   001F27  52                 	db	82	;'R'
  1058   001F28  52                 	db	82	;'R'
  1059   001F29  4F                 	db	79	;'O'
  1060   001F2A  52                 	db	82	;'R'
  1061   001F2B  2E                 	db	46
  1062   001F2C  20                 	db	32
  1063   001F2D  56                 	db	86	;'V'
  1064   001F2E  61                 	db	97	;'a'
  1065   001F2F  6C                 	db	108	;'l'
  1066   001F30  6F                 	db	111	;'o'
  1067   001F31  72                 	db	114	;'r'
  1068   001F32  20                 	db	32
  1069   001F33  69                 	db	105	;'i'
  1070   001F34  6E                 	db	110	;'n'
  1071   001F35  74                 	db	116	;'t'
  1072   001F36  72                 	db	114	;'r'
  1073   001F37  6F                 	db	111	;'o'
  1074   001F38  64                 	db	100	;'d'
  1075   001F39  75                 	db	117	;'u'
  1076   001F3A  69                 	db	105	;'i'
  1077   001F3B  74                 	db	116	;'t'
  1078   001F3C  20                 	db	32
  1079   001F3D  65                 	db	101	;'e'
  1080   001F3E  72                 	db	114	;'r'
  1081   001F3F  72                 	db	114	;'r'
  1082   001F40  6F                 	db	111	;'o'
  1083   001F41  6E                 	db	110	;'n'
  1084   001F42  69                 	db	105	;'i'
  1085   001F43  2E                 	db	46
  1086   001F44  0D                 	db	13
  1087   001F45  0A                 	db	10
  1088   001F46  00                 	db	0
  1089   001F47                     STR_11:
  1090                           
  1091                           ; BSR set to: 0
  1092   001F47  09                 	db	9
  1093   001F48  33                 	db	51	;'3'
  1094   001F49  2E                 	db	46
  1095   001F4A  20                 	db	32
  1096   001F4B  4D                 	db	77	;'M'
  1097   001F4C  6F                 	db	111	;'o'
  1098   001F4D  64                 	db	100	;'d'
  1099   001F4E  69                 	db	105	;'i'
  1100   001F4F  66                 	db	102	;'f'
  1101   001F50  69                 	db	105	;'i'
  1102   001F51  63                 	db	99	;'c'
  1103   001F52  61                 	db	97	;'a'
  1104   001F53  72                 	db	114	;'r'
  1105   001F54  20                 	db	32
  1106   001F55  68                 	db	104	;'h'
  1107   001F56  6F                 	db	111	;'o'
  1108   001F57  72                 	db	114	;'r'
  1109   001F58  61                 	db	97	;'a'
  1110   001F59  20                 	db	32
  1111   001F5A  64                 	db	100	;'d'
  1112   001F5B  65                 	db	101	;'e'
  1113   001F5C  6C                 	db	108	;'l'
  1114   001F5D  20                 	db	32
  1115   001F5E  73                 	db	115	;'s'
  1116   001F5F  69                 	db	105	;'i'
  1117   001F60  73                 	db	115	;'s'
  1118   001F61  74                 	db	116	;'t'
  1119   001F62  65                 	db	101	;'e'
  1120   001F63  6D                 	db	109	;'m'
  1121   001F64  61                 	db	97	;'a'
  1122   001F65  0D                 	db	13
  1123   001F66  0A                 	db	10
  1124   001F67  00                 	db	0
  1125   001F68                     STR_10:
  1126                           
  1127                           ; BSR set to: 0
  1128   001F68  09                 	db	9
  1129   001F69  32                 	db	50	;'2'
  1130   001F6A  2E                 	db	46
  1131   001F6B  20                 	db	32
  1132   001F6C  4D                 	db	77	;'M'
  1133   001F6D  6F                 	db	111	;'o'
  1134   001F6E  73                 	db	115	;'s'
  1135   001F6F  74                 	db	116	;'t'
  1136   001F70  72                 	db	114	;'r'
  1137   001F71  61                 	db	97	;'a'
  1138   001F72  72                 	db	114	;'r'
  1139   001F73  20                 	db	32
  1140   001F74  63                 	db	99	;'c'
  1141   001F75  6F                 	db	111	;'o'
  1142   001F76  6E                 	db	110	;'n'
  1143   001F77  66                 	db	102	;'f'
  1144   001F78  69                 	db	105	;'i'
  1145   001F79  67                 	db	103	;'g'
  1146   001F7A  75                 	db	117	;'u'
  1147   001F7B  72                 	db	114	;'r'
  1148   001F7C  61                 	db	97	;'a'
  1149   001F7D  63                 	db	99	;'c'
  1150   001F7E  69                 	db	105	;'i'
  1151   001F7F  6F                 	db	111	;'o'
  1152   001F80  6E                 	db	110	;'n'
  1153   001F81  73                 	db	115	;'s'
  1154   001F82  0D                 	db	13
  1155   001F83  0A                 	db	10
  1156   001F84  00                 	db	0
  1157   001F85                     STR_9:
  1158                           
  1159                           ; BSR set to: 0
  1160   001F85  09                 	db	9
  1161   001F86  31                 	db	49	;'1'
  1162   001F87  2E                 	db	46
  1163   001F88  20                 	db	32
  1164   001F89  51                 	db	81	;'Q'
  1165   001F8A  75                 	db	117	;'u'
  1166   001F8B  69                 	db	105	;'i'
  1167   001F8C  20                 	db	32
  1168   001F8D  68                 	db	104	;'h'
  1169   001F8E  69                 	db	105	;'i'
  1170   001F8F  20                 	db	32
  1171   001F90  68                 	db	104	;'h'
  1172   001F91  61                 	db	97	;'a'
  1173   001F92  20                 	db	32
  1174   001F93  61                 	db	97	;'a'
  1175   001F94  20                 	db	32
  1176   001F95  6C                 	db	108	;'l'
  1177   001F96  61                 	db	97	;'a'
  1178   001F97  20                 	db	32
  1179   001F98  73                 	db	115	;'s'
  1180   001F99  61                 	db	97	;'a'
  1181   001F9A  6C                 	db	108	;'l'
  1182   001F9B  61                 	db	97	;'a'
  1183   001F9C  3F                 	db	63	;'?'
  1184   001F9D  0D                 	db	13
  1185   001F9E  0A                 	db	10
  1186   001F9F  00                 	db	0
  1187   001FA0                     STR_8:
  1188                           
  1189                           ; BSR set to: 0
  1190   001FA0  54                 	db	84	;'T'
  1191   001FA1  72                 	db	114	;'r'
  1192   001FA2  69                 	db	105	;'i'
  1193   001FA3  61                 	db	97	;'a'
  1194   001FA4  20                 	db	32
  1195   001FA5  75                 	db	117	;'u'
  1196   001FA6  6E                 	db	110	;'n'
  1197   001FA7  61                 	db	97	;'a'
  1198   001FA8  20                 	db	32
  1199   001FA9  6F                 	db	111	;'o'
  1200   001FAA  70                 	db	112	;'p'
  1201   001FAB  63                 	db	99	;'c'
  1202   001FAC  69                 	db	105	;'i'
  1203   001FAD  C3                 	db	-61
  1204   001FAE  B3                 	db	-77
  1205   001FAF  3A                 	db	58	;':'
  1206   001FB0  0D                 	db	13
  1207   001FB1  0A                 	db	10
  1208   001FB2  00                 	db	0
  1209   001FB3                     STR_5:
  1210                           
  1211                           ; BSR set to: 0
  1212   001FB3  2D                 	db	45
  1213   001FB4  2D                 	db	45
  1214   001FB5  2D                 	db	45
  1215   001FB6  2D                 	db	45
  1216   001FB7  2D                 	db	45
  1217   001FB8  2D                 	db	45
  1218   001FB9  2D                 	db	45
  1219   001FBA  2D                 	db	45
  1220   001FBB  2D                 	db	45
  1221   001FBC  2D                 	db	45
  1222   001FBD  2D                 	db	45
  1223   001FBE  2D                 	db	45
  1224   001FBF  2D                 	db	45
  1225   001FC0  2D                 	db	45
  1226   001FC1  2D                 	db	45
  1227   001FC2  0D                 	db	13
  1228   001FC3  0A                 	db	10
  1229   001FC4  00                 	db	0
  1230   001FC5                     STR_6:
  1231                           
  1232                           ; BSR set to: 0
  1233   001FC5  4D                 	db	77	;'M'
  1234   001FC6  65                 	db	101	;'e'
  1235   001FC7  6E                 	db	110	;'n'
  1236   001FC8  C3                 	db	-61
  1237   001FC9  BA                 	db	-70
  1238   001FCA  20                 	db	32
  1239   001FCB  70                 	db	112	;'p'
  1240   001FCC  72                 	db	114	;'r'
  1241   001FCD  69                 	db	105	;'i'
  1242   001FCE  6E                 	db	110	;'n'
  1243   001FCF  63                 	db	99	;'c'
  1244   001FD0  69                 	db	105	;'i'
  1245   001FD1  70                 	db	112	;'p'
  1246   001FD2  61                 	db	97	;'a'
  1247   001FD3  6C                 	db	108	;'l'
  1248   001FD4  0D                 	db	13
  1249   001FD5  0A                 	db	10
  1250   001FD6  00                 	db	0
  1251   001FD7                     STR_13:
  1252                           
  1253                           ; BSR set to: 0
  1254   001FD7  48                 	db	72	;'H'
  1255   001FD8  61                 	db	97	;'a'
  1256   001FD9  73                 	db	115	;'s'
  1257   001FDA  20                 	db	32
  1258   001FDB  70                 	db	112	;'p'
  1259   001FDC  75                 	db	117	;'u'
  1260   001FDD  6C                 	db	108	;'l'
  1261   001FDE  73                 	db	115	;'s'
  1262   001FDF  61                 	db	97	;'a'
  1263   001FE0  64                 	db	100	;'d'
  1264   001FE1  6F                 	db	111	;'o'
  1265   001FE2  20                 	db	32
  1266   001FE3  31                 	db	49	;'1'
  1267   001FE4  00                 	db	0
  1268   001FE5                     STR_2:
  1269                           
  1270                           ; BSR set to: 0
  1271   001FE5  54                 	db	84	;'T'
  1272   001FE6  65                 	db	101	;'e'
  1273   001FE7  63                 	db	99	;'c'
  1274   001FE8  6C                 	db	108	;'l'
  1275   001FE9  61                 	db	97	;'a'
  1276   001FEA  3A                 	db	58	;':'
  1277   001FEB  20                 	db	32
  1278   001FEC  25                 	db	37
  1279   001FED  64                 	db	100	;'d'
  1280   001FEE  00                 	db	0
  1281   001FEF                     STR_12:
  1282                           
  1283                           ; BSR set to: 0
  1284   001FEF  4F                 	db	79	;'O'
  1285   001FF0  70                 	db	112	;'p'
  1286   001FF1  63                 	db	99	;'c'
  1287   001FF2  69                 	db	105	;'i'
  1288   001FF3  C3                 	db	-61
  1289   001FF4  B3                 	db	-77
  1290   001FF5  3A                 	db	58	;':'
  1291   001FF6  20                 	db	32
  1292   001FF7  00                 	db	0
  1293   001FF8                     
  1294                           ; BSR set to: 0
  1295   001FF8  55                 	db	85	;'U'
  1296   001FF9  49                 	db	73	;'I'
  1297   001FFA  44                 	db	68	;'D'
  1298   001FFB  3A                 	db	58	;':'
  1299   001FFC  20                 	db	32
  1300   001FFD  00                 	db	0
  1301   001FB3                     STR_7           equ	STR_5
  1302   001FC3                     STR_4           equ	STR_5+16
  1303   001FFE  00                 	db	0	; dummy byte at the end
  1304   001EEC                     __smallconst    set	__pmediumconst
  1305   001EEC                     __mediumconst   set	__pmediumconst
  1306   000002                     __activetblptr  equ	2
  1307                           
  1308                           ; #config settings
  1309                           
  1310                           	psect	cinit
  1311   000C98                     __pcinit:
  1312                           	callstack 0
  1313   000C98                     start_initialization:
  1314                           	callstack 0
  1315   000C98                     __initialization:
  1316                           	callstack 0
  1317                           
  1318                           ; Clear objects allocated to BANK0 (64 bytes)
  1319   000C98  EE00  F080         	lfsr	0,__pbssBANK0
  1320   000C9C  0E40               	movlw	64
  1321   000C9E                     clear_0:
  1322   000C9E  6AEE               	clrf	postinc0,c
  1323   000CA0  06E8               	decf	wreg,f,c
  1324   000CA2  E1FD               	bnz	clear_0
  1325                           
  1326                           ; Clear objects allocated to COMRAM (9 bytes)
  1327   000CA4  EE00  F056         	lfsr	0,__pbssCOMRAM
  1328   000CA8  0E09               	movlw	9
  1329   000CAA                     clear_1:
  1330   000CAA  6AEE               	clrf	postinc0,c
  1331   000CAC  06E8               	decf	wreg,f,c
  1332   000CAE  E1FD               	bnz	clear_1
  1333   000CB0                     end_of_initialization:
  1334                           	callstack 0
  1335   000CB0                     __end_of__initialization:
  1336                           	callstack 0
  1337   000CB0  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1338   000CB2  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1339   000CB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1340   000CB6  6EF8               	movwf	tblptru,c
  1341   000CB8  0100               	movlb	0
  1342   000CBA  EF5F  F006         	goto	_main	;jump to C main() function
  1343                           
  1344                           	psect	bssCOMRAM
  1345   000056                     __pbssCOMRAM:
  1346                           	callstack 0
  1347   000056                     _ColumnAct:
  1348                           	callstack 0
  1349   000056                     	ds	1
  1350   000057                     _RowAct:
  1351                           	callstack 0
  1352   000057                     	ds	1
  1353   000058                     _Rows:
  1354                           	callstack 0
  1355   000058                     	ds	1
  1356   000059                     motorTeclado@state:
  1357                           	callstack 0
  1358   000059                     	ds	1
  1359   00005A                     _tecla:
  1360                           	callstack 0
  1361   00005A                     	ds	1
  1362   00005B                     _Columnas:
  1363                           	callstack 0
  1364   00005B                     	ds	1
  1365   00005C                     _Filas:
  1366                           	callstack 0
  1367   00005C                     	ds	1
  1368   00005D                     _Timer:
  1369                           	callstack 0
  1370   00005D                     	ds	1
  1371   00005E                     _timer:
  1372                           	callstack 0
  1373   00005E                     	ds	1
  1374                           
  1375                           	psect	bssBANK0
  1376   000080                     __pbssBANK0:
  1377                           	callstack 0
  1378   000080                     _dbuf:
  1379                           	callstack 0
  1380   000080                     	ds	32
  1381   0000A0                     _Timers:
  1382                           	callstack 0
  1383   0000A0                     	ds	20
  1384   0000B4                     _Tics:
  1385                           	callstack 0
  1386   0000B4                     	ds	4
  1387   0000B8                     _width:
  1388                           	callstack 0
  1389   0000B8                     	ds	2
  1390   0000BA                     _prec:
  1391                           	callstack 0
  1392   0000BA                     	ds	2
  1393   0000BC                     _flags:
  1394                           	callstack 0
  1395   0000BC                     	ds	1
  1396   0000BD                     motorTerminal@state:
  1397                           	callstack 0
  1398   0000BD                     	ds	1
  1399   0000BE                     _hashtag_pressed:
  1400                           	callstack 0
  1401   0000BE                     	ds	1
  1402   0000BF                     _Columns:
  1403                           	callstack 0
  1404   0000BF                     	ds	1
  1405                           
  1406                           	psect	cstackBANK0
  1407   0000C0                     __pcstackBANK0:
  1408                           	callstack 0
  1409   0000C0                     motorTeclado@buffer:
  1410                           	callstack 0
  1411                           
  1412                           ; 32 bytes @ 0x0
  1413   0000C0                     	ds	32
  1414                           
  1415                           	psect	cstackCOMRAM
  1416   000001                     __pcstackCOMRAM:
  1417                           	callstack 0
  1418   000001                     ??_LowRSI:
  1419                           
  1420                           ; 1 bytes @ 0x0
  1421   000001                     	ds	1
  1422   000002                     ?_Terminal_TXAvailable:
  1423                           	callstack 0
  1424   000002                     ?___awdiv:
  1425                           	callstack 0
  1426   000002                     ?___awmod:
  1427                           	callstack 0
  1428   000002                     ?_TI_GetTics:
  1429                           	callstack 0
  1430   000002                     TI_Init@counter:
  1431                           	callstack 0
  1432   000002                     TI_NewTimer@TimerHandle:
  1433                           	callstack 0
  1434   000002                     TI_ResetTics@TimerHandle:
  1435                           	callstack 0
  1436   000002                     Terminal_SendChar@c:
  1437                           	callstack 0
  1438   000002                     ___awdiv@dividend:
  1439                           	callstack 0
  1440   000002                     ___awmod@dividend:
  1441                           	callstack 0
  1442   000002                     fputc@c:
  1443                           	callstack 0
  1444   000002                     ??_writeColumnas:
  1445   000002                     ??_GetTecla:
  1446   000002                     ??_delay_us:
  1447   000002                     ??_MFRC522_Rd:
  1448   000002                     
  1449                           ; 1 bytes @ 0x1
  1450   000002                     	ds	1
  1451   000003                     writeColumnas@out:
  1452                           	callstack 0
  1453   000003                     MFRC522_Rd@Address:
  1454                           	callstack 0
  1455   000003                     
  1456                           ; 1 bytes @ 0x2
  1457   000003                     	ds	1
  1458   000004                     TI_NewTimer@Comptador:
  1459                           	callstack 0
  1460   000004                     MFRC522_Rd@ucAddr:
  1461                           	callstack 0
  1462   000004                     fputc@fp:
  1463                           	callstack 0
  1464   000004                     ___awdiv@divisor:
  1465                           	callstack 0
  1466   000004                     ___awmod@divisor:
  1467                           	callstack 0
  1468   000004                     GetTecla@keymap:
  1469                           	callstack 0
  1470   000004                     ??_Terminal_TXAvailable:
  1471                           
  1472                           ; 1 bytes @ 0x3
  1473   000004                     	ds	1
  1474   000005                     delay_us@howMany:
  1475                           	callstack 0
  1476   000005                     MFRC522_Rd@ucResult:
  1477                           	callstack 0
  1478   000005                     Terminal_SendString@str:
  1479                           	callstack 0
  1480   000005                     ??_fputc:
  1481                           
  1482                           ; 1 bytes @ 0x4
  1483   000005                     	ds	1
  1484   000006                     delay_us@x:
  1485                           	callstack 0
  1486   000006                     MFRC522_Rd@i:
  1487                           	callstack 0
  1488   000006                     ___awdiv@counter:
  1489                           	callstack 0
  1490   000006                     ___awmod@counter:
  1491                           	callstack 0
  1492   000006                     ??_TI_GetTics:
  1493   000006                     
  1494                           ; 1 bytes @ 0x5
  1495   000006                     	ds	1
  1496   000007                     MFRC522_Wr@value:
  1497                           	callstack 0
  1498   000007                     ___awdiv@sign:
  1499                           	callstack 0
  1500   000007                     ___awmod@sign:
  1501                           	callstack 0
  1502   000007                     
  1503                           ; 1 bytes @ 0x6
  1504   000007                     	ds	1
  1505   000008                     ?_abs:
  1506                           	callstack 0
  1507   000008                     ___awdiv@quotient:
  1508                           	callstack 0
  1509   000008                     abs@a:
  1510                           	callstack 0
  1511   000008                     ??_MFRC522_Wr:
  1512                           
  1513                           ; 1 bytes @ 0x7
  1514   000008                     	ds	1
  1515   000009                     MFRC522_Wr@Address:
  1516                           	callstack 0
  1517                           
  1518                           ; 1 bytes @ 0x8
  1519   000009                     	ds	1
  1520   00000A                     MFRC522_Wr@ucAddr:
  1521                           	callstack 0
  1522   00000A                     TI_GetTics@CopiaTicsActual:
  1523                           	callstack 0
  1524   00000A                     ??_abs:
  1525                           
  1526                           ; 1 bytes @ 0x9
  1527   00000A                     	ds	1
  1528   00000B                     MFRC522_Wr@i:
  1529                           	callstack 0
  1530                           
  1531                           ; 1 bytes @ 0xA
  1532   00000B                     	ds	1
  1533   00000C                     MFRC522_Clear_Bit@mask:
  1534                           	callstack 0
  1535   00000C                     MFRC522_Set_Bit@mask:
  1536                           	callstack 0
  1537   00000C                     vfpfcnvrt@fp:
  1538                           	callstack 0
  1539   00000C                     
  1540                           ; 1 bytes @ 0xB
  1541   00000C                     	ds	1
  1542   00000D                     MFRC522_Set_Bit@addr:
  1543                           	callstack 0
  1544   00000D                     vfpfcnvrt@fmt:
  1545                           	callstack 0
  1546   00000D                     ??_MFRC522_Clear_Bit:
  1547   00000D                     
  1548                           ; 1 bytes @ 0xC
  1549   00000D                     	ds	1
  1550   00000E                     TI_GetTics@TimerHandle:
  1551                           	callstack 0
  1552   00000E                     MFRC522_Clear_Bit@addr:
  1553                           	callstack 0
  1554   00000E                     vfpfcnvrt@ap:
  1555                           	callstack 0
  1556   00000E                     
  1557                           ; 1 bytes @ 0xD
  1558   00000E                     	ds	1
  1559   00000F                     ??_vfpfcnvrt:
  1560                           
  1561                           ; 1 bytes @ 0xE
  1562   00000F                     	ds	1
  1563   000010                     GetTecla@columna:
  1564                           	callstack 0
  1565                           
  1566                           ; 1 bytes @ 0xF
  1567   000010                     	ds	1
  1568   000011                     GetTecla@fila:
  1569                           	callstack 0
  1570   000011                     vfpfcnvrt@done:
  1571                           	callstack 0
  1572                           
  1573                           ; 1 bytes @ 0x10
  1574   000011                     	ds	1
  1575   000012                     vfpfcnvrt@cp:
  1576                           	callstack 0
  1577                           
  1578                           ; 2 bytes @ 0x11
  1579   000012                     	ds	2
  1580   000014                     vfpfcnvrt@convarg:
  1581                           	callstack 0
  1582                           
  1583                           ; 4 bytes @ 0x13
  1584   000014                     	ds	4
  1585   000018                     vfpfcnvrt@c:
  1586                           	callstack 0
  1587                           
  1588                           ; 1 bytes @ 0x17
  1589   000018                     	ds	1
  1590   000019                     ?_vfprintf:
  1591                           	callstack 0
  1592   000019                     vfprintf@fp:
  1593                           	callstack 0
  1594                           
  1595                           ; 1 bytes @ 0x18
  1596   000019                     	ds	1
  1597   00001A                     vfprintf@fmt:
  1598                           	callstack 0
  1599                           
  1600                           ; 2 bytes @ 0x19
  1601   00001A                     	ds	2
  1602   00001C                     vfprintf@ap:
  1603                           	callstack 0
  1604                           
  1605                           ; 1 bytes @ 0x1B
  1606   00001C                     	ds	1
  1607   00001D                     vfprintf@cfmt:
  1608                           	callstack 0
  1609   00001D                     
  1610                           ; 1 bytes @ 0x1C
  1611   00001D                     	ds	2
  1612   00001F                     ?_sprintf:
  1613                           	callstack 0
  1614   00001F                     sprintf@s:
  1615                           	callstack 0
  1616                           
  1617                           ; 1 bytes @ 0x1E
  1618   00001F                     	ds	1
  1619   000020                     sprintf@fmt:
  1620                           	callstack 0
  1621                           
  1622                           ; 2 bytes @ 0x1F
  1623   000020                     	ds	10
  1624   00002A                     sprintf@ap:
  1625                           	callstack 0
  1626   00002A                     
  1627                           ; 1 bytes @ 0x29
  1628   00002A                     	ds	1
  1629   00002B                     sprintf@f:
  1630                           	callstack 0
  1631                           
  1632                           ; 11 bytes @ 0x2A
  1633   00002B                     	ds	11
  1634   000036                     showTecla@buffer:
  1635                           	callstack 0
  1636   000036                     
  1637                           ; 1 bytes @ 0x35
  1638   000036                     	ds	32
  1639   000056                     
  1640                           ; 1 bytes @ 0x55
  1641 ;;
  1642 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1643 ;;
  1644 ;; *************** function _main *****************
  1645 ;; Defined at:
  1646 ;;		line 36 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1
  1660 ;;      Params:         0       0       0
  1661 ;;      Locals:         0       0       0
  1662 ;;      Temps:          0       0       0
  1663 ;;      Totals:         0       0       0
  1664 ;;Total ram usage:        0 bytes
  1665 ;; Hardware stack levels required when called: 10
  1666 ;; This function calls:
  1667 ;;		_TI_Init
  1668 ;;		_Terminal_Init
  1669 ;;		_initRFID
  1670 ;;		_initTeclado
  1671 ;;		_motorTeclado
  1672 ;;		_motorTerminal
  1673 ;; This function is called by:
  1674 ;;		Startup code after reset
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text0
  1679   000CBE                     __ptext0:
  1680                           	callstack 0
  1681   000CBE                     _main:
  1682                           	callstack 21
  1683   000CBE                     
  1684                           ;main.c: 37:  LATC = key;
  1685   000CBE  EC1D  F006         	call	_TI_Init	;wreg free
  1686                           
  1687                           ;main.c: 38: }
  1688   000CC2  ECC7  F006         	call	_initTeclado	;wreg free
  1689   000CC6  EC01  F007         	call	_initRFID	;wreg free
  1690   000CCA  ECE5  F006         	call	_Terminal_Init	;wreg free
  1691   000CCE  8EF2               	bsf	242,7,c	;volatile
  1692   000CD0  8CF2               	bsf	242,6,c	;volatile
  1693   000CD2                     l3779:
  1694   000CD2  EC15  F000         	call	_motorTeclado	;wreg free
  1695   000CD6  EC24  F002         	call	_motorTerminal	;wreg free
  1696   000CDA  EF69  F006         	goto	l3779
  1697   000CDE  EF13  F000         	goto	start
  1698   000CE2                     __end_of_main:
  1699                           	callstack 0
  1700                           
  1701 ;; *************** function _motorTerminal *****************
  1702 ;; Defined at:
  1703 ;;		line 78 in file "TAD_TERMINAL.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1
  1717 ;;      Params:         0       0       0
  1718 ;;      Locals:         0       0       0
  1719 ;;      Temps:          0       0       0
  1720 ;;      Totals:         0       0       0
  1721 ;;Total ram usage:        0 bytes
  1722 ;; Hardware stack levels used: 1
  1723 ;; Hardware stack levels required when called: 6
  1724 ;; This function calls:
  1725 ;;		_Terminal_RXAvailable
  1726 ;;		_Terminal_ReceiveChar
  1727 ;;		_Terminal_SendString
  1728 ;;		_initTeclado
  1729 ;;		_showMenu
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text1
  1736   000448                     __ptext1:
  1737                           	callstack 0
  1738   000448                     _motorTerminal:
  1739                           	callstack 24
  1740   000448                     
  1741                           ;TAD_TERMINAL.c: 79:  static char state = 0;;TAD_TERMINAL.c: 81:  switch(state) {
  1742   000448  EF85  F002         	goto	l3729
  1743   00044C                     l3693:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;TAD_TERMINAL.c: 83:    if (Terminal_ReceiveChar() == 0x1B) {
  1747   00044C  EC11  F007         	call	_Terminal_ReceiveChar	;wreg free
  1748   000450  0A1B               	xorlw	27
  1749   000452  A4D8               	btfss	status,2,c
  1750   000454  EF2E  F002         	goto	u3511
  1751   000458  EF30  F002         	goto	u3510
  1752   00045C                     u3511:
  1753   00045C  EF35  F002         	goto	l3699
  1754   000460                     u3510:
  1755   000460                     
  1756                           ;TAD_TERMINAL.c: 84:     showMenu();
  1757   000460  ECD4  F004         	call	_showMenu	;wreg free
  1758   000464                     
  1759                           ;TAD_TERMINAL.c: 85:     state = 1;
  1760   000464  0E01               	movlw	1
  1761   000466  0100               	movlb	0	; () banked
  1762   000468  6FBD               	movwf	motorTerminal@state& (0+255),b
  1763   00046A                     l3699:
  1764                           
  1765                           ;TAD_TERMINAL.c: 87:    if (hashtag_pressed == 1){
  1766   00046A  0100               	movlb	0	; () banked
  1767   00046C  05BE               	decf	_hashtag_pressed& (0+255),w,b
  1768   00046E  A4D8               	btfss	status,2,c
  1769   000470  EF3C  F002         	goto	u3521
  1770   000474  EF3E  F002         	goto	u3520
  1771   000478                     u3521:
  1772   000478  EF91  F002         	goto	l500
  1773   00047C                     u3520:
  1774   00047C                     
  1775                           ; BSR set to: 0
  1776                           ;TAD_TERMINAL.c: 88:     showMenu();
  1777   00047C  ECD4  F004         	call	_showMenu	;wreg free
  1778   000480                     
  1779                           ;TAD_TERMINAL.c: 89:     state = 1;
  1780   000480  0E01               	movlw	1
  1781   000482  0100               	movlb	0	; () banked
  1782   000484  6FBD               	movwf	motorTerminal@state& (0+255),b
  1783   000486  EF91  F002         	goto	l500
  1784   00048A                     l3705:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;TAD_TERMINAL.c: 93:    if(Terminal_RXAvailable() == 1){
  1788   00048A  ECD1  F006         	call	_Terminal_RXAvailable	;wreg free
  1789   00048E  06E8               	decf	wreg,f,c
  1790   000490  A4D8               	btfss	status,2,c
  1791   000492  EF4D  F002         	goto	u3531
  1792   000496  EF4F  F002         	goto	u3530
  1793   00049A                     u3531:
  1794   00049A  EF91  F002         	goto	l500
  1795   00049E                     u3530:
  1796   00049E                     
  1797                           ;TAD_TERMINAL.c: 94:     initTeclado();
  1798   00049E  ECC7  F006         	call	_initTeclado	;wreg free
  1799   0004A2                     
  1800                           ;TAD_TERMINAL.c: 95:     if (Terminal_ReceiveChar() == '1') {
  1801   0004A2  EC11  F007         	call	_Terminal_ReceiveChar	;wreg free
  1802   0004A6  0A31               	xorlw	49
  1803   0004A8  A4D8               	btfss	status,2,c
  1804   0004AA  EF59  F002         	goto	u3541
  1805   0004AE  EF5B  F002         	goto	u3540
  1806   0004B2                     u3541:
  1807   0004B2  EF65  F002         	goto	l3715
  1808   0004B6                     u3540:
  1809   0004B6                     
  1810                           ;TAD_TERMINAL.c: 96:      Terminal_SendString("Has pulsado 1");
  1811   0004B6  0ED7               	movlw	low STR_13
  1812   0004B8  6E05               	movwf	Terminal_SendString@str^0,c
  1813   0004BA  0E1F               	movlw	high STR_13
  1814   0004BC  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1815   0004BE  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1816   0004C2                     l3713:
  1817                           
  1818                           ;TAD_TERMINAL.c: 98:      state = 0;
  1819   0004C2  0100               	movlb	0	; () banked
  1820   0004C4  6BBD               	clrf	motorTerminal@state& (0+255),b
  1821                           
  1822                           ;TAD_TERMINAL.c: 99:     }
  1823   0004C6  EF91  F002         	goto	l500
  1824   0004CA                     l3715:
  1825   0004CA  EC11  F007         	call	_Terminal_ReceiveChar	;wreg free
  1826   0004CE  0A32               	xorlw	50
  1827   0004D0  A4D8               	btfss	status,2,c
  1828   0004D2  EF6D  F002         	goto	u3551
  1829   0004D6  EF6F  F002         	goto	u3550
  1830   0004DA                     u3551:
  1831   0004DA  EF71  F002         	goto	l3719
  1832   0004DE                     u3550:
  1833   0004DE  EF61  F002         	goto	l3713
  1834   0004E2                     l3719:
  1835   0004E2  EC11  F007         	call	_Terminal_ReceiveChar	;wreg free
  1836   0004E6  0A33               	xorlw	51
  1837   0004E8  A4D8               	btfss	status,2,c
  1838   0004EA  EF79  F002         	goto	u3561
  1839   0004EE  EF7B  F002         	goto	u3560
  1840   0004F2                     u3561:
  1841   0004F2  EF7D  F002         	goto	l3723
  1842   0004F6                     u3560:
  1843   0004F6  EF61  F002         	goto	l3713
  1844   0004FA                     l3723:
  1845                           
  1846                           ;TAD_TERMINAL.c: 109:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  1847   0004FA  0E26               	movlw	low STR_14
  1848   0004FC  6E05               	movwf	Terminal_SendString@str^0,c
  1849   0004FE  0E1F               	movlw	high STR_14
  1850   000500  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1851   000502  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1852   000506  EF61  F002         	goto	l3713
  1853   00050A                     l3729:
  1854   00050A  0100               	movlb	0	; () banked
  1855   00050C  51BD               	movf	motorTerminal@state& (0+255),w,b
  1856                           
  1857                           ; Switch size 1, requested type "simple"
  1858                           ; Number of cases is 2, Range of values is 0 to 1
  1859                           ; switch strategies available:
  1860                           ; Name         Instructions Cycles
  1861                           ; simple_byte            7     4 (average)
  1862                           ;	Chosen strategy is simple_byte
  1863   00050E  0A00               	xorlw	0	; case 0
  1864   000510  B4D8               	btfsc	status,2,c
  1865   000512  EF26  F002         	goto	l3693
  1866   000516  0A01               	xorlw	1	; case 1
  1867   000518  B4D8               	btfsc	status,2,c
  1868   00051A  EF45  F002         	goto	l3705
  1869   00051E  EF91  F002         	goto	l500
  1870   000522                     l500:
  1871   000522  0012               	return		;funcret
  1872   000524                     __end_of_motorTerminal:
  1873                           	callstack 0
  1874                           
  1875 ;; *************** function _showMenu *****************
  1876 ;; Defined at:
  1877 ;;		line 62 in file "TAD_TERMINAL.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1
  1891 ;;      Params:         0       0       0
  1892 ;;      Locals:         0       0       0
  1893 ;;      Temps:          0       0       0
  1894 ;;      Totals:         0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used: 1
  1897 ;; Hardware stack levels required when called: 5
  1898 ;; This function calls:
  1899 ;;		_Terminal_SendString
  1900 ;; This function is called by:
  1901 ;;		_motorTerminal
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text2
  1906   0009A8                     __ptext2:
  1907                           	callstack 0
  1908   0009A8                     _showMenu:
  1909                           	callstack 24
  1910   0009A8                     
  1911                           ;TAD_TERMINAL.c: 63:  Terminal_SendString("---------------\r\n");
  1912   0009A8  0EB3               	movlw	low STR_5
  1913   0009AA  6E05               	movwf	Terminal_SendString@str^0,c
  1914   0009AC  0E1F               	movlw	high STR_5
  1915   0009AE  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1916   0009B0  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1917                           
  1918                           ;TAD_TERMINAL.c: 64:  Terminal_SendString("MenÃº principal\r\n");
  1919   0009B4  0EC5               	movlw	low STR_6
  1920   0009B6  6E05               	movwf	Terminal_SendString@str^0,c
  1921   0009B8  0E1F               	movlw	high STR_6
  1922   0009BA  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1923   0009BC  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1924                           
  1925                           ;TAD_TERMINAL.c: 65:  Terminal_SendString("---------------\r\n");
  1926   0009C0  0EB3               	movlw	low STR_5
  1927   0009C2  6E05               	movwf	Terminal_SendString@str^0,c
  1928   0009C4  0E1F               	movlw	high STR_5
  1929   0009C6  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1930   0009C8  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1931                           
  1932                           ;TAD_TERMINAL.c: 66:  Terminal_SendString("Tria una opciÃ³:\r\n");
  1933   0009CC  0EA0               	movlw	low STR_8
  1934   0009CE  6E05               	movwf	Terminal_SendString@str^0,c
  1935   0009D0  0E1F               	movlw	high STR_8
  1936   0009D2  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1937   0009D4  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1938                           
  1939                           ;TAD_TERMINAL.c: 67:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  1940   0009D8  0E85               	movlw	low STR_9
  1941   0009DA  6E05               	movwf	Terminal_SendString@str^0,c
  1942   0009DC  0E1F               	movlw	high STR_9
  1943   0009DE  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1944   0009E0  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1945                           
  1946                           ;TAD_TERMINAL.c: 68:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  1947   0009E4  0E68               	movlw	low STR_10
  1948   0009E6  6E05               	movwf	Terminal_SendString@str^0,c
  1949   0009E8  0E1F               	movlw	high STR_10
  1950   0009EA  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1951   0009EC  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1952                           
  1953                           ;TAD_TERMINAL.c: 69:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  1954   0009F0  0E47               	movlw	low STR_11
  1955   0009F2  6E05               	movwf	Terminal_SendString@str^0,c
  1956   0009F4  0E1F               	movlw	high STR_11
  1957   0009F6  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1958   0009F8  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1959                           
  1960                           ;TAD_TERMINAL.c: 70:  Terminal_SendString("OpciÃ³: ");
  1961   0009FC  0EEF               	movlw	low STR_12
  1962   0009FE  6E05               	movwf	Terminal_SendString@str^0,c
  1963   000A00  0E1F               	movlw	high STR_12
  1964   000A02  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1965   000A04  EC9A  F004         	call	_Terminal_SendString	;wreg free
  1966   000A08  0012               	return		;funcret
  1967   000A0A                     __end_of_showMenu:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function _initTeclado *****************
  1971 ;; Defined at:
  1972 ;;		line 14 in file "TAD_TECLADO.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1
  1986 ;;      Params:         0       0       0
  1987 ;;      Locals:         0       0       0
  1988 ;;      Temps:          0       0       0
  1989 ;;      Totals:         0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; Hardware stack levels required when called: 4
  1993 ;; This function calls:
  1994 ;;		_TI_NewTimer
  1995 ;;		_initPortsTeclado
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;;		_motorTerminal
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text3
  2003   000D8E                     __ptext3:
  2004                           	callstack 0
  2005   000D8E                     _initTeclado:
  2006                           	callstack 25
  2007   000D8E                     
  2008                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  2009   000D8E  EC06  F007         	call	_initPortsTeclado	;wreg free
  2010   000D92                     
  2011                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  2012   000D92  6A5C               	clrf	_Filas^0,c
  2013   000D94                     
  2014                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  2015   000D94  6A5B               	clrf	_Columnas^0,c
  2016   000D96                     
  2017                           ;TAD_TECLADO.c: 18:     tecla = 0;
  2018   000D96  6A5A               	clrf	_tecla^0,c
  2019   000D98                     
  2020                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  2021   000D98  0E5E               	movlw	low _timer
  2022   000D9A  6E02               	movwf	TI_NewTimer@TimerHandle^0,c
  2023   000D9C  EC33  F005         	call	_TI_NewTimer	;wreg free
  2024   000DA0  0012               	return		;funcret
  2025   000DA2                     __end_of_initTeclado:
  2026                           	callstack 0
  2027                           
  2028 ;; *************** function _initPortsTeclado *****************
  2029 ;; Defined at:
  2030 ;;		line 22 in file "TAD_TECLADO.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;		None
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;		None
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, status,2
  2039 ;; Tracked objects:
  2040 ;;		On entry : 0/0
  2041 ;;		On exit  : 0/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1
  2044 ;;      Params:         0       0       0
  2045 ;;      Locals:         0       0       0
  2046 ;;      Temps:          0       0       0
  2047 ;;      Totals:         0       0       0
  2048 ;;Total ram usage:        0 bytes
  2049 ;; Hardware stack levels used: 1
  2050 ;; Hardware stack levels required when called: 3
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_initTeclado
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text4
  2059   000E0C                     __ptext4:
  2060                           	callstack 0
  2061   000E0C                     _initPortsTeclado:
  2062                           	callstack 25
  2063   000E0C                     
  2064                           ;TAD_TECLADO.c: 23:  TRISD = 0x0F;
  2065   000E0C  0E0F               	movlw	15
  2066   000E0E  6E95               	movwf	149,c	;volatile
  2067   000E10                     
  2068                           ;TAD_TECLADO.c: 24:  LATD = 0x00;
  2069   000E10  6A8C               	clrf	140,c	;volatile
  2070   000E12  0012               	return		;funcret
  2071   000E14                     __end_of_initPortsTeclado:
  2072                           	callstack 0
  2073                           
  2074 ;; *************** function _TI_NewTimer *****************
  2075 ;; Defined at:
  2076 ;;		line 43 in file "TAD_TIMER.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  2079 ;;		 -> Timer(1), timer(1), 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  Comptador       1    3[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      unsigned char 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1
  2091 ;;      Params:         1       0       0
  2092 ;;      Locals:         1       0       0
  2093 ;;      Temps:          1       0       0
  2094 ;;      Totals:         3       0       0
  2095 ;;Total ram usage:        3 bytes
  2096 ;; Hardware stack levels used: 1
  2097 ;; Hardware stack levels required when called: 3
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_initTeclado
  2102 ;;		_LcInit
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text5
  2107   000A66                     __ptext5:
  2108                           	callstack 0
  2109   000A66                     _TI_NewTimer:
  2110                           	callstack 25
  2111   000A66                     
  2112                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  2113   000A66  6A04               	clrf	TI_NewTimer@Comptador^0,c
  2114                           
  2115                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  2116   000A68  EF42  F005         	goto	l2525
  2117   000A6C                     l2521:
  2118                           
  2119                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  2120   000A6C  2A04               	incf	TI_NewTimer@Comptador^0,f,c
  2121   000A6E  0E04               	movlw	4
  2122   000A70  1804               	xorwf	TI_NewTimer@Comptador^0,w,c
  2123   000A72  A4D8               	btfss	status,2,c
  2124   000A74  EF3E  F005         	goto	u1871
  2125   000A78  EF40  F005         	goto	u1870
  2126   000A7C                     u1871:
  2127   000A7C  EF42  F005         	goto	l2525
  2128   000A80                     u1870:
  2129   000A80  EF5D  F005         	goto	l66
  2130   000A84                     l2525:
  2131                           
  2132                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  2133   000A84  5004               	movf	TI_NewTimer@Comptador^0,w,c
  2134   000A86  0D05               	mullw	5
  2135   000A88  50F3               	movf	243,w,c
  2136   000A8A  0FA4               	addlw	low (_Timers+4)
  2137   000A8C  6ED9               	movwf	fsr2l,c
  2138   000A8E  6ADA               	clrf	fsr2h,c
  2139   000A90  04DE               	decf	postinc2,w,c
  2140   000A92  B4D8               	btfsc	status,2,c
  2141   000A94  EF4E  F005         	goto	u1881
  2142   000A98  EF50  F005         	goto	u1880
  2143   000A9C                     u1881:
  2144   000A9C  EF36  F005         	goto	l2521
  2145   000AA0                     u1880:
  2146   000AA0                     
  2147                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  2148   000AA0  5004               	movf	TI_NewTimer@Comptador^0,w,c
  2149   000AA2  0D05               	mullw	5
  2150   000AA4  50F3               	movf	243,w,c
  2151   000AA6  0FA4               	addlw	low (_Timers+4)
  2152   000AA8  6ED9               	movwf	fsr2l,c
  2153   000AAA  6ADA               	clrf	fsr2h,c
  2154   000AAC  0E01               	movlw	1
  2155   000AAE  6EDF               	movwf	indf2,c
  2156   000AB0                     
  2157                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  2158   000AB0  5002               	movf	TI_NewTimer@TimerHandle^0,w,c
  2159   000AB2  6ED9               	movwf	fsr2l,c
  2160   000AB4  6ADA               	clrf	fsr2h,c
  2161   000AB6  C004  FFDF         	movff	TI_NewTimer@Comptador,indf2
  2162   000ABA                     l66:
  2163   000ABA  0012               	return		;funcret
  2164   000ABC                     __end_of_TI_NewTimer:
  2165                           	callstack 0
  2166                           
  2167 ;; *************** function _Terminal_ReceiveChar *****************
  2168 ;; Defined at:
  2169 ;;		line 50 in file "TAD_TERMINAL.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;		None
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      unsigned char 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1
  2183 ;;      Params:         0       0       0
  2184 ;;      Locals:         0       0       0
  2185 ;;      Temps:          0       0       0
  2186 ;;      Totals:         0       0       0
  2187 ;;Total ram usage:        0 bytes
  2188 ;; Hardware stack levels used: 1
  2189 ;; Hardware stack levels required when called: 3
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_motorTerminal
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text6
  2198   000E22                     __ptext6:
  2199                           	callstack 0
  2200   000E22                     _Terminal_ReceiveChar:
  2201                           	callstack 26
  2202   000E22                     
  2203                           ;TAD_TERMINAL.c: 51:  return RCREG;
  2204   000E22  50AE               	movf	174,w,c	;volatile
  2205   000E24  0012               	return		;funcret
  2206   000E26                     __end_of_Terminal_ReceiveChar:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _Terminal_RXAvailable *****************
  2210 ;; Defined at:
  2211 ;;		line 40 in file "TAD_TERMINAL.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      unsigned char 
  2218 ;; Registers used:
  2219 ;;		wreg
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1
  2225 ;;      Params:         0       0       0
  2226 ;;      Locals:         0       0       0
  2227 ;;      Temps:          0       0       0
  2228 ;;      Totals:         0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 3
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_motorTerminal
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text7
  2240   000DA2                     __ptext7:
  2241                           	callstack 0
  2242   000DA2                     _Terminal_RXAvailable:
  2243                           	callstack 26
  2244   000DA2                     
  2245                           ;TAD_TERMINAL.c: 41:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  2246   000DA2  BA9E               	btfsc	158,5,c	;volatile
  2247   000DA4  EFD6  F006         	goto	u2181
  2248   000DA8  EFD9  F006         	goto	u2180
  2249   000DAC                     u2181:
  2250   000DAC  0E01               	movlw	1
  2251   000DAE  EFDA  F006         	goto	u2186
  2252   000DB2                     u2180:
  2253   000DB2  0E00               	movlw	0
  2254   000DB4                     u2186:
  2255   000DB4  0012               	return		;funcret
  2256   000DB6                     __end_of_Terminal_RXAvailable:
  2257                           	callstack 0
  2258                           
  2259 ;; *************** function _motorTeclado *****************
  2260 ;; Defined at:
  2261 ;;		line 31 in file "TAD_TECLADO.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  buffer         32    0[BANK0 ] unsigned char [32]
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1
  2275 ;;      Params:         0       0       0
  2276 ;;      Locals:         0      32       0
  2277 ;;      Temps:          0       0       0
  2278 ;;      Totals:         0      32       0
  2279 ;;Total ram usage:       32 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 9
  2282 ;; This function calls:
  2283 ;;		_GetTecla
  2284 ;;		_ReadFilas
  2285 ;;		_TI_GetTics
  2286 ;;		_TI_ResetTics
  2287 ;;		_Terminal_SendString
  2288 ;;		_showTecla
  2289 ;;		_sprintf
  2290 ;;		_writeColumnas
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text8
  2297   00002A                     __ptext8:
  2298                           	callstack 0
  2299   00002A                     _motorTeclado:
  2300                           	callstack 21
  2301   00002A                     
  2302                           ;TAD_TECLADO.c: 32:  static char state = 0;;TAD_TECLADO.c: 33:  Filas = ReadFilas();
  2303   00002A  EC0E  F007         	call	_ReadFilas	;wreg free
  2304   00002E  6E5C               	movwf	_Filas^0,c
  2305                           
  2306                           ;TAD_TECLADO.c: 34:  switch(state) {
  2307   000030  EF04  F001         	goto	l3685
  2308   000034                     l3591:
  2309                           
  2310                           ;TAD_TECLADO.c: 36:    if (Filas == 0x0) {
  2311   000034  505C               	movf	_Filas^0,w,c
  2312   000036  A4D8               	btfss	status,2,c
  2313   000038  EF20  F000         	goto	u3341
  2314   00003C  EF22  F000         	goto	u3340
  2315   000040                     u3341:
  2316   000040  EF2A  F000         	goto	l3599
  2317   000044                     u3340:
  2318   000044                     
  2319                           ;TAD_TECLADO.c: 37:     Columnas = (0x01);
  2320   000044  0E01               	movlw	1
  2321   000046  6E5B               	movwf	_Columnas^0,c
  2322   000048                     
  2323                           ;TAD_TECLADO.c: 38:     writeColumnas();
  2324   000048  EC05  F005         	call	_writeColumnas	;wreg free
  2325   00004C                     
  2326                           ;TAD_TECLADO.c: 39:     state = 1;
  2327   00004C  0E01               	movlw	1
  2328   00004E  6E59               	movwf	motorTeclado@state^0,c
  2329                           
  2330                           ;TAD_TECLADO.c: 40:    }
  2331   000050  EF1F  F001         	goto	l3687
  2332   000054                     l3599:
  2333   000054  505C               	movf	_Filas^0,w,c
  2334   000056  B4D8               	btfsc	status,2,c
  2335   000058  EF30  F000         	goto	u3351
  2336   00005C  EF32  F000         	goto	u3350
  2337   000060                     u3351:
  2338   000060  EF1F  F001         	goto	l3687
  2339   000064                     u3350:
  2340   000064                     
  2341                           ;TAD_TECLADO.c: 42:     TI_ResetTics(timer);
  2342   000064  505E               	movf	_timer^0,w,c
  2343   000066  EC71  F006         	call	_TI_ResetTics
  2344   00006A                     l3603:
  2345                           
  2346                           ;TAD_TECLADO.c: 43:     state = 3;
  2347   00006A  0E03               	movlw	3
  2348   00006C  6E59               	movwf	motorTeclado@state^0,c
  2349   00006E  EF1F  F001         	goto	l3687
  2350   000072                     l3605:
  2351                           
  2352                           ;TAD_TECLADO.c: 47:    if (Filas == 0x0) {
  2353   000072  505C               	movf	_Filas^0,w,c
  2354   000074  A4D8               	btfss	status,2,c
  2355   000076  EF3F  F000         	goto	u3361
  2356   00007A  EF41  F000         	goto	u3360
  2357   00007E                     u3361:
  2358   00007E  EF49  F000         	goto	l3613
  2359   000082                     u3360:
  2360   000082                     
  2361                           ;TAD_TECLADO.c: 48:     Columnas = (0x02);
  2362   000082  0E02               	movlw	2
  2363   000084  6E5B               	movwf	_Columnas^0,c
  2364   000086                     
  2365                           ;TAD_TECLADO.c: 49:     writeColumnas();
  2366   000086  EC05  F005         	call	_writeColumnas	;wreg free
  2367   00008A                     
  2368                           ;TAD_TECLADO.c: 50:     state = 2;
  2369   00008A  0E02               	movlw	2
  2370   00008C  6E59               	movwf	motorTeclado@state^0,c
  2371                           
  2372                           ;TAD_TECLADO.c: 51:    }
  2373   00008E  EF1F  F001         	goto	l3687
  2374   000092                     l3613:
  2375   000092  505C               	movf	_Filas^0,w,c
  2376   000094  B4D8               	btfsc	status,2,c
  2377   000096  EF4F  F000         	goto	u3371
  2378   00009A  EF51  F000         	goto	u3370
  2379   00009E                     u3371:
  2380   00009E  EF1F  F001         	goto	l3687
  2381   0000A2                     u3370:
  2382   0000A2                     
  2383                           ;TAD_TECLADO.c: 53:     TI_ResetTics(timer);
  2384   0000A2  505E               	movf	_timer^0,w,c
  2385   0000A4  EC71  F006         	call	_TI_ResetTics
  2386   0000A8  EF35  F000         	goto	l3603
  2387   0000AC                     l3619:
  2388                           
  2389                           ;TAD_TECLADO.c: 58:    if (Filas != 0x0) {
  2390   0000AC  505C               	movf	_Filas^0,w,c
  2391   0000AE  B4D8               	btfsc	status,2,c
  2392   0000B0  EF5C  F000         	goto	u3381
  2393   0000B4  EF5E  F000         	goto	u3380
  2394   0000B8                     u3381:
  2395   0000B8  EF63  F000         	goto	l3625
  2396   0000BC                     u3380:
  2397   0000BC                     
  2398                           ;TAD_TECLADO.c: 59:     TI_ResetTics(timer);
  2399   0000BC  505E               	movf	_timer^0,w,c
  2400   0000BE  EC71  F006         	call	_TI_ResetTics
  2401   0000C2  EF35  F000         	goto	l3603
  2402   0000C6                     l3625:
  2403   0000C6  505C               	movf	_Filas^0,w,c
  2404   0000C8  A4D8               	btfss	status,2,c
  2405   0000CA  EF69  F000         	goto	u3391
  2406   0000CE  EF6B  F000         	goto	u3390
  2407   0000D2                     u3391:
  2408   0000D2  EF1F  F001         	goto	l3687
  2409   0000D6                     u3390:
  2410   0000D6                     l3627:
  2411                           
  2412                           ;TAD_TECLADO.c: 63:     Columnas = (0x04);
  2413   0000D6  0E04               	movlw	4
  2414   0000D8  6E5B               	movwf	_Columnas^0,c
  2415   0000DA                     
  2416                           ;TAD_TECLADO.c: 64:     writeColumnas();
  2417   0000DA  EC05  F005         	call	_writeColumnas	;wreg free
  2418   0000DE                     l3631:
  2419                           
  2420                           ;TAD_TECLADO.c: 65:     state = 0;
  2421   0000DE  6A59               	clrf	motorTeclado@state^0,c
  2422   0000E0  EF1F  F001         	goto	l3687
  2423   0000E4                     l3633:
  2424                           
  2425                           ;TAD_TECLADO.c: 69:    tecla = GetTecla ();
  2426   0000E4  EC92  F002         	call	_GetTecla	;wreg free
  2427   0000E8  6E5A               	movwf	_tecla^0,c
  2428   0000EA                     
  2429                           ;TAD_TECLADO.c: 70:    if (Filas == 0x0) {
  2430   0000EA  505C               	movf	_Filas^0,w,c
  2431   0000EC  A4D8               	btfss	status,2,c
  2432   0000EE  EF7B  F000         	goto	u3401
  2433   0000F2  EF7D  F000         	goto	u3400
  2434   0000F6                     u3401:
  2435   0000F6  EF7F  F000         	goto	l3643
  2436   0000FA                     u3400:
  2437   0000FA  EF6B  F000         	goto	l3627
  2438   0000FE                     l3643:
  2439   0000FE  505C               	movf	_Filas^0,w,c
  2440   000100  B4D8               	btfsc	status,2,c
  2441   000102  EF85  F000         	goto	u3411
  2442   000106  EF87  F000         	goto	u3410
  2443   00010A                     u3411:
  2444   00010A  EFA8  F000         	goto	l3655
  2445   00010E                     u3410:
  2446   00010E  505E               	movf	_timer^0,w,c
  2447   000110  EC85  F005         	call	_TI_GetTics
  2448   000114  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2449   000116  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2450   000118  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  2451   00011A  E109               	bnz	u3420
  2452   00011C  0E09               	movlw	9
  2453   00011E  5C02               	subwf	?_TI_GetTics^0,w,c
  2454   000120  A0D8               	btfss	status,0,c
  2455   000122  EF95  F000         	goto	u3421
  2456   000126  EF97  F000         	goto	u3420
  2457   00012A                     u3421:
  2458   00012A  EFA8  F000         	goto	l3655
  2459   00012E                     u3420:
  2460   00012E  0E0B               	movlw	11
  2461   000130  185A               	xorwf	_tecla^0,w,c
  2462   000132  B4D8               	btfsc	status,2,c
  2463   000134  EF9E  F000         	goto	u3431
  2464   000138  EFA0  F000         	goto	u3430
  2465   00013C                     u3431:
  2466   00013C  EFA8  F000         	goto	l3655
  2467   000140                     u3430:
  2468   000140                     
  2469                           ;TAD_TECLADO.c: 76:     LATD = tecla;
  2470   000140  C05A  FF8C         	movff	_tecla,3980	;volatile
  2471   000144                     
  2472                           ;TAD_TECLADO.c: 77:     showTecla();
  2473   000144  EC83  F006         	call	_showTecla	;wreg free
  2474   000148                     l3653:
  2475                           
  2476                           ;TAD_TECLADO.c: 78:     state = 5;
  2477   000148  0E05               	movlw	5
  2478   00014A  6E59               	movwf	motorTeclado@state^0,c
  2479                           
  2480                           ;TAD_TECLADO.c: 79:    }
  2481   00014C  EF1F  F001         	goto	l3687
  2482   000150                     l3655:
  2483   000150  505C               	movf	_Filas^0,w,c
  2484   000152  B4D8               	btfsc	status,2,c
  2485   000154  EFAE  F000         	goto	u3441
  2486   000158  EFB0  F000         	goto	u3440
  2487   00015C                     u3441:
  2488   00015C  EF1F  F001         	goto	l3687
  2489   000160                     u3440:
  2490   000160  505E               	movf	_timer^0,w,c
  2491   000162  EC85  F005         	call	_TI_GetTics
  2492   000166  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2493   000168  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2494   00016A  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  2495   00016C  E109               	bnz	u3450
  2496   00016E  0E09               	movlw	9
  2497   000170  5C02               	subwf	?_TI_GetTics^0,w,c
  2498   000172  A0D8               	btfss	status,0,c
  2499   000174  EFBE  F000         	goto	u3451
  2500   000178  EFC0  F000         	goto	u3450
  2501   00017C                     u3451:
  2502   00017C  EF1F  F001         	goto	l3687
  2503   000180                     u3450:
  2504   000180  0E0B               	movlw	11
  2505   000182  185A               	xorwf	_tecla^0,w,c
  2506   000184  A4D8               	btfss	status,2,c
  2507   000186  EFC7  F000         	goto	u3461
  2508   00018A  EFC9  F000         	goto	u3460
  2509   00018E                     u3461:
  2510   00018E  EF1F  F001         	goto	l3687
  2511   000192                     u3460:
  2512   000192                     
  2513                           ;TAD_TECLADO.c: 81:     TI_ResetTics(timer);
  2514   000192  505E               	movf	_timer^0,w,c
  2515   000194  EC71  F006         	call	_TI_ResetTics
  2516   000198                     
  2517                           ;TAD_TECLADO.c: 82:     state = 4;
  2518   000198  0E04               	movlw	4
  2519   00019A  6E59               	movwf	motorTeclado@state^0,c
  2520   00019C  EF1F  F001         	goto	l3687
  2521   0001A0                     l3665:
  2522                           
  2523                           ;TAD_TECLADO.c: 86:    if (Filas == 0x0) {
  2524   0001A0  505C               	movf	_Filas^0,w,c
  2525   0001A2  A4D8               	btfss	status,2,c
  2526   0001A4  EFD6  F000         	goto	u3471
  2527   0001A8  EFD8  F000         	goto	u3470
  2528   0001AC                     u3471:
  2529   0001AC  EFDA  F000         	goto	l3669
  2530   0001B0                     u3470:
  2531   0001B0  EF6F  F000         	goto	l3631
  2532   0001B4                     l3669:
  2533   0001B4  505C               	movf	_Filas^0,w,c
  2534   0001B6  B4D8               	btfsc	status,2,c
  2535   0001B8  EFE0  F000         	goto	u3481
  2536   0001BC  EFE2  F000         	goto	u3480
  2537   0001C0                     u3481:
  2538   0001C0  EF1F  F001         	goto	l3687
  2539   0001C4                     u3480:
  2540   0001C4  505E               	movf	_timer^0,w,c
  2541   0001C6  EC85  F005         	call	_TI_GetTics
  2542   0001CA  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2543   0001CC  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2544   0001CE  E10B               	bnz	u3490
  2545   0001D0  0EDD               	movlw	221
  2546   0001D2  5C02               	subwf	?_TI_GetTics^0,w,c
  2547   0001D4  0E05               	movlw	5
  2548   0001D6  5803               	subwfb	(?_TI_GetTics+1)^0,w,c
  2549   0001D8  A0D8               	btfss	status,0,c
  2550   0001DA  EFF1  F000         	goto	u3491
  2551   0001DE  EFF3  F000         	goto	u3490
  2552   0001E2                     u3491:
  2553   0001E2  EF1F  F001         	goto	l3687
  2554   0001E6                     u3490:
  2555   0001E6  EFA4  F000         	goto	l3653
  2556   0001EA                     l3675:
  2557                           
  2558                           ;TAD_TECLADO.c: 95:    if (Filas == 0x0) {
  2559   0001EA  505C               	movf	_Filas^0,w,c
  2560   0001EC  A4D8               	btfss	status,2,c
  2561   0001EE  EFFB  F000         	goto	u3501
  2562   0001F2  EFFD  F000         	goto	u3500
  2563   0001F6                     u3501:
  2564   0001F6  EF1F  F001         	goto	l3687
  2565   0001FA                     u3500:
  2566   0001FA                     
  2567                           ;TAD_TECLADO.c: 96:     state = 0;
  2568   0001FA  6A59               	clrf	motorTeclado@state^0,c
  2569   0001FC                     
  2570                           ;TAD_TECLADO.c: 97:     Columnas = (0x04);
  2571   0001FC  0E04               	movlw	4
  2572   0001FE  6E5B               	movwf	_Columnas^0,c
  2573   000200                     
  2574                           ;TAD_TECLADO.c: 98:     writeColumnas();
  2575   000200  EC05  F005         	call	_writeColumnas	;wreg free
  2576   000204  EF1F  F001         	goto	l3687
  2577   000208                     l3685:
  2578   000208  5059               	movf	motorTeclado@state^0,w,c
  2579                           
  2580                           ; Switch size 1, requested type "simple"
  2581                           ; Number of cases is 6, Range of values is 0 to 5
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte           19    10 (average)
  2585                           ;	Chosen strategy is simple_byte
  2586   00020A  0A00               	xorlw	0	; case 0
  2587   00020C  B4D8               	btfsc	status,2,c
  2588   00020E  EF1A  F000         	goto	l3591
  2589   000212  0A01               	xorlw	1	; case 1
  2590   000214  B4D8               	btfsc	status,2,c
  2591   000216  EF39  F000         	goto	l3605
  2592   00021A  0A03               	xorlw	3	; case 2
  2593   00021C  B4D8               	btfsc	status,2,c
  2594   00021E  EF56  F000         	goto	l3619
  2595   000222  0A01               	xorlw	1	; case 3
  2596   000224  B4D8               	btfsc	status,2,c
  2597   000226  EF72  F000         	goto	l3633
  2598   00022A  0A07               	xorlw	7	; case 4
  2599   00022C  B4D8               	btfsc	status,2,c
  2600   00022E  EFD0  F000         	goto	l3665
  2601   000232  0A01               	xorlw	1	; case 5
  2602   000234  B4D8               	btfsc	status,2,c
  2603   000236  EFF5  F000         	goto	l3675
  2604   00023A  EF1F  F001         	goto	l3687
  2605   00023E                     l3687:
  2606                           
  2607                           ;TAD_TECLADO.c: 102:  char buffer[32];;TAD_TECLADO.c: 103:  sprintf(buffer, "State: %d\t
      +                          Filas: %d\tColumnas: %d\tTecla: %d\r\n", state, Filas, Columnas, tecla);
  2608   00023E  0EC0               	movlw	low motorTeclado@buffer
  2609   000240  6E1F               	movwf	sprintf@s^0,c
  2610   000242  0EF9               	movlw	low STR_1
  2611   000244  6E20               	movwf	sprintf@fmt^0,c
  2612   000246  0E1E               	movlw	high STR_1
  2613   000248  6E21               	movwf	(sprintf@fmt+1)^0,c
  2614   00024A  C059  F022         	movff	motorTeclado@state,?_sprintf+3
  2615   00024E  6A23               	clrf	(?_sprintf+4)^0,c
  2616   000250  C05C  F024         	movff	_Filas,?_sprintf+5
  2617   000254  6A25               	clrf	(?_sprintf+6)^0,c
  2618   000256  C05B  F026         	movff	_Columnas,?_sprintf+7
  2619   00025A  6A27               	clrf	(?_sprintf+8)^0,c
  2620   00025C  C05A  F028         	movff	_tecla,?_sprintf+9
  2621   000260  6A29               	clrf	(?_sprintf+10)^0,c
  2622   000262  ECCC  F005         	call	_sprintf	;wreg free
  2623   000266                     
  2624                           ;TAD_TECLADO.c: 104:     Terminal_SendString(buffer);
  2625   000266  0EC0               	movlw	low motorTeclado@buffer
  2626   000268  6E05               	movwf	Terminal_SendString@str^0,c
  2627   00026A  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2628   00026C  EC9A  F004         	call	_Terminal_SendString	;wreg free
  2629   000270  0012               	return		;funcret
  2630   000272                     __end_of_motorTeclado:
  2631                           	callstack 0
  2632                           
  2633 ;; *************** function _writeColumnas *****************
  2634 ;; Defined at:
  2635 ;;		line 111 in file "TAD_TECLADO.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  out             1    2[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1
  2649 ;;      Params:         0       0       0
  2650 ;;      Locals:         1       0       0
  2651 ;;      Temps:          1       0       0
  2652 ;;      Totals:         2       0       0
  2653 ;;Total ram usage:        2 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; Hardware stack levels required when called: 3
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_motorTeclado
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text9
  2664   000A0A                     __ptext9:
  2665                           	callstack 0
  2666   000A0A                     _writeColumnas:
  2667                           	callstack 26
  2668   000A0A                     
  2669                           ;TAD_TECLADO.c: 112:  unsigned char out = 0x00;
  2670   000A0A  6A03               	clrf	writeColumnas@out^0,c
  2671   000A0C                     
  2672                           ;TAD_TECLADO.c: 113:     if (Columnas == 0x01)
  2673   000A0C  045B               	decf	_Columnas^0,w,c
  2674   000A0E  A4D8               	btfss	status,2,c
  2675   000A10  EF0C  F005         	goto	u3261
  2676   000A14  EF0E  F005         	goto	u3260
  2677   000A18                     u3261:
  2678   000A18  EF12  F005         	goto	l3503
  2679   000A1C                     u3260:
  2680   000A1C                     
  2681                           ;TAD_TECLADO.c: 114:         out = 0x20;
  2682   000A1C  0E20               	movlw	32
  2683   000A1E  6E03               	movwf	writeColumnas@out^0,c
  2684   000A20  EF2A  F005         	goto	l3511
  2685   000A24                     l3503:
  2686   000A24  0E02               	movlw	2
  2687   000A26  185B               	xorwf	_Columnas^0,w,c
  2688   000A28  A4D8               	btfss	status,2,c
  2689   000A2A  EF19  F005         	goto	u3271
  2690   000A2E  EF1B  F005         	goto	u3270
  2691   000A32                     u3271:
  2692   000A32  EF1F  F005         	goto	l3507
  2693   000A36                     u3270:
  2694   000A36                     
  2695                           ;TAD_TECLADO.c: 116:         out = 0x40;
  2696   000A36  0E40               	movlw	64
  2697   000A38  6E03               	movwf	writeColumnas@out^0,c
  2698   000A3A  EF2A  F005         	goto	l3511
  2699   000A3E                     l3507:
  2700   000A3E  0E04               	movlw	4
  2701   000A40  185B               	xorwf	_Columnas^0,w,c
  2702   000A42  A4D8               	btfss	status,2,c
  2703   000A44  EF26  F005         	goto	u3281
  2704   000A48  EF28  F005         	goto	u3280
  2705   000A4C                     u3281:
  2706   000A4C  EF2A  F005         	goto	l3511
  2707   000A50                     u3280:
  2708   000A50                     
  2709                           ;TAD_TECLADO.c: 118:         out = 0x10;
  2710   000A50  0E10               	movlw	16
  2711   000A52  6E03               	movwf	writeColumnas@out^0,c
  2712   000A54                     l3511:
  2713                           
  2714                           ;TAD_TECLADO.c: 121:     LATD = (LATD & 0x8F) | (out & 0x70);
  2715   000A54  C003  F002         	movff	writeColumnas@out,??_writeColumnas
  2716   000A58  0E70               	movlw	112
  2717   000A5A  1602               	andwf	??_writeColumnas^0,f,c
  2718   000A5C  508C               	movf	140,w,c	;volatile
  2719   000A5E  0B8F               	andlw	143
  2720   000A60  1002               	iorwf	??_writeColumnas^0,w,c
  2721   000A62  6E8C               	movwf	140,c	;volatile
  2722   000A64  0012               	return		;funcret
  2723   000A66                     __end_of_writeColumnas:
  2724                           	callstack 0
  2725                           
  2726 ;; *************** function _showTecla *****************
  2727 ;; Defined at:
  2728 ;;		line 154 in file "TAD_TECLADO.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  buffer         32   53[COMRAM] unsigned char [32]
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1
  2742 ;;      Params:         0       0       0
  2743 ;;      Locals:        32       0       0
  2744 ;;      Temps:          0       0       0
  2745 ;;      Totals:        32       0       0
  2746 ;;Total ram usage:       32 bytes
  2747 ;; Hardware stack levels used: 1
  2748 ;; Hardware stack levels required when called: 8
  2749 ;; This function calls:
  2750 ;;		_Terminal_SendString
  2751 ;;		_sprintf
  2752 ;; This function is called by:
  2753 ;;		_motorTeclado
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text10
  2758   000D06                     __ptext10:
  2759                           	callstack 0
  2760   000D06                     _showTecla:
  2761                           	callstack 21
  2762   000D06                     
  2763                           ;TAD_TECLADO.c: 156:  char buffer[32];;TAD_TECLADO.c: 157:  sprintf(buffer, "Tecla: %d",
      +                           tecla);
  2764   000D06  0E36               	movlw	low showTecla@buffer
  2765   000D08  6E1F               	movwf	sprintf@s^0,c
  2766   000D0A  0EE5               	movlw	low STR_2
  2767   000D0C  6E20               	movwf	sprintf@fmt^0,c
  2768   000D0E  0E1F               	movlw	high STR_2
  2769   000D10  6E21               	movwf	(sprintf@fmt+1)^0,c
  2770   000D12  C05A  F022         	movff	_tecla,?_sprintf+3
  2771   000D16  6A23               	clrf	(?_sprintf+4)^0,c
  2772   000D18  ECCC  F005         	call	_sprintf	;wreg free
  2773   000D1C                     
  2774                           ;TAD_TECLADO.c: 158:     Terminal_SendString(buffer);
  2775   000D1C  0E36               	movlw	low showTecla@buffer
  2776   000D1E  6E05               	movwf	Terminal_SendString@str^0,c
  2777   000D20  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2778   000D22  EC9A  F004         	call	_Terminal_SendString	;wreg free
  2779   000D26  0012               	return		;funcret
  2780   000D28                     __end_of_showTecla:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _sprintf *****************
  2784 ;; Defined at:
  2785 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  s               1   30[COMRAM] PTR unsigned char 
  2788 ;;		 -> showTecla@buffer(32), motorTeclado@buffer(32), 
  2789 ;;  fmt             2   31[COMRAM] PTR const unsigned char 
  2790 ;;		 -> STR_2(10), STR_1(45), 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  f              11   42[COMRAM] struct _IO_FILE
  2793 ;;  ret             2    0        int 
  2794 ;;  ap              1   41[COMRAM] PTR void [1]
  2795 ;;		 -> ?_sprintf(2), 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  2   30[COMRAM] int 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1
  2805 ;;      Params:        11       0       0
  2806 ;;      Locals:        12       0       0
  2807 ;;      Temps:          0       0       0
  2808 ;;      Totals:        23       0       0
  2809 ;;Total ram usage:       23 bytes
  2810 ;; Hardware stack levels used: 1
  2811 ;; Hardware stack levels required when called: 7
  2812 ;; This function calls:
  2813 ;;		_vfprintf
  2814 ;; This function is called by:
  2815 ;;		_motorTeclado
  2816 ;;		_showTecla
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text11
  2821   000B98                     __ptext11:
  2822                           	callstack 0
  2823   000B98                     _sprintf:
  2824                           	callstack 22
  2825   000B98  0E22               	movlw	low (?_sprintf+3)
  2826   000B9A  6E2A               	movwf	sprintf@ap^0,c
  2827   000B9C  C01F  F02B         	movff	sprintf@s,sprintf@f
  2828   000BA0  0E00               	movlw	0
  2829   000BA2  6E2E               	movwf	(sprintf@f+3)^0,c
  2830   000BA4  0E00               	movlw	0
  2831   000BA6  6E2D               	movwf	(sprintf@f+2)^0,c
  2832   000BA8  0E00               	movlw	0
  2833   000BAA  6E35               	movwf	(sprintf@f+10)^0,c
  2834   000BAC  0E00               	movlw	0
  2835   000BAE  6E34               	movwf	(sprintf@f+9)^0,c
  2836   000BB0  0E2B               	movlw	low sprintf@f
  2837   000BB2  6E19               	movwf	vfprintf@fp^0,c
  2838   000BB4  C020  F01A         	movff	sprintf@fmt,vfprintf@fmt
  2839   000BB8  C021  F01B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2840   000BBC  0E2A               	movlw	low sprintf@ap
  2841   000BBE  6E1C               	movwf	vfprintf@ap^0,c
  2842   000BC0  ECAB  F005         	call	_vfprintf	;wreg free
  2843   000BC4  501F               	movf	sprintf@s^0,w,c
  2844   000BC6  242D               	addwf	(sprintf@f+2)^0,w,c
  2845   000BC8  6ED9               	movwf	fsr2l,c
  2846   000BCA  6ADA               	clrf	fsr2h,c
  2847   000BCC  6ADF               	clrf	indf2,c
  2848   000BCE  0012               	return		;funcret
  2849   000BD0                     __end_of_sprintf:
  2850                           	callstack 0
  2851                           
  2852 ;; *************** function _vfprintf *****************
  2853 ;; Defined at:
  2854 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  fp              1   24[COMRAM] PTR struct _IO_FILE
  2857 ;;		 -> sprintf@f(11), 
  2858 ;;  fmt             2   25[COMRAM] PTR const unsigned char 
  2859 ;;		 -> STR_2(10), STR_1(45), 
  2860 ;;  ap              1   27[COMRAM] PTR PTR void 
  2861 ;;		 -> sprintf@ap(1), 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  cfmt            2   28[COMRAM] PTR unsigned char 
  2864 ;;		 -> STR_2(10), STR_1(45), 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  2   24[COMRAM] int 
  2867 ;; Registers used:
  2868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1
  2874 ;;      Params:         4       0       0
  2875 ;;      Locals:         2       0       0
  2876 ;;      Temps:          0       0       0
  2877 ;;      Totals:         6       0       0
  2878 ;;Total ram usage:        6 bytes
  2879 ;; Hardware stack levels used: 1
  2880 ;; Hardware stack levels required when called: 6
  2881 ;; This function calls:
  2882 ;;		_vfpfcnvrt
  2883 ;; This function is called by:
  2884 ;;		_sprintf
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text12
  2889   000B56                     __ptext12:
  2890                           	callstack 0
  2891   000B56                     _vfprintf:
  2892                           	callstack 22
  2893   000B56                     
  2894                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2895   000B56  C01A  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  2896   000B5A  C01B  F01E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2897                           
  2898                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2899   000B5E  EFB9  F005         	goto	l3453
  2900   000B62                     l3451:
  2901                           
  2902                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2903   000B62  C019  F00C         	movff	vfprintf@fp,vfpfcnvrt@fp
  2904   000B66  0E1D               	movlw	low vfprintf@cfmt
  2905   000B68  6E0D               	movwf	vfpfcnvrt@fmt^0,c
  2906   000B6A  C01C  F00E         	movff	vfprintf@ap,vfpfcnvrt@ap
  2907   000B6E  EC39  F001         	call	_vfpfcnvrt	;wreg free
  2908   000B72                     l3453:
  2909                           
  2910                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2911   000B72  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  2912   000B76  C01E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2913   000B7A                     	if	0	;tblptru may be non-zero
  2914   000B7A                     	endif
  2915   000B7A                     	if	0	;tblptru may be non-zero
  2916   000B7A                     	endif
  2917   000B7A  0008               	tblrd		*
  2918   000B7C  50F5               	movf	tablat,w,c
  2919   000B7E  0900               	iorlw	0
  2920   000B80  A4D8               	btfss	status,2,c
  2921   000B82  EFC5  F005         	goto	u3211
  2922   000B86  EFC7  F005         	goto	u3210
  2923   000B8A                     u3211:
  2924   000B8A  EFB1  F005         	goto	l3451
  2925   000B8E                     u3210:
  2926   000B8E                     
  2927                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2928   000B8E  0E00               	movlw	0
  2929   000B90  6E1A               	movwf	(?_vfprintf+1)^0,c
  2930   000B92  0E00               	movlw	0
  2931   000B94  6E19               	movwf	?_vfprintf^0,c
  2932   000B96  0012               	return		;funcret
  2933   000B98                     __end_of_vfprintf:
  2934                           	callstack 0
  2935                           
  2936 ;; *************** function _vfpfcnvrt *****************
  2937 ;; Defined at:
  2938 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  2941 ;;		 -> sprintf@f(11), 
  2942 ;;  fmt             1   12[COMRAM] PTR PTR unsigned char 
  2943 ;;		 -> vfprintf@cfmt(2), 
  2944 ;;  ap              1   13[COMRAM] PTR PTR void 
  2945 ;;		 -> sprintf@ap(1), 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  convarg         4   19[COMRAM] struct .
  2948 ;;  cp              2   17[COMRAM] PTR unsigned char 
  2949 ;;		 -> STR_2(10), STR_1(45), 
  2950 ;;  c               1   23[COMRAM] unsigned char 
  2951 ;;  done            1   16[COMRAM] _Bool 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1
  2961 ;;      Params:         3       0       0
  2962 ;;      Locals:         8       0       0
  2963 ;;      Temps:          2       0       0
  2964 ;;      Totals:        13       0       0
  2965 ;;Total ram usage:       13 bytes
  2966 ;; Hardware stack levels used: 1
  2967 ;; Hardware stack levels required when called: 5
  2968 ;; This function calls:
  2969 ;;		___awdiv
  2970 ;;		___awmod
  2971 ;;		_abs
  2972 ;;		_fputc
  2973 ;; This function is called by:
  2974 ;;		_vfprintf
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text13
  2979   000272                     __ptext13:
  2980                           	callstack 0
  2981   000272                     _vfpfcnvrt:
  2982                           	callstack 22
  2983   000272                     
  2984                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2985   000272  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2986   000274  6ED9               	movwf	fsr2l,c
  2987   000276  6ADA               	clrf	fsr2h,c
  2988   000278  CFDE FFF6          	movff	postinc2,tblptrl
  2989   00027C  CFDD FFF7          	movff	postdec2,tblptrh
  2990   000280                     	if	0	;tblptru may be non-zero
  2991   000280                     	endif
  2992   000280                     	if	0	;tblptru may be non-zero
  2993   000280                     	endif
  2994   000280  0008               	tblrd		*
  2995   000282  50F5               	movf	tablat,w,c
  2996   000284  0A25               	xorlw	37
  2997   000286  A4D8               	btfss	status,2,c
  2998   000288  EF48  F001         	goto	u3101
  2999   00028C  EF4A  F001         	goto	u3100
  3000   000290                     u3101:
  3001   000290  EF12  F002         	goto	l3437
  3002   000294                     u3100:
  3003   000294                     
  3004                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3005   000294  500D               	movf	vfpfcnvrt@fmt^0,w,c
  3006   000296  6ED9               	movwf	fsr2l,c
  3007   000298  6ADA               	clrf	fsr2h,c
  3008   00029A  2ADE               	incf	postinc2,f,c
  3009   00029C  0E00               	movlw	0
  3010   00029E  22DD               	addwfc	postdec2,f,c
  3011   0002A0                     
  3012                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3013   0002A0  0E00               	movlw	0
  3014   0002A2  0100               	movlb	0	; () banked
  3015   0002A4  6FB9               	movwf	(_width+1)& (0+255),b
  3016   0002A6  0E00               	movlw	0
  3017   0002A8  6FB8               	movwf	_width& (0+255),b
  3018   0002AA  C0B8  F0BC         	movff	_width,_flags
  3019   0002AE                     
  3020                           ; BSR set to: 0
  3021                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3022   0002AE  69BA               	setf	_prec& (0+255),b
  3023   0002B0  69BB               	setf	(_prec+1)& (0+255),b
  3024   0002B2                     
  3025                           ; BSR set to: 0
  3026                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3027   0002B2  500D               	movf	vfpfcnvrt@fmt^0,w,c
  3028   0002B4  6ED9               	movwf	fsr2l,c
  3029   0002B6  6ADA               	clrf	fsr2h,c
  3030   0002B8  CFDE F012          	movff	postinc2,vfpfcnvrt@cp
  3031   0002BC  CFDD F013          	movff	postdec2,vfpfcnvrt@cp+1
  3032   0002C0                     
  3033                           ; BSR set to: 0
  3034                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3035   0002C0  C012  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3036   0002C4  C013  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3037   0002C8                     	if	0	;tblptru may be non-zero
  3038   0002C8                     	endif
  3039   0002C8                     	if	0	;tblptru may be non-zero
  3040   0002C8                     	endif
  3041   0002C8  0008               	tblrd		*
  3042   0002CA  50F5               	movf	tablat,w,c
  3043   0002CC  0A64               	xorlw	100
  3044   0002CE  B4D8               	btfsc	status,2,c
  3045   0002D0  EF6C  F001         	goto	u3111
  3046   0002D4  EF6E  F001         	goto	u3110
  3047   0002D8                     u3111:
  3048   0002D8  EF7C  F001         	goto	l3407
  3049   0002DC                     u3110:
  3050   0002DC                     
  3051                           ; BSR set to: 0
  3052   0002DC  C012  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3053   0002E0  C013  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3054   0002E4                     	if	0	;tblptru may be non-zero
  3055   0002E4                     	endif
  3056   0002E4                     	if	0	;tblptru may be non-zero
  3057   0002E4                     	endif
  3058   0002E4  0008               	tblrd		*
  3059   0002E6  50F5               	movf	tablat,w,c
  3060   0002E8  0A69               	xorlw	105
  3061   0002EA  A4D8               	btfss	status,2,c
  3062   0002EC  EF7A  F001         	goto	u3121
  3063   0002F0  EF7C  F001         	goto	u3120
  3064   0002F4                     u3121:
  3065   0002F4  EF0A  F002         	goto	l3433
  3066   0002F8                     u3120:
  3067   0002F8                     l3407:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3071   0002F8  500E               	movf	vfpfcnvrt@ap^0,w,c
  3072   0002FA  6ED9               	movwf	fsr2l,c
  3073   0002FC  6ADA               	clrf	fsr2h,c
  3074   0002FE  0E02               	movlw	2
  3075   000300  26DF               	addwf	indf2,f,c
  3076   000302  5CDF               	subwf	indf2,w,c
  3077   000304  6ED9               	movwf	fsr2l,c
  3078   000306  6ADA               	clrf	fsr2h,c
  3079   000308  CFDE F014          	movff	postinc2,vfpfcnvrt@convarg
  3080   00030C  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg+1
  3081   000310                     
  3082                           ; BSR set to: 0
  3083                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3084   000310  0E01               	movlw	1
  3085   000312  2412               	addwf	vfpfcnvrt@cp^0,w,c
  3086   000314  6E0F               	movwf	??_vfpfcnvrt^0,c
  3087   000316  0E00               	movlw	0
  3088   000318  2013               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3089   00031A  6E10               	movwf	(??_vfpfcnvrt+1)^0,c
  3090   00031C  500D               	movf	vfpfcnvrt@fmt^0,w,c
  3091   00031E  6ED9               	movwf	fsr2l,c
  3092   000320  6ADA               	clrf	fsr2h,c
  3093   000322  C00F  FFDE         	movff	??_vfpfcnvrt,postinc2
  3094   000326  C010  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3095   00032A                     
  3096                           ; BSR set to: 0
  3097                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3098   00032A  0E20               	movlw	32
  3099   00032C  6E18               	movwf	vfpfcnvrt@c^0,c
  3100                           
  3101                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3102   00032E  BE15               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3103   000330  EF9C  F001         	goto	u3131
  3104   000334  EF9F  F001         	goto	u3130
  3105   000338                     u3131:
  3106   000338  0E01               	movlw	1
  3107   00033A  EFA0  F001         	goto	u3140
  3108   00033E                     u3130:
  3109   00033E  0E00               	movlw	0
  3110   000340                     u3140:
  3111   000340  6E11               	movwf	vfpfcnvrt@done^0,c
  3112   000342                     l3413:
  3113                           
  3114                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3115   000342  0618               	decf	vfpfcnvrt@c^0,f,c
  3116   000344  5018               	movf	vfpfcnvrt@c^0,w,c
  3117   000346  0F80               	addlw	low _dbuf
  3118   000348  6ED9               	movwf	fsr2l,c
  3119   00034A  6ADA               	clrf	fsr2h,c
  3120   00034C  C014  F002         	movff	vfpfcnvrt@convarg,___awmod@dividend
  3121   000350  C015  F003         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  3122   000354  0E00               	movlw	0
  3123   000356  6E05               	movwf	(___awmod@divisor+1)^0,c
  3124   000358  0E0A               	movlw	10
  3125   00035A  6E04               	movwf	___awmod@divisor^0,c
  3126   00035C  EC55  F003         	call	___awmod	;wreg free
  3127   000360  C002  F008         	movff	?___awmod,abs@a
  3128   000364  C003  F009         	movff	?___awmod+1,abs@a+1
  3129   000368  EC03  F006         	call	_abs	;wreg free
  3130   00036C  5008               	movf	?_abs^0,w,c
  3131   00036E  0F30               	addlw	48
  3132   000370  6EDF               	movwf	indf2,c
  3133   000372                     
  3134                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3135   000372  C014  F002         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  3136   000376  C015  F003         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  3137   00037A  0E00               	movlw	0
  3138   00037C  6E05               	movwf	(___awdiv@divisor+1)^0,c
  3139   00037E  0E0A               	movlw	10
  3140   000380  6E04               	movwf	___awdiv@divisor^0,c
  3141   000382  ECF4  F002         	call	___awdiv	;wreg free
  3142   000386  C002  F014         	movff	?___awdiv,vfpfcnvrt@convarg
  3143   00038A  C003  F015         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  3144   00038E                     
  3145                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3146   00038E  5014               	movf	vfpfcnvrt@convarg^0,w,c
  3147   000390  1015               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3148   000392  B4D8               	btfsc	status,2,c
  3149   000394  EFCE  F001         	goto	u3151
  3150   000398  EFD0  F001         	goto	u3150
  3151   00039C                     u3151:
  3152   00039C  EFD8  F001         	goto	l3421
  3153   0003A0                     u3150:
  3154   0003A0  5018               	movf	vfpfcnvrt@c^0,w,c
  3155   0003A2  A4D8               	btfss	status,2,c
  3156   0003A4  EFD6  F001         	goto	u3161
  3157   0003A8  EFD8  F001         	goto	u3160
  3158   0003AC                     u3161:
  3159   0003AC  EFA1  F001         	goto	l3413
  3160   0003B0                     u3160:
  3161   0003B0                     l3421:
  3162                           
  3163                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3164   0003B0  5018               	movf	vfpfcnvrt@c^0,w,c
  3165   0003B2  B4D8               	btfsc	status,2,c
  3166   0003B4  EFDE  F001         	goto	u3171
  3167   0003B8  EFE0  F001         	goto	u3170
  3168   0003BC                     u3171:
  3169   0003BC  EFFF  F001         	goto	l3431
  3170   0003C0                     u3170:
  3171   0003C0  5011               	movf	vfpfcnvrt@done^0,w,c
  3172   0003C2  B4D8               	btfsc	status,2,c
  3173   0003C4  EFE6  F001         	goto	u3181
  3174   0003C8  EFE8  F001         	goto	u3180
  3175   0003CC                     u3181:
  3176   0003CC  EFFF  F001         	goto	l3431
  3177   0003D0                     u3180:
  3178   0003D0                     
  3179                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3180   0003D0  0618               	decf	vfpfcnvrt@c^0,f,c
  3181   0003D2  5018               	movf	vfpfcnvrt@c^0,w,c
  3182   0003D4  0F80               	addlw	low _dbuf
  3183   0003D6  6ED9               	movwf	fsr2l,c
  3184   0003D8  6ADA               	clrf	fsr2h,c
  3185   0003DA  0E2D               	movlw	45
  3186   0003DC  6EDF               	movwf	indf2,c
  3187   0003DE  EFFF  F001         	goto	l3431
  3188   0003E2                     l3427:
  3189                           
  3190                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3191   0003E2  5018               	movf	vfpfcnvrt@c^0,w,c
  3192   0003E4  0F80               	addlw	low _dbuf
  3193   0003E6  6ED9               	movwf	fsr2l,c
  3194   0003E8  6ADA               	clrf	fsr2h,c
  3195   0003EA  50DF               	movf	indf2,w,c
  3196   0003EC  6E0F               	movwf	??_vfpfcnvrt^0,c
  3197   0003EE  500F               	movf	??_vfpfcnvrt^0,w,c
  3198   0003F0  6E02               	movwf	fputc@c^0,c
  3199   0003F2  6A03               	clrf	(fputc@c+1)^0,c
  3200   0003F4  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  3201   0003F8  ECAC  F003         	call	_fputc	;wreg free
  3202   0003FC  2A18               	incf	vfpfcnvrt@c^0,f,c
  3203   0003FE                     l3431:
  3204                           
  3205                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3206   0003FE  0E20               	movlw	32
  3207   000400  1818               	xorwf	vfpfcnvrt@c^0,w,c
  3208   000402  A4D8               	btfss	status,2,c
  3209   000404  EF06  F002         	goto	u3191
  3210   000408  EF08  F002         	goto	u3190
  3211   00040C                     u3191:
  3212   00040C  EFF1  F001         	goto	l3427
  3213   000410                     u3190:
  3214   000410  EF23  F002         	goto	l1219
  3215   000414                     l3433:
  3216                           
  3217                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3218   000414  500D               	movf	vfpfcnvrt@fmt^0,w,c
  3219   000416  6ED9               	movwf	fsr2l,c
  3220   000418  6ADA               	clrf	fsr2h,c
  3221   00041A  2ADE               	incf	postinc2,f,c
  3222   00041C  0E00               	movlw	0
  3223   00041E  22DD               	addwfc	postdec2,f,c
  3224   000420  EF23  F002         	goto	l1219
  3225   000424                     l3437:
  3226                           
  3227                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3228   000424  500D               	movf	vfpfcnvrt@fmt^0,w,c
  3229   000426  6ED9               	movwf	fsr2l,c
  3230   000428  6ADA               	clrf	fsr2h,c
  3231   00042A  CFDE FFF6          	movff	postinc2,tblptrl
  3232   00042E  CFDD FFF7          	movff	postdec2,tblptrh
  3233   000432                     	if	0	;tblptru may be non-zero
  3234   000432                     	endif
  3235   000432                     	if	0	;tblptru may be non-zero
  3236   000432                     	endif
  3237   000432  0008               	tblrd		*
  3238   000434  50F5               	movf	tablat,w,c
  3239   000436  6E02               	movwf	fputc@c^0,c
  3240   000438  6A03               	clrf	(fputc@c+1)^0,c
  3241   00043A  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  3242   00043E  ECAC  F003         	call	_fputc	;wreg free
  3243   000442  EF0A  F002         	goto	l3433
  3244   000446                     l1219:
  3245   000446  0012               	return		;funcret
  3246   000448                     __end_of_vfpfcnvrt:
  3247                           	callstack 0
  3248                           
  3249 ;; *************** function _fputc *****************
  3250 ;; Defined at:
  3251 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  c               2    1[COMRAM] int 
  3254 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  3255 ;;		 -> sprintf@f(11), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2    1[COMRAM] int 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1
  3267 ;;      Params:         3       0       0
  3268 ;;      Locals:         0       0       0
  3269 ;;      Temps:          5       0       0
  3270 ;;      Totals:         8       0       0
  3271 ;;Total ram usage:        8 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 4
  3274 ;; This function calls:
  3275 ;;		_putch
  3276 ;; This function is called by:
  3277 ;;		_vfpfcnvrt
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text14
  3282   000758                     __ptext14:
  3283                           	callstack 0
  3284   000758                     _fputc:
  3285                           	callstack 22
  3286   000758  5004               	movf	fputc@fp^0,w,c
  3287   00075A  B4D8               	btfsc	status,2,c
  3288   00075C  EFB2  F003         	goto	u3051
  3289   000760  EFB4  F003         	goto	u3050
  3290   000764                     u3051:
  3291   000764  EFBC  F003         	goto	l3379
  3292   000768                     u3050:
  3293   000768  5004               	movf	fputc@fp^0,w,c
  3294   00076A  A4D8               	btfss	status,2,c
  3295   00076C  EFBA  F003         	goto	u3061
  3296   000770  EFBC  F003         	goto	u3060
  3297   000774                     u3061:
  3298   000774  EFC1  F003         	goto	l3381
  3299   000778                     u3060:
  3300   000778                     l3379:
  3301   000778  5002               	movf	fputc@c^0,w,c
  3302   00077A  EC13  F007         	call	_putch
  3303   00077E  EF00  F004         	goto	l1244
  3304   000782                     l3381:
  3305   000782  5004               	movf	fputc@fp^0,w,c
  3306   000784  6ED9               	movwf	fsr2l,c
  3307   000786  6ADA               	clrf	fsr2h,c
  3308   000788  0E09               	movlw	9
  3309   00078A  26D9               	addwf	fsr2l,f,c
  3310   00078C  50DE               	movf	postinc2,w,c
  3311   00078E  10DE               	iorwf	postinc2,w,c
  3312   000790  B4D8               	btfsc	status,2,c
  3313   000792  EFCD  F003         	goto	u3071
  3314   000796  EFCF  F003         	goto	u3070
  3315   00079A                     u3071:
  3316   00079A  EFE8  F003         	goto	l3385
  3317   00079E                     u3070:
  3318   00079E  5004               	movf	fputc@fp^0,w,c
  3319   0007A0  6ED9               	movwf	fsr2l,c
  3320   0007A2  6ADA               	clrf	fsr2h,c
  3321   0007A4  0E09               	movlw	9
  3322   0007A6  26D9               	addwf	fsr2l,f,c
  3323   0007A8  5004               	movf	fputc@fp^0,w,c
  3324   0007AA  6EE1               	movwf	fsr1l,c
  3325   0007AC  6AE2               	clrf	fsr1h,c
  3326   0007AE  0E02               	movlw	2
  3327   0007B0  26E1               	addwf	fsr1l,f,c
  3328   0007B2  50DE               	movf	postinc2,w,c
  3329   0007B4  5CE6               	subwf	postinc1,w,c
  3330   0007B6  50E6               	movf	postinc1,w,c
  3331   0007B8  0A80               	xorlw	128
  3332   0007BA  6E09               	movwf	(??_fputc+4)^0,c
  3333   0007BC  50DE               	movf	postinc2,w,c
  3334   0007BE  0A80               	xorlw	128
  3335   0007C0  5809               	subwfb	(??_fputc+4)^0,w,c
  3336   0007C2  B0D8               	btfsc	status,0,c
  3337   0007C4  EFE6  F003         	goto	u3081
  3338   0007C8  EFE8  F003         	goto	u3080
  3339   0007CC                     u3081:
  3340   0007CC  EF00  F004         	goto	l1244
  3341   0007D0                     u3080:
  3342   0007D0                     l3385:
  3343   0007D0  5004               	movf	fputc@fp^0,w,c
  3344   0007D2  6ED9               	movwf	fsr2l,c
  3345   0007D4  6ADA               	clrf	fsr2h,c
  3346   0007D6  0E02               	movlw	2
  3347   0007D8  26D9               	addwf	fsr2l,f,c
  3348   0007DA  50DF               	movf	indf2,w,c
  3349   0007DC  6E05               	movwf	??_fputc^0,c
  3350   0007DE  5004               	movf	fputc@fp^0,w,c
  3351   0007E0  6ED9               	movwf	fsr2l,c
  3352   0007E2  6ADA               	clrf	fsr2h,c
  3353   0007E4  50DF               	movf	indf2,w,c
  3354   0007E6  2405               	addwf	??_fputc^0,w,c
  3355   0007E8  6ED9               	movwf	fsr2l,c
  3356   0007EA  6ADA               	clrf	fsr2h,c
  3357   0007EC  C002  FFDF         	movff	fputc@c,indf2
  3358   0007F0  5004               	movf	fputc@fp^0,w,c
  3359   0007F2  6ED9               	movwf	fsr2l,c
  3360   0007F4  6ADA               	clrf	fsr2h,c
  3361   0007F6  0E02               	movlw	2
  3362   0007F8  26D9               	addwf	fsr2l,f,c
  3363   0007FA  2ADE               	incf	postinc2,f,c
  3364   0007FC  0E00               	movlw	0
  3365   0007FE  22DD               	addwfc	postdec2,f,c
  3366   000800                     l1244:
  3367   000800  0012               	return		;funcret
  3368   000802                     __end_of_fputc:
  3369                           	callstack 0
  3370                           
  3371 ;; *************** function _putch *****************
  3372 ;; Defined at:
  3373 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  c               1    wreg     unsigned char 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  c               1    0[COMRAM] unsigned char 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1
  3387 ;;      Params:         0       0       0
  3388 ;;      Locals:         0       0       0
  3389 ;;      Temps:          0       0       0
  3390 ;;      Totals:         0       0       0
  3391 ;;Total ram usage:        0 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; Hardware stack levels required when called: 3
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_fputc
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text15
  3402   000E26                     __ptext15:
  3403                           	callstack 0
  3404   000E26                     _putch:
  3405                           	callstack 22
  3406   000E26  0012               	return		;funcret
  3407   000E28                     __end_of_putch:
  3408                           	callstack 0
  3409                           
  3410 ;; *************** function _abs *****************
  3411 ;; Defined at:
  3412 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  a               2    7[COMRAM] int 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2    7[COMRAM] int 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1
  3426 ;;      Params:         2       0       0
  3427 ;;      Locals:         0       0       0
  3428 ;;      Temps:          2       0       0
  3429 ;;      Totals:         4       0       0
  3430 ;;Total ram usage:        4 bytes
  3431 ;; Hardware stack levels used: 1
  3432 ;; Hardware stack levels required when called: 3
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_vfpfcnvrt
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text16
  3441   000C06                     __ptext16:
  3442                           	callstack 0
  3443   000C06                     _abs:
  3444                           	callstack 23
  3445   000C06  BE09               	btfsc	(abs@a+1)^0,7,c
  3446   000C08  EF08  F006         	goto	u3091
  3447   000C0C  EF0A  F006         	goto	u3090
  3448   000C10                     u3091:
  3449   000C10  EF10  F006         	goto	l1229
  3450   000C14                     u3090:
  3451   000C14  C008  F008         	movff	abs@a,?_abs
  3452   000C18  C009  F009         	movff	abs@a+1,?_abs+1
  3453   000C1C  EF1C  F006         	goto	l1232
  3454   000C20                     l1229:
  3455   000C20  C008  F00A         	movff	abs@a,??_abs
  3456   000C24  C009  F00B         	movff	abs@a+1,??_abs+1
  3457   000C28  1E0A               	comf	??_abs^0,f,c
  3458   000C2A  1E0B               	comf	(??_abs+1)^0,f,c
  3459   000C2C  4A0A               	infsnz	??_abs^0,f,c
  3460   000C2E  2A0B               	incf	(??_abs+1)^0,f,c
  3461   000C30  C00A  F008         	movff	??_abs,?_abs
  3462   000C34  C00B  F009         	movff	??_abs+1,?_abs+1
  3463   000C38                     l1232:
  3464   000C38  0012               	return		;funcret
  3465   000C3A                     __end_of_abs:
  3466                           	callstack 0
  3467                           
  3468 ;; *************** function ___awmod *****************
  3469 ;; Defined at:
  3470 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  dividend        2    1[COMRAM] int 
  3473 ;;  divisor         2    3[COMRAM] int 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  sign            1    6[COMRAM] unsigned char 
  3476 ;;  counter         1    5[COMRAM] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  2    1[COMRAM] int 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1
  3486 ;;      Params:         4       0       0
  3487 ;;      Locals:         2       0       0
  3488 ;;      Temps:          0       0       0
  3489 ;;      Totals:         6       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 3
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_vfpfcnvrt
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text17
  3501   0006AA                     __ptext17:
  3502                           	callstack 0
  3503   0006AA                     ___awmod:
  3504                           	callstack 23
  3505   0006AA  6A07               	clrf	___awmod@sign^0,c
  3506   0006AC  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
  3507   0006AE  EF5D  F003         	goto	u2990
  3508   0006B2  EF5B  F003         	goto	u2991
  3509   0006B6                     u2991:
  3510   0006B6  EF63  F003         	goto	l3347
  3511   0006BA                     u2990:
  3512   0006BA  6C02               	negf	___awmod@dividend^0,c
  3513   0006BC  1E03               	comf	(___awmod@dividend+1)^0,f,c
  3514   0006BE  B0D8               	btfsc	status,0,c
  3515   0006C0  2A03               	incf	(___awmod@dividend+1)^0,f,c
  3516   0006C2  0E01               	movlw	1
  3517   0006C4  6E07               	movwf	___awmod@sign^0,c
  3518   0006C6                     l3347:
  3519   0006C6  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
  3520   0006C8  EF6A  F003         	goto	u3000
  3521   0006CC  EF68  F003         	goto	u3001
  3522   0006D0                     u3001:
  3523   0006D0  EF6E  F003         	goto	l3351
  3524   0006D4                     u3000:
  3525   0006D4  6C04               	negf	___awmod@divisor^0,c
  3526   0006D6  1E05               	comf	(___awmod@divisor+1)^0,f,c
  3527   0006D8  B0D8               	btfsc	status,0,c
  3528   0006DA  2A05               	incf	(___awmod@divisor+1)^0,f,c
  3529   0006DC                     l3351:
  3530   0006DC  5004               	movf	___awmod@divisor^0,w,c
  3531   0006DE  1005               	iorwf	(___awmod@divisor+1)^0,w,c
  3532   0006E0  B4D8               	btfsc	status,2,c
  3533   0006E2  EF75  F003         	goto	u3011
  3534   0006E6  EF77  F003         	goto	u3010
  3535   0006EA                     u3011:
  3536   0006EA  EF9B  F003         	goto	l3367
  3537   0006EE                     u3010:
  3538   0006EE  0E01               	movlw	1
  3539   0006F0  6E06               	movwf	___awmod@counter^0,c
  3540   0006F2  EF7F  F003         	goto	l3357
  3541   0006F6                     l3355:
  3542   0006F6  90D8               	bcf	status,0,c
  3543   0006F8  3604               	rlcf	___awmod@divisor^0,f,c
  3544   0006FA  3605               	rlcf	(___awmod@divisor+1)^0,f,c
  3545   0006FC  2A06               	incf	___awmod@counter^0,f,c
  3546   0006FE                     l3357:
  3547   0006FE  AE05               	btfss	(___awmod@divisor+1)^0,7,c
  3548   000700  EF84  F003         	goto	u3021
  3549   000704  EF86  F003         	goto	u3020
  3550   000708                     u3021:
  3551   000708  EF7B  F003         	goto	l3355
  3552   00070C                     u3020:
  3553   00070C                     l3359:
  3554   00070C  5004               	movf	___awmod@divisor^0,w,c
  3555   00070E  5C02               	subwf	___awmod@dividend^0,w,c
  3556   000710  5005               	movf	(___awmod@divisor+1)^0,w,c
  3557   000712  5803               	subwfb	(___awmod@dividend+1)^0,w,c
  3558   000714  A0D8               	btfss	status,0,c
  3559   000716  EF8F  F003         	goto	u3031
  3560   00071A  EF91  F003         	goto	u3030
  3561   00071E                     u3031:
  3562   00071E  EF95  F003         	goto	l3363
  3563   000722                     u3030:
  3564   000722  5004               	movf	___awmod@divisor^0,w,c
  3565   000724  5E02               	subwf	___awmod@dividend^0,f,c
  3566   000726  5005               	movf	(___awmod@divisor+1)^0,w,c
  3567   000728  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
  3568   00072A                     l3363:
  3569   00072A  90D8               	bcf	status,0,c
  3570   00072C  3205               	rrcf	(___awmod@divisor+1)^0,f,c
  3571   00072E  3204               	rrcf	___awmod@divisor^0,f,c
  3572   000730  2E06               	decfsz	___awmod@counter^0,f,c
  3573   000732  EF86  F003         	goto	l3359
  3574   000736                     l3367:
  3575   000736  5007               	movf	___awmod@sign^0,w,c
  3576   000738  B4D8               	btfsc	status,2,c
  3577   00073A  EFA1  F003         	goto	u3041
  3578   00073E  EFA3  F003         	goto	u3040
  3579   000742                     u3041:
  3580   000742  EFA7  F003         	goto	l3371
  3581   000746                     u3040:
  3582   000746  6C02               	negf	___awmod@dividend^0,c
  3583   000748  1E03               	comf	(___awmod@dividend+1)^0,f,c
  3584   00074A  B0D8               	btfsc	status,0,c
  3585   00074C  2A03               	incf	(___awmod@dividend+1)^0,f,c
  3586   00074E                     l3371:
  3587   00074E  C002  F002         	movff	___awmod@dividend,?___awmod
  3588   000752  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
  3589   000756  0012               	return		;funcret
  3590   000758                     __end_of___awmod:
  3591                           	callstack 0
  3592                           
  3593 ;; *************** function ___awdiv *****************
  3594 ;; Defined at:
  3595 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  dividend        2    1[COMRAM] int 
  3598 ;;  divisor         2    3[COMRAM] int 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  quotient        2    7[COMRAM] int 
  3601 ;;  sign            1    6[COMRAM] unsigned char 
  3602 ;;  counter         1    5[COMRAM] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  2    1[COMRAM] int 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1
  3612 ;;      Params:         4       0       0
  3613 ;;      Locals:         4       0       0
  3614 ;;      Temps:          0       0       0
  3615 ;;      Totals:         8       0       0
  3616 ;;Total ram usage:        8 bytes
  3617 ;; Hardware stack levels used: 1
  3618 ;; Hardware stack levels required when called: 3
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_vfpfcnvrt
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text18
  3627   0005E8                     __ptext18:
  3628                           	callstack 0
  3629   0005E8                     ___awdiv:
  3630                           	callstack 23
  3631   0005E8  6A07               	clrf	___awdiv@sign^0,c
  3632   0005EA  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  3633   0005EC  EFFC  F002         	goto	u2930
  3634   0005F0  EFFA  F002         	goto	u2931
  3635   0005F4                     u2931:
  3636   0005F4  EF02  F003         	goto	l3303
  3637   0005F8                     u2930:
  3638   0005F8  6C04               	negf	___awdiv@divisor^0,c
  3639   0005FA  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  3640   0005FC  B0D8               	btfsc	status,0,c
  3641   0005FE  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  3642   000600  0E01               	movlw	1
  3643   000602  6E07               	movwf	___awdiv@sign^0,c
  3644   000604                     l3303:
  3645   000604  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  3646   000606  EF09  F003         	goto	u2940
  3647   00060A  EF07  F003         	goto	u2941
  3648   00060E                     u2941:
  3649   00060E  EF0F  F003         	goto	l3309
  3650   000612                     u2940:
  3651   000612  6C02               	negf	___awdiv@dividend^0,c
  3652   000614  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  3653   000616  B0D8               	btfsc	status,0,c
  3654   000618  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  3655   00061A  0E01               	movlw	1
  3656   00061C  1A07               	xorwf	___awdiv@sign^0,f,c
  3657   00061E                     l3309:
  3658   00061E  0E00               	movlw	0
  3659   000620  6E09               	movwf	(___awdiv@quotient+1)^0,c
  3660   000622  0E00               	movlw	0
  3661   000624  6E08               	movwf	___awdiv@quotient^0,c
  3662   000626  5004               	movf	___awdiv@divisor^0,w,c
  3663   000628  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  3664   00062A  B4D8               	btfsc	status,2,c
  3665   00062C  EF1A  F003         	goto	u2951
  3666   000630  EF1C  F003         	goto	u2950
  3667   000634                     u2951:
  3668   000634  EF44  F003         	goto	l3331
  3669   000638                     u2950:
  3670   000638  0E01               	movlw	1
  3671   00063A  6E06               	movwf	___awdiv@counter^0,c
  3672   00063C  EF24  F003         	goto	l3317
  3673   000640                     l3315:
  3674   000640  90D8               	bcf	status,0,c
  3675   000642  3604               	rlcf	___awdiv@divisor^0,f,c
  3676   000644  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  3677   000646  2A06               	incf	___awdiv@counter^0,f,c
  3678   000648                     l3317:
  3679   000648  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  3680   00064A  EF29  F003         	goto	u2961
  3681   00064E  EF2B  F003         	goto	u2960
  3682   000652                     u2961:
  3683   000652  EF20  F003         	goto	l3315
  3684   000656                     u2960:
  3685   000656                     l3319:
  3686   000656  90D8               	bcf	status,0,c
  3687   000658  3608               	rlcf	___awdiv@quotient^0,f,c
  3688   00065A  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  3689   00065C  5004               	movf	___awdiv@divisor^0,w,c
  3690   00065E  5C02               	subwf	___awdiv@dividend^0,w,c
  3691   000660  5005               	movf	(___awdiv@divisor+1)^0,w,c
  3692   000662  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  3693   000664  A0D8               	btfss	status,0,c
  3694   000666  EF37  F003         	goto	u2971
  3695   00066A  EF39  F003         	goto	u2970
  3696   00066E                     u2971:
  3697   00066E  EF3E  F003         	goto	l3327
  3698   000672                     u2970:
  3699   000672  5004               	movf	___awdiv@divisor^0,w,c
  3700   000674  5E02               	subwf	___awdiv@dividend^0,f,c
  3701   000676  5005               	movf	(___awdiv@divisor+1)^0,w,c
  3702   000678  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  3703   00067A  8008               	bsf	___awdiv@quotient^0,0,c
  3704   00067C                     l3327:
  3705   00067C  90D8               	bcf	status,0,c
  3706   00067E  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  3707   000680  3204               	rrcf	___awdiv@divisor^0,f,c
  3708   000682  2E06               	decfsz	___awdiv@counter^0,f,c
  3709   000684  EF2B  F003         	goto	l3319
  3710   000688                     l3331:
  3711   000688  5007               	movf	___awdiv@sign^0,w,c
  3712   00068A  B4D8               	btfsc	status,2,c
  3713   00068C  EF4A  F003         	goto	u2981
  3714   000690  EF4C  F003         	goto	u2980
  3715   000694                     u2981:
  3716   000694  EF50  F003         	goto	l3335
  3717   000698                     u2980:
  3718   000698  6C08               	negf	___awdiv@quotient^0,c
  3719   00069A  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  3720   00069C  B0D8               	btfsc	status,0,c
  3721   00069E  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  3722   0006A0                     l3335:
  3723   0006A0  C008  F002         	movff	___awdiv@quotient,?___awdiv
  3724   0006A4  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  3725   0006A8  0012               	return		;funcret
  3726   0006AA                     __end_of___awdiv:
  3727                           	callstack 0
  3728                           
  3729 ;; *************** function _Terminal_SendString *****************
  3730 ;; Defined at:
  3731 ;;		line 55 in file "TAD_TERMINAL.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  str             2    4[COMRAM] PTR const unsigned char 
  3734 ;;		 -> STR_14(33), STR_13(14), STR_12(9), STR_11(33), 
  3735 ;;		 -> STR_10(29), STR_9(27), STR_8(19), STR_7(18), 
  3736 ;;		 -> STR_6(18), STR_5(18), STR_4(2), STR_3(6), 
  3737 ;;		 -> displayUID@hexString(11), showTecla@buffer(32), motorTeclado@buffer(32), 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1
  3749 ;;      Params:         2       0       0
  3750 ;;      Locals:         0       0       0
  3751 ;;      Temps:          0       0       0
  3752 ;;      Totals:         2       0       0
  3753 ;;Total ram usage:        2 bytes
  3754 ;; Hardware stack levels used: 1
  3755 ;; Hardware stack levels required when called: 4
  3756 ;; This function calls:
  3757 ;;		_Terminal_SendChar
  3758 ;;		_Terminal_TXAvailable
  3759 ;; This function is called by:
  3760 ;;		_motorTeclado
  3761 ;;		_showTecla
  3762 ;;		_showMenu
  3763 ;;		_motorTerminal
  3764 ;;		_displayUID
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text19
  3769   000934                     __ptext19:
  3770                           	callstack 0
  3771   000934                     _Terminal_SendString:
  3772                           	callstack 24
  3773   000934                     
  3774                           ;TAD_TERMINAL.c: 56:  while (*str) {
  3775   000934  EFBB  F004         	goto	l3479
  3776   000938                     l3473:
  3777   000938  EC94  F006         	call	_Terminal_TXAvailable	;wreg free
  3778   00093C  5002               	movf	?_Terminal_TXAvailable^0,w,c
  3779   00093E  1003               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  3780   000940  B4D8               	btfsc	status,2,c
  3781   000942  EFA5  F004         	goto	u3221
  3782   000946  EFA7  F004         	goto	u3220
  3783   00094A                     u3221:
  3784   00094A  EF9C  F004         	goto	l3473
  3785   00094E                     u3220:
  3786   00094E                     
  3787                           ;TAD_TERMINAL.c: 58:   Terminal_SendChar(*str++);
  3788   00094E  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  3789   000952  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3790   000956  6AF8               	clrf	tblptru,c
  3791   000958  0E01               	movlw	(high __ramtop+-1)
  3792   00095A  64F7               	cpfsgt	tblptrh,c
  3793   00095C  D003               	bra	u3237
  3794   00095E  0008               	tblrd		*
  3795   000960  50F5               	movf	tablat,w,c
  3796   000962  D005               	bra	u3230
  3797   000964                     u3237:
  3798   000964  CFF6 FFE9          	movff	tblptrl,fsr0l
  3799   000968  CFF7 FFEA          	movff	tblptrh,fsr0h
  3800   00096C  50EF               	movf	indf0,w,c
  3801   00096E                     u3230:
  3802   00096E  EC0A  F007         	call	_Terminal_SendChar
  3803   000972  4A05               	infsnz	Terminal_SendString@str^0,f,c
  3804   000974  2A06               	incf	(Terminal_SendString@str+1)^0,f,c
  3805   000976                     l3479:
  3806                           
  3807                           ;TAD_TERMINAL.c: 56:  while (*str) {
  3808   000976  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  3809   00097A  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3810   00097E  6AF8               	clrf	tblptru,c
  3811   000980  0E01               	movlw	(high __ramtop+-1)
  3812   000982  64F7               	cpfsgt	tblptrh,c
  3813   000984  D003               	bra	u3247
  3814   000986  0008               	tblrd		*
  3815   000988  50F5               	movf	tablat,w,c
  3816   00098A  D005               	bra	u3240
  3817   00098C                     u3247:
  3818   00098C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3819   000990  CFF7 FFEA          	movff	tblptrh,fsr0h
  3820   000994  50EF               	movf	indf0,w,c
  3821   000996                     u3240:
  3822   000996  0900               	iorlw	0
  3823   000998  A4D8               	btfss	status,2,c
  3824   00099A  EFD1  F004         	goto	u3251
  3825   00099E  EFD3  F004         	goto	u3250
  3826   0009A2                     u3251:
  3827   0009A2  EF9C  F004         	goto	l3473
  3828   0009A6                     u3250:
  3829   0009A6  0012               	return		;funcret
  3830   0009A8                     __end_of_Terminal_SendString:
  3831                           	callstack 0
  3832                           
  3833 ;; *************** function _Terminal_TXAvailable *****************
  3834 ;; Defined at:
  3835 ;;		line 35 in file "TAD_TERMINAL.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2    1[COMRAM] int 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1
  3849 ;;      Params:         2       0       0
  3850 ;;      Locals:         0       0       0
  3851 ;;      Temps:          1       0       0
  3852 ;;      Totals:         3       0       0
  3853 ;;Total ram usage:        3 bytes
  3854 ;; Hardware stack levels used: 1
  3855 ;; Hardware stack levels required when called: 3
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_Terminal_SendString
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text20
  3864   000D28                     __ptext20:
  3865                           	callstack 0
  3866   000D28                     _Terminal_TXAvailable:
  3867                           	callstack 24
  3868   000D28                     
  3869                           ;TAD_TERMINAL.c: 36:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  3870   000D28  B89E               	btfsc	158,4,c	;volatile
  3871   000D2A  EF99  F006         	goto	u3201
  3872   000D2E  EF9D  F006         	goto	u3200
  3873   000D32                     u3201:
  3874   000D32  6A04               	clrf	??_Terminal_TXAvailable^0,c
  3875   000D34  2A04               	incf	??_Terminal_TXAvailable^0,f,c
  3876   000D36  EF9E  F006         	goto	u3208
  3877   000D3A                     u3200:
  3878   000D3A  6A04               	clrf	??_Terminal_TXAvailable^0,c
  3879   000D3C                     u3208:
  3880   000D3C  5004               	movf	??_Terminal_TXAvailable^0,w,c
  3881   000D3E  6E02               	movwf	?_Terminal_TXAvailable^0,c
  3882   000D40  6A03               	clrf	(?_Terminal_TXAvailable+1)^0,c
  3883   000D42  0012               	return		;funcret
  3884   000D44                     __end_of_Terminal_TXAvailable:
  3885                           	callstack 0
  3886                           
  3887 ;; *************** function _Terminal_SendChar *****************
  3888 ;; Defined at:
  3889 ;;		line 45 in file "TAD_TERMINAL.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  c               1    wreg     unsigned char 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  c               1    1[COMRAM] unsigned char 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1
  3903 ;;      Params:         0       0       0
  3904 ;;      Locals:         1       0       0
  3905 ;;      Temps:          0       0       0
  3906 ;;      Totals:         1       0       0
  3907 ;;Total ram usage:        1 bytes
  3908 ;; Hardware stack levels used: 1
  3909 ;; Hardware stack levels required when called: 3
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_Terminal_SendString
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text21
  3918   000E14                     __ptext21:
  3919                           	callstack 0
  3920   000E14                     _Terminal_SendChar:
  3921                           	callstack 24
  3922                           
  3923                           ;incstack = 0
  3924                           ;Terminal_SendChar@c stored from wreg
  3925   000E14  6E02               	movwf	Terminal_SendChar@c^0,c
  3926   000E16                     
  3927                           ;TAD_TERMINAL.c: 46:  TXREG = c;
  3928   000E16  C002  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  3929   000E1A  0012               	return		;funcret
  3930   000E1C                     __end_of_Terminal_SendChar:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _TI_ResetTics *****************
  3934 ;; Defined at:
  3935 ;;		line 53 in file "TAD_TIMER.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  TimerHandle     1    wreg     unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1
  3949 ;;      Params:         0       0       0
  3950 ;;      Locals:         1       0       0
  3951 ;;      Temps:          0       0       0
  3952 ;;      Totals:         1       0       0
  3953 ;;Total ram usage:        1 bytes
  3954 ;; Hardware stack levels used: 1
  3955 ;; Hardware stack levels required when called: 3
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_motorTeclado
  3960 ;;		_Espera
  3961 ;;		_WaitForBusy
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text22
  3966   000CE2                     __ptext22:
  3967                           	callstack 0
  3968   000CE2                     _TI_ResetTics:
  3969                           	callstack 26
  3970                           
  3971                           ;incstack = 0
  3972                           ;TI_ResetTics@TimerHandle stored from wreg
  3973   000CE2  6E02               	movwf	TI_ResetTics@TimerHandle^0,c
  3974   000CE4                     
  3975                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  3976   000CE4  9EF2               	bcf	242,7,c	;volatile
  3977   000CE6  5002               	movf	TI_ResetTics@TimerHandle^0,w,c
  3978   000CE8  0D05               	mullw	5
  3979   000CEA  50F3               	movf	243,w,c
  3980   000CEC  0FA0               	addlw	low _Timers
  3981   000CEE  6ED9               	movwf	fsr2l,c
  3982   000CF0  6ADA               	clrf	fsr2h,c
  3983   000CF2  C0B4  FFDE         	movff	_Tics,postinc2	;volatile
  3984   000CF6  C0B5  FFDE         	movff	_Tics+1,postinc2	;volatile
  3985   000CFA  C0B6  FFDE         	movff	_Tics+2,postinc2	;volatile
  3986   000CFE  C0B7  FFDE         	movff	_Tics+3,postinc2	;volatile
  3987   000D02  8EF2               	bsf	242,7,c	;volatile
  3988   000D04  0012               	return		;funcret
  3989   000D06                     __end_of_TI_ResetTics:
  3990                           	callstack 0
  3991                           
  3992 ;; *************** function _TI_GetTics *****************
  3993 ;; Defined at:
  3994 ;;		line 61 in file "TAD_TIMER.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;  TimerHandle     1    wreg     unsigned char 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  3999 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  4    1[COMRAM] unsigned long 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1
  4009 ;;      Params:         4       0       0
  4010 ;;      Locals:         5       0       0
  4011 ;;      Temps:          4       0       0
  4012 ;;      Totals:        13       0       0
  4013 ;;Total ram usage:       13 bytes
  4014 ;; Hardware stack levels used: 1
  4015 ;; Hardware stack levels required when called: 3
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_motorTeclado
  4020 ;;		_Espera
  4021 ;;		_WaitForBusy
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text23
  4026   000B0A                     __ptext23:
  4027                           	callstack 0
  4028   000B0A                     _TI_GetTics:
  4029                           	callstack 26
  4030                           
  4031                           ;incstack = 0
  4032                           ;TI_GetTics@TimerHandle stored from wreg
  4033   000B0A  6E0E               	movwf	TI_GetTics@TimerHandle^0,c
  4034   000B0C                     
  4035                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  4036   000B0C  9EF2               	bcf	242,7,c	;volatile
  4037   000B0E  C0B4  F00A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  4038   000B12  C0B5  F00B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  4039   000B16  C0B6  F00C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  4040   000B1A  C0B7  F00D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  4041   000B1E  8EF2               	bsf	242,7,c	;volatile
  4042   000B20                     
  4043                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  4044   000B20  500E               	movf	TI_GetTics@TimerHandle^0,w,c
  4045   000B22  0D05               	mullw	5
  4046   000B24  50F3               	movf	243,w,c
  4047   000B26  0FA0               	addlw	low _Timers
  4048   000B28  6ED9               	movwf	fsr2l,c
  4049   000B2A  6ADA               	clrf	fsr2h,c
  4050   000B2C  CFDE F006          	movff	postinc2,??_TI_GetTics
  4051   000B30  CFDE F007          	movff	postinc2,??_TI_GetTics+1
  4052   000B34  CFDE F008          	movff	postinc2,??_TI_GetTics+2
  4053   000B38  CFDE F009          	movff	postinc2,??_TI_GetTics+3
  4054   000B3C  5006               	movf	??_TI_GetTics^0,w,c
  4055   000B3E  5C0A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  4056   000B40  6E02               	movwf	?_TI_GetTics^0,c
  4057   000B42  5007               	movf	(??_TI_GetTics+1)^0,w,c
  4058   000B44  580B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  4059   000B46  6E03               	movwf	(?_TI_GetTics+1)^0,c
  4060   000B48  5008               	movf	(??_TI_GetTics+2)^0,w,c
  4061   000B4A  580C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  4062   000B4C  6E04               	movwf	(?_TI_GetTics+2)^0,c
  4063   000B4E  5009               	movf	(??_TI_GetTics+3)^0,w,c
  4064   000B50  580D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  4065   000B52  6E05               	movwf	(?_TI_GetTics+3)^0,c
  4066   000B54  0012               	return		;funcret
  4067   000B56                     __end_of_TI_GetTics:
  4068                           	callstack 0
  4069                           
  4070 ;; *************** function _ReadFilas *****************
  4071 ;; Defined at:
  4072 ;;		line 10 in file "TAD_TECLADO.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;		None
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  1    wreg      unsigned char 
  4079 ;; Registers used:
  4080 ;;		wreg, status,2, status,0
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1
  4086 ;;      Params:         0       0       0
  4087 ;;      Locals:         0       0       0
  4088 ;;      Temps:          0       0       0
  4089 ;;      Totals:         0       0       0
  4090 ;;Total ram usage:        0 bytes
  4091 ;; Hardware stack levels used: 1
  4092 ;; Hardware stack levels required when called: 3
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_motorTeclado
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text24
  4101   000E1C                     __ptext24:
  4102                           	callstack 0
  4103   000E1C                     _ReadFilas:
  4104                           	callstack 26
  4105   000E1C                     
  4106                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  4107   000E1C  5083               	movf	131,w,c	;volatile
  4108   000E1E  0B0F               	andlw	15
  4109   000E20  0012               	return		;funcret
  4110   000E22                     __end_of_ReadFilas:
  4111                           	callstack 0
  4112                           
  4113 ;; *************** function _GetTecla *****************
  4114 ;; Defined at:
  4115 ;;		line 124 in file "TAD_TECLADO.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  4120 ;;  fila            1   16[COMRAM] unsigned char 
  4121 ;;  columna         1   15[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      unsigned char 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1
  4131 ;;      Params:         0       0       0
  4132 ;;      Locals:        14       0       0
  4133 ;;      Temps:          2       0       0
  4134 ;;      Totals:        16       0       0
  4135 ;;Total ram usage:       16 bytes
  4136 ;; Hardware stack levels used: 1
  4137 ;; Hardware stack levels required when called: 3
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_motorTeclado
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text25
  4146   000524                     __ptext25:
  4147                           	callstack 0
  4148   000524                     _GetTecla:
  4149                           	callstack 26
  4150   000524                     
  4151                           ;TAD_TECLADO.c: 126:     unsigned char columna = 0;
  4152   000524  6A10               	clrf	GetTecla@columna^0,c
  4153                           
  4154                           ;TAD_TECLADO.c: 128:     switch(Filas) {
  4155   000526  EFA7  F002         	goto	l3527
  4156   00052A                     l163:
  4157   00052A  6A11               	clrf	GetTecla@fila^0,c
  4158   00052C  EFC5  F002         	goto	l3539
  4159   000530                     l3515:
  4160   000530  0E01               	movlw	1
  4161   000532  6E11               	movwf	GetTecla@fila^0,c
  4162   000534  EFC5  F002         	goto	l3539
  4163   000538                     l3517:
  4164   000538  0E02               	movlw	2
  4165   00053A  6E11               	movwf	GetTecla@fila^0,c
  4166   00053C  EFC5  F002         	goto	l3539
  4167   000540                     l3519:
  4168   000540  0E03               	movlw	3
  4169   000542  6E11               	movwf	GetTecla@fila^0,c
  4170   000544  EFC5  F002         	goto	l3539
  4171   000548                     l3521:
  4172   000548  0EFF               	movlw	255
  4173   00054A  EFF3  F002         	goto	l169
  4174   00054E                     l3527:
  4175   00054E  505C               	movf	_Filas^0,w,c
  4176                           
  4177                           ; Switch size 1, requested type "simple"
  4178                           ; Number of cases is 4, Range of values is 1 to 8
  4179                           ; switch strategies available:
  4180                           ; Name         Instructions Cycles
  4181                           ; simple_byte           13     7 (average)
  4182                           ;	Chosen strategy is simple_byte
  4183   000550  0A01               	xorlw	1	; case 1
  4184   000552  B4D8               	btfsc	status,2,c
  4185   000554  EF95  F002         	goto	l163
  4186   000558  0A03               	xorlw	3	; case 2
  4187   00055A  B4D8               	btfsc	status,2,c
  4188   00055C  EF98  F002         	goto	l3515
  4189   000560  0A06               	xorlw	6	; case 4
  4190   000562  B4D8               	btfsc	status,2,c
  4191   000564  EF9C  F002         	goto	l3517
  4192   000568  0A0C               	xorlw	12	; case 8
  4193   00056A  B4D8               	btfsc	status,2,c
  4194   00056C  EFA0  F002         	goto	l3519
  4195   000570  EFA4  F002         	goto	l3521
  4196   000574                     l171:
  4197   000574  6A10               	clrf	GetTecla@columna^0,c
  4198   000576  EFDF  F002         	goto	l3541
  4199   00057A                     l3529:
  4200   00057A  0E01               	movlw	1
  4201   00057C  6E10               	movwf	GetTecla@columna^0,c
  4202   00057E  EFDF  F002         	goto	l3541
  4203   000582                     l3531:
  4204   000582  0E02               	movlw	2
  4205   000584  6E10               	movwf	GetTecla@columna^0,c
  4206   000586  EFDF  F002         	goto	l3541
  4207   00058A                     l3539:
  4208   00058A  505B               	movf	_Columnas^0,w,c
  4209   00058C  0B07               	andlw	7
  4210   00058E  6E02               	movwf	??_GetTecla^0,c
  4211   000590  6A03               	clrf	(??_GetTecla+1)^0,c
  4212                           
  4213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4214                           ; Switch size 1, requested type "simple"
  4215                           ; Number of cases is 1, Range of values is 0 to 0
  4216                           ; switch strategies available:
  4217                           ; Name         Instructions Cycles
  4218                           ; simple_byte            4     3 (average)
  4219                           ;	Chosen strategy is simple_byte
  4220   000592  5003               	movf	(??_GetTecla+1)^0,w,c
  4221   000594  0A00               	xorlw	0	; case 0
  4222   000596  B4D8               	btfsc	status,2,c
  4223   000598  EFD0  F002         	goto	l3945
  4224   00059C  EFA4  F002         	goto	l3521
  4225   0005A0                     l3945:
  4226                           
  4227                           ; Switch size 1, requested type "simple"
  4228                           ; Number of cases is 3, Range of values is 1 to 4
  4229                           ; switch strategies available:
  4230                           ; Name         Instructions Cycles
  4231                           ; simple_byte           10     6 (average)
  4232                           ;	Chosen strategy is simple_byte
  4233   0005A0  5002               	movf	??_GetTecla^0,w,c
  4234   0005A2  0A01               	xorlw	1	; case 1
  4235   0005A4  B4D8               	btfsc	status,2,c
  4236   0005A6  EFBA  F002         	goto	l171
  4237   0005AA  0A03               	xorlw	3	; case 2
  4238   0005AC  B4D8               	btfsc	status,2,c
  4239   0005AE  EFBD  F002         	goto	l3529
  4240   0005B2  0A06               	xorlw	6	; case 4
  4241   0005B4  B4D8               	btfsc	status,2,c
  4242   0005B6  EFC1  F002         	goto	l3531
  4243   0005BA  EFA4  F002         	goto	l3521
  4244   0005BE                     l3541:
  4245                           
  4246                           ;TAD_TECLADO.c: 144:     const unsigned char keymap[4][3] = {
  4247   0005BE  0EED               	movlw	low GetTecla@F3225
  4248   0005C0  6EF6               	movwf	tblptrl,c
  4249   0005C2                     	if	1	;There is more than 1 active tblptr byte
  4250   0005C2  0E1E               	movlw	high GetTecla@F3225
  4251   0005C4  6EF7               	movwf	tblptrh,c
  4252   0005C6                     	endif
  4253   0005C6                     	if	0	;There are less than 3 active tblptr bytes
  4254   0005C6                     	endif
  4255   0005C6  EE20  F004         	lfsr	2,GetTecla@keymap
  4256   0005CA  0E0B               	movlw	11
  4257   0005CC                     u3290:
  4258   0005CC  0009               	tblrd		*+
  4259   0005CE  CFF5 FFDE          	movff	tablat,postinc2
  4260   0005D2  06E8               	decf	wreg,f,c
  4261   0005D4  E2FB               	bc	u3290
  4262   0005D6                     
  4263                           ;TAD_TECLADO.c: 151:     return keymap[fila][columna];
  4264   0005D6  5011               	movf	GetTecla@fila^0,w,c
  4265   0005D8  0D03               	mullw	3
  4266   0005DA  50F3               	movf	243,w,c
  4267   0005DC  0F04               	addlw	low GetTecla@keymap
  4268   0005DE  2410               	addwf	GetTecla@columna^0,w,c
  4269   0005E0  6ED9               	movwf	fsr2l,c
  4270   0005E2  6ADA               	clrf	fsr2h,c
  4271   0005E4  50DF               	movf	indf2,w,c
  4272   0005E6                     l169:
  4273   0005E6  0012               	return		;funcret
  4274   0005E8                     __end_of_GetTecla:
  4275                           	callstack 0
  4276                           
  4277 ;; *************** function _initRFID *****************
  4278 ;; Defined at:
  4279 ;;		line 294 in file "TAD_RFID.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;		None
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;		None
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      void 
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1
  4293 ;;      Params:         0       0       0
  4294 ;;      Locals:         0       0       0
  4295 ;;      Temps:          0       0       0
  4296 ;;      Totals:         0       0       0
  4297 ;;Total ram usage:        0 bytes
  4298 ;; Hardware stack levels used: 1
  4299 ;; Hardware stack levels required when called: 8
  4300 ;; This function calls:
  4301 ;;		_InitPortDirections
  4302 ;;		_MFRC522_Init
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text26
  4309   000E02                     __ptext26:
  4310                           	callstack 0
  4311   000E02                     _initRFID:
  4312                           	callstack 22
  4313   000E02                     
  4314                           ;TAD_RFID.c: 295:     InitPortDirections();
  4315   000E02  ECFB  F006         	call	_InitPortDirections	;wreg free
  4316   000E06                     
  4317                           ;TAD_RFID.c: 296:     MFRC522_Init();
  4318   000E06  EC5E  F005         	call	_MFRC522_Init	;wreg free
  4319   000E0A  0012               	return		;funcret
  4320   000E0C                     __end_of_initRFID:
  4321                           	callstack 0
  4322                           
  4323 ;; *************** function _MFRC522_Init *****************
  4324 ;; Defined at:
  4325 ;;		line 115 in file "TAD_RFID.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1
  4339 ;;      Params:         0       0       0
  4340 ;;      Locals:         0       0       0
  4341 ;;      Temps:          0       0       0
  4342 ;;      Totals:         0       0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used: 1
  4345 ;; Hardware stack levels required when called: 7
  4346 ;; This function calls:
  4347 ;;		_MFRC522_AntennaOff
  4348 ;;		_MFRC522_AntennaOn
  4349 ;;		_MFRC522_Reset
  4350 ;;		_MFRC522_Wr
  4351 ;; This function is called by:
  4352 ;;		_initRFID
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text27
  4357   000ABC                     __ptext27:
  4358                           	callstack 0
  4359   000ABC                     _MFRC522_Init:
  4360                           	callstack 22
  4361   000ABC                     
  4362                           ;TAD_RFID.c: 116:     LATCbits.LATC3 = 1;
  4363   000ABC  868B               	bsf	139,3,c	;volatile
  4364                           
  4365                           ;TAD_RFID.c: 117:     LATCbits.LATC4 = 1;
  4366   000ABE  888B               	bsf	139,4,c	;volatile
  4367   000AC0                     
  4368                           ;TAD_RFID.c: 119:     MFRC522_Reset();
  4369   000AC0  EC37  F006         	call	_MFRC522_Reset	;wreg free
  4370                           
  4371                           ;TAD_RFID.c: 120:     MFRC522_Wr(0x2A, 0x8D);
  4372   000AC4  0E8D               	movlw	141
  4373   000AC6  6E07               	movwf	MFRC522_Wr@value^0,c
  4374   000AC8  0E2A               	movlw	42
  4375   000ACA  EC01  F004         	call	_MFRC522_Wr
  4376                           
  4377                           ;TAD_RFID.c: 121:     MFRC522_Wr(0x2B, 0x3E);
  4378   000ACE  0E3E               	movlw	62
  4379   000AD0  6E07               	movwf	MFRC522_Wr@value^0,c
  4380   000AD2  0E2B               	movlw	43
  4381   000AD4  EC01  F004         	call	_MFRC522_Wr
  4382                           
  4383                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2D, 30);
  4384   000AD8  0E1E               	movlw	30
  4385   000ADA  6E07               	movwf	MFRC522_Wr@value^0,c
  4386   000ADC  0E2D               	movlw	45
  4387   000ADE  EC01  F004         	call	_MFRC522_Wr
  4388                           
  4389                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2C, 0);
  4390   000AE2  0E00               	movlw	0
  4391   000AE4  6E07               	movwf	MFRC522_Wr@value^0,c
  4392   000AE6  0E2C               	movlw	44
  4393   000AE8  EC01  F004         	call	_MFRC522_Wr
  4394                           
  4395                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x15, 0x40);
  4396   000AEC  0E40               	movlw	64
  4397   000AEE  6E07               	movwf	MFRC522_Wr@value^0,c
  4398   000AF0  0E15               	movlw	21
  4399   000AF2  EC01  F004         	call	_MFRC522_Wr
  4400                           
  4401                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x11, 0x3D);
  4402   000AF6  0E3D               	movlw	61
  4403   000AF8  6E07               	movwf	MFRC522_Wr@value^0,c
  4404   000AFA  0E11               	movlw	17
  4405   000AFC  EC01  F004         	call	_MFRC522_Wr
  4406                           
  4407                           ;TAD_RFID.c: 127:     MFRC522_AntennaOff();
  4408   000B00  ECF5  F006         	call	_MFRC522_AntennaOff	;wreg free
  4409                           
  4410                           ;TAD_RFID.c: 128:     MFRC522_AntennaOn();
  4411   000B04  ECEF  F006         	call	_MFRC522_AntennaOn	;wreg free
  4412   000B08  0012               	return		;funcret
  4413   000B0A                     __end_of_MFRC522_Init:
  4414                           	callstack 0
  4415                           
  4416 ;; *************** function _MFRC522_Reset *****************
  4417 ;; Defined at:
  4418 ;;		line 96 in file "TAD_RFID.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1
  4432 ;;      Params:         0       0       0
  4433 ;;      Locals:         0       0       0
  4434 ;;      Temps:          0       0       0
  4435 ;;      Totals:         0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used: 1
  4438 ;; Hardware stack levels required when called: 5
  4439 ;; This function calls:
  4440 ;;		_MFRC522_Wr
  4441 ;;		_delay_us
  4442 ;; This function is called by:
  4443 ;;		_MFRC522_Init
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text28
  4448   000C6E                     __ptext28:
  4449                           	callstack 0
  4450   000C6E                     _MFRC522_Reset:
  4451                           	callstack 23
  4452   000C6E                     
  4453                           ;TAD_RFID.c: 97:     LATCbits.LATC4 = 1;
  4454   000C6E  888B               	bsf	139,4,c	;volatile
  4455   000C70                     
  4456                           ;TAD_RFID.c: 98:     delay_us (1);
  4457   000C70  0E01               	movlw	1
  4458   000C72  ECE8  F005         	call	_delay_us
  4459   000C76                     
  4460                           ;TAD_RFID.c: 99:     LATCbits.LATC4 = 0;
  4461   000C76  988B               	bcf	139,4,c	;volatile
  4462                           
  4463                           ;TAD_RFID.c: 100:     delay_us (1);
  4464   000C78  0E01               	movlw	1
  4465   000C7A  ECE8  F005         	call	_delay_us
  4466   000C7E                     
  4467                           ;TAD_RFID.c: 101:     LATCbits.LATC4 = 1;
  4468   000C7E  888B               	bsf	139,4,c	;volatile
  4469                           
  4470                           ;TAD_RFID.c: 102:     delay_us (1);
  4471   000C80  0E01               	movlw	1
  4472   000C82  ECE8  F005         	call	_delay_us
  4473                           
  4474                           ;TAD_RFID.c: 103:     MFRC522_Wr(0x01, 0x0F);
  4475   000C86  0E0F               	movlw	15
  4476   000C88  6E07               	movwf	MFRC522_Wr@value^0,c
  4477   000C8A  0E01               	movlw	1
  4478   000C8C  EC01  F004         	call	_MFRC522_Wr
  4479                           
  4480                           ;TAD_RFID.c: 104:     delay_us (1);
  4481   000C90  0E01               	movlw	1
  4482   000C92  ECE8  F005         	call	_delay_us
  4483   000C96  0012               	return		;funcret
  4484   000C98                     __end_of_MFRC522_Reset:
  4485                           	callstack 0
  4486                           
  4487 ;; *************** function _MFRC522_AntennaOn *****************
  4488 ;; Defined at:
  4489 ;;		line 107 in file "TAD_RFID.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1
  4503 ;;      Params:         0       0       0
  4504 ;;      Locals:         0       0       0
  4505 ;;      Temps:          0       0       0
  4506 ;;      Totals:         0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used: 1
  4509 ;; Hardware stack levels required when called: 6
  4510 ;; This function calls:
  4511 ;;		_MFRC522_Set_Bit
  4512 ;; This function is called by:
  4513 ;;		_MFRC522_Init
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text29
  4518   000DDE                     __ptext29:
  4519                           	callstack 0
  4520   000DDE                     _MFRC522_AntennaOn:
  4521                           	callstack 22
  4522   000DDE                     
  4523                           ;TAD_RFID.c: 108:     MFRC522_Set_Bit(0x14, 0x03);
  4524   000DDE  0E03               	movlw	3
  4525   000DE0  6E0C               	movwf	MFRC522_Set_Bit@mask^0,c
  4526   000DE2  0E14               	movlw	20
  4527   000DE4  ECDB  F006         	call	_MFRC522_Set_Bit
  4528   000DE8  0012               	return		;funcret
  4529   000DEA                     __end_of_MFRC522_AntennaOn:
  4530                           	callstack 0
  4531                           
  4532 ;; *************** function _MFRC522_Set_Bit *****************
  4533 ;; Defined at:
  4534 ;;		line 92 in file "TAD_RFID.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  addr            1    wreg     unsigned char 
  4537 ;;  mask            1   11[COMRAM] unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  addr            1   12[COMRAM] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1
  4549 ;;      Params:         1       0       0
  4550 ;;      Locals:         1       0       0
  4551 ;;      Temps:          0       0       0
  4552 ;;      Totals:         2       0       0
  4553 ;;Total ram usage:        2 bytes
  4554 ;; Hardware stack levels used: 1
  4555 ;; Hardware stack levels required when called: 5
  4556 ;; This function calls:
  4557 ;;		_MFRC522_Rd
  4558 ;;		_MFRC522_Wr
  4559 ;; This function is called by:
  4560 ;;		_MFRC522_AntennaOn
  4561 ;;		_MFRC522_ToCard
  4562 ;;		_MFRC522_CRC
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text30
  4567   000DB6                     __ptext30:
  4568                           	callstack 0
  4569   000DB6                     _MFRC522_Set_Bit:
  4570                           	callstack 22
  4571                           
  4572                           ;incstack = 0
  4573                           ;MFRC522_Set_Bit@addr stored from wreg
  4574   000DB6  6E0D               	movwf	MFRC522_Set_Bit@addr^0,c
  4575   000DB8                     
  4576                           ;TAD_RFID.c: 93:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  4577   000DB8  500D               	movf	MFRC522_Set_Bit@addr^0,w,c
  4578   000DBA  EC55  F004         	call	_MFRC522_Rd
  4579   000DBE  100C               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  4580   000DC0  6E07               	movwf	MFRC522_Wr@value^0,c
  4581   000DC2  500D               	movf	MFRC522_Set_Bit@addr^0,w,c
  4582   000DC4  EC01  F004         	call	_MFRC522_Wr
  4583   000DC8  0012               	return		;funcret
  4584   000DCA                     __end_of_MFRC522_Set_Bit:
  4585                           	callstack 0
  4586                           
  4587 ;; *************** function _MFRC522_AntennaOff *****************
  4588 ;; Defined at:
  4589 ;;		line 111 in file "TAD_RFID.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1
  4603 ;;      Params:         0       0       0
  4604 ;;      Locals:         0       0       0
  4605 ;;      Temps:          0       0       0
  4606 ;;      Totals:         0       0       0
  4607 ;;Total ram usage:        0 bytes
  4608 ;; Hardware stack levels used: 1
  4609 ;; Hardware stack levels required when called: 6
  4610 ;; This function calls:
  4611 ;;		_MFRC522_Clear_Bit
  4612 ;; This function is called by:
  4613 ;;		_MFRC522_Init
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text31
  4618   000DEA                     __ptext31:
  4619                           	callstack 0
  4620   000DEA                     _MFRC522_AntennaOff:
  4621                           	callstack 22
  4622   000DEA                     
  4623                           ;TAD_RFID.c: 112:     MFRC522_Clear_Bit(0x14, 0x03);
  4624   000DEA  0E03               	movlw	3
  4625   000DEC  6E0C               	movwf	MFRC522_Clear_Bit@mask^0,c
  4626   000DEE  0E14               	movlw	20
  4627   000DF0  ECA2  F006         	call	_MFRC522_Clear_Bit
  4628   000DF4  0012               	return		;funcret
  4629   000DF6                     __end_of_MFRC522_AntennaOff:
  4630                           	callstack 0
  4631                           
  4632 ;; *************** function _MFRC522_Clear_Bit *****************
  4633 ;; Defined at:
  4634 ;;		line 88 in file "TAD_RFID.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  addr            1    wreg     unsigned char 
  4637 ;;  mask            1   11[COMRAM] unsigned char 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  addr            1   13[COMRAM] unsigned char 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      void 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1
  4649 ;;      Params:         1       0       0
  4650 ;;      Locals:         1       0       0
  4651 ;;      Temps:          1       0       0
  4652 ;;      Totals:         3       0       0
  4653 ;;Total ram usage:        3 bytes
  4654 ;; Hardware stack levels used: 1
  4655 ;; Hardware stack levels required when called: 5
  4656 ;; This function calls:
  4657 ;;		_MFRC522_Rd
  4658 ;;		_MFRC522_Wr
  4659 ;; This function is called by:
  4660 ;;		_MFRC522_AntennaOff
  4661 ;;		_MFRC522_ToCard
  4662 ;;		_MFRC522_CRC
  4663 ;;		_MFRC522_Halt
  4664 ;;		_MFRC522_AntiColl
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text32
  4669   000D44                     __ptext32:
  4670                           	callstack 0
  4671   000D44                     _MFRC522_Clear_Bit:
  4672                           	callstack 22
  4673                           
  4674                           ;incstack = 0
  4675                           ;MFRC522_Clear_Bit@addr stored from wreg
  4676   000D44  6E0E               	movwf	MFRC522_Clear_Bit@addr^0,c
  4677   000D46                     
  4678                           ;TAD_RFID.c: 89:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  4679   000D46  500C               	movf	MFRC522_Clear_Bit@mask^0,w,c
  4680   000D48  0AFF               	xorlw	255
  4681   000D4A  6E0D               	movwf	??_MFRC522_Clear_Bit^0,c
  4682   000D4C  500E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4683   000D4E  EC55  F004         	call	_MFRC522_Rd
  4684   000D52  140D               	andwf	??_MFRC522_Clear_Bit^0,w,c
  4685   000D54  6E07               	movwf	MFRC522_Wr@value^0,c
  4686   000D56  500E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4687   000D58  EC01  F004         	call	_MFRC522_Wr
  4688   000D5C  0012               	return		;funcret
  4689   000D5E                     __end_of_MFRC522_Clear_Bit:
  4690                           	callstack 0
  4691                           
  4692 ;; *************** function _MFRC522_Wr *****************
  4693 ;; Defined at:
  4694 ;;		line 60 in file "TAD_RFID.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  Address         1    wreg     unsigned char 
  4697 ;;  value           1    6[COMRAM] unsigned char 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  Address         1    8[COMRAM] unsigned char 
  4700 ;;  i               1   10[COMRAM] unsigned char 
  4701 ;;  ucAddr          1    9[COMRAM] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  1    wreg      void 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1
  4711 ;;      Params:         1       0       0
  4712 ;;      Locals:         3       0       0
  4713 ;;      Temps:          1       0       0
  4714 ;;      Totals:         5       0       0
  4715 ;;Total ram usage:        5 bytes
  4716 ;; Hardware stack levels used: 1
  4717 ;; Hardware stack levels required when called: 4
  4718 ;; This function calls:
  4719 ;;		_delay_us
  4720 ;; This function is called by:
  4721 ;;		_MFRC522_Clear_Bit
  4722 ;;		_MFRC522_Set_Bit
  4723 ;;		_MFRC522_Reset
  4724 ;;		_MFRC522_Init
  4725 ;;		_MFRC522_ToCard
  4726 ;;		_MFRC522_Request
  4727 ;;		_MFRC522_CRC
  4728 ;;		_MFRC522_AntiColl
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text33
  4733   000802                     __ptext33:
  4734                           	callstack 0
  4735   000802                     _MFRC522_Wr:
  4736                           	callstack 24
  4737                           
  4738                           ;incstack = 0
  4739                           ;MFRC522_Wr@Address stored from wreg
  4740   000802  6E09               	movwf	MFRC522_Wr@Address^0,c
  4741   000804                     
  4742                           ;TAD_RFID.c: 61:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  4743   000804  5009               	movf	MFRC522_Wr@Address^0,w,c
  4744   000806  2409               	addwf	MFRC522_Wr@Address^0,w,c
  4745   000808  0B7E               	andlw	126
  4746   00080A  6E0A               	movwf	MFRC522_Wr@ucAddr^0,c
  4747   00080C                     
  4748                           ;TAD_RFID.c: 62:     LATCbits.LATC2 = 0;
  4749   00080C  948B               	bcf	139,2,c	;volatile
  4750   00080E                     
  4751                           ;TAD_RFID.c: 63:     LATCbits.LATC3 = 0;
  4752   00080E  968B               	bcf	139,3,c	;volatile
  4753   000810                     
  4754                           ;TAD_RFID.c: 64:     for (i = 8; i > 0; i--) {
  4755   000810  0E08               	movlw	8
  4756   000812  6E0B               	movwf	MFRC522_Wr@i^0,c
  4757   000814                     l2417:
  4758                           
  4759                           ;TAD_RFID.c: 65:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4760   000814  BE0A               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  4761   000816  EF0F  F004         	goto	u1691
  4762   00081A  EF13  F004         	goto	u1690
  4763   00081E                     u1691:
  4764   00081E  6A08               	clrf	??_MFRC522_Wr^0,c
  4765   000820  2A08               	incf	??_MFRC522_Wr^0,f,c
  4766   000822  EF14  F004         	goto	u1708
  4767   000826                     u1690:
  4768   000826  6A08               	clrf	??_MFRC522_Wr^0,c
  4769   000828                     u1708:
  4770   000828  4608               	rlncf	??_MFRC522_Wr^0,f,c
  4771   00082A  508B               	movf	139,w,c	;volatile
  4772   00082C  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4773   00082E  0BFD               	andlw	-3
  4774   000830  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4775   000832  6E8B               	movwf	139,c	;volatile
  4776   000834                     
  4777                           ;TAD_RFID.c: 66:         LATCbits.LATC2 = 1;
  4778   000834  848B               	bsf	139,2,c	;volatile
  4779                           
  4780                           ;TAD_RFID.c: 67:         ucAddr <<= 1;
  4781   000836  90D8               	bcf	status,0,c
  4782   000838  360A               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  4783   00083A                     
  4784                           ;TAD_RFID.c: 68:         delay_us(5);
  4785   00083A  0E05               	movlw	5
  4786   00083C  ECE8  F005         	call	_delay_us
  4787   000840                     
  4788                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 0;
  4789   000840  948B               	bcf	139,2,c	;volatile
  4790   000842                     
  4791                           ;TAD_RFID.c: 70:         delay_us(5);
  4792   000842  0E05               	movlw	5
  4793   000844  ECE8  F005         	call	_delay_us
  4794   000848                     
  4795                           ;TAD_RFID.c: 71:     }
  4796   000848  060B               	decf	MFRC522_Wr@i^0,f,c
  4797   00084A  500B               	movf	MFRC522_Wr@i^0,w,c
  4798   00084C  A4D8               	btfss	status,2,c
  4799   00084E  EF2B  F004         	goto	u1711
  4800   000852  EF2D  F004         	goto	u1710
  4801   000856                     u1711:
  4802   000856  EF0A  F004         	goto	l2417
  4803   00085A                     u1710:
  4804   00085A                     
  4805                           ;TAD_RFID.c: 73:     for (i = 8; i > 0; i--) {
  4806   00085A  0E08               	movlw	8
  4807   00085C  6E0B               	movwf	MFRC522_Wr@i^0,c
  4808   00085E                     l2435:
  4809                           
  4810                           ;TAD_RFID.c: 74:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  4811   00085E  BE07               	btfsc	MFRC522_Wr@value^0,7,c
  4812   000860  EF34  F004         	goto	u1721
  4813   000864  EF38  F004         	goto	u1720
  4814   000868                     u1721:
  4815   000868  6A08               	clrf	??_MFRC522_Wr^0,c
  4816   00086A  2A08               	incf	??_MFRC522_Wr^0,f,c
  4817   00086C  EF39  F004         	goto	u1738
  4818   000870                     u1720:
  4819   000870  6A08               	clrf	??_MFRC522_Wr^0,c
  4820   000872                     u1738:
  4821   000872  4608               	rlncf	??_MFRC522_Wr^0,f,c
  4822   000874  508B               	movf	139,w,c	;volatile
  4823   000876  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4824   000878  0BFD               	andlw	-3
  4825   00087A  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4826   00087C  6E8B               	movwf	139,c	;volatile
  4827   00087E                     
  4828                           ;TAD_RFID.c: 75:         LATCbits.LATC2 = 1;
  4829   00087E  848B               	bsf	139,2,c	;volatile
  4830                           
  4831                           ;TAD_RFID.c: 76:         value <<= 1;
  4832   000880  90D8               	bcf	status,0,c
  4833   000882  3607               	rlcf	MFRC522_Wr@value^0,f,c
  4834   000884                     
  4835                           ;TAD_RFID.c: 77:         delay_us(5);
  4836   000884  0E05               	movlw	5
  4837   000886  ECE8  F005         	call	_delay_us
  4838   00088A                     
  4839                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 0;
  4840   00088A  948B               	bcf	139,2,c	;volatile
  4841   00088C                     
  4842                           ;TAD_RFID.c: 79:         delay_us(5);
  4843   00088C  0E05               	movlw	5
  4844   00088E  ECE8  F005         	call	_delay_us
  4845   000892                     
  4846                           ;TAD_RFID.c: 80:     }
  4847   000892  060B               	decf	MFRC522_Wr@i^0,f,c
  4848   000894  500B               	movf	MFRC522_Wr@i^0,w,c
  4849   000896  A4D8               	btfss	status,2,c
  4850   000898  EF50  F004         	goto	u1741
  4851   00089C  EF52  F004         	goto	u1740
  4852   0008A0                     u1741:
  4853   0008A0  EF2F  F004         	goto	l2435
  4854   0008A4                     u1740:
  4855   0008A4                     
  4856                           ;TAD_RFID.c: 82:     LATCbits.LATC3 = 1;
  4857   0008A4  868B               	bsf	139,3,c	;volatile
  4858                           
  4859                           ;TAD_RFID.c: 83:     LATCbits.LATC2 = 1;
  4860   0008A6  848B               	bsf	139,2,c	;volatile
  4861   0008A8  0012               	return		;funcret
  4862   0008AA                     __end_of_MFRC522_Wr:
  4863                           	callstack 0
  4864                           
  4865 ;; *************** function _delay_us *****************
  4866 ;; Defined at:
  4867 ;;		line 23 in file "TAD_RFID.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  howMany         1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  howMany         1    4[COMRAM] unsigned char 
  4872 ;;  x               1    5[COMRAM] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, prodl, prodh
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1
  4882 ;;      Params:         0       0       0
  4883 ;;      Locals:         2       0       0
  4884 ;;      Temps:          3       0       0
  4885 ;;      Totals:         5       0       0
  4886 ;;Total ram usage:        5 bytes
  4887 ;; Hardware stack levels used: 1
  4888 ;; Hardware stack levels required when called: 3
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		_MFRC522_Wr
  4893 ;;		_MFRC522_Reset
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text34
  4898   000BD0                     __ptext34:
  4899                           	callstack 0
  4900   000BD0                     _delay_us:
  4901                           	callstack 24
  4902                           
  4903                           ;incstack = 0
  4904                           ;delay_us@howMany stored from wreg
  4905   000BD0  6E05               	movwf	delay_us@howMany^0,c
  4906   000BD2                     
  4907                           ;TAD_RFID.c: 25:     char x;;TAD_RFID.c: 26:     for (x = 0; x < howMany * 3; x++) __nop
      +                          ();
  4908   000BD2  6A06               	clrf	delay_us@x^0,c
  4909   000BD4  EFEE  F005         	goto	l1261
  4910   000BD8                     l197:
  4911   000BD8  0000               	nop	
  4912   000BDA  2A06               	incf	delay_us@x^0,f,c
  4913   000BDC                     l1261:
  4914   000BDC  5005               	movf	delay_us@howMany^0,w,c
  4915   000BDE  0D03               	mullw	3
  4916   000BE0  5006               	movf	delay_us@x^0,w,c
  4917   000BE2  6E02               	movwf	??_delay_us^0,c
  4918   000BE4  6A03               	clrf	(??_delay_us+1)^0,c
  4919   000BE6  50F3               	movf	243,w,c
  4920   000BE8  5C02               	subwf	??_delay_us^0,w,c
  4921   000BEA  5003               	movf	(??_delay_us+1)^0,w,c
  4922   000BEC  0A80               	xorlw	128
  4923   000BEE  6E04               	movwf	(??_delay_us+2)^0,c
  4924   000BF0  50F4               	movf	244,w,c
  4925   000BF2  0A80               	xorlw	128
  4926   000BF4  5804               	subwfb	(??_delay_us+2)^0,w,c
  4927   000BF6  A0D8               	btfss	status,0,c
  4928   000BF8  EF00  F006         	goto	u11
  4929   000BFC  EF02  F006         	goto	u10
  4930   000C00                     u11:
  4931   000C00  EFEC  F005         	goto	l197
  4932   000C04                     u10:
  4933   000C04  0012               	return		;funcret
  4934   000C06                     __end_of_delay_us:
  4935                           	callstack 0
  4936                           
  4937 ;; *************** function _MFRC522_Rd *****************
  4938 ;; Defined at:
  4939 ;;		line 29 in file "TAD_RFID.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  Address         1    wreg     unsigned char 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  Address         1    2[COMRAM] unsigned char 
  4944 ;;  i               1    5[COMRAM] unsigned char 
  4945 ;;  ucResult        1    4[COMRAM] unsigned char 
  4946 ;;  ucAddr          1    3[COMRAM] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      unsigned char 
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1
  4956 ;;      Params:         0       0       0
  4957 ;;      Locals:         4       0       0
  4958 ;;      Temps:          1       0       0
  4959 ;;      Totals:         5       0       0
  4960 ;;Total ram usage:        5 bytes
  4961 ;; Hardware stack levels used: 1
  4962 ;; Hardware stack levels required when called: 3
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_MFRC522_Clear_Bit
  4967 ;;		_MFRC522_Set_Bit
  4968 ;;		_MFRC522_ToCard
  4969 ;;		_MFRC522_CRC
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text35
  4974   0008AA                     __ptext35:
  4975                           	callstack 0
  4976   0008AA                     _MFRC522_Rd:
  4977                           	callstack 23
  4978                           
  4979                           ;incstack = 0
  4980                           ;MFRC522_Rd@Address stored from wreg
  4981   0008AA  6E03               	movwf	MFRC522_Rd@Address^0,c
  4982   0008AC                     
  4983                           ;TAD_RFID.c: 30:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  4984   0008AC  5003               	movf	MFRC522_Rd@Address^0,w,c
  4985   0008AE  2403               	addwf	MFRC522_Rd@Address^0,w,c
  4986   0008B0  0B7E               	andlw	126
  4987   0008B2  0980               	iorlw	128
  4988   0008B4  6E04               	movwf	MFRC522_Rd@ucAddr^0,c
  4989   0008B6                     
  4990                           ;TAD_RFID.c: 31:     unsigned char ucResult = 0;
  4991   0008B6  6A05               	clrf	MFRC522_Rd@ucResult^0,c
  4992   0008B8                     
  4993                           ;TAD_RFID.c: 33:     LATCbits.LATC2 = 0;
  4994   0008B8  948B               	bcf	139,2,c	;volatile
  4995   0008BA                     
  4996                           ;TAD_RFID.c: 34:     LATCbits.LATC3 = 0;
  4997   0008BA  968B               	bcf	139,3,c	;volatile
  4998   0008BC                     
  4999                           ;TAD_RFID.c: 36:     for (i = 8; i > 0; i--) {
  5000   0008BC  0E08               	movlw	8
  5001   0008BE  6E06               	movwf	MFRC522_Rd@i^0,c
  5002   0008C0                     l1375:
  5003                           
  5004                           ;TAD_RFID.c: 37:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5005   0008C0  BE04               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  5006   0008C2  EF65  F004         	goto	u191
  5007   0008C6  EF69  F004         	goto	u190
  5008   0008CA                     u191:
  5009   0008CA  6A02               	clrf	??_MFRC522_Rd^0,c
  5010   0008CC  2A02               	incf	??_MFRC522_Rd^0,f,c
  5011   0008CE  EF6A  F004         	goto	u208
  5012   0008D2                     u190:
  5013   0008D2  6A02               	clrf	??_MFRC522_Rd^0,c
  5014   0008D4                     u208:
  5015   0008D4  4602               	rlncf	??_MFRC522_Rd^0,f,c
  5016   0008D6  508B               	movf	139,w,c	;volatile
  5017   0008D8  1802               	xorwf	??_MFRC522_Rd^0,w,c
  5018   0008DA  0BFD               	andlw	-3
  5019   0008DC  1802               	xorwf	??_MFRC522_Rd^0,w,c
  5020   0008DE  6E8B               	movwf	139,c	;volatile
  5021   0008E0                     
  5022                           ;TAD_RFID.c: 38:         LATCbits.LATC2 = 1;
  5023   0008E0  848B               	bsf	139,2,c	;volatile
  5024                           
  5025                           ;TAD_RFID.c: 40:         ucAddr <<= 1;
  5026   0008E2  90D8               	bcf	status,0,c
  5027   0008E4  3604               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  5028   0008E6                     
  5029                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 0;
  5030   0008E6  948B               	bcf	139,2,c	;volatile
  5031   0008E8                     
  5032                           ;TAD_RFID.c: 43:     }
  5033   0008E8  0606               	decf	MFRC522_Rd@i^0,f,c
  5034   0008EA  5006               	movf	MFRC522_Rd@i^0,w,c
  5035   0008EC  A4D8               	btfss	status,2,c
  5036   0008EE  EF7B  F004         	goto	u211
  5037   0008F2  EF7D  F004         	goto	u210
  5038   0008F6                     u211:
  5039   0008F6  EF60  F004         	goto	l1375
  5040   0008FA                     u210:
  5041   0008FA                     
  5042                           ;TAD_RFID.c: 45:     for (i = 8; i > 0; i--) {
  5043   0008FA  0E08               	movlw	8
  5044   0008FC  6E06               	movwf	MFRC522_Rd@i^0,c
  5045   0008FE                     l204:
  5046                           
  5047                           ;TAD_RFID.c: 46:         LATCbits.LATC2 = 1;
  5048   0008FE  848B               	bsf	139,2,c	;volatile
  5049   000900                     
  5050                           ;TAD_RFID.c: 48:         ucResult <<= 1;
  5051   000900  90D8               	bcf	status,0,c
  5052   000902  3605               	rlcf	MFRC522_Rd@ucResult^0,f,c
  5053                           
  5054                           ;TAD_RFID.c: 49:         ucResult|= PORTCbits.RC0;
  5055   000904  B082               	btfsc	130,0,c	;volatile
  5056   000906  EF87  F004         	goto	u221
  5057   00090A  EF8A  F004         	goto	u220
  5058   00090E                     u221:
  5059   00090E  0E01               	movlw	1
  5060   000910  EF8B  F004         	goto	u226
  5061   000914                     u220:
  5062   000914  0E00               	movlw	0
  5063   000916                     u226:
  5064   000916  1205               	iorwf	MFRC522_Rd@ucResult^0,f,c
  5065   000918                     
  5066                           ;TAD_RFID.c: 50:         LATCbits.LATC2 = 0;
  5067   000918  948B               	bcf	139,2,c	;volatile
  5068   00091A                     
  5069                           ;TAD_RFID.c: 52:     }
  5070   00091A  0606               	decf	MFRC522_Rd@i^0,f,c
  5071   00091C  5006               	movf	MFRC522_Rd@i^0,w,c
  5072   00091E  A4D8               	btfss	status,2,c
  5073   000920  EF94  F004         	goto	u231
  5074   000924  EF96  F004         	goto	u230
  5075   000928                     u231:
  5076   000928  EF7F  F004         	goto	l204
  5077   00092C                     u230:
  5078   00092C                     
  5079                           ;TAD_RFID.c: 54:     LATCbits.LATC3 = 1;
  5080   00092C  868B               	bsf	139,3,c	;volatile
  5081                           
  5082                           ;TAD_RFID.c: 55:     LATCbits.LATC2 = 1;
  5083   00092E  848B               	bsf	139,2,c	;volatile
  5084   000930                     
  5085                           ;TAD_RFID.c: 56:     return ucResult;
  5086   000930  5005               	movf	MFRC522_Rd@ucResult^0,w,c
  5087   000932  0012               	return		;funcret
  5088   000934                     __end_of_MFRC522_Rd:
  5089                           	callstack 0
  5090                           
  5091 ;; *************** function _InitPortDirections *****************
  5092 ;; Defined at:
  5093 ;;		line 15 in file "TAD_RFID.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		None
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1
  5107 ;;      Params:         0       0       0
  5108 ;;      Locals:         0       0       0
  5109 ;;      Temps:          0       0       0
  5110 ;;      Totals:         0       0       0
  5111 ;;Total ram usage:        0 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 3
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_initRFID
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text36
  5122   000DF6                     __ptext36:
  5123                           	callstack 0
  5124   000DF6                     _InitPortDirections:
  5125                           	callstack 26
  5126   000DF6                     
  5127                           ;TAD_RFID.c: 16:     TRISCbits.TRISC0 = 1;
  5128   000DF6  8094               	bsf	148,0,c	;volatile
  5129                           
  5130                           ;TAD_RFID.c: 17:     TRISCbits.TRISC1 = 0;
  5131   000DF8  9294               	bcf	148,1,c	;volatile
  5132                           
  5133                           ;TAD_RFID.c: 18:     TRISCbits.TRISC2 = 0;
  5134   000DFA  9494               	bcf	148,2,c	;volatile
  5135                           
  5136                           ;TAD_RFID.c: 19:     TRISCbits.TRISC3 = 0;
  5137   000DFC  9694               	bcf	148,3,c	;volatile
  5138                           
  5139                           ;TAD_RFID.c: 20:     TRISCbits.TRISC4 = 0;
  5140   000DFE  9894               	bcf	148,4,c	;volatile
  5141   000E00  0012               	return		;funcret
  5142   000E02                     __end_of_InitPortDirections:
  5143                           	callstack 0
  5144                           
  5145 ;; *************** function _Terminal_Init *****************
  5146 ;; Defined at:
  5147 ;;		line 26 in file "TAD_TERMINAL.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1
  5161 ;;      Params:         0       0       0
  5162 ;;      Locals:         0       0       0
  5163 ;;      Temps:          0       0       0
  5164 ;;      Totals:         0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used: 1
  5167 ;; Hardware stack levels required when called: 3
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text37
  5176   000DCA                     __ptext37:
  5177                           	callstack 0
  5178   000DCA                     _Terminal_Init:
  5179                           	callstack 27
  5180   000DCA                     
  5181                           ;TAD_TERMINAL.c: 27:  TXSTA = 0x24;
  5182   000DCA  0E24               	movlw	36
  5183   000DCC  6EAC               	movwf	172,c	;volatile
  5184                           
  5185                           ;TAD_TERMINAL.c: 28:  RCSTA = 0x90;
  5186   000DCE  0E90               	movlw	144
  5187   000DD0  6EAB               	movwf	171,c	;volatile
  5188                           
  5189                           ;TAD_TERMINAL.c: 29:  SPBRG = 64;
  5190   000DD2  0E40               	movlw	64
  5191   000DD4  6EAF               	movwf	175,c	;volatile
  5192   000DD6                     
  5193                           ;TAD_TERMINAL.c: 30:  BAUDCON = 0x00;
  5194   000DD6  6AB8               	clrf	184,c	;volatile
  5195   000DD8                     
  5196                           ;TAD_TERMINAL.c: 31:  hashtag_pressed = 0;
  5197   000DD8  0100               	movlb	0	; () banked
  5198   000DDA  6BBE               	clrf	_hashtag_pressed& (0+255),b
  5199   000DDC                     
  5200                           ; BSR set to: 0
  5201   000DDC  0012               	return		;funcret
  5202   000DDE                     __end_of_Terminal_Init:
  5203                           	callstack 0
  5204                           
  5205 ;; *************** function _TI_Init *****************
  5206 ;; Defined at:
  5207 ;;		line 32 in file "TAD_TIMER.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  counter         1    1[COMRAM] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1
  5221 ;;      Params:         0       0       0
  5222 ;;      Locals:         1       0       0
  5223 ;;      Temps:          0       0       0
  5224 ;;      Totals:         1       0       0
  5225 ;;Total ram usage:        1 bytes
  5226 ;; Hardware stack levels used: 1
  5227 ;; Hardware stack levels required when called: 3
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_main
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text38
  5236   000C3A                     __ptext38:
  5237                           	callstack 0
  5238   000C3A                     _TI_Init:
  5239                           	callstack 27
  5240   000C3A                     
  5241                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  5242   000C3A  6A02               	clrf	TI_Init@counter^0,c
  5243   000C3C                     l2811:
  5244                           
  5245                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  5246   000C3C  5002               	movf	TI_Init@counter^0,w,c
  5247   000C3E  0D05               	mullw	5
  5248   000C40  50F3               	movf	243,w,c
  5249   000C42  0FA4               	addlw	low (_Timers+4)
  5250   000C44  6ED9               	movwf	fsr2l,c
  5251   000C46  6ADA               	clrf	fsr2h,c
  5252   000C48  6ADF               	clrf	indf2,c
  5253   000C4A                     
  5254                           ;TAD_TIMER.c: 35:  }
  5255   000C4A  2A02               	incf	TI_Init@counter^0,f,c
  5256   000C4C  0E03               	movlw	3
  5257   000C4E  6402               	cpfsgt	TI_Init@counter^0,c
  5258   000C50  EF2C  F006         	goto	u2191
  5259   000C54  EF2E  F006         	goto	u2190
  5260   000C58                     u2191:
  5261   000C58  EF1E  F006         	goto	l2811
  5262   000C5C                     u2190:
  5263   000C5C                     
  5264                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  5265   000C5C  0E82               	movlw	130
  5266   000C5E  6ED5               	movwf	213,c	;volatile
  5267                           
  5268                           ;TAD_TIMER.c: 37:     TMR0=64911;
  5269   000C60  0EFD               	movlw	253
  5270   000C62  6ED7               	movwf	215,c	;volatile
  5271   000C64  0E8F               	movlw	143
  5272   000C66  6ED6               	movwf	214,c	;volatile
  5273   000C68                     
  5274                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  5275   000C68  94F2               	bcf	242,2,c	;volatile
  5276   000C6A                     
  5277                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  5278   000C6A  8AF2               	bsf	242,5,c	;volatile
  5279   000C6C  0012               	return		;funcret
  5280   000C6E                     __end_of_TI_Init:
  5281                           	callstack 0
  5282                           
  5283 ;; *************** function _LowRSI *****************
  5284 ;; Defined at:
  5285 ;;		line 31 in file "main.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		None
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1
  5299 ;;      Params:         0       0       0
  5300 ;;      Locals:         0       0       0
  5301 ;;      Temps:          1       0       0
  5302 ;;      Totals:         1       0       0
  5303 ;;Total ram usage:        1 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; Hardware stack levels required when called: 2
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		Interrupt level 1
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	intcodelo
  5314   000018                     __pintcodelo:
  5315                           	callstack 0
  5316   000018                     _LowRSI:
  5317                           	callstack 21
  5318                           
  5319                           ;incstack = 0
  5320   000018  805F               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  5321   00001A  CFE0 F001          	movff	bsr,??_LowRSI
  5322   00001E  C001  FFE0         	movff	??_LowRSI,bsr
  5323   000022  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  5324   000024  0010               	retfie	
  5325   000026                     __end_of_LowRSI:
  5326                           	callstack 0
  5327                           
  5328 ;; *************** function _HighRSI *****************
  5329 ;; Defined at:
  5330 ;;		line 27 in file "main.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1
  5344 ;;      Params:         0       0       0
  5345 ;;      Locals:         0       0       0
  5346 ;;      Temps:          0       0       0
  5347 ;;      Totals:         0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used: 1
  5350 ;; Hardware stack levels required when called: 1
  5351 ;; This function calls:
  5352 ;;		_RSI_Timer0
  5353 ;; This function is called by:
  5354 ;;		Interrupt level 2
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	intcode
  5359   000008                     __pintcode:
  5360                           	callstack 0
  5361   000008                     _HighRSI:
  5362                           	callstack 21
  5363                           
  5364                           ;incstack = 0
  5365   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5366   00000A  EFBC  F006         	goto	int_func
  5367                           
  5368                           	psect	intcode_body
  5369   000D78                     __pintcode_body:
  5370                           	callstack 21
  5371   000D78                     int_func:
  5372                           	callstack 21
  5373   000D78                     
  5374                           ;main.c: 29:  }
  5375   000D78  A4F2               	btfss	242,2,c	;volatile
  5376   000D7A  EFC1  F006         	goto	i2u271_41
  5377   000D7E  EFC3  F006         	goto	i2u271_40
  5378   000D82                     i2u271_41:
  5379   000D82  EFC5  F006         	goto	i2l24
  5380   000D86                     i2u271_40:
  5381   000D86  ECAF  F006         	call	_RSI_Timer0	;wreg free
  5382   000D8A                     i2l24:
  5383   000D8A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5384   000D8C  0011               	retfie		f
  5385   000D8E                     __end_of_HighRSI:
  5386                           	callstack 0
  5387                           
  5388 ;; *************** function _RSI_Timer0 *****************
  5389 ;; Defined at:
  5390 ;;		line 25 in file "TAD_TIMER.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1
  5404 ;;      Params:         0       0       0
  5405 ;;      Locals:         0       0       0
  5406 ;;      Temps:          0       0       0
  5407 ;;      Totals:         0       0       0
  5408 ;;Total ram usage:        0 bytes
  5409 ;; Hardware stack levels used: 1
  5410 ;; This function calls:
  5411 ;;		Nothing
  5412 ;; This function is called by:
  5413 ;;		_HighRSI
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text41
  5418   000D5E                     __ptext41:
  5419                           	callstack 0
  5420   000D5E                     _RSI_Timer0:
  5421                           	callstack 21
  5422   000D5E                     
  5423                           ;TAD_TIMER.c: 27:     TMR0=64911;
  5424   000D5E  0EFD               	movlw	253
  5425   000D60  6ED7               	movwf	215,c	;volatile
  5426   000D62  0E8F               	movlw	143
  5427   000D64  6ED6               	movwf	214,c	;volatile
  5428   000D66                     
  5429                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  5430   000D66  94F2               	bcf	4082,2,c	;volatile
  5431   000D68                     
  5432                           ;TAD_TIMER.c: 29:     Tics++;
  5433   000D68  0E01               	movlw	1
  5434   000D6A  0100               	movlb	0	; () banked
  5435   000D6C  27B4               	addwf	_Tics& (0+255),f,b	;volatile
  5436   000D6E  0E00               	movlw	0
  5437   000D70  23B5               	addwfc	(_Tics+1)& (0+255),f,b	;volatile
  5438   000D72  23B6               	addwfc	(_Tics+2)& (0+255),f,b	;volatile
  5439   000D74  23B7               	addwfc	(_Tics+3)& (0+255),f,b	;volatile
  5440   000D76                     
  5441                           ; BSR set to: 0
  5442   000D76  0012               	return		;funcret
  5443   000D78                     __end_of_RSI_Timer0:
  5444                           	callstack 0
  5445                           
  5446                           	psect	rparam
  5447   000001                     ___rparam_used  equ	1
  5448   000000                     ___param_bank   equ	0
  5449   000000                     __Lparam        equ	__Lrparam
  5450   000000                     __Hparam        equ	__Hrparam
  5451                           
  5452                           	psect	temp
  5453   00005F                     btemp:
  5454                           	callstack 0
  5455   00005F                     	ds	1
  5456   00005F                     int$flags       set	btemp
  5457   000060                     wtemp8          set	btemp+1
  5458   000060                     ttemp5          set	btemp+1
  5459   000063                     ttemp6          set	btemp+4
  5460   000067                     ttemp7          set	btemp+8
  5461                           
  5462                           	psect	idloc
  5463                           
  5464                           ;Config register IDLOC0 @ 0x200000
  5465                           ;	unspecified, using default values
  5466   200000                     	org	2097152
  5467   200000  FF                 	db	255
  5468                           
  5469                           ;Config register IDLOC1 @ 0x200001
  5470                           ;	unspecified, using default values
  5471   200001                     	org	2097153
  5472   200001  FF                 	db	255
  5473                           
  5474                           ;Config register IDLOC2 @ 0x200002
  5475                           ;	unspecified, using default values
  5476   200002                     	org	2097154
  5477   200002  FF                 	db	255
  5478                           
  5479                           ;Config register IDLOC3 @ 0x200003
  5480                           ;	unspecified, using default values
  5481   200003                     	org	2097155
  5482   200003  FF                 	db	255
  5483                           
  5484                           ;Config register IDLOC4 @ 0x200004
  5485                           ;	unspecified, using default values
  5486   200004                     	org	2097156
  5487   200004  FF                 	db	255
  5488                           
  5489                           ;Config register IDLOC5 @ 0x200005
  5490                           ;	unspecified, using default values
  5491   200005                     	org	2097157
  5492   200005  FF                 	db	255
  5493                           
  5494                           ;Config register IDLOC6 @ 0x200006
  5495                           ;	unspecified, using default values
  5496   200006                     	org	2097158
  5497   200006  FF                 	db	255
  5498                           
  5499                           ;Config register IDLOC7 @ 0x200007
  5500                           ;	unspecified, using default values
  5501   200007                     	org	2097159
  5502   200007  FF                 	db	255
  5503                           
  5504                           	psect	config
  5505                           
  5506                           ; Padding undefined space
  5507   300000                     	org	3145728
  5508   300000  FF                 	db	255
  5509                           
  5510                           ;Config register CONFIG1H @ 0x300001
  5511                           ;	Oscillator
  5512                           ;	OSC = HS, HS Oscillator
  5513                           ;	Fail-Safe Clock Monitor Enable bit
  5514                           ;	FCMEN = 0x0, unprogrammed default
  5515                           ;	Internal/External Oscillator Switchover bit
  5516                           ;	IESO = 0x0, unprogrammed default
  5517   300001                     	org	3145729
  5518   300001  02                 	db	2
  5519                           
  5520                           ;Config register CONFIG2L @ 0x300002
  5521                           ;	Power-up Timer Enable bit
  5522                           ;	PWRT = OFF, PWRT disabled
  5523                           ;	Brown-out Reset Enable bits
  5524                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  5525                           ;	Brown-out Reset Voltage bits
  5526                           ;	BORV = 0x3, unprogrammed default
  5527   300002                     	org	3145730
  5528   300002  19                 	db	25
  5529                           
  5530                           ;Config register CONFIG2H @ 0x300003
  5531                           ;	Watchdog Timer Enable bit
  5532                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5533                           ;	Watchdog Timer Postscale Select bits
  5534                           ;	WDTPS = 0xF, unprogrammed default
  5535   300003                     	org	3145731
  5536   300003  1E                 	db	30
  5537                           
  5538                           ; Padding undefined space
  5539   300004                     	org	3145732
  5540   300004  FF                 	db	255
  5541                           
  5542                           ;Config register CONFIG3H @ 0x300005
  5543                           ;	CCP2 MUX bit
  5544                           ;	CCP2MX = 0x1, unprogrammed default
  5545                           ;	PORTB A/D Enable bit
  5546                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  5547                           ;	Low-Power Timer1 Oscillator Enable bit
  5548                           ;	LPT1OSC = 0x0, unprogrammed default
  5549                           ;	MCLR Pin Enable bit
  5550                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  5551   300005                     	org	3145733
  5552   300005  01                 	db	1
  5553                           
  5554                           ;Config register CONFIG4L @ 0x300006
  5555                           ;	Stack Full/Underflow Reset Enable bit
  5556                           ;	STVREN = 0x1, unprogrammed default
  5557                           ;	Single-Supply ICSP Enable bit
  5558                           ;	LVP = OFF, Single-Supply ICSP disabled
  5559                           ;	Boot Block Size Select bits
  5560                           ;	BBSIZ = 0x0, unprogrammed default
  5561                           ;	Extended Instruction Set Enable bit
  5562                           ;	XINST = 0x0, unprogrammed default
  5563                           ;	Background Debugger Enable bit
  5564                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5565   300006                     	org	3145734
  5566   300006  81                 	db	129
  5567                           
  5568                           ; Padding undefined space
  5569   300007                     	org	3145735
  5570   300007  FF                 	db	255
  5571                           
  5572                           ;Config register CONFIG5L @ 0x300008
  5573                           ;	unspecified, using default values
  5574                           ;	Code Protection bit
  5575                           ;	CP0 = 0x1, unprogrammed default
  5576                           ;	Code Protection bit
  5577                           ;	CP1 = 0x1, unprogrammed default
  5578   300008                     	org	3145736
  5579   300008  03                 	db	3
  5580                           
  5581                           ;Config register CONFIG5H @ 0x300009
  5582                           ;	unspecified, using default values
  5583                           ;	Boot Block Code Protection bitProtect Boot
  5584                           ;	CPB = 0x1, unprogrammed default
  5585                           ;	Data EEPROM Code Protection bit
  5586                           ;	CPD = 0x1, unprogrammed default
  5587   300009                     	org	3145737
  5588   300009  C0                 	db	192
  5589                           
  5590                           ;Config register CONFIG6L @ 0x30000A
  5591                           ;	unspecified, using default values
  5592                           ;	Write Protection bit
  5593                           ;	WRT0 = 0x1, unprogrammed default
  5594                           ;	Write Protection bit
  5595                           ;	WRT1 = 0x1, unprogrammed default
  5596   30000A                     	org	3145738
  5597   30000A  03                 	db	3
  5598                           
  5599                           ;Config register CONFIG6H @ 0x30000B
  5600                           ;	unspecified, using default values
  5601                           ;	Configuration Register Write Protection bit
  5602                           ;	WRTC = 0x1, unprogrammed default
  5603                           ;	Boot Block Write Protection bit
  5604                           ;	WRTB = 0x1, unprogrammed default
  5605                           ;	Data EEPROM Write Protection bit
  5606                           ;	WRTD = 0x1, unprogrammed default
  5607   30000B                     	org	3145739
  5608   30000B  E0                 	db	224
  5609                           
  5610                           ;Config register CONFIG7L @ 0x30000C
  5611                           ;	unspecified, using default values
  5612                           ;	Table Read Protection bit
  5613                           ;	EBTR0 = 0x1, unprogrammed default
  5614                           ;	Table Read Protection bit
  5615                           ;	EBTR1 = 0x1, unprogrammed default
  5616   30000C                     	org	3145740
  5617   30000C  03                 	db	3
  5618                           
  5619                           ;Config register CONFIG7H @ 0x30000D
  5620                           ;	unspecified, using default values
  5621                           ;	Boot Block Table Read Protection bit
  5622                           ;	EBTRB = 0x1, unprogrammed default
  5623   30000D                     	org	3145741
  5624   30000D  40                 	db	64
  5625                           tosu	equ	0xFFF
  5626                           tosh	equ	0xFFE
  5627                           tosl	equ	0xFFD
  5628                           stkptr	equ	0xFFC
  5629                           pclatu	equ	0xFFB
  5630                           pclath	equ	0xFFA
  5631                           pcl	equ	0xFF9
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           indf0	equ	0xFEF
  5639                           postinc0	equ	0xFEE
  5640                           postdec0	equ	0xFED
  5641                           preinc0	equ	0xFEC
  5642                           plusw0	equ	0xFEB
  5643                           fsr0h	equ	0xFEA
  5644                           fsr0l	equ	0xFE9
  5645                           wreg	equ	0xFE8
  5646                           indf1	equ	0xFE7
  5647                           postinc1	equ	0xFE6
  5648                           postdec1	equ	0xFE5
  5649                           preinc1	equ	0xFE4
  5650                           plusw1	equ	0xFE3
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           bsr	equ	0xFE0
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           preinc2	equ	0xFDC
  5658                           plusw2	equ	0xFDB
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8

Data Sizes:
    Strings     261
    Constant    12
    Data        0
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     85      94
    BANK0           128     32      96
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> motorTeclado@buffer(BANK0[32]), showTecla@buffer(COMRAM[32]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> motorTeclado@buffer(BANK0[32]), showTecla@buffer(COMRAM[32]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    S1284$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> motorTeclado@buffer(BANK0[32]), showTecla@buffer(COMRAM[32]), 

    S1284$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_1(CODE[45]), STR_2(CODE[10]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 32
		 -> motorTeclado@buffer(BANK0[32]), showTecla@buffer(COMRAM[32]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> displayUID@hexString(COMRAM[11]), motorTeclado@buffer(BANK0[32]), showTecla@buffer(COMRAM[32]), STR_10(CODE[29]), 
		 -> STR_11(CODE[33]), STR_12(CODE[9]), STR_13(CODE[14]), STR_14(CODE[33]), 
		 -> STR_3(CODE[6]), STR_4(CODE[2]), STR_5(CODE[18]), STR_6(CODE[18]), 
		 -> STR_7(CODE[18]), STR_8(CODE[19]), STR_9(CODE[27]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 45
		 -> STR_1(CODE[45]), STR_2(CODE[10]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 45
		 -> STR_1(CODE[45]), STR_2(CODE[10]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_1(CODE[45]), STR_2(CODE[10]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _initTeclado->_TI_NewTimer
    _motorTeclado->_showTecla
    _showTecla->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _Terminal_SendString->_Terminal_TXAvailable
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Wr->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_motorTeclado

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7793
                            _TI_Init
                      _Terminal_Init
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     427
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0     157
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                        32    32      0    5914
                                              0 BANK0     32    32      0
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                _Terminal_SendString
                          _showTecla
                            _sprintf
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        2     2      0      26
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _showTecla                                           32    32      0    2841
                                             53 COMRAM    32    32      0
                _Terminal_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    14     11    2604
                                             30 COMRAM    23    12     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    2286
                                             24 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    2086
                                             11 COMRAM    13    10      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     329
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      96
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     439
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     451
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2     157
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      47
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      47
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      81
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      78
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1271
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1271
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     245
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     404
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     404
                                             11 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     407
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     407
                                             11 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     215
                                              6 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     105
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _showTecla
       _Terminal_SendString
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _sprintf
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
     _initTeclado
     _showMenu
       _Terminal_SendString

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128     32      96     75.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     85      94     74.6%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     190      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Mar 04 16:31:50 2025

       __end_ofGetTecla@F3225 1EF9         ?_Terminal_ReceiveChar 0001                    _RSI_Timer0 0D5E  
                 MFRC522_Rd@i 0006                   MFRC522_Wr@i 000B                            l60 0C6C  
                          l70 0D04                            l73 0B54                            l66 0ABA  
                          u10 0C04                            u11 0C00                  ___awdiv@sign 0007  
                  _TI_GetTics 0B0A                            bsr 0FE0          ??_InitPortDirections 0002  
                         l120 0E12                           l114 0E20                           l204 08FE  
                         l212 08A4                           l205 092C                           l213 08A8  
                         l301 0E0A                           l117 0DA0                           l206 0932  
                         l222 0C96                           l231 0B08                           l151 0270  
                         l216 0D5C                           l225 0DE8                           l219 0DC8  
                         l171 0574                           l163 052A                           l228 0DF4  
                         l180 0D26                           l500 0522                           l159 0A64  
                         l193 0E00                           l169 05E6                           l197 0BD8  
                         l461 0DB4                           l455 0DDC                           l199 0C04  
                         l464 0E1A                           l458 0D42                           l467 0E24  
                         l476 09A6                           l734 06A8                           l479 0A08  
                         l747 0756                           u210 08FA                           u211 08F6  
                         u220 0914                           u221 090E                           u230 092C  
                         u231 0928                           u208 08D4                           u226 0916  
                         u190 08D2                           u191 08CA                           _abs 0C06  
                ___awmod@sign 0007                           wreg 0FE8                ??_MFRC522_Init 000F  
                        ?_abs 0008                          l1232 0C38                          l1225 0B96  
                        l1219 0446                          l1244 0800                          l1261 0BDC  
                        l1229 0C20                          l1181 0BCE                          l1255 0E26  
                        l1361 08AC                          l1257 0BD2                          l1363 08B6  
                        l1259 0BDA                          l2411 0810                          l1381 08E8  
                        l1365 08B8                          l2421 083A                          l2405 0804  
                        l2501 0DB8                          l3301 0600                          l1391 0918  
                        l1383 08EA                          l1375 08C0                          l1367 08BA  
                        l2431 085A                          l2423 0840                          l2407 080C  
                        l3311 0626                          l3303 0604                          l1393 091A  
                        l1385 08FA                          l1377 08E0                          l1369 08BC  
                        l2441 088A                          l2425 0842                          l2417 0814  
                        l2409 080E                          l3321 065C                          l3313 0638  
                        l3305 0612                          l3401 02B2                          l2521 0A6C  
                        l1395 091C                          l1379 08E6                          l2443 088C  
                        l2435 085E                          l2427 0848                          l2419 0834  
                        l3323 0672                          l3315 0640                          l3331 0688  
                        l3307 061A                          l3411 032A                          l3403 02C0  
                        l1397 0930                          l1389 0900                          l2445 0892  
                        l2437 087E                          l2429 084A                          l3333 0698  
                        l3325 067A                          l3317 0648                          l3309 061E  
                        l3341 06AC                          l3421 03B0                          l3413 0342  
                        l3405 02DC                          l3501 0A1C                          l2525 0A84  
                        l2533 0E0C                          l2447 0894                          l2439 0884  
                        l3335 06A0                          l3327 067C                          l3319 0656  
                        l3351 06DC                          l3343 06BA                          l3423 03C0  
                        l3431 03FE                          l3415 0372                          l3407 02F8  
                        l3511 0A54                          l3503 0A24                          l2527 0AA0  
                        l2519 0A66                          l2535 0E10                          l1737 0DF6  
                        l2561 0C70                          l3521 0548                          l3513 0524  
                        l3329 0682                          l3361 0722                          l3353 06EE  
                        l3345 06C2                          l3425 03D0                          l3417 038E  
                        l3409 0310                          l3433 0414                          l3505 0A36  
                        l3601 0064                          l2529 0AB0                          l2811 0C3C  
                        l2563 0C76                          l3531 0582                          l3515 0530  
                        l3443 0D28                          l3371 074E                          l3363 072A  
                        l3355 06F6                          l3347 06C6                          l3339 06AA  
                        l3427 03E2                          l3419 03A0                          l3451 0B62  
                        l3507 0A3E                          l3611 008A                          l3603 006A  
                        l2821 0C6A                          l2813 0C4A                          l2805 0C3A  
                        l2565 0C7E                          l3541 05BE                          l3517 0538  
                        l3365 0730                          l3357 06FE                          l3349 06D4  
                        l3381 0782                          l3429 03FC                          l3437 0424  
                        l3453 0B72                          l3461 0BA0                          l3509 0A50  
                        l3621 00BC                          l3613 0092                          l3605 0072  
                        l2661 0D94                          l3701 047C                          l2815 0C4C  
                        l2831 0DD8                          l2567 0DDE                          l2559 0C6E  
                        l2823 0E02                          l3543 05D6                          l3519 0540  
                        l3527 054E                          l3447 0E16                          l3471 0934  
                        l3295 05E8                          l3359 070C                          l3367 0736  
                        l3391 0C14                          l3383 079E                          l3375 0758  
                        l3455 0B8E                          l3463 0BA8                          l3551 0D06  
                        l3631 00DE                          l3615 00A2                          l3607 0082  
                        l2663 0D96                          l3711 04B6                          l3703 0480  
                        l2817 0C5C                          l2569 0DEA                          l2825 0E06  
                        l3529 057A                          l3481 0CE4                          l3473 0938  
                        l3297 05EA                          l3369 0746                          l3385 07D0  
                        l3377 0768                          l3393 0272                          l3449 0B56  
                        l3465 0BB0                          l3553 0D1C                          l3633 00E4  
                        l3625 00C6                          l3609 0086                          l2665 0D98  
                        l2657 0D8E                          l3713 04C2                          l3705 048A  
                 _TI_NewTimer 0A66                          l2819 0C68                          l2827 0DCA  
                        l2499 0D46                          l2683 0ABC                          l3539 058A  
                        l3483 0CE6                          l3475 094E                          l3299 05F8  
                        l3379 0778                          l3395 0294                          l3467 0BC4  
                        l3459 0B98                          l3651 0144                          l3643 00FE  
                        l3635 00EA                          l3627 00D6                          l3619 00AC  
                        l2659 0D92                          l3723 04FA                          l3715 04CA  
                        l3707 049E                          l2829 0DD6                          l2685 0AC0  
                        l3493 0E1C                          l3485 0D02                          l3477 0972  
                        l3389 0C06                          l3397 02A0                          l3661 0192  
                        l3653 0148                          l3645 010E                          l3629 00DA  
                        l3709 04A2                          l3487 0B0C                          l3479 0976  
                        l3399 02AE                          l3671 01C4                          l3663 0198  
                        l3647 012E                          l3655 0150                          l3591 0034  
                        l3719 04E2                          l3489 0B20                          l3497 0A0A  
                        l3681 0200                          l3665 01A0                          l3657 0160  
                        l3649 0140                          l3593 0044                          l2793 0E22  
                        l3729 050A                          l3499 0A0C                          l3675 01EA  
                        l3659 0180                          l3595 0048                          l3587 09A8  
                        l3691 0448                          l3771 0CC6                          l3677 01FA  
                        l3669 01B4                          l3597 004C                          l3685 0208  
                        l3589 002A                          l2789 0DA2                          l3693 044C  
                        l3781 0CD6                          l3773 0CCA                          l3679 01FC  
                        l3687 023E                          l3599 0054                          l3695 0460  
                        l3775 0CCE                          l3945 05A0                          l3689 0266  
                        l3697 0464                          l3777 0CD0                          l3769 0CBE  
                        l3699 046A                          l3779 0CD2                          STR_1 1EF9  
                        STR_2 1FE5                          STR_3 1FF8                          STR_5 1FB3  
                        STR_6 1FC5                          STR_7 1FB3                          STR_8 1FA0  
                        STR_9 1F85                          u3000 06D4                          u3001 06D0  
                        u3010 06EE                          u3011 06EA                          u3020 070C  
                        u3100 0294                          u3021 0708                          u3101 0290  
                        u3030 0722                          u3110 02DC                          u3031 071E  
                        u3111 02D8                          _LATC 0F8B                          u3200 0D3A  
                        u3040 0746                          u3120 02F8                          _LATD 0F8C  
                        u3201 0D32                          u3041 0742                          u3121 02F4  
                        u3050 0768                          u3130 033E                          u3210 0B8E  
                        u3051 0764                          u3131 0338                          u3211 0B8A  
                        u3220 094E                          u3060 0778                          u3140 0340  
                        u2180 0DB2                          u3221 094A                          u3061 0774  
                        u2181 0DAC                          u2190 0C5C                          u1710 085A  
                        u3230 096E                          u3070 079E                          u3150 03A0  
                        u2191 0C58                          u1711 0856                          u3071 079A  
                        u3151 039C                          u1720 0870                          u3208 0D3C  
                        u3240 0996                          u3080 07D0                          u3160 03B0  
                        u3400 00FA                          u1721 0868                          u3081 07CC  
                        u3161 03AC                          u3401 00F6                          u3250 09A6  
                        u3090 0C14                          u3170 03C0                          u3410 010E  
                        u2186 0DB4                          u3251 09A2                          u3091 0C10  
                        u3171 03BC                          u3411 010A                          u1740 08A4  
                        u1708 0828                          u3180 03D0                          u3260 0A1C  
                        u3500 01FA                          u3420 012E                          u3340 0044  
                        u1741 08A0                          u3237 0964                          u3181 03CC  
                        u3261 0A18                          u3501 01F6                          u3421 012A  
                        u3341 0040                          u3190 0410                          u3270 0A36  
                        u3430 0140                          u3350 0064                          u3510 0460  
                        u3247 098C                          u3191 040C                          u3271 0A32  
                        u3431 013C                          u3351 0060                          u3511 045C  
                        u3280 0A50                          u3440 0160                          u3360 0082  
                        u3520 047C                          u3281 0A4C                          u3441 015C  
                        u3361 007E                          u3521 0478                          u1738 0872  
                        u1690 0826                          u3290 05CC                          u3450 0180  
                        u3370 00A2                          u3530 049E                          u1691 081E  
                        u3451 017C                          u3371 009E                          u3531 049A  
                        u3460 0192                          u3380 00BC                          u3540 04B6  
                        u3461 018E                          u3381 00B8                          u3541 04B2  
                        u3470 01B0                          u3390 00D6                          u1870 0A80  
                        u3550 04DE                          u3471 01AC                          u3391 00D2  
                        u1871 0A7C                          u3551 04DA                          u3480 01C4  
                        u1880 0AA0                          u3560 04F6                          u3481 01C0  
                        u1881 0A9C                          u3561 04F2                          u2930 05F8  
                        u3490 01E6                          u2931 05F4                          u3491 01E2  
                        u2940 0612                          u2941 060E                          u2950 0638  
                        u2951 0634                          u2960 0656                          u2961 0652  
                        u2970 0672                          u2971 066E                          u2980 0698  
                        i1l29 001E                          u2981 0694                          u2990 06BA  
                        u2991 06B6                          i2l24 0D8A                          i2l55 0D76  
                        _TMR0 0FD6                          _Tics 00B4                          _Rows 0058  
                        abs@a 0008                          _dbuf 0080                          _main 0CBE  
                        _prec 00BA                          fsr0h 0FEA                          fsr1h 0FE2  
                        indf0 0FEF                          fsr2h 0FDA                          fsr0l 0FE9  
                        indf2 0FDF                          fsr1l 0FE1                          fsr2l 0FD9  
                        btemp 005F               __end_of_TI_Init 0C6E                          prodh 0FF4  
                        prodl 0FF3                          start 0026               __end_of_HighRSI 0D8E  
                ___param_bank 0000               ??_MFRC522_Reset 000C                         ??_abs 000A  
                ?_initTeclado 0001                         ?_main 0001               __end_of___awdiv 06AA  
                       STR_10 1F68                         STR_11 1F47                         STR_12 1FEF  
                       STR_13 1FD7                         STR_14 1F26               __end_of___awmod 0758  
                       _T0CON 0FD5               ___awdiv@divisor 0004               ___awdiv@counter 0006  
                       _RCREG 0FAE                         _RCSTA 0FAB                  vfpfcnvrt@fmt 000D  
                       _SPBRG 0FAF                         _PORTD 0F83                         _TRISD 0F95  
                       _TXREG 0FAD                         _TXSTA 0FAC                         _Filas 005C  
                       _Timer 005D                         _flags 00BC                         _fputc 0758  
                _TI_ResetTics 0CE2                         _tecla 005A                         _timer 005E  
                       _width 00B8                         _putch 0E26                         tablat 0FF5  
           _MFRC522_Clear_Bit 0D44                         ttemp5 0060                         ttemp6 0063  
                       ttemp7 0067                         status 0FD8                         wtemp8 0060  
             __end_of_sprintf 0BD0            Terminal_SendChar@c 0002            ?_MFRC522_Clear_Bit 000C  
            __end_of_GetTecla 05E8             _MFRC522_AntennaOn 0DDE        ??_Terminal_ReceiveChar 0002  
             __initialization 0C98                  __end_of_main 0CE2            ?_MFRC522_AntennaOn 0001  
         ??_MFRC522_Clear_Bit 000D                   ?_RSI_Timer0 0001                TI_Init@counter 0002  
            _initPortsTeclado 0E0C                   ?_TI_GetTics 0002                        ??_main 0056  
         ??_MFRC522_AntennaOn 000E                 __activetblptr 0002            MFRC522_Rd@ucResult 0005  
             MFRC522_Wr@value 0007     __end_of_MFRC522_Clear_Bit 0D5E                        ?_fputc 0002  
            ___awdiv@dividend 0002                        ?_putch 0001                     ??_TI_Init 0002  
      Terminal_SendString@str 0005                        i2l3041 0D78                        i2l3043 0D86  
                      i2l2801 0D66                        i2l2803 0D68                        i2l2799 0D5E  
               vfpfcnvrt@done 0011                        _TMR0IF 7F92                     ??_HighRSI 0001  
   __end_of_MFRC522_AntennaOn 0DEA              __end_of_delay_us 0C06                        _LowRSI 0018  
                      _RowAct 0057                        _Timers 00A0                  vfprintf@cfmt 001D  
                   ??___awdiv 0006          __end_of_MFRC522_Init 0B0A                     ??___awmod 0006  
            __end_of_initRFID 0E0C            motorTerminal@state 00BD                        clear_0 0C9E  
                      clear_1 0CAA              ___awdiv@quotient 0008               ___awmod@divisor 0004  
                      isa$std 0001               ___awmod@counter 0006                        fputc@c 0002  
            __end_of_showMenu 0A0A                  __mediumconst 1EEC                        tblptrh 0FF7  
                      tblptrl 0FF6                        tblptru 0FF8                        putch@c 0001  
            __end_of_vfprintf 0B98         __end_of_Terminal_Init 0DDE                     ??_sprintf 002A  
                  __accesstop 0080       __end_of__initialization 0CB0               delay_us@howMany 0005  
               ___rparam_used 0001                  ??_MFRC522_Rd 0002                  ??_MFRC522_Wr 0008  
          _MFRC522_AntennaOff 0DEA                __pcstackCOMRAM 0001           ?_MFRC522_AntennaOff 0001  
               __end_of_fputc 0802                 __end_of_putch 0E28          TI_NewTimer@Comptador 0004  
           __end_of_ReadFilas 0E22              MFRC522_Rd@ucAddr 0004             motorTeclado@state 0059  
           ??_MFRC522_Set_Bit 000D            __end_of_MFRC522_Rd 0934            __end_of_MFRC522_Wr 08AA  
                   ?_GetTecla 0001                       ??_fputc 0005          ??_MFRC522_AntennaOff 000F  
                ?_TI_NewTimer 0002                       ??_putch 0002                    __pbssBANK0 0080  
       __end_of_motorTerminal 0524        TI_NewTimer@TimerHandle 0002                       ?_LowRSI 0001  
            MFRC522_Wr@ucAddr 000A       TI_ResetTics@TimerHandle 0002                 _writeColumnas 0A0A  
                     _BAUDCON 0FB8                     ?_delay_us 0001                    ??_GetTecla 0002  
           _Terminal_SendChar 0E14                       _TI_Init 0C3A            ?_Terminal_SendChar 0001  
    __end_of_initPortsTeclado 0E14                     ?_initRFID 0001                       _HighRSI 0008  
                     _Columns 00BF           ??_Terminal_SendChar 0002                       __Hparam 0000  
                     __Lparam 0000                     ?_showMenu 0001                  ??_RSI_Timer0 0001  
                     ___awdiv 05E8                ?_writeColumnas 0001                       ___awmod 06AA  
                   ?_vfprintf 0019                  ??_TI_GetTics 0006                       __pcinit 0C98  
       __end_of_MFRC522_Reset 0C98                       __ramtop 0200                       __ptext0 0CBE  
                     __ptext1 0448                       __ptext2 09A8                       __ptext3 0D8E  
                     __ptext4 0E0C                       __ptext5 0A66                       __ptext6 0E22  
                     __ptext7 0DA2                       __ptext8 002A                       __ptext9 0A0A  
               ?_motorTeclado 0001     __end_of_Terminal_SendChar 0E1C              ___awmod@dividend 0002  
                  ??_delay_us 0002                       _sprintf 0B98                  _MFRC522_Init 0ABC  
              __pintcode_body 0D78          end_of_initialization 0CB0                    ??_initRFID 000F  
          __end_of_RSI_Timer0 0D78                       fputc@fp 0004                 __Lmediumconst 1EEC  
                     int_func 0D78            __end_of_TI_GetTics 0B56             __end_of_showTecla 0D28  
           __end_of_vfpfcnvrt 0448                    ??_showMenu 0007                       postdec2 0FDD  
                     postinc0 0FEE                       postinc1 0FE6                       postinc2 0FDE  
            vfpfcnvrt@convarg 0014                 GetTecla@F3225 1EED                    ??_vfprintf 001D  
              ??_motorTeclado 0056                     _PORTBbits 0F81                     _PORTCbits 0F82  
         _Terminal_SendString 0934         TI_GetTics@TimerHandle 000E                     _TRISBbits 0F93  
                   _TRISCbits 0F94          ?_Terminal_SendString 0005             MFRC522_Rd@Address 0003  
             ??_writeColumnas 0002                __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 0DB6  
             _MFRC522_Set_Bit 0DB6                   vfpfcnvrt@ap 000E                   vfpfcnvrt@cp 0012  
                 vfpfcnvrt@fp 000C                     _ColumnAct 0056           start_initialization 0C98  
                   _ReadFilas 0E1C                   __end_of_abs 0C3A  __end_of_Terminal_TXAvailable 0D44  
          motorTeclado@buffer 00C0         ??_Terminal_SendString 0007                      ??_LowRSI 0001  
                 vfprintf@fmt 001A                 ??_initTeclado 0005                   __pbssCOMRAM 0056  
               __pcstackBANK0 00C0                    ?_ReadFilas 0001             MFRC522_Wr@Address 0009  
               ?_TI_ResetTics 0001                      ?_TI_Init 0001             ?_initPortsTeclado 0001  
                    ?_HighRSI 0001          __end_of_motorTeclado 0272            ??_initPortsTeclado 0002  
     __end_of_MFRC522_Set_Bit 0DCA           MFRC522_Set_Bit@addr 000D              writeColumnas@out 0003  
         MFRC522_Set_Bit@mask 000C                     __pintcode 0008                 __pmediumconst 1EEC  
                    ?___awdiv 0002    __end_of_InitPortDirections 0E02                      ?___awmod 0002  
                 __pintcodelo 0018                   __smallconst 1EEC           __end_of_initTeclado 0DA2  
              ??_TI_ResetTics 0002                      ?_sprintf 001F                 _Terminal_Init 0DCA  
        _Terminal_RXAvailable 0DA2                      _LATBbits 0F8A                      _LATCbits 0F8B  
                   delay_us@x 0006               _hashtag_pressed 00BE                      i2u271_40 0D86  
                    i2u271_41 0D82                      _PIR1bits 0F9E                     _showTecla 0D06  
                   _vfpfcnvrt 0272          _Terminal_TXAvailable 0D28                  GetTecla@fila 0011  
                 ??_ReadFilas 0002                      _GetTecla 0524  __end_of_Terminal_ReceiveChar 0E26  
                  vfpfcnvrt@c 0018                ?_Terminal_Init 0001                      _Columnas 005B  
       ?_Terminal_RXAvailable 0001               showTecla@buffer 0036                 _motorTerminal 0448  
            ?_MFRC522_Set_Bit 000C                      __Hrparam 0000         MFRC522_Clear_Bit@addr 000E  
       MFRC522_Clear_Bit@mask 000C                    vfprintf@ap 001C                      __Lrparam 0000  
                  vfprintf@fp 0019                    ?_showTecla 0001                   _initTeclado 0D8E  
       ?_Terminal_TXAvailable 0002                    ?_vfpfcnvrt 000C                    sprintf@fmt 0020  
                    _delay_us 0BD0                      __ptext10 0D06                      __ptext11 0B98  
                    __ptext20 0D28                      __ptext12 0B56                      __ptext21 0E14  
                    __ptext13 0272                      __ptext30 0DB6                      __ptext22 0CE2  
                    __ptext14 0758                      __ptext31 0DEA                      __ptext23 0B0A  
                    __ptext15 0E26                      __ptext32 0D44                      __ptext24 0E1C  
                    __ptext16 0C06                      __ptext41 0D5E                      __ptext33 0802  
                    __ptext25 0524                      __ptext17 06AA                      __ptext34 0BD0  
                    __ptext26 0E02                      __ptext18 05E8                      __ptext35 08AA  
                    __ptext27 0ABC                      __ptext19 0934                      __ptext36 0DF6  
                    __ptext28 0C6E                      __ptext37 0DCA                      __ptext29 0DDE  
                    __ptext38 0C3A                 ??_TI_NewTimer 0003                      _initRFID 0E02  
              ?_motorTerminal 0001                    _MFRC522_Rd 08AA                    _MFRC522_Wr 0802  
                    isa$xinst 0000                      _showMenu 09A8          __end_of_TI_ResetTics 0D06  
                    int$flags 005F         __end_of_writeColumnas 0A66                      _vfprintf 0B56  
               _MFRC522_Reset 0C6E                  _motorTeclado 002A                    _INTCONbits 0FF2  
             ??_Terminal_Init 0002     TI_GetTics@CopiaTicsActual 000A        ??_Terminal_RXAvailable 0002  
 __end_of_Terminal_SendString 09A8                      intlevel1 0000                      intlevel2 0000  
                   sprintf@ap 002A           __end_of_TI_NewTimer 0ABC                   ??_showTecla 0036  
      ??_Terminal_TXAvailable 0004          _Terminal_ReceiveChar 0E22                   ??_vfpfcnvrt 000F  
              ?_MFRC522_Reset 0001                      sprintf@f 002B                      sprintf@s 001F  
          _InitPortDirections 0DF6    __end_of_MFRC522_AntennaOff 0DF6                 ?_MFRC522_Init 0001  
             ??_motorTerminal 0007           ?_InitPortDirections 0001               GetTecla@columna 0010  
                 ?_MFRC522_Rd 0001                   ?_MFRC522_Wr 0007                GetTecla@keymap 0004  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 20 20:02:35 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,space=0,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    70                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    71                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    72   000000                     
    73                           ; Generated 05/12/2024 GMT
    74                           ; 
    75                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4321 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000FE0                     bsr             equ	4064
   108   000FE9                     fsr0            equ	4073
   109   000FEA                     fsr0h           equ	4074
   110   000FE9                     fsr0l           equ	4073
   111   000FE1                     fsr1            equ	4065
   112   000FE2                     fsr1h           equ	4066
   113   000FE1                     fsr1l           equ	4065
   114   000FD9                     fsr2            equ	4057
   115   000FDA                     fsr2h           equ	4058
   116   000FD9                     fsr2l           equ	4057
   117   000FEF                     indf0           equ	4079
   118   000FE7                     indf1           equ	4071
   119   000FDF                     indf2           equ	4063
   120   000FF2                     intcon          equ	4082
   121   000000                     nvmcon          equ	0
   122   000FF9                     pcl             equ	4089
   123   000FFA                     pclath          equ	4090
   124   000FFB                     pclatu          equ	4091
   125   000FEB                     plusw0          equ	4075
   126   000FE3                     plusw1          equ	4067
   127   000FDB                     plusw2          equ	4059
   128   000FED                     postdec0        equ	4077
   129   000FE5                     postdec1        equ	4069
   130   000FDD                     postdec2        equ	4061
   131   000FEE                     postinc0        equ	4078
   132   000FE6                     postinc1        equ	4070
   133   000FDE                     postinc2        equ	4062
   134   000FEC                     preinc0         equ	4076
   135   000FE4                     preinc1         equ	4068
   136   000FDC                     preinc2         equ	4060
   137   000FF3                     prod            equ	4083
   138   000FF4                     prodh           equ	4084
   139   000FF3                     prodl           equ	4083
   140   000FD8                     status          equ	4056
   141   000FF5                     tablat          equ	4085
   142   000FF6                     tblptr          equ	4086
   143   000FF7                     tblptrh         equ	4087
   144   000FF6                     tblptrl         equ	4086
   145   000FF8                     tblptru         equ	4088
   146   000FFD                     tosl            equ	4093
   147   000FE8                     wreg            equ	4072
   148   000F80                     PORTA           equ	3968	;# 
   149   000F81                     PORTB           equ	3969	;# 
   150   000F82                     PORTC           equ	3970	;# 
   151   000F83                     PORTD           equ	3971	;# 
   152   000F84                     PORTE           equ	3972	;# 
   153   000F89                     LATA            equ	3977	;# 
   154   000F8A                     LATB            equ	3978	;# 
   155   000F8B                     LATC            equ	3979	;# 
   156   000F8C                     LATD            equ	3980	;# 
   157   000F8D                     LATE            equ	3981	;# 
   158   000F92                     TRISA           equ	3986	;# 
   159   000F92                     DDRA            equ	3986	;# 
   160   000F93                     TRISB           equ	3987	;# 
   161   000F93                     DDRB            equ	3987	;# 
   162   000F94                     TRISC           equ	3988	;# 
   163   000F94                     DDRC            equ	3988	;# 
   164   000F95                     TRISD           equ	3989	;# 
   165   000F95                     DDRD            equ	3989	;# 
   166   000F96                     TRISE           equ	3990	;# 
   167   000F96                     DDRE            equ	3990	;# 
   168   000F9B                     OSCTUNE         equ	3995	;# 
   169   000F9D                     PIE1            equ	3997	;# 
   170   000F9E                     PIR1            equ	3998	;# 
   171   000F9F                     IPR1            equ	3999	;# 
   172   000FA0                     PIE2            equ	4000	;# 
   173   000FA1                     PIR2            equ	4001	;# 
   174   000FA2                     IPR2            equ	4002	;# 
   175   000FA6                     EECON1          equ	4006	;# 
   176   000FA7                     EECON2          equ	4007	;# 
   177   000FA8                     EEDATA          equ	4008	;# 
   178   000FA9                     EEADR           equ	4009	;# 
   179   000FAB                     RCSTA           equ	4011	;# 
   180   000FAB                     RCSTA1          equ	4011	;# 
   181   000FAC                     TXSTA           equ	4012	;# 
   182   000FAC                     TXSTA1          equ	4012	;# 
   183   000FAD                     TXREG           equ	4013	;# 
   184   000FAD                     TXREG1          equ	4013	;# 
   185   000FAE                     RCREG           equ	4014	;# 
   186   000FAE                     RCREG1          equ	4014	;# 
   187   000FAF                     SPBRG           equ	4015	;# 
   188   000FAF                     SPBRG1          equ	4015	;# 
   189   000FB0                     SPBRGH          equ	4016	;# 
   190   000FB1                     T3CON           equ	4017	;# 
   191   000FB2                     TMR3            equ	4018	;# 
   192   000FB2                     TMR3L           equ	4018	;# 
   193   000FB3                     TMR3H           equ	4019	;# 
   194   000FB4                     CMCON           equ	4020	;# 
   195   000FB5                     CVRCON          equ	4021	;# 
   196   000FB6                     ECCP1AS         equ	4022	;# 
   197   000FB7                     ECCP1DEL        equ	4023	;# 
   198   000FB7                     PWM1CON         equ	4023	;# 
   199   000FB8                     BAUDCON         equ	4024	;# 
   200   000FB8                     BAUDCTL         equ	4024	;# 
   201   000FBA                     CCP2CON         equ	4026	;# 
   202   000FBB                     CCPR2           equ	4027	;# 
   203   000FBB                     CCPR2L          equ	4027	;# 
   204   000FBC                     CCPR2H          equ	4028	;# 
   205   000FBD                     CCP1CON         equ	4029	;# 
   206   000FBD                     ECCP1CON        equ	4029	;# 
   207   000FBE                     CCPR1           equ	4030	;# 
   208   000FBE                     CCPR1L          equ	4030	;# 
   209   000FBF                     CCPR1H          equ	4031	;# 
   210   000FC0                     ADCON2          equ	4032	;# 
   211   000FC1                     ADCON1          equ	4033	;# 
   212   000FC2                     ADCON0          equ	4034	;# 
   213   000FC3                     ADRES           equ	4035	;# 
   214   000FC3                     ADRESL          equ	4035	;# 
   215   000FC4                     ADRESH          equ	4036	;# 
   216   000FC5                     SSPCON2         equ	4037	;# 
   217   000FC6                     SSPCON1         equ	4038	;# 
   218   000FC7                     SSPSTAT         equ	4039	;# 
   219   000FC8                     SSPADD          equ	4040	;# 
   220   000FC9                     SSPBUF          equ	4041	;# 
   221   000FCA                     T2CON           equ	4042	;# 
   222   000FCB                     PR2             equ	4043	;# 
   223   000FCB                     MEMCON          equ	4043	;# 
   224   000FCC                     TMR2            equ	4044	;# 
   225   000FCD                     T1CON           equ	4045	;# 
   226   000FCE                     TMR1            equ	4046	;# 
   227   000FCE                     TMR1L           equ	4046	;# 
   228   000FCF                     TMR1H           equ	4047	;# 
   229   000FD0                     RCON            equ	4048	;# 
   230   000FD1                     WDTCON          equ	4049	;# 
   231   000FD2                     HLVDCON         equ	4050	;# 
   232   000FD2                     LVDCON          equ	4050	;# 
   233   000FD3                     OSCCON          equ	4051	;# 
   234   000FD5                     T0CON           equ	4053	;# 
   235   000FD6                     TMR0            equ	4054	;# 
   236   000FD6                     TMR0L           equ	4054	;# 
   237   000FD7                     TMR0H           equ	4055	;# 
   238   000FD8                     STATUS          equ	4056	;# 
   239   000FD9                     FSR2            equ	4057	;# 
   240   000FD9                     FSR2L           equ	4057	;# 
   241   000FDA                     FSR2H           equ	4058	;# 
   242   000FDB                     PLUSW2          equ	4059	;# 
   243   000FDC                     PREINC2         equ	4060	;# 
   244   000FDD                     POSTDEC2        equ	4061	;# 
   245   000FDE                     POSTINC2        equ	4062	;# 
   246   000FDF                     INDF2           equ	4063	;# 
   247   000FE0                     BSR             equ	4064	;# 
   248   000FE1                     FSR1            equ	4065	;# 
   249   000FE1                     FSR1L           equ	4065	;# 
   250   000FE2                     FSR1H           equ	4066	;# 
   251   000FE3                     PLUSW1          equ	4067	;# 
   252   000FE4                     PREINC1         equ	4068	;# 
   253   000FE5                     POSTDEC1        equ	4069	;# 
   254   000FE6                     POSTINC1        equ	4070	;# 
   255   000FE7                     INDF1           equ	4071	;# 
   256   000FE8                     WREG            equ	4072	;# 
   257   000FE9                     FSR0            equ	4073	;# 
   258   000FE9                     FSR0L           equ	4073	;# 
   259   000FEA                     FSR0H           equ	4074	;# 
   260   000FEB                     PLUSW0          equ	4075	;# 
   261   000FEC                     PREINC0         equ	4076	;# 
   262   000FED                     POSTDEC0        equ	4077	;# 
   263   000FEE                     POSTINC0        equ	4078	;# 
   264   000FEF                     INDF0           equ	4079	;# 
   265   000FF0                     INTCON3         equ	4080	;# 
   266   000FF1                     INTCON2         equ	4081	;# 
   267   000FF2                     INTCON          equ	4082	;# 
   268   000FF3                     PROD            equ	4083	;# 
   269   000FF3                     PRODL           equ	4083	;# 
   270   000FF4                     PRODH           equ	4084	;# 
   271   000FF5                     TABLAT          equ	4085	;# 
   272   000FF6                     TBLPTR          equ	4086	;# 
   273   000FF6                     TBLPTRL         equ	4086	;# 
   274   000FF7                     TBLPTRH         equ	4087	;# 
   275   000FF8                     TBLPTRU         equ	4088	;# 
   276   000FF9                     PCLAT           equ	4089	;# 
   277   000FF9                     PC              equ	4089	;# 
   278   000FF9                     PCL             equ	4089	;# 
   279   000FFA                     PCLATH          equ	4090	;# 
   280   000FFB                     PCLATU          equ	4091	;# 
   281   000FFC                     STKPTR          equ	4092	;# 
   282   000FFD                     TOS             equ	4093	;# 
   283   000FFD                     TOSL            equ	4093	;# 
   284   000FFE                     TOSH            equ	4094	;# 
   285   000FFF                     TOSU            equ	4095	;# 
   286   000F80                     PORTA           equ	3968	;# 
   287   000F81                     PORTB           equ	3969	;# 
   288   000F82                     PORTC           equ	3970	;# 
   289   000F83                     PORTD           equ	3971	;# 
   290   000F84                     PORTE           equ	3972	;# 
   291   000F89                     LATA            equ	3977	;# 
   292   000F8A                     LATB            equ	3978	;# 
   293   000F8B                     LATC            equ	3979	;# 
   294   000F8C                     LATD            equ	3980	;# 
   295   000F8D                     LATE            equ	3981	;# 
   296   000F92                     TRISA           equ	3986	;# 
   297   000F92                     DDRA            equ	3986	;# 
   298   000F93                     TRISB           equ	3987	;# 
   299   000F93                     DDRB            equ	3987	;# 
   300   000F94                     TRISC           equ	3988	;# 
   301   000F94                     DDRC            equ	3988	;# 
   302   000F95                     TRISD           equ	3989	;# 
   303   000F95                     DDRD            equ	3989	;# 
   304   000F96                     TRISE           equ	3990	;# 
   305   000F96                     DDRE            equ	3990	;# 
   306   000F9B                     OSCTUNE         equ	3995	;# 
   307   000F9D                     PIE1            equ	3997	;# 
   308   000F9E                     PIR1            equ	3998	;# 
   309   000F9F                     IPR1            equ	3999	;# 
   310   000FA0                     PIE2            equ	4000	;# 
   311   000FA1                     PIR2            equ	4001	;# 
   312   000FA2                     IPR2            equ	4002	;# 
   313   000FA6                     EECON1          equ	4006	;# 
   314   000FA7                     EECON2          equ	4007	;# 
   315   000FA8                     EEDATA          equ	4008	;# 
   316   000FA9                     EEADR           equ	4009	;# 
   317   000FAB                     RCSTA           equ	4011	;# 
   318   000FAB                     RCSTA1          equ	4011	;# 
   319   000FAC                     TXSTA           equ	4012	;# 
   320   000FAC                     TXSTA1          equ	4012	;# 
   321   000FAD                     TXREG           equ	4013	;# 
   322   000FAD                     TXREG1          equ	4013	;# 
   323   000FAE                     RCREG           equ	4014	;# 
   324   000FAE                     RCREG1          equ	4014	;# 
   325   000FAF                     SPBRG           equ	4015	;# 
   326   000FAF                     SPBRG1          equ	4015	;# 
   327   000FB0                     SPBRGH          equ	4016	;# 
   328   000FB1                     T3CON           equ	4017	;# 
   329   000FB2                     TMR3            equ	4018	;# 
   330   000FB2                     TMR3L           equ	4018	;# 
   331   000FB3                     TMR3H           equ	4019	;# 
   332   000FB4                     CMCON           equ	4020	;# 
   333   000FB5                     CVRCON          equ	4021	;# 
   334   000FB6                     ECCP1AS         equ	4022	;# 
   335   000FB7                     ECCP1DEL        equ	4023	;# 
   336   000FB7                     PWM1CON         equ	4023	;# 
   337   000FB8                     BAUDCON         equ	4024	;# 
   338   000FB8                     BAUDCTL         equ	4024	;# 
   339   000FBA                     CCP2CON         equ	4026	;# 
   340   000FBB                     CCPR2           equ	4027	;# 
   341   000FBB                     CCPR2L          equ	4027	;# 
   342   000FBC                     CCPR2H          equ	4028	;# 
   343   000FBD                     CCP1CON         equ	4029	;# 
   344   000FBD                     ECCP1CON        equ	4029	;# 
   345   000FBE                     CCPR1           equ	4030	;# 
   346   000FBE                     CCPR1L          equ	4030	;# 
   347   000FBF                     CCPR1H          equ	4031	;# 
   348   000FC0                     ADCON2          equ	4032	;# 
   349   000FC1                     ADCON1          equ	4033	;# 
   350   000FC2                     ADCON0          equ	4034	;# 
   351   000FC3                     ADRES           equ	4035	;# 
   352   000FC3                     ADRESL          equ	4035	;# 
   353   000FC4                     ADRESH          equ	4036	;# 
   354   000FC5                     SSPCON2         equ	4037	;# 
   355   000FC6                     SSPCON1         equ	4038	;# 
   356   000FC7                     SSPSTAT         equ	4039	;# 
   357   000FC8                     SSPADD          equ	4040	;# 
   358   000FC9                     SSPBUF          equ	4041	;# 
   359   000FCA                     T2CON           equ	4042	;# 
   360   000FCB                     PR2             equ	4043	;# 
   361   000FCB                     MEMCON          equ	4043	;# 
   362   000FCC                     TMR2            equ	4044	;# 
   363   000FCD                     T1CON           equ	4045	;# 
   364   000FCE                     TMR1            equ	4046	;# 
   365   000FCE                     TMR1L           equ	4046	;# 
   366   000FCF                     TMR1H           equ	4047	;# 
   367   000FD0                     RCON            equ	4048	;# 
   368   000FD1                     WDTCON          equ	4049	;# 
   369   000FD2                     HLVDCON         equ	4050	;# 
   370   000FD2                     LVDCON          equ	4050	;# 
   371   000FD3                     OSCCON          equ	4051	;# 
   372   000FD5                     T0CON           equ	4053	;# 
   373   000FD6                     TMR0            equ	4054	;# 
   374   000FD6                     TMR0L           equ	4054	;# 
   375   000FD7                     TMR0H           equ	4055	;# 
   376   000FD8                     STATUS          equ	4056	;# 
   377   000FD9                     FSR2            equ	4057	;# 
   378   000FD9                     FSR2L           equ	4057	;# 
   379   000FDA                     FSR2H           equ	4058	;# 
   380   000FDB                     PLUSW2          equ	4059	;# 
   381   000FDC                     PREINC2         equ	4060	;# 
   382   000FDD                     POSTDEC2        equ	4061	;# 
   383   000FDE                     POSTINC2        equ	4062	;# 
   384   000FDF                     INDF2           equ	4063	;# 
   385   000FE0                     BSR             equ	4064	;# 
   386   000FE1                     FSR1            equ	4065	;# 
   387   000FE1                     FSR1L           equ	4065	;# 
   388   000FE2                     FSR1H           equ	4066	;# 
   389   000FE3                     PLUSW1          equ	4067	;# 
   390   000FE4                     PREINC1         equ	4068	;# 
   391   000FE5                     POSTDEC1        equ	4069	;# 
   392   000FE6                     POSTINC1        equ	4070	;# 
   393   000FE7                     INDF1           equ	4071	;# 
   394   000FE8                     WREG            equ	4072	;# 
   395   000FE9                     FSR0            equ	4073	;# 
   396   000FE9                     FSR0L           equ	4073	;# 
   397   000FEA                     FSR0H           equ	4074	;# 
   398   000FEB                     PLUSW0          equ	4075	;# 
   399   000FEC                     PREINC0         equ	4076	;# 
   400   000FED                     POSTDEC0        equ	4077	;# 
   401   000FEE                     POSTINC0        equ	4078	;# 
   402   000FEF                     INDF0           equ	4079	;# 
   403   000FF0                     INTCON3         equ	4080	;# 
   404   000FF1                     INTCON2         equ	4081	;# 
   405   000FF2                     INTCON          equ	4082	;# 
   406   000FF3                     PROD            equ	4083	;# 
   407   000FF3                     PRODL           equ	4083	;# 
   408   000FF4                     PRODH           equ	4084	;# 
   409   000FF5                     TABLAT          equ	4085	;# 
   410   000FF6                     TBLPTR          equ	4086	;# 
   411   000FF6                     TBLPTRL         equ	4086	;# 
   412   000FF7                     TBLPTRH         equ	4087	;# 
   413   000FF8                     TBLPTRU         equ	4088	;# 
   414   000FF9                     PCLAT           equ	4089	;# 
   415   000FF9                     PC              equ	4089	;# 
   416   000FF9                     PCL             equ	4089	;# 
   417   000FFA                     PCLATH          equ	4090	;# 
   418   000FFB                     PCLATU          equ	4091	;# 
   419   000FFC                     STKPTR          equ	4092	;# 
   420   000FFD                     TOS             equ	4093	;# 
   421   000FFD                     TOSL            equ	4093	;# 
   422   000FFE                     TOSH            equ	4094	;# 
   423   000FFF                     TOSU            equ	4095	;# 
   424   000F80                     PORTA           equ	3968	;# 
   425   000F81                     PORTB           equ	3969	;# 
   426   000F82                     PORTC           equ	3970	;# 
   427   000F83                     PORTD           equ	3971	;# 
   428   000F84                     PORTE           equ	3972	;# 
   429   000F89                     LATA            equ	3977	;# 
   430   000F8A                     LATB            equ	3978	;# 
   431   000F8B                     LATC            equ	3979	;# 
   432   000F8C                     LATD            equ	3980	;# 
   433   000F8D                     LATE            equ	3981	;# 
   434   000F92                     TRISA           equ	3986	;# 
   435   000F92                     DDRA            equ	3986	;# 
   436   000F93                     TRISB           equ	3987	;# 
   437   000F93                     DDRB            equ	3987	;# 
   438   000F94                     TRISC           equ	3988	;# 
   439   000F94                     DDRC            equ	3988	;# 
   440   000F95                     TRISD           equ	3989	;# 
   441   000F95                     DDRD            equ	3989	;# 
   442   000F96                     TRISE           equ	3990	;# 
   443   000F96                     DDRE            equ	3990	;# 
   444   000F9B                     OSCTUNE         equ	3995	;# 
   445   000F9D                     PIE1            equ	3997	;# 
   446   000F9E                     PIR1            equ	3998	;# 
   447   000F9F                     IPR1            equ	3999	;# 
   448   000FA0                     PIE2            equ	4000	;# 
   449   000FA1                     PIR2            equ	4001	;# 
   450   000FA2                     IPR2            equ	4002	;# 
   451   000FA6                     EECON1          equ	4006	;# 
   452   000FA7                     EECON2          equ	4007	;# 
   453   000FA8                     EEDATA          equ	4008	;# 
   454   000FA9                     EEADR           equ	4009	;# 
   455   000FAB                     RCSTA           equ	4011	;# 
   456   000FAB                     RCSTA1          equ	4011	;# 
   457   000FAC                     TXSTA           equ	4012	;# 
   458   000FAC                     TXSTA1          equ	4012	;# 
   459   000FAD                     TXREG           equ	4013	;# 
   460   000FAD                     TXREG1          equ	4013	;# 
   461   000FAE                     RCREG           equ	4014	;# 
   462   000FAE                     RCREG1          equ	4014	;# 
   463   000FAF                     SPBRG           equ	4015	;# 
   464   000FAF                     SPBRG1          equ	4015	;# 
   465   000FB0                     SPBRGH          equ	4016	;# 
   466   000FB1                     T3CON           equ	4017	;# 
   467   000FB2                     TMR3            equ	4018	;# 
   468   000FB2                     TMR3L           equ	4018	;# 
   469   000FB3                     TMR3H           equ	4019	;# 
   470   000FB4                     CMCON           equ	4020	;# 
   471   000FB5                     CVRCON          equ	4021	;# 
   472   000FB6                     ECCP1AS         equ	4022	;# 
   473   000FB7                     ECCP1DEL        equ	4023	;# 
   474   000FB7                     PWM1CON         equ	4023	;# 
   475   000FB8                     BAUDCON         equ	4024	;# 
   476   000FB8                     BAUDCTL         equ	4024	;# 
   477   000FBA                     CCP2CON         equ	4026	;# 
   478   000FBB                     CCPR2           equ	4027	;# 
   479   000FBB                     CCPR2L          equ	4027	;# 
   480   000FBC                     CCPR2H          equ	4028	;# 
   481   000FBD                     CCP1CON         equ	4029	;# 
   482   000FBD                     ECCP1CON        equ	4029	;# 
   483   000FBE                     CCPR1           equ	4030	;# 
   484   000FBE                     CCPR1L          equ	4030	;# 
   485   000FBF                     CCPR1H          equ	4031	;# 
   486   000FC0                     ADCON2          equ	4032	;# 
   487   000FC1                     ADCON1          equ	4033	;# 
   488   000FC2                     ADCON0          equ	4034	;# 
   489   000FC3                     ADRES           equ	4035	;# 
   490   000FC3                     ADRESL          equ	4035	;# 
   491   000FC4                     ADRESH          equ	4036	;# 
   492   000FC5                     SSPCON2         equ	4037	;# 
   493   000FC6                     SSPCON1         equ	4038	;# 
   494   000FC7                     SSPSTAT         equ	4039	;# 
   495   000FC8                     SSPADD          equ	4040	;# 
   496   000FC9                     SSPBUF          equ	4041	;# 
   497   000FCA                     T2CON           equ	4042	;# 
   498   000FCB                     PR2             equ	4043	;# 
   499   000FCB                     MEMCON          equ	4043	;# 
   500   000FCC                     TMR2            equ	4044	;# 
   501   000FCD                     T1CON           equ	4045	;# 
   502   000FCE                     TMR1            equ	4046	;# 
   503   000FCE                     TMR1L           equ	4046	;# 
   504   000FCF                     TMR1H           equ	4047	;# 
   505   000FD0                     RCON            equ	4048	;# 
   506   000FD1                     WDTCON          equ	4049	;# 
   507   000FD2                     HLVDCON         equ	4050	;# 
   508   000FD2                     LVDCON          equ	4050	;# 
   509   000FD3                     OSCCON          equ	4051	;# 
   510   000FD5                     T0CON           equ	4053	;# 
   511   000FD6                     TMR0            equ	4054	;# 
   512   000FD6                     TMR0L           equ	4054	;# 
   513   000FD7                     TMR0H           equ	4055	;# 
   514   000FD8                     STATUS          equ	4056	;# 
   515   000FD9                     FSR2            equ	4057	;# 
   516   000FD9                     FSR2L           equ	4057	;# 
   517   000FDA                     FSR2H           equ	4058	;# 
   518   000FDB                     PLUSW2          equ	4059	;# 
   519   000FDC                     PREINC2         equ	4060	;# 
   520   000FDD                     POSTDEC2        equ	4061	;# 
   521   000FDE                     POSTINC2        equ	4062	;# 
   522   000FDF                     INDF2           equ	4063	;# 
   523   000FE0                     BSR             equ	4064	;# 
   524   000FE1                     FSR1            equ	4065	;# 
   525   000FE1                     FSR1L           equ	4065	;# 
   526   000FE2                     FSR1H           equ	4066	;# 
   527   000FE3                     PLUSW1          equ	4067	;# 
   528   000FE4                     PREINC1         equ	4068	;# 
   529   000FE5                     POSTDEC1        equ	4069	;# 
   530   000FE6                     POSTINC1        equ	4070	;# 
   531   000FE7                     INDF1           equ	4071	;# 
   532   000FE8                     WREG            equ	4072	;# 
   533   000FE9                     FSR0            equ	4073	;# 
   534   000FE9                     FSR0L           equ	4073	;# 
   535   000FEA                     FSR0H           equ	4074	;# 
   536   000FEB                     PLUSW0          equ	4075	;# 
   537   000FEC                     PREINC0         equ	4076	;# 
   538   000FED                     POSTDEC0        equ	4077	;# 
   539   000FEE                     POSTINC0        equ	4078	;# 
   540   000FEF                     INDF0           equ	4079	;# 
   541   000FF0                     INTCON3         equ	4080	;# 
   542   000FF1                     INTCON2         equ	4081	;# 
   543   000FF2                     INTCON          equ	4082	;# 
   544   000FF3                     PROD            equ	4083	;# 
   545   000FF3                     PRODL           equ	4083	;# 
   546   000FF4                     PRODH           equ	4084	;# 
   547   000FF5                     TABLAT          equ	4085	;# 
   548   000FF6                     TBLPTR          equ	4086	;# 
   549   000FF6                     TBLPTRL         equ	4086	;# 
   550   000FF7                     TBLPTRH         equ	4087	;# 
   551   000FF8                     TBLPTRU         equ	4088	;# 
   552   000FF9                     PCLAT           equ	4089	;# 
   553   000FF9                     PC              equ	4089	;# 
   554   000FF9                     PCL             equ	4089	;# 
   555   000FFA                     PCLATH          equ	4090	;# 
   556   000FFB                     PCLATU          equ	4091	;# 
   557   000FFC                     STKPTR          equ	4092	;# 
   558   000FFD                     TOS             equ	4093	;# 
   559   000FFD                     TOSL            equ	4093	;# 
   560   000FFE                     TOSH            equ	4094	;# 
   561   000FFF                     TOSU            equ	4095	;# 
   562   000F80                     PORTA           equ	3968	;# 
   563   000F81                     PORTB           equ	3969	;# 
   564   000F82                     PORTC           equ	3970	;# 
   565   000F83                     PORTD           equ	3971	;# 
   566   000F84                     PORTE           equ	3972	;# 
   567   000F89                     LATA            equ	3977	;# 
   568   000F8A                     LATB            equ	3978	;# 
   569   000F8B                     LATC            equ	3979	;# 
   570   000F8C                     LATD            equ	3980	;# 
   571   000F8D                     LATE            equ	3981	;# 
   572   000F92                     TRISA           equ	3986	;# 
   573   000F92                     DDRA            equ	3986	;# 
   574   000F93                     TRISB           equ	3987	;# 
   575   000F93                     DDRB            equ	3987	;# 
   576   000F94                     TRISC           equ	3988	;# 
   577   000F94                     DDRC            equ	3988	;# 
   578   000F95                     TRISD           equ	3989	;# 
   579   000F95                     DDRD            equ	3989	;# 
   580   000F96                     TRISE           equ	3990	;# 
   581   000F96                     DDRE            equ	3990	;# 
   582   000F9B                     OSCTUNE         equ	3995	;# 
   583   000F9D                     PIE1            equ	3997	;# 
   584   000F9E                     PIR1            equ	3998	;# 
   585   000F9F                     IPR1            equ	3999	;# 
   586   000FA0                     PIE2            equ	4000	;# 
   587   000FA1                     PIR2            equ	4001	;# 
   588   000FA2                     IPR2            equ	4002	;# 
   589   000FA6                     EECON1          equ	4006	;# 
   590   000FA7                     EECON2          equ	4007	;# 
   591   000FA8                     EEDATA          equ	4008	;# 
   592   000FA9                     EEADR           equ	4009	;# 
   593   000FAB                     RCSTA           equ	4011	;# 
   594   000FAB                     RCSTA1          equ	4011	;# 
   595   000FAC                     TXSTA           equ	4012	;# 
   596   000FAC                     TXSTA1          equ	4012	;# 
   597   000FAD                     TXREG           equ	4013	;# 
   598   000FAD                     TXREG1          equ	4013	;# 
   599   000FAE                     RCREG           equ	4014	;# 
   600   000FAE                     RCREG1          equ	4014	;# 
   601   000FAF                     SPBRG           equ	4015	;# 
   602   000FAF                     SPBRG1          equ	4015	;# 
   603   000FB0                     SPBRGH          equ	4016	;# 
   604   000FB1                     T3CON           equ	4017	;# 
   605   000FB2                     TMR3            equ	4018	;# 
   606   000FB2                     TMR3L           equ	4018	;# 
   607   000FB3                     TMR3H           equ	4019	;# 
   608   000FB4                     CMCON           equ	4020	;# 
   609   000FB5                     CVRCON          equ	4021	;# 
   610   000FB6                     ECCP1AS         equ	4022	;# 
   611   000FB7                     ECCP1DEL        equ	4023	;# 
   612   000FB7                     PWM1CON         equ	4023	;# 
   613   000FB8                     BAUDCON         equ	4024	;# 
   614   000FB8                     BAUDCTL         equ	4024	;# 
   615   000FBA                     CCP2CON         equ	4026	;# 
   616   000FBB                     CCPR2           equ	4027	;# 
   617   000FBB                     CCPR2L          equ	4027	;# 
   618   000FBC                     CCPR2H          equ	4028	;# 
   619   000FBD                     CCP1CON         equ	4029	;# 
   620   000FBD                     ECCP1CON        equ	4029	;# 
   621   000FBE                     CCPR1           equ	4030	;# 
   622   000FBE                     CCPR1L          equ	4030	;# 
   623   000FBF                     CCPR1H          equ	4031	;# 
   624   000FC0                     ADCON2          equ	4032	;# 
   625   000FC1                     ADCON1          equ	4033	;# 
   626   000FC2                     ADCON0          equ	4034	;# 
   627   000FC3                     ADRES           equ	4035	;# 
   628   000FC3                     ADRESL          equ	4035	;# 
   629   000FC4                     ADRESH          equ	4036	;# 
   630   000FC5                     SSPCON2         equ	4037	;# 
   631   000FC6                     SSPCON1         equ	4038	;# 
   632   000FC7                     SSPSTAT         equ	4039	;# 
   633   000FC8                     SSPADD          equ	4040	;# 
   634   000FC9                     SSPBUF          equ	4041	;# 
   635   000FCA                     T2CON           equ	4042	;# 
   636   000FCB                     PR2             equ	4043	;# 
   637   000FCB                     MEMCON          equ	4043	;# 
   638   000FCC                     TMR2            equ	4044	;# 
   639   000FCD                     T1CON           equ	4045	;# 
   640   000FCE                     TMR1            equ	4046	;# 
   641   000FCE                     TMR1L           equ	4046	;# 
   642   000FCF                     TMR1H           equ	4047	;# 
   643   000FD0                     RCON            equ	4048	;# 
   644   000FD1                     WDTCON          equ	4049	;# 
   645   000FD2                     HLVDCON         equ	4050	;# 
   646   000FD2                     LVDCON          equ	4050	;# 
   647   000FD3                     OSCCON          equ	4051	;# 
   648   000FD5                     T0CON           equ	4053	;# 
   649   000FD6                     TMR0            equ	4054	;# 
   650   000FD6                     TMR0L           equ	4054	;# 
   651   000FD7                     TMR0H           equ	4055	;# 
   652   000FD8                     STATUS          equ	4056	;# 
   653   000FD9                     FSR2            equ	4057	;# 
   654   000FD9                     FSR2L           equ	4057	;# 
   655   000FDA                     FSR2H           equ	4058	;# 
   656   000FDB                     PLUSW2          equ	4059	;# 
   657   000FDC                     PREINC2         equ	4060	;# 
   658   000FDD                     POSTDEC2        equ	4061	;# 
   659   000FDE                     POSTINC2        equ	4062	;# 
   660   000FDF                     INDF2           equ	4063	;# 
   661   000FE0                     BSR             equ	4064	;# 
   662   000FE1                     FSR1            equ	4065	;# 
   663   000FE1                     FSR1L           equ	4065	;# 
   664   000FE2                     FSR1H           equ	4066	;# 
   665   000FE3                     PLUSW1          equ	4067	;# 
   666   000FE4                     PREINC1         equ	4068	;# 
   667   000FE5                     POSTDEC1        equ	4069	;# 
   668   000FE6                     POSTINC1        equ	4070	;# 
   669   000FE7                     INDF1           equ	4071	;# 
   670   000FE8                     WREG            equ	4072	;# 
   671   000FE9                     FSR0            equ	4073	;# 
   672   000FE9                     FSR0L           equ	4073	;# 
   673   000FEA                     FSR0H           equ	4074	;# 
   674   000FEB                     PLUSW0          equ	4075	;# 
   675   000FEC                     PREINC0         equ	4076	;# 
   676   000FED                     POSTDEC0        equ	4077	;# 
   677   000FEE                     POSTINC0        equ	4078	;# 
   678   000FEF                     INDF0           equ	4079	;# 
   679   000FF0                     INTCON3         equ	4080	;# 
   680   000FF1                     INTCON2         equ	4081	;# 
   681   000FF2                     INTCON          equ	4082	;# 
   682   000FF3                     PROD            equ	4083	;# 
   683   000FF3                     PRODL           equ	4083	;# 
   684   000FF4                     PRODH           equ	4084	;# 
   685   000FF5                     TABLAT          equ	4085	;# 
   686   000FF6                     TBLPTR          equ	4086	;# 
   687   000FF6                     TBLPTRL         equ	4086	;# 
   688   000FF7                     TBLPTRH         equ	4087	;# 
   689   000FF8                     TBLPTRU         equ	4088	;# 
   690   000FF9                     PCLAT           equ	4089	;# 
   691   000FF9                     PC              equ	4089	;# 
   692   000FF9                     PCL             equ	4089	;# 
   693   000FFA                     PCLATH          equ	4090	;# 
   694   000FFB                     PCLATU          equ	4091	;# 
   695   000FFC                     STKPTR          equ	4092	;# 
   696   000FFD                     TOS             equ	4093	;# 
   697   000FFD                     TOSL            equ	4093	;# 
   698   000FFE                     TOSH            equ	4094	;# 
   699   000FFF                     TOSU            equ	4095	;# 
   700   000F80                     PORTA           equ	3968	;# 
   701   000F81                     PORTB           equ	3969	;# 
   702   000F82                     PORTC           equ	3970	;# 
   703   000F83                     PORTD           equ	3971	;# 
   704   000F84                     PORTE           equ	3972	;# 
   705   000F89                     LATA            equ	3977	;# 
   706   000F8A                     LATB            equ	3978	;# 
   707   000F8B                     LATC            equ	3979	;# 
   708   000F8C                     LATD            equ	3980	;# 
   709   000F8D                     LATE            equ	3981	;# 
   710   000F92                     TRISA           equ	3986	;# 
   711   000F92                     DDRA            equ	3986	;# 
   712   000F93                     TRISB           equ	3987	;# 
   713   000F93                     DDRB            equ	3987	;# 
   714   000F94                     TRISC           equ	3988	;# 
   715   000F94                     DDRC            equ	3988	;# 
   716   000F95                     TRISD           equ	3989	;# 
   717   000F95                     DDRD            equ	3989	;# 
   718   000F96                     TRISE           equ	3990	;# 
   719   000F96                     DDRE            equ	3990	;# 
   720   000F9B                     OSCTUNE         equ	3995	;# 
   721   000F9D                     PIE1            equ	3997	;# 
   722   000F9E                     PIR1            equ	3998	;# 
   723   000F9F                     IPR1            equ	3999	;# 
   724   000FA0                     PIE2            equ	4000	;# 
   725   000FA1                     PIR2            equ	4001	;# 
   726   000FA2                     IPR2            equ	4002	;# 
   727   000FA6                     EECON1          equ	4006	;# 
   728   000FA7                     EECON2          equ	4007	;# 
   729   000FA8                     EEDATA          equ	4008	;# 
   730   000FA9                     EEADR           equ	4009	;# 
   731   000FAB                     RCSTA           equ	4011	;# 
   732   000FAB                     RCSTA1          equ	4011	;# 
   733   000FAC                     TXSTA           equ	4012	;# 
   734   000FAC                     TXSTA1          equ	4012	;# 
   735   000FAD                     TXREG           equ	4013	;# 
   736   000FAD                     TXREG1          equ	4013	;# 
   737   000FAE                     RCREG           equ	4014	;# 
   738   000FAE                     RCREG1          equ	4014	;# 
   739   000FAF                     SPBRG           equ	4015	;# 
   740   000FAF                     SPBRG1          equ	4015	;# 
   741   000FB0                     SPBRGH          equ	4016	;# 
   742   000FB1                     T3CON           equ	4017	;# 
   743   000FB2                     TMR3            equ	4018	;# 
   744   000FB2                     TMR3L           equ	4018	;# 
   745   000FB3                     TMR3H           equ	4019	;# 
   746   000FB4                     CMCON           equ	4020	;# 
   747   000FB5                     CVRCON          equ	4021	;# 
   748   000FB6                     ECCP1AS         equ	4022	;# 
   749   000FB7                     ECCP1DEL        equ	4023	;# 
   750   000FB7                     PWM1CON         equ	4023	;# 
   751   000FB8                     BAUDCON         equ	4024	;# 
   752   000FB8                     BAUDCTL         equ	4024	;# 
   753   000FBA                     CCP2CON         equ	4026	;# 
   754   000FBB                     CCPR2           equ	4027	;# 
   755   000FBB                     CCPR2L          equ	4027	;# 
   756   000FBC                     CCPR2H          equ	4028	;# 
   757   000FBD                     CCP1CON         equ	4029	;# 
   758   000FBD                     ECCP1CON        equ	4029	;# 
   759   000FBE                     CCPR1           equ	4030	;# 
   760   000FBE                     CCPR1L          equ	4030	;# 
   761   000FBF                     CCPR1H          equ	4031	;# 
   762   000FC0                     ADCON2          equ	4032	;# 
   763   000FC1                     ADCON1          equ	4033	;# 
   764   000FC2                     ADCON0          equ	4034	;# 
   765   000FC3                     ADRES           equ	4035	;# 
   766   000FC3                     ADRESL          equ	4035	;# 
   767   000FC4                     ADRESH          equ	4036	;# 
   768   000FC5                     SSPCON2         equ	4037	;# 
   769   000FC6                     SSPCON1         equ	4038	;# 
   770   000FC7                     SSPSTAT         equ	4039	;# 
   771   000FC8                     SSPADD          equ	4040	;# 
   772   000FC9                     SSPBUF          equ	4041	;# 
   773   000FCA                     T2CON           equ	4042	;# 
   774   000FCB                     PR2             equ	4043	;# 
   775   000FCB                     MEMCON          equ	4043	;# 
   776   000FCC                     TMR2            equ	4044	;# 
   777   000FCD                     T1CON           equ	4045	;# 
   778   000FCE                     TMR1            equ	4046	;# 
   779   000FCE                     TMR1L           equ	4046	;# 
   780   000FCF                     TMR1H           equ	4047	;# 
   781   000FD0                     RCON            equ	4048	;# 
   782   000FD1                     WDTCON          equ	4049	;# 
   783   000FD2                     HLVDCON         equ	4050	;# 
   784   000FD2                     LVDCON          equ	4050	;# 
   785   000FD3                     OSCCON          equ	4051	;# 
   786   000FD5                     T0CON           equ	4053	;# 
   787   000FD6                     TMR0            equ	4054	;# 
   788   000FD6                     TMR0L           equ	4054	;# 
   789   000FD7                     TMR0H           equ	4055	;# 
   790   000FD8                     STATUS          equ	4056	;# 
   791   000FD9                     FSR2            equ	4057	;# 
   792   000FD9                     FSR2L           equ	4057	;# 
   793   000FDA                     FSR2H           equ	4058	;# 
   794   000FDB                     PLUSW2          equ	4059	;# 
   795   000FDC                     PREINC2         equ	4060	;# 
   796   000FDD                     POSTDEC2        equ	4061	;# 
   797   000FDE                     POSTINC2        equ	4062	;# 
   798   000FDF                     INDF2           equ	4063	;# 
   799   000FE0                     BSR             equ	4064	;# 
   800   000FE1                     FSR1            equ	4065	;# 
   801   000FE1                     FSR1L           equ	4065	;# 
   802   000FE2                     FSR1H           equ	4066	;# 
   803   000FE3                     PLUSW1          equ	4067	;# 
   804   000FE4                     PREINC1         equ	4068	;# 
   805   000FE5                     POSTDEC1        equ	4069	;# 
   806   000FE6                     POSTINC1        equ	4070	;# 
   807   000FE7                     INDF1           equ	4071	;# 
   808   000FE8                     WREG            equ	4072	;# 
   809   000FE9                     FSR0            equ	4073	;# 
   810   000FE9                     FSR0L           equ	4073	;# 
   811   000FEA                     FSR0H           equ	4074	;# 
   812   000FEB                     PLUSW0          equ	4075	;# 
   813   000FEC                     PREINC0         equ	4076	;# 
   814   000FED                     POSTDEC0        equ	4077	;# 
   815   000FEE                     POSTINC0        equ	4078	;# 
   816   000FEF                     INDF0           equ	4079	;# 
   817   000FF0                     INTCON3         equ	4080	;# 
   818   000FF1                     INTCON2         equ	4081	;# 
   819   000FF2                     INTCON          equ	4082	;# 
   820   000FF3                     PROD            equ	4083	;# 
   821   000FF3                     PRODL           equ	4083	;# 
   822   000FF4                     PRODH           equ	4084	;# 
   823   000FF5                     TABLAT          equ	4085	;# 
   824   000FF6                     TBLPTR          equ	4086	;# 
   825   000FF6                     TBLPTRL         equ	4086	;# 
   826   000FF7                     TBLPTRH         equ	4087	;# 
   827   000FF8                     TBLPTRU         equ	4088	;# 
   828   000FF9                     PCLAT           equ	4089	;# 
   829   000FF9                     PC              equ	4089	;# 
   830   000FF9                     PCL             equ	4089	;# 
   831   000FFA                     PCLATH          equ	4090	;# 
   832   000FFB                     PCLATU          equ	4091	;# 
   833   000FFC                     STKPTR          equ	4092	;# 
   834   000FFD                     TOS             equ	4093	;# 
   835   000FFD                     TOSL            equ	4093	;# 
   836   000FFE                     TOSH            equ	4094	;# 
   837   000FFF                     TOSU            equ	4095	;# 
   838   000F80                     PORTA           equ	3968	;# 
   839   000F81                     PORTB           equ	3969	;# 
   840   000F82                     PORTC           equ	3970	;# 
   841   000F83                     PORTD           equ	3971	;# 
   842   000F84                     PORTE           equ	3972	;# 
   843   000F89                     LATA            equ	3977	;# 
   844   000F8A                     LATB            equ	3978	;# 
   845   000F8B                     LATC            equ	3979	;# 
   846   000F8C                     LATD            equ	3980	;# 
   847   000F8D                     LATE            equ	3981	;# 
   848   000F92                     TRISA           equ	3986	;# 
   849   000F92                     DDRA            equ	3986	;# 
   850   000F93                     TRISB           equ	3987	;# 
   851   000F93                     DDRB            equ	3987	;# 
   852   000F94                     TRISC           equ	3988	;# 
   853   000F94                     DDRC            equ	3988	;# 
   854   000F95                     TRISD           equ	3989	;# 
   855   000F95                     DDRD            equ	3989	;# 
   856   000F96                     TRISE           equ	3990	;# 
   857   000F96                     DDRE            equ	3990	;# 
   858   000F9B                     OSCTUNE         equ	3995	;# 
   859   000F9D                     PIE1            equ	3997	;# 
   860   000F9E                     PIR1            equ	3998	;# 
   861   000F9F                     IPR1            equ	3999	;# 
   862   000FA0                     PIE2            equ	4000	;# 
   863   000FA1                     PIR2            equ	4001	;# 
   864   000FA2                     IPR2            equ	4002	;# 
   865   000FA6                     EECON1          equ	4006	;# 
   866   000FA7                     EECON2          equ	4007	;# 
   867   000FA8                     EEDATA          equ	4008	;# 
   868   000FA9                     EEADR           equ	4009	;# 
   869   000FAB                     RCSTA           equ	4011	;# 
   870   000FAB                     RCSTA1          equ	4011	;# 
   871   000FAC                     TXSTA           equ	4012	;# 
   872   000FAC                     TXSTA1          equ	4012	;# 
   873   000FAD                     TXREG           equ	4013	;# 
   874   000FAD                     TXREG1          equ	4013	;# 
   875   000FAE                     RCREG           equ	4014	;# 
   876   000FAE                     RCREG1          equ	4014	;# 
   877   000FAF                     SPBRG           equ	4015	;# 
   878   000FAF                     SPBRG1          equ	4015	;# 
   879   000FB0                     SPBRGH          equ	4016	;# 
   880   000FB1                     T3CON           equ	4017	;# 
   881   000FB2                     TMR3            equ	4018	;# 
   882   000FB2                     TMR3L           equ	4018	;# 
   883   000FB3                     TMR3H           equ	4019	;# 
   884   000FB4                     CMCON           equ	4020	;# 
   885   000FB5                     CVRCON          equ	4021	;# 
   886   000FB6                     ECCP1AS         equ	4022	;# 
   887   000FB7                     ECCP1DEL        equ	4023	;# 
   888   000FB7                     PWM1CON         equ	4023	;# 
   889   000FB8                     BAUDCON         equ	4024	;# 
   890   000FB8                     BAUDCTL         equ	4024	;# 
   891   000FBA                     CCP2CON         equ	4026	;# 
   892   000FBB                     CCPR2           equ	4027	;# 
   893   000FBB                     CCPR2L          equ	4027	;# 
   894   000FBC                     CCPR2H          equ	4028	;# 
   895   000FBD                     CCP1CON         equ	4029	;# 
   896   000FBD                     ECCP1CON        equ	4029	;# 
   897   000FBE                     CCPR1           equ	4030	;# 
   898   000FBE                     CCPR1L          equ	4030	;# 
   899   000FBF                     CCPR1H          equ	4031	;# 
   900   000FC0                     ADCON2          equ	4032	;# 
   901   000FC1                     ADCON1          equ	4033	;# 
   902   000FC2                     ADCON0          equ	4034	;# 
   903   000FC3                     ADRES           equ	4035	;# 
   904   000FC3                     ADRESL          equ	4035	;# 
   905   000FC4                     ADRESH          equ	4036	;# 
   906   000FC5                     SSPCON2         equ	4037	;# 
   907   000FC6                     SSPCON1         equ	4038	;# 
   908   000FC7                     SSPSTAT         equ	4039	;# 
   909   000FC8                     SSPADD          equ	4040	;# 
   910   000FC9                     SSPBUF          equ	4041	;# 
   911   000FCA                     T2CON           equ	4042	;# 
   912   000FCB                     PR2             equ	4043	;# 
   913   000FCB                     MEMCON          equ	4043	;# 
   914   000FCC                     TMR2            equ	4044	;# 
   915   000FCD                     T1CON           equ	4045	;# 
   916   000FCE                     TMR1            equ	4046	;# 
   917   000FCE                     TMR1L           equ	4046	;# 
   918   000FCF                     TMR1H           equ	4047	;# 
   919   000FD0                     RCON            equ	4048	;# 
   920   000FD1                     WDTCON          equ	4049	;# 
   921   000FD2                     HLVDCON         equ	4050	;# 
   922   000FD2                     LVDCON          equ	4050	;# 
   923   000FD3                     OSCCON          equ	4051	;# 
   924   000FD5                     T0CON           equ	4053	;# 
   925   000FD6                     TMR0            equ	4054	;# 
   926   000FD6                     TMR0L           equ	4054	;# 
   927   000FD7                     TMR0H           equ	4055	;# 
   928   000FD8                     STATUS          equ	4056	;# 
   929   000FD9                     FSR2            equ	4057	;# 
   930   000FD9                     FSR2L           equ	4057	;# 
   931   000FDA                     FSR2H           equ	4058	;# 
   932   000FDB                     PLUSW2          equ	4059	;# 
   933   000FDC                     PREINC2         equ	4060	;# 
   934   000FDD                     POSTDEC2        equ	4061	;# 
   935   000FDE                     POSTINC2        equ	4062	;# 
   936   000FDF                     INDF2           equ	4063	;# 
   937   000FE0                     BSR             equ	4064	;# 
   938   000FE1                     FSR1            equ	4065	;# 
   939   000FE1                     FSR1L           equ	4065	;# 
   940   000FE2                     FSR1H           equ	4066	;# 
   941   000FE3                     PLUSW1          equ	4067	;# 
   942   000FE4                     PREINC1         equ	4068	;# 
   943   000FE5                     POSTDEC1        equ	4069	;# 
   944   000FE6                     POSTINC1        equ	4070	;# 
   945   000FE7                     INDF1           equ	4071	;# 
   946   000FE8                     WREG            equ	4072	;# 
   947   000FE9                     FSR0            equ	4073	;# 
   948   000FE9                     FSR0L           equ	4073	;# 
   949   000FEA                     FSR0H           equ	4074	;# 
   950   000FEB                     PLUSW0          equ	4075	;# 
   951   000FEC                     PREINC0         equ	4076	;# 
   952   000FED                     POSTDEC0        equ	4077	;# 
   953   000FEE                     POSTINC0        equ	4078	;# 
   954   000FEF                     INDF0           equ	4079	;# 
   955   000FF0                     INTCON3         equ	4080	;# 
   956   000FF1                     INTCON2         equ	4081	;# 
   957   000FF2                     INTCON          equ	4082	;# 
   958   000FF3                     PROD            equ	4083	;# 
   959   000FF3                     PRODL           equ	4083	;# 
   960   000FF4                     PRODH           equ	4084	;# 
   961   000FF5                     TABLAT          equ	4085	;# 
   962   000FF6                     TBLPTR          equ	4086	;# 
   963   000FF6                     TBLPTRL         equ	4086	;# 
   964   000FF7                     TBLPTRH         equ	4087	;# 
   965   000FF8                     TBLPTRU         equ	4088	;# 
   966   000FF9                     PCLAT           equ	4089	;# 
   967   000FF9                     PC              equ	4089	;# 
   968   000FF9                     PCL             equ	4089	;# 
   969   000FFA                     PCLATH          equ	4090	;# 
   970   000FFB                     PCLATU          equ	4091	;# 
   971   000FFC                     STKPTR          equ	4092	;# 
   972   000FFD                     TOS             equ	4093	;# 
   973   000FFD                     TOSL            equ	4093	;# 
   974   000FFE                     TOSH            equ	4094	;# 
   975   000FFF                     TOSU            equ	4095	;# 
   976   000F80                     PORTA           equ	3968	;# 
   977   000F81                     PORTB           equ	3969	;# 
   978   000F82                     PORTC           equ	3970	;# 
   979   000F83                     PORTD           equ	3971	;# 
   980   000F84                     PORTE           equ	3972	;# 
   981   000F89                     LATA            equ	3977	;# 
   982   000F8A                     LATB            equ	3978	;# 
   983   000F8B                     LATC            equ	3979	;# 
   984   000F8C                     LATD            equ	3980	;# 
   985   000F8D                     LATE            equ	3981	;# 
   986   000F92                     TRISA           equ	3986	;# 
   987   000F92                     DDRA            equ	3986	;# 
   988   000F93                     TRISB           equ	3987	;# 
   989   000F93                     DDRB            equ	3987	;# 
   990   000F94                     TRISC           equ	3988	;# 
   991   000F94                     DDRC            equ	3988	;# 
   992   000F95                     TRISD           equ	3989	;# 
   993   000F95                     DDRD            equ	3989	;# 
   994   000F96                     TRISE           equ	3990	;# 
   995   000F96                     DDRE            equ	3990	;# 
   996   000F9B                     OSCTUNE         equ	3995	;# 
   997   000F9D                     PIE1            equ	3997	;# 
   998   000F9E                     PIR1            equ	3998	;# 
   999   000F9F                     IPR1            equ	3999	;# 
  1000   000FA0                     PIE2            equ	4000	;# 
  1001   000FA1                     PIR2            equ	4001	;# 
  1002   000FA2                     IPR2            equ	4002	;# 
  1003   000FA6                     EECON1          equ	4006	;# 
  1004   000FA7                     EECON2          equ	4007	;# 
  1005   000FA8                     EEDATA          equ	4008	;# 
  1006   000FA9                     EEADR           equ	4009	;# 
  1007   000FAB                     RCSTA           equ	4011	;# 
  1008   000FAB                     RCSTA1          equ	4011	;# 
  1009   000FAC                     TXSTA           equ	4012	;# 
  1010   000FAC                     TXSTA1          equ	4012	;# 
  1011   000FAD                     TXREG           equ	4013	;# 
  1012   000FAD                     TXREG1          equ	4013	;# 
  1013   000FAE                     RCREG           equ	4014	;# 
  1014   000FAE                     RCREG1          equ	4014	;# 
  1015   000FAF                     SPBRG           equ	4015	;# 
  1016   000FAF                     SPBRG1          equ	4015	;# 
  1017   000FB0                     SPBRGH          equ	4016	;# 
  1018   000FB1                     T3CON           equ	4017	;# 
  1019   000FB2                     TMR3            equ	4018	;# 
  1020   000FB2                     TMR3L           equ	4018	;# 
  1021   000FB3                     TMR3H           equ	4019	;# 
  1022   000FB4                     CMCON           equ	4020	;# 
  1023   000FB5                     CVRCON          equ	4021	;# 
  1024   000FB6                     ECCP1AS         equ	4022	;# 
  1025   000FB7                     ECCP1DEL        equ	4023	;# 
  1026   000FB7                     PWM1CON         equ	4023	;# 
  1027   000FB8                     BAUDCON         equ	4024	;# 
  1028   000FB8                     BAUDCTL         equ	4024	;# 
  1029   000FBA                     CCP2CON         equ	4026	;# 
  1030   000FBB                     CCPR2           equ	4027	;# 
  1031   000FBB                     CCPR2L          equ	4027	;# 
  1032   000FBC                     CCPR2H          equ	4028	;# 
  1033   000FBD                     CCP1CON         equ	4029	;# 
  1034   000FBD                     ECCP1CON        equ	4029	;# 
  1035   000FBE                     CCPR1           equ	4030	;# 
  1036   000FBE                     CCPR1L          equ	4030	;# 
  1037   000FBF                     CCPR1H          equ	4031	;# 
  1038   000FC0                     ADCON2          equ	4032	;# 
  1039   000FC1                     ADCON1          equ	4033	;# 
  1040   000FC2                     ADCON0          equ	4034	;# 
  1041   000FC3                     ADRES           equ	4035	;# 
  1042   000FC3                     ADRESL          equ	4035	;# 
  1043   000FC4                     ADRESH          equ	4036	;# 
  1044   000FC5                     SSPCON2         equ	4037	;# 
  1045   000FC6                     SSPCON1         equ	4038	;# 
  1046   000FC7                     SSPSTAT         equ	4039	;# 
  1047   000FC8                     SSPADD          equ	4040	;# 
  1048   000FC9                     SSPBUF          equ	4041	;# 
  1049   000FCA                     T2CON           equ	4042	;# 
  1050   000FCB                     PR2             equ	4043	;# 
  1051   000FCB                     MEMCON          equ	4043	;# 
  1052   000FCC                     TMR2            equ	4044	;# 
  1053   000FCD                     T1CON           equ	4045	;# 
  1054   000FCE                     TMR1            equ	4046	;# 
  1055   000FCE                     TMR1L           equ	4046	;# 
  1056   000FCF                     TMR1H           equ	4047	;# 
  1057   000FD0                     RCON            equ	4048	;# 
  1058   000FD1                     WDTCON          equ	4049	;# 
  1059   000FD2                     HLVDCON         equ	4050	;# 
  1060   000FD2                     LVDCON          equ	4050	;# 
  1061   000FD3                     OSCCON          equ	4051	;# 
  1062   000FD5                     T0CON           equ	4053	;# 
  1063   000FD6                     TMR0            equ	4054	;# 
  1064   000FD6                     TMR0L           equ	4054	;# 
  1065   000FD7                     TMR0H           equ	4055	;# 
  1066   000FD8                     STATUS          equ	4056	;# 
  1067   000FD9                     FSR2            equ	4057	;# 
  1068   000FD9                     FSR2L           equ	4057	;# 
  1069   000FDA                     FSR2H           equ	4058	;# 
  1070   000FDB                     PLUSW2          equ	4059	;# 
  1071   000FDC                     PREINC2         equ	4060	;# 
  1072   000FDD                     POSTDEC2        equ	4061	;# 
  1073   000FDE                     POSTINC2        equ	4062	;# 
  1074   000FDF                     INDF2           equ	4063	;# 
  1075   000FE0                     BSR             equ	4064	;# 
  1076   000FE1                     FSR1            equ	4065	;# 
  1077   000FE1                     FSR1L           equ	4065	;# 
  1078   000FE2                     FSR1H           equ	4066	;# 
  1079   000FE3                     PLUSW1          equ	4067	;# 
  1080   000FE4                     PREINC1         equ	4068	;# 
  1081   000FE5                     POSTDEC1        equ	4069	;# 
  1082   000FE6                     POSTINC1        equ	4070	;# 
  1083   000FE7                     INDF1           equ	4071	;# 
  1084   000FE8                     WREG            equ	4072	;# 
  1085   000FE9                     FSR0            equ	4073	;# 
  1086   000FE9                     FSR0L           equ	4073	;# 
  1087   000FEA                     FSR0H           equ	4074	;# 
  1088   000FEB                     PLUSW0          equ	4075	;# 
  1089   000FEC                     PREINC0         equ	4076	;# 
  1090   000FED                     POSTDEC0        equ	4077	;# 
  1091   000FEE                     POSTINC0        equ	4078	;# 
  1092   000FEF                     INDF0           equ	4079	;# 
  1093   000FF0                     INTCON3         equ	4080	;# 
  1094   000FF1                     INTCON2         equ	4081	;# 
  1095   000FF2                     INTCON          equ	4082	;# 
  1096   000FF3                     PROD            equ	4083	;# 
  1097   000FF3                     PRODL           equ	4083	;# 
  1098   000FF4                     PRODH           equ	4084	;# 
  1099   000FF5                     TABLAT          equ	4085	;# 
  1100   000FF6                     TBLPTR          equ	4086	;# 
  1101   000FF6                     TBLPTRL         equ	4086	;# 
  1102   000FF7                     TBLPTRH         equ	4087	;# 
  1103   000FF8                     TBLPTRU         equ	4088	;# 
  1104   000FF9                     PCLAT           equ	4089	;# 
  1105   000FF9                     PC              equ	4089	;# 
  1106   000FF9                     PCL             equ	4089	;# 
  1107   000FFA                     PCLATH          equ	4090	;# 
  1108   000FFB                     PCLATU          equ	4091	;# 
  1109   000FFC                     STKPTR          equ	4092	;# 
  1110   000FFD                     TOS             equ	4093	;# 
  1111   000FFD                     TOSL            equ	4093	;# 
  1112   000FFE                     TOSH            equ	4094	;# 
  1113   000FFF                     TOSU            equ	4095	;# 
  1114   000F80                     PORTA           equ	3968	;# 
  1115   000F81                     PORTB           equ	3969	;# 
  1116   000F82                     PORTC           equ	3970	;# 
  1117   000F83                     PORTD           equ	3971	;# 
  1118   000F84                     PORTE           equ	3972	;# 
  1119   000F89                     LATA            equ	3977	;# 
  1120   000F8A                     LATB            equ	3978	;# 
  1121   000F8B                     LATC            equ	3979	;# 
  1122   000F8C                     LATD            equ	3980	;# 
  1123   000F8D                     LATE            equ	3981	;# 
  1124   000F92                     TRISA           equ	3986	;# 
  1125   000F92                     DDRA            equ	3986	;# 
  1126   000F93                     TRISB           equ	3987	;# 
  1127   000F93                     DDRB            equ	3987	;# 
  1128   000F94                     TRISC           equ	3988	;# 
  1129   000F94                     DDRC            equ	3988	;# 
  1130   000F95                     TRISD           equ	3989	;# 
  1131   000F95                     DDRD            equ	3989	;# 
  1132   000F96                     TRISE           equ	3990	;# 
  1133   000F96                     DDRE            equ	3990	;# 
  1134   000F9B                     OSCTUNE         equ	3995	;# 
  1135   000F9D                     PIE1            equ	3997	;# 
  1136   000F9E                     PIR1            equ	3998	;# 
  1137   000F9F                     IPR1            equ	3999	;# 
  1138   000FA0                     PIE2            equ	4000	;# 
  1139   000FA1                     PIR2            equ	4001	;# 
  1140   000FA2                     IPR2            equ	4002	;# 
  1141   000FA6                     EECON1          equ	4006	;# 
  1142   000FA7                     EECON2          equ	4007	;# 
  1143   000FA8                     EEDATA          equ	4008	;# 
  1144   000FA9                     EEADR           equ	4009	;# 
  1145   000FAB                     RCSTA           equ	4011	;# 
  1146   000FAB                     RCSTA1          equ	4011	;# 
  1147   000FAC                     TXSTA           equ	4012	;# 
  1148   000FAC                     TXSTA1          equ	4012	;# 
  1149   000FAD                     TXREG           equ	4013	;# 
  1150   000FAD                     TXREG1          equ	4013	;# 
  1151   000FAE                     RCREG           equ	4014	;# 
  1152   000FAE                     RCREG1          equ	4014	;# 
  1153   000FAF                     SPBRG           equ	4015	;# 
  1154   000FAF                     SPBRG1          equ	4015	;# 
  1155   000FB0                     SPBRGH          equ	4016	;# 
  1156   000FB1                     T3CON           equ	4017	;# 
  1157   000FB2                     TMR3            equ	4018	;# 
  1158   000FB2                     TMR3L           equ	4018	;# 
  1159   000FB3                     TMR3H           equ	4019	;# 
  1160   000FB4                     CMCON           equ	4020	;# 
  1161   000FB5                     CVRCON          equ	4021	;# 
  1162   000FB6                     ECCP1AS         equ	4022	;# 
  1163   000FB7                     ECCP1DEL        equ	4023	;# 
  1164   000FB7                     PWM1CON         equ	4023	;# 
  1165   000FB8                     BAUDCON         equ	4024	;# 
  1166   000FB8                     BAUDCTL         equ	4024	;# 
  1167   000FBA                     CCP2CON         equ	4026	;# 
  1168   000FBB                     CCPR2           equ	4027	;# 
  1169   000FBB                     CCPR2L          equ	4027	;# 
  1170   000FBC                     CCPR2H          equ	4028	;# 
  1171   000FBD                     CCP1CON         equ	4029	;# 
  1172   000FBD                     ECCP1CON        equ	4029	;# 
  1173   000FBE                     CCPR1           equ	4030	;# 
  1174   000FBE                     CCPR1L          equ	4030	;# 
  1175   000FBF                     CCPR1H          equ	4031	;# 
  1176   000FC0                     ADCON2          equ	4032	;# 
  1177   000FC1                     ADCON1          equ	4033	;# 
  1178   000FC2                     ADCON0          equ	4034	;# 
  1179   000FC3                     ADRES           equ	4035	;# 
  1180   000FC3                     ADRESL          equ	4035	;# 
  1181   000FC4                     ADRESH          equ	4036	;# 
  1182   000FC5                     SSPCON2         equ	4037	;# 
  1183   000FC6                     SSPCON1         equ	4038	;# 
  1184   000FC7                     SSPSTAT         equ	4039	;# 
  1185   000FC8                     SSPADD          equ	4040	;# 
  1186   000FC9                     SSPBUF          equ	4041	;# 
  1187   000FCA                     T2CON           equ	4042	;# 
  1188   000FCB                     PR2             equ	4043	;# 
  1189   000FCB                     MEMCON          equ	4043	;# 
  1190   000FCC                     TMR2            equ	4044	;# 
  1191   000FCD                     T1CON           equ	4045	;# 
  1192   000FCE                     TMR1            equ	4046	;# 
  1193   000FCE                     TMR1L           equ	4046	;# 
  1194   000FCF                     TMR1H           equ	4047	;# 
  1195   000FD0                     RCON            equ	4048	;# 
  1196   000FD1                     WDTCON          equ	4049	;# 
  1197   000FD2                     HLVDCON         equ	4050	;# 
  1198   000FD2                     LVDCON          equ	4050	;# 
  1199   000FD3                     OSCCON          equ	4051	;# 
  1200   000FD5                     T0CON           equ	4053	;# 
  1201   000FD6                     TMR0            equ	4054	;# 
  1202   000FD6                     TMR0L           equ	4054	;# 
  1203   000FD7                     TMR0H           equ	4055	;# 
  1204   000FD8                     STATUS          equ	4056	;# 
  1205   000FD9                     FSR2            equ	4057	;# 
  1206   000FD9                     FSR2L           equ	4057	;# 
  1207   000FDA                     FSR2H           equ	4058	;# 
  1208   000FDB                     PLUSW2          equ	4059	;# 
  1209   000FDC                     PREINC2         equ	4060	;# 
  1210   000FDD                     POSTDEC2        equ	4061	;# 
  1211   000FDE                     POSTINC2        equ	4062	;# 
  1212   000FDF                     INDF2           equ	4063	;# 
  1213   000FE0                     BSR             equ	4064	;# 
  1214   000FE1                     FSR1            equ	4065	;# 
  1215   000FE1                     FSR1L           equ	4065	;# 
  1216   000FE2                     FSR1H           equ	4066	;# 
  1217   000FE3                     PLUSW1          equ	4067	;# 
  1218   000FE4                     PREINC1         equ	4068	;# 
  1219   000FE5                     POSTDEC1        equ	4069	;# 
  1220   000FE6                     POSTINC1        equ	4070	;# 
  1221   000FE7                     INDF1           equ	4071	;# 
  1222   000FE8                     WREG            equ	4072	;# 
  1223   000FE9                     FSR0            equ	4073	;# 
  1224   000FE9                     FSR0L           equ	4073	;# 
  1225   000FEA                     FSR0H           equ	4074	;# 
  1226   000FEB                     PLUSW0          equ	4075	;# 
  1227   000FEC                     PREINC0         equ	4076	;# 
  1228   000FED                     POSTDEC0        equ	4077	;# 
  1229   000FEE                     POSTINC0        equ	4078	;# 
  1230   000FEF                     INDF0           equ	4079	;# 
  1231   000FF0                     INTCON3         equ	4080	;# 
  1232   000FF1                     INTCON2         equ	4081	;# 
  1233   000FF2                     INTCON          equ	4082	;# 
  1234   000FF3                     PROD            equ	4083	;# 
  1235   000FF3                     PRODL           equ	4083	;# 
  1236   000FF4                     PRODH           equ	4084	;# 
  1237   000FF5                     TABLAT          equ	4085	;# 
  1238   000FF6                     TBLPTR          equ	4086	;# 
  1239   000FF6                     TBLPTRL         equ	4086	;# 
  1240   000FF7                     TBLPTRH         equ	4087	;# 
  1241   000FF8                     TBLPTRU         equ	4088	;# 
  1242   000FF9                     PCLAT           equ	4089	;# 
  1243   000FF9                     PC              equ	4089	;# 
  1244   000FF9                     PCL             equ	4089	;# 
  1245   000FFA                     PCLATH          equ	4090	;# 
  1246   000FFB                     PCLATU          equ	4091	;# 
  1247   000FFC                     STKPTR          equ	4092	;# 
  1248   000FFD                     TOS             equ	4093	;# 
  1249   000FFD                     TOSL            equ	4093	;# 
  1250   000FFE                     TOSH            equ	4094	;# 
  1251   000FFF                     TOSU            equ	4095	;# 
  1252                           
  1253                           	psect	idataCOMRAM
  1254   001CF2                     __pidataCOMRAM:
  1255                           	callstack 0
  1256                           
  1257                           ;initializer for _currentTime
  1258   001CF2  30                 	db	48
  1259   001CF3  30                 	db	48
  1260   001CF4  30                 	db	48
  1261   001CF5  30                 	db	48
  1262                           
  1263                           ;initializer for _colValues
  1264   001CF6  20                 	db	32
  1265   001CF7  40                 	db	64
  1266   001CF8  10                 	db	16
  1267                           
  1268                           ;initializer for motor_Read@MAX_TIMEOUT
  1269   001CF9  03E8               	dw	1000
  1270                           
  1271                           ;initializer for motorTerminal@hour
  1272   001CFB  30                 	db	48
  1273   001CFC  30                 	db	48
  1274   001CFD  30                 	db	48
  1275   001CFE  30                 	db	48
  1276                           
  1277                           	psect	idataBANK0
  1278   001C0E                     __pidataBANK0:
  1279                           	callstack 0
  1280                           
  1281                           ;initializer for _configurations
  1282   001C0E  01                 	db	1
  1283   001C0F  01                 	db	1
  1284   001C10  01                 	db	1
  1285   001C11  01                 	db	1
  1286   001C12  01                 	db	1
  1287   001C13  01                 	db	1
  1288   001C14  01                 	db	1
  1289   001C15  01                 	db	1
  1290   001C16  01                 	db	1
  1291   001C17  01                 	db	1
  1292   001C18  01                 	db	1
  1293   001C19  01                 	db	1
  1294   001C1A  01                 	db	1
  1295   001C1B  01                 	db	1
  1296   001C1C  01                 	db	1
  1297   001C1D  01                 	db	1
  1298   001C1E  01                 	db	1
  1299   001C1F  01                 	db	1
  1300   001C20  01                 	db	1
  1301   001C21  01                 	db	1
  1302   001C22  01                 	db	1
  1303   001C23  01                 	db	1
  1304   001C24  01                 	db	1
  1305   001C25  01                 	db	1
  1306                           
  1307                           ;initializer for controlLED@ledBits
  1308   001C26  01                 	db	1
  1309   001C27  02                 	db	2
  1310   001C28  04                 	db	4
  1311   001C29  08                 	db	8
  1312   001C2A  10                 	db	16
  1313   001C2B  20                 	db	32
  1314                           
  1315                           	psect	idataBANK1
  1316   00197E                     __pidataBANK1:
  1317                           	callstack 0
  1318                           
  1319                           ;initializer for _userUIDs
  1320   00197E  65                 	db	101
  1321   00197F  DC                 	db	220
  1322   001980  F9                 	db	249
  1323   001981  03                 	db	3
  1324   001982  43                 	db	67
  1325   001983  00                 	db	0
  1326   001984  00                 	db	0
  1327   001985  00                 	db	0
  1328   001986  00                 	db	0
  1329   001987  00                 	db	0
  1330   001988  00                 	db	0
  1331   001989  00                 	db	0
  1332   00198A  00                 	db	0
  1333   00198B  00                 	db	0
  1334   00198C  00                 	db	0
  1335   00198D  00                 	db	0
  1336   00198E  DC                 	db	220
  1337   00198F  0D                 	db	13
  1338   001990  F9                 	db	249
  1339   001991  03                 	db	3
  1340   001992  2B                 	db	43
  1341   001993  00                 	db	0
  1342   001994  00                 	db	0
  1343   001995  00                 	db	0
  1344   001996  00                 	db	0
  1345   001997  00                 	db	0
  1346   001998  00                 	db	0
  1347   001999  00                 	db	0
  1348   00199A  00                 	db	0
  1349   00199B  00                 	db	0
  1350   00199C  00                 	db	0
  1351   00199D  00                 	db	0
  1352   00199E  DF                 	db	223
  1353   00199F  8B                 	db	139
  1354   0019A0  DF                 	db	223
  1355   0019A1  C4                 	db	196
  1356   0019A2  4F                 	db	79
  1357   0019A3  00                 	db	0
  1358   0019A4  00                 	db	0
  1359   0019A5  00                 	db	0
  1360   0019A6  00                 	db	0
  1361   0019A7  00                 	db	0
  1362   0019A8  00                 	db	0
  1363   0019A9  00                 	db	0
  1364   0019AA  00                 	db	0
  1365   0019AB  00                 	db	0
  1366   0019AC  00                 	db	0
  1367   0019AD  00                 	db	0
  1368   0019AE  21                 	db	33
  1369   0019AF  32                 	db	50
  1370   0019B0  A9                 	db	169
  1371   0019B1  89                 	db	137
  1372   0019B2  33                 	db	51
  1373   0019B3  00                 	db	0
  1374   0019B4  00                 	db	0
  1375   0019B5  00                 	db	0
  1376   0019B6  00                 	db	0
  1377   0019B7  00                 	db	0
  1378   0019B8  00                 	db	0
  1379   0019B9  00                 	db	0
  1380   0019BA  00                 	db	0
  1381   0019BB  00                 	db	0
  1382   0019BC  00                 	db	0
  1383   0019BD  00                 	db	0
  1384                           
  1385                           	psect	mediumconst
  1386   001E92                     __pmediumconst:
  1387                           	callstack 0
  1388   001E92  00                 	db	0
  1389   001E93                     printLedConfig@hex:
  1390                           	callstack 0
  1391   001E93  30                 	db	48
  1392   001E94  31                 	db	49
  1393   001E95  32                 	db	50
  1394   001E96  33                 	db	51
  1395   001E97  34                 	db	52
  1396   001E98  35                 	db	53
  1397   001E99  36                 	db	54
  1398   001E9A  37                 	db	55
  1399   001E9B  38                 	db	56
  1400   001E9C  39                 	db	57
  1401   001E9D  41                 	db	65
  1402   001E9E  42                 	db	66
  1403   001E9F  43                 	db	67
  1404   001EA0  44                 	db	68
  1405   001EA1  45                 	db	69
  1406   001EA2  46                 	db	70
  1407   001EA3  00                 	db	0
  1408   001EA4                     __end_ofprintLedConfig@hex:
  1409                           	callstack 0
  1410   001EA4                     printfUID@hex:
  1411                           	callstack 0
  1412   001EA4  30                 	db	48
  1413   001EA5  31                 	db	49
  1414   001EA6  32                 	db	50
  1415   001EA7  33                 	db	51
  1416   001EA8  34                 	db	52
  1417   001EA9  35                 	db	53
  1418   001EAA  36                 	db	54
  1419   001EAB  37                 	db	55
  1420   001EAC  38                 	db	56
  1421   001EAD  39                 	db	57
  1422   001EAE  41                 	db	65
  1423   001EAF  42                 	db	66
  1424   001EB0  43                 	db	67
  1425   001EB1  44                 	db	68
  1426   001EB2  45                 	db	69
  1427   001EB3  46                 	db	70
  1428   001EB4  00                 	db	0
  1429   001EB5                     __end_ofprintfUID@hex:
  1430                           	callstack 0
  1431   001EB5                     _keymap:
  1432                           	callstack 0
  1433   001EB5  01                 	db	1
  1434   001EB6  02                 	db	2
  1435   001EB7  03                 	db	3
  1436   001EB8  04                 	db	4
  1437   001EB9  05                 	db	5
  1438   001EBA  06                 	db	6
  1439   001EBB  07                 	db	7
  1440   001EBC  08                 	db	8
  1441   001EBD  09                 	db	9
  1442   001EBE  0A                 	db	10
  1443   001EBF  00                 	db	0
  1444   001EC0  0B                 	db	11
  1445   001EC1                     __end_of_keymap:
  1446                           	callstack 0
  1447   001EC1                     showAllConfigurations@configStr:
  1448                           	callstack 0
  1449   001EC1  20                 	db	32
  1450   001EC2  43                 	db	67
  1451   001EC3  6F                 	db	111
  1452   001EC4  6E                 	db	110
  1453   001EC5  66                 	db	102
  1454   001EC6  69                 	db	105
  1455   001EC7  67                 	db	103
  1456   001EC8  3A                 	db	58
  1457   001EC9  20                 	db	32
  1458   001ECA  00                 	db	0
  1459   001ECB                     __end_ofshowAllConfigurations@configStr:
  1460                           	callstack 0
  1461   001ECB                     showAllConfigurations@userStr:
  1462                           	callstack 0
  1463   001ECB  55                 	db	85
  1464   001ECC  73                 	db	115
  1465   001ECD  65                 	db	101
  1466   001ECE  72                 	db	114
  1467   001ECF  20                 	db	32
  1468   001ED0  00                 	db	0
  1469   001ED1                     __end_ofshowAllConfigurations@userStr:
  1470                           	callstack 0
  1471   007F92                     _TMR0IF         set	32658
  1472   000FD6                     _TMR0           set	4054
  1473   000F89                     _LATA           set	3977
  1474   000F96                     _TRISE          set	3990
  1475   000F92                     _TRISA          set	3986
  1476   000FAD                     _TXREG          set	4013
  1477   000FAE                     _RCREG          set	4014
  1478   000F9E                     _PIR1bits       set	3998
  1479   000FB8                     _BAUDCON        set	4024
  1480   000FAF                     _SPBRG          set	4015
  1481   000FAB                     _RCSTA          set	4011
  1482   000FAC                     _TXSTA          set	4012
  1483   000F8A                     _LATBbits       set	3978
  1484   000F93                     _TRISBbits      set	3987
  1485   000F94                     _TRISCbits      set	3988
  1486   000F82                     _PORTCbits      set	3970
  1487   000F8B                     _LATCbits       set	3979
  1488   000F83                     _PORTD          set	3971
  1489   000F8C                     _LATD           set	3980
  1490   000F95                     _TRISD          set	3989
  1491   000FD5                     _T0CON          set	4053
  1492   000F8B                     _LATC           set	3979
  1493   000F96                     _TRISEbits      set	3990
  1494   000FC1                     _ADCON1         set	4033
  1495   000F8D                     _LATEbits       set	3981
  1496   000FF2                     _INTCONbits     set	4082
  1497   001ED1                     STR_6:
  1498   001ED1  09                 	db	9
  1499   001ED2  31                 	db	49	;'1'
  1500   001ED3  2E                 	db	46
  1501   001ED4  20                 	db	32
  1502   001ED5  51                 	db	81	;'Q'
  1503   001ED6  75                 	db	117	;'u'
  1504   001ED7  69                 	db	105	;'i'
  1505   001ED8  20                 	db	32
  1506   001ED9  68                 	db	104	;'h'
  1507   001EDA  69                 	db	105	;'i'
  1508   001EDB  20                 	db	32
  1509   001EDC  68                 	db	104	;'h'
  1510   001EDD  61                 	db	97	;'a'
  1511   001EDE  20                 	db	32
  1512   001EDF  61                 	db	97	;'a'
  1513   001EE0  20                 	db	32
  1514   001EE1  6C                 	db	108	;'l'
  1515   001EE2  61                 	db	97	;'a'
  1516   001EE3  20                 	db	32
  1517   001EE4  73                 	db	115	;'s'
  1518   001EE5  61                 	db	97	;'a'
  1519   001EE6  6C                 	db	108	;'l'
  1520   001EE7  61                 	db	97	;'a'
  1521   001EE8  3F                 	db	63	;'?'
  1522   001EE9  0D                 	db	13
  1523   001EEA  0A                 	db	10
  1524   001EEB  09                 	db	9
  1525   001EEC  32                 	db	50	;'2'
  1526   001EED  2E                 	db	46
  1527   001EEE  20                 	db	32
  1528   001EEF  4D                 	db	77	;'M'
  1529   001EF0  6F                 	db	111	;'o'
  1530   001EF1  73                 	db	115	;'s'
  1531   001EF2  74                 	db	116	;'t'
  1532   001EF3  72                 	db	114	;'r'
  1533   001EF4  61                 	db	97	;'a'
  1534   001EF5  72                 	db	114	;'r'
  1535   001EF6  20                 	db	32
  1536   001EF7  63                 	db	99	;'c'
  1537   001EF8  6F                 	db	111	;'o'
  1538   001EF9  6E                 	db	110	;'n'
  1539   001EFA  66                 	db	102	;'f'
  1540   001EFB  69                 	db	105	;'i'
  1541   001EFC  67                 	db	103	;'g'
  1542   001EFD  75                 	db	117	;'u'
  1543   001EFE  72                 	db	114	;'r'
  1544   001EFF  61                 	db	97	;'a'
  1545   001F00  63                 	db	99	;'c'
  1546   001F01  69                 	db	105	;'i'
  1547   001F02  6F                 	db	111	;'o'
  1548   001F03  6E                 	db	110	;'n'
  1549   001F04  73                 	db	115	;'s'
  1550   001F05  0D                 	db	13
  1551   001F06  0A                 	db	10
  1552   001F07  09                 	db	9
  1553   001F08  33                 	db	51	;'3'
  1554   001F09  2E                 	db	46
  1555   001F0A  20                 	db	32
  1556   001F0B  4D                 	db	77	;'M'
  1557   001F0C  6F                 	db	111	;'o'
  1558   001F0D  64                 	db	100	;'d'
  1559   001F0E  69                 	db	105	;'i'
  1560   001F0F  66                 	db	102	;'f'
  1561   001F10  69                 	db	105	;'i'
  1562   001F11  63                 	db	99	;'c'
  1563   001F12  61                 	db	97	;'a'
  1564   001F13  72                 	db	114	;'r'
  1565   001F14  20                 	db	32
  1566   001F15  68                 	db	104	;'h'
  1567   001F16  6F                 	db	111	;'o'
  1568   001F17  72                 	db	114	;'r'
  1569   001F18  61                 	db	97	;'a'
  1570   001F19  20                 	db	32
  1571   001F1A  64                 	db	100	;'d'
  1572   001F1B  65                 	db	101	;'e'
  1573   001F1C  6C                 	db	108	;'l'
  1574   001F1D  20                 	db	32
  1575   001F1E  73                 	db	115	;'s'
  1576   001F1F  69                 	db	105	;'i'
  1577   001F20  73                 	db	115	;'s'
  1578   001F21  74                 	db	116	;'t'
  1579   001F22  65                 	db	101	;'e'
  1580   001F23  6D                 	db	109	;'m'
  1581   001F24  61                 	db	97	;'a'
  1582   001F25  0D                 	db	13
  1583   001F26  0A                 	db	10
  1584   001F27  4F                 	db	79	;'O'
  1585   001F28  70                 	db	112	;'p'
  1586   001F29  63                 	db	99	;'c'
  1587   001F2A  69                 	db	105	;'i'
  1588   001F2B  C3                 	db	-61
  1589   001F2C  B3                 	db	-77
  1590   001F2D  3A                 	db	58	;':'
  1591   001F2E  20                 	db	32
  1592   001F2F  00                 	db	0
  1593   001F30                     STR_5:
  1594   001F30  4D                 	db	77	;'M'
  1595   001F31  65                 	db	101	;'e'
  1596   001F32  6E                 	db	110	;'n'
  1597   001F33  C3                 	db	-61
  1598   001F34  BA                 	db	-70
  1599   001F35  20                 	db	32
  1600   001F36  70                 	db	112	;'p'
  1601   001F37  72                 	db	114	;'r'
  1602   001F38  69                 	db	105	;'i'
  1603   001F39  6E                 	db	110	;'n'
  1604   001F3A  63                 	db	99	;'c'
  1605   001F3B  69                 	db	105	;'i'
  1606   001F3C  70                 	db	112	;'p'
  1607   001F3D  61                 	db	97	;'a'
  1608   001F3E  6C                 	db	108	;'l'
  1609   001F3F  0D                 	db	13
  1610   001F40  0A                 	db	10
  1611   001F41  2D                 	db	45
  1612   001F42  2D                 	db	45
  1613   001F43  2D                 	db	45
  1614   001F44  2D                 	db	45
  1615   001F45  2D                 	db	45
  1616   001F46  2D                 	db	45
  1617   001F47  2D                 	db	45
  1618   001F48  2D                 	db	45
  1619   001F49  2D                 	db	45
  1620   001F4A  2D                 	db	45
  1621   001F4B  2D                 	db	45
  1622   001F4C  2D                 	db	45
  1623   001F4D  2D                 	db	45
  1624   001F4E  2D                 	db	45
  1625   001F4F  2D                 	db	45
  1626   001F50  0D                 	db	13
  1627   001F51  0A                 	db	10
  1628   001F52  54                 	db	84	;'T'
  1629   001F53  72                 	db	114	;'r'
  1630   001F54  69                 	db	105	;'i'
  1631   001F55  61                 	db	97	;'a'
  1632   001F56  20                 	db	32
  1633   001F57  75                 	db	117	;'u'
  1634   001F58  6E                 	db	110	;'n'
  1635   001F59  61                 	db	97	;'a'
  1636   001F5A  20                 	db	32
  1637   001F5B  6F                 	db	111	;'o'
  1638   001F5C  70                 	db	112	;'p'
  1639   001F5D  63                 	db	99	;'c'
  1640   001F5E  69                 	db	105	;'i'
  1641   001F5F  C3                 	db	-61
  1642   001F60  B3                 	db	-77
  1643   001F61  3A                 	db	58	;':'
  1644   001F62  0D                 	db	13
  1645   001F63  0A                 	db	10
  1646   001F64  00                 	db	0
  1647   001F65                     STR_9:
  1648   001F65  4E                 	db	78	;'N'
  1649   001F66  6F                 	db	111	;'o'
  1650   001F67  20                 	db	32
  1651   001F68  68                 	db	104	;'h'
  1652   001F69  69                 	db	105	;'i'
  1653   001F6A  20                 	db	32
  1654   001F6B  68                 	db	104	;'h'
  1655   001F6C  61                 	db	97	;'a'
  1656   001F6D  20                 	db	32
  1657   001F6E  63                 	db	99	;'c'
  1658   001F6F  61                 	db	97	;'a'
  1659   001F70  70                 	db	112	;'p'
  1660   001F71  20                 	db	32
  1661   001F72  75                 	db	117	;'u'
  1662   001F73  73                 	db	115	;'s'
  1663   001F74  75                 	db	117	;'u'
  1664   001F75  61                 	db	97	;'a'
  1665   001F76  72                 	db	114	;'r'
  1666   001F77  69                 	db	105	;'i'
  1667   001F78  20                 	db	32
  1668   001F79  61                 	db	97	;'a'
  1669   001F7A  20                 	db	32
  1670   001F7B  6C                 	db	108	;'l'
  1671   001F7C  61                 	db	97	;'a'
  1672   001F7D  20                 	db	32
  1673   001F7E  73                 	db	115	;'s'
  1674   001F7F  61                 	db	97	;'a'
  1675   001F80  6C                 	db	108	;'l'
  1676   001F81  61                 	db	97	;'a'
  1677   001F82  2E                 	db	46
  1678   001F83  0D                 	db	13
  1679   001F84  0A                 	db	10
  1680   001F85  00                 	db	0
  1681   001F86                     STR_8:
  1682   001F86  45                 	db	69	;'E'
  1683   001F87  52                 	db	82	;'R'
  1684   001F88  52                 	db	82	;'R'
  1685   001F89  4F                 	db	79	;'O'
  1686   001F8A  52                 	db	82	;'R'
  1687   001F8B  2E                 	db	46
  1688   001F8C  20                 	db	32
  1689   001F8D  56                 	db	86	;'V'
  1690   001F8E  61                 	db	97	;'a'
  1691   001F8F  6C                 	db	108	;'l'
  1692   001F90  6F                 	db	111	;'o'
  1693   001F91  72                 	db	114	;'r'
  1694   001F92  20                 	db	32
  1695   001F93  69                 	db	105	;'i'
  1696   001F94  6E                 	db	110	;'n'
  1697   001F95  74                 	db	116	;'t'
  1698   001F96  72                 	db	114	;'r'
  1699   001F97  6F                 	db	111	;'o'
  1700   001F98  64                 	db	100	;'d'
  1701   001F99  75                 	db	117	;'u'
  1702   001F9A  69                 	db	105	;'i'
  1703   001F9B  74                 	db	116	;'t'
  1704   001F9C  20                 	db	32
  1705   001F9D  65                 	db	101	;'e'
  1706   001F9E  72                 	db	114	;'r'
  1707   001F9F  72                 	db	114	;'r'
  1708   001FA0  6F                 	db	111	;'o'
  1709   001FA1  6E                 	db	110	;'n'
  1710   001FA2  69                 	db	105	;'i'
  1711   001FA3  2E                 	db	46
  1712   001FA4  0D                 	db	13
  1713   001FA5  0A                 	db	10
  1714   001FA6  00                 	db	0
  1715   001FA7                     STR_12:
  1716   001FA7  0D                 	db	13
  1717   001FA8  0A                 	db	10
  1718   001FA9  48                 	db	72	;'H'
  1719   001FAA  6F                 	db	111	;'o'
  1720   001FAB  72                 	db	114	;'r'
  1721   001FAC  61                 	db	97	;'a'
  1722   001FAD  20                 	db	32
  1723   001FAE  69                 	db	105	;'i'
  1724   001FAF  6E                 	db	110	;'n'
  1725   001FB0  74                 	db	116	;'t'
  1726   001FB1  72                 	db	114	;'r'
  1727   001FB2  6F                 	db	111	;'o'
  1728   001FB3  64                 	db	100	;'d'
  1729   001FB4  75                 	db	117	;'u'
  1730   001FB5  69                 	db	105	;'i'
  1731   001FB6  64                 	db	100	;'d'
  1732   001FB7  61                 	db	97	;'a'
  1733   001FB8  20                 	db	32
  1734   001FB9  63                 	db	99	;'c'
  1735   001FBA  6F                 	db	111	;'o'
  1736   001FBB  72                 	db	114	;'r'
  1737   001FBC  72                 	db	114	;'r'
  1738   001FBD  65                 	db	101	;'e'
  1739   001FBE  63                 	db	99	;'c'
  1740   001FBF  74                 	db	116	;'t'
  1741   001FC0  61                 	db	97	;'a'
  1742   001FC1  6D                 	db	109	;'m'
  1743   001FC2  65                 	db	101	;'e'
  1744   001FC3  6E                 	db	110	;'n'
  1745   001FC4  74                 	db	116	;'t'
  1746   001FC5  0D                 	db	13
  1747   001FC6  0A                 	db	10
  1748   001FC7  00                 	db	0
  1749   001FC8                     STR_11:
  1750   001FC8  49                 	db	73	;'I'
  1751   001FC9  6E                 	db	110	;'n'
  1752   001FCA  74                 	db	116	;'t'
  1753   001FCB  72                 	db	114	;'r'
  1754   001FCC  6F                 	db	111	;'o'
  1755   001FCD  64                 	db	100	;'d'
  1756   001FCE  75                 	db	117	;'u'
  1757   001FCF  63                 	db	99	;'c'
  1758   001FD0  65                 	db	101	;'e'
  1759   001FD1  20                 	db	32
  1760   001FD2  6C                 	db	108	;'l'
  1761   001FD3  61                 	db	97	;'a'
  1762   001FD4  20                 	db	32
  1763   001FD5  68                 	db	104	;'h'
  1764   001FD6  6F                 	db	111	;'o'
  1765   001FD7  72                 	db	114	;'r'
  1766   001FD8  61                 	db	97	;'a'
  1767   001FD9  20                 	db	32
  1768   001FDA  61                 	db	97	;'a'
  1769   001FDB  63                 	db	99	;'c'
  1770   001FDC  74                 	db	116	;'t'
  1771   001FDD  75                 	db	117	;'u'
  1772   001FDE  61                 	db	97	;'a'
  1773   001FDF  6C                 	db	108	;'l'
  1774   001FE0  28                 	db	40
  1775   001FE1  48                 	db	72	;'H'
  1776   001FE2  48                 	db	72	;'H'
  1777   001FE3  4D                 	db	77	;'M'
  1778   001FE4  4D                 	db	77	;'M'
  1779   001FE5  29                 	db	41
  1780   001FE6  3A                 	db	58	;':'
  1781   001FE7  20                 	db	32
  1782   001FE8  00                 	db	0
  1783   001FE9                     STR_4:
  1784   001FE9  2D                 	db	45
  1785   001FEA  2D                 	db	45
  1786   001FEB  2D                 	db	45
  1787   001FEC  2D                 	db	45
  1788   001FED  2D                 	db	45
  1789   001FEE  2D                 	db	45
  1790   001FEF  2D                 	db	45
  1791   001FF0  2D                 	db	45
  1792   001FF1  2D                 	db	45
  1793   001FF2  2D                 	db	45
  1794   001FF3  2D                 	db	45
  1795   001FF4  2D                 	db	45
  1796   001FF5  2D                 	db	45
  1797   001FF6  2D                 	db	45
  1798   001FF7  2D                 	db	45
  1799   001FF8  0D                 	db	13
  1800   001FF9  0A                 	db	10
  1801   001FFA  00                 	db	0
  1802   001FFB                     STR_2:
  1803   001FFB  20                 	db	32
  1804   001FFC  2D                 	db	45
  1805   001FFD  20                 	db	32
  1806   001FFE  00                 	db	0
  1807   001F2D                     STR_1           equ	STR_6+92
  1808   001FFD                     STR_13          equ	STR_2+2
  1809   001FF8                     STR_3           equ	STR_4+15
  1810   001FF8                     STR_7           equ	STR_4+15
  1811   001FF8                     STR_10          equ	STR_4+15
  1812   001FF8                     STR_14          equ	STR_4+15
  1813   001FFF  00                 	db	0	; dummy byte at the end
  1814   001E92                     __smallconst    set	__pmediumconst
  1815   001E92                     __mediumconst   set	__pmediumconst
  1816   000002                     __activetblptr  equ	2
  1817                           
  1818                           ; #config settings
  1819                           
  1820                           	psect	cinit
  1821   0014A2                     __pcinit:
  1822                           	callstack 0
  1823   0014A2                     start_initialization:
  1824                           	callstack 0
  1825   0014A2                     __initialization:
  1826                           	callstack 0
  1827                           
  1828                           ; Initialize objects allocated to BANK1 (64 bytes)
  1829                           ; load TBLPTR registers with __pidataBANK1
  1830   0014A2  0E7E               	movlw	low __pidataBANK1
  1831   0014A4  6EF6               	movwf	tblptrl,c
  1832   0014A6  0E19               	movlw	high __pidataBANK1
  1833   0014A8  6EF7               	movwf	tblptrh,c
  1834   0014AA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1835   0014AC  6EF8               	movwf	tblptru,c
  1836   0014AE  EE01  F000         	lfsr	0,__pdataBANK1
  1837   0014B2  EE10 F040          	lfsr	1,64
  1838   0014B6                     copy_data0:
  1839   0014B6  0009               	tblrd		*+
  1840   0014B8  CFF5 FFEE          	movff	tablat,postinc0
  1841   0014BC  50E5               	movf	postdec1,w,c
  1842   0014BE  50E1               	movf	fsr1l,w,c
  1843   0014C0  E1FA               	bnz	copy_data0
  1844                           
  1845                           ; Initialize objects allocated to BANK0 (30 bytes)
  1846                           ; load TBLPTR registers with __pidataBANK0
  1847   0014C2  0E0E               	movlw	low __pidataBANK0
  1848   0014C4  6EF6               	movwf	tblptrl,c
  1849   0014C6  0E1C               	movlw	high __pidataBANK0
  1850   0014C8  6EF7               	movwf	tblptrh,c
  1851   0014CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1852   0014CC  6EF8               	movwf	tblptru,c
  1853   0014CE  EE00  F0A8         	lfsr	0,__pdataBANK0
  1854   0014D2  EE10 F01E          	lfsr	1,30
  1855   0014D6                     copy_data1:
  1856   0014D6  0009               	tblrd		*+
  1857   0014D8  CFF5 FFEE          	movff	tablat,postinc0
  1858   0014DC  50E5               	movf	postdec1,w,c
  1859   0014DE  50E1               	movf	fsr1l,w,c
  1860   0014E0  E1FA               	bnz	copy_data1
  1861                           
  1862                           ; Initialize objects allocated to COMRAM (13 bytes)
  1863                           ; load TBLPTR registers with __pidataCOMRAM
  1864   0014E2  0EF2               	movlw	low __pidataCOMRAM
  1865   0014E4  6EF6               	movwf	tblptrl,c
  1866   0014E6  0E1C               	movlw	high __pidataCOMRAM
  1867   0014E8  6EF7               	movwf	tblptrh,c
  1868   0014EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1869   0014EC  6EF8               	movwf	tblptru,c
  1870   0014EE  EE00  F06F         	lfsr	0,__pdataCOMRAM
  1871   0014F2  EE10 F00D          	lfsr	1,13
  1872   0014F6                     copy_data2:
  1873   0014F6  0009               	tblrd		*+
  1874   0014F8  CFF5 FFEE          	movff	tablat,postinc0
  1875   0014FC  50E5               	movf	postdec1,w,c
  1876   0014FE  50E1               	movf	fsr1l,w,c
  1877   001500  E1FA               	bnz	copy_data2
  1878                           
  1879                           ; Clear objects allocated to BANK0 (40 bytes)
  1880   001502  EE00  F080         	lfsr	0,__pbssBANK0
  1881   001506  0E28               	movlw	40
  1882   001508                     clear_0:
  1883   001508  6AEE               	clrf	postinc0,c
  1884   00150A  06E8               	decf	wreg,f,c
  1885   00150C  E1FD               	bnz	clear_0
  1886                           
  1887                           ; Clear objects allocated to COMRAM (81 bytes)
  1888   00150E  EE00  F001         	lfsr	0,__pbssCOMRAM
  1889   001512  0E51               	movlw	81
  1890   001514                     clear_1:
  1891   001514  6AEE               	clrf	postinc0,c
  1892   001516  06E8               	decf	wreg,f,c
  1893   001518  E1FD               	bnz	clear_1
  1894   00151A                     end_of_initialization:
  1895                           	callstack 0
  1896   00151A                     __end_of__initialization:
  1897                           	callstack 0
  1898   00151A  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1899   00151C  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1900   00151E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1901   001520  6EF8               	movwf	tblptru,c
  1902   001522  0100               	movlb	0
  1903   001524  EF7B  F00C         	goto	_main	;jump to C main() function
  1904                           
  1905                           	psect	bssCOMRAM
  1906   000001                     __pbssCOMRAM:
  1907                           	callstack 0
  1908   000001                     motor_RFID@UID:
  1909                           	callstack 0
  1910   000001                     	ds	6
  1911   000007                     motor_LEDs@lastTics:
  1912                           	callstack 0
  1913   000007                     	ds	4
  1914   00000B                     _Tics:
  1915                           	callstack 0
  1916   00000B                     	ds	4
  1917   00000F                     _str_ptr:
  1918                           	callstack 0
  1919   00000F                     	ds	2
  1920   000011                     	ds	2
  1921   000013                     motor_Read@timeout_counter:
  1922                           	callstack 0
  1923   000013                     	ds	2
  1924   000015                     setLed@userIndex:
  1925                           	callstack 0
  1926   000015                     	ds	1
  1927   000016                     setLed@ledIndex:
  1928                           	callstack 0
  1929   000016                     	ds	1
  1930   000017                     setLed@modeLED:
  1931                           	callstack 0
  1932   000017                     	ds	1
  1933   000018                     motor_datos@lastChar:
  1934                           	callstack 0
  1935   000018                     	ds	1
  1936   000019                     motor_datos@pointer:
  1937                           	callstack 0
  1938   000019                     	ds	1
  1939   00001A                     motor_datos@state:
  1940                           	callstack 0
  1941   00001A                     	ds	1
  1942   00001B                     _index:
  1943                           	callstack 0
  1944   00001B                     	ds	1
  1945   00001C                     _new_user:
  1946                           	callstack 0
  1947   00001C                     	ds	1
  1948   00001D                     _new_configuration:
  1949                           	callstack 0
  1950   00001D                     	ds	1
  1951   00001E                     motorTerminal@index:
  1952                           	callstack 0
  1953   00001E                     	ds	1
  1954   00001F                     motorTerminal@state:
  1955                           	callstack 0
  1956   00001F                     	ds	1
  1957   000020                     _sending_string:
  1958                           	callstack 0
  1959   000020                     	ds	1
  1960   000021                     _hashtag_pressed:
  1961                           	callstack 0
  1962   000021                     	ds	1
  1963   000022                     _state_str:
  1964                           	callstack 0
  1965   000022                     	ds	1
  1966   000023                     _ColumnAct:
  1967                           	callstack 0
  1968   000023                     	ds	1
  1969   000024                     _RowAct:
  1970                           	callstack 0
  1971   000024                     	ds	1
  1972   000025                     _Columns:
  1973                           	callstack 0
  1974   000025                     	ds	1
  1975   000026                     _Rows:
  1976                           	callstack 0
  1977   000026                     	ds	1
  1978   000027                     motor_RFID@value:
  1979                           	callstack 0
  1980   000027                     	ds	1
  1981   000028                     motor_RFID@addr:
  1982                           	callstack 0
  1983   000028                     	ds	1
  1984   000029                     motor_RFID@operation_pending:
  1985                           	callstack 0
  1986   000029                     	ds	1
  1987   00002A                     motor_RFID@backBitsCalc:
  1988                           	callstack 0
  1989   00002A                     	ds	1
  1990   00002B                     motor_RFID@fifoLevel:
  1991                           	callstack 0
  1992   00002B                     	ds	1
  1993   00002C                     motor_RFID@lastBitsVal:
  1994                           	callstack 0
  1995   00002C                     	ds	1
  1996   00002D                     motor_RFID@tempRegValue:
  1997                           	callstack 0
  1998   00002D                     	ds	1
  1999   00002E                     motor_RFID@allZero:
  2000                           	callstack 0
  2001   00002E                     	ds	1
  2002   00002F                     motor_RFID@checksum:
  2003                           	callstack 0
  2004   00002F                     	ds	1
  2005   000030                     motor_RFID@TagType:
  2006                           	callstack 0
  2007   000030                     	ds	1
  2008   000031                     	ds	1
  2009   000032                     motor_RFID@i:
  2010                           	callstack 0
  2011   000032                     	ds	1
  2012   000033                     motor_RFID@n:
  2013                           	callstack 0
  2014   000033                     	ds	1
  2015   000034                     motor_RFID@waitIRq:
  2016                           	callstack 0
  2017   000034                     	ds	1
  2018   000035                     motor_RFID@irqEn:
  2019                           	callstack 0
  2020   000035                     	ds	1
  2021   000036                     motor_RFID@substate:
  2022                           	callstack 0
  2023   000036                     	ds	1
  2024   000037                     motor_RFID@state:
  2025                           	callstack 0
  2026   000037                     	ds	1
  2027   000038                     motor_Read@ucResult:
  2028                           	callstack 0
  2029   000038                     	ds	1
  2030   000039                     _state:
  2031                           	callstack 0
  2032   000039                     	ds	1
  2033   00003A                     _tecla:
  2034                           	callstack 0
  2035   00003A                     	ds	1
  2036   00003B                     _Columnas:
  2037                           	callstack 0
  2038   00003B                     	ds	1
  2039   00003C                     _Filas:
  2040                           	callstack 0
  2041   00003C                     	ds	1
  2042   00003D                     _ActualLeds:
  2043                           	callstack 0
  2044   00003D                     	ds	6
  2045   000043                     _currentUser:
  2046                           	callstack 0
  2047   000043                     	ds	5
  2048   000048                     _timer@TAD_LEDS$F931:
  2049                           	callstack 0
  2050   000048                     	ds	1
  2051   000049                     _Timer:
  2052                           	callstack 0
  2053   000049                     	ds	1
  2054   00004A                     motor_Read@ucAddr:
  2055                           	callstack 0
  2056   00004A                     	ds	1
  2057   00004B                     motor_Read@bit_count:
  2058                           	callstack 0
  2059   00004B                     	ds	1
  2060   00004C                     motor_Write@ucValue:
  2061                           	callstack 0
  2062   00004C                     	ds	1
  2063   00004D                     motor_Write@ucAddr:
  2064                           	callstack 0
  2065   00004D                     	ds	1
  2066   00004E                     motor_Write@bit_count:
  2067                           	callstack 0
  2068   00004E                     	ds	1
  2069   00004F                     _state_write:
  2070                           	callstack 0
  2071   00004F                     	ds	1
  2072   000050                     _state_read:
  2073                           	callstack 0
  2074   000050                     	ds	1
  2075   000051                     _timer:
  2076                           	callstack 0
  2077   000051                     	ds	1
  2078                           
  2079                           	psect	dataCOMRAM
  2080   00006F                     __pdataCOMRAM:
  2081                           	callstack 0
  2082   00006F                     _currentTime:
  2083                           	callstack 0
  2084   00006F                     	ds	4
  2085   000073                     _colValues:
  2086                           	callstack 0
  2087   000073                     	ds	3
  2088   000076                     	ds	2
  2089   000078                     motorTerminal@hour:
  2090                           	callstack 0
  2091   000078                     	ds	4
  2092                           
  2093                           	psect	bssBANK0
  2094   000080                     __pbssBANK0:
  2095                           	callstack 0
  2096   000080                     _Timers:
  2097                           	callstack 0
  2098   000080                     	ds	20
  2099   000094                     printfUID@buffer:
  2100                           	callstack 0
  2101   000094                     	ds	20
  2102                           
  2103                           	psect	dataBANK0
  2104   0000A8                     __pdataBANK0:
  2105                           	callstack 0
  2106   0000A8                     _configurations:
  2107                           	callstack 0
  2108   0000A8                     	ds	24
  2109   0000C0                     controlLED@ledBits:
  2110                           	callstack 0
  2111   0000C0                     	ds	6
  2112                           
  2113                           	psect	dataBANK1
  2114   000100                     __pdataBANK1:
  2115                           	callstack 0
  2116   000100                     _userUIDs:
  2117                           	callstack 0
  2118   000100                     	ds	64
  2119                           
  2120                           	psect	cstackCOMRAM
  2121   000052                     __pcstackCOMRAM:
  2122                           	callstack 0
  2123   000052                     ??_LowRSI:
  2124                           
  2125                           ; 1 bytes @ 0x0
  2126   000052                     	ds	1
  2127   000053                     ?_Terminal_TXAvailable:
  2128                           	callstack 0
  2129   000053                     ?_TI_GetTics:
  2130                           	callstack 0
  2131   000053                     TI_Init@counter:
  2132                           	callstack 0
  2133   000053                     TI_NewTimer@TimerHandle:
  2134                           	callstack 0
  2135   000053                     TI_ResetTics@TimerHandle:
  2136                           	callstack 0
  2137   000053                     delay_us@howMany:
  2138                           	callstack 0
  2139   000053                     initData@i:
  2140                           	callstack 0
  2141   000053                     getActualUID@UID:
  2142                           	callstack 0
  2143   000053                     getActualLeds@leds:
  2144                           	callstack 0
  2145   000053                     saveHourToData@hour:
  2146                           	callstack 0
  2147   000053                     setLEDIntensity@ledIndex:
  2148                           	callstack 0
  2149   000053                     controlLED@estado:
  2150                           	callstack 0
  2151   000053                     ??_EscriuPrimeraOrdre:
  2152   000053                     ??_GetTecla:
  2153   000053                     ??_CantaPartAlta:
  2154   000053                     ??_CantaPartBaixa:
  2155   000053                     ??_checkUserUID:
  2156                           
  2157                           ; 1 bytes @ 0x1
  2158   000053                     	ds	1
  2159   000054                     delay_us@x:
  2160                           	callstack 0
  2161   000054                     CantaPartAlta@c:
  2162                           	callstack 0
  2163   000054                     CantaPartBaixa@c:
  2164                           	callstack 0
  2165   000054                     EscriuPrimeraOrdre@ordre:
  2166                           	callstack 0
  2167   000054                     getActualUID@i:
  2168                           	callstack 0
  2169   000054                     getActualLeds@i:
  2170                           	callstack 0
  2171   000054                     saveHourToData@i:
  2172                           	callstack 0
  2173   000054                     setLEDIntensity@intensity:
  2174                           	callstack 0
  2175   000054                     _controlLED$937:
  2176                           	callstack 0
  2177   000054                     
  2178                           ; 1 bytes @ 0x2
  2179   000054                     	ds	1
  2180   000055                     TI_NewTimer@Comptador:
  2181                           	callstack 0
  2182   000055                     GetTecla@columna:
  2183                           	callstack 0
  2184   000055                     processBit@val:
  2185                           	callstack 0
  2186   000055                     CantaIR@IR:
  2187                           	callstack 0
  2188   000055                     setLEDIntensity@userIndex:
  2189                           	callstack 0
  2190   000055                     ??_Terminal_TXAvailable:
  2191   000055                     
  2192                           ; 1 bytes @ 0x3
  2193   000055                     	ds	1
  2194   000056                     GetTecla@fila:
  2195                           	callstack 0
  2196   000056                     processBit@bit_count:
  2197                           	callstack 0
  2198   000056                     Terminal_SendChar@c:
  2199                           	callstack 0
  2200   000056                     motor_SendChar@c:
  2201                           	callstack 0
  2202   000056                     controlLED@ledActual:
  2203                           	callstack 0
  2204   000056                     
  2205                           ; 1 bytes @ 0x4
  2206   000056                     	ds	1
  2207   000057                     processBit@state:
  2208                           	callstack 0
  2209   000057                     checkUserUID@match:
  2210                           	callstack 0
  2211   000057                     Terminal_SendString@str:
  2212                           	callstack 0
  2213   000057                     motor_StartSendString@str:
  2214                           	callstack 0
  2215   000057                     ??_TI_GetTics:
  2216   000057                     
  2217                           ; 1 bytes @ 0x5
  2218   000057                     	ds	1
  2219   000058                     processBit@next_state:
  2220                           	callstack 0
  2221   000058                     checkUserUID@i:
  2222                           	callstack 0
  2223                           
  2224                           ; 1 bytes @ 0x6
  2225   000058                     	ds	1
  2226   000059                     printfUID@currentUser:
  2227                           	callstack 0
  2228   000059                     showAllConfigurations@j:
  2229                           	callstack 0
  2230   000059                     checkUserUID@j:
  2231                           	callstack 0
  2232   000059                     ??_processBit:
  2233   000059                     
  2234                           ; 1 bytes @ 0x7
  2235   000059                     	ds	1
  2236   00005A                     motor_Write@value:
  2237                           	callstack 0
  2238   00005A                     showAllConfigurations@i:
  2239                           	callstack 0
  2240   00005A                     setLed@tecla:
  2241                           	callstack 0
  2242   00005A                     ??_motor_Read:
  2243   00005A                     ??_printfUID:
  2244                           
  2245                           ; 1 bytes @ 0x8
  2246   00005A                     	ds	1
  2247   00005B                     motor_Write@addr:
  2248                           	callstack 0
  2249   00005B                     motor_Read@addr:
  2250                           	callstack 0
  2251   00005B                     TI_GetTics@CopiaTicsActual:
  2252                           	callstack 0
  2253   00005B                     
  2254                           ; 1 bytes @ 0x9
  2255   00005B                     	ds	1
  2256   00005C                     printfUID@val:
  2257                           	callstack 0
  2258   00005C                     _motor_Read$522:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0xA
  2262   00005C                     	ds	1
  2263   00005D                     printfUID@i:
  2264                           	callstack 0
  2265                           
  2266                           ; 1 bytes @ 0xB
  2267   00005D                     	ds	1
  2268   00005E                     initRFID@regVal:
  2269                           	callstack 0
  2270   00005E                     printfUID@ptr:
  2271                           	callstack 0
  2272   00005E                     
  2273                           ; 1 bytes @ 0xC
  2274   00005E                     	ds	1
  2275   00005F                     TI_GetTics@TimerHandle:
  2276                           	callstack 0
  2277   00005F                     setCurrentUser@UID1:
  2278                           	callstack 0
  2279   00005F                     motorTerminal@currentUser:
  2280                           	callstack 0
  2281   00005F                     
  2282                           ; 1 bytes @ 0xD
  2283   00005F                     	ds	1
  2284   000060                     setCurrentUser@UID2:
  2285                           	callstack 0
  2286   000060                     Espera@Timer:
  2287                           	callstack 0
  2288   000060                     ??_motor_LEDs:
  2289                           
  2290                           ; 1 bytes @ 0xE
  2291   000060                     	ds	1
  2292   000061                     setCurrentUser@UID3:
  2293                           	callstack 0
  2294                           
  2295                           ; 1 bytes @ 0xF
  2296   000061                     	ds	1
  2297   000062                     setCurrentUser@UID4:
  2298                           	callstack 0
  2299   000062                     Espera@ms:
  2300                           	callstack 0
  2301                           
  2302                           ; 2 bytes @ 0x10
  2303   000062                     	ds	1
  2304   000063                     setCurrentUser@UID0:
  2305                           	callstack 0
  2306   000063                     
  2307                           ; 1 bytes @ 0x11
  2308   000063                     	ds	1
  2309   000064                     motorTerminal@opcion:
  2310                           	callstack 0
  2311   000064                     ??_motor_RFID:
  2312   000064                     ??_Espera:
  2313                           
  2314                           ; 1 bytes @ 0x12
  2315   000064                     	ds	1
  2316   000065                     motor_LEDs@currentTics:
  2317                           	callstack 0
  2318                           
  2319                           ; 4 bytes @ 0x13
  2320   000065                     	ds	1
  2321   000066                     motor_RFID@differentUID:
  2322                           	callstack 0
  2323                           
  2324                           ; 1 bytes @ 0x14
  2325   000066                     	ds	1
  2326   000067                     motor_RFID@currentUser:
  2327                           	callstack 0
  2328                           
  2329                           ; 5 bytes @ 0x15
  2330   000067                     	ds	1
  2331   000068                     LcInit@columns:
  2332                           	callstack 0
  2333   000068                     
  2334                           ; 1 bytes @ 0x16
  2335   000068                     	ds	1
  2336   000069                     LcInit@rows:
  2337                           	callstack 0
  2338   000069                     motor_LEDs@i:
  2339                           	callstack 0
  2340   000069                     
  2341                           ; 1 bytes @ 0x17
  2342   000069                     	ds	1
  2343   00006A                     LcInit@i:
  2344                           	callstack 0
  2345                           
  2346                           ; 2 bytes @ 0x18
  2347   00006A                     	ds	2
  2348   00006C                     _motor_RFID$556:
  2349                           	callstack 0
  2350                           
  2351                           ; 2 bytes @ 0x1A
  2352   00006C                     	ds	2
  2353   00006E                     motor_RFID@flag:
  2354                           	callstack 0
  2355                           
  2356                           ; 1 bytes @ 0x1C
  2357   00006E                     	ds	1
  2358   00006F                     
  2359                           ; 1 bytes @ 0x1D
  2360 ;;
  2361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2362 ;;
  2363 ;; *************** function _main *****************
  2364 ;; Defined at:
  2365 ;;		line 39 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1
  2379 ;;      Params:         0       0       0
  2380 ;;      Locals:         0       0       0
  2381 ;;      Temps:          0       0       0
  2382 ;;      Totals:         0       0       0
  2383 ;;Total ram usage:        0 bytes
  2384 ;; Hardware stack levels required when called: 10
  2385 ;; This function calls:
  2386 ;;		_LcInit
  2387 ;;		_TI_Init
  2388 ;;		_Terminal_Init
  2389 ;;		_initData
  2390 ;;		_initLeds
  2391 ;;		_initPorts
  2392 ;;		_initRFID
  2393 ;;		_initTeclado
  2394 ;;		_motorTeclado
  2395 ;;		_motorTerminal
  2396 ;;		_motor_LEDs
  2397 ;;		_motor_RFID
  2398 ;; This function is called by:
  2399 ;;		Startup code after reset
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text0
  2404   0018F6                     __ptext0:
  2405                           	callstack 0
  2406   0018F6                     _main:
  2407                           	callstack 21
  2408   0018F6                     
  2409                           ;main.c: 40:  ADCON1 = 0x0F;
  2410   0018F6  EC55  F00D         	call	_TI_Init	;wreg free
  2411                           
  2412                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2413   0018FA  EC33  F00E         	call	_initTeclado	;wreg free
  2414                           
  2415                           ;main.c: 42: }
  2416   0018FE  ECD8  F006         	call	_initRFID	;wreg free
  2417   001902                     
  2418                           ;main.c: 43: 
  2419   001902  EC6A  F00E         	call	_Terminal_Init	;wreg free
  2420   001906                     
  2421                           ;main.c: 44: 
  2422   001906  EC80  F00E         	call	_initPorts	;wreg free
  2423                           
  2424                           ;main.c: 45: 
  2425   00190A  EC72  F00E         	call	_initLeds	;wreg free
  2426                           
  2427                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2428   00190E  0E10               	movlw	16
  2429   001910  6E68               	movwf	LcInit@columns^0,c
  2430   001912  0E02               	movlw	2
  2431   001914  ECF1  F007         	call	_LcInit
  2432   001918                     
  2433                           ;main.c: 47: 
  2434   001918  ECF7  F00D         	call	_initData	;wreg free
  2435   00191C  8EF2               	bsf	242,7,c	;volatile
  2436   00191E  9CF2               	bcf	242,6,c	;volatile
  2437   001920                     l4184:
  2438   001920  EC7D  F005         	call	_motorTeclado	;wreg free
  2439   001924  EC3D  F004         	call	_motorTerminal	;wreg free
  2440   001928  EC15  F000         	call	_motor_RFID	;wreg free
  2441   00192C  EC6D  F008         	call	_motor_LEDs	;wreg free
  2442   001930  748D               	btg	141,2,c	;volatile
  2443   001932  EF90  F00C         	goto	l4184
  2444   001936  EF13  F000         	goto	start
  2445   00193A                     __end_of_main:
  2446                           	callstack 0
  2447                           
  2448 ;; *************** function _motor_RFID *****************
  2449 ;; Defined at:
  2450 ;;		line 161 in file "TAD_RFID.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  currentUser     5   21[COMRAM] unsigned char [5]
  2455 ;;  differentUID    1   20[COMRAM] unsigned char 
  2456 ;;  flag            1   28[COMRAM] unsigned char 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1
  2466 ;;      Params:         0       0       0
  2467 ;;      Locals:         9       0       0
  2468 ;;      Temps:          2       0       0
  2469 ;;      Totals:        11       0       0
  2470 ;;Total ram usage:       11 bytes
  2471 ;; Hardware stack levels used: 1
  2472 ;; Hardware stack levels required when called: 9
  2473 ;; This function calls:
  2474 ;;		_getActualUID
  2475 ;;		_motor_Read
  2476 ;;		_motor_Write
  2477 ;;		_setCurrentUser
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text1
  2484   00002A                     __ptext1:
  2485                           	callstack 0
  2486   00002A                     _motor_RFID:
  2487                           	callstack 21
  2488   00002A                     
  2489                           ;TAD_RFID.c: 184:     if (operation_pending == 1) {
  2490   00002A  0429               	decf	motor_RFID@operation_pending^0,w,c
  2491   00002C  A4D8               	btfss	status,2,c
  2492   00002E  EF1B  F000         	goto	u2831
  2493   000032  EF1D  F000         	goto	u2830
  2494   000036                     u2831:
  2495   000036  EF2F  F000         	goto	l3784
  2496   00003A                     u2830:
  2497   00003A                     
  2498                           ;TAD_RFID.c: 186:         flag = motor_Read(addr);
  2499   00003A  5028               	movf	motor_RFID@addr^0,w,c
  2500   00003C  EC68  F007         	call	_motor_Read
  2501   000040  6E6E               	movwf	motor_RFID@flag^0,c
  2502   000042                     
  2503                           ;TAD_RFID.c: 187:         if (flag != 0xFE) {
  2504   000042  0EFE               	movlw	254
  2505   000044  186E               	xorwf	motor_RFID@flag^0,w,c
  2506   000046  B4D8               	btfsc	status,2,c
  2507   000048  EF28  F000         	goto	u2841
  2508   00004C  EF2A  F000         	goto	u2840
  2509   000050                     u2841:
  2510   000050  EF3C  F004         	goto	l312
  2511   000054                     u2840:
  2512   000054                     
  2513                           ;TAD_RFID.c: 188:             tempRegValue = flag;
  2514   000054  C06E  F02D         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2515                           
  2516                           ;TAD_RFID.c: 189:             operation_pending = 0;
  2517   000058  6A29               	clrf	motor_RFID@operation_pending^0,c
  2518                           
  2519                           ;TAD_RFID.c: 190:         } else {
  2520   00005A  EF3C  F004         	goto	l312
  2521   00005E                     l3784:
  2522   00005E  0E02               	movlw	2
  2523   000060  1829               	xorwf	motor_RFID@operation_pending^0,w,c
  2524   000062  A4D8               	btfss	status,2,c
  2525   000064  EF36  F000         	goto	u2851
  2526   000068  EF38  F000         	goto	u2850
  2527   00006C                     u2851:
  2528   00006C  EF31  F004         	goto	l4102
  2529   000070                     u2850:
  2530   000070                     
  2531                           ;TAD_RFID.c: 195:         flag = motor_Write(addr, value);
  2532   000070  C027  F05A         	movff	motor_RFID@value,motor_Write@value
  2533   000074  5028               	movf	motor_RFID@addr^0,w,c
  2534   000076  EC0D  F00A         	call	_motor_Write
  2535   00007A  6E6E               	movwf	motor_RFID@flag^0,c
  2536   00007C                     
  2537                           ;TAD_RFID.c: 196:         if (flag != 0) {
  2538   00007C  506E               	movf	motor_RFID@flag^0,w,c
  2539   00007E  B4D8               	btfsc	status,2,c
  2540   000080  EF44  F000         	goto	u2861
  2541   000084  EF46  F000         	goto	u2860
  2542   000088                     u2861:
  2543   000088  EF3C  F004         	goto	l312
  2544   00008C                     u2860:
  2545   00008C                     
  2546                           ;TAD_RFID.c: 197:             operation_pending = 0;
  2547   00008C  6A29               	clrf	motor_RFID@operation_pending^0,c
  2548                           
  2549                           ;TAD_RFID.c: 198:         } else {
  2550   00008E  EF3C  F004         	goto	l312
  2551   000092                     l3792:
  2552                           
  2553                           ;TAD_RFID.c: 208:                         addr = 0x0D;
  2554   000092  0E0D               	movlw	13
  2555   000094  6E28               	movwf	motor_RFID@addr^0,c
  2556                           
  2557                           ;TAD_RFID.c: 209:                         value = 0x07;
  2558   000096  0E07               	movlw	7
  2559   000098  6E27               	movwf	motor_RFID@value^0,c
  2560                           
  2561                           ;TAD_RFID.c: 210:                         operation_pending = 2;
  2562   00009A  0E02               	movlw	2
  2563   00009C  6E29               	movwf	motor_RFID@operation_pending^0,c
  2564                           
  2565                           ;TAD_RFID.c: 211:                         substate = 1;
  2566   00009E  0E01               	movlw	1
  2567   0000A0  6E36               	movwf	motor_RFID@substate^0,c
  2568                           
  2569                           ;TAD_RFID.c: 212:                         break;
  2570   0000A2  EF3C  F004         	goto	l312
  2571   0000A6                     l3794:
  2572                           
  2573                           ;TAD_RFID.c: 214:                         TagType = 0x26;
  2574   0000A6  0E26               	movlw	38
  2575   0000A8  6E30               	movwf	motor_RFID@TagType^0,c
  2576                           
  2577                           ;TAD_RFID.c: 215:                         irqEn = 0x77;
  2578   0000AA  0E77               	movlw	119
  2579   0000AC  6E35               	movwf	motor_RFID@irqEn^0,c
  2580                           
  2581                           ;TAD_RFID.c: 216:                         waitIRq = 0x30;
  2582   0000AE  0E30               	movlw	48
  2583   0000B0  6E34               	movwf	motor_RFID@waitIRq^0,c
  2584                           
  2585                           ;TAD_RFID.c: 217:                         addr = 0x02;
  2586   0000B2  0E02               	movlw	2
  2587   0000B4  6E28               	movwf	motor_RFID@addr^0,c
  2588   0000B6                     
  2589                           ;TAD_RFID.c: 218:                         value = irqEn | 0x80;
  2590   0000B6  5035               	movf	motor_RFID@irqEn^0,w,c
  2591   0000B8  0980               	iorlw	128
  2592   0000BA  6E27               	movwf	motor_RFID@value^0,c
  2593   0000BC                     
  2594                           ;TAD_RFID.c: 219:                         operation_pending = 2;
  2595   0000BC  0E02               	movlw	2
  2596   0000BE  6E29               	movwf	motor_RFID@operation_pending^0,c
  2597   0000C0                     
  2598                           ;TAD_RFID.c: 220:                         substate = 2;
  2599   0000C0  0E02               	movlw	2
  2600   0000C2  6E36               	movwf	motor_RFID@substate^0,c
  2601                           
  2602                           ;TAD_RFID.c: 221:                         break;
  2603   0000C4  EF3C  F004         	goto	l312
  2604   0000C8                     l3802:
  2605                           
  2606                           ;TAD_RFID.c: 223:                         addr = 0x04;
  2607   0000C8  0E04               	movlw	4
  2608   0000CA  6E28               	movwf	motor_RFID@addr^0,c
  2609                           
  2610                           ;TAD_RFID.c: 224:                         operation_pending = 1;
  2611   0000CC  0E01               	movlw	1
  2612   0000CE  6E29               	movwf	motor_RFID@operation_pending^0,c
  2613                           
  2614                           ;TAD_RFID.c: 225:                         substate = 3;
  2615   0000D0  0E03               	movlw	3
  2616   0000D2  6E36               	movwf	motor_RFID@substate^0,c
  2617                           
  2618                           ;TAD_RFID.c: 226:                         break;
  2619   0000D4  EF3C  F004         	goto	l312
  2620   0000D8                     l3804:
  2621                           
  2622                           ;TAD_RFID.c: 228:                         if (tempRegValue == 0xFF) {
  2623   0000D8  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2624   0000DA  A4D8               	btfss	status,2,c
  2625   0000DC  EF72  F000         	goto	u2871
  2626   0000E0  EF74  F000         	goto	u2870
  2627   0000E4                     u2871:
  2628   0000E4  EF77  F000         	goto	l3808
  2629   0000E8                     u2870:
  2630   0000E8                     l3806:
  2631                           
  2632                           ;TAD_RFID.c: 229:                             substate = 0;
  2633   0000E8  6A36               	clrf	motor_RFID@substate^0,c
  2634                           
  2635                           ;TAD_RFID.c: 230:                         } else {
  2636   0000EA  EF3C  F004         	goto	l312
  2637   0000EE                     l3808:
  2638                           
  2639                           ;TAD_RFID.c: 231:                             addr = 0x02;
  2640   0000EE  0E02               	movlw	2
  2641   0000F0  6E28               	movwf	motor_RFID@addr^0,c
  2642   0000F2                     
  2643                           ;TAD_RFID.c: 232:                             value = tempRegValue & ~0x80;
  2644   0000F2  502D               	movf	motor_RFID@tempRegValue^0,w,c
  2645   0000F4  0B7F               	andlw	127
  2646   0000F6  6E27               	movwf	motor_RFID@value^0,c
  2647   0000F8                     l3812:
  2648                           
  2649                           ;TAD_RFID.c: 233:                             operation_pending = 2;
  2650   0000F8  0E02               	movlw	2
  2651   0000FA  6E29               	movwf	motor_RFID@operation_pending^0,c
  2652   0000FC                     
  2653                           ;TAD_RFID.c: 234:                             substate = 4;
  2654   0000FC  0E04               	movlw	4
  2655   0000FE  6E36               	movwf	motor_RFID@substate^0,c
  2656   000100  EF3C  F004         	goto	l312
  2657   000104                     l3816:
  2658                           
  2659                           ;TAD_RFID.c: 238:                         addr = 0x0A;
  2660   000104  0E0A               	movlw	10
  2661   000106  6E28               	movwf	motor_RFID@addr^0,c
  2662                           
  2663                           ;TAD_RFID.c: 239:                         operation_pending = 1;
  2664   000108  0E01               	movlw	1
  2665   00010A  6E29               	movwf	motor_RFID@operation_pending^0,c
  2666                           
  2667                           ;TAD_RFID.c: 240:                         substate = 5;
  2668   00010C  0E05               	movlw	5
  2669   00010E  6E36               	movwf	motor_RFID@substate^0,c
  2670                           
  2671                           ;TAD_RFID.c: 241:                         break;
  2672   000110  EF3C  F004         	goto	l312
  2673   000114                     l3818:
  2674                           
  2675                           ;TAD_RFID.c: 243:                         if (tempRegValue == 0xFF) {
  2676   000114  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2677   000116  A4D8               	btfss	status,2,c
  2678   000118  EF90  F000         	goto	u2881
  2679   00011C  EF92  F000         	goto	u2880
  2680   000120                     u2881:
  2681   000120  EF94  F000         	goto	l3822
  2682   000124                     u2880:
  2683   000124  EF74  F000         	goto	l3806
  2684   000128                     l3822:
  2685                           
  2686                           ;TAD_RFID.c: 246:                             addr = 0x0A;
  2687   000128  0E0A               	movlw	10
  2688   00012A  6E28               	movwf	motor_RFID@addr^0,c
  2689   00012C                     
  2690                           ;TAD_RFID.c: 247:                             value = tempRegValue | 0x80;
  2691   00012C  502D               	movf	motor_RFID@tempRegValue^0,w,c
  2692   00012E  0980               	iorlw	128
  2693   000130  6E27               	movwf	motor_RFID@value^0,c
  2694   000132                     l3826:
  2695                           
  2696                           ;TAD_RFID.c: 248:                             operation_pending = 2;
  2697   000132  0E02               	movlw	2
  2698   000134  6E29               	movwf	motor_RFID@operation_pending^0,c
  2699   000136                     
  2700                           ;TAD_RFID.c: 249:                             substate = 6;
  2701   000136  0E06               	movlw	6
  2702   000138  6E36               	movwf	motor_RFID@substate^0,c
  2703   00013A  EF3C  F004         	goto	l312
  2704   00013E                     l3830:
  2705                           
  2706                           ;TAD_RFID.c: 253:                         addr = 0x01;
  2707   00013E  0E01               	movlw	1
  2708   000140  6E28               	movwf	motor_RFID@addr^0,c
  2709   000142                     
  2710                           ;TAD_RFID.c: 254:                         value = 0x00;
  2711   000142  6A27               	clrf	motor_RFID@value^0,c
  2712                           
  2713                           ;TAD_RFID.c: 255:                         operation_pending = 2;
  2714   000144  0E02               	movlw	2
  2715   000146  6E29               	movwf	motor_RFID@operation_pending^0,c
  2716                           
  2717                           ;TAD_RFID.c: 256:                         substate = 7;
  2718   000148  0E07               	movlw	7
  2719   00014A  6E36               	movwf	motor_RFID@substate^0,c
  2720                           
  2721                           ;TAD_RFID.c: 257:                         break;
  2722   00014C  EF3C  F004         	goto	l312
  2723   000150                     l3834:
  2724                           
  2725                           ;TAD_RFID.c: 259:                         addr = 0x09;
  2726   000150  0E09               	movlw	9
  2727   000152  6E28               	movwf	motor_RFID@addr^0,c
  2728   000154                     
  2729                           ;TAD_RFID.c: 260:                         value = TagType;
  2730   000154  C030  F027         	movff	motor_RFID@TagType,motor_RFID@value
  2731                           
  2732                           ;TAD_RFID.c: 261:                         operation_pending = 2;
  2733   000158  0E02               	movlw	2
  2734   00015A  6E29               	movwf	motor_RFID@operation_pending^0,c
  2735                           
  2736                           ;TAD_RFID.c: 262:                         substate = 8;
  2737   00015C  0E08               	movlw	8
  2738   00015E  6E36               	movwf	motor_RFID@substate^0,c
  2739                           
  2740                           ;TAD_RFID.c: 263:                         break;
  2741   000160  EF3C  F004         	goto	l312
  2742   000164                     l3838:
  2743                           
  2744                           ;TAD_RFID.c: 265:                         addr = 0x01;
  2745   000164  0E01               	movlw	1
  2746   000166  6E28               	movwf	motor_RFID@addr^0,c
  2747                           
  2748                           ;TAD_RFID.c: 266:                         value = 0x0C;
  2749   000168  0E0C               	movlw	12
  2750   00016A  6E27               	movwf	motor_RFID@value^0,c
  2751                           
  2752                           ;TAD_RFID.c: 267:                         operation_pending = 2;
  2753   00016C  0E02               	movlw	2
  2754   00016E  6E29               	movwf	motor_RFID@operation_pending^0,c
  2755                           
  2756                           ;TAD_RFID.c: 268:                         substate = 9;
  2757   000170  0E09               	movlw	9
  2758   000172  6E36               	movwf	motor_RFID@substate^0,c
  2759                           
  2760                           ;TAD_RFID.c: 269:                         break;
  2761   000174  EF3C  F004         	goto	l312
  2762   000178                     l3840:
  2763                           
  2764                           ;TAD_RFID.c: 271:                         addr = 0x0D;
  2765   000178  0E0D               	movlw	13
  2766   00017A  6E28               	movwf	motor_RFID@addr^0,c
  2767                           
  2768                           ;TAD_RFID.c: 272:                         operation_pending = 1;
  2769   00017C  0E01               	movlw	1
  2770   00017E  6E29               	movwf	motor_RFID@operation_pending^0,c
  2771                           
  2772                           ;TAD_RFID.c: 273:                         substate = 10;
  2773   000180  0E0A               	movlw	10
  2774   000182  6E36               	movwf	motor_RFID@substate^0,c
  2775                           
  2776                           ;TAD_RFID.c: 274:                         break;
  2777   000184  EF3C  F004         	goto	l312
  2778   000188                     l3842:
  2779                           
  2780                           ;TAD_RFID.c: 276:                         if (tempRegValue == 0xFF) {
  2781   000188  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2782   00018A  A4D8               	btfss	status,2,c
  2783   00018C  EFCA  F000         	goto	u2891
  2784   000190  EFCC  F000         	goto	u2890
  2785   000194                     u2891:
  2786   000194  EFCE  F000         	goto	l3846
  2787   000198                     u2890:
  2788   000198  EF74  F000         	goto	l3806
  2789   00019C                     l3846:
  2790                           
  2791                           ;TAD_RFID.c: 279:                             addr = 0x0D;
  2792   00019C  0E0D               	movlw	13
  2793   00019E  6E28               	movwf	motor_RFID@addr^0,c
  2794   0001A0                     
  2795                           ;TAD_RFID.c: 280:                             value = tempRegValue | 0x80;
  2796   0001A0  502D               	movf	motor_RFID@tempRegValue^0,w,c
  2797   0001A2  0980               	iorlw	128
  2798   0001A4  6E27               	movwf	motor_RFID@value^0,c
  2799   0001A6                     
  2800                           ;TAD_RFID.c: 281:                             operation_pending = 2;
  2801   0001A6  0E02               	movlw	2
  2802   0001A8  6E29               	movwf	motor_RFID@operation_pending^0,c
  2803   0001AA                     
  2804                           ;TAD_RFID.c: 282:                             substate = 11;
  2805   0001AA  0E0B               	movlw	11
  2806   0001AC  6E36               	movwf	motor_RFID@substate^0,c
  2807   0001AE  EF3C  F004         	goto	l312
  2808   0001B2                     l339:
  2809                           
  2810                           ;TAD_RFID.c: 286:                         i = 0xFF;
  2811   0001B2  6832               	setf	motor_RFID@i^0,c
  2812   0001B4                     
  2813                           ;TAD_RFID.c: 287:                         addr = 0x04;
  2814   0001B4  0E04               	movlw	4
  2815   0001B6  6E28               	movwf	motor_RFID@addr^0,c
  2816                           
  2817                           ;TAD_RFID.c: 288:                         operation_pending = 1;
  2818   0001B8  0E01               	movlw	1
  2819   0001BA  6E29               	movwf	motor_RFID@operation_pending^0,c
  2820                           
  2821                           ;TAD_RFID.c: 289:                         substate = 12;
  2822   0001BC  0E0C               	movlw	12
  2823   0001BE  6E36               	movwf	motor_RFID@substate^0,c
  2824                           
  2825                           ;TAD_RFID.c: 290:                         break;
  2826   0001C0  EF3C  F004         	goto	l312
  2827   0001C4                     l3856:
  2828                           
  2829                           ;TAD_RFID.c: 292:                         if (tempRegValue == 0xFF) {
  2830   0001C4  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2831   0001C6  A4D8               	btfss	status,2,c
  2832   0001C8  EFE8  F000         	goto	u2901
  2833   0001CC  EFEA  F000         	goto	u2900
  2834   0001D0                     u2901:
  2835   0001D0  EFEC  F000         	goto	l341
  2836   0001D4                     u2900:
  2837   0001D4  EF74  F000         	goto	l3806
  2838   0001D8                     l341:
  2839                           
  2840                           ;TAD_RFID.c: 295:                             n = tempRegValue;
  2841   0001D8  C02D  F033         	movff	motor_RFID@tempRegValue,motor_RFID@n
  2842                           
  2843                           ;TAD_RFID.c: 296:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  2844   0001DC  B033               	btfsc	motor_RFID@n^0,0,c
  2845   0001DE  EFF3  F000         	goto	u2911
  2846   0001E2  EFF5  F000         	goto	u2910
  2847   0001E6                     u2911:
  2848   0001E6  EF02  F001         	goto	l3864
  2849   0001EA                     u2910:
  2850   0001EA  5033               	movf	motor_RFID@n^0,w,c
  2851   0001EC  1434               	andwf	motor_RFID@waitIRq^0,w,c
  2852   0001EE  0900               	iorlw	0
  2853   0001F0  A4D8               	btfss	status,2,c
  2854   0001F2  EFFD  F000         	goto	u2921
  2855   0001F6  EFFF  F000         	goto	u2920
  2856   0001FA                     u2921:
  2857   0001FA  EF02  F001         	goto	l3864
  2858   0001FE                     u2920:
  2859   0001FE  2E32               	decfsz	motor_RFID@i^0,f,c
  2860   000200  EF0A  F001         	goto	l3866
  2861   000204                     l3864:
  2862                           
  2863                           ;TAD_RFID.c: 297:                                 addr = 0x0D;
  2864   000204  0E0D               	movlw	13
  2865   000206  6E28               	movwf	motor_RFID@addr^0,c
  2866                           
  2867                           ;TAD_RFID.c: 298:                                 operation_pending = 1;
  2868   000208  0E01               	movlw	1
  2869   00020A  6E29               	movwf	motor_RFID@operation_pending^0,c
  2870                           
  2871                           ;TAD_RFID.c: 299:                                 substate = 13;
  2872   00020C  0E0D               	movlw	13
  2873   00020E  6E36               	movwf	motor_RFID@substate^0,c
  2874                           
  2875                           ;TAD_RFID.c: 300:                             } else {
  2876   000210  EF3C  F004         	goto	l312
  2877   000214                     l3866:
  2878                           
  2879                           ;TAD_RFID.c: 301:                                 addr = 0x04;
  2880   000214  0E04               	movlw	4
  2881   000216  6E28               	movwf	motor_RFID@addr^0,c
  2882                           
  2883                           ;TAD_RFID.c: 302:                                 operation_pending = 1;
  2884   000218  0E01               	movlw	1
  2885   00021A  6E29               	movwf	motor_RFID@operation_pending^0,c
  2886   00021C  EF3C  F004         	goto	l312
  2887   000220                     l3868:
  2888                           
  2889                           ;TAD_RFID.c: 308:                         if (tempRegValue == 0xFF) {
  2890   000220  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2891   000222  A4D8               	btfss	status,2,c
  2892   000224  EF16  F001         	goto	u2931
  2893   000228  EF18  F001         	goto	u2930
  2894   00022C                     u2931:
  2895   00022C  EF1A  F001         	goto	l3872
  2896   000230                     u2930:
  2897   000230  EF74  F000         	goto	l3806
  2898   000234                     l3872:
  2899   000234  502D               	movf	motor_RFID@tempRegValue^0,w,c
  2900   000236  B4D8               	btfsc	status,2,c
  2901   000238  EF20  F001         	goto	u2941
  2902   00023C  EF22  F001         	goto	u2940
  2903   000240                     u2941:
  2904   000240  EF2D  F001         	goto	l3882
  2905   000244                     u2940:
  2906   000244                     
  2907                           ;TAD_RFID.c: 311:                             addr = 0x0D;
  2908   000244  0E0D               	movlw	13
  2909   000246  6E28               	movwf	motor_RFID@addr^0,c
  2910   000248                     
  2911                           ;TAD_RFID.c: 312:                             value = tempRegValue & ~0x80;
  2912   000248  502D               	movf	motor_RFID@tempRegValue^0,w,c
  2913   00024A  0B7F               	andlw	127
  2914   00024C  6E27               	movwf	motor_RFID@value^0,c
  2915   00024E                     l3878:
  2916                           
  2917                           ;TAD_RFID.c: 313:                             operation_pending = 2;
  2918   00024E  0E02               	movlw	2
  2919   000250  6E29               	movwf	motor_RFID@operation_pending^0,c
  2920   000252                     
  2921                           ;TAD_RFID.c: 314:                             substate = 14;
  2922   000252  0E0E               	movlw	14
  2923   000254  6E36               	movwf	motor_RFID@substate^0,c
  2924                           
  2925                           ;TAD_RFID.c: 315:                         } else {
  2926   000256  EF3C  F004         	goto	l312
  2927   00025A                     l3882:
  2928                           
  2929                           ;TAD_RFID.c: 316:                             addr = 0x0D;
  2930   00025A  0E0D               	movlw	13
  2931   00025C  6E28               	movwf	motor_RFID@addr^0,c
  2932                           
  2933                           ;TAD_RFID.c: 317:                             operation_pending = 1;
  2934   00025E  0E01               	movlw	1
  2935   000260  6E29               	movwf	motor_RFID@operation_pending^0,c
  2936   000262  EF3C  F004         	goto	l312
  2937   000266                     l3884:
  2938                           
  2939                           ;TAD_RFID.c: 322:                         addr = 0x06;
  2940   000266  0E06               	movlw	6
  2941   000268  6E28               	movwf	motor_RFID@addr^0,c
  2942                           
  2943                           ;TAD_RFID.c: 323:                         operation_pending = 1;
  2944   00026A  0E01               	movlw	1
  2945   00026C  6E29               	movwf	motor_RFID@operation_pending^0,c
  2946                           
  2947                           ;TAD_RFID.c: 324:                         substate = 15;
  2948   00026E  0E0F               	movlw	15
  2949   000270  6E36               	movwf	motor_RFID@substate^0,c
  2950                           
  2951                           ;TAD_RFID.c: 325:                         break;
  2952   000272  EF3C  F004         	goto	l312
  2953   000276                     l3886:
  2954                           
  2955                           ;TAD_RFID.c: 327:                         if (tempRegValue == 0xFF) {
  2956   000276  282D               	incf	motor_RFID@tempRegValue^0,w,c
  2957   000278  A4D8               	btfss	status,2,c
  2958   00027A  EF41  F001         	goto	u2951
  2959   00027E  EF43  F001         	goto	u2950
  2960   000282                     u2951:
  2961   000282  EF45  F001         	goto	l3890
  2962   000286                     u2950:
  2963   000286  EF74  F000         	goto	l3806
  2964   00028A                     l3890:
  2965   00028A  5032               	movf	motor_RFID@i^0,w,c
  2966   00028C  B4D8               	btfsc	status,2,c
  2967   00028E  EF4B  F001         	goto	u2961
  2968   000292  EF4D  F001         	goto	u2960
  2969   000296                     u2961:
  2970   000296  EF60  F001         	goto	l356
  2971   00029A                     u2960:
  2972   00029A  C02D  F064         	movff	motor_RFID@tempRegValue,??_motor_RFID
  2973   00029E  0E1B               	movlw	27
  2974   0002A0  1664               	andwf	??_motor_RFID^0,f,c
  2975   0002A2  A4D8               	btfss	status,2,c
  2976   0002A4  EF56  F001         	goto	u2971
  2977   0002A8  EF58  F001         	goto	u2970
  2978   0002AC                     u2971:
  2979   0002AC  EF60  F001         	goto	l356
  2980   0002B0                     u2970:
  2981   0002B0                     
  2982                           ;TAD_RFID.c: 330:                             addr = 0x0A;
  2983   0002B0  0E0A               	movlw	10
  2984   0002B2  6E28               	movwf	motor_RFID@addr^0,c
  2985                           
  2986                           ;TAD_RFID.c: 331:                             operation_pending = 1;
  2987   0002B4  0E01               	movlw	1
  2988   0002B6  6E29               	movwf	motor_RFID@operation_pending^0,c
  2989                           
  2990                           ;TAD_RFID.c: 332:                             substate = 16;
  2991   0002B8  0E10               	movlw	16
  2992   0002BA  6E36               	movwf	motor_RFID@substate^0,c
  2993                           
  2994                           ;TAD_RFID.c: 333:                         } else {
  2995   0002BC  EF3C  F004         	goto	l312
  2996   0002C0                     l356:
  2997                           
  2998                           ;TAD_RFID.c: 334:                             state = substate = 0;
  2999   0002C0  6A36               	clrf	motor_RFID@substate^0,c
  3000   0002C2  6A37               	clrf	motor_RFID@state^0,c
  3001   0002C4  EF3C  F004         	goto	l312
  3002   0002C8                     l3896:
  3003                           
  3004                           ;TAD_RFID.c: 338:                         if (tempRegValue == 0xFF) {
  3005   0002C8  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3006   0002CA  A4D8               	btfss	status,2,c
  3007   0002CC  EF6A  F001         	goto	u2981
  3008   0002D0  EF6C  F001         	goto	u2980
  3009   0002D4                     u2981:
  3010   0002D4  EF6E  F001         	goto	l359
  3011   0002D8                     u2980:
  3012   0002D8  EF74  F000         	goto	l3806
  3013   0002DC                     l359:
  3014                           
  3015                           ;TAD_RFID.c: 341:                             fifoLevel = tempRegValue;
  3016   0002DC  C02D  F02B         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3017   0002E0                     
  3018                           ;TAD_RFID.c: 342:                             addr = 0x0C;
  3019   0002E0  0E0C               	movlw	12
  3020   0002E2  6E28               	movwf	motor_RFID@addr^0,c
  3021                           
  3022                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3023   0002E4  0E01               	movlw	1
  3024   0002E6  6E29               	movwf	motor_RFID@operation_pending^0,c
  3025                           
  3026                           ;TAD_RFID.c: 344:                             substate = 17;
  3027   0002E8  0E11               	movlw	17
  3028   0002EA  6E36               	movwf	motor_RFID@substate^0,c
  3029   0002EC  EF3C  F004         	goto	l312
  3030   0002F0                     l3902:
  3031                           
  3032                           ;TAD_RFID.c: 348:                         if (tempRegValue == 0xFF) {
  3033   0002F0  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3034   0002F2  A4D8               	btfss	status,2,c
  3035   0002F4  EF7E  F001         	goto	u2991
  3036   0002F8  EF80  F001         	goto	u2990
  3037   0002FC                     u2991:
  3038   0002FC  EF82  F001         	goto	l3906
  3039   000300                     u2990:
  3040   000300  EF74  F000         	goto	l3806
  3041   000304                     l3906:
  3042                           
  3043                           ;TAD_RFID.c: 351:                             lastBitsVal = tempRegValue & 0x07;
  3044   000304  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3045   000306  0B07               	andlw	7
  3046   000308  6E2C               	movwf	motor_RFID@lastBitsVal^0,c
  3047   00030A                     
  3048                           ;TAD_RFID.c: 352:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3049   00030A  502C               	movf	motor_RFID@lastBitsVal^0,w,c
  3050   00030C  A4D8               	btfss	status,2,c
  3051   00030E  EF8B  F001         	goto	u3001
  3052   000312  EF8D  F001         	goto	u3000
  3053   000316                     u3001:
  3054   000316  EF95  F001         	goto	l3912
  3055   00031A                     u3000:
  3056   00031A  502B               	movf	motor_RFID@fifoLevel^0,w,c
  3057   00031C  0D08               	mullw	8
  3058   00031E  CFF3 F06C          	movff	prodl,_motor_RFID$556
  3059   000322  CFF4 F06D          	movff	prodh,_motor_RFID$556+1
  3060   000326  EFAB  F001         	goto	l3914
  3061   00032A                     l3912:
  3062   00032A  502C               	movf	motor_RFID@lastBitsVal^0,w,c
  3063   00032C  C02B  F064         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3064   000330  6A65               	clrf	(??_motor_RFID+1)^0,c
  3065   000332  90D8               	bcf	status,0,c
  3066   000334  3664               	rlcf	??_motor_RFID^0,f,c
  3067   000336  3665               	rlcf	(??_motor_RFID+1)^0,f,c
  3068   000338  90D8               	bcf	status,0,c
  3069   00033A  3664               	rlcf	??_motor_RFID^0,f,c
  3070   00033C  3665               	rlcf	(??_motor_RFID+1)^0,f,c
  3071   00033E  90D8               	bcf	status,0,c
  3072   000340  3664               	rlcf	??_motor_RFID^0,f,c
  3073   000342  3665               	rlcf	(??_motor_RFID+1)^0,f,c
  3074   000344  2664               	addwf	??_motor_RFID^0,f,c
  3075   000346  0E00               	movlw	0
  3076   000348  2265               	addwfc	(??_motor_RFID+1)^0,f,c
  3077   00034A  0EF8               	movlw	248
  3078   00034C  2464               	addwf	??_motor_RFID^0,w,c
  3079   00034E  6E6C               	movwf	_motor_RFID$556^0,c
  3080   000350  0EFF               	movlw	255
  3081   000352  2065               	addwfc	(??_motor_RFID+1)^0,w,c
  3082   000354  6E6D               	movwf	(_motor_RFID$556+1)^0,c
  3083   000356                     l3914:
  3084   000356  C06C  F02A         	movff	_motor_RFID$556,motor_RFID@backBitsCalc
  3085                           
  3086                           ;TAD_RFID.c: 353:                             if (backBitsCalc == 0x10) {
  3087   00035A  0E10               	movlw	16
  3088   00035C  182A               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3089   00035E  A4D8               	btfss	status,2,c
  3090   000360  EFB4  F001         	goto	u3011
  3091   000364  EFB6  F001         	goto	u3010
  3092   000368                     u3011:
  3093   000368  EF60  F001         	goto	l356
  3094   00036C                     u3010:
  3095   00036C                     
  3096                           ;TAD_RFID.c: 354:                                 state = 1;
  3097   00036C  0E01               	movlw	1
  3098   00036E  6E37               	movwf	motor_RFID@state^0,c
  3099   000370  EF74  F000         	goto	l3806
  3100   000374                     l3922:
  3101   000374  5036               	movf	motor_RFID@substate^0,w,c
  3102                           
  3103                           ; Switch size 1, requested type "simple"
  3104                           ; Number of cases is 18, Range of values is 0 to 17
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte           55    28 (average)
  3108                           ;	Chosen strategy is simple_byte
  3109   000376  0A00               	xorlw	0	; case 0
  3110   000378  B4D8               	btfsc	status,2,c
  3111   00037A  EF49  F000         	goto	l3792
  3112   00037E  0A01               	xorlw	1	; case 1
  3113   000380  B4D8               	btfsc	status,2,c
  3114   000382  EF53  F000         	goto	l3794
  3115   000386  0A03               	xorlw	3	; case 2
  3116   000388  B4D8               	btfsc	status,2,c
  3117   00038A  EF64  F000         	goto	l3802
  3118   00038E  0A01               	xorlw	1	; case 3
  3119   000390  B4D8               	btfsc	status,2,c
  3120   000392  EF6C  F000         	goto	l3804
  3121   000396  0A07               	xorlw	7	; case 4
  3122   000398  B4D8               	btfsc	status,2,c
  3123   00039A  EF82  F000         	goto	l3816
  3124   00039E  0A01               	xorlw	1	; case 5
  3125   0003A0  B4D8               	btfsc	status,2,c
  3126   0003A2  EF8A  F000         	goto	l3818
  3127   0003A6  0A03               	xorlw	3	; case 6
  3128   0003A8  B4D8               	btfsc	status,2,c
  3129   0003AA  EF9F  F000         	goto	l3830
  3130   0003AE  0A01               	xorlw	1	; case 7
  3131   0003B0  B4D8               	btfsc	status,2,c
  3132   0003B2  EFA8  F000         	goto	l3834
  3133   0003B6  0A0F               	xorlw	15	; case 8
  3134   0003B8  B4D8               	btfsc	status,2,c
  3135   0003BA  EFB2  F000         	goto	l3838
  3136   0003BE  0A01               	xorlw	1	; case 9
  3137   0003C0  B4D8               	btfsc	status,2,c
  3138   0003C2  EFBC  F000         	goto	l3840
  3139   0003C6  0A03               	xorlw	3	; case 10
  3140   0003C8  B4D8               	btfsc	status,2,c
  3141   0003CA  EFC4  F000         	goto	l3842
  3142   0003CE  0A01               	xorlw	1	; case 11
  3143   0003D0  B4D8               	btfsc	status,2,c
  3144   0003D2  EFD9  F000         	goto	l339
  3145   0003D6  0A07               	xorlw	7	; case 12
  3146   0003D8  B4D8               	btfsc	status,2,c
  3147   0003DA  EFE2  F000         	goto	l3856
  3148   0003DE  0A01               	xorlw	1	; case 13
  3149   0003E0  B4D8               	btfsc	status,2,c
  3150   0003E2  EF10  F001         	goto	l3868
  3151   0003E6  0A03               	xorlw	3	; case 14
  3152   0003E8  B4D8               	btfsc	status,2,c
  3153   0003EA  EF33  F001         	goto	l3884
  3154   0003EE  0A01               	xorlw	1	; case 15
  3155   0003F0  B4D8               	btfsc	status,2,c
  3156   0003F2  EF3B  F001         	goto	l3886
  3157   0003F6  0A1F               	xorlw	31	; case 16
  3158   0003F8  B4D8               	btfsc	status,2,c
  3159   0003FA  EF64  F001         	goto	l3896
  3160   0003FE  0A01               	xorlw	1	; case 17
  3161   000400  B4D8               	btfsc	status,2,c
  3162   000402  EF78  F001         	goto	l3902
  3163   000406  EF3C  F004         	goto	l312
  3164   00040A                     l3924:
  3165                           
  3166                           ;TAD_RFID.c: 367:                         addr = 0x0D;
  3167   00040A  0E0D               	movlw	13
  3168   00040C  6E28               	movwf	motor_RFID@addr^0,c
  3169   00040E                     
  3170                           ;TAD_RFID.c: 368:                         value = 0x00;
  3171   00040E  6A27               	clrf	motor_RFID@value^0,c
  3172                           
  3173                           ;TAD_RFID.c: 369:                         operation_pending = 2;
  3174   000410  0E02               	movlw	2
  3175   000412  6E29               	movwf	motor_RFID@operation_pending^0,c
  3176                           
  3177                           ;TAD_RFID.c: 370:                         substate = 1;
  3178   000414  0E01               	movlw	1
  3179   000416  6E36               	movwf	motor_RFID@substate^0,c
  3180                           
  3181                           ;TAD_RFID.c: 371:                         break;
  3182   000418  EF3C  F004         	goto	l312
  3183   00041C                     l3928:
  3184                           
  3185                           ;TAD_RFID.c: 373:                         UID[0] = 0x93;
  3186   00041C  0E93               	movlw	147
  3187   00041E  6E01               	movwf	motor_RFID@UID^0,c
  3188                           
  3189                           ;TAD_RFID.c: 374:                         UID[1] = 0x20;
  3190   000420  0E20               	movlw	32
  3191   000422  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3192                           
  3193                           ;TAD_RFID.c: 375:                         addr = 0x08;
  3194   000424  0E08               	movlw	8
  3195   000426  6E28               	movwf	motor_RFID@addr^0,c
  3196                           
  3197                           ;TAD_RFID.c: 376:                         operation_pending = 1;
  3198   000428  0E01               	movlw	1
  3199   00042A  6E29               	movwf	motor_RFID@operation_pending^0,c
  3200                           
  3201                           ;TAD_RFID.c: 377:                         substate = 2;
  3202   00042C  0E02               	movlw	2
  3203   00042E  6E36               	movwf	motor_RFID@substate^0,c
  3204                           
  3205                           ;TAD_RFID.c: 378:                         break;
  3206   000430  EF3C  F004         	goto	l312
  3207   000434                     l3930:
  3208                           
  3209                           ;TAD_RFID.c: 380:                         if (tempRegValue == 0xFF) {
  3210   000434  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3211   000436  A4D8               	btfss	status,2,c
  3212   000438  EF20  F002         	goto	u3021
  3213   00043C  EF22  F002         	goto	u3020
  3214   000440                     u3021:
  3215   000440  EF24  F002         	goto	l3934
  3216   000444                     u3020:
  3217   000444  EF60  F001         	goto	l356
  3218   000448                     l3934:
  3219                           
  3220                           ;TAD_RFID.c: 383:                             addr = 0x08;
  3221   000448  0E08               	movlw	8
  3222   00044A  6E28               	movwf	motor_RFID@addr^0,c
  3223   00044C                     
  3224                           ;TAD_RFID.c: 384:                             value = tempRegValue & ~0x08;
  3225   00044C  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3226   00044E  0BF7               	andlw	247
  3227   000450  6E27               	movwf	motor_RFID@value^0,c
  3228   000452                     
  3229                           ;TAD_RFID.c: 385:                             operation_pending = 2;
  3230   000452  0E02               	movlw	2
  3231   000454  6E29               	movwf	motor_RFID@operation_pending^0,c
  3232   000456                     
  3233                           ;TAD_RFID.c: 386:                             substate = 3;
  3234   000456  0E03               	movlw	3
  3235   000458  6E36               	movwf	motor_RFID@substate^0,c
  3236   00045A  EF3C  F004         	goto	l312
  3237   00045E                     l3942:
  3238                           
  3239                           ;TAD_RFID.c: 390:                         irqEn = 0x77;
  3240   00045E  0E77               	movlw	119
  3241   000460  6E35               	movwf	motor_RFID@irqEn^0,c
  3242                           
  3243                           ;TAD_RFID.c: 391:                         waitIRq = 0x30;
  3244   000462  0E30               	movlw	48
  3245   000464  6E34               	movwf	motor_RFID@waitIRq^0,c
  3246                           
  3247                           ;TAD_RFID.c: 392:                         addr = 0x02;
  3248   000466  0E02               	movlw	2
  3249   000468  6E28               	movwf	motor_RFID@addr^0,c
  3250   00046A                     
  3251                           ;TAD_RFID.c: 393:                         value = irqEn | 0x80;
  3252   00046A  5035               	movf	motor_RFID@irqEn^0,w,c
  3253   00046C  0980               	iorlw	128
  3254   00046E  6E27               	movwf	motor_RFID@value^0,c
  3255   000470  EF7C  F000         	goto	l3812
  3256   000474                     l3950:
  3257                           
  3258                           ;TAD_RFID.c: 398:                         addr = 0x04;
  3259   000474  0E04               	movlw	4
  3260   000476  6E28               	movwf	motor_RFID@addr^0,c
  3261                           
  3262                           ;TAD_RFID.c: 399:                         operation_pending = 1;
  3263   000478  0E01               	movlw	1
  3264   00047A  6E29               	movwf	motor_RFID@operation_pending^0,c
  3265                           
  3266                           ;TAD_RFID.c: 400:                         substate = 5;
  3267   00047C  0E05               	movlw	5
  3268   00047E  6E36               	movwf	motor_RFID@substate^0,c
  3269                           
  3270                           ;TAD_RFID.c: 401:                         break;
  3271   000480  EF3C  F004         	goto	l312
  3272   000484                     l3952:
  3273                           
  3274                           ;TAD_RFID.c: 403:                         if (tempRegValue == 0xFF) {
  3275   000484  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3276   000486  A4D8               	btfss	status,2,c
  3277   000488  EF48  F002         	goto	u3031
  3278   00048C  EF4A  F002         	goto	u3030
  3279   000490                     u3031:
  3280   000490  EF4C  F002         	goto	l3956
  3281   000494                     u3030:
  3282   000494  EF60  F001         	goto	l356
  3283   000498                     l3956:
  3284                           
  3285                           ;TAD_RFID.c: 406:                             addr = 0x04;
  3286   000498  0E04               	movlw	4
  3287   00049A  6E28               	movwf	motor_RFID@addr^0,c
  3288   00049C                     
  3289                           ;TAD_RFID.c: 407:                             value = tempRegValue & ~0x80;
  3290   00049C  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3291   00049E  0B7F               	andlw	127
  3292   0004A0  6E27               	movwf	motor_RFID@value^0,c
  3293   0004A2  EF99  F000         	goto	l3826
  3294   0004A6                     l3964:
  3295                           
  3296                           ;TAD_RFID.c: 413:                         addr = 0x0A;
  3297   0004A6  0E0A               	movlw	10
  3298   0004A8  6E28               	movwf	motor_RFID@addr^0,c
  3299                           
  3300                           ;TAD_RFID.c: 414:                         operation_pending = 1;
  3301   0004AA  0E01               	movlw	1
  3302   0004AC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3303                           
  3304                           ;TAD_RFID.c: 415:                         substate = 7;
  3305   0004AE  0E07               	movlw	7
  3306   0004B0  6E36               	movwf	motor_RFID@substate^0,c
  3307                           
  3308                           ;TAD_RFID.c: 416:                         break;
  3309   0004B2  EF3C  F004         	goto	l312
  3310   0004B6                     l3966:
  3311                           
  3312                           ;TAD_RFID.c: 418:                         if (tempRegValue == 0xFF) {
  3313   0004B6  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3314   0004B8  A4D8               	btfss	status,2,c
  3315   0004BA  EF61  F002         	goto	u3041
  3316   0004BE  EF63  F002         	goto	u3040
  3317   0004C2                     u3041:
  3318   0004C2  EF65  F002         	goto	l3970
  3319   0004C6                     u3040:
  3320   0004C6  EF60  F001         	goto	l356
  3321   0004CA                     l3970:
  3322                           
  3323                           ;TAD_RFID.c: 421:                             addr = 0x0A;
  3324   0004CA  0E0A               	movlw	10
  3325   0004CC  6E28               	movwf	motor_RFID@addr^0,c
  3326   0004CE                     
  3327                           ;TAD_RFID.c: 422:                             value = tempRegValue | 0x80;
  3328   0004CE  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3329   0004D0  0980               	iorlw	128
  3330   0004D2  6E27               	movwf	motor_RFID@value^0,c
  3331   0004D4                     
  3332                           ;TAD_RFID.c: 423:                             operation_pending = 2;
  3333   0004D4  0E02               	movlw	2
  3334   0004D6  6E29               	movwf	motor_RFID@operation_pending^0,c
  3335   0004D8                     
  3336                           ;TAD_RFID.c: 424:                             substate = 8;
  3337   0004D8  0E08               	movlw	8
  3338   0004DA  6E36               	movwf	motor_RFID@substate^0,c
  3339   0004DC  EF3C  F004         	goto	l312
  3340   0004E0                     l3978:
  3341                           
  3342                           ;TAD_RFID.c: 428:                         addr = 0x01;
  3343   0004E0  0E01               	movlw	1
  3344   0004E2  6E28               	movwf	motor_RFID@addr^0,c
  3345   0004E4                     
  3346                           ;TAD_RFID.c: 429:                         value = 0x00;
  3347   0004E4  6A27               	clrf	motor_RFID@value^0,c
  3348                           
  3349                           ;TAD_RFID.c: 430:                         operation_pending = 2;
  3350   0004E6  0E02               	movlw	2
  3351   0004E8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3352                           
  3353                           ;TAD_RFID.c: 431:                         substate = 9;
  3354   0004EA  0E09               	movlw	9
  3355   0004EC  6E36               	movwf	motor_RFID@substate^0,c
  3356                           
  3357                           ;TAD_RFID.c: 432:                         break;
  3358   0004EE  EF3C  F004         	goto	l312
  3359   0004F2                     l3982:
  3360                           
  3361                           ;TAD_RFID.c: 434:                         addr = 0x09;
  3362   0004F2  0E09               	movlw	9
  3363   0004F4  6E28               	movwf	motor_RFID@addr^0,c
  3364   0004F6                     
  3365                           ;TAD_RFID.c: 435:                         value = UID[0];
  3366   0004F6  C001  F027         	movff	motor_RFID@UID,motor_RFID@value
  3367                           
  3368                           ;TAD_RFID.c: 436:                         operation_pending = 2;
  3369   0004FA  0E02               	movlw	2
  3370   0004FC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3371                           
  3372                           ;TAD_RFID.c: 437:                         substate = 10;
  3373   0004FE  0E0A               	movlw	10
  3374   000500  6E36               	movwf	motor_RFID@substate^0,c
  3375                           
  3376                           ;TAD_RFID.c: 438:                         break;
  3377   000502  EF3C  F004         	goto	l312
  3378   000506                     l3986:
  3379                           
  3380                           ;TAD_RFID.c: 440:                         addr = 0x09;
  3381   000506  0E09               	movlw	9
  3382   000508  6E28               	movwf	motor_RFID@addr^0,c
  3383   00050A                     
  3384                           ;TAD_RFID.c: 441:                         value = UID[1];
  3385   00050A  C002  F027         	movff	motor_RFID@UID+1,motor_RFID@value
  3386                           
  3387                           ;TAD_RFID.c: 442:                         operation_pending = 2;
  3388   00050E  0E02               	movlw	2
  3389   000510  6E29               	movwf	motor_RFID@operation_pending^0,c
  3390                           
  3391                           ;TAD_RFID.c: 443:                         substate = 11;
  3392   000512  0E0B               	movlw	11
  3393   000514  6E36               	movwf	motor_RFID@substate^0,c
  3394                           
  3395                           ;TAD_RFID.c: 444:                         break;
  3396   000516  EF3C  F004         	goto	l312
  3397   00051A                     l3990:
  3398                           
  3399                           ;TAD_RFID.c: 446:                         addr = 0x01;
  3400   00051A  0E01               	movlw	1
  3401   00051C  6E28               	movwf	motor_RFID@addr^0,c
  3402                           
  3403                           ;TAD_RFID.c: 447:                         value = 0x0C;
  3404   00051E  0E0C               	movlw	12
  3405   000520  6E27               	movwf	motor_RFID@value^0,c
  3406                           
  3407                           ;TAD_RFID.c: 448:                         operation_pending = 2;
  3408   000522  0E02               	movlw	2
  3409   000524  6E29               	movwf	motor_RFID@operation_pending^0,c
  3410                           
  3411                           ;TAD_RFID.c: 449:                         substate = 12;
  3412   000526  0E0C               	movlw	12
  3413   000528  6E36               	movwf	motor_RFID@substate^0,c
  3414                           
  3415                           ;TAD_RFID.c: 450:                         break;
  3416   00052A  EF3C  F004         	goto	l312
  3417   00052E                     l3994:
  3418                           
  3419                           ;TAD_RFID.c: 457:                         if (tempRegValue == 0xFF) {
  3420   00052E  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3421   000530  A4D8               	btfss	status,2,c
  3422   000532  EF9D  F002         	goto	u3051
  3423   000536  EF9F  F002         	goto	u3050
  3424   00053A                     u3051:
  3425   00053A  EFA1  F002         	goto	l3998
  3426   00053E                     u3050:
  3427   00053E  EF60  F001         	goto	l356
  3428   000542                     l3998:
  3429                           
  3430                           ;TAD_RFID.c: 460:                             addr = 0x0D;
  3431   000542  0E0D               	movlw	13
  3432   000544  6E28               	movwf	motor_RFID@addr^0,c
  3433   000546                     
  3434                           ;TAD_RFID.c: 461:                             value = tempRegValue | 0x80;
  3435   000546  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3436   000548  0980               	iorlw	128
  3437   00054A  6E27               	movwf	motor_RFID@value^0,c
  3438   00054C  EF27  F001         	goto	l3878
  3439   000550                     l396:
  3440                           
  3441                           ;TAD_RFID.c: 467:                         i = 0xFF;
  3442   000550  6832               	setf	motor_RFID@i^0,c
  3443   000552                     
  3444                           ;TAD_RFID.c: 468:                         addr = 0x04;
  3445   000552  0E04               	movlw	4
  3446   000554  6E28               	movwf	motor_RFID@addr^0,c
  3447                           
  3448                           ;TAD_RFID.c: 469:                         operation_pending = 1;
  3449   000556  0E01               	movlw	1
  3450   000558  6E29               	movwf	motor_RFID@operation_pending^0,c
  3451                           
  3452                           ;TAD_RFID.c: 470:                         substate = 15;
  3453   00055A  0E0F               	movlw	15
  3454   00055C  6E36               	movwf	motor_RFID@substate^0,c
  3455                           
  3456                           ;TAD_RFID.c: 471:                         break;
  3457   00055E  EF3C  F004         	goto	l312
  3458   000562                     l4008:
  3459                           
  3460                           ;TAD_RFID.c: 473:                         if (tempRegValue == 0xFF) {
  3461   000562  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3462   000564  A4D8               	btfss	status,2,c
  3463   000566  EFB7  F002         	goto	u3061
  3464   00056A  EFB9  F002         	goto	u3060
  3465   00056E                     u3061:
  3466   00056E  EFBB  F002         	goto	l398
  3467   000572                     u3060:
  3468   000572  EF60  F001         	goto	l356
  3469   000576                     l398:
  3470                           
  3471                           ;TAD_RFID.c: 476:                             n = tempRegValue;
  3472   000576  C02D  F033         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3473                           
  3474                           ;TAD_RFID.c: 477:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3475   00057A  B033               	btfsc	motor_RFID@n^0,0,c
  3476   00057C  EFC2  F002         	goto	u3071
  3477   000580  EFC4  F002         	goto	u3070
  3478   000584                     u3071:
  3479   000584  EFD1  F002         	goto	l4016
  3480   000588                     u3070:
  3481   000588  5033               	movf	motor_RFID@n^0,w,c
  3482   00058A  1434               	andwf	motor_RFID@waitIRq^0,w,c
  3483   00058C  0900               	iorlw	0
  3484   00058E  A4D8               	btfss	status,2,c
  3485   000590  EFCC  F002         	goto	u3081
  3486   000594  EFCE  F002         	goto	u3080
  3487   000598                     u3081:
  3488   000598  EFD1  F002         	goto	l4016
  3489   00059C                     u3080:
  3490   00059C  2E32               	decfsz	motor_RFID@i^0,f,c
  3491   00059E  EF0A  F001         	goto	l3866
  3492   0005A2                     l4016:
  3493                           
  3494                           ;TAD_RFID.c: 478:                                 addr = 0x0D;
  3495   0005A2  0E0D               	movlw	13
  3496   0005A4  6E28               	movwf	motor_RFID@addr^0,c
  3497                           
  3498                           ;TAD_RFID.c: 479:                                 operation_pending = 1;
  3499   0005A6  0E01               	movlw	1
  3500   0005A8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3501                           
  3502                           ;TAD_RFID.c: 480:                                 substate = 16;
  3503   0005AA  0E10               	movlw	16
  3504   0005AC  6E36               	movwf	motor_RFID@substate^0,c
  3505                           
  3506                           ;TAD_RFID.c: 481:                             } else {
  3507   0005AE  EF3C  F004         	goto	l312
  3508   0005B2                     l4020:
  3509                           
  3510                           ;TAD_RFID.c: 489:                         if (tempRegValue == 0xFF) {
  3511   0005B2  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3512   0005B4  A4D8               	btfss	status,2,c
  3513   0005B6  EFDF  F002         	goto	u3091
  3514   0005BA  EFE1  F002         	goto	u3090
  3515   0005BE                     u3091:
  3516   0005BE  EFE3  F002         	goto	l4024
  3517   0005C2                     u3090:
  3518   0005C2  EF60  F001         	goto	l356
  3519   0005C6                     l4024:
  3520                           
  3521                           ;TAD_RFID.c: 492:                             addr = 0x0D;
  3522   0005C6  0E0D               	movlw	13
  3523   0005C8  6E28               	movwf	motor_RFID@addr^0,c
  3524   0005CA                     
  3525                           ;TAD_RFID.c: 493:                             value = tempRegValue & ~0x80;
  3526   0005CA  502D               	movf	motor_RFID@tempRegValue^0,w,c
  3527   0005CC  0B7F               	andlw	127
  3528   0005CE  6E27               	movwf	motor_RFID@value^0,c
  3529   0005D0                     
  3530                           ;TAD_RFID.c: 494:                             operation_pending = 2;
  3531   0005D0  0E02               	movlw	2
  3532   0005D2  6E29               	movwf	motor_RFID@operation_pending^0,c
  3533   0005D4                     
  3534                           ;TAD_RFID.c: 495:                             substate = 17;
  3535   0005D4  0E11               	movlw	17
  3536   0005D6  6E36               	movwf	motor_RFID@substate^0,c
  3537   0005D8  EF3C  F004         	goto	l312
  3538   0005DC                     l4032:
  3539                           
  3540                           ;TAD_RFID.c: 499:                         addr = 0x06;
  3541   0005DC  0E06               	movlw	6
  3542   0005DE  6E28               	movwf	motor_RFID@addr^0,c
  3543                           
  3544                           ;TAD_RFID.c: 500:                         operation_pending = 1;
  3545   0005E0  0E01               	movlw	1
  3546   0005E2  6E29               	movwf	motor_RFID@operation_pending^0,c
  3547                           
  3548                           ;TAD_RFID.c: 501:                         substate = 18;
  3549   0005E4  0E12               	movlw	18
  3550   0005E6  6E36               	movwf	motor_RFID@substate^0,c
  3551                           
  3552                           ;TAD_RFID.c: 502:                         break;
  3553   0005E8  EF3C  F004         	goto	l312
  3554   0005EC                     l4034:
  3555                           
  3556                           ;TAD_RFID.c: 504:                         if (tempRegValue == 0xFF) {
  3557   0005EC  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3558   0005EE  A4D8               	btfss	status,2,c
  3559   0005F0  EFFC  F002         	goto	u3101
  3560   0005F4  EFFE  F002         	goto	u3100
  3561   0005F8                     u3101:
  3562   0005F8  EF00  F003         	goto	l4038
  3563   0005FC                     u3100:
  3564   0005FC  EF60  F001         	goto	l356
  3565   000600                     l4038:
  3566   000600  5032               	movf	motor_RFID@i^0,w,c
  3567   000602  B4D8               	btfsc	status,2,c
  3568   000604  EF06  F003         	goto	u3111
  3569   000608  EF08  F003         	goto	u3110
  3570   00060C                     u3111:
  3571   00060C  EF60  F001         	goto	l356
  3572   000610                     u3110:
  3573   000610  C02D  F064         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3574   000614  0E1B               	movlw	27
  3575   000616  1664               	andwf	??_motor_RFID^0,f,c
  3576   000618  A4D8               	btfss	status,2,c
  3577   00061A  EF11  F003         	goto	u3121
  3578   00061E  EF13  F003         	goto	u3120
  3579   000622                     u3121:
  3580   000622  EF60  F001         	goto	l356
  3581   000626                     u3120:
  3582   000626                     
  3583                           ;TAD_RFID.c: 507:                             addr = 0x09;
  3584   000626  0E09               	movlw	9
  3585   000628  6E28               	movwf	motor_RFID@addr^0,c
  3586                           
  3587                           ;TAD_RFID.c: 508:                             operation_pending = 1;
  3588   00062A  0E01               	movlw	1
  3589   00062C  6E29               	movwf	motor_RFID@operation_pending^0,c
  3590                           
  3591                           ;TAD_RFID.c: 509:                             substate = 19;
  3592   00062E  0E13               	movlw	19
  3593   000630  6E36               	movwf	motor_RFID@substate^0,c
  3594                           
  3595                           ;TAD_RFID.c: 510:                         } else {
  3596   000632  EF3C  F004         	goto	l312
  3597   000636                     l4044:
  3598                           
  3599                           ;TAD_RFID.c: 515:                         if (tempRegValue == 0xFF) {
  3600   000636  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3601   000638  A4D8               	btfss	status,2,c
  3602   00063A  EF21  F003         	goto	u3131
  3603   00063E  EF23  F003         	goto	u3130
  3604   000642                     u3131:
  3605   000642  EF25  F003         	goto	l414
  3606   000646                     u3130:
  3607   000646  EF60  F001         	goto	l356
  3608   00064A                     l414:
  3609                           
  3610                           ;TAD_RFID.c: 518:                             UID[0] = tempRegValue;
  3611   00064A  C02D  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  3612   00064E                     
  3613                           ;TAD_RFID.c: 519:                             addr = 0x09;
  3614   00064E  0E09               	movlw	9
  3615   000650  6E28               	movwf	motor_RFID@addr^0,c
  3616                           
  3617                           ;TAD_RFID.c: 520:                             operation_pending = 1;
  3618   000652  0E01               	movlw	1
  3619   000654  6E29               	movwf	motor_RFID@operation_pending^0,c
  3620                           
  3621                           ;TAD_RFID.c: 521:                             substate = 20;
  3622   000656  0E14               	movlw	20
  3623   000658  6E36               	movwf	motor_RFID@substate^0,c
  3624   00065A  EF3C  F004         	goto	l312
  3625   00065E                     l4050:
  3626                           
  3627                           ;TAD_RFID.c: 525:                         if (tempRegValue == 0xFF) {
  3628   00065E  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3629   000660  A4D8               	btfss	status,2,c
  3630   000662  EF35  F003         	goto	u3141
  3631   000666  EF37  F003         	goto	u3140
  3632   00066A                     u3141:
  3633   00066A  EF39  F003         	goto	l417
  3634   00066E                     u3140:
  3635   00066E  EF60  F001         	goto	l356
  3636   000672                     l417:
  3637                           
  3638                           ;TAD_RFID.c: 528:                             UID[1] = tempRegValue;
  3639   000672  C02D  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  3640   000676                     
  3641                           ;TAD_RFID.c: 529:                             addr = 0x09;
  3642   000676  0E09               	movlw	9
  3643   000678  6E28               	movwf	motor_RFID@addr^0,c
  3644                           
  3645                           ;TAD_RFID.c: 530:                             operation_pending = 1;
  3646   00067A  0E01               	movlw	1
  3647   00067C  6E29               	movwf	motor_RFID@operation_pending^0,c
  3648                           
  3649                           ;TAD_RFID.c: 531:                             substate = 21;
  3650   00067E  0E15               	movlw	21
  3651   000680  6E36               	movwf	motor_RFID@substate^0,c
  3652   000682  EF3C  F004         	goto	l312
  3653   000686                     l4056:
  3654                           
  3655                           ;TAD_RFID.c: 535:                         if (tempRegValue == 0xFF) {
  3656   000686  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3657   000688  A4D8               	btfss	status,2,c
  3658   00068A  EF49  F003         	goto	u3151
  3659   00068E  EF4B  F003         	goto	u3150
  3660   000692                     u3151:
  3661   000692  EF4D  F003         	goto	l420
  3662   000696                     u3150:
  3663   000696  EF60  F001         	goto	l356
  3664   00069A                     l420:
  3665                           
  3666                           ;TAD_RFID.c: 538:                             UID[2] = tempRegValue;
  3667   00069A  C02D  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  3668   00069E                     
  3669                           ;TAD_RFID.c: 539:                             addr = 0x09;
  3670   00069E  0E09               	movlw	9
  3671   0006A0  6E28               	movwf	motor_RFID@addr^0,c
  3672                           
  3673                           ;TAD_RFID.c: 540:                             operation_pending = 1;
  3674   0006A2  0E01               	movlw	1
  3675   0006A4  6E29               	movwf	motor_RFID@operation_pending^0,c
  3676                           
  3677                           ;TAD_RFID.c: 541:                             substate = 22;
  3678   0006A6  0E16               	movlw	22
  3679   0006A8  6E36               	movwf	motor_RFID@substate^0,c
  3680   0006AA  EF3C  F004         	goto	l312
  3681   0006AE                     l4062:
  3682                           
  3683                           ;TAD_RFID.c: 545:                         if (tempRegValue == 0xFF) {
  3684   0006AE  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3685   0006B0  A4D8               	btfss	status,2,c
  3686   0006B2  EF5D  F003         	goto	u3161
  3687   0006B6  EF5F  F003         	goto	u3160
  3688   0006BA                     u3161:
  3689   0006BA  EF61  F003         	goto	l423
  3690   0006BE                     u3160:
  3691   0006BE  EF60  F001         	goto	l356
  3692   0006C2                     l423:
  3693                           
  3694                           ;TAD_RFID.c: 548:                             UID[3] = tempRegValue;
  3695   0006C2  C02D  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  3696   0006C6                     
  3697                           ;TAD_RFID.c: 549:                             addr = 0x09;
  3698   0006C6  0E09               	movlw	9
  3699   0006C8  6E28               	movwf	motor_RFID@addr^0,c
  3700                           
  3701                           ;TAD_RFID.c: 550:                             operation_pending = 1;
  3702   0006CA  0E01               	movlw	1
  3703   0006CC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3704                           
  3705                           ;TAD_RFID.c: 551:                             substate = 23;
  3706   0006CE  0E17               	movlw	23
  3707   0006D0  6E36               	movwf	motor_RFID@substate^0,c
  3708   0006D2  EF3C  F004         	goto	l312
  3709   0006D6                     l4068:
  3710                           
  3711                           ;TAD_RFID.c: 555:                         if (tempRegValue == 0xFF) {
  3712   0006D6  282D               	incf	motor_RFID@tempRegValue^0,w,c
  3713   0006D8  A4D8               	btfss	status,2,c
  3714   0006DA  EF71  F003         	goto	u3171
  3715   0006DE  EF73  F003         	goto	u3170
  3716   0006E2                     u3171:
  3717   0006E2  EF75  F003         	goto	l426
  3718   0006E6                     u3170:
  3719   0006E6  EF60  F001         	goto	l356
  3720   0006EA                     l426:
  3721                           
  3722                           ;TAD_RFID.c: 558:                             UID[4] = tempRegValue;
  3723   0006EA  C02D  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  3724                           
  3725                           ;TAD_RFID.c: 559:                             UID[5] = 0;
  3726   0006EE  6A06               	clrf	(motor_RFID@UID+5)^0,c
  3727   0006F0                     
  3728                           ;TAD_RFID.c: 560:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  3729   0006F0  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3730   0006F2  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  3731   0006F4  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  3732   0006F6  1801               	xorwf	motor_RFID@UID^0,w,c
  3733   0006F8  6E2F               	movwf	motor_RFID@checksum^0,c
  3734                           
  3735                           ;TAD_RFID.c: 561:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  3736   0006FA  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3737   0006FC  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  3738   0006FE  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  3739   000700  1001               	iorwf	motor_RFID@UID^0,w,c
  3740   000702  0900               	iorlw	0
  3741   000704  B4D8               	btfsc	status,2,c
  3742   000706  EF87  F003         	goto	u3181
  3743   00070A  EF8A  F003         	goto	u3180
  3744   00070E                     u3181:
  3745   00070E  0E01               	movlw	1
  3746   000710  EF8B  F003         	goto	u3190
  3747   000714                     u3180:
  3748   000714  0E00               	movlw	0
  3749   000716                     u3190:
  3750   000716  6E2E               	movwf	motor_RFID@allZero^0,c
  3751   000718                     
  3752                           ;TAD_RFID.c: 562:                             substate = 24;
  3753   000718  0E18               	movlw	24
  3754   00071A  6E36               	movwf	motor_RFID@substate^0,c
  3755   00071C  EF3C  F004         	goto	l312
  3756   000720                     l4076:
  3757                           
  3758                           ;TAD_RFID.c: 566:                         if (checksum != UID[4] || allZero) {
  3759   000720  502F               	movf	motor_RFID@checksum^0,w,c
  3760   000722  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  3761   000724  A4D8               	btfss	status,2,c
  3762   000726  EF97  F003         	goto	u3201
  3763   00072A  EF99  F003         	goto	u3200
  3764   00072E                     u3201:
  3765   00072E  EF60  F001         	goto	l356
  3766   000732                     u3200:
  3767   000732  502E               	movf	motor_RFID@allZero^0,w,c
  3768   000734  B4D8               	btfsc	status,2,c
  3769   000736  EF9F  F003         	goto	u3211
  3770   00073A  EFA1  F003         	goto	u3210
  3771   00073E                     u3211:
  3772   00073E  EFA3  F003         	goto	l4080
  3773   000742                     u3210:
  3774   000742  EF60  F001         	goto	l356
  3775   000746                     l4080:
  3776                           
  3777                           ;TAD_RFID.c: 569:                             char differentUID = 1;
  3778   000746  0E01               	movlw	1
  3779   000748  6E66               	movwf	motor_RFID@differentUID^0,c
  3780   00074A                     
  3781                           ;TAD_RFID.c: 570:                             unsigned char currentUser[5];;TAD_RFID.c: 
      +                          571:                             getActualUID(currentUser);
  3782   00074A  0E67               	movlw	low motor_RFID@currentUser
  3783   00074C  6E53               	movwf	getActualUID@UID^0,c
  3784   00074E  ECC8  F009         	call	_getActualUID	;wreg free
  3785   000752                     
  3786                           ;TAD_RFID.c: 573:                             if(currentUser[0] != UID[0]) {
  3787   000752  5001               	movf	motor_RFID@UID^0,w,c
  3788   000754  1867               	xorwf	motor_RFID@currentUser^0,w,c
  3789   000756  B4D8               	btfsc	status,2,c
  3790   000758  EFB0  F003         	goto	u3221
  3791   00075C  EFB2  F003         	goto	u3220
  3792   000760                     u3221:
  3793   000760  EFBD  F003         	goto	l4088
  3794   000764                     u3220:
  3795   000764                     
  3796                           ;TAD_RFID.c: 574:                                 setCurrentUser(UID[0], UID[1], UID[2],
      +                           UID[3], UID[4]);
  3797   000764  C002  F05F         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3798   000768  C003  F060         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3799   00076C  C004  F061         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3800   000770  C005  F062         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3801   000774  5001               	movf	motor_RFID@UID^0,w,c
  3802   000776  EC88  F00D         	call	_setCurrentUser
  3803   00077A                     l4088:
  3804                           
  3805                           ;TAD_RFID.c: 576:                             addr = 0x0D;
  3806   00077A  0E0D               	movlw	13
  3807   00077C  6E28               	movwf	motor_RFID@addr^0,c
  3808   00077E                     
  3809                           ;TAD_RFID.c: 577:                             value = 0x00;
  3810   00077E  6A27               	clrf	motor_RFID@value^0,c
  3811   000780                     
  3812                           ;TAD_RFID.c: 578:                             operation_pending = 2;
  3813   000780  0E02               	movlw	2
  3814   000782  6E29               	movwf	motor_RFID@operation_pending^0,c
  3815   000784                     
  3816                           ;TAD_RFID.c: 579:                             substate = 25;
  3817   000784  0E19               	movlw	25
  3818   000786  6E36               	movwf	motor_RFID@substate^0,c
  3819   000788  EF3C  F004         	goto	l312
  3820   00078C                     l4098:
  3821   00078C  5036               	movf	motor_RFID@substate^0,w,c
  3822                           
  3823                           ; Switch size 1, requested type "simple"
  3824                           ; Number of cases is 26, Range of values is 0 to 25
  3825                           ; switch strategies available:
  3826                           ; Name         Instructions Cycles
  3827                           ; simple_byte           79    40 (average)
  3828                           ;	Chosen strategy is simple_byte
  3829   00078E  0A00               	xorlw	0	; case 0
  3830   000790  B4D8               	btfsc	status,2,c
  3831   000792  EF05  F002         	goto	l3924
  3832   000796  0A01               	xorlw	1	; case 1
  3833   000798  B4D8               	btfsc	status,2,c
  3834   00079A  EF0E  F002         	goto	l3928
  3835   00079E  0A03               	xorlw	3	; case 2
  3836   0007A0  B4D8               	btfsc	status,2,c
  3837   0007A2  EF1A  F002         	goto	l3930
  3838   0007A6  0A01               	xorlw	1	; case 3
  3839   0007A8  B4D8               	btfsc	status,2,c
  3840   0007AA  EF2F  F002         	goto	l3942
  3841   0007AE  0A07               	xorlw	7	; case 4
  3842   0007B0  B4D8               	btfsc	status,2,c
  3843   0007B2  EF3A  F002         	goto	l3950
  3844   0007B6  0A01               	xorlw	1	; case 5
  3845   0007B8  B4D8               	btfsc	status,2,c
  3846   0007BA  EF42  F002         	goto	l3952
  3847   0007BE  0A03               	xorlw	3	; case 6
  3848   0007C0  B4D8               	btfsc	status,2,c
  3849   0007C2  EF53  F002         	goto	l3964
  3850   0007C6  0A01               	xorlw	1	; case 7
  3851   0007C8  B4D8               	btfsc	status,2,c
  3852   0007CA  EF5B  F002         	goto	l3966
  3853   0007CE  0A0F               	xorlw	15	; case 8
  3854   0007D0  B4D8               	btfsc	status,2,c
  3855   0007D2  EF70  F002         	goto	l3978
  3856   0007D6  0A01               	xorlw	1	; case 9
  3857   0007D8  B4D8               	btfsc	status,2,c
  3858   0007DA  EF79  F002         	goto	l3982
  3859   0007DE  0A03               	xorlw	3	; case 10
  3860   0007E0  B4D8               	btfsc	status,2,c
  3861   0007E2  EF83  F002         	goto	l3986
  3862   0007E6  0A01               	xorlw	1	; case 11
  3863   0007E8  B4D8               	btfsc	status,2,c
  3864   0007EA  EF8D  F002         	goto	l3990
  3865   0007EE  0A07               	xorlw	7	; case 12
  3866   0007F0  B4D8               	btfsc	status,2,c
  3867   0007F2  EF02  F001         	goto	l3864
  3868   0007F6  0A01               	xorlw	1	; case 13
  3869   0007F8  B4D8               	btfsc	status,2,c
  3870   0007FA  EF97  F002         	goto	l3994
  3871   0007FE  0A03               	xorlw	3	; case 14
  3872   000800  B4D8               	btfsc	status,2,c
  3873   000802  EFA8  F002         	goto	l396
  3874   000806  0A01               	xorlw	1	; case 15
  3875   000808  B4D8               	btfsc	status,2,c
  3876   00080A  EFB1  F002         	goto	l4008
  3877   00080E  0A1F               	xorlw	31	; case 16
  3878   000810  B4D8               	btfsc	status,2,c
  3879   000812  EFD9  F002         	goto	l4020
  3880   000816  0A01               	xorlw	1	; case 17
  3881   000818  B4D8               	btfsc	status,2,c
  3882   00081A  EFEE  F002         	goto	l4032
  3883   00081E  0A03               	xorlw	3	; case 18
  3884   000820  B4D8               	btfsc	status,2,c
  3885   000822  EFF6  F002         	goto	l4034
  3886   000826  0A01               	xorlw	1	; case 19
  3887   000828  B4D8               	btfsc	status,2,c
  3888   00082A  EF1B  F003         	goto	l4044
  3889   00082E  0A07               	xorlw	7	; case 20
  3890   000830  B4D8               	btfsc	status,2,c
  3891   000832  EF2F  F003         	goto	l4050
  3892   000836  0A01               	xorlw	1	; case 21
  3893   000838  B4D8               	btfsc	status,2,c
  3894   00083A  EF43  F003         	goto	l4056
  3895   00083E  0A03               	xorlw	3	; case 22
  3896   000840  B4D8               	btfsc	status,2,c
  3897   000842  EF57  F003         	goto	l4062
  3898   000846  0A01               	xorlw	1	; case 23
  3899   000848  B4D8               	btfsc	status,2,c
  3900   00084A  EF6B  F003         	goto	l4068
  3901   00084E  0A0F               	xorlw	15	; case 24
  3902   000850  B4D8               	btfsc	status,2,c
  3903   000852  EF90  F003         	goto	l4076
  3904   000856  0A01               	xorlw	1	; case 25
  3905   000858  B4D8               	btfsc	status,2,c
  3906   00085A  EF60  F001         	goto	l356
  3907   00085E  EF3C  F004         	goto	l312
  3908   000862                     l4102:
  3909   000862  5037               	movf	motor_RFID@state^0,w,c
  3910                           
  3911                           ; Switch size 1, requested type "simple"
  3912                           ; Number of cases is 2, Range of values is 0 to 1
  3913                           ; switch strategies available:
  3914                           ; Name         Instructions Cycles
  3915                           ; simple_byte            7     4 (average)
  3916                           ;	Chosen strategy is simple_byte
  3917   000864  0A00               	xorlw	0	; case 0
  3918   000866  B4D8               	btfsc	status,2,c
  3919   000868  EFBA  F001         	goto	l3922
  3920   00086C  0A01               	xorlw	1	; case 1
  3921   00086E  B4D8               	btfsc	status,2,c
  3922   000870  EFC6  F003         	goto	l4098
  3923   000874  EF3C  F004         	goto	l312
  3924   000878                     l312:
  3925   000878  0012               	return		;funcret
  3926   00087A                     __end_of_motor_RFID:
  3927                           	callstack 0
  3928                           
  3929 ;; *************** function _setCurrentUser *****************
  3930 ;; Defined at:
  3931 ;;		line 110 in file "TAD_DATOS.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  UID0            1    wreg     unsigned char 
  3934 ;;  UID1            1   13[COMRAM] unsigned char 
  3935 ;;  UID2            1   14[COMRAM] unsigned char 
  3936 ;;  UID3            1   15[COMRAM] unsigned char 
  3937 ;;  UID4            1   16[COMRAM] unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  UID0            1   17[COMRAM] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1
  3949 ;;      Params:         4       0       0
  3950 ;;      Locals:         1       0       0
  3951 ;;      Temps:          0       0       0
  3952 ;;      Totals:         5       0       0
  3953 ;;Total ram usage:        5 bytes
  3954 ;; Hardware stack levels used: 1
  3955 ;; Hardware stack levels required when called: 8
  3956 ;; This function calls:
  3957 ;;		_checkUserUID
  3958 ;;		_printfUID
  3959 ;; This function is called by:
  3960 ;;		_motor_RFID
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text2
  3965   001B10                     __ptext2:
  3966                           	callstack 0
  3967   001B10                     _setCurrentUser:
  3968                           	callstack 21
  3969                           
  3970                           ;incstack = 0
  3971                           ;setCurrentUser@UID0 stored from wreg
  3972   001B10  6E63               	movwf	setCurrentUser@UID0^0,c
  3973   001B12                     
  3974                           ;TAD_DATOS.c: 111:     currentUser[0] = UID0;
  3975   001B12  C063  F043         	movff	setCurrentUser@UID0,_currentUser
  3976   001B16                     
  3977                           ;TAD_DATOS.c: 112:     currentUser[1] = UID1;
  3978   001B16  C05F  F044         	movff	setCurrentUser@UID1,_currentUser+1
  3979   001B1A                     
  3980                           ;TAD_DATOS.c: 113:     currentUser[2] = UID2;
  3981   001B1A  C060  F045         	movff	setCurrentUser@UID2,_currentUser+2
  3982   001B1E                     
  3983                           ;TAD_DATOS.c: 114:     currentUser[3] = UID3;
  3984   001B1E  C061  F046         	movff	setCurrentUser@UID3,_currentUser+3
  3985   001B22                     
  3986                           ;TAD_DATOS.c: 115:     currentUser[4] = UID4;
  3987   001B22  C062  F047         	movff	setCurrentUser@UID4,_currentUser+4
  3988   001B26                     
  3989                           ;TAD_DATOS.c: 116:     new_user = 1;
  3990   001B26  0E01               	movlw	1
  3991   001B28  6E1C               	movwf	_new_user^0,c
  3992   001B2A                     
  3993                           ;TAD_DATOS.c: 117:     index = checkUserUID();
  3994   001B2A  ECE5  F008         	call	_checkUserUID	;wreg free
  3995   001B2E  6E1B               	movwf	_index^0,c
  3996   001B30                     
  3997                           ;TAD_DATOS.c: 118:     printfUID(currentUser);
  3998   001B30  0E43               	movlw	low _currentUser
  3999   001B32  6E59               	movwf	printfUID@currentUser^0,c
  4000   001B34  EC3F  F006         	call	_printfUID	;wreg free
  4001   001B38  0012               	return		;funcret
  4002   001B3A                     __end_of_setCurrentUser:
  4003                           	callstack 0
  4004                           
  4005 ;; *************** function _motor_LEDs *****************
  4006 ;; Defined at:
  4007 ;;		line 37 in file "TAD_LEDS.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;		None
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  currentTics     4   19[COMRAM] unsigned long 
  4012 ;;  i               1   23[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1
  4022 ;;      Params:         0       0       0
  4023 ;;      Locals:         5       0       0
  4024 ;;      Temps:          5       0       0
  4025 ;;      Totals:        10       0       0
  4026 ;;Total ram usage:       10 bytes
  4027 ;; Hardware stack levels used: 1
  4028 ;; Hardware stack levels required when called: 4
  4029 ;; This function calls:
  4030 ;;		_TI_GetTics
  4031 ;;		_TI_ResetTics
  4032 ;;		_controlLED
  4033 ;;		_getActualLeds
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text3
  4040   0010DA                     __ptext3:
  4041                           	callstack 0
  4042   0010DA                     _motor_LEDs:
  4043                           	callstack 26
  4044   0010DA                     
  4045                           ;TAD_LEDS.c: 39:     getActualLeds(ActualLeds);
  4046   0010DA  0E3D               	movlw	low _ActualLeds
  4047   0010DC  6E53               	movwf	getActualLeds@leds^0,c
  4048   0010DE  EC9D  F00C         	call	_getActualLeds	;wreg free
  4049   0010E2                     
  4050                           ;TAD_LEDS.c: 42:     static unsigned long lastTics = 0;;TAD_LEDS.c: 43:     unsigned lon
      +                          g currentTics = TI_GetTics(timer);
  4051   0010E2  5048               	movf	_timer@TAD_LEDS$F931^0,w,c
  4052   0010E4  EC32  F00C         	call	_TI_GetTics
  4053   0010E8  C053  F065         	movff	?_TI_GetTics,motor_LEDs@currentTics
  4054   0010EC  C054  F066         	movff	?_TI_GetTics+1,motor_LEDs@currentTics+1
  4055   0010F0  C055  F067         	movff	?_TI_GetTics+2,motor_LEDs@currentTics+2
  4056   0010F4  C056  F068         	movff	?_TI_GetTics+3,motor_LEDs@currentTics+3
  4057   0010F8                     
  4058                           ;TAD_LEDS.c: 46:     if (currentTics == lastTics) return;
  4059   0010F8  5007               	movf	motor_LEDs@lastTics^0,w,c
  4060   0010FA  1865               	xorwf	motor_LEDs@currentTics^0,w,c
  4061   0010FC  E10D               	bnz	u3231
  4062   0010FE  5008               	movf	(motor_LEDs@lastTics+1)^0,w,c
  4063   001100  1866               	xorwf	(motor_LEDs@currentTics+1)^0,w,c
  4064   001102  E10A               	bnz	u3231
  4065   001104  5009               	movf	(motor_LEDs@lastTics+2)^0,w,c
  4066   001106  1867               	xorwf	(motor_LEDs@currentTics+2)^0,w,c
  4067   001108  E107               	bnz	u3231
  4068   00110A  500A               	movf	(motor_LEDs@lastTics+3)^0,w,c
  4069   00110C  1868               	xorwf	(motor_LEDs@currentTics+3)^0,w,c
  4070   00110E  A4D8               	btfss	status,2,c
  4071   001110  EF8C  F008         	goto	u3231
  4072   001114  EF8E  F008         	goto	u3230
  4073   001118                     u3231:
  4074   001118  EF90  F008         	goto	l831
  4075   00111C                     u3230:
  4076   00111C  EFE4  F008         	goto	l832
  4077   001120                     l831:
  4078                           
  4079                           ;TAD_LEDS.c: 47:     lastTics = currentTics;
  4080   001120  C065  F007         	movff	motor_LEDs@currentTics,motor_LEDs@lastTics
  4081   001124  C066  F008         	movff	motor_LEDs@currentTics+1,motor_LEDs@lastTics+1
  4082   001128  C067  F009         	movff	motor_LEDs@currentTics+2,motor_LEDs@lastTics+2
  4083   00112C  C068  F00A         	movff	motor_LEDs@currentTics+3,motor_LEDs@lastTics+3
  4084   001130                     
  4085                           ;TAD_LEDS.c: 50:     if (currentTics >= 10) {
  4086   001130  5068               	movf	(motor_LEDs@currentTics+3)^0,w,c
  4087   001132  1067               	iorwf	(motor_LEDs@currentTics+2)^0,w,c
  4088   001134  1066               	iorwf	(motor_LEDs@currentTics+1)^0,w,c
  4089   001136  E109               	bnz	u3240
  4090   001138  0E0A               	movlw	10
  4091   00113A  5C65               	subwf	motor_LEDs@currentTics^0,w,c
  4092   00113C  A0D8               	btfss	status,0,c
  4093   00113E  EFA3  F008         	goto	u3241
  4094   001142  EFA5  F008         	goto	u3240
  4095   001146                     u3241:
  4096   001146  EFAF  F008         	goto	l833
  4097   00114A                     u3240:
  4098   00114A                     
  4099                           ;TAD_LEDS.c: 51:         TI_ResetTics(timer);
  4100   00114A  5048               	movf	_timer@TAD_LEDS$F931^0,w,c
  4101   00114C  ECD4  F00D         	call	_TI_ResetTics
  4102   001150                     
  4103                           ;TAD_LEDS.c: 52:         controlLED(0xFF, 1);
  4104   001150  0E01               	movlw	1
  4105   001152  6E53               	movwf	controlLED@estado^0,c
  4106   001154  0EFF               	movlw	255
  4107   001156  EC18  F00B         	call	_controlLED
  4108   00115A  EFE4  F008         	goto	l832
  4109   00115E                     l833:
  4110                           
  4111                           ;TAD_LEDS.c: 57:     char i;;TAD_LEDS.c: 58:     for (i = 0; i < 6; i++) {
  4112   00115E  6A69               	clrf	motor_LEDs@i^0,c
  4113   001160                     l4124:
  4114                           
  4115                           ;TAD_LEDS.c: 59:         if (ActualLeds[i] < 0xA && currentTics >= ActualLeds[i])
  4116   001160  5069               	movf	motor_LEDs@i^0,w,c
  4117   001162  0F3D               	addlw	low _ActualLeds
  4118   001164  6ED9               	movwf	fsr2l,c
  4119   001166  6ADA               	clrf	fsr2h,c
  4120   001168  0E0A               	movlw	10
  4121   00116A  60DF               	cpfslt	indf2,c
  4122   00116C  EFBA  F008         	goto	u3251
  4123   001170  EFBC  F008         	goto	u3250
  4124   001174                     u3251:
  4125   001174  EFDB  F008         	goto	l4130
  4126   001178                     u3250:
  4127   001178  5069               	movf	motor_LEDs@i^0,w,c
  4128   00117A  0F3D               	addlw	low _ActualLeds
  4129   00117C  6ED9               	movwf	fsr2l,c
  4130   00117E  6ADA               	clrf	fsr2h,c
  4131   001180  50DF               	movf	indf2,w,c
  4132   001182  6E60               	movwf	??_motor_LEDs^0,c
  4133   001184  C060  F061         	movff	??_motor_LEDs,??_motor_LEDs+1
  4134   001188  6A62               	clrf	(??_motor_LEDs+2)^0,c
  4135   00118A  6A63               	clrf	(??_motor_LEDs+3)^0,c
  4136   00118C  6A64               	clrf	(??_motor_LEDs+4)^0,c
  4137   00118E  5061               	movf	(??_motor_LEDs+1)^0,w,c
  4138   001190  5C65               	subwf	motor_LEDs@currentTics^0,w,c
  4139   001192  5062               	movf	(??_motor_LEDs+2)^0,w,c
  4140   001194  5866               	subwfb	(motor_LEDs@currentTics+1)^0,w,c
  4141   001196  5063               	movf	(??_motor_LEDs+3)^0,w,c
  4142   001198  5867               	subwfb	(motor_LEDs@currentTics+2)^0,w,c
  4143   00119A  5064               	movf	(??_motor_LEDs+4)^0,w,c
  4144   00119C  5868               	subwfb	(motor_LEDs@currentTics+3)^0,w,c
  4145   00119E  A0D8               	btfss	status,0,c
  4146   0011A0  EFD4  F008         	goto	u3261
  4147   0011A4  EFD6  F008         	goto	u3260
  4148   0011A8                     u3261:
  4149   0011A8  EFDB  F008         	goto	l4130
  4150   0011AC                     u3260:
  4151   0011AC                     
  4152                           ;TAD_LEDS.c: 60:             controlLED(i, 0);
  4153   0011AC  0E00               	movlw	0
  4154   0011AE  6E53               	movwf	controlLED@estado^0,c
  4155   0011B0  5069               	movf	motor_LEDs@i^0,w,c
  4156   0011B2  EC18  F00B         	call	_controlLED
  4157   0011B6                     l4130:
  4158                           
  4159                           ;TAD_LEDS.c: 61:     }
  4160   0011B6  2A69               	incf	motor_LEDs@i^0,f,c
  4161   0011B8  0E05               	movlw	5
  4162   0011BA  6469               	cpfsgt	motor_LEDs@i^0,c
  4163   0011BC  EFE2  F008         	goto	u3271
  4164   0011C0  EFE4  F008         	goto	u3270
  4165   0011C4                     u3271:
  4166   0011C4  EFB0  F008         	goto	l4124
  4167   0011C8                     u3270:
  4168   0011C8                     l832:
  4169   0011C8  0012               	return		;funcret
  4170   0011CA                     __end_of_motor_LEDs:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _getActualLeds *****************
  4174 ;; Defined at:
  4175 ;;		line 53 in file "TAD_DATOS.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  leds            1    1[COMRAM] PTR unsigned char 
  4178 ;;		 -> ActualLeds(6), 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  i               1    2[COMRAM] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1
  4190 ;;      Params:         1       0       0
  4191 ;;      Locals:         1       0       0
  4192 ;;      Temps:          0       0       0
  4193 ;;      Totals:         2       0       0
  4194 ;;Total ram usage:        2 bytes
  4195 ;; Hardware stack levels used: 1
  4196 ;; Hardware stack levels required when called: 3
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_motor_LEDs
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text4
  4205   00193A                     __ptext4:
  4206                           	callstack 0
  4207   00193A                     _getActualLeds:
  4208                           	callstack 26
  4209   00193A                     
  4210                           ;TAD_DATOS.c: 54:     if(!leds) return;
  4211   00193A  5053               	movf	getActualLeds@leds^0,w,c
  4212   00193C  A4D8               	btfss	status,2,c
  4213   00193E  EFA3  F00C         	goto	u2411
  4214   001942  EFA5  F00C         	goto	u2410
  4215   001946                     u2411:
  4216   001946  EFA7  F00C         	goto	l713
  4217   00194A                     u2410:
  4218   00194A  EFBE  F00C         	goto	l714
  4219   00194E                     l713:
  4220                           
  4221                           ;TAD_DATOS.c: 57:     for(char i = 0; i < 6; i++) {
  4222   00194E  6A54               	clrf	getActualLeds@i^0,c
  4223   001950                     l3450:
  4224                           
  4225                           ;TAD_DATOS.c: 58:         leds[i] = configurations[index][i];
  4226   001950  501B               	movf	_index^0,w,c
  4227   001952  0D06               	mullw	6
  4228   001954  50F3               	movf	243,w,c
  4229   001956  0FA8               	addlw	low _configurations
  4230   001958  2454               	addwf	getActualLeds@i^0,w,c
  4231   00195A  6ED9               	movwf	fsr2l,c
  4232   00195C  6ADA               	clrf	fsr2h,c
  4233   00195E  5053               	movf	getActualLeds@leds^0,w,c
  4234   001960  2454               	addwf	getActualLeds@i^0,w,c
  4235   001962  6EE1               	movwf	fsr1l,c
  4236   001964  6AE2               	clrf	fsr1h,c
  4237   001966  CFDF FFE7          	movff	indf2,indf1
  4238   00196A                     
  4239                           ;TAD_DATOS.c: 59:     }
  4240   00196A  2A54               	incf	getActualLeds@i^0,f,c
  4241   00196C  0E05               	movlw	5
  4242   00196E  6454               	cpfsgt	getActualLeds@i^0,c
  4243   001970  EFBC  F00C         	goto	u2421
  4244   001974  EFBE  F00C         	goto	u2420
  4245   001978                     u2421:
  4246   001978  EFA8  F00C         	goto	l3450
  4247   00197C                     u2420:
  4248   00197C                     l714:
  4249   00197C  0012               	return		;funcret
  4250   00197E                     __end_of_getActualLeds:
  4251                           	callstack 0
  4252                           
  4253 ;; *************** function _controlLED *****************
  4254 ;; Defined at:
  4255 ;;		line 16 in file "TAD_LEDS.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  ledActual       1    wreg     unsigned char 
  4258 ;;  estado          1    1[COMRAM] unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  ledActual       1    4[COMRAM] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1
  4270 ;;      Params:         1       0       0
  4271 ;;      Locals:         3       0       0
  4272 ;;      Temps:          0       0       0
  4273 ;;      Totals:         4       0       0
  4274 ;;Total ram usage:        4 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 3
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_motor_LEDs
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text5
  4285   001630                     __ptext5:
  4286                           	callstack 0
  4287   001630                     _controlLED:
  4288                           	callstack 26
  4289                           
  4290                           ;incstack = 0
  4291                           ;controlLED@ledActual stored from wreg
  4292   001630  6E56               	movwf	controlLED@ledActual^0,c
  4293   001632                     
  4294                           ;TAD_LEDS.c: 18:     static unsigned char ledBits[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x2
      +                          0};;TAD_LEDS.c: 20:     if (ledActual < 6) {
  4295   001632  0E06               	movlw	6
  4296   001634  6056               	cpfslt	controlLED@ledActual^0,c
  4297   001636  EF1F  F00B         	goto	u2431
  4298   00163A  EF21  F00B         	goto	u2430
  4299   00163E                     u2431:
  4300   00163E  EF3A  F00B         	goto	l3464
  4301   001642                     u2430:
  4302   001642                     
  4303                           ;TAD_LEDS.c: 22:         if (estado)
  4304   001642  5053               	movf	controlLED@estado^0,w,c
  4305   001644  B4D8               	btfsc	status,2,c
  4306   001646  EF27  F00B         	goto	u2441
  4307   00164A  EF29  F00B         	goto	u2440
  4308   00164E                     u2441:
  4309   00164E  EF31  F00B         	goto	l3462
  4310   001652                     u2440:
  4311   001652                     
  4312                           ;TAD_LEDS.c: 23:             LATA |= ledBits[ledActual];
  4313   001652  5056               	movf	controlLED@ledActual^0,w,c
  4314   001654  0FC0               	addlw	low controlLED@ledBits
  4315   001656  6ED9               	movwf	fsr2l,c
  4316   001658  6ADA               	clrf	fsr2h,c
  4317   00165A  50DF               	movf	indf2,w,c
  4318   00165C  1289               	iorwf	137,f,c	;volatile
  4319   00165E  EF56  F00B         	goto	l826
  4320   001662                     l3462:
  4321                           
  4322                           ;TAD_LEDS.c: 25:             LATA &= ~ledBits[ledActual];
  4323   001662  5056               	movf	controlLED@ledActual^0,w,c
  4324   001664  0FC0               	addlw	low controlLED@ledBits
  4325   001666  6ED9               	movwf	fsr2l,c
  4326   001668  6ADA               	clrf	fsr2h,c
  4327   00166A  50DF               	movf	indf2,w,c
  4328   00166C  0AFF               	xorlw	255
  4329   00166E  1689               	andwf	137,f,c	;volatile
  4330   001670  EF56  F00B         	goto	l826
  4331   001674                     l3464:
  4332   001674  2856               	incf	controlLED@ledActual^0,w,c
  4333   001676  A4D8               	btfss	status,2,c
  4334   001678  EF40  F00B         	goto	u2451
  4335   00167C  EF42  F00B         	goto	u2450
  4336   001680                     u2451:
  4337   001680  EF56  F00B         	goto	l826
  4338   001684                     u2450:
  4339   001684                     
  4340                           ;TAD_LEDS.c: 29:         LATA = estado ? 0x3F : 0x00;
  4341   001684  5053               	movf	controlLED@estado^0,w,c
  4342   001686  A4D8               	btfss	status,2,c
  4343   001688  EF48  F00B         	goto	u2461
  4344   00168C  EF4A  F00B         	goto	u2460
  4345   001690                     u2461:
  4346   001690  EF50  F00B         	goto	l3470
  4347   001694                     u2460:
  4348   001694  0E00               	movlw	0
  4349   001696  6E55               	movwf	(_controlLED$937+1)^0,c
  4350   001698  0E00               	movlw	0
  4351   00169A  6E54               	movwf	_controlLED$937^0,c
  4352   00169C  EF54  F00B         	goto	l3472
  4353   0016A0                     l3470:
  4354   0016A0  0E00               	movlw	0
  4355   0016A2  6E55               	movwf	(_controlLED$937+1)^0,c
  4356   0016A4  0E3F               	movlw	63
  4357   0016A6  6E54               	movwf	_controlLED$937^0,c
  4358   0016A8                     l3472:
  4359   0016A8  C054  FF89         	movff	_controlLED$937,3977	;volatile
  4360   0016AC                     l826:
  4361   0016AC  0012               	return		;funcret
  4362   0016AE                     __end_of_controlLED:
  4363                           	callstack 0
  4364                           
  4365 ;; *************** function _motorTerminal *****************
  4366 ;; Defined at:
  4367 ;;		line 124 in file "TAD_TERMINAL.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  currentUser     5   13[COMRAM] unsigned char [5]
  4372 ;;  opcion          1   18[COMRAM] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1
  4382 ;;      Params:         0       0       0
  4383 ;;      Locals:         6       0       0
  4384 ;;      Temps:          0       0       0
  4385 ;;      Totals:         6       0       0
  4386 ;;Total ram usage:        6 bytes
  4387 ;; Hardware stack levels used: 1
  4388 ;; Hardware stack levels required when called: 8
  4389 ;; This function calls:
  4390 ;;		_Terminal_RXAvailable
  4391 ;;		_Terminal_ReceiveChar
  4392 ;;		_Terminal_SendChar
  4393 ;;		_getActualUID
  4394 ;;		_motor_SendString
  4395 ;;		_motor_StartSendString
  4396 ;;		_printfUID
  4397 ;;		_saveHourToData
  4398 ;;		_showAllConfigurations
  4399 ;; This function is called by:
  4400 ;;		_main
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text6
  4405   00087A                     __ptext6:
  4406                           	callstack 0
  4407   00087A                     _motorTerminal:
  4408                           	callstack 22
  4409   00087A                     
  4410                           ;TAD_TERMINAL.c: 125:  static char state = 0;;TAD_TERMINAL.c: 126:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 127:  static char index = 0;;TAD_TERMINAL.c: 129:  if
      +                           (sending_string) {
  4411   00087A  5020               	movf	_sending_string^0,w,c
  4412   00087C  B4D8               	btfsc	status,2,c
  4413   00087E  EF43  F004         	goto	u2671
  4414   000882  EF45  F004         	goto	u2670
  4415   000886                     u2671:
  4416   000886  EF55  F005         	goto	l3772
  4417   00088A                     u2670:
  4418   00088A                     
  4419                           ;TAD_TERMINAL.c: 130:   if (motor_SendString() == 1) {
  4420   00088A  EC32  F009         	call	_motor_SendString	;wreg free
  4421   00088E  06E8               	decf	wreg,f,c
  4422   000890  A4D8               	btfss	status,2,c
  4423   000892  EF4D  F004         	goto	u2681
  4424   000896  EF4F  F004         	goto	u2680
  4425   00089A                     u2681:
  4426   00089A  EF7C  F005         	goto	l649
  4427   00089E                     u2680:
  4428   00089E                     
  4429                           ;TAD_TERMINAL.c: 131:    sending_string = 0;
  4430   00089E  6A20               	clrf	_sending_string^0,c
  4431                           
  4432                           ;TAD_TERMINAL.c: 132:   } else {
  4433   0008A0  EF55  F005         	goto	l3772
  4434   0008A4                     l3670:
  4435                           
  4436                           ;TAD_TERMINAL.c: 139:    if (Terminal_ReceiveChar() == 0x1B || hashtag_pressed) {
  4437   0008A4  EC87  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4438   0008A8  0A1B               	xorlw	27
  4439   0008AA  B4D8               	btfsc	status,2,c
  4440   0008AC  EF5A  F004         	goto	u2691
  4441   0008B0  EF5C  F004         	goto	u2690
  4442   0008B4                     u2691:
  4443   0008B4  EF64  F004         	goto	l3674
  4444   0008B8                     u2690:
  4445   0008B8  5021               	movf	_hashtag_pressed^0,w,c
  4446   0008BA  B4D8               	btfsc	status,2,c
  4447   0008BC  EF62  F004         	goto	u2701
  4448   0008C0  EF64  F004         	goto	u2700
  4449   0008C4                     u2701:
  4450   0008C4  EF7C  F005         	goto	l649
  4451   0008C8                     u2700:
  4452   0008C8                     l3674:
  4453                           
  4454                           ;TAD_TERMINAL.c: 140:     motor_StartSendString("---------------\r\n");
  4455   0008C8  0EE9               	movlw	low STR_4
  4456   0008CA  6E57               	movwf	motor_StartSendString@str^0,c
  4457   0008CC  0E1F               	movlw	high STR_4
  4458   0008CE  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4459   0008D0  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4460   0008D4                     
  4461                           ;TAD_TERMINAL.c: 141:     sending_string = 1;
  4462   0008D4  0E01               	movlw	1
  4463   0008D6  6E20               	movwf	_sending_string^0,c
  4464   0008D8                     
  4465                           ;TAD_TERMINAL.c: 142:     state = 10;
  4466   0008D8  0E0A               	movlw	10
  4467   0008DA  6E1F               	movwf	motorTerminal@state^0,c
  4468   0008DC                     
  4469                           ;TAD_TERMINAL.c: 143:     hashtag_pressed = 0;
  4470   0008DC  6A21               	clrf	_hashtag_pressed^0,c
  4471   0008DE  EF7C  F005         	goto	l649
  4472   0008E2                     l3682:
  4473                           
  4474                           ;TAD_TERMINAL.c: 148:    if (!sending_string) {
  4475   0008E2  5020               	movf	_sending_string^0,w,c
  4476   0008E4  A4D8               	btfss	status,2,c
  4477   0008E6  EF77  F004         	goto	u2711
  4478   0008EA  EF79  F004         	goto	u2710
  4479   0008EE                     u2711:
  4480   0008EE  EF7C  F005         	goto	l649
  4481   0008F2                     u2710:
  4482   0008F2                     
  4483                           ;TAD_TERMINAL.c: 149:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  4484   0008F2  0E30               	movlw	low STR_5
  4485   0008F4  6E57               	movwf	motor_StartSendString@str^0,c
  4486   0008F6  0E1F               	movlw	high STR_5
  4487   0008F8  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4488   0008FA  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4489   0008FE                     
  4490                           ;TAD_TERMINAL.c: 150:     sending_string = 1;
  4491   0008FE  0E01               	movlw	1
  4492   000900  6E20               	movwf	_sending_string^0,c
  4493   000902                     
  4494                           ;TAD_TERMINAL.c: 151:     state = 13;
  4495   000902  0E0D               	movlw	13
  4496   000904  6E1F               	movwf	motorTerminal@state^0,c
  4497   000906  EF7C  F005         	goto	l649
  4498   00090A                     l3690:
  4499                           
  4500                           ;TAD_TERMINAL.c: 156:    if (!sending_string) {
  4501   00090A  5020               	movf	_sending_string^0,w,c
  4502   00090C  A4D8               	btfss	status,2,c
  4503   00090E  EF8B  F004         	goto	u2721
  4504   000912  EF8D  F004         	goto	u2720
  4505   000916                     u2721:
  4506   000916  EF7C  F005         	goto	l649
  4507   00091A                     u2720:
  4508   00091A                     
  4509                           ;TAD_TERMINAL.c: 157:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  4510   00091A  0ED1               	movlw	low STR_6
  4511   00091C  6E57               	movwf	motor_StartSendString@str^0,c
  4512   00091E  0E1E               	movlw	high STR_6
  4513   000920  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4514   000922  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4515   000926                     
  4516                           ;TAD_TERMINAL.c: 158:     sending_string = 1;
  4517   000926  0E01               	movlw	1
  4518   000928  6E20               	movwf	_sending_string^0,c
  4519   00092A                     
  4520                           ;TAD_TERMINAL.c: 159:     state = 1;
  4521   00092A  0E01               	movlw	1
  4522   00092C  6E1F               	movwf	motorTerminal@state^0,c
  4523   00092E  EF7C  F005         	goto	l649
  4524   000932                     l3698:
  4525                           
  4526                           ;TAD_TERMINAL.c: 164:    if(Terminal_RXAvailable()) {
  4527   000932  EC56  F00E         	call	_Terminal_RXAvailable	;wreg free
  4528   000936  0900               	iorlw	0
  4529   000938  B4D8               	btfsc	status,2,c
  4530   00093A  EFA1  F004         	goto	u2731
  4531   00093E  EFA3  F004         	goto	u2730
  4532   000942                     u2731:
  4533   000942  EF7C  F005         	goto	l649
  4534   000946                     u2730:
  4535   000946                     
  4536                           ;TAD_TERMINAL.c: 165:     char opcion = Terminal_ReceiveChar();
  4537   000946  EC87  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4538   00094A  6E64               	movwf	motorTerminal@opcion^0,c
  4539   00094C                     
  4540                           ;TAD_TERMINAL.c: 166:     if (opcion >= '1' && opcion <= '3') {
  4541   00094C  0E30               	movlw	48
  4542   00094E  6464               	cpfsgt	motorTerminal@opcion^0,c
  4543   000950  EFAC  F004         	goto	u2741
  4544   000954  EFAE  F004         	goto	u2740
  4545   000958                     u2741:
  4546   000958  EFC5  F004         	goto	l3712
  4547   00095C                     u2740:
  4548   00095C  0E34               	movlw	52
  4549   00095E  6064               	cpfslt	motorTerminal@opcion^0,c
  4550   000960  EFB4  F004         	goto	u2751
  4551   000964  EFB6  F004         	goto	u2750
  4552   000968                     u2751:
  4553   000968  EFC5  F004         	goto	l3712
  4554   00096C                     u2750:
  4555   00096C                     
  4556                           ;TAD_TERMINAL.c: 167:      motor_StartSendString("\r\n");
  4557   00096C  0EF8               	movlw	low (STR_4+15)
  4558   00096E  6E57               	movwf	motor_StartSendString@str^0,c
  4559   000970  0E1F               	movlw	high (STR_4+15)
  4560   000972  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4561   000974  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4562   000978                     
  4563                           ;TAD_TERMINAL.c: 168:      sending_string = 1;
  4564   000978  0E01               	movlw	1
  4565   00097A  6E20               	movwf	_sending_string^0,c
  4566   00097C                     
  4567                           ;TAD_TERMINAL.c: 169:      state = (opcion - '1') * 10 + 20;
  4568   00097C  5064               	movf	motorTerminal@opcion^0,w,c
  4569   00097E  0D0A               	mullw	10
  4570   000980  50F3               	movf	243,w,c
  4571   000982  0F2A               	addlw	42
  4572   000984  6E1F               	movwf	motorTerminal@state^0,c
  4573                           
  4574                           ;TAD_TERMINAL.c: 170:     } else {
  4575   000986  EF7C  F005         	goto	l649
  4576   00098A                     l3712:
  4577                           
  4578                           ;TAD_TERMINAL.c: 171:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  4579   00098A  0E86               	movlw	low STR_8
  4580   00098C  6E57               	movwf	motor_StartSendString@str^0,c
  4581   00098E  0E1F               	movlw	high STR_8
  4582   000990  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4583   000992  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4584   000996                     l3714:
  4585                           
  4586                           ;TAD_TERMINAL.c: 172:      sending_string = 1;
  4587   000996  0E01               	movlw	1
  4588   000998  6E20               	movwf	_sending_string^0,c
  4589   00099A                     l3716:
  4590                           
  4591                           ;TAD_TERMINAL.c: 173:      state = 0;
  4592   00099A  6A1F               	clrf	motorTerminal@state^0,c
  4593   00099C  EF7C  F005         	goto	l649
  4594   0009A0                     l3718:
  4595                           
  4596                           ;TAD_TERMINAL.c: 179:    if (!sending_string) {
  4597   0009A0  5020               	movf	_sending_string^0,w,c
  4598   0009A2  A4D8               	btfss	status,2,c
  4599   0009A4  EFD6  F004         	goto	u2761
  4600   0009A8  EFD8  F004         	goto	u2760
  4601   0009AC                     u2761:
  4602   0009AC  EF7C  F005         	goto	l649
  4603   0009B0                     u2760:
  4604   0009B0                     
  4605                           ;TAD_TERMINAL.c: 180:     unsigned char currentUser[5];;TAD_TERMINAL.c: 181:     getActu
      +                          alUID(currentUser);
  4606   0009B0  0E5F               	movlw	low motorTerminal@currentUser
  4607   0009B2  6E53               	movwf	getActualUID@UID^0,c
  4608   0009B4  ECC8  F009         	call	_getActualUID	;wreg free
  4609   0009B8                     
  4610                           ;TAD_TERMINAL.c: 182:     if (currentUser[0]) {
  4611   0009B8  505F               	movf	motorTerminal@currentUser^0,w,c
  4612   0009BA  B4D8               	btfsc	status,2,c
  4613   0009BC  EFE2  F004         	goto	u2771
  4614   0009C0  EFE4  F004         	goto	u2770
  4615   0009C4                     u2771:
  4616   0009C4  EFEA  F004         	goto	l3726
  4617   0009C8                     u2770:
  4618   0009C8                     
  4619                           ;TAD_TERMINAL.c: 183:      printfUID(currentUser);
  4620   0009C8  0E5F               	movlw	low motorTerminal@currentUser
  4621   0009CA  6E59               	movwf	printfUID@currentUser^0,c
  4622   0009CC  EC3F  F006         	call	_printfUID	;wreg free
  4623                           
  4624                           ;TAD_TERMINAL.c: 184:     } else {
  4625   0009D0  EFF2  F004         	goto	l3730
  4626   0009D4                     l3726:
  4627                           
  4628                           ;TAD_TERMINAL.c: 185:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  4629   0009D4  0E65               	movlw	low STR_9
  4630   0009D6  6E57               	movwf	motor_StartSendString@str^0,c
  4631   0009D8  0E1F               	movlw	high STR_9
  4632   0009DA  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4633   0009DC  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4634   0009E0                     
  4635                           ;TAD_TERMINAL.c: 186:      sending_string = 1;
  4636   0009E0  0E01               	movlw	1
  4637   0009E2  6E20               	movwf	_sending_string^0,c
  4638   0009E4                     l3730:
  4639                           
  4640                           ;TAD_TERMINAL.c: 188:     state = 25;
  4641   0009E4  0E19               	movlw	25
  4642   0009E6  6E1F               	movwf	motorTerminal@state^0,c
  4643   0009E8  EF7C  F005         	goto	l649
  4644   0009EC                     l3732:
  4645                           
  4646                           ;TAD_TERMINAL.c: 193:    if (!sending_string) {
  4647   0009EC  5020               	movf	_sending_string^0,w,c
  4648   0009EE  A4D8               	btfss	status,2,c
  4649   0009F0  EFFC  F004         	goto	u2781
  4650   0009F4  EFFE  F004         	goto	u2780
  4651   0009F8                     u2781:
  4652   0009F8  EF7C  F005         	goto	l649
  4653   0009FC                     u2780:
  4654   0009FC                     
  4655                           ;TAD_TERMINAL.c: 194:     motor_StartSendString("\r\n");
  4656   0009FC  0EF8               	movlw	low (STR_4+15)
  4657   0009FE  6E57               	movwf	motor_StartSendString@str^0,c
  4658   000A00  0E1F               	movlw	high (STR_4+15)
  4659   000A02  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4660   000A04  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4661   000A08  EFCB  F004         	goto	l3714
  4662   000A0C                     l3740:
  4663                           
  4664                           ;TAD_TERMINAL.c: 201:    if (!sending_string) {
  4665   000A0C  5020               	movf	_sending_string^0,w,c
  4666   000A0E  A4D8               	btfss	status,2,c
  4667   000A10  EF0C  F005         	goto	u2791
  4668   000A14  EF0E  F005         	goto	u2790
  4669   000A18                     u2791:
  4670   000A18  EF7C  F005         	goto	l649
  4671   000A1C                     u2790:
  4672   000A1C                     
  4673                           ;TAD_TERMINAL.c: 202:     showAllConfigurations();
  4674   000A1C  EC94  F00B         	call	_showAllConfigurations	;wreg free
  4675   000A20  EFCD  F004         	goto	l3716
  4676   000A24                     l3746:
  4677                           
  4678                           ;TAD_TERMINAL.c: 208:    if (!sending_string) {
  4679   000A24  5020               	movf	_sending_string^0,w,c
  4680   000A26  A4D8               	btfss	status,2,c
  4681   000A28  EF18  F005         	goto	u2801
  4682   000A2C  EF1A  F005         	goto	u2800
  4683   000A30                     u2801:
  4684   000A30  EF7C  F005         	goto	l649
  4685   000A34                     u2800:
  4686   000A34                     
  4687                           ;TAD_TERMINAL.c: 209:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  4688   000A34  0EC8               	movlw	low STR_11
  4689   000A36  6E57               	movwf	motor_StartSendString@str^0,c
  4690   000A38  0E1F               	movlw	high STR_11
  4691   000A3A  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4692   000A3C  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4693   000A40                     
  4694                           ;TAD_TERMINAL.c: 210:     sending_string = 1;
  4695   000A40  0E01               	movlw	1
  4696   000A42  6E20               	movwf	_sending_string^0,c
  4697   000A44                     
  4698                           ;TAD_TERMINAL.c: 211:     state = 2;
  4699   000A44  0E02               	movlw	2
  4700   000A46  6E1F               	movwf	motorTerminal@state^0,c
  4701   000A48                     
  4702                           ;TAD_TERMINAL.c: 212:     index = 0;
  4703   000A48  6A1E               	clrf	motorTerminal@index^0,c
  4704   000A4A  EF7C  F005         	goto	l649
  4705   000A4E                     l3756:
  4706                           
  4707                           ;TAD_TERMINAL.c: 217:    if(Terminal_RXAvailable()) {
  4708   000A4E  EC56  F00E         	call	_Terminal_RXAvailable	;wreg free
  4709   000A52  0900               	iorlw	0
  4710   000A54  B4D8               	btfsc	status,2,c
  4711   000A56  EF2F  F005         	goto	u2811
  4712   000A5A  EF31  F005         	goto	u2810
  4713   000A5E                     u2811:
  4714   000A5E  EF7C  F005         	goto	l649
  4715   000A62                     u2810:
  4716   000A62                     
  4717                           ;TAD_TERMINAL.c: 218:     hour[index] = Terminal_ReceiveChar();
  4718   000A62  501E               	movf	motorTerminal@index^0,w,c
  4719   000A64  0F78               	addlw	low motorTerminal@hour
  4720   000A66  6ED9               	movwf	fsr2l,c
  4721   000A68  6ADA               	clrf	fsr2h,c
  4722   000A6A  EC87  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4723   000A6E  6EDF               	movwf	indf2,c
  4724                           
  4725                           ;TAD_TERMINAL.c: 219:     Terminal_SendChar(hour[index]);
  4726   000A70  501E               	movf	motorTerminal@index^0,w,c
  4727   000A72  0F78               	addlw	low motorTerminal@hour
  4728   000A74  6ED9               	movwf	fsr2l,c
  4729   000A76  6ADA               	clrf	fsr2h,c
  4730   000A78  50DF               	movf	indf2,w,c
  4731   000A7A  EC16  F00E         	call	_Terminal_SendChar
  4732   000A7E                     
  4733                           ;TAD_TERMINAL.c: 220:     if(++index == 4) {
  4734   000A7E  2A1E               	incf	motorTerminal@index^0,f,c
  4735   000A80  0E04               	movlw	4
  4736   000A82  181E               	xorwf	motorTerminal@index^0,w,c
  4737   000A84  A4D8               	btfss	status,2,c
  4738   000A86  EF47  F005         	goto	u2821
  4739   000A8A  EF49  F005         	goto	u2820
  4740   000A8E                     u2821:
  4741   000A8E  EF7C  F005         	goto	l649
  4742   000A92                     u2820:
  4743   000A92                     
  4744                           ;TAD_TERMINAL.c: 221:      saveHourToData(hour);
  4745   000A92  0E78               	movlw	low motorTerminal@hour
  4746   000A94  6E53               	movwf	saveHourToData@hour^0,c
  4747   000A96  ECDF  F00C         	call	_saveHourToData	;wreg free
  4748   000A9A                     
  4749                           ;TAD_TERMINAL.c: 222:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  4750   000A9A  0EA7               	movlw	low STR_12
  4751   000A9C  6E57               	movwf	motor_StartSendString@str^0,c
  4752   000A9E  0E1F               	movlw	high STR_12
  4753   000AA0  6E58               	movwf	(motor_StartSendString@str+1)^0,c
  4754   000AA2  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  4755   000AA6  EFCB  F004         	goto	l3714
  4756   000AAA                     l3772:
  4757   000AAA  501F               	movf	motorTerminal@state^0,w,c
  4758                           
  4759                           ; Switch size 1, requested type "simple"
  4760                           ; Number of cases is 9, Range of values is 0 to 40
  4761                           ; switch strategies available:
  4762                           ; Name         Instructions Cycles
  4763                           ; simple_byte           28    15 (average)
  4764                           ;	Chosen strategy is simple_byte
  4765   000AAC  0A00               	xorlw	0	; case 0
  4766   000AAE  B4D8               	btfsc	status,2,c
  4767   000AB0  EF52  F004         	goto	l3670
  4768   000AB4  0A01               	xorlw	1	; case 1
  4769   000AB6  B4D8               	btfsc	status,2,c
  4770   000AB8  EF99  F004         	goto	l3698
  4771   000ABC  0A03               	xorlw	3	; case 2
  4772   000ABE  B4D8               	btfsc	status,2,c
  4773   000AC0  EF27  F005         	goto	l3756
  4774   000AC4  0A08               	xorlw	8	; case 10
  4775   000AC6  B4D8               	btfsc	status,2,c
  4776   000AC8  EF71  F004         	goto	l3682
  4777   000ACC  0A07               	xorlw	7	; case 13
  4778   000ACE  B4D8               	btfsc	status,2,c
  4779   000AD0  EF85  F004         	goto	l3690
  4780   000AD4  0A19               	xorlw	25	; case 20
  4781   000AD6  B4D8               	btfsc	status,2,c
  4782   000AD8  EFD0  F004         	goto	l3718
  4783   000ADC  0A0D               	xorlw	13	; case 25
  4784   000ADE  B4D8               	btfsc	status,2,c
  4785   000AE0  EFF6  F004         	goto	l3732
  4786   000AE4  0A07               	xorlw	7	; case 30
  4787   000AE6  B4D8               	btfsc	status,2,c
  4788   000AE8  EF06  F005         	goto	l3740
  4789   000AEC  0A36               	xorlw	54	; case 40
  4790   000AEE  B4D8               	btfsc	status,2,c
  4791   000AF0  EF12  F005         	goto	l3746
  4792   000AF4  EF7C  F005         	goto	l649
  4793   000AF8                     l649:
  4794   000AF8  0012               	return		;funcret
  4795   000AFA                     __end_of_motorTerminal:
  4796                           	callstack 0
  4797                           
  4798 ;; *************** function _showAllConfigurations *****************
  4799 ;; Defined at:
  4800 ;;		line 63 in file "TAD_DATOS.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  j               1    7[COMRAM] unsigned char 
  4805 ;;  i               1    8[COMRAM] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1
  4815 ;;      Params:         0       0       0
  4816 ;;      Locals:         2       0       0
  4817 ;;      Temps:          0       0       0
  4818 ;;      Totals:         2       0       0
  4819 ;;Total ram usage:        2 bytes
  4820 ;; Hardware stack levels used: 1
  4821 ;; Hardware stack levels required when called: 6
  4822 ;; This function calls:
  4823 ;;		_Terminal_SendChar
  4824 ;;		_Terminal_SendString
  4825 ;; This function is called by:
  4826 ;;		_motorTerminal
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text7
  4831   001728                     __ptext7:
  4832                           	callstack 0
  4833   001728                     _showAllConfigurations:
  4834                           	callstack 23
  4835   001728                     
  4836                           ;TAD_DATOS.c: 64:     static const char userStr[] = "User ";;TAD_DATOS.c: 65:     static
      +                           const char configStr[] = " Config: ";;TAD_DATOS.c: 67:     for(char i = 0; i < 4; i++) 
      +                          {
  4837   001728  6A5A               	clrf	showAllConfigurations@i^0,c
  4838   00172A                     l3402:
  4839                           
  4840                           ;TAD_DATOS.c: 68:         Terminal_SendString(userStr);
  4841   00172A  0ECB               	movlw	low showAllConfigurations@userStr
  4842   00172C  6E57               	movwf	Terminal_SendString@str^0,c
  4843   00172E  0E1E               	movlw	high showAllConfigurations@userStr
  4844   001730  6E58               	movwf	(Terminal_SendString@str+1)^0,c
  4845   001732  EC3A  F00D         	call	_Terminal_SendString	;wreg free
  4846   001736                     
  4847                           ;TAD_DATOS.c: 69:         Terminal_SendChar('1' + i);
  4848   001736  505A               	movf	showAllConfigurations@i^0,w,c
  4849   001738  0F31               	addlw	49
  4850   00173A  EC16  F00E         	call	_Terminal_SendChar
  4851   00173E                     
  4852                           ;TAD_DATOS.c: 70:         Terminal_SendString(configStr);
  4853   00173E  0EC1               	movlw	low showAllConfigurations@configStr
  4854   001740  6E57               	movwf	Terminal_SendString@str^0,c
  4855   001742  0E1E               	movlw	high showAllConfigurations@configStr
  4856   001744  6E58               	movwf	(Terminal_SendString@str+1)^0,c
  4857   001746  EC3A  F00D         	call	_Terminal_SendString	;wreg free
  4858   00174A                     
  4859                           ;TAD_DATOS.c: 72:         for(char j = 0; j < 6; j++) {
  4860   00174A  6A59               	clrf	showAllConfigurations@j^0,c
  4861   00174C                     l3414:
  4862                           
  4863                           ;TAD_DATOS.c: 73:             Terminal_SendChar('0' + configurations[i][j]);
  4864   00174C  505A               	movf	showAllConfigurations@i^0,w,c
  4865   00174E  0D06               	mullw	6
  4866   001750  50F3               	movf	243,w,c
  4867   001752  0FA8               	addlw	low _configurations
  4868   001754  2459               	addwf	showAllConfigurations@j^0,w,c
  4869   001756  6ED9               	movwf	fsr2l,c
  4870   001758  6ADA               	clrf	fsr2h,c
  4871   00175A  50DF               	movf	indf2,w,c
  4872   00175C  0F30               	addlw	48
  4873   00175E  EC16  F00E         	call	_Terminal_SendChar
  4874   001762                     
  4875                           ;TAD_DATOS.c: 74:             Terminal_SendString(" ");
  4876   001762  0EFD               	movlw	low (STR_2+2)
  4877   001764  6E57               	movwf	Terminal_SendString@str^0,c
  4878   001766  0E1F               	movlw	high (STR_2+2)
  4879   001768  6E58               	movwf	(Terminal_SendString@str+1)^0,c
  4880   00176A  EC3A  F00D         	call	_Terminal_SendString	;wreg free
  4881   00176E                     
  4882                           ;TAD_DATOS.c: 75:         }
  4883   00176E  2A59               	incf	showAllConfigurations@j^0,f,c
  4884   001770  0E05               	movlw	5
  4885   001772  6459               	cpfsgt	showAllConfigurations@j^0,c
  4886   001774  EFBE  F00B         	goto	u2371
  4887   001778  EFC0  F00B         	goto	u2370
  4888   00177C                     u2371:
  4889   00177C  EFA6  F00B         	goto	l3414
  4890   001780                     u2370:
  4891   001780                     
  4892                           ;TAD_DATOS.c: 76:         Terminal_SendString("\r\n");
  4893   001780  0EF8               	movlw	low (STR_4+15)
  4894   001782  6E57               	movwf	Terminal_SendString@str^0,c
  4895   001784  0E1F               	movlw	high (STR_4+15)
  4896   001786  6E58               	movwf	(Terminal_SendString@str+1)^0,c
  4897   001788  EC3A  F00D         	call	_Terminal_SendString	;wreg free
  4898   00178C                     
  4899                           ;TAD_DATOS.c: 77:     }
  4900   00178C  2A5A               	incf	showAllConfigurations@i^0,f,c
  4901   00178E  0E03               	movlw	3
  4902   001790  645A               	cpfsgt	showAllConfigurations@i^0,c
  4903   001792  EFCD  F00B         	goto	u2381
  4904   001796  EFCF  F00B         	goto	u2380
  4905   00179A                     u2381:
  4906   00179A  EF95  F00B         	goto	l3402
  4907   00179E                     u2380:
  4908   00179E  0012               	return		;funcret
  4909   0017A0                     __end_of_showAllConfigurations:
  4910                           	callstack 0
  4911                           
  4912 ;; *************** function _Terminal_SendString *****************
  4913 ;; Defined at:
  4914 ;;		line 30 in file "TAD_TERMINAL.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  str             2    5[COMRAM] PTR const unsigned char 
  4917 ;;		 -> STR_14(3), STR_13(2), showAllConfigurations@configStr(10), showAllConfigurations@userStr(6), 
  4918 ;;		 -> STR_3(3), STR_2(4), STR_1(3), 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;		None
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      void 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1
  4930 ;;      Params:         2       0       0
  4931 ;;      Locals:         0       0       0
  4932 ;;      Temps:          0       0       0
  4933 ;;      Totals:         2       0       0
  4934 ;;Total ram usage:        2 bytes
  4935 ;; Hardware stack levels used: 1
  4936 ;; Hardware stack levels required when called: 5
  4937 ;; This function calls:
  4938 ;;		_Terminal_SendChar
  4939 ;; This function is called by:
  4940 ;;		_showAllConfigurations
  4941 ;;		_printLedConfig
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text8
  4946   001A74                     __ptext8:
  4947                           	callstack 0
  4948   001A74                     _Terminal_SendString:
  4949                           	callstack 23
  4950   001A74                     
  4951                           ;TAD_TERMINAL.c: 31:  while (*str) {
  4952   001A74  EF46  F00D         	goto	l3036
  4953   001A78                     l3032:
  4954                           
  4955                           ;TAD_TERMINAL.c: 32:   Terminal_SendChar(*str++);
  4956   001A78  C057  FFF6         	movff	Terminal_SendString@str,tblptrl
  4957   001A7C  C058  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4958   001A80                     	if	0	;tblptru may be non-zero
  4959   001A80                     	endif
  4960   001A80                     	if	0	;tblptru may be non-zero
  4961   001A80                     	endif
  4962   001A80  0008               	tblrd		*
  4963   001A82  50F5               	movf	tablat,w,c
  4964   001A84  EC16  F00E         	call	_Terminal_SendChar
  4965   001A88  4A57               	infsnz	Terminal_SendString@str^0,f,c
  4966   001A8A  2A58               	incf	(Terminal_SendString@str+1)^0,f,c
  4967   001A8C                     l3036:
  4968                           
  4969                           ;TAD_TERMINAL.c: 31:  while (*str) {
  4970   001A8C  C057  FFF6         	movff	Terminal_SendString@str,tblptrl
  4971   001A90  C058  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4972   001A94                     	if	0	;tblptru may be non-zero
  4973   001A94                     	endif
  4974   001A94                     	if	0	;tblptru may be non-zero
  4975   001A94                     	endif
  4976   001A94  0008               	tblrd		*
  4977   001A96  50F5               	movf	tablat,w,c
  4978   001A98  0900               	iorlw	0
  4979   001A9A  A4D8               	btfss	status,2,c
  4980   001A9C  EF52  F00D         	goto	u2081
  4981   001AA0  EF54  F00D         	goto	u2080
  4982   001AA4                     u2081:
  4983   001AA4  EF3C  F00D         	goto	l3032
  4984   001AA8                     u2080:
  4985   001AA8  0012               	return		;funcret
  4986   001AAA                     __end_of_Terminal_SendString:
  4987                           	callstack 0
  4988                           
  4989 ;; *************** function _Terminal_SendChar *****************
  4990 ;; Defined at:
  4991 ;;		line 25 in file "TAD_TERMINAL.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  c               1    wreg     unsigned char 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  c               1    4[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1
  5005 ;;      Params:         0       0       0
  5006 ;;      Locals:         1       0       0
  5007 ;;      Temps:          0       0       0
  5008 ;;      Totals:         1       0       0
  5009 ;;Total ram usage:        1 bytes
  5010 ;; Hardware stack levels used: 1
  5011 ;; Hardware stack levels required when called: 4
  5012 ;; This function calls:
  5013 ;;		_Terminal_TXAvailable
  5014 ;; This function is called by:
  5015 ;;		_Terminal_SendString
  5016 ;;		_motorTerminal
  5017 ;;		_showAllConfigurations
  5018 ;;		_printLedConfig
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text9
  5023   001C2C                     __ptext9:
  5024                           	callstack 0
  5025   001C2C                     _Terminal_SendChar:
  5026                           	callstack 23
  5027                           
  5028                           ;incstack = 0
  5029                           ;Terminal_SendChar@c stored from wreg
  5030   001C2C  6E56               	movwf	Terminal_SendChar@c^0,c
  5031   001C2E                     l3002:
  5032   001C2E  EC25  F00E         	call	_Terminal_TXAvailable	;wreg free
  5033   001C32  5053               	movf	?_Terminal_TXAvailable^0,w,c
  5034   001C34  1054               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5035   001C36  B4D8               	btfsc	status,2,c
  5036   001C38  EF20  F00E         	goto	u1861
  5037   001C3C  EF22  F00E         	goto	u1860
  5038   001C40                     u1861:
  5039   001C40  EF17  F00E         	goto	l3002
  5040   001C44                     u1860:
  5041   001C44                     
  5042                           ;TAD_TERMINAL.c: 27:  TXREG = c;
  5043   001C44  C056  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5044   001C48  0012               	return		;funcret
  5045   001C4A                     __end_of_Terminal_SendChar:
  5046                           	callstack 0
  5047                           
  5048 ;; *************** function _saveHourToData *****************
  5049 ;; Defined at:
  5050 ;;		line 85 in file "TAD_DATOS.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5053 ;;		 -> motorTerminal@hour(4), 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  i               1    2[COMRAM] unsigned char 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1
  5065 ;;      Params:         1       0       0
  5066 ;;      Locals:         1       0       0
  5067 ;;      Temps:          0       0       0
  5068 ;;      Totals:         2       0       0
  5069 ;;Total ram usage:        2 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 3
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_motorTerminal
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text10
  5080   0019BE                     __ptext10:
  5081                           	callstack 0
  5082   0019BE                     _saveHourToData:
  5083                           	callstack 26
  5084   0019BE                     
  5085                           ;TAD_DATOS.c: 86:     if(!hour) return;
  5086   0019BE  5053               	movf	saveHourToData@hour^0,w,c
  5087   0019C0  A4D8               	btfss	status,2,c
  5088   0019C2  EFE5  F00C         	goto	u2391
  5089   0019C6  EFE7  F00C         	goto	u2390
  5090   0019CA                     u2391:
  5091   0019CA  EFE9  F00C         	goto	l733
  5092   0019CE                     u2390:
  5093   0019CE  EFFD  F00C         	goto	l734
  5094   0019D2                     l733:
  5095                           
  5096                           ;TAD_DATOS.c: 87:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5097   0019D2  6A54               	clrf	saveHourToData@i^0,c
  5098   0019D4                     l3436:
  5099   0019D4  5053               	movf	saveHourToData@hour^0,w,c
  5100   0019D6  2454               	addwf	saveHourToData@i^0,w,c
  5101   0019D8  6ED9               	movwf	fsr2l,c
  5102   0019DA  6ADA               	clrf	fsr2h,c
  5103   0019DC  5054               	movf	saveHourToData@i^0,w,c
  5104   0019DE  0F6F               	addlw	low _currentTime
  5105   0019E0  6EE1               	movwf	fsr1l,c
  5106   0019E2  6AE2               	clrf	fsr1h,c
  5107   0019E4  CFDF FFE7          	movff	indf2,indf1
  5108   0019E8  2A54               	incf	saveHourToData@i^0,f,c
  5109   0019EA  0E03               	movlw	3
  5110   0019EC  6454               	cpfsgt	saveHourToData@i^0,c
  5111   0019EE  EFFB  F00C         	goto	u2401
  5112   0019F2  EFFD  F00C         	goto	u2400
  5113   0019F6                     u2401:
  5114   0019F6  EFEA  F00C         	goto	l3436
  5115   0019FA                     u2400:
  5116   0019FA                     l734:
  5117   0019FA  0012               	return		;funcret
  5118   0019FC                     __end_of_saveHourToData:
  5119                           	callstack 0
  5120                           
  5121 ;; *************** function _printfUID *****************
  5122 ;; Defined at:
  5123 ;;		line 68 in file "TAD_TERMINAL.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5126 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  val             1   10[COMRAM] unsigned char 
  5129 ;;  ptr             1   12[COMRAM] PTR unsigned char 
  5130 ;;		 -> printfUID@buffer(20), 
  5131 ;;  i               1   11[COMRAM] unsigned char 
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  1    wreg      void 
  5134 ;; Registers used:
  5135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMRAM   BANK0   BANK1
  5141 ;;      Params:         1       0       0
  5142 ;;      Locals:         3       0       0
  5143 ;;      Temps:          2       0       0
  5144 ;;      Totals:         6       0       0
  5145 ;;Total ram usage:        6 bytes
  5146 ;; Hardware stack levels used: 1
  5147 ;; Hardware stack levels required when called: 7
  5148 ;; This function calls:
  5149 ;;		_motor_StartSendString
  5150 ;; This function is called by:
  5151 ;;		_motorTerminal
  5152 ;;		_setCurrentUser
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text11
  5157   000C7E                     __ptext11:
  5158                           	callstack 0
  5159   000C7E                     _printfUID:
  5160                           	callstack 21
  5161   000C7E                     
  5162                           ;TAD_TERMINAL.c: 70:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 7
      +                          2:     static char buffer[20];;TAD_TERMINAL.c: 73:     char *ptr = buffer;
  5163   000C7E  0E94               	movlw	low printfUID@buffer
  5164   000C80  6E5E               	movwf	printfUID@ptr^0,c
  5165   000C82                     
  5166                           ;TAD_TERMINAL.c: 76:     *ptr++ = 'U';
  5167   000C82  505E               	movf	printfUID@ptr^0,w,c
  5168   000C84  6ED9               	movwf	fsr2l,c
  5169   000C86  6ADA               	clrf	fsr2h,c
  5170   000C88  0E55               	movlw	85
  5171   000C8A  6EDF               	movwf	indf2,c
  5172   000C8C  2A5E               	incf	printfUID@ptr^0,f,c
  5173   000C8E                     
  5174                           ;TAD_TERMINAL.c: 77:     *ptr++ = 'I';
  5175   000C8E  505E               	movf	printfUID@ptr^0,w,c
  5176   000C90  6ED9               	movwf	fsr2l,c
  5177   000C92  6ADA               	clrf	fsr2h,c
  5178   000C94  0E49               	movlw	73
  5179   000C96  6EDF               	movwf	indf2,c
  5180   000C98  2A5E               	incf	printfUID@ptr^0,f,c
  5181   000C9A                     
  5182                           ;TAD_TERMINAL.c: 78:     *ptr++ = 'D';
  5183   000C9A  505E               	movf	printfUID@ptr^0,w,c
  5184   000C9C  6ED9               	movwf	fsr2l,c
  5185   000C9E  6ADA               	clrf	fsr2h,c
  5186   000CA0  0E44               	movlw	68
  5187   000CA2  6EDF               	movwf	indf2,c
  5188   000CA4  2A5E               	incf	printfUID@ptr^0,f,c
  5189   000CA6                     
  5190                           ;TAD_TERMINAL.c: 79:     *ptr++ = ':';
  5191   000CA6  505E               	movf	printfUID@ptr^0,w,c
  5192   000CA8  6ED9               	movwf	fsr2l,c
  5193   000CAA  6ADA               	clrf	fsr2h,c
  5194   000CAC  0E3A               	movlw	58
  5195   000CAE  6EDF               	movwf	indf2,c
  5196   000CB0  2A5E               	incf	printfUID@ptr^0,f,c
  5197   000CB2                     
  5198                           ;TAD_TERMINAL.c: 80:     *ptr++ = ' ';
  5199   000CB2  505E               	movf	printfUID@ptr^0,w,c
  5200   000CB4  6ED9               	movwf	fsr2l,c
  5201   000CB6  6ADA               	clrf	fsr2h,c
  5202   000CB8  0E20               	movlw	32
  5203   000CBA  6EDF               	movwf	indf2,c
  5204   000CBC  2A5E               	incf	printfUID@ptr^0,f,c
  5205   000CBE                     
  5206                           ;TAD_TERMINAL.c: 83:     char i;;TAD_TERMINAL.c: 84:     for(i = 0; i < 5; i++) {
  5207   000CBE  6A5D               	clrf	printfUID@i^0,c
  5208   000CC0                     l3066:
  5209                           
  5210                           ;TAD_TERMINAL.c: 85:         if (currentUser == 0 || *currentUser == 0) {
  5211   000CC0  5059               	movf	printfUID@currentUser^0,w,c
  5212   000CC2  B4D8               	btfsc	status,2,c
  5213   000CC4  EF66  F006         	goto	u2091
  5214   000CC8  EF68  F006         	goto	u2090
  5215   000CCC                     u2091:
  5216   000CCC  EF73  F006         	goto	l3070
  5217   000CD0                     u2090:
  5218   000CD0  5059               	movf	printfUID@currentUser^0,w,c
  5219   000CD2  6ED9               	movwf	fsr2l,c
  5220   000CD4  6ADA               	clrf	fsr2h,c
  5221   000CD6  50DF               	movf	indf2,w,c
  5222   000CD8  A4D8               	btfss	status,2,c
  5223   000CDA  EF71  F006         	goto	u2101
  5224   000CDE  EF73  F006         	goto	u2100
  5225   000CE2                     u2101:
  5226   000CE2  EF81  F006         	goto	l3076
  5227   000CE6                     u2100:
  5228   000CE6                     l3070:
  5229                           
  5230                           ;TAD_TERMINAL.c: 87:             *ptr++ = '0';
  5231   000CE6  505E               	movf	printfUID@ptr^0,w,c
  5232   000CE8  6ED9               	movwf	fsr2l,c
  5233   000CEA  6ADA               	clrf	fsr2h,c
  5234   000CEC  0E30               	movlw	48
  5235   000CEE  6EDF               	movwf	indf2,c
  5236   000CF0  2A5E               	incf	printfUID@ptr^0,f,c
  5237   000CF2                     
  5238                           ;TAD_TERMINAL.c: 88:             *ptr++ = '0';
  5239   000CF2  505E               	movf	printfUID@ptr^0,w,c
  5240   000CF4  6ED9               	movwf	fsr2l,c
  5241   000CF6  6ADA               	clrf	fsr2h,c
  5242   000CF8  0E30               	movlw	48
  5243   000CFA  6EDF               	movwf	indf2,c
  5244   000CFC  2A5E               	incf	printfUID@ptr^0,f,c
  5245                           
  5246                           ;TAD_TERMINAL.c: 89:         } else {
  5247   000CFE  EFA9  F006         	goto	l3086
  5248   000D02                     l3076:
  5249                           
  5250                           ;TAD_TERMINAL.c: 91:             unsigned char val = currentUser[i];
  5251   000D02  5059               	movf	printfUID@currentUser^0,w,c
  5252   000D04  245D               	addwf	printfUID@i^0,w,c
  5253   000D06  6ED9               	movwf	fsr2l,c
  5254   000D08  6ADA               	clrf	fsr2h,c
  5255   000D0A  50DF               	movf	indf2,w,c
  5256   000D0C  6E5C               	movwf	printfUID@val^0,c
  5257   000D0E                     
  5258                           ;TAD_TERMINAL.c: 92:             *ptr++ = hex[val >> 4];
  5259   000D0E  385C               	swapf	printfUID@val^0,w,c
  5260   000D10  0B0F               	andlw	15
  5261   000D12  6E5A               	movwf	??_printfUID^0,c
  5262   000D14  6A5B               	clrf	(??_printfUID+1)^0,c
  5263   000D16  0EA4               	movlw	low printfUID@hex
  5264   000D18  245A               	addwf	??_printfUID^0,w,c
  5265   000D1A  6EF6               	movwf	tblptrl,c
  5266   000D1C  0E1E               	movlw	high printfUID@hex
  5267   000D1E  205B               	addwfc	(??_printfUID+1)^0,w,c
  5268   000D20  6EF7               	movwf	tblptrh,c
  5269   000D22                     	if	0	;There are less than 3 active tblptr bytes
  5270   000D22                     	endif
  5271   000D22  505E               	movf	printfUID@ptr^0,w,c
  5272   000D24  6ED9               	movwf	fsr2l,c
  5273   000D26  6ADA               	clrf	fsr2h,c
  5274   000D28  0008               	tblrd		*
  5275   000D2A  CFF5 FFDF          	movff	tablat,indf2
  5276   000D2E  2A5E               	incf	printfUID@ptr^0,f,c
  5277   000D30                     
  5278                           ;TAD_TERMINAL.c: 93:             *ptr++ = hex[val & 0x0F];
  5279   000D30  505C               	movf	printfUID@val^0,w,c
  5280   000D32  0B0F               	andlw	15
  5281   000D34  6E5A               	movwf	??_printfUID^0,c
  5282   000D36  6A5B               	clrf	(??_printfUID+1)^0,c
  5283   000D38  0EA4               	movlw	low printfUID@hex
  5284   000D3A  245A               	addwf	??_printfUID^0,w,c
  5285   000D3C  6EF6               	movwf	tblptrl,c
  5286   000D3E  0E1E               	movlw	high printfUID@hex
  5287   000D40  205B               	addwfc	(??_printfUID+1)^0,w,c
  5288   000D42  6EF7               	movwf	tblptrh,c
  5289   000D44                     	if	0	;There are less than 3 active tblptr bytes
  5290   000D44                     	endif
  5291   000D44  505E               	movf	printfUID@ptr^0,w,c
  5292   000D46  6ED9               	movwf	fsr2l,c
  5293   000D48  6ADA               	clrf	fsr2h,c
  5294   000D4A  0008               	tblrd		*
  5295   000D4C  CFF5 FFDF          	movff	tablat,indf2
  5296   000D50  2A5E               	incf	printfUID@ptr^0,f,c
  5297   000D52                     l3086:
  5298                           
  5299                           ;TAD_TERMINAL.c: 96:         if(i < 4) *ptr++ = '-';
  5300   000D52  0E04               	movlw	4
  5301   000D54  605D               	cpfslt	printfUID@i^0,c
  5302   000D56  EFAF  F006         	goto	u2111
  5303   000D5A  EFB1  F006         	goto	u2110
  5304   000D5E                     u2111:
  5305   000D5E  EFB7  F006         	goto	l3092
  5306   000D62                     u2110:
  5307   000D62  505E               	movf	printfUID@ptr^0,w,c
  5308   000D64  6ED9               	movwf	fsr2l,c
  5309   000D66  6ADA               	clrf	fsr2h,c
  5310   000D68  0E2D               	movlw	45
  5311   000D6A  6EDF               	movwf	indf2,c
  5312   000D6C  2A5E               	incf	printfUID@ptr^0,f,c
  5313   000D6E                     l3092:
  5314                           
  5315                           ;TAD_TERMINAL.c: 97:     }
  5316   000D6E  2A5D               	incf	printfUID@i^0,f,c
  5317   000D70  0E04               	movlw	4
  5318   000D72  645D               	cpfsgt	printfUID@i^0,c
  5319   000D74  EFBE  F006         	goto	u2121
  5320   000D78  EFC0  F006         	goto	u2120
  5321   000D7C                     u2121:
  5322   000D7C  EF60  F006         	goto	l3066
  5323   000D80                     u2120:
  5324   000D80                     
  5325                           ;TAD_TERMINAL.c: 100:     *ptr++ = '\r';
  5326   000D80  505E               	movf	printfUID@ptr^0,w,c
  5327   000D82  6ED9               	movwf	fsr2l,c
  5328   000D84  6ADA               	clrf	fsr2h,c
  5329   000D86  0E0D               	movlw	13
  5330   000D88  6EDF               	movwf	indf2,c
  5331   000D8A  2A5E               	incf	printfUID@ptr^0,f,c
  5332   000D8C                     
  5333                           ;TAD_TERMINAL.c: 101:     *ptr++ = '\n';
  5334   000D8C  505E               	movf	printfUID@ptr^0,w,c
  5335   000D8E  6ED9               	movwf	fsr2l,c
  5336   000D90  6ADA               	clrf	fsr2h,c
  5337   000D92  0E0A               	movlw	10
  5338   000D94  6EDF               	movwf	indf2,c
  5339   000D96  2A5E               	incf	printfUID@ptr^0,f,c
  5340   000D98                     
  5341                           ;TAD_TERMINAL.c: 102:     *ptr = '\0';
  5342   000D98  505E               	movf	printfUID@ptr^0,w,c
  5343   000D9A  6ED9               	movwf	fsr2l,c
  5344   000D9C  6ADA               	clrf	fsr2h,c
  5345   000D9E  6ADF               	clrf	indf2,c
  5346   000DA0                     
  5347                           ;TAD_TERMINAL.c: 105:     motor_StartSendString(buffer);
  5348   000DA0  0E94               	movlw	low printfUID@buffer
  5349   000DA2  6E57               	movwf	motor_StartSendString@str^0,c
  5350   000DA4  6A58               	clrf	(motor_StartSendString@str+1)^0,c
  5351   000DA6  ECE6  F00D         	call	_motor_StartSendString	;wreg free
  5352   000DAA                     
  5353                           ;TAD_TERMINAL.c: 106:     sending_string = 1;
  5354   000DAA  0E01               	movlw	1
  5355   000DAC  6E20               	movwf	_sending_string^0,c
  5356   000DAE  0012               	return		;funcret
  5357   000DB0                     __end_of_printfUID:
  5358                           	callstack 0
  5359                           
  5360 ;; *************** function _motor_StartSendString *****************
  5361 ;; Defined at:
  5362 ;;		line 58 in file "TAD_TERMINAL.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5365 ;;		 -> STR_12(33), STR_11(33), STR_10(3), STR_9(33), 
  5366 ;;		 -> STR_8(33), STR_7(3), STR_6(95), STR_5(53), 
  5367 ;;		 -> STR_4(18), printfUID@buffer(20), 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;		None
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      void 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1
  5379 ;;      Params:         2       0       0
  5380 ;;      Locals:         0       0       0
  5381 ;;      Temps:          0       0       0
  5382 ;;      Totals:         2       0       0
  5383 ;;Total ram usage:        2 bytes
  5384 ;; Hardware stack levels used: 1
  5385 ;; Hardware stack levels required when called: 6
  5386 ;; This function calls:
  5387 ;;		_motor_SendString
  5388 ;; This function is called by:
  5389 ;;		_printfUID
  5390 ;;		_motorTerminal
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text12
  5395   001BCC                     __ptext12:
  5396                           	callstack 0
  5397   001BCC                     _motor_StartSendString:
  5398                           	callstack 21
  5399   001BCC                     
  5400                           ;TAD_TERMINAL.c: 59:  if (motor_SendString() == 1) {
  5401   001BCC  EC32  F009         	call	_motor_SendString	;wreg free
  5402   001BD0  06E8               	decf	wreg,f,c
  5403   001BD2  A4D8               	btfss	status,2,c
  5404   001BD4  EFEE  F00D         	goto	u1871
  5405   001BD8  EFF0  F00D         	goto	u1870
  5406   001BDC                     u1871:
  5407   001BDC  EFF6  F00D         	goto	l612
  5408   001BE0                     u1870:
  5409   001BE0                     
  5410                           ;TAD_TERMINAL.c: 60:   str_ptr = str;
  5411   001BE0  C057  F00F         	movff	motor_StartSendString@str,_str_ptr
  5412   001BE4  C058  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  5413   001BE8                     
  5414                           ;TAD_TERMINAL.c: 61:   state_str = 1;
  5415   001BE8  0E01               	movlw	1
  5416   001BEA  6E22               	movwf	_state_str^0,c
  5417   001BEC                     l612:
  5418   001BEC  0012               	return		;funcret
  5419   001BEE                     __end_of_motor_StartSendString:
  5420                           	callstack 0
  5421                           
  5422 ;; *************** function _motor_SendString *****************
  5423 ;; Defined at:
  5424 ;;		line 44 in file "TAD_TERMINAL.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      unsigned char 
  5431 ;; Registers used:
  5432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1
  5438 ;;      Params:         0       0       0
  5439 ;;      Locals:         0       0       0
  5440 ;;      Temps:          0       0       0
  5441 ;;      Totals:         0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used: 1
  5444 ;; Hardware stack levels required when called: 5
  5445 ;; This function calls:
  5446 ;;		_motor_SendChar
  5447 ;; This function is called by:
  5448 ;;		_motor_StartSendString
  5449 ;;		_motorTerminal
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text13
  5454   001264                     __ptext13:
  5455                           	callstack 0
  5456   001264                     _motor_SendString:
  5457                           	callstack 21
  5458   001264                     
  5459                           ;TAD_TERMINAL.c: 45:  switch(state_str) {
  5460   001264  EF71  F009         	goto	l2978
  5461   001268                     l2956:
  5462   001268  0E01               	movlw	1
  5463   00126A  EF7C  F009         	goto	l604
  5464   00126E                     l2960:
  5465                           
  5466                           ;TAD_TERMINAL.c: 48:    if (!*str_ptr) {
  5467   00126E  C00F  FFF6         	movff	_str_ptr,tblptrl
  5468   001272  C010  FFF7         	movff	_str_ptr+1,tblptrh
  5469   001276  6AF8               	clrf	tblptru,c
  5470   001278  0E01               	movlw	(high __ramtop+-1)
  5471   00127A  64F7               	cpfsgt	tblptrh,c
  5472   00127C  D003               	bra	u1817
  5473   00127E  0008               	tblrd		*
  5474   001280  50F5               	movf	tablat,w,c
  5475   001282  D005               	bra	u1810
  5476   001284                     u1817:
  5477   001284  CFF6 FFE9          	movff	tblptrl,fsr0l
  5478   001288  CFF7 FFEA          	movff	tblptrh,fsr0h
  5479   00128C  50EF               	movf	indf0,w,c
  5480   00128E                     u1810:
  5481   00128E  0900               	iorlw	0
  5482   001290  A4D8               	btfss	status,2,c
  5483   001292  EF4D  F009         	goto	u1821
  5484   001296  EF4F  F009         	goto	u1820
  5485   00129A                     u1821:
  5486   00129A  EF52  F009         	goto	l2968
  5487   00129E                     u1820:
  5488   00129E                     
  5489                           ;TAD_TERMINAL.c: 49:     state_str = 0;
  5490   00129E  6A22               	clrf	_state_str^0,c
  5491   0012A0  EF34  F009         	goto	l2956
  5492   0012A4                     l2968:
  5493                           
  5494                           ;TAD_TERMINAL.c: 52:    if (motor_SendChar(*str_ptr)) str_ptr++;
  5495   0012A4  C00F  FFF6         	movff	_str_ptr,tblptrl
  5496   0012A8  C010  FFF7         	movff	_str_ptr+1,tblptrh
  5497   0012AC  6AF8               	clrf	tblptru,c
  5498   0012AE  0E01               	movlw	(high __ramtop+-1)
  5499   0012B0  64F7               	cpfsgt	tblptrh,c
  5500   0012B2  D003               	bra	u1837
  5501   0012B4  0008               	tblrd		*
  5502   0012B6  50F5               	movf	tablat,w,c
  5503   0012B8  D005               	bra	u1830
  5504   0012BA                     u1837:
  5505   0012BA  CFF6 FFE9          	movff	tblptrl,fsr0l
  5506   0012BE  CFF7 FFEA          	movff	tblptrh,fsr0h
  5507   0012C2  50EF               	movf	indf0,w,c
  5508   0012C4                     u1830:
  5509   0012C4  EC9D  F00D         	call	_motor_SendChar
  5510   0012C8  0900               	iorlw	0
  5511   0012CA  B4D8               	btfsc	status,2,c
  5512   0012CC  EF6A  F009         	goto	u1841
  5513   0012D0  EF6C  F009         	goto	u1840
  5514   0012D4                     u1841:
  5515   0012D4  EF6E  F009         	goto	l2972
  5516   0012D8                     u1840:
  5517   0012D8  4A0F               	infsnz	_str_ptr^0,f,c
  5518   0012DA  2A10               	incf	(_str_ptr+1)^0,f,c
  5519   0012DC                     l2972:
  5520                           
  5521                           ;TAD_TERMINAL.c: 53:    return 0;
  5522   0012DC  0E00               	movlw	0
  5523   0012DE  EF7C  F009         	goto	l604
  5524   0012E2                     l2978:
  5525   0012E2  5022               	movf	_state_str^0,w,c
  5526                           
  5527                           ; Switch size 1, requested type "simple"
  5528                           ; Number of cases is 2, Range of values is 0 to 1
  5529                           ; switch strategies available:
  5530                           ; Name         Instructions Cycles
  5531                           ; simple_byte            7     4 (average)
  5532                           ;	Chosen strategy is simple_byte
  5533   0012E4  0A00               	xorlw	0	; case 0
  5534   0012E6  B4D8               	btfsc	status,2,c
  5535   0012E8  EF34  F009         	goto	l2956
  5536   0012EC  0A01               	xorlw	1	; case 1
  5537   0012EE  B4D8               	btfsc	status,2,c
  5538   0012F0  EF37  F009         	goto	l2960
  5539   0012F4  EF6E  F009         	goto	l2972
  5540   0012F8                     l604:
  5541   0012F8  0012               	return		;funcret
  5542   0012FA                     __end_of_motor_SendString:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function _motor_SendChar *****************
  5546 ;; Defined at:
  5547 ;;		line 37 in file "TAD_TERMINAL.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  c               1    wreg     unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  c               1    4[COMRAM] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      unsigned char 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1
  5561 ;;      Params:         0       0       0
  5562 ;;      Locals:         1       0       0
  5563 ;;      Temps:          0       0       0
  5564 ;;      Totals:         1       0       0
  5565 ;;Total ram usage:        1 bytes
  5566 ;; Hardware stack levels used: 1
  5567 ;; Hardware stack levels required when called: 4
  5568 ;; This function calls:
  5569 ;;		_Terminal_TXAvailable
  5570 ;; This function is called by:
  5571 ;;		_motor_SendString
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text14
  5576   001B3A                     __ptext14:
  5577                           	callstack 0
  5578   001B3A                     _motor_SendChar:
  5579                           	callstack 21
  5580                           
  5581                           ;incstack = 0
  5582                           ;motor_SendChar@c stored from wreg
  5583   001B3A  6E56               	movwf	motor_SendChar@c^0,c
  5584   001B3C                     
  5585                           ;TAD_TERMINAL.c: 38:  if (!Terminal_TXAvailable()) return 0;
  5586   001B3C  EC25  F00E         	call	_Terminal_TXAvailable	;wreg free
  5587   001B40  5053               	movf	?_Terminal_TXAvailable^0,w,c
  5588   001B42  1054               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5589   001B44  A4D8               	btfss	status,2,c
  5590   001B46  EFA7  F00D         	goto	u1801
  5591   001B4A  EFA9  F00D         	goto	u1800
  5592   001B4E                     u1801:
  5593   001B4E  EFAC  F00D         	goto	l598
  5594   001B52                     u1800:
  5595   001B52  0E00               	movlw	0
  5596   001B54  EFAF  F00D         	goto	l599
  5597   001B58                     l598:
  5598                           
  5599                           ;TAD_TERMINAL.c: 39:  TXREG = c;
  5600   001B58  C056  FFAD         	movff	motor_SendChar@c,4013	;volatile
  5601   001B5C                     
  5602                           ;TAD_TERMINAL.c: 40:  return 1;
  5603   001B5C  0E01               	movlw	1
  5604   001B5E                     l599:
  5605   001B5E  0012               	return		;funcret
  5606   001B60                     __end_of_motor_SendChar:
  5607                           	callstack 0
  5608                           
  5609 ;; *************** function _Terminal_TXAvailable *****************
  5610 ;; Defined at:
  5611 ;;		line 20 in file "TAD_TERMINAL.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  2    1[COMRAM] int 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1
  5625 ;;      Params:         2       0       0
  5626 ;;      Locals:         0       0       0
  5627 ;;      Temps:          1       0       0
  5628 ;;      Totals:         3       0       0
  5629 ;;Total ram usage:        3 bytes
  5630 ;; Hardware stack levels used: 1
  5631 ;; Hardware stack levels required when called: 3
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_Terminal_SendChar
  5636 ;;		_motor_SendChar
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text15
  5641   001C4A                     __ptext15:
  5642                           	callstack 0
  5643   001C4A                     _Terminal_TXAvailable:
  5644                           	callstack 21
  5645   001C4A  B89E               	btfsc	158,4,c	;volatile
  5646   001C4C  EF2A  F00E         	goto	u1791
  5647   001C50  EF2E  F00E         	goto	u1790
  5648   001C54                     u1791:
  5649   001C54  6A55               	clrf	??_Terminal_TXAvailable^0,c
  5650   001C56  2A55               	incf	??_Terminal_TXAvailable^0,f,c
  5651   001C58  EF2F  F00E         	goto	u1798
  5652   001C5C                     u1790:
  5653   001C5C  6A55               	clrf	??_Terminal_TXAvailable^0,c
  5654   001C5E                     u1798:
  5655   001C5E  5055               	movf	??_Terminal_TXAvailable^0,w,c
  5656   001C60  6E53               	movwf	?_Terminal_TXAvailable^0,c
  5657   001C62  6A54               	clrf	(?_Terminal_TXAvailable+1)^0,c
  5658   001C64  0012               	return		;funcret
  5659   001C66                     __end_of_Terminal_TXAvailable:
  5660                           	callstack 0
  5661                           
  5662 ;; *************** function _getActualUID *****************
  5663 ;; Defined at:
  5664 ;;		line 33 in file "TAD_DATOS.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  UID             1    1[COMRAM] PTR unsigned char 
  5667 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               1    2[COMRAM] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1
  5679 ;;      Params:         1       0       0
  5680 ;;      Locals:         1       0       0
  5681 ;;      Temps:          0       0       0
  5682 ;;      Totals:         2       0       0
  5683 ;;Total ram usage:        2 bytes
  5684 ;; Hardware stack levels used: 1
  5685 ;; Hardware stack levels required when called: 3
  5686 ;; This function calls:
  5687 ;;		Nothing
  5688 ;; This function is called by:
  5689 ;;		_motor_RFID
  5690 ;;		_motorTerminal
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text16
  5695   001390                     __ptext16:
  5696                           	callstack 0
  5697   001390                     _getActualUID:
  5698                           	callstack 26
  5699   001390                     
  5700                           ;TAD_DATOS.c: 34:     if(!UID) return;
  5701   001390  5053               	movf	getActualUID@UID^0,w,c
  5702   001392  A4D8               	btfss	status,2,c
  5703   001394  EFCE  F009         	goto	u2301
  5704   001398  EFD0  F009         	goto	u2300
  5705   00139C                     u2301:
  5706   00139C  EFD2  F009         	goto	l3286
  5707   0013A0                     u2300:
  5708   0013A0  EF0C  F00A         	goto	l707
  5709   0013A4                     l3286:
  5710                           
  5711                           ;TAD_DATOS.c: 37:     if(!currentUser[0]) {
  5712   0013A4  5043               	movf	_currentUser^0,w,c
  5713   0013A6  A4D8               	btfss	status,2,c
  5714   0013A8  EFD8  F009         	goto	u2311
  5715   0013AC  EFDA  F009         	goto	u2310
  5716   0013B0                     u2311:
  5717   0013B0  EFF8  F009         	goto	l708
  5718   0013B4                     u2310:
  5719   0013B4                     
  5720                           ;TAD_DATOS.c: 38:         UID[0] = 0x00;
  5721   0013B4  5053               	movf	getActualUID@UID^0,w,c
  5722   0013B6  6ED9               	movwf	fsr2l,c
  5723   0013B8  6ADA               	clrf	fsr2h,c
  5724   0013BA  6ADF               	clrf	indf2,c
  5725   0013BC                     
  5726                           ;TAD_DATOS.c: 39:         UID[1] = 0x00;
  5727   0013BC  5053               	movf	getActualUID@UID^0,w,c
  5728   0013BE  6ED9               	movwf	fsr2l,c
  5729   0013C0  6ADA               	clrf	fsr2h,c
  5730   0013C2  0E01               	movlw	1
  5731   0013C4  26D9               	addwf	fsr2l,f,c
  5732   0013C6  6ADF               	clrf	indf2,c
  5733   0013C8                     
  5734                           ;TAD_DATOS.c: 40:         UID[2] = 0x00;
  5735   0013C8  5053               	movf	getActualUID@UID^0,w,c
  5736   0013CA  6ED9               	movwf	fsr2l,c
  5737   0013CC  6ADA               	clrf	fsr2h,c
  5738   0013CE  0E02               	movlw	2
  5739   0013D0  26D9               	addwf	fsr2l,f,c
  5740   0013D2  6ADF               	clrf	indf2,c
  5741   0013D4                     
  5742                           ;TAD_DATOS.c: 41:         UID[3] = 0x00;
  5743   0013D4  5053               	movf	getActualUID@UID^0,w,c
  5744   0013D6  6ED9               	movwf	fsr2l,c
  5745   0013D8  6ADA               	clrf	fsr2h,c
  5746   0013DA  0E03               	movlw	3
  5747   0013DC  26D9               	addwf	fsr2l,f,c
  5748   0013DE  6ADF               	clrf	indf2,c
  5749   0013E0                     
  5750                           ;TAD_DATOS.c: 42:         UID[4] = 0x00;
  5751   0013E0  5053               	movf	getActualUID@UID^0,w,c
  5752   0013E2  6ED9               	movwf	fsr2l,c
  5753   0013E4  6ADA               	clrf	fsr2h,c
  5754   0013E6  0E04               	movlw	4
  5755   0013E8  26D9               	addwf	fsr2l,f,c
  5756   0013EA  6ADF               	clrf	indf2,c
  5757   0013EC  EF0C  F00A         	goto	l707
  5758   0013F0                     l708:
  5759                           
  5760                           ;TAD_DATOS.c: 47:     for(char i = 0; i < 5; i++) {
  5761   0013F0  6A54               	clrf	getActualUID@i^0,c
  5762   0013F2                     l3304:
  5763                           
  5764                           ;TAD_DATOS.c: 48:         UID[i] = currentUser[i];
  5765   0013F2  5054               	movf	getActualUID@i^0,w,c
  5766   0013F4  0F43               	addlw	low _currentUser
  5767   0013F6  6ED9               	movwf	fsr2l,c
  5768   0013F8  6ADA               	clrf	fsr2h,c
  5769   0013FA  5053               	movf	getActualUID@UID^0,w,c
  5770   0013FC  2454               	addwf	getActualUID@i^0,w,c
  5771   0013FE  6EE1               	movwf	fsr1l,c
  5772   001400  6AE2               	clrf	fsr1h,c
  5773   001402  CFDF FFE7          	movff	indf2,indf1
  5774   001406                     
  5775                           ;TAD_DATOS.c: 49:     }
  5776   001406  2A54               	incf	getActualUID@i^0,f,c
  5777   001408  0E04               	movlw	4
  5778   00140A  6454               	cpfsgt	getActualUID@i^0,c
  5779   00140C  EF0A  F00A         	goto	u2321
  5780   001410  EF0C  F00A         	goto	u2320
  5781   001414                     u2321:
  5782   001414  EFF9  F009         	goto	l3304
  5783   001418                     u2320:
  5784   001418                     l707:
  5785   001418  0012               	return		;funcret
  5786   00141A                     __end_of_getActualUID:
  5787                           	callstack 0
  5788                           
  5789 ;; *************** function _Terminal_ReceiveChar *****************
  5790 ;; Defined at:
  5791 ;;		line 22 in file "TAD_TERMINAL.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      unsigned char 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1
  5805 ;;      Params:         0       0       0
  5806 ;;      Locals:         0       0       0
  5807 ;;      Temps:          0       0       0
  5808 ;;      Totals:         0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used: 1
  5811 ;; Hardware stack levels required when called: 3
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_motorTerminal
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text17
  5820   001D0E                     __ptext17:
  5821                           	callstack 0
  5822   001D0E                     _Terminal_ReceiveChar:
  5823                           	callstack 26
  5824   001D0E  50AE               	movf	174,w,c	;volatile
  5825   001D10  0012               	return		;funcret
  5826   001D12                     __end_of_Terminal_ReceiveChar:
  5827                           	callstack 0
  5828                           
  5829 ;; *************** function _Terminal_RXAvailable *****************
  5830 ;; Defined at:
  5831 ;;		line 21 in file "TAD_TERMINAL.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;		None
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;		None
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      unsigned char 
  5838 ;; Registers used:
  5839 ;;		wreg
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1
  5845 ;;      Params:         0       0       0
  5846 ;;      Locals:         0       0       0
  5847 ;;      Temps:          0       0       0
  5848 ;;      Totals:         0       0       0
  5849 ;;Total ram usage:        0 bytes
  5850 ;; Hardware stack levels used: 1
  5851 ;; Hardware stack levels required when called: 3
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_motorTerminal
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text18
  5860   001CAC                     __ptext18:
  5861                           	callstack 0
  5862   001CAC                     _Terminal_RXAvailable:
  5863                           	callstack 26
  5864   001CAC  BA9E               	btfsc	158,5,c	;volatile
  5865   001CAE  EF5B  F00E         	goto	u681
  5866   001CB2  EF5E  F00E         	goto	u680
  5867   001CB6                     u681:
  5868   001CB6  0E01               	movlw	1
  5869   001CB8  EF5F  F00E         	goto	u686
  5870   001CBC                     u680:
  5871   001CBC  0E00               	movlw	0
  5872   001CBE                     u686:
  5873   001CBE  0012               	return		;funcret
  5874   001CC0                     __end_of_Terminal_RXAvailable:
  5875                           	callstack 0
  5876                           
  5877 ;; *************** function _motorTeclado *****************
  5878 ;; Defined at:
  5879 ;;		line 72 in file "TAD_TECLADO.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1
  5893 ;;      Params:         0       0       0
  5894 ;;      Locals:         0       0       0
  5895 ;;      Temps:          0       0       0
  5896 ;;      Totals:         0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used: 1
  5899 ;; Hardware stack levels required when called: 5
  5900 ;; This function calls:
  5901 ;;		_GetTecla
  5902 ;;		_TI_GetTics
  5903 ;;		_TI_ResetTics
  5904 ;;		_hashtag_pressed3s
  5905 ;;		_setLed
  5906 ;;		_writeColumnas
  5907 ;; This function is called by:
  5908 ;;		_main
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text19
  5913   000AFA                     __ptext19:
  5914                           	callstack 0
  5915   000AFA                     _motorTeclado:
  5916                           	callstack 25
  5917   000AFA                     
  5918                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  5919   000AFA  5083               	movf	131,w,c	;volatile
  5920   000AFC  0B0F               	andlw	15
  5921   000AFE  6E3C               	movwf	_Filas^0,c
  5922                           
  5923                           ;TAD_TECLADO.c: 76:     switch(state) {
  5924   000B00  EF23  F006         	goto	l3662
  5925   000B04                     l3586:
  5926                           
  5927                           ;TAD_TECLADO.c: 78:             if (Filas) {
  5928   000B04  503C               	movf	_Filas^0,w,c
  5929   000B06  B4D8               	btfsc	status,2,c
  5930   000B08  EF88  F005         	goto	u2581
  5931   000B0C  EF8A  F005         	goto	u2580
  5932   000B10                     u2581:
  5933   000B10  EF91  F005         	goto	l153
  5934   000B14                     u2580:
  5935   000B14                     
  5936                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer);
  5937   000B14  5051               	movf	_timer^0,w,c
  5938   000B16  ECD4  F00D         	call	_TI_ResetTics
  5939   000B1A                     l3590:
  5940                           
  5941                           ;TAD_TECLADO.c: 80:                 state = 3;
  5942   000B1A  0E03               	movlw	3
  5943   000B1C  6E39               	movwf	_state^0,c
  5944                           
  5945                           ;TAD_TECLADO.c: 81:             } else {
  5946   000B1E  EF3E  F006         	goto	l174
  5947   000B22                     l153:
  5948                           
  5949                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  5950   000B22  6A3B               	clrf	_Columnas^0,c
  5951   000B24                     
  5952                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  5953   000B24  ECB0  F00D         	call	_writeColumnas	;wreg free
  5954   000B28                     
  5955                           ;TAD_TECLADO.c: 84:                 state = 1;
  5956   000B28  0E01               	movlw	1
  5957   000B2A  6E39               	movwf	_state^0,c
  5958   000B2C  EF3E  F006         	goto	l174
  5959   000B30                     l3596:
  5960                           
  5961                           ;TAD_TECLADO.c: 89:             if (Filas) {
  5962   000B30  503C               	movf	_Filas^0,w,c
  5963   000B32  B4D8               	btfsc	status,2,c
  5964   000B34  EF9E  F005         	goto	u2591
  5965   000B38  EFA0  F005         	goto	u2590
  5966   000B3C                     u2591:
  5967   000B3C  EFA5  F005         	goto	l3602
  5968   000B40                     u2590:
  5969   000B40                     
  5970                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer);
  5971   000B40  5051               	movf	_timer^0,w,c
  5972   000B42  ECD4  F00D         	call	_TI_ResetTics
  5973   000B46  EF8D  F005         	goto	l3590
  5974   000B4A                     l3602:
  5975                           
  5976                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  5977   000B4A  0E01               	movlw	1
  5978   000B4C  6E3B               	movwf	_Columnas^0,c
  5979   000B4E                     
  5980                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  5981   000B4E  ECB0  F00D         	call	_writeColumnas	;wreg free
  5982   000B52                     
  5983                           ;TAD_TECLADO.c: 95:                 state = 2;
  5984   000B52  0E02               	movlw	2
  5985   000B54  6E39               	movwf	_state^0,c
  5986   000B56  EF3E  F006         	goto	l174
  5987   000B5A                     l3608:
  5988                           
  5989                           ;TAD_TECLADO.c: 100:             if (Filas) {
  5990   000B5A  503C               	movf	_Filas^0,w,c
  5991   000B5C  B4D8               	btfsc	status,2,c
  5992   000B5E  EFB3  F005         	goto	u2601
  5993   000B62  EFB5  F005         	goto	u2600
  5994   000B66                     u2601:
  5995   000B66  EFBA  F005         	goto	l3614
  5996   000B6A                     u2600:
  5997   000B6A                     
  5998                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer);
  5999   000B6A  5051               	movf	_timer^0,w,c
  6000   000B6C  ECD4  F00D         	call	_TI_ResetTics
  6001   000B70  EF8D  F005         	goto	l3590
  6002   000B74                     l3614:
  6003                           
  6004                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6005   000B74  0E02               	movlw	2
  6006   000B76  6E3B               	movwf	_Columnas^0,c
  6007   000B78                     
  6008                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6009   000B78  ECB0  F00D         	call	_writeColumnas	;wreg free
  6010   000B7C                     l3618:
  6011                           
  6012                           ;TAD_TECLADO.c: 106:                 state = 0;
  6013   000B7C  6A39               	clrf	_state^0,c
  6014   000B7E  EF3E  F006         	goto	l174
  6015   000B82                     l3620:
  6016                           
  6017                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6018   000B82  EC57  F00B         	call	_GetTecla	;wreg free
  6019   000B86  6E3A               	movwf	_tecla^0,c
  6020   000B88                     
  6021                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6022   000B88  503C               	movf	_Filas^0,w,c
  6023   000B8A  A4D8               	btfss	status,2,c
  6024   000B8C  EFCA  F005         	goto	u2611
  6025   000B90  EFCC  F005         	goto	u2610
  6026   000B94                     u2611:
  6027   000B94  EFCE  F005         	goto	l3630
  6028   000B98                     u2610:
  6029   000B98  EFBA  F005         	goto	l3614
  6030   000B9C                     l3630:
  6031   000B9C  5051               	movf	_timer^0,w,c
  6032   000B9E  EC32  F00C         	call	_TI_GetTics
  6033   000BA2  5056               	movf	(?_TI_GetTics+3)^0,w,c
  6034   000BA4  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  6035   000BA6  1054               	iorwf	(?_TI_GetTics+1)^0,w,c
  6036   000BA8  E109               	bnz	u2620
  6037   000BAA  0E05               	movlw	5
  6038   000BAC  5C53               	subwf	?_TI_GetTics^0,w,c
  6039   000BAE  A0D8               	btfss	status,0,c
  6040   000BB0  EFDC  F005         	goto	u2621
  6041   000BB4  EFDE  F005         	goto	u2620
  6042   000BB8                     u2621:
  6043   000BB8  EF3E  F006         	goto	l174
  6044   000BBC                     u2620:
  6045   000BBC                     
  6046                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6047   000BBC  0E0B               	movlw	11
  6048   000BBE  183A               	xorwf	_tecla^0,w,c
  6049   000BC0  B4D8               	btfsc	status,2,c
  6050   000BC2  EFE5  F005         	goto	u2631
  6051   000BC6  EFE7  F005         	goto	u2630
  6052   000BCA                     u2631:
  6053   000BCA  EFEE  F005         	goto	l3638
  6054   000BCE                     u2630:
  6055   000BCE                     
  6056                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  6057   000BCE  503A               	movf	_tecla^0,w,c
  6058   000BD0  EC1D  F00D         	call	_setLed
  6059   000BD4                     l3636:
  6060                           
  6061                           ;TAD_TECLADO.c: 119:                     state = 5;
  6062   000BD4  0E05               	movlw	5
  6063   000BD6  6E39               	movwf	_state^0,c
  6064                           
  6065                           ;TAD_TECLADO.c: 120:                 } else {
  6066   000BD8  EF3E  F006         	goto	l174
  6067   000BDC                     l3638:
  6068                           
  6069                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer);
  6070   000BDC  5051               	movf	_timer^0,w,c
  6071   000BDE  ECD4  F00D         	call	_TI_ResetTics
  6072   000BE2                     
  6073                           ;TAD_TECLADO.c: 122:                     state = 4;
  6074   000BE2  0E04               	movlw	4
  6075   000BE4  6E39               	movwf	_state^0,c
  6076   000BE6  EF3E  F006         	goto	l174
  6077   000BEA                     l3642:
  6078                           
  6079                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  6080   000BEA  503C               	movf	_Filas^0,w,c
  6081   000BEC  A4D8               	btfss	status,2,c
  6082   000BEE  EFFB  F005         	goto	u2641
  6083   000BF2  EFFD  F005         	goto	u2640
  6084   000BF6                     u2641:
  6085   000BF6  EFFF  F005         	goto	l3646
  6086   000BFA                     u2640:
  6087   000BFA  EFBE  F005         	goto	l3618
  6088   000BFE                     l3646:
  6089   000BFE  5051               	movf	_timer^0,w,c
  6090   000C00  EC32  F00C         	call	_TI_GetTics
  6091   000C04  5056               	movf	(?_TI_GetTics+3)^0,w,c
  6092   000C06  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  6093   000C08  E10B               	bnz	u2650
  6094   000C0A  0EDD               	movlw	221
  6095   000C0C  5C53               	subwf	?_TI_GetTics^0,w,c
  6096   000C0E  0E05               	movlw	5
  6097   000C10  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  6098   000C12  A0D8               	btfss	status,0,c
  6099   000C14  EF0E  F006         	goto	u2651
  6100   000C18  EF10  F006         	goto	u2650
  6101   000C1C                     u2651:
  6102   000C1C  EF3E  F006         	goto	l174
  6103   000C20                     u2650:
  6104   000C20                     
  6105                           ;TAD_TECLADO.c: 131:                 hashtag_pressed3s();
  6106   000C20  EC84  F00E         	call	_hashtag_pressed3s	;wreg free
  6107   000C24  EFEA  F005         	goto	l3636
  6108   000C28                     l3652:
  6109                           
  6110                           ;TAD_TECLADO.c: 137:             if (!Filas) {
  6111   000C28  503C               	movf	_Filas^0,w,c
  6112   000C2A  A4D8               	btfss	status,2,c
  6113   000C2C  EF1A  F006         	goto	u2661
  6114   000C30  EF1C  F006         	goto	u2660
  6115   000C34                     u2661:
  6116   000C34  EF3E  F006         	goto	l174
  6117   000C38                     u2660:
  6118   000C38                     
  6119                           ;TAD_TECLADO.c: 138:                 state = 0;
  6120   000C38  6A39               	clrf	_state^0,c
  6121   000C3A                     
  6122                           ;TAD_TECLADO.c: 139:                 Columnas = 2;
  6123   000C3A  0E02               	movlw	2
  6124   000C3C  6E3B               	movwf	_Columnas^0,c
  6125   000C3E                     
  6126                           ;TAD_TECLADO.c: 140:                 writeColumnas();
  6127   000C3E  ECB0  F00D         	call	_writeColumnas	;wreg free
  6128   000C42  EF3E  F006         	goto	l174
  6129   000C46                     l3662:
  6130   000C46  5039               	movf	_state^0,w,c
  6131                           
  6132                           ; Switch size 1, requested type "simple"
  6133                           ; Number of cases is 6, Range of values is 0 to 5
  6134                           ; switch strategies available:
  6135                           ; Name         Instructions Cycles
  6136                           ; simple_byte           19    10 (average)
  6137                           ;	Chosen strategy is simple_byte
  6138   000C48  0A00               	xorlw	0	; case 0
  6139   000C4A  B4D8               	btfsc	status,2,c
  6140   000C4C  EF82  F005         	goto	l3586
  6141   000C50  0A01               	xorlw	1	; case 1
  6142   000C52  B4D8               	btfsc	status,2,c
  6143   000C54  EF98  F005         	goto	l3596
  6144   000C58  0A03               	xorlw	3	; case 2
  6145   000C5A  B4D8               	btfsc	status,2,c
  6146   000C5C  EFAD  F005         	goto	l3608
  6147   000C60  0A01               	xorlw	1	; case 3
  6148   000C62  B4D8               	btfsc	status,2,c
  6149   000C64  EFC1  F005         	goto	l3620
  6150   000C68  0A07               	xorlw	7	; case 4
  6151   000C6A  B4D8               	btfsc	status,2,c
  6152   000C6C  EFF5  F005         	goto	l3642
  6153   000C70  0A01               	xorlw	1	; case 5
  6154   000C72  B4D8               	btfsc	status,2,c
  6155   000C74  EF14  F006         	goto	l3652
  6156   000C78  EF3E  F006         	goto	l174
  6157   000C7C                     l174:
  6158   000C7C  0012               	return		;funcret
  6159   000C7E                     __end_of_motorTeclado:
  6160                           	callstack 0
  6161                           
  6162 ;; *************** function _writeColumnas *****************
  6163 ;; Defined at:
  6164 ;;		line 43 in file "TAD_TECLADO.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1
  6178 ;;      Params:         0       0       0
  6179 ;;      Locals:         0       0       0
  6180 ;;      Temps:          0       0       0
  6181 ;;      Totals:         0       0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used: 1
  6184 ;; Hardware stack levels required when called: 3
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_motorTeclado
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text20
  6193   001B60                     __ptext20:
  6194                           	callstack 0
  6195   001B60                     _writeColumnas:
  6196                           	callstack 26
  6197   001B60                     
  6198                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  6199   001B60  0E03               	movlw	3
  6200   001B62  603B               	cpfslt	_Columnas^0,c
  6201   001B64  EFB6  F00D         	goto	u451
  6202   001B68  EFB8  F00D         	goto	u450
  6203   001B6C                     u451:
  6204   001B6C  EFC0  F00D         	goto	l136
  6205   001B70                     u450:
  6206   001B70                     
  6207                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  6208   001B70  503B               	movf	_Columnas^0,w,c
  6209   001B72  0F73               	addlw	low _colValues
  6210   001B74  6ED9               	movwf	fsr2l,c
  6211   001B76  6ADA               	clrf	fsr2h,c
  6212   001B78  50DF               	movf	indf2,w,c
  6213   001B7A  6E8C               	movwf	140,c	;volatile
  6214                           
  6215                           ;TAD_TECLADO.c: 46:     } else {
  6216   001B7C  EFC1  F00D         	goto	l138
  6217   001B80                     l136:
  6218                           
  6219                           ;TAD_TECLADO.c: 47:         LATD = 0;
  6220   001B80  6A8C               	clrf	140,c	;volatile
  6221   001B82                     l138:
  6222   001B82  0012               	return		;funcret
  6223   001B84                     __end_of_writeColumnas:
  6224                           	callstack 0
  6225                           
  6226 ;; *************** function _setLed *****************
  6227 ;; Defined at:
  6228 ;;		line 175 in file "TAD_DATOS.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  tecla           1    wreg     unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  tecla           1    8[COMRAM] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  1    wreg      void 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1
  6242 ;;      Params:         0       0       0
  6243 ;;      Locals:         1       0       0
  6244 ;;      Temps:          0       0       0
  6245 ;;      Totals:         1       0       0
  6246 ;;Total ram usage:        1 bytes
  6247 ;; Hardware stack levels used: 1
  6248 ;; Hardware stack levels required when called: 4
  6249 ;; This function calls:
  6250 ;;		_checkUserUID
  6251 ;;		_setLEDIntensity
  6252 ;; This function is called by:
  6253 ;;		_motorTeclado
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text21
  6258   001A3A                     __ptext21:
  6259                           	callstack 0
  6260   001A3A                     _setLed:
  6261                           	callstack 25
  6262                           
  6263                           ;incstack = 0
  6264                           ;setLed@tecla stored from wreg
  6265   001A3A  6E5A               	movwf	setLed@tecla^0,c
  6266   001A3C                     
  6267                           ;TAD_DATOS.c: 176:     static char modeLED = 0;;TAD_DATOS.c: 177:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 178:     static char userIndex = 0;;TAD_DATOS.c: 180:     if(!modeL
      +                          ED) {
  6268   001A3C  5017               	movf	setLed@modeLED^0,w,c
  6269   001A3E  A4D8               	btfss	status,2,c
  6270   001A40  EF24  F00D         	goto	u2231
  6271   001A44  EF26  F00D         	goto	u2230
  6272   001A48                     u2231:
  6273   001A48  EF2C  F00D         	goto	l3176
  6274   001A4C                     u2230:
  6275   001A4C                     
  6276                           ;TAD_DATOS.c: 181:         ledIndex = tecla - 1;
  6277   001A4C  045A               	decf	setLed@tecla^0,w,c
  6278   001A4E  6E16               	movwf	setLed@ledIndex^0,c
  6279   001A50                     
  6280                           ;TAD_DATOS.c: 182:         modeLED = 1;
  6281   001A50  0E01               	movlw	1
  6282   001A52  6E17               	movwf	setLed@modeLED^0,c
  6283                           
  6284                           ;TAD_DATOS.c: 183:     } else {
  6285   001A54  EF39  F00D         	goto	l791
  6286   001A58                     l3176:
  6287                           
  6288                           ;TAD_DATOS.c: 184:         userIndex = checkUserUID();
  6289   001A58  ECE5  F008         	call	_checkUserUID	;wreg free
  6290   001A5C  6E15               	movwf	setLed@userIndex^0,c
  6291   001A5E                     
  6292                           ;TAD_DATOS.c: 185:         setLEDIntensity(userIndex, ledIndex, tecla);
  6293   001A5E  C016  F053         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  6294   001A62  C05A  F054         	movff	setLed@tecla,setLEDIntensity@intensity
  6295   001A66  5015               	movf	setLed@userIndex^0,w,c
  6296   001A68  EC58  F00C         	call	_setLEDIntensity
  6297   001A6C                     
  6298                           ;TAD_DATOS.c: 186:         new_configuration = 1;
  6299   001A6C  0E01               	movlw	1
  6300   001A6E  6E1D               	movwf	_new_configuration^0,c
  6301   001A70                     
  6302                           ;TAD_DATOS.c: 187:         modeLED = 0;
  6303   001A70  6A17               	clrf	setLed@modeLED^0,c
  6304   001A72                     l791:
  6305   001A72  0012               	return		;funcret
  6306   001A74                     __end_of_setLed:
  6307                           	callstack 0
  6308                           
  6309 ;; *************** function _setLEDIntensity *****************
  6310 ;; Defined at:
  6311 ;;		line 168 in file "TAD_DATOS.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  userIndex       1    wreg     unsigned char 
  6314 ;;  ledIndex        1    1[COMRAM] unsigned char 
  6315 ;;  intensity       1    2[COMRAM] unsigned char 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  userIndex       1    3[COMRAM] unsigned char 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1
  6327 ;;      Params:         2       0       0
  6328 ;;      Locals:         1       0       0
  6329 ;;      Temps:          0       0       0
  6330 ;;      Totals:         3       0       0
  6331 ;;Total ram usage:        3 bytes
  6332 ;; Hardware stack levels used: 1
  6333 ;; Hardware stack levels required when called: 3
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_setLed
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text22
  6342   0018B0                     __ptext22:
  6343                           	callstack 0
  6344   0018B0                     _setLEDIntensity:
  6345                           	callstack 25
  6346                           
  6347                           ;incstack = 0
  6348                           ;setLEDIntensity@userIndex stored from wreg
  6349   0018B0  6E55               	movwf	setLEDIntensity@userIndex^0,c
  6350   0018B2                     
  6351                           ;TAD_DATOS.c: 169:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  6352   0018B2  0E04               	movlw	4
  6353   0018B4  6055               	cpfslt	setLEDIntensity@userIndex^0,c
  6354   0018B6  EF5F  F00C         	goto	u2181
  6355   0018BA  EF61  F00C         	goto	u2180
  6356   0018BE                     u2181:
  6357   0018BE  EF7A  F00C         	goto	l780
  6358   0018C2                     u2180:
  6359   0018C2  0E06               	movlw	6
  6360   0018C4  6053               	cpfslt	setLEDIntensity@ledIndex^0,c
  6361   0018C6  EF67  F00C         	goto	u2191
  6362   0018CA  EF69  F00C         	goto	u2190
  6363   0018CE                     u2191:
  6364   0018CE  EF7A  F00C         	goto	l780
  6365   0018D2                     u2190:
  6366   0018D2  0E0B               	movlw	11
  6367   0018D4  6054               	cpfslt	setLEDIntensity@intensity^0,c
  6368   0018D6  EF6F  F00C         	goto	u2201
  6369   0018DA  EF71  F00C         	goto	u2200
  6370   0018DE                     u2201:
  6371   0018DE  EF7A  F00C         	goto	l780
  6372   0018E2                     u2200:
  6373   0018E2                     
  6374                           ;TAD_DATOS.c: 170:         configurations[userIndex][ledIndex] = intensity;
  6375   0018E2  5055               	movf	setLEDIntensity@userIndex^0,w,c
  6376   0018E4  0D06               	mullw	6
  6377   0018E6  50F3               	movf	243,w,c
  6378   0018E8  0FA8               	addlw	low _configurations
  6379   0018EA  2453               	addwf	setLEDIntensity@ledIndex^0,w,c
  6380   0018EC  6ED9               	movwf	fsr2l,c
  6381   0018EE  6ADA               	clrf	fsr2h,c
  6382   0018F0  C054  FFDF         	movff	setLEDIntensity@intensity,indf2
  6383   0018F4                     l780:
  6384   0018F4  0012               	return		;funcret
  6385   0018F6                     __end_of_setLEDIntensity:
  6386                           	callstack 0
  6387                           
  6388 ;; *************** function _checkUserUID *****************
  6389 ;; Defined at:
  6390 ;;		line 91 in file "TAD_DATOS.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  j               1    7[COMRAM] unsigned char 
  6395 ;;  match           1    5[COMRAM] unsigned char 
  6396 ;;  i               1    6[COMRAM] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1
  6406 ;;      Params:         0       0       0
  6407 ;;      Locals:         3       0       0
  6408 ;;      Temps:          4       0       0
  6409 ;;      Totals:         7       0       0
  6410 ;;Total ram usage:        7 bytes
  6411 ;; Hardware stack levels used: 1
  6412 ;; Hardware stack levels required when called: 3
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_setCurrentUser
  6417 ;;		_setLed
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text23
  6422   0011CA                     __ptext23:
  6423                           	callstack 0
  6424   0011CA                     _checkUserUID:
  6425                           	callstack 25
  6426   0011CA                     
  6427                           ;TAD_DATOS.c: 93:     if(!currentUser[0]) return 0;
  6428   0011CA  5043               	movf	_currentUser^0,w,c
  6429   0011CC  A4D8               	btfss	status,2,c
  6430   0011CE  EFEB  F008         	goto	u2131
  6431   0011D2  EFED  F008         	goto	u2130
  6432   0011D6                     u2131:
  6433   0011D6  EFF0  F008         	goto	l739
  6434   0011DA                     u2130:
  6435   0011DA                     l3110:
  6436   0011DA  0E00               	movlw	0
  6437   0011DC  EF31  F009         	goto	l740
  6438   0011E0                     l739:
  6439                           
  6440                           ;TAD_DATOS.c: 96:     for(char i = 0; i < 4; i++) {
  6441   0011E0  6A58               	clrf	checkUserUID@i^0,c
  6442   0011E2                     l3118:
  6443                           
  6444                           ;TAD_DATOS.c: 97:         char match = 1;
  6445   0011E2  0E01               	movlw	1
  6446   0011E4  6E57               	movwf	checkUserUID@match^0,c
  6447   0011E6                     
  6448                           ;TAD_DATOS.c: 98:         for(char j = 0; j < 5; j++) {
  6449   0011E6  6A59               	clrf	checkUserUID@j^0,c
  6450   0011E8                     l3126:
  6451                           
  6452                           ;TAD_DATOS.c: 99:             if(currentUser[j] != userUIDs[i][j]) {
  6453   0011E8  5058               	movf	checkUserUID@i^0,w,c
  6454   0011EA  0D10               	mullw	16
  6455   0011EC  0E00               	movlw	low _userUIDs
  6456   0011EE  24F3               	addwf	243,w,c
  6457   0011F0  6E53               	movwf	??_checkUserUID^0,c
  6458   0011F2  0E01               	movlw	high _userUIDs
  6459   0011F4  20F4               	addwfc	prodh,w,c
  6460   0011F6  6E54               	movwf	(??_checkUserUID+1)^0,c
  6461   0011F8  5059               	movf	checkUserUID@j^0,w,c
  6462   0011FA  2453               	addwf	??_checkUserUID^0,w,c
  6463   0011FC  6ED9               	movwf	fsr2l,c
  6464   0011FE  0E00               	movlw	0
  6465   001200  2054               	addwfc	(??_checkUserUID+1)^0,w,c
  6466   001202  6EDA               	movwf	fsr2h,c
  6467   001204  5059               	movf	checkUserUID@j^0,w,c
  6468   001206  0F43               	addlw	low _currentUser
  6469   001208  6EE1               	movwf	fsr1l,c
  6470   00120A  6AE2               	clrf	fsr1h,c
  6471   00120C  50DE               	movf	postinc2,w,c
  6472   00120E  18E6               	xorwf	postinc1,w,c
  6473   001210  B4D8               	btfsc	status,2,c
  6474   001212  EF0D  F009         	goto	u2141
  6475   001216  EF0F  F009         	goto	u2140
  6476   00121A                     u2141:
  6477   00121A  EF12  F009         	goto	l3130
  6478   00121E                     u2140:
  6479   00121E                     
  6480                           ;TAD_DATOS.c: 100:                 match = 0;
  6481   00121E  6A57               	clrf	checkUserUID@match^0,c
  6482                           
  6483                           ;TAD_DATOS.c: 101:                 break;
  6484   001220  EF1B  F009         	goto	l3134
  6485   001224                     l3130:
  6486                           
  6487                           ;TAD_DATOS.c: 103:         }
  6488   001224  2A59               	incf	checkUserUID@j^0,f,c
  6489   001226  0E04               	movlw	4
  6490   001228  6459               	cpfsgt	checkUserUID@j^0,c
  6491   00122A  EF19  F009         	goto	u2151
  6492   00122E  EF1B  F009         	goto	u2150
  6493   001232                     u2151:
  6494   001232  EFF4  F008         	goto	l3126
  6495   001236                     u2150:
  6496   001236                     l3134:
  6497                           
  6498                           ;TAD_DATOS.c: 104:         if(match) return i;
  6499   001236  5057               	movf	checkUserUID@match^0,w,c
  6500   001238  B4D8               	btfsc	status,2,c
  6501   00123A  EF21  F009         	goto	u2161
  6502   00123E  EF23  F009         	goto	u2160
  6503   001242                     u2161:
  6504   001242  EF26  F009         	goto	l3140
  6505   001246                     u2160:
  6506   001246  5058               	movf	checkUserUID@i^0,w,c
  6507   001248  EF31  F009         	goto	l740
  6508   00124C                     l3140:
  6509                           
  6510                           ;TAD_DATOS.c: 105:     }
  6511   00124C  2A58               	incf	checkUserUID@i^0,f,c
  6512   00124E  0E03               	movlw	3
  6513   001250  6458               	cpfsgt	checkUserUID@i^0,c
  6514   001252  EF2D  F009         	goto	u2171
  6515   001256  EF2F  F009         	goto	u2170
  6516   00125A                     u2171:
  6517   00125A  EFF1  F008         	goto	l3118
  6518   00125E                     u2170:
  6519   00125E  EFED  F008         	goto	l3110
  6520   001262                     l740:
  6521   001262  0012               	return		;funcret
  6522   001264                     __end_of_checkUserUID:
  6523                           	callstack 0
  6524                           
  6525 ;; *************** function _hashtag_pressed3s *****************
  6526 ;; Defined at:
  6527 ;;		line 65 in file "TAD_TERMINAL.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      void 
  6534 ;; Registers used:
  6535 ;;		wreg, status,2
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1
  6541 ;;      Params:         0       0       0
  6542 ;;      Locals:         0       0       0
  6543 ;;      Temps:          0       0       0
  6544 ;;      Totals:         0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used: 1
  6547 ;; Hardware stack levels required when called: 3
  6548 ;; This function calls:
  6549 ;;		Nothing
  6550 ;; This function is called by:
  6551 ;;		_motorTeclado
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text24
  6556   001D08                     __ptext24:
  6557                           	callstack 0
  6558   001D08                     _hashtag_pressed3s:
  6559                           	callstack 26
  6560   001D08  0E01               	movlw	1
  6561   001D0A  6E21               	movwf	_hashtag_pressed^0,c
  6562   001D0C  0012               	return		;funcret
  6563   001D0E                     __end_of_hashtag_pressed3s:
  6564                           	callstack 0
  6565                           
  6566 ;; *************** function _GetTecla *****************
  6567 ;; Defined at:
  6568 ;;		line 52 in file "TAD_TECLADO.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  fila            1    4[COMRAM] unsigned char 
  6573 ;;  columna         1    3[COMRAM] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      unsigned char 
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1
  6583 ;;      Params:         0       0       0
  6584 ;;      Locals:         2       0       0
  6585 ;;      Temps:          2       0       0
  6586 ;;      Totals:         4       0       0
  6587 ;;Total ram usage:        4 bytes
  6588 ;; Hardware stack levels used: 1
  6589 ;; Hardware stack levels required when called: 3
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_motorTeclado
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text25
  6598   0016AE                     __ptext25:
  6599                           	callstack 0
  6600   0016AE                     _GetTecla:
  6601                           	callstack 26
  6602   0016AE  6A55               	clrf	GetTecla@columna^0,c
  6603                           
  6604                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  6605   0016B0  EF6C  F00B         	goto	l1760
  6606   0016B4                     l142:
  6607   0016B4  6A56               	clrf	GetTecla@fila^0,c
  6608   0016B6  EF7F  F00B         	goto	l143
  6609   0016BA                     l1748:
  6610   0016BA  0E01               	movlw	1
  6611   0016BC  6E56               	movwf	GetTecla@fila^0,c
  6612   0016BE  EF7F  F00B         	goto	l143
  6613   0016C2                     l1750:
  6614   0016C2  0E02               	movlw	2
  6615   0016C4  6E56               	movwf	GetTecla@fila^0,c
  6616   0016C6  EF7F  F00B         	goto	l143
  6617   0016CA                     l1752:
  6618   0016CA  0E03               	movlw	3
  6619   0016CC  6E56               	movwf	GetTecla@fila^0,c
  6620   0016CE  EF7F  F00B         	goto	l143
  6621   0016D2                     l1754:
  6622   0016D2  0EFF               	movlw	255
  6623   0016D4  EF93  F00B         	goto	l148
  6624   0016D8                     l1760:
  6625   0016D8  503C               	movf	_Filas^0,w,c
  6626                           
  6627                           ; Switch size 1, requested type "simple"
  6628                           ; Number of cases is 4, Range of values is 1 to 8
  6629                           ; switch strategies available:
  6630                           ; Name         Instructions Cycles
  6631                           ; simple_byte           13     7 (average)
  6632                           ;	Chosen strategy is simple_byte
  6633   0016DA  0A01               	xorlw	1	; case 1
  6634   0016DC  B4D8               	btfsc	status,2,c
  6635   0016DE  EF5A  F00B         	goto	l142
  6636   0016E2  0A03               	xorlw	3	; case 2
  6637   0016E4  B4D8               	btfsc	status,2,c
  6638   0016E6  EF5D  F00B         	goto	l1748
  6639   0016EA  0A06               	xorlw	6	; case 4
  6640   0016EC  B4D8               	btfsc	status,2,c
  6641   0016EE  EF61  F00B         	goto	l1750
  6642   0016F2  0A0C               	xorlw	12	; case 8
  6643   0016F4  B4D8               	btfsc	status,2,c
  6644   0016F6  EF65  F00B         	goto	l1752
  6645   0016FA  EF69  F00B         	goto	l1754
  6646   0016FE                     l143:
  6647                           
  6648                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  6649   0016FE  C03B  F055         	movff	_Columnas,GetTecla@columna
  6650   001702                     
  6651                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  6652   001702  5056               	movf	GetTecla@fila^0,w,c
  6653   001704  0D03               	mullw	3
  6654   001706  0EB5               	movlw	low _keymap
  6655   001708  24F3               	addwf	243,w,c
  6656   00170A  6E53               	movwf	??_GetTecla^0,c
  6657   00170C  0E1E               	movlw	high _keymap
  6658   00170E  20F4               	addwfc	prodh,w,c
  6659   001710  6E54               	movwf	(??_GetTecla+1)^0,c
  6660   001712  5055               	movf	GetTecla@columna^0,w,c
  6661   001714  2653               	addwf	??_GetTecla^0,f,c
  6662   001716  0E00               	movlw	0
  6663   001718  2254               	addwfc	(??_GetTecla+1)^0,f,c
  6664   00171A  C053  FFF6         	movff	??_GetTecla,tblptrl
  6665   00171E  C054  FFF7         	movff	??_GetTecla+1,tblptrh
  6666   001722                     	if	0	;tblptru may be non-zero
  6667   001722                     	endif
  6668   001722                     	if	0	;tblptru may be non-zero
  6669   001722                     	endif
  6670   001722  0008               	tblrd		*
  6671   001724  50F5               	movf	tablat,w,c
  6672   001726                     l148:
  6673   001726  0012               	return		;funcret
  6674   001728                     __end_of_GetTecla:
  6675                           	callstack 0
  6676                           
  6677 ;; *************** function _initTeclado *****************
  6678 ;; Defined at:
  6679 ;;		line 30 in file "TAD_TECLADO.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;		None
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1
  6693 ;;      Params:         0       0       0
  6694 ;;      Locals:         0       0       0
  6695 ;;      Temps:          0       0       0
  6696 ;;      Totals:         0       0       0
  6697 ;;Total ram usage:        0 bytes
  6698 ;; Hardware stack levels used: 1
  6699 ;; Hardware stack levels required when called: 4
  6700 ;; This function calls:
  6701 ;;		_TI_NewTimer
  6702 ;; This function is called by:
  6703 ;;		_main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text26
  6708   001C66                     __ptext26:
  6709                           	callstack 0
  6710   001C66                     _initTeclado:
  6711                           	callstack 26
  6712   001C66                     
  6713                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  6714   001C66  0E0F               	movlw	15
  6715   001C68  6E95               	movwf	149,c	;volatile
  6716   001C6A                     
  6717                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  6718   001C6A  6A8C               	clrf	140,c	;volatile
  6719   001C6C                     
  6720                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  6721   001C6C  6A39               	clrf	_state^0,c
  6722   001C6E  6A3A               	clrf	_tecla^0,c
  6723   001C70  6A3B               	clrf	_Columnas^0,c
  6724   001C72  6A3C               	clrf	_Filas^0,c
  6725   001C74                     
  6726                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer);
  6727   001C74  0E51               	movlw	low _timer
  6728   001C76  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  6729   001C78  EC07  F00C         	call	_TI_NewTimer	;wreg free
  6730   001C7C  0012               	return		;funcret
  6731   001C7E                     __end_of_initTeclado:
  6732                           	callstack 0
  6733                           
  6734 ;; *************** function _initRFID *****************
  6735 ;; Defined at:
  6736 ;;		line 123 in file "TAD_RFID.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  regVal          1   12[COMRAM] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1
  6750 ;;      Params:         0       0       0
  6751 ;;      Locals:         1       0       0
  6752 ;;      Temps:          0       0       0
  6753 ;;      Totals:         1       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used: 1
  6756 ;; Hardware stack levels required when called: 6
  6757 ;; This function calls:
  6758 ;;		_delay_us
  6759 ;;		_motor_Read
  6760 ;;		_motor_Write
  6761 ;; This function is called by:
  6762 ;;		_main
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           	psect	text27
  6767   000DB0                     __ptext27:
  6768                           	callstack 0
  6769   000DB0                     _initRFID:
  6770                           	callstack 24
  6771   000DB0                     
  6772                           ;TAD_RFID.c: 125:     TRISCbits.TRISC0 = 1;
  6773   000DB0  8094               	bsf	148,0,c	;volatile
  6774                           
  6775                           ;TAD_RFID.c: 126:     TRISCbits.TRISC1 = 0;
  6776   000DB2  9294               	bcf	148,1,c	;volatile
  6777                           
  6778                           ;TAD_RFID.c: 127:     TRISCbits.TRISC2 = 0;
  6779   000DB4  9494               	bcf	148,2,c	;volatile
  6780                           
  6781                           ;TAD_RFID.c: 128:     TRISCbits.TRISC3 = 0;
  6782   000DB6  9694               	bcf	148,3,c	;volatile
  6783                           
  6784                           ;TAD_RFID.c: 129:     TRISCbits.TRISC4 = 0;
  6785   000DB8  9894               	bcf	148,4,c	;volatile
  6786                           
  6787                           ;TAD_RFID.c: 131:     state_read = state_write = 0;
  6788   000DBA  6A4F               	clrf	_state_write^0,c
  6789   000DBC  6A50               	clrf	_state_read^0,c
  6790                           
  6791                           ;TAD_RFID.c: 132:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6792   000DBE  848B               	bsf	139,2,c	;volatile
  6793   000DC0  868B               	bsf	139,3,c	;volatile
  6794                           
  6795                           ;TAD_RFID.c: 133:     LATCbits.LATC4 = 1;
  6796   000DC2  888B               	bsf	139,4,c	;volatile
  6797   000DC4                     
  6798                           ;TAD_RFID.c: 134:     delay_us(1);
  6799   000DC4  0E01               	movlw	1
  6800   000DC6  ECC2  F00D         	call	_delay_us
  6801   000DCA                     
  6802                           ;TAD_RFID.c: 135:     LATCbits.LATC4 = 0;
  6803   000DCA  988B               	bcf	139,4,c	;volatile
  6804                           
  6805                           ;TAD_RFID.c: 136:     delay_us(1);
  6806   000DCC  0E01               	movlw	1
  6807   000DCE  ECC2  F00D         	call	_delay_us
  6808   000DD2                     
  6809                           ;TAD_RFID.c: 137:     LATCbits.LATC4 = 1;
  6810   000DD2  888B               	bsf	139,4,c	;volatile
  6811                           
  6812                           ;TAD_RFID.c: 138:     delay_us(1);
  6813   000DD4  0E01               	movlw	1
  6814   000DD6  ECC2  F00D         	call	_delay_us
  6815   000DDA                     l3508:
  6816   000DDA  0E0F               	movlw	15
  6817   000DDC  6E5A               	movwf	motor_Write@value^0,c
  6818   000DDE  0E01               	movlw	1
  6819   000DE0  EC0D  F00A         	call	_motor_Write
  6820   000DE4  0900               	iorlw	0
  6821   000DE6  B4D8               	btfsc	status,2,c
  6822   000DE8  EFF8  F006         	goto	u2481
  6823   000DEC  EFFA  F006         	goto	u2480
  6824   000DF0                     u2481:
  6825   000DF0  EFED  F006         	goto	l3508
  6826   000DF4                     u2480:
  6827   000DF4                     
  6828                           ;TAD_RFID.c: 142:     delay_us(1);
  6829   000DF4  0E01               	movlw	1
  6830   000DF6  ECC2  F00D         	call	_delay_us
  6831   000DFA                     l3512:
  6832   000DFA  0E8D               	movlw	141
  6833   000DFC  6E5A               	movwf	motor_Write@value^0,c
  6834   000DFE  0E2A               	movlw	42
  6835   000E00  EC0D  F00A         	call	_motor_Write
  6836   000E04  0900               	iorlw	0
  6837   000E06  B4D8               	btfsc	status,2,c
  6838   000E08  EF08  F007         	goto	u2491
  6839   000E0C  EF0A  F007         	goto	u2490
  6840   000E10                     u2491:
  6841   000E10  EFFD  F006         	goto	l3512
  6842   000E14                     u2490:
  6843   000E14                     l3514:
  6844   000E14  0E3E               	movlw	62
  6845   000E16  6E5A               	movwf	motor_Write@value^0,c
  6846   000E18  0E2B               	movlw	43
  6847   000E1A  EC0D  F00A         	call	_motor_Write
  6848   000E1E  0900               	iorlw	0
  6849   000E20  B4D8               	btfsc	status,2,c
  6850   000E22  EF15  F007         	goto	u2501
  6851   000E26  EF17  F007         	goto	u2500
  6852   000E2A                     u2501:
  6853   000E2A  EF0A  F007         	goto	l3514
  6854   000E2E                     u2500:
  6855   000E2E                     l3516:
  6856   000E2E  0E1E               	movlw	30
  6857   000E30  6E5A               	movwf	motor_Write@value^0,c
  6858   000E32  0E2D               	movlw	45
  6859   000E34  EC0D  F00A         	call	_motor_Write
  6860   000E38  0900               	iorlw	0
  6861   000E3A  B4D8               	btfsc	status,2,c
  6862   000E3C  EF22  F007         	goto	u2511
  6863   000E40  EF24  F007         	goto	u2510
  6864   000E44                     u2511:
  6865   000E44  EF17  F007         	goto	l3516
  6866   000E48                     u2510:
  6867   000E48                     l3518:
  6868   000E48  0E00               	movlw	0
  6869   000E4A  6E5A               	movwf	motor_Write@value^0,c
  6870   000E4C  0E2C               	movlw	44
  6871   000E4E  EC0D  F00A         	call	_motor_Write
  6872   000E52  0900               	iorlw	0
  6873   000E54  B4D8               	btfsc	status,2,c
  6874   000E56  EF2F  F007         	goto	u2521
  6875   000E5A  EF31  F007         	goto	u2520
  6876   000E5E                     u2521:
  6877   000E5E  EF24  F007         	goto	l3518
  6878   000E62                     u2520:
  6879   000E62                     l3520:
  6880   000E62  0E40               	movlw	64
  6881   000E64  6E5A               	movwf	motor_Write@value^0,c
  6882   000E66  0E15               	movlw	21
  6883   000E68  EC0D  F00A         	call	_motor_Write
  6884   000E6C  0900               	iorlw	0
  6885   000E6E  B4D8               	btfsc	status,2,c
  6886   000E70  EF3C  F007         	goto	u2531
  6887   000E74  EF3E  F007         	goto	u2530
  6888   000E78                     u2531:
  6889   000E78  EF31  F007         	goto	l3520
  6890   000E7C                     u2530:
  6891   000E7C                     l3522:
  6892   000E7C  0E3D               	movlw	61
  6893   000E7E  6E5A               	movwf	motor_Write@value^0,c
  6894   000E80  0E11               	movlw	17
  6895   000E82  EC0D  F00A         	call	_motor_Write
  6896   000E86  0900               	iorlw	0
  6897   000E88  B4D8               	btfsc	status,2,c
  6898   000E8A  EF49  F007         	goto	u2541
  6899   000E8E  EF4B  F007         	goto	u2540
  6900   000E92                     u2541:
  6901   000E92  EF3E  F007         	goto	l3522
  6902   000E96                     u2540:
  6903   000E96                     l3524:
  6904                           
  6905                           ;TAD_RFID.c: 155:         regVal = motor_Read(0x14);
  6906   000E96  0E14               	movlw	20
  6907   000E98  EC68  F007         	call	_motor_Read
  6908   000E9C  6E5E               	movwf	initRFID@regVal^0,c
  6909   000E9E                     
  6910                           ;TAD_RFID.c: 156:     } while (regVal == 0xFE);
  6911   000E9E  0EFE               	movlw	254
  6912   000EA0  185E               	xorwf	initRFID@regVal^0,w,c
  6913   000EA2  B4D8               	btfsc	status,2,c
  6914   000EA4  EF56  F007         	goto	u2551
  6915   000EA8  EF58  F007         	goto	u2550
  6916   000EAC                     u2551:
  6917   000EAC  EF4B  F007         	goto	l3524
  6918   000EB0                     u2550:
  6919   000EB0                     
  6920                           ;TAD_RFID.c: 157:     regVal |= 0x03;
  6921   000EB0  0E03               	movlw	3
  6922   000EB2  125E               	iorwf	initRFID@regVal^0,f,c
  6923   000EB4                     l3530:
  6924   000EB4  C05E  F05A         	movff	initRFID@regVal,motor_Write@value
  6925   000EB8  0E14               	movlw	20
  6926   000EBA  EC0D  F00A         	call	_motor_Write
  6927   000EBE  0900               	iorlw	0
  6928   000EC0  B4D8               	btfsc	status,2,c
  6929   000EC2  EF65  F007         	goto	u2561
  6930   000EC6  EF67  F007         	goto	u2560
  6931   000ECA                     u2561:
  6932   000ECA  EF5A  F007         	goto	l3530
  6933   000ECE                     u2560:
  6934   000ECE  0012               	return		;funcret
  6935   000ED0                     __end_of_initRFID:
  6936                           	callstack 0
  6937                           
  6938 ;; *************** function _motor_Write *****************
  6939 ;; Defined at:
  6940 ;;		line 43 in file "TAD_RFID.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  addr            1    wreg     unsigned char 
  6943 ;;  value           1    8[COMRAM] unsigned char 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  addr            1    9[COMRAM] unsigned char 
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      unsigned char 
  6948 ;; Registers used:
  6949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1
  6955 ;;      Params:         1       0       0
  6956 ;;      Locals:         1       0       0
  6957 ;;      Temps:          0       0       0
  6958 ;;      Totals:         2       0       0
  6959 ;;Total ram usage:        2 bytes
  6960 ;; Hardware stack levels used: 1
  6961 ;; Hardware stack levels required when called: 5
  6962 ;; This function calls:
  6963 ;;		_processBit
  6964 ;; This function is called by:
  6965 ;;		_initRFID
  6966 ;;		_motor_RFID
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text28
  6971   00141A                     __ptext28:
  6972                           	callstack 0
  6973   00141A                     _motor_Write:
  6974                           	callstack 24
  6975                           
  6976                           ;incstack = 0
  6977                           ;motor_Write@addr stored from wreg
  6978   00141A  6E5B               	movwf	motor_Write@addr^0,c
  6979   00141C                     
  6980                           ;TAD_RFID.c: 44:     static char bit_count = 0;;TAD_RFID.c: 45:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 46:     static unsigned char ucValue;;TAD_RFID.c: 48:     switch (s
      +                          tate_write) {
  6981   00141C  EF40  F00A         	goto	l3208
  6982   001420                     l210:
  6983                           
  6984                           ;TAD_RFID.c: 50:             LATCbits.LATC2 = 0;
  6985   001420  948B               	bcf	139,2,c	;volatile
  6986                           
  6987                           ;TAD_RFID.c: 51:             LATCbits.LATC3 = 0;
  6988   001422  968B               	bcf	139,3,c	;volatile
  6989   001424                     
  6990                           ;TAD_RFID.c: 52:             ucAddr = ((addr << 1) & 0x7E);
  6991   001424  505B               	movf	motor_Write@addr^0,w,c
  6992   001426  245B               	addwf	motor_Write@addr^0,w,c
  6993   001428  0B7E               	andlw	126
  6994   00142A  6E4D               	movwf	motor_Write@ucAddr^0,c
  6995   00142C                     
  6996                           ;TAD_RFID.c: 53:             ucValue = value;
  6997   00142C  C05A  F04C         	movff	motor_Write@value,motor_Write@ucValue
  6998   001430                     
  6999                           ;TAD_RFID.c: 54:             bit_count = 0;
  7000   001430  6A4E               	clrf	motor_Write@bit_count^0,c
  7001   001432                     
  7002                           ;TAD_RFID.c: 55:             state_write = 1;
  7003   001432  0E01               	movlw	1
  7004   001434  6E4F               	movwf	_state_write^0,c
  7005                           
  7006                           ;TAD_RFID.c: 56:             break;
  7007   001436  EF4F  F00A         	goto	l3210
  7008   00143A                     l3194:
  7009                           
  7010                           ;TAD_RFID.c: 59:             processBit(&ucAddr, &bit_count, &state_write, 2);
  7011   00143A  0E4D               	movlw	low motor_Write@ucAddr
  7012   00143C  6E55               	movwf	processBit@val^0,c
  7013   00143E  0E4E               	movlw	low motor_Write@bit_count
  7014   001440  6E56               	movwf	processBit@bit_count^0,c
  7015   001442  0E4F               	movlw	low _state_write
  7016   001444  6E57               	movwf	processBit@state^0,c
  7017   001446  0E02               	movlw	2
  7018   001448  6E58               	movwf	processBit@next_state^0,c
  7019   00144A  ECD0  F00B         	call	_processBit	;wreg free
  7020                           
  7021                           ;TAD_RFID.c: 60:             break;
  7022   00144E  EF4F  F00A         	goto	l3210
  7023   001452                     l3196:
  7024                           
  7025                           ;TAD_RFID.c: 63:             processBit(&ucValue, &bit_count, &state_write, 0);
  7026   001452  0E4C               	movlw	low motor_Write@ucValue
  7027   001454  6E55               	movwf	processBit@val^0,c
  7028   001456  0E4E               	movlw	low motor_Write@bit_count
  7029   001458  6E56               	movwf	processBit@bit_count^0,c
  7030   00145A  0E4F               	movlw	low _state_write
  7031   00145C  6E57               	movwf	processBit@state^0,c
  7032   00145E  0E00               	movlw	0
  7033   001460  6E58               	movwf	processBit@next_state^0,c
  7034   001462  ECD0  F00B         	call	_processBit	;wreg free
  7035   001466                     
  7036                           ;TAD_RFID.c: 64:             if (state_write == 0) {
  7037   001466  504F               	movf	_state_write^0,w,c
  7038   001468  A4D8               	btfss	status,2,c
  7039   00146A  EF39  F00A         	goto	u2241
  7040   00146E  EF3B  F00A         	goto	u2240
  7041   001472                     u2241:
  7042   001472  EF4F  F00A         	goto	l3210
  7043   001476                     u2240:
  7044   001476                     
  7045                           ;TAD_RFID.c: 65:                 LATCbits.LATC3 = 1;
  7046   001476  868B               	bsf	139,3,c	;volatile
  7047                           
  7048                           ;TAD_RFID.c: 66:                 LATCbits.LATC2 = 1;
  7049   001478  848B               	bsf	139,2,c	;volatile
  7050   00147A                     
  7051                           ;TAD_RFID.c: 67:                 return 1;
  7052   00147A  0E01               	movlw	1
  7053   00147C  EF50  F00A         	goto	l215
  7054   001480                     l3208:
  7055   001480  504F               	movf	_state_write^0,w,c
  7056                           
  7057                           ; Switch size 1, requested type "simple"
  7058                           ; Number of cases is 3, Range of values is 0 to 2
  7059                           ; switch strategies available:
  7060                           ; Name         Instructions Cycles
  7061                           ; simple_byte           10     6 (average)
  7062                           ;	Chosen strategy is simple_byte
  7063   001482  0A00               	xorlw	0	; case 0
  7064   001484  B4D8               	btfsc	status,2,c
  7065   001486  EF10  F00A         	goto	l210
  7066   00148A  0A01               	xorlw	1	; case 1
  7067   00148C  B4D8               	btfsc	status,2,c
  7068   00148E  EF1D  F00A         	goto	l3194
  7069   001492  0A03               	xorlw	3	; case 2
  7070   001494  B4D8               	btfsc	status,2,c
  7071   001496  EF29  F00A         	goto	l3196
  7072   00149A  EF4F  F00A         	goto	l3210
  7073   00149E                     l3210:
  7074                           
  7075                           ;TAD_RFID.c: 71:     return 0;
  7076   00149E  0E00               	movlw	0
  7077   0014A0                     l215:
  7078   0014A0  0012               	return		;funcret
  7079   0014A2                     __end_of_motor_Write:
  7080                           	callstack 0
  7081                           
  7082 ;; *************** function _motor_Read *****************
  7083 ;; Defined at:
  7084 ;;		line 75 in file "TAD_RFID.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  addr            1    wreg     unsigned char 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  addr            1    9[COMRAM] unsigned char 
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      unsigned char 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1
  7098 ;;      Params:         0       0       0
  7099 ;;      Locals:         3       0       0
  7100 ;;      Temps:          1       0       0
  7101 ;;      Totals:         4       0       0
  7102 ;;Total ram usage:        4 bytes
  7103 ;; Hardware stack levels used: 1
  7104 ;; Hardware stack levels required when called: 5
  7105 ;; This function calls:
  7106 ;;		_delay_us
  7107 ;;		_processBit
  7108 ;; This function is called by:
  7109 ;;		_initRFID
  7110 ;;		_motor_RFID
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text29
  7115   000ED0                     __ptext29:
  7116                           	callstack 0
  7117   000ED0                     _motor_Read:
  7118                           	callstack 24
  7119                           
  7120                           ;incstack = 0
  7121                           ;motor_Read@addr stored from wreg
  7122   000ED0  6E5B               	movwf	motor_Read@addr^0,c
  7123   000ED2                     
  7124                           ;TAD_RFID.c: 76:     static char bit_count = 0;;TAD_RFID.c: 77:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 78:     static unsigned char ucResult;;TAD_RFID.c: 79:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 80:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 82:     if (++timeout_counter > MAX_TIMEOUT) {
  7125   000ED2  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  7126   000ED4  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  7127   000ED6  0EE9               	movlw	233
  7128   000ED8  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  7129   000EDA  0E03               	movlw	3
  7130   000EDC  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  7131   000EDE  A0D8               	btfss	status,0,c
  7132   000EE0  EF74  F007         	goto	u2251
  7133   000EE4  EF76  F007         	goto	u2250
  7134   000EE8                     u2251:
  7135   000EE8  EFE1  F007         	goto	l3276
  7136   000EEC                     u2250:
  7137   000EEC                     
  7138                           ;TAD_RFID.c: 83:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7139   000EEC  848B               	bsf	139,2,c	;volatile
  7140   000EEE  868B               	bsf	139,3,c	;volatile
  7141                           
  7142                           ;TAD_RFID.c: 84:         state_read = 0;
  7143   000EF0  6A50               	clrf	_state_read^0,c
  7144   000EF2                     
  7145                           ;TAD_RFID.c: 85:         timeout_counter = 0;
  7146   000EF2  0E00               	movlw	0
  7147   000EF4  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7148   000EF6  0E00               	movlw	0
  7149   000EF8  6E13               	movwf	motor_Read@timeout_counter^0,c
  7150   000EFA                     
  7151                           ;TAD_RFID.c: 86:         return 0xFF;
  7152   000EFA  0EFF               	movlw	255
  7153   000EFC  EFF0  F007         	goto	l229
  7154   000F00                     l3224:
  7155                           
  7156                           ;TAD_RFID.c: 91:             timeout_counter = 0;
  7157   000F00  0E00               	movlw	0
  7158   000F02  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7159   000F04  0E00               	movlw	0
  7160   000F06  6E13               	movwf	motor_Read@timeout_counter^0,c
  7161   000F08                     
  7162                           ;TAD_RFID.c: 92:             LATCbits.LATC2 = 0;
  7163   000F08  948B               	bcf	139,2,c	;volatile
  7164   000F0A                     
  7165                           ;TAD_RFID.c: 93:             LATCbits.LATC3 = 0;
  7166   000F0A  968B               	bcf	139,3,c	;volatile
  7167   000F0C                     
  7168                           ;TAD_RFID.c: 94:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  7169   000F0C  505B               	movf	motor_Read@addr^0,w,c
  7170   000F0E  245B               	addwf	motor_Read@addr^0,w,c
  7171   000F10  0B7E               	andlw	126
  7172   000F12  0980               	iorlw	128
  7173   000F14  6E4A               	movwf	motor_Read@ucAddr^0,c
  7174   000F16                     
  7175                           ;TAD_RFID.c: 95:             ucResult = 0;
  7176   000F16  6A38               	clrf	motor_Read@ucResult^0,c
  7177   000F18                     
  7178                           ;TAD_RFID.c: 96:             bit_count = 0;
  7179   000F18  6A4B               	clrf	motor_Read@bit_count^0,c
  7180   000F1A                     
  7181                           ;TAD_RFID.c: 97:             state_read = 1;
  7182   000F1A  0E01               	movlw	1
  7183   000F1C  6E50               	movwf	_state_read^0,c
  7184   000F1E                     l3238:
  7185                           
  7186                           ;TAD_RFID.c: 98:             return 0xFE;
  7187   000F1E  0EFE               	movlw	254
  7188   000F20  EFF0  F007         	goto	l229
  7189   000F24                     l3242:
  7190                           
  7191                           ;TAD_RFID.c: 101:             processBit(&ucAddr, &bit_count, &state_read, 2);
  7192   000F24  0E4A               	movlw	low motor_Read@ucAddr
  7193   000F26  6E55               	movwf	processBit@val^0,c
  7194   000F28  0E4B               	movlw	low motor_Read@bit_count
  7195   000F2A  6E56               	movwf	processBit@bit_count^0,c
  7196   000F2C  0E50               	movlw	low _state_read
  7197   000F2E  6E57               	movwf	processBit@state^0,c
  7198   000F30  0E02               	movlw	2
  7199   000F32  6E58               	movwf	processBit@next_state^0,c
  7200   000F34  ECD0  F00B         	call	_processBit	;wreg free
  7201   000F38  EF8F  F007         	goto	l3238
  7202   000F3C                     l233:
  7203                           
  7204                           ;TAD_RFID.c: 105:             LATCbits.LATC2 = 1;
  7205   000F3C  848B               	bsf	139,2,c	;volatile
  7206   000F3E                     
  7207                           ;TAD_RFID.c: 106:             delay_us(5);
  7208   000F3E  0E05               	movlw	5
  7209   000F40  ECC2  F00D         	call	_delay_us
  7210   000F44                     
  7211                           ;TAD_RFID.c: 107:             ucResult = (ucResult << 1) | PORTCbits.RC0;
  7212   000F44  B082               	btfsc	130,0,c	;volatile
  7213   000F46  EFA7  F007         	goto	u2261
  7214   000F4A  EFAB  F007         	goto	u2260
  7215   000F4E                     u2261:
  7216   000F4E  6A5A               	clrf	??_motor_Read^0,c
  7217   000F50  2A5A               	incf	??_motor_Read^0,f,c
  7218   000F52  EFAC  F007         	goto	u2268
  7219   000F56                     u2260:
  7220   000F56  6A5A               	clrf	??_motor_Read^0,c
  7221   000F58                     u2268:
  7222   000F58  5038               	movf	motor_Read@ucResult^0,w,c
  7223   000F5A  2438               	addwf	motor_Read@ucResult^0,w,c
  7224   000F5C  105A               	iorwf	??_motor_Read^0,w,c
  7225   000F5E  6E38               	movwf	motor_Read@ucResult^0,c
  7226   000F60                     
  7227                           ;TAD_RFID.c: 108:             LATCbits.LATC2 = 0;
  7228   000F60  948B               	bcf	139,2,c	;volatile
  7229   000F62                     
  7230                           ;TAD_RFID.c: 109:             delay_us(5);
  7231   000F62  0E05               	movlw	5
  7232   000F64  ECC2  F00D         	call	_delay_us
  7233                           
  7234                           ;TAD_RFID.c: 111:             if (++bit_count >= 8) {
  7235   000F68  2A4B               	incf	motor_Read@bit_count^0,f,c
  7236   000F6A  0E07               	movlw	7
  7237   000F6C  644B               	cpfsgt	motor_Read@bit_count^0,c
  7238   000F6E  EFBB  F007         	goto	u2271
  7239   000F72  EFBD  F007         	goto	u2270
  7240   000F76                     u2271:
  7241   000F76  EF8F  F007         	goto	l3238
  7242   000F7A                     u2270:
  7243   000F7A                     
  7244                           ;TAD_RFID.c: 112:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7245   000F7A  848B               	bsf	139,2,c	;volatile
  7246   000F7C  868B               	bsf	139,3,c	;volatile
  7247                           
  7248                           ;TAD_RFID.c: 113:                 state_read = 0;
  7249   000F7E  6A50               	clrf	_state_read^0,c
  7250   000F80                     
  7251                           ;TAD_RFID.c: 114:                 timeout_counter = 0;
  7252   000F80  0E00               	movlw	0
  7253   000F82  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7254   000F84  0E00               	movlw	0
  7255   000F86  6E13               	movwf	motor_Read@timeout_counter^0,c
  7256   000F88                     
  7257                           ;TAD_RFID.c: 115:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  7258   000F88  0EFE               	movlw	254
  7259   000F8A  1838               	xorwf	motor_Read@ucResult^0,w,c
  7260   000F8C  B4D8               	btfsc	status,2,c
  7261   000F8E  EFCB  F007         	goto	u2281
  7262   000F92  EFCD  F007         	goto	u2280
  7263   000F96                     u2281:
  7264   000F96  EFDA  F007         	goto	l3266
  7265   000F9A                     u2280:
  7266   000F9A  2838               	incf	motor_Read@ucResult^0,w,c
  7267   000F9C  B4D8               	btfsc	status,2,c
  7268   000F9E  EFD3  F007         	goto	u2291
  7269   000FA2  EFD5  F007         	goto	u2290
  7270   000FA6                     u2291:
  7271   000FA6  EFDA  F007         	goto	l3266
  7272   000FAA                     u2290:
  7273   000FAA  C038  F05C         	movff	motor_Read@ucResult,_motor_Read$522
  7274   000FAE  6A5D               	clrf	(_motor_Read$522+1)^0,c
  7275   000FB0  EFDE  F007         	goto	l238
  7276   000FB4                     l3266:
  7277   000FB4  0E00               	movlw	0
  7278   000FB6  6E5D               	movwf	(_motor_Read$522+1)^0,c
  7279   000FB8  0EFD               	movlw	253
  7280   000FBA  6E5C               	movwf	_motor_Read$522^0,c
  7281   000FBC                     l238:
  7282   000FBC  505C               	movf	_motor_Read$522^0,w,c
  7283   000FBE  EFF0  F007         	goto	l229
  7284   000FC2                     l3276:
  7285   000FC2  5050               	movf	_state_read^0,w,c
  7286                           
  7287                           ; Switch size 1, requested type "simple"
  7288                           ; Number of cases is 3, Range of values is 0 to 2
  7289                           ; switch strategies available:
  7290                           ; Name         Instructions Cycles
  7291                           ; simple_byte           10     6 (average)
  7292                           ;	Chosen strategy is simple_byte
  7293   000FC4  0A00               	xorlw	0	; case 0
  7294   000FC6  B4D8               	btfsc	status,2,c
  7295   000FC8  EF80  F007         	goto	l3224
  7296   000FCC  0A01               	xorlw	1	; case 1
  7297   000FCE  B4D8               	btfsc	status,2,c
  7298   000FD0  EF92  F007         	goto	l3242
  7299   000FD4  0A03               	xorlw	3	; case 2
  7300   000FD6  B4D8               	btfsc	status,2,c
  7301   000FD8  EF9E  F007         	goto	l233
  7302   000FDC  EF8F  F007         	goto	l3238
  7303   000FE0                     l229:
  7304   000FE0  0012               	return		;funcret
  7305   000FE2                     __end_of_motor_Read:
  7306                           	callstack 0
  7307                           
  7308 ;; *************** function _processBit *****************
  7309 ;; Defined at:
  7310 ;;		line 29 in file "TAD_RFID.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  val             1    3[COMRAM] PTR unsigned char 
  7313 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  7314 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  7315 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  7316 ;;  state           1    5[COMRAM] PTR unsigned char 
  7317 ;;		 -> state_read(1), state_write(1), 
  7318 ;;  next_state      1    6[COMRAM] unsigned char 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1
  7330 ;;      Params:         4       0       0
  7331 ;;      Locals:         0       0       0
  7332 ;;      Temps:          1       0       0
  7333 ;;      Totals:         5       0       0
  7334 ;;Total ram usage:        5 bytes
  7335 ;; Hardware stack levels used: 1
  7336 ;; Hardware stack levels required when called: 4
  7337 ;; This function calls:
  7338 ;;		_delay_us
  7339 ;; This function is called by:
  7340 ;;		_motor_Write
  7341 ;;		_motor_Read
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text30
  7346   0017A0                     __ptext30:
  7347                           	callstack 0
  7348   0017A0                     _processBit:
  7349                           	callstack 24
  7350   0017A0                     
  7351                           ;TAD_RFID.c: 30:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  7352   0017A0  5055               	movf	processBit@val^0,w,c
  7353   0017A2  6ED9               	movwf	fsr2l,c
  7354   0017A4  6ADA               	clrf	fsr2h,c
  7355   0017A6  BEDF               	btfsc	indf2,7,c
  7356   0017A8  EFD8  F00B         	goto	u1881
  7357   0017AC  EFDC  F00B         	goto	u1880
  7358   0017B0                     u1881:
  7359   0017B0  6A59               	clrf	??_processBit^0,c
  7360   0017B2  2A59               	incf	??_processBit^0,f,c
  7361   0017B4  EFDD  F00B         	goto	u1898
  7362   0017B8                     u1880:
  7363   0017B8  6A59               	clrf	??_processBit^0,c
  7364   0017BA                     u1898:
  7365   0017BA  4659               	rlncf	??_processBit^0,f,c
  7366   0017BC  508B               	movf	139,w,c	;volatile
  7367   0017BE  1859               	xorwf	??_processBit^0,w,c
  7368   0017C0  0BFD               	andlw	-3
  7369   0017C2  1859               	xorwf	??_processBit^0,w,c
  7370   0017C4  6E8B               	movwf	139,c	;volatile
  7371   0017C6                     
  7372                           ;TAD_RFID.c: 31:     LATCbits.LATC2 = 1;
  7373   0017C6  848B               	bsf	139,2,c	;volatile
  7374                           
  7375                           ;TAD_RFID.c: 32:     *val <<= 1;
  7376   0017C8  5055               	movf	processBit@val^0,w,c
  7377   0017CA  6ED9               	movwf	fsr2l,c
  7378   0017CC  6ADA               	clrf	fsr2h,c
  7379   0017CE  90D8               	bcf	status,0,c
  7380   0017D0  36DF               	rlcf	indf2,f,c
  7381   0017D2                     
  7382                           ;TAD_RFID.c: 33:     delay_us(5);
  7383   0017D2  0E05               	movlw	5
  7384   0017D4  ECC2  F00D         	call	_delay_us
  7385   0017D8                     
  7386                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 0;
  7387   0017D8  948B               	bcf	139,2,c	;volatile
  7388   0017DA                     
  7389                           ;TAD_RFID.c: 35:     delay_us(5);
  7390   0017DA  0E05               	movlw	5
  7391   0017DC  ECC2  F00D         	call	_delay_us
  7392                           
  7393                           ;TAD_RFID.c: 36:     if (++(*bit_count) == 8) {
  7394   0017E0  5056               	movf	processBit@bit_count^0,w,c
  7395   0017E2  6ED9               	movwf	fsr2l,c
  7396   0017E4  6ADA               	clrf	fsr2h,c
  7397   0017E6  2ADF               	incf	indf2,f,c
  7398   0017E8  0E08               	movlw	8
  7399   0017EA  18DE               	xorwf	postinc2,w,c
  7400   0017EC  A4D8               	btfss	status,2,c
  7401   0017EE  EFFB  F00B         	goto	u1901
  7402   0017F2  EFFD  F00B         	goto	u1900
  7403   0017F6                     u1901:
  7404   0017F6  EF06  F00C         	goto	l200
  7405   0017FA                     u1900:
  7406   0017FA                     
  7407                           ;TAD_RFID.c: 37:         *bit_count = 0;
  7408   0017FA  5056               	movf	processBit@bit_count^0,w,c
  7409   0017FC  6ED9               	movwf	fsr2l,c
  7410   0017FE  6ADA               	clrf	fsr2h,c
  7411   001800  6ADF               	clrf	indf2,c
  7412                           
  7413                           ;TAD_RFID.c: 38:         *state = next_state;
  7414   001802  5057               	movf	processBit@state^0,w,c
  7415   001804  6ED9               	movwf	fsr2l,c
  7416   001806  6ADA               	clrf	fsr2h,c
  7417   001808  C058  FFDF         	movff	processBit@next_state,indf2
  7418   00180C                     l200:
  7419   00180C  0012               	return		;funcret
  7420   00180E                     __end_of_processBit:
  7421                           	callstack 0
  7422                           
  7423 ;; *************** function _delay_us *****************
  7424 ;; Defined at:
  7425 ;;		line 23 in file "TAD_RFID.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  howMany         1    wreg     unsigned char 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  howMany         1    1[COMRAM] unsigned char 
  7430 ;;  x               1    2[COMRAM] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, status,2, status,0, prodl, prodh
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1
  7440 ;;      Params:         0       0       0
  7441 ;;      Locals:         2       0       0
  7442 ;;      Temps:          0       0       0
  7443 ;;      Totals:         2       0       0
  7444 ;;Total ram usage:        2 bytes
  7445 ;; Hardware stack levels used: 1
  7446 ;; Hardware stack levels required when called: 3
  7447 ;; This function calls:
  7448 ;;		Nothing
  7449 ;; This function is called by:
  7450 ;;		_processBit
  7451 ;;		_motor_Read
  7452 ;;		_initRFID
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text31
  7457   001B84                     __ptext31:
  7458                           	callstack 0
  7459   001B84                     _delay_us:
  7460                           	callstack 24
  7461                           
  7462                           ;incstack = 0
  7463                           ;delay_us@howMany stored from wreg
  7464   001B84  6E53               	movwf	delay_us@howMany^0,c
  7465   001B86                     
  7466                           ;TAD_RFID.c: 24:     char x = howMany * 8;
  7467   001B86  5053               	movf	delay_us@howMany^0,w,c
  7468   001B88  0D08               	mullw	8
  7469   001B8A  CFF3 F054          	movff	prodl,delay_us@x
  7470                           
  7471                           ;TAD_RFID.c: 25:     while(x--) __nop();
  7472   001B8E  EFCA  F00D         	goto	l2998
  7473   001B92                     l194:
  7474   001B92  0000               	nop	
  7475   001B94                     l2998:
  7476   001B94  0654               	decf	delay_us@x^0,f,c
  7477   001B96  2854               	incf	delay_us@x^0,w,c
  7478   001B98  A4D8               	btfss	status,2,c
  7479   001B9A  EFD1  F00D         	goto	u1851
  7480   001B9E  EFD3  F00D         	goto	u1850
  7481   001BA2                     u1851:
  7482   001BA2  EFC9  F00D         	goto	l194
  7483   001BA6                     u1850:
  7484   001BA6  0012               	return		;funcret
  7485   001BA8                     __end_of_delay_us:
  7486                           	callstack 0
  7487                           
  7488 ;; *************** function _initPorts *****************
  7489 ;; Defined at:
  7490 ;;		line 63 in file "main.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;		None
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1
  7504 ;;      Params:         0       0       0
  7505 ;;      Locals:         0       0       0
  7506 ;;      Temps:          0       0       0
  7507 ;;      Totals:         0       0       0
  7508 ;;Total ram usage:        0 bytes
  7509 ;; Hardware stack levels used: 1
  7510 ;; Hardware stack levels required when called: 3
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_main
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text32
  7519   001D00                     __ptext32:
  7520                           	callstack 0
  7521   001D00                     _initPorts:
  7522                           	callstack 27
  7523   001D00  0E0F               	movlw	15
  7524   001D02  6EC1               	movwf	193,c	;volatile
  7525   001D04  9496               	bcf	150,2,c	;volatile
  7526   001D06  0012               	return		;funcret
  7527   001D08                     __end_of_initPorts:
  7528                           	callstack 0
  7529                           
  7530 ;; *************** function _initLeds *****************
  7531 ;; Defined at:
  7532 ;;		line 9 in file "TAD_LEDS.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;		None
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;		None
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1
  7546 ;;      Params:         0       0       0
  7547 ;;      Locals:         0       0       0
  7548 ;;      Temps:          0       0       0
  7549 ;;      Totals:         0       0       0
  7550 ;;Total ram usage:        0 bytes
  7551 ;; Hardware stack levels used: 1
  7552 ;; Hardware stack levels required when called: 4
  7553 ;; This function calls:
  7554 ;;		_TI_NewTimer
  7555 ;; This function is called by:
  7556 ;;		_main
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text33
  7561   001CE4                     __ptext33:
  7562                           	callstack 0
  7563   001CE4                     _initLeds:
  7564                           	callstack 26
  7565   001CE4                     
  7566                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  7567   001CE4  6A92               	clrf	146,c	;volatile
  7568                           
  7569                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  7570   001CE6  6A96               	clrf	150,c	;volatile
  7571   001CE8                     
  7572                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  7573   001CE8  0E48               	movlw	low _timer@TAD_LEDS$F931
  7574   001CEA  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7575   001CEC  EC07  F00C         	call	_TI_NewTimer	;wreg free
  7576   001CF0  0012               	return		;funcret
  7577   001CF2                     __end_of_initLeds:
  7578                           	callstack 0
  7579                           
  7580 ;; *************** function _initData *****************
  7581 ;; Defined at:
  7582 ;;		line 29 in file "TAD_DATOS.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  i               1    1[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1
  7596 ;;      Params:         0       0       0
  7597 ;;      Locals:         1       0       0
  7598 ;;      Temps:          0       0       0
  7599 ;;      Totals:         1       0       0
  7600 ;;Total ram usage:        1 bytes
  7601 ;; Hardware stack levels used: 1
  7602 ;; Hardware stack levels required when called: 3
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_main
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text34
  7611   001BEE                     __ptext34:
  7612                           	callstack 0
  7613   001BEE                     _initData:
  7614                           	callstack 27
  7615   001BEE                     
  7616                           ;TAD_DATOS.c: 30:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  7617   001BEE  6A53               	clrf	initData@i^0,c
  7618   001BF0                     l2220:
  7619   001BF0  5053               	movf	initData@i^0,w,c
  7620   001BF2  0F43               	addlw	low _currentUser
  7621   001BF4  6ED9               	movwf	fsr2l,c
  7622   001BF6  6ADA               	clrf	fsr2h,c
  7623   001BF8  6ADF               	clrf	indf2,c
  7624   001BFA  2A53               	incf	initData@i^0,f,c
  7625   001BFC  0E04               	movlw	4
  7626   001BFE  6453               	cpfsgt	initData@i^0,c
  7627   001C00  EF04  F00E         	goto	u901
  7628   001C04  EF06  F00E         	goto	u900
  7629   001C08                     u901:
  7630   001C08  EFF8  F00D         	goto	l2220
  7631   001C0C                     u900:
  7632   001C0C  0012               	return		;funcret
  7633   001C0E                     __end_of_initData:
  7634                           	callstack 0
  7635                           
  7636 ;; *************** function _Terminal_Init *****************
  7637 ;; Defined at:
  7638 ;;		line 11 in file "TAD_TERMINAL.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  1    wreg      void 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMRAM   BANK0   BANK1
  7652 ;;      Params:         0       0       0
  7653 ;;      Locals:         0       0       0
  7654 ;;      Temps:          0       0       0
  7655 ;;      Totals:         0       0       0
  7656 ;;Total ram usage:        0 bytes
  7657 ;; Hardware stack levels used: 1
  7658 ;; Hardware stack levels required when called: 3
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		_main
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text35
  7667   001CD4                     __ptext35:
  7668                           	callstack 0
  7669   001CD4                     _Terminal_Init:
  7670                           	callstack 27
  7671   001CD4                     
  7672                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  7673   001CD4  0E24               	movlw	36
  7674   001CD6  6EAC               	movwf	172,c	;volatile
  7675                           
  7676                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  7677   001CD8  0E90               	movlw	144
  7678   001CDA  6EAB               	movwf	171,c	;volatile
  7679   001CDC                     
  7680                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  7681   001CDC  68AF               	setf	175,c	;volatile
  7682   001CDE                     
  7683                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  7684   001CDE  6AB8               	clrf	184,c	;volatile
  7685   001CE0                     
  7686                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  7687   001CE0  6A21               	clrf	_hashtag_pressed^0,c
  7688   001CE2  0012               	return		;funcret
  7689   001CE4                     __end_of_Terminal_Init:
  7690                           	callstack 0
  7691                           
  7692 ;; *************** function _TI_Init *****************
  7693 ;; Defined at:
  7694 ;;		line 32 in file "TAD_TIMER.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;		None
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;  counter         1    1[COMRAM] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1
  7708 ;;      Params:         0       0       0
  7709 ;;      Locals:         1       0       0
  7710 ;;      Temps:          0       0       0
  7711 ;;      Totals:         1       0       0
  7712 ;;Total ram usage:        1 bytes
  7713 ;; Hardware stack levels used: 1
  7714 ;; Hardware stack levels required when called: 3
  7715 ;; This function calls:
  7716 ;;		Nothing
  7717 ;; This function is called by:
  7718 ;;		_main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text36
  7723   001AAA                     __ptext36:
  7724                           	callstack 0
  7725   001AAA                     _TI_Init:
  7726                           	callstack 27
  7727   001AAA                     
  7728                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7729   001AAA  6A53               	clrf	TI_Init@counter^0,c
  7730   001AAC                     l3480:
  7731                           
  7732                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7733   001AAC  5053               	movf	TI_Init@counter^0,w,c
  7734   001AAE  0D05               	mullw	5
  7735   001AB0  50F3               	movf	243,w,c
  7736   001AB2  0F84               	addlw	low (_Timers+4)
  7737   001AB4  6ED9               	movwf	fsr2l,c
  7738   001AB6  6ADA               	clrf	fsr2h,c
  7739   001AB8  6ADF               	clrf	indf2,c
  7740   001ABA                     
  7741                           ;TAD_TIMER.c: 35:  }
  7742   001ABA  2A53               	incf	TI_Init@counter^0,f,c
  7743   001ABC  0E03               	movlw	3
  7744   001ABE  6453               	cpfsgt	TI_Init@counter^0,c
  7745   001AC0  EF64  F00D         	goto	u2471
  7746   001AC4  EF66  F00D         	goto	u2470
  7747   001AC8                     u2471:
  7748   001AC8  EF56  F00D         	goto	l3480
  7749   001ACC                     u2470:
  7750   001ACC                     
  7751                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7752   001ACC  0E82               	movlw	130
  7753   001ACE  6ED5               	movwf	213,c	;volatile
  7754                           
  7755                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7756   001AD0  0EF6               	movlw	246
  7757   001AD2  6ED7               	movwf	215,c	;volatile
  7758   001AD4  0E3C               	movlw	60
  7759   001AD6  6ED6               	movwf	214,c	;volatile
  7760   001AD8                     
  7761                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7762   001AD8  94F2               	bcf	242,2,c	;volatile
  7763   001ADA                     
  7764                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7765   001ADA  8AF2               	bsf	242,5,c	;volatile
  7766   001ADC  0012               	return		;funcret
  7767   001ADE                     __end_of_TI_Init:
  7768                           	callstack 0
  7769                           
  7770 ;; *************** function _LcInit *****************
  7771 ;; Defined at:
  7772 ;;		line 68 in file "TAD_DISPLAY.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;  rows            1    wreg     unsigned char 
  7775 ;;  columns         1   22[COMRAM] unsigned char 
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  rows            1   23[COMRAM] unsigned char 
  7778 ;;  i               2   24[COMRAM] int 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1
  7788 ;;      Params:         1       0       0
  7789 ;;      Locals:         3       0       0
  7790 ;;      Temps:          0       0       0
  7791 ;;      Totals:         4       0       0
  7792 ;;Total ram usage:        4 bytes
  7793 ;; Hardware stack levels used: 1
  7794 ;; Hardware stack levels required when called: 6
  7795 ;; This function calls:
  7796 ;;		_CantaIR
  7797 ;;		_EscriuPrimeraOrdre
  7798 ;;		_Espera
  7799 ;;		_TI_NewTimer
  7800 ;;		_WaitForBusy
  7801 ;; This function is called by:
  7802 ;;		_main
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text37
  7807   000FE2                     __ptext37:
  7808                           	callstack 0
  7809   000FE2                     _LcInit:
  7810                           	callstack 24
  7811                           
  7812                           ;incstack = 0
  7813                           ;LcInit@rows stored from wreg
  7814   000FE2  6E69               	movwf	LcInit@rows^0,c
  7815   000FE4                     
  7816                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7817   000FE4  0E49               	movlw	low _Timer
  7818   000FE6  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7819   000FE8  EC07  F00C         	call	_TI_NewTimer	;wreg free
  7820   000FEC                     
  7821                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7822   000FEC  C069  F026         	movff	LcInit@rows,_Rows
  7823   000FF0  C068  F025         	movff	LcInit@columns,_Columns
  7824   000FF4                     
  7825                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7826   000FF4  6A23               	clrf	_ColumnAct^0,c
  7827   000FF6  6A24               	clrf	_RowAct^0,c
  7828   000FF8                     
  7829                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7830   000FF8  9293               	bcf	147,1,c	;volatile
  7831   000FFA  9493               	bcf	147,2,c	;volatile
  7832   000FFC  9693               	bcf	147,3,c	;volatile
  7833   000FFE                     
  7834                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7835   000FFE  0E00               	movlw	0
  7836   001000  6E6B               	movwf	(LcInit@i+1)^0,c
  7837   001002  0E00               	movlw	0
  7838   001004  6E6A               	movwf	LcInit@i^0,c
  7839   001006                     l3552:
  7840                           
  7841                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7842   001006  C049  F060         	movff	_Timer,Espera@Timer
  7843   00100A  6A61               	clrf	(Espera@Timer+1)^0,c
  7844   00100C  0E00               	movlw	0
  7845   00100E  6E63               	movwf	(Espera@ms+1)^0,c
  7846   001010  0E64               	movlw	100
  7847   001012  6E62               	movwf	Espera@ms^0,c
  7848   001014  ECFE  F00C         	call	_Espera	;wreg free
  7849   001018                     
  7850                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7851   001018  0E03               	movlw	3
  7852   00101A  EC7D  F009         	call	_EscriuPrimeraOrdre
  7853   00101E                     
  7854                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7855   00101E  C049  F060         	movff	_Timer,Espera@Timer
  7856   001022  6A61               	clrf	(Espera@Timer+1)^0,c
  7857   001024  0E00               	movlw	0
  7858   001026  6E63               	movwf	(Espera@ms+1)^0,c
  7859   001028  0E04               	movlw	4
  7860   00102A  6E62               	movwf	Espera@ms^0,c
  7861   00102C  ECFE  F00C         	call	_Espera	;wreg free
  7862                           
  7863                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7864   001030  0E03               	movlw	3
  7865   001032  EC7D  F009         	call	_EscriuPrimeraOrdre
  7866   001036                     
  7867                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7868   001036  C049  F060         	movff	_Timer,Espera@Timer
  7869   00103A  6A61               	clrf	(Espera@Timer+1)^0,c
  7870   00103C  0E00               	movlw	0
  7871   00103E  6E63               	movwf	(Espera@ms+1)^0,c
  7872   001040  0E01               	movlw	1
  7873   001042  6E62               	movwf	Espera@ms^0,c
  7874   001044  ECFE  F00C         	call	_Espera	;wreg free
  7875   001048                     
  7876                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7877   001048  0E03               	movlw	3
  7878   00104A  EC7D  F009         	call	_EscriuPrimeraOrdre
  7879                           
  7880                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7881   00104E  C049  F060         	movff	_Timer,Espera@Timer
  7882   001052  6A61               	clrf	(Espera@Timer+1)^0,c
  7883   001054  0E00               	movlw	0
  7884   001056  6E63               	movwf	(Espera@ms+1)^0,c
  7885   001058  0E01               	movlw	1
  7886   00105A  6E62               	movwf	Espera@ms^0,c
  7887   00105C  ECFE  F00C         	call	_Espera	;wreg free
  7888   001060                     
  7889                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7890   001060  0E02               	movlw	2
  7891   001062  EC7D  F009         	call	_EscriuPrimeraOrdre
  7892   001066                     
  7893                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7894   001066  C049  F060         	movff	_Timer,Espera@Timer
  7895   00106A  6A61               	clrf	(Espera@Timer+1)^0,c
  7896   00106C  0E00               	movlw	0
  7897   00106E  6E63               	movwf	(Espera@ms+1)^0,c
  7898   001070  0E01               	movlw	1
  7899   001072  6E62               	movwf	Espera@ms^0,c
  7900   001074  ECFE  F00C         	call	_Espera	;wreg free
  7901                           
  7902                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7903   001078  0E28               	movlw	40
  7904   00107A  EC6F  F00D         	call	_CantaIR
  7905   00107E                     
  7906                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7907   00107E  EC60  F00E         	call	_WaitForBusy	;wreg free
  7908   001082  0E08               	movlw	8
  7909   001084  EC6F  F00D         	call	_CantaIR
  7910                           
  7911                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7912   001088  EC60  F00E         	call	_WaitForBusy	;wreg free
  7913   00108C  0E01               	movlw	1
  7914   00108E  EC6F  F00D         	call	_CantaIR
  7915   001092                     
  7916                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7917   001092  C049  F060         	movff	_Timer,Espera@Timer
  7918   001096  6A61               	clrf	(Espera@Timer+1)^0,c
  7919   001098  0E00               	movlw	0
  7920   00109A  6E63               	movwf	(Espera@ms+1)^0,c
  7921   00109C  0E02               	movlw	2
  7922   00109E  6E62               	movwf	Espera@ms^0,c
  7923   0010A0  ECFE  F00C         	call	_Espera	;wreg free
  7924   0010A4                     
  7925                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7926   0010A4  EC60  F00E         	call	_WaitForBusy	;wreg free
  7927   0010A8  0E06               	movlw	6
  7928   0010AA  EC6F  F00D         	call	_CantaIR
  7929                           
  7930                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7931   0010AE  EC60  F00E         	call	_WaitForBusy	;wreg free
  7932   0010B2  0E0F               	movlw	15
  7933   0010B4  EC6F  F00D         	call	_CantaIR
  7934   0010B8                     
  7935                           ;TAD_DISPLAY.c: 101:  }
  7936   0010B8  4A6A               	infsnz	LcInit@i^0,f,c
  7937   0010BA  2A6B               	incf	(LcInit@i+1)^0,f,c
  7938   0010BC  BE6B               	btfsc	(LcInit@i+1)^0,7,c
  7939   0010BE  EF6A  F008         	goto	u2571
  7940   0010C2  506B               	movf	(LcInit@i+1)^0,w,c
  7941   0010C4  E109               	bnz	u2570
  7942   0010C6  0E02               	movlw	2
  7943   0010C8  5C6A               	subwf	LcInit@i^0,w,c
  7944   0010CA  A0D8               	btfss	status,0,c
  7945   0010CC  EF6A  F008         	goto	u2571
  7946   0010D0  EF6C  F008         	goto	u2570
  7947   0010D4                     u2571:
  7948   0010D4  EF03  F008         	goto	l3552
  7949   0010D8                     u2570:
  7950   0010D8  0012               	return		;funcret
  7951   0010DA                     __end_of_LcInit:
  7952                           	callstack 0
  7953                           
  7954 ;; *************** function _WaitForBusy *****************
  7955 ;; Defined at:
  7956 ;;		line 256 in file "TAD_DISPLAY.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;		None
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  Busy            1    0        unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1
  7970 ;;      Params:         0       0       0
  7971 ;;      Locals:         0       0       0
  7972 ;;      Temps:          0       0       0
  7973 ;;      Totals:         0       0       0
  7974 ;;Total ram usage:        0 bytes
  7975 ;; Hardware stack levels used: 1
  7976 ;; Hardware stack levels required when called: 5
  7977 ;; This function calls:
  7978 ;;		_Espera
  7979 ;; This function is called by:
  7980 ;;		_LcInit
  7981 ;;		_LcClear
  7982 ;;		_LcCursorOn
  7983 ;;		_LcCursorOff
  7984 ;;		_LcGotoXY
  7985 ;;		_LcPutChar
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text38
  7990   001CC0                     __ptext38:
  7991                           	callstack 0
  7992   001CC0                     _WaitForBusy:
  7993                           	callstack 24
  7994   001CC0                     
  7995                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  7996   001CC0  C049  F060         	movff	_Timer,Espera@Timer
  7997   001CC4  6A61               	clrf	(Espera@Timer+1)^0,c
  7998   001CC6  0E00               	movlw	0
  7999   001CC8  6E63               	movwf	(Espera@ms+1)^0,c
  8000   001CCA  0E02               	movlw	2
  8001   001CCC  6E62               	movwf	Espera@ms^0,c
  8002   001CCE  ECFE  F00C         	call	_Espera	;wreg free
  8003   001CD2  0012               	return		;funcret
  8004   001CD4                     __end_of_WaitForBusy:
  8005                           	callstack 0
  8006                           
  8007 ;; *************** function _Espera *****************
  8008 ;; Defined at:
  8009 ;;		line 205 in file "TAD_DISPLAY.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  Timer           2   14[COMRAM] int 
  8012 ;;  ms              2   16[COMRAM] int 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;		None
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  1    wreg      void 
  8017 ;; Registers used:
  8018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1
  8024 ;;      Params:         4       0       0
  8025 ;;      Locals:         0       0       0
  8026 ;;      Temps:          4       0       0
  8027 ;;      Totals:         8       0       0
  8028 ;;Total ram usage:        8 bytes
  8029 ;; Hardware stack levels used: 1
  8030 ;; Hardware stack levels required when called: 4
  8031 ;; This function calls:
  8032 ;;		_TI_GetTics
  8033 ;;		_TI_ResetTics
  8034 ;; This function is called by:
  8035 ;;		_LcInit
  8036 ;;		_WaitForBusy
  8037 ;;		_LcClear
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text39
  8042   0019FC                     __ptext39:
  8043                           	callstack 0
  8044   0019FC                     _Espera:
  8045                           	callstack 24
  8046   0019FC                     
  8047                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  8048   0019FC  5060               	movf	Espera@Timer^0,w,c
  8049   0019FE  ECD4  F00D         	call	_TI_ResetTics
  8050   001A02                     l3024:
  8051   001A02  C062  F064         	movff	Espera@ms,??_Espera
  8052   001A06  C063  F065         	movff	Espera@ms+1,??_Espera+1
  8053   001A0A  0E00               	movlw	0
  8054   001A0C  BE65               	btfsc	(??_Espera+1)^0,7,c
  8055   001A0E  0EFF               	movlw	255
  8056   001A10  6E66               	movwf	(??_Espera+2)^0,c
  8057   001A12  6E67               	movwf	(??_Espera+3)^0,c
  8058   001A14  5060               	movf	Espera@Timer^0,w,c
  8059   001A16  EC32  F00C         	call	_TI_GetTics
  8060   001A1A  5064               	movf	??_Espera^0,w,c
  8061   001A1C  5C53               	subwf	?_TI_GetTics^0,w,c
  8062   001A1E  5065               	movf	(??_Espera+1)^0,w,c
  8063   001A20  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  8064   001A22  5066               	movf	(??_Espera+2)^0,w,c
  8065   001A24  5855               	subwfb	(?_TI_GetTics+2)^0,w,c
  8066   001A26  5067               	movf	(??_Espera+3)^0,w,c
  8067   001A28  5856               	subwfb	(?_TI_GetTics+3)^0,w,c
  8068   001A2A  A0D8               	btfss	status,0,c
  8069   001A2C  EF1A  F00D         	goto	u1911
  8070   001A30  EF1C  F00D         	goto	u1910
  8071   001A34                     u1911:
  8072   001A34  EF01  F00D         	goto	l3024
  8073   001A38                     u1910:
  8074   001A38  0012               	return		;funcret
  8075   001A3A                     __end_of_Espera:
  8076                           	callstack 0
  8077                           
  8078 ;; *************** function _TI_ResetTics *****************
  8079 ;; Defined at:
  8080 ;;		line 53 in file "TAD_TIMER.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  TimerHandle     1    wreg     unsigned char 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  1    wreg      void 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1
  8094 ;;      Params:         0       0       0
  8095 ;;      Locals:         1       0       0
  8096 ;;      Temps:          0       0       0
  8097 ;;      Totals:         1       0       0
  8098 ;;Total ram usage:        1 bytes
  8099 ;; Hardware stack levels used: 1
  8100 ;; Hardware stack levels required when called: 3
  8101 ;; This function calls:
  8102 ;;		Nothing
  8103 ;; This function is called by:
  8104 ;;		_motorTeclado
  8105 ;;		_Espera
  8106 ;;		_motor_LEDs
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text40
  8111   001BA8                     __ptext40:
  8112                           	callstack 0
  8113   001BA8                     _TI_ResetTics:
  8114                           	callstack 26
  8115                           
  8116                           ;incstack = 0
  8117                           ;TI_ResetTics@TimerHandle stored from wreg
  8118   001BA8  6E53               	movwf	TI_ResetTics@TimerHandle^0,c
  8119   001BAA                     
  8120                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8121   001BAA  9EF2               	bcf	242,7,c	;volatile
  8122   001BAC  5053               	movf	TI_ResetTics@TimerHandle^0,w,c
  8123   001BAE  0D05               	mullw	5
  8124   001BB0  50F3               	movf	243,w,c
  8125   001BB2  0F80               	addlw	low _Timers
  8126   001BB4  6ED9               	movwf	fsr2l,c
  8127   001BB6  6ADA               	clrf	fsr2h,c
  8128   001BB8  C00B  FFDE         	movff	_Tics,postinc2	;volatile
  8129   001BBC  C00C  FFDE         	movff	_Tics+1,postinc2	;volatile
  8130   001BC0  C00D  FFDE         	movff	_Tics+2,postinc2	;volatile
  8131   001BC4  C00E  FFDE         	movff	_Tics+3,postinc2	;volatile
  8132   001BC8  8EF2               	bsf	242,7,c	;volatile
  8133   001BCA  0012               	return		;funcret
  8134   001BCC                     __end_of_TI_ResetTics:
  8135                           	callstack 0
  8136                           
  8137 ;; *************** function _TI_GetTics *****************
  8138 ;; Defined at:
  8139 ;;		line 61 in file "TAD_TIMER.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  TimerHandle     1    wreg     unsigned char 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  8144 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  4    1[COMRAM] unsigned long 
  8147 ;; Registers used:
  8148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1
  8154 ;;      Params:         4       0       0
  8155 ;;      Locals:         5       0       0
  8156 ;;      Temps:          4       0       0
  8157 ;;      Totals:        13       0       0
  8158 ;;Total ram usage:       13 bytes
  8159 ;; Hardware stack levels used: 1
  8160 ;; Hardware stack levels required when called: 3
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_motorTeclado
  8165 ;;		_Espera
  8166 ;;		_motor_LEDs
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text41
  8171   001864                     __ptext41:
  8172                           	callstack 0
  8173   001864                     _TI_GetTics:
  8174                           	callstack 26
  8175                           
  8176                           ;incstack = 0
  8177                           ;TI_GetTics@TimerHandle stored from wreg
  8178   001864  6E5F               	movwf	TI_GetTics@TimerHandle^0,c
  8179   001866                     
  8180                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8181   001866  9EF2               	bcf	242,7,c	;volatile
  8182   001868  C00B  F05B         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8183   00186C  C00C  F05C         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8184   001870  C00D  F05D         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8185   001874  C00E  F05E         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8186   001878  8EF2               	bsf	242,7,c	;volatile
  8187   00187A                     
  8188                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8189   00187A  505F               	movf	TI_GetTics@TimerHandle^0,w,c
  8190   00187C  0D05               	mullw	5
  8191   00187E  50F3               	movf	243,w,c
  8192   001880  0F80               	addlw	low _Timers
  8193   001882  6ED9               	movwf	fsr2l,c
  8194   001884  6ADA               	clrf	fsr2h,c
  8195   001886  CFDE F057          	movff	postinc2,??_TI_GetTics
  8196   00188A  CFDE F058          	movff	postinc2,??_TI_GetTics+1
  8197   00188E  CFDE F059          	movff	postinc2,??_TI_GetTics+2
  8198   001892  CFDE F05A          	movff	postinc2,??_TI_GetTics+3
  8199   001896  5057               	movf	??_TI_GetTics^0,w,c
  8200   001898  5C5B               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8201   00189A  6E53               	movwf	?_TI_GetTics^0,c
  8202   00189C  5058               	movf	(??_TI_GetTics+1)^0,w,c
  8203   00189E  585C               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8204   0018A0  6E54               	movwf	(?_TI_GetTics+1)^0,c
  8205   0018A2  5059               	movf	(??_TI_GetTics+2)^0,w,c
  8206   0018A4  585D               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8207   0018A6  6E55               	movwf	(?_TI_GetTics+2)^0,c
  8208   0018A8  505A               	movf	(??_TI_GetTics+3)^0,w,c
  8209   0018AA  585E               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8210   0018AC  6E56               	movwf	(?_TI_GetTics+3)^0,c
  8211   0018AE  0012               	return		;funcret
  8212   0018B0                     __end_of_TI_GetTics:
  8213                           	callstack 0
  8214                           
  8215 ;; *************** function _TI_NewTimer *****************
  8216 ;; Defined at:
  8217 ;;		line 43 in file "TAD_TIMER.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8220 ;;		 -> timer@TAD_LEDS$F931(1), Timer(1), timer(1), 
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;  Comptador       1    3[COMRAM] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      unsigned char 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1
  8232 ;;      Params:         1       0       0
  8233 ;;      Locals:         1       0       0
  8234 ;;      Temps:          1       0       0
  8235 ;;      Totals:         3       0       0
  8236 ;;Total ram usage:        3 bytes
  8237 ;; Hardware stack levels used: 1
  8238 ;; Hardware stack levels required when called: 3
  8239 ;; This function calls:
  8240 ;;		Nothing
  8241 ;; This function is called by:
  8242 ;;		_initTeclado
  8243 ;;		_LcInit
  8244 ;;		_initLeds
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text42
  8249   00180E                     __ptext42:
  8250                           	callstack 0
  8251   00180E                     _TI_NewTimer:
  8252                           	callstack 26
  8253   00180E                     
  8254                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8255   00180E  6A55               	clrf	TI_NewTimer@Comptador^0,c
  8256                           
  8257                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8258   001810  EF16  F00C         	goto	l3162
  8259   001814                     l3158:
  8260                           
  8261                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8262   001814  2A55               	incf	TI_NewTimer@Comptador^0,f,c
  8263   001816  0E04               	movlw	4
  8264   001818  1855               	xorwf	TI_NewTimer@Comptador^0,w,c
  8265   00181A  A4D8               	btfss	status,2,c
  8266   00181C  EF12  F00C         	goto	u2211
  8267   001820  EF14  F00C         	goto	u2210
  8268   001824                     u2211:
  8269   001824  EF16  F00C         	goto	l3162
  8270   001828                     u2210:
  8271   001828  EF31  F00C         	goto	l87
  8272   00182C                     l3162:
  8273                           
  8274                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8275   00182C  5055               	movf	TI_NewTimer@Comptador^0,w,c
  8276   00182E  0D05               	mullw	5
  8277   001830  50F3               	movf	243,w,c
  8278   001832  0F84               	addlw	low (_Timers+4)
  8279   001834  6ED9               	movwf	fsr2l,c
  8280   001836  6ADA               	clrf	fsr2h,c
  8281   001838  04DE               	decf	postinc2,w,c
  8282   00183A  B4D8               	btfsc	status,2,c
  8283   00183C  EF22  F00C         	goto	u2221
  8284   001840  EF24  F00C         	goto	u2220
  8285   001844                     u2221:
  8286   001844  EF0A  F00C         	goto	l3158
  8287   001848                     u2220:
  8288   001848                     
  8289                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8290   001848  5055               	movf	TI_NewTimer@Comptador^0,w,c
  8291   00184A  0D05               	mullw	5
  8292   00184C  50F3               	movf	243,w,c
  8293   00184E  0F84               	addlw	low (_Timers+4)
  8294   001850  6ED9               	movwf	fsr2l,c
  8295   001852  6ADA               	clrf	fsr2h,c
  8296   001854  0E01               	movlw	1
  8297   001856  6EDF               	movwf	indf2,c
  8298   001858                     
  8299                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8300   001858  5053               	movf	TI_NewTimer@TimerHandle^0,w,c
  8301   00185A  6ED9               	movwf	fsr2l,c
  8302   00185C  6ADA               	clrf	fsr2h,c
  8303   00185E  C055  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8304   001862                     l87:
  8305   001862  0012               	return		;funcret
  8306   001864                     __end_of_TI_NewTimer:
  8307                           	callstack 0
  8308                           
  8309 ;; *************** function _EscriuPrimeraOrdre *****************
  8310 ;; Defined at:
  8311 ;;		line 260 in file "TAD_DISPLAY.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  ordre           1    wreg     unsigned char 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;  ordre           1    2[COMRAM] unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		wreg, status,2, status,0
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMRAM   BANK0   BANK1
  8325 ;;      Params:         0       0       0
  8326 ;;      Locals:         1       0       0
  8327 ;;      Temps:          1       0       0
  8328 ;;      Totals:         2       0       0
  8329 ;;Total ram usage:        2 bytes
  8330 ;; Hardware stack levels used: 1
  8331 ;; Hardware stack levels required when called: 3
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_LcInit
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text43
  8340   0012FA                     __ptext43:
  8341                           	callstack 0
  8342   0012FA                     _EscriuPrimeraOrdre:
  8343                           	callstack 26
  8344                           
  8345                           ;incstack = 0
  8346                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8347   0012FA  6E54               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8348   0012FC                     
  8349                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8350   0012FC  9096               	bcf	150,0,c	;volatile
  8351   0012FE  9296               	bcf	150,1,c	;volatile
  8352   001300  9A93               	bcf	147,5,c	;volatile
  8353   001302  9893               	bcf	147,4,c	;volatile
  8354   001304  968A               	bcf	138,3,c	;volatile
  8355   001306  948A               	bcf	138,2,c	;volatile
  8356                           
  8357                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8358   001308  828A               	bsf	138,1,c	;volatile
  8359   00130A  828A               	bsf	138,1,c	;volatile
  8360   00130C                     
  8361                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8362   00130C  B654               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8363   00130E  EF8B  F009         	goto	u561
  8364   001312  EF8F  F009         	goto	u560
  8365   001316                     u561:
  8366   001316  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8367   001318  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8368   00131A  EF90  F009         	goto	u578
  8369   00131E                     u560:
  8370   00131E  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8371   001320                     u578:
  8372   001320  508D               	movf	141,w,c	;volatile
  8373   001322  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8374   001324  0BFE               	andlw	-2
  8375   001326  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8376   001328  6E8D               	movwf	141,c	;volatile
  8377                           
  8378                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8379   00132A  B454               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8380   00132C  EF9A  F009         	goto	u581
  8381   001330  EF9E  F009         	goto	u580
  8382   001334                     u581:
  8383   001334  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8384   001336  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8385   001338  EF9F  F009         	goto	u598
  8386   00133C                     u580:
  8387   00133C  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8388   00133E                     u598:
  8389   00133E  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8390   001340  508D               	movf	141,w,c	;volatile
  8391   001342  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8392   001344  0BFD               	andlw	-3
  8393   001346  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8394   001348  6E8D               	movwf	141,c	;volatile
  8395                           
  8396                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8397   00134A  B254               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8398   00134C  EFAA  F009         	goto	u601
  8399   001350  EFAE  F009         	goto	u600
  8400   001354                     u601:
  8401   001354  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8402   001356  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8403   001358  EFAF  F009         	goto	u618
  8404   00135C                     u600:
  8405   00135C  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8406   00135E                     u618:
  8407   00135E  3A53               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8408   001360  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8409   001362  508A               	movf	138,w,c	;volatile
  8410   001364  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8411   001366  0BDF               	andlw	-33
  8412   001368  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8413   00136A  6E8A               	movwf	138,c	;volatile
  8414                           
  8415                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8416   00136C  B054               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8417   00136E  EFBB  F009         	goto	u621
  8418   001372  EFBF  F009         	goto	u620
  8419   001376                     u621:
  8420   001376  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8421   001378  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8422   00137A  EFC0  F009         	goto	u638
  8423   00137E                     u620:
  8424   00137E  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8425   001380                     u638:
  8426   001380  3A53               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8427   001382  508A               	movf	138,w,c	;volatile
  8428   001384  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8429   001386  0BEF               	andlw	-17
  8430   001388  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8431   00138A  6E8A               	movwf	138,c	;volatile
  8432   00138C                     
  8433                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  8434   00138C  928A               	bcf	138,1,c	;volatile
  8435   00138E  0012               	return		;funcret
  8436   001390                     __end_of_EscriuPrimeraOrdre:
  8437                           	callstack 0
  8438                           
  8439 ;; *************** function _CantaIR *****************
  8440 ;; Defined at:
  8441 ;;		line 224 in file "TAD_DISPLAY.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  IR              1    wreg     unsigned char 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  IR              1    3[COMRAM] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      void 
  8448 ;; Registers used:
  8449 ;;		wreg, status,2, status,0, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1
  8455 ;;      Params:         0       0       0
  8456 ;;      Locals:         1       0       0
  8457 ;;      Temps:          0       0       0
  8458 ;;      Totals:         1       0       0
  8459 ;;Total ram usage:        1 bytes
  8460 ;; Hardware stack levels used: 1
  8461 ;; Hardware stack levels required when called: 4
  8462 ;; This function calls:
  8463 ;;		_CantaPartAlta
  8464 ;;		_CantaPartBaixa
  8465 ;; This function is called by:
  8466 ;;		_LcInit
  8467 ;;		_LcClear
  8468 ;;		_LcCursorOn
  8469 ;;		_LcCursorOff
  8470 ;;		_LcGotoXY
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text44
  8475   001ADE                     __ptext44:
  8476                           	callstack 0
  8477   001ADE                     _CantaIR:
  8478                           	callstack 25
  8479                           
  8480                           ;incstack = 0
  8481                           ;CantaIR@IR stored from wreg
  8482   001ADE  6E55               	movwf	CantaIR@IR^0,c
  8483   001AE0                     
  8484                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8485   001AE0  9096               	bcf	150,0,c	;volatile
  8486   001AE2  9296               	bcf	150,1,c	;volatile
  8487   001AE4  9A93               	bcf	147,5,c	;volatile
  8488   001AE6  9893               	bcf	147,4,c	;volatile
  8489                           
  8490                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8491   001AE8  968A               	bcf	138,3,c	;volatile
  8492                           
  8493                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8494   001AEA  948A               	bcf	138,2,c	;volatile
  8495                           
  8496                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8497   001AEC  828A               	bsf	138,1,c	;volatile
  8498   001AEE                     
  8499                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8500   001AEE  5055               	movf	CantaIR@IR^0,w,c
  8501   001AF0  ECD6  F00A         	call	_CantaPartAlta
  8502   001AF4                     
  8503                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8504   001AF4  828A               	bsf	138,1,c	;volatile
  8505   001AF6                     
  8506                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8507   001AF6  928A               	bcf	138,1,c	;volatile
  8508   001AF8                     
  8509                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8510   001AF8  928A               	bcf	138,1,c	;volatile
  8511   001AFA                     
  8512                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8513   001AFA  828A               	bsf	138,1,c	;volatile
  8514                           
  8515                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8516   001AFC  5055               	movf	CantaIR@IR^0,w,c
  8517   001AFE  EC94  F00A         	call	_CantaPartBaixa
  8518   001B02                     
  8519                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8520   001B02  828A               	bsf	138,1,c	;volatile
  8521   001B04                     
  8522                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8523   001B04  928A               	bcf	138,1,c	;volatile
  8524   001B06                     
  8525                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8526   001B06  8096               	bsf	150,0,c	;volatile
  8527   001B08  8296               	bsf	150,1,c	;volatile
  8528   001B0A  8A93               	bsf	147,5,c	;volatile
  8529   001B0C  8893               	bsf	147,4,c	;volatile
  8530   001B0E  0012               	return		;funcret
  8531   001B10                     __end_of_CantaIR:
  8532                           	callstack 0
  8533                           
  8534 ;; *************** function _CantaPartBaixa *****************
  8535 ;; Defined at:
  8536 ;;		line 217 in file "TAD_DISPLAY.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  c               1    wreg     unsigned char 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  c               1    2[COMRAM] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1
  8550 ;;      Params:         0       0       0
  8551 ;;      Locals:         1       0       0
  8552 ;;      Temps:          1       0       0
  8553 ;;      Totals:         2       0       0
  8554 ;;Total ram usage:        2 bytes
  8555 ;; Hardware stack levels used: 1
  8556 ;; Hardware stack levels required when called: 3
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_CantaIR
  8561 ;;		_CantaData
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text45
  8566   001528                     __ptext45:
  8567                           	callstack 0
  8568   001528                     _CantaPartBaixa:
  8569                           	callstack 25
  8570                           
  8571                           ;incstack = 0
  8572                           ;CantaPartBaixa@c stored from wreg
  8573   001528  6E54               	movwf	CantaPartBaixa@c^0,c
  8574   00152A                     
  8575                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  8576   00152A  B654               	btfsc	CantaPartBaixa@c^0,3,c
  8577   00152C  EF9A  F00A         	goto	u2001
  8578   001530  EF9E  F00A         	goto	u2000
  8579   001534                     u2001:
  8580   001534  6A53               	clrf	??_CantaPartBaixa^0,c
  8581   001536  2A53               	incf	??_CantaPartBaixa^0,f,c
  8582   001538  EF9F  F00A         	goto	u2018
  8583   00153C                     u2000:
  8584   00153C  6A53               	clrf	??_CantaPartBaixa^0,c
  8585   00153E                     u2018:
  8586   00153E  508D               	movf	141,w,c	;volatile
  8587   001540  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8588   001542  0BFE               	andlw	-2
  8589   001544  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8590   001546  6E8D               	movwf	141,c	;volatile
  8591                           
  8592                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  8593   001548  B454               	btfsc	CantaPartBaixa@c^0,2,c
  8594   00154A  EFA9  F00A         	goto	u2021
  8595   00154E  EFAD  F00A         	goto	u2020
  8596   001552                     u2021:
  8597   001552  6A53               	clrf	??_CantaPartBaixa^0,c
  8598   001554  2A53               	incf	??_CantaPartBaixa^0,f,c
  8599   001556  EFAE  F00A         	goto	u2038
  8600   00155A                     u2020:
  8601   00155A  6A53               	clrf	??_CantaPartBaixa^0,c
  8602   00155C                     u2038:
  8603   00155C  4653               	rlncf	??_CantaPartBaixa^0,f,c
  8604   00155E  508D               	movf	141,w,c	;volatile
  8605   001560  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8606   001562  0BFD               	andlw	-3
  8607   001564  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8608   001566  6E8D               	movwf	141,c	;volatile
  8609                           
  8610                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  8611   001568  B254               	btfsc	CantaPartBaixa@c^0,1,c
  8612   00156A  EFB9  F00A         	goto	u2041
  8613   00156E  EFBD  F00A         	goto	u2040
  8614   001572                     u2041:
  8615   001572  6A53               	clrf	??_CantaPartBaixa^0,c
  8616   001574  2A53               	incf	??_CantaPartBaixa^0,f,c
  8617   001576  EFBE  F00A         	goto	u2058
  8618   00157A                     u2040:
  8619   00157A  6A53               	clrf	??_CantaPartBaixa^0,c
  8620   00157C                     u2058:
  8621   00157C  3A53               	swapf	??_CantaPartBaixa^0,f,c
  8622   00157E  4653               	rlncf	??_CantaPartBaixa^0,f,c
  8623   001580  508A               	movf	138,w,c	;volatile
  8624   001582  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8625   001584  0BDF               	andlw	-33
  8626   001586  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8627   001588  6E8A               	movwf	138,c	;volatile
  8628                           
  8629                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  8630   00158A  B054               	btfsc	CantaPartBaixa@c^0,0,c
  8631   00158C  EFCA  F00A         	goto	u2061
  8632   001590  EFCE  F00A         	goto	u2060
  8633   001594                     u2061:
  8634   001594  6A53               	clrf	??_CantaPartBaixa^0,c
  8635   001596  2A53               	incf	??_CantaPartBaixa^0,f,c
  8636   001598  EFCF  F00A         	goto	u2078
  8637   00159C                     u2060:
  8638   00159C  6A53               	clrf	??_CantaPartBaixa^0,c
  8639   00159E                     u2078:
  8640   00159E  3A53               	swapf	??_CantaPartBaixa^0,f,c
  8641   0015A0  508A               	movf	138,w,c	;volatile
  8642   0015A2  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8643   0015A4  0BEF               	andlw	-17
  8644   0015A6  1853               	xorwf	??_CantaPartBaixa^0,w,c
  8645   0015A8  6E8A               	movwf	138,c	;volatile
  8646   0015AA  0012               	return		;funcret
  8647   0015AC                     __end_of_CantaPartBaixa:
  8648                           	callstack 0
  8649                           
  8650 ;; *************** function _CantaPartAlta *****************
  8651 ;; Defined at:
  8652 ;;		line 210 in file "TAD_DISPLAY.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  c               1    wreg     unsigned char 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  c               1    2[COMRAM] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      void 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1
  8666 ;;      Params:         0       0       0
  8667 ;;      Locals:         1       0       0
  8668 ;;      Temps:          1       0       0
  8669 ;;      Totals:         2       0       0
  8670 ;;Total ram usage:        2 bytes
  8671 ;; Hardware stack levels used: 1
  8672 ;; Hardware stack levels required when called: 3
  8673 ;; This function calls:
  8674 ;;		Nothing
  8675 ;; This function is called by:
  8676 ;;		_CantaIR
  8677 ;;		_CantaData
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text46
  8682   0015AC                     __ptext46:
  8683                           	callstack 0
  8684   0015AC                     _CantaPartAlta:
  8685                           	callstack 25
  8686                           
  8687                           ;incstack = 0
  8688                           ;CantaPartAlta@c stored from wreg
  8689   0015AC  6E54               	movwf	CantaPartAlta@c^0,c
  8690   0015AE                     
  8691                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8692   0015AE  BE54               	btfsc	CantaPartAlta@c^0,7,c
  8693   0015B0  EFDC  F00A         	goto	u1921
  8694   0015B4  EFE0  F00A         	goto	u1920
  8695   0015B8                     u1921:
  8696   0015B8  6A53               	clrf	??_CantaPartAlta^0,c
  8697   0015BA  2A53               	incf	??_CantaPartAlta^0,f,c
  8698   0015BC  EFE1  F00A         	goto	u1938
  8699   0015C0                     u1920:
  8700   0015C0  6A53               	clrf	??_CantaPartAlta^0,c
  8701   0015C2                     u1938:
  8702   0015C2  508D               	movf	141,w,c	;volatile
  8703   0015C4  1853               	xorwf	??_CantaPartAlta^0,w,c
  8704   0015C6  0BFE               	andlw	-2
  8705   0015C8  1853               	xorwf	??_CantaPartAlta^0,w,c
  8706   0015CA  6E8D               	movwf	141,c	;volatile
  8707                           
  8708                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8709   0015CC  BC54               	btfsc	CantaPartAlta@c^0,6,c
  8710   0015CE  EFEB  F00A         	goto	u1941
  8711   0015D2  EFEF  F00A         	goto	u1940
  8712   0015D6                     u1941:
  8713   0015D6  6A53               	clrf	??_CantaPartAlta^0,c
  8714   0015D8  2A53               	incf	??_CantaPartAlta^0,f,c
  8715   0015DA  EFF0  F00A         	goto	u1958
  8716   0015DE                     u1940:
  8717   0015DE  6A53               	clrf	??_CantaPartAlta^0,c
  8718   0015E0                     u1958:
  8719   0015E0  4653               	rlncf	??_CantaPartAlta^0,f,c
  8720   0015E2  508D               	movf	141,w,c	;volatile
  8721   0015E4  1853               	xorwf	??_CantaPartAlta^0,w,c
  8722   0015E6  0BFD               	andlw	-3
  8723   0015E8  1853               	xorwf	??_CantaPartAlta^0,w,c
  8724   0015EA  6E8D               	movwf	141,c	;volatile
  8725                           
  8726                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8727   0015EC  BA54               	btfsc	CantaPartAlta@c^0,5,c
  8728   0015EE  EFFB  F00A         	goto	u1961
  8729   0015F2  EFFF  F00A         	goto	u1960
  8730   0015F6                     u1961:
  8731   0015F6  6A53               	clrf	??_CantaPartAlta^0,c
  8732   0015F8  2A53               	incf	??_CantaPartAlta^0,f,c
  8733   0015FA  EF00  F00B         	goto	u1978
  8734   0015FE                     u1960:
  8735   0015FE  6A53               	clrf	??_CantaPartAlta^0,c
  8736   001600                     u1978:
  8737   001600  3A53               	swapf	??_CantaPartAlta^0,f,c
  8738   001602  4653               	rlncf	??_CantaPartAlta^0,f,c
  8739   001604  508A               	movf	138,w,c	;volatile
  8740   001606  1853               	xorwf	??_CantaPartAlta^0,w,c
  8741   001608  0BDF               	andlw	-33
  8742   00160A  1853               	xorwf	??_CantaPartAlta^0,w,c
  8743   00160C  6E8A               	movwf	138,c	;volatile
  8744                           
  8745                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8746   00160E  B854               	btfsc	CantaPartAlta@c^0,4,c
  8747   001610  EF0C  F00B         	goto	u1981
  8748   001614  EF10  F00B         	goto	u1980
  8749   001618                     u1981:
  8750   001618  6A53               	clrf	??_CantaPartAlta^0,c
  8751   00161A  2A53               	incf	??_CantaPartAlta^0,f,c
  8752   00161C  EF11  F00B         	goto	u1998
  8753   001620                     u1980:
  8754   001620  6A53               	clrf	??_CantaPartAlta^0,c
  8755   001622                     u1998:
  8756   001622  3A53               	swapf	??_CantaPartAlta^0,f,c
  8757   001624  508A               	movf	138,w,c	;volatile
  8758   001626  1853               	xorwf	??_CantaPartAlta^0,w,c
  8759   001628  0BEF               	andlw	-17
  8760   00162A  1853               	xorwf	??_CantaPartAlta^0,w,c
  8761   00162C  6E8A               	movwf	138,c	;volatile
  8762   00162E  0012               	return		;funcret
  8763   001630                     __end_of_CantaPartAlta:
  8764                           	callstack 0
  8765                           
  8766 ;; *************** function _LowRSI *****************
  8767 ;; Defined at:
  8768 ;;		line 34 in file "main.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		None
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1
  8782 ;;      Params:         0       0       0
  8783 ;;      Locals:         0       0       0
  8784 ;;      Temps:          1       0       0
  8785 ;;      Totals:         1       0       0
  8786 ;;Total ram usage:        1 bytes
  8787 ;; Hardware stack levels used: 1
  8788 ;; Hardware stack levels required when called: 2
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		Interrupt level 1
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	intcodelo
  8797   000018                     __pintcodelo:
  8798                           	callstack 0
  8799   000018                     _LowRSI:
  8800                           	callstack 21
  8801                           
  8802                           ;incstack = 0
  8803   000018  807C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8804   00001A  CFE0 F052          	movff	bsr,??_LowRSI
  8805   00001E  C052  FFE0         	movff	??_LowRSI,bsr
  8806   000022  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8807   000024  0010               	retfie	
  8808   000026                     __end_of_LowRSI:
  8809                           	callstack 0
  8810                           
  8811 ;; *************** function _HighRSI *****************
  8812 ;; Defined at:
  8813 ;;		line 30 in file "main.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		wreg, status,2, status,0, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1
  8827 ;;      Params:         0       0       0
  8828 ;;      Locals:         0       0       0
  8829 ;;      Temps:          0       0       0
  8830 ;;      Totals:         0       0       0
  8831 ;;Total ram usage:        0 bytes
  8832 ;; Hardware stack levels used: 1
  8833 ;; Hardware stack levels required when called: 1
  8834 ;; This function calls:
  8835 ;;		_RSI_Timer0
  8836 ;; This function is called by:
  8837 ;;		Interrupt level 2
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           	psect	intcode
  8842   000008                     __pintcode:
  8843                           	callstack 0
  8844   000008                     _HighRSI:
  8845                           	callstack 21
  8846                           
  8847                           ;incstack = 0
  8848   000008  827C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8849   00000A  EF4B  F00E         	goto	int_func
  8850                           
  8851                           	psect	intcode_body
  8852   001C96                     __pintcode_body:
  8853                           	callstack 21
  8854   001C96                     int_func:
  8855                           	callstack 21
  8856   001C96                     
  8857                           ;main.c: 32:      motor_RFID();
  8858   001C96  A4F2               	btfss	242,2,c	;volatile
  8859   001C98  EF50  F00E         	goto	i2u169_41
  8860   001C9C  EF52  F00E         	goto	i2u169_40
  8861   001CA0                     i2u169_41:
  8862   001CA0  EF54  F00E         	goto	i2l42
  8863   001CA4                     i2u169_40:
  8864   001CA4  EC3F  F00E         	call	_RSI_Timer0	;wreg free
  8865   001CA8                     i2l42:
  8866   001CA8  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8867   001CAA  0011               	retfie		f
  8868   001CAC                     __end_of_HighRSI:
  8869                           	callstack 0
  8870                           
  8871 ;; *************** function _RSI_Timer0 *****************
  8872 ;; Defined at:
  8873 ;;		line 25 in file "TAD_TIMER.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1
  8887 ;;      Params:         0       0       0
  8888 ;;      Locals:         0       0       0
  8889 ;;      Temps:          0       0       0
  8890 ;;      Totals:         0       0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used: 1
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_HighRSI
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text49
  8901   001C7E                     __ptext49:
  8902                           	callstack 0
  8903   001C7E                     _RSI_Timer0:
  8904                           	callstack 21
  8905   001C7E                     
  8906                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8907   001C7E  0EF6               	movlw	246
  8908   001C80  6ED7               	movwf	215,c	;volatile
  8909   001C82  0E3C               	movlw	60
  8910   001C84  6ED6               	movwf	214,c	;volatile
  8911   001C86                     
  8912                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8913   001C86  94F2               	bcf	4082,2,c	;volatile
  8914   001C88                     
  8915                           ;TAD_TIMER.c: 29:     Tics++;
  8916   001C88  0E01               	movlw	1
  8917   001C8A  260B               	addwf	_Tics^0,f,c	;volatile
  8918   001C8C  0E00               	movlw	0
  8919   001C8E  220C               	addwfc	(_Tics+1)^0,f,c	;volatile
  8920   001C90  220D               	addwfc	(_Tics+2)^0,f,c	;volatile
  8921   001C92  220E               	addwfc	(_Tics+3)^0,f,c	;volatile
  8922   001C94  0012               	return		;funcret
  8923   001C96                     __end_of_RSI_Timer0:
  8924                           	callstack 0
  8925                           
  8926                           	psect	rparam
  8927   000001                     ___rparam_used  equ	1
  8928   000000                     ___param_bank   equ	0
  8929   000000                     __Lparam        equ	__Lrparam
  8930   000000                     __Hparam        equ	__Hrparam
  8931                           
  8932                           	psect	temp
  8933   00007C                     btemp:
  8934                           	callstack 0
  8935   00007C                     	ds	1
  8936   00007C                     int$flags       set	btemp
  8937   00007D                     wtemp8          set	btemp+1
  8938   00007D                     ttemp5          set	btemp+1
  8939   000080                     ttemp6          set	btemp+4
  8940   000084                     ttemp7          set	btemp+8
  8941                           
  8942                           	psect	idloc
  8943                           
  8944                           ;Config register IDLOC0 @ 0x200000
  8945                           ;	unspecified, using default values
  8946   200000                     	org	2097152
  8947   200000  FF                 	db	255
  8948                           
  8949                           ;Config register IDLOC1 @ 0x200001
  8950                           ;	unspecified, using default values
  8951   200001                     	org	2097153
  8952   200001  FF                 	db	255
  8953                           
  8954                           ;Config register IDLOC2 @ 0x200002
  8955                           ;	unspecified, using default values
  8956   200002                     	org	2097154
  8957   200002  FF                 	db	255
  8958                           
  8959                           ;Config register IDLOC3 @ 0x200003
  8960                           ;	unspecified, using default values
  8961   200003                     	org	2097155
  8962   200003  FF                 	db	255
  8963                           
  8964                           ;Config register IDLOC4 @ 0x200004
  8965                           ;	unspecified, using default values
  8966   200004                     	org	2097156
  8967   200004  FF                 	db	255
  8968                           
  8969                           ;Config register IDLOC5 @ 0x200005
  8970                           ;	unspecified, using default values
  8971   200005                     	org	2097157
  8972   200005  FF                 	db	255
  8973                           
  8974                           ;Config register IDLOC6 @ 0x200006
  8975                           ;	unspecified, using default values
  8976   200006                     	org	2097158
  8977   200006  FF                 	db	255
  8978                           
  8979                           ;Config register IDLOC7 @ 0x200007
  8980                           ;	unspecified, using default values
  8981   200007                     	org	2097159
  8982   200007  FF                 	db	255
  8983                           
  8984                           	psect	config
  8985                           
  8986                           ; Padding undefined space
  8987   300000                     	org	3145728
  8988   300000  FF                 	db	255
  8989                           
  8990                           ;Config register CONFIG1H @ 0x300001
  8991                           ;	Oscillator
  8992                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8993                           ;	Fail-Safe Clock Monitor Enable bit
  8994                           ;	FCMEN = 0x0, unprogrammed default
  8995                           ;	Internal/External Oscillator Switchover bit
  8996                           ;	IESO = 0x0, unprogrammed default
  8997   300001                     	org	3145729
  8998   300001  06                 	db	6
  8999                           
  9000                           ;Config register CONFIG2L @ 0x300002
  9001                           ;	Power-up Timer Enable bit
  9002                           ;	PWRT = OFF, PWRT disabled
  9003                           ;	Brown-out Reset Enable bits
  9004                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9005                           ;	Brown-out Reset Voltage bits
  9006                           ;	BORV = 0x3, unprogrammed default
  9007   300002                     	org	3145730
  9008   300002  19                 	db	25
  9009                           
  9010                           ;Config register CONFIG2H @ 0x300003
  9011                           ;	Watchdog Timer Enable bit
  9012                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9013                           ;	Watchdog Timer Postscale Select bits
  9014                           ;	WDTPS = 0xF, unprogrammed default
  9015   300003                     	org	3145731
  9016   300003  1E                 	db	30
  9017                           
  9018                           ; Padding undefined space
  9019   300004                     	org	3145732
  9020   300004  FF                 	db	255
  9021                           
  9022                           ;Config register CONFIG3H @ 0x300005
  9023                           ;	CCP2 MUX bit
  9024                           ;	CCP2MX = 0x1, unprogrammed default
  9025                           ;	PORTB A/D Enable bit
  9026                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9027                           ;	Low-Power Timer1 Oscillator Enable bit
  9028                           ;	LPT1OSC = 0x0, unprogrammed default
  9029                           ;	MCLR Pin Enable bit
  9030                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9031   300005                     	org	3145733
  9032   300005  81                 	db	129
  9033                           
  9034                           ;Config register CONFIG4L @ 0x300006
  9035                           ;	Stack Full/Underflow Reset Enable bit
  9036                           ;	STVREN = 0x1, unprogrammed default
  9037                           ;	Single-Supply ICSP Enable bit
  9038                           ;	LVP = OFF, Single-Supply ICSP disabled
  9039                           ;	Boot Block Size Select bits
  9040                           ;	BBSIZ = 0x0, unprogrammed default
  9041                           ;	Extended Instruction Set Enable bit
  9042                           ;	XINST = 0x0, unprogrammed default
  9043                           ;	Background Debugger Enable bit
  9044                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9045   300006                     	org	3145734
  9046   300006  81                 	db	129
  9047                           
  9048                           ; Padding undefined space
  9049   300007                     	org	3145735
  9050   300007  FF                 	db	255
  9051                           
  9052                           ;Config register CONFIG5L @ 0x300008
  9053                           ;	unspecified, using default values
  9054                           ;	Code Protection bit
  9055                           ;	CP0 = 0x1, unprogrammed default
  9056                           ;	Code Protection bit
  9057                           ;	CP1 = 0x1, unprogrammed default
  9058   300008                     	org	3145736
  9059   300008  03                 	db	3
  9060                           
  9061                           ;Config register CONFIG5H @ 0x300009
  9062                           ;	unspecified, using default values
  9063                           ;	Boot Block Code Protection bitProtect Boot
  9064                           ;	CPB = 0x1, unprogrammed default
  9065                           ;	Data EEPROM Code Protection bit
  9066                           ;	CPD = 0x1, unprogrammed default
  9067   300009                     	org	3145737
  9068   300009  C0                 	db	192
  9069                           
  9070                           ;Config register CONFIG6L @ 0x30000A
  9071                           ;	unspecified, using default values
  9072                           ;	Write Protection bit
  9073                           ;	WRT0 = 0x1, unprogrammed default
  9074                           ;	Write Protection bit
  9075                           ;	WRT1 = 0x1, unprogrammed default
  9076   30000A                     	org	3145738
  9077   30000A  03                 	db	3
  9078                           
  9079                           ;Config register CONFIG6H @ 0x30000B
  9080                           ;	unspecified, using default values
  9081                           ;	Configuration Register Write Protection bit
  9082                           ;	WRTC = 0x1, unprogrammed default
  9083                           ;	Boot Block Write Protection bit
  9084                           ;	WRTB = 0x1, unprogrammed default
  9085                           ;	Data EEPROM Write Protection bit
  9086                           ;	WRTD = 0x1, unprogrammed default
  9087   30000B                     	org	3145739
  9088   30000B  E0                 	db	224
  9089                           
  9090                           ;Config register CONFIG7L @ 0x30000C
  9091                           ;	unspecified, using default values
  9092                           ;	Table Read Protection bit
  9093                           ;	EBTR0 = 0x1, unprogrammed default
  9094                           ;	Table Read Protection bit
  9095                           ;	EBTR1 = 0x1, unprogrammed default
  9096   30000C                     	org	3145740
  9097   30000C  03                 	db	3
  9098                           
  9099                           ;Config register CONFIG7H @ 0x30000D
  9100                           ;	unspecified, using default values
  9101                           ;	Boot Block Table Read Protection bit
  9102                           ;	EBTRB = 0x1, unprogrammed default
  9103   30000D                     	org	3145741
  9104   30000D  40                 	db	64
  9105                           tosu	equ	0xFFF
  9106                           tosh	equ	0xFFE
  9107                           tosl	equ	0xFFD
  9108                           stkptr	equ	0xFFC
  9109                           pclatu	equ	0xFFB
  9110                           pclath	equ	0xFFA
  9111                           pcl	equ	0xFF9
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           indf0	equ	0xFEF
  9119                           postinc0	equ	0xFEE
  9120                           postdec0	equ	0xFED
  9121                           preinc0	equ	0xFEC
  9122                           plusw0	equ	0xFEB
  9123                           fsr0h	equ	0xFEA
  9124                           fsr0l	equ	0xFE9
  9125                           wreg	equ	0xFE8
  9126                           indf1	equ	0xFE7
  9127                           postinc1	equ	0xFE6
  9128                           postdec1	equ	0xFE5
  9129                           preinc1	equ	0xFE4
  9130                           plusw1	equ	0xFE3
  9131                           fsr1h	equ	0xFE2
  9132                           fsr1l	equ	0xFE1
  9133                           bsr	equ	0xFE0
  9134                           indf2	equ	0xFDF
  9135                           postinc2	equ	0xFDE
  9136                           postdec2	equ	0xFDD
  9137                           preinc2	equ	0xFDC
  9138                           plusw2	equ	0xFDB
  9139                           fsr2h	equ	0xFDA
  9140                           fsr2l	equ	0xFD9
  9141                           status	equ	0xFD8

Data Sizes:
    Strings     302
    Constant    62
    Data        107
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     29     123
    BANK0           128      0      70
    BANK1           256      0      64

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK0[20]), STR_10(CODE[3]), STR_11(CODE[33]), STR_12(CODE[33]), 
		 -> STR_4(CODE[18]), STR_5(CODE[53]), STR_6(CODE[95]), STR_7(CODE[3]), 
		 -> STR_8(CODE[33]), STR_9(CODE[33]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    printfUID@ptr	PTR unsigned char  size(1) Largest target is 20
		 -> printfUID@buffer(BANK0[20]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK0[20]), STR_10(CODE[3]), STR_11(CODE[33]), STR_12(CODE[33]), 
		 -> STR_4(CODE[18]), STR_5(CODE[53]), STR_6(CODE[95]), STR_7(CODE[3]), 
		 -> STR_8(CODE[33]), STR_9(CODE[33]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 10
		 -> showAllConfigurations@configStr(CODE[10]), showAllConfigurations@userStr(CODE[6]), STR_1(CODE[3]), STR_13(CODE[2]), 
		 -> STR_14(CODE[3]), STR_2(CODE[4]), STR_3(CODE[3]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F931(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _showAllConfigurations->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _printfUID->_motor_StartSendString
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_checkUserUID
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6327
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          11    11      0    1841
                                             18 COMRAM    11    11      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4     888
                                             13 COMRAM     5     1      4
                       _checkUserUID
                          _printfUID
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                          10    10      0     603
                                             14 COMRAM    10    10      0
                         _TI_GetTics
                       _TI_ResetTics
                         _controlLED
                      _getActualLeds
 ---------------------------------------------------------------------------------
 (2) _getActualLeds                                        2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _controlLED                                           4     3      1     186
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        6     6      0    1478
                                             13 COMRAM     6     6      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                2     2      0     268
                                              7 COMRAM     2     2      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2      81
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                            6     5      1     563
                                              7 COMRAM     6     5      1
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      61
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     1      1     246
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     521
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     410
                                              8 COMRAM     1     1      0
                       _checkUserUID
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _checkUserUID                                         7     7      0     204
                                              1 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     655
                                             12 COMRAM     1     1      0
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _checkUserUID
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _motor_StartSendString
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
         _Terminal_SendChar
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _controlLED
     _getActualLeds
   _motor_RFID
     _getActualUID
     _motor_Read
     _motor_Write
     _setCurrentUser
       _checkUserUID
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      64     25.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0      70     54.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     29     123     97.6%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     257      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 20 20:02:35 2025

                 ?_Terminal_ReceiveChar 0052                              _RSI_Timer0 1C7E  
              setLEDIntensity@intensity 0054                                      l81 1ADC  
                                    l58 1D06                                      l91 1BCA  
                                    l94 18AE                                      l87 1862  
                  __end_of_checkUserUID 1264                              _TI_GetTics 1864  
                                    bsr 0FE0                             _state_write 004F  
                                   l200 180C                                     l210 1420  
                                   l133 1C7C                                     l142 16B4  
                                   l215 14A0                                     l143 16FE  
                                   l136 1B80                                     l312 0878  
                                   l233 0F3C                                     l153 0B22  
                                   l138 1B82                                     l148 1726  
                                   l420 069A                                     l229 0FE0  
                                   l341 01D8                                     l238 0FBC  
                                   l174 0C7C                                     l414 064A  
                                   l423 06C2                                     l417 0672  
                                   l194 1B92                                     l426 06EA  
                                   l531 15AA                                     l339 01B2  
                                   l540 1CD2                                     l196 1BA6  
                                   l268 0ECE                                     l604 12F8  
                                   l612 1BEC                                     l356 02C0  
                                   l525 1A38                                     l534 1B0E  
                                   l543 138E                                     l703 1C0C  
                                   l615 1D0C                                     l359 02DC  
                                   l528 162E                                     l473 10D8  
                                   l713 194E                                     l714 197C  
                                   l707 1418                                     l812 1CF0  
                                   l740 1262                                     l580 1CBE  
                                   l708 13F0                                     l396 0550  
                                   l629 0DAE                                     l733 19D2  
                                   l574 1CE2                                     l734 19FA  
                                   l398 0576                                     l583 1D10  
                                   l727 179E                                     l831 1120  
                                   l832 11C8                                     l577 1C64  
                                   l649 0AF8                                     l833 115E  
                                   l826 16AC                                     l739 11E0  
                                   l595 1AA8                                     l780 18F4  
                                   l588 1C44                                     l589 1C48  
                                   l749 1B38                                     l598 1B58  
                                   l791 1A72                                     l599 1B5E  
                                   u600 135C                                     u601 1354  
                                   u450 1B70                                     u451 1B6C  
                                   u620 137E                                     u621 1376  
                                   u560 131E                                     u561 1316  
                                   u618 135E                                     u580 133C  
                                   u900 1C0C                                     u581 1334  
                                   u901 1C08                                     u638 1380  
                                   u680 1CBC                                     u681 1CB6  
                                   u578 1320                                     u598 133E  
                                   u686 1CBE                            printfUID@hex 1EA4  
                          printfUID@val 005C                        ??_CantaPartBaixa 0053  
                          printfUID@ptr 005E                                     prod 0FF3  
                                   wreg 0FE8                                    l2000 1CAC  
                                  l2004 1D0E                                    l3000 1C2E  
                                  l3010 17A0                                    l3002 1C2E  
                                  l2220 1BF0                                    l3020 17FA  
                                  l3012 17C6                                    l3004 1BCC  
                                  l3100 0D8C                                    l3022 19FC  
                                  l2150 1CD4                                    l2222 1BFA  
                                  l2214 1BEE                                    l3014 17D2  
                                  l3110 11DA                                    l3006 1BE0  
                                  l3102 0D98                                    l3030 1A74  
                                  l3024 1A02                                    l2152 1CDC  
                                  l2224 1BFC                                    l2160 1D04  
                                  l3016 17D8                                    l3200 1476  
                                  l3120 11E6                                    l3008 1BE8  
                                  l3104 0DA0                                    l3040 0C82  
                                  l3032 1A78                                    l4000 0546  
                                  l3026 15AE                                    l2154 1CDE  
                                  l3018 17DA                                    l3202 147A  
                                  l3210 149E                                    l3130 1224  
                                  l3106 0DAA                                    l3050 0CA4  
                                  l3042 0C8C                                    l3034 1A88  
                                  l3028 152A                                    l2156 1CE0  
                                  l3220 0EFA                                    l3140 124C  
                                  l3132 1226                                    l3108 11CA  
                                  l3060 0CBE                                    l3052 0CA6  
                                  l3044 0C8E                                    l3036 1A8C  
                                  l4020 05B2                                    l4012 0588  
                                  l2158 1D00                                    l3230 0F0C  
                                  l3214 0ED2                                    l3142 124E  
                                  l3134 1236                                    l3126 11E8  
                                  l3118 11E2                                    l3150 18C2  
                                  l3070 0CE6                                    l3054 0CB0  
                                  l3046 0C98                                    l3038 0C7E  
                                  l3310 1B12                                    l4030 05D4  
                                  l4014 059C                                    l4006 0552  
                                  l4102 0862                                    l3232 0F16  
                                  l3224 0F00                                    l3216 0EEC  
                                  l3208 1480                                    l3136 1246  
                                  l3128 121E                                    l3152 18D2  
                                  l3304 13F2                                    l3080 0D2E  
                                  l3072 0CF0                                    l3056 0CB2  
                                  l3048 0C9A                                    l4112 1130  
                                  l4104 10DA                                    l3320 1B26  
                                  l3312 1B16                                    l4040 0610  
                                  l4032 05DC                                    l4024 05C6  
                                  l4016 05A2                                    l4008 0562  
                                  l3330 1AF4                                    l3162 182C  
                                  l3250 0F44                                    l3242 0F24  
                                  l3234 0F18                                    l3226 0F08  
                                  l3218 0EF2                                    l3154 18E2  
                                  l3170 1A3C                                    l3306 1406  
                                  l3090 0D6C                                    l3082 0D30  
                                  l3074 0CF2                                    l3066 0CC0  
                                  l3058 0CBC                                    l3402 172A  
                                  l4130 11B6                                    l4114 114A  
                                  l4106 10E2                                    l3322 1B2A  
                                  l3314 1B1A                                    l4050 065E  
                                  l4042 0626                                    l4034 05EC  
                                  l4026 05CA                                    l3340 1B04  
                                  l3332 1AF6                                    l3164 1848  
                                  l3156 180E                                    l3260 0F88  
                                  l3252 0F60                                    l3236 0F1A  
                                  l3228 0F0A                                    l3500 0DB0  
                                  l3148 18B2                                    l3180 1A6C  
                                  l3172 1A4C                                    l3308 1408  
                                  l3092 0D6E                                    l3084 0D50  
                                  l3076 0D02                                    l3068 0CD0  
                                  l3420 1770                                    l3404 1736  
                                  l4132 11B8                                    l4124 1160  
                                  l4116 1150                                    l4108 10F8  
                                  l3324 1B30                                    l3316 1B1E  
                                  l4060 069E                                    l4044 0636  
                                  l4028 05D0                                    l3342 1B06  
                                  l3334 1AF8                                    l3326 1AE0  
                                  l3166 1858                                    l3158 1814  
                                  l3262 0F9A                                    l3254 0F62  
                                  l3238 0F1E                                    l3190 1430  
                                  l3510 0DF4                                    l3502 0DC4  
                                  l1750 16C2                                    l3182 1A70  
                                  l3174 1A50                                    l1742 1B60  
                                  l3094 0D70                                    l3078 0D0E  
                                  l3086 0D52                                    l3422 1780  
                                  l3414 174C                                    l3406 173E  
                                  l4126 1178                                    l3318 1B22  
                                  l4062 06AE                                    l4054 0676  
                                  l4038 0600                                    l3336 1AFA  
                                  l3328 1AEE                                    l3344 1CC0  
                                  l3264 0FAA                                    l3256 0F7A  
                                  l3248 0F3E                                    l3192 1432  
                                  l3184 141C                                    l3520 0E62  
                                  l3512 0DFA                                    l3504 0DCA  
                                  l1752 16CA                                    l1760 16D8  
                                  l3176 1A58                                    l1744 1B70  
                                  l3096 0D80                                    l3088 0D62  
                                  l3440 19EA                                    l3424 178C  
                                  l3416 1762                                    l3408 174A  
                                  l4128 11AC                                    l4080 0746  
                                  l4072 06F0                                    l4056 0686  
                                  l4048 064E                                    l3338 1B02  
                                  l3266 0FB4                                    l3258 0F80  
                                  l3194 143A                                    l3186 1424  
                                  l3530 0EB4                                    l3522 0E7C  
                                  l3514 0E14                                    l3506 0DD2  
                                  l1762 1702                                    l1754 16D2  
                                  l1746 16AE                                    l3178 1A5E  
                                  l3610 0B6A                                    l3602 0B4A  
                                  l3290 13BC                                    l3282 1390  
                                  l3098 0D8A                                    l3426 178E  
                                  l3418 176E                                    l3450 1950  
                                  l3442 193A                                    l4090 077E  
                                  l4082 074A                                    l4074 0718  
                                  l4066 06C6                                    l1924 12FC  
                                  l3540 0FF0                                    l3532 1CE4  
                                  l3276 0FC2                                    l3196 1452  
                                  l3188 142C                                    l3524 0E96  
                                  l3516 0E2E                                    l3508 0DDA  
                                  l1748 16BA                                    l1780 1D08  
                                  l3620 0B82                                    l3604 0B4E  
                                  l3292 13C8                                    l3436 19D4  
                                  l3428 19BE                                    l3700 0946  
                                  l3460 1652                                    l3452 196A  
                                  l4092 0780                                    l4084 0752  
                                  l4076 0720                                    l4068 06D6  
                                  l4180 191C                                    l4172 18F6  
                                  l1926 130C                                    l3542 0FF4  
                                  l3534 1CE8                                    l3198 1466  
                                  l3526 0E9E                                    l3518 0E48  
                                  l3630 0B9C                                    l3622 0B88  
                                  l3614 0B74                                    l3606 0B52  
                                  l3294 13D4                                    l3286 13A4  
                                  l3438 19E8                                    l3710 097C  
                                  l3702 094C                                    l3470 16A0  
                                  l3462 1662                                    l3454 196C  
                                  l4094 0784                                    l4086 0764  
                                  l4078 0732                                    l4190 192C  
                                  l4182 191E                                    l4174 1902  
                                  l1928 138C                                    l3560 1048  
                                  l3552 1006                                    l3544 0FF8  
                                  l3536 0FE4                                    l3480 1AAC  
                                  l3528 0EB0                                    l3640 0BE2  
                                  l3632 0BBC                                    l3616 0B78  
                                  l3608 0B5A                                    l3296 13E0  
                                  l3288 13B4                                    l3720 09B0  
                                  l3704 095C                                    l3712 098A  
                                  l3472 16A8                                    l3464 1674  
                                  l3456 1632                                    l4088 077A  
                                  l3800 00C0                                    l4192 1930  
                                  l4184 1920                                    l4176 1906  
                                  l3570 108C                                    l3562 1060  
                                  l3554 1018                                    l3546 0FFE  
                                  l3538 0FEC                                    l3490 1ADA  
                                  l3482 1ABA                                    l3474 1AAA  
                                  l3642 0BEA                                    l3634 0BCE  
                                  l3618 0B7C                                    l3730 09E4  
                                  l3722 09B8                                    l3714 0996  
                                  l3706 096C                                    l3466 1684  
                                  l3458 1642                                    l4098 078C  
                                  l3810 00F2                                    l3802 00C8  
                                  l4186 1924                                    l4178 1918  
                           _TI_NewTimer 180E                                    l3580 10B8  
                                  l3572 1092                                    l3564 1066  
                                  l3556 101E                                    l3484 1ABC  
                                  l3492 1C66                                    l3652 0C28  
                                  l3636 0BD4                                    l2940 1C4A  
                                  l3396 1728                                    l3740 0A0C  
                                  l3732 09EC                                    l3724 09C8  
                                  l3716 099A                                    l3708 0978  
                                  l3468 1694                                    l3900 02E0  
                                  l3812 00F8                                    l3804 00D8  
                                  l4188 1928                                    l3582 10BC  
                                  l3574 10A4                                    l3566 107E  
                                  l3558 1036                                    l3486 1ACC  
                                  l3494 1C6A                                    l3654 0C38  
                                  l3646 0BFE                                    l3638 0BDC  
                                  l3590 0B1A                                    l3662 0C46  
                                  l2950 1B5C                                    l3750 0A40  
                                  l3742 0A1C                                    l3734 09FC  
                                  l3726 09D4                                    l3718 09A0  
                                  l3670 08A4                                    l3910 031A  
                                  l3902 02F0                                    l3830 013E  
                                  l3822 0128                                    l3814 00FC  
                                  l3806 00E8                                    l3576 10A8  
                                  l3568 1082                                    l3488 1AD8  
                                  l3496 1C6C                                    l3656 0C3A  
                                  l3648 0C20                                    l3592 0B24  
                                  l3584 0AFA                                    l2944 1B3C  
                                  l2960 126E                                    l3760 0A7E  
                                  l3752 0A44                                    l3728 09E0  
                                  l3680 08DC                                    l3672 08B8  
                                  l3664 087A                                    l3912 032A  
                                  l3840 0178                                    l3832 0142  
                                  l3824 012C                                    l3816 0104  
                                  l3808 00EE                                    l3578 10B2  
                                  l3498 1C74                                    l3658 0C3E  
                                  l3594 0B28                                    l3586 0B04  
                                  l2946 1B52                                    l2970 12D8  
                                  l2962 129E                                    l2954 1264  
                                  l3762 0A92                                    l3754 0A48  
                                  l3746 0A24                                    l3690 090A  
                                  l3682 08E2                                    l3674 08C8  
                                  l3666 088A                                    l3930 0434  
                                  l3922 0374                                    l3914 0356  
                                  l3906 0304                                    l3850 01A6  
                                  l3842 0188                                    l3834 0150  
                                  l3826 0132                                    l3818 0114  
                                  l3596 0B30                                    l3588 0B14  
                                  l2972 12DC                                    l2956 1268  
                                  l3764 0A9A                                    l3756 0A4E  
                                  l3748 0A34                                    l3692 091A  
                                  l3684 08F2                                    l3676 08D4  
                                  l3668 089E                                    l3772 0AAA  
                                  l3940 0456                                    l3924 040A  
                                  l3916 036C                                    l3908 030A  
                                  l3860 01EA                                    l3852 01AA  
                                  l3836 0154                                    l3828 0136  
                                  l3780 0042                                    l2990 1866  
                                  l3598 0B40                                    l3758 0A62  
                                  l3694 0926                                    l3686 08FE  
                                  l3678 08D8                                    l3950 0474  
                                  l3942 045E                                    l3934 0448  
                                  l3926 040E                                    l3862 01FE  
                                  l3854 01B4                                    l3846 019C  
                                  l3838 0164                                    l3790 008C  
                                  l3782 0054                                    l3774 002A  
                                  l2992 187A                                    l2984 1BAA  
                                  l2968 12A4                                    l3696 092A  
                                  l3688 0902                                    l3952 0484  
                                  l3944 046A                                    l3936 044C  
                                  l3928 041C                                    l3880 0252  
                                  l3872 0234                                    l3864 0204  
                                  l3856 01C4                                    l3848 01A0  
                                  l3792 0092                                    l3784 005E  
                                  l3776 002A                                    l2986 1BAC  
                                  l2978 12E2                                    l3698 0932  
                                  l3970 04CA                                    l3938 0452  
                                  l3890 028A                                    l3874 0244  
                                  l3882 025A                                    l3866 0214  
                                  l3794 00A6                                    l3786 0070  
                                  l3778 003A                                    l2988 1BC8  
                                  l2996 1B86                                    l3980 04E4  
                                  l3972 04CE                                    l3964 04A6  
                                  l3956 0498                                    l3892 029A  
                                  l3884 0266                                    l3876 0248  
                                  l3868 0220                                    l3796 00B6  
                                  l3788 007C                                    l2998 1B94  
                                  l3990 051A                                    l3982 04F2  
                                  l3974 04D4                                    l3966 04B6  
                                  l3958 049C                                    l3894 02B0  
                                  l3886 0276                                    l3878 024E  
                                  l3798 00BC                                    l3984 04F6  
                                  l3976 04D8                                    l3896 02C8  
                                  l3994 052E                                    l3986 0506  
                                  l3978 04E0                                    l3988 050A  
                                  l3998 0542                                    STR_2 1FFB  
                                  STR_4 1FE9                                    STR_5 1F30  
                                  STR_6 1ED1                                    STR_7 1FF8  
                                  STR_8 1F86                                    STR_9 1F65  
                                  u2000 153C                                    u2001 1534  
                                  u2020 155A                                    u2100 0CE6  
                                  u2021 1552                                    u2101 0CE2  
                                  u2110 0D62                                    u2111 0D5E  
                                  u2040 157A                                    u2200 18E2  
                                  u2120 0D80                                    u3000 031A  
                                  u2041 1572                                    u2201 18DE  
                                  u2121 0D7C                                    u3001 0316  
                                  u2018 153E                                    u2210 1828  
                                  u2130 11DA                                    u3010 036C  
                                  u2211 1824                                    u2131 11D6  
                                  u3011 0368                                    u2060 159C  
                                  u2220 1848                                    u2140 121E  
                                  u2300 13A0                                    u3100 05FC  
                                  u3020 0444                                    u2061 1594  
                                  u2221 1844                                    u2141 121A  
                                  u2301 139C                                    u3101 05F8  
                                  u3021 0440                                    _LATA 0F89  
                                  u2038 155C                                    u2150 1236  
                                  u2230 1A4C                                    u2310 13B4  
                                  u3110 0610                                    u3030 0494  
                                  u2151 1232                                    u2231 1A48  
                                  u2311 13B0                                    u3111 060C  
                                  u3031 0490                                    _LATC 0F8B  
                                  u2240 1476                                    u2160 1246  
                                  u2320 1418                                    u2400 19FA  
                                  u2080 1AA8                                    u3200 0732  
                                  u3120 0626                                    u3040 04C6  
                                  _LATD 0F8C                                    u2241 1472  
                                  u2161 1242                                    u2321 1414  
                                  u2401 19F6                                    u2081 1AA4  
                                  u3201 072E                                    u3121 0622  
                                  u3041 04C2                                    u2058 157C  
                                  u2250 0EEC                                    u2170 125E  
                                  u2090 0CD0                                    u2410 194A  
                                  u3210 0742                                    u3130 0646  
                                  u3050 053E                                    u2251 0EE8  
                                  u2171 125A                                    u2091 0CCC  
                                  u2411 1946                                    u3211 073E  
                                  u3131 0642                                    u3051 053A  
                                  u2260 0F56                                    u2500 0E2E  
                                  u2180 18C2                                    u2420 197C  
                                  u3220 0764                                    u3140 066E  
                                  u3060 0572                                    u2261 0F4E  
                                  u2501 0E2A                                    u2181 18BE  
                                  u2421 1978                                    u3221 0760  
                                  u3141 066A                                    u3061 056E  
                                  u2078 159E                                    u2270 0F7A  
                                  u2510 0E48                                    u2190 18D2  
                                  u2430 1642                                    u3230 111C  
                                  u3150 0696                                    u3070 0588  
                                  u2271 0F76                                    u2511 0E44  
                                  u2191 18CE                                    u2431 163E  
                                  u3231 1118                                    u3151 0692  
                                  u3071 0584                                    u2280 0F9A  
                                  u2520 0E62                                    u2600 0B6A  
                                  u1800 1B52                                    u2440 1652  
                                  u3240 114A                                    u3160 06BE  
                                  u3080 059C                                    u2281 0F96  
                                  u2521 0E5E                                    u2601 0B66  
                                  u1801 1B4E                                    u2441 164E  
                                  u3241 1146                                    u3161 06BA  
                                  u3081 0598                                    u2290 0FAA  
                                  u2530 0E7C                                    u2610 0B98  
                                  u1810 128E                                    u2370 1780  
                                  u2450 1684                                    u3250 1178  
                                  u3170 06E6                                    u3090 05C2  
                                  u2291 0FA6                                    u2531 0E78  
                                  u2611 0B94                                    u2371 177C  
                                  u2451 1680                                    u3251 1174  
                                  u3171 06E2                                    u3091 05BE  
                                  u1900 17FA                                    u2268 0F58  
                                  u2540 0E96                                    u2620 0BBC  
                                  u1820 129E                                    u2380 179E  
                                  u2700 08C8                                    u2460 1694  
                                  u3260 11AC                                    u3180 0714  
                                  u1901 17F6                                    u2541 0E92  
                                  u2621 0BB8                                    u1821 129A  
                                  u2381 179A                                    u2701 08C4  
                                  u2461 1690                                    u3261 11A8  
                                  u3181 070E                                    u1910 1A38  
                                  u2470 1ACC                                    u2550 0EB0  
                                  u2630 0BCE                                    u1830 12C4  
                                  u2390 19CE                                    u2710 08F2  
                                  u3270 11C8                                    u3190 0716  
                                  u1911 1A34                                    u2471 1AC8  
                                  u2551 0EAC                                    u2631 0BCA  
                                  u2391 19CA                                    u2711 08EE  
                                  u3271 11C4                                    u1920 15C0  
                                  u2560 0ECE                                    u2480 0DF4  
                                  u2640 0BFA                                    u1840 12D8  
                                  u2800 0A34                                    u2720 091A  
                                  u1921 15B8                                    u2561 0ECA  
                                  u2481 0DF0                                    u2641 0BF6  
                                  u1841 12D4                                    u1817 1284  
                                  u2801 0A30                                    u2721 0916  
                                  u2570 10D8                                    u1850 1BA6  
                                  u2490 0E14                                    u2650 0C20  
                                  u2810 0A62                                    u2730 0946  
                                  u2571 10D4                                    u1851 1BA2  
                                  u2491 0E10                                    u2651 0C1C  
                                  u2811 0A5E                                    u2731 0942  
                                  u1940 15DE                                    u2660 0C38  
                                  u2580 0B14                                    u1860 1C44  
                                  u2820 0A92                                    u2740 095C  
                                  u2900 01D4                                    u1941 15D6  
                                  u2661 0C34                                    u2581 0B10  
                                  u1837 12BA                                    u1861 1C40  
                                  u2821 0A8E                                    u2741 0958  
                                  u2901 01D0                                    u2590 0B40  
                                  u1790 1C5C                                    u1870 1BE0  
                                  u2750 096C                                    u2670 088A  
                                  u2910 01EA                                    u2830 003A  
                                  u2591 0B3C                                    u1791 1C54  
                                  u1871 1BDC                                    u2751 0968  
                                  u2671 0886                                    u2911 01E6  
                                  u2831 0036                                    u1960 15FE  
                                  u1880 17B8                                    u2760 09B0  
                                  u2680 089E                                    u2920 01FE  
                                  u2840 0054                                    u1961 15F6  
                                  u1881 17B0                                    u2761 09AC  
                                  u2681 089A                                    u2921 01FA  
                                  u2841 0050                                    u1938 15C2  
                                  u2770 09C8                                    u2690 08B8  
                                  u2930 0230                                    u2850 0070  
                                  u2771 09C4                                    u2691 08B4  
                                  u2931 022C                                    u2851 006C  
                                  u1980 1620                                    u2780 09FC  
                                  u2940 0244                                    u2860 008C  
                                  u1981 1618                                    u2781 09F8  
                                  u2941 0240                                    u2861 0088  
                                  u1958 15E0                                    u1798 1C5E  
                                  u2790 0A1C                                    u2950 0286  
                                  u2870 00E8                                    u2791 0A18  
                                  u2951 0282                                    u2871 00E4  
                                  u2960 029A                                    u2880 0124  
                                  u2961 0296                                    u2881 0120  
                                  u1978 1600                                    u1898 17BA  
                                  u2970 02B0                                    u2890 0198  
                                  u2971 02AC                                    u2891 0194  
                                  u2980 02D8                                    u2981 02D4  
                                  u1998 1622                                    u2990 0300  
                                  i1l47 001E                                    u2991 02FC  
                                  i2l42 1CA8                                    i2l76 1C94  
                                  _TMR0 0FD6                setLEDIntensity@userIndex 0055  
                            _ActualLeds 003D                                    _Tics 000B  
                 _showAllConfigurations 1728                                    _Rows 0026  
                      motor_datos@state 001A                                    _main 18F6  
                                  fsr0h 0FEA                                    fsr1h 0FE2  
                                  indf0 0FEF                                    fsr2h 0FDA  
                                  fsr0l 0FE9                                    indf1 0FE7  
                                  indf2 0FDF                                    fsr1l 0FE1  
                                  fsr2l 0FD9                                    btemp 007C  
                       __end_of_TI_Init 1ADE                                    prodh 0FF4  
                                  prodl 0FF3                                    start 0026  
                       __end_of_CantaIR 1B10                         __end_of_HighRSI 1CAC  
                         LcInit@columns 0068                      setCurrentUser@UID0 0063  
                    setCurrentUser@UID1 005F                      setCurrentUser@UID2 0060  
                    setCurrentUser@UID3 0061                      setCurrentUser@UID4 0062  
                          ___param_bank 0000                            ?_initTeclado 0052  
                         processBit@val 0055                             Espera@Timer 0060  
                                 ?_main 0052                                   STR_10 1FF8  
                                 STR_11 1FC8                                   STR_12 1FA7  
                                 STR_13 1FFD                                   STR_14 1FF8  
                                 _T0CON 0FD5                                   _RCREG 0FAE  
                                 _RCSTA 0FAB                                   _SPBRG 0FAF  
                                 _PORTD 0F83                                   _TRISA 0F92  
                                 _TRISD 0F95                                   _TRISE 0F96  
                                 _TXREG 0FAD                                   _TXSTA 0FAC  
                  __end_of_getActualUID 141A                                   _Filas 003C  
                                 _Timer 0049                         motor_RFID@irqEn 0035  
                                 _index 001B                         motor_RFID@unLen 0011  
                          _TI_ResetTics 1BA8                                   _tecla 003A  
                       motor_RFID@value 0027                         motor_RFID@state 0037  
                                 _timer 0051                                   _state 0039  
                       setLed@userIndex 0015                     motor_Read@bit_count 004B  
                                 tablat 0FF5                                   ttemp5 007D  
                                 ttemp6 0080                                   ttemp7 0084  
                        _saveHourToData 19BE                                   status 0FD8  
                                 wtemp8 007D                      Terminal_SendChar@c 0056  
                      __end_of_GetTecla 1728                 EscriuPrimeraOrdre@ordre 0054  
                ??_Terminal_ReceiveChar 0053                         __initialization 14A2  
                          __end_of_main 193A                          _setCurrentUser 1B10  
                           ?_RSI_Timer0 0052                          TI_Init@counter 0053  
                           ?_TI_GetTics 0053                   _motor_StartSendString 1BCC  
                        _controlLED$937 0054                                  ??_main 006F  
                         __activetblptr 0002                                  _ADCON1 0FC1  
                             ??_TI_Init 0053                  ?_showAllConfigurations 0052  
                __end_of_saveHourToData 19FC                               ??_CantaIR 0055  
                Terminal_SendString@str 0057                                  i2l2090 1C88  
                                i2l2086 1C7E                                  i2l2088 1C86  
                                i2l2814 1C96                                  i2l2816 1CA4  
                         ??_WaitForBusy 0068                                  _TMR0IF 7F92  
                             ??_HighRSI 0052                       checkUserUID@match 0057  
                                _LcInit 0FE2                   __end_of_getActualLeds 197E  
                      __end_of_delay_us 1BA8                          getActualLeds@i 0054  
                                _Espera 19FC                                  _LowRSI 0018  
                __end_of_setCurrentUser 1B3A                                  _RowAct 0024  
                                _Timers 0080                      motor_datos@pointer 0019  
                      __end_of_initRFID 0ED0                      motorTerminal@index 001E  
                      __end_of_initData 1C0E                        __end_of_initLeds 1CF2  
                    motorTerminal@state 001F                                  _keymap 1EB5  
                                clear_0 1508                                  clear_1 1514  
                                _setLed 1A3A                         printfUID@buffer 0094  
                          ?_motor_Write 005A                                  isa$std 0001  
                          __pdataCOMRAM 006F                            __mediumconst 1E92  
                       _setLEDIntensity 18B0                                  tblptrh 0FF7  
                                tblptrl 0FF6                                  tblptru 0FF8  
                 __end_of_Terminal_Init 1CE4                  motor_RFID@differentUID 0066  
                       ?_saveHourToData 0053                            _checkUserUID 11CA  
                            __accesstop 0080                 __end_of__initialization 151A  
                       delay_us@howMany 0053                           ___rparam_used 0001  
                         checkUserUID@i 0058                           checkUserUID@j 0059  
                         setLed@modeLED 0017                         ?_setCurrentUser 005F  
                        __pcstackCOMRAM 0052                     __end_of_WaitForBusy 1CD4  
                          __pidataBANK0 1C0E                            __pidataBANK1 197E  
                ?_motor_StartSendString 0057                    TI_NewTimer@Comptador 0055  
           motor_RFID@operation_pending 0029                        _motor_SendString 1264  
                   processBit@bit_count 0056                       printLedConfig@hex 1E93  
                             ?_GetTecla 0052                            ?_TI_NewTimer 0053  
                            __pbssBANK0 0080                             setLed@tecla 005A  
                 __end_of_motorTerminal 0AFA                                 ?_LcInit 0068  
                         _CantaPartAlta 15AC                  TI_NewTimer@TimerHandle 0053  
                               ?_Espera 0060                                 ?_LowRSI 0052  
                          _getActualUID 1390                         processBit@state 0057  
                   _timer@TAD_LEDS$F931 0048                 TI_ResetTics@TimerHandle 0053  
                         _writeColumnas 1B60                                 _BAUDCON 0FB8  
                               ?_setLed 0052                 __end_of_setLEDIntensity 18F6  
                        _sending_string 0020               __end_ofprintLedConfig@hex 1EA4  
                       motor_SendChar@c 0056                                 LcInit@i 006A  
                             ?_delay_us 0052                         getActualUID@UID 0053  
                            ??_GetTecla 0053                       _Terminal_SendChar 1C2C  
                               _TI_Init 1AAA                      ?_Terminal_SendChar 0052  
                               _CantaIR 1ADE                               ?_initRFID 0052  
                             ?_initData 0052                               ?_initLeds 0052  
                               _HighRSI 0008                              _controlLED 1630  
                           _WaitForBusy 1CC0                          ?_CantaPartAlta 0052  
                               _Columns 0025                     motor_datos@lastChar 0018  
                     motor_RFID@TagType 0030                     ??_Terminal_SendChar 0056  
                               __Hparam 0000                                 __Lparam 0000  
                          ??_RSI_Timer0 0052                          ?_writeColumnas 0052  
                          ??_TI_GetTics 0057                       motor_RFID@allZero 002E  
                               __pcinit 14A2                                 __ramtop 0200  
                     motor_RFID@_status 0031                                 __ptext0 18F6  
                               __ptext1 002A                                 __ptext2 1B10  
                               __ptext3 10DA                                 __ptext4 193A  
                               __ptext5 1630                                 __ptext6 087A  
                               __ptext7 1728                                 __ptext8 1A74  
                               __ptext9 1C2C                           ?_motorTeclado 0052  
                   motorTerminal@opcion 0064                               CantaIR@IR 0055  
                     __end_of_initPorts 1D08               __end_of_Terminal_SendChar 1C4A  
                     motor_RFID@waitIRq 0034                motorTerminal@currentUser 005F  
                            ??_delay_us 0053                 ??_showAllConfigurations 0059  
                               _str_ptr 000F                          __pintcode_body 1C96  
                           motor_LEDs@i 0069                    end_of_initialization 151A  
                           motor_RFID@i 0032                             motor_RFID@n 0033  
                      controlLED@estado 0053                              ??_initRFID 005E  
                            ??_initData 0053                      __end_of_RSI_Timer0 1C96  
                            ??_initLeds 0056                           __Lmediumconst 1E92  
                               int_func 1C96                      __end_of_TI_GetTics 18B0  
                    saveHourToData@hour 0053    __end_ofshowAllConfigurations@userStr 1ED1  
          showAllConfigurations@userStr 1ECB                         motor_Write@addr 005B  
                     __end_of_printfUID 0DB0                              _motor_LEDs 10DA  
                            _motor_RFID 002A                                 postdec1 0FE5  
                            _motor_Read 0ED0                                 postinc0 0FEE  
                               postinc1 0FE6                                 postinc2 0FDE  
                showAllConfigurations@i 005A                  showAllConfigurations@j 0059  
                      ?_setLEDIntensity 0053                          ??_motorTeclado 0060  
                             _PORTCbits 0F82                              _processBit 17A0  
                   _Terminal_SendString 1A74                   TI_GetTics@TimerHandle 005F  
                        _motor_RFID$556 006C                        ??_saveHourToData 0054  
                             _TRISBbits 0F93                               _TRISCbits 0F94  
                             _TRISEbits 0F96                              _state_read 0050  
                        setLed@ledIndex 0016                         ??_CantaPartAlta 0053  
__end_ofshowAllConfigurations@configStr 1ECB          showAllConfigurations@configStr 1EC1  
                      ??_setCurrentUser 0063                             ?_controlLED 0053  
              motor_StartSendString@str 0057                __end_of_motor_SendString 12FA  
                  ?_Terminal_SendString 0057                          __end_of_LcInit 10DA  
                   controlLED@ledActual 0056                 ??_motor_StartSendString 0059  
                       ??_writeColumnas 0053                          __end_of_Espera 1A3A  
                        __end_of_LowRSI 0026            __end_of_Terminal_RXAvailable 1CC0  
            __end_of_EscriuPrimeraOrdre 1390                           __pidataCOMRAM 1CF2  
             motor_Read@timeout_counter 0013                          _motor_Read$522 005C  
                        motor_RFID@addr 0028                          motor_RFID@flag 006E  
                             _ColumnAct 0023                          __end_of_keymap 1EC1  
                        __end_of_setLed 1A74                         saveHourToData@i 0054  
                     getActualLeds@leds 0053                     start_initialization 14A2  
                        _motor_SendChar 1B3A                      motor_Read@ucResult 0038  
          __end_of_Terminal_TXAvailable 1C66                   motor_Read@MAX_TIMEOUT 0076  
                 ??_Terminal_SendString 0059                                ??_LcInit 0069  
                         getActualUID@i 0054                                ??_Espera 0064  
                              ??_LowRSI 0052                             ?_motor_LEDs 0052  
                           ?_motor_RFID 0052                       motorTerminal@hour 0078  
                           ?_motor_Read 0052                           ??_initTeclado 0056  
                           __pdataBANK0 00A8                             __pdataBANK1 0100  
                              ??_setLed 005A                             ?_processBit 0055  
                __end_of_motor_SendChar 1B60                             __pbssCOMRAM 0001  
                         ?_TI_ResetTics 0052                        motor_Read@ucAddr 004A  
                              ?_TI_Init 0052                                ?_CantaIR 0052  
                        _CantaPartBaixa 1528                                ?_HighRSI 0052  
                          ?_WaitForBusy 0052                    __end_of_motorTeclado 0C7E  
                        motor_Read@addr 005B                     motor_RFID@fifoLevel 002B  
                         _getActualLeds 193A                               __pintcode 0008  
                         __pmediumconst 1E92                               _colValues 0073  
                       CantaPartBaixa@c 0054                             __pintcodelo 0018  
                    motor_Write@ucValue 004C                             __smallconst 1E92  
                   __end_of_initTeclado 1C7E                         ?_motor_SendChar 0052  
                        ??_TI_ResetTics 0053                    processBit@next_state 0058  
                             _initPorts 1D00           __end_of_showAllConfigurations 17A0  
                __end_of_CantaPartBaixa 15AC                           _Terminal_Init 1CD4  
                  _Terminal_RXAvailable 1CAC                      motor_LEDs@lastTics 0007  
                              _LATBbits 0F8A                                _LATCbits 0F8B  
                              _LATEbits 0F8D                               delay_us@x 0054  
                  motor_Write@bit_count 004E                          ?_getActualLeds 0053  
                       _hashtag_pressed 0021                                i2u169_40 1CA4  
                              i2u169_41 1CA0                                _PIR1bits 0F9E  
                 motor_RFID@lastBitsVal 002C                               _printfUID 0C7E  
                         ??_motor_Write 005B                    _Terminal_TXAvailable 1C4A  
                          GetTecla@fila 0056                               _state_str 0022  
                            printfUID@i 005D                  motor_RFID@tempRegValue 002D  
                              Espera@ms 0062                   motor_LEDs@currentTics 0065  
                              _GetTecla 16AE            __end_of_Terminal_ReceiveChar 1D12  
                            ?_initPorts 0052                           motor_RFID@UID 0001  
                        ?_Terminal_Init 0052                               copy_data0 14B6  
                             copy_data1 14D6                               copy_data2 14F6  
                       ?_CantaPartBaixa 0052                                _Columnas 003B  
                 ?_Terminal_RXAvailable 0052                           ?_checkUserUID 0052  
                 motor_RFID@currentUser 0067                            ??_controlLED 0054  
                             initData@i 0053                           _motorTerminal 087A  
                  __end_ofprintfUID@hex 1EB5                       ?_motor_SendString 0052  
                              __Hrparam 0000                                __Lrparam 0000  
                    ??_motor_SendString 0057           __end_of_motor_StartSendString 1BEE  
                            ?_printfUID 0059                             _initTeclado 1C66  
                 ?_Terminal_TXAvailable 0053                      motor_RFID@checksum 002F  
                    __end_of_controlLED 16AE                             _currentTime 006F  
                           _currentUser 0043                     __end_of_motor_Write 14A2  
                              _delay_us 1B84                                __ptext10 19BE  
                              __ptext11 0C7E                      _EscriuPrimeraOrdre 12FA  
                              __ptext20 1B60                                __ptext12 1BCC  
                              __ptext21 1A3A                                __ptext13 1264  
                              __ptext30 17A0                                __ptext22 18B0  
                              __ptext14 1B3A                                __ptext31 1B84  
                              __ptext23 11CA                                __ptext15 1C4A  
                              __ptext40 1BA8                                __ptext32 1D00  
                              __ptext24 1D08                                __ptext16 1390  
                              __ptext41 1864                                __ptext33 1CE4  
                              __ptext25 16AE                                __ptext17 1D0E  
                              __ptext42 180E                                __ptext34 1BEE  
                              __ptext26 1C66                                __ptext18 1CAC  
                              __ptext43 12FA                                __ptext35 1CD4  
                              __ptext27 0DB0                                __ptext19 0AFA  
                              __ptext44 1ADE                                __ptext36 1AAA  
                              __ptext28 141A                                __ptext45 1528  
                              __ptext37 0FE2                                __ptext29 0ED0  
                              __ptext46 15AC                                __ptext38 1CC0  
                              __ptext39 19FC                                __ptext49 1C7E  
                         ??_TI_NewTimer 0054                          CantaPartAlta@c 0054  
                     motor_Write@ucAddr 004D                          ??_checkUserUID 0053  
                              _initRFID 0DB0                                _initData 1BEE  
                              _initLeds 1CE4                         ??_getActualLeds 0054  
                   ?_EscriuPrimeraOrdre 0052                          ?_motorTerminal 0052  
                 __end_of_CantaPartAlta 1630                                _new_user 001C  
                         ?_getActualUID 0053                            ??_motor_LEDs 0060  
                          ??_motor_RFID 0064                                isa$xinst 0000  
                          ??_motor_Read 005A                    __end_of_TI_ResetTics 1BCC  
                              int$flags 007C                   __end_of_writeColumnas 1B84  
                    motor_RFID@substate 0036                                _userUIDs 0100  
                     controlLED@ledBits 00C0                    ??_EscriuPrimeraOrdre 0053  
                            LcInit@rows 0069                            ??_processBit 0059  
                          _motorTeclado 0AFA                              _INTCONbits 0FF2  
                       ??_Terminal_Init 0053               TI_GetTics@CopiaTicsActual 005B  
                     _new_configuration 001D                             ??_initPorts 0053  
                ??_Terminal_RXAvailable 0053                          _configurations 00A8  
                     _hashtag_pressed3s 1D08             __end_of_Terminal_SendString 1AAA  
                    __end_of_motor_LEDs 11CA                      __end_of_motor_RFID 087A  
                              intlevel1 0000                                intlevel2 0000  
                    __end_of_motor_Read 0FE2                      ?_hashtag_pressed3s 0052  
                      motor_Write@value 005A                     __end_of_TI_NewTimer 1864  
                        ??_getActualUID 0054                      __end_of_processBit 180E  
                   ??_hashtag_pressed3s 0053                  ??_Terminal_TXAvailable 0055  
                  _Terminal_ReceiveChar 1D0E                             ??_printfUID 005A  
                      ??_motor_SendChar 0056                             _motor_Write 141A  
                motor_RFID@backBitsCalc 002A               __end_of_hashtag_pressed3s 1D0E  
                       ??_motorTerminal 005F                 setLEDIntensity@ledIndex 0053  
                  printfUID@currentUser 0059                          initRFID@regVal 005E  
                     ??_setLEDIntensity 0055                         GetTecla@columna 0055  

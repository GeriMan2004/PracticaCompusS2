

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Mar 11 17:29:12 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 05/12/2024 GMT
    78                           ; 
    79                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F4321 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000FE0                     bsr             equ	4064
   112   000FE9                     fsr0            equ	4073
   113   000FEA                     fsr0h           equ	4074
   114   000FE9                     fsr0l           equ	4073
   115   000FE1                     fsr1            equ	4065
   116   000FE2                     fsr1h           equ	4066
   117   000FE1                     fsr1l           equ	4065
   118   000FD9                     fsr2            equ	4057
   119   000FDA                     fsr2h           equ	4058
   120   000FD9                     fsr2l           equ	4057
   121   000FEF                     indf0           equ	4079
   122   000FE7                     indf1           equ	4071
   123   000FDF                     indf2           equ	4063
   124   000FF2                     intcon          equ	4082
   125   000000                     nvmcon          equ	0
   126   000FF9                     pcl             equ	4089
   127   000FFA                     pclath          equ	4090
   128   000FFB                     pclatu          equ	4091
   129   000FEB                     plusw0          equ	4075
   130   000FE3                     plusw1          equ	4067
   131   000FDB                     plusw2          equ	4059
   132   000FED                     postdec0        equ	4077
   133   000FE5                     postdec1        equ	4069
   134   000FDD                     postdec2        equ	4061
   135   000FEE                     postinc0        equ	4078
   136   000FE6                     postinc1        equ	4070
   137   000FDE                     postinc2        equ	4062
   138   000FEC                     preinc0         equ	4076
   139   000FE4                     preinc1         equ	4068
   140   000FDC                     preinc2         equ	4060
   141   000FF3                     prod            equ	4083
   142   000FF4                     prodh           equ	4084
   143   000FF3                     prodl           equ	4083
   144   000FD8                     status          equ	4056
   145   000FF5                     tablat          equ	4085
   146   000FF6                     tblptr          equ	4086
   147   000FF7                     tblptrh         equ	4087
   148   000FF6                     tblptrl         equ	4086
   149   000FF8                     tblptru         equ	4088
   150   000FFD                     tosl            equ	4093
   151   000FE8                     wreg            equ	4072
   152   000F80                     PORTA           equ	3968	;# 
   153   000F81                     PORTB           equ	3969	;# 
   154   000F82                     PORTC           equ	3970	;# 
   155   000F83                     PORTD           equ	3971	;# 
   156   000F84                     PORTE           equ	3972	;# 
   157   000F89                     LATA            equ	3977	;# 
   158   000F8A                     LATB            equ	3978	;# 
   159   000F8B                     LATC            equ	3979	;# 
   160   000F8C                     LATD            equ	3980	;# 
   161   000F8D                     LATE            equ	3981	;# 
   162   000F92                     TRISA           equ	3986	;# 
   163   000F92                     DDRA            equ	3986	;# 
   164   000F93                     TRISB           equ	3987	;# 
   165   000F93                     DDRB            equ	3987	;# 
   166   000F94                     TRISC           equ	3988	;# 
   167   000F94                     DDRC            equ	3988	;# 
   168   000F95                     TRISD           equ	3989	;# 
   169   000F95                     DDRD            equ	3989	;# 
   170   000F96                     TRISE           equ	3990	;# 
   171   000F96                     DDRE            equ	3990	;# 
   172   000F9B                     OSCTUNE         equ	3995	;# 
   173   000F9D                     PIE1            equ	3997	;# 
   174   000F9E                     PIR1            equ	3998	;# 
   175   000F9F                     IPR1            equ	3999	;# 
   176   000FA0                     PIE2            equ	4000	;# 
   177   000FA1                     PIR2            equ	4001	;# 
   178   000FA2                     IPR2            equ	4002	;# 
   179   000FA6                     EECON1          equ	4006	;# 
   180   000FA7                     EECON2          equ	4007	;# 
   181   000FA8                     EEDATA          equ	4008	;# 
   182   000FA9                     EEADR           equ	4009	;# 
   183   000FAB                     RCSTA           equ	4011	;# 
   184   000FAB                     RCSTA1          equ	4011	;# 
   185   000FAC                     TXSTA           equ	4012	;# 
   186   000FAC                     TXSTA1          equ	4012	;# 
   187   000FAD                     TXREG           equ	4013	;# 
   188   000FAD                     TXREG1          equ	4013	;# 
   189   000FAE                     RCREG           equ	4014	;# 
   190   000FAE                     RCREG1          equ	4014	;# 
   191   000FAF                     SPBRG           equ	4015	;# 
   192   000FAF                     SPBRG1          equ	4015	;# 
   193   000FB0                     SPBRGH          equ	4016	;# 
   194   000FB1                     T3CON           equ	4017	;# 
   195   000FB2                     TMR3            equ	4018	;# 
   196   000FB2                     TMR3L           equ	4018	;# 
   197   000FB3                     TMR3H           equ	4019	;# 
   198   000FB4                     CMCON           equ	4020	;# 
   199   000FB5                     CVRCON          equ	4021	;# 
   200   000FB6                     ECCP1AS         equ	4022	;# 
   201   000FB7                     ECCP1DEL        equ	4023	;# 
   202   000FB7                     PWM1CON         equ	4023	;# 
   203   000FB8                     BAUDCON         equ	4024	;# 
   204   000FB8                     BAUDCTL         equ	4024	;# 
   205   000FBA                     CCP2CON         equ	4026	;# 
   206   000FBB                     CCPR2           equ	4027	;# 
   207   000FBB                     CCPR2L          equ	4027	;# 
   208   000FBC                     CCPR2H          equ	4028	;# 
   209   000FBD                     CCP1CON         equ	4029	;# 
   210   000FBD                     ECCP1CON        equ	4029	;# 
   211   000FBE                     CCPR1           equ	4030	;# 
   212   000FBE                     CCPR1L          equ	4030	;# 
   213   000FBF                     CCPR1H          equ	4031	;# 
   214   000FC0                     ADCON2          equ	4032	;# 
   215   000FC1                     ADCON1          equ	4033	;# 
   216   000FC2                     ADCON0          equ	4034	;# 
   217   000FC3                     ADRES           equ	4035	;# 
   218   000FC3                     ADRESL          equ	4035	;# 
   219   000FC4                     ADRESH          equ	4036	;# 
   220   000FC5                     SSPCON2         equ	4037	;# 
   221   000FC6                     SSPCON1         equ	4038	;# 
   222   000FC7                     SSPSTAT         equ	4039	;# 
   223   000FC8                     SSPADD          equ	4040	;# 
   224   000FC9                     SSPBUF          equ	4041	;# 
   225   000FCA                     T2CON           equ	4042	;# 
   226   000FCB                     PR2             equ	4043	;# 
   227   000FCB                     MEMCON          equ	4043	;# 
   228   000FCC                     TMR2            equ	4044	;# 
   229   000FCD                     T1CON           equ	4045	;# 
   230   000FCE                     TMR1            equ	4046	;# 
   231   000FCE                     TMR1L           equ	4046	;# 
   232   000FCF                     TMR1H           equ	4047	;# 
   233   000FD0                     RCON            equ	4048	;# 
   234   000FD1                     WDTCON          equ	4049	;# 
   235   000FD2                     HLVDCON         equ	4050	;# 
   236   000FD2                     LVDCON          equ	4050	;# 
   237   000FD3                     OSCCON          equ	4051	;# 
   238   000FD5                     T0CON           equ	4053	;# 
   239   000FD6                     TMR0            equ	4054	;# 
   240   000FD6                     TMR0L           equ	4054	;# 
   241   000FD7                     TMR0H           equ	4055	;# 
   242   000FD8                     STATUS          equ	4056	;# 
   243   000FD9                     FSR2            equ	4057	;# 
   244   000FD9                     FSR2L           equ	4057	;# 
   245   000FDA                     FSR2H           equ	4058	;# 
   246   000FDB                     PLUSW2          equ	4059	;# 
   247   000FDC                     PREINC2         equ	4060	;# 
   248   000FDD                     POSTDEC2        equ	4061	;# 
   249   000FDE                     POSTINC2        equ	4062	;# 
   250   000FDF                     INDF2           equ	4063	;# 
   251   000FE0                     BSR             equ	4064	;# 
   252   000FE1                     FSR1            equ	4065	;# 
   253   000FE1                     FSR1L           equ	4065	;# 
   254   000FE2                     FSR1H           equ	4066	;# 
   255   000FE3                     PLUSW1          equ	4067	;# 
   256   000FE4                     PREINC1         equ	4068	;# 
   257   000FE5                     POSTDEC1        equ	4069	;# 
   258   000FE6                     POSTINC1        equ	4070	;# 
   259   000FE7                     INDF1           equ	4071	;# 
   260   000FE8                     WREG            equ	4072	;# 
   261   000FE9                     FSR0            equ	4073	;# 
   262   000FE9                     FSR0L           equ	4073	;# 
   263   000FEA                     FSR0H           equ	4074	;# 
   264   000FEB                     PLUSW0          equ	4075	;# 
   265   000FEC                     PREINC0         equ	4076	;# 
   266   000FED                     POSTDEC0        equ	4077	;# 
   267   000FEE                     POSTINC0        equ	4078	;# 
   268   000FEF                     INDF0           equ	4079	;# 
   269   000FF0                     INTCON3         equ	4080	;# 
   270   000FF1                     INTCON2         equ	4081	;# 
   271   000FF2                     INTCON          equ	4082	;# 
   272   000FF3                     PROD            equ	4083	;# 
   273   000FF3                     PRODL           equ	4083	;# 
   274   000FF4                     PRODH           equ	4084	;# 
   275   000FF5                     TABLAT          equ	4085	;# 
   276   000FF6                     TBLPTR          equ	4086	;# 
   277   000FF6                     TBLPTRL         equ	4086	;# 
   278   000FF7                     TBLPTRH         equ	4087	;# 
   279   000FF8                     TBLPTRU         equ	4088	;# 
   280   000FF9                     PCLAT           equ	4089	;# 
   281   000FF9                     PC              equ	4089	;# 
   282   000FF9                     PCL             equ	4089	;# 
   283   000FFA                     PCLATH          equ	4090	;# 
   284   000FFB                     PCLATU          equ	4091	;# 
   285   000FFC                     STKPTR          equ	4092	;# 
   286   000FFD                     TOS             equ	4093	;# 
   287   000FFD                     TOSL            equ	4093	;# 
   288   000FFE                     TOSH            equ	4094	;# 
   289   000FFF                     TOSU            equ	4095	;# 
   290   000F80                     PORTA           equ	3968	;# 
   291   000F81                     PORTB           equ	3969	;# 
   292   000F82                     PORTC           equ	3970	;# 
   293   000F83                     PORTD           equ	3971	;# 
   294   000F84                     PORTE           equ	3972	;# 
   295   000F89                     LATA            equ	3977	;# 
   296   000F8A                     LATB            equ	3978	;# 
   297   000F8B                     LATC            equ	3979	;# 
   298   000F8C                     LATD            equ	3980	;# 
   299   000F8D                     LATE            equ	3981	;# 
   300   000F92                     TRISA           equ	3986	;# 
   301   000F92                     DDRA            equ	3986	;# 
   302   000F93                     TRISB           equ	3987	;# 
   303   000F93                     DDRB            equ	3987	;# 
   304   000F94                     TRISC           equ	3988	;# 
   305   000F94                     DDRC            equ	3988	;# 
   306   000F95                     TRISD           equ	3989	;# 
   307   000F95                     DDRD            equ	3989	;# 
   308   000F96                     TRISE           equ	3990	;# 
   309   000F96                     DDRE            equ	3990	;# 
   310   000F9B                     OSCTUNE         equ	3995	;# 
   311   000F9D                     PIE1            equ	3997	;# 
   312   000F9E                     PIR1            equ	3998	;# 
   313   000F9F                     IPR1            equ	3999	;# 
   314   000FA0                     PIE2            equ	4000	;# 
   315   000FA1                     PIR2            equ	4001	;# 
   316   000FA2                     IPR2            equ	4002	;# 
   317   000FA6                     EECON1          equ	4006	;# 
   318   000FA7                     EECON2          equ	4007	;# 
   319   000FA8                     EEDATA          equ	4008	;# 
   320   000FA9                     EEADR           equ	4009	;# 
   321   000FAB                     RCSTA           equ	4011	;# 
   322   000FAB                     RCSTA1          equ	4011	;# 
   323   000FAC                     TXSTA           equ	4012	;# 
   324   000FAC                     TXSTA1          equ	4012	;# 
   325   000FAD                     TXREG           equ	4013	;# 
   326   000FAD                     TXREG1          equ	4013	;# 
   327   000FAE                     RCREG           equ	4014	;# 
   328   000FAE                     RCREG1          equ	4014	;# 
   329   000FAF                     SPBRG           equ	4015	;# 
   330   000FAF                     SPBRG1          equ	4015	;# 
   331   000FB0                     SPBRGH          equ	4016	;# 
   332   000FB1                     T3CON           equ	4017	;# 
   333   000FB2                     TMR3            equ	4018	;# 
   334   000FB2                     TMR3L           equ	4018	;# 
   335   000FB3                     TMR3H           equ	4019	;# 
   336   000FB4                     CMCON           equ	4020	;# 
   337   000FB5                     CVRCON          equ	4021	;# 
   338   000FB6                     ECCP1AS         equ	4022	;# 
   339   000FB7                     ECCP1DEL        equ	4023	;# 
   340   000FB7                     PWM1CON         equ	4023	;# 
   341   000FB8                     BAUDCON         equ	4024	;# 
   342   000FB8                     BAUDCTL         equ	4024	;# 
   343   000FBA                     CCP2CON         equ	4026	;# 
   344   000FBB                     CCPR2           equ	4027	;# 
   345   000FBB                     CCPR2L          equ	4027	;# 
   346   000FBC                     CCPR2H          equ	4028	;# 
   347   000FBD                     CCP1CON         equ	4029	;# 
   348   000FBD                     ECCP1CON        equ	4029	;# 
   349   000FBE                     CCPR1           equ	4030	;# 
   350   000FBE                     CCPR1L          equ	4030	;# 
   351   000FBF                     CCPR1H          equ	4031	;# 
   352   000FC0                     ADCON2          equ	4032	;# 
   353   000FC1                     ADCON1          equ	4033	;# 
   354   000FC2                     ADCON0          equ	4034	;# 
   355   000FC3                     ADRES           equ	4035	;# 
   356   000FC3                     ADRESL          equ	4035	;# 
   357   000FC4                     ADRESH          equ	4036	;# 
   358   000FC5                     SSPCON2         equ	4037	;# 
   359   000FC6                     SSPCON1         equ	4038	;# 
   360   000FC7                     SSPSTAT         equ	4039	;# 
   361   000FC8                     SSPADD          equ	4040	;# 
   362   000FC9                     SSPBUF          equ	4041	;# 
   363   000FCA                     T2CON           equ	4042	;# 
   364   000FCB                     PR2             equ	4043	;# 
   365   000FCB                     MEMCON          equ	4043	;# 
   366   000FCC                     TMR2            equ	4044	;# 
   367   000FCD                     T1CON           equ	4045	;# 
   368   000FCE                     TMR1            equ	4046	;# 
   369   000FCE                     TMR1L           equ	4046	;# 
   370   000FCF                     TMR1H           equ	4047	;# 
   371   000FD0                     RCON            equ	4048	;# 
   372   000FD1                     WDTCON          equ	4049	;# 
   373   000FD2                     HLVDCON         equ	4050	;# 
   374   000FD2                     LVDCON          equ	4050	;# 
   375   000FD3                     OSCCON          equ	4051	;# 
   376   000FD5                     T0CON           equ	4053	;# 
   377   000FD6                     TMR0            equ	4054	;# 
   378   000FD6                     TMR0L           equ	4054	;# 
   379   000FD7                     TMR0H           equ	4055	;# 
   380   000FD8                     STATUS          equ	4056	;# 
   381   000FD9                     FSR2            equ	4057	;# 
   382   000FD9                     FSR2L           equ	4057	;# 
   383   000FDA                     FSR2H           equ	4058	;# 
   384   000FDB                     PLUSW2          equ	4059	;# 
   385   000FDC                     PREINC2         equ	4060	;# 
   386   000FDD                     POSTDEC2        equ	4061	;# 
   387   000FDE                     POSTINC2        equ	4062	;# 
   388   000FDF                     INDF2           equ	4063	;# 
   389   000FE0                     BSR             equ	4064	;# 
   390   000FE1                     FSR1            equ	4065	;# 
   391   000FE1                     FSR1L           equ	4065	;# 
   392   000FE2                     FSR1H           equ	4066	;# 
   393   000FE3                     PLUSW1          equ	4067	;# 
   394   000FE4                     PREINC1         equ	4068	;# 
   395   000FE5                     POSTDEC1        equ	4069	;# 
   396   000FE6                     POSTINC1        equ	4070	;# 
   397   000FE7                     INDF1           equ	4071	;# 
   398   000FE8                     WREG            equ	4072	;# 
   399   000FE9                     FSR0            equ	4073	;# 
   400   000FE9                     FSR0L           equ	4073	;# 
   401   000FEA                     FSR0H           equ	4074	;# 
   402   000FEB                     PLUSW0          equ	4075	;# 
   403   000FEC                     PREINC0         equ	4076	;# 
   404   000FED                     POSTDEC0        equ	4077	;# 
   405   000FEE                     POSTINC0        equ	4078	;# 
   406   000FEF                     INDF0           equ	4079	;# 
   407   000FF0                     INTCON3         equ	4080	;# 
   408   000FF1                     INTCON2         equ	4081	;# 
   409   000FF2                     INTCON          equ	4082	;# 
   410   000FF3                     PROD            equ	4083	;# 
   411   000FF3                     PRODL           equ	4083	;# 
   412   000FF4                     PRODH           equ	4084	;# 
   413   000FF5                     TABLAT          equ	4085	;# 
   414   000FF6                     TBLPTR          equ	4086	;# 
   415   000FF6                     TBLPTRL         equ	4086	;# 
   416   000FF7                     TBLPTRH         equ	4087	;# 
   417   000FF8                     TBLPTRU         equ	4088	;# 
   418   000FF9                     PCLAT           equ	4089	;# 
   419   000FF9                     PC              equ	4089	;# 
   420   000FF9                     PCL             equ	4089	;# 
   421   000FFA                     PCLATH          equ	4090	;# 
   422   000FFB                     PCLATU          equ	4091	;# 
   423   000FFC                     STKPTR          equ	4092	;# 
   424   000FFD                     TOS             equ	4093	;# 
   425   000FFD                     TOSL            equ	4093	;# 
   426   000FFE                     TOSH            equ	4094	;# 
   427   000FFF                     TOSU            equ	4095	;# 
   428   000F80                     PORTA           equ	3968	;# 
   429   000F81                     PORTB           equ	3969	;# 
   430   000F82                     PORTC           equ	3970	;# 
   431   000F83                     PORTD           equ	3971	;# 
   432   000F84                     PORTE           equ	3972	;# 
   433   000F89                     LATA            equ	3977	;# 
   434   000F8A                     LATB            equ	3978	;# 
   435   000F8B                     LATC            equ	3979	;# 
   436   000F8C                     LATD            equ	3980	;# 
   437   000F8D                     LATE            equ	3981	;# 
   438   000F92                     TRISA           equ	3986	;# 
   439   000F92                     DDRA            equ	3986	;# 
   440   000F93                     TRISB           equ	3987	;# 
   441   000F93                     DDRB            equ	3987	;# 
   442   000F94                     TRISC           equ	3988	;# 
   443   000F94                     DDRC            equ	3988	;# 
   444   000F95                     TRISD           equ	3989	;# 
   445   000F95                     DDRD            equ	3989	;# 
   446   000F96                     TRISE           equ	3990	;# 
   447   000F96                     DDRE            equ	3990	;# 
   448   000F9B                     OSCTUNE         equ	3995	;# 
   449   000F9D                     PIE1            equ	3997	;# 
   450   000F9E                     PIR1            equ	3998	;# 
   451   000F9F                     IPR1            equ	3999	;# 
   452   000FA0                     PIE2            equ	4000	;# 
   453   000FA1                     PIR2            equ	4001	;# 
   454   000FA2                     IPR2            equ	4002	;# 
   455   000FA6                     EECON1          equ	4006	;# 
   456   000FA7                     EECON2          equ	4007	;# 
   457   000FA8                     EEDATA          equ	4008	;# 
   458   000FA9                     EEADR           equ	4009	;# 
   459   000FAB                     RCSTA           equ	4011	;# 
   460   000FAB                     RCSTA1          equ	4011	;# 
   461   000FAC                     TXSTA           equ	4012	;# 
   462   000FAC                     TXSTA1          equ	4012	;# 
   463   000FAD                     TXREG           equ	4013	;# 
   464   000FAD                     TXREG1          equ	4013	;# 
   465   000FAE                     RCREG           equ	4014	;# 
   466   000FAE                     RCREG1          equ	4014	;# 
   467   000FAF                     SPBRG           equ	4015	;# 
   468   000FAF                     SPBRG1          equ	4015	;# 
   469   000FB0                     SPBRGH          equ	4016	;# 
   470   000FB1                     T3CON           equ	4017	;# 
   471   000FB2                     TMR3            equ	4018	;# 
   472   000FB2                     TMR3L           equ	4018	;# 
   473   000FB3                     TMR3H           equ	4019	;# 
   474   000FB4                     CMCON           equ	4020	;# 
   475   000FB5                     CVRCON          equ	4021	;# 
   476   000FB6                     ECCP1AS         equ	4022	;# 
   477   000FB7                     ECCP1DEL        equ	4023	;# 
   478   000FB7                     PWM1CON         equ	4023	;# 
   479   000FB8                     BAUDCON         equ	4024	;# 
   480   000FB8                     BAUDCTL         equ	4024	;# 
   481   000FBA                     CCP2CON         equ	4026	;# 
   482   000FBB                     CCPR2           equ	4027	;# 
   483   000FBB                     CCPR2L          equ	4027	;# 
   484   000FBC                     CCPR2H          equ	4028	;# 
   485   000FBD                     CCP1CON         equ	4029	;# 
   486   000FBD                     ECCP1CON        equ	4029	;# 
   487   000FBE                     CCPR1           equ	4030	;# 
   488   000FBE                     CCPR1L          equ	4030	;# 
   489   000FBF                     CCPR1H          equ	4031	;# 
   490   000FC0                     ADCON2          equ	4032	;# 
   491   000FC1                     ADCON1          equ	4033	;# 
   492   000FC2                     ADCON0          equ	4034	;# 
   493   000FC3                     ADRES           equ	4035	;# 
   494   000FC3                     ADRESL          equ	4035	;# 
   495   000FC4                     ADRESH          equ	4036	;# 
   496   000FC5                     SSPCON2         equ	4037	;# 
   497   000FC6                     SSPCON1         equ	4038	;# 
   498   000FC7                     SSPSTAT         equ	4039	;# 
   499   000FC8                     SSPADD          equ	4040	;# 
   500   000FC9                     SSPBUF          equ	4041	;# 
   501   000FCA                     T2CON           equ	4042	;# 
   502   000FCB                     PR2             equ	4043	;# 
   503   000FCB                     MEMCON          equ	4043	;# 
   504   000FCC                     TMR2            equ	4044	;# 
   505   000FCD                     T1CON           equ	4045	;# 
   506   000FCE                     TMR1            equ	4046	;# 
   507   000FCE                     TMR1L           equ	4046	;# 
   508   000FCF                     TMR1H           equ	4047	;# 
   509   000FD0                     RCON            equ	4048	;# 
   510   000FD1                     WDTCON          equ	4049	;# 
   511   000FD2                     HLVDCON         equ	4050	;# 
   512   000FD2                     LVDCON          equ	4050	;# 
   513   000FD3                     OSCCON          equ	4051	;# 
   514   000FD5                     T0CON           equ	4053	;# 
   515   000FD6                     TMR0            equ	4054	;# 
   516   000FD6                     TMR0L           equ	4054	;# 
   517   000FD7                     TMR0H           equ	4055	;# 
   518   000FD8                     STATUS          equ	4056	;# 
   519   000FD9                     FSR2            equ	4057	;# 
   520   000FD9                     FSR2L           equ	4057	;# 
   521   000FDA                     FSR2H           equ	4058	;# 
   522   000FDB                     PLUSW2          equ	4059	;# 
   523   000FDC                     PREINC2         equ	4060	;# 
   524   000FDD                     POSTDEC2        equ	4061	;# 
   525   000FDE                     POSTINC2        equ	4062	;# 
   526   000FDF                     INDF2           equ	4063	;# 
   527   000FE0                     BSR             equ	4064	;# 
   528   000FE1                     FSR1            equ	4065	;# 
   529   000FE1                     FSR1L           equ	4065	;# 
   530   000FE2                     FSR1H           equ	4066	;# 
   531   000FE3                     PLUSW1          equ	4067	;# 
   532   000FE4                     PREINC1         equ	4068	;# 
   533   000FE5                     POSTDEC1        equ	4069	;# 
   534   000FE6                     POSTINC1        equ	4070	;# 
   535   000FE7                     INDF1           equ	4071	;# 
   536   000FE8                     WREG            equ	4072	;# 
   537   000FE9                     FSR0            equ	4073	;# 
   538   000FE9                     FSR0L           equ	4073	;# 
   539   000FEA                     FSR0H           equ	4074	;# 
   540   000FEB                     PLUSW0          equ	4075	;# 
   541   000FEC                     PREINC0         equ	4076	;# 
   542   000FED                     POSTDEC0        equ	4077	;# 
   543   000FEE                     POSTINC0        equ	4078	;# 
   544   000FEF                     INDF0           equ	4079	;# 
   545   000FF0                     INTCON3         equ	4080	;# 
   546   000FF1                     INTCON2         equ	4081	;# 
   547   000FF2                     INTCON          equ	4082	;# 
   548   000FF3                     PROD            equ	4083	;# 
   549   000FF3                     PRODL           equ	4083	;# 
   550   000FF4                     PRODH           equ	4084	;# 
   551   000FF5                     TABLAT          equ	4085	;# 
   552   000FF6                     TBLPTR          equ	4086	;# 
   553   000FF6                     TBLPTRL         equ	4086	;# 
   554   000FF7                     TBLPTRH         equ	4087	;# 
   555   000FF8                     TBLPTRU         equ	4088	;# 
   556   000FF9                     PCLAT           equ	4089	;# 
   557   000FF9                     PC              equ	4089	;# 
   558   000FF9                     PCL             equ	4089	;# 
   559   000FFA                     PCLATH          equ	4090	;# 
   560   000FFB                     PCLATU          equ	4091	;# 
   561   000FFC                     STKPTR          equ	4092	;# 
   562   000FFD                     TOS             equ	4093	;# 
   563   000FFD                     TOSL            equ	4093	;# 
   564   000FFE                     TOSH            equ	4094	;# 
   565   000FFF                     TOSU            equ	4095	;# 
   566   000F80                     PORTA           equ	3968	;# 
   567   000F81                     PORTB           equ	3969	;# 
   568   000F82                     PORTC           equ	3970	;# 
   569   000F83                     PORTD           equ	3971	;# 
   570   000F84                     PORTE           equ	3972	;# 
   571   000F89                     LATA            equ	3977	;# 
   572   000F8A                     LATB            equ	3978	;# 
   573   000F8B                     LATC            equ	3979	;# 
   574   000F8C                     LATD            equ	3980	;# 
   575   000F8D                     LATE            equ	3981	;# 
   576   000F92                     TRISA           equ	3986	;# 
   577   000F92                     DDRA            equ	3986	;# 
   578   000F93                     TRISB           equ	3987	;# 
   579   000F93                     DDRB            equ	3987	;# 
   580   000F94                     TRISC           equ	3988	;# 
   581   000F94                     DDRC            equ	3988	;# 
   582   000F95                     TRISD           equ	3989	;# 
   583   000F95                     DDRD            equ	3989	;# 
   584   000F96                     TRISE           equ	3990	;# 
   585   000F96                     DDRE            equ	3990	;# 
   586   000F9B                     OSCTUNE         equ	3995	;# 
   587   000F9D                     PIE1            equ	3997	;# 
   588   000F9E                     PIR1            equ	3998	;# 
   589   000F9F                     IPR1            equ	3999	;# 
   590   000FA0                     PIE2            equ	4000	;# 
   591   000FA1                     PIR2            equ	4001	;# 
   592   000FA2                     IPR2            equ	4002	;# 
   593   000FA6                     EECON1          equ	4006	;# 
   594   000FA7                     EECON2          equ	4007	;# 
   595   000FA8                     EEDATA          equ	4008	;# 
   596   000FA9                     EEADR           equ	4009	;# 
   597   000FAB                     RCSTA           equ	4011	;# 
   598   000FAB                     RCSTA1          equ	4011	;# 
   599   000FAC                     TXSTA           equ	4012	;# 
   600   000FAC                     TXSTA1          equ	4012	;# 
   601   000FAD                     TXREG           equ	4013	;# 
   602   000FAD                     TXREG1          equ	4013	;# 
   603   000FAE                     RCREG           equ	4014	;# 
   604   000FAE                     RCREG1          equ	4014	;# 
   605   000FAF                     SPBRG           equ	4015	;# 
   606   000FAF                     SPBRG1          equ	4015	;# 
   607   000FB0                     SPBRGH          equ	4016	;# 
   608   000FB1                     T3CON           equ	4017	;# 
   609   000FB2                     TMR3            equ	4018	;# 
   610   000FB2                     TMR3L           equ	4018	;# 
   611   000FB3                     TMR3H           equ	4019	;# 
   612   000FB4                     CMCON           equ	4020	;# 
   613   000FB5                     CVRCON          equ	4021	;# 
   614   000FB6                     ECCP1AS         equ	4022	;# 
   615   000FB7                     ECCP1DEL        equ	4023	;# 
   616   000FB7                     PWM1CON         equ	4023	;# 
   617   000FB8                     BAUDCON         equ	4024	;# 
   618   000FB8                     BAUDCTL         equ	4024	;# 
   619   000FBA                     CCP2CON         equ	4026	;# 
   620   000FBB                     CCPR2           equ	4027	;# 
   621   000FBB                     CCPR2L          equ	4027	;# 
   622   000FBC                     CCPR2H          equ	4028	;# 
   623   000FBD                     CCP1CON         equ	4029	;# 
   624   000FBD                     ECCP1CON        equ	4029	;# 
   625   000FBE                     CCPR1           equ	4030	;# 
   626   000FBE                     CCPR1L          equ	4030	;# 
   627   000FBF                     CCPR1H          equ	4031	;# 
   628   000FC0                     ADCON2          equ	4032	;# 
   629   000FC1                     ADCON1          equ	4033	;# 
   630   000FC2                     ADCON0          equ	4034	;# 
   631   000FC3                     ADRES           equ	4035	;# 
   632   000FC3                     ADRESL          equ	4035	;# 
   633   000FC4                     ADRESH          equ	4036	;# 
   634   000FC5                     SSPCON2         equ	4037	;# 
   635   000FC6                     SSPCON1         equ	4038	;# 
   636   000FC7                     SSPSTAT         equ	4039	;# 
   637   000FC8                     SSPADD          equ	4040	;# 
   638   000FC9                     SSPBUF          equ	4041	;# 
   639   000FCA                     T2CON           equ	4042	;# 
   640   000FCB                     PR2             equ	4043	;# 
   641   000FCB                     MEMCON          equ	4043	;# 
   642   000FCC                     TMR2            equ	4044	;# 
   643   000FCD                     T1CON           equ	4045	;# 
   644   000FCE                     TMR1            equ	4046	;# 
   645   000FCE                     TMR1L           equ	4046	;# 
   646   000FCF                     TMR1H           equ	4047	;# 
   647   000FD0                     RCON            equ	4048	;# 
   648   000FD1                     WDTCON          equ	4049	;# 
   649   000FD2                     HLVDCON         equ	4050	;# 
   650   000FD2                     LVDCON          equ	4050	;# 
   651   000FD3                     OSCCON          equ	4051	;# 
   652   000FD5                     T0CON           equ	4053	;# 
   653   000FD6                     TMR0            equ	4054	;# 
   654   000FD6                     TMR0L           equ	4054	;# 
   655   000FD7                     TMR0H           equ	4055	;# 
   656   000FD8                     STATUS          equ	4056	;# 
   657   000FD9                     FSR2            equ	4057	;# 
   658   000FD9                     FSR2L           equ	4057	;# 
   659   000FDA                     FSR2H           equ	4058	;# 
   660   000FDB                     PLUSW2          equ	4059	;# 
   661   000FDC                     PREINC2         equ	4060	;# 
   662   000FDD                     POSTDEC2        equ	4061	;# 
   663   000FDE                     POSTINC2        equ	4062	;# 
   664   000FDF                     INDF2           equ	4063	;# 
   665   000FE0                     BSR             equ	4064	;# 
   666   000FE1                     FSR1            equ	4065	;# 
   667   000FE1                     FSR1L           equ	4065	;# 
   668   000FE2                     FSR1H           equ	4066	;# 
   669   000FE3                     PLUSW1          equ	4067	;# 
   670   000FE4                     PREINC1         equ	4068	;# 
   671   000FE5                     POSTDEC1        equ	4069	;# 
   672   000FE6                     POSTINC1        equ	4070	;# 
   673   000FE7                     INDF1           equ	4071	;# 
   674   000FE8                     WREG            equ	4072	;# 
   675   000FE9                     FSR0            equ	4073	;# 
   676   000FE9                     FSR0L           equ	4073	;# 
   677   000FEA                     FSR0H           equ	4074	;# 
   678   000FEB                     PLUSW0          equ	4075	;# 
   679   000FEC                     PREINC0         equ	4076	;# 
   680   000FED                     POSTDEC0        equ	4077	;# 
   681   000FEE                     POSTINC0        equ	4078	;# 
   682   000FEF                     INDF0           equ	4079	;# 
   683   000FF0                     INTCON3         equ	4080	;# 
   684   000FF1                     INTCON2         equ	4081	;# 
   685   000FF2                     INTCON          equ	4082	;# 
   686   000FF3                     PROD            equ	4083	;# 
   687   000FF3                     PRODL           equ	4083	;# 
   688   000FF4                     PRODH           equ	4084	;# 
   689   000FF5                     TABLAT          equ	4085	;# 
   690   000FF6                     TBLPTR          equ	4086	;# 
   691   000FF6                     TBLPTRL         equ	4086	;# 
   692   000FF7                     TBLPTRH         equ	4087	;# 
   693   000FF8                     TBLPTRU         equ	4088	;# 
   694   000FF9                     PCLAT           equ	4089	;# 
   695   000FF9                     PC              equ	4089	;# 
   696   000FF9                     PCL             equ	4089	;# 
   697   000FFA                     PCLATH          equ	4090	;# 
   698   000FFB                     PCLATU          equ	4091	;# 
   699   000FFC                     STKPTR          equ	4092	;# 
   700   000FFD                     TOS             equ	4093	;# 
   701   000FFD                     TOSL            equ	4093	;# 
   702   000FFE                     TOSH            equ	4094	;# 
   703   000FFF                     TOSU            equ	4095	;# 
   704   000F80                     PORTA           equ	3968	;# 
   705   000F81                     PORTB           equ	3969	;# 
   706   000F82                     PORTC           equ	3970	;# 
   707   000F83                     PORTD           equ	3971	;# 
   708   000F84                     PORTE           equ	3972	;# 
   709   000F89                     LATA            equ	3977	;# 
   710   000F8A                     LATB            equ	3978	;# 
   711   000F8B                     LATC            equ	3979	;# 
   712   000F8C                     LATD            equ	3980	;# 
   713   000F8D                     LATE            equ	3981	;# 
   714   000F92                     TRISA           equ	3986	;# 
   715   000F92                     DDRA            equ	3986	;# 
   716   000F93                     TRISB           equ	3987	;# 
   717   000F93                     DDRB            equ	3987	;# 
   718   000F94                     TRISC           equ	3988	;# 
   719   000F94                     DDRC            equ	3988	;# 
   720   000F95                     TRISD           equ	3989	;# 
   721   000F95                     DDRD            equ	3989	;# 
   722   000F96                     TRISE           equ	3990	;# 
   723   000F96                     DDRE            equ	3990	;# 
   724   000F9B                     OSCTUNE         equ	3995	;# 
   725   000F9D                     PIE1            equ	3997	;# 
   726   000F9E                     PIR1            equ	3998	;# 
   727   000F9F                     IPR1            equ	3999	;# 
   728   000FA0                     PIE2            equ	4000	;# 
   729   000FA1                     PIR2            equ	4001	;# 
   730   000FA2                     IPR2            equ	4002	;# 
   731   000FA6                     EECON1          equ	4006	;# 
   732   000FA7                     EECON2          equ	4007	;# 
   733   000FA8                     EEDATA          equ	4008	;# 
   734   000FA9                     EEADR           equ	4009	;# 
   735   000FAB                     RCSTA           equ	4011	;# 
   736   000FAB                     RCSTA1          equ	4011	;# 
   737   000FAC                     TXSTA           equ	4012	;# 
   738   000FAC                     TXSTA1          equ	4012	;# 
   739   000FAD                     TXREG           equ	4013	;# 
   740   000FAD                     TXREG1          equ	4013	;# 
   741   000FAE                     RCREG           equ	4014	;# 
   742   000FAE                     RCREG1          equ	4014	;# 
   743   000FAF                     SPBRG           equ	4015	;# 
   744   000FAF                     SPBRG1          equ	4015	;# 
   745   000FB0                     SPBRGH          equ	4016	;# 
   746   000FB1                     T3CON           equ	4017	;# 
   747   000FB2                     TMR3            equ	4018	;# 
   748   000FB2                     TMR3L           equ	4018	;# 
   749   000FB3                     TMR3H           equ	4019	;# 
   750   000FB4                     CMCON           equ	4020	;# 
   751   000FB5                     CVRCON          equ	4021	;# 
   752   000FB6                     ECCP1AS         equ	4022	;# 
   753   000FB7                     ECCP1DEL        equ	4023	;# 
   754   000FB7                     PWM1CON         equ	4023	;# 
   755   000FB8                     BAUDCON         equ	4024	;# 
   756   000FB8                     BAUDCTL         equ	4024	;# 
   757   000FBA                     CCP2CON         equ	4026	;# 
   758   000FBB                     CCPR2           equ	4027	;# 
   759   000FBB                     CCPR2L          equ	4027	;# 
   760   000FBC                     CCPR2H          equ	4028	;# 
   761   000FBD                     CCP1CON         equ	4029	;# 
   762   000FBD                     ECCP1CON        equ	4029	;# 
   763   000FBE                     CCPR1           equ	4030	;# 
   764   000FBE                     CCPR1L          equ	4030	;# 
   765   000FBF                     CCPR1H          equ	4031	;# 
   766   000FC0                     ADCON2          equ	4032	;# 
   767   000FC1                     ADCON1          equ	4033	;# 
   768   000FC2                     ADCON0          equ	4034	;# 
   769   000FC3                     ADRES           equ	4035	;# 
   770   000FC3                     ADRESL          equ	4035	;# 
   771   000FC4                     ADRESH          equ	4036	;# 
   772   000FC5                     SSPCON2         equ	4037	;# 
   773   000FC6                     SSPCON1         equ	4038	;# 
   774   000FC7                     SSPSTAT         equ	4039	;# 
   775   000FC8                     SSPADD          equ	4040	;# 
   776   000FC9                     SSPBUF          equ	4041	;# 
   777   000FCA                     T2CON           equ	4042	;# 
   778   000FCB                     PR2             equ	4043	;# 
   779   000FCB                     MEMCON          equ	4043	;# 
   780   000FCC                     TMR2            equ	4044	;# 
   781   000FCD                     T1CON           equ	4045	;# 
   782   000FCE                     TMR1            equ	4046	;# 
   783   000FCE                     TMR1L           equ	4046	;# 
   784   000FCF                     TMR1H           equ	4047	;# 
   785   000FD0                     RCON            equ	4048	;# 
   786   000FD1                     WDTCON          equ	4049	;# 
   787   000FD2                     HLVDCON         equ	4050	;# 
   788   000FD2                     LVDCON          equ	4050	;# 
   789   000FD3                     OSCCON          equ	4051	;# 
   790   000FD5                     T0CON           equ	4053	;# 
   791   000FD6                     TMR0            equ	4054	;# 
   792   000FD6                     TMR0L           equ	4054	;# 
   793   000FD7                     TMR0H           equ	4055	;# 
   794   000FD8                     STATUS          equ	4056	;# 
   795   000FD9                     FSR2            equ	4057	;# 
   796   000FD9                     FSR2L           equ	4057	;# 
   797   000FDA                     FSR2H           equ	4058	;# 
   798   000FDB                     PLUSW2          equ	4059	;# 
   799   000FDC                     PREINC2         equ	4060	;# 
   800   000FDD                     POSTDEC2        equ	4061	;# 
   801   000FDE                     POSTINC2        equ	4062	;# 
   802   000FDF                     INDF2           equ	4063	;# 
   803   000FE0                     BSR             equ	4064	;# 
   804   000FE1                     FSR1            equ	4065	;# 
   805   000FE1                     FSR1L           equ	4065	;# 
   806   000FE2                     FSR1H           equ	4066	;# 
   807   000FE3                     PLUSW1          equ	4067	;# 
   808   000FE4                     PREINC1         equ	4068	;# 
   809   000FE5                     POSTDEC1        equ	4069	;# 
   810   000FE6                     POSTINC1        equ	4070	;# 
   811   000FE7                     INDF1           equ	4071	;# 
   812   000FE8                     WREG            equ	4072	;# 
   813   000FE9                     FSR0            equ	4073	;# 
   814   000FE9                     FSR0L           equ	4073	;# 
   815   000FEA                     FSR0H           equ	4074	;# 
   816   000FEB                     PLUSW0          equ	4075	;# 
   817   000FEC                     PREINC0         equ	4076	;# 
   818   000FED                     POSTDEC0        equ	4077	;# 
   819   000FEE                     POSTINC0        equ	4078	;# 
   820   000FEF                     INDF0           equ	4079	;# 
   821   000FF0                     INTCON3         equ	4080	;# 
   822   000FF1                     INTCON2         equ	4081	;# 
   823   000FF2                     INTCON          equ	4082	;# 
   824   000FF3                     PROD            equ	4083	;# 
   825   000FF3                     PRODL           equ	4083	;# 
   826   000FF4                     PRODH           equ	4084	;# 
   827   000FF5                     TABLAT          equ	4085	;# 
   828   000FF6                     TBLPTR          equ	4086	;# 
   829   000FF6                     TBLPTRL         equ	4086	;# 
   830   000FF7                     TBLPTRH         equ	4087	;# 
   831   000FF8                     TBLPTRU         equ	4088	;# 
   832   000FF9                     PCLAT           equ	4089	;# 
   833   000FF9                     PC              equ	4089	;# 
   834   000FF9                     PCL             equ	4089	;# 
   835   000FFA                     PCLATH          equ	4090	;# 
   836   000FFB                     PCLATU          equ	4091	;# 
   837   000FFC                     STKPTR          equ	4092	;# 
   838   000FFD                     TOS             equ	4093	;# 
   839   000FFD                     TOSL            equ	4093	;# 
   840   000FFE                     TOSH            equ	4094	;# 
   841   000FFF                     TOSU            equ	4095	;# 
   842   000F80                     PORTA           equ	3968	;# 
   843   000F81                     PORTB           equ	3969	;# 
   844   000F82                     PORTC           equ	3970	;# 
   845   000F83                     PORTD           equ	3971	;# 
   846   000F84                     PORTE           equ	3972	;# 
   847   000F89                     LATA            equ	3977	;# 
   848   000F8A                     LATB            equ	3978	;# 
   849   000F8B                     LATC            equ	3979	;# 
   850   000F8C                     LATD            equ	3980	;# 
   851   000F8D                     LATE            equ	3981	;# 
   852   000F92                     TRISA           equ	3986	;# 
   853   000F92                     DDRA            equ	3986	;# 
   854   000F93                     TRISB           equ	3987	;# 
   855   000F93                     DDRB            equ	3987	;# 
   856   000F94                     TRISC           equ	3988	;# 
   857   000F94                     DDRC            equ	3988	;# 
   858   000F95                     TRISD           equ	3989	;# 
   859   000F95                     DDRD            equ	3989	;# 
   860   000F96                     TRISE           equ	3990	;# 
   861   000F96                     DDRE            equ	3990	;# 
   862   000F9B                     OSCTUNE         equ	3995	;# 
   863   000F9D                     PIE1            equ	3997	;# 
   864   000F9E                     PIR1            equ	3998	;# 
   865   000F9F                     IPR1            equ	3999	;# 
   866   000FA0                     PIE2            equ	4000	;# 
   867   000FA1                     PIR2            equ	4001	;# 
   868   000FA2                     IPR2            equ	4002	;# 
   869   000FA6                     EECON1          equ	4006	;# 
   870   000FA7                     EECON2          equ	4007	;# 
   871   000FA8                     EEDATA          equ	4008	;# 
   872   000FA9                     EEADR           equ	4009	;# 
   873   000FAB                     RCSTA           equ	4011	;# 
   874   000FAB                     RCSTA1          equ	4011	;# 
   875   000FAC                     TXSTA           equ	4012	;# 
   876   000FAC                     TXSTA1          equ	4012	;# 
   877   000FAD                     TXREG           equ	4013	;# 
   878   000FAD                     TXREG1          equ	4013	;# 
   879   000FAE                     RCREG           equ	4014	;# 
   880   000FAE                     RCREG1          equ	4014	;# 
   881   000FAF                     SPBRG           equ	4015	;# 
   882   000FAF                     SPBRG1          equ	4015	;# 
   883   000FB0                     SPBRGH          equ	4016	;# 
   884   000FB1                     T3CON           equ	4017	;# 
   885   000FB2                     TMR3            equ	4018	;# 
   886   000FB2                     TMR3L           equ	4018	;# 
   887   000FB3                     TMR3H           equ	4019	;# 
   888   000FB4                     CMCON           equ	4020	;# 
   889   000FB5                     CVRCON          equ	4021	;# 
   890   000FB6                     ECCP1AS         equ	4022	;# 
   891   000FB7                     ECCP1DEL        equ	4023	;# 
   892   000FB7                     PWM1CON         equ	4023	;# 
   893   000FB8                     BAUDCON         equ	4024	;# 
   894   000FB8                     BAUDCTL         equ	4024	;# 
   895   000FBA                     CCP2CON         equ	4026	;# 
   896   000FBB                     CCPR2           equ	4027	;# 
   897   000FBB                     CCPR2L          equ	4027	;# 
   898   000FBC                     CCPR2H          equ	4028	;# 
   899   000FBD                     CCP1CON         equ	4029	;# 
   900   000FBD                     ECCP1CON        equ	4029	;# 
   901   000FBE                     CCPR1           equ	4030	;# 
   902   000FBE                     CCPR1L          equ	4030	;# 
   903   000FBF                     CCPR1H          equ	4031	;# 
   904   000FC0                     ADCON2          equ	4032	;# 
   905   000FC1                     ADCON1          equ	4033	;# 
   906   000FC2                     ADCON0          equ	4034	;# 
   907   000FC3                     ADRES           equ	4035	;# 
   908   000FC3                     ADRESL          equ	4035	;# 
   909   000FC4                     ADRESH          equ	4036	;# 
   910   000FC5                     SSPCON2         equ	4037	;# 
   911   000FC6                     SSPCON1         equ	4038	;# 
   912   000FC7                     SSPSTAT         equ	4039	;# 
   913   000FC8                     SSPADD          equ	4040	;# 
   914   000FC9                     SSPBUF          equ	4041	;# 
   915   000FCA                     T2CON           equ	4042	;# 
   916   000FCB                     PR2             equ	4043	;# 
   917   000FCB                     MEMCON          equ	4043	;# 
   918   000FCC                     TMR2            equ	4044	;# 
   919   000FCD                     T1CON           equ	4045	;# 
   920   000FCE                     TMR1            equ	4046	;# 
   921   000FCE                     TMR1L           equ	4046	;# 
   922   000FCF                     TMR1H           equ	4047	;# 
   923   000FD0                     RCON            equ	4048	;# 
   924   000FD1                     WDTCON          equ	4049	;# 
   925   000FD2                     HLVDCON         equ	4050	;# 
   926   000FD2                     LVDCON          equ	4050	;# 
   927   000FD3                     OSCCON          equ	4051	;# 
   928   000FD5                     T0CON           equ	4053	;# 
   929   000FD6                     TMR0            equ	4054	;# 
   930   000FD6                     TMR0L           equ	4054	;# 
   931   000FD7                     TMR0H           equ	4055	;# 
   932   000FD8                     STATUS          equ	4056	;# 
   933   000FD9                     FSR2            equ	4057	;# 
   934   000FD9                     FSR2L           equ	4057	;# 
   935   000FDA                     FSR2H           equ	4058	;# 
   936   000FDB                     PLUSW2          equ	4059	;# 
   937   000FDC                     PREINC2         equ	4060	;# 
   938   000FDD                     POSTDEC2        equ	4061	;# 
   939   000FDE                     POSTINC2        equ	4062	;# 
   940   000FDF                     INDF2           equ	4063	;# 
   941   000FE0                     BSR             equ	4064	;# 
   942   000FE1                     FSR1            equ	4065	;# 
   943   000FE1                     FSR1L           equ	4065	;# 
   944   000FE2                     FSR1H           equ	4066	;# 
   945   000FE3                     PLUSW1          equ	4067	;# 
   946   000FE4                     PREINC1         equ	4068	;# 
   947   000FE5                     POSTDEC1        equ	4069	;# 
   948   000FE6                     POSTINC1        equ	4070	;# 
   949   000FE7                     INDF1           equ	4071	;# 
   950   000FE8                     WREG            equ	4072	;# 
   951   000FE9                     FSR0            equ	4073	;# 
   952   000FE9                     FSR0L           equ	4073	;# 
   953   000FEA                     FSR0H           equ	4074	;# 
   954   000FEB                     PLUSW0          equ	4075	;# 
   955   000FEC                     PREINC0         equ	4076	;# 
   956   000FED                     POSTDEC0        equ	4077	;# 
   957   000FEE                     POSTINC0        equ	4078	;# 
   958   000FEF                     INDF0           equ	4079	;# 
   959   000FF0                     INTCON3         equ	4080	;# 
   960   000FF1                     INTCON2         equ	4081	;# 
   961   000FF2                     INTCON          equ	4082	;# 
   962   000FF3                     PROD            equ	4083	;# 
   963   000FF3                     PRODL           equ	4083	;# 
   964   000FF4                     PRODH           equ	4084	;# 
   965   000FF5                     TABLAT          equ	4085	;# 
   966   000FF6                     TBLPTR          equ	4086	;# 
   967   000FF6                     TBLPTRL         equ	4086	;# 
   968   000FF7                     TBLPTRH         equ	4087	;# 
   969   000FF8                     TBLPTRU         equ	4088	;# 
   970   000FF9                     PCLAT           equ	4089	;# 
   971   000FF9                     PC              equ	4089	;# 
   972   000FF9                     PCL             equ	4089	;# 
   973   000FFA                     PCLATH          equ	4090	;# 
   974   000FFB                     PCLATU          equ	4091	;# 
   975   000FFC                     STKPTR          equ	4092	;# 
   976   000FFD                     TOS             equ	4093	;# 
   977   000FFD                     TOSL            equ	4093	;# 
   978   000FFE                     TOSH            equ	4094	;# 
   979   000FFF                     TOSU            equ	4095	;# 
   980   000F80                     PORTA           equ	3968	;# 
   981   000F81                     PORTB           equ	3969	;# 
   982   000F82                     PORTC           equ	3970	;# 
   983   000F83                     PORTD           equ	3971	;# 
   984   000F84                     PORTE           equ	3972	;# 
   985   000F89                     LATA            equ	3977	;# 
   986   000F8A                     LATB            equ	3978	;# 
   987   000F8B                     LATC            equ	3979	;# 
   988   000F8C                     LATD            equ	3980	;# 
   989   000F8D                     LATE            equ	3981	;# 
   990   000F92                     TRISA           equ	3986	;# 
   991   000F92                     DDRA            equ	3986	;# 
   992   000F93                     TRISB           equ	3987	;# 
   993   000F93                     DDRB            equ	3987	;# 
   994   000F94                     TRISC           equ	3988	;# 
   995   000F94                     DDRC            equ	3988	;# 
   996   000F95                     TRISD           equ	3989	;# 
   997   000F95                     DDRD            equ	3989	;# 
   998   000F96                     TRISE           equ	3990	;# 
   999   000F96                     DDRE            equ	3990	;# 
  1000   000F9B                     OSCTUNE         equ	3995	;# 
  1001   000F9D                     PIE1            equ	3997	;# 
  1002   000F9E                     PIR1            equ	3998	;# 
  1003   000F9F                     IPR1            equ	3999	;# 
  1004   000FA0                     PIE2            equ	4000	;# 
  1005   000FA1                     PIR2            equ	4001	;# 
  1006   000FA2                     IPR2            equ	4002	;# 
  1007   000FA6                     EECON1          equ	4006	;# 
  1008   000FA7                     EECON2          equ	4007	;# 
  1009   000FA8                     EEDATA          equ	4008	;# 
  1010   000FA9                     EEADR           equ	4009	;# 
  1011   000FAB                     RCSTA           equ	4011	;# 
  1012   000FAB                     RCSTA1          equ	4011	;# 
  1013   000FAC                     TXSTA           equ	4012	;# 
  1014   000FAC                     TXSTA1          equ	4012	;# 
  1015   000FAD                     TXREG           equ	4013	;# 
  1016   000FAD                     TXREG1          equ	4013	;# 
  1017   000FAE                     RCREG           equ	4014	;# 
  1018   000FAE                     RCREG1          equ	4014	;# 
  1019   000FAF                     SPBRG           equ	4015	;# 
  1020   000FAF                     SPBRG1          equ	4015	;# 
  1021   000FB0                     SPBRGH          equ	4016	;# 
  1022   000FB1                     T3CON           equ	4017	;# 
  1023   000FB2                     TMR3            equ	4018	;# 
  1024   000FB2                     TMR3L           equ	4018	;# 
  1025   000FB3                     TMR3H           equ	4019	;# 
  1026   000FB4                     CMCON           equ	4020	;# 
  1027   000FB5                     CVRCON          equ	4021	;# 
  1028   000FB6                     ECCP1AS         equ	4022	;# 
  1029   000FB7                     ECCP1DEL        equ	4023	;# 
  1030   000FB7                     PWM1CON         equ	4023	;# 
  1031   000FB8                     BAUDCON         equ	4024	;# 
  1032   000FB8                     BAUDCTL         equ	4024	;# 
  1033   000FBA                     CCP2CON         equ	4026	;# 
  1034   000FBB                     CCPR2           equ	4027	;# 
  1035   000FBB                     CCPR2L          equ	4027	;# 
  1036   000FBC                     CCPR2H          equ	4028	;# 
  1037   000FBD                     CCP1CON         equ	4029	;# 
  1038   000FBD                     ECCP1CON        equ	4029	;# 
  1039   000FBE                     CCPR1           equ	4030	;# 
  1040   000FBE                     CCPR1L          equ	4030	;# 
  1041   000FBF                     CCPR1H          equ	4031	;# 
  1042   000FC0                     ADCON2          equ	4032	;# 
  1043   000FC1                     ADCON1          equ	4033	;# 
  1044   000FC2                     ADCON0          equ	4034	;# 
  1045   000FC3                     ADRES           equ	4035	;# 
  1046   000FC3                     ADRESL          equ	4035	;# 
  1047   000FC4                     ADRESH          equ	4036	;# 
  1048   000FC5                     SSPCON2         equ	4037	;# 
  1049   000FC6                     SSPCON1         equ	4038	;# 
  1050   000FC7                     SSPSTAT         equ	4039	;# 
  1051   000FC8                     SSPADD          equ	4040	;# 
  1052   000FC9                     SSPBUF          equ	4041	;# 
  1053   000FCA                     T2CON           equ	4042	;# 
  1054   000FCB                     PR2             equ	4043	;# 
  1055   000FCB                     MEMCON          equ	4043	;# 
  1056   000FCC                     TMR2            equ	4044	;# 
  1057   000FCD                     T1CON           equ	4045	;# 
  1058   000FCE                     TMR1            equ	4046	;# 
  1059   000FCE                     TMR1L           equ	4046	;# 
  1060   000FCF                     TMR1H           equ	4047	;# 
  1061   000FD0                     RCON            equ	4048	;# 
  1062   000FD1                     WDTCON          equ	4049	;# 
  1063   000FD2                     HLVDCON         equ	4050	;# 
  1064   000FD2                     LVDCON          equ	4050	;# 
  1065   000FD3                     OSCCON          equ	4051	;# 
  1066   000FD5                     T0CON           equ	4053	;# 
  1067   000FD6                     TMR0            equ	4054	;# 
  1068   000FD6                     TMR0L           equ	4054	;# 
  1069   000FD7                     TMR0H           equ	4055	;# 
  1070   000FD8                     STATUS          equ	4056	;# 
  1071   000FD9                     FSR2            equ	4057	;# 
  1072   000FD9                     FSR2L           equ	4057	;# 
  1073   000FDA                     FSR2H           equ	4058	;# 
  1074   000FDB                     PLUSW2          equ	4059	;# 
  1075   000FDC                     PREINC2         equ	4060	;# 
  1076   000FDD                     POSTDEC2        equ	4061	;# 
  1077   000FDE                     POSTINC2        equ	4062	;# 
  1078   000FDF                     INDF2           equ	4063	;# 
  1079   000FE0                     BSR             equ	4064	;# 
  1080   000FE1                     FSR1            equ	4065	;# 
  1081   000FE1                     FSR1L           equ	4065	;# 
  1082   000FE2                     FSR1H           equ	4066	;# 
  1083   000FE3                     PLUSW1          equ	4067	;# 
  1084   000FE4                     PREINC1         equ	4068	;# 
  1085   000FE5                     POSTDEC1        equ	4069	;# 
  1086   000FE6                     POSTINC1        equ	4070	;# 
  1087   000FE7                     INDF1           equ	4071	;# 
  1088   000FE8                     WREG            equ	4072	;# 
  1089   000FE9                     FSR0            equ	4073	;# 
  1090   000FE9                     FSR0L           equ	4073	;# 
  1091   000FEA                     FSR0H           equ	4074	;# 
  1092   000FEB                     PLUSW0          equ	4075	;# 
  1093   000FEC                     PREINC0         equ	4076	;# 
  1094   000FED                     POSTDEC0        equ	4077	;# 
  1095   000FEE                     POSTINC0        equ	4078	;# 
  1096   000FEF                     INDF0           equ	4079	;# 
  1097   000FF0                     INTCON3         equ	4080	;# 
  1098   000FF1                     INTCON2         equ	4081	;# 
  1099   000FF2                     INTCON          equ	4082	;# 
  1100   000FF3                     PROD            equ	4083	;# 
  1101   000FF3                     PRODL           equ	4083	;# 
  1102   000FF4                     PRODH           equ	4084	;# 
  1103   000FF5                     TABLAT          equ	4085	;# 
  1104   000FF6                     TBLPTR          equ	4086	;# 
  1105   000FF6                     TBLPTRL         equ	4086	;# 
  1106   000FF7                     TBLPTRH         equ	4087	;# 
  1107   000FF8                     TBLPTRU         equ	4088	;# 
  1108   000FF9                     PCLAT           equ	4089	;# 
  1109   000FF9                     PC              equ	4089	;# 
  1110   000FF9                     PCL             equ	4089	;# 
  1111   000FFA                     PCLATH          equ	4090	;# 
  1112   000FFB                     PCLATU          equ	4091	;# 
  1113   000FFC                     STKPTR          equ	4092	;# 
  1114   000FFD                     TOS             equ	4093	;# 
  1115   000FFD                     TOSL            equ	4093	;# 
  1116   000FFE                     TOSH            equ	4094	;# 
  1117   000FFF                     TOSU            equ	4095	;# 
  1118   000F80                     PORTA           equ	3968	;# 
  1119   000F81                     PORTB           equ	3969	;# 
  1120   000F82                     PORTC           equ	3970	;# 
  1121   000F83                     PORTD           equ	3971	;# 
  1122   000F84                     PORTE           equ	3972	;# 
  1123   000F89                     LATA            equ	3977	;# 
  1124   000F8A                     LATB            equ	3978	;# 
  1125   000F8B                     LATC            equ	3979	;# 
  1126   000F8C                     LATD            equ	3980	;# 
  1127   000F8D                     LATE            equ	3981	;# 
  1128   000F92                     TRISA           equ	3986	;# 
  1129   000F92                     DDRA            equ	3986	;# 
  1130   000F93                     TRISB           equ	3987	;# 
  1131   000F93                     DDRB            equ	3987	;# 
  1132   000F94                     TRISC           equ	3988	;# 
  1133   000F94                     DDRC            equ	3988	;# 
  1134   000F95                     TRISD           equ	3989	;# 
  1135   000F95                     DDRD            equ	3989	;# 
  1136   000F96                     TRISE           equ	3990	;# 
  1137   000F96                     DDRE            equ	3990	;# 
  1138   000F9B                     OSCTUNE         equ	3995	;# 
  1139   000F9D                     PIE1            equ	3997	;# 
  1140   000F9E                     PIR1            equ	3998	;# 
  1141   000F9F                     IPR1            equ	3999	;# 
  1142   000FA0                     PIE2            equ	4000	;# 
  1143   000FA1                     PIR2            equ	4001	;# 
  1144   000FA2                     IPR2            equ	4002	;# 
  1145   000FA6                     EECON1          equ	4006	;# 
  1146   000FA7                     EECON2          equ	4007	;# 
  1147   000FA8                     EEDATA          equ	4008	;# 
  1148   000FA9                     EEADR           equ	4009	;# 
  1149   000FAB                     RCSTA           equ	4011	;# 
  1150   000FAB                     RCSTA1          equ	4011	;# 
  1151   000FAC                     TXSTA           equ	4012	;# 
  1152   000FAC                     TXSTA1          equ	4012	;# 
  1153   000FAD                     TXREG           equ	4013	;# 
  1154   000FAD                     TXREG1          equ	4013	;# 
  1155   000FAE                     RCREG           equ	4014	;# 
  1156   000FAE                     RCREG1          equ	4014	;# 
  1157   000FAF                     SPBRG           equ	4015	;# 
  1158   000FAF                     SPBRG1          equ	4015	;# 
  1159   000FB0                     SPBRGH          equ	4016	;# 
  1160   000FB1                     T3CON           equ	4017	;# 
  1161   000FB2                     TMR3            equ	4018	;# 
  1162   000FB2                     TMR3L           equ	4018	;# 
  1163   000FB3                     TMR3H           equ	4019	;# 
  1164   000FB4                     CMCON           equ	4020	;# 
  1165   000FB5                     CVRCON          equ	4021	;# 
  1166   000FB6                     ECCP1AS         equ	4022	;# 
  1167   000FB7                     ECCP1DEL        equ	4023	;# 
  1168   000FB7                     PWM1CON         equ	4023	;# 
  1169   000FB8                     BAUDCON         equ	4024	;# 
  1170   000FB8                     BAUDCTL         equ	4024	;# 
  1171   000FBA                     CCP2CON         equ	4026	;# 
  1172   000FBB                     CCPR2           equ	4027	;# 
  1173   000FBB                     CCPR2L          equ	4027	;# 
  1174   000FBC                     CCPR2H          equ	4028	;# 
  1175   000FBD                     CCP1CON         equ	4029	;# 
  1176   000FBD                     ECCP1CON        equ	4029	;# 
  1177   000FBE                     CCPR1           equ	4030	;# 
  1178   000FBE                     CCPR1L          equ	4030	;# 
  1179   000FBF                     CCPR1H          equ	4031	;# 
  1180   000FC0                     ADCON2          equ	4032	;# 
  1181   000FC1                     ADCON1          equ	4033	;# 
  1182   000FC2                     ADCON0          equ	4034	;# 
  1183   000FC3                     ADRES           equ	4035	;# 
  1184   000FC3                     ADRESL          equ	4035	;# 
  1185   000FC4                     ADRESH          equ	4036	;# 
  1186   000FC5                     SSPCON2         equ	4037	;# 
  1187   000FC6                     SSPCON1         equ	4038	;# 
  1188   000FC7                     SSPSTAT         equ	4039	;# 
  1189   000FC8                     SSPADD          equ	4040	;# 
  1190   000FC9                     SSPBUF          equ	4041	;# 
  1191   000FCA                     T2CON           equ	4042	;# 
  1192   000FCB                     PR2             equ	4043	;# 
  1193   000FCB                     MEMCON          equ	4043	;# 
  1194   000FCC                     TMR2            equ	4044	;# 
  1195   000FCD                     T1CON           equ	4045	;# 
  1196   000FCE                     TMR1            equ	4046	;# 
  1197   000FCE                     TMR1L           equ	4046	;# 
  1198   000FCF                     TMR1H           equ	4047	;# 
  1199   000FD0                     RCON            equ	4048	;# 
  1200   000FD1                     WDTCON          equ	4049	;# 
  1201   000FD2                     HLVDCON         equ	4050	;# 
  1202   000FD2                     LVDCON          equ	4050	;# 
  1203   000FD3                     OSCCON          equ	4051	;# 
  1204   000FD5                     T0CON           equ	4053	;# 
  1205   000FD6                     TMR0            equ	4054	;# 
  1206   000FD6                     TMR0L           equ	4054	;# 
  1207   000FD7                     TMR0H           equ	4055	;# 
  1208   000FD8                     STATUS          equ	4056	;# 
  1209   000FD9                     FSR2            equ	4057	;# 
  1210   000FD9                     FSR2L           equ	4057	;# 
  1211   000FDA                     FSR2H           equ	4058	;# 
  1212   000FDB                     PLUSW2          equ	4059	;# 
  1213   000FDC                     PREINC2         equ	4060	;# 
  1214   000FDD                     POSTDEC2        equ	4061	;# 
  1215   000FDE                     POSTINC2        equ	4062	;# 
  1216   000FDF                     INDF2           equ	4063	;# 
  1217   000FE0                     BSR             equ	4064	;# 
  1218   000FE1                     FSR1            equ	4065	;# 
  1219   000FE1                     FSR1L           equ	4065	;# 
  1220   000FE2                     FSR1H           equ	4066	;# 
  1221   000FE3                     PLUSW1          equ	4067	;# 
  1222   000FE4                     PREINC1         equ	4068	;# 
  1223   000FE5                     POSTDEC1        equ	4069	;# 
  1224   000FE6                     POSTINC1        equ	4070	;# 
  1225   000FE7                     INDF1           equ	4071	;# 
  1226   000FE8                     WREG            equ	4072	;# 
  1227   000FE9                     FSR0            equ	4073	;# 
  1228   000FE9                     FSR0L           equ	4073	;# 
  1229   000FEA                     FSR0H           equ	4074	;# 
  1230   000FEB                     PLUSW0          equ	4075	;# 
  1231   000FEC                     PREINC0         equ	4076	;# 
  1232   000FED                     POSTDEC0        equ	4077	;# 
  1233   000FEE                     POSTINC0        equ	4078	;# 
  1234   000FEF                     INDF0           equ	4079	;# 
  1235   000FF0                     INTCON3         equ	4080	;# 
  1236   000FF1                     INTCON2         equ	4081	;# 
  1237   000FF2                     INTCON          equ	4082	;# 
  1238   000FF3                     PROD            equ	4083	;# 
  1239   000FF3                     PRODL           equ	4083	;# 
  1240   000FF4                     PRODH           equ	4084	;# 
  1241   000FF5                     TABLAT          equ	4085	;# 
  1242   000FF6                     TBLPTR          equ	4086	;# 
  1243   000FF6                     TBLPTRL         equ	4086	;# 
  1244   000FF7                     TBLPTRH         equ	4087	;# 
  1245   000FF8                     TBLPTRU         equ	4088	;# 
  1246   000FF9                     PCLAT           equ	4089	;# 
  1247   000FF9                     PC              equ	4089	;# 
  1248   000FF9                     PCL             equ	4089	;# 
  1249   000FFA                     PCLATH          equ	4090	;# 
  1250   000FFB                     PCLATU          equ	4091	;# 
  1251   000FFC                     STKPTR          equ	4092	;# 
  1252   000FFD                     TOS             equ	4093	;# 
  1253   000FFD                     TOSL            equ	4093	;# 
  1254   000FFE                     TOSH            equ	4094	;# 
  1255   000FFF                     TOSU            equ	4095	;# 
  1256                           
  1257                           	psect	idataCOMRAM
  1258   001B42                     __pidataCOMRAM:
  1259                           	callstack 0
  1260                           
  1261                           ;initializer for _currentTime
  1262   001B42  30                 	db	48
  1263   001B43  30                 	db	48
  1264   001B44  30                 	db	48
  1265   001B45  30                 	db	48
  1266                           
  1267                           ;initializer for motorTerminal@hour
  1268   001B46  30                 	db	48
  1269   001B47  30                 	db	48
  1270   001B48  30                 	db	48
  1271   001B49  30                 	db	48
  1272                           
  1273                           	psect	idataBANK0
  1274   0015A0                     __pidataBANK0:
  1275                           	callstack 0
  1276                           
  1277                           ;initializer for _userUIDs
  1278   0015A0  65                 	db	101
  1279   0015A1  DC                 	db	220
  1280   0015A2  F9                 	db	249
  1281   0015A3  03                 	db	3
  1282   0015A4  43                 	db	67
  1283   0015A5  00                 	db	0
  1284   0015A6  00                 	db	0
  1285   0015A7  00                 	db	0
  1286   0015A8  00                 	db	0
  1287   0015A9  00                 	db	0
  1288   0015AA  00                 	db	0
  1289   0015AB  00                 	db	0
  1290   0015AC  00                 	db	0
  1291   0015AD  00                 	db	0
  1292   0015AE  00                 	db	0
  1293   0015AF  00                 	db	0
  1294   0015B0  DC                 	db	220
  1295   0015B1  0D                 	db	13
  1296   0015B2  F9                 	db	249
  1297   0015B3  03                 	db	3
  1298   0015B4  2B                 	db	43
  1299   0015B5  00                 	db	0
  1300   0015B6  00                 	db	0
  1301   0015B7  00                 	db	0
  1302   0015B8  00                 	db	0
  1303   0015B9  00                 	db	0
  1304   0015BA  00                 	db	0
  1305   0015BB  00                 	db	0
  1306   0015BC  00                 	db	0
  1307   0015BD  00                 	db	0
  1308   0015BE  00                 	db	0
  1309   0015BF  00                 	db	0
  1310   0015C0  DF                 	db	223
  1311   0015C1  8B                 	db	139
  1312   0015C2  DF                 	db	223
  1313   0015C3  C4                 	db	196
  1314   0015C4  4F                 	db	79
  1315   0015C5  00                 	db	0
  1316   0015C6  00                 	db	0
  1317   0015C7  00                 	db	0
  1318   0015C8  00                 	db	0
  1319   0015C9  00                 	db	0
  1320   0015CA  00                 	db	0
  1321   0015CB  00                 	db	0
  1322   0015CC  00                 	db	0
  1323   0015CD  00                 	db	0
  1324   0015CE  00                 	db	0
  1325   0015CF  00                 	db	0
  1326   0015D0  21                 	db	33
  1327   0015D1  32                 	db	50
  1328   0015D2  A9                 	db	169
  1329   0015D3  89                 	db	137
  1330   0015D4  33                 	db	51
  1331   0015D5  00                 	db	0
  1332   0015D6  00                 	db	0
  1333   0015D7  00                 	db	0
  1334   0015D8  00                 	db	0
  1335   0015D9  00                 	db	0
  1336   0015DA  00                 	db	0
  1337   0015DB  00                 	db	0
  1338   0015DC  00                 	db	0
  1339   0015DD  00                 	db	0
  1340   0015DE  00                 	db	0
  1341   0015DF  00                 	db	0
  1342                           
  1343                           ;initializer for _configurations
  1344   0015E0  01                 	db	1
  1345   0015E1  01                 	db	1
  1346   0015E2  01                 	db	1
  1347   0015E3  01                 	db	1
  1348   0015E4  01                 	db	1
  1349   0015E5  01                 	db	1
  1350   0015E6  01                 	db	1
  1351   0015E7  01                 	db	1
  1352   0015E8  01                 	db	1
  1353   0015E9  01                 	db	1
  1354   0015EA  01                 	db	1
  1355   0015EB  01                 	db	1
  1356   0015EC  01                 	db	1
  1357   0015ED  01                 	db	1
  1358   0015EE  01                 	db	1
  1359   0015EF  01                 	db	1
  1360   0015F0  01                 	db	1
  1361   0015F1  01                 	db	1
  1362   0015F2  01                 	db	1
  1363   0015F3  01                 	db	1
  1364   0015F4  01                 	db	1
  1365   0015F5  01                 	db	1
  1366   0015F6  01                 	db	1
  1367   0015F7  01                 	db	1
  1368                           
  1369                           	psect	mediumconst
  1370   001EBE                     __pmediumconst:
  1371                           	callstack 0
  1372   001EBE  00                 	db	0
  1373   001EBF                     GetTecla@F2752:
  1374                           	callstack 0
  1375   001EBF  01                 	db	1
  1376   001EC0  02                 	db	2
  1377   001EC1  03                 	db	3
  1378   001EC2  04                 	db	4
  1379   001EC3  05                 	db	5
  1380   001EC4  06                 	db	6
  1381   001EC5  07                 	db	7
  1382   001EC6  08                 	db	8
  1383   001EC7  09                 	db	9
  1384   001EC8  0A                 	db	10
  1385   001EC9  00                 	db	0
  1386   001ECA  0B                 	db	11
  1387   001ECB                     __end_ofGetTecla@F2752:
  1388                           	callstack 0
  1389   007F92                     _TMR0IF         set	32658
  1390   000FD6                     _TMR0           set	4054
  1391   000F89                     _LATAbits       set	3977
  1392   000F96                     _TRISE          set	3990
  1393   000F92                     _TRISA          set	3986
  1394   000FAE                     _RCREG          set	4014
  1395   000FAD                     _TXREG          set	4013
  1396   000F9E                     _PIR1bits       set	3998
  1397   000FB8                     _BAUDCON        set	4024
  1398   000FAF                     _SPBRG          set	4015
  1399   000FAB                     _RCSTA          set	4011
  1400   000FAC                     _TXSTA          set	4012
  1401   000F81                     _PORTBbits      set	3969
  1402   000F8A                     _LATBbits       set	3978
  1403   000F93                     _TRISBbits      set	3987
  1404   000F82                     _PORTCbits      set	3970
  1405   000F8B                     _LATCbits       set	3979
  1406   000F94                     _TRISCbits      set	3988
  1407   000F8C                     _LATD           set	3980
  1408   000F95                     _TRISD          set	3989
  1409   000F83                     _PORTD          set	3971
  1410   000FD5                     _T0CON          set	4053
  1411   000F8B                     _LATC           set	3979
  1412   000F96                     _TRISEbits      set	3990
  1413   000FC1                     _ADCON1         set	4033
  1414   000F8D                     _LATEbits       set	3981
  1415   000FF2                     _INTCONbits     set	4082
  1416   001ECB                     STR_21:
  1417   001ECB  45                 	db	69	;'E'
  1418   001ECC  52                 	db	82	;'R'
  1419   001ECD  52                 	db	82	;'R'
  1420   001ECE  4F                 	db	79	;'O'
  1421   001ECF  52                 	db	82	;'R'
  1422   001ED0  2E                 	db	46
  1423   001ED1  20                 	db	32
  1424   001ED2  56                 	db	86	;'V'
  1425   001ED3  61                 	db	97	;'a'
  1426   001ED4  6C                 	db	108	;'l'
  1427   001ED5  6F                 	db	111	;'o'
  1428   001ED6  72                 	db	114	;'r'
  1429   001ED7  20                 	db	32
  1430   001ED8  69                 	db	105	;'i'
  1431   001ED9  6E                 	db	110	;'n'
  1432   001EDA  74                 	db	116	;'t'
  1433   001EDB  72                 	db	114	;'r'
  1434   001EDC  6F                 	db	111	;'o'
  1435   001EDD  64                 	db	100	;'d'
  1436   001EDE  75                 	db	117	;'u'
  1437   001EDF  69                 	db	105	;'i'
  1438   001EE0  74                 	db	116	;'t'
  1439   001EE1  20                 	db	32
  1440   001EE2  65                 	db	101	;'e'
  1441   001EE3  72                 	db	114	;'r'
  1442   001EE4  72                 	db	114	;'r'
  1443   001EE5  6F                 	db	111	;'o'
  1444   001EE6  6E                 	db	110	;'n'
  1445   001EE7  69                 	db	105	;'i'
  1446   001EE8  2E                 	db	46
  1447   001EE9  0D                 	db	13
  1448   001EEA  0A                 	db	10
  1449   001EEB  00                 	db	0
  1450   001EEC                     STR_8:
  1451   001EEC  09                 	db	9
  1452   001EED  33                 	db	51	;'3'
  1453   001EEE  2E                 	db	46
  1454   001EEF  20                 	db	32
  1455   001EF0  4D                 	db	77	;'M'
  1456   001EF1  6F                 	db	111	;'o'
  1457   001EF2  64                 	db	100	;'d'
  1458   001EF3  69                 	db	105	;'i'
  1459   001EF4  66                 	db	102	;'f'
  1460   001EF5  69                 	db	105	;'i'
  1461   001EF6  63                 	db	99	;'c'
  1462   001EF7  61                 	db	97	;'a'
  1463   001EF8  72                 	db	114	;'r'
  1464   001EF9  20                 	db	32
  1465   001EFA  68                 	db	104	;'h'
  1466   001EFB  6F                 	db	111	;'o'
  1467   001EFC  72                 	db	114	;'r'
  1468   001EFD  61                 	db	97	;'a'
  1469   001EFE  20                 	db	32
  1470   001EFF  64                 	db	100	;'d'
  1471   001F00  65                 	db	101	;'e'
  1472   001F01  6C                 	db	108	;'l'
  1473   001F02  20                 	db	32
  1474   001F03  73                 	db	115	;'s'
  1475   001F04  69                 	db	105	;'i'
  1476   001F05  73                 	db	115	;'s'
  1477   001F06  74                 	db	116	;'t'
  1478   001F07  65                 	db	101	;'e'
  1479   001F08  6D                 	db	109	;'m'
  1480   001F09  61                 	db	97	;'a'
  1481   001F0A  0D                 	db	13
  1482   001F0B  0A                 	db	10
  1483   001F0C  00                 	db	0
  1484   001F0D                     STR_22:
  1485   001F0D  0D                 	db	13
  1486   001F0E  0A                 	db	10
  1487   001F0F  48                 	db	72	;'H'
  1488   001F10  6F                 	db	111	;'o'
  1489   001F11  72                 	db	114	;'r'
  1490   001F12  61                 	db	97	;'a'
  1491   001F13  20                 	db	32
  1492   001F14  69                 	db	105	;'i'
  1493   001F15  6E                 	db	110	;'n'
  1494   001F16  74                 	db	116	;'t'
  1495   001F17  72                 	db	114	;'r'
  1496   001F18  6F                 	db	111	;'o'
  1497   001F19  64                 	db	100	;'d'
  1498   001F1A  75                 	db	117	;'u'
  1499   001F1B  69                 	db	105	;'i'
  1500   001F1C  64                 	db	100	;'d'
  1501   001F1D  61                 	db	97	;'a'
  1502   001F1E  20                 	db	32
  1503   001F1F  63                 	db	99	;'c'
  1504   001F20  6F                 	db	111	;'o'
  1505   001F21  72                 	db	114	;'r'
  1506   001F22  72                 	db	114	;'r'
  1507   001F23  65                 	db	101	;'e'
  1508   001F24  63                 	db	99	;'c'
  1509   001F25  74                 	db	116	;'t'
  1510   001F26  61                 	db	97	;'a'
  1511   001F27  6D                 	db	109	;'m'
  1512   001F28  65                 	db	101	;'e'
  1513   001F29  6E                 	db	110	;'n'
  1514   001F2A  74                 	db	116	;'t'
  1515   001F2B  0D                 	db	13
  1516   001F2C  0A                 	db	10
  1517   001F2D  00                 	db	0
  1518   001F2E                     STR_20:
  1519   001F2E  49                 	db	73	;'I'
  1520   001F2F  6E                 	db	110	;'n'
  1521   001F30  74                 	db	116	;'t'
  1522   001F31  72                 	db	114	;'r'
  1523   001F32  6F                 	db	111	;'o'
  1524   001F33  64                 	db	100	;'d'
  1525   001F34  75                 	db	117	;'u'
  1526   001F35  63                 	db	99	;'c'
  1527   001F36  65                 	db	101	;'e'
  1528   001F37  20                 	db	32
  1529   001F38  6C                 	db	108	;'l'
  1530   001F39  61                 	db	97	;'a'
  1531   001F3A  20                 	db	32
  1532   001F3B  68                 	db	104	;'h'
  1533   001F3C  6F                 	db	111	;'o'
  1534   001F3D  72                 	db	114	;'r'
  1535   001F3E  61                 	db	97	;'a'
  1536   001F3F  20                 	db	32
  1537   001F40  61                 	db	97	;'a'
  1538   001F41  63                 	db	99	;'c'
  1539   001F42  74                 	db	116	;'t'
  1540   001F43  75                 	db	117	;'u'
  1541   001F44  61                 	db	97	;'a'
  1542   001F45  6C                 	db	108	;'l'
  1543   001F46  28                 	db	40
  1544   001F47  48                 	db	72	;'H'
  1545   001F48  48                 	db	72	;'H'
  1546   001F49  4D                 	db	77	;'M'
  1547   001F4A  4D                 	db	77	;'M'
  1548   001F4B  29                 	db	41
  1549   001F4C  3A                 	db	58	;':'
  1550   001F4D  20                 	db	32
  1551   001F4E  00                 	db	0
  1552   001F4F                     STR_7:
  1553   001F4F  09                 	db	9
  1554   001F50  32                 	db	50	;'2'
  1555   001F51  2E                 	db	46
  1556   001F52  20                 	db	32
  1557   001F53  4D                 	db	77	;'M'
  1558   001F54  6F                 	db	111	;'o'
  1559   001F55  73                 	db	115	;'s'
  1560   001F56  74                 	db	116	;'t'
  1561   001F57  72                 	db	114	;'r'
  1562   001F58  61                 	db	97	;'a'
  1563   001F59  72                 	db	114	;'r'
  1564   001F5A  20                 	db	32
  1565   001F5B  63                 	db	99	;'c'
  1566   001F5C  6F                 	db	111	;'o'
  1567   001F5D  6E                 	db	110	;'n'
  1568   001F5E  66                 	db	102	;'f'
  1569   001F5F  69                 	db	105	;'i'
  1570   001F60  67                 	db	103	;'g'
  1571   001F61  75                 	db	117	;'u'
  1572   001F62  72                 	db	114	;'r'
  1573   001F63  61                 	db	97	;'a'
  1574   001F64  63                 	db	99	;'c'
  1575   001F65  69                 	db	105	;'i'
  1576   001F66  6F                 	db	111	;'o'
  1577   001F67  6E                 	db	110	;'n'
  1578   001F68  73                 	db	115	;'s'
  1579   001F69  0D                 	db	13
  1580   001F6A  0A                 	db	10
  1581   001F6B  00                 	db	0
  1582   001F6C                     STR_6:
  1583   001F6C  09                 	db	9
  1584   001F6D  31                 	db	49	;'1'
  1585   001F6E  2E                 	db	46
  1586   001F6F  20                 	db	32
  1587   001F70  51                 	db	81	;'Q'
  1588   001F71  75                 	db	117	;'u'
  1589   001F72  69                 	db	105	;'i'
  1590   001F73  20                 	db	32
  1591   001F74  68                 	db	104	;'h'
  1592   001F75  69                 	db	105	;'i'
  1593   001F76  20                 	db	32
  1594   001F77  68                 	db	104	;'h'
  1595   001F78  61                 	db	97	;'a'
  1596   001F79  20                 	db	32
  1597   001F7A  61                 	db	97	;'a'
  1598   001F7B  20                 	db	32
  1599   001F7C  6C                 	db	108	;'l'
  1600   001F7D  61                 	db	97	;'a'
  1601   001F7E  20                 	db	32
  1602   001F7F  73                 	db	115	;'s'
  1603   001F80  61                 	db	97	;'a'
  1604   001F81  6C                 	db	108	;'l'
  1605   001F82  61                 	db	97	;'a'
  1606   001F83  3F                 	db	63	;'?'
  1607   001F84  0D                 	db	13
  1608   001F85  0A                 	db	10
  1609   001F86  00                 	db	0
  1610   001F87                     STR_27:
  1611   001F87  54                 	db	84	;'T'
  1612   001F88  61                 	db	97	;'a'
  1613   001F89  72                 	db	114	;'r'
  1614   001F8A  67                 	db	103	;'g'
  1615   001F8B  65                 	db	101	;'e'
  1616   001F8C  74                 	db	116	;'t'
  1617   001F8D  61                 	db	97	;'a'
  1618   001F8E  20                 	db	32
  1619   001F8F  64                 	db	100	;'d'
  1620   001F90  65                 	db	101	;'e'
  1621   001F91  74                 	db	116	;'t'
  1622   001F92  65                 	db	101	;'e'
  1623   001F93  63                 	db	99	;'c'
  1624   001F94  74                 	db	116	;'t'
  1625   001F95  61                 	db	97	;'a'
  1626   001F96  64                 	db	100	;'d'
  1627   001F97  61                 	db	97	;'a'
  1628   001F98  21                 	db	33
  1629   001F99  0D                 	db	13
  1630   001F9A  0A                 	db	10
  1631   001F9B  09                 	db	9
  1632   001F9C  00                 	db	0
  1633   001F9D                     STR_5:
  1634   001F9D  54                 	db	84	;'T'
  1635   001F9E  72                 	db	114	;'r'
  1636   001F9F  69                 	db	105	;'i'
  1637   001FA0  61                 	db	97	;'a'
  1638   001FA1  20                 	db	32
  1639   001FA2  75                 	db	117	;'u'
  1640   001FA3  6E                 	db	110	;'n'
  1641   001FA4  61                 	db	97	;'a'
  1642   001FA5  20                 	db	32
  1643   001FA6  6F                 	db	111	;'o'
  1644   001FA7  70                 	db	112	;'p'
  1645   001FA8  63                 	db	99	;'c'
  1646   001FA9  69                 	db	105	;'i'
  1647   001FAA  C3                 	db	-61
  1648   001FAB  B3                 	db	-77
  1649   001FAC  3A                 	db	58	;':'
  1650   001FAD  0D                 	db	13
  1651   001FAE  0A                 	db	10
  1652   001FAF  00                 	db	0
  1653   001FB0                     STR_2:
  1654   001FB0  2D                 	db	45
  1655   001FB1  2D                 	db	45
  1656   001FB2  2D                 	db	45
  1657   001FB3  2D                 	db	45
  1658   001FB4  2D                 	db	45
  1659   001FB5  2D                 	db	45
  1660   001FB6  2D                 	db	45
  1661   001FB7  2D                 	db	45
  1662   001FB8  2D                 	db	45
  1663   001FB9  2D                 	db	45
  1664   001FBA  2D                 	db	45
  1665   001FBB  2D                 	db	45
  1666   001FBC  2D                 	db	45
  1667   001FBD  2D                 	db	45
  1668   001FBE  2D                 	db	45
  1669   001FBF  0D                 	db	13
  1670   001FC0  0A                 	db	10
  1671   001FC1  00                 	db	0
  1672   001FC2                     STR_3:
  1673   001FC2  4D                 	db	77	;'M'
  1674   001FC3  65                 	db	101	;'e'
  1675   001FC4  6E                 	db	110	;'n'
  1676   001FC5  C3                 	db	-61
  1677   001FC6  BA                 	db	-70
  1678   001FC7  20                 	db	32
  1679   001FC8  70                 	db	112	;'p'
  1680   001FC9  72                 	db	114	;'r'
  1681   001FCA  69                 	db	105	;'i'
  1682   001FCB  6E                 	db	110	;'n'
  1683   001FCC  63                 	db	99	;'c'
  1684   001FCD  69                 	db	105	;'i'
  1685   001FCE  70                 	db	112	;'p'
  1686   001FCF  61                 	db	97	;'a'
  1687   001FD0  6C                 	db	108	;'l'
  1688   001FD1  0D                 	db	13
  1689   001FD2  0A                 	db	10
  1690   001FD3  00                 	db	0
  1691   001FD4                     STR_24:
  1692   001FD4  20                 	db	32
  1693   001FD5  43                 	db	67	;'C'
  1694   001FD6  6F                 	db	111	;'o'
  1695   001FD7  6E                 	db	110	;'n'
  1696   001FD8  66                 	db	102	;'f'
  1697   001FD9  69                 	db	105	;'i'
  1698   001FDA  67                 	db	103	;'g'
  1699   001FDB  3A                 	db	58	;':'
  1700   001FDC  20                 	db	32
  1701   001FDD  00                 	db	0
  1702   001FDE                     STR_9:
  1703   001FDE  4F                 	db	79	;'O'
  1704   001FDF  70                 	db	112	;'p'
  1705   001FE0  63                 	db	99	;'c'
  1706   001FE1  69                 	db	105	;'i'
  1707   001FE2  C3                 	db	-61
  1708   001FE3  B3                 	db	-77
  1709   001FE4  3A                 	db	58	;':'
  1710   001FE5  20                 	db	32
  1711   001FE6  00                 	db	0
  1712   001FE7                     STR_23:
  1713   001FE7  55                 	db	85	;'U'
  1714   001FE8  73                 	db	115	;'s'
  1715   001FE9  65                 	db	101	;'e'
  1716   001FEA  72                 	db	114	;'r'
  1717   001FEB  20                 	db	32
  1718   001FEC  00                 	db	0
  1719   001FED                     STR_10:
  1720   001FED  55                 	db	85	;'U'
  1721   001FEE  49                 	db	73	;'I'
  1722   001FEF  44                 	db	68	;'D'
  1723   001FF0  3A                 	db	58	;':'
  1724   001FF1  20                 	db	32
  1725   001FF2  00                 	db	0
  1726   001FF3                     STR_1:
  1727   001FF3  48                 	db	72	;'H'
  1728   001FF4  6F                 	db	111	;'o'
  1729   001FF5  6C                 	db	108	;'l'
  1730   001FF6  61                 	db	97	;'a'
  1731   001FF7  00                 	db	0
  1732   001FF8                     STR_14:
  1733   001FF8  20                 	db	32
  1734   001FF9  2D                 	db	45
  1735   001FFA  20                 	db	32
  1736   001FFB  00                 	db	0
  1737   001FFC                     STR_11:
  1738   001FFC  2D                 	db	45
  1739   001FFD  00                 	db	0
  1740   001FE4                     STR_13          equ	STR_9+6
  1741   001FFA                     STR_25          equ	STR_14+2
  1742   001FB0                     STR_4           equ	STR_2
  1743   001FBF                     STR_12          equ	STR_2+15
  1744   001FBF                     STR_15          equ	STR_2+15
  1745   001FBF                     STR_16          equ	STR_2+15
  1746   001FBF                     STR_17          equ	STR_2+15
  1747   001FBF                     STR_18          equ	STR_2+15
  1748   001FBF                     STR_19          equ	STR_2+15
  1749   001FBF                     STR_26          equ	STR_2+15
  1750   001F9B                     STR_28          equ	STR_27+20
  1751   001FFE  00                 	db	0	; dummy byte at the end
  1752   001EBE                     __smallconst    set	__pmediumconst
  1753   001EBE                     __mediumconst   set	__pmediumconst
  1754   000002                     __activetblptr  equ	2
  1755                           
  1756                           ; #config settings
  1757                           
  1758                           	psect	cinit
  1759   0014EC                     __pcinit:
  1760                           	callstack 0
  1761   0014EC                     start_initialization:
  1762                           	callstack 0
  1763   0014EC                     __initialization:
  1764                           	callstack 0
  1765                           
  1766                           ; Initialize objects allocated to BANK0 (88 bytes)
  1767                           ; load TBLPTR registers with __pidataBANK0
  1768   0014EC  0EA0               	movlw	low __pidataBANK0
  1769   0014EE  6EF6               	movwf	tblptrl,c
  1770   0014F0  0E15               	movlw	high __pidataBANK0
  1771   0014F2  6EF7               	movwf	tblptrh,c
  1772   0014F4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1773   0014F6  6EF8               	movwf	tblptru,c
  1774   0014F8  EE00  F080         	lfsr	0,__pdataBANK0
  1775   0014FC  EE10 F058          	lfsr	1,88
  1776   001500                     copy_data0:
  1777   001500  0009               	tblrd		*+
  1778   001502  CFF5 FFEE          	movff	tablat,postinc0
  1779   001506  50E5               	movf	postdec1,w,c
  1780   001508  50E1               	movf	fsr1l,w,c
  1781   00150A  E1FA               	bnz	copy_data0
  1782                           
  1783                           ; Initialize objects allocated to COMRAM (8 bytes)
  1784                           ; load TBLPTR registers with __pidataCOMRAM
  1785   00150C  0E42               	movlw	low __pidataCOMRAM
  1786   00150E  6EF6               	movwf	tblptrl,c
  1787   001510  0E1B               	movlw	high __pidataCOMRAM
  1788   001512  6EF7               	movwf	tblptrh,c
  1789   001514  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1790   001516  6EF8               	movwf	tblptru,c
  1791   001518  EE00  F06F         	lfsr	0,__pdataCOMRAM
  1792   00151C  EE10 F008          	lfsr	1,8
  1793   001520                     copy_data1:
  1794   001520  0009               	tblrd		*+
  1795   001522  CFF5 FFEE          	movff	tablat,postinc0
  1796   001526  50E5               	movf	postdec1,w,c
  1797   001528  50E1               	movf	fsr1l,w,c
  1798   00152A  E1FA               	bnz	copy_data1
  1799                           
  1800                           ; Clear objects allocated to COMRAM (78 bytes)
  1801   00152C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1802   001530  0E4E               	movlw	78
  1803   001532                     clear_0:
  1804   001532  6AEE               	clrf	postinc0,c
  1805   001534  06E8               	decf	wreg,f,c
  1806   001536  E1FD               	bnz	clear_0
  1807   001538                     end_of_initialization:
  1808                           	callstack 0
  1809   001538                     __end_of__initialization:
  1810                           	callstack 0
  1811   001538  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1812   00153A  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1813   00153C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1814   00153E  6EF8               	movwf	tblptru,c
  1815   001540  0100               	movlb	0
  1816   001542  EF74  F00B         	goto	_main	;jump to C main() function
  1817                           
  1818                           	psect	bssCOMRAM
  1819   000001                     __pbssCOMRAM:
  1820                           	callstack 0
  1821   000001                     _Timers:
  1822                           	callstack 0
  1823   000001                     	ds	20
  1824   000015                     motor_RFID@UID:
  1825                           	callstack 0
  1826   000015                     	ds	6
  1827   00001B                     _Tics:
  1828                           	callstack 0
  1829   00001B                     	ds	4
  1830   00001F                     _pointer:
  1831                           	callstack 0
  1832   00001F                     	ds	2
  1833   000021                     _index:
  1834                           	callstack 0
  1835   000021                     	ds	2
  1836   000023                     	ds	2
  1837   000025                     setLed@userIndex:
  1838                           	callstack 0
  1839   000025                     	ds	1
  1840   000026                     setLed@ledIndex:
  1841                           	callstack 0
  1842   000026                     	ds	1
  1843   000027                     setLed@modeLED:
  1844                           	callstack 0
  1845   000027                     	ds	1
  1846   000028                     motor_datos@state:
  1847                           	callstack 0
  1848   000028                     	ds	1
  1849   000029                     _new_user:
  1850                           	callstack 0
  1851   000029                     	ds	1
  1852   00002A                     _new_configuration:
  1853                           	callstack 0
  1854   00002A                     	ds	1
  1855   00002B                     motorTerminal@index:
  1856                           	callstack 0
  1857   00002B                     	ds	1
  1858   00002C                     motorTerminal@state:
  1859                           	callstack 0
  1860   00002C                     	ds	1
  1861   00002D                     _hashtag_pressed:
  1862                           	callstack 0
  1863   00002D                     	ds	1
  1864   00002E                     _ColumnAct:
  1865                           	callstack 0
  1866   00002E                     	ds	1
  1867   00002F                     _RowAct:
  1868                           	callstack 0
  1869   00002F                     	ds	1
  1870   000030                     _Columns:
  1871                           	callstack 0
  1872   000030                     	ds	1
  1873   000031                     _Rows:
  1874                           	callstack 0
  1875   000031                     	ds	1
  1876   000032                     motor_RFID@tempRegValue:
  1877                           	callstack 0
  1878   000032                     	ds	1
  1879   000033                     motor_RFID@allZero:
  1880                           	callstack 0
  1881   000033                     	ds	1
  1882   000034                     motor_RFID@checksum:
  1883                           	callstack 0
  1884   000034                     	ds	1
  1885   000035                     motor_RFID@TagType:
  1886                           	callstack 0
  1887   000035                     	ds	1
  1888   000036                     	ds	1
  1889   000037                     motor_RFID@i:
  1890                           	callstack 0
  1891   000037                     	ds	1
  1892   000038                     motor_RFID@n:
  1893                           	callstack 0
  1894   000038                     	ds	1
  1895   000039                     motor_RFID@waitIRq:
  1896                           	callstack 0
  1897   000039                     	ds	1
  1898   00003A                     motor_RFID@irqEn:
  1899                           	callstack 0
  1900   00003A                     	ds	1
  1901   00003B                     motor_RFID@substate:
  1902                           	callstack 0
  1903   00003B                     	ds	1
  1904   00003C                     motor_RFID@state:
  1905                           	callstack 0
  1906   00003C                     	ds	1
  1907   00003D                     _state:
  1908                           	callstack 0
  1909   00003D                     	ds	1
  1910   00003E                     _tecla:
  1911                           	callstack 0
  1912   00003E                     	ds	1
  1913   00003F                     _Columnas:
  1914                           	callstack 0
  1915   00003F                     	ds	1
  1916   000040                     _Filas:
  1917                           	callstack 0
  1918   000040                     	ds	1
  1919   000041                     _ActualLeds:
  1920                           	callstack 0
  1921   000041                     	ds	6
  1922   000047                     _currentUser:
  1923                           	callstack 0
  1924   000047                     	ds	5
  1925   00004C                     _timer@TAD_LEDS$F1057:
  1926                           	callstack 0
  1927   00004C                     	ds	1
  1928   00004D                     _Timer:
  1929                           	callstack 0
  1930   00004D                     	ds	1
  1931   00004E                     _timer:
  1932                           	callstack 0
  1933   00004E                     	ds	1
  1934                           
  1935                           	psect	dataCOMRAM
  1936   00006F                     __pdataCOMRAM:
  1937                           	callstack 0
  1938   00006F                     _currentTime:
  1939                           	callstack 0
  1940   00006F                     	ds	4
  1941   000073                     motorTerminal@hour:
  1942                           	callstack 0
  1943   000073                     	ds	4
  1944                           
  1945                           	psect	dataBANK0
  1946   000080                     __pdataBANK0:
  1947                           	callstack 0
  1948   000080                     _userUIDs:
  1949                           	callstack 0
  1950   000080                     	ds	64
  1951   0000C0                     _configurations:
  1952                           	callstack 0
  1953   0000C0                     	ds	24
  1954                           
  1955                           	psect	cstackCOMRAM
  1956   00004F                     __pcstackCOMRAM:
  1957                           	callstack 0
  1958   00004F                     ??_LowRSI:
  1959                           
  1960                           ; 1 bytes @ 0x0
  1961   00004F                     	ds	1
  1962   000050                     ?_Terminal_TXAvailable:
  1963                           	callstack 0
  1964   000050                     ?_TI_GetTics:
  1965                           	callstack 0
  1966   000050                     TI_Init@counter:
  1967                           	callstack 0
  1968   000050                     TI_NewTimer@TimerHandle:
  1969                           	callstack 0
  1970   000050                     TI_ResetTics@TimerHandle:
  1971                           	callstack 0
  1972   000050                     saveHourToData@hour:
  1973                           	callstack 0
  1974   000050                     setLEDIntensity@ledIndex:
  1975                           	callstack 0
  1976   000050                     ??_GetTecla:
  1977   000050                     ??_EscriuPrimeraOrdre:
  1978   000050                     ??_delay_us:
  1979   000050                     ??_CantaPartAlta:
  1980   000050                     ??_CantaPartBaixa:
  1981   000050                     
  1982                           ; 1 bytes @ 0x1
  1983   000050                     	ds	1
  1984   000051                     CantaPartAlta@c:
  1985                           	callstack 0
  1986   000051                     CantaPartBaixa@c:
  1987                           	callstack 0
  1988   000051                     EscriuPrimeraOrdre@ordre:
  1989                           	callstack 0
  1990   000051                     setLEDIntensity@intensity:
  1991                           	callstack 0
  1992   000051                     
  1993                           ; 1 bytes @ 0x2
  1994   000051                     	ds	1
  1995   000052                     TI_NewTimer@Comptador:
  1996                           	callstack 0
  1997   000052                     CantaIR@IR:
  1998                           	callstack 0
  1999   000052                     CantaData@Data:
  2000                           	callstack 0
  2001   000052                     setLEDIntensity@userIndex:
  2002                           	callstack 0
  2003   000052                     GetTecla@keymap:
  2004                           	callstack 0
  2005   000052                     ??_Terminal_TXAvailable:
  2006   000052                     
  2007                           ; 1 bytes @ 0x3
  2008   000052                     	ds	1
  2009   000053                     delay_us@howMany:
  2010                           	callstack 0
  2011   000053                     Terminal_SendChar@c:
  2012                           	callstack 0
  2013   000053                     setLed@tecla:
  2014                           	callstack 0
  2015   000053                     
  2016                           ; 1 bytes @ 0x4
  2017   000053                     	ds	1
  2018   000054                     delay_us@x:
  2019                           	callstack 0
  2020   000054                     Terminal_SendString@str:
  2021                           	callstack 0
  2022   000054                     ??_TI_GetTics:
  2023                           
  2024                           ; 1 bytes @ 0x5
  2025   000054                     	ds	1
  2026   000055                     ??_MFRC522_Rd:
  2027                           
  2028                           ; 1 bytes @ 0x6
  2029   000055                     	ds	1
  2030   000056                     MFRC522_Rd@Address:
  2031                           	callstack 0
  2032   000056                     printfUID@currentUser:
  2033                           	callstack 0
  2034   000056                     printLedConfig@leds:
  2035                           	callstack 0
  2036   000056                     showAllConfigurations@j:
  2037                           	callstack 0
  2038   000056                     
  2039                           ; 1 bytes @ 0x7
  2040   000056                     	ds	1
  2041   000057                     MFRC522_Rd@ucAddr:
  2042                           	callstack 0
  2043   000057                     _printLedConfig$936:
  2044                           	callstack 0
  2045   000057                     ??_printfUID:
  2046   000057                     
  2047                           ; 1 bytes @ 0x8
  2048   000057                     	ds	1
  2049   000058                     MFRC522_Rd@ucResult:
  2050                           	callstack 0
  2051   000058                     _printfUID$926:
  2052                           	callstack 0
  2053   000058                     showAllConfigurations@i:
  2054                           	callstack 0
  2055   000058                     TI_GetTics@CopiaTicsActual:
  2056                           	callstack 0
  2057                           
  2058                           ; 4 bytes @ 0x9
  2059   000058                     	ds	1
  2060   000059                     MFRC522_Rd@i:
  2061                           	callstack 0
  2062   000059                     printLedConfig@val:
  2063                           	callstack 0
  2064                           
  2065                           ; 1 bytes @ 0xA
  2066   000059                     	ds	1
  2067   00005A                     MFRC522_Wr@value:
  2068                           	callstack 0
  2069   00005A                     _printfUID$928:
  2070                           	callstack 0
  2071   00005A                     printLedConfig@i:
  2072                           	callstack 0
  2073                           
  2074                           ; 2 bytes @ 0xB
  2075   00005A                     	ds	1
  2076   00005B                     ??_MFRC522_Wr:
  2077                           
  2078                           ; 1 bytes @ 0xC
  2079   00005B                     	ds	1
  2080   00005C                     TI_GetTics@TimerHandle:
  2081                           	callstack 0
  2082   00005C                     MFRC522_Wr@Address:
  2083                           	callstack 0
  2084   00005C                     printfUID@high:
  2085                           	callstack 0
  2086                           
  2087                           ; 1 bytes @ 0xD
  2088   00005C                     	ds	1
  2089   00005D                     MFRC522_Wr@ucAddr:
  2090                           	callstack 0
  2091   00005D                     WaitForBusy@Busy:
  2092                           	callstack 0
  2093   00005D                     printfUID@low:
  2094                           	callstack 0
  2095   00005D                     Espera@Timer:
  2096                           	callstack 0
  2097   00005D                     
  2098                           ; 1 bytes @ 0xE
  2099   00005D                     	ds	1
  2100   00005E                     GetTecla@columna:
  2101                           	callstack 0
  2102   00005E                     MFRC522_Wr@i:
  2103                           	callstack 0
  2104   00005E                     LcGotoXY@Row:
  2105                           	callstack 0
  2106   00005E                     printfUID@i:
  2107                           	callstack 0
  2108                           
  2109                           ; 2 bytes @ 0xF
  2110   00005E                     	ds	1
  2111   00005F                     GetTecla@fila:
  2112                           	callstack 0
  2113   00005F                     MFRC522_Clear_Bit@mask:
  2114                           	callstack 0
  2115   00005F                     MFRC522_Set_Bit@mask:
  2116                           	callstack 0
  2117   00005F                     Espera@ms:
  2118                           	callstack 0
  2119   00005F                     ??_LcGotoXY:
  2120                           
  2121                           ; 1 bytes @ 0x10
  2122   00005F                     	ds	1
  2123   000060                     MFRC522_Set_Bit@addr:
  2124                           	callstack 0
  2125   000060                     motorTerminal@currentUser:
  2126                           	callstack 0
  2127   000060                     setCurrentUser@UID1:
  2128                           	callstack 0
  2129   000060                     ??_MFRC522_Clear_Bit:
  2130   000060                     
  2131                           ; 1 bytes @ 0x11
  2132   000060                     	ds	1
  2133   000061                     MFRC522_Clear_Bit@addr:
  2134                           	callstack 0
  2135   000061                     setCurrentUser@UID2:
  2136                           	callstack 0
  2137   000061                     _LcGotoXY$805:
  2138                           	callstack 0
  2139   000061                     ??_Espera:
  2140   000061                     
  2141                           ; 1 bytes @ 0x12
  2142   000061                     	ds	1
  2143   000062                     setCurrentUser@UID3:
  2144                           	callstack 0
  2145   000062                     
  2146                           ; 1 bytes @ 0x13
  2147   000062                     	ds	1
  2148   000063                     setCurrentUser@UID4:
  2149                           	callstack 0
  2150   000063                     LcGotoXY@Fisics:
  2151                           	callstack 0
  2152                           
  2153                           ; 2 bytes @ 0x14
  2154   000063                     	ds	1
  2155   000064                     setCurrentUser@UID0:
  2156                           	callstack 0
  2157   000064                     
  2158                           ; 1 bytes @ 0x15
  2159   000064                     	ds	1
  2160   000065                     LcInit@columns:
  2161                           	callstack 0
  2162   000065                     LcGotoXY@Column:
  2163                           	callstack 0
  2164   000065                     ??_motor_RFID:
  2165                           
  2166                           ; 1 bytes @ 0x16
  2167   000065                     	ds	1
  2168   000066                     LcInit@rows:
  2169                           	callstack 0
  2170   000066                     LcPutChar@c:
  2171                           	callstack 0
  2172   000066                     
  2173                           ; 1 bytes @ 0x17
  2174   000066                     	ds	1
  2175   000067                     motor_RFID@backBitsCalc:
  2176                           	callstack 0
  2177   000067                     LcInit@i:
  2178                           	callstack 0
  2179   000067                     LcPutString@s:
  2180                           	callstack 0
  2181                           
  2182                           ; 2 bytes @ 0x18
  2183   000067                     	ds	2
  2184   000069                     motor_RFID@currentUser:
  2185                           	callstack 0
  2186   000069                     
  2187                           ; 1 bytes @ 0x1A
  2188   000069                     	ds	1
  2189   00006A                     motor_RFID@differentUID:
  2190                           	callstack 0
  2191                           
  2192                           ; 1 bytes @ 0x1B
  2193   00006A                     	ds	1
  2194   00006B                     motor_RFID@fifoLevel:
  2195                           	callstack 0
  2196                           
  2197                           ; 1 bytes @ 0x1C
  2198   00006B                     	ds	1
  2199   00006C                     motor_RFID@lastBitsVal:
  2200                           	callstack 0
  2201                           
  2202                           ; 1 bytes @ 0x1D
  2203   00006C                     	ds	1
  2204   00006D                     motor_RFID@i_571:
  2205                           	callstack 0
  2206                           
  2207                           ; 2 bytes @ 0x1E
  2208   00006D                     	ds	2
  2209   00006F                     
  2210                           ; 1 bytes @ 0x20
  2211 ;;
  2212 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2213 ;;
  2214 ;; *************** function _main *****************
  2215 ;; Defined at:
  2216 ;;		line 39 in file "main.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1
  2230 ;;      Params:         0       0       0
  2231 ;;      Locals:         0       0       0
  2232 ;;      Temps:          0       0       0
  2233 ;;      Totals:         0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels required when called: 9
  2236 ;; This function calls:
  2237 ;;		_LcInit
  2238 ;;		_LcPutString
  2239 ;;		_TI_Init
  2240 ;;		_Terminal_Init
  2241 ;;		_initLeds
  2242 ;;		_initPorts
  2243 ;;		_initRFID
  2244 ;;		_initTeclado
  2245 ;;		_motorTeclado
  2246 ;;		_motorTerminal
  2247 ;;		_motor_RFID
  2248 ;; This function is called by:
  2249 ;;		Startup code after reset
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text0
  2254   0016E8                     __ptext0:
  2255                           	callstack 0
  2256   0016E8                     _main:
  2257                           	callstack 22
  2258   0016E8                     
  2259                           ;main.c: 40:  ADCON1 = 0x0F;
  2260   0016E8  ECA8  F00C         	call	_TI_Init	;wreg free
  2261                           
  2262                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2263   0016EC  EC51  F00D         	call	_initTeclado	;wreg free
  2264   0016F0                     
  2265                           ;main.c: 42: }
  2266   0016F0  EC9C  F00D         	call	_initRFID	;wreg free
  2267   0016F4                     
  2268                           ;main.c: 43: 
  2269   0016F4  EC7B  F00D         	call	_Terminal_Init	;wreg free
  2270   0016F8                     
  2271                           ;main.c: 44: 
  2272   0016F8  ECA9  F00D         	call	_initPorts	;wreg free
  2273   0016FC                     
  2274                           ;main.c: 45: 
  2275   0016FC  EC83  F00D         	call	_initLeds	;wreg free
  2276   001700                     
  2277                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2278   001700  0E10               	movlw	16
  2279   001702  6E65               	movwf	LcInit@columns^0,c
  2280   001704  0E02               	movlw	2
  2281   001706  ECC8  F005         	call	_LcInit
  2282   00170A                     
  2283                           ;main.c: 50: }
  2284   00170A  8EF2               	bsf	242,7,c	;volatile
  2285   00170C  9CF2               	bcf	242,6,c	;volatile
  2286   00170E  0EF3               	movlw	low STR_1
  2287   001710  6E67               	movwf	LcPutString@s^0,c
  2288   001712  0E1F               	movlw	high STR_1
  2289   001714  6E68               	movwf	(LcPutString@s+1)^0,c
  2290   001716  EC8D  F00C         	call	_LcPutString	;wreg free
  2291   00171A                     l3733:
  2292   00171A  EC2B  F003         	call	_motorTeclado	;wreg free
  2293   00171E  EC0A  F005         	call	_motorTerminal	;wreg free
  2294   001722  EC15  F000         	call	_motor_RFID	;wreg free
  2295   001726  748D               	btg	141,2,c	;volatile
  2296   001728  EF8D  F00B         	goto	l3733
  2297   00172C  EF13  F000         	goto	start
  2298   001730                     __end_of_main:
  2299                           	callstack 0
  2300                           
  2301 ;; *************** function _motor_RFID *****************
  2302 ;; Defined at:
  2303 ;;		line 140 in file "TAD_RFID.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;  i               2   30[COMRAM] int 
  2308 ;;  differentUID    1   27[COMRAM] unsigned char 
  2309 ;;  currentUser     1   26[COMRAM] PTR unsigned char 
  2310 ;;		 -> NULL(0), currentUser(5), 
  2311 ;;  backBitsCalc    2   24[COMRAM] unsigned int 
  2312 ;;  lastBitsVal     1   29[COMRAM] unsigned char 
  2313 ;;  fifoLevel       1   28[COMRAM] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1
  2323 ;;      Params:         0       0       0
  2324 ;;      Locals:         8       0       0
  2325 ;;      Temps:          2       0       0
  2326 ;;      Totals:        10       0       0
  2327 ;;Total ram usage:       10 bytes
  2328 ;; Hardware stack levels used: 1
  2329 ;; Hardware stack levels required when called: 8
  2330 ;; This function calls:
  2331 ;;		_MFRC522_Rd
  2332 ;;		_MFRC522_Wr
  2333 ;;		_getActualUID
  2334 ;;		_setCurrentUser
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text1
  2341   00002A                     __ptext1:
  2342                           	callstack 0
  2343   00002A                     _motor_RFID:
  2344                           	callstack 22
  2345   00002A                     
  2346                           ;TAD_RFID.c: 141:     static char state = 0;;TAD_RFID.c: 142:     static char substate =
      +                           0;;TAD_RFID.c: 143:     static char irqEn, waitIRq, n;;TAD_RFID.c: 144:     static unsi
      +                          gned char i;;TAD_RFID.c: 145:     static char _status;;TAD_RFID.c: 146:     static unsig
      +                          ned unLen;;TAD_RFID.c: 147:     static char TagType;;TAD_RFID.c: 148:     static unsigne
      +                          d char UID[6];;TAD_RFID.c: 149:     static unsigned char checksum;;TAD_RFID.c: 150:     
      +                          static unsigned char allZero;;TAD_RFID.c: 151:     static unsigned char tempRegValue;
  2347   00002A  EF1F  F003         	goto	l3701
  2348   00002E                     l3449:
  2349                           
  2350                           ;TAD_RFID.c: 159:                     MFRC522_Wr(0x0D, 0x07);
  2351   00002E  0E07               	movlw	7
  2352   000030  6E5A               	movwf	MFRC522_Wr@value^0,c
  2353   000032  0E0D               	movlw	13
  2354   000034  EC51  F008         	call	_MFRC522_Wr
  2355   000038                     
  2356                           ;TAD_RFID.c: 160:                     TagType = 0x26;
  2357   000038  0E26               	movlw	38
  2358   00003A  6E35               	movwf	motor_RFID@TagType^0,c
  2359   00003C                     l3453:
  2360                           
  2361                           ;TAD_RFID.c: 161:                     substate = 1;
  2362   00003C  0E01               	movlw	1
  2363   00003E  6E3B               	movwf	motor_RFID@substate^0,c
  2364                           
  2365                           ;TAD_RFID.c: 162:                     break;
  2366   000040  EF2A  F003         	goto	l357
  2367   000044                     l3455:
  2368                           
  2369                           ;TAD_RFID.c: 165:                     irqEn = 0x77;
  2370   000044  0E77               	movlw	119
  2371   000046  6E3A               	movwf	motor_RFID@irqEn^0,c
  2372                           
  2373                           ;TAD_RFID.c: 166:                     waitIRq = 0x30;
  2374   000048  0E30               	movlw	48
  2375   00004A  6E39               	movwf	motor_RFID@waitIRq^0,c
  2376   00004C                     
  2377                           ;TAD_RFID.c: 167:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2378   00004C  0EF7               	movlw	247
  2379   00004E  6E5A               	movwf	MFRC522_Wr@value^0,c
  2380   000050  0E02               	movlw	2
  2381   000052  EC51  F008         	call	_MFRC522_Wr
  2382   000056                     l3459:
  2383                           
  2384                           ;TAD_RFID.c: 168:                     substate = 2;
  2385   000056  0E02               	movlw	2
  2386   000058  6E3B               	movwf	motor_RFID@substate^0,c
  2387                           
  2388                           ;TAD_RFID.c: 169:                     break;
  2389   00005A  EF2A  F003         	goto	l357
  2390   00005E                     l3461:
  2391                           
  2392                           ;TAD_RFID.c: 172:                     tempRegValue = MFRC522_Rd(0x04);
  2393   00005E  0E04               	movlw	4
  2394   000060  ECA5  F008         	call	_MFRC522_Rd
  2395   000064  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2396   000066                     l3463:
  2397                           
  2398                           ;TAD_RFID.c: 173:                     substate = 3;
  2399   000066  0E03               	movlw	3
  2400   000068  6E3B               	movwf	motor_RFID@substate^0,c
  2401                           
  2402                           ;TAD_RFID.c: 174:                     break;
  2403   00006A  EF2A  F003         	goto	l357
  2404   00006E                     l3465:
  2405                           
  2406                           ;TAD_RFID.c: 177:                     MFRC522_Wr(0x04, tempRegValue & ~0x80);
  2407   00006E  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2408   000070  0B7F               	andlw	127
  2409   000072  6E5A               	movwf	MFRC522_Wr@value^0,c
  2410   000074  0E04               	movlw	4
  2411   000076  EC51  F008         	call	_MFRC522_Wr
  2412   00007A                     l3467:
  2413                           
  2414                           ;TAD_RFID.c: 178:                     substate = 4;
  2415   00007A  0E04               	movlw	4
  2416   00007C  6E3B               	movwf	motor_RFID@substate^0,c
  2417                           
  2418                           ;TAD_RFID.c: 179:                     break;
  2419   00007E  EF2A  F003         	goto	l357
  2420   000082                     l3469:
  2421                           
  2422                           ;TAD_RFID.c: 182:                     tempRegValue = MFRC522_Rd(0x0A);
  2423   000082  0E0A               	movlw	10
  2424   000084  ECA5  F008         	call	_MFRC522_Rd
  2425   000088  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2426   00008A                     l3471:
  2427                           
  2428                           ;TAD_RFID.c: 183:                     substate = 5;
  2429   00008A  0E05               	movlw	5
  2430   00008C  6E3B               	movwf	motor_RFID@substate^0,c
  2431                           
  2432                           ;TAD_RFID.c: 184:                     break;
  2433   00008E  EF2A  F003         	goto	l357
  2434   000092                     l3473:
  2435                           
  2436                           ;TAD_RFID.c: 187:                     MFRC522_Wr(0x0A, tempRegValue | 0x80);
  2437   000092  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2438   000094  0980               	iorlw	128
  2439   000096  6E5A               	movwf	MFRC522_Wr@value^0,c
  2440   000098  0E0A               	movlw	10
  2441   00009A  EC51  F008         	call	_MFRC522_Wr
  2442   00009E                     l3475:
  2443                           
  2444                           ;TAD_RFID.c: 188:                     substate = 6;
  2445   00009E  0E06               	movlw	6
  2446   0000A0  6E3B               	movwf	motor_RFID@substate^0,c
  2447                           
  2448                           ;TAD_RFID.c: 189:                     break;
  2449   0000A2  EF2A  F003         	goto	l357
  2450   0000A6                     l3477:
  2451                           
  2452                           ;TAD_RFID.c: 192:                     MFRC522_Wr(0x01, 0x00);
  2453   0000A6  0E00               	movlw	0
  2454   0000A8  6E5A               	movwf	MFRC522_Wr@value^0,c
  2455   0000AA  0E01               	movlw	1
  2456   0000AC  EC51  F008         	call	_MFRC522_Wr
  2457   0000B0                     l3479:
  2458                           
  2459                           ;TAD_RFID.c: 193:                     substate = 7;
  2460   0000B0  0E07               	movlw	7
  2461   0000B2  6E3B               	movwf	motor_RFID@substate^0,c
  2462                           
  2463                           ;TAD_RFID.c: 194:                     break;
  2464   0000B4  EF2A  F003         	goto	l357
  2465   0000B8                     l3481:
  2466                           
  2467                           ;TAD_RFID.c: 197:                     MFRC522_Wr(0x09, TagType);
  2468   0000B8  C035  F05A         	movff	motor_RFID@TagType,MFRC522_Wr@value
  2469   0000BC  0E09               	movlw	9
  2470   0000BE  EC51  F008         	call	_MFRC522_Wr
  2471   0000C2                     l3483:
  2472                           
  2473                           ;TAD_RFID.c: 198:                     substate = 8;
  2474   0000C2  0E08               	movlw	8
  2475   0000C4  6E3B               	movwf	motor_RFID@substate^0,c
  2476                           
  2477                           ;TAD_RFID.c: 199:                     break;
  2478   0000C6  EF2A  F003         	goto	l357
  2479   0000CA                     l3485:
  2480                           
  2481                           ;TAD_RFID.c: 202:                     MFRC522_Wr(0x01, 0x0C);
  2482   0000CA  0E0C               	movlw	12
  2483   0000CC  6E5A               	movwf	MFRC522_Wr@value^0,c
  2484   0000CE  0E01               	movlw	1
  2485   0000D0  EC51  F008         	call	_MFRC522_Wr
  2486   0000D4                     l3487:
  2487                           
  2488                           ;TAD_RFID.c: 203:                     substate = 9;
  2489   0000D4  0E09               	movlw	9
  2490   0000D6  6E3B               	movwf	motor_RFID@substate^0,c
  2491                           
  2492                           ;TAD_RFID.c: 204:                     break;
  2493   0000D8  EF2A  F003         	goto	l357
  2494   0000DC                     l3489:
  2495                           
  2496                           ;TAD_RFID.c: 207:                     tempRegValue = MFRC522_Rd(0x0D);
  2497   0000DC  0E0D               	movlw	13
  2498   0000DE  ECA5  F008         	call	_MFRC522_Rd
  2499   0000E2  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2500   0000E4                     l3491:
  2501                           
  2502                           ;TAD_RFID.c: 208:                     substate = 10;
  2503   0000E4  0E0A               	movlw	10
  2504   0000E6  6E3B               	movwf	motor_RFID@substate^0,c
  2505                           
  2506                           ;TAD_RFID.c: 209:                     break;
  2507   0000E8  EF2A  F003         	goto	l357
  2508   0000EC                     l3493:
  2509                           
  2510                           ;TAD_RFID.c: 212:                     MFRC522_Wr(0x0D, tempRegValue | 0x80);
  2511   0000EC  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2512   0000EE  0980               	iorlw	128
  2513   0000F0  6E5A               	movwf	MFRC522_Wr@value^0,c
  2514   0000F2  0E0D               	movlw	13
  2515   0000F4  EC51  F008         	call	_MFRC522_Wr
  2516   0000F8                     
  2517                           ;TAD_RFID.c: 213:                     i = 0xFF;
  2518   0000F8  6837               	setf	motor_RFID@i^0,c
  2519   0000FA                     l3497:
  2520                           
  2521                           ;TAD_RFID.c: 214:                     substate = 11;
  2522   0000FA  0E0B               	movlw	11
  2523   0000FC  6E3B               	movwf	motor_RFID@substate^0,c
  2524                           
  2525                           ;TAD_RFID.c: 215:                     break;
  2526   0000FE  EF2A  F003         	goto	l357
  2527   000102                     l3499:
  2528                           
  2529                           ;TAD_RFID.c: 218:                     n = MFRC522_Rd(0x04);
  2530   000102  0E04               	movlw	4
  2531   000104  ECA5  F008         	call	_MFRC522_Rd
  2532   000108  6E38               	movwf	motor_RFID@n^0,c
  2533   00010A                     
  2534                           ;TAD_RFID.c: 219:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2535   00010A  B038               	btfsc	motor_RFID@n^0,0,c
  2536   00010C  EF8A  F000         	goto	u2651
  2537   000110  EF8C  F000         	goto	u2650
  2538   000114                     u2651:
  2539   000114  EF99  F000         	goto	l3507
  2540   000118                     u2650:
  2541   000118  5038               	movf	motor_RFID@n^0,w,c
  2542   00011A  1439               	andwf	motor_RFID@waitIRq^0,w,c
  2543   00011C  0900               	iorlw	0
  2544   00011E  A4D8               	btfss	status,2,c
  2545   000120  EF94  F000         	goto	u2661
  2546   000124  EF96  F000         	goto	u2660
  2547   000128                     u2661:
  2548   000128  EF99  F000         	goto	l3507
  2549   00012C                     u2660:
  2550   00012C  2E37               	decfsz	motor_RFID@i^0,f,c
  2551   00012E  EF2A  F003         	goto	l357
  2552   000132                     l3507:
  2553                           
  2554                           ;TAD_RFID.c: 220:                         substate = 12;
  2555   000132  0E0C               	movlw	12
  2556   000134  6E3B               	movwf	motor_RFID@substate^0,c
  2557   000136  EF2A  F003         	goto	l357
  2558   00013A                     l3509:
  2559                           
  2560                           ;TAD_RFID.c: 225:                     tempRegValue = MFRC522_Rd(0x0D);
  2561   00013A  0E0D               	movlw	13
  2562   00013C  ECA5  F008         	call	_MFRC522_Rd
  2563   000140  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2564   000142                     l3511:
  2565                           
  2566                           ;TAD_RFID.c: 226:                     substate = 13;
  2567   000142  0E0D               	movlw	13
  2568   000144  6E3B               	movwf	motor_RFID@substate^0,c
  2569                           
  2570                           ;TAD_RFID.c: 227:                     break;
  2571   000146  EF2A  F003         	goto	l357
  2572   00014A                     l3513:
  2573                           
  2574                           ;TAD_RFID.c: 230:                     MFRC522_Wr(0x0D, tempRegValue & ~0x80);
  2575   00014A  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2576   00014C  0B7F               	andlw	127
  2577   00014E  6E5A               	movwf	MFRC522_Wr@value^0,c
  2578   000150  0E0D               	movlw	13
  2579   000152  EC51  F008         	call	_MFRC522_Wr
  2580   000156                     l3515:
  2581                           
  2582                           ;TAD_RFID.c: 231:                     substate = 14;
  2583   000156  0E0E               	movlw	14
  2584   000158  6E3B               	movwf	motor_RFID@substate^0,c
  2585                           
  2586                           ;TAD_RFID.c: 232:                     break;
  2587   00015A  EF2A  F003         	goto	l357
  2588   00015E                     l3517:
  2589                           
  2590                           ;TAD_RFID.c: 235:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2591   00015E  5037               	movf	motor_RFID@i^0,w,c
  2592   000160  B4D8               	btfsc	status,2,c
  2593   000162  EFB5  F000         	goto	u2671
  2594   000166  EFB7  F000         	goto	u2670
  2595   00016A                     u2671:
  2596   00016A  EF01  F001         	goto	l3533
  2597   00016E                     u2670:
  2598   00016E  0E06               	movlw	6
  2599   000170  ECA5  F008         	call	_MFRC522_Rd
  2600   000174  6E65               	movwf	??_motor_RFID^0,c
  2601   000176  0E1B               	movlw	27
  2602   000178  1665               	andwf	??_motor_RFID^0,f,c
  2603   00017A  A4D8               	btfss	status,2,c
  2604   00017C  EFC2  F000         	goto	u2681
  2605   000180  EFC4  F000         	goto	u2680
  2606   000184                     u2681:
  2607   000184  EF01  F001         	goto	l3533
  2608   000188                     u2680:
  2609   000188                     
  2610                           ;TAD_RFID.c: 236:                         unsigned char fifoLevel = MFRC522_Rd(0x0A);
  2611   000188  0E0A               	movlw	10
  2612   00018A  ECA5  F008         	call	_MFRC522_Rd
  2613   00018E  6E6B               	movwf	motor_RFID@fifoLevel^0,c
  2614                           
  2615                           ;TAD_RFID.c: 237:                         unsigned char lastBitsVal = MFRC522_Rd(0x0C) &
      +                           0x07;
  2616   000190  0E0C               	movlw	12
  2617   000192  ECA5  F008         	call	_MFRC522_Rd
  2618   000196  0B07               	andlw	7
  2619   000198  6E6C               	movwf	motor_RFID@lastBitsVal^0,c
  2620   00019A                     
  2621                           ;TAD_RFID.c: 238:                         unsigned backBitsCalc;;TAD_RFID.c: 239:       
      +                                            if (lastBitsVal)
  2622   00019A  506C               	movf	motor_RFID@lastBitsVal^0,w,c
  2623   00019C  B4D8               	btfsc	status,2,c
  2624   00019E  EFD3  F000         	goto	u2691
  2625   0001A2  EFD5  F000         	goto	u2690
  2626   0001A6                     u2691:
  2627   0001A6  EFED  F000         	goto	l3527
  2628   0001AA                     u2690:
  2629   0001AA                     
  2630                           ;TAD_RFID.c: 240:                             backBitsCalc = (fifoLevel - 1) * 8 + lastB
      +                          itsVal;
  2631   0001AA  506C               	movf	motor_RFID@lastBitsVal^0,w,c
  2632   0001AC  C06B  F065         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2633   0001B0  6A66               	clrf	(??_motor_RFID+1)^0,c
  2634   0001B2  90D8               	bcf	status,0,c
  2635   0001B4  3665               	rlcf	??_motor_RFID^0,f,c
  2636   0001B6  3666               	rlcf	(??_motor_RFID+1)^0,f,c
  2637   0001B8  90D8               	bcf	status,0,c
  2638   0001BA  3665               	rlcf	??_motor_RFID^0,f,c
  2639   0001BC  3666               	rlcf	(??_motor_RFID+1)^0,f,c
  2640   0001BE  90D8               	bcf	status,0,c
  2641   0001C0  3665               	rlcf	??_motor_RFID^0,f,c
  2642   0001C2  3666               	rlcf	(??_motor_RFID+1)^0,f,c
  2643   0001C4  2665               	addwf	??_motor_RFID^0,f,c
  2644   0001C6  0E00               	movlw	0
  2645   0001C8  2266               	addwfc	(??_motor_RFID+1)^0,f,c
  2646   0001CA  0EF8               	movlw	248
  2647   0001CC  2465               	addwf	??_motor_RFID^0,w,c
  2648   0001CE  6E67               	movwf	motor_RFID@backBitsCalc^0,c
  2649   0001D0  0EFF               	movlw	255
  2650   0001D2  2066               	addwfc	(??_motor_RFID+1)^0,w,c
  2651   0001D4  6E68               	movwf	(motor_RFID@backBitsCalc+1)^0,c
  2652   0001D6  EFF3  F000         	goto	l3529
  2653   0001DA                     l3527:
  2654                           
  2655                           ;TAD_RFID.c: 242:                             backBitsCalc = fifoLevel * 8;
  2656   0001DA  506B               	movf	motor_RFID@fifoLevel^0,w,c
  2657   0001DC  0D08               	mullw	8
  2658   0001DE  CFF3 F067          	movff	prodl,motor_RFID@backBitsCalc
  2659   0001E2  CFF4 F068          	movff	prodh,motor_RFID@backBitsCalc+1
  2660   0001E6                     l3529:
  2661                           
  2662                           ;TAD_RFID.c: 244:                         if (backBitsCalc == 0x10) {
  2663   0001E6  0E10               	movlw	16
  2664   0001E8  1867               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2665   0001EA  1068               	iorwf	(motor_RFID@backBitsCalc+1)^0,w,c
  2666   0001EC  A4D8               	btfss	status,2,c
  2667   0001EE  EFFB  F000         	goto	u2701
  2668   0001F2  EFFD  F000         	goto	u2700
  2669   0001F6                     u2701:
  2670   0001F6  EF01  F001         	goto	l3533
  2671   0001FA                     u2700:
  2672   0001FA                     l3531:
  2673                           
  2674                           ;TAD_RFID.c: 245:                             substate = 15;
  2675   0001FA  0E0F               	movlw	15
  2676   0001FC  6E3B               	movwf	motor_RFID@substate^0,c
  2677                           
  2678                           ;TAD_RFID.c: 246:                         } else {
  2679   0001FE  EF2A  F003         	goto	l357
  2680   000202                     l3533:
  2681                           
  2682                           ;TAD_RFID.c: 247:                             substate = 16;
  2683   000202  0E10               	movlw	16
  2684   000204  6E3B               	movwf	motor_RFID@substate^0,c
  2685   000206  EF2A  F003         	goto	l357
  2686   00020A                     l3537:
  2687                           
  2688                           ;TAD_RFID.c: 255:                     state = 1;
  2689   00020A  0E01               	movlw	1
  2690   00020C  6E3C               	movwf	motor_RFID@state^0,c
  2691   00020E                     l3539:
  2692                           
  2693                           ;TAD_RFID.c: 256:                     substate = 0;
  2694   00020E  6A3B               	clrf	motor_RFID@substate^0,c
  2695                           
  2696                           ;TAD_RFID.c: 257:                     break;
  2697   000210  EF2A  F003         	goto	l357
  2698   000214                     l308:
  2699                           
  2700                           ;TAD_RFID.c: 260:                     state = 0;
  2701   000214  6A3C               	clrf	motor_RFID@state^0,c
  2702                           
  2703                           ;TAD_RFID.c: 261:                     substate = 0;
  2704   000216  6A3B               	clrf	motor_RFID@substate^0,c
  2705                           
  2706                           ;TAD_RFID.c: 262:                     break;
  2707   000218  EF2A  F003         	goto	l357
  2708   00021C                     l3543:
  2709   00021C  503B               	movf	motor_RFID@substate^0,w,c
  2710                           
  2711                           ; Switch size 1, requested type "simple"
  2712                           ; Number of cases is 17, Range of values is 0 to 16
  2713                           ; switch strategies available:
  2714                           ; Name         Instructions Cycles
  2715                           ; simple_byte           52    27 (average)
  2716                           ;	Chosen strategy is simple_byte
  2717   00021E  0A00               	xorlw	0	; case 0
  2718   000220  B4D8               	btfsc	status,2,c
  2719   000222  EF17  F000         	goto	l3449
  2720   000226  0A01               	xorlw	1	; case 1
  2721   000228  B4D8               	btfsc	status,2,c
  2722   00022A  EF22  F000         	goto	l3455
  2723   00022E  0A03               	xorlw	3	; case 2
  2724   000230  B4D8               	btfsc	status,2,c
  2725   000232  EF2F  F000         	goto	l3461
  2726   000236  0A01               	xorlw	1	; case 3
  2727   000238  B4D8               	btfsc	status,2,c
  2728   00023A  EF37  F000         	goto	l3465
  2729   00023E  0A07               	xorlw	7	; case 4
  2730   000240  B4D8               	btfsc	status,2,c
  2731   000242  EF41  F000         	goto	l3469
  2732   000246  0A01               	xorlw	1	; case 5
  2733   000248  B4D8               	btfsc	status,2,c
  2734   00024A  EF49  F000         	goto	l3473
  2735   00024E  0A03               	xorlw	3	; case 6
  2736   000250  B4D8               	btfsc	status,2,c
  2737   000252  EF53  F000         	goto	l3477
  2738   000256  0A01               	xorlw	1	; case 7
  2739   000258  B4D8               	btfsc	status,2,c
  2740   00025A  EF5C  F000         	goto	l3481
  2741   00025E  0A0F               	xorlw	15	; case 8
  2742   000260  B4D8               	btfsc	status,2,c
  2743   000262  EF65  F000         	goto	l3485
  2744   000266  0A01               	xorlw	1	; case 9
  2745   000268  B4D8               	btfsc	status,2,c
  2746   00026A  EF6E  F000         	goto	l3489
  2747   00026E  0A03               	xorlw	3	; case 10
  2748   000270  B4D8               	btfsc	status,2,c
  2749   000272  EF76  F000         	goto	l3493
  2750   000276  0A01               	xorlw	1	; case 11
  2751   000278  B4D8               	btfsc	status,2,c
  2752   00027A  EF81  F000         	goto	l3499
  2753   00027E  0A07               	xorlw	7	; case 12
  2754   000280  B4D8               	btfsc	status,2,c
  2755   000282  EF9D  F000         	goto	l3509
  2756   000286  0A01               	xorlw	1	; case 13
  2757   000288  B4D8               	btfsc	status,2,c
  2758   00028A  EFA5  F000         	goto	l3513
  2759   00028E  0A03               	xorlw	3	; case 14
  2760   000290  B4D8               	btfsc	status,2,c
  2761   000292  EFAF  F000         	goto	l3517
  2762   000296  0A01               	xorlw	1	; case 15
  2763   000298  B4D8               	btfsc	status,2,c
  2764   00029A  EF05  F001         	goto	l3537
  2765   00029E  0A1F               	xorlw	31	; case 16
  2766   0002A0  B4D8               	btfsc	status,2,c
  2767   0002A2  EF0A  F001         	goto	l308
  2768   0002A6  EF2A  F003         	goto	l357
  2769   0002AA                     l3545:
  2770                           
  2771                           ;TAD_RFID.c: 270:                     MFRC522_Wr(0x0D, 0x00);
  2772   0002AA  0E00               	movlw	0
  2773   0002AC  6E5A               	movwf	MFRC522_Wr@value^0,c
  2774   0002AE  0E0D               	movlw	13
  2775   0002B0  EC51  F008         	call	_MFRC522_Wr
  2776   0002B4                     
  2777                           ;TAD_RFID.c: 271:                     UID[0] = 0x93;
  2778   0002B4  0E93               	movlw	147
  2779   0002B6  6E15               	movwf	motor_RFID@UID^0,c
  2780   0002B8                     
  2781                           ;TAD_RFID.c: 272:                     UID[1] = 0x20;
  2782   0002B8  0E20               	movlw	32
  2783   0002BA  6E16               	movwf	(motor_RFID@UID+1)^0,c
  2784   0002BC  EF1E  F000         	goto	l3453
  2785   0002C0                     l3553:
  2786                           
  2787                           ;TAD_RFID.c: 277:                     tempRegValue = MFRC522_Rd(0x08);
  2788   0002C0  0E08               	movlw	8
  2789   0002C2  ECA5  F008         	call	_MFRC522_Rd
  2790   0002C6  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2791   0002C8  EF2B  F000         	goto	l3459
  2792   0002CC                     l3557:
  2793                           
  2794                           ;TAD_RFID.c: 282:                     MFRC522_Wr(0x08, tempRegValue & ~0x08);
  2795   0002CC  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2796   0002CE  0BF7               	andlw	247
  2797   0002D0  6E5A               	movwf	MFRC522_Wr@value^0,c
  2798   0002D2  0E08               	movlw	8
  2799   0002D4  EC51  F008         	call	_MFRC522_Wr
  2800   0002D8  EF33  F000         	goto	l3463
  2801   0002DC                     l3561:
  2802                           
  2803                           ;TAD_RFID.c: 287:                     irqEn = 0x77;
  2804   0002DC  0E77               	movlw	119
  2805   0002DE  6E3A               	movwf	motor_RFID@irqEn^0,c
  2806                           
  2807                           ;TAD_RFID.c: 288:                     waitIRq = 0x30;
  2808   0002E0  0E30               	movlw	48
  2809   0002E2  6E39               	movwf	motor_RFID@waitIRq^0,c
  2810   0002E4                     
  2811                           ;TAD_RFID.c: 289:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2812   0002E4  0EF7               	movlw	247
  2813   0002E6  6E5A               	movwf	MFRC522_Wr@value^0,c
  2814   0002E8  0E02               	movlw	2
  2815   0002EA  EC51  F008         	call	_MFRC522_Wr
  2816   0002EE  EF3D  F000         	goto	l3467
  2817   0002F2                     l3567:
  2818                           
  2819                           ;TAD_RFID.c: 294:                     tempRegValue = MFRC522_Rd(0x04);
  2820   0002F2  0E04               	movlw	4
  2821   0002F4  ECA5  F008         	call	_MFRC522_Rd
  2822   0002F8  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2823   0002FA  EF45  F000         	goto	l3471
  2824   0002FE                     l3571:
  2825                           
  2826                           ;TAD_RFID.c: 299:                     MFRC522_Wr(0x04, tempRegValue & ~0x80);
  2827   0002FE  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2828   000300  0B7F               	andlw	127
  2829   000302  6E5A               	movwf	MFRC522_Wr@value^0,c
  2830   000304  0E04               	movlw	4
  2831   000306  EC51  F008         	call	_MFRC522_Wr
  2832   00030A  EF4F  F000         	goto	l3475
  2833   00030E                     l3575:
  2834                           
  2835                           ;TAD_RFID.c: 304:                     tempRegValue = MFRC522_Rd(0x0A);
  2836   00030E  0E0A               	movlw	10
  2837   000310  ECA5  F008         	call	_MFRC522_Rd
  2838   000314  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2839   000316  EF58  F000         	goto	l3479
  2840   00031A                     l3579:
  2841                           
  2842                           ;TAD_RFID.c: 309:                     MFRC522_Wr(0x0A, tempRegValue | 0x80);
  2843   00031A  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2844   00031C  0980               	iorlw	128
  2845   00031E  6E5A               	movwf	MFRC522_Wr@value^0,c
  2846   000320  0E0A               	movlw	10
  2847   000322  EC51  F008         	call	_MFRC522_Wr
  2848   000326  EF61  F000         	goto	l3483
  2849   00032A                     l3583:
  2850                           
  2851                           ;TAD_RFID.c: 314:                     MFRC522_Wr(0x01, 0x00);
  2852   00032A  0E00               	movlw	0
  2853   00032C  6E5A               	movwf	MFRC522_Wr@value^0,c
  2854   00032E  0E01               	movlw	1
  2855   000330  EC51  F008         	call	_MFRC522_Wr
  2856   000334  EF6A  F000         	goto	l3487
  2857   000338                     l3587:
  2858                           
  2859                           ;TAD_RFID.c: 319:                     MFRC522_Wr(0x09, UID[0]);
  2860   000338  C015  F05A         	movff	motor_RFID@UID,MFRC522_Wr@value
  2861   00033C  0E09               	movlw	9
  2862   00033E  EC51  F008         	call	_MFRC522_Wr
  2863                           
  2864                           ;TAD_RFID.c: 320:                     MFRC522_Wr(0x09, UID[1]);
  2865   000342  C016  F05A         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2866   000346  0E09               	movlw	9
  2867   000348  EC51  F008         	call	_MFRC522_Wr
  2868   00034C  EF72  F000         	goto	l3491
  2869   000350                     l3591:
  2870                           
  2871                           ;TAD_RFID.c: 325:                     MFRC522_Wr(0x01, 0x0C);
  2872   000350  0E0C               	movlw	12
  2873   000352  6E5A               	movwf	MFRC522_Wr@value^0,c
  2874   000354  0E01               	movlw	1
  2875   000356  EC51  F008         	call	_MFRC522_Wr
  2876   00035A  EF7D  F000         	goto	l3497
  2877   00035E                     l3595:
  2878                           
  2879                           ;TAD_RFID.c: 330:                     tempRegValue = MFRC522_Rd(0x0D);
  2880   00035E  0E0D               	movlw	13
  2881   000360  ECA5  F008         	call	_MFRC522_Rd
  2882   000364  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2883   000366  EF99  F000         	goto	l3507
  2884   00036A                     l3599:
  2885                           
  2886                           ;TAD_RFID.c: 335:                     MFRC522_Wr(0x0D, tempRegValue | 0x80);
  2887   00036A  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2888   00036C  0980               	iorlw	128
  2889   00036E  6E5A               	movwf	MFRC522_Wr@value^0,c
  2890   000370  0E0D               	movlw	13
  2891   000372  EC51  F008         	call	_MFRC522_Wr
  2892   000376                     
  2893                           ;TAD_RFID.c: 336:                     i = 0xFF;
  2894   000376  6837               	setf	motor_RFID@i^0,c
  2895   000378  EFA1  F000         	goto	l3511
  2896   00037C                     l3605:
  2897                           
  2898                           ;TAD_RFID.c: 341:                     n = MFRC522_Rd(0x04);
  2899   00037C  0E04               	movlw	4
  2900   00037E  ECA5  F008         	call	_MFRC522_Rd
  2901   000382  6E38               	movwf	motor_RFID@n^0,c
  2902   000384                     
  2903                           ;TAD_RFID.c: 342:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2904   000384  B038               	btfsc	motor_RFID@n^0,0,c
  2905   000386  EFC7  F001         	goto	u2711
  2906   00038A  EFC9  F001         	goto	u2710
  2907   00038E                     u2711:
  2908   00038E  EFAB  F000         	goto	l3515
  2909   000392                     u2710:
  2910   000392  5038               	movf	motor_RFID@n^0,w,c
  2911   000394  1439               	andwf	motor_RFID@waitIRq^0,w,c
  2912   000396  0900               	iorlw	0
  2913   000398  A4D8               	btfss	status,2,c
  2914   00039A  EFD1  F001         	goto	u2721
  2915   00039E  EFD3  F001         	goto	u2720
  2916   0003A2                     u2721:
  2917   0003A2  EFAB  F000         	goto	l3515
  2918   0003A6                     u2720:
  2919   0003A6  2E37               	decfsz	motor_RFID@i^0,f,c
  2920   0003A8  EF2A  F003         	goto	l357
  2921   0003AC  EFAB  F000         	goto	l3515
  2922   0003B0                     l3615:
  2923                           
  2924                           ;TAD_RFID.c: 348:                     tempRegValue = MFRC522_Rd(0x0D);
  2925   0003B0  0E0D               	movlw	13
  2926   0003B2  ECA5  F008         	call	_MFRC522_Rd
  2927   0003B6  6E32               	movwf	motor_RFID@tempRegValue^0,c
  2928   0003B8  EFFD  F000         	goto	l3531
  2929   0003BC                     l3619:
  2930                           
  2931                           ;TAD_RFID.c: 353:                     MFRC522_Wr(0x0D, tempRegValue & ~0x80);
  2932   0003BC  5032               	movf	motor_RFID@tempRegValue^0,w,c
  2933   0003BE  0B7F               	andlw	127
  2934   0003C0  6E5A               	movwf	MFRC522_Wr@value^0,c
  2935   0003C2  0E0D               	movlw	13
  2936   0003C4  EC51  F008         	call	_MFRC522_Wr
  2937   0003C8  EF01  F001         	goto	l3533
  2938   0003CC                     l3623:
  2939                           
  2940                           ;TAD_RFID.c: 358:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2941   0003CC  5037               	movf	motor_RFID@i^0,w,c
  2942   0003CE  B4D8               	btfsc	status,2,c
  2943   0003D0  EFEC  F001         	goto	u2731
  2944   0003D4  EFEE  F001         	goto	u2730
  2945   0003D8                     u2731:
  2946   0003D8  EF0A  F001         	goto	l308
  2947   0003DC                     u2730:
  2948   0003DC  0E06               	movlw	6
  2949   0003DE  ECA5  F008         	call	_MFRC522_Rd
  2950   0003E2  6E65               	movwf	??_motor_RFID^0,c
  2951   0003E4  0E1B               	movlw	27
  2952   0003E6  1665               	andwf	??_motor_RFID^0,f,c
  2953   0003E8  A4D8               	btfss	status,2,c
  2954   0003EA  EFF9  F001         	goto	u2741
  2955   0003EE  EFFB  F001         	goto	u2740
  2956   0003F2                     u2741:
  2957   0003F2  EF0A  F001         	goto	l308
  2958   0003F6                     u2740:
  2959   0003F6                     
  2960                           ;TAD_RFID.c: 360:                         UID[0] = MFRC522_Rd(0x09);
  2961   0003F6  0E09               	movlw	9
  2962   0003F8  ECA5  F008         	call	_MFRC522_Rd
  2963   0003FC  6E15               	movwf	motor_RFID@UID^0,c
  2964                           
  2965                           ;TAD_RFID.c: 361:                         UID[1] = MFRC522_Rd(0x09);
  2966   0003FE  0E09               	movlw	9
  2967   000400  ECA5  F008         	call	_MFRC522_Rd
  2968   000404  6E16               	movwf	(motor_RFID@UID+1)^0,c
  2969   000406                     
  2970                           ;TAD_RFID.c: 362:                         substate = 17;
  2971   000406  0E11               	movlw	17
  2972   000408  6E3B               	movwf	motor_RFID@substate^0,c
  2973                           
  2974                           ;TAD_RFID.c: 363:                     } else {
  2975   00040A  EF2A  F003         	goto	l357
  2976   00040E                     l3631:
  2977                           
  2978                           ;TAD_RFID.c: 371:                     UID[2] = MFRC522_Rd(0x09);
  2979   00040E  0E09               	movlw	9
  2980   000410  ECA5  F008         	call	_MFRC522_Rd
  2981   000414  6E17               	movwf	(motor_RFID@UID+2)^0,c
  2982                           
  2983                           ;TAD_RFID.c: 372:                     UID[3] = MFRC522_Rd(0x09);
  2984   000416  0E09               	movlw	9
  2985   000418  ECA5  F008         	call	_MFRC522_Rd
  2986   00041C  6E18               	movwf	(motor_RFID@UID+3)^0,c
  2987   00041E                     
  2988                           ;TAD_RFID.c: 373:                     substate = 18;
  2989   00041E  0E12               	movlw	18
  2990   000420  6E3B               	movwf	motor_RFID@substate^0,c
  2991                           
  2992                           ;TAD_RFID.c: 374:                     break;
  2993   000422  EF2A  F003         	goto	l357
  2994   000426                     l3635:
  2995                           
  2996                           ;TAD_RFID.c: 377:                     UID[4] = MFRC522_Rd(0x09);
  2997   000426  0E09               	movlw	9
  2998   000428  ECA5  F008         	call	_MFRC522_Rd
  2999   00042C  6E19               	movwf	(motor_RFID@UID+4)^0,c
  3000   00042E                     
  3001                           ;TAD_RFID.c: 378:                     UID[5] = 0;
  3002   00042E  6A1A               	clrf	(motor_RFID@UID+5)^0,c
  3003   000430                     
  3004                           ;TAD_RFID.c: 379:                     substate = 19;
  3005   000430  0E13               	movlw	19
  3006   000432  6E3B               	movwf	motor_RFID@substate^0,c
  3007                           
  3008                           ;TAD_RFID.c: 380:                     break;
  3009   000434  EF2A  F003         	goto	l357
  3010   000438                     l3641:
  3011                           
  3012                           ;TAD_RFID.c: 383:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  3013   000438  5016               	movf	(motor_RFID@UID+1)^0,w,c
  3014   00043A  1817               	xorwf	(motor_RFID@UID+2)^0,w,c
  3015   00043C  1818               	xorwf	(motor_RFID@UID+3)^0,w,c
  3016   00043E  1815               	xorwf	motor_RFID@UID^0,w,c
  3017   000440  6E34               	movwf	motor_RFID@checksum^0,c
  3018   000442                     
  3019                           ;TAD_RFID.c: 385:                     allZero = 1;
  3020   000442  0E01               	movlw	1
  3021   000444  6E33               	movwf	motor_RFID@allZero^0,c
  3022   000446                     
  3023                           ;TAD_RFID.c: 386:                     substate = 20;
  3024   000446  0E14               	movlw	20
  3025   000448  6E3B               	movwf	motor_RFID@substate^0,c
  3026                           
  3027                           ;TAD_RFID.c: 387:                     break;
  3028   00044A  EF2A  F003         	goto	l357
  3029   00044E                     l3647:
  3030                           
  3031                           ;TAD_RFID.c: 390:                     if (UID[0] != 0 || UID[1] != 0) {
  3032   00044E  5015               	movf	motor_RFID@UID^0,w,c
  3033   000450  A4D8               	btfss	status,2,c
  3034   000452  EF2D  F002         	goto	u2751
  3035   000456  EF2F  F002         	goto	u2750
  3036   00045A                     u2751:
  3037   00045A  EF37  F002         	goto	l341
  3038   00045E                     u2750:
  3039   00045E  5016               	movf	(motor_RFID@UID+1)^0,w,c
  3040   000460  B4D8               	btfsc	status,2,c
  3041   000462  EF35  F002         	goto	u2761
  3042   000466  EF37  F002         	goto	u2760
  3043   00046A                     u2761:
  3044   00046A  EF38  F002         	goto	l3651
  3045   00046E                     u2760:
  3046   00046E                     l341:
  3047                           
  3048                           ;TAD_RFID.c: 391:                         allZero = 0;
  3049   00046E  6A33               	clrf	motor_RFID@allZero^0,c
  3050   000470                     l3651:
  3051                           
  3052                           ;TAD_RFID.c: 393:                     substate = 21;
  3053   000470  0E15               	movlw	21
  3054   000472  6E3B               	movwf	motor_RFID@substate^0,c
  3055                           
  3056                           ;TAD_RFID.c: 394:                     break;
  3057   000474  EF2A  F003         	goto	l357
  3058   000478                     l3653:
  3059                           
  3060                           ;TAD_RFID.c: 397:                     if (UID[2] != 0 || UID[3] != 0) {
  3061   000478  5017               	movf	(motor_RFID@UID+2)^0,w,c
  3062   00047A  A4D8               	btfss	status,2,c
  3063   00047C  EF42  F002         	goto	u2771
  3064   000480  EF44  F002         	goto	u2770
  3065   000484                     u2771:
  3066   000484  EF4C  F002         	goto	l345
  3067   000488                     u2770:
  3068   000488  5018               	movf	(motor_RFID@UID+3)^0,w,c
  3069   00048A  B4D8               	btfsc	status,2,c
  3070   00048C  EF4A  F002         	goto	u2781
  3071   000490  EF4C  F002         	goto	u2780
  3072   000494                     u2781:
  3073   000494  EF4D  F002         	goto	l3657
  3074   000498                     u2780:
  3075   000498                     l345:
  3076                           
  3077                           ;TAD_RFID.c: 398:                         allZero = 0;
  3078   000498  6A33               	clrf	motor_RFID@allZero^0,c
  3079   00049A                     l3657:
  3080                           
  3081                           ;TAD_RFID.c: 400:                     substate = 22;
  3082   00049A  0E16               	movlw	22
  3083   00049C  6E3B               	movwf	motor_RFID@substate^0,c
  3084                           
  3085                           ;TAD_RFID.c: 401:                     break;
  3086   00049E  EF2A  F003         	goto	l357
  3087   0004A2                     l3659:
  3088                           
  3089                           ;TAD_RFID.c: 404:                     if (checksum != UID[4] || allZero) {
  3090   0004A2  5034               	movf	motor_RFID@checksum^0,w,c
  3091   0004A4  1819               	xorwf	(motor_RFID@UID+4)^0,w,c
  3092   0004A6  A4D8               	btfss	status,2,c
  3093   0004A8  EF58  F002         	goto	u2791
  3094   0004AC  EF5A  F002         	goto	u2790
  3095   0004B0                     u2791:
  3096   0004B0  EF0A  F001         	goto	l308
  3097   0004B4                     u2790:
  3098   0004B4  5033               	movf	motor_RFID@allZero^0,w,c
  3099   0004B6  B4D8               	btfsc	status,2,c
  3100   0004B8  EF60  F002         	goto	u2801
  3101   0004BC  EF62  F002         	goto	u2800
  3102   0004C0                     u2801:
  3103   0004C0  EF64  F002         	goto	l3663
  3104   0004C4                     u2800:
  3105   0004C4  EF0A  F001         	goto	l308
  3106   0004C8                     l3663:
  3107                           
  3108                           ;TAD_RFID.c: 410:                         substate = 23;
  3109   0004C8  0E17               	movlw	23
  3110   0004CA  6E3B               	movwf	motor_RFID@substate^0,c
  3111   0004CC  EF2A  F003         	goto	l357
  3112   0004D0                     l3665:
  3113                           
  3114                           ;TAD_RFID.c: 414:                     {;TAD_RFID.c: 415:                         char di
      +                          fferentUID = 1;
  3115   0004D0  0E01               	movlw	1
  3116   0004D2  6E6A               	movwf	motor_RFID@differentUID^0,c
  3117   0004D4                     
  3118                           ;TAD_RFID.c: 416:                         unsigned char* currentUser = getActualUID();
  3119   0004D4  ECA3  F00A         	call	_getActualUID	;wreg free
  3120   0004D8  6E69               	movwf	motor_RFID@currentUser^0,c
  3121   0004DA                     
  3122                           ;TAD_RFID.c: 417:                         for (int i = 0; i < 5; i++) {
  3123   0004DA  0E00               	movlw	0
  3124   0004DC  6E6E               	movwf	(motor_RFID@i_571+1)^0,c
  3125   0004DE  0E00               	movlw	0
  3126   0004E0  6E6D               	movwf	motor_RFID@i_571^0,c
  3127   0004E2                     l3671:
  3128   0004E2  BE6E               	btfsc	(motor_RFID@i_571+1)^0,7,c
  3129   0004E4  EF7D  F002         	goto	u2811
  3130   0004E8  506E               	movf	(motor_RFID@i_571+1)^0,w,c
  3131   0004EA  E109               	bnz	u2810
  3132   0004EC  0E05               	movlw	5
  3133   0004EE  5C6D               	subwf	motor_RFID@i_571^0,w,c
  3134   0004F0  A0D8               	btfss	status,0,c
  3135   0004F2  EF7D  F002         	goto	u2811
  3136   0004F6  EF7F  F002         	goto	u2810
  3137   0004FA                     u2811:
  3138   0004FA  EF81  F002         	goto	l3675
  3139   0004FE                     u2810:
  3140   0004FE  EF99  F002         	goto	l3683
  3141   000502                     l3675:
  3142                           
  3143                           ;TAD_RFID.c: 418:                             if(currentUser[i] != UID[i]) {
  3144   000502  506D               	movf	motor_RFID@i_571^0,w,c
  3145   000504  0F15               	addlw	low motor_RFID@UID
  3146   000506  6ED9               	movwf	fsr2l,c
  3147   000508  6ADA               	clrf	fsr2h,c
  3148   00050A  5069               	movf	motor_RFID@currentUser^0,w,c
  3149   00050C  246D               	addwf	motor_RFID@i_571^0,w,c
  3150   00050E  6EE1               	movwf	fsr1l,c
  3151   000510  6AE2               	clrf	fsr1h,c
  3152   000512  50DE               	movf	postinc2,w,c
  3153   000514  18E6               	xorwf	postinc1,w,c
  3154   000516  B4D8               	btfsc	status,2,c
  3155   000518  EF90  F002         	goto	u2821
  3156   00051C  EF92  F002         	goto	u2820
  3157   000520                     u2821:
  3158   000520  EF95  F002         	goto	l3679
  3159   000524                     u2820:
  3160   000524                     
  3161                           ;TAD_RFID.c: 419:                                 differentUID = 0;
  3162   000524  6A6A               	clrf	motor_RFID@differentUID^0,c
  3163                           
  3164                           ;TAD_RFID.c: 420:                                 break;
  3165   000526  EF99  F002         	goto	l3683
  3166   00052A                     l3679:
  3167                           
  3168                           ;TAD_RFID.c: 422:                         }
  3169   00052A  4A6D               	infsnz	motor_RFID@i_571^0,f,c
  3170   00052C  2A6E               	incf	(motor_RFID@i_571+1)^0,f,c
  3171   00052E  EF71  F002         	goto	l3671
  3172   000532                     l3683:
  3173                           
  3174                           ;TAD_RFID.c: 423:                         if(differentUID == 0) {
  3175   000532  506A               	movf	motor_RFID@differentUID^0,w,c
  3176   000534  A4D8               	btfss	status,2,c
  3177   000536  EF9F  F002         	goto	u2831
  3178   00053A  EFA1  F002         	goto	u2830
  3179   00053E                     u2831:
  3180   00053E  EFAC  F002         	goto	l3687
  3181   000542                     u2830:
  3182   000542                     
  3183                           ;TAD_RFID.c: 424:                             setCurrentUser(UID[0], UID[1], UID[2], UID
      +                          [3], UID[4]);
  3184   000542  C016  F060         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3185   000546  C017  F061         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3186   00054A  C018  F062         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3187   00054E  C019  F063         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3188   000552  5015               	movf	motor_RFID@UID^0,w,c
  3189   000554  ECDE  F00B         	call	_setCurrentUser
  3190   000558                     l3687:
  3191                           
  3192                           ;TAD_RFID.c: 426:                         substate = 24;
  3193   000558  0E18               	movlw	24
  3194   00055A  6E3B               	movwf	motor_RFID@substate^0,c
  3195                           
  3196                           ;TAD_RFID.c: 427:                     };TAD_RFID.c: 428:                     break;
  3197   00055C  EF2A  F003         	goto	l357
  3198   000560                     l3689:
  3199                           
  3200                           ;TAD_RFID.c: 431:                     MFRC522_Wr(0x0D, 0x00);
  3201   000560  0E00               	movlw	0
  3202   000562  6E5A               	movwf	MFRC522_Wr@value^0,c
  3203   000564  0E0D               	movlw	13
  3204   000566  EC51  F008         	call	_MFRC522_Wr
  3205   00056A                     
  3206                           ;TAD_RFID.c: 432:                     state = 0;
  3207   00056A  6A3C               	clrf	motor_RFID@state^0,c
  3208   00056C  EF07  F001         	goto	l3539
  3209   000570                     l3697:
  3210   000570  503B               	movf	motor_RFID@substate^0,w,c
  3211                           
  3212                           ; Switch size 1, requested type "simple"
  3213                           ; Number of cases is 25, Range of values is 0 to 24
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte           76    39 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218   000572  0A00               	xorlw	0	; case 0
  3219   000574  B4D8               	btfsc	status,2,c
  3220   000576  EF55  F001         	goto	l3545
  3221   00057A  0A01               	xorlw	1	; case 1
  3222   00057C  B4D8               	btfsc	status,2,c
  3223   00057E  EF60  F001         	goto	l3553
  3224   000582  0A03               	xorlw	3	; case 2
  3225   000584  B4D8               	btfsc	status,2,c
  3226   000586  EF66  F001         	goto	l3557
  3227   00058A  0A01               	xorlw	1	; case 3
  3228   00058C  B4D8               	btfsc	status,2,c
  3229   00058E  EF6E  F001         	goto	l3561
  3230   000592  0A07               	xorlw	7	; case 4
  3231   000594  B4D8               	btfsc	status,2,c
  3232   000596  EF79  F001         	goto	l3567
  3233   00059A  0A01               	xorlw	1	; case 5
  3234   00059C  B4D8               	btfsc	status,2,c
  3235   00059E  EF7F  F001         	goto	l3571
  3236   0005A2  0A03               	xorlw	3	; case 6
  3237   0005A4  B4D8               	btfsc	status,2,c
  3238   0005A6  EF87  F001         	goto	l3575
  3239   0005AA  0A01               	xorlw	1	; case 7
  3240   0005AC  B4D8               	btfsc	status,2,c
  3241   0005AE  EF8D  F001         	goto	l3579
  3242   0005B2  0A0F               	xorlw	15	; case 8
  3243   0005B4  B4D8               	btfsc	status,2,c
  3244   0005B6  EF95  F001         	goto	l3583
  3245   0005BA  0A01               	xorlw	1	; case 9
  3246   0005BC  B4D8               	btfsc	status,2,c
  3247   0005BE  EF9C  F001         	goto	l3587
  3248   0005C2  0A03               	xorlw	3	; case 10
  3249   0005C4  B4D8               	btfsc	status,2,c
  3250   0005C6  EFA8  F001         	goto	l3591
  3251   0005CA  0A01               	xorlw	1	; case 11
  3252   0005CC  B4D8               	btfsc	status,2,c
  3253   0005CE  EFAF  F001         	goto	l3595
  3254   0005D2  0A07               	xorlw	7	; case 12
  3255   0005D4  B4D8               	btfsc	status,2,c
  3256   0005D6  EFB5  F001         	goto	l3599
  3257   0005DA  0A01               	xorlw	1	; case 13
  3258   0005DC  B4D8               	btfsc	status,2,c
  3259   0005DE  EFBE  F001         	goto	l3605
  3260   0005E2  0A03               	xorlw	3	; case 14
  3261   0005E4  B4D8               	btfsc	status,2,c
  3262   0005E6  EFD8  F001         	goto	l3615
  3263   0005EA  0A01               	xorlw	1	; case 15
  3264   0005EC  B4D8               	btfsc	status,2,c
  3265   0005EE  EFDE  F001         	goto	l3619
  3266   0005F2  0A1F               	xorlw	31	; case 16
  3267   0005F4  B4D8               	btfsc	status,2,c
  3268   0005F6  EFE6  F001         	goto	l3623
  3269   0005FA  0A01               	xorlw	1	; case 17
  3270   0005FC  B4D8               	btfsc	status,2,c
  3271   0005FE  EF07  F002         	goto	l3631
  3272   000602  0A03               	xorlw	3	; case 18
  3273   000604  B4D8               	btfsc	status,2,c
  3274   000606  EF13  F002         	goto	l3635
  3275   00060A  0A01               	xorlw	1	; case 19
  3276   00060C  B4D8               	btfsc	status,2,c
  3277   00060E  EF1C  F002         	goto	l3641
  3278   000612  0A07               	xorlw	7	; case 20
  3279   000614  B4D8               	btfsc	status,2,c
  3280   000616  EF27  F002         	goto	l3647
  3281   00061A  0A01               	xorlw	1	; case 21
  3282   00061C  B4D8               	btfsc	status,2,c
  3283   00061E  EF3C  F002         	goto	l3653
  3284   000622  0A03               	xorlw	3	; case 22
  3285   000624  B4D8               	btfsc	status,2,c
  3286   000626  EF51  F002         	goto	l3659
  3287   00062A  0A01               	xorlw	1	; case 23
  3288   00062C  B4D8               	btfsc	status,2,c
  3289   00062E  EF68  F002         	goto	l3665
  3290   000632  0A0F               	xorlw	15	; case 24
  3291   000634  B4D8               	btfsc	status,2,c
  3292   000636  EFB0  F002         	goto	l3689
  3293   00063A  EF2A  F003         	goto	l357
  3294   00063E                     l3701:
  3295   00063E  503C               	movf	motor_RFID@state^0,w,c
  3296                           
  3297                           ; Switch size 1, requested type "simple"
  3298                           ; Number of cases is 2, Range of values is 0 to 1
  3299                           ; switch strategies available:
  3300                           ; Name         Instructions Cycles
  3301                           ; simple_byte            7     4 (average)
  3302                           ;	Chosen strategy is simple_byte
  3303   000640  0A00               	xorlw	0	; case 0
  3304   000642  B4D8               	btfsc	status,2,c
  3305   000644  EF0E  F001         	goto	l3543
  3306   000648  0A01               	xorlw	1	; case 1
  3307   00064A  B4D8               	btfsc	status,2,c
  3308   00064C  EFB8  F002         	goto	l3697
  3309   000650  EF2A  F003         	goto	l357
  3310   000654                     l357:
  3311   000654  0012               	return		;funcret
  3312   000656                     __end_of_motor_RFID:
  3313                           	callstack 0
  3314                           
  3315 ;; *************** function _setCurrentUser *****************
  3316 ;; Defined at:
  3317 ;;		line 70 in file "TAD_DATOS.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  UID0            1    wreg     unsigned char 
  3320 ;;  UID1            1   17[COMRAM] unsigned char 
  3321 ;;  UID2            1   18[COMRAM] unsigned char 
  3322 ;;  UID3            1   19[COMRAM] unsigned char 
  3323 ;;  UID4            1   20[COMRAM] unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  UID0            1   21[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1
  3335 ;;      Params:         4       0       0
  3336 ;;      Locals:         1       0       0
  3337 ;;      Temps:          0       0       0
  3338 ;;      Totals:         5       0       0
  3339 ;;Total ram usage:        5 bytes
  3340 ;; Hardware stack levels used: 1
  3341 ;; Hardware stack levels required when called: 7
  3342 ;; This function calls:
  3343 ;;		_Terminal_SendString
  3344 ;;		_printLedConfig
  3345 ;;		_printfUID
  3346 ;; This function is called by:
  3347 ;;		_motor_RFID
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text2
  3352   0017BC                     __ptext2:
  3353                           	callstack 0
  3354   0017BC                     _setCurrentUser:
  3355                           	callstack 22
  3356                           
  3357                           ;incstack = 0
  3358                           ;setCurrentUser@UID0 stored from wreg
  3359   0017BC  6E64               	movwf	setCurrentUser@UID0^0,c
  3360   0017BE                     
  3361                           ;TAD_DATOS.c: 71:  currentUser[0] = UID0;
  3362   0017BE  C064  F047         	movff	setCurrentUser@UID0,_currentUser
  3363   0017C2                     
  3364                           ;TAD_DATOS.c: 72:  currentUser[1] = UID1;
  3365   0017C2  C060  F048         	movff	setCurrentUser@UID1,_currentUser+1
  3366   0017C6                     
  3367                           ;TAD_DATOS.c: 73:  currentUser[2] = UID2;
  3368   0017C6  C061  F049         	movff	setCurrentUser@UID2,_currentUser+2
  3369   0017CA                     
  3370                           ;TAD_DATOS.c: 74:  currentUser[3] = UID3;
  3371   0017CA  C062  F04A         	movff	setCurrentUser@UID3,_currentUser+3
  3372   0017CE                     
  3373                           ;TAD_DATOS.c: 75:  currentUser[4] = UID4;
  3374   0017CE  C063  F04B         	movff	setCurrentUser@UID4,_currentUser+4
  3375   0017D2                     
  3376                           ;TAD_DATOS.c: 76:  new_user = 1;
  3377   0017D2  0E01               	movlw	1
  3378   0017D4  6E29               	movwf	_new_user^0,c
  3379   0017D6                     
  3380                           ;TAD_DATOS.c: 77:  Terminal_SendString("Targeta detectada!\r\n\t");
  3381   0017D6  0E87               	movlw	low STR_27
  3382   0017D8  6E54               	movwf	Terminal_SendString@str^0,c
  3383   0017DA  0E1F               	movlw	high STR_27
  3384   0017DC  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3385   0017DE  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3386   0017E2                     
  3387                           ;TAD_DATOS.c: 78:  printfUID(currentUser);
  3388   0017E2  0E47               	movlw	low _currentUser
  3389   0017E4  6E56               	movwf	printfUID@currentUser^0,c
  3390   0017E6  EC44  F006         	call	_printfUID	;wreg free
  3391   0017EA                     
  3392                           ;TAD_DATOS.c: 79:  Terminal_SendString("\t");
  3393   0017EA  0E9B               	movlw	low (STR_27+20)
  3394   0017EC  6E54               	movwf	Terminal_SendString@str^0,c
  3395   0017EE  0E1F               	movlw	high (STR_27+20)
  3396   0017F0  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3397   0017F2  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3398   0017F6                     
  3399                           ;TAD_DATOS.c: 80:  printLedConfig(configurations[index]);
  3400   0017F6  0EC0               	movlw	low _configurations
  3401   0017F8  6E56               	movwf	printLedConfig@leds^0,c
  3402   0017FA  ECF6  F007         	call	_printLedConfig	;wreg free
  3403   0017FE  0012               	return		;funcret
  3404   001800                     __end_of_setCurrentUser:
  3405                           	callstack 0
  3406                           
  3407 ;; *************** function _printLedConfig *****************
  3408 ;; Defined at:
  3409 ;;		line 76 in file "TAD_TERMINAL.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  leds            1    7[COMRAM] PTR unsigned char 
  3412 ;;		 -> configurations(24), 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  val             1   10[COMRAM] unsigned char 
  3415 ;;  i               2   11[COMRAM] int 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1
  3425 ;;      Params:         1       0       0
  3426 ;;      Locals:         5       0       0
  3427 ;;      Temps:          0       0       0
  3428 ;;      Totals:         6       0       0
  3429 ;;Total ram usage:        6 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 6
  3432 ;; This function calls:
  3433 ;;		_Terminal_SendChar
  3434 ;;		_Terminal_SendString
  3435 ;; This function is called by:
  3436 ;;		_setCurrentUser
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text3
  3441   000FEC                     __ptext3:
  3442                           	callstack 0
  3443   000FEC                     _printLedConfig:
  3444                           	callstack 22
  3445   000FEC                     
  3446                           ;TAD_TERMINAL.c: 77:  for (int i = 0; i < 6; i++) {
  3447   000FEC  0E00               	movlw	0
  3448   000FEE  6E5B               	movwf	(printLedConfig@i+1)^0,c
  3449   000FF0  0E00               	movlw	0
  3450   000FF2  6E5A               	movwf	printLedConfig@i^0,c
  3451   000FF4                     l2941:
  3452                           
  3453                           ;TAD_TERMINAL.c: 79:   Terminal_SendChar('L');
  3454   000FF4  0E4C               	movlw	76
  3455   000FF6  EC1B  F00D         	call	_Terminal_SendChar
  3456                           
  3457                           ;TAD_TERMINAL.c: 80:   Terminal_SendChar('0' + i);
  3458   000FFA  505A               	movf	printLedConfig@i^0,w,c
  3459   000FFC  0F30               	addlw	48
  3460   000FFE  EC1B  F00D         	call	_Terminal_SendChar
  3461   001002                     
  3462                           ;TAD_TERMINAL.c: 81:   Terminal_SendString(": ");
  3463   001002  0EE4               	movlw	low (STR_9+6)
  3464   001004  6E54               	movwf	Terminal_SendString@str^0,c
  3465   001006  0E1F               	movlw	high (STR_9+6)
  3466   001008  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3467   00100A  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3468   00100E                     
  3469                           ;TAD_TERMINAL.c: 84:   unsigned char val = leds[i];
  3470   00100E  5056               	movf	printLedConfig@leds^0,w,c
  3471   001010  245A               	addwf	printLedConfig@i^0,w,c
  3472   001012  6ED9               	movwf	fsr2l,c
  3473   001014  6ADA               	clrf	fsr2h,c
  3474   001016  50DF               	movf	indf2,w,c
  3475   001018  6E59               	movwf	printLedConfig@val^0,c
  3476   00101A                     
  3477                           ;TAD_TERMINAL.c: 85:   Terminal_SendChar(val < 10 ? '0' + val : 'A' + val - 10);
  3478   00101A  0E09               	movlw	9
  3479   00101C  6459               	cpfsgt	printLedConfig@val^0,c
  3480   00101E  EF13  F008         	goto	u1931
  3481   001022  EF15  F008         	goto	u1930
  3482   001026                     u1931:
  3483   001026  EF1D  F008         	goto	l2951
  3484   00102A                     u1930:
  3485   00102A  0E37               	movlw	55
  3486   00102C  2459               	addwf	printLedConfig@val^0,w,c
  3487   00102E  6E57               	movwf	_printLedConfig$936^0,c
  3488   001030  6A58               	clrf	(_printLedConfig$936+1)^0,c
  3489   001032  0E00               	movlw	0
  3490   001034  2258               	addwfc	(_printLedConfig$936+1)^0,f,c
  3491   001036  EF23  F008         	goto	l2953
  3492   00103A                     l2951:
  3493   00103A  0E30               	movlw	48
  3494   00103C  2459               	addwf	printLedConfig@val^0,w,c
  3495   00103E  6E57               	movwf	_printLedConfig$936^0,c
  3496   001040  6A58               	clrf	(_printLedConfig$936+1)^0,c
  3497   001042  0E00               	movlw	0
  3498   001044  2258               	addwfc	(_printLedConfig$936+1)^0,f,c
  3499   001046                     l2953:
  3500   001046  5057               	movf	_printLedConfig$936^0,w,c
  3501   001048  EC1B  F00D         	call	_Terminal_SendChar
  3502   00104C                     
  3503                           ;TAD_TERMINAL.c: 88:   if (i < 6 - 1) Terminal_SendString(" - ");
  3504   00104C  BE5B               	btfsc	(printLedConfig@i+1)^0,7,c
  3505   00104E  EF34  F008         	goto	u1940
  3506   001052  505B               	movf	(printLedConfig@i+1)^0,w,c
  3507   001054  E107               	bnz	u1941
  3508   001056  0E05               	movlw	5
  3509   001058  5C5A               	subwf	printLedConfig@i^0,w,c
  3510   00105A  B0D8               	btfsc	status,0,c
  3511   00105C  EF32  F008         	goto	u1941
  3512   001060  EF34  F008         	goto	u1940
  3513   001064                     u1941:
  3514   001064  EF3A  F008         	goto	l2959
  3515   001068                     u1940:
  3516   001068  0EF8               	movlw	low STR_14
  3517   00106A  6E54               	movwf	Terminal_SendString@str^0,c
  3518   00106C  0E1F               	movlw	high STR_14
  3519   00106E  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3520   001070  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3521   001074                     l2959:
  3522                           
  3523                           ;TAD_TERMINAL.c: 89:  }
  3524   001074  4A5A               	infsnz	printLedConfig@i^0,f,c
  3525   001076  2A5B               	incf	(printLedConfig@i+1)^0,f,c
  3526   001078  BE5B               	btfsc	(printLedConfig@i+1)^0,7,c
  3527   00107A  EF48  F008         	goto	u1951
  3528   00107E  505B               	movf	(printLedConfig@i+1)^0,w,c
  3529   001080  E109               	bnz	u1950
  3530   001082  0E06               	movlw	6
  3531   001084  5C5A               	subwf	printLedConfig@i^0,w,c
  3532   001086  A0D8               	btfss	status,0,c
  3533   001088  EF48  F008         	goto	u1951
  3534   00108C  EF4A  F008         	goto	u1950
  3535   001090                     u1951:
  3536   001090  EFFA  F007         	goto	l2941
  3537   001094                     u1950:
  3538   001094                     
  3539                           ;TAD_TERMINAL.c: 90:  Terminal_SendString("\r\n");
  3540   001094  0EBF               	movlw	low (STR_2+15)
  3541   001096  6E54               	movwf	Terminal_SendString@str^0,c
  3542   001098  0E1F               	movlw	high (STR_2+15)
  3543   00109A  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3544   00109C  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3545   0010A0  0012               	return		;funcret
  3546   0010A2                     __end_of_printLedConfig:
  3547                           	callstack 0
  3548                           
  3549 ;; *************** function _motorTerminal *****************
  3550 ;; Defined at:
  3551 ;;		line 93 in file "TAD_TERMINAL.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  currentUser     1   17[COMRAM] PTR unsigned char 
  3556 ;;		 -> NULL(0), currentUser(5), 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1
  3566 ;;      Params:         0       0       0
  3567 ;;      Locals:         1       0       0
  3568 ;;      Temps:          0       0       0
  3569 ;;      Totals:         1       0       0
  3570 ;;Total ram usage:        1 bytes
  3571 ;; Hardware stack levels used: 1
  3572 ;; Hardware stack levels required when called: 7
  3573 ;; This function calls:
  3574 ;;		_Terminal_RXAvailable
  3575 ;;		_Terminal_ReceiveChar
  3576 ;;		_Terminal_SendChar
  3577 ;;		_Terminal_SendString
  3578 ;;		_getActualUID
  3579 ;;		_printfUID
  3580 ;;		_saveHourToData
  3581 ;;		_showAllConfigurations
  3582 ;;		_showMenu
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text4
  3589   000A14                     __ptext4:
  3590                           	callstack 0
  3591   000A14                     _motorTerminal:
  3592                           	callstack 23
  3593   000A14                     
  3594                           ;TAD_TERMINAL.c: 94:  static char state = 0;;TAD_TERMINAL.c: 96:  switch(state) {
  3595   000A14  EFB8  F005         	goto	l3445
  3596   000A18                     l3381:
  3597                           
  3598                           ;TAD_TERMINAL.c: 98:    if (Terminal_ReceiveChar() == 0x1B) {
  3599   000A18  ECB3  F00D         	call	_Terminal_ReceiveChar	;wreg free
  3600   000A1C  0A1B               	xorlw	27
  3601   000A1E  A4D8               	btfss	status,2,c
  3602   000A20  EF14  F005         	goto	u2571
  3603   000A24  EF16  F005         	goto	u2570
  3604   000A28                     u2571:
  3605   000A28  EF1A  F005         	goto	l3387
  3606   000A2C                     u2570:
  3607   000A2C                     
  3608                           ;TAD_TERMINAL.c: 99:     showMenu();
  3609   000A2C  EC15  F00A         	call	_showMenu	;wreg free
  3610   000A30                     
  3611                           ;TAD_TERMINAL.c: 100:     state = 1;
  3612   000A30  0E01               	movlw	1
  3613   000A32  6E2C               	movwf	motorTerminal@state^0,c
  3614   000A34                     l3387:
  3615                           
  3616                           ;TAD_TERMINAL.c: 103:    if (hashtag_pressed == 1){
  3617   000A34  042D               	decf	_hashtag_pressed^0,w,c
  3618   000A36  A4D8               	btfss	status,2,c
  3619   000A38  EF20  F005         	goto	u2581
  3620   000A3C  EF22  F005         	goto	u2580
  3621   000A40                     u2581:
  3622   000A40  EFC7  F005         	goto	l572
  3623   000A44                     u2580:
  3624   000A44                     
  3625                           ;TAD_TERMINAL.c: 104:     showMenu();
  3626   000A44  EC15  F00A         	call	_showMenu	;wreg free
  3627   000A48                     
  3628                           ;TAD_TERMINAL.c: 105:     state = 1;
  3629   000A48  0E01               	movlw	1
  3630   000A4A  6E2C               	movwf	motorTerminal@state^0,c
  3631   000A4C                     
  3632                           ;TAD_TERMINAL.c: 106:     hashtag_pressed = 0;
  3633   000A4C  6A2D               	clrf	_hashtag_pressed^0,c
  3634   000A4E  EFC7  F005         	goto	l572
  3635   000A52                     l3395:
  3636                           
  3637                           ;TAD_TERMINAL.c: 110:    if(Terminal_RXAvailable() == 1){
  3638   000A52  EC67  F00D         	call	_Terminal_RXAvailable	;wreg free
  3639   000A56  06E8               	decf	wreg,f,c
  3640   000A58  A4D8               	btfss	status,2,c
  3641   000A5A  EF31  F005         	goto	u2591
  3642   000A5E  EF33  F005         	goto	u2590
  3643   000A62                     u2591:
  3644   000A62  EFC7  F005         	goto	l572
  3645   000A66                     u2590:
  3646   000A66                     
  3647                           ;TAD_TERMINAL.c: 111:     if (Terminal_ReceiveChar() == '1') {
  3648   000A66  ECB3  F00D         	call	_Terminal_ReceiveChar	;wreg free
  3649   000A6A  0A31               	xorlw	49
  3650   000A6C  A4D8               	btfss	status,2,c
  3651   000A6E  EF3B  F005         	goto	u2601
  3652   000A72  EF3D  F005         	goto	u2600
  3653   000A76                     u2601:
  3654   000A76  EF53  F005         	goto	l3409
  3655   000A7A                     u2600:
  3656   000A7A                     
  3657                           ;TAD_TERMINAL.c: 112:      Terminal_SendString("\r\n");
  3658   000A7A  0EBF               	movlw	low (STR_2+15)
  3659   000A7C  6E54               	movwf	Terminal_SendString@str^0,c
  3660   000A7E  0E1F               	movlw	high (STR_2+15)
  3661   000A80  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3662   000A82  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3663   000A86                     
  3664                           ;TAD_TERMINAL.c: 113:      unsigned char *currentUser = getActualUID();
  3665   000A86  ECA3  F00A         	call	_getActualUID	;wreg free
  3666   000A8A  6E60               	movwf	motorTerminal@currentUser^0,c
  3667   000A8C                     
  3668                           ;TAD_TERMINAL.c: 117:      printfUID(currentUser);
  3669   000A8C  C060  F056         	movff	motorTerminal@currentUser,printfUID@currentUser
  3670   000A90  EC44  F006         	call	_printfUID	;wreg free
  3671   000A94                     
  3672                           ;TAD_TERMINAL.c: 119:      Terminal_SendString("\r\n");
  3673   000A94  0EBF               	movlw	low (STR_2+15)
  3674   000A96  6E54               	movwf	Terminal_SendString@str^0,c
  3675   000A98  0E1F               	movlw	high (STR_2+15)
  3676   000A9A  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3677   000A9C  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3678   000AA0                     l3407:
  3679                           
  3680                           ;TAD_TERMINAL.c: 120:      state = 0;
  3681   000AA0  6A2C               	clrf	motorTerminal@state^0,c
  3682                           
  3683                           ;TAD_TERMINAL.c: 121:     }
  3684   000AA2  EFC7  F005         	goto	l572
  3685   000AA6                     l3409:
  3686   000AA6  ECB3  F00D         	call	_Terminal_ReceiveChar	;wreg free
  3687   000AAA  0A32               	xorlw	50
  3688   000AAC  A4D8               	btfss	status,2,c
  3689   000AAE  EF5B  F005         	goto	u2611
  3690   000AB2  EF5D  F005         	goto	u2610
  3691   000AB6                     u2611:
  3692   000AB6  EF67  F005         	goto	l3417
  3693   000ABA                     u2610:
  3694   000ABA                     
  3695                           ;TAD_TERMINAL.c: 123:      Terminal_SendString("\r\n");
  3696   000ABA  0EBF               	movlw	low (STR_2+15)
  3697   000ABC  6E54               	movwf	Terminal_SendString@str^0,c
  3698   000ABE  0E1F               	movlw	high (STR_2+15)
  3699   000AC0  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3700   000AC2  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3701   000AC6                     
  3702                           ;TAD_TERMINAL.c: 124:      showAllConfigurations();
  3703   000AC6  ECF6  F008         	call	_showAllConfigurations	;wreg free
  3704   000ACA  EF50  F005         	goto	l3407
  3705   000ACE                     l3417:
  3706   000ACE  ECB3  F00D         	call	_Terminal_ReceiveChar	;wreg free
  3707   000AD2  0A33               	xorlw	51
  3708   000AD4  A4D8               	btfss	status,2,c
  3709   000AD6  EF6F  F005         	goto	u2621
  3710   000ADA  EF71  F005         	goto	u2620
  3711   000ADE                     u2621:
  3712   000ADE  EF81  F005         	goto	l3423
  3713   000AE2                     u2620:
  3714   000AE2                     
  3715                           ;TAD_TERMINAL.c: 128:      Terminal_SendString("\r\n");
  3716   000AE2  0EBF               	movlw	low (STR_2+15)
  3717   000AE4  6E54               	movwf	Terminal_SendString@str^0,c
  3718   000AE6  0E1F               	movlw	high (STR_2+15)
  3719   000AE8  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3720   000AEA  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3721                           
  3722                           ;TAD_TERMINAL.c: 129:      Terminal_SendString("Introduce la hora actual(HHMM): ");
  3723   000AEE  0E2E               	movlw	low STR_20
  3724   000AF0  6E54               	movwf	Terminal_SendString@str^0,c
  3725   000AF2  0E1F               	movlw	high STR_20
  3726   000AF4  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3727   000AF6  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3728   000AFA                     
  3729                           ;TAD_TERMINAL.c: 130:      state = 2;
  3730   000AFA  0E02               	movlw	2
  3731   000AFC  6E2C               	movwf	motorTerminal@state^0,c
  3732                           
  3733                           ;TAD_TERMINAL.c: 131:     }
  3734   000AFE  EFC7  F005         	goto	l572
  3735   000B02                     l3423:
  3736                           
  3737                           ;TAD_TERMINAL.c: 133:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  3738   000B02  0ECB               	movlw	low STR_21
  3739   000B04  6E54               	movwf	Terminal_SendString@str^0,c
  3740   000B06  0E1E               	movlw	high STR_21
  3741   000B08  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3742   000B0A  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3743   000B0E  EF50  F005         	goto	l3407
  3744   000B12                     l3427:
  3745                           
  3746                           ;TAD_TERMINAL.c: 139:    if(Terminal_RXAvailable() == 1){
  3747   000B12  EC67  F00D         	call	_Terminal_RXAvailable	;wreg free
  3748   000B16  06E8               	decf	wreg,f,c
  3749   000B18  A4D8               	btfss	status,2,c
  3750   000B1A  EF91  F005         	goto	u2631
  3751   000B1E  EF93  F005         	goto	u2630
  3752   000B22                     u2631:
  3753   000B22  EFC7  F005         	goto	l572
  3754   000B26                     u2630:
  3755   000B26                     
  3756                           ;TAD_TERMINAL.c: 140:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 141:   
      +                            static char index = 0;;TAD_TERMINAL.c: 142:     hour[index] = Terminal_ReceiveChar();
  3757   000B26  502B               	movf	motorTerminal@index^0,w,c
  3758   000B28  0F73               	addlw	low motorTerminal@hour
  3759   000B2A  6ED9               	movwf	fsr2l,c
  3760   000B2C  6ADA               	clrf	fsr2h,c
  3761   000B2E  ECB3  F00D         	call	_Terminal_ReceiveChar	;wreg free
  3762   000B32  6EDF               	movwf	indf2,c
  3763                           
  3764                           ;TAD_TERMINAL.c: 143:     Terminal_SendChar(hour[index]);
  3765   000B34  502B               	movf	motorTerminal@index^0,w,c
  3766   000B36  0F73               	addlw	low motorTerminal@hour
  3767   000B38  6ED9               	movwf	fsr2l,c
  3768   000B3A  6ADA               	clrf	fsr2h,c
  3769   000B3C  50DF               	movf	indf2,w,c
  3770   000B3E  EC1B  F00D         	call	_Terminal_SendChar
  3771   000B42                     
  3772                           ;TAD_TERMINAL.c: 144:     index++;
  3773   000B42  2A2B               	incf	motorTerminal@index^0,f,c
  3774   000B44                     
  3775                           ;TAD_TERMINAL.c: 145:     if(index == 4){
  3776   000B44  0E04               	movlw	4
  3777   000B46  182B               	xorwf	motorTerminal@index^0,w,c
  3778   000B48  A4D8               	btfss	status,2,c
  3779   000B4A  EFA9  F005         	goto	u2641
  3780   000B4E  EFAB  F005         	goto	u2640
  3781   000B52                     u2641:
  3782   000B52  EFC7  F005         	goto	l572
  3783   000B56                     u2640:
  3784   000B56                     
  3785                           ;TAD_TERMINAL.c: 146:      saveHourToData(hour);
  3786   000B56  0E73               	movlw	low motorTerminal@hour
  3787   000B58  6E50               	movwf	saveHourToData@hour^0,c
  3788   000B5A  EC3C  F00C         	call	_saveHourToData	;wreg free
  3789   000B5E                     
  3790                           ;TAD_TERMINAL.c: 147:      Terminal_SendString("\r\nHora introduida correctament\r\n");
  3791   000B5E  0E0D               	movlw	low STR_22
  3792   000B60  6E54               	movwf	Terminal_SendString@str^0,c
  3793   000B62  0E1F               	movlw	high STR_22
  3794   000B64  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3795   000B66  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3796   000B6A                     
  3797                           ;TAD_TERMINAL.c: 148:      index = 0;
  3798   000B6A  6A2B               	clrf	motorTerminal@index^0,c
  3799   000B6C  EF50  F005         	goto	l3407
  3800   000B70                     l3445:
  3801   000B70  502C               	movf	motorTerminal@state^0,w,c
  3802                           
  3803                           ; Switch size 1, requested type "simple"
  3804                           ; Number of cases is 3, Range of values is 0 to 2
  3805                           ; switch strategies available:
  3806                           ; Name         Instructions Cycles
  3807                           ; simple_byte           10     6 (average)
  3808                           ;	Chosen strategy is simple_byte
  3809   000B72  0A00               	xorlw	0	; case 0
  3810   000B74  B4D8               	btfsc	status,2,c
  3811   000B76  EF0C  F005         	goto	l3381
  3812   000B7A  0A01               	xorlw	1	; case 1
  3813   000B7C  B4D8               	btfsc	status,2,c
  3814   000B7E  EF29  F005         	goto	l3395
  3815   000B82  0A03               	xorlw	3	; case 2
  3816   000B84  B4D8               	btfsc	status,2,c
  3817   000B86  EF89  F005         	goto	l3427
  3818   000B8A  EFC7  F005         	goto	l572
  3819   000B8E                     l572:
  3820   000B8E  0012               	return		;funcret
  3821   000B90                     __end_of_motorTerminal:
  3822                           	callstack 0
  3823                           
  3824 ;; *************** function _showMenu *****************
  3825 ;; Defined at:
  3826 ;;		line 44 in file "TAD_TERMINAL.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;		None
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1
  3840 ;;      Params:         0       0       0
  3841 ;;      Locals:         0       0       0
  3842 ;;      Temps:          0       0       0
  3843 ;;      Totals:         0       0       0
  3844 ;;Total ram usage:        0 bytes
  3845 ;; Hardware stack levels used: 1
  3846 ;; Hardware stack levels required when called: 6
  3847 ;; This function calls:
  3848 ;;		_Terminal_SendString
  3849 ;; This function is called by:
  3850 ;;		_motorTerminal
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text5
  3855   00142A                     __ptext5:
  3856                           	callstack 0
  3857   00142A                     _showMenu:
  3858                           	callstack 23
  3859   00142A                     
  3860                           ;TAD_TERMINAL.c: 45:  Terminal_SendString("---------------\r\n");
  3861   00142A  0EB0               	movlw	low STR_2
  3862   00142C  6E54               	movwf	Terminal_SendString@str^0,c
  3863   00142E  0E1F               	movlw	high STR_2
  3864   001430  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3865   001432  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3866                           
  3867                           ;TAD_TERMINAL.c: 46:  Terminal_SendString("MenÃº principal\r\n");
  3868   001436  0EC2               	movlw	low STR_3
  3869   001438  6E54               	movwf	Terminal_SendString@str^0,c
  3870   00143A  0E1F               	movlw	high STR_3
  3871   00143C  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3872   00143E  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3873                           
  3874                           ;TAD_TERMINAL.c: 47:  Terminal_SendString("---------------\r\n");
  3875   001442  0EB0               	movlw	low STR_2
  3876   001444  6E54               	movwf	Terminal_SendString@str^0,c
  3877   001446  0E1F               	movlw	high STR_2
  3878   001448  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3879   00144A  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3880                           
  3881                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("Tria una opciÃ³:\r\n");
  3882   00144E  0E9D               	movlw	low STR_5
  3883   001450  6E54               	movwf	Terminal_SendString@str^0,c
  3884   001452  0E1F               	movlw	high STR_5
  3885   001454  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3886   001456  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3887                           
  3888                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  3889   00145A  0E6C               	movlw	low STR_6
  3890   00145C  6E54               	movwf	Terminal_SendString@str^0,c
  3891   00145E  0E1F               	movlw	high STR_6
  3892   001460  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3893   001462  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3894                           
  3895                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  3896   001466  0E4F               	movlw	low STR_7
  3897   001468  6E54               	movwf	Terminal_SendString@str^0,c
  3898   00146A  0E1F               	movlw	high STR_7
  3899   00146C  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3900   00146E  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3901                           
  3902                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  3903   001472  0EEC               	movlw	low STR_8
  3904   001474  6E54               	movwf	Terminal_SendString@str^0,c
  3905   001476  0E1E               	movlw	high STR_8
  3906   001478  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3907   00147A  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3908                           
  3909                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("OpciÃ³: ");
  3910   00147E  0EDE               	movlw	low STR_9
  3911   001480  6E54               	movwf	Terminal_SendString@str^0,c
  3912   001482  0E1F               	movlw	high STR_9
  3913   001484  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3914   001486  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3915   00148A  0012               	return		;funcret
  3916   00148C                     __end_of_showMenu:
  3917                           	callstack 0
  3918                           
  3919 ;; *************** function _showAllConfigurations *****************
  3920 ;; Defined at:
  3921 ;;		line 43 in file "TAD_DATOS.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  j               2    7[COMRAM] int 
  3926 ;;  i               2    9[COMRAM] int 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1
  3936 ;;      Params:         0       0       0
  3937 ;;      Locals:         4       0       0
  3938 ;;      Temps:          0       0       0
  3939 ;;      Totals:         4       0       0
  3940 ;;Total ram usage:        4 bytes
  3941 ;; Hardware stack levels used: 1
  3942 ;; Hardware stack levels required when called: 6
  3943 ;; This function calls:
  3944 ;;		_Terminal_SendChar
  3945 ;;		_Terminal_SendString
  3946 ;; This function is called by:
  3947 ;;		_motorTerminal
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text6
  3952   0011EC                     __ptext6:
  3953                           	callstack 0
  3954   0011EC                     _showAllConfigurations:
  3955                           	callstack 23
  3956   0011EC                     
  3957                           ;TAD_DATOS.c: 44:     for (int i = 0; i < 4; i++) {
  3958   0011EC  0E00               	movlw	0
  3959   0011EE  6E59               	movwf	(showAllConfigurations@i+1)^0,c
  3960   0011F0  0E00               	movlw	0
  3961   0011F2  6E58               	movwf	showAllConfigurations@i^0,c
  3962   0011F4                     l3159:
  3963                           
  3964                           ;TAD_DATOS.c: 45:         Terminal_SendString("User ");
  3965   0011F4  0EE7               	movlw	low STR_23
  3966   0011F6  6E54               	movwf	Terminal_SendString@str^0,c
  3967   0011F8  0E1F               	movlw	high STR_23
  3968   0011FA  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3969   0011FC  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3970   001200                     
  3971                           ;TAD_DATOS.c: 46:         Terminal_SendChar('1' + i);
  3972   001200  5058               	movf	showAllConfigurations@i^0,w,c
  3973   001202  0F31               	addlw	49
  3974   001204  EC1B  F00D         	call	_Terminal_SendChar
  3975   001208                     
  3976                           ;TAD_DATOS.c: 47:         Terminal_SendString(" Config: ");
  3977   001208  0ED4               	movlw	low STR_24
  3978   00120A  6E54               	movwf	Terminal_SendString@str^0,c
  3979   00120C  0E1F               	movlw	high STR_24
  3980   00120E  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3981   001210  EC57  F00C         	call	_Terminal_SendString	;wreg free
  3982   001214                     
  3983                           ;TAD_DATOS.c: 49:         for (int j = 0; j < 6; j++) {
  3984   001214  0E00               	movlw	0
  3985   001216  6E57               	movwf	(showAllConfigurations@j+1)^0,c
  3986   001218  0E00               	movlw	0
  3987   00121A  6E56               	movwf	showAllConfigurations@j^0,c
  3988   00121C                     l3171:
  3989                           
  3990                           ;TAD_DATOS.c: 51:             Terminal_SendChar('0' + configurations[i][j]);
  3991   00121C  5058               	movf	showAllConfigurations@i^0,w,c
  3992   00121E  0D06               	mullw	6
  3993   001220  50F3               	movf	243,w,c
  3994   001222  0FC0               	addlw	low _configurations
  3995   001224  2456               	addwf	showAllConfigurations@j^0,w,c
  3996   001226  6ED9               	movwf	fsr2l,c
  3997   001228  6ADA               	clrf	fsr2h,c
  3998   00122A  50DF               	movf	indf2,w,c
  3999   00122C  0F30               	addlw	48
  4000   00122E  EC1B  F00D         	call	_Terminal_SendChar
  4001   001232                     
  4002                           ;TAD_DATOS.c: 52:             Terminal_SendString(" ");
  4003   001232  0EFA               	movlw	low (STR_14+2)
  4004   001234  6E54               	movwf	Terminal_SendString@str^0,c
  4005   001236  0E1F               	movlw	high (STR_14+2)
  4006   001238  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4007   00123A  EC57  F00C         	call	_Terminal_SendString	;wreg free
  4008   00123E                     
  4009                           ;TAD_DATOS.c: 53:         }
  4010   00123E  4A56               	infsnz	showAllConfigurations@j^0,f,c
  4011   001240  2A57               	incf	(showAllConfigurations@j+1)^0,f,c
  4012   001242  BE57               	btfsc	(showAllConfigurations@j+1)^0,7,c
  4013   001244  EF2D  F009         	goto	u2361
  4014   001248  5057               	movf	(showAllConfigurations@j+1)^0,w,c
  4015   00124A  E109               	bnz	u2360
  4016   00124C  0E06               	movlw	6
  4017   00124E  5C56               	subwf	showAllConfigurations@j^0,w,c
  4018   001250  A0D8               	btfss	status,0,c
  4019   001252  EF2D  F009         	goto	u2361
  4020   001256  EF2F  F009         	goto	u2360
  4021   00125A                     u2361:
  4022   00125A  EF0E  F009         	goto	l3171
  4023   00125E                     u2360:
  4024   00125E                     
  4025                           ;TAD_DATOS.c: 54:         Terminal_SendString("\r\n");
  4026   00125E  0EBF               	movlw	low (STR_2+15)
  4027   001260  6E54               	movwf	Terminal_SendString@str^0,c
  4028   001262  0E1F               	movlw	high (STR_2+15)
  4029   001264  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4030   001266  EC57  F00C         	call	_Terminal_SendString	;wreg free
  4031   00126A                     
  4032                           ;TAD_DATOS.c: 55:     }
  4033   00126A  4A58               	infsnz	showAllConfigurations@i^0,f,c
  4034   00126C  2A59               	incf	(showAllConfigurations@i+1)^0,f,c
  4035   00126E  BE59               	btfsc	(showAllConfigurations@i+1)^0,7,c
  4036   001270  EF43  F009         	goto	u2371
  4037   001274  5059               	movf	(showAllConfigurations@i+1)^0,w,c
  4038   001276  E109               	bnz	u2370
  4039   001278  0E04               	movlw	4
  4040   00127A  5C58               	subwf	showAllConfigurations@i^0,w,c
  4041   00127C  A0D8               	btfss	status,0,c
  4042   00127E  EF43  F009         	goto	u2371
  4043   001282  EF45  F009         	goto	u2370
  4044   001286                     u2371:
  4045   001286  EFFA  F008         	goto	l3159
  4046   00128A                     u2370:
  4047   00128A  0012               	return		;funcret
  4048   00128C                     __end_of_showAllConfigurations:
  4049                           	callstack 0
  4050                           
  4051 ;; *************** function _saveHourToData *****************
  4052 ;; Defined at:
  4053 ;;		line 63 in file "TAD_DATOS.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  hour            1    1[COMRAM] PTR unsigned char 
  4056 ;;		 -> motorTerminal@hour(4), 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1
  4068 ;;      Params:         1       0       0
  4069 ;;      Locals:         0       0       0
  4070 ;;      Temps:          0       0       0
  4071 ;;      Totals:         1       0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used: 1
  4074 ;; Hardware stack levels required when called: 3
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_motorTerminal
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text7
  4083   001878                     __ptext7:
  4084                           	callstack 0
  4085   001878                     _saveHourToData:
  4086                           	callstack 26
  4087   001878                     
  4088                           ;TAD_DATOS.c: 64:     currentTime[0] = hour[0];
  4089   001878  5050               	movf	saveHourToData@hour^0,w,c
  4090   00187A  6ED9               	movwf	fsr2l,c
  4091   00187C  6ADA               	clrf	fsr2h,c
  4092   00187E  50DF               	movf	indf2,w,c
  4093   001880  6E6F               	movwf	_currentTime^0,c
  4094   001882                     
  4095                           ;TAD_DATOS.c: 65:     currentTime[1] = hour[1];
  4096   001882  5050               	movf	saveHourToData@hour^0,w,c
  4097   001884  6ED9               	movwf	fsr2l,c
  4098   001886  6ADA               	clrf	fsr2h,c
  4099   001888  0E01               	movlw	1
  4100   00188A  26D9               	addwf	fsr2l,f,c
  4101   00188C  50DF               	movf	indf2,w,c
  4102   00188E  6E70               	movwf	(_currentTime+1)^0,c
  4103   001890                     
  4104                           ;TAD_DATOS.c: 66:     currentTime[2] = hour[2];
  4105   001890  5050               	movf	saveHourToData@hour^0,w,c
  4106   001892  6ED9               	movwf	fsr2l,c
  4107   001894  6ADA               	clrf	fsr2h,c
  4108   001896  0E02               	movlw	2
  4109   001898  26D9               	addwf	fsr2l,f,c
  4110   00189A  50DF               	movf	indf2,w,c
  4111   00189C  6E71               	movwf	(_currentTime+2)^0,c
  4112   00189E                     
  4113                           ;TAD_DATOS.c: 67:     currentTime[3] = hour[3];
  4114   00189E  5050               	movf	saveHourToData@hour^0,w,c
  4115   0018A0  6ED9               	movwf	fsr2l,c
  4116   0018A2  6ADA               	clrf	fsr2h,c
  4117   0018A4  0E03               	movlw	3
  4118   0018A6  26D9               	addwf	fsr2l,f,c
  4119   0018A8  50DF               	movf	indf2,w,c
  4120   0018AA  6E72               	movwf	(_currentTime+3)^0,c
  4121   0018AC  0012               	return		;funcret
  4122   0018AE                     __end_of_saveHourToData:
  4123                           	callstack 0
  4124                           
  4125 ;; *************** function _printfUID *****************
  4126 ;; Defined at:
  4127 ;;		line 59 in file "TAD_TERMINAL.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  4130 ;;		 -> NULL(0), currentUser(5), 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  low             1   14[COMRAM] unsigned char 
  4133 ;;  high            1   13[COMRAM] unsigned char 
  4134 ;;  i               2   15[COMRAM] int 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1
  4144 ;;      Params:         1       0       0
  4145 ;;      Locals:         8       0       0
  4146 ;;      Temps:          1       0       0
  4147 ;;      Totals:        10       0       0
  4148 ;;Total ram usage:       10 bytes
  4149 ;; Hardware stack levels used: 1
  4150 ;; Hardware stack levels required when called: 6
  4151 ;; This function calls:
  4152 ;;		_Terminal_SendChar
  4153 ;;		_Terminal_SendString
  4154 ;; This function is called by:
  4155 ;;		_motorTerminal
  4156 ;;		_setCurrentUser
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text8
  4161   000C88                     __ptext8:
  4162                           	callstack 0
  4163   000C88                     _printfUID:
  4164                           	callstack 22
  4165   000C88                     
  4166                           ;TAD_TERMINAL.c: 60:  Terminal_SendString("UID: ");
  4167   000C88  0EED               	movlw	low STR_10
  4168   000C8A  6E54               	movwf	Terminal_SendString@str^0,c
  4169   000C8C  0E1F               	movlw	high STR_10
  4170   000C8E  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4171   000C90  EC57  F00C         	call	_Terminal_SendString	;wreg free
  4172   000C94                     
  4173                           ;TAD_TERMINAL.c: 61:  for (int i = 0; i < 5; i++) {
  4174   000C94  0E00               	movlw	0
  4175   000C96  6E5F               	movwf	(printfUID@i+1)^0,c
  4176   000C98  0E00               	movlw	0
  4177   000C9A  6E5E               	movwf	printfUID@i^0,c
  4178   000C9C                     l2905:
  4179                           
  4180                           ;TAD_TERMINAL.c: 63:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  4181   000C9C  5056               	movf	printfUID@currentUser^0,w,c
  4182   000C9E  245E               	addwf	printfUID@i^0,w,c
  4183   000CA0  6ED9               	movwf	fsr2l,c
  4184   000CA2  6ADA               	clrf	fsr2h,c
  4185   000CA4  50DF               	movf	indf2,w,c
  4186   000CA6  6E57               	movwf	??_printfUID^0,c
  4187   000CA8  3857               	swapf	??_printfUID^0,w,c
  4188   000CAA  0B0F               	andlw	15
  4189   000CAC  0B0F               	andlw	15
  4190   000CAE  6E5C               	movwf	printfUID@high^0,c
  4191   000CB0                     
  4192                           ;TAD_TERMINAL.c: 64:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  4193   000CB0  0E09               	movlw	9
  4194   000CB2  645C               	cpfsgt	printfUID@high^0,c
  4195   000CB4  EF5E  F006         	goto	u1891
  4196   000CB8  EF60  F006         	goto	u1890
  4197   000CBC                     u1891:
  4198   000CBC  EF68  F006         	goto	l2911
  4199   000CC0                     u1890:
  4200   000CC0  0E37               	movlw	55
  4201   000CC2  245C               	addwf	printfUID@high^0,w,c
  4202   000CC4  6E58               	movwf	_printfUID$926^0,c
  4203   000CC6  6A59               	clrf	(_printfUID$926+1)^0,c
  4204   000CC8  0E00               	movlw	0
  4205   000CCA  2259               	addwfc	(_printfUID$926+1)^0,f,c
  4206   000CCC  EF6E  F006         	goto	l2913
  4207   000CD0                     l2911:
  4208   000CD0  0E30               	movlw	48
  4209   000CD2  245C               	addwf	printfUID@high^0,w,c
  4210   000CD4  6E58               	movwf	_printfUID$926^0,c
  4211   000CD6  6A59               	clrf	(_printfUID$926+1)^0,c
  4212   000CD8  0E00               	movlw	0
  4213   000CDA  2259               	addwfc	(_printfUID$926+1)^0,f,c
  4214   000CDC                     l2913:
  4215   000CDC  5058               	movf	_printfUID$926^0,w,c
  4216   000CDE  EC1B  F00D         	call	_Terminal_SendChar
  4217   000CE2                     
  4218                           ;TAD_TERMINAL.c: 67:   unsigned char low = currentUser[i] & 0x0F;
  4219   000CE2  5056               	movf	printfUID@currentUser^0,w,c
  4220   000CE4  245E               	addwf	printfUID@i^0,w,c
  4221   000CE6  6ED9               	movwf	fsr2l,c
  4222   000CE8  6ADA               	clrf	fsr2h,c
  4223   000CEA  50DF               	movf	indf2,w,c
  4224   000CEC  0B0F               	andlw	15
  4225   000CEE  6E5D               	movwf	printfUID@low^0,c
  4226   000CF0                     
  4227                           ;TAD_TERMINAL.c: 68:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  4228   000CF0  0E09               	movlw	9
  4229   000CF2  645D               	cpfsgt	printfUID@low^0,c
  4230   000CF4  EF7E  F006         	goto	u1901
  4231   000CF8  EF80  F006         	goto	u1900
  4232   000CFC                     u1901:
  4233   000CFC  EF88  F006         	goto	l2921
  4234   000D00                     u1900:
  4235   000D00  0E37               	movlw	55
  4236   000D02  245D               	addwf	printfUID@low^0,w,c
  4237   000D04  6E5A               	movwf	_printfUID$928^0,c
  4238   000D06  6A5B               	clrf	(_printfUID$928+1)^0,c
  4239   000D08  0E00               	movlw	0
  4240   000D0A  225B               	addwfc	(_printfUID$928+1)^0,f,c
  4241   000D0C  EF8E  F006         	goto	l2923
  4242   000D10                     l2921:
  4243   000D10  0E30               	movlw	48
  4244   000D12  245D               	addwf	printfUID@low^0,w,c
  4245   000D14  6E5A               	movwf	_printfUID$928^0,c
  4246   000D16  6A5B               	clrf	(_printfUID$928+1)^0,c
  4247   000D18  0E00               	movlw	0
  4248   000D1A  225B               	addwfc	(_printfUID$928+1)^0,f,c
  4249   000D1C                     l2923:
  4250   000D1C  505A               	movf	_printfUID$928^0,w,c
  4251   000D1E  EC1B  F00D         	call	_Terminal_SendChar
  4252   000D22                     
  4253                           ;TAD_TERMINAL.c: 71:   if (i < 4) Terminal_SendString("-");
  4254   000D22  BE5F               	btfsc	(printfUID@i+1)^0,7,c
  4255   000D24  EF9F  F006         	goto	u1910
  4256   000D28  505F               	movf	(printfUID@i+1)^0,w,c
  4257   000D2A  E107               	bnz	u1911
  4258   000D2C  0E04               	movlw	4
  4259   000D2E  5C5E               	subwf	printfUID@i^0,w,c
  4260   000D30  B0D8               	btfsc	status,0,c
  4261   000D32  EF9D  F006         	goto	u1911
  4262   000D36  EF9F  F006         	goto	u1910
  4263   000D3A                     u1911:
  4264   000D3A  EFA5  F006         	goto	l2929
  4265   000D3E                     u1910:
  4266   000D3E  0EFC               	movlw	low STR_11
  4267   000D40  6E54               	movwf	Terminal_SendString@str^0,c
  4268   000D42  0E1F               	movlw	high STR_11
  4269   000D44  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4270   000D46  EC57  F00C         	call	_Terminal_SendString	;wreg free
  4271   000D4A                     l2929:
  4272                           
  4273                           ;TAD_TERMINAL.c: 72:  }
  4274   000D4A  4A5E               	infsnz	printfUID@i^0,f,c
  4275   000D4C  2A5F               	incf	(printfUID@i+1)^0,f,c
  4276   000D4E  BE5F               	btfsc	(printfUID@i+1)^0,7,c
  4277   000D50  EFB3  F006         	goto	u1921
  4278   000D54  505F               	movf	(printfUID@i+1)^0,w,c
  4279   000D56  E109               	bnz	u1920
  4280   000D58  0E05               	movlw	5
  4281   000D5A  5C5E               	subwf	printfUID@i^0,w,c
  4282   000D5C  A0D8               	btfss	status,0,c
  4283   000D5E  EFB3  F006         	goto	u1921
  4284   000D62  EFB5  F006         	goto	u1920
  4285   000D66                     u1921:
  4286   000D66  EF4E  F006         	goto	l2905
  4287   000D6A                     u1920:
  4288   000D6A                     
  4289                           ;TAD_TERMINAL.c: 73:  Terminal_SendString("\r\n");
  4290   000D6A  0EBF               	movlw	low (STR_2+15)
  4291   000D6C  6E54               	movwf	Terminal_SendString@str^0,c
  4292   000D6E  0E1F               	movlw	high (STR_2+15)
  4293   000D70  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4294   000D72  EC57  F00C         	call	_Terminal_SendString	;wreg free
  4295   000D76  0012               	return		;funcret
  4296   000D78                     __end_of_printfUID:
  4297                           	callstack 0
  4298                           
  4299 ;; *************** function _Terminal_SendString *****************
  4300 ;; Defined at:
  4301 ;;		line 38 in file "TAD_TERMINAL.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  str             2    5[COMRAM] PTR const unsigned char 
  4304 ;;		 -> STR_28(2), STR_27(22), STR_26(3), STR_25(2), 
  4305 ;;		 -> STR_24(10), STR_23(6), STR_22(33), STR_21(33), 
  4306 ;;		 -> STR_20(33), STR_19(3), STR_18(3), STR_17(3), 
  4307 ;;		 -> STR_16(3), STR_15(3), STR_14(4), STR_13(3), 
  4308 ;;		 -> STR_12(3), STR_11(2), STR_10(6), STR_9(9), 
  4309 ;;		 -> STR_8(33), STR_7(29), STR_6(27), STR_5(19), 
  4310 ;;		 -> STR_4(18), STR_3(18), STR_2(18), 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1
  4322 ;;      Params:         2       0       0
  4323 ;;      Locals:         0       0       0
  4324 ;;      Temps:          0       0       0
  4325 ;;      Totals:         2       0       0
  4326 ;;Total ram usage:        2 bytes
  4327 ;; Hardware stack levels used: 1
  4328 ;; Hardware stack levels required when called: 5
  4329 ;; This function calls:
  4330 ;;		_Terminal_SendChar
  4331 ;; This function is called by:
  4332 ;;		_showMenu
  4333 ;;		_printfUID
  4334 ;;		_printLedConfig
  4335 ;;		_motorTerminal
  4336 ;;		_showAllConfigurations
  4337 ;;		_setCurrentUser
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text9
  4342   0018AE                     __ptext9:
  4343                           	callstack 0
  4344   0018AE                     _Terminal_SendString:
  4345                           	callstack 22
  4346   0018AE                     
  4347                           ;TAD_TERMINAL.c: 39:  while (*str) {
  4348   0018AE  EF63  F00C         	goto	l2831
  4349   0018B2                     l2827:
  4350                           
  4351                           ;TAD_TERMINAL.c: 40:   Terminal_SendChar(*str++);
  4352   0018B2  C054  FFF6         	movff	Terminal_SendString@str,tblptrl
  4353   0018B6  C055  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4354   0018BA                     	if	0	;tblptru may be non-zero
  4355   0018BA                     	endif
  4356   0018BA                     	if	0	;tblptru may be non-zero
  4357   0018BA                     	endif
  4358   0018BA  0008               	tblrd		*
  4359   0018BC  50F5               	movf	tablat,w,c
  4360   0018BE  EC1B  F00D         	call	_Terminal_SendChar
  4361   0018C2  4A54               	infsnz	Terminal_SendString@str^0,f,c
  4362   0018C4  2A55               	incf	(Terminal_SendString@str+1)^0,f,c
  4363   0018C6                     l2831:
  4364                           
  4365                           ;TAD_TERMINAL.c: 39:  while (*str) {
  4366   0018C6  C054  FFF6         	movff	Terminal_SendString@str,tblptrl
  4367   0018CA  C055  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4368   0018CE                     	if	0	;tblptru may be non-zero
  4369   0018CE                     	endif
  4370   0018CE                     	if	0	;tblptru may be non-zero
  4371   0018CE                     	endif
  4372   0018CE  0008               	tblrd		*
  4373   0018D0  50F5               	movf	tablat,w,c
  4374   0018D2  0900               	iorlw	0
  4375   0018D4  A4D8               	btfss	status,2,c
  4376   0018D6  EF6F  F00C         	goto	u1841
  4377   0018DA  EF71  F00C         	goto	u1840
  4378   0018DE                     u1841:
  4379   0018DE  EF59  F00C         	goto	l2827
  4380   0018E2                     u1840:
  4381   0018E2  0012               	return		;funcret
  4382   0018E4                     __end_of_Terminal_SendString:
  4383                           	callstack 0
  4384                           
  4385 ;; *************** function _Terminal_SendChar *****************
  4386 ;; Defined at:
  4387 ;;		line 27 in file "TAD_TERMINAL.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  c               1    wreg     unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  c               1    4[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1
  4401 ;;      Params:         0       0       0
  4402 ;;      Locals:         1       0       0
  4403 ;;      Temps:          0       0       0
  4404 ;;      Totals:         1       0       0
  4405 ;;Total ram usage:        1 bytes
  4406 ;; Hardware stack levels used: 1
  4407 ;; Hardware stack levels required when called: 4
  4408 ;; This function calls:
  4409 ;;		_Terminal_TXAvailable
  4410 ;; This function is called by:
  4411 ;;		_Terminal_SendString
  4412 ;;		_printfUID
  4413 ;;		_printLedConfig
  4414 ;;		_motorTerminal
  4415 ;;		_showAllConfigurations
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text10
  4420   001A36                     __ptext10:
  4421                           	callstack 0
  4422   001A36                     _Terminal_SendChar:
  4423                           	callstack 22
  4424                           
  4425                           ;incstack = 0
  4426                           ;Terminal_SendChar@c stored from wreg
  4427   001A36  6E53               	movwf	Terminal_SendChar@c^0,c
  4428   001A38                     l2773:
  4429   001A38  EC2A  F00D         	call	_Terminal_TXAvailable	;wreg free
  4430   001A3C  5050               	movf	?_Terminal_TXAvailable^0,w,c
  4431   001A3E  1051               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  4432   001A40  B4D8               	btfsc	status,2,c
  4433   001A42  EF25  F00D         	goto	u1811
  4434   001A46  EF27  F00D         	goto	u1810
  4435   001A4A                     u1811:
  4436   001A4A  EF1C  F00D         	goto	l2773
  4437   001A4E                     u1810:
  4438   001A4E                     
  4439                           ;TAD_TERMINAL.c: 29:  TXREG = c;
  4440   001A4E  C053  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  4441   001A52  0012               	return		;funcret
  4442   001A54                     __end_of_Terminal_SendChar:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _Terminal_TXAvailable *****************
  4446 ;; Defined at:
  4447 ;;		line 17 in file "TAD_TERMINAL.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  2    1[COMRAM] int 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1
  4461 ;;      Params:         2       0       0
  4462 ;;      Locals:         0       0       0
  4463 ;;      Temps:          1       0       0
  4464 ;;      Totals:         3       0       0
  4465 ;;Total ram usage:        3 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 3
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_Terminal_SendChar
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text11
  4476   001A54                     __ptext11:
  4477                           	callstack 0
  4478   001A54                     _Terminal_TXAvailable:
  4479                           	callstack 22
  4480   001A54                     
  4481                           ;TAD_TERMINAL.c: 18:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  4482   001A54  B89E               	btfsc	158,4,c	;volatile
  4483   001A56  EF2F  F00D         	goto	u1581
  4484   001A5A  EF33  F00D         	goto	u1580
  4485   001A5E                     u1581:
  4486   001A5E  6A52               	clrf	??_Terminal_TXAvailable^0,c
  4487   001A60  2A52               	incf	??_Terminal_TXAvailable^0,f,c
  4488   001A62  EF34  F00D         	goto	u1588
  4489   001A66                     u1580:
  4490   001A66  6A52               	clrf	??_Terminal_TXAvailable^0,c
  4491   001A68                     u1588:
  4492   001A68  5052               	movf	??_Terminal_TXAvailable^0,w,c
  4493   001A6A  6E50               	movwf	?_Terminal_TXAvailable^0,c
  4494   001A6C  6A51               	clrf	(?_Terminal_TXAvailable+1)^0,c
  4495   001A6E  0012               	return		;funcret
  4496   001A70                     __end_of_Terminal_TXAvailable:
  4497                           	callstack 0
  4498                           
  4499 ;; *************** function _getActualUID *****************
  4500 ;; Defined at:
  4501 ;;		line 30 in file "TAD_DATOS.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    1[COMRAM] PTR unsigned char 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1
  4515 ;;      Params:         2       0       0
  4516 ;;      Locals:         0       0       0
  4517 ;;      Temps:          0       0       0
  4518 ;;      Totals:         2       0       0
  4519 ;;Total ram usage:        2 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; Hardware stack levels required when called: 3
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_motor_RFID
  4526 ;;		_motorTerminal
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text12
  4531   001546                     __ptext12:
  4532                           	callstack 0
  4533   001546                     _getActualUID:
  4534                           	callstack 26
  4535   001546                     
  4536                           ;TAD_DATOS.c: 31:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  4537   001546  5047               	movf	_currentUser^0,w,c
  4538   001548  A4D8               	btfss	status,2,c
  4539   00154A  EFA9  F00A         	goto	u2221
  4540   00154E  EFAB  F00A         	goto	u2220
  4541   001552                     u2221:
  4542   001552  EFCE  F00A         	goto	l3085
  4543   001556                     u2220:
  4544   001556  5048               	movf	(_currentUser+1)^0,w,c
  4545   001558  A4D8               	btfss	status,2,c
  4546   00155A  EFB1  F00A         	goto	u2231
  4547   00155E  EFB3  F00A         	goto	u2230
  4548   001562                     u2231:
  4549   001562  EFCE  F00A         	goto	l3085
  4550   001566                     u2230:
  4551   001566  5049               	movf	(_currentUser+2)^0,w,c
  4552   001568  A4D8               	btfss	status,2,c
  4553   00156A  EFB9  F00A         	goto	u2241
  4554   00156E  EFBB  F00A         	goto	u2240
  4555   001572                     u2241:
  4556   001572  EFCE  F00A         	goto	l3085
  4557   001576                     u2240:
  4558   001576  504A               	movf	(_currentUser+3)^0,w,c
  4559   001578  A4D8               	btfss	status,2,c
  4560   00157A  EFC1  F00A         	goto	u2251
  4561   00157E  EFC3  F00A         	goto	u2250
  4562   001582                     u2251:
  4563   001582  EFCE  F00A         	goto	l3085
  4564   001586                     u2250:
  4565   001586  504B               	movf	(_currentUser+4)^0,w,c
  4566   001588  A4D8               	btfss	status,2,c
  4567   00158A  EFC9  F00A         	goto	u2261
  4568   00158E  EFCB  F00A         	goto	u2260
  4569   001592                     u2261:
  4570   001592  EFCE  F00A         	goto	l3085
  4571   001596                     u2260:
  4572   001596                     
  4573                           ;TAD_DATOS.c: 32:   return ((void*)0);
  4574   001596  0E00               	movlw	0
  4575   001598  EFCF  F00A         	goto	l602
  4576   00159C                     l3085:
  4577                           
  4578                           ;TAD_DATOS.c: 34:     return currentUser;
  4579   00159C  0E47               	movlw	_currentUser& (0+255)
  4580   00159E                     l602:
  4581   00159E  0012               	return		;funcret
  4582   0015A0                     __end_of_getActualUID:
  4583                           	callstack 0
  4584                           
  4585 ;; *************** function _Terminal_ReceiveChar *****************
  4586 ;; Defined at:
  4587 ;;		line 33 in file "TAD_TERMINAL.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      unsigned char 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1
  4601 ;;      Params:         0       0       0
  4602 ;;      Locals:         0       0       0
  4603 ;;      Temps:          0       0       0
  4604 ;;      Totals:         0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used: 1
  4607 ;; Hardware stack levels required when called: 3
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_motorTerminal
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text13
  4616   001B66                     __ptext13:
  4617                           	callstack 0
  4618   001B66                     _Terminal_ReceiveChar:
  4619                           	callstack 26
  4620   001B66                     
  4621                           ;TAD_TERMINAL.c: 34:  return RCREG;
  4622   001B66  50AE               	movf	174,w,c	;volatile
  4623   001B68  0012               	return		;funcret
  4624   001B6A                     __end_of_Terminal_ReceiveChar:
  4625                           	callstack 0
  4626                           
  4627 ;; *************** function _Terminal_RXAvailable *****************
  4628 ;; Defined at:
  4629 ;;		line 22 in file "TAD_TERMINAL.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;		None
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      unsigned char 
  4636 ;; Registers used:
  4637 ;;		wreg
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1
  4643 ;;      Params:         0       0       0
  4644 ;;      Locals:         0       0       0
  4645 ;;      Temps:          0       0       0
  4646 ;;      Totals:         0       0       0
  4647 ;;Total ram usage:        0 bytes
  4648 ;; Hardware stack levels used: 1
  4649 ;; Hardware stack levels required when called: 3
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_motorTerminal
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text14
  4658   001ACE                     __ptext14:
  4659                           	callstack 0
  4660   001ACE                     _Terminal_RXAvailable:
  4661                           	callstack 26
  4662   001ACE                     
  4663                           ;TAD_TERMINAL.c: 23:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4664   001ACE  BA9E               	btfsc	158,5,c	;volatile
  4665   001AD0  EF6C  F00D         	goto	u971
  4666   001AD4  EF6F  F00D         	goto	u970
  4667   001AD8                     u971:
  4668   001AD8  0E01               	movlw	1
  4669   001ADA  EF70  F00D         	goto	u976
  4670   001ADE                     u970:
  4671   001ADE  0E00               	movlw	0
  4672   001AE0                     u976:
  4673   001AE0  0012               	return		;funcret
  4674   001AE2                     __end_of_Terminal_RXAvailable:
  4675                           	callstack 0
  4676                           
  4677 ;; *************** function _motorTeclado *****************
  4678 ;; Defined at:
  4679 ;;		line 33 in file "TAD_TECLADO.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1
  4693 ;;      Params:         0       0       0
  4694 ;;      Locals:         0       0       0
  4695 ;;      Temps:          0       0       0
  4696 ;;      Totals:         0       0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used: 1
  4699 ;; Hardware stack levels required when called: 5
  4700 ;; This function calls:
  4701 ;;		_GetTecla
  4702 ;;		_ReadFilas
  4703 ;;		_TI_GetTics
  4704 ;;		_TI_ResetTics
  4705 ;;		_hashtag_pressed3s
  4706 ;;		_setLed
  4707 ;;		_writeColumnas
  4708 ;; This function is called by:
  4709 ;;		_main
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text15
  4714   000656                     __ptext15:
  4715                           	callstack 0
  4716   000656                     _motorTeclado:
  4717                           	callstack 25
  4718   000656                     
  4719                           ;TAD_TECLADO.c: 34:  switch(state) {
  4720   000656  EF2A  F004         	goto	l3377
  4721   00065A                     l3271:
  4722                           
  4723                           ;TAD_TECLADO.c: 36:    Filas = ReadFilas();
  4724   00065A  ECB0  F00D         	call	_ReadFilas	;wreg free
  4725   00065E  6E40               	movwf	_Filas^0,c
  4726   000660                     
  4727                           ;TAD_TECLADO.c: 37:    if (Filas == 0x0) {
  4728   000660  5040               	movf	_Filas^0,w,c
  4729   000662  A4D8               	btfss	status,2,c
  4730   000664  EF36  F003         	goto	u2401
  4731   000668  EF38  F003         	goto	u2400
  4732   00066C                     u2401:
  4733   00066C  EF40  F003         	goto	l3281
  4734   000670                     u2400:
  4735   000670                     
  4736                           ;TAD_TECLADO.c: 38:     Columnas = (0x01);
  4737   000670  0E01               	movlw	1
  4738   000672  6E3F               	movwf	_Columnas^0,c
  4739   000674                     
  4740                           ;TAD_TECLADO.c: 39:     writeColumnas();
  4741   000674  EC98  F00B         	call	_writeColumnas	;wreg free
  4742   000678                     
  4743                           ;TAD_TECLADO.c: 40:     state = 1;
  4744   000678  0E01               	movlw	1
  4745   00067A  6E3D               	movwf	_state^0,c
  4746                           
  4747                           ;TAD_TECLADO.c: 41:    }
  4748   00067C  EF45  F004         	goto	l168
  4749   000680                     l3281:
  4750   000680  5040               	movf	_Filas^0,w,c
  4751   000682  B4D8               	btfsc	status,2,c
  4752   000684  EF46  F003         	goto	u2411
  4753   000688  EF48  F003         	goto	u2410
  4754   00068C                     u2411:
  4755   00068C  EF45  F004         	goto	l168
  4756   000690                     u2410:
  4757   000690                     
  4758                           ;TAD_TECLADO.c: 43:     TI_ResetTics(timer);
  4759   000690  504E               	movf	_timer^0,w,c
  4760   000692  EC09  F00D         	call	_TI_ResetTics
  4761   000696                     l3285:
  4762                           
  4763                           ;TAD_TECLADO.c: 44:     state = 3;
  4764   000696  0E03               	movlw	3
  4765   000698  6E3D               	movwf	_state^0,c
  4766   00069A  EF45  F004         	goto	l168
  4767   00069E                     l3287:
  4768                           
  4769                           ;TAD_TECLADO.c: 48:    Filas = ReadFilas();
  4770   00069E  ECB0  F00D         	call	_ReadFilas	;wreg free
  4771   0006A2  6E40               	movwf	_Filas^0,c
  4772   0006A4                     
  4773                           ;TAD_TECLADO.c: 49:    if (Filas == 0x0) {
  4774   0006A4  5040               	movf	_Filas^0,w,c
  4775   0006A6  A4D8               	btfss	status,2,c
  4776   0006A8  EF58  F003         	goto	u2421
  4777   0006AC  EF5A  F003         	goto	u2420
  4778   0006B0                     u2421:
  4779   0006B0  EF62  F003         	goto	l3297
  4780   0006B4                     u2420:
  4781   0006B4                     
  4782                           ;TAD_TECLADO.c: 50:     Columnas = (0x02);
  4783   0006B4  0E02               	movlw	2
  4784   0006B6  6E3F               	movwf	_Columnas^0,c
  4785   0006B8                     
  4786                           ;TAD_TECLADO.c: 51:     writeColumnas();
  4787   0006B8  EC98  F00B         	call	_writeColumnas	;wreg free
  4788   0006BC                     
  4789                           ;TAD_TECLADO.c: 52:     state = 2;
  4790   0006BC  0E02               	movlw	2
  4791   0006BE  6E3D               	movwf	_state^0,c
  4792                           
  4793                           ;TAD_TECLADO.c: 53:    }
  4794   0006C0  EF45  F004         	goto	l168
  4795   0006C4                     l3297:
  4796   0006C4  5040               	movf	_Filas^0,w,c
  4797   0006C6  B4D8               	btfsc	status,2,c
  4798   0006C8  EF68  F003         	goto	u2431
  4799   0006CC  EF6A  F003         	goto	u2430
  4800   0006D0                     u2431:
  4801   0006D0  EF45  F004         	goto	l168
  4802   0006D4                     u2430:
  4803   0006D4                     
  4804                           ;TAD_TECLADO.c: 55:     TI_ResetTics(timer);
  4805   0006D4  504E               	movf	_timer^0,w,c
  4806   0006D6  EC09  F00D         	call	_TI_ResetTics
  4807   0006DA  EF4B  F003         	goto	l3285
  4808   0006DE                     l3303:
  4809                           
  4810                           ;TAD_TECLADO.c: 60:    Filas = ReadFilas();
  4811   0006DE  ECB0  F00D         	call	_ReadFilas	;wreg free
  4812   0006E2  6E40               	movwf	_Filas^0,c
  4813   0006E4                     
  4814                           ;TAD_TECLADO.c: 61:    if (Filas != 0x0) {
  4815   0006E4  5040               	movf	_Filas^0,w,c
  4816   0006E6  B4D8               	btfsc	status,2,c
  4817   0006E8  EF78  F003         	goto	u2441
  4818   0006EC  EF7A  F003         	goto	u2440
  4819   0006F0                     u2441:
  4820   0006F0  EF7F  F003         	goto	l3311
  4821   0006F4                     u2440:
  4822   0006F4                     
  4823                           ;TAD_TECLADO.c: 62:     TI_ResetTics(timer);
  4824   0006F4  504E               	movf	_timer^0,w,c
  4825   0006F6  EC09  F00D         	call	_TI_ResetTics
  4826   0006FA  EF4B  F003         	goto	l3285
  4827   0006FE                     l3311:
  4828   0006FE  5040               	movf	_Filas^0,w,c
  4829   000700  A4D8               	btfss	status,2,c
  4830   000702  EF85  F003         	goto	u2451
  4831   000706  EF87  F003         	goto	u2450
  4832   00070A                     u2451:
  4833   00070A  EF45  F004         	goto	l168
  4834   00070E                     u2450:
  4835   00070E                     l3313:
  4836                           
  4837                           ;TAD_TECLADO.c: 66:     Columnas = (0x04);
  4838   00070E  0E04               	movlw	4
  4839   000710  6E3F               	movwf	_Columnas^0,c
  4840   000712                     
  4841                           ;TAD_TECLADO.c: 67:     writeColumnas();
  4842   000712  EC98  F00B         	call	_writeColumnas	;wreg free
  4843   000716                     l3317:
  4844                           
  4845                           ;TAD_TECLADO.c: 68:     state = 0;
  4846   000716  6A3D               	clrf	_state^0,c
  4847   000718  EF45  F004         	goto	l168
  4848   00071C                     l3319:
  4849                           
  4850                           ;TAD_TECLADO.c: 72:    tecla = GetTecla ();
  4851   00071C  EC94  F007         	call	_GetTecla	;wreg free
  4852   000720  6E3E               	movwf	_tecla^0,c
  4853   000722                     
  4854                           ;TAD_TECLADO.c: 73:    Filas = ReadFilas();
  4855   000722  ECB0  F00D         	call	_ReadFilas	;wreg free
  4856   000726  6E40               	movwf	_Filas^0,c
  4857   000728                     
  4858                           ;TAD_TECLADO.c: 74:    if (Filas == 0x0) {
  4859   000728  5040               	movf	_Filas^0,w,c
  4860   00072A  A4D8               	btfss	status,2,c
  4861   00072C  EF9A  F003         	goto	u2461
  4862   000730  EF9C  F003         	goto	u2460
  4863   000734                     u2461:
  4864   000734  EF9E  F003         	goto	l3331
  4865   000738                     u2460:
  4866   000738  EF87  F003         	goto	l3313
  4867   00073C                     l3331:
  4868   00073C  5040               	movf	_Filas^0,w,c
  4869   00073E  B4D8               	btfsc	status,2,c
  4870   000740  EFA4  F003         	goto	u2471
  4871   000744  EFA6  F003         	goto	u2470
  4872   000748                     u2471:
  4873   000748  EFC6  F003         	goto	l3341
  4874   00074C                     u2470:
  4875   00074C  504E               	movf	_timer^0,w,c
  4876   00074E  EC4E  F00B         	call	_TI_GetTics
  4877   000752  5053               	movf	(?_TI_GetTics+3)^0,w,c
  4878   000754  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  4879   000756  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  4880   000758  E109               	bnz	u2480
  4881   00075A  0E05               	movlw	5
  4882   00075C  5C50               	subwf	?_TI_GetTics^0,w,c
  4883   00075E  A0D8               	btfss	status,0,c
  4884   000760  EFB4  F003         	goto	u2481
  4885   000764  EFB6  F003         	goto	u2480
  4886   000768                     u2481:
  4887   000768  EFC6  F003         	goto	l3341
  4888   00076C                     u2480:
  4889   00076C  0E0B               	movlw	11
  4890   00076E  183E               	xorwf	_tecla^0,w,c
  4891   000770  B4D8               	btfsc	status,2,c
  4892   000772  EFBD  F003         	goto	u2491
  4893   000776  EFBF  F003         	goto	u2490
  4894   00077A                     u2491:
  4895   00077A  EFC6  F003         	goto	l3341
  4896   00077E                     u2490:
  4897   00077E                     
  4898                           ;TAD_TECLADO.c: 80:     setLed(tecla);
  4899   00077E  503E               	movf	_tecla^0,w,c
  4900   000780  EC1F  F00C         	call	_setLed
  4901   000784                     l3339:
  4902                           
  4903                           ;TAD_TECLADO.c: 81:     state = 5;
  4904   000784  0E05               	movlw	5
  4905   000786  6E3D               	movwf	_state^0,c
  4906                           
  4907                           ;TAD_TECLADO.c: 82:    }
  4908   000788  EF45  F004         	goto	l168
  4909   00078C                     l3341:
  4910   00078C  5040               	movf	_Filas^0,w,c
  4911   00078E  B4D8               	btfsc	status,2,c
  4912   000790  EFCC  F003         	goto	u2501
  4913   000794  EFCE  F003         	goto	u2500
  4914   000798                     u2501:
  4915   000798  EF45  F004         	goto	l168
  4916   00079C                     u2500:
  4917   00079C  504E               	movf	_timer^0,w,c
  4918   00079E  EC4E  F00B         	call	_TI_GetTics
  4919   0007A2  5053               	movf	(?_TI_GetTics+3)^0,w,c
  4920   0007A4  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  4921   0007A6  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  4922   0007A8  E109               	bnz	u2510
  4923   0007AA  0E05               	movlw	5
  4924   0007AC  5C50               	subwf	?_TI_GetTics^0,w,c
  4925   0007AE  A0D8               	btfss	status,0,c
  4926   0007B0  EFDC  F003         	goto	u2511
  4927   0007B4  EFDE  F003         	goto	u2510
  4928   0007B8                     u2511:
  4929   0007B8  EF45  F004         	goto	l168
  4930   0007BC                     u2510:
  4931   0007BC  0E0B               	movlw	11
  4932   0007BE  183E               	xorwf	_tecla^0,w,c
  4933   0007C0  A4D8               	btfss	status,2,c
  4934   0007C2  EFE5  F003         	goto	u2521
  4935   0007C6  EFE7  F003         	goto	u2520
  4936   0007CA                     u2521:
  4937   0007CA  EF45  F004         	goto	l168
  4938   0007CE                     u2520:
  4939   0007CE                     
  4940                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  4941   0007CE  504E               	movf	_timer^0,w,c
  4942   0007D0  EC09  F00D         	call	_TI_ResetTics
  4943   0007D4                     
  4944                           ;TAD_TECLADO.c: 85:     state = 4;
  4945   0007D4  0E04               	movlw	4
  4946   0007D6  6E3D               	movwf	_state^0,c
  4947   0007D8  EF45  F004         	goto	l168
  4948   0007DC                     l3351:
  4949                           
  4950                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  4951   0007DC  ECB0  F00D         	call	_ReadFilas	;wreg free
  4952   0007E0  6E40               	movwf	_Filas^0,c
  4953   0007E2                     
  4954                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  4955   0007E2  5040               	movf	_Filas^0,w,c
  4956   0007E4  A4D8               	btfss	status,2,c
  4957   0007E6  EFF7  F003         	goto	u2531
  4958   0007EA  EFF9  F003         	goto	u2530
  4959   0007EE                     u2531:
  4960   0007EE  EFFB  F003         	goto	l3357
  4961   0007F2                     u2530:
  4962   0007F2  EF8B  F003         	goto	l3317
  4963   0007F6                     l3357:
  4964   0007F6  5040               	movf	_Filas^0,w,c
  4965   0007F8  B4D8               	btfsc	status,2,c
  4966   0007FA  EF01  F004         	goto	u2541
  4967   0007FE  EF03  F004         	goto	u2540
  4968   000802                     u2541:
  4969   000802  EF45  F004         	goto	l168
  4970   000806                     u2540:
  4971   000806  504E               	movf	_timer^0,w,c
  4972   000808  EC4E  F00B         	call	_TI_GetTics
  4973   00080C  5053               	movf	(?_TI_GetTics+3)^0,w,c
  4974   00080E  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  4975   000810  E10B               	bnz	u2550
  4976   000812  0EF5               	movlw	245
  4977   000814  5C50               	subwf	?_TI_GetTics^0,w,c
  4978   000816  0E01               	movlw	1
  4979   000818  5851               	subwfb	(?_TI_GetTics+1)^0,w,c
  4980   00081A  A0D8               	btfss	status,0,c
  4981   00081C  EF12  F004         	goto	u2551
  4982   000820  EF14  F004         	goto	u2550
  4983   000824                     u2551:
  4984   000824  EF45  F004         	goto	l168
  4985   000828                     u2550:
  4986   000828                     
  4987                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  4988   000828  ECAD  F00D         	call	_hashtag_pressed3s	;wreg free
  4989   00082C  EFC2  F003         	goto	l3339
  4990   000830                     l3365:
  4991                           
  4992                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  4993   000830  ECB0  F00D         	call	_ReadFilas	;wreg free
  4994   000834  6E40               	movwf	_Filas^0,c
  4995   000836                     
  4996                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  4997   000836  5040               	movf	_Filas^0,w,c
  4998   000838  A4D8               	btfss	status,2,c
  4999   00083A  EF21  F004         	goto	u2561
  5000   00083E  EF23  F004         	goto	u2560
  5001   000842                     u2561:
  5002   000842  EF45  F004         	goto	l168
  5003   000846                     u2560:
  5004   000846                     
  5005                           ;TAD_TECLADO.c: 102:     state = 0;
  5006   000846  6A3D               	clrf	_state^0,c
  5007   000848                     
  5008                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  5009   000848  0E04               	movlw	4
  5010   00084A  6E3F               	movwf	_Columnas^0,c
  5011   00084C                     
  5012                           ;TAD_TECLADO.c: 104:     writeColumnas();
  5013   00084C  EC98  F00B         	call	_writeColumnas	;wreg free
  5014   000850  EF45  F004         	goto	l168
  5015   000854                     l3377:
  5016   000854  503D               	movf	_state^0,w,c
  5017                           
  5018                           ; Switch size 1, requested type "simple"
  5019                           ; Number of cases is 6, Range of values is 0 to 5
  5020                           ; switch strategies available:
  5021                           ; Name         Instructions Cycles
  5022                           ; simple_byte           19    10 (average)
  5023                           ;	Chosen strategy is simple_byte
  5024   000856  0A00               	xorlw	0	; case 0
  5025   000858  B4D8               	btfsc	status,2,c
  5026   00085A  EF2D  F003         	goto	l3271
  5027   00085E  0A01               	xorlw	1	; case 1
  5028   000860  B4D8               	btfsc	status,2,c
  5029   000862  EF4F  F003         	goto	l3287
  5030   000866  0A03               	xorlw	3	; case 2
  5031   000868  B4D8               	btfsc	status,2,c
  5032   00086A  EF6F  F003         	goto	l3303
  5033   00086E  0A01               	xorlw	1	; case 3
  5034   000870  B4D8               	btfsc	status,2,c
  5035   000872  EF8E  F003         	goto	l3319
  5036   000876  0A07               	xorlw	7	; case 4
  5037   000878  B4D8               	btfsc	status,2,c
  5038   00087A  EFEE  F003         	goto	l3351
  5039   00087E  0A01               	xorlw	1	; case 5
  5040   000880  B4D8               	btfsc	status,2,c
  5041   000882  EF18  F004         	goto	l3365
  5042   000886  EF45  F004         	goto	l168
  5043   00088A                     l168:
  5044   00088A  0012               	return		;funcret
  5045   00088C                     __end_of_motorTeclado:
  5046                           	callstack 0
  5047                           
  5048 ;; *************** function _writeColumnas *****************
  5049 ;; Defined at:
  5050 ;;		line 114 in file "TAD_TECLADO.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      void 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1
  5064 ;;      Params:         0       0       0
  5065 ;;      Locals:         0       0       0
  5066 ;;      Temps:          0       0       0
  5067 ;;      Totals:         0       0       0
  5068 ;;Total ram usage:        0 bytes
  5069 ;; Hardware stack levels used: 1
  5070 ;; Hardware stack levels required when called: 3
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		_motorTeclado
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text16
  5079   001730                     __ptext16:
  5080                           	callstack 0
  5081   001730                     _writeColumnas:
  5082                           	callstack 26
  5083   001730                     
  5084                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  5085   001730  6A8C               	clrf	140,c	;volatile
  5086   001732                     
  5087                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  5088   001732  043F               	decf	_Columnas^0,w,c
  5089   001734  A4D8               	btfss	status,2,c
  5090   001736  EF9F  F00B         	goto	u701
  5091   00173A  EFA1  F00B         	goto	u700
  5092   00173E                     u701:
  5093   00173E  EFA4  F00B         	goto	l1809
  5094   001742                     u700:
  5095   001742                     
  5096                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  5097   001742  8A8C               	bsf	140,5,c	;volatile
  5098                           
  5099                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  5100   001744  EFBA  F00B         	goto	l176
  5101   001748                     l1809:
  5102   001748  0E02               	movlw	2
  5103   00174A  183F               	xorwf	_Columnas^0,w,c
  5104   00174C  A4D8               	btfss	status,2,c
  5105   00174E  EFAB  F00B         	goto	u711
  5106   001752  EFAD  F00B         	goto	u710
  5107   001756                     u711:
  5108   001756  EFB0  F00B         	goto	l1813
  5109   00175A                     u710:
  5110   00175A                     
  5111                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  5112   00175A  8C8C               	bsf	140,6,c	;volatile
  5113                           
  5114                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  5115   00175C  EFBA  F00B         	goto	l176
  5116   001760                     l1813:
  5117   001760  0E04               	movlw	4
  5118   001762  183F               	xorwf	_Columnas^0,w,c
  5119   001764  A4D8               	btfss	status,2,c
  5120   001766  EFB7  F00B         	goto	u721
  5121   00176A  EFB9  F00B         	goto	u720
  5122   00176E                     u721:
  5123   00176E  EFBA  F00B         	goto	l176
  5124   001772                     u720:
  5125   001772                     
  5126                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  5127   001772  888C               	bsf	140,4,c	;volatile
  5128   001774                     l176:
  5129   001774  0012               	return		;funcret
  5130   001776                     __end_of_writeColumnas:
  5131                           	callstack 0
  5132                           
  5133 ;; *************** function _setLed *****************
  5134 ;; Defined at:
  5135 ;;		line 164 in file "TAD_DATOS.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  tecla           1    wreg     unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  tecla           1    4[COMRAM] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      void 
  5142 ;; Registers used:
  5143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1
  5149 ;;      Params:         0       0       0
  5150 ;;      Locals:         1       0       0
  5151 ;;      Temps:          0       0       0
  5152 ;;      Totals:         1       0       0
  5153 ;;Total ram usage:        1 bytes
  5154 ;; Hardware stack levels used: 1
  5155 ;; Hardware stack levels required when called: 4
  5156 ;; This function calls:
  5157 ;;		_checkUserUID
  5158 ;;		_setLEDIntensity
  5159 ;; This function is called by:
  5160 ;;		_motorTeclado
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text17
  5165   00183E                     __ptext17:
  5166                           	callstack 0
  5167   00183E                     _setLed:
  5168                           	callstack 25
  5169                           
  5170                           ;incstack = 0
  5171                           ;setLed@tecla stored from wreg
  5172   00183E  6E53               	movwf	setLed@tecla^0,c
  5173   001840                     
  5174                           ;TAD_DATOS.c: 165:  static char modeLED = 0;;TAD_DATOS.c: 166:  static char ledIndex = 0
      +                          ;;TAD_DATOS.c: 167:  static char userIndex = 0;;TAD_DATOS.c: 169:  if(modeLED == 0){
  5175   001840  5027               	movf	setLed@modeLED^0,w,c
  5176   001842  A4D8               	btfss	status,2,c
  5177   001844  EF26  F00C         	goto	u2211
  5178   001848  EF28  F00C         	goto	u2210
  5179   00184C                     u2211:
  5180   00184C  EF2E  F00C         	goto	l3059
  5181   001850                     u2210:
  5182   001850                     
  5183                           ;TAD_DATOS.c: 170:   ledIndex = tecla - 1;
  5184   001850  0453               	decf	setLed@tecla^0,w,c
  5185   001852  6E26               	movwf	setLed@ledIndex^0,c
  5186   001854                     
  5187                           ;TAD_DATOS.c: 171:   modeLED = 1;
  5188   001854  0E01               	movlw	1
  5189   001856  6E27               	movwf	setLed@modeLED^0,c
  5190                           
  5191                           ;TAD_DATOS.c: 172:  } else{
  5192   001858  EF3B  F00C         	goto	l667
  5193   00185C                     l3059:
  5194                           
  5195                           ;TAD_DATOS.c: 173:   userIndex = checkUserUID();
  5196   00185C  EC46  F004         	call	_checkUserUID	;wreg free
  5197   001860  6E25               	movwf	setLed@userIndex^0,c
  5198   001862                     
  5199                           ;TAD_DATOS.c: 174:   setLEDIntensity(userIndex, ledIndex, tecla);
  5200   001862  C026  F050         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  5201   001866  C053  F051         	movff	setLed@tecla,setLEDIntensity@intensity
  5202   00186A  5025               	movf	setLed@userIndex^0,w,c
  5203   00186C  ECBB  F00B         	call	_setLEDIntensity
  5204   001870                     
  5205                           ;TAD_DATOS.c: 175:   new_configuration = 1;
  5206   001870  0E01               	movlw	1
  5207   001872  6E2A               	movwf	_new_configuration^0,c
  5208   001874                     
  5209                           ;TAD_DATOS.c: 176:   modeLED = 0;
  5210   001874  6A27               	clrf	setLed@modeLED^0,c
  5211   001876                     l667:
  5212   001876  0012               	return		;funcret
  5213   001878                     __end_of_setLed:
  5214                           	callstack 0
  5215                           
  5216 ;; *************** function _setLEDIntensity *****************
  5217 ;; Defined at:
  5218 ;;		line 156 in file "TAD_DATOS.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  userIndex       1    wreg     unsigned char 
  5221 ;;  ledIndex        1    1[COMRAM] unsigned char 
  5222 ;;  intensity       1    2[COMRAM] unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  userIndex       1    3[COMRAM] unsigned char 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1
  5234 ;;      Params:         2       0       0
  5235 ;;      Locals:         1       0       0
  5236 ;;      Temps:          0       0       0
  5237 ;;      Totals:         3       0       0
  5238 ;;Total ram usage:        3 bytes
  5239 ;; Hardware stack levels used: 1
  5240 ;; Hardware stack levels required when called: 3
  5241 ;; This function calls:
  5242 ;;		Nothing
  5243 ;; This function is called by:
  5244 ;;		_setLed
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text18
  5249   001776                     __ptext18:
  5250                           	callstack 0
  5251   001776                     _setLEDIntensity:
  5252                           	callstack 25
  5253                           
  5254                           ;incstack = 0
  5255                           ;setLEDIntensity@userIndex stored from wreg
  5256   001776  6E52               	movwf	setLEDIntensity@userIndex^0,c
  5257   001778                     
  5258                           ;TAD_DATOS.c: 157:     if (userIndex < 4 && ledIndex < 6) {
  5259   001778  0E04               	movlw	4
  5260   00177A  6052               	cpfslt	setLEDIntensity@userIndex^0,c
  5261   00177C  EFC2  F00B         	goto	u2161
  5262   001780  EFC4  F00B         	goto	u2160
  5263   001784                     u2161:
  5264   001784  EFDD  F00B         	goto	l656
  5265   001788                     u2160:
  5266   001788  0E06               	movlw	6
  5267   00178A  6050               	cpfslt	setLEDIntensity@ledIndex^0,c
  5268   00178C  EFCA  F00B         	goto	u2171
  5269   001790  EFCC  F00B         	goto	u2170
  5270   001794                     u2171:
  5271   001794  EFDD  F00B         	goto	l656
  5272   001798                     u2170:
  5273   001798                     
  5274                           ;TAD_DATOS.c: 158:         if (intensity <= 0xA) {
  5275   001798  0E0B               	movlw	11
  5276   00179A  6051               	cpfslt	setLEDIntensity@intensity^0,c
  5277   00179C  EFD2  F00B         	goto	u2181
  5278   0017A0  EFD4  F00B         	goto	u2180
  5279   0017A4                     u2181:
  5280   0017A4  EFDD  F00B         	goto	l656
  5281   0017A8                     u2180:
  5282   0017A8                     
  5283                           ;TAD_DATOS.c: 159:             configurations[userIndex][ledIndex] = intensity;
  5284   0017A8  5052               	movf	setLEDIntensity@userIndex^0,w,c
  5285   0017AA  0D06               	mullw	6
  5286   0017AC  50F3               	movf	243,w,c
  5287   0017AE  0FC0               	addlw	low _configurations
  5288   0017B0  2450               	addwf	setLEDIntensity@ledIndex^0,w,c
  5289   0017B2  6ED9               	movwf	fsr2l,c
  5290   0017B4  6ADA               	clrf	fsr2h,c
  5291   0017B6  C051  FFDF         	movff	setLEDIntensity@intensity,indf2
  5292   0017BA                     l656:
  5293   0017BA  0012               	return		;funcret
  5294   0017BC                     __end_of_setLEDIntensity:
  5295                           	callstack 0
  5296                           
  5297 ;; *************** function _checkUserUID *****************
  5298 ;; Defined at:
  5299 ;;		line 83 in file "TAD_DATOS.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;		None
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;		None
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      unsigned char 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1
  5313 ;;      Params:         0       0       0
  5314 ;;      Locals:         0       0       0
  5315 ;;      Temps:          0       0       0
  5316 ;;      Totals:         0       0       0
  5317 ;;Total ram usage:        0 bytes
  5318 ;; Hardware stack levels used: 1
  5319 ;; Hardware stack levels required when called: 3
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_setLed
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text19
  5328   00088C                     __ptext19:
  5329                           	callstack 0
  5330   00088C                     _checkUserUID:
  5331                           	callstack 25
  5332   00088C                     
  5333                           ;TAD_DATOS.c: 84:     if (currentUser[0] == userUIDs[0][0] && currentUser[1] == userUIDs
      +                          [0][1] &&
  5334   00088C  0100               	movlb	0	; () banked
  5335   00088E  5180               	movf	_userUIDs& (0+255),w,b
  5336   000890  1847               	xorwf	_currentUser^0,w,c
  5337   000892  A4D8               	btfss	status,2,c
  5338   000894  EF4E  F004         	goto	u1961
  5339   000898  EF50  F004         	goto	u1960
  5340   00089C                     u1961:
  5341   00089C  EF77  F004         	goto	l2981
  5342   0008A0                     u1960:
  5343   0008A0                     
  5344                           ; BSR set to: 0
  5345   0008A0  5181               	movf	(_userUIDs+1)& (0+255),w,b
  5346   0008A2  1848               	xorwf	(_currentUser+1)^0,w,c
  5347   0008A4  A4D8               	btfss	status,2,c
  5348   0008A6  EF57  F004         	goto	u1971
  5349   0008AA  EF59  F004         	goto	u1970
  5350   0008AE                     u1971:
  5351   0008AE  EF77  F004         	goto	l2981
  5352   0008B2                     u1970:
  5353   0008B2                     
  5354                           ; BSR set to: 0
  5355   0008B2  5182               	movf	(_userUIDs+2)& (0+255),w,b
  5356   0008B4  1849               	xorwf	(_currentUser+2)^0,w,c
  5357   0008B6  A4D8               	btfss	status,2,c
  5358   0008B8  EF60  F004         	goto	u1981
  5359   0008BC  EF62  F004         	goto	u1980
  5360   0008C0                     u1981:
  5361   0008C0  EF77  F004         	goto	l2981
  5362   0008C4                     u1980:
  5363   0008C4                     
  5364                           ; BSR set to: 0
  5365   0008C4  5183               	movf	(_userUIDs+3)& (0+255),w,b
  5366   0008C6  184A               	xorwf	(_currentUser+3)^0,w,c
  5367   0008C8  A4D8               	btfss	status,2,c
  5368   0008CA  EF69  F004         	goto	u1991
  5369   0008CE  EF6B  F004         	goto	u1990
  5370   0008D2                     u1991:
  5371   0008D2  EF77  F004         	goto	l2981
  5372   0008D6                     u1990:
  5373   0008D6                     
  5374                           ; BSR set to: 0
  5375   0008D6  5184               	movf	(_userUIDs+4)& (0+255),w,b
  5376   0008D8  184B               	xorwf	(_currentUser+4)^0,w,c
  5377   0008DA  A4D8               	btfss	status,2,c
  5378   0008DC  EF72  F004         	goto	u2001
  5379   0008E0  EF74  F004         	goto	u2000
  5380   0008E4                     u2001:
  5381   0008E4  EF77  F004         	goto	l2981
  5382   0008E8                     u2000:
  5383   0008E8                     l2975:
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;TAD_DATOS.c: 86:         currentUser[4] == userUIDs[0][4]) {;TAD_DATOS.c: 87:         r
      +                          eturn 0;
  5387   0008E8  0E00               	movlw	0
  5388   0008EA  EF09  F005         	goto	l627
  5389   0008EE                     l2981:
  5390                           
  5391                           ; BSR set to: 0
  5392   0008EE  5047               	movf	_currentUser^0,w,c
  5393   0008F0  1990               	xorwf	(_userUIDs+16)& (0+255),w,b
  5394   0008F2  A4D8               	btfss	status,2,c
  5395   0008F4  EF7E  F004         	goto	u2011
  5396   0008F8  EF80  F004         	goto	u2010
  5397   0008FC                     u2011:
  5398   0008FC  EFA7  F004         	goto	l2997
  5399   000900                     u2010:
  5400   000900                     
  5401                           ; BSR set to: 0
  5402   000900  5191               	movf	(_userUIDs+17)& (0+255),w,b
  5403   000902  1848               	xorwf	(_currentUser+1)^0,w,c
  5404   000904  A4D8               	btfss	status,2,c
  5405   000906  EF87  F004         	goto	u2021
  5406   00090A  EF89  F004         	goto	u2020
  5407   00090E                     u2021:
  5408   00090E  EFA7  F004         	goto	l2997
  5409   000912                     u2020:
  5410   000912                     
  5411                           ; BSR set to: 0
  5412   000912  5192               	movf	(_userUIDs+18)& (0+255),w,b
  5413   000914  1849               	xorwf	(_currentUser+2)^0,w,c
  5414   000916  A4D8               	btfss	status,2,c
  5415   000918  EF90  F004         	goto	u2031
  5416   00091C  EF92  F004         	goto	u2030
  5417   000920                     u2031:
  5418   000920  EFA7  F004         	goto	l2997
  5419   000924                     u2030:
  5420   000924                     
  5421                           ; BSR set to: 0
  5422   000924  5193               	movf	(_userUIDs+19)& (0+255),w,b
  5423   000926  184A               	xorwf	(_currentUser+3)^0,w,c
  5424   000928  A4D8               	btfss	status,2,c
  5425   00092A  EF99  F004         	goto	u2041
  5426   00092E  EF9B  F004         	goto	u2040
  5427   000932                     u2041:
  5428   000932  EFA7  F004         	goto	l2997
  5429   000936                     u2040:
  5430   000936                     
  5431                           ; BSR set to: 0
  5432   000936  5194               	movf	(_userUIDs+20)& (0+255),w,b
  5433   000938  184B               	xorwf	(_currentUser+4)^0,w,c
  5434   00093A  A4D8               	btfss	status,2,c
  5435   00093C  EFA2  F004         	goto	u2051
  5436   000940  EFA4  F004         	goto	u2050
  5437   000944                     u2051:
  5438   000944  EFA7  F004         	goto	l2997
  5439   000948                     u2050:
  5440   000948                     
  5441                           ; BSR set to: 0
  5442                           ;TAD_DATOS.c: 91:              currentUser[4] == userUIDs[1][4]) {;TAD_DATOS.c: 92:     
      +                              return 1;
  5443   000948  0E01               	movlw	1
  5444   00094A  EF09  F005         	goto	l627
  5445   00094E                     l2997:
  5446                           
  5447                           ; BSR set to: 0
  5448   00094E  5047               	movf	_currentUser^0,w,c
  5449   000950  19A0               	xorwf	(_userUIDs+32)& (0+255),w,b
  5450   000952  A4D8               	btfss	status,2,c
  5451   000954  EFAE  F004         	goto	u2061
  5452   000958  EFB0  F004         	goto	u2060
  5453   00095C                     u2061:
  5454   00095C  EFD7  F004         	goto	l3013
  5455   000960                     u2060:
  5456   000960                     
  5457                           ; BSR set to: 0
  5458   000960  51A1               	movf	(_userUIDs+33)& (0+255),w,b
  5459   000962  1848               	xorwf	(_currentUser+1)^0,w,c
  5460   000964  A4D8               	btfss	status,2,c
  5461   000966  EFB7  F004         	goto	u2071
  5462   00096A  EFB9  F004         	goto	u2070
  5463   00096E                     u2071:
  5464   00096E  EFD7  F004         	goto	l3013
  5465   000972                     u2070:
  5466   000972                     
  5467                           ; BSR set to: 0
  5468   000972  51A2               	movf	(_userUIDs+34)& (0+255),w,b
  5469   000974  1849               	xorwf	(_currentUser+2)^0,w,c
  5470   000976  A4D8               	btfss	status,2,c
  5471   000978  EFC0  F004         	goto	u2081
  5472   00097C  EFC2  F004         	goto	u2080
  5473   000980                     u2081:
  5474   000980  EFD7  F004         	goto	l3013
  5475   000984                     u2080:
  5476   000984                     
  5477                           ; BSR set to: 0
  5478   000984  51A3               	movf	(_userUIDs+35)& (0+255),w,b
  5479   000986  184A               	xorwf	(_currentUser+3)^0,w,c
  5480   000988  A4D8               	btfss	status,2,c
  5481   00098A  EFC9  F004         	goto	u2091
  5482   00098E  EFCB  F004         	goto	u2090
  5483   000992                     u2091:
  5484   000992  EFD7  F004         	goto	l3013
  5485   000996                     u2090:
  5486   000996                     
  5487                           ; BSR set to: 0
  5488   000996  51A4               	movf	(_userUIDs+36)& (0+255),w,b
  5489   000998  184B               	xorwf	(_currentUser+4)^0,w,c
  5490   00099A  A4D8               	btfss	status,2,c
  5491   00099C  EFD2  F004         	goto	u2101
  5492   0009A0  EFD4  F004         	goto	u2100
  5493   0009A4                     u2101:
  5494   0009A4  EFD7  F004         	goto	l3013
  5495   0009A8                     u2100:
  5496   0009A8                     
  5497                           ; BSR set to: 0
  5498                           ;TAD_DATOS.c: 96:              currentUser[4] == userUIDs[2][4]) {;TAD_DATOS.c: 97:     
      +                              return 2;
  5499   0009A8  0E02               	movlw	2
  5500   0009AA  EF09  F005         	goto	l627
  5501   0009AE                     l3013:
  5502                           
  5503                           ; BSR set to: 0
  5504   0009AE  5047               	movf	_currentUser^0,w,c
  5505   0009B0  19B0               	xorwf	(_userUIDs+48)& (0+255),w,b
  5506   0009B2  A4D8               	btfss	status,2,c
  5507   0009B4  EFDE  F004         	goto	u2111
  5508   0009B8  EFE0  F004         	goto	u2110
  5509   0009BC                     u2111:
  5510   0009BC  EF07  F005         	goto	l630
  5511   0009C0                     u2110:
  5512   0009C0                     
  5513                           ; BSR set to: 0
  5514   0009C0  51B1               	movf	(_userUIDs+49)& (0+255),w,b
  5515   0009C2  1848               	xorwf	(_currentUser+1)^0,w,c
  5516   0009C4  A4D8               	btfss	status,2,c
  5517   0009C6  EFE7  F004         	goto	u2121
  5518   0009CA  EFE9  F004         	goto	u2120
  5519   0009CE                     u2121:
  5520   0009CE  EF07  F005         	goto	l630
  5521   0009D2                     u2120:
  5522   0009D2                     
  5523                           ; BSR set to: 0
  5524   0009D2  51B2               	movf	(_userUIDs+50)& (0+255),w,b
  5525   0009D4  1849               	xorwf	(_currentUser+2)^0,w,c
  5526   0009D6  A4D8               	btfss	status,2,c
  5527   0009D8  EFF0  F004         	goto	u2131
  5528   0009DC  EFF2  F004         	goto	u2130
  5529   0009E0                     u2131:
  5530   0009E0  EF07  F005         	goto	l630
  5531   0009E4                     u2130:
  5532   0009E4                     
  5533                           ; BSR set to: 0
  5534   0009E4  51B3               	movf	(_userUIDs+51)& (0+255),w,b
  5535   0009E6  184A               	xorwf	(_currentUser+3)^0,w,c
  5536   0009E8  A4D8               	btfss	status,2,c
  5537   0009EA  EFF9  F004         	goto	u2141
  5538   0009EE  EFFB  F004         	goto	u2140
  5539   0009F2                     u2141:
  5540   0009F2  EF07  F005         	goto	l630
  5541   0009F6                     u2140:
  5542   0009F6                     
  5543                           ; BSR set to: 0
  5544   0009F6  51B4               	movf	(_userUIDs+52)& (0+255),w,b
  5545   0009F8  184B               	xorwf	(_currentUser+4)^0,w,c
  5546   0009FA  A4D8               	btfss	status,2,c
  5547   0009FC  EF02  F005         	goto	u2151
  5548   000A00  EF04  F005         	goto	u2150
  5549   000A04                     u2151:
  5550   000A04  EF07  F005         	goto	l630
  5551   000A08                     u2150:
  5552   000A08                     
  5553                           ; BSR set to: 0
  5554                           ;TAD_DATOS.c: 101:              currentUser[4] == userUIDs[3][4]) {;TAD_DATOS.c: 102:   
      +                             return 3;
  5555   000A08  0E03               	movlw	3
  5556   000A0A  EF09  F005         	goto	l627
  5557   000A0E                     l630:
  5558                           
  5559                           ; BSR set to: 0
  5560   000A0E  EF74  F004         	goto	l2975
  5561   000A12                     l627:
  5562                           
  5563                           ; BSR set to: 0
  5564   000A12  0012               	return		;funcret
  5565   000A14                     __end_of_checkUserUID:
  5566                           	callstack 0
  5567                           
  5568 ;; *************** function _hashtag_pressed3s *****************
  5569 ;; Defined at:
  5570 ;;		line 55 in file "TAD_TERMINAL.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;		None
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1
  5584 ;;      Params:         0       0       0
  5585 ;;      Locals:         0       0       0
  5586 ;;      Temps:          0       0       0
  5587 ;;      Totals:         0       0       0
  5588 ;;Total ram usage:        0 bytes
  5589 ;; Hardware stack levels used: 1
  5590 ;; Hardware stack levels required when called: 3
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_motorTeclado
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text20
  5599   001B5A                     __ptext20:
  5600                           	callstack 0
  5601   001B5A                     _hashtag_pressed3s:
  5602                           	callstack 26
  5603   001B5A                     
  5604                           ;TAD_TERMINAL.c: 56:  hashtag_pressed = 1;
  5605   001B5A  0E01               	movlw	1
  5606   001B5C  6E2D               	movwf	_hashtag_pressed^0,c
  5607   001B5E  0012               	return		;funcret
  5608   001B60                     __end_of_hashtag_pressed3s:
  5609                           	callstack 0
  5610                           
  5611 ;; *************** function _ReadFilas *****************
  5612 ;; Defined at:
  5613 ;;		line 9 in file "TAD_TECLADO.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;		None
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      unsigned char 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, status,0
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1
  5627 ;;      Params:         0       0       0
  5628 ;;      Locals:         0       0       0
  5629 ;;      Temps:          0       0       0
  5630 ;;      Totals:         0       0       0
  5631 ;;Total ram usage:        0 bytes
  5632 ;; Hardware stack levels used: 1
  5633 ;; Hardware stack levels required when called: 3
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_motorTeclado
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text21
  5642   001B60                     __ptext21:
  5643                           	callstack 0
  5644   001B60                     _ReadFilas:
  5645                           	callstack 26
  5646   001B60                     
  5647                           ;TAD_TECLADO.c: 10:     return (PORTD & 0x0F);
  5648   001B60  5083               	movf	131,w,c	;volatile
  5649   001B62  0B0F               	andlw	15
  5650   001B64  0012               	return		;funcret
  5651   001B66                     __end_of_ReadFilas:
  5652                           	callstack 0
  5653                           
  5654 ;; *************** function _GetTecla *****************
  5655 ;; Defined at:
  5656 ;;		line 128 in file "TAD_TECLADO.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  5661 ;;  fila            1   16[COMRAM] unsigned char 
  5662 ;;  columna         1   15[COMRAM] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1
  5672 ;;      Params:         0       0       0
  5673 ;;      Locals:        14       0       0
  5674 ;;      Temps:          2       0       0
  5675 ;;      Totals:        16       0       0
  5676 ;;Total ram usage:       16 bytes
  5677 ;; Hardware stack levels used: 1
  5678 ;; Hardware stack levels required when called: 3
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_motorTeclado
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text22
  5687   000F28                     __ptext22:
  5688                           	callstack 0
  5689   000F28                     _GetTecla:
  5690                           	callstack 26
  5691   000F28                     
  5692                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  5693   000F28  6A5E               	clrf	GetTecla@columna^0,c
  5694                           
  5695                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  5696   000F2A  EFA9  F007         	goto	l1831
  5697   000F2E                     l180:
  5698   000F2E  6A5F               	clrf	GetTecla@fila^0,c
  5699   000F30  EFC7  F007         	goto	l1843
  5700   000F34                     l1819:
  5701   000F34  0E01               	movlw	1
  5702   000F36  6E5F               	movwf	GetTecla@fila^0,c
  5703   000F38  EFC7  F007         	goto	l1843
  5704   000F3C                     l1821:
  5705   000F3C  0E02               	movlw	2
  5706   000F3E  6E5F               	movwf	GetTecla@fila^0,c
  5707   000F40  EFC7  F007         	goto	l1843
  5708   000F44                     l1823:
  5709   000F44  0E03               	movlw	3
  5710   000F46  6E5F               	movwf	GetTecla@fila^0,c
  5711   000F48  EFC7  F007         	goto	l1843
  5712   000F4C                     l1825:
  5713   000F4C  0EFF               	movlw	255
  5714   000F4E  EFF5  F007         	goto	l186
  5715   000F52                     l1831:
  5716   000F52  5040               	movf	_Filas^0,w,c
  5717                           
  5718                           ; Switch size 1, requested type "simple"
  5719                           ; Number of cases is 4, Range of values is 1 to 8
  5720                           ; switch strategies available:
  5721                           ; Name         Instructions Cycles
  5722                           ; simple_byte           13     7 (average)
  5723                           ;	Chosen strategy is simple_byte
  5724   000F54  0A01               	xorlw	1	; case 1
  5725   000F56  B4D8               	btfsc	status,2,c
  5726   000F58  EF97  F007         	goto	l180
  5727   000F5C  0A03               	xorlw	3	; case 2
  5728   000F5E  B4D8               	btfsc	status,2,c
  5729   000F60  EF9A  F007         	goto	l1819
  5730   000F64  0A06               	xorlw	6	; case 4
  5731   000F66  B4D8               	btfsc	status,2,c
  5732   000F68  EF9E  F007         	goto	l1821
  5733   000F6C  0A0C               	xorlw	12	; case 8
  5734   000F6E  B4D8               	btfsc	status,2,c
  5735   000F70  EFA2  F007         	goto	l1823
  5736   000F74  EFA6  F007         	goto	l1825
  5737   000F78                     l188:
  5738   000F78  6A5E               	clrf	GetTecla@columna^0,c
  5739   000F7A  EFE1  F007         	goto	l1845
  5740   000F7E                     l1833:
  5741   000F7E  0E01               	movlw	1
  5742   000F80  6E5E               	movwf	GetTecla@columna^0,c
  5743   000F82  EFE1  F007         	goto	l1845
  5744   000F86                     l1835:
  5745   000F86  0E02               	movlw	2
  5746   000F88  6E5E               	movwf	GetTecla@columna^0,c
  5747   000F8A  EFE1  F007         	goto	l1845
  5748   000F8E                     l1843:
  5749   000F8E  503F               	movf	_Columnas^0,w,c
  5750   000F90  0B07               	andlw	7
  5751   000F92  6E50               	movwf	??_GetTecla^0,c
  5752   000F94  6A51               	clrf	(??_GetTecla+1)^0,c
  5753                           
  5754                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5755                           ; Switch size 1, requested type "simple"
  5756                           ; Number of cases is 1, Range of values is 0 to 0
  5757                           ; switch strategies available:
  5758                           ; Name         Instructions Cycles
  5759                           ; simple_byte            4     3 (average)
  5760                           ;	Chosen strategy is simple_byte
  5761   000F96  5051               	movf	(??_GetTecla+1)^0,w,c
  5762   000F98  0A00               	xorlw	0	; case 0
  5763   000F9A  B4D8               	btfsc	status,2,c
  5764   000F9C  EFD2  F007         	goto	l3847
  5765   000FA0  EFA6  F007         	goto	l1825
  5766   000FA4                     l3847:
  5767                           
  5768                           ; Switch size 1, requested type "simple"
  5769                           ; Number of cases is 3, Range of values is 1 to 4
  5770                           ; switch strategies available:
  5771                           ; Name         Instructions Cycles
  5772                           ; simple_byte           10     6 (average)
  5773                           ;	Chosen strategy is simple_byte
  5774   000FA4  5050               	movf	??_GetTecla^0,w,c
  5775   000FA6  0A01               	xorlw	1	; case 1
  5776   000FA8  B4D8               	btfsc	status,2,c
  5777   000FAA  EFBC  F007         	goto	l188
  5778   000FAE  0A03               	xorlw	3	; case 2
  5779   000FB0  B4D8               	btfsc	status,2,c
  5780   000FB2  EFBF  F007         	goto	l1833
  5781   000FB6  0A06               	xorlw	6	; case 4
  5782   000FB8  B4D8               	btfsc	status,2,c
  5783   000FBA  EFC3  F007         	goto	l1835
  5784   000FBE  EFA6  F007         	goto	l1825
  5785   000FC2                     l1845:
  5786                           
  5787                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  5788   000FC2  0EBF               	movlw	low GetTecla@F2752
  5789   000FC4  6EF6               	movwf	tblptrl,c
  5790   000FC6                     	if	1	;There is more than 1 active tblptr byte
  5791   000FC6  0E1E               	movlw	high GetTecla@F2752
  5792   000FC8  6EF7               	movwf	tblptrh,c
  5793   000FCA                     	endif
  5794   000FCA                     	if	0	;There are less than 3 active tblptr bytes
  5795   000FCA                     	endif
  5796   000FCA  EE20  F052         	lfsr	2,GetTecla@keymap
  5797   000FCE  0E0B               	movlw	11
  5798   000FD0                     u730:
  5799   000FD0  0009               	tblrd		*+
  5800   000FD2  CFF5 FFDE          	movff	tablat,postinc2
  5801   000FD6  06E8               	decf	wreg,f,c
  5802   000FD8  E2FB               	bc	u730
  5803   000FDA                     
  5804                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  5805   000FDA  505F               	movf	GetTecla@fila^0,w,c
  5806   000FDC  0D03               	mullw	3
  5807   000FDE  50F3               	movf	243,w,c
  5808   000FE0  0F52               	addlw	low GetTecla@keymap
  5809   000FE2  245E               	addwf	GetTecla@columna^0,w,c
  5810   000FE4  6ED9               	movwf	fsr2l,c
  5811   000FE6  6ADA               	clrf	fsr2h,c
  5812   000FE8  50DF               	movf	indf2,w,c
  5813   000FEA                     l186:
  5814   000FEA  0012               	return		;funcret
  5815   000FEC                     __end_of_GetTecla:
  5816                           	callstack 0
  5817                           
  5818 ;; *************** function _initTeclado *****************
  5819 ;; Defined at:
  5820 ;;		line 13 in file "TAD_TECLADO.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1
  5834 ;;      Params:         0       0       0
  5835 ;;      Locals:         0       0       0
  5836 ;;      Temps:          0       0       0
  5837 ;;      Totals:         0       0       0
  5838 ;;Total ram usage:        0 bytes
  5839 ;; Hardware stack levels used: 1
  5840 ;; Hardware stack levels required when called: 4
  5841 ;; This function calls:
  5842 ;;		_TI_NewTimer
  5843 ;;		_initPortsTeclado
  5844 ;; This function is called by:
  5845 ;;		_main
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text23
  5850   001AA2                     __ptext23:
  5851                           	callstack 0
  5852   001AA2                     _initTeclado:
  5853                           	callstack 26
  5854   001AA2                     
  5855                           ;TAD_TECLADO.c: 14:  initPortsTeclado();
  5856   001AA2  ECA5  F00D         	call	_initPortsTeclado	;wreg free
  5857   001AA6                     
  5858                           ;TAD_TECLADO.c: 15:     Filas = 0x00;
  5859   001AA6  6A40               	clrf	_Filas^0,c
  5860   001AA8                     
  5861                           ;TAD_TECLADO.c: 16:     Columnas = 0x00;
  5862   001AA8  6A3F               	clrf	_Columnas^0,c
  5863   001AAA                     
  5864                           ;TAD_TECLADO.c: 17:     tecla = 0;
  5865   001AAA  6A3E               	clrf	_tecla^0,c
  5866   001AAC                     
  5867                           ;TAD_TECLADO.c: 18:  state = 0;
  5868   001AAC  6A3D               	clrf	_state^0,c
  5869   001AAE                     
  5870                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  5871   001AAE  0E4E               	movlw	low _timer
  5872   001AB0  6E50               	movwf	TI_NewTimer@TimerHandle^0,c
  5873   001AB2  ECFC  F00A         	call	_TI_NewTimer	;wreg free
  5874   001AB6  0012               	return		;funcret
  5875   001AB8                     __end_of_initTeclado:
  5876                           	callstack 0
  5877                           
  5878 ;; *************** function _initPortsTeclado *****************
  5879 ;; Defined at:
  5880 ;;		line 22 in file "TAD_TECLADO.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1
  5894 ;;      Params:         0       0       0
  5895 ;;      Locals:         0       0       0
  5896 ;;      Temps:          0       0       0
  5897 ;;      Totals:         0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 3
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_initTeclado
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text24
  5909   001B4A                     __ptext24:
  5910                           	callstack 0
  5911   001B4A                     _initPortsTeclado:
  5912                           	callstack 26
  5913   001B4A                     
  5914                           ;TAD_TECLADO.c: 25:  TRISD = 0x0F;
  5915   001B4A  0E0F               	movlw	15
  5916   001B4C  6E95               	movwf	149,c	;volatile
  5917   001B4E                     
  5918                           ;TAD_TECLADO.c: 26:  LATD = 0x00;
  5919   001B4E  6A8C               	clrf	140,c	;volatile
  5920   001B50  0012               	return		;funcret
  5921   001B52                     __end_of_initPortsTeclado:
  5922                           	callstack 0
  5923                           
  5924 ;; *************** function _initRFID *****************
  5925 ;; Defined at:
  5926 ;;		line 134 in file "TAD_RFID.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;		None
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;		None
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      void 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1
  5940 ;;      Params:         0       0       0
  5941 ;;      Locals:         0       0       0
  5942 ;;      Temps:          0       0       0
  5943 ;;      Totals:         0       0       0
  5944 ;;Total ram usage:        0 bytes
  5945 ;; Hardware stack levels used: 1
  5946 ;; Hardware stack levels required when called: 8
  5947 ;; This function calls:
  5948 ;;		_InitPortDirections
  5949 ;;		_MFRC522_Init
  5950 ;; This function is called by:
  5951 ;;		_main
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text25
  5956   001B38                     __ptext25:
  5957                           	callstack 0
  5958   001B38                     _initRFID:
  5959                           	callstack 22
  5960   001B38                     
  5961                           ;TAD_RFID.c: 135:     InitPortDirections();
  5962   001B38  EC96  F00D         	call	_InitPortDirections	;wreg free
  5963   001B3C                     
  5964                           ;TAD_RFID.c: 136:     MFRC522_Init();
  5965   001B3C  EC27  F00B         	call	_MFRC522_Init	;wreg free
  5966   001B40  0012               	return		;funcret
  5967   001B42                     __end_of_initRFID:
  5968                           	callstack 0
  5969                           
  5970 ;; *************** function _MFRC522_Init *****************
  5971 ;; Defined at:
  5972 ;;		line 116 in file "TAD_RFID.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1
  5986 ;;      Params:         0       0       0
  5987 ;;      Locals:         0       0       0
  5988 ;;      Temps:          0       0       0
  5989 ;;      Totals:         0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used: 1
  5992 ;; Hardware stack levels required when called: 7
  5993 ;; This function calls:
  5994 ;;		_MFRC522_AntennaOff
  5995 ;;		_MFRC522_AntennaOn
  5996 ;;		_MFRC522_Reset
  5997 ;;		_MFRC522_Wr
  5998 ;; This function is called by:
  5999 ;;		_initRFID
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text26
  6004   00164E                     __ptext26:
  6005                           	callstack 0
  6006   00164E                     _MFRC522_Init:
  6007                           	callstack 22
  6008   00164E                     
  6009                           ;TAD_RFID.c: 117:     LATCbits.LATC3 = 1;
  6010   00164E  868B               	bsf	139,3,c	;volatile
  6011                           
  6012                           ;TAD_RFID.c: 118:     LATCbits.LATC4 = 1;
  6013   001650  888B               	bsf	139,4,c	;volatile
  6014   001652                     
  6015                           ;TAD_RFID.c: 120:     MFRC522_Reset();
  6016   001652  ECF4  F00C         	call	_MFRC522_Reset	;wreg free
  6017                           
  6018                           ;TAD_RFID.c: 121:     MFRC522_Wr(0x2A, 0x8D);
  6019   001656  0E8D               	movlw	141
  6020   001658  6E5A               	movwf	MFRC522_Wr@value^0,c
  6021   00165A  0E2A               	movlw	42
  6022   00165C  EC51  F008         	call	_MFRC522_Wr
  6023                           
  6024                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2B, 0x3E);
  6025   001660  0E3E               	movlw	62
  6026   001662  6E5A               	movwf	MFRC522_Wr@value^0,c
  6027   001664  0E2B               	movlw	43
  6028   001666  EC51  F008         	call	_MFRC522_Wr
  6029                           
  6030                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2D, 30);
  6031   00166A  0E1E               	movlw	30
  6032   00166C  6E5A               	movwf	MFRC522_Wr@value^0,c
  6033   00166E  0E2D               	movlw	45
  6034   001670  EC51  F008         	call	_MFRC522_Wr
  6035                           
  6036                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2C, 0);
  6037   001674  0E00               	movlw	0
  6038   001676  6E5A               	movwf	MFRC522_Wr@value^0,c
  6039   001678  0E2C               	movlw	44
  6040   00167A  EC51  F008         	call	_MFRC522_Wr
  6041                           
  6042                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x15, 0x40);
  6043   00167E  0E40               	movlw	64
  6044   001680  6E5A               	movwf	MFRC522_Wr@value^0,c
  6045   001682  0E15               	movlw	21
  6046   001684  EC51  F008         	call	_MFRC522_Wr
  6047                           
  6048                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x11, 0x3D);
  6049   001688  0E3D               	movlw	61
  6050   00168A  6E5A               	movwf	MFRC522_Wr@value^0,c
  6051   00168C  0E11               	movlw	17
  6052   00168E  EC51  F008         	call	_MFRC522_Wr
  6053                           
  6054                           ;TAD_RFID.c: 128:     MFRC522_AntennaOff();
  6055   001692  EC90  F00D         	call	_MFRC522_AntennaOff	;wreg free
  6056                           
  6057                           ;TAD_RFID.c: 129:     MFRC522_AntennaOn();
  6058   001696  EC8A  F00D         	call	_MFRC522_AntennaOn	;wreg free
  6059   00169A  0012               	return		;funcret
  6060   00169C                     __end_of_MFRC522_Init:
  6061                           	callstack 0
  6062                           
  6063 ;; *************** function _MFRC522_Reset *****************
  6064 ;; Defined at:
  6065 ;;		line 97 in file "TAD_RFID.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1
  6079 ;;      Params:         0       0       0
  6080 ;;      Locals:         0       0       0
  6081 ;;      Temps:          0       0       0
  6082 ;;      Totals:         0       0       0
  6083 ;;Total ram usage:        0 bytes
  6084 ;; Hardware stack levels used: 1
  6085 ;; Hardware stack levels required when called: 5
  6086 ;; This function calls:
  6087 ;;		_MFRC522_Wr
  6088 ;;		_delay_us
  6089 ;; This function is called by:
  6090 ;;		_MFRC522_Init
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text27
  6095   0019E8                     __ptext27:
  6096                           	callstack 0
  6097   0019E8                     _MFRC522_Reset:
  6098                           	callstack 23
  6099   0019E8                     
  6100                           ;TAD_RFID.c: 98:     LATCbits.LATC4 = 1;
  6101   0019E8  888B               	bsf	139,4,c	;volatile
  6102   0019EA                     
  6103                           ;TAD_RFID.c: 99:     delay_us (1);
  6104   0019EA  0E01               	movlw	1
  6105   0019EC  EC72  F00C         	call	_delay_us
  6106   0019F0                     
  6107                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 0;
  6108   0019F0  988B               	bcf	139,4,c	;volatile
  6109                           
  6110                           ;TAD_RFID.c: 101:     delay_us (1);
  6111   0019F2  0E01               	movlw	1
  6112   0019F4  EC72  F00C         	call	_delay_us
  6113   0019F8                     
  6114                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 1;
  6115   0019F8  888B               	bsf	139,4,c	;volatile
  6116                           
  6117                           ;TAD_RFID.c: 103:     delay_us (1);
  6118   0019FA  0E01               	movlw	1
  6119   0019FC  EC72  F00C         	call	_delay_us
  6120                           
  6121                           ;TAD_RFID.c: 104:     MFRC522_Wr(0x01, 0x0F);
  6122   001A00  0E0F               	movlw	15
  6123   001A02  6E5A               	movwf	MFRC522_Wr@value^0,c
  6124   001A04  0E01               	movlw	1
  6125   001A06  EC51  F008         	call	_MFRC522_Wr
  6126                           
  6127                           ;TAD_RFID.c: 105:     delay_us (1);
  6128   001A0A  0E01               	movlw	1
  6129   001A0C  EC72  F00C         	call	_delay_us
  6130   001A10  0012               	return		;funcret
  6131   001A12                     __end_of_MFRC522_Reset:
  6132                           	callstack 0
  6133                           
  6134 ;; *************** function _MFRC522_AntennaOn *****************
  6135 ;; Defined at:
  6136 ;;		line 108 in file "TAD_RFID.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;                  1    wreg      void 
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1
  6150 ;;      Params:         0       0       0
  6151 ;;      Locals:         0       0       0
  6152 ;;      Temps:          0       0       0
  6153 ;;      Totals:         0       0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used: 1
  6156 ;; Hardware stack levels required when called: 6
  6157 ;; This function calls:
  6158 ;;		_MFRC522_Set_Bit
  6159 ;; This function is called by:
  6160 ;;		_MFRC522_Init
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text28
  6165   001B14                     __ptext28:
  6166                           	callstack 0
  6167   001B14                     _MFRC522_AntennaOn:
  6168                           	callstack 22
  6169   001B14                     
  6170                           ;TAD_RFID.c: 109:     MFRC522_Set_Bit(0x14, 0x03);
  6171   001B14  0E03               	movlw	3
  6172   001B16  6E5F               	movwf	MFRC522_Set_Bit@mask^0,c
  6173   001B18  0E14               	movlw	20
  6174   001B1A  EC71  F00D         	call	_MFRC522_Set_Bit
  6175   001B1E  0012               	return		;funcret
  6176   001B20                     __end_of_MFRC522_AntennaOn:
  6177                           	callstack 0
  6178                           
  6179 ;; *************** function _MFRC522_Set_Bit *****************
  6180 ;; Defined at:
  6181 ;;		line 93 in file "TAD_RFID.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  addr            1    wreg     unsigned char 
  6184 ;;  mask            1   16[COMRAM] unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  addr            1   17[COMRAM] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      void 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1
  6196 ;;      Params:         1       0       0
  6197 ;;      Locals:         1       0       0
  6198 ;;      Temps:          0       0       0
  6199 ;;      Totals:         2       0       0
  6200 ;;Total ram usage:        2 bytes
  6201 ;; Hardware stack levels used: 1
  6202 ;; Hardware stack levels required when called: 5
  6203 ;; This function calls:
  6204 ;;		_MFRC522_Rd
  6205 ;;		_MFRC522_Wr
  6206 ;; This function is called by:
  6207 ;;		_MFRC522_AntennaOn
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text29
  6212   001AE2                     __ptext29:
  6213                           	callstack 0
  6214   001AE2                     _MFRC522_Set_Bit:
  6215                           	callstack 22
  6216                           
  6217                           ;incstack = 0
  6218                           ;MFRC522_Set_Bit@addr stored from wreg
  6219   001AE2  6E60               	movwf	MFRC522_Set_Bit@addr^0,c
  6220   001AE4                     
  6221                           ;TAD_RFID.c: 94:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  6222   001AE4  5060               	movf	MFRC522_Set_Bit@addr^0,w,c
  6223   001AE6  ECA5  F008         	call	_MFRC522_Rd
  6224   001AEA  105F               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  6225   001AEC  6E5A               	movwf	MFRC522_Wr@value^0,c
  6226   001AEE  5060               	movf	MFRC522_Set_Bit@addr^0,w,c
  6227   001AF0  EC51  F008         	call	_MFRC522_Wr
  6228   001AF4  0012               	return		;funcret
  6229   001AF6                     __end_of_MFRC522_Set_Bit:
  6230                           	callstack 0
  6231                           
  6232 ;; *************** function _MFRC522_AntennaOff *****************
  6233 ;; Defined at:
  6234 ;;		line 112 in file "TAD_RFID.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1
  6248 ;;      Params:         0       0       0
  6249 ;;      Locals:         0       0       0
  6250 ;;      Temps:          0       0       0
  6251 ;;      Totals:         0       0       0
  6252 ;;Total ram usage:        0 bytes
  6253 ;; Hardware stack levels used: 1
  6254 ;; Hardware stack levels required when called: 6
  6255 ;; This function calls:
  6256 ;;		_MFRC522_Clear_Bit
  6257 ;; This function is called by:
  6258 ;;		_MFRC522_Init
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text30
  6263   001B20                     __ptext30:
  6264                           	callstack 0
  6265   001B20                     _MFRC522_AntennaOff:
  6266                           	callstack 22
  6267   001B20                     
  6268                           ;TAD_RFID.c: 113:     MFRC522_Clear_Bit(0x14, 0x03);
  6269   001B20  0E03               	movlw	3
  6270   001B22  6E5F               	movwf	MFRC522_Clear_Bit@mask^0,c
  6271   001B24  0E14               	movlw	20
  6272   001B26  EC38  F00D         	call	_MFRC522_Clear_Bit
  6273   001B2A  0012               	return		;funcret
  6274   001B2C                     __end_of_MFRC522_AntennaOff:
  6275                           	callstack 0
  6276                           
  6277 ;; *************** function _MFRC522_Clear_Bit *****************
  6278 ;; Defined at:
  6279 ;;		line 89 in file "TAD_RFID.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;  addr            1    wreg     unsigned char 
  6282 ;;  mask            1   16[COMRAM] unsigned char 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  addr            1   18[COMRAM] unsigned char 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1
  6294 ;;      Params:         1       0       0
  6295 ;;      Locals:         1       0       0
  6296 ;;      Temps:          1       0       0
  6297 ;;      Totals:         3       0       0
  6298 ;;Total ram usage:        3 bytes
  6299 ;; Hardware stack levels used: 1
  6300 ;; Hardware stack levels required when called: 5
  6301 ;; This function calls:
  6302 ;;		_MFRC522_Rd
  6303 ;;		_MFRC522_Wr
  6304 ;; This function is called by:
  6305 ;;		_MFRC522_AntennaOff
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text31
  6310   001A70                     __ptext31:
  6311                           	callstack 0
  6312   001A70                     _MFRC522_Clear_Bit:
  6313                           	callstack 22
  6314                           
  6315                           ;incstack = 0
  6316                           ;MFRC522_Clear_Bit@addr stored from wreg
  6317   001A70  6E61               	movwf	MFRC522_Clear_Bit@addr^0,c
  6318   001A72                     
  6319                           ;TAD_RFID.c: 90:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  6320   001A72  505F               	movf	MFRC522_Clear_Bit@mask^0,w,c
  6321   001A74  0AFF               	xorlw	255
  6322   001A76  6E60               	movwf	??_MFRC522_Clear_Bit^0,c
  6323   001A78  5061               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6324   001A7A  ECA5  F008         	call	_MFRC522_Rd
  6325   001A7E  1460               	andwf	??_MFRC522_Clear_Bit^0,w,c
  6326   001A80  6E5A               	movwf	MFRC522_Wr@value^0,c
  6327   001A82  5061               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6328   001A84  EC51  F008         	call	_MFRC522_Wr
  6329   001A88  0012               	return		;funcret
  6330   001A8A                     __end_of_MFRC522_Clear_Bit:
  6331                           	callstack 0
  6332                           
  6333 ;; *************** function _MFRC522_Wr *****************
  6334 ;; Defined at:
  6335 ;;		line 61 in file "TAD_RFID.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  Address         1    wreg     unsigned char 
  6338 ;;  value           1   11[COMRAM] unsigned char 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  Address         1   13[COMRAM] unsigned char 
  6341 ;;  i               1   15[COMRAM] unsigned char 
  6342 ;;  ucAddr          1   14[COMRAM] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1
  6352 ;;      Params:         1       0       0
  6353 ;;      Locals:         3       0       0
  6354 ;;      Temps:          1       0       0
  6355 ;;      Totals:         5       0       0
  6356 ;;Total ram usage:        5 bytes
  6357 ;; Hardware stack levels used: 1
  6358 ;; Hardware stack levels required when called: 4
  6359 ;; This function calls:
  6360 ;;		_delay_us
  6361 ;; This function is called by:
  6362 ;;		_MFRC522_Clear_Bit
  6363 ;;		_MFRC522_Set_Bit
  6364 ;;		_MFRC522_Reset
  6365 ;;		_MFRC522_Init
  6366 ;;		_motor_RFID
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text32
  6371   0010A2                     __ptext32:
  6372                           	callstack 0
  6373   0010A2                     _MFRC522_Wr:
  6374                           	callstack 25
  6375                           
  6376                           ;incstack = 0
  6377                           ;MFRC522_Wr@Address stored from wreg
  6378   0010A2  6E5C               	movwf	MFRC522_Wr@Address^0,c
  6379   0010A4                     
  6380                           ;TAD_RFID.c: 62:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  6381   0010A4  505C               	movf	MFRC522_Wr@Address^0,w,c
  6382   0010A6  245C               	addwf	MFRC522_Wr@Address^0,w,c
  6383   0010A8  0B7E               	andlw	126
  6384   0010AA  6E5D               	movwf	MFRC522_Wr@ucAddr^0,c
  6385   0010AC                     
  6386                           ;TAD_RFID.c: 63:     LATCbits.LATC2 = 0;
  6387   0010AC  948B               	bcf	139,2,c	;volatile
  6388   0010AE                     
  6389                           ;TAD_RFID.c: 64:     LATCbits.LATC3 = 0;
  6390   0010AE  968B               	bcf	139,3,c	;volatile
  6391   0010B0                     
  6392                           ;TAD_RFID.c: 65:     for (i = 8; i > 0; i--) {
  6393   0010B0  0E08               	movlw	8
  6394   0010B2  6E5E               	movwf	MFRC522_Wr@i^0,c
  6395   0010B4                     l2735:
  6396                           
  6397                           ;TAD_RFID.c: 66:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6398   0010B4  BE5D               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  6399   0010B6  EF5F  F008         	goto	u1591
  6400   0010BA  EF63  F008         	goto	u1590
  6401   0010BE                     u1591:
  6402   0010BE  6A5B               	clrf	??_MFRC522_Wr^0,c
  6403   0010C0  2A5B               	incf	??_MFRC522_Wr^0,f,c
  6404   0010C2  EF64  F008         	goto	u1608
  6405   0010C6                     u1590:
  6406   0010C6  6A5B               	clrf	??_MFRC522_Wr^0,c
  6407   0010C8                     u1608:
  6408   0010C8  465B               	rlncf	??_MFRC522_Wr^0,f,c
  6409   0010CA  508B               	movf	139,w,c	;volatile
  6410   0010CC  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6411   0010CE  0BFD               	andlw	-3
  6412   0010D0  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6413   0010D2  6E8B               	movwf	139,c	;volatile
  6414   0010D4                     
  6415                           ;TAD_RFID.c: 67:         LATCbits.LATC2 = 1;
  6416   0010D4  848B               	bsf	139,2,c	;volatile
  6417                           
  6418                           ;TAD_RFID.c: 68:         ucAddr <<= 1;
  6419   0010D6  90D8               	bcf	status,0,c
  6420   0010D8  365D               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  6421   0010DA                     
  6422                           ;TAD_RFID.c: 69:         delay_us(5);
  6423   0010DA  0E05               	movlw	5
  6424   0010DC  EC72  F00C         	call	_delay_us
  6425   0010E0                     
  6426                           ;TAD_RFID.c: 70:         LATCbits.LATC2 = 0;
  6427   0010E0  948B               	bcf	139,2,c	;volatile
  6428   0010E2                     
  6429                           ;TAD_RFID.c: 71:         delay_us(5);
  6430   0010E2  0E05               	movlw	5
  6431   0010E4  EC72  F00C         	call	_delay_us
  6432   0010E8                     
  6433                           ;TAD_RFID.c: 72:     }
  6434   0010E8  065E               	decf	MFRC522_Wr@i^0,f,c
  6435   0010EA  505E               	movf	MFRC522_Wr@i^0,w,c
  6436   0010EC  A4D8               	btfss	status,2,c
  6437   0010EE  EF7B  F008         	goto	u1611
  6438   0010F2  EF7D  F008         	goto	u1610
  6439   0010F6                     u1611:
  6440   0010F6  EF5A  F008         	goto	l2735
  6441   0010FA                     u1610:
  6442   0010FA                     
  6443                           ;TAD_RFID.c: 74:     for (i = 8; i > 0; i--) {
  6444   0010FA  0E08               	movlw	8
  6445   0010FC  6E5E               	movwf	MFRC522_Wr@i^0,c
  6446   0010FE                     l2753:
  6447                           
  6448                           ;TAD_RFID.c: 75:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  6449   0010FE  BE5A               	btfsc	MFRC522_Wr@value^0,7,c
  6450   001100  EF84  F008         	goto	u1621
  6451   001104  EF88  F008         	goto	u1620
  6452   001108                     u1621:
  6453   001108  6A5B               	clrf	??_MFRC522_Wr^0,c
  6454   00110A  2A5B               	incf	??_MFRC522_Wr^0,f,c
  6455   00110C  EF89  F008         	goto	u1638
  6456   001110                     u1620:
  6457   001110  6A5B               	clrf	??_MFRC522_Wr^0,c
  6458   001112                     u1638:
  6459   001112  465B               	rlncf	??_MFRC522_Wr^0,f,c
  6460   001114  508B               	movf	139,w,c	;volatile
  6461   001116  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6462   001118  0BFD               	andlw	-3
  6463   00111A  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6464   00111C  6E8B               	movwf	139,c	;volatile
  6465   00111E                     
  6466                           ;TAD_RFID.c: 76:         LATCbits.LATC2 = 1;
  6467   00111E  848B               	bsf	139,2,c	;volatile
  6468                           
  6469                           ;TAD_RFID.c: 77:         value <<= 1;
  6470   001120  90D8               	bcf	status,0,c
  6471   001122  365A               	rlcf	MFRC522_Wr@value^0,f,c
  6472   001124                     
  6473                           ;TAD_RFID.c: 78:         delay_us(5);
  6474   001124  0E05               	movlw	5
  6475   001126  EC72  F00C         	call	_delay_us
  6476   00112A                     
  6477                           ;TAD_RFID.c: 79:         LATCbits.LATC2 = 0;
  6478   00112A  948B               	bcf	139,2,c	;volatile
  6479   00112C                     
  6480                           ;TAD_RFID.c: 80:         delay_us(5);
  6481   00112C  0E05               	movlw	5
  6482   00112E  EC72  F00C         	call	_delay_us
  6483   001132                     
  6484                           ;TAD_RFID.c: 81:     }
  6485   001132  065E               	decf	MFRC522_Wr@i^0,f,c
  6486   001134  505E               	movf	MFRC522_Wr@i^0,w,c
  6487   001136  A4D8               	btfss	status,2,c
  6488   001138  EFA0  F008         	goto	u1641
  6489   00113C  EFA2  F008         	goto	u1640
  6490   001140                     u1641:
  6491   001140  EF7F  F008         	goto	l2753
  6492   001144                     u1640:
  6493   001144                     
  6494                           ;TAD_RFID.c: 83:     LATCbits.LATC3 = 1;
  6495   001144  868B               	bsf	139,3,c	;volatile
  6496                           
  6497                           ;TAD_RFID.c: 84:     LATCbits.LATC2 = 1;
  6498   001146  848B               	bsf	139,2,c	;volatile
  6499   001148  0012               	return		;funcret
  6500   00114A                     __end_of_MFRC522_Wr:
  6501                           	callstack 0
  6502                           
  6503 ;; *************** function _MFRC522_Rd *****************
  6504 ;; Defined at:
  6505 ;;		line 30 in file "TAD_RFID.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  Address         1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  Address         1    7[COMRAM] unsigned char 
  6510 ;;  i               1   10[COMRAM] unsigned char 
  6511 ;;  ucResult        1    9[COMRAM] unsigned char 
  6512 ;;  ucAddr          1    8[COMRAM] unsigned char 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      unsigned char 
  6515 ;; Registers used:
  6516 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMRAM   BANK0   BANK1
  6522 ;;      Params:         0       0       0
  6523 ;;      Locals:         4       0       0
  6524 ;;      Temps:          1       0       0
  6525 ;;      Totals:         5       0       0
  6526 ;;Total ram usage:        5 bytes
  6527 ;; Hardware stack levels used: 1
  6528 ;; Hardware stack levels required when called: 4
  6529 ;; This function calls:
  6530 ;;		_delay_us
  6531 ;; This function is called by:
  6532 ;;		_MFRC522_Clear_Bit
  6533 ;;		_MFRC522_Set_Bit
  6534 ;;		_motor_RFID
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text33
  6539   00114A                     __ptext33:
  6540                           	callstack 0
  6541   00114A                     _MFRC522_Rd:
  6542                           	callstack 25
  6543                           
  6544                           ;incstack = 0
  6545                           ;MFRC522_Rd@Address stored from wreg
  6546   00114A  6E56               	movwf	MFRC522_Rd@Address^0,c
  6547   00114C                     
  6548                           ;TAD_RFID.c: 31:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  6549   00114C  5056               	movf	MFRC522_Rd@Address^0,w,c
  6550   00114E  2456               	addwf	MFRC522_Rd@Address^0,w,c
  6551   001150  0B7E               	andlw	126
  6552   001152  0980               	iorlw	128
  6553   001154  6E57               	movwf	MFRC522_Rd@ucAddr^0,c
  6554   001156                     
  6555                           ;TAD_RFID.c: 32:     unsigned char ucResult = 0;
  6556   001156  6A58               	clrf	MFRC522_Rd@ucResult^0,c
  6557   001158                     
  6558                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 0;
  6559   001158  948B               	bcf	139,2,c	;volatile
  6560   00115A                     
  6561                           ;TAD_RFID.c: 35:     LATCbits.LATC3 = 0;
  6562   00115A  968B               	bcf	139,3,c	;volatile
  6563   00115C                     
  6564                           ;TAD_RFID.c: 37:     for (i = 8; i > 0; i--) {
  6565   00115C  0E08               	movlw	8
  6566   00115E  6E59               	movwf	MFRC522_Rd@i^0,c
  6567   001160                     l1431:
  6568                           
  6569                           ;TAD_RFID.c: 38:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6570   001160  BE57               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  6571   001162  EFB5  F008         	goto	u31
  6572   001166  EFB9  F008         	goto	u30
  6573   00116A                     u31:
  6574   00116A  6A55               	clrf	??_MFRC522_Rd^0,c
  6575   00116C  2A55               	incf	??_MFRC522_Rd^0,f,c
  6576   00116E  EFBA  F008         	goto	u48
  6577   001172                     u30:
  6578   001172  6A55               	clrf	??_MFRC522_Rd^0,c
  6579   001174                     u48:
  6580   001174  4655               	rlncf	??_MFRC522_Rd^0,f,c
  6581   001176  508B               	movf	139,w,c	;volatile
  6582   001178  1855               	xorwf	??_MFRC522_Rd^0,w,c
  6583   00117A  0BFD               	andlw	-3
  6584   00117C  1855               	xorwf	??_MFRC522_Rd^0,w,c
  6585   00117E  6E8B               	movwf	139,c	;volatile
  6586   001180                     
  6587                           ;TAD_RFID.c: 39:         LATCbits.LATC2 = 1;
  6588   001180  848B               	bsf	139,2,c	;volatile
  6589   001182                     
  6590                           ;TAD_RFID.c: 40:         delay_us(5);
  6591   001182  0E05               	movlw	5
  6592   001184  EC72  F00C         	call	_delay_us
  6593   001188                     
  6594                           ;TAD_RFID.c: 41:         ucAddr <<= 1;
  6595   001188  90D8               	bcf	status,0,c
  6596   00118A  3657               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  6597   00118C                     
  6598                           ;TAD_RFID.c: 42:         LATCbits.LATC2 = 0;
  6599   00118C  948B               	bcf	139,2,c	;volatile
  6600                           
  6601                           ;TAD_RFID.c: 43:         delay_us(5);
  6602   00118E  0E05               	movlw	5
  6603   001190  EC72  F00C         	call	_delay_us
  6604   001194                     
  6605                           ;TAD_RFID.c: 44:     }
  6606   001194  0659               	decf	MFRC522_Rd@i^0,f,c
  6607   001196  5059               	movf	MFRC522_Rd@i^0,w,c
  6608   001198  A4D8               	btfss	status,2,c
  6609   00119A  EFD1  F008         	goto	u51
  6610   00119E  EFD3  F008         	goto	u50
  6611   0011A2                     u51:
  6612   0011A2  EFB0  F008         	goto	l1431
  6613   0011A6                     u50:
  6614   0011A6                     
  6615                           ;TAD_RFID.c: 46:     for (i = 8; i > 0; i--) {
  6616   0011A6  0E08               	movlw	8
  6617   0011A8  6E59               	movwf	MFRC522_Rd@i^0,c
  6618   0011AA                     l220:
  6619                           
  6620                           ;TAD_RFID.c: 47:         LATCbits.LATC2 = 1;
  6621   0011AA  848B               	bsf	139,2,c	;volatile
  6622   0011AC                     
  6623                           ;TAD_RFID.c: 48:         delay_us(5);
  6624   0011AC  0E05               	movlw	5
  6625   0011AE  EC72  F00C         	call	_delay_us
  6626   0011B2                     
  6627                           ;TAD_RFID.c: 49:         ucResult <<= 1;
  6628   0011B2  90D8               	bcf	status,0,c
  6629   0011B4  3658               	rlcf	MFRC522_Rd@ucResult^0,f,c
  6630   0011B6                     
  6631                           ;TAD_RFID.c: 50:         ucResult|= PORTCbits.RC0;
  6632   0011B6  B082               	btfsc	130,0,c	;volatile
  6633   0011B8  EFE0  F008         	goto	u61
  6634   0011BC  EFE3  F008         	goto	u60
  6635   0011C0                     u61:
  6636   0011C0  0E01               	movlw	1
  6637   0011C2  EFE4  F008         	goto	u66
  6638   0011C6                     u60:
  6639   0011C6  0E00               	movlw	0
  6640   0011C8                     u66:
  6641   0011C8  1258               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6642   0011CA                     
  6643                           ;TAD_RFID.c: 51:         LATCbits.LATC2 = 0;
  6644   0011CA  948B               	bcf	139,2,c	;volatile
  6645                           
  6646                           ;TAD_RFID.c: 52:         delay_us(5);
  6647   0011CC  0E05               	movlw	5
  6648   0011CE  EC72  F00C         	call	_delay_us
  6649   0011D2                     
  6650                           ;TAD_RFID.c: 53:     }
  6651   0011D2  0659               	decf	MFRC522_Rd@i^0,f,c
  6652   0011D4  5059               	movf	MFRC522_Rd@i^0,w,c
  6653   0011D6  A4D8               	btfss	status,2,c
  6654   0011D8  EFF0  F008         	goto	u71
  6655   0011DC  EFF2  F008         	goto	u70
  6656   0011E0                     u71:
  6657   0011E0  EFD5  F008         	goto	l220
  6658   0011E4                     u70:
  6659   0011E4                     
  6660                           ;TAD_RFID.c: 55:     LATCbits.LATC3 = 1;
  6661   0011E4  868B               	bsf	139,3,c	;volatile
  6662                           
  6663                           ;TAD_RFID.c: 56:     LATCbits.LATC2 = 1;
  6664   0011E6  848B               	bsf	139,2,c	;volatile
  6665   0011E8                     
  6666                           ;TAD_RFID.c: 57:     return ucResult;
  6667   0011E8  5058               	movf	MFRC522_Rd@ucResult^0,w,c
  6668   0011EA  0012               	return		;funcret
  6669   0011EC                     __end_of_MFRC522_Rd:
  6670                           	callstack 0
  6671                           
  6672 ;; *************** function _delay_us *****************
  6673 ;; Defined at:
  6674 ;;		line 25 in file "TAD_RFID.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  howMany         1    wreg     unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  howMany         1    4[COMRAM] unsigned char 
  6679 ;;  x               1    5[COMRAM] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, status,2, status,0, prodl, prodh
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1
  6689 ;;      Params:         0       0       0
  6690 ;;      Locals:         2       0       0
  6691 ;;      Temps:          3       0       0
  6692 ;;      Totals:         5       0       0
  6693 ;;Total ram usage:        5 bytes
  6694 ;; Hardware stack levels used: 1
  6695 ;; Hardware stack levels required when called: 3
  6696 ;; This function calls:
  6697 ;;		Nothing
  6698 ;; This function is called by:
  6699 ;;		_MFRC522_Rd
  6700 ;;		_MFRC522_Wr
  6701 ;;		_MFRC522_Reset
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text34
  6706   0018E4                     __ptext34:
  6707                           	callstack 0
  6708   0018E4                     _delay_us:
  6709                           	callstack 25
  6710                           
  6711                           ;incstack = 0
  6712                           ;delay_us@howMany stored from wreg
  6713   0018E4  6E53               	movwf	delay_us@howMany^0,c
  6714   0018E6                     
  6715                           ;TAD_RFID.c: 26:     char x;;TAD_RFID.c: 27:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  6716   0018E6  6A54               	clrf	delay_us@x^0,c
  6717   0018E8  EF78  F00C         	goto	l1399
  6718   0018EC                     l213:
  6719   0018EC  0000               	nop	
  6720   0018EE  2A54               	incf	delay_us@x^0,f,c
  6721   0018F0                     l1399:
  6722   0018F0  5053               	movf	delay_us@howMany^0,w,c
  6723   0018F2  0D10               	mullw	16
  6724   0018F4  5054               	movf	delay_us@x^0,w,c
  6725   0018F6  6E50               	movwf	??_delay_us^0,c
  6726   0018F8  6A51               	clrf	(??_delay_us+1)^0,c
  6727   0018FA  50F3               	movf	243,w,c
  6728   0018FC  5C50               	subwf	??_delay_us^0,w,c
  6729   0018FE  5051               	movf	(??_delay_us+1)^0,w,c
  6730   001900  0A80               	xorlw	128
  6731   001902  6E52               	movwf	(??_delay_us+2)^0,c
  6732   001904  50F4               	movf	244,w,c
  6733   001906  0A80               	xorlw	128
  6734   001908  5852               	subwfb	(??_delay_us+2)^0,w,c
  6735   00190A  A0D8               	btfss	status,0,c
  6736   00190C  EF8A  F00C         	goto	u11
  6737   001910  EF8C  F00C         	goto	u10
  6738   001914                     u11:
  6739   001914  EF76  F00C         	goto	l213
  6740   001918                     u10:
  6741   001918  0012               	return		;funcret
  6742   00191A                     __end_of_delay_us:
  6743                           	callstack 0
  6744                           
  6745 ;; *************** function _InitPortDirections *****************
  6746 ;; Defined at:
  6747 ;;		line 17 in file "TAD_RFID.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      void 
  6754 ;; Registers used:
  6755 ;;		None
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1
  6761 ;;      Params:         0       0       0
  6762 ;;      Locals:         0       0       0
  6763 ;;      Temps:          0       0       0
  6764 ;;      Totals:         0       0       0
  6765 ;;Total ram usage:        0 bytes
  6766 ;; Hardware stack levels used: 1
  6767 ;; Hardware stack levels required when called: 3
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_initRFID
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text35
  6776   001B2C                     __ptext35:
  6777                           	callstack 0
  6778   001B2C                     _InitPortDirections:
  6779                           	callstack 26
  6780   001B2C                     
  6781                           ;TAD_RFID.c: 18:     TRISCbits.TRISC0 = 1;
  6782   001B2C  8094               	bsf	148,0,c	;volatile
  6783                           
  6784                           ;TAD_RFID.c: 19:     TRISCbits.TRISC1 = 0;
  6785   001B2E  9294               	bcf	148,1,c	;volatile
  6786                           
  6787                           ;TAD_RFID.c: 20:     TRISCbits.TRISC2 = 0;
  6788   001B30  9494               	bcf	148,2,c	;volatile
  6789                           
  6790                           ;TAD_RFID.c: 21:     TRISCbits.TRISC3 = 0;
  6791   001B32  9694               	bcf	148,3,c	;volatile
  6792                           
  6793                           ;TAD_RFID.c: 22:     TRISCbits.TRISC4 = 0;
  6794   001B34  9894               	bcf	148,4,c	;volatile
  6795   001B36  0012               	return		;funcret
  6796   001B38                     __end_of_InitPortDirections:
  6797                           	callstack 0
  6798                           
  6799 ;; *************** function _initPorts *****************
  6800 ;; Defined at:
  6801 ;;		line 63 in file "main.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  1    wreg      void 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1
  6815 ;;      Params:         0       0       0
  6816 ;;      Locals:         0       0       0
  6817 ;;      Temps:          0       0       0
  6818 ;;      Totals:         0       0       0
  6819 ;;Total ram usage:        0 bytes
  6820 ;; Hardware stack levels used: 1
  6821 ;; Hardware stack levels required when called: 3
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_main
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text36
  6830   001B52                     __ptext36:
  6831                           	callstack 0
  6832   001B52                     _initPorts:
  6833                           	callstack 27
  6834   001B52  0E0F               	movlw	15
  6835   001B54  6EC1               	movwf	193,c	;volatile
  6836   001B56  9496               	bcf	150,2,c	;volatile
  6837   001B58  0012               	return		;funcret
  6838   001B5A                     __end_of_initPorts:
  6839                           	callstack 0
  6840                           
  6841 ;; *************** function _initLeds *****************
  6842 ;; Defined at:
  6843 ;;		line 9 in file "TAD_LEDS.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;		None
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1
  6857 ;;      Params:         0       0       0
  6858 ;;      Locals:         0       0       0
  6859 ;;      Temps:          0       0       0
  6860 ;;      Totals:         0       0       0
  6861 ;;Total ram usage:        0 bytes
  6862 ;; Hardware stack levels used: 1
  6863 ;; Hardware stack levels required when called: 4
  6864 ;; This function calls:
  6865 ;;		_TI_NewTimer
  6866 ;; This function is called by:
  6867 ;;		_main
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text37
  6872   001B06                     __ptext37:
  6873                           	callstack 0
  6874   001B06                     _initLeds:
  6875                           	callstack 26
  6876   001B06                     
  6877                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  6878   001B06  6A92               	clrf	146,c	;volatile
  6879                           
  6880                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  6881   001B08  6A96               	clrf	150,c	;volatile
  6882   001B0A                     
  6883                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  6884   001B0A  0E4C               	movlw	low _timer@TAD_LEDS$F1057
  6885   001B0C  6E50               	movwf	TI_NewTimer@TimerHandle^0,c
  6886   001B0E  ECFC  F00A         	call	_TI_NewTimer	;wreg free
  6887   001B12  0012               	return		;funcret
  6888   001B14                     __end_of_initLeds:
  6889                           	callstack 0
  6890                           
  6891 ;; *************** function _Terminal_Init *****************
  6892 ;; Defined at:
  6893 ;;		line 8 in file "TAD_TERMINAL.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;		None
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  1    wreg      void 
  6900 ;; Registers used:
  6901 ;;		wreg, status,2
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1
  6907 ;;      Params:         0       0       0
  6908 ;;      Locals:         0       0       0
  6909 ;;      Temps:          0       0       0
  6910 ;;      Totals:         0       0       0
  6911 ;;Total ram usage:        0 bytes
  6912 ;; Hardware stack levels used: 1
  6913 ;; Hardware stack levels required when called: 3
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text38
  6922   001AF6                     __ptext38:
  6923                           	callstack 0
  6924   001AF6                     _Terminal_Init:
  6925                           	callstack 27
  6926   001AF6                     
  6927                           ;TAD_TERMINAL.c: 9:  TXSTA = 0x24;
  6928   001AF6  0E24               	movlw	36
  6929   001AF8  6EAC               	movwf	172,c	;volatile
  6930                           
  6931                           ;TAD_TERMINAL.c: 10:  RCSTA = 0x90;
  6932   001AFA  0E90               	movlw	144
  6933   001AFC  6EAB               	movwf	171,c	;volatile
  6934   001AFE                     
  6935                           ;TAD_TERMINAL.c: 11:  SPBRG = 255;
  6936   001AFE  68AF               	setf	175,c	;volatile
  6937   001B00                     
  6938                           ;TAD_TERMINAL.c: 12:  BAUDCON = 0x00;
  6939   001B00  6AB8               	clrf	184,c	;volatile
  6940   001B02                     
  6941                           ;TAD_TERMINAL.c: 13:  hashtag_pressed = 0;
  6942   001B02  6A2D               	clrf	_hashtag_pressed^0,c
  6943   001B04  0012               	return		;funcret
  6944   001B06                     __end_of_Terminal_Init:
  6945                           	callstack 0
  6946                           
  6947 ;; *************** function _TI_Init *****************
  6948 ;; Defined at:
  6949 ;;		line 32 in file "TAD_TIMER.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  counter         1    1[COMRAM] unsigned char 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1
  6963 ;;      Params:         0       0       0
  6964 ;;      Locals:         1       0       0
  6965 ;;      Temps:          0       0       0
  6966 ;;      Totals:         1       0       0
  6967 ;;Total ram usage:        1 bytes
  6968 ;; Hardware stack levels used: 1
  6969 ;; Hardware stack levels required when called: 3
  6970 ;; This function calls:
  6971 ;;		Nothing
  6972 ;; This function is called by:
  6973 ;;		_main
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text39
  6978   001950                     __ptext39:
  6979                           	callstack 0
  6980   001950                     _TI_Init:
  6981                           	callstack 27
  6982   001950                     
  6983                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  6984   001950  6A50               	clrf	TI_Init@counter^0,c
  6985   001952                     l2025:
  6986                           
  6987                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  6988   001952  5050               	movf	TI_Init@counter^0,w,c
  6989   001954  0D05               	mullw	5
  6990   001956  50F3               	movf	243,w,c
  6991   001958  0F05               	addlw	low (_Timers+4)
  6992   00195A  6ED9               	movwf	fsr2l,c
  6993   00195C  6ADA               	clrf	fsr2h,c
  6994   00195E  6ADF               	clrf	indf2,c
  6995   001960                     
  6996                           ;TAD_TIMER.c: 35:  }
  6997   001960  2A50               	incf	TI_Init@counter^0,f,c
  6998   001962  0E03               	movlw	3
  6999   001964  6450               	cpfsgt	TI_Init@counter^0,c
  7000   001966  EFB7  F00C         	goto	u1001
  7001   00196A  EFB9  F00C         	goto	u1000
  7002   00196E                     u1001:
  7003   00196E  EFA9  F00C         	goto	l2025
  7004   001972                     u1000:
  7005   001972                     
  7006                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7007   001972  0E82               	movlw	130
  7008   001974  6ED5               	movwf	213,c	;volatile
  7009                           
  7010                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7011   001976  0EF6               	movlw	246
  7012   001978  6ED7               	movwf	215,c	;volatile
  7013   00197A  0E3C               	movlw	60
  7014   00197C  6ED6               	movwf	214,c	;volatile
  7015   00197E                     
  7016                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7017   00197E  94F2               	bcf	242,2,c	;volatile
  7018   001980                     
  7019                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7020   001980  8AF2               	bsf	242,5,c	;volatile
  7021   001982  0012               	return		;funcret
  7022   001984                     __end_of_TI_Init:
  7023                           	callstack 0
  7024                           
  7025 ;; *************** function _LcPutString *****************
  7026 ;; Defined at:
  7027 ;;		line 190 in file "TAD_DISPLAY.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;  s               2   24[COMRAM] PTR unsigned char 
  7030 ;;		 -> STR_1(5), 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1
  7042 ;;      Params:         2       0       0
  7043 ;;      Locals:         0       0       0
  7044 ;;      Temps:          0       0       0
  7045 ;;      Totals:         2       0       0
  7046 ;;Total ram usage:        2 bytes
  7047 ;; Hardware stack levels used: 1
  7048 ;; Hardware stack levels required when called: 7
  7049 ;; This function calls:
  7050 ;;		_LcPutChar
  7051 ;; This function is called by:
  7052 ;;		_main
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           	psect	text40
  7057   00191A                     __ptext40:
  7058                           	callstack 0
  7059   00191A                     _LcPutString:
  7060                           	callstack 23
  7061   00191A                     
  7062                           ;TAD_DISPLAY.c: 194:  while(*s) LcPutChar(*s++);
  7063   00191A  EF99  F00C         	goto	l3267
  7064   00191E                     l3263:
  7065   00191E  C067  FFF6         	movff	LcPutString@s,tblptrl
  7066   001922  C068  FFF7         	movff	LcPutString@s+1,tblptrh
  7067   001926                     	if	0	;tblptru may be non-zero
  7068   001926                     	endif
  7069   001926                     	if	0	;tblptru may be non-zero
  7070   001926                     	endif
  7071   001926  0008               	tblrd		*
  7072   001928  50F5               	movf	tablat,w,c
  7073   00192A  EC30  F007         	call	_LcPutChar
  7074   00192E  4A67               	infsnz	LcPutString@s^0,f,c
  7075   001930  2A68               	incf	(LcPutString@s+1)^0,f,c
  7076   001932                     l3267:
  7077   001932  C067  FFF6         	movff	LcPutString@s,tblptrl
  7078   001936  C068  FFF7         	movff	LcPutString@s+1,tblptrh
  7079   00193A                     	if	0	;tblptru may be non-zero
  7080   00193A                     	endif
  7081   00193A                     	if	0	;tblptru may be non-zero
  7082   00193A                     	endif
  7083   00193A  0008               	tblrd		*
  7084   00193C  50F5               	movf	tablat,w,c
  7085   00193E  0900               	iorlw	0
  7086   001940  A4D8               	btfss	status,2,c
  7087   001942  EFA5  F00C         	goto	u2391
  7088   001946  EFA7  F00C         	goto	u2390
  7089   00194A                     u2391:
  7090   00194A  EF8F  F00C         	goto	l3263
  7091   00194E                     u2390:
  7092   00194E  0012               	return		;funcret
  7093   001950                     __end_of_LcPutString:
  7094                           	callstack 0
  7095                           
  7096 ;; *************** function _LcPutChar *****************
  7097 ;; Defined at:
  7098 ;;		line 156 in file "TAD_DISPLAY.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  c               1    wreg     unsigned char 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  c               1   23[COMRAM] unsigned char 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1
  7112 ;;      Params:         0       0       0
  7113 ;;      Locals:         1       0       0
  7114 ;;      Temps:          0       0       0
  7115 ;;      Totals:         1       0       0
  7116 ;;Total ram usage:        1 bytes
  7117 ;; Hardware stack levels used: 1
  7118 ;; Hardware stack levels required when called: 6
  7119 ;; This function calls:
  7120 ;;		_CantaData
  7121 ;;		_LcGotoXY
  7122 ;;		_WaitForBusy
  7123 ;; This function is called by:
  7124 ;;		_LcPutString
  7125 ;;		_motor_datos
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text41
  7130   000E60                     __ptext41:
  7131                           	callstack 0
  7132   000E60                     _LcPutChar:
  7133                           	callstack 23
  7134                           
  7135                           ;incstack = 0
  7136                           ;LcPutChar@c stored from wreg
  7137   000E60  6E66               	movwf	LcPutChar@c^0,c
  7138   000E62                     
  7139                           ;TAD_DISPLAY.c: 166:  WaitForBusy(); CantaData(c);
  7140   000E62  EC46  F00A         	call	_WaitForBusy	;wreg free
  7141   000E66  5066               	movf	LcPutChar@c^0,w,c
  7142   000E68  ECC2  F00C         	call	_CantaData
  7143   000E6C                     
  7144                           ;TAD_DISPLAY.c: 168:  ++ColumnAct;
  7145   000E6C  2A2E               	incf	_ColumnAct^0,f,c
  7146   000E6E                     
  7147                           ;TAD_DISPLAY.c: 169:  if (Rows == 3) {
  7148   000E6E  0E03               	movlw	3
  7149   000E70  1831               	xorwf	_Rows^0,w,c
  7150   000E72  A4D8               	btfss	status,2,c
  7151   000E74  EF3E  F007         	goto	u2281
  7152   000E78  EF40  F007         	goto	u2280
  7153   000E7C                     u2281:
  7154   000E7C  EF5A  F007         	goto	l3131
  7155   000E80                     u2280:
  7156   000E80                     
  7157                           ;TAD_DISPLAY.c: 170:   if (ColumnAct >= 20) {
  7158   000E80  0E13               	movlw	19
  7159   000E82  642E               	cpfsgt	_ColumnAct^0,c
  7160   000E84  EF46  F007         	goto	u2291
  7161   000E88  EF48  F007         	goto	u2290
  7162   000E8C                     u2291:
  7163   000E8C  EF93  F007         	goto	l438
  7164   000E90                     u2290:
  7165   000E90                     
  7166                           ;TAD_DISPLAY.c: 171:    ColumnAct = 0;
  7167   000E90  6A2E               	clrf	_ColumnAct^0,c
  7168   000E92                     
  7169                           ;TAD_DISPLAY.c: 172:    if (++RowAct >= 4) RowAct = 0;
  7170   000E92  2A2F               	incf	_RowAct^0,f,c
  7171   000E94  0E03               	movlw	3
  7172   000E96  642F               	cpfsgt	_RowAct^0,c
  7173   000E98  EF50  F007         	goto	u2301
  7174   000E9C  EF52  F007         	goto	u2300
  7175   000EA0                     u2301:
  7176   000EA0  EF53  F007         	goto	l3129
  7177   000EA4                     u2300:
  7178   000EA4  6A2F               	clrf	_RowAct^0,c
  7179   000EA6                     l3129:
  7180                           
  7181                           ;TAD_DISPLAY.c: 173:    LcGotoXY(ColumnAct, RowAct);
  7182   000EA6  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  7183   000EAA  502E               	movf	_ColumnAct^0,w,c
  7184   000EAC  ECBC  F006         	call	_LcGotoXY
  7185   000EB0  EF93  F007         	goto	l438
  7186   000EB4                     l3131:
  7187                           
  7188                           ;TAD_DISPLAY.c: 176:  if (Rows == 2) {
  7189   000EB4  0E02               	movlw	2
  7190   000EB6  1831               	xorwf	_Rows^0,w,c
  7191   000EB8  A4D8               	btfss	status,2,c
  7192   000EBA  EF61  F007         	goto	u2311
  7193   000EBE  EF63  F007         	goto	u2310
  7194   000EC2                     u2311:
  7195   000EC2  EF7D  F007         	goto	l3143
  7196   000EC6                     u2310:
  7197   000EC6                     
  7198                           ;TAD_DISPLAY.c: 177:   if (ColumnAct >= 40) {
  7199   000EC6  0E27               	movlw	39
  7200   000EC8  642E               	cpfsgt	_ColumnAct^0,c
  7201   000ECA  EF69  F007         	goto	u2321
  7202   000ECE  EF6B  F007         	goto	u2320
  7203   000ED2                     u2321:
  7204   000ED2  EF93  F007         	goto	l438
  7205   000ED6                     u2320:
  7206   000ED6                     
  7207                           ;TAD_DISPLAY.c: 178:    ColumnAct = 0;
  7208   000ED6  6A2E               	clrf	_ColumnAct^0,c
  7209   000ED8                     
  7210                           ;TAD_DISPLAY.c: 179:    if (++RowAct >= 2) RowAct = 0;
  7211   000ED8  2A2F               	incf	_RowAct^0,f,c
  7212   000EDA  0E01               	movlw	1
  7213   000EDC  642F               	cpfsgt	_RowAct^0,c
  7214   000EDE  EF73  F007         	goto	u2331
  7215   000EE2  EF75  F007         	goto	u2330
  7216   000EE6                     u2331:
  7217   000EE6  EF76  F007         	goto	l3141
  7218   000EEA                     u2330:
  7219   000EEA  6A2F               	clrf	_RowAct^0,c
  7220   000EEC                     l3141:
  7221                           
  7222                           ;TAD_DISPLAY.c: 180:    LcGotoXY(ColumnAct, RowAct);
  7223   000EEC  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  7224   000EF0  502E               	movf	_ColumnAct^0,w,c
  7225   000EF2  ECBC  F006         	call	_LcGotoXY
  7226   000EF6  EF93  F007         	goto	l438
  7227   000EFA                     l3143:
  7228                           
  7229                           ;TAD_DISPLAY.c: 183:  if (RowAct == 1) {
  7230   000EFA  042F               	decf	_RowAct^0,w,c
  7231   000EFC  A4D8               	btfss	status,2,c
  7232   000EFE  EF83  F007         	goto	u2341
  7233   000F02  EF85  F007         	goto	u2340
  7234   000F06                     u2341:
  7235   000F06  EF93  F007         	goto	l438
  7236   000F0A                     u2340:
  7237   000F0A                     
  7238                           ;TAD_DISPLAY.c: 184:   if (ColumnAct >= 40) ColumnAct = 0;
  7239   000F0A  0E27               	movlw	39
  7240   000F0C  642E               	cpfsgt	_ColumnAct^0,c
  7241   000F0E  EF8B  F007         	goto	u2351
  7242   000F12  EF8D  F007         	goto	u2350
  7243   000F16                     u2351:
  7244   000F16  EF8E  F007         	goto	l3149
  7245   000F1A                     u2350:
  7246   000F1A  6A2E               	clrf	_ColumnAct^0,c
  7247   000F1C                     l3149:
  7248                           
  7249                           ;TAD_DISPLAY.c: 185:   LcGotoXY(ColumnAct, RowAct);
  7250   000F1C  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  7251   000F20  502E               	movf	_ColumnAct^0,w,c
  7252   000F22  ECBC  F006         	call	_LcGotoXY
  7253   000F26                     l438:
  7254   000F26  0012               	return		;funcret
  7255   000F28                     __end_of_LcPutChar:
  7256                           	callstack 0
  7257                           
  7258 ;; *************** function _LcGotoXY *****************
  7259 ;; Defined at:
  7260 ;;		line 129 in file "TAD_DISPLAY.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  Column          1    wreg     unsigned char 
  7263 ;;  Row             1   15[COMRAM] unsigned char 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;  Column          1   22[COMRAM] unsigned char 
  7266 ;;  Fisics          2   20[COMRAM] int 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      void 
  7269 ;; Registers used:
  7270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1
  7276 ;;      Params:         1       0       0
  7277 ;;      Locals:         5       0       0
  7278 ;;      Temps:          2       0       0
  7279 ;;      Totals:         8       0       0
  7280 ;;Total ram usage:        8 bytes
  7281 ;; Hardware stack levels used: 1
  7282 ;; Hardware stack levels required when called: 5
  7283 ;; This function calls:
  7284 ;;		_CantaIR
  7285 ;;		_WaitForBusy
  7286 ;; This function is called by:
  7287 ;;		_LcPutChar
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text42
  7292   000D78                     __ptext42:
  7293                           	callstack 0
  7294   000D78                     _LcGotoXY:
  7295                           	callstack 23
  7296                           
  7297                           ;incstack = 0
  7298                           ;LcGotoXY@Column stored from wreg
  7299   000D78  6E65               	movwf	LcGotoXY@Column^0,c
  7300   000D7A                     
  7301                           ;TAD_DISPLAY.c: 133:  int Fisics;;TAD_DISPLAY.c: 135:  switch (Rows) {
  7302   000D7A  EF16  F007         	goto	l2869
  7303   000D7E                     l2847:
  7304                           
  7305                           ;TAD_DISPLAY.c: 137:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7306   000D7E  505E               	movf	LcGotoXY@Row^0,w,c
  7307   000D80  B4D8               	btfsc	status,2,c
  7308   000D82  EFC5  F006         	goto	u1851
  7309   000D86  EFC7  F006         	goto	u1850
  7310   000D8A                     u1851:
  7311   000D8A  EFCD  F006         	goto	l2851
  7312   000D8E                     u1850:
  7313   000D8E  0E00               	movlw	0
  7314   000D90  6E62               	movwf	(_LcGotoXY$805+1)^0,c
  7315   000D92  0E40               	movlw	64
  7316   000D94  6E61               	movwf	_LcGotoXY$805^0,c
  7317   000D96  EFD1  F006         	goto	l2853
  7318   000D9A                     l2851:
  7319   000D9A  0E00               	movlw	0
  7320   000D9C  6E62               	movwf	(_LcGotoXY$805+1)^0,c
  7321   000D9E  0E00               	movlw	0
  7322   000DA0  6E61               	movwf	_LcGotoXY$805^0,c
  7323   000DA2                     l2853:
  7324   000DA2  5065               	movf	LcGotoXY@Column^0,w,c
  7325   000DA4  2461               	addwf	_LcGotoXY$805^0,w,c
  7326   000DA6  6E63               	movwf	LcGotoXY@Fisics^0,c
  7327   000DA8  0E00               	movlw	0
  7328   000DAA  2062               	addwfc	(_LcGotoXY$805+1)^0,w,c
  7329   000DAC  6E64               	movwf	(LcGotoXY@Fisics+1)^0,c
  7330   000DAE  EF25  F007         	goto	l2871
  7331   000DB2                     l417:
  7332                           
  7333                           ;TAD_DISPLAY.c: 139:    Fisics = Column;
  7334   000DB2  C065  F063         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7335   000DB6  6A64               	clrf	(LcGotoXY@Fisics+1)^0,c
  7336   000DB8                     
  7337                           ;TAD_DISPLAY.c: 140:    if (Row == 1) Fisics += 0x40; else
  7338   000DB8  045E               	decf	LcGotoXY@Row^0,w,c
  7339   000DBA  A4D8               	btfss	status,2,c
  7340   000DBC  EFE2  F006         	goto	u1861
  7341   000DC0  EFE4  F006         	goto	u1860
  7342   000DC4                     u1861:
  7343   000DC4  EFEA  F006         	goto	l2859
  7344   000DC8                     u1860:
  7345   000DC8  0E40               	movlw	64
  7346   000DCA  2663               	addwf	LcGotoXY@Fisics^0,f,c
  7347   000DCC  0E00               	movlw	0
  7348   000DCE  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7349   000DD0  EF25  F007         	goto	l2871
  7350   000DD4                     l2859:
  7351                           
  7352                           ;TAD_DISPLAY.c: 141:    if (Row == 2) Fisics += Columns; else
  7353   000DD4  0E02               	movlw	2
  7354   000DD6  185E               	xorwf	LcGotoXY@Row^0,w,c
  7355   000DD8  A4D8               	btfss	status,2,c
  7356   000DDA  EFF1  F006         	goto	u1871
  7357   000DDE  EFF3  F006         	goto	u1870
  7358   000DE2                     u1871:
  7359   000DE2  EFF9  F006         	goto	l2863
  7360   000DE6                     u1870:
  7361   000DE6  5030               	movf	_Columns^0,w,c
  7362   000DE8  2663               	addwf	LcGotoXY@Fisics^0,f,c
  7363   000DEA  0E00               	movlw	0
  7364   000DEC  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7365   000DEE  EF25  F007         	goto	l2871
  7366   000DF2                     l2863:
  7367                           
  7368                           ;TAD_DISPLAY.c: 142:    if (Row == 3) Fisics += 0x40+Columns;
  7369   000DF2  0E03               	movlw	3
  7370   000DF4  185E               	xorwf	LcGotoXY@Row^0,w,c
  7371   000DF6  A4D8               	btfss	status,2,c
  7372   000DF8  EF00  F007         	goto	u1881
  7373   000DFC  EF02  F007         	goto	u1880
  7374   000E00                     u1881:
  7375   000E00  EF0F  F007         	goto	l419
  7376   000E04                     u1880:
  7377   000E04  5030               	movf	_Columns^0,w,c
  7378   000E06  6E5F               	movwf	??_LcGotoXY^0,c
  7379   000E08  6A60               	clrf	(??_LcGotoXY+1)^0,c
  7380   000E0A  0E40               	movlw	64
  7381   000E0C  265F               	addwf	??_LcGotoXY^0,f,c
  7382   000E0E  0E00               	movlw	0
  7383   000E10  2260               	addwfc	(??_LcGotoXY+1)^0,f,c
  7384   000E12  505F               	movf	??_LcGotoXY^0,w,c
  7385   000E14  2663               	addwf	LcGotoXY@Fisics^0,f,c
  7386   000E16  5060               	movf	(??_LcGotoXY+1)^0,w,c
  7387   000E18  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7388   000E1A  EF25  F007         	goto	l2871
  7389   000E1E                     l419:
  7390                           
  7391                           ;TAD_DISPLAY.c: 143:    break;
  7392   000E1E  EF25  F007         	goto	l2871
  7393   000E22                     l424:
  7394                           
  7395                           ;TAD_DISPLAY.c: 146:    Fisics = Column; break;
  7396   000E22  C065  F063         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7397   000E26  6A64               	clrf	(LcGotoXY@Fisics+1)^0,c
  7398   000E28  EF25  F007         	goto	l2871
  7399   000E2C                     l2869:
  7400   000E2C  5031               	movf	_Rows^0,w,c
  7401                           
  7402                           ; Switch size 1, requested type "simple"
  7403                           ; Number of cases is 3, Range of values is 1 to 4
  7404                           ; switch strategies available:
  7405                           ; Name         Instructions Cycles
  7406                           ; simple_byte           10     6 (average)
  7407                           ;	Chosen strategy is simple_byte
  7408   000E2E  0A01               	xorlw	1	; case 1
  7409   000E30  B4D8               	btfsc	status,2,c
  7410   000E32  EF11  F007         	goto	l424
  7411   000E36  0A03               	xorlw	3	; case 2
  7412   000E38  B4D8               	btfsc	status,2,c
  7413   000E3A  EFBF  F006         	goto	l2847
  7414   000E3E  0A06               	xorlw	6	; case 4
  7415   000E40  B4D8               	btfsc	status,2,c
  7416   000E42  EFD9  F006         	goto	l417
  7417   000E46  EF11  F007         	goto	l424
  7418   000E4A                     l2871:
  7419                           
  7420                           ;TAD_DISPLAY.c: 149:  WaitForBusy();
  7421   000E4A  EC46  F00A         	call	_WaitForBusy	;wreg free
  7422   000E4E                     
  7423                           ;TAD_DISPLAY.c: 150:  CantaIR(0x80 | Fisics);
  7424   000E4E  5063               	movf	LcGotoXY@Fisics^0,w,c
  7425   000E50  0980               	iorlw	128
  7426   000E52  ECDB  F00C         	call	_CantaIR
  7427   000E56                     
  7428                           ;TAD_DISPLAY.c: 152:  RowAct = Row;
  7429   000E56  C05E  F02F         	movff	LcGotoXY@Row,_RowAct
  7430   000E5A                     
  7431                           ;TAD_DISPLAY.c: 153:  ColumnAct = Column;
  7432   000E5A  C065  F02E         	movff	LcGotoXY@Column,_ColumnAct
  7433   000E5E  0012               	return		;funcret
  7434   000E60                     __end_of_LcGotoXY:
  7435                           	callstack 0
  7436                           
  7437 ;; *************** function _CantaData *****************
  7438 ;; Defined at:
  7439 ;;		line 240 in file "TAD_DISPLAY.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  Data            1    wreg     unsigned char 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  Data            1    3[COMRAM] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      void 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1
  7453 ;;      Params:         0       0       0
  7454 ;;      Locals:         1       0       0
  7455 ;;      Temps:          0       0       0
  7456 ;;      Totals:         1       0       0
  7457 ;;Total ram usage:        1 bytes
  7458 ;; Hardware stack levels used: 1
  7459 ;; Hardware stack levels required when called: 4
  7460 ;; This function calls:
  7461 ;;		_CantaPartAlta
  7462 ;;		_CantaPartBaixa
  7463 ;; This function is called by:
  7464 ;;		_LcPutChar
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text43
  7469   001984                     __ptext43:
  7470                           	callstack 0
  7471   001984                     _CantaData:
  7472                           	callstack 24
  7473                           
  7474                           ;incstack = 0
  7475                           ;CantaData@Data stored from wreg
  7476   001984  6E52               	movwf	CantaData@Data^0,c
  7477   001986                     
  7478                           ;TAD_DISPLAY.c: 241:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  7479   001986  9096               	bcf	150,0,c	;volatile
  7480   001988  9296               	bcf	150,1,c	;volatile
  7481   00198A  9A93               	bcf	147,5,c	;volatile
  7482   00198C  9893               	bcf	147,4,c	;volatile
  7483                           
  7484                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB3 = 1);
  7485   00198E  868A               	bsf	138,3,c	;volatile
  7486                           
  7487                           ;TAD_DISPLAY.c: 243:  (LATBbits.LATB2 = 0);
  7488   001990  948A               	bcf	138,2,c	;volatile
  7489                           
  7490                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  7491   001992  828A               	bsf	138,1,c	;volatile
  7492   001994                     
  7493                           ;TAD_DISPLAY.c: 245:  CantaPartAlta(Data);
  7494   001994  5052               	movf	CantaData@Data^0,w,c
  7495   001996  ECD3  F009         	call	_CantaPartAlta
  7496   00199A                     
  7497                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 1);
  7498   00199A  828A               	bsf	138,1,c	;volatile
  7499   00199C                     
  7500                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 0);
  7501   00199C  928A               	bcf	138,1,c	;volatile
  7502   00199E                     
  7503                           ;TAD_DISPLAY.c: 248:  (LATBbits.LATB1 = 0);
  7504   00199E  928A               	bcf	138,1,c	;volatile
  7505   0019A0                     
  7506                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  7507   0019A0  828A               	bsf	138,1,c	;volatile
  7508                           
  7509                           ;TAD_DISPLAY.c: 250:  CantaPartBaixa(Data);
  7510   0019A2  5052               	movf	CantaData@Data^0,w,c
  7511   0019A4  EC91  F009         	call	_CantaPartBaixa
  7512   0019A8                     
  7513                           ;TAD_DISPLAY.c: 251:  (LATBbits.LATB1 = 1);
  7514   0019A8  828A               	bsf	138,1,c	;volatile
  7515   0019AA                     
  7516                           ;TAD_DISPLAY.c: 252:  (LATBbits.LATB1 = 0);
  7517   0019AA  928A               	bcf	138,1,c	;volatile
  7518   0019AC                     
  7519                           ;TAD_DISPLAY.c: 253:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  7520   0019AC  8096               	bsf	150,0,c	;volatile
  7521   0019AE  8296               	bsf	150,1,c	;volatile
  7522   0019B0  8A93               	bsf	147,5,c	;volatile
  7523   0019B2  8893               	bsf	147,4,c	;volatile
  7524   0019B4  0012               	return		;funcret
  7525   0019B6                     __end_of_CantaData:
  7526                           	callstack 0
  7527                           
  7528 ;; *************** function _LcInit *****************
  7529 ;; Defined at:
  7530 ;;		line 68 in file "TAD_DISPLAY.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  rows            1    wreg     unsigned char 
  7533 ;;  columns         1   22[COMRAM] unsigned char 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;  rows            1   23[COMRAM] unsigned char 
  7536 ;;  i               2   24[COMRAM] int 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1
  7546 ;;      Params:         1       0       0
  7547 ;;      Locals:         3       0       0
  7548 ;;      Temps:          0       0       0
  7549 ;;      Totals:         4       0       0
  7550 ;;Total ram usage:        4 bytes
  7551 ;; Hardware stack levels used: 1
  7552 ;; Hardware stack levels required when called: 5
  7553 ;; This function calls:
  7554 ;;		_CantaIR
  7555 ;;		_EscriuPrimeraOrdre
  7556 ;;		_Espera
  7557 ;;		_TI_NewTimer
  7558 ;;		_WaitForBusy
  7559 ;; This function is called by:
  7560 ;;		_main
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text44
  7565   000B90                     __ptext44:
  7566                           	callstack 0
  7567   000B90                     _LcInit:
  7568                           	callstack 25
  7569                           
  7570                           ;incstack = 0
  7571                           ;LcInit@rows stored from wreg
  7572   000B90  6E66               	movwf	LcInit@rows^0,c
  7573   000B92                     
  7574                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7575   000B92  0E4D               	movlw	low _Timer
  7576   000B94  6E50               	movwf	TI_NewTimer@TimerHandle^0,c
  7577   000B96  ECFC  F00A         	call	_TI_NewTimer	;wreg free
  7578   000B9A                     
  7579                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7580   000B9A  C066  F031         	movff	LcInit@rows,_Rows
  7581   000B9E  C065  F030         	movff	LcInit@columns,_Columns
  7582   000BA2                     
  7583                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7584   000BA2  6A2E               	clrf	_ColumnAct^0,c
  7585   000BA4  6A2F               	clrf	_RowAct^0,c
  7586   000BA6                     
  7587                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7588   000BA6  9293               	bcf	147,1,c	;volatile
  7589   000BA8  9493               	bcf	147,2,c	;volatile
  7590   000BAA  9693               	bcf	147,3,c	;volatile
  7591   000BAC                     
  7592                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7593   000BAC  0E00               	movlw	0
  7594   000BAE  6E68               	movwf	(LcInit@i+1)^0,c
  7595   000BB0  0E00               	movlw	0
  7596   000BB2  6E67               	movwf	LcInit@i^0,c
  7597   000BB4                     l3229:
  7598                           
  7599                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 51);
  7600   000BB4  C04D  F05D         	movff	_Timer,Espera@Timer
  7601   000BB8  6A5E               	clrf	(Espera@Timer+1)^0,c
  7602   000BBA  0E00               	movlw	0
  7603   000BBC  6E60               	movwf	(Espera@ms+1)^0,c
  7604   000BBE  0E33               	movlw	51
  7605   000BC0  6E5F               	movwf	Espera@ms^0,c
  7606   000BC2  EC00  F00C         	call	_Espera	;wreg free
  7607   000BC6                     
  7608                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7609   000BC6  0E03               	movlw	3
  7610   000BC8  EC46  F009         	call	_EscriuPrimeraOrdre
  7611   000BCC                     
  7612                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 2);
  7613   000BCC  C04D  F05D         	movff	_Timer,Espera@Timer
  7614   000BD0  6A5E               	clrf	(Espera@Timer+1)^0,c
  7615   000BD2  0E00               	movlw	0
  7616   000BD4  6E60               	movwf	(Espera@ms+1)^0,c
  7617   000BD6  0E02               	movlw	2
  7618   000BD8  6E5F               	movwf	Espera@ms^0,c
  7619   000BDA  EC00  F00C         	call	_Espera	;wreg free
  7620                           
  7621                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7622   000BDE  0E03               	movlw	3
  7623   000BE0  EC46  F009         	call	_EscriuPrimeraOrdre
  7624   000BE4                     
  7625                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7626   000BE4  C04D  F05D         	movff	_Timer,Espera@Timer
  7627   000BE8  6A5E               	clrf	(Espera@Timer+1)^0,c
  7628   000BEA  0E00               	movlw	0
  7629   000BEC  6E60               	movwf	(Espera@ms+1)^0,c
  7630   000BEE  0E01               	movlw	1
  7631   000BF0  6E5F               	movwf	Espera@ms^0,c
  7632   000BF2  EC00  F00C         	call	_Espera	;wreg free
  7633   000BF6                     
  7634                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7635   000BF6  0E03               	movlw	3
  7636   000BF8  EC46  F009         	call	_EscriuPrimeraOrdre
  7637                           
  7638                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7639   000BFC  C04D  F05D         	movff	_Timer,Espera@Timer
  7640   000C00  6A5E               	clrf	(Espera@Timer+1)^0,c
  7641   000C02  0E00               	movlw	0
  7642   000C04  6E60               	movwf	(Espera@ms+1)^0,c
  7643   000C06  0E01               	movlw	1
  7644   000C08  6E5F               	movwf	Espera@ms^0,c
  7645   000C0A  EC00  F00C         	call	_Espera	;wreg free
  7646   000C0E                     
  7647                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7648   000C0E  0E02               	movlw	2
  7649   000C10  EC46  F009         	call	_EscriuPrimeraOrdre
  7650   000C14                     
  7651                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7652   000C14  C04D  F05D         	movff	_Timer,Espera@Timer
  7653   000C18  6A5E               	clrf	(Espera@Timer+1)^0,c
  7654   000C1A  0E00               	movlw	0
  7655   000C1C  6E60               	movwf	(Espera@ms+1)^0,c
  7656   000C1E  0E01               	movlw	1
  7657   000C20  6E5F               	movwf	Espera@ms^0,c
  7658   000C22  EC00  F00C         	call	_Espera	;wreg free
  7659                           
  7660                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7661   000C26  0E28               	movlw	40
  7662   000C28  ECDB  F00C         	call	_CantaIR
  7663   000C2C                     
  7664                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7665   000C2C  EC46  F00A         	call	_WaitForBusy	;wreg free
  7666   000C30  0E08               	movlw	8
  7667   000C32  ECDB  F00C         	call	_CantaIR
  7668                           
  7669                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7670   000C36  EC46  F00A         	call	_WaitForBusy	;wreg free
  7671   000C3A  0E01               	movlw	1
  7672   000C3C  ECDB  F00C         	call	_CantaIR
  7673   000C40                     
  7674                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7675   000C40  C04D  F05D         	movff	_Timer,Espera@Timer
  7676   000C44  6A5E               	clrf	(Espera@Timer+1)^0,c
  7677   000C46  0E00               	movlw	0
  7678   000C48  6E60               	movwf	(Espera@ms+1)^0,c
  7679   000C4A  0E02               	movlw	2
  7680   000C4C  6E5F               	movwf	Espera@ms^0,c
  7681   000C4E  EC00  F00C         	call	_Espera	;wreg free
  7682   000C52                     
  7683                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7684   000C52  EC46  F00A         	call	_WaitForBusy	;wreg free
  7685   000C56  0E06               	movlw	6
  7686   000C58  ECDB  F00C         	call	_CantaIR
  7687                           
  7688                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7689   000C5C  EC46  F00A         	call	_WaitForBusy	;wreg free
  7690   000C60  0E0F               	movlw	15
  7691   000C62  ECDB  F00C         	call	_CantaIR
  7692   000C66                     
  7693                           ;TAD_DISPLAY.c: 101:  }
  7694   000C66  4A67               	infsnz	LcInit@i^0,f,c
  7695   000C68  2A68               	incf	(LcInit@i+1)^0,f,c
  7696   000C6A  BE68               	btfsc	(LcInit@i+1)^0,7,c
  7697   000C6C  EF41  F006         	goto	u2381
  7698   000C70  5068               	movf	(LcInit@i+1)^0,w,c
  7699   000C72  E109               	bnz	u2380
  7700   000C74  0E02               	movlw	2
  7701   000C76  5C67               	subwf	LcInit@i^0,w,c
  7702   000C78  A0D8               	btfss	status,0,c
  7703   000C7A  EF41  F006         	goto	u2381
  7704   000C7E  EF43  F006         	goto	u2380
  7705   000C82                     u2381:
  7706   000C82  EFDA  F005         	goto	l3229
  7707   000C86                     u2380:
  7708   000C86  0012               	return		;funcret
  7709   000C88                     __end_of_LcInit:
  7710                           	callstack 0
  7711                           
  7712 ;; *************** function _WaitForBusy *****************
  7713 ;; Defined at:
  7714 ;;		line 256 in file "TAD_DISPLAY.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  Busy            1   14[COMRAM] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1
  7728 ;;      Params:         0       0       0
  7729 ;;      Locals:         1       0       0
  7730 ;;      Temps:          0       0       0
  7731 ;;      Totals:         1       0       0
  7732 ;;Total ram usage:        1 bytes
  7733 ;; Hardware stack levels used: 1
  7734 ;; Hardware stack levels required when called: 4
  7735 ;; This function calls:
  7736 ;;		_TI_GetTics
  7737 ;;		_TI_ResetTics
  7738 ;; This function is called by:
  7739 ;;		_LcInit
  7740 ;;		_LcGotoXY
  7741 ;;		_LcPutChar
  7742 ;;		_LcClear
  7743 ;;		_LcCursorOn
  7744 ;;		_LcCursorOff
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text45
  7749   00148C                     __ptext45:
  7750                           	callstack 0
  7751   00148C                     _WaitForBusy:
  7752                           	callstack 24
  7753   00148C                     
  7754                           ;TAD_DISPLAY.c: 257:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  7755   00148C  8096               	bsf	150,0,c	;volatile
  7756   00148E  8296               	bsf	150,1,c	;volatile
  7757   001490  8A93               	bsf	147,5,c	;volatile
  7758   001492  8893               	bsf	147,4,c	;volatile
  7759                           
  7760                           ;TAD_DISPLAY.c: 258:  (LATBbits.LATB3 = 0);
  7761   001494  968A               	bcf	138,3,c	;volatile
  7762                           
  7763                           ;TAD_DISPLAY.c: 259:  (LATBbits.LATB2 = 1);
  7764   001496  848A               	bsf	138,2,c	;volatile
  7765   001498                     
  7766                           ;TAD_DISPLAY.c: 260:  TI_ResetTics(Timer);
  7767   001498  504D               	movf	_Timer^0,w,c
  7768   00149A  EC09  F00D         	call	_TI_ResetTics
  7769   00149E                     l2801:
  7770                           
  7771                           ;TAD_DISPLAY.c: 262:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  7772   00149E  828A               	bsf	138,1,c	;volatile
  7773   0014A0  828A               	bsf	138,1,c	;volatile
  7774   0014A2                     
  7775                           ;TAD_DISPLAY.c: 263:   Busy = (PORTBbits.RB7);
  7776   0014A2  0E00               	movlw	0
  7777   0014A4  BE81               	btfsc	129,7,c	;volatile
  7778   0014A6  0E01               	movlw	1
  7779   0014A8  6E5D               	movwf	WaitForBusy@Busy^0,c
  7780   0014AA                     
  7781                           ;TAD_DISPLAY.c: 264:   (LATBbits.LATB1 = 0);
  7782   0014AA  928A               	bcf	138,1,c	;volatile
  7783   0014AC                     
  7784                           ;TAD_DISPLAY.c: 265:   (LATBbits.LATB1 = 0);
  7785   0014AC  928A               	bcf	138,1,c	;volatile
  7786   0014AE                     
  7787                           ;TAD_DISPLAY.c: 266:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  7788   0014AE  828A               	bsf	138,1,c	;volatile
  7789   0014B0  828A               	bsf	138,1,c	;volatile
  7790   0014B2                     
  7791                           ;TAD_DISPLAY.c: 268:   (LATBbits.LATB1 = 0);
  7792   0014B2  928A               	bcf	138,1,c	;volatile
  7793   0014B4                     
  7794                           ;TAD_DISPLAY.c: 269:   (LATBbits.LATB1 = 0);
  7795   0014B4  928A               	bcf	138,1,c	;volatile
  7796   0014B6                     
  7797                           ;TAD_DISPLAY.c: 270:   if (TI_GetTics(Timer) > 10) break;
  7798   0014B6  504D               	movf	_Timer^0,w,c
  7799   0014B8  EC4E  F00B         	call	_TI_GetTics
  7800   0014BC  5053               	movf	(?_TI_GetTics+3)^0,w,c
  7801   0014BE  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  7802   0014C0  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  7803   0014C2  E109               	bnz	u1820
  7804   0014C4  0E0B               	movlw	11
  7805   0014C6  5C50               	subwf	?_TI_GetTics^0,w,c
  7806   0014C8  A0D8               	btfss	status,0,c
  7807   0014CA  EF69  F00A         	goto	u1821
  7808   0014CE  EF6B  F00A         	goto	u1820
  7809   0014D2                     u1821:
  7810   0014D2  EF6D  F00A         	goto	l2823
  7811   0014D6                     u1820:
  7812   0014D6  EF75  F00A         	goto	l468
  7813   0014DA                     l2823:
  7814                           
  7815                           ;TAD_DISPLAY.c: 271:  } while(Busy);
  7816   0014DA  505D               	movf	WaitForBusy@Busy^0,w,c
  7817   0014DC  A4D8               	btfss	status,2,c
  7818   0014DE  EF73  F00A         	goto	u1831
  7819   0014E2  EF75  F00A         	goto	u1830
  7820   0014E6                     u1831:
  7821   0014E6  EF4F  F00A         	goto	l2801
  7822   0014EA                     u1830:
  7823   0014EA                     l468:
  7824   0014EA  0012               	return		;funcret
  7825   0014EC                     __end_of_WaitForBusy:
  7826                           	callstack 0
  7827                           
  7828 ;; *************** function _TI_NewTimer *****************
  7829 ;; Defined at:
  7830 ;;		line 43 in file "TAD_TIMER.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  7833 ;;		 -> timer@TAD_LEDS$F1057(1), Timer(1), timer(1), 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  Comptador       1    3[COMRAM] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      unsigned char 
  7838 ;; Registers used:
  7839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1
  7845 ;;      Params:         1       0       0
  7846 ;;      Locals:         1       0       0
  7847 ;;      Temps:          1       0       0
  7848 ;;      Totals:         3       0       0
  7849 ;;Total ram usage:        3 bytes
  7850 ;; Hardware stack levels used: 1
  7851 ;; Hardware stack levels required when called: 3
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_initTeclado
  7856 ;;		_LcInit
  7857 ;;		_initLeds
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text46
  7862   0015F8                     __ptext46:
  7863                           	callstack 0
  7864   0015F8                     _TI_NewTimer:
  7865                           	callstack 26
  7866   0015F8                     
  7867                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  7868   0015F8  6A52               	clrf	TI_NewTimer@Comptador^0,c
  7869                           
  7870                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7871   0015FA  EF0B  F00B         	goto	l3045
  7872   0015FE                     l3041:
  7873                           
  7874                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  7875   0015FE  2A52               	incf	TI_NewTimer@Comptador^0,f,c
  7876   001600  0E04               	movlw	4
  7877   001602  1852               	xorwf	TI_NewTimer@Comptador^0,w,c
  7878   001604  A4D8               	btfss	status,2,c
  7879   001606  EF07  F00B         	goto	u2191
  7880   00160A  EF09  F00B         	goto	u2190
  7881   00160E                     u2191:
  7882   00160E  EF0B  F00B         	goto	l3045
  7883   001612                     u2190:
  7884   001612  EF26  F00B         	goto	l85
  7885   001616                     l3045:
  7886                           
  7887                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7888   001616  5052               	movf	TI_NewTimer@Comptador^0,w,c
  7889   001618  0D05               	mullw	5
  7890   00161A  50F3               	movf	243,w,c
  7891   00161C  0F05               	addlw	low (_Timers+4)
  7892   00161E  6ED9               	movwf	fsr2l,c
  7893   001620  6ADA               	clrf	fsr2h,c
  7894   001622  04DE               	decf	postinc2,w,c
  7895   001624  B4D8               	btfsc	status,2,c
  7896   001626  EF17  F00B         	goto	u2201
  7897   00162A  EF19  F00B         	goto	u2200
  7898   00162E                     u2201:
  7899   00162E  EFFF  F00A         	goto	l3041
  7900   001632                     u2200:
  7901   001632                     
  7902                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  7903   001632  5052               	movf	TI_NewTimer@Comptador^0,w,c
  7904   001634  0D05               	mullw	5
  7905   001636  50F3               	movf	243,w,c
  7906   001638  0F05               	addlw	low (_Timers+4)
  7907   00163A  6ED9               	movwf	fsr2l,c
  7908   00163C  6ADA               	clrf	fsr2h,c
  7909   00163E  0E01               	movlw	1
  7910   001640  6EDF               	movwf	indf2,c
  7911   001642                     
  7912                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  7913   001642  5050               	movf	TI_NewTimer@TimerHandle^0,w,c
  7914   001644  6ED9               	movwf	fsr2l,c
  7915   001646  6ADA               	clrf	fsr2h,c
  7916   001648  C052  FFDF         	movff	TI_NewTimer@Comptador,indf2
  7917   00164C                     l85:
  7918   00164C  0012               	return		;funcret
  7919   00164E                     __end_of_TI_NewTimer:
  7920                           	callstack 0
  7921                           
  7922 ;; *************** function _Espera *****************
  7923 ;; Defined at:
  7924 ;;		line 205 in file "TAD_DISPLAY.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;  Timer           2   14[COMRAM] int 
  7927 ;;  ms              2   16[COMRAM] int 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;		None
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1
  7939 ;;      Params:         4       0       0
  7940 ;;      Locals:         0       0       0
  7941 ;;      Temps:          4       0       0
  7942 ;;      Totals:         8       0       0
  7943 ;;Total ram usage:        8 bytes
  7944 ;; Hardware stack levels used: 1
  7945 ;; Hardware stack levels required when called: 4
  7946 ;; This function calls:
  7947 ;;		_TI_GetTics
  7948 ;;		_TI_ResetTics
  7949 ;; This function is called by:
  7950 ;;		_LcInit
  7951 ;;		_LcClear
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text47
  7956   001800                     __ptext47:
  7957                           	callstack 0
  7958   001800                     _Espera:
  7959                           	callstack 25
  7960   001800                     
  7961                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  7962   001800  505D               	movf	Espera@Timer^0,w,c
  7963   001802  EC09  F00D         	call	_TI_ResetTics
  7964   001806                     l3111:
  7965   001806  C05F  F061         	movff	Espera@ms,??_Espera
  7966   00180A  C060  F062         	movff	Espera@ms+1,??_Espera+1
  7967   00180E  0E00               	movlw	0
  7968   001810  BE62               	btfsc	(??_Espera+1)^0,7,c
  7969   001812  0EFF               	movlw	255
  7970   001814  6E63               	movwf	(??_Espera+2)^0,c
  7971   001816  6E64               	movwf	(??_Espera+3)^0,c
  7972   001818  505D               	movf	Espera@Timer^0,w,c
  7973   00181A  EC4E  F00B         	call	_TI_GetTics
  7974   00181E  5061               	movf	??_Espera^0,w,c
  7975   001820  5C50               	subwf	?_TI_GetTics^0,w,c
  7976   001822  5062               	movf	(??_Espera+1)^0,w,c
  7977   001824  5851               	subwfb	(?_TI_GetTics+1)^0,w,c
  7978   001826  5063               	movf	(??_Espera+2)^0,w,c
  7979   001828  5852               	subwfb	(?_TI_GetTics+2)^0,w,c
  7980   00182A  5064               	movf	(??_Espera+3)^0,w,c
  7981   00182C  5853               	subwfb	(?_TI_GetTics+3)^0,w,c
  7982   00182E  A0D8               	btfss	status,0,c
  7983   001830  EF1C  F00C         	goto	u2271
  7984   001834  EF1E  F00C         	goto	u2270
  7985   001838                     u2271:
  7986   001838  EF03  F00C         	goto	l3111
  7987   00183C                     u2270:
  7988   00183C  0012               	return		;funcret
  7989   00183E                     __end_of_Espera:
  7990                           	callstack 0
  7991                           
  7992 ;; *************** function _TI_ResetTics *****************
  7993 ;; Defined at:
  7994 ;;		line 53 in file "TAD_TIMER.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;  TimerHandle     1    wreg     unsigned char 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1
  8008 ;;      Params:         0       0       0
  8009 ;;      Locals:         1       0       0
  8010 ;;      Temps:          0       0       0
  8011 ;;      Totals:         1       0       0
  8012 ;;Total ram usage:        1 bytes
  8013 ;; Hardware stack levels used: 1
  8014 ;; Hardware stack levels required when called: 3
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_motorTeclado
  8019 ;;		_Espera
  8020 ;;		_WaitForBusy
  8021 ;;		_motor_LEDs
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text48
  8026   001A12                     __ptext48:
  8027                           	callstack 0
  8028   001A12                     _TI_ResetTics:
  8029                           	callstack 26
  8030                           
  8031                           ;incstack = 0
  8032                           ;TI_ResetTics@TimerHandle stored from wreg
  8033   001A12  6E50               	movwf	TI_ResetTics@TimerHandle^0,c
  8034   001A14                     
  8035                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8036   001A14  9EF2               	bcf	242,7,c	;volatile
  8037   001A16  5050               	movf	TI_ResetTics@TimerHandle^0,w,c
  8038   001A18  0D05               	mullw	5
  8039   001A1A  50F3               	movf	243,w,c
  8040   001A1C  0F01               	addlw	low _Timers
  8041   001A1E  6ED9               	movwf	fsr2l,c
  8042   001A20  6ADA               	clrf	fsr2h,c
  8043   001A22  C01B  FFDE         	movff	_Tics,postinc2	;volatile
  8044   001A26  C01C  FFDE         	movff	_Tics+1,postinc2	;volatile
  8045   001A2A  C01D  FFDE         	movff	_Tics+2,postinc2	;volatile
  8046   001A2E  C01E  FFDE         	movff	_Tics+3,postinc2	;volatile
  8047   001A32  8EF2               	bsf	242,7,c	;volatile
  8048   001A34  0012               	return		;funcret
  8049   001A36                     __end_of_TI_ResetTics:
  8050                           	callstack 0
  8051                           
  8052 ;; *************** function _TI_GetTics *****************
  8053 ;; Defined at:
  8054 ;;		line 61 in file "TAD_TIMER.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  TimerHandle     1    wreg     unsigned char 
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  8059 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  4    1[COMRAM] unsigned long 
  8062 ;; Registers used:
  8063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMRAM   BANK0   BANK1
  8069 ;;      Params:         4       0       0
  8070 ;;      Locals:         5       0       0
  8071 ;;      Temps:          4       0       0
  8072 ;;      Totals:        13       0       0
  8073 ;;Total ram usage:       13 bytes
  8074 ;; Hardware stack levels used: 1
  8075 ;; Hardware stack levels required when called: 3
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_motorTeclado
  8080 ;;		_Espera
  8081 ;;		_WaitForBusy
  8082 ;;		_motor_LEDs
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           	psect	text49
  8087   00169C                     __ptext49:
  8088                           	callstack 0
  8089   00169C                     _TI_GetTics:
  8090                           	callstack 26
  8091                           
  8092                           ;incstack = 0
  8093                           ;TI_GetTics@TimerHandle stored from wreg
  8094   00169C  6E5C               	movwf	TI_GetTics@TimerHandle^0,c
  8095   00169E                     
  8096                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8097   00169E  9EF2               	bcf	242,7,c	;volatile
  8098   0016A0  C01B  F058         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8099   0016A4  C01C  F059         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8100   0016A8  C01D  F05A         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8101   0016AC  C01E  F05B         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8102   0016B0  8EF2               	bsf	242,7,c	;volatile
  8103   0016B2                     
  8104                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8105   0016B2  505C               	movf	TI_GetTics@TimerHandle^0,w,c
  8106   0016B4  0D05               	mullw	5
  8107   0016B6  50F3               	movf	243,w,c
  8108   0016B8  0F01               	addlw	low _Timers
  8109   0016BA  6ED9               	movwf	fsr2l,c
  8110   0016BC  6ADA               	clrf	fsr2h,c
  8111   0016BE  CFDE F054          	movff	postinc2,??_TI_GetTics
  8112   0016C2  CFDE F055          	movff	postinc2,??_TI_GetTics+1
  8113   0016C6  CFDE F056          	movff	postinc2,??_TI_GetTics+2
  8114   0016CA  CFDE F057          	movff	postinc2,??_TI_GetTics+3
  8115   0016CE  5054               	movf	??_TI_GetTics^0,w,c
  8116   0016D0  5C58               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8117   0016D2  6E50               	movwf	?_TI_GetTics^0,c
  8118   0016D4  5055               	movf	(??_TI_GetTics+1)^0,w,c
  8119   0016D6  5859               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8120   0016D8  6E51               	movwf	(?_TI_GetTics+1)^0,c
  8121   0016DA  5056               	movf	(??_TI_GetTics+2)^0,w,c
  8122   0016DC  585A               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8123   0016DE  6E52               	movwf	(?_TI_GetTics+2)^0,c
  8124   0016E0  5057               	movf	(??_TI_GetTics+3)^0,w,c
  8125   0016E2  585B               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8126   0016E4  6E53               	movwf	(?_TI_GetTics+3)^0,c
  8127   0016E6  0012               	return		;funcret
  8128   0016E8                     __end_of_TI_GetTics:
  8129                           	callstack 0
  8130                           
  8131 ;; *************** function _EscriuPrimeraOrdre *****************
  8132 ;; Defined at:
  8133 ;;		line 274 in file "TAD_DISPLAY.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  ordre           1    wreg     unsigned char 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  ordre           1    2[COMRAM] unsigned char 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1    wreg      void 
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, status,0
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1
  8147 ;;      Params:         0       0       0
  8148 ;;      Locals:         1       0       0
  8149 ;;      Temps:          1       0       0
  8150 ;;      Totals:         2       0       0
  8151 ;;Total ram usage:        2 bytes
  8152 ;; Hardware stack levels used: 1
  8153 ;; Hardware stack levels required when called: 3
  8154 ;; This function calls:
  8155 ;;		Nothing
  8156 ;; This function is called by:
  8157 ;;		_LcInit
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           	psect	text50
  8162   00128C                     __ptext50:
  8163                           	callstack 0
  8164   00128C                     _EscriuPrimeraOrdre:
  8165                           	callstack 26
  8166                           
  8167                           ;incstack = 0
  8168                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8169   00128C  6E51               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8170   00128E                     
  8171                           ;TAD_DISPLAY.c: 276:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8172   00128E  9096               	bcf	150,0,c	;volatile
  8173   001290  9296               	bcf	150,1,c	;volatile
  8174   001292  9A93               	bcf	147,5,c	;volatile
  8175   001294  9893               	bcf	147,4,c	;volatile
  8176   001296  968A               	bcf	138,3,c	;volatile
  8177   001298  948A               	bcf	138,2,c	;volatile
  8178                           
  8179                           ;TAD_DISPLAY.c: 277:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8180   00129A  828A               	bsf	138,1,c	;volatile
  8181   00129C  828A               	bsf	138,1,c	;volatile
  8182   00129E                     
  8183                           ;TAD_DISPLAY.c: 278:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8184   00129E  B651               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8185   0012A0  EF54  F009         	goto	u811
  8186   0012A4  EF58  F009         	goto	u810
  8187   0012A8                     u811:
  8188   0012A8  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8189   0012AA  2A50               	incf	??_EscriuPrimeraOrdre^0,f,c
  8190   0012AC  EF59  F009         	goto	u828
  8191   0012B0                     u810:
  8192   0012B0  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8193   0012B2                     u828:
  8194   0012B2  508D               	movf	141,w,c	;volatile
  8195   0012B4  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8196   0012B6  0BFE               	andlw	-2
  8197   0012B8  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8198   0012BA  6E8D               	movwf	141,c	;volatile
  8199                           
  8200                           ;TAD_DISPLAY.c: 279:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8201   0012BC  B451               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8202   0012BE  EF63  F009         	goto	u831
  8203   0012C2  EF67  F009         	goto	u830
  8204   0012C6                     u831:
  8205   0012C6  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8206   0012C8  2A50               	incf	??_EscriuPrimeraOrdre^0,f,c
  8207   0012CA  EF68  F009         	goto	u848
  8208   0012CE                     u830:
  8209   0012CE  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8210   0012D0                     u848:
  8211   0012D0  4650               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8212   0012D2  508D               	movf	141,w,c	;volatile
  8213   0012D4  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8214   0012D6  0BFD               	andlw	-3
  8215   0012D8  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8216   0012DA  6E8D               	movwf	141,c	;volatile
  8217                           
  8218                           ;TAD_DISPLAY.c: 280:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8219   0012DC  B251               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8220   0012DE  EF73  F009         	goto	u851
  8221   0012E2  EF77  F009         	goto	u850
  8222   0012E6                     u851:
  8223   0012E6  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8224   0012E8  2A50               	incf	??_EscriuPrimeraOrdre^0,f,c
  8225   0012EA  EF78  F009         	goto	u868
  8226   0012EE                     u850:
  8227   0012EE  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8228   0012F0                     u868:
  8229   0012F0  3A50               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8230   0012F2  4650               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8231   0012F4  508A               	movf	138,w,c	;volatile
  8232   0012F6  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8233   0012F8  0BDF               	andlw	-33
  8234   0012FA  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8235   0012FC  6E8A               	movwf	138,c	;volatile
  8236                           
  8237                           ;TAD_DISPLAY.c: 281:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8238   0012FE  B051               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8239   001300  EF84  F009         	goto	u871
  8240   001304  EF88  F009         	goto	u870
  8241   001308                     u871:
  8242   001308  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8243   00130A  2A50               	incf	??_EscriuPrimeraOrdre^0,f,c
  8244   00130C  EF89  F009         	goto	u888
  8245   001310                     u870:
  8246   001310  6A50               	clrf	??_EscriuPrimeraOrdre^0,c
  8247   001312                     u888:
  8248   001312  3A50               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8249   001314  508A               	movf	138,w,c	;volatile
  8250   001316  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8251   001318  0BEF               	andlw	-17
  8252   00131A  1850               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8253   00131C  6E8A               	movwf	138,c	;volatile
  8254   00131E                     
  8255                           ;TAD_DISPLAY.c: 282:  (LATBbits.LATB1 = 0);
  8256   00131E  928A               	bcf	138,1,c	;volatile
  8257   001320  0012               	return		;funcret
  8258   001322                     __end_of_EscriuPrimeraOrdre:
  8259                           	callstack 0
  8260                           
  8261 ;; *************** function _CantaIR *****************
  8262 ;; Defined at:
  8263 ;;		line 224 in file "TAD_DISPLAY.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  IR              1    wreg     unsigned char 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  IR              1    3[COMRAM] unsigned char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      void 
  8270 ;; Registers used:
  8271 ;;		wreg, status,2, status,0, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMRAM   BANK0   BANK1
  8277 ;;      Params:         0       0       0
  8278 ;;      Locals:         1       0       0
  8279 ;;      Temps:          0       0       0
  8280 ;;      Totals:         1       0       0
  8281 ;;Total ram usage:        1 bytes
  8282 ;; Hardware stack levels used: 1
  8283 ;; Hardware stack levels required when called: 4
  8284 ;; This function calls:
  8285 ;;		_CantaPartAlta
  8286 ;;		_CantaPartBaixa
  8287 ;; This function is called by:
  8288 ;;		_LcInit
  8289 ;;		_LcGotoXY
  8290 ;;		_LcClear
  8291 ;;		_LcCursorOn
  8292 ;;		_LcCursorOff
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text51
  8297   0019B6                     __ptext51:
  8298                           	callstack 0
  8299   0019B6                     _CantaIR:
  8300                           	callstack 23
  8301                           
  8302                           ;incstack = 0
  8303                           ;CantaIR@IR stored from wreg
  8304   0019B6  6E52               	movwf	CantaIR@IR^0,c
  8305   0019B8                     
  8306                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8307   0019B8  9096               	bcf	150,0,c	;volatile
  8308   0019BA  9296               	bcf	150,1,c	;volatile
  8309   0019BC  9A93               	bcf	147,5,c	;volatile
  8310   0019BE  9893               	bcf	147,4,c	;volatile
  8311                           
  8312                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8313   0019C0  968A               	bcf	138,3,c	;volatile
  8314                           
  8315                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8316   0019C2  948A               	bcf	138,2,c	;volatile
  8317                           
  8318                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8319   0019C4  828A               	bsf	138,1,c	;volatile
  8320   0019C6                     
  8321                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8322   0019C6  5052               	movf	CantaIR@IR^0,w,c
  8323   0019C8  ECD3  F009         	call	_CantaPartAlta
  8324   0019CC                     
  8325                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8326   0019CC  828A               	bsf	138,1,c	;volatile
  8327   0019CE                     
  8328                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8329   0019CE  928A               	bcf	138,1,c	;volatile
  8330   0019D0                     
  8331                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8332   0019D0  928A               	bcf	138,1,c	;volatile
  8333   0019D2                     
  8334                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8335   0019D2  828A               	bsf	138,1,c	;volatile
  8336                           
  8337                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8338   0019D4  5052               	movf	CantaIR@IR^0,w,c
  8339   0019D6  EC91  F009         	call	_CantaPartBaixa
  8340   0019DA                     
  8341                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8342   0019DA  828A               	bsf	138,1,c	;volatile
  8343   0019DC                     
  8344                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8345   0019DC  928A               	bcf	138,1,c	;volatile
  8346   0019DE                     
  8347                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8348   0019DE  8096               	bsf	150,0,c	;volatile
  8349   0019E0  8296               	bsf	150,1,c	;volatile
  8350   0019E2  8A93               	bsf	147,5,c	;volatile
  8351   0019E4  8893               	bsf	147,4,c	;volatile
  8352   0019E6  0012               	return		;funcret
  8353   0019E8                     __end_of_CantaIR:
  8354                           	callstack 0
  8355                           
  8356 ;; *************** function _CantaPartBaixa *****************
  8357 ;; Defined at:
  8358 ;;		line 217 in file "TAD_DISPLAY.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  c               1    wreg     unsigned char 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  c               1    2[COMRAM] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      void 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1
  8372 ;;      Params:         0       0       0
  8373 ;;      Locals:         1       0       0
  8374 ;;      Temps:          1       0       0
  8375 ;;      Totals:         2       0       0
  8376 ;;Total ram usage:        2 bytes
  8377 ;; Hardware stack levels used: 1
  8378 ;; Hardware stack levels required when called: 3
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_CantaIR
  8383 ;;		_CantaData
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text52
  8388   001322                     __ptext52:
  8389                           	callstack 0
  8390   001322                     _CantaPartBaixa:
  8391                           	callstack 23
  8392                           
  8393                           ;incstack = 0
  8394                           ;CantaPartBaixa@c stored from wreg
  8395   001322  6E51               	movwf	CantaPartBaixa@c^0,c
  8396   001324                     
  8397                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  8398   001324  B651               	btfsc	CantaPartBaixa@c^0,3,c
  8399   001326  EF97  F009         	goto	u1731
  8400   00132A  EF9B  F009         	goto	u1730
  8401   00132E                     u1731:
  8402   00132E  6A50               	clrf	??_CantaPartBaixa^0,c
  8403   001330  2A50               	incf	??_CantaPartBaixa^0,f,c
  8404   001332  EF9C  F009         	goto	u1748
  8405   001336                     u1730:
  8406   001336  6A50               	clrf	??_CantaPartBaixa^0,c
  8407   001338                     u1748:
  8408   001338  508D               	movf	141,w,c	;volatile
  8409   00133A  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8410   00133C  0BFE               	andlw	-2
  8411   00133E  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8412   001340  6E8D               	movwf	141,c	;volatile
  8413                           
  8414                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  8415   001342  B451               	btfsc	CantaPartBaixa@c^0,2,c
  8416   001344  EFA6  F009         	goto	u1751
  8417   001348  EFAA  F009         	goto	u1750
  8418   00134C                     u1751:
  8419   00134C  6A50               	clrf	??_CantaPartBaixa^0,c
  8420   00134E  2A50               	incf	??_CantaPartBaixa^0,f,c
  8421   001350  EFAB  F009         	goto	u1768
  8422   001354                     u1750:
  8423   001354  6A50               	clrf	??_CantaPartBaixa^0,c
  8424   001356                     u1768:
  8425   001356  4650               	rlncf	??_CantaPartBaixa^0,f,c
  8426   001358  508D               	movf	141,w,c	;volatile
  8427   00135A  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8428   00135C  0BFD               	andlw	-3
  8429   00135E  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8430   001360  6E8D               	movwf	141,c	;volatile
  8431                           
  8432                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  8433   001362  B251               	btfsc	CantaPartBaixa@c^0,1,c
  8434   001364  EFB6  F009         	goto	u1771
  8435   001368  EFBA  F009         	goto	u1770
  8436   00136C                     u1771:
  8437   00136C  6A50               	clrf	??_CantaPartBaixa^0,c
  8438   00136E  2A50               	incf	??_CantaPartBaixa^0,f,c
  8439   001370  EFBB  F009         	goto	u1788
  8440   001374                     u1770:
  8441   001374  6A50               	clrf	??_CantaPartBaixa^0,c
  8442   001376                     u1788:
  8443   001376  3A50               	swapf	??_CantaPartBaixa^0,f,c
  8444   001378  4650               	rlncf	??_CantaPartBaixa^0,f,c
  8445   00137A  508A               	movf	138,w,c	;volatile
  8446   00137C  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8447   00137E  0BDF               	andlw	-33
  8448   001380  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8449   001382  6E8A               	movwf	138,c	;volatile
  8450                           
  8451                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  8452   001384  B051               	btfsc	CantaPartBaixa@c^0,0,c
  8453   001386  EFC7  F009         	goto	u1791
  8454   00138A  EFCB  F009         	goto	u1790
  8455   00138E                     u1791:
  8456   00138E  6A50               	clrf	??_CantaPartBaixa^0,c
  8457   001390  2A50               	incf	??_CantaPartBaixa^0,f,c
  8458   001392  EFCC  F009         	goto	u1808
  8459   001396                     u1790:
  8460   001396  6A50               	clrf	??_CantaPartBaixa^0,c
  8461   001398                     u1808:
  8462   001398  3A50               	swapf	??_CantaPartBaixa^0,f,c
  8463   00139A  508A               	movf	138,w,c	;volatile
  8464   00139C  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8465   00139E  0BEF               	andlw	-17
  8466   0013A0  1850               	xorwf	??_CantaPartBaixa^0,w,c
  8467   0013A2  6E8A               	movwf	138,c	;volatile
  8468   0013A4  0012               	return		;funcret
  8469   0013A6                     __end_of_CantaPartBaixa:
  8470                           	callstack 0
  8471                           
  8472 ;; *************** function _CantaPartAlta *****************
  8473 ;; Defined at:
  8474 ;;		line 210 in file "TAD_DISPLAY.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  c               1    wreg     unsigned char 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  c               1    2[COMRAM] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, status,2, status,0
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1
  8488 ;;      Params:         0       0       0
  8489 ;;      Locals:         1       0       0
  8490 ;;      Temps:          1       0       0
  8491 ;;      Totals:         2       0       0
  8492 ;;Total ram usage:        2 bytes
  8493 ;; Hardware stack levels used: 1
  8494 ;; Hardware stack levels required when called: 3
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_CantaIR
  8499 ;;		_CantaData
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text53
  8504   0013A6                     __ptext53:
  8505                           	callstack 0
  8506   0013A6                     _CantaPartAlta:
  8507                           	callstack 23
  8508                           
  8509                           ;incstack = 0
  8510                           ;CantaPartAlta@c stored from wreg
  8511   0013A6  6E51               	movwf	CantaPartAlta@c^0,c
  8512   0013A8                     
  8513                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8514   0013A8  BE51               	btfsc	CantaPartAlta@c^0,7,c
  8515   0013AA  EFD9  F009         	goto	u1651
  8516   0013AE  EFDD  F009         	goto	u1650
  8517   0013B2                     u1651:
  8518   0013B2  6A50               	clrf	??_CantaPartAlta^0,c
  8519   0013B4  2A50               	incf	??_CantaPartAlta^0,f,c
  8520   0013B6  EFDE  F009         	goto	u1668
  8521   0013BA                     u1650:
  8522   0013BA  6A50               	clrf	??_CantaPartAlta^0,c
  8523   0013BC                     u1668:
  8524   0013BC  508D               	movf	141,w,c	;volatile
  8525   0013BE  1850               	xorwf	??_CantaPartAlta^0,w,c
  8526   0013C0  0BFE               	andlw	-2
  8527   0013C2  1850               	xorwf	??_CantaPartAlta^0,w,c
  8528   0013C4  6E8D               	movwf	141,c	;volatile
  8529                           
  8530                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8531   0013C6  BC51               	btfsc	CantaPartAlta@c^0,6,c
  8532   0013C8  EFE8  F009         	goto	u1671
  8533   0013CC  EFEC  F009         	goto	u1670
  8534   0013D0                     u1671:
  8535   0013D0  6A50               	clrf	??_CantaPartAlta^0,c
  8536   0013D2  2A50               	incf	??_CantaPartAlta^0,f,c
  8537   0013D4  EFED  F009         	goto	u1688
  8538   0013D8                     u1670:
  8539   0013D8  6A50               	clrf	??_CantaPartAlta^0,c
  8540   0013DA                     u1688:
  8541   0013DA  4650               	rlncf	??_CantaPartAlta^0,f,c
  8542   0013DC  508D               	movf	141,w,c	;volatile
  8543   0013DE  1850               	xorwf	??_CantaPartAlta^0,w,c
  8544   0013E0  0BFD               	andlw	-3
  8545   0013E2  1850               	xorwf	??_CantaPartAlta^0,w,c
  8546   0013E4  6E8D               	movwf	141,c	;volatile
  8547                           
  8548                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8549   0013E6  BA51               	btfsc	CantaPartAlta@c^0,5,c
  8550   0013E8  EFF8  F009         	goto	u1691
  8551   0013EC  EFFC  F009         	goto	u1690
  8552   0013F0                     u1691:
  8553   0013F0  6A50               	clrf	??_CantaPartAlta^0,c
  8554   0013F2  2A50               	incf	??_CantaPartAlta^0,f,c
  8555   0013F4  EFFD  F009         	goto	u1708
  8556   0013F8                     u1690:
  8557   0013F8  6A50               	clrf	??_CantaPartAlta^0,c
  8558   0013FA                     u1708:
  8559   0013FA  3A50               	swapf	??_CantaPartAlta^0,f,c
  8560   0013FC  4650               	rlncf	??_CantaPartAlta^0,f,c
  8561   0013FE  508A               	movf	138,w,c	;volatile
  8562   001400  1850               	xorwf	??_CantaPartAlta^0,w,c
  8563   001402  0BDF               	andlw	-33
  8564   001404  1850               	xorwf	??_CantaPartAlta^0,w,c
  8565   001406  6E8A               	movwf	138,c	;volatile
  8566                           
  8567                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8568   001408  B851               	btfsc	CantaPartAlta@c^0,4,c
  8569   00140A  EF09  F00A         	goto	u1711
  8570   00140E  EF0D  F00A         	goto	u1710
  8571   001412                     u1711:
  8572   001412  6A50               	clrf	??_CantaPartAlta^0,c
  8573   001414  2A50               	incf	??_CantaPartAlta^0,f,c
  8574   001416  EF0E  F00A         	goto	u1728
  8575   00141A                     u1710:
  8576   00141A  6A50               	clrf	??_CantaPartAlta^0,c
  8577   00141C                     u1728:
  8578   00141C  3A50               	swapf	??_CantaPartAlta^0,f,c
  8579   00141E  508A               	movf	138,w,c	;volatile
  8580   001420  1850               	xorwf	??_CantaPartAlta^0,w,c
  8581   001422  0BEF               	andlw	-17
  8582   001424  1850               	xorwf	??_CantaPartAlta^0,w,c
  8583   001426  6E8A               	movwf	138,c	;volatile
  8584   001428  0012               	return		;funcret
  8585   00142A                     __end_of_CantaPartAlta:
  8586                           	callstack 0
  8587                           
  8588 ;; *************** function _LowRSI *****************
  8589 ;; Defined at:
  8590 ;;		line 34 in file "main.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		None
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1
  8604 ;;      Params:         0       0       0
  8605 ;;      Locals:         0       0       0
  8606 ;;      Temps:          1       0       0
  8607 ;;      Totals:         1       0       0
  8608 ;;Total ram usage:        1 bytes
  8609 ;; Hardware stack levels used: 1
  8610 ;; Hardware stack levels required when called: 2
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		Interrupt level 1
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	intcodelo
  8619   000018                     __pintcodelo:
  8620                           	callstack 0
  8621   000018                     _LowRSI:
  8622                           	callstack 22
  8623                           
  8624                           ;incstack = 0
  8625   000018  8077               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8626   00001A  CFE0 F04F          	movff	bsr,??_LowRSI
  8627   00001E  C04F  FFE0         	movff	??_LowRSI,bsr
  8628   000022  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8629   000024  0010               	retfie	
  8630   000026                     __end_of_LowRSI:
  8631                           	callstack 0
  8632                           
  8633 ;; *************** function _HighRSI *****************
  8634 ;; Defined at:
  8635 ;;		line 30 in file "main.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1
  8649 ;;      Params:         0       0       0
  8650 ;;      Locals:         0       0       0
  8651 ;;      Temps:          0       0       0
  8652 ;;      Totals:         0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used: 1
  8655 ;; Hardware stack levels required when called: 1
  8656 ;; This function calls:
  8657 ;;		_RSI_Timer0
  8658 ;; This function is called by:
  8659 ;;		Interrupt level 2
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	intcode
  8664   000008                     __pintcode:
  8665                           	callstack 0
  8666   000008                     _HighRSI:
  8667                           	callstack 22
  8668                           
  8669                           ;incstack = 0
  8670   000008  8277               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8671   00000A  EF5C  F00D         	goto	int_func
  8672                           
  8673                           	psect	intcode_body
  8674   001AB8                     __pintcode_body:
  8675                           	callstack 22
  8676   001AB8                     int_func:
  8677                           	callstack 22
  8678   001AB8                     
  8679                           ;main.c: 32:      motor_RFID();
  8680   001AB8  A4F2               	btfss	242,2,c	;volatile
  8681   001ABA  EF61  F00D         	goto	i2u148_41
  8682   001ABE  EF63  F00D         	goto	i2u148_40
  8683   001AC2                     i2u148_41:
  8684   001AC2  EF65  F00D         	goto	i2l40
  8685   001AC6                     i2u148_40:
  8686   001AC6  EC45  F00D         	call	_RSI_Timer0	;wreg free
  8687   001ACA                     i2l40:
  8688   001ACA  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8689   001ACC  0011               	retfie		f
  8690   001ACE                     __end_of_HighRSI:
  8691                           	callstack 0
  8692                           
  8693 ;; *************** function _RSI_Timer0 *****************
  8694 ;; Defined at:
  8695 ;;		line 25 in file "TAD_TIMER.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1
  8709 ;;      Params:         0       0       0
  8710 ;;      Locals:         0       0       0
  8711 ;;      Temps:          0       0       0
  8712 ;;      Totals:         0       0       0
  8713 ;;Total ram usage:        0 bytes
  8714 ;; Hardware stack levels used: 1
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_HighRSI
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text56
  8723   001A8A                     __ptext56:
  8724                           	callstack 0
  8725   001A8A                     _RSI_Timer0:
  8726                           	callstack 22
  8727   001A8A                     
  8728                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8729   001A8A  0EF6               	movlw	246
  8730   001A8C  6ED7               	movwf	215,c	;volatile
  8731   001A8E  0E3C               	movlw	60
  8732   001A90  6ED6               	movwf	214,c	;volatile
  8733   001A92                     
  8734                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8735   001A92  94F2               	bcf	4082,2,c	;volatile
  8736   001A94                     
  8737                           ;TAD_TIMER.c: 29:     Tics++;
  8738   001A94  0E01               	movlw	1
  8739   001A96  261B               	addwf	_Tics^0,f,c	;volatile
  8740   001A98  0E00               	movlw	0
  8741   001A9A  221C               	addwfc	(_Tics+1)^0,f,c	;volatile
  8742   001A9C  221D               	addwfc	(_Tics+2)^0,f,c	;volatile
  8743   001A9E  221E               	addwfc	(_Tics+3)^0,f,c	;volatile
  8744   001AA0  0012               	return		;funcret
  8745   001AA2                     __end_of_RSI_Timer0:
  8746                           	callstack 0
  8747                           
  8748                           	psect	rparam
  8749   000001                     ___rparam_used  equ	1
  8750   000000                     ___param_bank   equ	0
  8751   000000                     __Lparam        equ	__Lrparam
  8752   000000                     __Hparam        equ	__Hrparam
  8753                           
  8754                           	psect	temp
  8755   000077                     btemp:
  8756                           	callstack 0
  8757   000077                     	ds	1
  8758   000077                     int$flags       set	btemp
  8759   000078                     wtemp8          set	btemp+1
  8760   000078                     ttemp5          set	btemp+1
  8761   00007B                     ttemp6          set	btemp+4
  8762   00007F                     ttemp7          set	btemp+8
  8763                           
  8764                           	psect	idloc
  8765                           
  8766                           ;Config register IDLOC0 @ 0x200000
  8767                           ;	unspecified, using default values
  8768   200000                     	org	2097152
  8769   200000  FF                 	db	255
  8770                           
  8771                           ;Config register IDLOC1 @ 0x200001
  8772                           ;	unspecified, using default values
  8773   200001                     	org	2097153
  8774   200001  FF                 	db	255
  8775                           
  8776                           ;Config register IDLOC2 @ 0x200002
  8777                           ;	unspecified, using default values
  8778   200002                     	org	2097154
  8779   200002  FF                 	db	255
  8780                           
  8781                           ;Config register IDLOC3 @ 0x200003
  8782                           ;	unspecified, using default values
  8783   200003                     	org	2097155
  8784   200003  FF                 	db	255
  8785                           
  8786                           ;Config register IDLOC4 @ 0x200004
  8787                           ;	unspecified, using default values
  8788   200004                     	org	2097156
  8789   200004  FF                 	db	255
  8790                           
  8791                           ;Config register IDLOC5 @ 0x200005
  8792                           ;	unspecified, using default values
  8793   200005                     	org	2097157
  8794   200005  FF                 	db	255
  8795                           
  8796                           ;Config register IDLOC6 @ 0x200006
  8797                           ;	unspecified, using default values
  8798   200006                     	org	2097158
  8799   200006  FF                 	db	255
  8800                           
  8801                           ;Config register IDLOC7 @ 0x200007
  8802                           ;	unspecified, using default values
  8803   200007                     	org	2097159
  8804   200007  FF                 	db	255
  8805                           
  8806                           	psect	config
  8807                           
  8808                           ; Padding undefined space
  8809   300000                     	org	3145728
  8810   300000  FF                 	db	255
  8811                           
  8812                           ;Config register CONFIG1H @ 0x300001
  8813                           ;	Oscillator
  8814                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8815                           ;	Fail-Safe Clock Monitor Enable bit
  8816                           ;	FCMEN = 0x0, unprogrammed default
  8817                           ;	Internal/External Oscillator Switchover bit
  8818                           ;	IESO = 0x0, unprogrammed default
  8819   300001                     	org	3145729
  8820   300001  06                 	db	6
  8821                           
  8822                           ;Config register CONFIG2L @ 0x300002
  8823                           ;	Power-up Timer Enable bit
  8824                           ;	PWRT = OFF, PWRT disabled
  8825                           ;	Brown-out Reset Enable bits
  8826                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8827                           ;	Brown-out Reset Voltage bits
  8828                           ;	BORV = 0x3, unprogrammed default
  8829   300002                     	org	3145730
  8830   300002  19                 	db	25
  8831                           
  8832                           ;Config register CONFIG2H @ 0x300003
  8833                           ;	Watchdog Timer Enable bit
  8834                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8835                           ;	Watchdog Timer Postscale Select bits
  8836                           ;	WDTPS = 0xF, unprogrammed default
  8837   300003                     	org	3145731
  8838   300003  1E                 	db	30
  8839                           
  8840                           ; Padding undefined space
  8841   300004                     	org	3145732
  8842   300004  FF                 	db	255
  8843                           
  8844                           ;Config register CONFIG3H @ 0x300005
  8845                           ;	CCP2 MUX bit
  8846                           ;	CCP2MX = 0x1, unprogrammed default
  8847                           ;	PORTB A/D Enable bit
  8848                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8849                           ;	Low-Power Timer1 Oscillator Enable bit
  8850                           ;	LPT1OSC = 0x0, unprogrammed default
  8851                           ;	MCLR Pin Enable bit
  8852                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8853   300005                     	org	3145733
  8854   300005  81                 	db	129
  8855                           
  8856                           ;Config register CONFIG4L @ 0x300006
  8857                           ;	Stack Full/Underflow Reset Enable bit
  8858                           ;	STVREN = 0x1, unprogrammed default
  8859                           ;	Single-Supply ICSP Enable bit
  8860                           ;	LVP = OFF, Single-Supply ICSP disabled
  8861                           ;	Boot Block Size Select bits
  8862                           ;	BBSIZ = 0x0, unprogrammed default
  8863                           ;	Extended Instruction Set Enable bit
  8864                           ;	XINST = 0x0, unprogrammed default
  8865                           ;	Background Debugger Enable bit
  8866                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8867   300006                     	org	3145734
  8868   300006  81                 	db	129
  8869                           
  8870                           ; Padding undefined space
  8871   300007                     	org	3145735
  8872   300007  FF                 	db	255
  8873                           
  8874                           ;Config register CONFIG5L @ 0x300008
  8875                           ;	unspecified, using default values
  8876                           ;	Code Protection bit
  8877                           ;	CP0 = 0x1, unprogrammed default
  8878                           ;	Code Protection bit
  8879                           ;	CP1 = 0x1, unprogrammed default
  8880   300008                     	org	3145736
  8881   300008  03                 	db	3
  8882                           
  8883                           ;Config register CONFIG5H @ 0x300009
  8884                           ;	unspecified, using default values
  8885                           ;	Boot Block Code Protection bitProtect Boot
  8886                           ;	CPB = 0x1, unprogrammed default
  8887                           ;	Data EEPROM Code Protection bit
  8888                           ;	CPD = 0x1, unprogrammed default
  8889   300009                     	org	3145737
  8890   300009  C0                 	db	192
  8891                           
  8892                           ;Config register CONFIG6L @ 0x30000A
  8893                           ;	unspecified, using default values
  8894                           ;	Write Protection bit
  8895                           ;	WRT0 = 0x1, unprogrammed default
  8896                           ;	Write Protection bit
  8897                           ;	WRT1 = 0x1, unprogrammed default
  8898   30000A                     	org	3145738
  8899   30000A  03                 	db	3
  8900                           
  8901                           ;Config register CONFIG6H @ 0x30000B
  8902                           ;	unspecified, using default values
  8903                           ;	Configuration Register Write Protection bit
  8904                           ;	WRTC = 0x1, unprogrammed default
  8905                           ;	Boot Block Write Protection bit
  8906                           ;	WRTB = 0x1, unprogrammed default
  8907                           ;	Data EEPROM Write Protection bit
  8908                           ;	WRTD = 0x1, unprogrammed default
  8909   30000B                     	org	3145739
  8910   30000B  E0                 	db	224
  8911                           
  8912                           ;Config register CONFIG7L @ 0x30000C
  8913                           ;	unspecified, using default values
  8914                           ;	Table Read Protection bit
  8915                           ;	EBTR0 = 0x1, unprogrammed default
  8916                           ;	Table Read Protection bit
  8917                           ;	EBTR1 = 0x1, unprogrammed default
  8918   30000C                     	org	3145740
  8919   30000C  03                 	db	3
  8920                           
  8921                           ;Config register CONFIG7H @ 0x30000D
  8922                           ;	unspecified, using default values
  8923                           ;	Boot Block Table Read Protection bit
  8924                           ;	EBTRB = 0x1, unprogrammed default
  8925   30000D                     	org	3145741
  8926   30000D  40                 	db	64
  8927                           tosu	equ	0xFFF
  8928                           tosh	equ	0xFFE
  8929                           tosl	equ	0xFFD
  8930                           stkptr	equ	0xFFC
  8931                           pclatu	equ	0xFFB
  8932                           pclath	equ	0xFFA
  8933                           pcl	equ	0xFF9
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           indf0	equ	0xFEF
  8941                           postinc0	equ	0xFEE
  8942                           postdec0	equ	0xFED
  8943                           preinc0	equ	0xFEC
  8944                           plusw0	equ	0xFEB
  8945                           fsr0h	equ	0xFEA
  8946                           fsr0l	equ	0xFE9
  8947                           wreg	equ	0xFE8
  8948                           indf1	equ	0xFE7
  8949                           postinc1	equ	0xFE6
  8950                           postdec1	equ	0xFE5
  8951                           preinc1	equ	0xFE4
  8952                           plusw1	equ	0xFE3
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           bsr	equ	0xFE0
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           preinc2	equ	0xFDC
  8960                           plusw2	equ	0xFDB
  8961                           fsr2h	equ	0xFDA
  8962                           fsr2l	equ	0xFD9
  8963                           status	equ	0xFD8

Data Sizes:
    Strings     307
    Constant    12
    Data        96
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32     118
    BANK0           128      0      88
    BANK1           256      0       0

Pointer List with Targets:

    LcPutString@s	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    motor_RFID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    motorTerminal@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    sp__getActualUID	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_10(CODE[6]), STR_11(CODE[2]), STR_12(CODE[3]), STR_13(CODE[3]), 
		 -> STR_14(CODE[4]), STR_15(CODE[3]), STR_16(CODE[3]), STR_17(CODE[3]), 
		 -> STR_18(CODE[3]), STR_19(CODE[3]), STR_2(CODE[18]), STR_20(CODE[33]), 
		 -> STR_21(CODE[33]), STR_22(CODE[33]), STR_23(CODE[6]), STR_24(CODE[10]), 
		 -> STR_25(CODE[2]), STR_26(CODE[3]), STR_27(CODE[22]), STR_28(CODE[2]), 
		 -> STR_3(CODE[18]), STR_4(CODE[18]), STR_5(CODE[19]), STR_6(CODE[27]), 
		 -> STR_7(CODE[29]), STR_8(CODE[33]), STR_9(CODE[9]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F1057(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motorTerminal->_printfUID
    _showMenu->_Terminal_SendString
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_GetTecla
    _setLed->_setLEDIntensity
    _initTeclado->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer
    _LcPutString->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcInit->_Espera
    _WaitForBusy->_TI_GetTics
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6713
                             _LcInit
                        _LcPutString
                            _TI_Init
                      _Terminal_Init
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          10    10      0    1662
                                             22 COMRAM    10    10      0
                         _MFRC522_Rd
                         _MFRC522_Wr
                       _getActualUID
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1048
                                             17 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       6     5      1     356
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        1     1      0    1101
                                             17 COMRAM     1     1      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                _Terminal_SendString
                       _getActualUID
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0     101
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     288
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           10     9      1     470
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2     101
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     332
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                       _checkUserUID
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _checkUserUID                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1374
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1374
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     258
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     444
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     444
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     444
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     444
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     228
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Rd                                           5     5      0     135
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcPutString                                          2     0      2    1144
                                             24 COMRAM     2     0      2
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1098
                                             23 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     675
                                             15 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     827
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     104
                                             14 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Espera                                               8     4      4     161
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _LcPutString
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _WaitForBusy
   _TI_Init
   _Terminal_Init
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _checkUserUID
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _Terminal_SendString
       _Terminal_SendChar
     _getActualUID
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Rd
     _MFRC522_Wr
     _getActualUID
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0      88     68.8%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     32     118     93.7%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     206      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Mar 11 17:29:12 2025

        __end_ofGetTecla@F2752 1ECB          ?_Terminal_ReceiveChar 004F                     _RSI_Timer0 1A8A  
     setLEDIntensity@intensity 0051                    MFRC522_Rd@i 0059                    MFRC522_Wr@i 005E  
                           l56 1B58                             l92 16E6                             l85 164C  
                           l79 1982                             l89 1A34                             u10 1918  
                           u11 1914                             u30 1172                             u31 116A  
                           u50 11A6                             u51 11A2                             u60 11C6  
                           u61 11C0                             u70 11E4                             u71 11E0  
                           u48 1174                             u66 11C8           __end_of_checkUserUID 0A14  
                   _TI_GetTics 169C                             bsr 0FE0           ??_InitPortDirections 0050  
                          l220 11AA                            l213 18EC                            l221 11E4  
                          l133 1B64                            l222 11EA                            l215 1918  
                          l232 1A88                            l136 1AB6                            l209 1B36  
                          l241 1B1E                            l250 1B40                            l235 1AF4  
                          l139 1B50                            l228 1144                            l244 1B2A  
                          l180 0F2E                            l308 0214                            l229 1148  
                          l341 046E                            l238 1A10                            l502 1AE0  
                          l247 169A                            l511 1B68                            l424 0E22  
                          l176 1774                            l168 088A                            l520 148A  
                          l425 0E5E                            l417 0DB2                            l345 0498  
                          l450 183C                            l186 0FEA                            l602 159E  
                          l419 0E1E                            l523 1B5E                            l507 1A4E  
                          l444 194E                            l188 0F78                            l508 1A52  
                          l620 18AC                            l453 1428                            l517 18E2  
                          l357 0654                            l462 19B4                            l438 0F26  
                          l630 0A0E                            l614 128A                            l471 1320  
                          l623 17FE                            l456 13A4                            l537 0D76  
                          l459 19E6                            l627 0A12                            l547 10A0  
                          l468 14EA                            l572 0B8E                            l398 0C86  
                          l496 1B04                            l656 17BA                            l667 1876  
                          l499 1A6E                            l688 1B12                            u700 1742  
                          u701 173E                            u710 175A                            u711 1756  
                          u720 1772                            u721 176E                            u810 12B0  
                          u730 0FD0                            u811 12A8                            u830 12CE  
                          u831 12C6                            u850 12EE                            u851 12E6  
                          u828 12B2                            u870 1310                            u871 1308  
                          u848 12D0                            u970 1ADE                            u971 1AD8  
                          u868 12F0                            u888 1312                            u976 1AE0  
                 printfUID@low 005D               ??_CantaPartBaixa 0050                            wreg 0FE8  
          __end_of_LcPutString 1950                 ??_MFRC522_Init 0062                           l2031 1972  
                         l2033 197E                           l2025 1952                           l3001 0972  
                         l2035 1980                           l2027 1960                           l2019 1950  
                         l3003 0984                           l2029 1962                           l2053 1AF6  
                         l2061 1B52                           l1421 1158                           l3021 09F6  
                         l3005 0996                           l3013 09AE                           l3101 17D6  
                         l3111 1806                           l2055 1AFE                           l2063 1B56  
                         l1431 1160                           l1423 115A                           l3023 0A08  
                         l3015 09C0                           l3007 09A8                           l3031 1778  
                         l3103 17E2                           l3041 15FE                           l3121 0E80  
                         l3113 0E62                           l2057 1B00                           l1441 1194  
                         l1433 1180                           l1425 115C                           l1417 114C  
                         l3201 1AAC                           l3017 09D2                           l3033 1788  
                         l3105 17EA                           l3123 0E90                           l3131 0EB4  
                         l3115 0E66                           l2059 1B02                           l3211 1B0A  
                         l1451 11B2                           l1443 1196                           l1435 1182  
                         l1419 1156                           l3203 1AAE                           l3019 09E4  
                         l3035 1798                           l3107 17F6                           l3109 1800  
                         l3045 1616                           l3221 0BA6                           l3213 0B92  
                         l3141 0EEC                           l3133 0EC6                           l3125 0E92  
                         l3117 0E6C                           l1461 11E8                           l1453 11B6  
                         l1445 11A6                           l1437 1188                           l3205 1B38  
                         l3037 17A8                           l3061 1862                           l3053 1840  
                         l3047 1632                           l3039 15F8                           l3231 0BC6  
                         l3223 0BAC                           l3215 0B9A                           l3135 0ED6  
                         l3143 0EFA                           l3127 0EA4                           l3119 0E6E  
                         l1455 11CA                           l1439 118C                           l3207 1B3C  
                         l3063 1870                           l3055 1850                           l3311 06FE  
                         l3303 06DE                           l3071 1546                           l3151 142A  
                         l3049 1642                           l3241 0C14                           l3233 0BCC  
                         l3217 0B9E                           l3145 0F0A                           l3137 0ED8  
                         l3129 0EA6                           l3209 1B06                           l1457 11D2  
                         l1449 11AC                           l1801 1B4E                           l3065 1874  
                         l3057 1854                           l3321 0722                           l3313 070E  
                         l3305 06E4                           l3081 1596                           l3073 1556  
                         l3161 1200                           l3153 11EC                           l3401 0A86  
                         l3251 0C52                           l3243 0C2C                           l3235 0BE4  
                         l3219 0BA2                           l3147 0F1A                           l3139 0EEA  
                         l1395 18E6                           l1459 11D4                           l3067 164E  
                         l3059 185C                           l1811 175A                           l1803 1730  
                         l3331 073C                           l3323 0728                           l3315 0712  
                         l3307 06F4                           l3075 1566                           l3171 121C  
                         l3163 1208                           l3411 0ABA                           l3403 0A8C  
                         l3091 17C2                           l3253 0C56                           l3245 0C30  
                         l3237 0BF6                           l3229 0BB4                           l3149 0F1C  
                         l3261 191A                           l1397 18EE                           l3069 1652  
                         l1821 0F3C                           l1813 1760                           l1805 1732  
                         l3333 074C                           l3341 078C                           l3317 0716  
                         l3077 1576                           l3085 159C                           l3181 126A  
                         l3173 1232                           l3165 1214                           l3421 0AFA  
                         l3413 0AC6                           l3405 0A94                           l3093 17C6  
                         l3501 010A                           l2711 1A14                           l3255 0C60  
                         l3247 0C3A                           l3239 0C0E                           l3263 191E  
                         l1399 18F0                           l1823 0F44                           l1831 0F52  
                         l1815 1772                           l1807 1742                           l3351 07DC  
                         l3343 079C                           l3335 076C                           l3319 071C  
                         l3271 065A                           l3079 1586                           l3191 189E  
                         l3183 126E                           l3175 123E                           l3159 11F4  
                         l3431 0B42                           l3423 0B02                           l3407 0AA0  
                         l3095 17CA                           l3511 0142                           l3503 0118  
                         l1921 129E                           l2713 1A16                           l2801 149E  
                         l3257 0C66                           l3249 0C40                           l3265 192E  
                         l3193 1AA2                           l1833 0F7E                           l1825 0F4C  
                         l1817 0F28                           l1809 1748                           l3361 0828  
                         l3353 07E2                           l3345 07BC                           l3337 077E  
                         l3281 0680                           l3273 0660                           l3185 1878  
                         l3177 1242                           l3433 0B44                           l3417 0ACE  
                         l3409 0AA6                           l3097 17CE                           l3089 17BE  
                         l3601 0376                           l3521 0188                           l3513 014A  
                         l3505 012C                           l1923 131E                           l2715 1A32  
                         l2811 14AE                           l2803 14A0                           l3259 0C6A  
                         l3267 1932                           l2723 10A4                           l3195 1AA6  
                         l1835 0F86                           l1819 0F34                           l1843 0F8E  
                         l3371 0848                           l3347 07CE                           l3339 0784  
                         l3291 06B4                           l3283 0690                           l3275 0670  
                         l2707 1A54                           l3187 1882                           l3179 125E  
                         l3435 0B56                           l3427 0B12                           l3419 0AE2  
                         l3099 17D2                           l3611 03A6                           l3531 01FA  
                         l3523 019A                           l3515 0156                           l3507 0132  
                         l3451 0038                           l2717 169E                           l2813 14B0  
                         l2805 14A2                           l2741 10E0                           l2725 10AC  
                         l3197 1AA8                           l1845 0FC2                           l3373 084C  
                         l3365 0830                           l3357 07F6                           l3349 07D4  
                         l3293 06B8                           l3285 0696                           l3277 0674  
                         l3269 0656                           l3189 1890                           l3437 0B5E  
                         l3429 0B26                           l3381 0A18                           l3445 0B70  
                         l3605 037C                           l3525 01AA                           l3533 0202  
                         l3517 015E                           l3509 013A                           l3461 005E  
                         l3453 003C                           l3701 063E                           l1919 128E  
                         l2719 16B2                           l2823 14DA                           l2815 14B2  
                         l2807 14AA                           l1871 1B2C                           l2743 10E2  
                         l2735 10B4                           l2727 10AE                           l3199 1AAA  
                         l1847 0FDA                           l3367 0836                           l3359 0806  
                         l3295 06BC                           l3287 069E                           l3279 0678  
                         l2831 18C6                           l2911 0CD0                           l3439 0B6A  
                         l3391 0A48                           l3383 0A2C                           l3631 040E  
                         l3623 03CC                           l3615 03B0                           l3607 0384  
                         l3543 021C                           l3527 01DA                           l3519 016E  
                         l3471 008A                           l3463 0066                           l3455 0044  
                         l3447 002A                           l2817 14B4                           l2809 14AC  
                         l2761 112C                           l2753 10FE                           l2745 10E8  
                         l2737 10D4                           l2729 10B0                           l2841 1B14  
                         l2833 19E8                           l3369 0846                           l3297 06C4  
                         l3289 06A4                           l3377 0854                           l2825 18AE  
                         l2921 0D10                           l2913 0CDC                           l2905 0C9C  
                         l3393 0A4C                           l3385 0A30                           l3641 0438  
                         l3633 041E                           l3625 03DC                           l3609 0392  
                         l3561 02DC                           l3553 02C0                           l3545 02AA  
                         l3537 020A                           l3529 01E6                           l3481 00B8  
                         l3473 0092                           l3465 006E                           l3457 004C  
                         l3449 002E                           l3721 16F8                    _TI_NewTimer 15F8  
                         l2819 14B6                           l2851 0D9A                           l2763 1132  
                         l2755 111E                           l2747 10EA                           l2739 10DA  
                         l2843 1B20                           l2835 19EA                           l1795 1B60  
                         l3299 06D4                           l1963 1ACE                           l2771 1A38  
                         l2827 18B2                           l2931 0D4E                           l2923 0D1C  
                         l2915 0CE2                           l2907 0CB0                           l3395 0A52  
                         l3387 0A34                           l3379 0A14                           l3651 0470  
                         l3643 0442                           l3635 0426                           l3627 03F6  
                         l3619 03BC                           l3571 02FE                           l3563 02E4  
                         l3547 02B4                           l3539 020E                           l3491 00E4  
                         l3483 00C2                           l3475 009E                           l3467 007A  
                         l3459 0056                           l3731 170E                           l3723 16FC  
                         l3715 16E8                           l2781 19C6                           l2861 0DE6  
                         l2853 0DA2                           l2845 0D7A                           l2765 1134  
                         l2757 1124                           l2749 10FA                           l2837 19F0  
                         l1869 1B5A                           l2773 1A38                           l2829 18C2  
                         l2933 0D6A                           l2925 0D22                           l2917 0CF0  
                         l2909 0CC0                           l3397 0A66                           l3389 0A44  
                         l2941 0FF4                           l3661 04B4                           l3653 0478  
                         l3645 0446                           l3637 042E                           l3629 0406  
                         l3557 02CC                           l3549 02B8                           l3493 00EC  
                         l3485 00CA                           l3477 00A6                           l3469 0082  
                         l3733 171A                           l3725 1700                           l3717 16F0  
                         l2767 13A8                           l2791 19DA                           l2783 19CC  
                         l2863 0DF2                           l2855 0DB8                           l2871 0E4A  
                         l2847 0D7E                           l2759 112A                           l2775 1A72  
                         l2839 19F8                           l1799 1B4A                           l1967 1B66  
                         l2927 0D3E                           l2919 0D00                           l3399 0A7A  
                         l2951 103A                           l2943 1002                           l2935 0FEC  
                         l3671 04E2                           l3663 04C8                           l3655 0488  
                         l3647 044E                           l3639 0430                           l3591 0350  
                         l3583 032A                           l3575 030E                           l3567 02F2  
                         l3495 00F8                           l3487 00D4                           l3479 00B0  
                         l3735 171E                           l3727 170A                           l3719 16F4  
                         l2769 1324                           l2793 19DC                           l2785 19CE  
                         l2881 1994                           l2873 0E4E                           l2865 0E04  
                         l2857 0DC8                           l2849 0D8E                           l2777 1AE4  
                         l2929 0D4A                           l2961 1078                           l2953 1046  
                         l2945 100E                           l3665 04D0                           l3657 049A  
                         l3649 045E                           l3497 00FA                           l3489 00DC  
                         l3737 1722                           l3729 170C                           l2795 19DE  
                         l2787 19D0                           l2779 19B8                           l2891 19A8  
                         l2883 199A                           l2875 0E56                           l2859 0DD4  
                         l2971 08C4                           l2963 1094                           l2955 104C  
                         l2947 101A                           l3691 056A                           l3683 0532  
                         l3675 0502                           l3667 04D4                           l3659 04A2  
                         l3595 035E                           l3587 0338                           l3579 031A  
                         l3499 0102                           l3739 1726                           l2789 19D2  
                         l2797 148C                           l2893 19AA                           l2885 199C  
                         l2877 0E5A                           l2869 0E2C                           l2973 08D6  
                         l2981 08EE                           l2965 088C                           l2957 1068  
                         l2949 102A                           l3685 0542                           l3677 0524  
                         l3669 04DA                           l2799 1498                           l2895 19AC  
                         l2887 199E                           l2879 1986                           l3847 0FA4  
                         l2991 0948                           l2983 0900                           l2975 08E8  
                         l2967 08A0                           l2959 1074                           l3687 0558  
                         l3679 052A                           l3599 036A                           l2889 19A0  
                         l2985 0912                           l2969 08B2                           l2897 0C88  
                         l3697 0570                           l3689 0560                           l2987 0924  
                         l2899 0C94                           l2989 0936                           l2997 094E  
                         l2999 0960                           STR_1 1FF3                           STR_2 1FB0  
                         STR_3 1FC2                           STR_4 1FB0                           STR_5 1F9D  
                         STR_6 1F6C                           STR_7 1F4F                           STR_8 1EEC  
                         STR_9 1FDE                           u1000 1972                           u1001 196E  
                         u2000 08E8                           u2001 08E4                           u2010 0900  
                         u2011 08FC                           u2100 09A8                           u2020 0912  
                         u2101 09A4                           u2021 090E                           u2110 09C0  
                         u2030 0924                           u2111 09BC                           u2031 0920  
                         u2200 1632                           u2120 09D2                           u2040 0936  
                         u2201 162E                           u2121 09CE                           u2041 0932  
                         u2130 09E4                           u2050 0948                           u2210 1850  
                         u2131 09E0                           u2051 0944                           u2211 184C  
                         u2300 0EA4                           u2140 09F6                           u2060 0960  
                         u2220 1556                           u2301 0EA0                           u2141 09F2  
                         u2061 095C                           u2221 1552                           u2310 0EC6  
                         u2150 0A08                           u2070 0972                           u2230 1566  
                         u2311 0EC2                           u2151 0A04                           u2071 096E  
                         u2231 1562                           _LATC 0F8B                           u2320 0ED6  
                         u2080 0984                           u2160 1788                           u2400 0670  
                         u2240 1576                           _LATD 0F8C                           u2321 0ED2  
                         u2081 0980                           u2161 1784                           u2401 066C  
                         u2241 1572                           u2330 0EEA                           u1610 10FA  
                         u2090 0996                           u2170 1798                           u2410 0690  
                         u2250 1586                           u2331 0EE6                           u1611 10F6  
                         u2091 0992                           u2171 1794                           u2411 068C  
                         u2251 1582                           u2340 0F0A                           u1620 1110  
                         u2180 17A8                           u2500 079C                           u2420 06B4  
                         u2260 1596                           u2341 0F06                           u1621 1108  
                         u2181 17A4                           u2501 0798                           u2421 06B0  
                         u2261 1592                           u1710 141A                           u2270 183C  
                         u2190 1612                           u2350 0F1A                           u2510 07BC  
                         u2430 06D4                           u1711 1412                           u2271 1838  
                         u2191 160E                           u2351 0F16                           u2511 07B8  
                         u2431 06D0                           u2280 0E80                           u1640 1144  
                         u1608 10C8                           u2520 07CE                           u2440 06F4  
                         u2360 125E                           u2600 0A7A                           u2281 0E7C  
                         u1641 1140                           u2521 07CA                           u2441 06F0  
                         u2361 125A                           u2601 0A76                           u1650 13BA  
                         u1730 1336                           u2290 0E90                           u2530 07F2  
                         u2450 070E                           u1810 1A4E                           u2370 128A  
                         u2610 0ABA                           u1651 13B2                           u1731 132E  
                         u2291 0E8C                           u2531 07EE                           u2451 070A  
                         u1811 1A4A                           u2371 1286                           u2611 0AB6  
                         u1708 13FA                           u1820 14D6                           u2380 0C86  
                         u2540 0806                           u2460 0738                           u1580 1A66  
                         u1900 0D00                           u2620 0AE2                           u2700 01FA  
                         u1821 14D2                           u2381 0C82                           u2541 0802  
                         u2461 0734                           u1581 1A5E                           u1901 0CFC  
                         u2621 0ADE                           u2701 01F6                           u1670 13D8  
                         u1750 1354                           u1830 14EA                           u2390 194E  
                         u1638 1112                           u1590 10C6                           u2550 0828  
                         u2470 074C                           u1910 0D3E                           u2630 0B26  
                         u2710 0392                           u1671 13D0                           u1751 134C  
                         u1831 14E6                           u2391 194A                           u1591 10BE  
                         u2551 0824                           u2471 0748                           u1911 0D3A  
                         u2631 0B22                           u2711 038E                           u1728 141C  
                         u1808 1398                           u2560 0846                           u2480 076C  
                         u1840 18E2                           u1920 0D6A                           u2640 0B56  
                         u2800 04C4                           u2720 03A6                           u2561 0842  
                         u2481 0768                           u1841 18DE                           u1921 0D66  
                         u2641 0B52                           u2801 04C0                           u2721 03A2  
                         u1690 13F8                           u1770 1374                           u1850 0D8E  
                         u2490 077E                           u2570 0A2C                           u1930 102A  
                         u2810 04FE                           u2730 03DC                           u2650 0118  
                         u1691 13F0                           u1771 136C                           u1851 0D8A  
                         u2491 077A                           u2571 0A28                           u1931 1026  
                         u2811 04FA                           u2731 03D8                           u2651 0114  
                         u1668 13BC                           u1748 1338                           u1860 0DC8  
                         u1588 1A68                           u2580 0A44                           u1940 1068  
                         u2820 0524                           u2740 03F6                           u2660 012C  
                         u1861 0DC4                           u2581 0A40                           u1941 1064  
                         u2821 0520                           u2741 03F2                           u2661 0128  
                         u1790 1396                           u1870 0DE6                           u2590 0A66  
                         u1950 1094                           u2830 0542                           u2750 045E  
                         u2670 016E                           u1791 138E                           u1871 0DE2  
                         u2591 0A62                           u1951 1090                           u2831 053E  
                         u2751 045A                           u2671 016A                           u1688 13DA  
                         u1768 1356                           u1880 0E04                           u1960 08A0  
                         u2760 046E                           u2680 0188                           u1881 0E00  
                         u1961 089C                           u2761 046A                           u2681 0184  
                         u1970 08B2                           u1890 0CC0                           u2770 0488  
                         u2690 01AA                           u1971 08AE                           u1891 0CBC  
                         u2771 0484                           u2691 01A6                           u1788 1376  
                         u1980 08C4                           u2780 0498                           u1981 08C0  
                         u2781 0494                           u1990 08D6                           u2790 04B4  
                         u1991 08D2                           u2791 04B0                           i1l45 001E  
                         i2l40 1ACA                           i2l74 1AA0                           _TMR0 0FD6  
     setLEDIntensity@userIndex 0052                     _ActualLeds 0041                           _Tics 001B  
        _showAllConfigurations 11EC                           _Rows 0031               motor_datos@state 0028  
                         _main 16E8                  printfUID@high 005C                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 0077                __end_of_TI_Init 1984  
                         prodh 0FF4                           prodl 0FF3                           start 0026  
              __end_of_CantaIR 19E8                __end_of_HighRSI 1ACE                  LcInit@columns 0065  
           setCurrentUser@UID0 0064             setCurrentUser@UID1 0060             setCurrentUser@UID2 0061  
           setCurrentUser@UID3 0062             setCurrentUser@UID4 0063                   ___param_bank 0000  
              printLedConfig@i 005A                ??_MFRC522_Reset 005F                   ?_initTeclado 004F  
                  Espera@Timer 005D                          ?_main 004F                          STR_10 1FED  
                        STR_11 1FFC                          STR_12 1FBF                          STR_20 1F2E  
                        STR_13 1FE4                          STR_21 1ECB                          STR_14 1FF8  
                        STR_22 1F0D                          STR_15 1FBF                          STR_23 1FE7  
                        STR_16 1FBF                          STR_24 1FD4                          STR_17 1FBF  
                        STR_25 1FFA                          STR_26 1FBF                          STR_18 1FBF  
                        STR_19 1FBF                          STR_27 1F87                          STR_28 1F9B  
                        _T0CON 0FD5                          _RCREG 0FAE                          _RCSTA 0FAB  
                        _SPBRG 0FAF                          _PORTD 0F83                          _TRISA 0F92  
                        _TRISD 0F95                          _TRISE 0F96                          _TXREG 0FAD  
                        _TXSTA 0FAC           __end_of_getActualUID 15A0                          _Filas 0040  
              motor_RFID@i_571 006D                          _Timer 004D                motor_RFID@irqEn 003A  
                        _index 0021                motor_RFID@unLen 0023                   _TI_ResetTics 1A12  
                        _tecla 003E                motor_RFID@state 003C                          _timer 004E  
                        _state 003D                setLed@userIndex 0025                          tablat 0FF5  
            _MFRC522_Clear_Bit 1A70                          ttemp5 0078                          ttemp6 007B  
                        ttemp7 007F                 _saveHourToData 1878                          status 0FD8  
                        wtemp8 0078             Terminal_SendChar@c 0053             ?_MFRC522_Clear_Bit 005F  
             __end_of_LcGotoXY 0E60               ??_printLedConfig 0057               __end_of_GetTecla 0FEC  
            _MFRC522_AntennaOn 1B14        EscriuPrimeraOrdre@ordre 0051         ??_Terminal_ReceiveChar 0050  
              __initialization 14EC                   __end_of_main 1730             ?_MFRC522_AntennaOn 004F  
          ??_MFRC522_Clear_Bit 0060                 _setCurrentUser 17BC                    ?_RSI_Timer0 004F  
               TI_Init@counter 0050               _initPortsTeclado 1B4A                    ?_TI_GetTics 0050  
                       ??_main 006F                    _LcPutString 191A            ??_MFRC522_AntennaOn 0061  
                __activetblptr 0002             MFRC522_Rd@ucResult 0058                         _ADCON1 0FC1  
              MFRC522_Wr@value 005A      __end_of_MFRC522_Clear_Bit 1A8A                      ??_TI_Init 0050  
       ?_showAllConfigurations 004F         __end_of_saveHourToData 18AE                      ??_CantaIR 0052  
       Terminal_SendString@str 0054                         i2l2013 1A8A                         i2l2015 1A92  
                       i2l2017 1A94                         i2l2581 1AB8                         i2l2583 1AC6  
               LcGotoXY@Fisics 0063                 LcGotoXY@Column 0065                  ??_WaitForBusy 005D  
                       _TMR0IF 7F92                      ??_HighRSI 004F      __end_of_MFRC522_AntennaOn 1B20  
                       _LcInit 0B90               __end_of_delay_us 191A                         _Espera 1800  
                       _LowRSI 0018         __end_of_setCurrentUser 1800                   _LcGotoXY$805 0061  
                       _RowAct 002F                         _Timers 0001           __end_of_MFRC522_Init 169C  
             __end_of_initRFID 1B42             motorTerminal@index 002B               __end_of_initLeds 1B14  
           motorTerminal@state 002C                         clear_0 1532                         _setLed 183E  
                       isa$std 0001                   __pdataCOMRAM 006F               __end_of_showMenu 148C  
                 __mediumconst 1EBE                _setLEDIntensity 1776                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8              __end_of_CantaData 19B6  
        __end_of_Terminal_Init 1B06         motor_RFID@differentUID 006A                ?_saveHourToData 0050  
                 _checkUserUID 088C                     __accesstop 0080        __end_of__initialization 1538  
            __end_of_LcPutChar 0F28                delay_us@howMany 0053                  ___rparam_used 0001  
                 ??_MFRC522_Rd 0055                   ??_MFRC522_Wr 005B             _MFRC522_AntennaOff 1B20  
                setLed@modeLED 0027                ?_setCurrentUser 0060                 __pcstackCOMRAM 004F  
          __end_of_WaitForBusy 14EC                   __pidataBANK0 15A0            ?_MFRC522_AntennaOff 004F  
         TI_NewTimer@Comptador 0052              __end_of_ReadFilas 1B66               MFRC522_Rd@ucAddr 0057  
                    ?_LcGotoXY 005E              printLedConfig@val 0059              ??_MFRC522_Set_Bit 0060  
           __end_of_MFRC522_Rd 11EC             __end_of_MFRC522_Wr 114A                      ?_GetTecla 004F  
         ??_MFRC522_AntennaOff 0062                   ?_TI_NewTimer 0050                    setLed@tecla 0053  
        __end_of_motorTerminal 0B90                        ?_LcInit 0065                  _CantaPartAlta 13A6  
       TI_NewTimer@TimerHandle 0050                        ?_Espera 005D                        ?_LowRSI 004F  
                 _getActualUID 1546               MFRC522_Wr@ucAddr 005D        TI_ResetTics@TimerHandle 0050  
                _writeColumnas 1730                        _BAUDCON 0FB8                        ?_setLed 004F  
      __end_of_setLEDIntensity 17BC                        LcInit@i 0067                     ??_LcGotoXY 005F  
                    ?_delay_us 004F                     ??_GetTecla 0050              _Terminal_SendChar 1A36  
                      _TI_Init 1950             ?_Terminal_SendChar 004F       __end_of_initPortsTeclado 1B52  
                      _CantaIR 19B6                      ?_initRFID 004F                      ?_initLeds 004F  
                      _HighRSI 0008                    _WaitForBusy 148C                 ?_CantaPartAlta 004F  
                      _Columns 0030              motor_RFID@TagType 0035            ??_Terminal_SendChar 0053  
                      __Hparam 0000                        __Lparam 0000                      ?_showMenu 004F  
                 ??_RSI_Timer0 004F                 ?_writeColumnas 004F                   ??_TI_GetTics 0054  
            motor_RFID@allZero 0033                        __pcinit 14EC          __end_of_MFRC522_Reset 1A12  
                      __ramtop 0200              motor_RFID@_status 0036                   ?_LcPutString 0067  
                      __ptext0 16E8                        __ptext1 002A                        __ptext2 17BC  
                      __ptext3 0FEC                        __ptext4 0A14                        __ptext5 142A  
                      __ptext6 11EC                        __ptext7 1878                        __ptext8 0C88  
                      __ptext9 18AE                  ?_motorTeclado 004F                      CantaIR@IR 0052  
            __end_of_initPorts 1B5A      __end_of_Terminal_SendChar 1A54              motor_RFID@waitIRq 0039  
     motorTerminal@currentUser 0060                     ??_delay_us 0050        ??_showAllConfigurations 0056  
                      _pointer 001F                WaitForBusy@Busy 005D                   _MFRC522_Init 164E  
               __pintcode_body 1AB8           end_of_initialization 1538                    motor_RFID@i 0037  
                  motor_RFID@n 0038                     ??_initRFID 0062             __end_of_RSI_Timer0 1AA2  
                   ??_initLeds 0053                  __Lmediumconst 1EBE                        int_func 1AB8  
           __end_of_TI_GetTics 16E8             saveHourToData@hour 0050              __end_of_printfUID 0D78  
                   ??_showMenu 0056                     _motor_RFID 002A                        postdec1 0FE5  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
                GetTecla@F2752 1EBF         showAllConfigurations@i 0058         showAllConfigurations@j 0056  
             ?_setLEDIntensity 0050                 ??_motorTeclado 0060                      _PORTBbits 0F81  
                    _PORTCbits 0F82            _Terminal_SendString 18AE          TI_GetTics@TimerHandle 005C  
             ??_saveHourToData 0051                      _TRISBbits 0F93                      _TRISCbits 0F94  
                    _TRISEbits 0F96                 setLed@ledIndex 0026                ??_CantaPartAlta 0050  
             ??_setCurrentUser 0064                      _CantaData 1984           ?_Terminal_SendString 0054  
               __end_of_LcInit 0C88              MFRC522_Rd@Address 0056                ??_writeColumnas 0050  
                    _LcPutChar 0E60                 __end_of_Espera 183E                 __end_of_LowRSI 0026  
 __end_of_Terminal_RXAvailable 1AE2                _MFRC522_Set_Bit 1AE2     __end_of_EscriuPrimeraOrdre 1322  
                __pidataCOMRAM 1B42                      _ColumnAct 002E                 __end_of_setLed 1878  
          start_initialization 14EC                      _ReadFilas 1B60   __end_of_Terminal_TXAvailable 1A70  
                   ?_CantaData 004F          ??_Terminal_SendString 0056                       ??_LcInit 0066  
           printLedConfig@leds 0056                       ??_Espera 0061                       ??_LowRSI 004F  
                   ?_LcPutChar 004F                    ?_motor_RFID 004F              motorTerminal@hour 0073  
                ??_initTeclado 0053                    __pdataBANK0 0080                       ??_setLed 0053  
                  __pbssCOMRAM 0001                     ?_ReadFilas 004F              MFRC522_Wr@Address 005C  
                ?_TI_ResetTics 004F                       ?_TI_Init 004F                       ?_CantaIR 004F  
            ?_initPortsTeclado 004F                 _CantaPartBaixa 1322                       ?_HighRSI 004F  
                 ?_WaitForBusy 004F           __end_of_motorTeclado 088C             ??_initPortsTeclado 0050  
      __end_of_MFRC522_Set_Bit 1AF6            motor_RFID@fifoLevel 006B            MFRC522_Set_Bit@addr 0060  
          MFRC522_Set_Bit@mask 005F                      __pintcode 0008                  __pmediumconst 1EBE  
   __end_of_InitPortDirections 1B38           _timer@TAD_LEDS$F1057 004C                CantaPartBaixa@c 0051  
                  __pintcodelo 0018                    __smallconst 1EBE            __end_of_initTeclado 1AB8  
               ??_TI_ResetTics 0050                      _initPorts 1B52  __end_of_showAllConfigurations 128C  
       __end_of_CantaPartBaixa 13A6                  _Terminal_Init 1AF6           _Terminal_RXAvailable 1ACE  
                  ??_CantaData 0052                       _LATAbits 0F89                       _LATBbits 0F8A  
                     _LATCbits 0F8B                       _LATEbits 0F8D                      delay_us@x 0054  
              _hashtag_pressed 002D                       i2u148_40 1AC6                       i2u148_41 1AC2  
                     _PIR1bits 0F9E                    ??_LcPutChar 0066          motor_RFID@lastBitsVal 006C  
                    _printfUID 0C88                   LcPutString@s 0067           _Terminal_TXAvailable 1A54  
                 GetTecla@fila 005F                 _printLedConfig 0FEC                     printfUID@i 005E  
       motor_RFID@tempRegValue 0032                       Espera@ms 005F                       _LcGotoXY 0D78  
                  ??_ReadFilas 0050                       _GetTecla 0F28   __end_of_Terminal_ReceiveChar 1B6A  
                   ?_initPorts 004F                  motor_RFID@UID 0015                 ?_Terminal_Init 004F  
                  LcGotoXY@Row 005E                      copy_data0 1500                      copy_data1 1520  
              ?_CantaPartBaixa 004F                       _Columnas 003F          ?_Terminal_RXAvailable 004F  
                ?_checkUserUID 004F          motor_RFID@currentUser 0069                  _motorTerminal 0A14  
             ?_MFRC522_Set_Bit 005F                       __Hrparam 0000          MFRC522_Clear_Bit@addr 0061  
        MFRC522_Clear_Bit@mask 005F                       __Lrparam 0000         __end_of_printLedConfig 10A2  
                   ?_printfUID 0056                    _initTeclado 1AA2          ?_Terminal_TXAvailable 0050  
           motor_RFID@checksum 0034                    _currentTime 006F                    _currentUser 0047  
                     _delay_us 18E4                       __ptext10 1A36                       __ptext11 1A54  
           _EscriuPrimeraOrdre 128C                       __ptext20 1B5A                       __ptext12 1546  
                     __ptext21 1B60                       __ptext13 1B66                       __ptext30 1B20  
                     __ptext22 0F28                       __ptext14 1ACE                       __ptext31 1A70  
                     __ptext23 1AA2                       __ptext15 0656                       __ptext40 191A  
                     __ptext32 10A2                       __ptext24 1B4A                       __ptext16 1730  
                     __ptext41 0E60                       __ptext33 114A                       __ptext25 1B38  
                     __ptext17 183E                       __ptext50 128C                       __ptext42 0D78  
                     __ptext34 18E4                       __ptext26 164E                       __ptext18 1776  
                     __ptext51 19B6                       __ptext43 1984                       __ptext35 1B2C  
                     __ptext27 19E8                       __ptext19 088C                       __ptext52 1322  
                     __ptext44 0B90                       __ptext36 1B52                       __ptext28 1B14  
                     __ptext53 13A6                       __ptext45 148C                       __ptext37 1B06  
                     __ptext29 1AE2                       __ptext46 15F8                       __ptext38 1AF6  
                     __ptext47 1800                       __ptext39 1950                       __ptext56 1A8A  
                     __ptext48 1A12                       __ptext49 169C                  ??_TI_NewTimer 0051  
               CantaPartAlta@c 0051                 ??_checkUserUID 0050                       _initRFID 1B38  
                     _initLeds 1B06            ?_EscriuPrimeraOrdre 004F                 ?_motorTerminal 004F  
        __end_of_CantaPartAlta 142A                  CantaData@Data 0052                       _new_user 0029  
                   _MFRC522_Rd 114A                     _MFRC522_Wr 10A2                  ?_getActualUID 0050  
                 ??_motor_RFID 0065                       isa$xinst 0000                       _showMenu 142A  
         __end_of_TI_ResetTics 1A36                       int$flags 0077          __end_of_writeColumnas 1776  
           motor_RFID@substate 003B                ?_printLedConfig 0056                       _userUIDs 0080  
                _printfUID$926 0058                  _printfUID$928 005A           ??_EscriuPrimeraOrdre 0050  
                   LcInit@rows 0066                  _MFRC522_Reset 19E8                   _motorTeclado 0656  
                   _INTCONbits 0FF2                ??_Terminal_Init 0050      TI_GetTics@CopiaTicsActual 0058  
            _new_configuration 002A                    ??_initPorts 0050         ??_Terminal_RXAvailable 0050  
               _configurations 00C0              _hashtag_pressed3s 1B5A    __end_of_Terminal_SendString 18E4  
           __end_of_motor_RFID 0656                       intlevel1 0000                       intlevel2 0000  
           ?_hashtag_pressed3s 004F                     LcPutChar@c 0066            __end_of_TI_NewTimer 164E  
               ??_getActualUID 0052            ??_hashtag_pressed3s 0050         ??_Terminal_TXAvailable 0052  
         _Terminal_ReceiveChar 1B66                    ??_printfUID 0057                 ?_MFRC522_Reset 004F  
                ??_LcPutString 0069         motor_RFID@backBitsCalc 0067             _printLedConfig$936 0057  
    __end_of_hashtag_pressed3s 1B60             _InitPortDirections 1B2C     __end_of_MFRC522_AntennaOff 1B2C  
                ?_MFRC522_Init 004F                ??_motorTerminal 0060            ?_InitPortDirections 004F  
      setLEDIntensity@ledIndex 0050           printfUID@currentUser 0056              ??_setLEDIntensity 0052  
              GetTecla@columna 005E                    ?_MFRC522_Rd 004F                    ?_MFRC522_Wr 005A  
               GetTecla@keymap 0052  

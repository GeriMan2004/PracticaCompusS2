

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 06 19:06:14 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 05/12/2024 GMT
    63                           ; 
    64                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4321 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000FE0                     bsr             equ	4064
    97   000FE9                     fsr0            equ	4073
    98   000FEA                     fsr0h           equ	4074
    99   000FE9                     fsr0l           equ	4073
   100   000FE1                     fsr1            equ	4065
   101   000FE2                     fsr1h           equ	4066
   102   000FE1                     fsr1l           equ	4065
   103   000FD9                     fsr2            equ	4057
   104   000FDA                     fsr2h           equ	4058
   105   000FD9                     fsr2l           equ	4057
   106   000FEF                     indf0           equ	4079
   107   000FE7                     indf1           equ	4071
   108   000FDF                     indf2           equ	4063
   109   000FF2                     intcon          equ	4082
   110   000000                     nvmcon          equ	0
   111   000FF9                     pcl             equ	4089
   112   000FFA                     pclath          equ	4090
   113   000FFB                     pclatu          equ	4091
   114   000FEB                     plusw0          equ	4075
   115   000FE3                     plusw1          equ	4067
   116   000FDB                     plusw2          equ	4059
   117   000FED                     postdec0        equ	4077
   118   000FE5                     postdec1        equ	4069
   119   000FDD                     postdec2        equ	4061
   120   000FEE                     postinc0        equ	4078
   121   000FE6                     postinc1        equ	4070
   122   000FDE                     postinc2        equ	4062
   123   000FEC                     preinc0         equ	4076
   124   000FE4                     preinc1         equ	4068
   125   000FDC                     preinc2         equ	4060
   126   000FF3                     prod            equ	4083
   127   000FF4                     prodh           equ	4084
   128   000FF3                     prodl           equ	4083
   129   000FD8                     status          equ	4056
   130   000FF5                     tablat          equ	4085
   131   000FF6                     tblptr          equ	4086
   132   000FF7                     tblptrh         equ	4087
   133   000FF6                     tblptrl         equ	4086
   134   000FF8                     tblptru         equ	4088
   135   000FFD                     tosl            equ	4093
   136   000FE8                     wreg            equ	4072
   137   000F80                     PORTA           equ	3968	;# 
   138   000F81                     PORTB           equ	3969	;# 
   139   000F82                     PORTC           equ	3970	;# 
   140   000F83                     PORTD           equ	3971	;# 
   141   000F84                     PORTE           equ	3972	;# 
   142   000F89                     LATA            equ	3977	;# 
   143   000F8A                     LATB            equ	3978	;# 
   144   000F8B                     LATC            equ	3979	;# 
   145   000F8C                     LATD            equ	3980	;# 
   146   000F8D                     LATE            equ	3981	;# 
   147   000F92                     TRISA           equ	3986	;# 
   148   000F92                     DDRA            equ	3986	;# 
   149   000F93                     TRISB           equ	3987	;# 
   150   000F93                     DDRB            equ	3987	;# 
   151   000F94                     TRISC           equ	3988	;# 
   152   000F94                     DDRC            equ	3988	;# 
   153   000F95                     TRISD           equ	3989	;# 
   154   000F95                     DDRD            equ	3989	;# 
   155   000F96                     TRISE           equ	3990	;# 
   156   000F96                     DDRE            equ	3990	;# 
   157   000F9B                     OSCTUNE         equ	3995	;# 
   158   000F9D                     PIE1            equ	3997	;# 
   159   000F9E                     PIR1            equ	3998	;# 
   160   000F9F                     IPR1            equ	3999	;# 
   161   000FA0                     PIE2            equ	4000	;# 
   162   000FA1                     PIR2            equ	4001	;# 
   163   000FA2                     IPR2            equ	4002	;# 
   164   000FA6                     EECON1          equ	4006	;# 
   165   000FA7                     EECON2          equ	4007	;# 
   166   000FA8                     EEDATA          equ	4008	;# 
   167   000FA9                     EEADR           equ	4009	;# 
   168   000FAB                     RCSTA           equ	4011	;# 
   169   000FAB                     RCSTA1          equ	4011	;# 
   170   000FAC                     TXSTA           equ	4012	;# 
   171   000FAC                     TXSTA1          equ	4012	;# 
   172   000FAD                     TXREG           equ	4013	;# 
   173   000FAD                     TXREG1          equ	4013	;# 
   174   000FAE                     RCREG           equ	4014	;# 
   175   000FAE                     RCREG1          equ	4014	;# 
   176   000FAF                     SPBRG           equ	4015	;# 
   177   000FAF                     SPBRG1          equ	4015	;# 
   178   000FB0                     SPBRGH          equ	4016	;# 
   179   000FB1                     T3CON           equ	4017	;# 
   180   000FB2                     TMR3            equ	4018	;# 
   181   000FB2                     TMR3L           equ	4018	;# 
   182   000FB3                     TMR3H           equ	4019	;# 
   183   000FB4                     CMCON           equ	4020	;# 
   184   000FB5                     CVRCON          equ	4021	;# 
   185   000FB6                     ECCP1AS         equ	4022	;# 
   186   000FB7                     ECCP1DEL        equ	4023	;# 
   187   000FB7                     PWM1CON         equ	4023	;# 
   188   000FB8                     BAUDCON         equ	4024	;# 
   189   000FB8                     BAUDCTL         equ	4024	;# 
   190   000FBA                     CCP2CON         equ	4026	;# 
   191   000FBB                     CCPR2           equ	4027	;# 
   192   000FBB                     CCPR2L          equ	4027	;# 
   193   000FBC                     CCPR2H          equ	4028	;# 
   194   000FBD                     CCP1CON         equ	4029	;# 
   195   000FBD                     ECCP1CON        equ	4029	;# 
   196   000FBE                     CCPR1           equ	4030	;# 
   197   000FBE                     CCPR1L          equ	4030	;# 
   198   000FBF                     CCPR1H          equ	4031	;# 
   199   000FC0                     ADCON2          equ	4032	;# 
   200   000FC1                     ADCON1          equ	4033	;# 
   201   000FC2                     ADCON0          equ	4034	;# 
   202   000FC3                     ADRES           equ	4035	;# 
   203   000FC3                     ADRESL          equ	4035	;# 
   204   000FC4                     ADRESH          equ	4036	;# 
   205   000FC5                     SSPCON2         equ	4037	;# 
   206   000FC6                     SSPCON1         equ	4038	;# 
   207   000FC7                     SSPSTAT         equ	4039	;# 
   208   000FC8                     SSPADD          equ	4040	;# 
   209   000FC9                     SSPBUF          equ	4041	;# 
   210   000FCA                     T2CON           equ	4042	;# 
   211   000FCB                     PR2             equ	4043	;# 
   212   000FCB                     MEMCON          equ	4043	;# 
   213   000FCC                     TMR2            equ	4044	;# 
   214   000FCD                     T1CON           equ	4045	;# 
   215   000FCE                     TMR1            equ	4046	;# 
   216   000FCE                     TMR1L           equ	4046	;# 
   217   000FCF                     TMR1H           equ	4047	;# 
   218   000FD0                     RCON            equ	4048	;# 
   219   000FD1                     WDTCON          equ	4049	;# 
   220   000FD2                     HLVDCON         equ	4050	;# 
   221   000FD2                     LVDCON          equ	4050	;# 
   222   000FD3                     OSCCON          equ	4051	;# 
   223   000FD5                     T0CON           equ	4053	;# 
   224   000FD6                     TMR0            equ	4054	;# 
   225   000FD6                     TMR0L           equ	4054	;# 
   226   000FD7                     TMR0H           equ	4055	;# 
   227   000FD8                     STATUS          equ	4056	;# 
   228   000FD9                     FSR2            equ	4057	;# 
   229   000FD9                     FSR2L           equ	4057	;# 
   230   000FDA                     FSR2H           equ	4058	;# 
   231   000FDB                     PLUSW2          equ	4059	;# 
   232   000FDC                     PREINC2         equ	4060	;# 
   233   000FDD                     POSTDEC2        equ	4061	;# 
   234   000FDE                     POSTINC2        equ	4062	;# 
   235   000FDF                     INDF2           equ	4063	;# 
   236   000FE0                     BSR             equ	4064	;# 
   237   000FE1                     FSR1            equ	4065	;# 
   238   000FE1                     FSR1L           equ	4065	;# 
   239   000FE2                     FSR1H           equ	4066	;# 
   240   000FE3                     PLUSW1          equ	4067	;# 
   241   000FE4                     PREINC1         equ	4068	;# 
   242   000FE5                     POSTDEC1        equ	4069	;# 
   243   000FE6                     POSTINC1        equ	4070	;# 
   244   000FE7                     INDF1           equ	4071	;# 
   245   000FE8                     WREG            equ	4072	;# 
   246   000FE9                     FSR0            equ	4073	;# 
   247   000FE9                     FSR0L           equ	4073	;# 
   248   000FEA                     FSR0H           equ	4074	;# 
   249   000FEB                     PLUSW0          equ	4075	;# 
   250   000FEC                     PREINC0         equ	4076	;# 
   251   000FED                     POSTDEC0        equ	4077	;# 
   252   000FEE                     POSTINC0        equ	4078	;# 
   253   000FEF                     INDF0           equ	4079	;# 
   254   000FF0                     INTCON3         equ	4080	;# 
   255   000FF1                     INTCON2         equ	4081	;# 
   256   000FF2                     INTCON          equ	4082	;# 
   257   000FF3                     PROD            equ	4083	;# 
   258   000FF3                     PRODL           equ	4083	;# 
   259   000FF4                     PRODH           equ	4084	;# 
   260   000FF5                     TABLAT          equ	4085	;# 
   261   000FF6                     TBLPTR          equ	4086	;# 
   262   000FF6                     TBLPTRL         equ	4086	;# 
   263   000FF7                     TBLPTRH         equ	4087	;# 
   264   000FF8                     TBLPTRU         equ	4088	;# 
   265   000FF9                     PCLAT           equ	4089	;# 
   266   000FF9                     PC              equ	4089	;# 
   267   000FF9                     PCL             equ	4089	;# 
   268   000FFA                     PCLATH          equ	4090	;# 
   269   000FFB                     PCLATU          equ	4091	;# 
   270   000FFC                     STKPTR          equ	4092	;# 
   271   000FFD                     TOS             equ	4093	;# 
   272   000FFD                     TOSL            equ	4093	;# 
   273   000FFE                     TOSH            equ	4094	;# 
   274   000FFF                     TOSU            equ	4095	;# 
   275   000F80                     PORTA           equ	3968	;# 
   276   000F81                     PORTB           equ	3969	;# 
   277   000F82                     PORTC           equ	3970	;# 
   278   000F83                     PORTD           equ	3971	;# 
   279   000F84                     PORTE           equ	3972	;# 
   280   000F89                     LATA            equ	3977	;# 
   281   000F8A                     LATB            equ	3978	;# 
   282   000F8B                     LATC            equ	3979	;# 
   283   000F8C                     LATD            equ	3980	;# 
   284   000F8D                     LATE            equ	3981	;# 
   285   000F92                     TRISA           equ	3986	;# 
   286   000F92                     DDRA            equ	3986	;# 
   287   000F93                     TRISB           equ	3987	;# 
   288   000F93                     DDRB            equ	3987	;# 
   289   000F94                     TRISC           equ	3988	;# 
   290   000F94                     DDRC            equ	3988	;# 
   291   000F95                     TRISD           equ	3989	;# 
   292   000F95                     DDRD            equ	3989	;# 
   293   000F96                     TRISE           equ	3990	;# 
   294   000F96                     DDRE            equ	3990	;# 
   295   000F9B                     OSCTUNE         equ	3995	;# 
   296   000F9D                     PIE1            equ	3997	;# 
   297   000F9E                     PIR1            equ	3998	;# 
   298   000F9F                     IPR1            equ	3999	;# 
   299   000FA0                     PIE2            equ	4000	;# 
   300   000FA1                     PIR2            equ	4001	;# 
   301   000FA2                     IPR2            equ	4002	;# 
   302   000FA6                     EECON1          equ	4006	;# 
   303   000FA7                     EECON2          equ	4007	;# 
   304   000FA8                     EEDATA          equ	4008	;# 
   305   000FA9                     EEADR           equ	4009	;# 
   306   000FAB                     RCSTA           equ	4011	;# 
   307   000FAB                     RCSTA1          equ	4011	;# 
   308   000FAC                     TXSTA           equ	4012	;# 
   309   000FAC                     TXSTA1          equ	4012	;# 
   310   000FAD                     TXREG           equ	4013	;# 
   311   000FAD                     TXREG1          equ	4013	;# 
   312   000FAE                     RCREG           equ	4014	;# 
   313   000FAE                     RCREG1          equ	4014	;# 
   314   000FAF                     SPBRG           equ	4015	;# 
   315   000FAF                     SPBRG1          equ	4015	;# 
   316   000FB0                     SPBRGH          equ	4016	;# 
   317   000FB1                     T3CON           equ	4017	;# 
   318   000FB2                     TMR3            equ	4018	;# 
   319   000FB2                     TMR3L           equ	4018	;# 
   320   000FB3                     TMR3H           equ	4019	;# 
   321   000FB4                     CMCON           equ	4020	;# 
   322   000FB5                     CVRCON          equ	4021	;# 
   323   000FB6                     ECCP1AS         equ	4022	;# 
   324   000FB7                     ECCP1DEL        equ	4023	;# 
   325   000FB7                     PWM1CON         equ	4023	;# 
   326   000FB8                     BAUDCON         equ	4024	;# 
   327   000FB8                     BAUDCTL         equ	4024	;# 
   328   000FBA                     CCP2CON         equ	4026	;# 
   329   000FBB                     CCPR2           equ	4027	;# 
   330   000FBB                     CCPR2L          equ	4027	;# 
   331   000FBC                     CCPR2H          equ	4028	;# 
   332   000FBD                     CCP1CON         equ	4029	;# 
   333   000FBD                     ECCP1CON        equ	4029	;# 
   334   000FBE                     CCPR1           equ	4030	;# 
   335   000FBE                     CCPR1L          equ	4030	;# 
   336   000FBF                     CCPR1H          equ	4031	;# 
   337   000FC0                     ADCON2          equ	4032	;# 
   338   000FC1                     ADCON1          equ	4033	;# 
   339   000FC2                     ADCON0          equ	4034	;# 
   340   000FC3                     ADRES           equ	4035	;# 
   341   000FC3                     ADRESL          equ	4035	;# 
   342   000FC4                     ADRESH          equ	4036	;# 
   343   000FC5                     SSPCON2         equ	4037	;# 
   344   000FC6                     SSPCON1         equ	4038	;# 
   345   000FC7                     SSPSTAT         equ	4039	;# 
   346   000FC8                     SSPADD          equ	4040	;# 
   347   000FC9                     SSPBUF          equ	4041	;# 
   348   000FCA                     T2CON           equ	4042	;# 
   349   000FCB                     PR2             equ	4043	;# 
   350   000FCB                     MEMCON          equ	4043	;# 
   351   000FCC                     TMR2            equ	4044	;# 
   352   000FCD                     T1CON           equ	4045	;# 
   353   000FCE                     TMR1            equ	4046	;# 
   354   000FCE                     TMR1L           equ	4046	;# 
   355   000FCF                     TMR1H           equ	4047	;# 
   356   000FD0                     RCON            equ	4048	;# 
   357   000FD1                     WDTCON          equ	4049	;# 
   358   000FD2                     HLVDCON         equ	4050	;# 
   359   000FD2                     LVDCON          equ	4050	;# 
   360   000FD3                     OSCCON          equ	4051	;# 
   361   000FD5                     T0CON           equ	4053	;# 
   362   000FD6                     TMR0            equ	4054	;# 
   363   000FD6                     TMR0L           equ	4054	;# 
   364   000FD7                     TMR0H           equ	4055	;# 
   365   000FD8                     STATUS          equ	4056	;# 
   366   000FD9                     FSR2            equ	4057	;# 
   367   000FD9                     FSR2L           equ	4057	;# 
   368   000FDA                     FSR2H           equ	4058	;# 
   369   000FDB                     PLUSW2          equ	4059	;# 
   370   000FDC                     PREINC2         equ	4060	;# 
   371   000FDD                     POSTDEC2        equ	4061	;# 
   372   000FDE                     POSTINC2        equ	4062	;# 
   373   000FDF                     INDF2           equ	4063	;# 
   374   000FE0                     BSR             equ	4064	;# 
   375   000FE1                     FSR1            equ	4065	;# 
   376   000FE1                     FSR1L           equ	4065	;# 
   377   000FE2                     FSR1H           equ	4066	;# 
   378   000FE3                     PLUSW1          equ	4067	;# 
   379   000FE4                     PREINC1         equ	4068	;# 
   380   000FE5                     POSTDEC1        equ	4069	;# 
   381   000FE6                     POSTINC1        equ	4070	;# 
   382   000FE7                     INDF1           equ	4071	;# 
   383   000FE8                     WREG            equ	4072	;# 
   384   000FE9                     FSR0            equ	4073	;# 
   385   000FE9                     FSR0L           equ	4073	;# 
   386   000FEA                     FSR0H           equ	4074	;# 
   387   000FEB                     PLUSW0          equ	4075	;# 
   388   000FEC                     PREINC0         equ	4076	;# 
   389   000FED                     POSTDEC0        equ	4077	;# 
   390   000FEE                     POSTINC0        equ	4078	;# 
   391   000FEF                     INDF0           equ	4079	;# 
   392   000FF0                     INTCON3         equ	4080	;# 
   393   000FF1                     INTCON2         equ	4081	;# 
   394   000FF2                     INTCON          equ	4082	;# 
   395   000FF3                     PROD            equ	4083	;# 
   396   000FF3                     PRODL           equ	4083	;# 
   397   000FF4                     PRODH           equ	4084	;# 
   398   000FF5                     TABLAT          equ	4085	;# 
   399   000FF6                     TBLPTR          equ	4086	;# 
   400   000FF6                     TBLPTRL         equ	4086	;# 
   401   000FF7                     TBLPTRH         equ	4087	;# 
   402   000FF8                     TBLPTRU         equ	4088	;# 
   403   000FF9                     PCLAT           equ	4089	;# 
   404   000FF9                     PC              equ	4089	;# 
   405   000FF9                     PCL             equ	4089	;# 
   406   000FFA                     PCLATH          equ	4090	;# 
   407   000FFB                     PCLATU          equ	4091	;# 
   408   000FFC                     STKPTR          equ	4092	;# 
   409   000FFD                     TOS             equ	4093	;# 
   410   000FFD                     TOSL            equ	4093	;# 
   411   000FFE                     TOSH            equ	4094	;# 
   412   000FFF                     TOSU            equ	4095	;# 
   413   000F80                     PORTA           equ	3968	;# 
   414   000F81                     PORTB           equ	3969	;# 
   415   000F82                     PORTC           equ	3970	;# 
   416   000F83                     PORTD           equ	3971	;# 
   417   000F84                     PORTE           equ	3972	;# 
   418   000F89                     LATA            equ	3977	;# 
   419   000F8A                     LATB            equ	3978	;# 
   420   000F8B                     LATC            equ	3979	;# 
   421   000F8C                     LATD            equ	3980	;# 
   422   000F8D                     LATE            equ	3981	;# 
   423   000F92                     TRISA           equ	3986	;# 
   424   000F92                     DDRA            equ	3986	;# 
   425   000F93                     TRISB           equ	3987	;# 
   426   000F93                     DDRB            equ	3987	;# 
   427   000F94                     TRISC           equ	3988	;# 
   428   000F94                     DDRC            equ	3988	;# 
   429   000F95                     TRISD           equ	3989	;# 
   430   000F95                     DDRD            equ	3989	;# 
   431   000F96                     TRISE           equ	3990	;# 
   432   000F96                     DDRE            equ	3990	;# 
   433   000F9B                     OSCTUNE         equ	3995	;# 
   434   000F9D                     PIE1            equ	3997	;# 
   435   000F9E                     PIR1            equ	3998	;# 
   436   000F9F                     IPR1            equ	3999	;# 
   437   000FA0                     PIE2            equ	4000	;# 
   438   000FA1                     PIR2            equ	4001	;# 
   439   000FA2                     IPR2            equ	4002	;# 
   440   000FA6                     EECON1          equ	4006	;# 
   441   000FA7                     EECON2          equ	4007	;# 
   442   000FA8                     EEDATA          equ	4008	;# 
   443   000FA9                     EEADR           equ	4009	;# 
   444   000FAB                     RCSTA           equ	4011	;# 
   445   000FAB                     RCSTA1          equ	4011	;# 
   446   000FAC                     TXSTA           equ	4012	;# 
   447   000FAC                     TXSTA1          equ	4012	;# 
   448   000FAD                     TXREG           equ	4013	;# 
   449   000FAD                     TXREG1          equ	4013	;# 
   450   000FAE                     RCREG           equ	4014	;# 
   451   000FAE                     RCREG1          equ	4014	;# 
   452   000FAF                     SPBRG           equ	4015	;# 
   453   000FAF                     SPBRG1          equ	4015	;# 
   454   000FB0                     SPBRGH          equ	4016	;# 
   455   000FB1                     T3CON           equ	4017	;# 
   456   000FB2                     TMR3            equ	4018	;# 
   457   000FB2                     TMR3L           equ	4018	;# 
   458   000FB3                     TMR3H           equ	4019	;# 
   459   000FB4                     CMCON           equ	4020	;# 
   460   000FB5                     CVRCON          equ	4021	;# 
   461   000FB6                     ECCP1AS         equ	4022	;# 
   462   000FB7                     ECCP1DEL        equ	4023	;# 
   463   000FB7                     PWM1CON         equ	4023	;# 
   464   000FB8                     BAUDCON         equ	4024	;# 
   465   000FB8                     BAUDCTL         equ	4024	;# 
   466   000FBA                     CCP2CON         equ	4026	;# 
   467   000FBB                     CCPR2           equ	4027	;# 
   468   000FBB                     CCPR2L          equ	4027	;# 
   469   000FBC                     CCPR2H          equ	4028	;# 
   470   000FBD                     CCP1CON         equ	4029	;# 
   471   000FBD                     ECCP1CON        equ	4029	;# 
   472   000FBE                     CCPR1           equ	4030	;# 
   473   000FBE                     CCPR1L          equ	4030	;# 
   474   000FBF                     CCPR1H          equ	4031	;# 
   475   000FC0                     ADCON2          equ	4032	;# 
   476   000FC1                     ADCON1          equ	4033	;# 
   477   000FC2                     ADCON0          equ	4034	;# 
   478   000FC3                     ADRES           equ	4035	;# 
   479   000FC3                     ADRESL          equ	4035	;# 
   480   000FC4                     ADRESH          equ	4036	;# 
   481   000FC5                     SSPCON2         equ	4037	;# 
   482   000FC6                     SSPCON1         equ	4038	;# 
   483   000FC7                     SSPSTAT         equ	4039	;# 
   484   000FC8                     SSPADD          equ	4040	;# 
   485   000FC9                     SSPBUF          equ	4041	;# 
   486   000FCA                     T2CON           equ	4042	;# 
   487   000FCB                     PR2             equ	4043	;# 
   488   000FCB                     MEMCON          equ	4043	;# 
   489   000FCC                     TMR2            equ	4044	;# 
   490   000FCD                     T1CON           equ	4045	;# 
   491   000FCE                     TMR1            equ	4046	;# 
   492   000FCE                     TMR1L           equ	4046	;# 
   493   000FCF                     TMR1H           equ	4047	;# 
   494   000FD0                     RCON            equ	4048	;# 
   495   000FD1                     WDTCON          equ	4049	;# 
   496   000FD2                     HLVDCON         equ	4050	;# 
   497   000FD2                     LVDCON          equ	4050	;# 
   498   000FD3                     OSCCON          equ	4051	;# 
   499   000FD5                     T0CON           equ	4053	;# 
   500   000FD6                     TMR0            equ	4054	;# 
   501   000FD6                     TMR0L           equ	4054	;# 
   502   000FD7                     TMR0H           equ	4055	;# 
   503   000FD8                     STATUS          equ	4056	;# 
   504   000FD9                     FSR2            equ	4057	;# 
   505   000FD9                     FSR2L           equ	4057	;# 
   506   000FDA                     FSR2H           equ	4058	;# 
   507   000FDB                     PLUSW2          equ	4059	;# 
   508   000FDC                     PREINC2         equ	4060	;# 
   509   000FDD                     POSTDEC2        equ	4061	;# 
   510   000FDE                     POSTINC2        equ	4062	;# 
   511   000FDF                     INDF2           equ	4063	;# 
   512   000FE0                     BSR             equ	4064	;# 
   513   000FE1                     FSR1            equ	4065	;# 
   514   000FE1                     FSR1L           equ	4065	;# 
   515   000FE2                     FSR1H           equ	4066	;# 
   516   000FE3                     PLUSW1          equ	4067	;# 
   517   000FE4                     PREINC1         equ	4068	;# 
   518   000FE5                     POSTDEC1        equ	4069	;# 
   519   000FE6                     POSTINC1        equ	4070	;# 
   520   000FE7                     INDF1           equ	4071	;# 
   521   000FE8                     WREG            equ	4072	;# 
   522   000FE9                     FSR0            equ	4073	;# 
   523   000FE9                     FSR0L           equ	4073	;# 
   524   000FEA                     FSR0H           equ	4074	;# 
   525   000FEB                     PLUSW0          equ	4075	;# 
   526   000FEC                     PREINC0         equ	4076	;# 
   527   000FED                     POSTDEC0        equ	4077	;# 
   528   000FEE                     POSTINC0        equ	4078	;# 
   529   000FEF                     INDF0           equ	4079	;# 
   530   000FF0                     INTCON3         equ	4080	;# 
   531   000FF1                     INTCON2         equ	4081	;# 
   532   000FF2                     INTCON          equ	4082	;# 
   533   000FF3                     PROD            equ	4083	;# 
   534   000FF3                     PRODL           equ	4083	;# 
   535   000FF4                     PRODH           equ	4084	;# 
   536   000FF5                     TABLAT          equ	4085	;# 
   537   000FF6                     TBLPTR          equ	4086	;# 
   538   000FF6                     TBLPTRL         equ	4086	;# 
   539   000FF7                     TBLPTRH         equ	4087	;# 
   540   000FF8                     TBLPTRU         equ	4088	;# 
   541   000FF9                     PCLAT           equ	4089	;# 
   542   000FF9                     PC              equ	4089	;# 
   543   000FF9                     PCL             equ	4089	;# 
   544   000FFA                     PCLATH          equ	4090	;# 
   545   000FFB                     PCLATU          equ	4091	;# 
   546   000FFC                     STKPTR          equ	4092	;# 
   547   000FFD                     TOS             equ	4093	;# 
   548   000FFD                     TOSL            equ	4093	;# 
   549   000FFE                     TOSH            equ	4094	;# 
   550   000FFF                     TOSU            equ	4095	;# 
   551   000F80                     PORTA           equ	3968	;# 
   552   000F81                     PORTB           equ	3969	;# 
   553   000F82                     PORTC           equ	3970	;# 
   554   000F83                     PORTD           equ	3971	;# 
   555   000F84                     PORTE           equ	3972	;# 
   556   000F89                     LATA            equ	3977	;# 
   557   000F8A                     LATB            equ	3978	;# 
   558   000F8B                     LATC            equ	3979	;# 
   559   000F8C                     LATD            equ	3980	;# 
   560   000F8D                     LATE            equ	3981	;# 
   561   000F92                     TRISA           equ	3986	;# 
   562   000F92                     DDRA            equ	3986	;# 
   563   000F93                     TRISB           equ	3987	;# 
   564   000F93                     DDRB            equ	3987	;# 
   565   000F94                     TRISC           equ	3988	;# 
   566   000F94                     DDRC            equ	3988	;# 
   567   000F95                     TRISD           equ	3989	;# 
   568   000F95                     DDRD            equ	3989	;# 
   569   000F96                     TRISE           equ	3990	;# 
   570   000F96                     DDRE            equ	3990	;# 
   571   000F9B                     OSCTUNE         equ	3995	;# 
   572   000F9D                     PIE1            equ	3997	;# 
   573   000F9E                     PIR1            equ	3998	;# 
   574   000F9F                     IPR1            equ	3999	;# 
   575   000FA0                     PIE2            equ	4000	;# 
   576   000FA1                     PIR2            equ	4001	;# 
   577   000FA2                     IPR2            equ	4002	;# 
   578   000FA6                     EECON1          equ	4006	;# 
   579   000FA7                     EECON2          equ	4007	;# 
   580   000FA8                     EEDATA          equ	4008	;# 
   581   000FA9                     EEADR           equ	4009	;# 
   582   000FAB                     RCSTA           equ	4011	;# 
   583   000FAB                     RCSTA1          equ	4011	;# 
   584   000FAC                     TXSTA           equ	4012	;# 
   585   000FAC                     TXSTA1          equ	4012	;# 
   586   000FAD                     TXREG           equ	4013	;# 
   587   000FAD                     TXREG1          equ	4013	;# 
   588   000FAE                     RCREG           equ	4014	;# 
   589   000FAE                     RCREG1          equ	4014	;# 
   590   000FAF                     SPBRG           equ	4015	;# 
   591   000FAF                     SPBRG1          equ	4015	;# 
   592   000FB0                     SPBRGH          equ	4016	;# 
   593   000FB1                     T3CON           equ	4017	;# 
   594   000FB2                     TMR3            equ	4018	;# 
   595   000FB2                     TMR3L           equ	4018	;# 
   596   000FB3                     TMR3H           equ	4019	;# 
   597   000FB4                     CMCON           equ	4020	;# 
   598   000FB5                     CVRCON          equ	4021	;# 
   599   000FB6                     ECCP1AS         equ	4022	;# 
   600   000FB7                     ECCP1DEL        equ	4023	;# 
   601   000FB7                     PWM1CON         equ	4023	;# 
   602   000FB8                     BAUDCON         equ	4024	;# 
   603   000FB8                     BAUDCTL         equ	4024	;# 
   604   000FBA                     CCP2CON         equ	4026	;# 
   605   000FBB                     CCPR2           equ	4027	;# 
   606   000FBB                     CCPR2L          equ	4027	;# 
   607   000FBC                     CCPR2H          equ	4028	;# 
   608   000FBD                     CCP1CON         equ	4029	;# 
   609   000FBD                     ECCP1CON        equ	4029	;# 
   610   000FBE                     CCPR1           equ	4030	;# 
   611   000FBE                     CCPR1L          equ	4030	;# 
   612   000FBF                     CCPR1H          equ	4031	;# 
   613   000FC0                     ADCON2          equ	4032	;# 
   614   000FC1                     ADCON1          equ	4033	;# 
   615   000FC2                     ADCON0          equ	4034	;# 
   616   000FC3                     ADRES           equ	4035	;# 
   617   000FC3                     ADRESL          equ	4035	;# 
   618   000FC4                     ADRESH          equ	4036	;# 
   619   000FC5                     SSPCON2         equ	4037	;# 
   620   000FC6                     SSPCON1         equ	4038	;# 
   621   000FC7                     SSPSTAT         equ	4039	;# 
   622   000FC8                     SSPADD          equ	4040	;# 
   623   000FC9                     SSPBUF          equ	4041	;# 
   624   000FCA                     T2CON           equ	4042	;# 
   625   000FCB                     PR2             equ	4043	;# 
   626   000FCB                     MEMCON          equ	4043	;# 
   627   000FCC                     TMR2            equ	4044	;# 
   628   000FCD                     T1CON           equ	4045	;# 
   629   000FCE                     TMR1            equ	4046	;# 
   630   000FCE                     TMR1L           equ	4046	;# 
   631   000FCF                     TMR1H           equ	4047	;# 
   632   000FD0                     RCON            equ	4048	;# 
   633   000FD1                     WDTCON          equ	4049	;# 
   634   000FD2                     HLVDCON         equ	4050	;# 
   635   000FD2                     LVDCON          equ	4050	;# 
   636   000FD3                     OSCCON          equ	4051	;# 
   637   000FD5                     T0CON           equ	4053	;# 
   638   000FD6                     TMR0            equ	4054	;# 
   639   000FD6                     TMR0L           equ	4054	;# 
   640   000FD7                     TMR0H           equ	4055	;# 
   641   000FD8                     STATUS          equ	4056	;# 
   642   000FD9                     FSR2            equ	4057	;# 
   643   000FD9                     FSR2L           equ	4057	;# 
   644   000FDA                     FSR2H           equ	4058	;# 
   645   000FDB                     PLUSW2          equ	4059	;# 
   646   000FDC                     PREINC2         equ	4060	;# 
   647   000FDD                     POSTDEC2        equ	4061	;# 
   648   000FDE                     POSTINC2        equ	4062	;# 
   649   000FDF                     INDF2           equ	4063	;# 
   650   000FE0                     BSR             equ	4064	;# 
   651   000FE1                     FSR1            equ	4065	;# 
   652   000FE1                     FSR1L           equ	4065	;# 
   653   000FE2                     FSR1H           equ	4066	;# 
   654   000FE3                     PLUSW1          equ	4067	;# 
   655   000FE4                     PREINC1         equ	4068	;# 
   656   000FE5                     POSTDEC1        equ	4069	;# 
   657   000FE6                     POSTINC1        equ	4070	;# 
   658   000FE7                     INDF1           equ	4071	;# 
   659   000FE8                     WREG            equ	4072	;# 
   660   000FE9                     FSR0            equ	4073	;# 
   661   000FE9                     FSR0L           equ	4073	;# 
   662   000FEA                     FSR0H           equ	4074	;# 
   663   000FEB                     PLUSW0          equ	4075	;# 
   664   000FEC                     PREINC0         equ	4076	;# 
   665   000FED                     POSTDEC0        equ	4077	;# 
   666   000FEE                     POSTINC0        equ	4078	;# 
   667   000FEF                     INDF0           equ	4079	;# 
   668   000FF0                     INTCON3         equ	4080	;# 
   669   000FF1                     INTCON2         equ	4081	;# 
   670   000FF2                     INTCON          equ	4082	;# 
   671   000FF3                     PROD            equ	4083	;# 
   672   000FF3                     PRODL           equ	4083	;# 
   673   000FF4                     PRODH           equ	4084	;# 
   674   000FF5                     TABLAT          equ	4085	;# 
   675   000FF6                     TBLPTR          equ	4086	;# 
   676   000FF6                     TBLPTRL         equ	4086	;# 
   677   000FF7                     TBLPTRH         equ	4087	;# 
   678   000FF8                     TBLPTRU         equ	4088	;# 
   679   000FF9                     PCLAT           equ	4089	;# 
   680   000FF9                     PC              equ	4089	;# 
   681   000FF9                     PCL             equ	4089	;# 
   682   000FFA                     PCLATH          equ	4090	;# 
   683   000FFB                     PCLATU          equ	4091	;# 
   684   000FFC                     STKPTR          equ	4092	;# 
   685   000FFD                     TOS             equ	4093	;# 
   686   000FFD                     TOSL            equ	4093	;# 
   687   000FFE                     TOSH            equ	4094	;# 
   688   000FFF                     TOSU            equ	4095	;# 
   689   000F80                     PORTA           equ	3968	;# 
   690   000F81                     PORTB           equ	3969	;# 
   691   000F82                     PORTC           equ	3970	;# 
   692   000F83                     PORTD           equ	3971	;# 
   693   000F84                     PORTE           equ	3972	;# 
   694   000F89                     LATA            equ	3977	;# 
   695   000F8A                     LATB            equ	3978	;# 
   696   000F8B                     LATC            equ	3979	;# 
   697   000F8C                     LATD            equ	3980	;# 
   698   000F8D                     LATE            equ	3981	;# 
   699   000F92                     TRISA           equ	3986	;# 
   700   000F92                     DDRA            equ	3986	;# 
   701   000F93                     TRISB           equ	3987	;# 
   702   000F93                     DDRB            equ	3987	;# 
   703   000F94                     TRISC           equ	3988	;# 
   704   000F94                     DDRC            equ	3988	;# 
   705   000F95                     TRISD           equ	3989	;# 
   706   000F95                     DDRD            equ	3989	;# 
   707   000F96                     TRISE           equ	3990	;# 
   708   000F96                     DDRE            equ	3990	;# 
   709   000F9B                     OSCTUNE         equ	3995	;# 
   710   000F9D                     PIE1            equ	3997	;# 
   711   000F9E                     PIR1            equ	3998	;# 
   712   000F9F                     IPR1            equ	3999	;# 
   713   000FA0                     PIE2            equ	4000	;# 
   714   000FA1                     PIR2            equ	4001	;# 
   715   000FA2                     IPR2            equ	4002	;# 
   716   000FA6                     EECON1          equ	4006	;# 
   717   000FA7                     EECON2          equ	4007	;# 
   718   000FA8                     EEDATA          equ	4008	;# 
   719   000FA9                     EEADR           equ	4009	;# 
   720   000FAB                     RCSTA           equ	4011	;# 
   721   000FAB                     RCSTA1          equ	4011	;# 
   722   000FAC                     TXSTA           equ	4012	;# 
   723   000FAC                     TXSTA1          equ	4012	;# 
   724   000FAD                     TXREG           equ	4013	;# 
   725   000FAD                     TXREG1          equ	4013	;# 
   726   000FAE                     RCREG           equ	4014	;# 
   727   000FAE                     RCREG1          equ	4014	;# 
   728   000FAF                     SPBRG           equ	4015	;# 
   729   000FAF                     SPBRG1          equ	4015	;# 
   730   000FB0                     SPBRGH          equ	4016	;# 
   731   000FB1                     T3CON           equ	4017	;# 
   732   000FB2                     TMR3            equ	4018	;# 
   733   000FB2                     TMR3L           equ	4018	;# 
   734   000FB3                     TMR3H           equ	4019	;# 
   735   000FB4                     CMCON           equ	4020	;# 
   736   000FB5                     CVRCON          equ	4021	;# 
   737   000FB6                     ECCP1AS         equ	4022	;# 
   738   000FB7                     ECCP1DEL        equ	4023	;# 
   739   000FB7                     PWM1CON         equ	4023	;# 
   740   000FB8                     BAUDCON         equ	4024	;# 
   741   000FB8                     BAUDCTL         equ	4024	;# 
   742   000FBA                     CCP2CON         equ	4026	;# 
   743   000FBB                     CCPR2           equ	4027	;# 
   744   000FBB                     CCPR2L          equ	4027	;# 
   745   000FBC                     CCPR2H          equ	4028	;# 
   746   000FBD                     CCP1CON         equ	4029	;# 
   747   000FBD                     ECCP1CON        equ	4029	;# 
   748   000FBE                     CCPR1           equ	4030	;# 
   749   000FBE                     CCPR1L          equ	4030	;# 
   750   000FBF                     CCPR1H          equ	4031	;# 
   751   000FC0                     ADCON2          equ	4032	;# 
   752   000FC1                     ADCON1          equ	4033	;# 
   753   000FC2                     ADCON0          equ	4034	;# 
   754   000FC3                     ADRES           equ	4035	;# 
   755   000FC3                     ADRESL          equ	4035	;# 
   756   000FC4                     ADRESH          equ	4036	;# 
   757   000FC5                     SSPCON2         equ	4037	;# 
   758   000FC6                     SSPCON1         equ	4038	;# 
   759   000FC7                     SSPSTAT         equ	4039	;# 
   760   000FC8                     SSPADD          equ	4040	;# 
   761   000FC9                     SSPBUF          equ	4041	;# 
   762   000FCA                     T2CON           equ	4042	;# 
   763   000FCB                     PR2             equ	4043	;# 
   764   000FCB                     MEMCON          equ	4043	;# 
   765   000FCC                     TMR2            equ	4044	;# 
   766   000FCD                     T1CON           equ	4045	;# 
   767   000FCE                     TMR1            equ	4046	;# 
   768   000FCE                     TMR1L           equ	4046	;# 
   769   000FCF                     TMR1H           equ	4047	;# 
   770   000FD0                     RCON            equ	4048	;# 
   771   000FD1                     WDTCON          equ	4049	;# 
   772   000FD2                     HLVDCON         equ	4050	;# 
   773   000FD2                     LVDCON          equ	4050	;# 
   774   000FD3                     OSCCON          equ	4051	;# 
   775   000FD5                     T0CON           equ	4053	;# 
   776   000FD6                     TMR0            equ	4054	;# 
   777   000FD6                     TMR0L           equ	4054	;# 
   778   000FD7                     TMR0H           equ	4055	;# 
   779   000FD8                     STATUS          equ	4056	;# 
   780   000FD9                     FSR2            equ	4057	;# 
   781   000FD9                     FSR2L           equ	4057	;# 
   782   000FDA                     FSR2H           equ	4058	;# 
   783   000FDB                     PLUSW2          equ	4059	;# 
   784   000FDC                     PREINC2         equ	4060	;# 
   785   000FDD                     POSTDEC2        equ	4061	;# 
   786   000FDE                     POSTINC2        equ	4062	;# 
   787   000FDF                     INDF2           equ	4063	;# 
   788   000FE0                     BSR             equ	4064	;# 
   789   000FE1                     FSR1            equ	4065	;# 
   790   000FE1                     FSR1L           equ	4065	;# 
   791   000FE2                     FSR1H           equ	4066	;# 
   792   000FE3                     PLUSW1          equ	4067	;# 
   793   000FE4                     PREINC1         equ	4068	;# 
   794   000FE5                     POSTDEC1        equ	4069	;# 
   795   000FE6                     POSTINC1        equ	4070	;# 
   796   000FE7                     INDF1           equ	4071	;# 
   797   000FE8                     WREG            equ	4072	;# 
   798   000FE9                     FSR0            equ	4073	;# 
   799   000FE9                     FSR0L           equ	4073	;# 
   800   000FEA                     FSR0H           equ	4074	;# 
   801   000FEB                     PLUSW0          equ	4075	;# 
   802   000FEC                     PREINC0         equ	4076	;# 
   803   000FED                     POSTDEC0        equ	4077	;# 
   804   000FEE                     POSTINC0        equ	4078	;# 
   805   000FEF                     INDF0           equ	4079	;# 
   806   000FF0                     INTCON3         equ	4080	;# 
   807   000FF1                     INTCON2         equ	4081	;# 
   808   000FF2                     INTCON          equ	4082	;# 
   809   000FF3                     PROD            equ	4083	;# 
   810   000FF3                     PRODL           equ	4083	;# 
   811   000FF4                     PRODH           equ	4084	;# 
   812   000FF5                     TABLAT          equ	4085	;# 
   813   000FF6                     TBLPTR          equ	4086	;# 
   814   000FF6                     TBLPTRL         equ	4086	;# 
   815   000FF7                     TBLPTRH         equ	4087	;# 
   816   000FF8                     TBLPTRU         equ	4088	;# 
   817   000FF9                     PCLAT           equ	4089	;# 
   818   000FF9                     PC              equ	4089	;# 
   819   000FF9                     PCL             equ	4089	;# 
   820   000FFA                     PCLATH          equ	4090	;# 
   821   000FFB                     PCLATU          equ	4091	;# 
   822   000FFC                     STKPTR          equ	4092	;# 
   823   000FFD                     TOS             equ	4093	;# 
   824   000FFD                     TOSL            equ	4093	;# 
   825   000FFE                     TOSH            equ	4094	;# 
   826   000FFF                     TOSU            equ	4095	;# 
   827   000F80                     PORTA           equ	3968	;# 
   828   000F81                     PORTB           equ	3969	;# 
   829   000F82                     PORTC           equ	3970	;# 
   830   000F83                     PORTD           equ	3971	;# 
   831   000F84                     PORTE           equ	3972	;# 
   832   000F89                     LATA            equ	3977	;# 
   833   000F8A                     LATB            equ	3978	;# 
   834   000F8B                     LATC            equ	3979	;# 
   835   000F8C                     LATD            equ	3980	;# 
   836   000F8D                     LATE            equ	3981	;# 
   837   000F92                     TRISA           equ	3986	;# 
   838   000F92                     DDRA            equ	3986	;# 
   839   000F93                     TRISB           equ	3987	;# 
   840   000F93                     DDRB            equ	3987	;# 
   841   000F94                     TRISC           equ	3988	;# 
   842   000F94                     DDRC            equ	3988	;# 
   843   000F95                     TRISD           equ	3989	;# 
   844   000F95                     DDRD            equ	3989	;# 
   845   000F96                     TRISE           equ	3990	;# 
   846   000F96                     DDRE            equ	3990	;# 
   847   000F9B                     OSCTUNE         equ	3995	;# 
   848   000F9D                     PIE1            equ	3997	;# 
   849   000F9E                     PIR1            equ	3998	;# 
   850   000F9F                     IPR1            equ	3999	;# 
   851   000FA0                     PIE2            equ	4000	;# 
   852   000FA1                     PIR2            equ	4001	;# 
   853   000FA2                     IPR2            equ	4002	;# 
   854   000FA6                     EECON1          equ	4006	;# 
   855   000FA7                     EECON2          equ	4007	;# 
   856   000FA8                     EEDATA          equ	4008	;# 
   857   000FA9                     EEADR           equ	4009	;# 
   858   000FAB                     RCSTA           equ	4011	;# 
   859   000FAB                     RCSTA1          equ	4011	;# 
   860   000FAC                     TXSTA           equ	4012	;# 
   861   000FAC                     TXSTA1          equ	4012	;# 
   862   000FAD                     TXREG           equ	4013	;# 
   863   000FAD                     TXREG1          equ	4013	;# 
   864   000FAE                     RCREG           equ	4014	;# 
   865   000FAE                     RCREG1          equ	4014	;# 
   866   000FAF                     SPBRG           equ	4015	;# 
   867   000FAF                     SPBRG1          equ	4015	;# 
   868   000FB0                     SPBRGH          equ	4016	;# 
   869   000FB1                     T3CON           equ	4017	;# 
   870   000FB2                     TMR3            equ	4018	;# 
   871   000FB2                     TMR3L           equ	4018	;# 
   872   000FB3                     TMR3H           equ	4019	;# 
   873   000FB4                     CMCON           equ	4020	;# 
   874   000FB5                     CVRCON          equ	4021	;# 
   875   000FB6                     ECCP1AS         equ	4022	;# 
   876   000FB7                     ECCP1DEL        equ	4023	;# 
   877   000FB7                     PWM1CON         equ	4023	;# 
   878   000FB8                     BAUDCON         equ	4024	;# 
   879   000FB8                     BAUDCTL         equ	4024	;# 
   880   000FBA                     CCP2CON         equ	4026	;# 
   881   000FBB                     CCPR2           equ	4027	;# 
   882   000FBB                     CCPR2L          equ	4027	;# 
   883   000FBC                     CCPR2H          equ	4028	;# 
   884   000FBD                     CCP1CON         equ	4029	;# 
   885   000FBD                     ECCP1CON        equ	4029	;# 
   886   000FBE                     CCPR1           equ	4030	;# 
   887   000FBE                     CCPR1L          equ	4030	;# 
   888   000FBF                     CCPR1H          equ	4031	;# 
   889   000FC0                     ADCON2          equ	4032	;# 
   890   000FC1                     ADCON1          equ	4033	;# 
   891   000FC2                     ADCON0          equ	4034	;# 
   892   000FC3                     ADRES           equ	4035	;# 
   893   000FC3                     ADRESL          equ	4035	;# 
   894   000FC4                     ADRESH          equ	4036	;# 
   895   000FC5                     SSPCON2         equ	4037	;# 
   896   000FC6                     SSPCON1         equ	4038	;# 
   897   000FC7                     SSPSTAT         equ	4039	;# 
   898   000FC8                     SSPADD          equ	4040	;# 
   899   000FC9                     SSPBUF          equ	4041	;# 
   900   000FCA                     T2CON           equ	4042	;# 
   901   000FCB                     PR2             equ	4043	;# 
   902   000FCB                     MEMCON          equ	4043	;# 
   903   000FCC                     TMR2            equ	4044	;# 
   904   000FCD                     T1CON           equ	4045	;# 
   905   000FCE                     TMR1            equ	4046	;# 
   906   000FCE                     TMR1L           equ	4046	;# 
   907   000FCF                     TMR1H           equ	4047	;# 
   908   000FD0                     RCON            equ	4048	;# 
   909   000FD1                     WDTCON          equ	4049	;# 
   910   000FD2                     HLVDCON         equ	4050	;# 
   911   000FD2                     LVDCON          equ	4050	;# 
   912   000FD3                     OSCCON          equ	4051	;# 
   913   000FD5                     T0CON           equ	4053	;# 
   914   000FD6                     TMR0            equ	4054	;# 
   915   000FD6                     TMR0L           equ	4054	;# 
   916   000FD7                     TMR0H           equ	4055	;# 
   917   000FD8                     STATUS          equ	4056	;# 
   918   000FD9                     FSR2            equ	4057	;# 
   919   000FD9                     FSR2L           equ	4057	;# 
   920   000FDA                     FSR2H           equ	4058	;# 
   921   000FDB                     PLUSW2          equ	4059	;# 
   922   000FDC                     PREINC2         equ	4060	;# 
   923   000FDD                     POSTDEC2        equ	4061	;# 
   924   000FDE                     POSTINC2        equ	4062	;# 
   925   000FDF                     INDF2           equ	4063	;# 
   926   000FE0                     BSR             equ	4064	;# 
   927   000FE1                     FSR1            equ	4065	;# 
   928   000FE1                     FSR1L           equ	4065	;# 
   929   000FE2                     FSR1H           equ	4066	;# 
   930   000FE3                     PLUSW1          equ	4067	;# 
   931   000FE4                     PREINC1         equ	4068	;# 
   932   000FE5                     POSTDEC1        equ	4069	;# 
   933   000FE6                     POSTINC1        equ	4070	;# 
   934   000FE7                     INDF1           equ	4071	;# 
   935   000FE8                     WREG            equ	4072	;# 
   936   000FE9                     FSR0            equ	4073	;# 
   937   000FE9                     FSR0L           equ	4073	;# 
   938   000FEA                     FSR0H           equ	4074	;# 
   939   000FEB                     PLUSW0          equ	4075	;# 
   940   000FEC                     PREINC0         equ	4076	;# 
   941   000FED                     POSTDEC0        equ	4077	;# 
   942   000FEE                     POSTINC0        equ	4078	;# 
   943   000FEF                     INDF0           equ	4079	;# 
   944   000FF0                     INTCON3         equ	4080	;# 
   945   000FF1                     INTCON2         equ	4081	;# 
   946   000FF2                     INTCON          equ	4082	;# 
   947   000FF3                     PROD            equ	4083	;# 
   948   000FF3                     PRODL           equ	4083	;# 
   949   000FF4                     PRODH           equ	4084	;# 
   950   000FF5                     TABLAT          equ	4085	;# 
   951   000FF6                     TBLPTR          equ	4086	;# 
   952   000FF6                     TBLPTRL         equ	4086	;# 
   953   000FF7                     TBLPTRH         equ	4087	;# 
   954   000FF8                     TBLPTRU         equ	4088	;# 
   955   000FF9                     PCLAT           equ	4089	;# 
   956   000FF9                     PC              equ	4089	;# 
   957   000FF9                     PCL             equ	4089	;# 
   958   000FFA                     PCLATH          equ	4090	;# 
   959   000FFB                     PCLATU          equ	4091	;# 
   960   000FFC                     STKPTR          equ	4092	;# 
   961   000FFD                     TOS             equ	4093	;# 
   962   000FFD                     TOSL            equ	4093	;# 
   963   000FFE                     TOSH            equ	4094	;# 
   964   000FFF                     TOSU            equ	4095	;# 
   965                           
   966                           	psect	mediumconst
   967   001EE0                     __pmediumconst:
   968                           	callstack 0
   969   001EE0  00                 	db	0
   970   001EE1                     GetTecla@F3221:
   971                           	callstack 0
   972   001EE1  01                 	db	1
   973   001EE2  02                 	db	2
   974   001EE3  03                 	db	3
   975   001EE4  04                 	db	4
   976   001EE5  05                 	db	5
   977   001EE6  06                 	db	6
   978   001EE7  07                 	db	7
   979   001EE8  08                 	db	8
   980   001EE9  09                 	db	9
   981   001EEA  0A                 	db	10
   982   001EEB  00                 	db	0
   983   001EEC  0B                 	db	11
   984   001EED                     __end_ofGetTecla@F3221:
   985                           	callstack 0
   986   007F92                     _TMR0IF         set	32658
   987   000FD6                     _TMR0           set	4054
   988   000FAE                     _RCREG          set	4014
   989   000FAD                     _TXREG          set	4013
   990   000F9E                     _PIR1bits       set	3998
   991   000FB8                     _BAUDCON        set	4024
   992   000FAF                     _SPBRG          set	4015
   993   000FAB                     _RCSTA          set	4011
   994   000FAC                     _TXSTA          set	4012
   995   000F81                     _PORTBbits      set	3969
   996   000F8A                     _LATBbits       set	3978
   997   000F93                     _TRISBbits      set	3987
   998   000F82                     _PORTCbits      set	3970
   999   000F8B                     _LATCbits       set	3979
  1000   000F94                     _TRISCbits      set	3988
  1001   000F8C                     _LATD           set	3980
  1002   000F95                     _TRISD          set	3989
  1003   000F83                     _PORTD          set	3971
  1004   000FD5                     _T0CON          set	4053
  1005   000F8B                     _LATC           set	3979
  1006   000F92                     _TRISA          set	3986
  1007   000FC1                     _ADCON1         set	4033
  1008   000F89                     _LATA           set	3977
  1009   000FF2                     _INTCONbits     set	4082
  1010   001EED                     STR_16:
  1011   001EED  45                 	db	69	;'E'
  1012   001EEE  52                 	db	82	;'R'
  1013   001EEF  52                 	db	82	;'R'
  1014   001EF0  4F                 	db	79	;'O'
  1015   001EF1  52                 	db	82	;'R'
  1016   001EF2  2E                 	db	46
  1017   001EF3  20                 	db	32
  1018   001EF4  56                 	db	86	;'V'
  1019   001EF5  61                 	db	97	;'a'
  1020   001EF6  6C                 	db	108	;'l'
  1021   001EF7  6F                 	db	111	;'o'
  1022   001EF8  72                 	db	114	;'r'
  1023   001EF9  20                 	db	32
  1024   001EFA  69                 	db	105	;'i'
  1025   001EFB  6E                 	db	110	;'n'
  1026   001EFC  74                 	db	116	;'t'
  1027   001EFD  72                 	db	114	;'r'
  1028   001EFE  6F                 	db	111	;'o'
  1029   001EFF  64                 	db	100	;'d'
  1030   001F00  75                 	db	117	;'u'
  1031   001F01  69                 	db	105	;'i'
  1032   001F02  74                 	db	116	;'t'
  1033   001F03  20                 	db	32
  1034   001F04  65                 	db	101	;'e'
  1035   001F05  72                 	db	114	;'r'
  1036   001F06  72                 	db	114	;'r'
  1037   001F07  6F                 	db	111	;'o'
  1038   001F08  6E                 	db	110	;'n'
  1039   001F09  69                 	db	105	;'i'
  1040   001F0A  2E                 	db	46
  1041   001F0B  0D                 	db	13
  1042   001F0C  0A                 	db	10
  1043   001F0D  00                 	db	0
  1044   001F0E                     STR_11:
  1045   001F0E  09                 	db	9
  1046   001F0F  33                 	db	51	;'3'
  1047   001F10  2E                 	db	46
  1048   001F11  20                 	db	32
  1049   001F12  4D                 	db	77	;'M'
  1050   001F13  6F                 	db	111	;'o'
  1051   001F14  64                 	db	100	;'d'
  1052   001F15  69                 	db	105	;'i'
  1053   001F16  66                 	db	102	;'f'
  1054   001F17  69                 	db	105	;'i'
  1055   001F18  63                 	db	99	;'c'
  1056   001F19  61                 	db	97	;'a'
  1057   001F1A  72                 	db	114	;'r'
  1058   001F1B  20                 	db	32
  1059   001F1C  68                 	db	104	;'h'
  1060   001F1D  6F                 	db	111	;'o'
  1061   001F1E  72                 	db	114	;'r'
  1062   001F1F  61                 	db	97	;'a'
  1063   001F20  20                 	db	32
  1064   001F21  64                 	db	100	;'d'
  1065   001F22  65                 	db	101	;'e'
  1066   001F23  6C                 	db	108	;'l'
  1067   001F24  20                 	db	32
  1068   001F25  73                 	db	115	;'s'
  1069   001F26  69                 	db	105	;'i'
  1070   001F27  73                 	db	115	;'s'
  1071   001F28  74                 	db	116	;'t'
  1072   001F29  65                 	db	101	;'e'
  1073   001F2A  6D                 	db	109	;'m'
  1074   001F2B  61                 	db	97	;'a'
  1075   001F2C  0D                 	db	13
  1076   001F2D  0A                 	db	10
  1077   001F2E  00                 	db	0
  1078   001F2F                     STR_10:
  1079   001F2F  09                 	db	9
  1080   001F30  32                 	db	50	;'2'
  1081   001F31  2E                 	db	46
  1082   001F32  20                 	db	32
  1083   001F33  4D                 	db	77	;'M'
  1084   001F34  6F                 	db	111	;'o'
  1085   001F35  73                 	db	115	;'s'
  1086   001F36  74                 	db	116	;'t'
  1087   001F37  72                 	db	114	;'r'
  1088   001F38  61                 	db	97	;'a'
  1089   001F39  72                 	db	114	;'r'
  1090   001F3A  20                 	db	32
  1091   001F3B  63                 	db	99	;'c'
  1092   001F3C  6F                 	db	111	;'o'
  1093   001F3D  6E                 	db	110	;'n'
  1094   001F3E  66                 	db	102	;'f'
  1095   001F3F  69                 	db	105	;'i'
  1096   001F40  67                 	db	103	;'g'
  1097   001F41  75                 	db	117	;'u'
  1098   001F42  72                 	db	114	;'r'
  1099   001F43  61                 	db	97	;'a'
  1100   001F44  63                 	db	99	;'c'
  1101   001F45  69                 	db	105	;'i'
  1102   001F46  6F                 	db	111	;'o'
  1103   001F47  6E                 	db	110	;'n'
  1104   001F48  73                 	db	115	;'s'
  1105   001F49  0D                 	db	13
  1106   001F4A  0A                 	db	10
  1107   001F4B  00                 	db	0
  1108   001F4C                     STR_4:
  1109   001F4C  55                 	db	85	;'U'
  1110   001F4D  49                 	db	73	;'I'
  1111   001F4E  44                 	db	68	;'D'
  1112   001F4F  3A                 	db	58	;':'
  1113   001F50  20                 	db	32
  1114   001F51  25                 	db	37
  1115   001F52  30                 	db	48	;'0'
  1116   001F53  32                 	db	50	;'2'
  1117   001F54  58                 	db	88	;'X'
  1118   001F55  25                 	db	37
  1119   001F56  30                 	db	48	;'0'
  1120   001F57  32                 	db	50	;'2'
  1121   001F58  58                 	db	88	;'X'
  1122   001F59  25                 	db	37
  1123   001F5A  30                 	db	48	;'0'
  1124   001F5B  32                 	db	50	;'2'
  1125   001F5C  58                 	db	88	;'X'
  1126   001F5D  25                 	db	37
  1127   001F5E  30                 	db	48	;'0'
  1128   001F5F  32                 	db	50	;'2'
  1129   001F60  58                 	db	88	;'X'
  1130   001F61  25                 	db	37
  1131   001F62  30                 	db	48	;'0'
  1132   001F63  32                 	db	50	;'2'
  1133   001F64  58                 	db	88	;'X'
  1134   001F65  0D                 	db	13
  1135   001F66  0A                 	db	10
  1136   001F67  00                 	db	0
  1137   001F68                     STR_9:
  1138   001F68  09                 	db	9
  1139   001F69  31                 	db	49	;'1'
  1140   001F6A  2E                 	db	46
  1141   001F6B  20                 	db	32
  1142   001F6C  51                 	db	81	;'Q'
  1143   001F6D  75                 	db	117	;'u'
  1144   001F6E  69                 	db	105	;'i'
  1145   001F6F  20                 	db	32
  1146   001F70  68                 	db	104	;'h'
  1147   001F71  69                 	db	105	;'i'
  1148   001F72  20                 	db	32
  1149   001F73  68                 	db	104	;'h'
  1150   001F74  61                 	db	97	;'a'
  1151   001F75  20                 	db	32
  1152   001F76  61                 	db	97	;'a'
  1153   001F77  20                 	db	32
  1154   001F78  6C                 	db	108	;'l'
  1155   001F79  61                 	db	97	;'a'
  1156   001F7A  20                 	db	32
  1157   001F7B  73                 	db	115	;'s'
  1158   001F7C  61                 	db	97	;'a'
  1159   001F7D  6C                 	db	108	;'l'
  1160   001F7E  61                 	db	97	;'a'
  1161   001F7F  3F                 	db	63	;'?'
  1162   001F80  0D                 	db	13
  1163   001F81  0A                 	db	10
  1164   001F82  00                 	db	0
  1165   001F83                     STR_8:
  1166   001F83  54                 	db	84	;'T'
  1167   001F84  72                 	db	114	;'r'
  1168   001F85  69                 	db	105	;'i'
  1169   001F86  61                 	db	97	;'a'
  1170   001F87  20                 	db	32
  1171   001F88  75                 	db	117	;'u'
  1172   001F89  6E                 	db	110	;'n'
  1173   001F8A  61                 	db	97	;'a'
  1174   001F8B  20                 	db	32
  1175   001F8C  6F                 	db	111	;'o'
  1176   001F8D  70                 	db	112	;'p'
  1177   001F8E  63                 	db	99	;'c'
  1178   001F8F  69                 	db	105	;'i'
  1179   001F90  C3                 	db	-61
  1180   001F91  B3                 	db	-77
  1181   001F92  3A                 	db	58	;':'
  1182   001F93  0D                 	db	13
  1183   001F94  0A                 	db	10
  1184   001F95  00                 	db	0
  1185   001F96                     STR_5:
  1186   001F96  2D                 	db	45
  1187   001F97  2D                 	db	45
  1188   001F98  2D                 	db	45
  1189   001F99  2D                 	db	45
  1190   001F9A  2D                 	db	45
  1191   001F9B  2D                 	db	45
  1192   001F9C  2D                 	db	45
  1193   001F9D  2D                 	db	45
  1194   001F9E  2D                 	db	45
  1195   001F9F  2D                 	db	45
  1196   001FA0  2D                 	db	45
  1197   001FA1  2D                 	db	45
  1198   001FA2  2D                 	db	45
  1199   001FA3  2D                 	db	45
  1200   001FA4  2D                 	db	45
  1201   001FA5  0D                 	db	13
  1202   001FA6  0A                 	db	10
  1203   001FA7  00                 	db	0
  1204   001FA8                     STR_6:
  1205   001FA8  4D                 	db	77	;'M'
  1206   001FA9  65                 	db	101	;'e'
  1207   001FAA  6E                 	db	110	;'n'
  1208   001FAB  C3                 	db	-61
  1209   001FAC  BA                 	db	-70
  1210   001FAD  20                 	db	32
  1211   001FAE  70                 	db	112	;'p'
  1212   001FAF  72                 	db	114	;'r'
  1213   001FB0  69                 	db	105	;'i'
  1214   001FB1  6E                 	db	110	;'n'
  1215   001FB2  63                 	db	99	;'c'
  1216   001FB3  69                 	db	105	;'i'
  1217   001FB4  70                 	db	112	;'p'
  1218   001FB5  61                 	db	97	;'a'
  1219   001FB6  6C                 	db	108	;'l'
  1220   001FB7  0D                 	db	13
  1221   001FB8  0A                 	db	10
  1222   001FB9  00                 	db	0
  1223   001FBA                     STR_13:
  1224   001FBA  48                 	db	72	;'H'
  1225   001FBB  61                 	db	97	;'a'
  1226   001FBC  73                 	db	115	;'s'
  1227   001FBD  20                 	db	32
  1228   001FBE  70                 	db	112	;'p'
  1229   001FBF  75                 	db	117	;'u'
  1230   001FC0  6C                 	db	108	;'l'
  1231   001FC1  73                 	db	115	;'s'
  1232   001FC2  61                 	db	97	;'a'
  1233   001FC3  64                 	db	100	;'d'
  1234   001FC4  6F                 	db	111	;'o'
  1235   001FC5  20                 	db	32
  1236   001FC6  31                 	db	49	;'1'
  1237   001FC7  0D                 	db	13
  1238   001FC8  0A                 	db	10
  1239   001FC9  00                 	db	0
  1240   001FCA                     STR_14:
  1241   001FCA  48                 	db	72	;'H'
  1242   001FCB  61                 	db	97	;'a'
  1243   001FCC  73                 	db	115	;'s'
  1244   001FCD  20                 	db	32
  1245   001FCE  70                 	db	112	;'p'
  1246   001FCF  75                 	db	117	;'u'
  1247   001FD0  6C                 	db	108	;'l'
  1248   001FD1  73                 	db	115	;'s'
  1249   001FD2  61                 	db	97	;'a'
  1250   001FD3  64                 	db	100	;'d'
  1251   001FD4  6F                 	db	111	;'o'
  1252   001FD5  20                 	db	32
  1253   001FD6  32                 	db	50	;'2'
  1254   001FD7  0D                 	db	13
  1255   001FD8  0A                 	db	10
  1256   001FD9  00                 	db	0
  1257   001FDA                     STR_15:
  1258   001FDA  48                 	db	72	;'H'
  1259   001FDB  61                 	db	97	;'a'
  1260   001FDC  73                 	db	115	;'s'
  1261   001FDD  20                 	db	32
  1262   001FDE  70                 	db	112	;'p'
  1263   001FDF  75                 	db	117	;'u'
  1264   001FE0  6C                 	db	108	;'l'
  1265   001FE1  73                 	db	115	;'s'
  1266   001FE2  61                 	db	97	;'a'
  1267   001FE3  64                 	db	100	;'d'
  1268   001FE4  6F                 	db	111	;'o'
  1269   001FE5  20                 	db	32
  1270   001FE6  33                 	db	51	;'3'
  1271   001FE7  0D                 	db	13
  1272   001FE8  0A                 	db	10
  1273   001FE9  00                 	db	0
  1274   001FEA                     STR_12:
  1275   001FEA  4F                 	db	79	;'O'
  1276   001FEB  70                 	db	112	;'p'
  1277   001FEC  63                 	db	99	;'c'
  1278   001FED  69                 	db	105	;'i'
  1279   001FEE  C3                 	db	-61
  1280   001FEF  B3                 	db	-77
  1281   001FF0  3A                 	db	58	;':'
  1282   001FF1  20                 	db	32
  1283   001FF2  00                 	db	0
  1284   001FF3  55                 	db	85	;'U'
  1285   001FF4  49                 	db	73	;'I'
  1286   001FF5  44                 	db	68	;'D'
  1287   001FF6  3A                 	db	58	;':'
  1288   001FF7  20                 	db	32
  1289   001FF8  00                 	db	0
  1290   001FF9  25                 	db	37
  1291   001FFA  30                 	db	48	;'0'
  1292   001FFB  32                 	db	50	;'2'
  1293   001FFC  58                 	db	88	;'X'
  1294   001FFD  00                 	db	0
  1295   001F96                     STR_7           equ	STR_5
  1296   001FA6                     STR_3           equ	STR_5+16
  1297   001FFE  00                 	db	0	; dummy byte at the end
  1298   001EE0                     __smallconst    set	__pmediumconst
  1299   001EE0                     __mediumconst   set	__pmediumconst
  1300   000002                     __activetblptr  equ	2
  1301                           
  1302                           ; #config settings
  1303                           
  1304                           	psect	cinit
  1305   00122A                     __pcinit:
  1306                           	callstack 0
  1307   00122A                     start_initialization:
  1308                           	callstack 0
  1309   00122A                     __initialization:
  1310                           	callstack 0
  1311                           
  1312                           ; Clear objects allocated to BANK0 (102 bytes)
  1313   00122A  EE00  F080         	lfsr	0,__pbssBANK0
  1314   00122E  0E66               	movlw	102
  1315   001230                     clear_0:
  1316   001230  6AEE               	clrf	postinc0,c
  1317   001232  06E8               	decf	wreg,f,c
  1318   001234  E1FD               	bnz	clear_0
  1319                           
  1320                           ; Clear objects allocated to COMRAM (39 bytes)
  1321   001236  EE00  F053         	lfsr	0,__pbssCOMRAM
  1322   00123A  0E27               	movlw	39
  1323   00123C                     clear_1:
  1324   00123C  6AEE               	clrf	postinc0,c
  1325   00123E  06E8               	decf	wreg,f,c
  1326   001240  E1FD               	bnz	clear_1
  1327   001242                     end_of_initialization:
  1328                           	callstack 0
  1329   001242                     __end_of__initialization:
  1330                           	callstack 0
  1331   001242  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1332   001244  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1333   001246  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1334   001248  6EF8               	movwf	tblptru,c
  1335   00124A  0100               	movlb	0
  1336   00124C  EFE8  F008         	goto	_main	;jump to C main() function
  1337                           
  1338                           	psect	bssCOMRAM
  1339   000053                     __pbssCOMRAM:
  1340                           	callstack 0
  1341   000053                     motor_RFID@UID:
  1342                           	callstack 0
  1343   000053                     	ds	6
  1344   000059                     _Tics:
  1345                           	callstack 0
  1346   000059                     	ds	4
  1347   00005D                     _width:
  1348                           	callstack 0
  1349   00005D                     	ds	2
  1350   00005F                     _prec:
  1351                           	callstack 0
  1352   00005F                     	ds	2
  1353   000061                     	ds	2
  1354   000063                     _flags:
  1355                           	callstack 0
  1356   000063                     	ds	1
  1357   000064                     motorTerminal@state:
  1358                           	callstack 0
  1359   000064                     	ds	1
  1360   000065                     _hashtag_pressed:
  1361                           	callstack 0
  1362   000065                     	ds	1
  1363   000066                     _ColumnAct:
  1364                           	callstack 0
  1365   000066                     	ds	1
  1366   000067                     _RowAct:
  1367                           	callstack 0
  1368   000067                     	ds	1
  1369   000068                     _Columns:
  1370                           	callstack 0
  1371   000068                     	ds	1
  1372   000069                     _Rows:
  1373                           	callstack 0
  1374   000069                     	ds	1
  1375   00006A                     motor_RFID@allZero:
  1376                           	callstack 0
  1377   00006A                     	ds	1
  1378   00006B                     motor_RFID@checksum:
  1379                           	callstack 0
  1380   00006B                     	ds	1
  1381   00006C                     motor_RFID@TagType:
  1382                           	callstack 0
  1383   00006C                     	ds	1
  1384   00006D                     	ds	1
  1385   00006E                     motor_RFID@i:
  1386                           	callstack 0
  1387   00006E                     	ds	1
  1388   00006F                     motor_RFID@n:
  1389                           	callstack 0
  1390   00006F                     	ds	1
  1391   000070                     motor_RFID@waitIRq:
  1392                           	callstack 0
  1393   000070                     	ds	1
  1394   000071                     motor_RFID@irqEn:
  1395                           	callstack 0
  1396   000071                     	ds	1
  1397   000072                     motor_RFID@substate:
  1398                           	callstack 0
  1399   000072                     	ds	1
  1400   000073                     motor_RFID@state:
  1401                           	callstack 0
  1402   000073                     	ds	1
  1403   000074                     _state:
  1404                           	callstack 0
  1405   000074                     	ds	1
  1406   000075                     _tecla:
  1407                           	callstack 0
  1408   000075                     	ds	1
  1409   000076                     _Columnas:
  1410                           	callstack 0
  1411   000076                     	ds	1
  1412   000077                     _Filas:
  1413                           	callstack 0
  1414   000077                     	ds	1
  1415   000078                     _Timer:
  1416                           	callstack 0
  1417   000078                     	ds	1
  1418   000079                     _timer:
  1419                           	callstack 0
  1420   000079                     	ds	1
  1421                           
  1422                           	psect	bssBANK0
  1423   000080                     __pbssBANK0:
  1424                           	callstack 0
  1425   000080                     _Timers:
  1426                           	callstack 0
  1427   000080                     	ds	20
  1428   000094                     motor_RFID@buffer:
  1429                           	callstack 0
  1430   000094                     	ds	50
  1431   0000C6                     _dbuf:
  1432                           	callstack 0
  1433   0000C6                     	ds	32
  1434                           
  1435                           	psect	cstackCOMRAM
  1436   000001                     __pcstackCOMRAM:
  1437                           	callstack 0
  1438   000001                     ??_LowRSI:
  1439                           
  1440                           ; 1 bytes @ 0x0
  1441   000001                     	ds	1
  1442   000002                     ?_Terminal_TXAvailable:
  1443                           	callstack 0
  1444   000002                     ?_read_prec_or_width:
  1445                           	callstack 0
  1446   000002                     ?_TI_GetTics:
  1447                           	callstack 0
  1448   000002                     TI_Init@counter:
  1449                           	callstack 0
  1450   000002                     TI_NewTimer@TimerHandle:
  1451                           	callstack 0
  1452   000002                     TI_ResetTics@TimerHandle:
  1453                           	callstack 0
  1454   000002                     Terminal_SendChar@c:
  1455                           	callstack 0
  1456   000002                     read_prec_or_width@fmt:
  1457                           	callstack 0
  1458   000002                     fputc@c:
  1459                           	callstack 0
  1460   000002                     ??_GetTecla:
  1461   000002                     ??_delay_us:
  1462   000002                     
  1463                           ; 1 bytes @ 0x1
  1464   000002                     	ds	1
  1465   000003                     read_prec_or_width@ap:
  1466                           	callstack 0
  1467   000003                     
  1468                           ; 1 bytes @ 0x2
  1469   000003                     	ds	1
  1470   000004                     TI_NewTimer@Comptador:
  1471                           	callstack 0
  1472   000004                     fputc@fp:
  1473                           	callstack 0
  1474   000004                     GetTecla@keymap:
  1475                           	callstack 0
  1476   000004                     ??_Terminal_TXAvailable:
  1477   000004                     ??_read_prec_or_width:
  1478                           
  1479                           ; 1 bytes @ 0x3
  1480   000004                     	ds	1
  1481   000005                     delay_us@howMany:
  1482                           	callstack 0
  1483   000005                     Terminal_SendString@str:
  1484                           	callstack 0
  1485   000005                     ??_fputc:
  1486                           
  1487                           ; 1 bytes @ 0x4
  1488   000005                     	ds	1
  1489   000006                     delay_us@x:
  1490                           	callstack 0
  1491   000006                     read_prec_or_width@c:
  1492                           	callstack 0
  1493   000006                     ??_TI_GetTics:
  1494                           
  1495                           ; 1 bytes @ 0x5
  1496   000006                     	ds	1
  1497   000007                     read_prec_or_width@n:
  1498                           	callstack 0
  1499   000007                     ??_MFRC522_Rd:
  1500   000007                     
  1501                           ; 1 bytes @ 0x6
  1502   000007                     	ds	1
  1503   000008                     MFRC522_Rd@Address:
  1504                           	callstack 0
  1505                           
  1506                           ; 1 bytes @ 0x7
  1507   000008                     	ds	1
  1508   000009                     MFRC522_Rd@ucAddr:
  1509                           	callstack 0
  1510                           
  1511                           ; 1 bytes @ 0x8
  1512   000009                     	ds	1
  1513   00000A                     MFRC522_Rd@ucResult:
  1514                           	callstack 0
  1515   00000A                     fputs@s:
  1516                           	callstack 0
  1517   00000A                     TI_GetTics@CopiaTicsActual:
  1518                           	callstack 0
  1519                           
  1520                           ; 4 bytes @ 0x9
  1521   00000A                     	ds	1
  1522   00000B                     MFRC522_Rd@i:
  1523                           	callstack 0
  1524   00000B                     fputs@fp:
  1525                           	callstack 0
  1526                           
  1527                           ; 1 bytes @ 0xA
  1528   00000B                     	ds	1
  1529   00000C                     MFRC522_Wr@value:
  1530                           	callstack 0
  1531   00000C                     fputs@c:
  1532                           	callstack 0
  1533   00000C                     
  1534                           ; 1 bytes @ 0xB
  1535   00000C                     	ds	1
  1536   00000D                     fputs@i:
  1537                           	callstack 0
  1538   00000D                     ??_MFRC522_Wr:
  1539                           
  1540                           ; 1 bytes @ 0xC
  1541   00000D                     	ds	1
  1542   00000E                     TI_GetTics@TimerHandle:
  1543                           	callstack 0
  1544   00000E                     MFRC522_Wr@Address:
  1545                           	callstack 0
  1546                           
  1547                           ; 1 bytes @ 0xD
  1548   00000E                     	ds	1
  1549   00000F                     MFRC522_Wr@ucAddr:
  1550                           	callstack 0
  1551   00000F                     pad@fp:
  1552                           	callstack 0
  1553                           
  1554                           ; 1 bytes @ 0xE
  1555   00000F                     	ds	1
  1556   000010                     GetTecla@columna:
  1557                           	callstack 0
  1558   000010                     MFRC522_Wr@i:
  1559                           	callstack 0
  1560   000010                     pad@buf:
  1561                           	callstack 0
  1562                           
  1563                           ; 1 bytes @ 0xF
  1564   000010                     	ds	1
  1565   000011                     GetTecla@fila:
  1566                           	callstack 0
  1567   000011                     MFRC522_Clear_Bit@mask:
  1568                           	callstack 0
  1569   000011                     MFRC522_Set_Bit@mask:
  1570                           	callstack 0
  1571   000011                     pad@p:
  1572                           	callstack 0
  1573   000011                     
  1574                           ; 1 bytes @ 0x10
  1575   000011                     	ds	1
  1576   000012                     MFRC522_Set_Bit@addr:
  1577                           	callstack 0
  1578   000012                     ??_MFRC522_Clear_Bit:
  1579   000012                     
  1580                           ; 1 bytes @ 0x11
  1581   000012                     	ds	1
  1582   000013                     MFRC522_Clear_Bit@addr:
  1583                           	callstack 0
  1584   000013                     ??_pad:
  1585                           
  1586                           ; 1 bytes @ 0x12
  1587   000013                     	ds	1
  1588   000014                     pad@i:
  1589                           	callstack 0
  1590   000014                     
  1591                           ; 1 bytes @ 0x13
  1592   000014                     	ds	2
  1593   000016                     xtoa@fp:
  1594                           	callstack 0
  1595                           
  1596                           ; 1 bytes @ 0x15
  1597   000016                     	ds	1
  1598   000017                     xtoa@d:
  1599                           	callstack 0
  1600                           
  1601                           ; 2 bytes @ 0x16
  1602   000017                     	ds	2
  1603   000019                     ??_xtoa:
  1604                           
  1605                           ; 1 bytes @ 0x18
  1606   000019                     	ds	3
  1607   00001C                     xtoa@p:
  1608                           	callstack 0
  1609                           
  1610                           ; 1 bytes @ 0x1B
  1611   00001C                     	ds	1
  1612   00001D                     xtoa@w:
  1613                           	callstack 0
  1614                           
  1615                           ; 2 bytes @ 0x1C
  1616   00001D                     	ds	2
  1617   00001F                     xtoa@c:
  1618                           	callstack 0
  1619                           
  1620                           ; 1 bytes @ 0x1E
  1621   00001F                     	ds	1
  1622   000020                     xtoa@i:
  1623                           	callstack 0
  1624                           
  1625                           ; 2 bytes @ 0x1F
  1626   000020                     	ds	2
  1627   000022                     vfpfcnvrt@fp:
  1628                           	callstack 0
  1629                           
  1630                           ; 1 bytes @ 0x21
  1631   000022                     	ds	1
  1632   000023                     vfpfcnvrt@fmt:
  1633                           	callstack 0
  1634                           
  1635                           ; 1 bytes @ 0x22
  1636   000023                     	ds	1
  1637   000024                     vfpfcnvrt@ap:
  1638                           	callstack 0
  1639                           
  1640                           ; 1 bytes @ 0x23
  1641   000024                     	ds	1
  1642   000025                     ??_vfpfcnvrt:
  1643                           
  1644                           ; 1 bytes @ 0x24
  1645   000025                     	ds	2
  1646   000027                     vfpfcnvrt@convarg:
  1647                           	callstack 0
  1648                           
  1649                           ; 4 bytes @ 0x26
  1650   000027                     	ds	4
  1651   00002B                     vfpfcnvrt@done:
  1652                           	callstack 0
  1653                           
  1654                           ; 1 bytes @ 0x2A
  1655   00002B                     	ds	1
  1656   00002C                     vfpfcnvrt@cp:
  1657                           	callstack 0
  1658                           
  1659                           ; 2 bytes @ 0x2B
  1660   00002C                     	ds	2
  1661   00002E                     ?_vfprintf:
  1662                           	callstack 0
  1663   00002E                     vfprintf@fp:
  1664                           	callstack 0
  1665                           
  1666                           ; 1 bytes @ 0x2D
  1667   00002E                     	ds	1
  1668   00002F                     vfprintf@fmt:
  1669                           	callstack 0
  1670                           
  1671                           ; 2 bytes @ 0x2E
  1672   00002F                     	ds	2
  1673   000031                     vfprintf@ap:
  1674                           	callstack 0
  1675                           
  1676                           ; 1 bytes @ 0x30
  1677   000031                     	ds	1
  1678   000032                     vfprintf@cfmt:
  1679                           	callstack 0
  1680   000032                     
  1681                           ; 1 bytes @ 0x31
  1682   000032                     	ds	2
  1683   000034                     ?_sprintf:
  1684                           	callstack 0
  1685   000034                     sprintf@s:
  1686                           	callstack 0
  1687                           
  1688                           ; 1 bytes @ 0x33
  1689   000034                     	ds	1
  1690   000035                     sprintf@fmt:
  1691                           	callstack 0
  1692                           
  1693                           ; 2 bytes @ 0x34
  1694   000035                     	ds	12
  1695   000041                     sprintf@ap:
  1696                           	callstack 0
  1697   000041                     
  1698                           ; 1 bytes @ 0x40
  1699   000041                     	ds	1
  1700   000042                     sprintf@f:
  1701                           	callstack 0
  1702                           
  1703                           ; 11 bytes @ 0x41
  1704   000042                     	ds	11
  1705   00004D                     ??_motor_RFID:
  1706                           
  1707                           ; 1 bytes @ 0x4C
  1708   00004D                     	ds	2
  1709   00004F                     motor_RFID@backBitsCalc:
  1710                           	callstack 0
  1711                           
  1712                           ; 2 bytes @ 0x4E
  1713   00004F                     	ds	2
  1714   000051                     motor_RFID@fifoLevel:
  1715                           	callstack 0
  1716                           
  1717                           ; 1 bytes @ 0x50
  1718   000051                     	ds	1
  1719   000052                     motor_RFID@lastBitsVal:
  1720                           	callstack 0
  1721                           
  1722                           ; 1 bytes @ 0x51
  1723   000052                     	ds	1
  1724   000053                     
  1725                           ; 1 bytes @ 0x52
  1726 ;;
  1727 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1728 ;;
  1729 ;; *************** function _main *****************
  1730 ;; Defined at:
  1731 ;;		line 36 in file "main.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1
  1745 ;;      Params:         0       0       0
  1746 ;;      Locals:         0       0       0
  1747 ;;      Temps:          0       0       0
  1748 ;;      Totals:         0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels required when called: 12
  1751 ;; This function calls:
  1752 ;;		_TI_Init
  1753 ;;		_Terminal_Init
  1754 ;;		_initPorts
  1755 ;;		_initRFID
  1756 ;;		_initTeclado
  1757 ;;		_motorTeclado
  1758 ;;		_motorTerminal
  1759 ;;		_motor_RFID
  1760 ;; This function is called by:
  1761 ;;		Startup code after reset
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text0
  1766   0011D0                     __ptext0:
  1767                           	callstack 0
  1768   0011D0                     _main:
  1769                           	callstack 19
  1770   0011D0                     
  1771                           ;main.c: 37:  ADCON1 = 0x0F;
  1772   0011D0  ECCE  F008         	call	_TI_Init	;wreg free
  1773                           
  1774                           ;main.c: 38:  TRISA = 0x00;
  1775   0011D4  EC61  F009         	call	_initTeclado	;wreg free
  1776   0011D8                     
  1777                           ;main.c: 39: }
  1778   0011D8  ECA5  F009         	call	_initRFID	;wreg free
  1779   0011DC                     
  1780                           ;main.c: 40: 
  1781   0011DC  EC8B  F009         	call	_Terminal_Init	;wreg free
  1782   0011E0                     
  1783                           ;main.c: 41: 
  1784   0011E0  ECB2  F009         	call	_initPorts	;wreg free
  1785   0011E4                     
  1786                           ;main.c: 44: 
  1787   0011E4  8EF2               	bsf	242,7,c	;volatile
  1788   0011E6                     
  1789                           ;main.c: 45: 
  1790   0011E6  8CF2               	bsf	242,6,c	;volatile
  1791   0011E8                     l3596:
  1792   0011E8  6A89               	clrf	137,c	;volatile
  1793   0011EA  EC96  F002         	call	_motorTeclado	;wreg free
  1794   0011EE  ECE5  F004         	call	_motorTerminal	;wreg free
  1795   0011F2  EC15  F000         	call	_motor_RFID	;wreg free
  1796   0011F6  6889               	setf	137,c	;volatile
  1797   0011F8  EFF4  F008         	goto	l3596
  1798   0011FC  EF13  F000         	goto	start
  1799   001200                     __end_of_main:
  1800                           	callstack 0
  1801                           
  1802 ;; *************** function _motor_RFID *****************
  1803 ;; Defined at:
  1804 ;;		line 322 in file "TAD_RFID.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  backBitsCalc    2   78[COMRAM] unsigned int 
  1809 ;;  lastBitsVal     1   81[COMRAM] unsigned char 
  1810 ;;  fifoLevel       1   80[COMRAM] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1
  1820 ;;      Params:         0       0       0
  1821 ;;      Locals:         4       0       0
  1822 ;;      Temps:          2       0       0
  1823 ;;      Totals:         6       0       0
  1824 ;;Total ram usage:        6 bytes
  1825 ;; Hardware stack levels used: 1
  1826 ;; Hardware stack levels required when called: 11
  1827 ;; This function calls:
  1828 ;;		_MFRC522_Clear_Bit
  1829 ;;		_MFRC522_Rd
  1830 ;;		_MFRC522_Set_Bit
  1831 ;;		_MFRC522_Wr
  1832 ;;		_Terminal_SendString
  1833 ;;		_sprintf
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text1
  1840   00002A                     __ptext1:
  1841                           	callstack 0
  1842   00002A                     _motor_RFID:
  1843                           	callstack 19
  1844   00002A                     
  1845                           ;TAD_RFID.c: 323:     static char state = 0;;TAD_RFID.c: 324:     static char substate =
      +                           0;;TAD_RFID.c: 325:     static char irqEn, waitIRq, n;;TAD_RFID.c: 326:     static unsi
      +                          gned char i;;TAD_RFID.c: 327:     static char _status;;TAD_RFID.c: 328:     static unsig
      +                          ned unLen;;TAD_RFID.c: 329:     static char TagType;;TAD_RFID.c: 330:     static unsigne
      +                          d char UID[6];;TAD_RFID.c: 331:     static char buffer[50];;TAD_RFID.c: 332:     static 
      +                          unsigned char checksum;;TAD_RFID.c: 333:     static unsigned char allZero;
  1846   00002A  EF8A  F002         	goto	l3520
  1847   00002E                     l3322:
  1848                           
  1849                           ;TAD_RFID.c: 340:                     MFRC522_Wr(0x0D, 0x07);
  1850   00002E  0E07               	movlw	7
  1851   000030  6E0C               	movwf	MFRC522_Wr@value^0,c
  1852   000032  0E0D               	movlw	13
  1853   000034  EC68  F006         	call	_MFRC522_Wr
  1854   000038                     
  1855                           ;TAD_RFID.c: 341:                     TagType = 0x26;
  1856   000038  0E26               	movlw	38
  1857   00003A  6E6C               	movwf	motor_RFID@TagType^0,c
  1858   00003C                     l3326:
  1859                           
  1860                           ;TAD_RFID.c: 342:                     substate = 1;
  1861   00003C  0E01               	movlw	1
  1862   00003E  6E72               	movwf	motor_RFID@substate^0,c
  1863                           
  1864                           ;TAD_RFID.c: 343:                     break;
  1865   000040  EF95  F002         	goto	l410
  1866   000044                     l3328:
  1867                           
  1868                           ;TAD_RFID.c: 346:                     irqEn = 0x77;
  1869   000044  0E77               	movlw	119
  1870   000046  6E71               	movwf	motor_RFID@irqEn^0,c
  1871                           
  1872                           ;TAD_RFID.c: 347:                     waitIRq = 0x30;
  1873   000048  0E30               	movlw	48
  1874   00004A  6E70               	movwf	motor_RFID@waitIRq^0,c
  1875   00004C                     
  1876                           ;TAD_RFID.c: 348:                     MFRC522_Wr(0x02, irqEn | 0x80);
  1877   00004C  0EF7               	movlw	247
  1878   00004E  6E0C               	movwf	MFRC522_Wr@value^0,c
  1879   000050  0E02               	movlw	2
  1880   000052  EC68  F006         	call	_MFRC522_Wr
  1881   000056                     l3332:
  1882                           
  1883                           ;TAD_RFID.c: 349:                     substate = 2;
  1884   000056  0E02               	movlw	2
  1885   000058  6E72               	movwf	motor_RFID@substate^0,c
  1886                           
  1887                           ;TAD_RFID.c: 350:                     break;
  1888   00005A  EF95  F002         	goto	l410
  1889   00005E                     l3334:
  1890                           
  1891                           ;TAD_RFID.c: 353:                     MFRC522_Clear_Bit(0x04, 0x80);
  1892   00005E  0E80               	movlw	128
  1893   000060  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  1894   000062  0E04               	movlw	4
  1895   000064  EC48  F009         	call	_MFRC522_Clear_Bit
  1896   000068                     l3336:
  1897                           
  1898                           ;TAD_RFID.c: 354:                     substate = 3;
  1899   000068  0E03               	movlw	3
  1900   00006A  6E72               	movwf	motor_RFID@substate^0,c
  1901                           
  1902                           ;TAD_RFID.c: 355:                     break;
  1903   00006C  EF95  F002         	goto	l410
  1904   000070                     l3338:
  1905                           
  1906                           ;TAD_RFID.c: 358:                     MFRC522_Set_Bit(0x0A, 0x80);
  1907   000070  0E80               	movlw	128
  1908   000072  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  1909   000074  0E0A               	movlw	10
  1910   000076  EC81  F009         	call	_MFRC522_Set_Bit
  1911   00007A                     l3340:
  1912                           
  1913                           ;TAD_RFID.c: 359:                     substate = 4;
  1914   00007A  0E04               	movlw	4
  1915   00007C  6E72               	movwf	motor_RFID@substate^0,c
  1916                           
  1917                           ;TAD_RFID.c: 360:                     break;
  1918   00007E  EF95  F002         	goto	l410
  1919   000082                     l3342:
  1920                           
  1921                           ;TAD_RFID.c: 363:                     MFRC522_Wr(0x01, 0x00);
  1922   000082  0E00               	movlw	0
  1923   000084  6E0C               	movwf	MFRC522_Wr@value^0,c
  1924   000086  0E01               	movlw	1
  1925   000088  EC68  F006         	call	_MFRC522_Wr
  1926   00008C                     l3344:
  1927                           
  1928                           ;TAD_RFID.c: 364:                     substate = 5;
  1929   00008C  0E05               	movlw	5
  1930   00008E  6E72               	movwf	motor_RFID@substate^0,c
  1931                           
  1932                           ;TAD_RFID.c: 365:                     break;
  1933   000090  EF95  F002         	goto	l410
  1934   000094                     l3346:
  1935                           
  1936                           ;TAD_RFID.c: 368:                     MFRC522_Wr(0x09, TagType);
  1937   000094  C06C  F00C         	movff	motor_RFID@TagType,MFRC522_Wr@value
  1938   000098  0E09               	movlw	9
  1939   00009A  EC68  F006         	call	_MFRC522_Wr
  1940   00009E                     l3348:
  1941                           
  1942                           ;TAD_RFID.c: 369:                     substate = 6;
  1943   00009E  0E06               	movlw	6
  1944   0000A0  6E72               	movwf	motor_RFID@substate^0,c
  1945                           
  1946                           ;TAD_RFID.c: 370:                     break;
  1947   0000A2  EF95  F002         	goto	l410
  1948   0000A6                     l3350:
  1949                           
  1950                           ;TAD_RFID.c: 373:                     MFRC522_Wr(0x01, 0x0C);
  1951   0000A6  0E0C               	movlw	12
  1952   0000A8  6E0C               	movwf	MFRC522_Wr@value^0,c
  1953   0000AA  0E01               	movlw	1
  1954   0000AC  EC68  F006         	call	_MFRC522_Wr
  1955   0000B0                     l3352:
  1956                           
  1957                           ;TAD_RFID.c: 374:                     substate = 7;
  1958   0000B0  0E07               	movlw	7
  1959   0000B2  6E72               	movwf	motor_RFID@substate^0,c
  1960                           
  1961                           ;TAD_RFID.c: 375:                     break;
  1962   0000B4  EF95  F002         	goto	l410
  1963   0000B8                     l3354:
  1964                           
  1965                           ;TAD_RFID.c: 378:                     MFRC522_Set_Bit(0x0D, 0x80);
  1966   0000B8  0E80               	movlw	128
  1967   0000BA  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  1968   0000BC  0E0D               	movlw	13
  1969   0000BE  EC81  F009         	call	_MFRC522_Set_Bit
  1970   0000C2                     
  1971                           ;TAD_RFID.c: 379:                     i = 0xFF;
  1972   0000C2  686E               	setf	motor_RFID@i^0,c
  1973   0000C4                     l3358:
  1974                           
  1975                           ;TAD_RFID.c: 380:                     substate = 8;
  1976   0000C4  0E08               	movlw	8
  1977   0000C6  6E72               	movwf	motor_RFID@substate^0,c
  1978                           
  1979                           ;TAD_RFID.c: 381:                     break;
  1980   0000C8  EF95  F002         	goto	l410
  1981   0000CC                     l3360:
  1982                           
  1983                           ;TAD_RFID.c: 384:                     n = MFRC522_Rd(0x04);
  1984   0000CC  0E04               	movlw	4
  1985   0000CE  ECBC  F006         	call	_MFRC522_Rd
  1986   0000D2  6E6F               	movwf	motor_RFID@n^0,c
  1987   0000D4                     
  1988                           ;TAD_RFID.c: 385:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  1989   0000D4  B06F               	btfsc	motor_RFID@n^0,0,c
  1990   0000D6  EF6F  F000         	goto	u2521
  1991   0000DA  EF71  F000         	goto	u2520
  1992   0000DE                     u2521:
  1993   0000DE  EF7E  F000         	goto	l3368
  1994   0000E2                     u2520:
  1995   0000E2  506F               	movf	motor_RFID@n^0,w,c
  1996   0000E4  1470               	andwf	motor_RFID@waitIRq^0,w,c
  1997   0000E6  0900               	iorlw	0
  1998   0000E8  A4D8               	btfss	status,2,c
  1999   0000EA  EF79  F000         	goto	u2531
  2000   0000EE  EF7B  F000         	goto	u2530
  2001   0000F2                     u2531:
  2002   0000F2  EF7E  F000         	goto	l3368
  2003   0000F6                     u2530:
  2004   0000F6  2E6E               	decfsz	motor_RFID@i^0,f,c
  2005   0000F8  EF95  F002         	goto	l410
  2006   0000FC                     l3368:
  2007                           
  2008                           ;TAD_RFID.c: 386:                         substate = 9;
  2009   0000FC  0E09               	movlw	9
  2010   0000FE  6E72               	movwf	motor_RFID@substate^0,c
  2011   000100  EF95  F002         	goto	l410
  2012   000104                     l3370:
  2013                           
  2014                           ;TAD_RFID.c: 391:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2015   000104  0E80               	movlw	128
  2016   000106  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2017   000108  0E0D               	movlw	13
  2018   00010A  EC48  F009         	call	_MFRC522_Clear_Bit
  2019   00010E                     l3372:
  2020                           
  2021                           ;TAD_RFID.c: 392:                     substate = 10;
  2022   00010E  0E0A               	movlw	10
  2023   000110  6E72               	movwf	motor_RFID@substate^0,c
  2024                           
  2025                           ;TAD_RFID.c: 393:                     break;
  2026   000112  EF95  F002         	goto	l410
  2027   000116                     l3374:
  2028                           
  2029                           ;TAD_RFID.c: 396:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2030   000116  506E               	movf	motor_RFID@i^0,w,c
  2031   000118  B4D8               	btfsc	status,2,c
  2032   00011A  EF91  F000         	goto	u2541
  2033   00011E  EF93  F000         	goto	u2540
  2034   000122                     u2541:
  2035   000122  EFDD  F000         	goto	l3390
  2036   000126                     u2540:
  2037   000126  0E06               	movlw	6
  2038   000128  ECBC  F006         	call	_MFRC522_Rd
  2039   00012C  6E4D               	movwf	??_motor_RFID^0,c
  2040   00012E  0E1B               	movlw	27
  2041   000130  164D               	andwf	??_motor_RFID^0,f,c
  2042   000132  A4D8               	btfss	status,2,c
  2043   000134  EF9E  F000         	goto	u2551
  2044   000138  EFA0  F000         	goto	u2550
  2045   00013C                     u2551:
  2046   00013C  EFDD  F000         	goto	l3390
  2047   000140                     u2550:
  2048   000140                     
  2049                           ;TAD_RFID.c: 397:                         unsigned char fifoLevel = MFRC522_Rd(0x0A);
  2050   000140  0E0A               	movlw	10
  2051   000142  ECBC  F006         	call	_MFRC522_Rd
  2052   000146  6E51               	movwf	motor_RFID@fifoLevel^0,c
  2053                           
  2054                           ;TAD_RFID.c: 398:                         unsigned char lastBitsVal = MFRC522_Rd(0x0C) &
      +                           0x07;
  2055   000148  0E0C               	movlw	12
  2056   00014A  ECBC  F006         	call	_MFRC522_Rd
  2057   00014E  0B07               	andlw	7
  2058   000150  6E52               	movwf	motor_RFID@lastBitsVal^0,c
  2059   000152                     
  2060                           ;TAD_RFID.c: 399:                         unsigned backBitsCalc;;TAD_RFID.c: 400:       
      +                                            if (lastBitsVal)
  2061   000152  5052               	movf	motor_RFID@lastBitsVal^0,w,c
  2062   000154  B4D8               	btfsc	status,2,c
  2063   000156  EFAF  F000         	goto	u2561
  2064   00015A  EFB1  F000         	goto	u2560
  2065   00015E                     u2561:
  2066   00015E  EFC9  F000         	goto	l3384
  2067   000162                     u2560:
  2068   000162                     
  2069                           ;TAD_RFID.c: 401:                             backBitsCalc = (fifoLevel - 1) * 8 + lastB
      +                          itsVal;
  2070   000162  5052               	movf	motor_RFID@lastBitsVal^0,w,c
  2071   000164  C051  F04D         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2072   000168  6A4E               	clrf	(??_motor_RFID+1)^0,c
  2073   00016A  90D8               	bcf	status,0,c
  2074   00016C  364D               	rlcf	??_motor_RFID^0,f,c
  2075   00016E  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2076   000170  90D8               	bcf	status,0,c
  2077   000172  364D               	rlcf	??_motor_RFID^0,f,c
  2078   000174  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2079   000176  90D8               	bcf	status,0,c
  2080   000178  364D               	rlcf	??_motor_RFID^0,f,c
  2081   00017A  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2082   00017C  264D               	addwf	??_motor_RFID^0,f,c
  2083   00017E  0E00               	movlw	0
  2084   000180  224E               	addwfc	(??_motor_RFID+1)^0,f,c
  2085   000182  0EF8               	movlw	248
  2086   000184  244D               	addwf	??_motor_RFID^0,w,c
  2087   000186  6E4F               	movwf	motor_RFID@backBitsCalc^0,c
  2088   000188  0EFF               	movlw	255
  2089   00018A  204E               	addwfc	(??_motor_RFID+1)^0,w,c
  2090   00018C  6E50               	movwf	(motor_RFID@backBitsCalc+1)^0,c
  2091   00018E  EFCF  F000         	goto	l3386
  2092   000192                     l3384:
  2093                           
  2094                           ;TAD_RFID.c: 403:                             backBitsCalc = fifoLevel * 8;
  2095   000192  5051               	movf	motor_RFID@fifoLevel^0,w,c
  2096   000194  0D08               	mullw	8
  2097   000196  CFF3 F04F          	movff	prodl,motor_RFID@backBitsCalc
  2098   00019A  CFF4 F050          	movff	prodh,motor_RFID@backBitsCalc+1
  2099   00019E                     l3386:
  2100                           
  2101                           ;TAD_RFID.c: 405:                         if (backBitsCalc == 0x10) {
  2102   00019E  0E10               	movlw	16
  2103   0001A0  184F               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2104   0001A2  1050               	iorwf	(motor_RFID@backBitsCalc+1)^0,w,c
  2105   0001A4  A4D8               	btfss	status,2,c
  2106   0001A6  EFD7  F000         	goto	u2571
  2107   0001AA  EFD9  F000         	goto	u2570
  2108   0001AE                     u2571:
  2109   0001AE  EFDD  F000         	goto	l3390
  2110   0001B2                     u2570:
  2111   0001B2                     l3388:
  2112                           
  2113                           ;TAD_RFID.c: 406:                             substate = 11;
  2114   0001B2  0E0B               	movlw	11
  2115   0001B4  6E72               	movwf	motor_RFID@substate^0,c
  2116                           
  2117                           ;TAD_RFID.c: 407:                         } else {
  2118   0001B6  EF95  F002         	goto	l410
  2119   0001BA                     l3390:
  2120                           
  2121                           ;TAD_RFID.c: 408:                             substate = 12;
  2122   0001BA  0E0C               	movlw	12
  2123   0001BC  6E72               	movwf	motor_RFID@substate^0,c
  2124   0001BE  EF95  F002         	goto	l410
  2125   0001C2                     l3394:
  2126                           
  2127                           ;TAD_RFID.c: 416:                     state = 1;
  2128   0001C2  0E01               	movlw	1
  2129   0001C4  6E73               	movwf	motor_RFID@state^0,c
  2130   0001C6                     l3396:
  2131                           
  2132                           ;TAD_RFID.c: 417:                     substate = 0;
  2133   0001C6  6A72               	clrf	motor_RFID@substate^0,c
  2134                           
  2135                           ;TAD_RFID.c: 418:                     break;
  2136   0001C8  EF95  F002         	goto	l410
  2137   0001CC                     l370:
  2138                           
  2139                           ;TAD_RFID.c: 421:                     state = 0;
  2140   0001CC  6A73               	clrf	motor_RFID@state^0,c
  2141                           
  2142                           ;TAD_RFID.c: 422:                     substate = 0;
  2143   0001CE  6A72               	clrf	motor_RFID@substate^0,c
  2144                           
  2145                           ;TAD_RFID.c: 423:                     break;
  2146   0001D0  EF95  F002         	goto	l410
  2147   0001D4                     l3400:
  2148   0001D4  5072               	movf	motor_RFID@substate^0,w,c
  2149                           
  2150                           ; Switch size 1, requested type "simple"
  2151                           ; Number of cases is 13, Range of values is 0 to 12
  2152                           ; switch strategies available:
  2153                           ; Name         Instructions Cycles
  2154                           ; simple_byte           40    21 (average)
  2155                           ;	Chosen strategy is simple_byte
  2156   0001D6  0A00               	xorlw	0	; case 0
  2157   0001D8  B4D8               	btfsc	status,2,c
  2158   0001DA  EF17  F000         	goto	l3322
  2159   0001DE  0A01               	xorlw	1	; case 1
  2160   0001E0  B4D8               	btfsc	status,2,c
  2161   0001E2  EF22  F000         	goto	l3328
  2162   0001E6  0A03               	xorlw	3	; case 2
  2163   0001E8  B4D8               	btfsc	status,2,c
  2164   0001EA  EF2F  F000         	goto	l3334
  2165   0001EE  0A01               	xorlw	1	; case 3
  2166   0001F0  B4D8               	btfsc	status,2,c
  2167   0001F2  EF38  F000         	goto	l3338
  2168   0001F6  0A07               	xorlw	7	; case 4
  2169   0001F8  B4D8               	btfsc	status,2,c
  2170   0001FA  EF41  F000         	goto	l3342
  2171   0001FE  0A01               	xorlw	1	; case 5
  2172   000200  B4D8               	btfsc	status,2,c
  2173   000202  EF4A  F000         	goto	l3346
  2174   000206  0A03               	xorlw	3	; case 6
  2175   000208  B4D8               	btfsc	status,2,c
  2176   00020A  EF53  F000         	goto	l3350
  2177   00020E  0A01               	xorlw	1	; case 7
  2178   000210  B4D8               	btfsc	status,2,c
  2179   000212  EF5C  F000         	goto	l3354
  2180   000216  0A0F               	xorlw	15	; case 8
  2181   000218  B4D8               	btfsc	status,2,c
  2182   00021A  EF66  F000         	goto	l3360
  2183   00021E  0A01               	xorlw	1	; case 9
  2184   000220  B4D8               	btfsc	status,2,c
  2185   000222  EF82  F000         	goto	l3370
  2186   000226  0A03               	xorlw	3	; case 10
  2187   000228  B4D8               	btfsc	status,2,c
  2188   00022A  EF8B  F000         	goto	l3374
  2189   00022E  0A01               	xorlw	1	; case 11
  2190   000230  B4D8               	btfsc	status,2,c
  2191   000232  EFE1  F000         	goto	l3394
  2192   000236  0A07               	xorlw	7	; case 12
  2193   000238  B4D8               	btfsc	status,2,c
  2194   00023A  EFE6  F000         	goto	l370
  2195   00023E  EF95  F002         	goto	l410
  2196   000242                     l3402:
  2197                           
  2198                           ;TAD_RFID.c: 431:                     MFRC522_Wr(0x0D, 0x00);
  2199   000242  0E00               	movlw	0
  2200   000244  6E0C               	movwf	MFRC522_Wr@value^0,c
  2201   000246  0E0D               	movlw	13
  2202   000248  EC68  F006         	call	_MFRC522_Wr
  2203   00024C                     
  2204                           ;TAD_RFID.c: 432:                     UID[0] = 0x93;
  2205   00024C  0E93               	movlw	147
  2206   00024E  6E53               	movwf	motor_RFID@UID^0,c
  2207   000250                     
  2208                           ;TAD_RFID.c: 433:                     UID[1] = 0x20;
  2209   000250  0E20               	movlw	32
  2210   000252  6E54               	movwf	(motor_RFID@UID+1)^0,c
  2211   000254  EF1E  F000         	goto	l3326
  2212   000258                     l3410:
  2213                           
  2214                           ;TAD_RFID.c: 438:                     MFRC522_Clear_Bit(0x08, 0x08);
  2215   000258  0E08               	movlw	8
  2216   00025A  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2217   00025C  0E08               	movlw	8
  2218   00025E  EC48  F009         	call	_MFRC522_Clear_Bit
  2219   000262  EF2B  F000         	goto	l3332
  2220   000266                     l3414:
  2221                           
  2222                           ;TAD_RFID.c: 443:                     irqEn = 0x77;
  2223   000266  0E77               	movlw	119
  2224   000268  6E71               	movwf	motor_RFID@irqEn^0,c
  2225                           
  2226                           ;TAD_RFID.c: 444:                     waitIRq = 0x30;
  2227   00026A  0E30               	movlw	48
  2228   00026C  6E70               	movwf	motor_RFID@waitIRq^0,c
  2229   00026E                     
  2230                           ;TAD_RFID.c: 445:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2231   00026E  0EF7               	movlw	247
  2232   000270  6E0C               	movwf	MFRC522_Wr@value^0,c
  2233   000272  0E02               	movlw	2
  2234   000274  EC68  F006         	call	_MFRC522_Wr
  2235   000278  EF34  F000         	goto	l3336
  2236   00027C                     l3420:
  2237                           
  2238                           ;TAD_RFID.c: 450:                     MFRC522_Clear_Bit(0x04, 0x80);
  2239   00027C  0E80               	movlw	128
  2240   00027E  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2241   000280  0E04               	movlw	4
  2242   000282  EC48  F009         	call	_MFRC522_Clear_Bit
  2243   000286  EF3D  F000         	goto	l3340
  2244   00028A                     l3424:
  2245                           
  2246                           ;TAD_RFID.c: 455:                     MFRC522_Set_Bit(0x0A, 0x80);
  2247   00028A  0E80               	movlw	128
  2248   00028C  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2249   00028E  0E0A               	movlw	10
  2250   000290  EC81  F009         	call	_MFRC522_Set_Bit
  2251   000294  EF46  F000         	goto	l3344
  2252   000298                     l3428:
  2253                           
  2254                           ;TAD_RFID.c: 460:                     MFRC522_Wr(0x01, 0x00);
  2255   000298  0E00               	movlw	0
  2256   00029A  6E0C               	movwf	MFRC522_Wr@value^0,c
  2257   00029C  0E01               	movlw	1
  2258   00029E  EC68  F006         	call	_MFRC522_Wr
  2259   0002A2  EF4F  F000         	goto	l3348
  2260   0002A6                     l3432:
  2261                           
  2262                           ;TAD_RFID.c: 465:                     MFRC522_Wr(0x09, UID[0]);
  2263   0002A6  C053  F00C         	movff	motor_RFID@UID,MFRC522_Wr@value
  2264   0002AA  0E09               	movlw	9
  2265   0002AC  EC68  F006         	call	_MFRC522_Wr
  2266                           
  2267                           ;TAD_RFID.c: 466:                     MFRC522_Wr(0x09, UID[1]);
  2268   0002B0  C054  F00C         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2269   0002B4  0E09               	movlw	9
  2270   0002B6  EC68  F006         	call	_MFRC522_Wr
  2271   0002BA  EF58  F000         	goto	l3352
  2272   0002BE                     l3436:
  2273                           
  2274                           ;TAD_RFID.c: 471:                     MFRC522_Wr(0x01, 0x0C);
  2275   0002BE  0E0C               	movlw	12
  2276   0002C0  6E0C               	movwf	MFRC522_Wr@value^0,c
  2277   0002C2  0E01               	movlw	1
  2278   0002C4  EC68  F006         	call	_MFRC522_Wr
  2279   0002C8  EF62  F000         	goto	l3358
  2280   0002CC                     l3440:
  2281                           
  2282                           ;TAD_RFID.c: 476:                     MFRC522_Set_Bit(0x0D, 0x80);
  2283   0002CC  0E80               	movlw	128
  2284   0002CE  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2285   0002D0  0E0D               	movlw	13
  2286   0002D2  EC81  F009         	call	_MFRC522_Set_Bit
  2287   0002D6                     
  2288                           ;TAD_RFID.c: 477:                     i = 0xFF;
  2289   0002D6  686E               	setf	motor_RFID@i^0,c
  2290   0002D8  EF7E  F000         	goto	l3368
  2291   0002DC                     l3446:
  2292                           
  2293                           ;TAD_RFID.c: 482:                     n = MFRC522_Rd(0x04);
  2294   0002DC  0E04               	movlw	4
  2295   0002DE  ECBC  F006         	call	_MFRC522_Rd
  2296   0002E2  6E6F               	movwf	motor_RFID@n^0,c
  2297   0002E4                     
  2298                           ;TAD_RFID.c: 483:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2299   0002E4  B06F               	btfsc	motor_RFID@n^0,0,c
  2300   0002E6  EF77  F001         	goto	u2581
  2301   0002EA  EF79  F001         	goto	u2580
  2302   0002EE                     u2581:
  2303   0002EE  EF87  F000         	goto	l3372
  2304   0002F2                     u2580:
  2305   0002F2  506F               	movf	motor_RFID@n^0,w,c
  2306   0002F4  1470               	andwf	motor_RFID@waitIRq^0,w,c
  2307   0002F6  0900               	iorlw	0
  2308   0002F8  A4D8               	btfss	status,2,c
  2309   0002FA  EF81  F001         	goto	u2591
  2310   0002FE  EF83  F001         	goto	u2590
  2311   000302                     u2591:
  2312   000302  EF87  F000         	goto	l3372
  2313   000306                     u2590:
  2314   000306  2E6E               	decfsz	motor_RFID@i^0,f,c
  2315   000308  EF95  F002         	goto	l410
  2316   00030C  EF87  F000         	goto	l3372
  2317   000310                     l3456:
  2318                           
  2319                           ;TAD_RFID.c: 489:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2320   000310  0E80               	movlw	128
  2321   000312  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2322   000314  0E0D               	movlw	13
  2323   000316  EC48  F009         	call	_MFRC522_Clear_Bit
  2324   00031A  EFD9  F000         	goto	l3388
  2325   00031E                     l3460:
  2326                           
  2327                           ;TAD_RFID.c: 494:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2328   00031E  506E               	movf	motor_RFID@i^0,w,c
  2329   000320  B4D8               	btfsc	status,2,c
  2330   000322  EF95  F001         	goto	u2601
  2331   000326  EF97  F001         	goto	u2600
  2332   00032A                     u2601:
  2333   00032A  EFE6  F000         	goto	l370
  2334   00032E                     u2600:
  2335   00032E  0E06               	movlw	6
  2336   000330  ECBC  F006         	call	_MFRC522_Rd
  2337   000334  6E4D               	movwf	??_motor_RFID^0,c
  2338   000336  0E1B               	movlw	27
  2339   000338  164D               	andwf	??_motor_RFID^0,f,c
  2340   00033A  A4D8               	btfss	status,2,c
  2341   00033C  EFA2  F001         	goto	u2611
  2342   000340  EFA4  F001         	goto	u2610
  2343   000344                     u2611:
  2344   000344  EFE6  F000         	goto	l370
  2345   000348                     u2610:
  2346   000348                     
  2347                           ;TAD_RFID.c: 496:                         UID[0] = MFRC522_Rd(0x09);
  2348   000348  0E09               	movlw	9
  2349   00034A  ECBC  F006         	call	_MFRC522_Rd
  2350   00034E  6E53               	movwf	motor_RFID@UID^0,c
  2351                           
  2352                           ;TAD_RFID.c: 497:                         UID[1] = MFRC522_Rd(0x09);
  2353   000350  0E09               	movlw	9
  2354   000352  ECBC  F006         	call	_MFRC522_Rd
  2355   000356  6E54               	movwf	(motor_RFID@UID+1)^0,c
  2356   000358  EFDD  F000         	goto	l3390
  2357   00035C                     l3468:
  2358                           
  2359                           ;TAD_RFID.c: 507:                     UID[2] = MFRC522_Rd(0x09);
  2360   00035C  0E09               	movlw	9
  2361   00035E  ECBC  F006         	call	_MFRC522_Rd
  2362   000362  6E55               	movwf	(motor_RFID@UID+2)^0,c
  2363                           
  2364                           ;TAD_RFID.c: 508:                     UID[3] = MFRC522_Rd(0x09);
  2365   000364  0E09               	movlw	9
  2366   000366  ECBC  F006         	call	_MFRC522_Rd
  2367   00036A  6E56               	movwf	(motor_RFID@UID+3)^0,c
  2368   00036C                     
  2369                           ;TAD_RFID.c: 509:                     substate = 13;
  2370   00036C  0E0D               	movlw	13
  2371   00036E  6E72               	movwf	motor_RFID@substate^0,c
  2372                           
  2373                           ;TAD_RFID.c: 510:                     break;
  2374   000370  EF95  F002         	goto	l410
  2375   000374                     l3472:
  2376                           
  2377                           ;TAD_RFID.c: 513:                     UID[4] = MFRC522_Rd(0x09);
  2378   000374  0E09               	movlw	9
  2379   000376  ECBC  F006         	call	_MFRC522_Rd
  2380   00037A  6E57               	movwf	(motor_RFID@UID+4)^0,c
  2381   00037C                     
  2382                           ;TAD_RFID.c: 514:                     UID[5] = 0;
  2383   00037C  6A58               	clrf	(motor_RFID@UID+5)^0,c
  2384   00037E                     
  2385                           ;TAD_RFID.c: 515:                     substate = 14;
  2386   00037E  0E0E               	movlw	14
  2387   000380  6E72               	movwf	motor_RFID@substate^0,c
  2388                           
  2389                           ;TAD_RFID.c: 516:                     break;
  2390   000382  EF95  F002         	goto	l410
  2391   000386                     l3478:
  2392                           
  2393                           ;TAD_RFID.c: 519:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  2394   000386  5054               	movf	(motor_RFID@UID+1)^0,w,c
  2395   000388  1855               	xorwf	(motor_RFID@UID+2)^0,w,c
  2396   00038A  1856               	xorwf	(motor_RFID@UID+3)^0,w,c
  2397   00038C  1853               	xorwf	motor_RFID@UID^0,w,c
  2398   00038E  6E6B               	movwf	motor_RFID@checksum^0,c
  2399   000390                     
  2400                           ;TAD_RFID.c: 521:                     allZero = 1;
  2401   000390  0E01               	movlw	1
  2402   000392  6E6A               	movwf	motor_RFID@allZero^0,c
  2403   000394                     
  2404                           ;TAD_RFID.c: 522:                     substate = 15;
  2405   000394  0E0F               	movlw	15
  2406   000396  6E72               	movwf	motor_RFID@substate^0,c
  2407                           
  2408                           ;TAD_RFID.c: 523:                     break;
  2409   000398  EF95  F002         	goto	l410
  2410   00039C                     l3484:
  2411                           
  2412                           ;TAD_RFID.c: 526:                     if (UID[0] != 0 || UID[1] != 0) {
  2413   00039C  5053               	movf	motor_RFID@UID^0,w,c
  2414   00039E  A4D8               	btfss	status,2,c
  2415   0003A0  EFD4  F001         	goto	u2621
  2416   0003A4  EFD6  F001         	goto	u2620
  2417   0003A8                     u2621:
  2418   0003A8  EFDE  F001         	goto	l398
  2419   0003AC                     u2620:
  2420   0003AC  5054               	movf	(motor_RFID@UID+1)^0,w,c
  2421   0003AE  B4D8               	btfsc	status,2,c
  2422   0003B0  EFDC  F001         	goto	u2631
  2423   0003B4  EFDE  F001         	goto	u2630
  2424   0003B8                     u2631:
  2425   0003B8  EFDF  F001         	goto	l3488
  2426   0003BC                     u2630:
  2427   0003BC                     l398:
  2428                           
  2429                           ;TAD_RFID.c: 527:                         allZero = 0;
  2430   0003BC  6A6A               	clrf	motor_RFID@allZero^0,c
  2431   0003BE                     l3488:
  2432                           
  2433                           ;TAD_RFID.c: 529:                     substate = 16;
  2434   0003BE  0E10               	movlw	16
  2435   0003C0  6E72               	movwf	motor_RFID@substate^0,c
  2436                           
  2437                           ;TAD_RFID.c: 530:                     break;
  2438   0003C2  EF95  F002         	goto	l410
  2439   0003C6                     l3490:
  2440                           
  2441                           ;TAD_RFID.c: 533:                     if (UID[2] != 0 || UID[3] != 0) {
  2442   0003C6  5055               	movf	(motor_RFID@UID+2)^0,w,c
  2443   0003C8  A4D8               	btfss	status,2,c
  2444   0003CA  EFE9  F001         	goto	u2641
  2445   0003CE  EFEB  F001         	goto	u2640
  2446   0003D2                     u2641:
  2447   0003D2  EFF3  F001         	goto	l402
  2448   0003D6                     u2640:
  2449   0003D6  5056               	movf	(motor_RFID@UID+3)^0,w,c
  2450   0003D8  B4D8               	btfsc	status,2,c
  2451   0003DA  EFF1  F001         	goto	u2651
  2452   0003DE  EFF3  F001         	goto	u2650
  2453   0003E2                     u2651:
  2454   0003E2  EFF4  F001         	goto	l3494
  2455   0003E6                     u2650:
  2456   0003E6                     l402:
  2457                           
  2458                           ;TAD_RFID.c: 534:                         allZero = 0;
  2459   0003E6  6A6A               	clrf	motor_RFID@allZero^0,c
  2460   0003E8                     l3494:
  2461                           
  2462                           ;TAD_RFID.c: 536:                     substate = 17;
  2463   0003E8  0E11               	movlw	17
  2464   0003EA  6E72               	movwf	motor_RFID@substate^0,c
  2465                           
  2466                           ;TAD_RFID.c: 537:                     break;
  2467   0003EC  EF95  F002         	goto	l410
  2468   0003F0                     l3496:
  2469                           
  2470                           ;TAD_RFID.c: 540:                     if (checksum != UID[4] || allZero) {
  2471   0003F0  506B               	movf	motor_RFID@checksum^0,w,c
  2472   0003F2  1857               	xorwf	(motor_RFID@UID+4)^0,w,c
  2473   0003F4  A4D8               	btfss	status,2,c
  2474   0003F6  EFFF  F001         	goto	u2661
  2475   0003FA  EF01  F002         	goto	u2660
  2476   0003FE                     u2661:
  2477   0003FE  EFE6  F000         	goto	l370
  2478   000402                     u2660:
  2479   000402  506A               	movf	motor_RFID@allZero^0,w,c
  2480   000404  B4D8               	btfsc	status,2,c
  2481   000406  EF07  F002         	goto	u2671
  2482   00040A  EF09  F002         	goto	u2670
  2483   00040E                     u2671:
  2484   00040E  EF0B  F002         	goto	l3500
  2485   000412                     u2670:
  2486   000412  EFE6  F000         	goto	l370
  2487   000416                     l3500:
  2488                           
  2489                           ;TAD_RFID.c: 546:                         substate = 18;
  2490   000416  0E12               	movlw	18
  2491   000418  6E72               	movwf	motor_RFID@substate^0,c
  2492   00041A  EF95  F002         	goto	l410
  2493   00041E                     l3502:
  2494                           
  2495                           ;TAD_RFID.c: 551:                     sprintf(buffer, "UID: %02X%02X%02X%02X%02X\r\n", U
      +                          ID[0], UID[1], UID[2], UID[3], UID[4]);
  2496   00041E  0E94               	movlw	low motor_RFID@buffer
  2497   000420  6E34               	movwf	sprintf@s^0,c
  2498   000422  0E4C               	movlw	low STR_4
  2499   000424  6E35               	movwf	sprintf@fmt^0,c
  2500   000426  0E1F               	movlw	high STR_4
  2501   000428  6E36               	movwf	(sprintf@fmt+1)^0,c
  2502   00042A  C053  F037         	movff	motor_RFID@UID,?_sprintf+3
  2503   00042E  6A38               	clrf	(?_sprintf+4)^0,c
  2504   000430  C054  F039         	movff	motor_RFID@UID+1,?_sprintf+5
  2505   000434  6A3A               	clrf	(?_sprintf+6)^0,c
  2506   000436  C055  F03B         	movff	motor_RFID@UID+2,?_sprintf+7
  2507   00043A  6A3C               	clrf	(?_sprintf+8)^0,c
  2508   00043C  C056  F03D         	movff	motor_RFID@UID+3,?_sprintf+9
  2509   000440  6A3E               	clrf	(?_sprintf+10)^0,c
  2510   000442  C057  F03F         	movff	motor_RFID@UID+4,?_sprintf+11
  2511   000446  6A40               	clrf	(?_sprintf+12)^0,c
  2512   000448  EC97  F008         	call	_sprintf	;wreg free
  2513   00044C                     
  2514                           ;TAD_RFID.c: 552:                     Terminal_SendString(buffer);
  2515   00044C  0E94               	movlw	low motor_RFID@buffer
  2516   00044E  6E05               	movwf	Terminal_SendString@str^0,c
  2517   000450  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2518   000452  EC52  F007         	call	_Terminal_SendString	;wreg free
  2519   000456                     
  2520                           ;TAD_RFID.c: 553:                     substate = 19;
  2521   000456  0E13               	movlw	19
  2522   000458  6E72               	movwf	motor_RFID@substate^0,c
  2523                           
  2524                           ;TAD_RFID.c: 554:                     break;
  2525   00045A  EF95  F002         	goto	l410
  2526   00045E                     l3508:
  2527                           
  2528                           ;TAD_RFID.c: 557:                     MFRC522_Wr(0x0D, 0x00);
  2529   00045E  0E00               	movlw	0
  2530   000460  6E0C               	movwf	MFRC522_Wr@value^0,c
  2531   000462  0E0D               	movlw	13
  2532   000464  EC68  F006         	call	_MFRC522_Wr
  2533   000468                     
  2534                           ;TAD_RFID.c: 558:                     state = 0;
  2535   000468  6A73               	clrf	motor_RFID@state^0,c
  2536   00046A  EFE3  F000         	goto	l3396
  2537   00046E                     l3516:
  2538   00046E  5072               	movf	motor_RFID@substate^0,w,c
  2539                           
  2540                           ; Switch size 1, requested type "simple"
  2541                           ; Number of cases is 20, Range of values is 0 to 19
  2542                           ; switch strategies available:
  2543                           ; Name         Instructions Cycles
  2544                           ; simple_byte           61    31 (average)
  2545                           ;	Chosen strategy is simple_byte
  2546   000470  0A00               	xorlw	0	; case 0
  2547   000472  B4D8               	btfsc	status,2,c
  2548   000474  EF21  F001         	goto	l3402
  2549   000478  0A01               	xorlw	1	; case 1
  2550   00047A  B4D8               	btfsc	status,2,c
  2551   00047C  EF2C  F001         	goto	l3410
  2552   000480  0A03               	xorlw	3	; case 2
  2553   000482  B4D8               	btfsc	status,2,c
  2554   000484  EF33  F001         	goto	l3414
  2555   000488  0A01               	xorlw	1	; case 3
  2556   00048A  B4D8               	btfsc	status,2,c
  2557   00048C  EF3E  F001         	goto	l3420
  2558   000490  0A07               	xorlw	7	; case 4
  2559   000492  B4D8               	btfsc	status,2,c
  2560   000494  EF45  F001         	goto	l3424
  2561   000498  0A01               	xorlw	1	; case 5
  2562   00049A  B4D8               	btfsc	status,2,c
  2563   00049C  EF4C  F001         	goto	l3428
  2564   0004A0  0A03               	xorlw	3	; case 6
  2565   0004A2  B4D8               	btfsc	status,2,c
  2566   0004A4  EF53  F001         	goto	l3432
  2567   0004A8  0A01               	xorlw	1	; case 7
  2568   0004AA  B4D8               	btfsc	status,2,c
  2569   0004AC  EF5F  F001         	goto	l3436
  2570   0004B0  0A0F               	xorlw	15	; case 8
  2571   0004B2  B4D8               	btfsc	status,2,c
  2572   0004B4  EF66  F001         	goto	l3440
  2573   0004B8  0A01               	xorlw	1	; case 9
  2574   0004BA  B4D8               	btfsc	status,2,c
  2575   0004BC  EF6E  F001         	goto	l3446
  2576   0004C0  0A03               	xorlw	3	; case 10
  2577   0004C2  B4D8               	btfsc	status,2,c
  2578   0004C4  EF88  F001         	goto	l3456
  2579   0004C8  0A01               	xorlw	1	; case 11
  2580   0004CA  B4D8               	btfsc	status,2,c
  2581   0004CC  EF8F  F001         	goto	l3460
  2582   0004D0  0A07               	xorlw	7	; case 12
  2583   0004D2  B4D8               	btfsc	status,2,c
  2584   0004D4  EFAE  F001         	goto	l3468
  2585   0004D8  0A01               	xorlw	1	; case 13
  2586   0004DA  B4D8               	btfsc	status,2,c
  2587   0004DC  EFBA  F001         	goto	l3472
  2588   0004E0  0A03               	xorlw	3	; case 14
  2589   0004E2  B4D8               	btfsc	status,2,c
  2590   0004E4  EFC3  F001         	goto	l3478
  2591   0004E8  0A01               	xorlw	1	; case 15
  2592   0004EA  B4D8               	btfsc	status,2,c
  2593   0004EC  EFCE  F001         	goto	l3484
  2594   0004F0  0A1F               	xorlw	31	; case 16
  2595   0004F2  B4D8               	btfsc	status,2,c
  2596   0004F4  EFE3  F001         	goto	l3490
  2597   0004F8  0A01               	xorlw	1	; case 17
  2598   0004FA  B4D8               	btfsc	status,2,c
  2599   0004FC  EFF8  F001         	goto	l3496
  2600   000500  0A03               	xorlw	3	; case 18
  2601   000502  B4D8               	btfsc	status,2,c
  2602   000504  EF0F  F002         	goto	l3502
  2603   000508  0A01               	xorlw	1	; case 19
  2604   00050A  B4D8               	btfsc	status,2,c
  2605   00050C  EF2F  F002         	goto	l3508
  2606   000510  EF95  F002         	goto	l410
  2607   000514                     l3520:
  2608   000514  5073               	movf	motor_RFID@state^0,w,c
  2609                           
  2610                           ; Switch size 1, requested type "simple"
  2611                           ; Number of cases is 2, Range of values is 0 to 1
  2612                           ; switch strategies available:
  2613                           ; Name         Instructions Cycles
  2614                           ; simple_byte            7     4 (average)
  2615                           ;	Chosen strategy is simple_byte
  2616   000516  0A00               	xorlw	0	; case 0
  2617   000518  B4D8               	btfsc	status,2,c
  2618   00051A  EFEA  F000         	goto	l3400
  2619   00051E  0A01               	xorlw	1	; case 1
  2620   000520  B4D8               	btfsc	status,2,c
  2621   000522  EF37  F002         	goto	l3516
  2622   000526  EF95  F002         	goto	l410
  2623   00052A                     l410:
  2624   00052A  0012               	return		;funcret
  2625   00052C                     __end_of_motor_RFID:
  2626                           	callstack 0
  2627                           
  2628 ;; *************** function _sprintf *****************
  2629 ;; Defined at:
  2630 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  s               1   51[COMRAM] PTR unsigned char 
  2633 ;;		 -> motor_RFID@buffer(50), ReadRFID_NoCooperatiu@buffer(50), 
  2634 ;;  fmt             2   52[COMRAM] PTR const unsigned char 
  2635 ;;		 -> STR_4(28), STR_2(5), 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  f              11   65[COMRAM] struct _IO_FILE
  2638 ;;  ret             2    0        int 
  2639 ;;  ap              1   64[COMRAM] PTR void [1]
  2640 ;;		 -> ?_sprintf(2), 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  2   51[COMRAM] int 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1
  2650 ;;      Params:        13       0       0
  2651 ;;      Locals:        12       0       0
  2652 ;;      Temps:          0       0       0
  2653 ;;      Totals:        25       0       0
  2654 ;;Total ram usage:       25 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 10
  2657 ;; This function calls:
  2658 ;;		_vfprintf
  2659 ;; This function is called by:
  2660 ;;		_motor_RFID
  2661 ;;		_ReadRFID_NoCooperatiu
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text2
  2666   00112E                     __ptext2:
  2667                           	callstack 0
  2668   00112E                     _sprintf:
  2669                           	callstack 19
  2670   00112E  0E37               	movlw	low (?_sprintf+3)
  2671   001130  6E41               	movwf	sprintf@ap^0,c
  2672   001132  C034  F042         	movff	sprintf@s,sprintf@f
  2673   001136  0E00               	movlw	0
  2674   001138  6E45               	movwf	(sprintf@f+3)^0,c
  2675   00113A  0E00               	movlw	0
  2676   00113C  6E44               	movwf	(sprintf@f+2)^0,c
  2677   00113E  0E00               	movlw	0
  2678   001140  6E4C               	movwf	(sprintf@f+10)^0,c
  2679   001142  0E00               	movlw	0
  2680   001144  6E4B               	movwf	(sprintf@f+9)^0,c
  2681   001146  0E42               	movlw	low sprintf@f
  2682   001148  6E2E               	movwf	vfprintf@fp^0,c
  2683   00114A  C035  F02F         	movff	sprintf@fmt,vfprintf@fmt
  2684   00114E  C036  F030         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2685   001152  0E41               	movlw	low sprintf@ap
  2686   001154  6E31               	movwf	vfprintf@ap^0,c
  2687   001156  EC58  F008         	call	_vfprintf	;wreg free
  2688   00115A  5034               	movf	sprintf@s^0,w,c
  2689   00115C  2444               	addwf	(sprintf@f+2)^0,w,c
  2690   00115E  6ED9               	movwf	fsr2l,c
  2691   001160  6ADA               	clrf	fsr2h,c
  2692   001162  6ADF               	clrf	indf2,c
  2693   001164  0012               	return		;funcret
  2694   001166                     __end_of_sprintf:
  2695                           	callstack 0
  2696                           
  2697 ;; *************** function _vfprintf *****************
  2698 ;; Defined at:
  2699 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  2702 ;;		 -> sprintf@f(11), 
  2703 ;;  fmt             2   46[COMRAM] PTR const unsigned char 
  2704 ;;		 -> STR_4(28), STR_2(5), 
  2705 ;;  ap              1   48[COMRAM] PTR PTR void 
  2706 ;;		 -> sprintf@ap(1), 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  cfmt            2   49[COMRAM] PTR unsigned char 
  2709 ;;		 -> STR_4(28), STR_2(5), 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  2   45[COMRAM] int 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1
  2719 ;;      Params:         4       0       0
  2720 ;;      Locals:         2       0       0
  2721 ;;      Temps:          0       0       0
  2722 ;;      Totals:         6       0       0
  2723 ;;Total ram usage:        6 bytes
  2724 ;; Hardware stack levels used: 1
  2725 ;; Hardware stack levels required when called: 9
  2726 ;; This function calls:
  2727 ;;		_vfpfcnvrt
  2728 ;; This function is called by:
  2729 ;;		_sprintf
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text3
  2734   0010B0                     __ptext3:
  2735                           	callstack 0
  2736   0010B0                     _vfprintf:
  2737                           	callstack 19
  2738   0010B0                     
  2739                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2740   0010B0  C02F  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  2741   0010B4  C030  F033         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2742                           
  2743                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2744   0010B8  EF66  F008         	goto	l2996
  2745   0010BC                     l2994:
  2746                           
  2747                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2748   0010BC  C02E  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  2749   0010C0  0E32               	movlw	low vfprintf@cfmt
  2750   0010C2  6E23               	movwf	vfpfcnvrt@fmt^0,c
  2751   0010C4  C031  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  2752   0010C8  ECAE  F003         	call	_vfpfcnvrt	;wreg free
  2753   0010CC                     l2996:
  2754                           
  2755                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2756   0010CC  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  2757   0010D0  C033  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2758   0010D4                     	if	0	;tblptru may be non-zero
  2759   0010D4                     	endif
  2760   0010D4                     	if	0	;tblptru may be non-zero
  2761   0010D4                     	endif
  2762   0010D4  0008               	tblrd		*
  2763   0010D6  50F5               	movf	tablat,w,c
  2764   0010D8  0900               	iorlw	0
  2765   0010DA  A4D8               	btfss	status,2,c
  2766   0010DC  EF72  F008         	goto	u2151
  2767   0010E0  EF74  F008         	goto	u2150
  2768   0010E4                     u2151:
  2769   0010E4  EF5E  F008         	goto	l2994
  2770   0010E8                     u2150:
  2771   0010E8                     
  2772                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2773   0010E8  0E00               	movlw	0
  2774   0010EA  6E2F               	movwf	(?_vfprintf+1)^0,c
  2775   0010EC  0E00               	movlw	0
  2776   0010EE  6E2E               	movwf	?_vfprintf^0,c
  2777   0010F0  0012               	return		;funcret
  2778   0010F2                     __end_of_vfprintf:
  2779                           	callstack 0
  2780                           
  2781 ;; *************** function _vfpfcnvrt *****************
  2782 ;; Defined at:
  2783 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  2786 ;;		 -> sprintf@f(11), 
  2787 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  2788 ;;		 -> vfprintf@cfmt(2), 
  2789 ;;  ap              1   35[COMRAM] PTR PTR void 
  2790 ;;		 -> sprintf@ap(1), 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  convarg         4   38[COMRAM] struct .
  2793 ;;  cp              2   43[COMRAM] PTR unsigned char 
  2794 ;;		 -> STR_4(28), STR_2(5), 
  2795 ;;  done            1   42[COMRAM] _Bool 
  2796 ;;  c               1    0        unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1
  2806 ;;      Params:         3       0       0
  2807 ;;      Locals:         7       0       0
  2808 ;;      Temps:          2       0       0
  2809 ;;      Totals:        12       0       0
  2810 ;;Total ram usage:       12 bytes
  2811 ;; Hardware stack levels used: 1
  2812 ;; Hardware stack levels required when called: 8
  2813 ;; This function calls:
  2814 ;;		_fputc
  2815 ;;		_read_prec_or_width
  2816 ;;		_xtoa
  2817 ;; This function is called by:
  2818 ;;		_vfprintf
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text4
  2823   00075C                     __ptext4:
  2824                           	callstack 0
  2825   00075C                     _vfpfcnvrt:
  2826                           	callstack 19
  2827   00075C                     
  2828                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2829   00075C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2830   00075E  6ED9               	movwf	fsr2l,c
  2831   000760  6ADA               	clrf	fsr2h,c
  2832   000762  CFDE FFF6          	movff	postinc2,tblptrl
  2833   000766  CFDD FFF7          	movff	postdec2,tblptrh
  2834   00076A                     	if	0	;tblptru may be non-zero
  2835   00076A                     	endif
  2836   00076A                     	if	0	;tblptru may be non-zero
  2837   00076A                     	endif
  2838   00076A  0008               	tblrd		*
  2839   00076C  50F5               	movf	tablat,w,c
  2840   00076E  0A25               	xorlw	37
  2841   000770  A4D8               	btfss	status,2,c
  2842   000772  EFBD  F003         	goto	u1921
  2843   000776  EFBF  F003         	goto	u1920
  2844   00077A                     u1921:
  2845   00077A  EF58  F004         	goto	l2866
  2846   00077E                     u1920:
  2847   00077E                     
  2848                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2849   00077E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2850   000780  6ED9               	movwf	fsr2l,c
  2851   000782  6ADA               	clrf	fsr2h,c
  2852   000784  2ADE               	incf	postinc2,f,c
  2853   000786  0E00               	movlw	0
  2854   000788  22DD               	addwfc	postdec2,f,c
  2855   00078A                     
  2856                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2857   00078A  0E00               	movlw	0
  2858   00078C  6E5E               	movwf	(_width+1)^0,c
  2859   00078E  0E00               	movlw	0
  2860   000790  6E5D               	movwf	_width^0,c
  2861   000792  C05D  F063         	movff	_width,_flags
  2862   000796                     
  2863                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2864   000796  685F               	setf	_prec^0,c
  2865   000798  6860               	setf	(_prec+1)^0,c
  2866   00079A                     
  2867                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2868   00079A  6A2B               	clrf	vfpfcnvrt@done^0,c
  2869                           
  2870                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2871   00079C  EFEC  F003         	goto	l2838
  2872   0007A0                     l2828:
  2873                           
  2874                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2875   0007A0  8263               	bsf	_flags^0,1,c
  2876   0007A2                     
  2877                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2878   0007A2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2879   0007A4  6ED9               	movwf	fsr2l,c
  2880   0007A6  6ADA               	clrf	fsr2h,c
  2881   0007A8  2ADE               	incf	postinc2,f,c
  2882   0007AA  0E00               	movlw	0
  2883   0007AC  22DD               	addwfc	postdec2,f,c
  2884                           
  2885                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2886   0007AE  EFEC  F003         	goto	l2838
  2887   0007B2                     l2832:
  2888                           
  2889                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2890   0007B2  0E01               	movlw	1
  2891   0007B4  6E2B               	movwf	vfpfcnvrt@done^0,c
  2892                           
  2893                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2894   0007B6  EFEC  F003         	goto	l2838
  2895   0007BA                     l2836:
  2896   0007BA  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2897   0007BC  6ED9               	movwf	fsr2l,c
  2898   0007BE  6ADA               	clrf	fsr2h,c
  2899   0007C0  CFDE FFF6          	movff	postinc2,tblptrl
  2900   0007C4  CFDD FFF7          	movff	postdec2,tblptrh
  2901   0007C8                     	if	0	;tblptru may be non-zero
  2902   0007C8                     	endif
  2903   0007C8                     	if	0	;tblptru may be non-zero
  2904   0007C8                     	endif
  2905   0007C8  0008               	tblrd		*
  2906   0007CA  50F5               	movf	tablat,w,c
  2907                           
  2908                           ; Switch size 1, requested type "simple"
  2909                           ; Number of cases is 1, Range of values is 48 to 48
  2910                           ; switch strategies available:
  2911                           ; Name         Instructions Cycles
  2912                           ; simple_byte            4     3 (average)
  2913                           ;	Chosen strategy is simple_byte
  2914   0007CC  0A30               	xorlw	48	; case 48
  2915   0007CE  B4D8               	btfsc	status,2,c
  2916   0007D0  EFD0  F003         	goto	l2828
  2917   0007D4  EFD9  F003         	goto	l2832
  2918   0007D8                     l2838:
  2919                           
  2920                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2921   0007D8  502B               	movf	vfpfcnvrt@done^0,w,c
  2922   0007DA  B4D8               	btfsc	status,2,c
  2923   0007DC  EFF2  F003         	goto	u1931
  2924   0007E0  EFF4  F003         	goto	u1930
  2925   0007E4                     u1931:
  2926   0007E4  EFDD  F003         	goto	l2836
  2927   0007E8                     u1930:
  2928   0007E8                     
  2929                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2930   0007E8  C023  F002         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2931   0007EC  C024  F003         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2932   0007F0  ECBD  F005         	call	_read_prec_or_width	;wreg free
  2933   0007F4  C002  F05D         	movff	?_read_prec_or_width,_width
  2934   0007F8  C003  F05E         	movff	?_read_prec_or_width+1,_width+1
  2935   0007FC                     
  2936                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2937   0007FC  BE5E               	btfsc	(_width+1)^0,7,c
  2938   0007FE  EF05  F004         	goto	u1940
  2939   000802  EF03  F004         	goto	u1941
  2940   000806                     u1941:
  2941   000806  EF0A  F004         	goto	l2846
  2942   00080A                     u1940:
  2943   00080A                     
  2944                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2945   00080A  8063               	bsf	_flags^0,0,c
  2946                           
  2947                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2948   00080C  6C5D               	negf	_width^0,c
  2949   00080E  1E5E               	comf	(_width+1)^0,f,c
  2950   000810  B0D8               	btfsc	status,0,c
  2951   000812  2A5E               	incf	(_width+1)^0,f,c
  2952   000814                     l2846:
  2953                           
  2954                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  2955   000814  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2956   000816  6ED9               	movwf	fsr2l,c
  2957   000818  6ADA               	clrf	fsr2h,c
  2958   00081A  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  2959   00081E  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  2960   000822  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2961   000826  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2962   00082A                     	if	0	;tblptru may be non-zero
  2963   00082A                     	endif
  2964   00082A                     	if	0	;tblptru may be non-zero
  2965   00082A                     	endif
  2966   00082A  0008               	tblrd		*
  2967   00082C  50F5               	movf	tablat,w,c
  2968   00082E  0A58               	xorlw	88
  2969   000830  A4D8               	btfss	status,2,c
  2970   000832  EF1D  F004         	goto	u1951
  2971   000836  EF1F  F004         	goto	u1950
  2972   00083A                     u1951:
  2973   00083A  EF50  F004         	goto	l2862
  2974   00083E                     u1950:
  2975   00083E                     
  2976                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2977   00083E  5024               	movf	vfpfcnvrt@ap^0,w,c
  2978   000840  6ED9               	movwf	fsr2l,c
  2979   000842  6ADA               	clrf	fsr2h,c
  2980   000844  0E02               	movlw	2
  2981   000846  26DF               	addwf	indf2,f,c
  2982   000848  5CDF               	subwf	indf2,w,c
  2983   00084A  6ED9               	movwf	fsr2l,c
  2984   00084C  6ADA               	clrf	fsr2h,c
  2985   00084E  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  2986   000852  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  2987   000856                     
  2988                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2989   000856  0E01               	movlw	1
  2990   000858  242C               	addwf	vfpfcnvrt@cp^0,w,c
  2991   00085A  6E25               	movwf	??_vfpfcnvrt^0,c
  2992   00085C  0E00               	movlw	0
  2993   00085E  202D               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2994   000860  6E26               	movwf	(??_vfpfcnvrt+1)^0,c
  2995   000862  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2996   000864  6ED9               	movwf	fsr2l,c
  2997   000866  6ADA               	clrf	fsr2h,c
  2998   000868  C025  FFDE         	movff	??_vfpfcnvrt,postinc2
  2999   00086C  C026  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3000                           
  3001                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3002   000870  EF44  F004         	goto	l2860
  3003   000874                     l2854:
  3004                           
  3005                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (void) xtoa(fp,convarg.uint);;	Return value of _vfpfcnvrt is never used
  3006   000874  C022  F016         	movff	vfpfcnvrt@fp,xtoa@fp
  3007   000878  C027  F017         	movff	vfpfcnvrt@convarg,xtoa@d
  3008   00087C  C028  F018         	movff	vfpfcnvrt@convarg+1,xtoa@d+1
  3009   000880  EC6A  F004         	call	_xtoa	;wreg free
  3010   000884  EF69  F004         	goto	l1330
  3011   000888                     l2860:
  3012   000888  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3013   00088C  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3014   000890                     	if	0	;tblptru may be non-zero
  3015   000890                     	endif
  3016   000890                     	if	0	;tblptru may be non-zero
  3017   000890                     	endif
  3018   000890  0008               	tblrd		*
  3019   000892  50F5               	movf	tablat,w,c
  3020                           
  3021                           ; Switch size 1, requested type "simple"
  3022                           ; Number of cases is 1, Range of values is 88 to 88
  3023                           ; switch strategies available:
  3024                           ; Name         Instructions Cycles
  3025                           ; simple_byte            4     3 (average)
  3026                           ;	Chosen strategy is simple_byte
  3027   000894  0A58               	xorlw	88	; case 88
  3028   000896  B4D8               	btfsc	status,2,c
  3029   000898  EF3A  F004         	goto	l2854
  3030   00089C  EF50  F004         	goto	l2862
  3031   0008A0                     l2862:
  3032                           
  3033                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3034   0008A0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3035   0008A2  6ED9               	movwf	fsr2l,c
  3036   0008A4  6ADA               	clrf	fsr2h,c
  3037   0008A6  2ADE               	incf	postinc2,f,c
  3038   0008A8  0E00               	movlw	0
  3039   0008AA  22DD               	addwfc	postdec2,f,c
  3040   0008AC  EF69  F004         	goto	l1330
  3041   0008B0                     l2866:
  3042                           
  3043                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3044   0008B0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3045   0008B2  6ED9               	movwf	fsr2l,c
  3046   0008B4  6ADA               	clrf	fsr2h,c
  3047   0008B6  CFDE FFF6          	movff	postinc2,tblptrl
  3048   0008BA  CFDD FFF7          	movff	postdec2,tblptrh
  3049   0008BE                     	if	0	;tblptru may be non-zero
  3050   0008BE                     	endif
  3051   0008BE                     	if	0	;tblptru may be non-zero
  3052   0008BE                     	endif
  3053   0008BE  0008               	tblrd		*
  3054   0008C0  50F5               	movf	tablat,w,c
  3055   0008C2  6E02               	movwf	fputc@c^0,c
  3056   0008C4  6A03               	clrf	(fputc@c+1)^0,c
  3057   0008C6  C022  F004         	movff	vfpfcnvrt@fp,fputc@fp
  3058   0008CA  EC13  F006         	call	_fputc	;wreg free
  3059   0008CE  EF50  F004         	goto	l2862
  3060   0008D2                     l1330:
  3061   0008D2  0012               	return		;funcret
  3062   0008D4                     __end_of_vfpfcnvrt:
  3063                           	callstack 0
  3064                           
  3065 ;; *************** function _xtoa *****************
  3066 ;; Defined at:
  3067 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  3070 ;;		 -> sprintf@f(11), 
  3071 ;;  d               2   22[COMRAM] unsigned int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  i               2   31[COMRAM] int 
  3074 ;;  w               2   28[COMRAM] int 
  3075 ;;  c               1   30[COMRAM] unsigned char 
  3076 ;;  p               1   27[COMRAM] _Bool 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1
  3086 ;;      Params:         3       0       0
  3087 ;;      Locals:         6       0       0
  3088 ;;      Temps:          3       0       0
  3089 ;;      Totals:        12       0       0
  3090 ;;Total ram usage:       12 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 7
  3093 ;; This function calls:
  3094 ;;		_pad
  3095 ;; This function is called by:
  3096 ;;		_vfpfcnvrt
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text5
  3101   0008D4                     __ptext5:
  3102                           	callstack 0
  3103   0008D4                     _xtoa:
  3104                           	callstack 19
  3105   0008D4                     
  3106                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1055: static void
      +                           xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1059:  char c;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 
      +                          1063:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c
      +                          : 1067:  _Bool p = 1;
  3107   0008D4  0E01               	movlw	1
  3108   0008D6  6E1C               	movwf	xtoa@p^0,c
  3109   0008D8                     
  3110                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  3111   0008D8  C05D  F01D         	movff	_width,xtoa@w
  3112   0008DC  C05E  F01E         	movff	_width+1,xtoa@w+1
  3113                           
  3114                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  3115   0008E0  0E00               	movlw	0
  3116   0008E2  6E21               	movwf	(xtoa@i+1)^0,c
  3117   0008E4  0E1F               	movlw	31
  3118   0008E6  6E20               	movwf	xtoa@i^0,c
  3119   0008E8                     
  3120                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  3121   0008E8  0100               	movlb	0	; () banked
  3122   0008EA  6BE5               	clrf	(_dbuf+31)& (0+255),b
  3123                           
  3124                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3125   0008EC  EFA6  F004         	goto	l2780
  3126   0008F0                     l2762:
  3127                           
  3128                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1107:         --i;
  3129   0008F0  0620               	decf	xtoa@i^0,f,c
  3130   0008F2  A0D8               	btfss	status,0,c
  3131   0008F4  0621               	decf	(xtoa@i+1)^0,f,c
  3132   0008F6                     
  3133                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  3134   0008F6  5017               	movf	xtoa@d^0,w,c
  3135   0008F8  0B0F               	andlw	15
  3136   0008FA  6E1F               	movwf	xtoa@c^0,c
  3137   0008FC                     
  3138                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  3139   0008FC  0E0A               	movlw	10
  3140   0008FE  601F               	cpfslt	xtoa@c^0,c
  3141   000900  EF84  F004         	goto	u1821
  3142   000904  EF86  F004         	goto	u1820
  3143   000908                     u1821:
  3144   000908  EF8A  F004         	goto	l2770
  3145   00090C                     u1820:
  3146   00090C                     
  3147                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  3148   00090C  0E30               	movlw	48
  3149   00090E  261F               	addwf	xtoa@c^0,f,c
  3150                           
  3151                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1111:   }
  3152   000910  EF8C  F004         	goto	l2772
  3153   000914                     l2770:
  3154                           
  3155                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  3156   000914  0E37               	movlw	55
  3157   000916  261F               	addwf	xtoa@c^0,f,c
  3158   000918                     l2772:
  3159                           
  3160                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  3161   000918  5020               	movf	xtoa@i^0,w,c
  3162   00091A  0FC6               	addlw	low _dbuf
  3163   00091C  6ED9               	movwf	fsr2l,c
  3164   00091E  6ADA               	clrf	fsr2h,c
  3165   000920  C01F  FFDF         	movff	xtoa@c,indf2
  3166   000924                     
  3167                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  3168   000924  6A1C               	clrf	xtoa@p^0,c
  3169   000926                     
  3170                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  3171   000926  061D               	decf	xtoa@w^0,f,c
  3172   000928  A0D8               	btfss	status,0,c
  3173   00092A  061E               	decf	(xtoa@w+1)^0,f,c
  3174   00092C                     
  3175                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  3176   00092C  C017  F019         	movff	xtoa@d,??_xtoa
  3177   000930  C018  F01A         	movff	xtoa@d+1,??_xtoa+1
  3178   000934  0E04               	movlw	4
  3179   000936  6E1B               	movwf	(??_xtoa+2)^0,c
  3180   000938                     u1835:
  3181   000938  90D8               	bcf	status,0,c
  3182   00093A  321A               	rrcf	(??_xtoa+1)^0,f,c
  3183   00093C  3219               	rrcf	??_xtoa^0,f,c
  3184   00093E  2E1B               	decfsz	(??_xtoa+2)^0,f,c
  3185   000940  EF9C  F004         	goto	u1835
  3186   000944  C019  F017         	movff	??_xtoa,xtoa@d
  3187   000948  C01A  F018         	movff	??_xtoa+1,xtoa@d+1
  3188   00094C                     l2780:
  3189                           
  3190                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3191   00094C  BE21               	btfsc	(xtoa@i+1)^0,7,c
  3192   00094E  EFB2  F004         	goto	u1841
  3193   000952  5021               	movf	(xtoa@i+1)^0,w,c
  3194   000954  E109               	bnz	u1840
  3195   000956  0E02               	movlw	2
  3196   000958  5C20               	subwf	xtoa@i^0,w,c
  3197   00095A  A0D8               	btfss	status,0,c
  3198   00095C  EFB2  F004         	goto	u1841
  3199   000960  EFB4  F004         	goto	u1840
  3200   000964                     u1841:
  3201   000964  EFD9  F004         	goto	l2790
  3202   000968                     u1840:
  3203   000968  5017               	movf	xtoa@d^0,w,c
  3204   00096A  1018               	iorwf	(xtoa@d+1)^0,w,c
  3205   00096C  A4D8               	btfss	status,2,c
  3206   00096E  EFBB  F004         	goto	u1851
  3207   000972  EFBD  F004         	goto	u1850
  3208   000976                     u1851:
  3209   000976  EF78  F004         	goto	l2762
  3210   00097A                     u1850:
  3211   00097A  501C               	movf	xtoa@p^0,w,c
  3212   00097C  A4D8               	btfss	status,2,c
  3213   00097E  EFC3  F004         	goto	u1861
  3214   000982  EFC5  F004         	goto	u1860
  3215   000986                     u1861:
  3216   000986  EF78  F004         	goto	l2762
  3217   00098A                     u1860:
  3218   00098A  BE1E               	btfsc	(xtoa@w+1)^0,7,c
  3219   00098C  EFD0  F004         	goto	u1871
  3220   000990  501E               	movf	(xtoa@w+1)^0,w,c
  3221   000992  E108               	bnz	u1870
  3222   000994  041D               	decf	xtoa@w^0,w,c
  3223   000996  A0D8               	btfss	status,0,c
  3224   000998  EFD0  F004         	goto	u1871
  3225   00099C  EFD2  F004         	goto	u1870
  3226   0009A0                     u1871:
  3227   0009A0  EFD9  F004         	goto	l2790
  3228   0009A4                     u1870:
  3229   0009A4  B263               	btfsc	_flags^0,1,c
  3230   0009A6  EFD7  F004         	goto	u1881
  3231   0009AA  EFD9  F004         	goto	u1880
  3232   0009AE                     u1881:
  3233   0009AE  EF78  F004         	goto	l2762
  3234   0009B2                     u1880:
  3235   0009B2                     l2790:
  3236                           
  3237                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  3238   0009B2  C016  F00F         	movff	xtoa@fp,pad@fp
  3239   0009B6  5020               	movf	xtoa@i^0,w,c
  3240   0009B8  0FC6               	addlw	low _dbuf
  3241   0009BA  6E10               	movwf	pad@buf^0,c
  3242   0009BC  C01D  F011         	movff	xtoa@w,pad@p
  3243   0009C0  C01E  F012         	movff	xtoa@w+1,pad@p+1
  3244   0009C4  EC0D  F007         	call	_pad	;wreg free
  3245   0009C8  0012               	return		;funcret
  3246   0009CA                     __end_of_xtoa:
  3247                           	callstack 0
  3248                           
  3249 ;; *************** function _pad *****************
  3250 ;; Defined at:
  3251 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  3254 ;;		 -> sprintf@f(11), 
  3255 ;;  buf             1   15[COMRAM] PTR unsigned char 
  3256 ;;		 -> dbuf(32), 
  3257 ;;  p               2   16[COMRAM] int 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  i               2   19[COMRAM] int 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      void 
  3262 ;; Registers used:
  3263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1
  3269 ;;      Params:         4       0       0
  3270 ;;      Locals:         2       0       0
  3271 ;;      Temps:          1       0       0
  3272 ;;      Totals:         7       0       0
  3273 ;;Total ram usage:        7 bytes
  3274 ;; Hardware stack levels used: 1
  3275 ;; Hardware stack levels required when called: 6
  3276 ;; This function calls:
  3277 ;;		_fputc
  3278 ;;		_fputs
  3279 ;; This function is called by:
  3280 ;;		_xtoa
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text6
  3285   000E1A                     __ptext6:
  3286                           	callstack 0
  3287   000E1A                     _pad:
  3288                           	callstack 19
  3289   000E1A                     
  3290                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  3291   000E1A  A063               	btfss	_flags^0,0,c
  3292   000E1C  EF12  F007         	goto	u1671
  3293   000E20  EF14  F007         	goto	u1670
  3294   000E24                     u1671:
  3295   000E24  EF1A  F007         	goto	l2652
  3296   000E28                     u1670:
  3297   000E28                     
  3298                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  3299   000E28  C010  F00A         	movff	pad@buf,fputs@s
  3300   000E2C  C00F  F00B         	movff	pad@fp,fputs@fp
  3301   000E30  EC79  F008         	call	_fputs	;wreg free
  3302   000E34                     l2652:
  3303                           
  3304                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  3305   000E34  BE12               	btfsc	(pad@p+1)^0,7,c
  3306   000E36  EF21  F007         	goto	u1680
  3307   000E3A  EF1F  F007         	goto	u1681
  3308   000E3E                     u1681:
  3309   000E3E  EF25  F007         	goto	l1288
  3310   000E42                     u1680:
  3311   000E42                     
  3312                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  3313   000E42  0E00               	movlw	0
  3314   000E44  6E12               	movwf	(pad@p+1)^0,c
  3315   000E46  0E00               	movlw	0
  3316   000E48  6E11               	movwf	pad@p^0,c
  3317   000E4A                     l1288:
  3318                           
  3319                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  3320   000E4A  0E00               	movlw	0
  3321   000E4C  6E15               	movwf	(pad@i+1)^0,c
  3322   000E4E  0E00               	movlw	0
  3323   000E50  6E14               	movwf	pad@i^0,c
  3324                           
  3325                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3326   000E52  EF35  F007         	goto	l2660
  3327   000E56                     l2656:
  3328                           
  3329                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3330   000E56  0E00               	movlw	0
  3331   000E58  6E03               	movwf	(fputc@c+1)^0,c
  3332   000E5A  0E20               	movlw	32
  3333   000E5C  6E02               	movwf	fputc@c^0,c
  3334   000E5E  C00F  F004         	movff	pad@fp,fputc@fp
  3335   000E62  EC13  F006         	call	_fputc	;wreg free
  3336   000E66                     
  3337                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3338   000E66  4A14               	infsnz	pad@i^0,f,c
  3339   000E68  2A15               	incf	(pad@i+1)^0,f,c
  3340   000E6A                     l2660:
  3341                           
  3342                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3343   000E6A  5011               	movf	pad@p^0,w,c
  3344   000E6C  5C14               	subwf	pad@i^0,w,c
  3345   000E6E  5015               	movf	(pad@i+1)^0,w,c
  3346   000E70  0A80               	xorlw	128
  3347   000E72  6E13               	movwf	??_pad^0,c
  3348   000E74  5012               	movf	(pad@p+1)^0,w,c
  3349   000E76  0A80               	xorlw	128
  3350   000E78  5813               	subwfb	??_pad^0,w,c
  3351   000E7A  A0D8               	btfss	status,0,c
  3352   000E7C  EF42  F007         	goto	u1691
  3353   000E80  EF44  F007         	goto	u1690
  3354   000E84                     u1691:
  3355   000E84  EF2B  F007         	goto	l2656
  3356   000E88                     u1690:
  3357   000E88                     
  3358                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3359   000E88  B063               	btfsc	_flags^0,0,c
  3360   000E8A  EF49  F007         	goto	u1701
  3361   000E8E  EF4B  F007         	goto	u1700
  3362   000E92                     u1701:
  3363   000E92  EF51  F007         	goto	l1293
  3364   000E96                     u1700:
  3365   000E96                     
  3366                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3367   000E96  C010  F00A         	movff	pad@buf,fputs@s
  3368   000E9A  C00F  F00B         	movff	pad@fp,fputs@fp
  3369   000E9E  EC79  F008         	call	_fputs	;wreg free
  3370   000EA2                     l1293:
  3371   000EA2  0012               	return		;funcret
  3372   000EA4                     __end_of_pad:
  3373                           	callstack 0
  3374                           
  3375 ;; *************** function _fputs *****************
  3376 ;; Defined at:
  3377 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  s               1    9[COMRAM] PTR const unsigned char 
  3380 ;;		 -> dbuf(32), 
  3381 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  3382 ;;		 -> sprintf@f(11), 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  i               2   12[COMRAM] int 
  3385 ;;  c               1   11[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  2    9[COMRAM] int 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1
  3395 ;;      Params:         2       0       0
  3396 ;;      Locals:         3       0       0
  3397 ;;      Temps:          0       0       0
  3398 ;;      Totals:         5       0       0
  3399 ;;Total ram usage:        5 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 5
  3402 ;; This function calls:
  3403 ;;		_fputc
  3404 ;; This function is called by:
  3405 ;;		_pad
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text7
  3410   0010F2                     __ptext7:
  3411                           	callstack 0
  3412   0010F2                     _fputs:
  3413                           	callstack 19
  3414   0010F2  0E00               	movlw	0
  3415   0010F4  6E0E               	movwf	(fputs@i+1)^0,c
  3416   0010F6  0E00               	movlw	0
  3417   0010F8  6E0D               	movwf	fputs@i^0,c
  3418   0010FA  EF88  F008         	goto	l2640
  3419   0010FE                     l2636:
  3420   0010FE  C00C  F002         	movff	fputs@c,fputc@c
  3421   001102  6A03               	clrf	(fputc@c+1)^0,c
  3422   001104  C00B  F004         	movff	fputs@fp,fputc@fp
  3423   001108  EC13  F006         	call	_fputc	;wreg free
  3424   00110C  4A0D               	infsnz	fputs@i^0,f,c
  3425   00110E  2A0E               	incf	(fputs@i+1)^0,f,c
  3426   001110                     l2640:
  3427   001110  500A               	movf	fputs@s^0,w,c
  3428   001112  240D               	addwf	fputs@i^0,w,c
  3429   001114  6ED9               	movwf	fsr2l,c
  3430   001116  6ADA               	clrf	fsr2h,c
  3431   001118  50DF               	movf	indf2,w,c
  3432   00111A  6E0C               	movwf	fputs@c^0,c
  3433   00111C  500C               	movf	fputs@c^0,w,c
  3434   00111E  A4D8               	btfss	status,2,c
  3435   001120  EF94  F008         	goto	u1651
  3436   001124  EF96  F008         	goto	u1650
  3437   001128                     u1651:
  3438   001128  EF7F  F008         	goto	l2636
  3439   00112C                     u1650:
  3440   00112C  0012               	return		;funcret
  3441   00112E                     __end_of_fputs:
  3442                           	callstack 0
  3443                           
  3444 ;; *************** function _fputc *****************
  3445 ;; Defined at:
  3446 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  c               2    1[COMRAM] int 
  3449 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  3450 ;;		 -> sprintf@f(11), 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  2    1[COMRAM] int 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1
  3462 ;;      Params:         3       0       0
  3463 ;;      Locals:         0       0       0
  3464 ;;      Temps:          5       0       0
  3465 ;;      Totals:         8       0       0
  3466 ;;Total ram usage:        8 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; Hardware stack levels required when called: 4
  3469 ;; This function calls:
  3470 ;;		_putch
  3471 ;; This function is called by:
  3472 ;;		_pad
  3473 ;;		_vfpfcnvrt
  3474 ;;		_fputs
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text8
  3479   000C26                     __ptext8:
  3480                           	callstack 0
  3481   000C26                     _fputc:
  3482                           	callstack 19
  3483   000C26  5004               	movf	fputc@fp^0,w,c
  3484   000C28  B4D8               	btfsc	status,2,c
  3485   000C2A  EF19  F006         	goto	u1611
  3486   000C2E  EF1B  F006         	goto	u1610
  3487   000C32                     u1611:
  3488   000C32  EF23  F006         	goto	l2624
  3489   000C36                     u1610:
  3490   000C36  5004               	movf	fputc@fp^0,w,c
  3491   000C38  A4D8               	btfss	status,2,c
  3492   000C3A  EF21  F006         	goto	u1621
  3493   000C3E  EF23  F006         	goto	u1620
  3494   000C42                     u1621:
  3495   000C42  EF28  F006         	goto	l2626
  3496   000C46                     u1620:
  3497   000C46                     l2624:
  3498   000C46  5002               	movf	fputc@c^0,w,c
  3499   000C48  ECBE  F009         	call	_putch
  3500   000C4C  EF67  F006         	goto	l1349
  3501   000C50                     l2626:
  3502   000C50  5004               	movf	fputc@fp^0,w,c
  3503   000C52  6ED9               	movwf	fsr2l,c
  3504   000C54  6ADA               	clrf	fsr2h,c
  3505   000C56  0E09               	movlw	9
  3506   000C58  26D9               	addwf	fsr2l,f,c
  3507   000C5A  50DE               	movf	postinc2,w,c
  3508   000C5C  10DE               	iorwf	postinc2,w,c
  3509   000C5E  B4D8               	btfsc	status,2,c
  3510   000C60  EF34  F006         	goto	u1631
  3511   000C64  EF36  F006         	goto	u1630
  3512   000C68                     u1631:
  3513   000C68  EF4F  F006         	goto	l2630
  3514   000C6C                     u1630:
  3515   000C6C  5004               	movf	fputc@fp^0,w,c
  3516   000C6E  6ED9               	movwf	fsr2l,c
  3517   000C70  6ADA               	clrf	fsr2h,c
  3518   000C72  0E09               	movlw	9
  3519   000C74  26D9               	addwf	fsr2l,f,c
  3520   000C76  5004               	movf	fputc@fp^0,w,c
  3521   000C78  6EE1               	movwf	fsr1l,c
  3522   000C7A  6AE2               	clrf	fsr1h,c
  3523   000C7C  0E02               	movlw	2
  3524   000C7E  26E1               	addwf	fsr1l,f,c
  3525   000C80  50DE               	movf	postinc2,w,c
  3526   000C82  5CE6               	subwf	postinc1,w,c
  3527   000C84  50E6               	movf	postinc1,w,c
  3528   000C86  0A80               	xorlw	128
  3529   000C88  6E09               	movwf	(??_fputc+4)^0,c
  3530   000C8A  50DE               	movf	postinc2,w,c
  3531   000C8C  0A80               	xorlw	128
  3532   000C8E  5809               	subwfb	(??_fputc+4)^0,w,c
  3533   000C90  B0D8               	btfsc	status,0,c
  3534   000C92  EF4D  F006         	goto	u1641
  3535   000C96  EF4F  F006         	goto	u1640
  3536   000C9A                     u1641:
  3537   000C9A  EF67  F006         	goto	l1349
  3538   000C9E                     u1640:
  3539   000C9E                     l2630:
  3540   000C9E  5004               	movf	fputc@fp^0,w,c
  3541   000CA0  6ED9               	movwf	fsr2l,c
  3542   000CA2  6ADA               	clrf	fsr2h,c
  3543   000CA4  0E02               	movlw	2
  3544   000CA6  26D9               	addwf	fsr2l,f,c
  3545   000CA8  50DF               	movf	indf2,w,c
  3546   000CAA  6E05               	movwf	??_fputc^0,c
  3547   000CAC  5004               	movf	fputc@fp^0,w,c
  3548   000CAE  6ED9               	movwf	fsr2l,c
  3549   000CB0  6ADA               	clrf	fsr2h,c
  3550   000CB2  50DF               	movf	indf2,w,c
  3551   000CB4  2405               	addwf	??_fputc^0,w,c
  3552   000CB6  6ED9               	movwf	fsr2l,c
  3553   000CB8  6ADA               	clrf	fsr2h,c
  3554   000CBA  C002  FFDF         	movff	fputc@c,indf2
  3555   000CBE  5004               	movf	fputc@fp^0,w,c
  3556   000CC0  6ED9               	movwf	fsr2l,c
  3557   000CC2  6ADA               	clrf	fsr2h,c
  3558   000CC4  0E02               	movlw	2
  3559   000CC6  26D9               	addwf	fsr2l,f,c
  3560   000CC8  2ADE               	incf	postinc2,f,c
  3561   000CCA  0E00               	movlw	0
  3562   000CCC  22DD               	addwfc	postdec2,f,c
  3563   000CCE                     l1349:
  3564   000CCE  0012               	return		;funcret
  3565   000CD0                     __end_of_fputc:
  3566                           	callstack 0
  3567                           
  3568 ;; *************** function _putch *****************
  3569 ;; Defined at:
  3570 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  c               1    wreg     unsigned char 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  c               1    0[COMRAM] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      void 
  3577 ;; Registers used:
  3578 ;;		wreg
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1
  3584 ;;      Params:         0       0       0
  3585 ;;      Locals:         0       0       0
  3586 ;;      Temps:          0       0       0
  3587 ;;      Totals:         0       0       0
  3588 ;;Total ram usage:        0 bytes
  3589 ;; Hardware stack levels used: 1
  3590 ;; Hardware stack levels required when called: 3
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_fputc
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text9
  3599   00137C                     __ptext9:
  3600                           	callstack 0
  3601   00137C                     _putch:
  3602                           	callstack 19
  3603   00137C  0012               	return		;funcret
  3604   00137E                     __end_of_putch:
  3605                           	callstack 0
  3606                           
  3607 ;; *************** function _read_prec_or_width *****************
  3608 ;; Defined at:
  3609 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  fmt             1    1[COMRAM] PTR PTR const unsigned c
  3612 ;;		 -> vfprintf@cfmt(2), 
  3613 ;;  ap              1    2[COMRAM] PTR PTR void [1]
  3614 ;;		 -> sprintf@ap(1), 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  c               1    5[COMRAM] unsigned char 
  3617 ;;  n               2    6[COMRAM] int 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  2    1[COMRAM] int 
  3620 ;; Registers used:
  3621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1
  3627 ;;      Params:         2       0       0
  3628 ;;      Locals:         3       0       0
  3629 ;;      Temps:          2       0       0
  3630 ;;      Totals:         7       0       0
  3631 ;;Total ram usage:        7 bytes
  3632 ;; Hardware stack levels used: 1
  3633 ;; Hardware stack levels required when called: 3
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_vfpfcnvrt
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text10
  3642   000B7A                     __ptext10:
  3643                           	callstack 0
  3644   000B7A                     _read_prec_or_width:
  3645                           	callstack 23
  3646   000B7A                     
  3647                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  3648   000B7A  0E00               	movlw	0
  3649   000B7C  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3650   000B7E  0E00               	movlw	0
  3651   000B80  6E07               	movwf	read_prec_or_width@n^0,c
  3652   000B82                     
  3653                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  3654   000B82  5002               	movf	read_prec_or_width@fmt^0,w,c
  3655   000B84  6ED9               	movwf	fsr2l,c
  3656   000B86  6ADA               	clrf	fsr2h,c
  3657   000B88  CFDE FFF6          	movff	postinc2,tblptrl
  3658   000B8C  CFDD FFF7          	movff	postdec2,tblptrh
  3659   000B90                     	if	0	;tblptru may be non-zero
  3660   000B90                     	endif
  3661   000B90                     	if	0	;tblptru may be non-zero
  3662   000B90                     	endif
  3663   000B90  0008               	tblrd		*
  3664   000B92  50F5               	movf	tablat,w,c
  3665   000B94  0A2A               	xorlw	42
  3666   000B96  A4D8               	btfss	status,2,c
  3667   000B98  EFD0  F005         	goto	u1891
  3668   000B9C  EFD2  F005         	goto	u1890
  3669   000BA0                     u1891:
  3670   000BA0  EFFB  F005         	goto	l2806
  3671   000BA4                     u1890:
  3672   000BA4                     
  3673                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  3674   000BA4  5002               	movf	read_prec_or_width@fmt^0,w,c
  3675   000BA6  6ED9               	movwf	fsr2l,c
  3676   000BA8  6ADA               	clrf	fsr2h,c
  3677   000BAA  2ADE               	incf	postinc2,f,c
  3678   000BAC  0E00               	movlw	0
  3679   000BAE  22DD               	addwfc	postdec2,f,c
  3680   000BB0                     
  3681                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  3682   000BB0  5003               	movf	read_prec_or_width@ap^0,w,c
  3683   000BB2  6ED9               	movwf	fsr2l,c
  3684   000BB4  6ADA               	clrf	fsr2h,c
  3685   000BB6  0E02               	movlw	2
  3686   000BB8  26DF               	addwf	indf2,f,c
  3687   000BBA  5CDF               	subwf	indf2,w,c
  3688   000BBC  6ED9               	movwf	fsr2l,c
  3689   000BBE  6ADA               	clrf	fsr2h,c
  3690   000BC0  CFDE F007          	movff	postinc2,read_prec_or_width@n
  3691   000BC4  CFDE F008          	movff	postinc2,read_prec_or_width@n+1
  3692                           
  3693                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  3694   000BC8  EF0E  F006         	goto	l1309
  3695   000BCC                     l2802:
  3696                           
  3697                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  3698   000BCC  0E0A               	movlw	10
  3699   000BCE  0207               	mulwf	read_prec_or_width@n^0,c
  3700   000BD0  CFF3 F004          	movff	prodl,??_read_prec_or_width
  3701   000BD4  CFF4 F005          	movff	prodh,??_read_prec_or_width+1
  3702   000BD8  0208               	mulwf	(read_prec_or_width@n+1)^0,c
  3703   000BDA  50F3               	movf	prodl,w,c
  3704   000BDC  2605               	addwf	(??_read_prec_or_width+1)^0,f,c
  3705   000BDE  5006               	movf	read_prec_or_width@c^0,w,c
  3706   000BE0  2404               	addwf	??_read_prec_or_width^0,w,c
  3707   000BE2  6E07               	movwf	read_prec_or_width@n^0,c
  3708   000BE4  0E00               	movlw	0
  3709   000BE6  2005               	addwfc	(??_read_prec_or_width+1)^0,w,c
  3710   000BE8  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3711   000BEA                     
  3712                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  3713   000BEA  5002               	movf	read_prec_or_width@fmt^0,w,c
  3714   000BEC  6ED9               	movwf	fsr2l,c
  3715   000BEE  6ADA               	clrf	fsr2h,c
  3716   000BF0  2ADE               	incf	postinc2,f,c
  3717   000BF2  0E00               	movlw	0
  3718   000BF4  22DD               	addwfc	postdec2,f,c
  3719   000BF6                     l2806:
  3720                           
  3721                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  3722   000BF6  5002               	movf	read_prec_or_width@fmt^0,w,c
  3723   000BF8  6ED9               	movwf	fsr2l,c
  3724   000BFA  6ADA               	clrf	fsr2h,c
  3725   000BFC  CFDE FFF6          	movff	postinc2,tblptrl
  3726   000C00  CFDD FFF7          	movff	postdec2,tblptrh
  3727   000C04                     	if	0	;tblptru may be non-zero
  3728   000C04                     	endif
  3729   000C04                     	if	0	;tblptru may be non-zero
  3730   000C04                     	endif
  3731   000C04  0008               	tblrd		*
  3732   000C06  50F5               	movf	tablat,w,c
  3733   000C08  0FD0               	addlw	208
  3734   000C0A  6E06               	movwf	read_prec_or_width@c^0,c
  3735   000C0C  0E09               	movlw	9
  3736   000C0E  6406               	cpfsgt	read_prec_or_width@c^0,c
  3737   000C10  EF0C  F006         	goto	u1901
  3738   000C14  EF0E  F006         	goto	u1900
  3739   000C18                     u1901:
  3740   000C18  EFE6  F005         	goto	l2802
  3741   000C1C                     u1900:
  3742   000C1C                     l1309:
  3743                           
  3744                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  3745   000C1C  C007  F002         	movff	read_prec_or_width@n,?_read_prec_or_width
  3746   000C20  C008  F003         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  3747   000C24  0012               	return		;funcret
  3748   000C26                     __end_of_read_prec_or_width:
  3749                           	callstack 0
  3750                           
  3751 ;; *************** function _motorTerminal *****************
  3752 ;; Defined at:
  3753 ;;		line 63 in file "TAD_TERMINAL.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1
  3767 ;;      Params:         0       0       0
  3768 ;;      Locals:         0       0       0
  3769 ;;      Temps:          0       0       0
  3770 ;;      Totals:         0       0       0
  3771 ;;Total ram usage:        0 bytes
  3772 ;; Hardware stack levels used: 1
  3773 ;; Hardware stack levels required when called: 6
  3774 ;; This function calls:
  3775 ;;		_Terminal_RXAvailable
  3776 ;;		_Terminal_ReceiveChar
  3777 ;;		_Terminal_SendString
  3778 ;;		_initTeclado
  3779 ;;		_showMenu
  3780 ;; This function is called by:
  3781 ;;		_main
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text11
  3786   0009CA                     __ptext11:
  3787                           	callstack 0
  3788   0009CA                     _motorTerminal:
  3789                           	callstack 24
  3790   0009CA                     
  3791                           ;TAD_TERMINAL.c: 64:  static char state = 0;;TAD_TERMINAL.c: 66:  switch(state) {
  3792   0009CA  EF4F  F005         	goto	l3318
  3793   0009CE                     l3276:
  3794                           
  3795                           ;TAD_TERMINAL.c: 68:    if (Terminal_ReceiveChar() == 0x1B) {
  3796   0009CE  ECBC  F009         	call	_Terminal_ReceiveChar	;wreg free
  3797   0009D2  0A1B               	xorlw	27
  3798   0009D4  A4D8               	btfss	status,2,c
  3799   0009D6  EFEF  F004         	goto	u2461
  3800   0009DA  EFF1  F004         	goto	u2460
  3801   0009DE                     u2461:
  3802   0009DE  EFF5  F004         	goto	l3282
  3803   0009E2                     u2460:
  3804   0009E2                     
  3805                           ;TAD_TERMINAL.c: 69:     showMenu();
  3806   0009E2  EC8C  F007         	call	_showMenu	;wreg free
  3807   0009E6                     
  3808                           ;TAD_TERMINAL.c: 70:     state = 1;
  3809   0009E6  0E01               	movlw	1
  3810   0009E8  6E64               	movwf	motorTerminal@state^0,c
  3811   0009EA                     l3282:
  3812                           
  3813                           ;TAD_TERMINAL.c: 72:    if (hashtag_pressed == 1){
  3814   0009EA  0465               	decf	_hashtag_pressed^0,w,c
  3815   0009EC  A4D8               	btfss	status,2,c
  3816   0009EE  EFFB  F004         	goto	u2471
  3817   0009F2  EFFD  F004         	goto	u2470
  3818   0009F6                     u2471:
  3819   0009F6  EF5A  F005         	goto	l589
  3820   0009FA                     u2470:
  3821   0009FA                     
  3822                           ;TAD_TERMINAL.c: 73:     showMenu();
  3823   0009FA  EC8C  F007         	call	_showMenu	;wreg free
  3824   0009FE                     
  3825                           ;TAD_TERMINAL.c: 74:     state = 1;
  3826   0009FE  0E01               	movlw	1
  3827   000A00  6E64               	movwf	motorTerminal@state^0,c
  3828   000A02                     
  3829                           ;TAD_TERMINAL.c: 75:     hashtag_pressed = 0;
  3830   000A02  6A65               	clrf	_hashtag_pressed^0,c
  3831   000A04  EF5A  F005         	goto	l589
  3832   000A08                     l3290:
  3833                           
  3834                           ;TAD_TERMINAL.c: 79:    if(Terminal_RXAvailable() == 1){
  3835   000A08  EC77  F009         	call	_Terminal_RXAvailable	;wreg free
  3836   000A0C  06E8               	decf	wreg,f,c
  3837   000A0E  A4D8               	btfss	status,2,c
  3838   000A10  EF0C  F005         	goto	u2481
  3839   000A14  EF0E  F005         	goto	u2480
  3840   000A18                     u2481:
  3841   000A18  EF5A  F005         	goto	l589
  3842   000A1C                     u2480:
  3843   000A1C                     
  3844                           ;TAD_TERMINAL.c: 80:     initTeclado();
  3845   000A1C  EC61  F009         	call	_initTeclado	;wreg free
  3846   000A20                     
  3847                           ;TAD_TERMINAL.c: 81:     if (Terminal_ReceiveChar() == '1') {
  3848   000A20  ECBC  F009         	call	_Terminal_ReceiveChar	;wreg free
  3849   000A24  0A31               	xorlw	49
  3850   000A26  A4D8               	btfss	status,2,c
  3851   000A28  EF18  F005         	goto	u2491
  3852   000A2C  EF1A  F005         	goto	u2490
  3853   000A30                     u2491:
  3854   000A30  EF23  F005         	goto	l3300
  3855   000A34                     u2490:
  3856   000A34                     
  3857                           ;TAD_TERMINAL.c: 82:      Terminal_SendString("Has pulsado 1\r\n");
  3858   000A34  0EBA               	movlw	low STR_13
  3859   000A36  6E05               	movwf	Terminal_SendString@str^0,c
  3860   000A38  0E1F               	movlw	high STR_13
  3861   000A3A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3862   000A3C  EC52  F007         	call	_Terminal_SendString	;wreg free
  3863   000A40                     l3298:
  3864                           
  3865                           ;TAD_TERMINAL.c: 84:      state = 0;
  3866   000A40  6A64               	clrf	motorTerminal@state^0,c
  3867                           
  3868                           ;TAD_TERMINAL.c: 85:     }
  3869   000A42  EF5A  F005         	goto	l589
  3870   000A46                     l3300:
  3871   000A46  ECBC  F009         	call	_Terminal_ReceiveChar	;wreg free
  3872   000A4A  0A32               	xorlw	50
  3873   000A4C  A4D8               	btfss	status,2,c
  3874   000A4E  EF2B  F005         	goto	u2501
  3875   000A52  EF2D  F005         	goto	u2500
  3876   000A56                     u2501:
  3877   000A56  EF35  F005         	goto	l3306
  3878   000A5A                     u2500:
  3879   000A5A                     
  3880                           ;TAD_TERMINAL.c: 87:      Terminal_SendString("Has pulsado 2\r\n");
  3881   000A5A  0ECA               	movlw	low STR_14
  3882   000A5C  6E05               	movwf	Terminal_SendString@str^0,c
  3883   000A5E  0E1F               	movlw	high STR_14
  3884   000A60  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3885   000A62  EC52  F007         	call	_Terminal_SendString	;wreg free
  3886   000A66  EF20  F005         	goto	l3298
  3887   000A6A                     l3306:
  3888   000A6A  ECBC  F009         	call	_Terminal_ReceiveChar	;wreg free
  3889   000A6E  0A33               	xorlw	51
  3890   000A70  A4D8               	btfss	status,2,c
  3891   000A72  EF3D  F005         	goto	u2511
  3892   000A76  EF3F  F005         	goto	u2510
  3893   000A7A                     u2511:
  3894   000A7A  EF47  F005         	goto	l3312
  3895   000A7E                     u2510:
  3896   000A7E                     
  3897                           ;TAD_TERMINAL.c: 92:      Terminal_SendString("Has pulsado 3\r\n");
  3898   000A7E  0EDA               	movlw	low STR_15
  3899   000A80  6E05               	movwf	Terminal_SendString@str^0,c
  3900   000A82  0E1F               	movlw	high STR_15
  3901   000A84  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3902   000A86  EC52  F007         	call	_Terminal_SendString	;wreg free
  3903   000A8A  EF20  F005         	goto	l3298
  3904   000A8E                     l3312:
  3905                           
  3906                           ;TAD_TERMINAL.c: 97:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  3907   000A8E  0EED               	movlw	low STR_16
  3908   000A90  6E05               	movwf	Terminal_SendString@str^0,c
  3909   000A92  0E1E               	movlw	high STR_16
  3910   000A94  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3911   000A96  EC52  F007         	call	_Terminal_SendString	;wreg free
  3912   000A9A  EF20  F005         	goto	l3298
  3913   000A9E                     l3318:
  3914   000A9E  5064               	movf	motorTerminal@state^0,w,c
  3915                           
  3916                           ; Switch size 1, requested type "simple"
  3917                           ; Number of cases is 2, Range of values is 0 to 1
  3918                           ; switch strategies available:
  3919                           ; Name         Instructions Cycles
  3920                           ; simple_byte            7     4 (average)
  3921                           ;	Chosen strategy is simple_byte
  3922   000AA0  0A00               	xorlw	0	; case 0
  3923   000AA2  B4D8               	btfsc	status,2,c
  3924   000AA4  EFE7  F004         	goto	l3276
  3925   000AA8  0A01               	xorlw	1	; case 1
  3926   000AAA  B4D8               	btfsc	status,2,c
  3927   000AAC  EF04  F005         	goto	l3290
  3928   000AB0  EF5A  F005         	goto	l589
  3929   000AB4                     l589:
  3930   000AB4  0012               	return		;funcret
  3931   000AB6                     __end_of_motorTerminal:
  3932                           	callstack 0
  3933                           
  3934 ;; *************** function _showMenu *****************
  3935 ;; Defined at:
  3936 ;;		line 47 in file "TAD_TERMINAL.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1
  3950 ;;      Params:         0       0       0
  3951 ;;      Locals:         0       0       0
  3952 ;;      Temps:          0       0       0
  3953 ;;      Totals:         0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 5
  3957 ;; This function calls:
  3958 ;;		_Terminal_SendString
  3959 ;; This function is called by:
  3960 ;;		_motorTerminal
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text12
  3965   000F18                     __ptext12:
  3966                           	callstack 0
  3967   000F18                     _showMenu:
  3968                           	callstack 24
  3969   000F18                     
  3970                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("---------------\r\n");
  3971   000F18  0E96               	movlw	low STR_5
  3972   000F1A  6E05               	movwf	Terminal_SendString@str^0,c
  3973   000F1C  0E1F               	movlw	high STR_5
  3974   000F1E  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3975   000F20  EC52  F007         	call	_Terminal_SendString	;wreg free
  3976                           
  3977                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("MenÃº principal\r\n");
  3978   000F24  0EA8               	movlw	low STR_6
  3979   000F26  6E05               	movwf	Terminal_SendString@str^0,c
  3980   000F28  0E1F               	movlw	high STR_6
  3981   000F2A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3982   000F2C  EC52  F007         	call	_Terminal_SendString	;wreg free
  3983                           
  3984                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("---------------\r\n");
  3985   000F30  0E96               	movlw	low STR_5
  3986   000F32  6E05               	movwf	Terminal_SendString@str^0,c
  3987   000F34  0E1F               	movlw	high STR_5
  3988   000F36  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3989   000F38  EC52  F007         	call	_Terminal_SendString	;wreg free
  3990                           
  3991                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("Tria una opciÃ³:\r\n");
  3992   000F3C  0E83               	movlw	low STR_8
  3993   000F3E  6E05               	movwf	Terminal_SendString@str^0,c
  3994   000F40  0E1F               	movlw	high STR_8
  3995   000F42  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3996   000F44  EC52  F007         	call	_Terminal_SendString	;wreg free
  3997                           
  3998                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  3999   000F48  0E68               	movlw	low STR_9
  4000   000F4A  6E05               	movwf	Terminal_SendString@str^0,c
  4001   000F4C  0E1F               	movlw	high STR_9
  4002   000F4E  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4003   000F50  EC52  F007         	call	_Terminal_SendString	;wreg free
  4004                           
  4005                           ;TAD_TERMINAL.c: 53:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  4006   000F54  0E2F               	movlw	low STR_10
  4007   000F56  6E05               	movwf	Terminal_SendString@str^0,c
  4008   000F58  0E1F               	movlw	high STR_10
  4009   000F5A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4010   000F5C  EC52  F007         	call	_Terminal_SendString	;wreg free
  4011                           
  4012                           ;TAD_TERMINAL.c: 54:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  4013   000F60  0E0E               	movlw	low STR_11
  4014   000F62  6E05               	movwf	Terminal_SendString@str^0,c
  4015   000F64  0E1F               	movlw	high STR_11
  4016   000F66  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4017   000F68  EC52  F007         	call	_Terminal_SendString	;wreg free
  4018                           
  4019                           ;TAD_TERMINAL.c: 55:  Terminal_SendString("OpciÃ³: ");
  4020   000F6C  0EEA               	movlw	low STR_12
  4021   000F6E  6E05               	movwf	Terminal_SendString@str^0,c
  4022   000F70  0E1F               	movlw	high STR_12
  4023   000F72  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4024   000F74  EC52  F007         	call	_Terminal_SendString	;wreg free
  4025   000F78  0012               	return		;funcret
  4026   000F7A                     __end_of_showMenu:
  4027                           	callstack 0
  4028                           
  4029 ;; *************** function _Terminal_SendString *****************
  4030 ;; Defined at:
  4031 ;;		line 40 in file "TAD_TERMINAL.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  str             2    4[COMRAM] PTR const unsigned char 
  4034 ;;		 -> STR_16(33), STR_15(16), STR_14(16), STR_13(16), 
  4035 ;;		 -> STR_12(9), STR_11(33), STR_10(29), STR_9(27), 
  4036 ;;		 -> STR_8(19), STR_7(18), STR_6(18), STR_5(18), 
  4037 ;;		 -> motor_RFID@buffer(50), STR_3(2), ReadRFID_NoCooperatiu@buffer(50), STR_1(6), 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1
  4049 ;;      Params:         2       0       0
  4050 ;;      Locals:         0       0       0
  4051 ;;      Temps:          0       0       0
  4052 ;;      Totals:         2       0       0
  4053 ;;Total ram usage:        2 bytes
  4054 ;; Hardware stack levels used: 1
  4055 ;; Hardware stack levels required when called: 4
  4056 ;; This function calls:
  4057 ;;		_Terminal_SendChar
  4058 ;;		_Terminal_TXAvailable
  4059 ;; This function is called by:
  4060 ;;		_motor_RFID
  4061 ;;		_showMenu
  4062 ;;		_motorTerminal
  4063 ;;		_ReadRFID_NoCooperatiu
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text13
  4068   000EA4                     __ptext13:
  4069                           	callstack 0
  4070   000EA4                     _Terminal_SendString:
  4071                           	callstack 25
  4072   000EA4                     
  4073                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4074   000EA4  EF73  F007         	goto	l2990
  4075   000EA8                     l2984:
  4076   000EA8  EC3A  F009         	call	_Terminal_TXAvailable	;wreg free
  4077   000EAC  5002               	movf	?_Terminal_TXAvailable^0,w,c
  4078   000EAE  1003               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  4079   000EB0  B4D8               	btfsc	status,2,c
  4080   000EB2  EF5D  F007         	goto	u2111
  4081   000EB6  EF5F  F007         	goto	u2110
  4082   000EBA                     u2111:
  4083   000EBA  EF54  F007         	goto	l2984
  4084   000EBE                     u2110:
  4085   000EBE                     
  4086                           ;TAD_TERMINAL.c: 43:   Terminal_SendChar(*str++);
  4087   000EBE  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4088   000EC2  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4089   000EC6  6AF8               	clrf	tblptru,c
  4090   000EC8  0E01               	movlw	(high __ramtop+-1)
  4091   000ECA  64F7               	cpfsgt	tblptrh,c
  4092   000ECC  D003               	bra	u2127
  4093   000ECE  0008               	tblrd		*
  4094   000ED0  50F5               	movf	tablat,w,c
  4095   000ED2  D005               	bra	u2120
  4096   000ED4                     u2127:
  4097   000ED4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4098   000ED8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4099   000EDC  50EF               	movf	indf0,w,c
  4100   000EDE                     u2120:
  4101   000EDE  ECAA  F009         	call	_Terminal_SendChar
  4102   000EE2  4A05               	infsnz	Terminal_SendString@str^0,f,c
  4103   000EE4  2A06               	incf	(Terminal_SendString@str+1)^0,f,c
  4104   000EE6                     l2990:
  4105                           
  4106                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4107   000EE6  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4108   000EEA  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4109   000EEE  6AF8               	clrf	tblptru,c
  4110   000EF0  0E01               	movlw	(high __ramtop+-1)
  4111   000EF2  64F7               	cpfsgt	tblptrh,c
  4112   000EF4  D003               	bra	u2137
  4113   000EF6  0008               	tblrd		*
  4114   000EF8  50F5               	movf	tablat,w,c
  4115   000EFA  D005               	bra	u2130
  4116   000EFC                     u2137:
  4117   000EFC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4118   000F00  CFF7 FFEA          	movff	tblptrh,fsr0h
  4119   000F04  50EF               	movf	indf0,w,c
  4120   000F06                     u2130:
  4121   000F06  0900               	iorlw	0
  4122   000F08  A4D8               	btfss	status,2,c
  4123   000F0A  EF89  F007         	goto	u2141
  4124   000F0E  EF8B  F007         	goto	u2140
  4125   000F12                     u2141:
  4126   000F12  EF54  F007         	goto	l2984
  4127   000F16                     u2140:
  4128   000F16  0012               	return		;funcret
  4129   000F18                     __end_of_Terminal_SendString:
  4130                           	callstack 0
  4131                           
  4132 ;; *************** function _Terminal_TXAvailable *****************
  4133 ;; Defined at:
  4134 ;;		line 20 in file "TAD_TERMINAL.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  2    1[COMRAM] int 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1
  4148 ;;      Params:         2       0       0
  4149 ;;      Locals:         0       0       0
  4150 ;;      Temps:          1       0       0
  4151 ;;      Totals:         3       0       0
  4152 ;;Total ram usage:        3 bytes
  4153 ;; Hardware stack levels used: 1
  4154 ;; Hardware stack levels required when called: 3
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_Terminal_SendString
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text14
  4163   001274                     __ptext14:
  4164                           	callstack 0
  4165   001274                     _Terminal_TXAvailable:
  4166                           	callstack 25
  4167   001274                     
  4168                           ;TAD_TERMINAL.c: 21:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  4169   001274  B89E               	btfsc	158,4,c	;volatile
  4170   001276  EF3F  F009         	goto	u1911
  4171   00127A  EF43  F009         	goto	u1910
  4172   00127E                     u1911:
  4173   00127E  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4174   001280  2A04               	incf	??_Terminal_TXAvailable^0,f,c
  4175   001282  EF44  F009         	goto	u1918
  4176   001286                     u1910:
  4177   001286  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4178   001288                     u1918:
  4179   001288  5004               	movf	??_Terminal_TXAvailable^0,w,c
  4180   00128A  6E02               	movwf	?_Terminal_TXAvailable^0,c
  4181   00128C  6A03               	clrf	(?_Terminal_TXAvailable+1)^0,c
  4182   00128E  0012               	return		;funcret
  4183   001290                     __end_of_Terminal_TXAvailable:
  4184                           	callstack 0
  4185                           
  4186 ;; *************** function _Terminal_SendChar *****************
  4187 ;; Defined at:
  4188 ;;		line 30 in file "TAD_TERMINAL.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  c               1    wreg     unsigned char 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  c               1    1[COMRAM] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1
  4202 ;;      Params:         0       0       0
  4203 ;;      Locals:         1       0       0
  4204 ;;      Temps:          0       0       0
  4205 ;;      Totals:         1       0       0
  4206 ;;Total ram usage:        1 bytes
  4207 ;; Hardware stack levels used: 1
  4208 ;; Hardware stack levels required when called: 3
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_Terminal_SendString
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text15
  4217   001354                     __ptext15:
  4218                           	callstack 0
  4219   001354                     _Terminal_SendChar:
  4220                           	callstack 25
  4221                           
  4222                           ;incstack = 0
  4223                           ;Terminal_SendChar@c stored from wreg
  4224   001354  6E02               	movwf	Terminal_SendChar@c^0,c
  4225   001356                     
  4226                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  4227   001356  C002  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  4228   00135A  0012               	return		;funcret
  4229   00135C                     __end_of_Terminal_SendChar:
  4230                           	callstack 0
  4231                           
  4232 ;; *************** function _initTeclado *****************
  4233 ;; Defined at:
  4234 ;;		line 14 in file "TAD_TECLADO.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1
  4248 ;;      Params:         0       0       0
  4249 ;;      Locals:         0       0       0
  4250 ;;      Temps:          0       0       0
  4251 ;;      Totals:         0       0       0
  4252 ;;Total ram usage:        0 bytes
  4253 ;; Hardware stack levels used: 1
  4254 ;; Hardware stack levels required when called: 4
  4255 ;; This function calls:
  4256 ;;		_TI_NewTimer
  4257 ;;		_initPortsTeclado
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;;		_motorTerminal
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text16
  4265   0012C2                     __ptext16:
  4266                           	callstack 0
  4267   0012C2                     _initTeclado:
  4268                           	callstack 25
  4269   0012C2                     
  4270                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  4271   0012C2  ECAE  F009         	call	_initPortsTeclado	;wreg free
  4272   0012C6                     
  4273                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  4274   0012C6  6A77               	clrf	_Filas^0,c
  4275   0012C8                     
  4276                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  4277   0012C8  6A76               	clrf	_Columnas^0,c
  4278   0012CA                     
  4279                           ;TAD_TECLADO.c: 18:     tecla = 0;
  4280   0012CA  6A75               	clrf	_tecla^0,c
  4281   0012CC                     
  4282                           ;TAD_TECLADO.c: 19:  state = 0;
  4283   0012CC  6A74               	clrf	_state^0,c
  4284   0012CE                     
  4285                           ;TAD_TECLADO.c: 20:     TI_NewTimer(&timer);
  4286   0012CE  0E79               	movlw	low _timer
  4287   0012D0  6E02               	movwf	TI_NewTimer@TimerHandle^0,c
  4288   0012D2  ECBD  F007         	call	_TI_NewTimer	;wreg free
  4289   0012D6  0012               	return		;funcret
  4290   0012D8                     __end_of_initTeclado:
  4291                           	callstack 0
  4292                           
  4293 ;; *************** function _initPortsTeclado *****************
  4294 ;; Defined at:
  4295 ;;		line 23 in file "TAD_TECLADO.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  1    wreg      void 
  4302 ;; Registers used:
  4303 ;;		wreg, status,2
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1
  4309 ;;      Params:         0       0       0
  4310 ;;      Locals:         0       0       0
  4311 ;;      Temps:          0       0       0
  4312 ;;      Totals:         0       0       0
  4313 ;;Total ram usage:        0 bytes
  4314 ;; Hardware stack levels used: 1
  4315 ;; Hardware stack levels required when called: 3
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_initTeclado
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text17
  4324   00135C                     __ptext17:
  4325                           	callstack 0
  4326   00135C                     _initPortsTeclado:
  4327                           	callstack 25
  4328   00135C                     
  4329                           ;TAD_TECLADO.c: 26:  TRISD = 0x0F;
  4330   00135C  0E0F               	movlw	15
  4331   00135E  6E95               	movwf	149,c	;volatile
  4332   001360                     
  4333                           ;TAD_TECLADO.c: 27:  LATD = 0x00;
  4334   001360  6A8C               	clrf	140,c	;volatile
  4335   001362  0012               	return		;funcret
  4336   001364                     __end_of_initPortsTeclado:
  4337                           	callstack 0
  4338                           
  4339 ;; *************** function _TI_NewTimer *****************
  4340 ;; Defined at:
  4341 ;;		line 43 in file "TAD_TIMER.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  4344 ;;		 -> Timer(1), timer(1), 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  Comptador       1    3[COMRAM] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      unsigned char 
  4349 ;; Registers used:
  4350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1
  4356 ;;      Params:         1       0       0
  4357 ;;      Locals:         1       0       0
  4358 ;;      Temps:          1       0       0
  4359 ;;      Totals:         3       0       0
  4360 ;;Total ram usage:        3 bytes
  4361 ;; Hardware stack levels used: 1
  4362 ;; Hardware stack levels required when called: 3
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_initTeclado
  4367 ;;		_LcInit
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text18
  4372   000F7A                     __ptext18:
  4373                           	callstack 0
  4374   000F7A                     _TI_NewTimer:
  4375                           	callstack 25
  4376   000F7A                     
  4377                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  4378   000F7A  6A04               	clrf	TI_NewTimer@Comptador^0,c
  4379                           
  4380                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4381   000F7C  EFCC  F007         	goto	l2878
  4382   000F80                     l2874:
  4383                           
  4384                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  4385   000F80  2A04               	incf	TI_NewTimer@Comptador^0,f,c
  4386   000F82  0E04               	movlw	4
  4387   000F84  1804               	xorwf	TI_NewTimer@Comptador^0,w,c
  4388   000F86  A4D8               	btfss	status,2,c
  4389   000F88  EFC8  F007         	goto	u1961
  4390   000F8C  EFCA  F007         	goto	u1960
  4391   000F90                     u1961:
  4392   000F90  EFCC  F007         	goto	l2878
  4393   000F94                     u1960:
  4394   000F94  EFE7  F007         	goto	l79
  4395   000F98                     l2878:
  4396                           
  4397                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4398   000F98  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4399   000F9A  0D05               	mullw	5
  4400   000F9C  50F3               	movf	243,w,c
  4401   000F9E  0F84               	addlw	low (_Timers+4)
  4402   000FA0  6ED9               	movwf	fsr2l,c
  4403   000FA2  6ADA               	clrf	fsr2h,c
  4404   000FA4  04DE               	decf	postinc2,w,c
  4405   000FA6  B4D8               	btfsc	status,2,c
  4406   000FA8  EFD8  F007         	goto	u1971
  4407   000FAC  EFDA  F007         	goto	u1970
  4408   000FB0                     u1971:
  4409   000FB0  EFC0  F007         	goto	l2874
  4410   000FB4                     u1970:
  4411   000FB4                     
  4412                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  4413   000FB4  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4414   000FB6  0D05               	mullw	5
  4415   000FB8  50F3               	movf	243,w,c
  4416   000FBA  0F84               	addlw	low (_Timers+4)
  4417   000FBC  6ED9               	movwf	fsr2l,c
  4418   000FBE  6ADA               	clrf	fsr2h,c
  4419   000FC0  0E01               	movlw	1
  4420   000FC2  6EDF               	movwf	indf2,c
  4421   000FC4                     
  4422                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  4423   000FC4  5002               	movf	TI_NewTimer@TimerHandle^0,w,c
  4424   000FC6  6ED9               	movwf	fsr2l,c
  4425   000FC8  6ADA               	clrf	fsr2h,c
  4426   000FCA  C004  FFDF         	movff	TI_NewTimer@Comptador,indf2
  4427   000FCE                     l79:
  4428   000FCE  0012               	return		;funcret
  4429   000FD0                     __end_of_TI_NewTimer:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function _Terminal_ReceiveChar *****************
  4433 ;; Defined at:
  4434 ;;		line 35 in file "TAD_TERMINAL.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      unsigned char 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1
  4448 ;;      Params:         0       0       0
  4449 ;;      Locals:         0       0       0
  4450 ;;      Temps:          0       0       0
  4451 ;;      Totals:         0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 3
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_motorTerminal
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text19
  4463   001378                     __ptext19:
  4464                           	callstack 0
  4465   001378                     _Terminal_ReceiveChar:
  4466                           	callstack 26
  4467   001378                     
  4468                           ;TAD_TERMINAL.c: 36:  return RCREG;
  4469   001378  50AE               	movf	174,w,c	;volatile
  4470   00137A  0012               	return		;funcret
  4471   00137C                     __end_of_Terminal_ReceiveChar:
  4472                           	callstack 0
  4473                           
  4474 ;; *************** function _Terminal_RXAvailable *****************
  4475 ;; Defined at:
  4476 ;;		line 25 in file "TAD_TERMINAL.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1
  4490 ;;      Params:         0       0       0
  4491 ;;      Locals:         0       0       0
  4492 ;;      Temps:          0       0       0
  4493 ;;      Totals:         0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used: 1
  4496 ;; Hardware stack levels required when called: 3
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_motorTerminal
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text20
  4505   0012EE                     __ptext20:
  4506                           	callstack 0
  4507   0012EE                     _Terminal_RXAvailable:
  4508                           	callstack 26
  4509   0012EE                     
  4510                           ;TAD_TERMINAL.c: 26:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4511   0012EE  BA9E               	btfsc	158,5,c	;volatile
  4512   0012F0  EF7C  F009         	goto	u721
  4513   0012F4  EF7F  F009         	goto	u720
  4514   0012F8                     u721:
  4515   0012F8  0E01               	movlw	1
  4516   0012FA  EF80  F009         	goto	u726
  4517   0012FE                     u720:
  4518   0012FE  0E00               	movlw	0
  4519   001300                     u726:
  4520   001300  0012               	return		;funcret
  4521   001302                     __end_of_Terminal_RXAvailable:
  4522                           	callstack 0
  4523                           
  4524 ;; *************** function _motorTeclado *****************
  4525 ;; Defined at:
  4526 ;;		line 34 in file "TAD_TECLADO.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;		None
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1
  4540 ;;      Params:         0       0       0
  4541 ;;      Locals:         0       0       0
  4542 ;;      Temps:          0       0       0
  4543 ;;      Totals:         0       0       0
  4544 ;;Total ram usage:        0 bytes
  4545 ;; Hardware stack levels used: 1
  4546 ;; Hardware stack levels required when called: 4
  4547 ;; This function calls:
  4548 ;;		_GetTecla
  4549 ;;		_ReadFilas
  4550 ;;		_TI_GetTics
  4551 ;;		_TI_ResetTics
  4552 ;;		_hashtag_pressed3s
  4553 ;;		_writeColumnas
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text21
  4560   00052C                     __ptext21:
  4561                           	callstack 0
  4562   00052C                     _motorTeclado:
  4563                           	callstack 26
  4564   00052C                     
  4565                           ;TAD_TECLADO.c: 35:  switch(state) {
  4566   00052C  EF92  F003         	goto	l3272
  4567   000530                     l3168:
  4568                           
  4569                           ;TAD_TECLADO.c: 37:    Filas = ReadFilas();
  4570   000530  ECB9  F009         	call	_ReadFilas	;wreg free
  4571   000534  6E77               	movwf	_Filas^0,c
  4572   000536                     
  4573                           ;TAD_TECLADO.c: 38:    if (Filas == 0x0) {
  4574   000536  5077               	movf	_Filas^0,w,c
  4575   000538  A4D8               	btfss	status,2,c
  4576   00053A  EFA1  F002         	goto	u2291
  4577   00053E  EFA3  F002         	goto	u2290
  4578   000542                     u2291:
  4579   000542  EFAB  F002         	goto	l3178
  4580   000546                     u2290:
  4581   000546                     
  4582                           ;TAD_TECLADO.c: 39:     Columnas = (0x01);
  4583   000546  0E01               	movlw	1
  4584   000548  6E76               	movwf	_Columnas^0,c
  4585   00054A                     
  4586                           ;TAD_TECLADO.c: 40:     writeColumnas();
  4587   00054A  EC35  F008         	call	_writeColumnas	;wreg free
  4588   00054E                     
  4589                           ;TAD_TECLADO.c: 41:     state = 1;
  4590   00054E  0E01               	movlw	1
  4591   000550  6E74               	movwf	_state^0,c
  4592                           
  4593                           ;TAD_TECLADO.c: 42:    }
  4594   000552  EFAD  F003         	goto	l160
  4595   000556                     l3178:
  4596   000556  5077               	movf	_Filas^0,w,c
  4597   000558  B4D8               	btfsc	status,2,c
  4598   00055A  EFB1  F002         	goto	u2301
  4599   00055E  EFB3  F002         	goto	u2300
  4600   000562                     u2301:
  4601   000562  EFAD  F003         	goto	l160
  4602   000566                     u2300:
  4603   000566                     
  4604                           ;TAD_TECLADO.c: 44:     TI_ResetTics(timer);
  4605   000566  5079               	movf	_timer^0,w,c
  4606   000568  EC28  F009         	call	_TI_ResetTics
  4607   00056C                     l3182:
  4608                           
  4609                           ;TAD_TECLADO.c: 45:     state = 3;
  4610   00056C  0E03               	movlw	3
  4611   00056E  6E74               	movwf	_state^0,c
  4612   000570  EFAD  F003         	goto	l160
  4613   000574                     l3184:
  4614                           
  4615                           ;TAD_TECLADO.c: 49:    Filas = ReadFilas();
  4616   000574  ECB9  F009         	call	_ReadFilas	;wreg free
  4617   000578  6E77               	movwf	_Filas^0,c
  4618   00057A                     
  4619                           ;TAD_TECLADO.c: 50:    if (Filas == 0x0) {
  4620   00057A  5077               	movf	_Filas^0,w,c
  4621   00057C  A4D8               	btfss	status,2,c
  4622   00057E  EFC3  F002         	goto	u2311
  4623   000582  EFC5  F002         	goto	u2310
  4624   000586                     u2311:
  4625   000586  EFCD  F002         	goto	l3194
  4626   00058A                     u2310:
  4627   00058A                     
  4628                           ;TAD_TECLADO.c: 51:     Columnas = (0x02);
  4629   00058A  0E02               	movlw	2
  4630   00058C  6E76               	movwf	_Columnas^0,c
  4631   00058E                     
  4632                           ;TAD_TECLADO.c: 52:     writeColumnas();
  4633   00058E  EC35  F008         	call	_writeColumnas	;wreg free
  4634   000592                     
  4635                           ;TAD_TECLADO.c: 53:     state = 2;
  4636   000592  0E02               	movlw	2
  4637   000594  6E74               	movwf	_state^0,c
  4638                           
  4639                           ;TAD_TECLADO.c: 54:    }
  4640   000596  EFAD  F003         	goto	l160
  4641   00059A                     l3194:
  4642   00059A  5077               	movf	_Filas^0,w,c
  4643   00059C  B4D8               	btfsc	status,2,c
  4644   00059E  EFD3  F002         	goto	u2321
  4645   0005A2  EFD5  F002         	goto	u2320
  4646   0005A6                     u2321:
  4647   0005A6  EFAD  F003         	goto	l160
  4648   0005AA                     u2320:
  4649   0005AA                     
  4650                           ;TAD_TECLADO.c: 56:     TI_ResetTics(timer);
  4651   0005AA  5079               	movf	_timer^0,w,c
  4652   0005AC  EC28  F009         	call	_TI_ResetTics
  4653   0005B0  EFB6  F002         	goto	l3182
  4654   0005B4                     l3200:
  4655                           
  4656                           ;TAD_TECLADO.c: 61:    Filas = ReadFilas();
  4657   0005B4  ECB9  F009         	call	_ReadFilas	;wreg free
  4658   0005B8  6E77               	movwf	_Filas^0,c
  4659   0005BA                     
  4660                           ;TAD_TECLADO.c: 62:    if (Filas != 0x0) {
  4661   0005BA  5077               	movf	_Filas^0,w,c
  4662   0005BC  B4D8               	btfsc	status,2,c
  4663   0005BE  EFE3  F002         	goto	u2331
  4664   0005C2  EFE5  F002         	goto	u2330
  4665   0005C6                     u2331:
  4666   0005C6  EFEA  F002         	goto	l3208
  4667   0005CA                     u2330:
  4668   0005CA                     
  4669                           ;TAD_TECLADO.c: 63:     TI_ResetTics(timer);
  4670   0005CA  5079               	movf	_timer^0,w,c
  4671   0005CC  EC28  F009         	call	_TI_ResetTics
  4672   0005D0  EFB6  F002         	goto	l3182
  4673   0005D4                     l3208:
  4674   0005D4  5077               	movf	_Filas^0,w,c
  4675   0005D6  A4D8               	btfss	status,2,c
  4676   0005D8  EFF0  F002         	goto	u2341
  4677   0005DC  EFF2  F002         	goto	u2340
  4678   0005E0                     u2341:
  4679   0005E0  EFAD  F003         	goto	l160
  4680   0005E4                     u2340:
  4681   0005E4                     l3210:
  4682                           
  4683                           ;TAD_TECLADO.c: 67:     Columnas = (0x04);
  4684   0005E4  0E04               	movlw	4
  4685   0005E6  6E76               	movwf	_Columnas^0,c
  4686   0005E8                     
  4687                           ;TAD_TECLADO.c: 68:     writeColumnas();
  4688   0005E8  EC35  F008         	call	_writeColumnas	;wreg free
  4689   0005EC                     l3214:
  4690                           
  4691                           ;TAD_TECLADO.c: 69:     state = 0;
  4692   0005EC  6A74               	clrf	_state^0,c
  4693   0005EE  EFAD  F003         	goto	l160
  4694   0005F2                     l3216:
  4695                           
  4696                           ;TAD_TECLADO.c: 73:    tecla = GetTecla ();
  4697   0005F2  EC5B  F005         	call	_GetTecla	;wreg free
  4698   0005F6  6E75               	movwf	_tecla^0,c
  4699   0005F8                     
  4700                           ;TAD_TECLADO.c: 74:    Filas = ReadFilas();
  4701   0005F8  ECB9  F009         	call	_ReadFilas	;wreg free
  4702   0005FC  6E77               	movwf	_Filas^0,c
  4703   0005FE                     
  4704                           ;TAD_TECLADO.c: 75:    if (Filas == 0x0) {
  4705   0005FE  5077               	movf	_Filas^0,w,c
  4706   000600  A4D8               	btfss	status,2,c
  4707   000602  EF05  F003         	goto	u2351
  4708   000606  EF07  F003         	goto	u2350
  4709   00060A                     u2351:
  4710   00060A  EF09  F003         	goto	l3228
  4711   00060E                     u2350:
  4712   00060E  EFF2  F002         	goto	l3210
  4713   000612                     l3228:
  4714   000612  5077               	movf	_Filas^0,w,c
  4715   000614  B4D8               	btfsc	status,2,c
  4716   000616  EF0F  F003         	goto	u2361
  4717   00061A  EF11  F003         	goto	u2360
  4718   00061E                     u2361:
  4719   00061E  EF2E  F003         	goto	l3236
  4720   000622                     u2360:
  4721   000622  5079               	movf	_timer^0,w,c
  4722   000624  EC0F  F008         	call	_TI_GetTics
  4723   000628  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4724   00062A  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4725   00062C  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4726   00062E  E109               	bnz	u2370
  4727   000630  0E09               	movlw	9
  4728   000632  5C02               	subwf	?_TI_GetTics^0,w,c
  4729   000634  A0D8               	btfss	status,0,c
  4730   000636  EF1F  F003         	goto	u2371
  4731   00063A  EF21  F003         	goto	u2370
  4732   00063E                     u2371:
  4733   00063E  EF2E  F003         	goto	l3236
  4734   000642                     u2370:
  4735   000642  0E0B               	movlw	11
  4736   000644  1875               	xorwf	_tecla^0,w,c
  4737   000646  B4D8               	btfsc	status,2,c
  4738   000648  EF28  F003         	goto	u2381
  4739   00064C  EF2A  F003         	goto	u2380
  4740   000650                     u2381:
  4741   000650  EF2E  F003         	goto	l3236
  4742   000654                     u2380:
  4743   000654                     l3234:
  4744                           
  4745                           ;TAD_TECLADO.c: 81:     state = 5;
  4746   000654  0E05               	movlw	5
  4747   000656  6E74               	movwf	_state^0,c
  4748                           
  4749                           ;TAD_TECLADO.c: 82:    }
  4750   000658  EFAD  F003         	goto	l160
  4751   00065C                     l3236:
  4752   00065C  5077               	movf	_Filas^0,w,c
  4753   00065E  B4D8               	btfsc	status,2,c
  4754   000660  EF34  F003         	goto	u2391
  4755   000664  EF36  F003         	goto	u2390
  4756   000668                     u2391:
  4757   000668  EFAD  F003         	goto	l160
  4758   00066C                     u2390:
  4759   00066C  5079               	movf	_timer^0,w,c
  4760   00066E  EC0F  F008         	call	_TI_GetTics
  4761   000672  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4762   000674  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4763   000676  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4764   000678  E109               	bnz	u2400
  4765   00067A  0E09               	movlw	9
  4766   00067C  5C02               	subwf	?_TI_GetTics^0,w,c
  4767   00067E  A0D8               	btfss	status,0,c
  4768   000680  EF44  F003         	goto	u2401
  4769   000684  EF46  F003         	goto	u2400
  4770   000688                     u2401:
  4771   000688  EFAD  F003         	goto	l160
  4772   00068C                     u2400:
  4773   00068C  0E0B               	movlw	11
  4774   00068E  1875               	xorwf	_tecla^0,w,c
  4775   000690  A4D8               	btfss	status,2,c
  4776   000692  EF4D  F003         	goto	u2411
  4777   000696  EF4F  F003         	goto	u2410
  4778   00069A                     u2411:
  4779   00069A  EFAD  F003         	goto	l160
  4780   00069E                     u2410:
  4781   00069E                     
  4782                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  4783   00069E  5079               	movf	_timer^0,w,c
  4784   0006A0  EC28  F009         	call	_TI_ResetTics
  4785   0006A4                     
  4786                           ;TAD_TECLADO.c: 85:     state = 4;
  4787   0006A4  0E04               	movlw	4
  4788   0006A6  6E74               	movwf	_state^0,c
  4789   0006A8  EFAD  F003         	goto	l160
  4790   0006AC                     l3246:
  4791                           
  4792                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  4793   0006AC  ECB9  F009         	call	_ReadFilas	;wreg free
  4794   0006B0  6E77               	movwf	_Filas^0,c
  4795   0006B2                     
  4796                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  4797   0006B2  5077               	movf	_Filas^0,w,c
  4798   0006B4  A4D8               	btfss	status,2,c
  4799   0006B6  EF5F  F003         	goto	u2421
  4800   0006BA  EF61  F003         	goto	u2420
  4801   0006BE                     u2421:
  4802   0006BE  EF63  F003         	goto	l3252
  4803   0006C2                     u2420:
  4804   0006C2  EFF6  F002         	goto	l3214
  4805   0006C6                     l3252:
  4806   0006C6  5077               	movf	_Filas^0,w,c
  4807   0006C8  B4D8               	btfsc	status,2,c
  4808   0006CA  EF69  F003         	goto	u2431
  4809   0006CE  EF6B  F003         	goto	u2430
  4810   0006D2                     u2431:
  4811   0006D2  EFAD  F003         	goto	l160
  4812   0006D6                     u2430:
  4813   0006D6  5079               	movf	_timer^0,w,c
  4814   0006D8  EC0F  F008         	call	_TI_GetTics
  4815   0006DC  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4816   0006DE  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4817   0006E0  E10B               	bnz	u2440
  4818   0006E2  0EDD               	movlw	221
  4819   0006E4  5C02               	subwf	?_TI_GetTics^0,w,c
  4820   0006E6  0E05               	movlw	5
  4821   0006E8  5803               	subwfb	(?_TI_GetTics+1)^0,w,c
  4822   0006EA  A0D8               	btfss	status,0,c
  4823   0006EC  EF7A  F003         	goto	u2441
  4824   0006F0  EF7C  F003         	goto	u2440
  4825   0006F4                     u2441:
  4826   0006F4  EFAD  F003         	goto	l160
  4827   0006F8                     u2440:
  4828   0006F8                     
  4829                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  4830   0006F8  ECB6  F009         	call	_hashtag_pressed3s	;wreg free
  4831   0006FC  EF2A  F003         	goto	l3234
  4832   000700                     l3260:
  4833                           
  4834                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  4835   000700  ECB9  F009         	call	_ReadFilas	;wreg free
  4836   000704  6E77               	movwf	_Filas^0,c
  4837   000706                     
  4838                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  4839   000706  5077               	movf	_Filas^0,w,c
  4840   000708  A4D8               	btfss	status,2,c
  4841   00070A  EF89  F003         	goto	u2451
  4842   00070E  EF8B  F003         	goto	u2450
  4843   000712                     u2451:
  4844   000712  EFAD  F003         	goto	l160
  4845   000716                     u2450:
  4846   000716                     
  4847                           ;TAD_TECLADO.c: 102:     state = 0;
  4848   000716  6A74               	clrf	_state^0,c
  4849   000718                     
  4850                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  4851   000718  0E04               	movlw	4
  4852   00071A  6E76               	movwf	_Columnas^0,c
  4853   00071C                     
  4854                           ;TAD_TECLADO.c: 104:     writeColumnas();
  4855   00071C  EC35  F008         	call	_writeColumnas	;wreg free
  4856   000720  EFAD  F003         	goto	l160
  4857   000724                     l3272:
  4858   000724  5074               	movf	_state^0,w,c
  4859                           
  4860                           ; Switch size 1, requested type "simple"
  4861                           ; Number of cases is 6, Range of values is 0 to 5
  4862                           ; switch strategies available:
  4863                           ; Name         Instructions Cycles
  4864                           ; simple_byte           19    10 (average)
  4865                           ;	Chosen strategy is simple_byte
  4866   000726  0A00               	xorlw	0	; case 0
  4867   000728  B4D8               	btfsc	status,2,c
  4868   00072A  EF98  F002         	goto	l3168
  4869   00072E  0A01               	xorlw	1	; case 1
  4870   000730  B4D8               	btfsc	status,2,c
  4871   000732  EFBA  F002         	goto	l3184
  4872   000736  0A03               	xorlw	3	; case 2
  4873   000738  B4D8               	btfsc	status,2,c
  4874   00073A  EFDA  F002         	goto	l3200
  4875   00073E  0A01               	xorlw	1	; case 3
  4876   000740  B4D8               	btfsc	status,2,c
  4877   000742  EFF9  F002         	goto	l3216
  4878   000746  0A07               	xorlw	7	; case 4
  4879   000748  B4D8               	btfsc	status,2,c
  4880   00074A  EF56  F003         	goto	l3246
  4881   00074E  0A01               	xorlw	1	; case 5
  4882   000750  B4D8               	btfsc	status,2,c
  4883   000752  EF80  F003         	goto	l3260
  4884   000756  EFAD  F003         	goto	l160
  4885   00075A                     l160:
  4886   00075A  0012               	return		;funcret
  4887   00075C                     __end_of_motorTeclado:
  4888                           	callstack 0
  4889                           
  4890 ;; *************** function _writeColumnas *****************
  4891 ;; Defined at:
  4892 ;;		line 114 in file "TAD_TECLADO.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1
  4906 ;;      Params:         0       0       0
  4907 ;;      Locals:         0       0       0
  4908 ;;      Temps:          0       0       0
  4909 ;;      Totals:         0       0       0
  4910 ;;Total ram usage:        0 bytes
  4911 ;; Hardware stack levels used: 1
  4912 ;; Hardware stack levels required when called: 3
  4913 ;; This function calls:
  4914 ;;		Nothing
  4915 ;; This function is called by:
  4916 ;;		_motorTeclado
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text22
  4921   00106A                     __ptext22:
  4922                           	callstack 0
  4923   00106A                     _writeColumnas:
  4924                           	callstack 26
  4925   00106A                     
  4926                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  4927   00106A  6A8C               	clrf	140,c	;volatile
  4928   00106C                     
  4929                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  4930   00106C  0476               	decf	_Columnas^0,w,c
  4931   00106E  A4D8               	btfss	status,2,c
  4932   001070  EF3C  F008         	goto	u561
  4933   001074  EF3E  F008         	goto	u560
  4934   001078                     u561:
  4935   001078  EF41  F008         	goto	l1782
  4936   00107C                     u560:
  4937   00107C                     
  4938                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  4939   00107C  8A8C               	bsf	140,5,c	;volatile
  4940                           
  4941                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  4942   00107E  EF57  F008         	goto	l168
  4943   001082                     l1782:
  4944   001082  0E02               	movlw	2
  4945   001084  1876               	xorwf	_Columnas^0,w,c
  4946   001086  A4D8               	btfss	status,2,c
  4947   001088  EF48  F008         	goto	u571
  4948   00108C  EF4A  F008         	goto	u570
  4949   001090                     u571:
  4950   001090  EF4D  F008         	goto	l1786
  4951   001094                     u570:
  4952   001094                     
  4953                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  4954   001094  8C8C               	bsf	140,6,c	;volatile
  4955                           
  4956                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  4957   001096  EF57  F008         	goto	l168
  4958   00109A                     l1786:
  4959   00109A  0E04               	movlw	4
  4960   00109C  1876               	xorwf	_Columnas^0,w,c
  4961   00109E  A4D8               	btfss	status,2,c
  4962   0010A0  EF54  F008         	goto	u581
  4963   0010A4  EF56  F008         	goto	u580
  4964   0010A8                     u581:
  4965   0010A8  EF57  F008         	goto	l168
  4966   0010AC                     u580:
  4967   0010AC                     
  4968                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  4969   0010AC  888C               	bsf	140,4,c	;volatile
  4970   0010AE                     l168:
  4971   0010AE  0012               	return		;funcret
  4972   0010B0                     __end_of_writeColumnas:
  4973                           	callstack 0
  4974                           
  4975 ;; *************** function _hashtag_pressed3s *****************
  4976 ;; Defined at:
  4977 ;;		line 58 in file "TAD_TERMINAL.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1
  4991 ;;      Params:         0       0       0
  4992 ;;      Locals:         0       0       0
  4993 ;;      Temps:          0       0       0
  4994 ;;      Totals:         0       0       0
  4995 ;;Total ram usage:        0 bytes
  4996 ;; Hardware stack levels used: 1
  4997 ;; Hardware stack levels required when called: 3
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_motorTeclado
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text23
  5006   00136C                     __ptext23:
  5007                           	callstack 0
  5008   00136C                     _hashtag_pressed3s:
  5009                           	callstack 26
  5010   00136C                     
  5011                           ;TAD_TERMINAL.c: 59:  hashtag_pressed = 1;
  5012   00136C  0E01               	movlw	1
  5013   00136E  6E65               	movwf	_hashtag_pressed^0,c
  5014   001370  0012               	return		;funcret
  5015   001372                     __end_of_hashtag_pressed3s:
  5016                           	callstack 0
  5017                           
  5018 ;; *************** function _TI_ResetTics *****************
  5019 ;; Defined at:
  5020 ;;		line 53 in file "TAD_TIMER.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;  TimerHandle     1    wreg     unsigned char 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMRAM   BANK0   BANK1
  5034 ;;      Params:         0       0       0
  5035 ;;      Locals:         1       0       0
  5036 ;;      Temps:          0       0       0
  5037 ;;      Totals:         1       0       0
  5038 ;;Total ram usage:        1 bytes
  5039 ;; Hardware stack levels used: 1
  5040 ;; Hardware stack levels required when called: 3
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_motorTeclado
  5045 ;;		_Espera
  5046 ;;		_WaitForBusy
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text24
  5051   001250                     __ptext24:
  5052                           	callstack 0
  5053   001250                     _TI_ResetTics:
  5054                           	callstack 26
  5055                           
  5056                           ;incstack = 0
  5057                           ;TI_ResetTics@TimerHandle stored from wreg
  5058   001250  6E02               	movwf	TI_ResetTics@TimerHandle^0,c
  5059   001252                     
  5060                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  5061   001252  9EF2               	bcf	242,7,c	;volatile
  5062   001254  5002               	movf	TI_ResetTics@TimerHandle^0,w,c
  5063   001256  0D05               	mullw	5
  5064   001258  50F3               	movf	243,w,c
  5065   00125A  0F80               	addlw	low _Timers
  5066   00125C  6ED9               	movwf	fsr2l,c
  5067   00125E  6ADA               	clrf	fsr2h,c
  5068   001260  C059  FFDE         	movff	_Tics,postinc2	;volatile
  5069   001264  C05A  FFDE         	movff	_Tics+1,postinc2	;volatile
  5070   001268  C05B  FFDE         	movff	_Tics+2,postinc2	;volatile
  5071   00126C  C05C  FFDE         	movff	_Tics+3,postinc2	;volatile
  5072   001270  8EF2               	bsf	242,7,c	;volatile
  5073   001272  0012               	return		;funcret
  5074   001274                     __end_of_TI_ResetTics:
  5075                           	callstack 0
  5076                           
  5077 ;; *************** function _TI_GetTics *****************
  5078 ;; Defined at:
  5079 ;;		line 61 in file "TAD_TIMER.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  TimerHandle     1    wreg     unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  5084 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  4    1[COMRAM] unsigned long 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1
  5094 ;;      Params:         4       0       0
  5095 ;;      Locals:         5       0       0
  5096 ;;      Temps:          4       0       0
  5097 ;;      Totals:        13       0       0
  5098 ;;Total ram usage:       13 bytes
  5099 ;; Hardware stack levels used: 1
  5100 ;; Hardware stack levels required when called: 3
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_motorTeclado
  5105 ;;		_Espera
  5106 ;;		_WaitForBusy
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text25
  5111   00101E                     __ptext25:
  5112                           	callstack 0
  5113   00101E                     _TI_GetTics:
  5114                           	callstack 26
  5115                           
  5116                           ;incstack = 0
  5117                           ;TI_GetTics@TimerHandle stored from wreg
  5118   00101E  6E0E               	movwf	TI_GetTics@TimerHandle^0,c
  5119   001020                     
  5120                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  5121   001020  9EF2               	bcf	242,7,c	;volatile
  5122   001022  C059  F00A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  5123   001026  C05A  F00B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  5124   00102A  C05B  F00C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  5125   00102E  C05C  F00D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  5126   001032  8EF2               	bsf	242,7,c	;volatile
  5127   001034                     
  5128                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  5129   001034  500E               	movf	TI_GetTics@TimerHandle^0,w,c
  5130   001036  0D05               	mullw	5
  5131   001038  50F3               	movf	243,w,c
  5132   00103A  0F80               	addlw	low _Timers
  5133   00103C  6ED9               	movwf	fsr2l,c
  5134   00103E  6ADA               	clrf	fsr2h,c
  5135   001040  CFDE F006          	movff	postinc2,??_TI_GetTics
  5136   001044  CFDE F007          	movff	postinc2,??_TI_GetTics+1
  5137   001048  CFDE F008          	movff	postinc2,??_TI_GetTics+2
  5138   00104C  CFDE F009          	movff	postinc2,??_TI_GetTics+3
  5139   001050  5006               	movf	??_TI_GetTics^0,w,c
  5140   001052  5C0A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  5141   001054  6E02               	movwf	?_TI_GetTics^0,c
  5142   001056  5007               	movf	(??_TI_GetTics+1)^0,w,c
  5143   001058  580B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  5144   00105A  6E03               	movwf	(?_TI_GetTics+1)^0,c
  5145   00105C  5008               	movf	(??_TI_GetTics+2)^0,w,c
  5146   00105E  580C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  5147   001060  6E04               	movwf	(?_TI_GetTics+2)^0,c
  5148   001062  5009               	movf	(??_TI_GetTics+3)^0,w,c
  5149   001064  580D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  5150   001066  6E05               	movwf	(?_TI_GetTics+3)^0,c
  5151   001068  0012               	return		;funcret
  5152   00106A                     __end_of_TI_GetTics:
  5153                           	callstack 0
  5154                           
  5155 ;; *************** function _ReadFilas *****************
  5156 ;; Defined at:
  5157 ;;		line 10 in file "TAD_TECLADO.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;		None
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;		None
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      unsigned char 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1
  5171 ;;      Params:         0       0       0
  5172 ;;      Locals:         0       0       0
  5173 ;;      Temps:          0       0       0
  5174 ;;      Totals:         0       0       0
  5175 ;;Total ram usage:        0 bytes
  5176 ;; Hardware stack levels used: 1
  5177 ;; Hardware stack levels required when called: 3
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_motorTeclado
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text26
  5186   001372                     __ptext26:
  5187                           	callstack 0
  5188   001372                     _ReadFilas:
  5189                           	callstack 26
  5190   001372                     
  5191                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  5192   001372  5083               	movf	131,w,c	;volatile
  5193   001374  0B0F               	andlw	15
  5194   001376  0012               	return		;funcret
  5195   001378                     __end_of_ReadFilas:
  5196                           	callstack 0
  5197                           
  5198 ;; *************** function _GetTecla *****************
  5199 ;; Defined at:
  5200 ;;		line 128 in file "TAD_TECLADO.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;		None
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  5205 ;;  fila            1   16[COMRAM] unsigned char 
  5206 ;;  columna         1   15[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  1    wreg      unsigned char 
  5209 ;; Registers used:
  5210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1
  5216 ;;      Params:         0       0       0
  5217 ;;      Locals:        14       0       0
  5218 ;;      Temps:          2       0       0
  5219 ;;      Totals:        16       0       0
  5220 ;;Total ram usage:       16 bytes
  5221 ;; Hardware stack levels used: 1
  5222 ;; Hardware stack levels required when called: 3
  5223 ;; This function calls:
  5224 ;;		Nothing
  5225 ;; This function is called by:
  5226 ;;		_motorTeclado
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text27
  5231   000AB6                     __ptext27:
  5232                           	callstack 0
  5233   000AB6                     _GetTecla:
  5234                           	callstack 26
  5235   000AB6                     
  5236                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  5237   000AB6  6A10               	clrf	GetTecla@columna^0,c
  5238                           
  5239                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  5240   000AB8  EF70  F005         	goto	l1804
  5241   000ABC                     l172:
  5242   000ABC  6A11               	clrf	GetTecla@fila^0,c
  5243   000ABE  EF8E  F005         	goto	l1816
  5244   000AC2                     l1792:
  5245   000AC2  0E01               	movlw	1
  5246   000AC4  6E11               	movwf	GetTecla@fila^0,c
  5247   000AC6  EF8E  F005         	goto	l1816
  5248   000ACA                     l1794:
  5249   000ACA  0E02               	movlw	2
  5250   000ACC  6E11               	movwf	GetTecla@fila^0,c
  5251   000ACE  EF8E  F005         	goto	l1816
  5252   000AD2                     l1796:
  5253   000AD2  0E03               	movlw	3
  5254   000AD4  6E11               	movwf	GetTecla@fila^0,c
  5255   000AD6  EF8E  F005         	goto	l1816
  5256   000ADA                     l1798:
  5257   000ADA  0EFF               	movlw	255
  5258   000ADC  EFBC  F005         	goto	l178
  5259   000AE0                     l1804:
  5260   000AE0  5077               	movf	_Filas^0,w,c
  5261                           
  5262                           ; Switch size 1, requested type "simple"
  5263                           ; Number of cases is 4, Range of values is 1 to 8
  5264                           ; switch strategies available:
  5265                           ; Name         Instructions Cycles
  5266                           ; simple_byte           13     7 (average)
  5267                           ;	Chosen strategy is simple_byte
  5268   000AE2  0A01               	xorlw	1	; case 1
  5269   000AE4  B4D8               	btfsc	status,2,c
  5270   000AE6  EF5E  F005         	goto	l172
  5271   000AEA  0A03               	xorlw	3	; case 2
  5272   000AEC  B4D8               	btfsc	status,2,c
  5273   000AEE  EF61  F005         	goto	l1792
  5274   000AF2  0A06               	xorlw	6	; case 4
  5275   000AF4  B4D8               	btfsc	status,2,c
  5276   000AF6  EF65  F005         	goto	l1794
  5277   000AFA  0A0C               	xorlw	12	; case 8
  5278   000AFC  B4D8               	btfsc	status,2,c
  5279   000AFE  EF69  F005         	goto	l1796
  5280   000B02  EF6D  F005         	goto	l1798
  5281   000B06                     l180:
  5282   000B06  6A10               	clrf	GetTecla@columna^0,c
  5283   000B08  EFA8  F005         	goto	l1818
  5284   000B0C                     l1806:
  5285   000B0C  0E01               	movlw	1
  5286   000B0E  6E10               	movwf	GetTecla@columna^0,c
  5287   000B10  EFA8  F005         	goto	l1818
  5288   000B14                     l1808:
  5289   000B14  0E02               	movlw	2
  5290   000B16  6E10               	movwf	GetTecla@columna^0,c
  5291   000B18  EFA8  F005         	goto	l1818
  5292   000B1C                     l1816:
  5293   000B1C  5076               	movf	_Columnas^0,w,c
  5294   000B1E  0B07               	andlw	7
  5295   000B20  6E02               	movwf	??_GetTecla^0,c
  5296   000B22  6A03               	clrf	(??_GetTecla+1)^0,c
  5297                           
  5298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5299                           ; Switch size 1, requested type "simple"
  5300                           ; Number of cases is 1, Range of values is 0 to 0
  5301                           ; switch strategies available:
  5302                           ; Name         Instructions Cycles
  5303                           ; simple_byte            4     3 (average)
  5304                           ;	Chosen strategy is simple_byte
  5305   000B24  5003               	movf	(??_GetTecla+1)^0,w,c
  5306   000B26  0A00               	xorlw	0	; case 0
  5307   000B28  B4D8               	btfsc	status,2,c
  5308   000B2A  EF99  F005         	goto	l3782
  5309   000B2E  EF6D  F005         	goto	l1798
  5310   000B32                     l3782:
  5311                           
  5312                           ; Switch size 1, requested type "simple"
  5313                           ; Number of cases is 3, Range of values is 1 to 4
  5314                           ; switch strategies available:
  5315                           ; Name         Instructions Cycles
  5316                           ; simple_byte           10     6 (average)
  5317                           ;	Chosen strategy is simple_byte
  5318   000B32  5002               	movf	??_GetTecla^0,w,c
  5319   000B34  0A01               	xorlw	1	; case 1
  5320   000B36  B4D8               	btfsc	status,2,c
  5321   000B38  EF83  F005         	goto	l180
  5322   000B3C  0A03               	xorlw	3	; case 2
  5323   000B3E  B4D8               	btfsc	status,2,c
  5324   000B40  EF86  F005         	goto	l1806
  5325   000B44  0A06               	xorlw	6	; case 4
  5326   000B46  B4D8               	btfsc	status,2,c
  5327   000B48  EF8A  F005         	goto	l1808
  5328   000B4C  EF6D  F005         	goto	l1798
  5329   000B50                     l1818:
  5330                           
  5331                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  5332   000B50  0EE1               	movlw	low GetTecla@F3221
  5333   000B52  6EF6               	movwf	tblptrl,c
  5334   000B54                     	if	1	;There is more than 1 active tblptr byte
  5335   000B54  0E1E               	movlw	high GetTecla@F3221
  5336   000B56  6EF7               	movwf	tblptrh,c
  5337   000B58                     	endif
  5338   000B58                     	if	0	;There are less than 3 active tblptr bytes
  5339   000B58                     	endif
  5340   000B58  EE20  F004         	lfsr	2,GetTecla@keymap
  5341   000B5C  0E0B               	movlw	11
  5342   000B5E                     u590:
  5343   000B5E  0009               	tblrd		*+
  5344   000B60  CFF5 FFDE          	movff	tablat,postinc2
  5345   000B64  06E8               	decf	wreg,f,c
  5346   000B66  E2FB               	bc	u590
  5347   000B68                     
  5348                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  5349   000B68  5011               	movf	GetTecla@fila^0,w,c
  5350   000B6A  0D03               	mullw	3
  5351   000B6C  50F3               	movf	243,w,c
  5352   000B6E  0F04               	addlw	low GetTecla@keymap
  5353   000B70  2410               	addwf	GetTecla@columna^0,w,c
  5354   000B72  6ED9               	movwf	fsr2l,c
  5355   000B74  6ADA               	clrf	fsr2h,c
  5356   000B76  50DF               	movf	indf2,w,c
  5357   000B78                     l178:
  5358   000B78  0012               	return		;funcret
  5359   000B7A                     __end_of_GetTecla:
  5360                           	callstack 0
  5361                           
  5362 ;; *************** function _initRFID *****************
  5363 ;; Defined at:
  5364 ;;		line 297 in file "TAD_RFID.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1
  5378 ;;      Params:         0       0       0
  5379 ;;      Locals:         0       0       0
  5380 ;;      Temps:          0       0       0
  5381 ;;      Totals:         0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; Hardware stack levels required when called: 8
  5385 ;; This function calls:
  5386 ;;		_InitPortDirections
  5387 ;;		_MFRC522_Init
  5388 ;; This function is called by:
  5389 ;;		_main
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text28
  5394   00134A                     __ptext28:
  5395                           	callstack 0
  5396   00134A                     _initRFID:
  5397                           	callstack 22
  5398   00134A                     
  5399                           ;TAD_RFID.c: 298:     InitPortDirections();
  5400   00134A  EC9F  F009         	call	_InitPortDirections	;wreg free
  5401   00134E                     
  5402                           ;TAD_RFID.c: 299:     MFRC522_Init();
  5403   00134E  ECE8  F007         	call	_MFRC522_Init	;wreg free
  5404   001352  0012               	return		;funcret
  5405   001354                     __end_of_initRFID:
  5406                           	callstack 0
  5407                           
  5408 ;; *************** function _MFRC522_Init *****************
  5409 ;; Defined at:
  5410 ;;		line 118 in file "TAD_RFID.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;		None
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;		None
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1
  5424 ;;      Params:         0       0       0
  5425 ;;      Locals:         0       0       0
  5426 ;;      Temps:          0       0       0
  5427 ;;      Totals:         0       0       0
  5428 ;;Total ram usage:        0 bytes
  5429 ;; Hardware stack levels used: 1
  5430 ;; Hardware stack levels required when called: 7
  5431 ;; This function calls:
  5432 ;;		_MFRC522_AntennaOff
  5433 ;;		_MFRC522_AntennaOn
  5434 ;;		_MFRC522_Reset
  5435 ;;		_MFRC522_Wr
  5436 ;; This function is called by:
  5437 ;;		_initRFID
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text29
  5442   000FD0                     __ptext29:
  5443                           	callstack 0
  5444   000FD0                     _MFRC522_Init:
  5445                           	callstack 22
  5446   000FD0                     
  5447                           ;TAD_RFID.c: 119:     LATCbits.LATC3 = 1;
  5448   000FD0  868B               	bsf	139,3,c	;volatile
  5449                           
  5450                           ;TAD_RFID.c: 120:     LATCbits.LATC4 = 1;
  5451   000FD2  888B               	bsf	139,4,c	;volatile
  5452   000FD4                     
  5453                           ;TAD_RFID.c: 122:     MFRC522_Reset();
  5454   000FD4  EC00  F009         	call	_MFRC522_Reset	;wreg free
  5455                           
  5456                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2A, 0x8D);
  5457   000FD8  0E8D               	movlw	141
  5458   000FDA  6E0C               	movwf	MFRC522_Wr@value^0,c
  5459   000FDC  0E2A               	movlw	42
  5460   000FDE  EC68  F006         	call	_MFRC522_Wr
  5461                           
  5462                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2B, 0x3E);
  5463   000FE2  0E3E               	movlw	62
  5464   000FE4  6E0C               	movwf	MFRC522_Wr@value^0,c
  5465   000FE6  0E2B               	movlw	43
  5466   000FE8  EC68  F006         	call	_MFRC522_Wr
  5467                           
  5468                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x2D, 30);
  5469   000FEC  0E1E               	movlw	30
  5470   000FEE  6E0C               	movwf	MFRC522_Wr@value^0,c
  5471   000FF0  0E2D               	movlw	45
  5472   000FF2  EC68  F006         	call	_MFRC522_Wr
  5473                           
  5474                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x2C, 0);
  5475   000FF6  0E00               	movlw	0
  5476   000FF8  6E0C               	movwf	MFRC522_Wr@value^0,c
  5477   000FFA  0E2C               	movlw	44
  5478   000FFC  EC68  F006         	call	_MFRC522_Wr
  5479                           
  5480                           ;TAD_RFID.c: 127:     MFRC522_Wr(0x15, 0x40);
  5481   001000  0E40               	movlw	64
  5482   001002  6E0C               	movwf	MFRC522_Wr@value^0,c
  5483   001004  0E15               	movlw	21
  5484   001006  EC68  F006         	call	_MFRC522_Wr
  5485                           
  5486                           ;TAD_RFID.c: 128:     MFRC522_Wr(0x11, 0x3D);
  5487   00100A  0E3D               	movlw	61
  5488   00100C  6E0C               	movwf	MFRC522_Wr@value^0,c
  5489   00100E  0E11               	movlw	17
  5490   001010  EC68  F006         	call	_MFRC522_Wr
  5491                           
  5492                           ;TAD_RFID.c: 130:     MFRC522_AntennaOff();
  5493   001014  EC99  F009         	call	_MFRC522_AntennaOff	;wreg free
  5494                           
  5495                           ;TAD_RFID.c: 131:     MFRC522_AntennaOn();
  5496   001018  EC93  F009         	call	_MFRC522_AntennaOn	;wreg free
  5497   00101C  0012               	return		;funcret
  5498   00101E                     __end_of_MFRC522_Init:
  5499                           	callstack 0
  5500                           
  5501 ;; *************** function _MFRC522_Reset *****************
  5502 ;; Defined at:
  5503 ;;		line 99 in file "TAD_RFID.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      void 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1
  5517 ;;      Params:         0       0       0
  5518 ;;      Locals:         0       0       0
  5519 ;;      Temps:          0       0       0
  5520 ;;      Totals:         0       0       0
  5521 ;;Total ram usage:        0 bytes
  5522 ;; Hardware stack levels used: 1
  5523 ;; Hardware stack levels required when called: 5
  5524 ;; This function calls:
  5525 ;;		_MFRC522_Wr
  5526 ;;		_delay_us
  5527 ;; This function is called by:
  5528 ;;		_MFRC522_Init
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text30
  5533   001200                     __ptext30:
  5534                           	callstack 0
  5535   001200                     _MFRC522_Reset:
  5536                           	callstack 23
  5537   001200                     
  5538                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 1;
  5539   001200  888B               	bsf	139,4,c	;volatile
  5540   001202                     
  5541                           ;TAD_RFID.c: 101:     delay_us (1);
  5542   001202  0E01               	movlw	1
  5543   001204  ECB3  F008         	call	_delay_us
  5544   001208                     
  5545                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 0;
  5546   001208  988B               	bcf	139,4,c	;volatile
  5547                           
  5548                           ;TAD_RFID.c: 103:     delay_us (1);
  5549   00120A  0E01               	movlw	1
  5550   00120C  ECB3  F008         	call	_delay_us
  5551   001210                     
  5552                           ;TAD_RFID.c: 104:     LATCbits.LATC4 = 1;
  5553   001210  888B               	bsf	139,4,c	;volatile
  5554                           
  5555                           ;TAD_RFID.c: 105:     delay_us (1);
  5556   001212  0E01               	movlw	1
  5557   001214  ECB3  F008         	call	_delay_us
  5558                           
  5559                           ;TAD_RFID.c: 106:     MFRC522_Wr(0x01, 0x0F);
  5560   001218  0E0F               	movlw	15
  5561   00121A  6E0C               	movwf	MFRC522_Wr@value^0,c
  5562   00121C  0E01               	movlw	1
  5563   00121E  EC68  F006         	call	_MFRC522_Wr
  5564                           
  5565                           ;TAD_RFID.c: 107:     delay_us (1);
  5566   001222  0E01               	movlw	1
  5567   001224  ECB3  F008         	call	_delay_us
  5568   001228  0012               	return		;funcret
  5569   00122A                     __end_of_MFRC522_Reset:
  5570                           	callstack 0
  5571                           
  5572 ;; *************** function _MFRC522_AntennaOn *****************
  5573 ;; Defined at:
  5574 ;;		line 110 in file "TAD_RFID.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;		None
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      void 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1
  5588 ;;      Params:         0       0       0
  5589 ;;      Locals:         0       0       0
  5590 ;;      Temps:          0       0       0
  5591 ;;      Totals:         0       0       0
  5592 ;;Total ram usage:        0 bytes
  5593 ;; Hardware stack levels used: 1
  5594 ;; Hardware stack levels required when called: 6
  5595 ;; This function calls:
  5596 ;;		_MFRC522_Set_Bit
  5597 ;; This function is called by:
  5598 ;;		_MFRC522_Init
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text31
  5603   001326                     __ptext31:
  5604                           	callstack 0
  5605   001326                     _MFRC522_AntennaOn:
  5606                           	callstack 22
  5607   001326                     
  5608                           ;TAD_RFID.c: 111:     MFRC522_Set_Bit(0x14, 0x03);
  5609   001326  0E03               	movlw	3
  5610   001328  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  5611   00132A  0E14               	movlw	20
  5612   00132C  EC81  F009         	call	_MFRC522_Set_Bit
  5613   001330  0012               	return		;funcret
  5614   001332                     __end_of_MFRC522_AntennaOn:
  5615                           	callstack 0
  5616                           
  5617 ;; *************** function _MFRC522_Set_Bit *****************
  5618 ;; Defined at:
  5619 ;;		line 95 in file "TAD_RFID.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  addr            1    wreg     unsigned char 
  5622 ;;  mask            1   16[COMRAM] unsigned char 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  addr            1   17[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1
  5634 ;;      Params:         1       0       0
  5635 ;;      Locals:         1       0       0
  5636 ;;      Temps:          0       0       0
  5637 ;;      Totals:         2       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used: 1
  5640 ;; Hardware stack levels required when called: 5
  5641 ;; This function calls:
  5642 ;;		_MFRC522_Rd
  5643 ;;		_MFRC522_Wr
  5644 ;; This function is called by:
  5645 ;;		_MFRC522_AntennaOn
  5646 ;;		_motor_RFID
  5647 ;;		_MFRC522_ToCard
  5648 ;;		_MFRC522_CRC
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text32
  5653   001302                     __ptext32:
  5654                           	callstack 0
  5655   001302                     _MFRC522_Set_Bit:
  5656                           	callstack 24
  5657                           
  5658                           ;incstack = 0
  5659                           ;MFRC522_Set_Bit@addr stored from wreg
  5660   001302  6E12               	movwf	MFRC522_Set_Bit@addr^0,c
  5661   001304                     
  5662                           ;TAD_RFID.c: 96:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  5663   001304  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5664   001306  ECBC  F006         	call	_MFRC522_Rd
  5665   00130A  1011               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  5666   00130C  6E0C               	movwf	MFRC522_Wr@value^0,c
  5667   00130E  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5668   001310  EC68  F006         	call	_MFRC522_Wr
  5669   001314  0012               	return		;funcret
  5670   001316                     __end_of_MFRC522_Set_Bit:
  5671                           	callstack 0
  5672                           
  5673 ;; *************** function _MFRC522_AntennaOff *****************
  5674 ;; Defined at:
  5675 ;;		line 114 in file "TAD_RFID.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1
  5689 ;;      Params:         0       0       0
  5690 ;;      Locals:         0       0       0
  5691 ;;      Temps:          0       0       0
  5692 ;;      Totals:         0       0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used: 1
  5695 ;; Hardware stack levels required when called: 6
  5696 ;; This function calls:
  5697 ;;		_MFRC522_Clear_Bit
  5698 ;; This function is called by:
  5699 ;;		_MFRC522_Init
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text33
  5704   001332                     __ptext33:
  5705                           	callstack 0
  5706   001332                     _MFRC522_AntennaOff:
  5707                           	callstack 22
  5708   001332                     
  5709                           ;TAD_RFID.c: 115:     MFRC522_Clear_Bit(0x14, 0x03);
  5710   001332  0E03               	movlw	3
  5711   001334  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  5712   001336  0E14               	movlw	20
  5713   001338  EC48  F009         	call	_MFRC522_Clear_Bit
  5714   00133C  0012               	return		;funcret
  5715   00133E                     __end_of_MFRC522_AntennaOff:
  5716                           	callstack 0
  5717                           
  5718 ;; *************** function _MFRC522_Clear_Bit *****************
  5719 ;; Defined at:
  5720 ;;		line 91 in file "TAD_RFID.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  addr            1    wreg     unsigned char 
  5723 ;;  mask            1   16[COMRAM] unsigned char 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  addr            1   18[COMRAM] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      void 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMRAM   BANK0   BANK1
  5735 ;;      Params:         1       0       0
  5736 ;;      Locals:         1       0       0
  5737 ;;      Temps:          1       0       0
  5738 ;;      Totals:         3       0       0
  5739 ;;Total ram usage:        3 bytes
  5740 ;; Hardware stack levels used: 1
  5741 ;; Hardware stack levels required when called: 5
  5742 ;; This function calls:
  5743 ;;		_MFRC522_Rd
  5744 ;;		_MFRC522_Wr
  5745 ;; This function is called by:
  5746 ;;		_MFRC522_AntennaOff
  5747 ;;		_motor_RFID
  5748 ;;		_MFRC522_ToCard
  5749 ;;		_MFRC522_CRC
  5750 ;;		_MFRC522_Halt
  5751 ;;		_MFRC522_AntiColl
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text34
  5756   001290                     __ptext34:
  5757                           	callstack 0
  5758   001290                     _MFRC522_Clear_Bit:
  5759                           	callstack 24
  5760                           
  5761                           ;incstack = 0
  5762                           ;MFRC522_Clear_Bit@addr stored from wreg
  5763   001290  6E13               	movwf	MFRC522_Clear_Bit@addr^0,c
  5764   001292                     
  5765                           ;TAD_RFID.c: 92:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  5766   001292  5011               	movf	MFRC522_Clear_Bit@mask^0,w,c
  5767   001294  0AFF               	xorlw	255
  5768   001296  6E12               	movwf	??_MFRC522_Clear_Bit^0,c
  5769   001298  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5770   00129A  ECBC  F006         	call	_MFRC522_Rd
  5771   00129E  1412               	andwf	??_MFRC522_Clear_Bit^0,w,c
  5772   0012A0  6E0C               	movwf	MFRC522_Wr@value^0,c
  5773   0012A2  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5774   0012A4  EC68  F006         	call	_MFRC522_Wr
  5775   0012A8  0012               	return		;funcret
  5776   0012AA                     __end_of_MFRC522_Clear_Bit:
  5777                           	callstack 0
  5778                           
  5779 ;; *************** function _MFRC522_Wr *****************
  5780 ;; Defined at:
  5781 ;;		line 63 in file "TAD_RFID.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  Address         1    wreg     unsigned char 
  5784 ;;  value           1   11[COMRAM] unsigned char 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  Address         1   13[COMRAM] unsigned char 
  5787 ;;  i               1   15[COMRAM] unsigned char 
  5788 ;;  ucAddr          1   14[COMRAM] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1
  5798 ;;      Params:         1       0       0
  5799 ;;      Locals:         3       0       0
  5800 ;;      Temps:          1       0       0
  5801 ;;      Totals:         5       0       0
  5802 ;;Total ram usage:        5 bytes
  5803 ;; Hardware stack levels used: 1
  5804 ;; Hardware stack levels required when called: 4
  5805 ;; This function calls:
  5806 ;;		_delay_us
  5807 ;; This function is called by:
  5808 ;;		_MFRC522_Clear_Bit
  5809 ;;		_MFRC522_Set_Bit
  5810 ;;		_MFRC522_Reset
  5811 ;;		_MFRC522_Init
  5812 ;;		_motor_RFID
  5813 ;;		_MFRC522_ToCard
  5814 ;;		_MFRC522_Request
  5815 ;;		_MFRC522_CRC
  5816 ;;		_MFRC522_AntiColl
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text35
  5821   000CD0                     __ptext35:
  5822                           	callstack 0
  5823   000CD0                     _MFRC522_Wr:
  5824                           	callstack 25
  5825                           
  5826                           ;incstack = 0
  5827                           ;MFRC522_Wr@Address stored from wreg
  5828   000CD0  6E0E               	movwf	MFRC522_Wr@Address^0,c
  5829   000CD2                     
  5830                           ;TAD_RFID.c: 64:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  5831   000CD2  500E               	movf	MFRC522_Wr@Address^0,w,c
  5832   000CD4  240E               	addwf	MFRC522_Wr@Address^0,w,c
  5833   000CD6  0B7E               	andlw	126
  5834   000CD8  6E0F               	movwf	MFRC522_Wr@ucAddr^0,c
  5835   000CDA                     
  5836                           ;TAD_RFID.c: 65:     LATCbits.LATC2 = 0;
  5837   000CDA  948B               	bcf	139,2,c	;volatile
  5838   000CDC                     
  5839                           ;TAD_RFID.c: 66:     LATCbits.LATC3 = 0;
  5840   000CDC  968B               	bcf	139,3,c	;volatile
  5841   000CDE                     
  5842                           ;TAD_RFID.c: 67:     for (i = 8; i > 0; i--) {
  5843   000CDE  0E08               	movlw	8
  5844   000CE0  6E10               	movwf	MFRC522_Wr@i^0,c
  5845   000CE2                     l2724:
  5846                           
  5847                           ;TAD_RFID.c: 68:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5848   000CE2  BE0F               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  5849   000CE4  EF76  F006         	goto	u1761
  5850   000CE8  EF7A  F006         	goto	u1760
  5851   000CEC                     u1761:
  5852   000CEC  6A0D               	clrf	??_MFRC522_Wr^0,c
  5853   000CEE  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5854   000CF0  EF7B  F006         	goto	u1778
  5855   000CF4                     u1760:
  5856   000CF4  6A0D               	clrf	??_MFRC522_Wr^0,c
  5857   000CF6                     u1778:
  5858   000CF6  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5859   000CF8  508B               	movf	139,w,c	;volatile
  5860   000CFA  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5861   000CFC  0BFD               	andlw	-3
  5862   000CFE  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5863   000D00  6E8B               	movwf	139,c	;volatile
  5864   000D02                     
  5865                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 1;
  5866   000D02  848B               	bsf	139,2,c	;volatile
  5867                           
  5868                           ;TAD_RFID.c: 70:         ucAddr <<= 1;
  5869   000D04  90D8               	bcf	status,0,c
  5870   000D06  360F               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  5871   000D08                     
  5872                           ;TAD_RFID.c: 71:         delay_us(5);
  5873   000D08  0E05               	movlw	5
  5874   000D0A  ECB3  F008         	call	_delay_us
  5875   000D0E                     
  5876                           ;TAD_RFID.c: 72:         LATCbits.LATC2 = 0;
  5877   000D0E  948B               	bcf	139,2,c	;volatile
  5878   000D10                     
  5879                           ;TAD_RFID.c: 73:         delay_us(5);
  5880   000D10  0E05               	movlw	5
  5881   000D12  ECB3  F008         	call	_delay_us
  5882   000D16                     
  5883                           ;TAD_RFID.c: 74:     }
  5884   000D16  0610               	decf	MFRC522_Wr@i^0,f,c
  5885   000D18  5010               	movf	MFRC522_Wr@i^0,w,c
  5886   000D1A  A4D8               	btfss	status,2,c
  5887   000D1C  EF92  F006         	goto	u1781
  5888   000D20  EF94  F006         	goto	u1780
  5889   000D24                     u1781:
  5890   000D24  EF71  F006         	goto	l2724
  5891   000D28                     u1780:
  5892   000D28                     
  5893                           ;TAD_RFID.c: 76:     for (i = 8; i > 0; i--) {
  5894   000D28  0E08               	movlw	8
  5895   000D2A  6E10               	movwf	MFRC522_Wr@i^0,c
  5896   000D2C                     l2742:
  5897                           
  5898                           ;TAD_RFID.c: 77:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  5899   000D2C  BE0C               	btfsc	MFRC522_Wr@value^0,7,c
  5900   000D2E  EF9B  F006         	goto	u1791
  5901   000D32  EF9F  F006         	goto	u1790
  5902   000D36                     u1791:
  5903   000D36  6A0D               	clrf	??_MFRC522_Wr^0,c
  5904   000D38  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5905   000D3A  EFA0  F006         	goto	u1808
  5906   000D3E                     u1790:
  5907   000D3E  6A0D               	clrf	??_MFRC522_Wr^0,c
  5908   000D40                     u1808:
  5909   000D40  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5910   000D42  508B               	movf	139,w,c	;volatile
  5911   000D44  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5912   000D46  0BFD               	andlw	-3
  5913   000D48  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5914   000D4A  6E8B               	movwf	139,c	;volatile
  5915   000D4C                     
  5916                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 1;
  5917   000D4C  848B               	bsf	139,2,c	;volatile
  5918                           
  5919                           ;TAD_RFID.c: 79:         value <<= 1;
  5920   000D4E  90D8               	bcf	status,0,c
  5921   000D50  360C               	rlcf	MFRC522_Wr@value^0,f,c
  5922   000D52                     
  5923                           ;TAD_RFID.c: 80:         delay_us(5);
  5924   000D52  0E05               	movlw	5
  5925   000D54  ECB3  F008         	call	_delay_us
  5926   000D58                     
  5927                           ;TAD_RFID.c: 81:         LATCbits.LATC2 = 0;
  5928   000D58  948B               	bcf	139,2,c	;volatile
  5929   000D5A                     
  5930                           ;TAD_RFID.c: 82:         delay_us(5);
  5931   000D5A  0E05               	movlw	5
  5932   000D5C  ECB3  F008         	call	_delay_us
  5933   000D60                     
  5934                           ;TAD_RFID.c: 83:     }
  5935   000D60  0610               	decf	MFRC522_Wr@i^0,f,c
  5936   000D62  5010               	movf	MFRC522_Wr@i^0,w,c
  5937   000D64  A4D8               	btfss	status,2,c
  5938   000D66  EFB7  F006         	goto	u1811
  5939   000D6A  EFB9  F006         	goto	u1810
  5940   000D6E                     u1811:
  5941   000D6E  EF96  F006         	goto	l2742
  5942   000D72                     u1810:
  5943   000D72                     
  5944                           ;TAD_RFID.c: 85:     LATCbits.LATC3 = 1;
  5945   000D72  868B               	bsf	139,3,c	;volatile
  5946                           
  5947                           ;TAD_RFID.c: 86:     LATCbits.LATC2 = 1;
  5948   000D74  848B               	bsf	139,2,c	;volatile
  5949   000D76  0012               	return		;funcret
  5950   000D78                     __end_of_MFRC522_Wr:
  5951                           	callstack 0
  5952                           
  5953 ;; *************** function _MFRC522_Rd *****************
  5954 ;; Defined at:
  5955 ;;		line 32 in file "TAD_RFID.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  Address         1    wreg     unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  Address         1    7[COMRAM] unsigned char 
  5960 ;;  i               1   10[COMRAM] unsigned char 
  5961 ;;  ucResult        1    9[COMRAM] unsigned char 
  5962 ;;  ucAddr          1    8[COMRAM] unsigned char 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      unsigned char 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1
  5972 ;;      Params:         0       0       0
  5973 ;;      Locals:         4       0       0
  5974 ;;      Temps:          1       0       0
  5975 ;;      Totals:         5       0       0
  5976 ;;Total ram usage:        5 bytes
  5977 ;; Hardware stack levels used: 1
  5978 ;; Hardware stack levels required when called: 4
  5979 ;; This function calls:
  5980 ;;		_delay_us
  5981 ;; This function is called by:
  5982 ;;		_MFRC522_Clear_Bit
  5983 ;;		_MFRC522_Set_Bit
  5984 ;;		_motor_RFID
  5985 ;;		_MFRC522_ToCard
  5986 ;;		_MFRC522_CRC
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text36
  5991   000D78                     __ptext36:
  5992                           	callstack 0
  5993   000D78                     _MFRC522_Rd:
  5994                           	callstack 24
  5995                           
  5996                           ;incstack = 0
  5997                           ;MFRC522_Rd@Address stored from wreg
  5998   000D78  6E08               	movwf	MFRC522_Rd@Address^0,c
  5999   000D7A                     
  6000                           ;TAD_RFID.c: 33:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  6001   000D7A  5008               	movf	MFRC522_Rd@Address^0,w,c
  6002   000D7C  2408               	addwf	MFRC522_Rd@Address^0,w,c
  6003   000D7E  0B7E               	andlw	126
  6004   000D80  0980               	iorlw	128
  6005   000D82  6E09               	movwf	MFRC522_Rd@ucAddr^0,c
  6006   000D84                     
  6007                           ;TAD_RFID.c: 34:     unsigned char ucResult = 0;
  6008   000D84  6A0A               	clrf	MFRC522_Rd@ucResult^0,c
  6009   000D86                     
  6010                           ;TAD_RFID.c: 36:     LATCbits.LATC2 = 0;
  6011   000D86  948B               	bcf	139,2,c	;volatile
  6012   000D88                     
  6013                           ;TAD_RFID.c: 37:     LATCbits.LATC3 = 0;
  6014   000D88  968B               	bcf	139,3,c	;volatile
  6015   000D8A                     
  6016                           ;TAD_RFID.c: 39:     for (i = 8; i > 0; i--) {
  6017   000D8A  0E08               	movlw	8
  6018   000D8C  6E0B               	movwf	MFRC522_Rd@i^0,c
  6019   000D8E                     l2678:
  6020                           
  6021                           ;TAD_RFID.c: 40:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6022   000D8E  BE09               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  6023   000D90  EFCC  F006         	goto	u1711
  6024   000D94  EFD0  F006         	goto	u1710
  6025   000D98                     u1711:
  6026   000D98  6A07               	clrf	??_MFRC522_Rd^0,c
  6027   000D9A  2A07               	incf	??_MFRC522_Rd^0,f,c
  6028   000D9C  EFD1  F006         	goto	u1728
  6029   000DA0                     u1710:
  6030   000DA0  6A07               	clrf	??_MFRC522_Rd^0,c
  6031   000DA2                     u1728:
  6032   000DA2  4607               	rlncf	??_MFRC522_Rd^0,f,c
  6033   000DA4  508B               	movf	139,w,c	;volatile
  6034   000DA6  1807               	xorwf	??_MFRC522_Rd^0,w,c
  6035   000DA8  0BFD               	andlw	-3
  6036   000DAA  1807               	xorwf	??_MFRC522_Rd^0,w,c
  6037   000DAC  6E8B               	movwf	139,c	;volatile
  6038   000DAE                     
  6039                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 1;
  6040   000DAE  848B               	bsf	139,2,c	;volatile
  6041   000DB0                     
  6042                           ;TAD_RFID.c: 42:         delay_us(5);
  6043   000DB0  0E05               	movlw	5
  6044   000DB2  ECB3  F008         	call	_delay_us
  6045   000DB6                     
  6046                           ;TAD_RFID.c: 43:         ucAddr <<= 1;
  6047   000DB6  90D8               	bcf	status,0,c
  6048   000DB8  3609               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  6049   000DBA                     
  6050                           ;TAD_RFID.c: 44:         LATCbits.LATC2 = 0;
  6051   000DBA  948B               	bcf	139,2,c	;volatile
  6052                           
  6053                           ;TAD_RFID.c: 45:         delay_us(5);
  6054   000DBC  0E05               	movlw	5
  6055   000DBE  ECB3  F008         	call	_delay_us
  6056   000DC2                     
  6057                           ;TAD_RFID.c: 46:     }
  6058   000DC2  060B               	decf	MFRC522_Rd@i^0,f,c
  6059   000DC4  500B               	movf	MFRC522_Rd@i^0,w,c
  6060   000DC6  A4D8               	btfss	status,2,c
  6061   000DC8  EFE8  F006         	goto	u1731
  6062   000DCC  EFEA  F006         	goto	u1730
  6063   000DD0                     u1731:
  6064   000DD0  EFC7  F006         	goto	l2678
  6065   000DD4                     u1730:
  6066   000DD4                     
  6067                           ;TAD_RFID.c: 48:     for (i = 8; i > 0; i--) {
  6068   000DD4  0E08               	movlw	8
  6069   000DD6  6E0B               	movwf	MFRC522_Rd@i^0,c
  6070   000DD8                     l212:
  6071                           
  6072                           ;TAD_RFID.c: 49:         LATCbits.LATC2 = 1;
  6073   000DD8  848B               	bsf	139,2,c	;volatile
  6074   000DDA                     
  6075                           ;TAD_RFID.c: 50:         delay_us(5);
  6076   000DDA  0E05               	movlw	5
  6077   000DDC  ECB3  F008         	call	_delay_us
  6078   000DE0                     
  6079                           ;TAD_RFID.c: 51:         ucResult <<= 1;
  6080   000DE0  90D8               	bcf	status,0,c
  6081   000DE2  360A               	rlcf	MFRC522_Rd@ucResult^0,f,c
  6082   000DE4                     
  6083                           ;TAD_RFID.c: 52:         ucResult|= PORTCbits.RC0;
  6084   000DE4  B082               	btfsc	130,0,c	;volatile
  6085   000DE6  EFF7  F006         	goto	u1741
  6086   000DEA  EFFA  F006         	goto	u1740
  6087   000DEE                     u1741:
  6088   000DEE  0E01               	movlw	1
  6089   000DF0  EFFB  F006         	goto	u1746
  6090   000DF4                     u1740:
  6091   000DF4  0E00               	movlw	0
  6092   000DF6                     u1746:
  6093   000DF6  120A               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6094   000DF8                     
  6095                           ;TAD_RFID.c: 53:         LATCbits.LATC2 = 0;
  6096   000DF8  948B               	bcf	139,2,c	;volatile
  6097                           
  6098                           ;TAD_RFID.c: 54:         delay_us(5);
  6099   000DFA  0E05               	movlw	5
  6100   000DFC  ECB3  F008         	call	_delay_us
  6101   000E00                     
  6102                           ;TAD_RFID.c: 55:     }
  6103   000E00  060B               	decf	MFRC522_Rd@i^0,f,c
  6104   000E02  500B               	movf	MFRC522_Rd@i^0,w,c
  6105   000E04  A4D8               	btfss	status,2,c
  6106   000E06  EF07  F007         	goto	u1751
  6107   000E0A  EF09  F007         	goto	u1750
  6108   000E0E                     u1751:
  6109   000E0E  EFEC  F006         	goto	l212
  6110   000E12                     u1750:
  6111   000E12                     
  6112                           ;TAD_RFID.c: 57:     LATCbits.LATC3 = 1;
  6113   000E12  868B               	bsf	139,3,c	;volatile
  6114                           
  6115                           ;TAD_RFID.c: 58:     LATCbits.LATC2 = 1;
  6116   000E14  848B               	bsf	139,2,c	;volatile
  6117   000E16                     
  6118                           ;TAD_RFID.c: 59:     return ucResult;
  6119   000E16  500A               	movf	MFRC522_Rd@ucResult^0,w,c
  6120   000E18  0012               	return		;funcret
  6121   000E1A                     __end_of_MFRC522_Rd:
  6122                           	callstack 0
  6123                           
  6124 ;; *************** function _delay_us *****************
  6125 ;; Defined at:
  6126 ;;		line 27 in file "TAD_RFID.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  howMany         1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  howMany         1    4[COMRAM] unsigned char 
  6131 ;;  x               1    5[COMRAM] unsigned char 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, prodl, prodh
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1
  6141 ;;      Params:         0       0       0
  6142 ;;      Locals:         2       0       0
  6143 ;;      Temps:          3       0       0
  6144 ;;      Totals:         5       0       0
  6145 ;;Total ram usage:        5 bytes
  6146 ;; Hardware stack levels used: 1
  6147 ;; Hardware stack levels required when called: 3
  6148 ;; This function calls:
  6149 ;;		Nothing
  6150 ;; This function is called by:
  6151 ;;		_MFRC522_Rd
  6152 ;;		_MFRC522_Wr
  6153 ;;		_MFRC522_Reset
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text37
  6158   001166                     __ptext37:
  6159                           	callstack 0
  6160   001166                     _delay_us:
  6161                           	callstack 25
  6162                           
  6163                           ;incstack = 0
  6164                           ;delay_us@howMany stored from wreg
  6165   001166  6E05               	movwf	delay_us@howMany^0,c
  6166   001168                     
  6167                           ;TAD_RFID.c: 28:     char x;;TAD_RFID.c: 29:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  6168   001168  6A06               	clrf	delay_us@x^0,c
  6169   00116A  EFB9  F008         	goto	l2646
  6170   00116E                     l205:
  6171   00116E  0000               	nop	
  6172   001170  2A06               	incf	delay_us@x^0,f,c
  6173   001172                     l2646:
  6174   001172  5005               	movf	delay_us@howMany^0,w,c
  6175   001174  0D10               	mullw	16
  6176   001176  5006               	movf	delay_us@x^0,w,c
  6177   001178  6E02               	movwf	??_delay_us^0,c
  6178   00117A  6A03               	clrf	(??_delay_us+1)^0,c
  6179   00117C  50F3               	movf	243,w,c
  6180   00117E  5C02               	subwf	??_delay_us^0,w,c
  6181   001180  5003               	movf	(??_delay_us+1)^0,w,c
  6182   001182  0A80               	xorlw	128
  6183   001184  6E04               	movwf	(??_delay_us+2)^0,c
  6184   001186  50F4               	movf	244,w,c
  6185   001188  0A80               	xorlw	128
  6186   00118A  5804               	subwfb	(??_delay_us+2)^0,w,c
  6187   00118C  A0D8               	btfss	status,0,c
  6188   00118E  EFCB  F008         	goto	u1661
  6189   001192  EFCD  F008         	goto	u1660
  6190   001196                     u1661:
  6191   001196  EFB7  F008         	goto	l205
  6192   00119A                     u1660:
  6193   00119A  0012               	return		;funcret
  6194   00119C                     __end_of_delay_us:
  6195                           	callstack 0
  6196                           
  6197 ;; *************** function _InitPortDirections *****************
  6198 ;; Defined at:
  6199 ;;		line 19 in file "TAD_RFID.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;		None
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;		None
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		None
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1
  6213 ;;      Params:         0       0       0
  6214 ;;      Locals:         0       0       0
  6215 ;;      Temps:          0       0       0
  6216 ;;      Totals:         0       0       0
  6217 ;;Total ram usage:        0 bytes
  6218 ;; Hardware stack levels used: 1
  6219 ;; Hardware stack levels required when called: 3
  6220 ;; This function calls:
  6221 ;;		Nothing
  6222 ;; This function is called by:
  6223 ;;		_initRFID
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text38
  6228   00133E                     __ptext38:
  6229                           	callstack 0
  6230   00133E                     _InitPortDirections:
  6231                           	callstack 26
  6232   00133E                     
  6233                           ;TAD_RFID.c: 20:     TRISCbits.TRISC0 = 1;
  6234   00133E  8094               	bsf	148,0,c	;volatile
  6235                           
  6236                           ;TAD_RFID.c: 21:     TRISCbits.TRISC1 = 0;
  6237   001340  9294               	bcf	148,1,c	;volatile
  6238                           
  6239                           ;TAD_RFID.c: 22:     TRISCbits.TRISC2 = 0;
  6240   001342  9494               	bcf	148,2,c	;volatile
  6241                           
  6242                           ;TAD_RFID.c: 23:     TRISCbits.TRISC3 = 0;
  6243   001344  9694               	bcf	148,3,c	;volatile
  6244                           
  6245                           ;TAD_RFID.c: 24:     TRISCbits.TRISC4 = 0;
  6246   001346  9894               	bcf	148,4,c	;volatile
  6247   001348  0012               	return		;funcret
  6248   00134A                     __end_of_InitPortDirections:
  6249                           	callstack 0
  6250                           
  6251 ;; *************** function _initPorts *****************
  6252 ;; Defined at:
  6253 ;;		line 57 in file "main.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1
  6267 ;;      Params:         0       0       0
  6268 ;;      Locals:         0       0       0
  6269 ;;      Temps:          0       0       0
  6270 ;;      Totals:         0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used: 1
  6273 ;; Hardware stack levels required when called: 3
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text39
  6282   001364                     __ptext39:
  6283                           	callstack 0
  6284   001364                     _initPorts:
  6285                           	callstack 27
  6286   001364  0E0F               	movlw	15
  6287   001366  6EC1               	movwf	193,c	;volatile
  6288   001368  6A92               	clrf	146,c	;volatile
  6289   00136A  0012               	return		;funcret
  6290   00136C                     __end_of_initPorts:
  6291                           	callstack 0
  6292                           
  6293 ;; *************** function _Terminal_Init *****************
  6294 ;; Defined at:
  6295 ;;		line 11 in file "TAD_TERMINAL.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		wreg, status,2
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1
  6309 ;;      Params:         0       0       0
  6310 ;;      Locals:         0       0       0
  6311 ;;      Temps:          0       0       0
  6312 ;;      Totals:         0       0       0
  6313 ;;Total ram usage:        0 bytes
  6314 ;; Hardware stack levels used: 1
  6315 ;; Hardware stack levels required when called: 3
  6316 ;; This function calls:
  6317 ;;		Nothing
  6318 ;; This function is called by:
  6319 ;;		_main
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text40
  6324   001316                     __ptext40:
  6325                           	callstack 0
  6326   001316                     _Terminal_Init:
  6327                           	callstack 27
  6328   001316                     
  6329                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  6330   001316  0E24               	movlw	36
  6331   001318  6EAC               	movwf	172,c	;volatile
  6332                           
  6333                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  6334   00131A  0E90               	movlw	144
  6335   00131C  6EAB               	movwf	171,c	;volatile
  6336   00131E                     
  6337                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  6338   00131E  68AF               	setf	175,c	;volatile
  6339   001320                     
  6340                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  6341   001320  6AB8               	clrf	184,c	;volatile
  6342   001322                     
  6343                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  6344   001322  6A65               	clrf	_hashtag_pressed^0,c
  6345   001324  0012               	return		;funcret
  6346   001326                     __end_of_Terminal_Init:
  6347                           	callstack 0
  6348                           
  6349 ;; *************** function _TI_Init *****************
  6350 ;; Defined at:
  6351 ;;		line 32 in file "TAD_TIMER.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  counter         1    1[COMRAM] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1
  6365 ;;      Params:         0       0       0
  6366 ;;      Locals:         1       0       0
  6367 ;;      Temps:          0       0       0
  6368 ;;      Totals:         1       0       0
  6369 ;;Total ram usage:        1 bytes
  6370 ;; Hardware stack levels used: 1
  6371 ;; Hardware stack levels required when called: 3
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text41
  6380   00119C                     __ptext41:
  6381                           	callstack 0
  6382   00119C                     _TI_Init:
  6383                           	callstack 27
  6384   00119C                     
  6385                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  6386   00119C  6A02               	clrf	TI_Init@counter^0,c
  6387   00119E                     l3150:
  6388                           
  6389                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  6390   00119E  5002               	movf	TI_Init@counter^0,w,c
  6391   0011A0  0D05               	mullw	5
  6392   0011A2  50F3               	movf	243,w,c
  6393   0011A4  0F84               	addlw	low (_Timers+4)
  6394   0011A6  6ED9               	movwf	fsr2l,c
  6395   0011A8  6ADA               	clrf	fsr2h,c
  6396   0011AA  6ADF               	clrf	indf2,c
  6397   0011AC                     
  6398                           ;TAD_TIMER.c: 35:  }
  6399   0011AC  2A02               	incf	TI_Init@counter^0,f,c
  6400   0011AE  0E03               	movlw	3
  6401   0011B0  6402               	cpfsgt	TI_Init@counter^0,c
  6402   0011B2  EFDD  F008         	goto	u2281
  6403   0011B6  EFDF  F008         	goto	u2280
  6404   0011BA                     u2281:
  6405   0011BA  EFCF  F008         	goto	l3150
  6406   0011BE                     u2280:
  6407   0011BE                     
  6408                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  6409   0011BE  0E82               	movlw	130
  6410   0011C0  6ED5               	movwf	213,c	;volatile
  6411                           
  6412                           ;TAD_TIMER.c: 37:     TMR0=63036;
  6413   0011C2  0EF6               	movlw	246
  6414   0011C4  6ED7               	movwf	215,c	;volatile
  6415   0011C6  0E3C               	movlw	60
  6416   0011C8  6ED6               	movwf	214,c	;volatile
  6417   0011CA                     
  6418                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  6419   0011CA  94F2               	bcf	242,2,c	;volatile
  6420   0011CC                     
  6421                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  6422   0011CC  8AF2               	bsf	242,5,c	;volatile
  6423   0011CE  0012               	return		;funcret
  6424   0011D0                     __end_of_TI_Init:
  6425                           	callstack 0
  6426                           
  6427 ;; *************** function _LowRSI *****************
  6428 ;; Defined at:
  6429 ;;		line 31 in file "main.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		None
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1
  6443 ;;      Params:         0       0       0
  6444 ;;      Locals:         0       0       0
  6445 ;;      Temps:          1       0       0
  6446 ;;      Totals:         1       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; Hardware stack levels required when called: 2
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		Interrupt level 1
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	intcodelo
  6458   000018                     __pintcodelo:
  6459                           	callstack 0
  6460   000018                     _LowRSI:
  6461                           	callstack 19
  6462                           
  6463                           ;incstack = 0
  6464   000018  807A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6465   00001A  CFE0 F001          	movff	bsr,??_LowRSI
  6466   00001E  C001  FFE0         	movff	??_LowRSI,bsr
  6467   000022  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6468   000024  0010               	retfie	
  6469   000026                     __end_of_LowRSI:
  6470                           	callstack 0
  6471                           
  6472 ;; *************** function _HighRSI *****************
  6473 ;; Defined at:
  6474 ;;		line 27 in file "main.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1
  6488 ;;      Params:         0       0       0
  6489 ;;      Locals:         0       0       0
  6490 ;;      Temps:          0       0       0
  6491 ;;      Totals:         0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used: 1
  6494 ;; Hardware stack levels required when called: 1
  6495 ;; This function calls:
  6496 ;;		_RSI_Timer0
  6497 ;; This function is called by:
  6498 ;;		Interrupt level 2
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	intcode
  6503   000008                     __pintcode:
  6504                           	callstack 0
  6505   000008                     _HighRSI:
  6506                           	callstack 19
  6507                           
  6508                           ;incstack = 0
  6509   000008  827A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6510   00000A  EF6C  F009         	goto	int_func
  6511                           
  6512                           	psect	intcode_body
  6513   0012D8                     __pintcode_body:
  6514                           	callstack 19
  6515   0012D8                     int_func:
  6516                           	callstack 19
  6517   0012D8                     
  6518                           ;main.c: 29:      motorTerminal();
  6519   0012D8  A4F2               	btfss	242,2,c	;volatile
  6520   0012DA  EF71  F009         	goto	i2u141_41
  6521   0012DE  EF73  F009         	goto	i2u141_40
  6522   0012E2                     i2u141_41:
  6523   0012E2  EF75  F009         	goto	i2l34
  6524   0012E6                     i2u141_40:
  6525   0012E6  EC55  F009         	call	_RSI_Timer0	;wreg free
  6526   0012EA                     i2l34:
  6527   0012EA  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6528   0012EC  0011               	retfie		f
  6529   0012EE                     __end_of_HighRSI:
  6530                           	callstack 0
  6531                           
  6532 ;; *************** function _RSI_Timer0 *****************
  6533 ;; Defined at:
  6534 ;;		line 25 in file "TAD_TIMER.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      void 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1
  6548 ;;      Params:         0       0       0
  6549 ;;      Locals:         0       0       0
  6550 ;;      Temps:          0       0       0
  6551 ;;      Totals:         0       0       0
  6552 ;;Total ram usage:        0 bytes
  6553 ;; Hardware stack levels used: 1
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_HighRSI
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text44
  6562   0012AA                     __ptext44:
  6563                           	callstack 0
  6564   0012AA                     _RSI_Timer0:
  6565                           	callstack 19
  6566   0012AA                     
  6567                           ;TAD_TIMER.c: 27:     TMR0=63036;
  6568   0012AA  0EF6               	movlw	246
  6569   0012AC  6ED7               	movwf	215,c	;volatile
  6570   0012AE  0E3C               	movlw	60
  6571   0012B0  6ED6               	movwf	214,c	;volatile
  6572   0012B2                     
  6573                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  6574   0012B2  94F2               	bcf	4082,2,c	;volatile
  6575   0012B4                     
  6576                           ;TAD_TIMER.c: 29:     Tics++;
  6577   0012B4  0E01               	movlw	1
  6578   0012B6  2659               	addwf	_Tics^0,f,c	;volatile
  6579   0012B8  0E00               	movlw	0
  6580   0012BA  225A               	addwfc	(_Tics+1)^0,f,c	;volatile
  6581   0012BC  225B               	addwfc	(_Tics+2)^0,f,c	;volatile
  6582   0012BE  225C               	addwfc	(_Tics+3)^0,f,c	;volatile
  6583   0012C0  0012               	return		;funcret
  6584   0012C2                     __end_of_RSI_Timer0:
  6585                           	callstack 0
  6586                           
  6587                           	psect	rparam
  6588   000001                     ___rparam_used  equ	1
  6589   000000                     ___param_bank   equ	0
  6590   000000                     __Lparam        equ	__Lrparam
  6591   000000                     __Hparam        equ	__Hrparam
  6592                           
  6593                           	psect	temp
  6594   00007A                     btemp:
  6595                           	callstack 0
  6596   00007A                     	ds	1
  6597   00007A                     int$flags       set	btemp
  6598   00007B                     wtemp8          set	btemp+1
  6599   00007B                     ttemp5          set	btemp+1
  6600   00007E                     ttemp6          set	btemp+4
  6601   000082                     ttemp7          set	btemp+8
  6602                           
  6603                           	psect	idloc
  6604                           
  6605                           ;Config register IDLOC0 @ 0x200000
  6606                           ;	unspecified, using default values
  6607   200000                     	org	2097152
  6608   200000  FF                 	db	255
  6609                           
  6610                           ;Config register IDLOC1 @ 0x200001
  6611                           ;	unspecified, using default values
  6612   200001                     	org	2097153
  6613   200001  FF                 	db	255
  6614                           
  6615                           ;Config register IDLOC2 @ 0x200002
  6616                           ;	unspecified, using default values
  6617   200002                     	org	2097154
  6618   200002  FF                 	db	255
  6619                           
  6620                           ;Config register IDLOC3 @ 0x200003
  6621                           ;	unspecified, using default values
  6622   200003                     	org	2097155
  6623   200003  FF                 	db	255
  6624                           
  6625                           ;Config register IDLOC4 @ 0x200004
  6626                           ;	unspecified, using default values
  6627   200004                     	org	2097156
  6628   200004  FF                 	db	255
  6629                           
  6630                           ;Config register IDLOC5 @ 0x200005
  6631                           ;	unspecified, using default values
  6632   200005                     	org	2097157
  6633   200005  FF                 	db	255
  6634                           
  6635                           ;Config register IDLOC6 @ 0x200006
  6636                           ;	unspecified, using default values
  6637   200006                     	org	2097158
  6638   200006  FF                 	db	255
  6639                           
  6640                           ;Config register IDLOC7 @ 0x200007
  6641                           ;	unspecified, using default values
  6642   200007                     	org	2097159
  6643   200007  FF                 	db	255
  6644                           
  6645                           	psect	config
  6646                           
  6647                           ; Padding undefined space
  6648   300000                     	org	3145728
  6649   300000  FF                 	db	255
  6650                           
  6651                           ;Config register CONFIG1H @ 0x300001
  6652                           ;	Oscillator
  6653                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  6654                           ;	Fail-Safe Clock Monitor Enable bit
  6655                           ;	FCMEN = 0x0, unprogrammed default
  6656                           ;	Internal/External Oscillator Switchover bit
  6657                           ;	IESO = 0x0, unprogrammed default
  6658   300001                     	org	3145729
  6659   300001  06                 	db	6
  6660                           
  6661                           ;Config register CONFIG2L @ 0x300002
  6662                           ;	Power-up Timer Enable bit
  6663                           ;	PWRT = OFF, PWRT disabled
  6664                           ;	Brown-out Reset Enable bits
  6665                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6666                           ;	Brown-out Reset Voltage bits
  6667                           ;	BORV = 0x3, unprogrammed default
  6668   300002                     	org	3145730
  6669   300002  19                 	db	25
  6670                           
  6671                           ;Config register CONFIG2H @ 0x300003
  6672                           ;	Watchdog Timer Enable bit
  6673                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6674                           ;	Watchdog Timer Postscale Select bits
  6675                           ;	WDTPS = 0xF, unprogrammed default
  6676   300003                     	org	3145731
  6677   300003  1E                 	db	30
  6678                           
  6679                           ; Padding undefined space
  6680   300004                     	org	3145732
  6681   300004  FF                 	db	255
  6682                           
  6683                           ;Config register CONFIG3H @ 0x300005
  6684                           ;	CCP2 MUX bit
  6685                           ;	CCP2MX = 0x1, unprogrammed default
  6686                           ;	PORTB A/D Enable bit
  6687                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6688                           ;	Low-Power Timer1 Oscillator Enable bit
  6689                           ;	LPT1OSC = 0x0, unprogrammed default
  6690                           ;	MCLR Pin Enable bit
  6691                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  6692   300005                     	org	3145733
  6693   300005  01                 	db	1
  6694                           
  6695                           ;Config register CONFIG4L @ 0x300006
  6696                           ;	Stack Full/Underflow Reset Enable bit
  6697                           ;	STVREN = 0x1, unprogrammed default
  6698                           ;	Single-Supply ICSP Enable bit
  6699                           ;	LVP = OFF, Single-Supply ICSP disabled
  6700                           ;	Boot Block Size Select bits
  6701                           ;	BBSIZ = 0x0, unprogrammed default
  6702                           ;	Extended Instruction Set Enable bit
  6703                           ;	XINST = 0x0, unprogrammed default
  6704                           ;	Background Debugger Enable bit
  6705                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  6706   300006                     	org	3145734
  6707   300006  81                 	db	129
  6708                           
  6709                           ; Padding undefined space
  6710   300007                     	org	3145735
  6711   300007  FF                 	db	255
  6712                           
  6713                           ;Config register CONFIG5L @ 0x300008
  6714                           ;	unspecified, using default values
  6715                           ;	Code Protection bit
  6716                           ;	CP0 = 0x1, unprogrammed default
  6717                           ;	Code Protection bit
  6718                           ;	CP1 = 0x1, unprogrammed default
  6719   300008                     	org	3145736
  6720   300008  03                 	db	3
  6721                           
  6722                           ;Config register CONFIG5H @ 0x300009
  6723                           ;	unspecified, using default values
  6724                           ;	Boot Block Code Protection bitProtect Boot
  6725                           ;	CPB = 0x1, unprogrammed default
  6726                           ;	Data EEPROM Code Protection bit
  6727                           ;	CPD = 0x1, unprogrammed default
  6728   300009                     	org	3145737
  6729   300009  C0                 	db	192
  6730                           
  6731                           ;Config register CONFIG6L @ 0x30000A
  6732                           ;	unspecified, using default values
  6733                           ;	Write Protection bit
  6734                           ;	WRT0 = 0x1, unprogrammed default
  6735                           ;	Write Protection bit
  6736                           ;	WRT1 = 0x1, unprogrammed default
  6737   30000A                     	org	3145738
  6738   30000A  03                 	db	3
  6739                           
  6740                           ;Config register CONFIG6H @ 0x30000B
  6741                           ;	unspecified, using default values
  6742                           ;	Configuration Register Write Protection bit
  6743                           ;	WRTC = 0x1, unprogrammed default
  6744                           ;	Boot Block Write Protection bit
  6745                           ;	WRTB = 0x1, unprogrammed default
  6746                           ;	Data EEPROM Write Protection bit
  6747                           ;	WRTD = 0x1, unprogrammed default
  6748   30000B                     	org	3145739
  6749   30000B  E0                 	db	224
  6750                           
  6751                           ;Config register CONFIG7L @ 0x30000C
  6752                           ;	unspecified, using default values
  6753                           ;	Table Read Protection bit
  6754                           ;	EBTR0 = 0x1, unprogrammed default
  6755                           ;	Table Read Protection bit
  6756                           ;	EBTR1 = 0x1, unprogrammed default
  6757   30000C                     	org	3145740
  6758   30000C  03                 	db	3
  6759                           
  6760                           ;Config register CONFIG7H @ 0x30000D
  6761                           ;	unspecified, using default values
  6762                           ;	Boot Block Table Read Protection bit
  6763                           ;	EBTRB = 0x1, unprogrammed default
  6764   30000D                     	org	3145741
  6765   30000D  40                 	db	64
  6766                           tosu	equ	0xFFF
  6767                           tosh	equ	0xFFE
  6768                           tosl	equ	0xFFD
  6769                           stkptr	equ	0xFFC
  6770                           pclatu	equ	0xFFB
  6771                           pclath	equ	0xFFA
  6772                           pcl	equ	0xFF9
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           indf0	equ	0xFEF
  6780                           postinc0	equ	0xFEE
  6781                           postdec0	equ	0xFED
  6782                           preinc0	equ	0xFEC
  6783                           plusw0	equ	0xFEB
  6784                           fsr0h	equ	0xFEA
  6785                           fsr0l	equ	0xFE9
  6786                           wreg	equ	0xFE8
  6787                           indf1	equ	0xFE7
  6788                           postinc1	equ	0xFE6
  6789                           postdec1	equ	0xFE5
  6790                           preinc1	equ	0xFE4
  6791                           plusw1	equ	0xFE3
  6792                           fsr1h	equ	0xFE2
  6793                           fsr1l	equ	0xFE1
  6794                           bsr	equ	0xFE0
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           preinc2	equ	0xFDC
  6799                           plusw2	equ	0xFDB
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8

Data Sizes:
    Strings     273
    Constant    12
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82     121
    BANK0           128      0     102
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S1300$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    S1300$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_2(CODE[5]), STR_4(CODE[28]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), STR_1(CODE[6]), STR_10(CODE[29]), 
		 -> STR_11(CODE[33]), STR_12(CODE[9]), STR_13(CODE[16]), STR_14(CODE[16]), 
		 -> STR_15(CODE[16]), STR_16(CODE[33]), STR_3(CODE[2]), STR_5(CODE[18]), 
		 -> STR_6(CODE[18]), STR_7(CODE[18]), STR_8(CODE[19]), STR_9(CODE[27]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 28
		 -> STR_2(CODE[5]), STR_4(CODE[28]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 28
		 -> STR_2(CODE[5]), STR_4(CODE[28]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_2(CODE[5]), STR_4(CODE[28]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _motorTeclado->_GetTecla
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6305
                            _TI_Init
                      _Terminal_Init
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           6     6      0    4026
                                             76 COMRAM     6     6      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
                _Terminal_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    14     13    2223
                                             51 COMRAM    25    12     13
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    2018
                                             45 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    1884
                                             33 COMRAM    12     9      3
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                12     9      3    1045
                                             21 COMRAM    12     9      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  7     3      4     747
                                             14 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                5     3      2     333
                                              9 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                8     5      3     232
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   7     5      2     182
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     293
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      90
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendString                                  2     0      2      90
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (3) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendChar                                    1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     126
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1679
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1679
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     303
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     561
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Set_Bit                                      2     1      1     561
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     565
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     565
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     250
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           5     5      0     223
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      53
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowRSI                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _HighRSI                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (12) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _initTeclado
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Clear_Bit
     _MFRC522_Rd
     _MFRC522_Set_Bit
     _MFRC522_Wr
     _Terminal_SendString
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
           _read_prec_or_width
           _xtoa
             _pad
               _fputc
               _fputs
                 _fputc

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     102     79.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     82     121     96.0%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     223      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 06 19:06:14 2025

       __end_ofGetTecla@F3221 1EED         ?_Terminal_ReceiveChar 0001                    _RSI_Timer0 12AA  
                 MFRC522_Rd@i 000B                   MFRC522_Wr@i 0010                            l50 136A  
                          l73 11CE                            l83 1272                            l86 1068  
                          l79 0FCE                    _TI_GetTics 101E                            bsr 0FE0  
        ??_InitPortDirections 0002                           l201 1348                           l131 1362  
                         l212 0DD8                           l220 0D72                           l205 116E  
                         l213 0E12                           l221 0D76                           l125 1376  
                         l214 0E18                           l230 1228                           l207 119A  
                         l224 12A8                           l160 075A                           l128 12D6  
                         l233 1330                           l402 03E6                           l410 052A  
                         l227 1314                           l236 133C                           l180 0B06  
                         l172 0ABC                           l309 1352                           l239 101C  
                         l168 10AE                           l178 0B78                           l370 01CC  
                         l550 1300                           l544 1324                           l553 135A  
                         l571 1370                           l547 128E                           l556 137A  
                         l565 0F16                           l398 03BC                           l568 0F78  
                         l589 0AB4                           u560 107C                           u720 12FE  
                         u561 1078                           u721 12F8                           u570 1094  
                         u571 1090                           u580 10AC                           u581 10A8  
                         u590 0B5E                           u726 1300                           _pad 0E1A  
                         wreg 0FE8                ??_MFRC522_Init 0014                          l1313 0C24  
                        l1305 09C8                          l3010 12CC                          l3002 12C2  
                        l1330 08D2                          l3020 1020                          l3012 12CE  
                        l3004 12C6                          l3100 1136                          l1309 0C1C  
                        l3022 1034                          l3014 1252                          l3006 12C8  
                        l1270 1164                          l3102 113E                          l3016 1254  
                        l3200 05B4                          l3008 12CA                          l1360 137C  
                        l3104 1146                          l1337 10F0                          l3026 0FD0  
                        l3018 1270                          l3210 05E4                          l3202 05BA  
                        l3106 115A                          l1291 0E88                          l3028 0FD4  
                        l3220 05FE                          l3212 05E8                          l3204 05CA  
                        l3300 0A46                          l1349 0CCE                          l1357 112C  
                        l1293 0EA2                          l3150 119E                          l3230 0622  
                        l3214 05EC                          l1630 1360                          l3142 0F18  
                        l3302 0A5A                          l3160 11CC                          l3152 11AC  
                        l3144 119C                          l3240 068C                          l3232 0642  
                        l3216 05F2                          l3208 05D4                          l3312 0A8E  
                        l1288 0E4A                          l3400 01D4                          l3320 002A  
                        l3154 11AE                          l3162 134A                          l3242 069E  
                        l3234 0654                          l3218 05F8                          l3170 0536  
                        l3306 0A6A                          l3410 0258                          l3402 0242  
                        l3330 004C                          l3322 002E                          l3156 11BE  
                        l2700 0DE4                          l3164 134E                          l1820 0B68  
                        l1804 0AE0                          l3260 0700                          l3252 06C6  
                        l3244 06A4                          l3236 065C                          l3228 0612  
                        l3180 0566                          l3172 0546                          l1628 135C  
                        l3308 0A7E                          l2620 0C26                          l3500 0416  
                        l3420 027C                          l3404 024C                          l3340 007A  
                        l3332 0056                          l3324 0038                          l3158 11CA  
                        l1830 133E                          l2702 0DF8                          l1806 0B0C  
                        l3262 0706                          l3254 06D6                          l3246 06AC  
                        l3238 066C                          l3190 058E                          l3182 056C  
                        l3174 054A                          l3166 052C                          l3318 0A9E  
                        l2630 0C9E                          l2622 0C36                          l3510 0468  
                        l3502 041E                          l3414 0266                          l3406 0250  
                        l3350 00A6                          l3342 0082                          l3334 005E  
                        l3326 003C                          l2704 0E00                          l2712 0CD2  
                        l1808 0B14                          l1816 0B1C                          l3264 0716  
                        l3256 06F8                          l3248 06B2                          l3192 0592  
                        l3184 0574                          l3176 054E                          l3168 0530  
                        l3272 0724                          l3280 09E6                          l2800 0BB0  
                        l2624 0C46                          l2640 1110                          l3504 044C  
                        l3440 02CC                          l3432 02A6                          l3424 028A  
                        l3416 026E                          l3360 00CC                          l3352 00B0  
                        l3344 008C                          l3336 0068                          l3328 0044  
                        l3520 0514                          l3600 11EE                          l2642 1168  
                        l2706 0E02                          l2730 0D0E                          l2714 0CDA  
                        l2810 1304                          l1818 0B50                          l3266 0718  
                        l3194 059A                          l3186 057A                          l3178 0556  
                        l3290 0A08                          l3282 09EA                          l3274 09CA  
                        l2802 0BCC                          l2626 0C50                          l2634 10F2  
                        l2650 0E28                          l3098 112E                          l3506 0456  
                        l3450 02F2                          l3442 02D6                          l3370 0104  
                        l3362 00D4                          l3354 00B8                          l3346 0094  
                        l3338 0070                          l3602 11F2                          l2644 1170  
                        l2708 0E16                          l2732 0D10                          l2724 0CE2  
                        l2716 0CDC                          l1772 1372                          l1828 136C  
                        l1780 107C                          l3268 071C                          l3196 05AA  
                        l3188 058A                          l2812 1274                          l3292 0A1C  
                        l3284 09FA                          l3276 09CE                          l2804 0BEA  
                        l2628 0C6C                          l2636 10FE                          l2660 0E6A  
                        l2652 0E34                          l2820 077E                          l3516 046E  
                        l3508 045E                          l3460 031E                          l3452 0306  
                        l3436 02BE                          l3428 0298                          l3380 0152  
                        l3372 010E                          l3364 00E2                          l3356 00C2  
                        l3348 009E                          l3604 11F6                          l2646 1172  
                        l2670 0D88                          l2750 0D5A                          l2742 0D2C  
                        l2734 0D16                          l2726 0D02                          l2718 0CDE  
                        l1790 0AB6                          l1782 1082                          l1950 1378  
                        l3294 0A20                          l3286 09FE                          l3278 09E2  
                        l2806 0BF6                          l2638 110C                          l2662 0E96  
                        l2654 0E42                          l2830 07A2                          l2822 078A  
                        l3470 036C                          l3462 032E                          l3446 02DC  
                        l3382 0162                          l3390 01BA                          l3374 0116  
                        l3366 00F6                          l3358 00C4                          l2680 0DAE  
                        l2672 0D8A                          l2664 0D7A                          l2752 0D60  
                        l2744 0D4C                          l2736 0D18                          l2728 0D08  
                        l2808 1292                          l1792 0AC2                          l1784 1094  
                        l1776 106A                          l2816 1356                          l3296 0A34  
                        l3288 0A02                          l2656 0E56                          l2648 0E1A  
                        l2760 08E8                          l2840 07E8                          l2832 07B2  
                        l2824 0796                          l3480 0390                          l3472 0374  
                        l3464 0348                          l3456 0310                          l3448 02E4  
                        l3384 0192                          l3376 0126                          l3368 00FC  
                        l2690 0DC4                          l2682 0DB0                          l2666 0D84  
                        l2754 0D62                          l2746 0D52                          l2738 0D28  
                        l1794 0ACA                          l1786 109A                          l1778 106C  
                        l1946 12EE                          l3298 0A40                          l2658 0E66  
                        l2770 0914                          l2762 08F0                          l2850 083E  
                        l2842 07FC                          l2826 079A                          l2818 075C  
                        l3490 03C6                          l3482 0394                          l3474 037C  
                        l3394 01C2                          l3386 019E                          l3378 0140  
                 _TI_NewTimer 0F7A                          l2692 0DD4                          l2684 0DB6  
                        l2668 0D86                          l2748 0D58                          l1796 0AD2  
                        l1788 10AC                          l2772 0918                          l2764 08F6  
                        l2780 094C                          l2756 08D4                          l2860 0888  
                        l2852 0856                          l2844 080A                          l2836 07BA  
                        l2828 07A0                          l3492 03D6                          l3484 039C  
                        l3476 037E                          l3468 035C                          l3396 01C6  
                        l3388 01B2                          l1990 1322                          l2686 0DBA  
                        l2678 0D8E                          l1798 0ADA                          l2782 0968  
                        l2790 09B2                          l2774 0924                          l2766 08FC  
                        l2758 08D8                          l2854 0874                          l2862 08A0  
                        l2846 0814                          l2838 07D8                          l3494 03E8  
                        l3486 03AC                          l3478 0386                          l3590 11E0  
                        ?_pad 000F                          l1984 1316                          l1992 1364  
                        l2696 0DDA                          l2688 0DC2                          l2880 0FB4  
                        l2872 0F7A                          l2784 097A                          l2776 0926  
                        l2768 090C                          l2848 0822                          l3496 03F0  
                        l3488 03BE                          l3592 11E4                          l3584 11D0  
                        l1986 131E                          l1994 1368                          l2698 0DE0  
                        l2890 1208                          l2882 0FC4                          l2874 0F80  
                        l2794 0B7A                          l2786 098A                          l2778 092C  
                        l2866 08B0                          l3498 0402                          l3594 11E6  
                        l3586 11D8                          l1988 1320                          l2892 1210  
                        l2796 0B82                          l2788 09A4                          l3596 11E8  
                        l3588 11DC                          l2894 1326                          l2886 1200  
                        l3782 0B32                          l2878 0F98                          l2990 0EE6  
                        l2982 0EA4                          l2798 0BA4                          l3598 11EA  
                        l2896 1332                          l2888 1202                          l2984 0EA8  
                        l2992 10B0                          l2986 0EBE                          l2994 10BC  
                        l2988 0EE2                          l2996 10CC                          l2998 10E8  
                        STR_1 1FF3                          STR_2 1FF9                          STR_4 1F4C  
                        STR_5 1F96                          STR_6 1FA8                          STR_7 1F96  
                        STR_8 1F83                          STR_9 1F68                          u2110 0EBE  
                        u2111 0EBA                          u2120 0EDE                          u2130 0F06  
                        u2300 0566                          u2140 0F16                          u2301 0562  
                        u2141 0F12                          _LATA 0F89                          u2310 058A  
                        u2150 10E8                          u2311 0586                          u2127 0ED4  
                        u2151 10E4                          _LATC 0F8B                          u2400 068C  
                        u2320 05AA                          _LATD 0F8C                          u2401 0688  
                        u2321 05A6                          u2137 0EFC                          u2410 069E  
                        u2330 05CA                          u1610 0C36                          u2411 069A  
                        u2331 05C6                          u1611 0C32                          u2420 06C2  
                        u2340 05E4                          u2500 0A5A                          u1620 0C46  
                        u1700 0E96                          u2421 06BE                          u2341 05E0  
                        u2501 0A56                          u1621 0C42                          u1701 0E92  
                        u1710 0DA0                          u2430 06D6                          u2350 060E  
                        u2510 0A7E                          u1630 0C6C                          u1711 0D98  
                        u2431 06D2                          u2351 060A                          u2511 0A7A  
                        u1631 0C68                          u2280 11BE                          u2440 06F8  
                        u2360 0622                          u1640 0C9E                          u2600 032E  
                        u2520 00E2                          u2281 11BA                          u2441 06F4  
                        u2361 061E                          u1641 0C9A                          u2601 032A  
                        u2521 00DE                          u1730 0DD4                          u1810 0D72  
                        u2450 0716                          u2370 0642                          u2290 0546  
                        u1650 112C                          u2610 0348                          u2530 00F6  
                        u1731 0DD0                          u1811 0D6E                          u2451 0712  
                        u2371 063E                          u2291 0542                          u1651 1128  
                        u2611 0344                          u2531 00F2                          u1660 119A  
                        u1740 0DF4                          u2380 0654                          u2460 09E2  
                        u1900 0C1C                          u1820 090C                          u2620 03AC  
                        u2540 0126                          u1661 1196                          u1741 0DEE  
                        u2381 0650                          u2461 09DE                          u1901 0C18  
                        u1821 0908                          u2621 03A8                          u2541 0122  
                        u1750 0E12                          u2390 066C                          u1910 1286  
                        u2470 09FA                          u1670 0E28                          u2630 03BC  
                        u2550 0140                          u1751 0E0E                          u2391 0668  
                        u1911 127E                          u2471 09F6                          u1671 0E24  
                        u2631 03B8                          u2551 013C                          u1728 0DA2  
                        u1808 0D40                          u1760 0CF4                          u2480 0A1C  
                        u1680 0E42                          u1840 0968                          u1920 077E  
                        u2640 03D6                          u2560 0162                          u1761 0CEC  
                        u2481 0A18                          u1681 0E3E                          u1841 0964  
                        u1921 077A                          u2641 03D2                          u2561 015E  
                        u1746 0DF6                          u2490 0A34                          u1690 0E88  
                        u1850 097A                          u1930 07E8                          u2650 03E6  
                        u2570 01B2                          u2491 0A30                          u1691 0E84  
                        u1851 0976                          u1835 0938                          u1931 07E4  
                        u2651 03E2                          u2571 01AE                          u1780 0D28  
                        u1860 098A                          u1940 080A                          u2660 0402  
                        u2580 02F2                          u1781 0D24                          u1861 0986  
                        u1941 0806                          u2661 03FE                          u2581 02EE  
                        u1790 0D3E                          u1918 1288                          u1870 09A4  
                        u1950 083E                          u2670 0412                          u2590 0306  
                        u1791 0D36                          u1871 09A0                          u1951 083A  
                        u2671 040E                          u2591 0302                          u1960 0F94  
                        u1880 09B2                          u1961 0F90                          u1881 09AE  
                        u1778 0CF6                          u1970 0FB4                          u1890 0BA4  
                        u1971 0FB0                          u1891 0BA0                          i1l39 001E  
                        i2l34 12EA                          i2l68 12C0                          _TMR0 0FD6  
                        _Tics 0059                          _Rows 0069                          _dbuf 00C6  
                        _main 11D0                          _prec 005F                          pad@i 0014  
                        pad@p 0011                          fsr0h 0FEA                          fsr1h 0FE2  
                        indf0 0FEF                          fsr2h 0FDA                          fsr0l 0FE9  
                        indf2 0FDF                          fsr1l 0FE1                          fsr2l 0FD9  
                        btemp 007A                          _xtoa 08D4               __end_of_TI_Init 11D0  
                        prodh 0FF4                          prodl 0FF3                          start 0026  
             __end_of_HighRSI 12EE                  ___param_bank 0000               ??_MFRC522_Reset 0011  
                ?_initTeclado 0001                         ??_pad 0013                         ?_main 0001  
                       STR_10 1F2F                         STR_11 1F0E                         STR_12 1FEA  
                       STR_13 1FBA                         STR_14 1FCA                         STR_15 1FDA  
                       STR_16 1EED                         _T0CON 0FD5                         ?_xtoa 0016  
                       _RCREG 0FAE                         _RCSTA 0FAB                  vfpfcnvrt@fmt 0023  
                       _SPBRG 0FAF                         _PORTD 0F83                         _TRISA 0F92  
                       _TRISD 0F95                         _TXREG 0FAD                         _TXSTA 0FAC  
                       _Filas 0077                         _Timer 0078                         _flags 0063  
             motor_RFID@irqEn 0071           read_prec_or_width@c 0006           read_prec_or_width@n 0007  
             motor_RFID@unLen 0061                         _fputc 0C26                         _fputs 10F2  
                _TI_ResetTics 1250                         _tecla 0075               motor_RFID@state 0073  
                       _timer 0079                         pad@fp 000F                         _width 005D  
                       _state 0074                         _putch 137C                         tablat 0FF5  
           _MFRC522_Clear_Bit 1290                         ttemp5 007B                         ttemp6 007E  
                       ttemp7 0082                         status 0FD8                         wtemp8 007B  
             __end_of_sprintf 1166                         xtoa@c 001F                         xtoa@d 0017  
                       xtoa@i 0020                         xtoa@p 001C                         xtoa@w 001D  
          Terminal_SendChar@c 0002            ?_MFRC522_Clear_Bit 0011              __end_of_GetTecla 0B7A  
           _MFRC522_AntennaOn 1326        ??_Terminal_ReceiveChar 0002               __initialization 122A  
                __end_of_main 1200            ?_MFRC522_AntennaOn 0001           ??_MFRC522_Clear_Bit 0012  
                __end_of_xtoa 09CA                   ?_RSI_Timer0 0001                TI_Init@counter 0002  
            _initPortsTeclado 135C                   ?_TI_GetTics 0002                        ??_main 0053  
         ??_MFRC522_AntennaOn 0013                        ??_xtoa 0019                 __activetblptr 0002  
          MFRC522_Rd@ucResult 000A    __end_of_read_prec_or_width 0C26                        _ADCON1 0FC1  
             MFRC522_Wr@value 000C     __end_of_MFRC522_Clear_Bit 12AA                        ?_fputc 0002  
                      ?_fputs 000A                        ?_putch 0001                     ??_TI_Init 0002  
      Terminal_SendString@str 0005                        i2l2416 12D8                        i2l2418 12E6  
                      i2l1960 12B4                        i2l1956 12AA                        i2l1958 12B2  
               vfpfcnvrt@done 002B                        _TMR0IF 7F92                     ??_HighRSI 0001  
   __end_of_MFRC522_AntennaOn 1332              __end_of_delay_us 119C                        _LowRSI 0018  
                      _RowAct 0067                        _Timers 0080                  vfprintf@cfmt 0032  
        __end_of_MFRC522_Init 101E              __end_of_initRFID 1354              motor_RFID@buffer 0094  
          motorTerminal@state 0064          read_prec_or_width@ap 0003                        clear_0 1230  
                      clear_1 123C                        isa$std 0001                        pad@buf 0010  
                      fputc@c 0002                        fputs@c 000C                        fputs@i 000D  
                      fputs@s 000A              __end_of_showMenu 0F7A                  __mediumconst 1EE0  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
                      putch@c 0001              __end_of_vfprintf 10F2         __end_of_Terminal_Init 1326  
                   ??_sprintf 0041                        xtoa@fp 0016                    __accesstop 0080  
     __end_of__initialization 1242               delay_us@howMany 0005                 ___rparam_used 0001  
                ??_MFRC522_Rd 0007                  ??_MFRC522_Wr 000D            _MFRC522_AntennaOff 1332  
              __pcstackCOMRAM 0001           ?_MFRC522_AntennaOff 0001                 __end_of_fputc 0CD0  
               __end_of_fputs 112E                 __end_of_putch 137E          TI_NewTimer@Comptador 0004  
           __end_of_ReadFilas 1378              MFRC522_Rd@ucAddr 0009             ??_MFRC522_Set_Bit 0012  
          __end_of_MFRC522_Rd 0E1A            __end_of_MFRC522_Wr 0D78                     ?_GetTecla 0001  
                     ??_fputc 0005                       ??_fputs 000C          ??_MFRC522_AntennaOff 0014  
                ?_TI_NewTimer 0002                       ??_putch 0002                    __pbssBANK0 0080  
       __end_of_motorTerminal 0AB6        TI_NewTimer@TimerHandle 0002                       ?_LowRSI 0001  
            MFRC522_Wr@ucAddr 000F       TI_ResetTics@TimerHandle 0002                 _writeColumnas 106A  
                     _BAUDCON 0FB8                     ?_delay_us 0001                    ??_GetTecla 0002  
           _Terminal_SendChar 1354                       _TI_Init 119C            ?_Terminal_SendChar 0001  
    __end_of_initPortsTeclado 1364                     ?_initRFID 0001                       _HighRSI 0008  
                     _Columns 0068             motor_RFID@TagType 006C           ??_Terminal_SendChar 0002  
                     __Hparam 0000                       __Lparam 0000                     ?_showMenu 0001  
                ??_RSI_Timer0 0001                ?_writeColumnas 0001                     ?_vfprintf 002E  
                ??_TI_GetTics 0006             motor_RFID@allZero 006A                       __pcinit 122A  
       __end_of_MFRC522_Reset 122A                       __ramtop 0200             motor_RFID@_status 006D  
                     __ptext0 11D0                       __ptext1 002A                       __ptext2 112E  
                     __ptext3 10B0                       __ptext4 075C                       __ptext5 08D4  
                     __ptext6 0E1A                       __ptext7 10F2                       __ptext8 0C26  
                     __ptext9 137C                 ?_motorTeclado 0001             __end_of_initPorts 136C  
       read_prec_or_width@fmt 0002     __end_of_Terminal_SendChar 135C             motor_RFID@waitIRq 0070  
                  ??_delay_us 0002                       _sprintf 112E                  _MFRC522_Init 0FD0  
              __pintcode_body 12D8          end_of_initialization 1242                   motor_RFID@i 006E  
                 motor_RFID@n 006F                    ??_initRFID 0014            __end_of_RSI_Timer0 12C2  
                     fputc@fp 0004                 __Lmediumconst 1EE0                       int_func 12D8  
                     fputs@fp 000B            __end_of_TI_GetTics 106A            _read_prec_or_width 0B7A  
           __end_of_vfpfcnvrt 08D4                    ??_showMenu 0007                    _motor_RFID 002A  
                     postdec2 0FDD           ?_read_prec_or_width 0002                       postinc0 0FEE  
                     postinc1 0FE6                       postinc2 0FDE              vfpfcnvrt@convarg 0027  
               GetTecla@F3221 1EE1                    ??_vfprintf 0032                ??_motorTeclado 0012  
                   _PORTBbits 0F81                     _PORTCbits 0F82           _Terminal_SendString 0EA4  
       TI_GetTics@TimerHandle 000E                     _TRISBbits 0F93                     _TRISCbits 0F94  
        ??_read_prec_or_width 0004          ?_Terminal_SendString 0005             MFRC522_Rd@Address 0008  
             ??_writeColumnas 0002                __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 1302  
             _MFRC522_Set_Bit 1302                   vfpfcnvrt@ap 0024                   vfpfcnvrt@cp 002C  
                 vfpfcnvrt@fp 0022                     _ColumnAct 0066           start_initialization 122A  
                   _ReadFilas 1372                   __end_of_pad 0EA4  __end_of_Terminal_TXAvailable 1290  
       ??_Terminal_SendString 0007                      ??_LowRSI 0001                   vfprintf@fmt 002F  
                 ?_motor_RFID 0001                 ??_initTeclado 0005                   __pbssCOMRAM 0053  
                  ?_ReadFilas 0001             MFRC522_Wr@Address 000E                 ?_TI_ResetTics 0001  
                    ?_TI_Init 0001             ?_initPortsTeclado 0001                      ?_HighRSI 0001  
        __end_of_motorTeclado 075C            ??_initPortsTeclado 0002       __end_of_MFRC522_Set_Bit 1316  
         motor_RFID@fifoLevel 0051           MFRC522_Set_Bit@addr 0012           MFRC522_Set_Bit@mask 0011  
                   __pintcode 0008                 __pmediumconst 1EE0    __end_of_InitPortDirections 134A  
                 __pintcodelo 0018                   __smallconst 1EE0           __end_of_initTeclado 12D8  
              ??_TI_ResetTics 0002                     _initPorts 1364                      ?_sprintf 0034  
               _Terminal_Init 1316          _Terminal_RXAvailable 12EE                      _LATBbits 0F8A  
                    _LATCbits 0F8B                     delay_us@x 0006               _hashtag_pressed 0065  
                    i2u141_40 12E6                      i2u141_41 12E2                      _PIR1bits 0F9E  
       motor_RFID@lastBitsVal 0052                     _vfpfcnvrt 075C          _Terminal_TXAvailable 1274  
                GetTecla@fila 0011                   ??_ReadFilas 0002                      _GetTecla 0AB6  
__end_of_Terminal_ReceiveChar 137C                    ?_initPorts 0001                 motor_RFID@UID 0053  
              ?_Terminal_Init 0001                      _Columnas 0076         ?_Terminal_RXAvailable 0001  
               _motorTerminal 09CA              ?_MFRC522_Set_Bit 0011                      __Hrparam 0000  
       MFRC522_Clear_Bit@addr 0013         MFRC522_Clear_Bit@mask 0011                    vfprintf@ap 0031  
                    __Lrparam 0000                    vfprintf@fp 002E                   _initTeclado 12C2  
       ?_Terminal_TXAvailable 0002                    ?_vfpfcnvrt 0022            motor_RFID@checksum 006B  
                  sprintf@fmt 0035                      _delay_us 1166                      __ptext10 0B7A  
                    __ptext11 09CA                      __ptext20 12EE                      __ptext12 0F18  
                    __ptext21 052C                      __ptext13 0EA4                      __ptext30 1200  
                    __ptext22 106A                      __ptext14 1274                      __ptext31 1326  
                    __ptext23 136C                      __ptext15 1354                      __ptext40 1316  
                    __ptext32 1302                      __ptext24 1250                      __ptext16 12C2  
                    __ptext41 119C                      __ptext33 1332                      __ptext25 101E  
                    __ptext17 135C                      __ptext34 1290                      __ptext26 1372  
                    __ptext18 0F7A                      __ptext35 0CD0                      __ptext27 0AB6  
                    __ptext19 1378                      __ptext44 12AA                      __ptext36 0D78  
                    __ptext28 134A                      __ptext37 1166                      __ptext29 0FD0  
                    __ptext38 133E                      __ptext39 1364                 ??_TI_NewTimer 0003  
                    _initRFID 134A                ?_motorTerminal 0001                    _MFRC522_Rd 0D78  
                  _MFRC522_Wr 0CD0                  ??_motor_RFID 004D                      isa$xinst 0000  
                    _showMenu 0F18          __end_of_TI_ResetTics 1274                      int$flags 007A  
       __end_of_writeColumnas 10B0            motor_RFID@substate 0072                      _vfprintf 10B0  
               _MFRC522_Reset 1200                  _motorTeclado 052C                    _INTCONbits 0FF2  
             ??_Terminal_Init 0002     TI_GetTics@CopiaTicsActual 000A                   ??_initPorts 0002  
      ??_Terminal_RXAvailable 0002             _hashtag_pressed3s 136C   __end_of_Terminal_SendString 0F18  
          __end_of_motor_RFID 052C                      intlevel1 0000                      intlevel2 0000  
                   sprintf@ap 0041            ?_hashtag_pressed3s 0001           __end_of_TI_NewTimer 0FD0  
         ??_hashtag_pressed3s 0002        ??_Terminal_TXAvailable 0004          _Terminal_ReceiveChar 1378  
                 ??_vfpfcnvrt 0025                ?_MFRC522_Reset 0001                      sprintf@f 0042  
      motor_RFID@backBitsCalc 004F                      sprintf@s 0034     __end_of_hashtag_pressed3s 1372  
          _InitPortDirections 133E    __end_of_MFRC522_AntennaOff 133E                 ?_MFRC522_Init 0001  
             ??_motorTerminal 0007           ?_InitPortDirections 0001               GetTecla@columna 0010  
                 ?_MFRC522_Rd 0001                   ?_MFRC522_Wr 000C                GetTecla@keymap 0004  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 06 19:38:48 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    67                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 05/12/2024 GMT
    71                           ; 
    72                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4321 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000FE0                     bsr             equ	4064
   105   000FE9                     fsr0            equ	4073
   106   000FEA                     fsr0h           equ	4074
   107   000FE9                     fsr0l           equ	4073
   108   000FE1                     fsr1            equ	4065
   109   000FE2                     fsr1h           equ	4066
   110   000FE1                     fsr1l           equ	4065
   111   000FD9                     fsr2            equ	4057
   112   000FDA                     fsr2h           equ	4058
   113   000FD9                     fsr2l           equ	4057
   114   000FEF                     indf0           equ	4079
   115   000FE7                     indf1           equ	4071
   116   000FDF                     indf2           equ	4063
   117   000FF2                     intcon          equ	4082
   118   000000                     nvmcon          equ	0
   119   000FF9                     pcl             equ	4089
   120   000FFA                     pclath          equ	4090
   121   000FFB                     pclatu          equ	4091
   122   000FEB                     plusw0          equ	4075
   123   000FE3                     plusw1          equ	4067
   124   000FDB                     plusw2          equ	4059
   125   000FED                     postdec0        equ	4077
   126   000FE5                     postdec1        equ	4069
   127   000FDD                     postdec2        equ	4061
   128   000FEE                     postinc0        equ	4078
   129   000FE6                     postinc1        equ	4070
   130   000FDE                     postinc2        equ	4062
   131   000FEC                     preinc0         equ	4076
   132   000FE4                     preinc1         equ	4068
   133   000FDC                     preinc2         equ	4060
   134   000FF3                     prod            equ	4083
   135   000FF4                     prodh           equ	4084
   136   000FF3                     prodl           equ	4083
   137   000FD8                     status          equ	4056
   138   000FF5                     tablat          equ	4085
   139   000FF6                     tblptr          equ	4086
   140   000FF7                     tblptrh         equ	4087
   141   000FF6                     tblptrl         equ	4086
   142   000FF8                     tblptru         equ	4088
   143   000FFD                     tosl            equ	4093
   144   000FE8                     wreg            equ	4072
   145   000F80                     PORTA           equ	3968	;# 
   146   000F81                     PORTB           equ	3969	;# 
   147   000F82                     PORTC           equ	3970	;# 
   148   000F83                     PORTD           equ	3971	;# 
   149   000F84                     PORTE           equ	3972	;# 
   150   000F89                     LATA            equ	3977	;# 
   151   000F8A                     LATB            equ	3978	;# 
   152   000F8B                     LATC            equ	3979	;# 
   153   000F8C                     LATD            equ	3980	;# 
   154   000F8D                     LATE            equ	3981	;# 
   155   000F92                     TRISA           equ	3986	;# 
   156   000F92                     DDRA            equ	3986	;# 
   157   000F93                     TRISB           equ	3987	;# 
   158   000F93                     DDRB            equ	3987	;# 
   159   000F94                     TRISC           equ	3988	;# 
   160   000F94                     DDRC            equ	3988	;# 
   161   000F95                     TRISD           equ	3989	;# 
   162   000F95                     DDRD            equ	3989	;# 
   163   000F96                     TRISE           equ	3990	;# 
   164   000F96                     DDRE            equ	3990	;# 
   165   000F9B                     OSCTUNE         equ	3995	;# 
   166   000F9D                     PIE1            equ	3997	;# 
   167   000F9E                     PIR1            equ	3998	;# 
   168   000F9F                     IPR1            equ	3999	;# 
   169   000FA0                     PIE2            equ	4000	;# 
   170   000FA1                     PIR2            equ	4001	;# 
   171   000FA2                     IPR2            equ	4002	;# 
   172   000FA6                     EECON1          equ	4006	;# 
   173   000FA7                     EECON2          equ	4007	;# 
   174   000FA8                     EEDATA          equ	4008	;# 
   175   000FA9                     EEADR           equ	4009	;# 
   176   000FAB                     RCSTA           equ	4011	;# 
   177   000FAB                     RCSTA1          equ	4011	;# 
   178   000FAC                     TXSTA           equ	4012	;# 
   179   000FAC                     TXSTA1          equ	4012	;# 
   180   000FAD                     TXREG           equ	4013	;# 
   181   000FAD                     TXREG1          equ	4013	;# 
   182   000FAE                     RCREG           equ	4014	;# 
   183   000FAE                     RCREG1          equ	4014	;# 
   184   000FAF                     SPBRG           equ	4015	;# 
   185   000FAF                     SPBRG1          equ	4015	;# 
   186   000FB0                     SPBRGH          equ	4016	;# 
   187   000FB1                     T3CON           equ	4017	;# 
   188   000FB2                     TMR3            equ	4018	;# 
   189   000FB2                     TMR3L           equ	4018	;# 
   190   000FB3                     TMR3H           equ	4019	;# 
   191   000FB4                     CMCON           equ	4020	;# 
   192   000FB5                     CVRCON          equ	4021	;# 
   193   000FB6                     ECCP1AS         equ	4022	;# 
   194   000FB7                     ECCP1DEL        equ	4023	;# 
   195   000FB7                     PWM1CON         equ	4023	;# 
   196   000FB8                     BAUDCON         equ	4024	;# 
   197   000FB8                     BAUDCTL         equ	4024	;# 
   198   000FBA                     CCP2CON         equ	4026	;# 
   199   000FBB                     CCPR2           equ	4027	;# 
   200   000FBB                     CCPR2L          equ	4027	;# 
   201   000FBC                     CCPR2H          equ	4028	;# 
   202   000FBD                     CCP1CON         equ	4029	;# 
   203   000FBD                     ECCP1CON        equ	4029	;# 
   204   000FBE                     CCPR1           equ	4030	;# 
   205   000FBE                     CCPR1L          equ	4030	;# 
   206   000FBF                     CCPR1H          equ	4031	;# 
   207   000FC0                     ADCON2          equ	4032	;# 
   208   000FC1                     ADCON1          equ	4033	;# 
   209   000FC2                     ADCON0          equ	4034	;# 
   210   000FC3                     ADRES           equ	4035	;# 
   211   000FC3                     ADRESL          equ	4035	;# 
   212   000FC4                     ADRESH          equ	4036	;# 
   213   000FC5                     SSPCON2         equ	4037	;# 
   214   000FC6                     SSPCON1         equ	4038	;# 
   215   000FC7                     SSPSTAT         equ	4039	;# 
   216   000FC8                     SSPADD          equ	4040	;# 
   217   000FC9                     SSPBUF          equ	4041	;# 
   218   000FCA                     T2CON           equ	4042	;# 
   219   000FCB                     PR2             equ	4043	;# 
   220   000FCB                     MEMCON          equ	4043	;# 
   221   000FCC                     TMR2            equ	4044	;# 
   222   000FCD                     T1CON           equ	4045	;# 
   223   000FCE                     TMR1            equ	4046	;# 
   224   000FCE                     TMR1L           equ	4046	;# 
   225   000FCF                     TMR1H           equ	4047	;# 
   226   000FD0                     RCON            equ	4048	;# 
   227   000FD1                     WDTCON          equ	4049	;# 
   228   000FD2                     HLVDCON         equ	4050	;# 
   229   000FD2                     LVDCON          equ	4050	;# 
   230   000FD3                     OSCCON          equ	4051	;# 
   231   000FD5                     T0CON           equ	4053	;# 
   232   000FD6                     TMR0            equ	4054	;# 
   233   000FD6                     TMR0L           equ	4054	;# 
   234   000FD7                     TMR0H           equ	4055	;# 
   235   000FD8                     STATUS          equ	4056	;# 
   236   000FD9                     FSR2            equ	4057	;# 
   237   000FD9                     FSR2L           equ	4057	;# 
   238   000FDA                     FSR2H           equ	4058	;# 
   239   000FDB                     PLUSW2          equ	4059	;# 
   240   000FDC                     PREINC2         equ	4060	;# 
   241   000FDD                     POSTDEC2        equ	4061	;# 
   242   000FDE                     POSTINC2        equ	4062	;# 
   243   000FDF                     INDF2           equ	4063	;# 
   244   000FE0                     BSR             equ	4064	;# 
   245   000FE1                     FSR1            equ	4065	;# 
   246   000FE1                     FSR1L           equ	4065	;# 
   247   000FE2                     FSR1H           equ	4066	;# 
   248   000FE3                     PLUSW1          equ	4067	;# 
   249   000FE4                     PREINC1         equ	4068	;# 
   250   000FE5                     POSTDEC1        equ	4069	;# 
   251   000FE6                     POSTINC1        equ	4070	;# 
   252   000FE7                     INDF1           equ	4071	;# 
   253   000FE8                     WREG            equ	4072	;# 
   254   000FE9                     FSR0            equ	4073	;# 
   255   000FE9                     FSR0L           equ	4073	;# 
   256   000FEA                     FSR0H           equ	4074	;# 
   257   000FEB                     PLUSW0          equ	4075	;# 
   258   000FEC                     PREINC0         equ	4076	;# 
   259   000FED                     POSTDEC0        equ	4077	;# 
   260   000FEE                     POSTINC0        equ	4078	;# 
   261   000FEF                     INDF0           equ	4079	;# 
   262   000FF0                     INTCON3         equ	4080	;# 
   263   000FF1                     INTCON2         equ	4081	;# 
   264   000FF2                     INTCON          equ	4082	;# 
   265   000FF3                     PROD            equ	4083	;# 
   266   000FF3                     PRODL           equ	4083	;# 
   267   000FF4                     PRODH           equ	4084	;# 
   268   000FF5                     TABLAT          equ	4085	;# 
   269   000FF6                     TBLPTR          equ	4086	;# 
   270   000FF6                     TBLPTRL         equ	4086	;# 
   271   000FF7                     TBLPTRH         equ	4087	;# 
   272   000FF8                     TBLPTRU         equ	4088	;# 
   273   000FF9                     PCLAT           equ	4089	;# 
   274   000FF9                     PC              equ	4089	;# 
   275   000FF9                     PCL             equ	4089	;# 
   276   000FFA                     PCLATH          equ	4090	;# 
   277   000FFB                     PCLATU          equ	4091	;# 
   278   000FFC                     STKPTR          equ	4092	;# 
   279   000FFD                     TOS             equ	4093	;# 
   280   000FFD                     TOSL            equ	4093	;# 
   281   000FFE                     TOSH            equ	4094	;# 
   282   000FFF                     TOSU            equ	4095	;# 
   283   000F80                     PORTA           equ	3968	;# 
   284   000F81                     PORTB           equ	3969	;# 
   285   000F82                     PORTC           equ	3970	;# 
   286   000F83                     PORTD           equ	3971	;# 
   287   000F84                     PORTE           equ	3972	;# 
   288   000F89                     LATA            equ	3977	;# 
   289   000F8A                     LATB            equ	3978	;# 
   290   000F8B                     LATC            equ	3979	;# 
   291   000F8C                     LATD            equ	3980	;# 
   292   000F8D                     LATE            equ	3981	;# 
   293   000F92                     TRISA           equ	3986	;# 
   294   000F92                     DDRA            equ	3986	;# 
   295   000F93                     TRISB           equ	3987	;# 
   296   000F93                     DDRB            equ	3987	;# 
   297   000F94                     TRISC           equ	3988	;# 
   298   000F94                     DDRC            equ	3988	;# 
   299   000F95                     TRISD           equ	3989	;# 
   300   000F95                     DDRD            equ	3989	;# 
   301   000F96                     TRISE           equ	3990	;# 
   302   000F96                     DDRE            equ	3990	;# 
   303   000F9B                     OSCTUNE         equ	3995	;# 
   304   000F9D                     PIE1            equ	3997	;# 
   305   000F9E                     PIR1            equ	3998	;# 
   306   000F9F                     IPR1            equ	3999	;# 
   307   000FA0                     PIE2            equ	4000	;# 
   308   000FA1                     PIR2            equ	4001	;# 
   309   000FA2                     IPR2            equ	4002	;# 
   310   000FA6                     EECON1          equ	4006	;# 
   311   000FA7                     EECON2          equ	4007	;# 
   312   000FA8                     EEDATA          equ	4008	;# 
   313   000FA9                     EEADR           equ	4009	;# 
   314   000FAB                     RCSTA           equ	4011	;# 
   315   000FAB                     RCSTA1          equ	4011	;# 
   316   000FAC                     TXSTA           equ	4012	;# 
   317   000FAC                     TXSTA1          equ	4012	;# 
   318   000FAD                     TXREG           equ	4013	;# 
   319   000FAD                     TXREG1          equ	4013	;# 
   320   000FAE                     RCREG           equ	4014	;# 
   321   000FAE                     RCREG1          equ	4014	;# 
   322   000FAF                     SPBRG           equ	4015	;# 
   323   000FAF                     SPBRG1          equ	4015	;# 
   324   000FB0                     SPBRGH          equ	4016	;# 
   325   000FB1                     T3CON           equ	4017	;# 
   326   000FB2                     TMR3            equ	4018	;# 
   327   000FB2                     TMR3L           equ	4018	;# 
   328   000FB3                     TMR3H           equ	4019	;# 
   329   000FB4                     CMCON           equ	4020	;# 
   330   000FB5                     CVRCON          equ	4021	;# 
   331   000FB6                     ECCP1AS         equ	4022	;# 
   332   000FB7                     ECCP1DEL        equ	4023	;# 
   333   000FB7                     PWM1CON         equ	4023	;# 
   334   000FB8                     BAUDCON         equ	4024	;# 
   335   000FB8                     BAUDCTL         equ	4024	;# 
   336   000FBA                     CCP2CON         equ	4026	;# 
   337   000FBB                     CCPR2           equ	4027	;# 
   338   000FBB                     CCPR2L          equ	4027	;# 
   339   000FBC                     CCPR2H          equ	4028	;# 
   340   000FBD                     CCP1CON         equ	4029	;# 
   341   000FBD                     ECCP1CON        equ	4029	;# 
   342   000FBE                     CCPR1           equ	4030	;# 
   343   000FBE                     CCPR1L          equ	4030	;# 
   344   000FBF                     CCPR1H          equ	4031	;# 
   345   000FC0                     ADCON2          equ	4032	;# 
   346   000FC1                     ADCON1          equ	4033	;# 
   347   000FC2                     ADCON0          equ	4034	;# 
   348   000FC3                     ADRES           equ	4035	;# 
   349   000FC3                     ADRESL          equ	4035	;# 
   350   000FC4                     ADRESH          equ	4036	;# 
   351   000FC5                     SSPCON2         equ	4037	;# 
   352   000FC6                     SSPCON1         equ	4038	;# 
   353   000FC7                     SSPSTAT         equ	4039	;# 
   354   000FC8                     SSPADD          equ	4040	;# 
   355   000FC9                     SSPBUF          equ	4041	;# 
   356   000FCA                     T2CON           equ	4042	;# 
   357   000FCB                     PR2             equ	4043	;# 
   358   000FCB                     MEMCON          equ	4043	;# 
   359   000FCC                     TMR2            equ	4044	;# 
   360   000FCD                     T1CON           equ	4045	;# 
   361   000FCE                     TMR1            equ	4046	;# 
   362   000FCE                     TMR1L           equ	4046	;# 
   363   000FCF                     TMR1H           equ	4047	;# 
   364   000FD0                     RCON            equ	4048	;# 
   365   000FD1                     WDTCON          equ	4049	;# 
   366   000FD2                     HLVDCON         equ	4050	;# 
   367   000FD2                     LVDCON          equ	4050	;# 
   368   000FD3                     OSCCON          equ	4051	;# 
   369   000FD5                     T0CON           equ	4053	;# 
   370   000FD6                     TMR0            equ	4054	;# 
   371   000FD6                     TMR0L           equ	4054	;# 
   372   000FD7                     TMR0H           equ	4055	;# 
   373   000FD8                     STATUS          equ	4056	;# 
   374   000FD9                     FSR2            equ	4057	;# 
   375   000FD9                     FSR2L           equ	4057	;# 
   376   000FDA                     FSR2H           equ	4058	;# 
   377   000FDB                     PLUSW2          equ	4059	;# 
   378   000FDC                     PREINC2         equ	4060	;# 
   379   000FDD                     POSTDEC2        equ	4061	;# 
   380   000FDE                     POSTINC2        equ	4062	;# 
   381   000FDF                     INDF2           equ	4063	;# 
   382   000FE0                     BSR             equ	4064	;# 
   383   000FE1                     FSR1            equ	4065	;# 
   384   000FE1                     FSR1L           equ	4065	;# 
   385   000FE2                     FSR1H           equ	4066	;# 
   386   000FE3                     PLUSW1          equ	4067	;# 
   387   000FE4                     PREINC1         equ	4068	;# 
   388   000FE5                     POSTDEC1        equ	4069	;# 
   389   000FE6                     POSTINC1        equ	4070	;# 
   390   000FE7                     INDF1           equ	4071	;# 
   391   000FE8                     WREG            equ	4072	;# 
   392   000FE9                     FSR0            equ	4073	;# 
   393   000FE9                     FSR0L           equ	4073	;# 
   394   000FEA                     FSR0H           equ	4074	;# 
   395   000FEB                     PLUSW0          equ	4075	;# 
   396   000FEC                     PREINC0         equ	4076	;# 
   397   000FED                     POSTDEC0        equ	4077	;# 
   398   000FEE                     POSTINC0        equ	4078	;# 
   399   000FEF                     INDF0           equ	4079	;# 
   400   000FF0                     INTCON3         equ	4080	;# 
   401   000FF1                     INTCON2         equ	4081	;# 
   402   000FF2                     INTCON          equ	4082	;# 
   403   000FF3                     PROD            equ	4083	;# 
   404   000FF3                     PRODL           equ	4083	;# 
   405   000FF4                     PRODH           equ	4084	;# 
   406   000FF5                     TABLAT          equ	4085	;# 
   407   000FF6                     TBLPTR          equ	4086	;# 
   408   000FF6                     TBLPTRL         equ	4086	;# 
   409   000FF7                     TBLPTRH         equ	4087	;# 
   410   000FF8                     TBLPTRU         equ	4088	;# 
   411   000FF9                     PCLAT           equ	4089	;# 
   412   000FF9                     PC              equ	4089	;# 
   413   000FF9                     PCL             equ	4089	;# 
   414   000FFA                     PCLATH          equ	4090	;# 
   415   000FFB                     PCLATU          equ	4091	;# 
   416   000FFC                     STKPTR          equ	4092	;# 
   417   000FFD                     TOS             equ	4093	;# 
   418   000FFD                     TOSL            equ	4093	;# 
   419   000FFE                     TOSH            equ	4094	;# 
   420   000FFF                     TOSU            equ	4095	;# 
   421   000F80                     PORTA           equ	3968	;# 
   422   000F81                     PORTB           equ	3969	;# 
   423   000F82                     PORTC           equ	3970	;# 
   424   000F83                     PORTD           equ	3971	;# 
   425   000F84                     PORTE           equ	3972	;# 
   426   000F89                     LATA            equ	3977	;# 
   427   000F8A                     LATB            equ	3978	;# 
   428   000F8B                     LATC            equ	3979	;# 
   429   000F8C                     LATD            equ	3980	;# 
   430   000F8D                     LATE            equ	3981	;# 
   431   000F92                     TRISA           equ	3986	;# 
   432   000F92                     DDRA            equ	3986	;# 
   433   000F93                     TRISB           equ	3987	;# 
   434   000F93                     DDRB            equ	3987	;# 
   435   000F94                     TRISC           equ	3988	;# 
   436   000F94                     DDRC            equ	3988	;# 
   437   000F95                     TRISD           equ	3989	;# 
   438   000F95                     DDRD            equ	3989	;# 
   439   000F96                     TRISE           equ	3990	;# 
   440   000F96                     DDRE            equ	3990	;# 
   441   000F9B                     OSCTUNE         equ	3995	;# 
   442   000F9D                     PIE1            equ	3997	;# 
   443   000F9E                     PIR1            equ	3998	;# 
   444   000F9F                     IPR1            equ	3999	;# 
   445   000FA0                     PIE2            equ	4000	;# 
   446   000FA1                     PIR2            equ	4001	;# 
   447   000FA2                     IPR2            equ	4002	;# 
   448   000FA6                     EECON1          equ	4006	;# 
   449   000FA7                     EECON2          equ	4007	;# 
   450   000FA8                     EEDATA          equ	4008	;# 
   451   000FA9                     EEADR           equ	4009	;# 
   452   000FAB                     RCSTA           equ	4011	;# 
   453   000FAB                     RCSTA1          equ	4011	;# 
   454   000FAC                     TXSTA           equ	4012	;# 
   455   000FAC                     TXSTA1          equ	4012	;# 
   456   000FAD                     TXREG           equ	4013	;# 
   457   000FAD                     TXREG1          equ	4013	;# 
   458   000FAE                     RCREG           equ	4014	;# 
   459   000FAE                     RCREG1          equ	4014	;# 
   460   000FAF                     SPBRG           equ	4015	;# 
   461   000FAF                     SPBRG1          equ	4015	;# 
   462   000FB0                     SPBRGH          equ	4016	;# 
   463   000FB1                     T3CON           equ	4017	;# 
   464   000FB2                     TMR3            equ	4018	;# 
   465   000FB2                     TMR3L           equ	4018	;# 
   466   000FB3                     TMR3H           equ	4019	;# 
   467   000FB4                     CMCON           equ	4020	;# 
   468   000FB5                     CVRCON          equ	4021	;# 
   469   000FB6                     ECCP1AS         equ	4022	;# 
   470   000FB7                     ECCP1DEL        equ	4023	;# 
   471   000FB7                     PWM1CON         equ	4023	;# 
   472   000FB8                     BAUDCON         equ	4024	;# 
   473   000FB8                     BAUDCTL         equ	4024	;# 
   474   000FBA                     CCP2CON         equ	4026	;# 
   475   000FBB                     CCPR2           equ	4027	;# 
   476   000FBB                     CCPR2L          equ	4027	;# 
   477   000FBC                     CCPR2H          equ	4028	;# 
   478   000FBD                     CCP1CON         equ	4029	;# 
   479   000FBD                     ECCP1CON        equ	4029	;# 
   480   000FBE                     CCPR1           equ	4030	;# 
   481   000FBE                     CCPR1L          equ	4030	;# 
   482   000FBF                     CCPR1H          equ	4031	;# 
   483   000FC0                     ADCON2          equ	4032	;# 
   484   000FC1                     ADCON1          equ	4033	;# 
   485   000FC2                     ADCON0          equ	4034	;# 
   486   000FC3                     ADRES           equ	4035	;# 
   487   000FC3                     ADRESL          equ	4035	;# 
   488   000FC4                     ADRESH          equ	4036	;# 
   489   000FC5                     SSPCON2         equ	4037	;# 
   490   000FC6                     SSPCON1         equ	4038	;# 
   491   000FC7                     SSPSTAT         equ	4039	;# 
   492   000FC8                     SSPADD          equ	4040	;# 
   493   000FC9                     SSPBUF          equ	4041	;# 
   494   000FCA                     T2CON           equ	4042	;# 
   495   000FCB                     PR2             equ	4043	;# 
   496   000FCB                     MEMCON          equ	4043	;# 
   497   000FCC                     TMR2            equ	4044	;# 
   498   000FCD                     T1CON           equ	4045	;# 
   499   000FCE                     TMR1            equ	4046	;# 
   500   000FCE                     TMR1L           equ	4046	;# 
   501   000FCF                     TMR1H           equ	4047	;# 
   502   000FD0                     RCON            equ	4048	;# 
   503   000FD1                     WDTCON          equ	4049	;# 
   504   000FD2                     HLVDCON         equ	4050	;# 
   505   000FD2                     LVDCON          equ	4050	;# 
   506   000FD3                     OSCCON          equ	4051	;# 
   507   000FD5                     T0CON           equ	4053	;# 
   508   000FD6                     TMR0            equ	4054	;# 
   509   000FD6                     TMR0L           equ	4054	;# 
   510   000FD7                     TMR0H           equ	4055	;# 
   511   000FD8                     STATUS          equ	4056	;# 
   512   000FD9                     FSR2            equ	4057	;# 
   513   000FD9                     FSR2L           equ	4057	;# 
   514   000FDA                     FSR2H           equ	4058	;# 
   515   000FDB                     PLUSW2          equ	4059	;# 
   516   000FDC                     PREINC2         equ	4060	;# 
   517   000FDD                     POSTDEC2        equ	4061	;# 
   518   000FDE                     POSTINC2        equ	4062	;# 
   519   000FDF                     INDF2           equ	4063	;# 
   520   000FE0                     BSR             equ	4064	;# 
   521   000FE1                     FSR1            equ	4065	;# 
   522   000FE1                     FSR1L           equ	4065	;# 
   523   000FE2                     FSR1H           equ	4066	;# 
   524   000FE3                     PLUSW1          equ	4067	;# 
   525   000FE4                     PREINC1         equ	4068	;# 
   526   000FE5                     POSTDEC1        equ	4069	;# 
   527   000FE6                     POSTINC1        equ	4070	;# 
   528   000FE7                     INDF1           equ	4071	;# 
   529   000FE8                     WREG            equ	4072	;# 
   530   000FE9                     FSR0            equ	4073	;# 
   531   000FE9                     FSR0L           equ	4073	;# 
   532   000FEA                     FSR0H           equ	4074	;# 
   533   000FEB                     PLUSW0          equ	4075	;# 
   534   000FEC                     PREINC0         equ	4076	;# 
   535   000FED                     POSTDEC0        equ	4077	;# 
   536   000FEE                     POSTINC0        equ	4078	;# 
   537   000FEF                     INDF0           equ	4079	;# 
   538   000FF0                     INTCON3         equ	4080	;# 
   539   000FF1                     INTCON2         equ	4081	;# 
   540   000FF2                     INTCON          equ	4082	;# 
   541   000FF3                     PROD            equ	4083	;# 
   542   000FF3                     PRODL           equ	4083	;# 
   543   000FF4                     PRODH           equ	4084	;# 
   544   000FF5                     TABLAT          equ	4085	;# 
   545   000FF6                     TBLPTR          equ	4086	;# 
   546   000FF6                     TBLPTRL         equ	4086	;# 
   547   000FF7                     TBLPTRH         equ	4087	;# 
   548   000FF8                     TBLPTRU         equ	4088	;# 
   549   000FF9                     PCLAT           equ	4089	;# 
   550   000FF9                     PC              equ	4089	;# 
   551   000FF9                     PCL             equ	4089	;# 
   552   000FFA                     PCLATH          equ	4090	;# 
   553   000FFB                     PCLATU          equ	4091	;# 
   554   000FFC                     STKPTR          equ	4092	;# 
   555   000FFD                     TOS             equ	4093	;# 
   556   000FFD                     TOSL            equ	4093	;# 
   557   000FFE                     TOSH            equ	4094	;# 
   558   000FFF                     TOSU            equ	4095	;# 
   559   000F80                     PORTA           equ	3968	;# 
   560   000F81                     PORTB           equ	3969	;# 
   561   000F82                     PORTC           equ	3970	;# 
   562   000F83                     PORTD           equ	3971	;# 
   563   000F84                     PORTE           equ	3972	;# 
   564   000F89                     LATA            equ	3977	;# 
   565   000F8A                     LATB            equ	3978	;# 
   566   000F8B                     LATC            equ	3979	;# 
   567   000F8C                     LATD            equ	3980	;# 
   568   000F8D                     LATE            equ	3981	;# 
   569   000F92                     TRISA           equ	3986	;# 
   570   000F92                     DDRA            equ	3986	;# 
   571   000F93                     TRISB           equ	3987	;# 
   572   000F93                     DDRB            equ	3987	;# 
   573   000F94                     TRISC           equ	3988	;# 
   574   000F94                     DDRC            equ	3988	;# 
   575   000F95                     TRISD           equ	3989	;# 
   576   000F95                     DDRD            equ	3989	;# 
   577   000F96                     TRISE           equ	3990	;# 
   578   000F96                     DDRE            equ	3990	;# 
   579   000F9B                     OSCTUNE         equ	3995	;# 
   580   000F9D                     PIE1            equ	3997	;# 
   581   000F9E                     PIR1            equ	3998	;# 
   582   000F9F                     IPR1            equ	3999	;# 
   583   000FA0                     PIE2            equ	4000	;# 
   584   000FA1                     PIR2            equ	4001	;# 
   585   000FA2                     IPR2            equ	4002	;# 
   586   000FA6                     EECON1          equ	4006	;# 
   587   000FA7                     EECON2          equ	4007	;# 
   588   000FA8                     EEDATA          equ	4008	;# 
   589   000FA9                     EEADR           equ	4009	;# 
   590   000FAB                     RCSTA           equ	4011	;# 
   591   000FAB                     RCSTA1          equ	4011	;# 
   592   000FAC                     TXSTA           equ	4012	;# 
   593   000FAC                     TXSTA1          equ	4012	;# 
   594   000FAD                     TXREG           equ	4013	;# 
   595   000FAD                     TXREG1          equ	4013	;# 
   596   000FAE                     RCREG           equ	4014	;# 
   597   000FAE                     RCREG1          equ	4014	;# 
   598   000FAF                     SPBRG           equ	4015	;# 
   599   000FAF                     SPBRG1          equ	4015	;# 
   600   000FB0                     SPBRGH          equ	4016	;# 
   601   000FB1                     T3CON           equ	4017	;# 
   602   000FB2                     TMR3            equ	4018	;# 
   603   000FB2                     TMR3L           equ	4018	;# 
   604   000FB3                     TMR3H           equ	4019	;# 
   605   000FB4                     CMCON           equ	4020	;# 
   606   000FB5                     CVRCON          equ	4021	;# 
   607   000FB6                     ECCP1AS         equ	4022	;# 
   608   000FB7                     ECCP1DEL        equ	4023	;# 
   609   000FB7                     PWM1CON         equ	4023	;# 
   610   000FB8                     BAUDCON         equ	4024	;# 
   611   000FB8                     BAUDCTL         equ	4024	;# 
   612   000FBA                     CCP2CON         equ	4026	;# 
   613   000FBB                     CCPR2           equ	4027	;# 
   614   000FBB                     CCPR2L          equ	4027	;# 
   615   000FBC                     CCPR2H          equ	4028	;# 
   616   000FBD                     CCP1CON         equ	4029	;# 
   617   000FBD                     ECCP1CON        equ	4029	;# 
   618   000FBE                     CCPR1           equ	4030	;# 
   619   000FBE                     CCPR1L          equ	4030	;# 
   620   000FBF                     CCPR1H          equ	4031	;# 
   621   000FC0                     ADCON2          equ	4032	;# 
   622   000FC1                     ADCON1          equ	4033	;# 
   623   000FC2                     ADCON0          equ	4034	;# 
   624   000FC3                     ADRES           equ	4035	;# 
   625   000FC3                     ADRESL          equ	4035	;# 
   626   000FC4                     ADRESH          equ	4036	;# 
   627   000FC5                     SSPCON2         equ	4037	;# 
   628   000FC6                     SSPCON1         equ	4038	;# 
   629   000FC7                     SSPSTAT         equ	4039	;# 
   630   000FC8                     SSPADD          equ	4040	;# 
   631   000FC9                     SSPBUF          equ	4041	;# 
   632   000FCA                     T2CON           equ	4042	;# 
   633   000FCB                     PR2             equ	4043	;# 
   634   000FCB                     MEMCON          equ	4043	;# 
   635   000FCC                     TMR2            equ	4044	;# 
   636   000FCD                     T1CON           equ	4045	;# 
   637   000FCE                     TMR1            equ	4046	;# 
   638   000FCE                     TMR1L           equ	4046	;# 
   639   000FCF                     TMR1H           equ	4047	;# 
   640   000FD0                     RCON            equ	4048	;# 
   641   000FD1                     WDTCON          equ	4049	;# 
   642   000FD2                     HLVDCON         equ	4050	;# 
   643   000FD2                     LVDCON          equ	4050	;# 
   644   000FD3                     OSCCON          equ	4051	;# 
   645   000FD5                     T0CON           equ	4053	;# 
   646   000FD6                     TMR0            equ	4054	;# 
   647   000FD6                     TMR0L           equ	4054	;# 
   648   000FD7                     TMR0H           equ	4055	;# 
   649   000FD8                     STATUS          equ	4056	;# 
   650   000FD9                     FSR2            equ	4057	;# 
   651   000FD9                     FSR2L           equ	4057	;# 
   652   000FDA                     FSR2H           equ	4058	;# 
   653   000FDB                     PLUSW2          equ	4059	;# 
   654   000FDC                     PREINC2         equ	4060	;# 
   655   000FDD                     POSTDEC2        equ	4061	;# 
   656   000FDE                     POSTINC2        equ	4062	;# 
   657   000FDF                     INDF2           equ	4063	;# 
   658   000FE0                     BSR             equ	4064	;# 
   659   000FE1                     FSR1            equ	4065	;# 
   660   000FE1                     FSR1L           equ	4065	;# 
   661   000FE2                     FSR1H           equ	4066	;# 
   662   000FE3                     PLUSW1          equ	4067	;# 
   663   000FE4                     PREINC1         equ	4068	;# 
   664   000FE5                     POSTDEC1        equ	4069	;# 
   665   000FE6                     POSTINC1        equ	4070	;# 
   666   000FE7                     INDF1           equ	4071	;# 
   667   000FE8                     WREG            equ	4072	;# 
   668   000FE9                     FSR0            equ	4073	;# 
   669   000FE9                     FSR0L           equ	4073	;# 
   670   000FEA                     FSR0H           equ	4074	;# 
   671   000FEB                     PLUSW0          equ	4075	;# 
   672   000FEC                     PREINC0         equ	4076	;# 
   673   000FED                     POSTDEC0        equ	4077	;# 
   674   000FEE                     POSTINC0        equ	4078	;# 
   675   000FEF                     INDF0           equ	4079	;# 
   676   000FF0                     INTCON3         equ	4080	;# 
   677   000FF1                     INTCON2         equ	4081	;# 
   678   000FF2                     INTCON          equ	4082	;# 
   679   000FF3                     PROD            equ	4083	;# 
   680   000FF3                     PRODL           equ	4083	;# 
   681   000FF4                     PRODH           equ	4084	;# 
   682   000FF5                     TABLAT          equ	4085	;# 
   683   000FF6                     TBLPTR          equ	4086	;# 
   684   000FF6                     TBLPTRL         equ	4086	;# 
   685   000FF7                     TBLPTRH         equ	4087	;# 
   686   000FF8                     TBLPTRU         equ	4088	;# 
   687   000FF9                     PCLAT           equ	4089	;# 
   688   000FF9                     PC              equ	4089	;# 
   689   000FF9                     PCL             equ	4089	;# 
   690   000FFA                     PCLATH          equ	4090	;# 
   691   000FFB                     PCLATU          equ	4091	;# 
   692   000FFC                     STKPTR          equ	4092	;# 
   693   000FFD                     TOS             equ	4093	;# 
   694   000FFD                     TOSL            equ	4093	;# 
   695   000FFE                     TOSH            equ	4094	;# 
   696   000FFF                     TOSU            equ	4095	;# 
   697   000F80                     PORTA           equ	3968	;# 
   698   000F81                     PORTB           equ	3969	;# 
   699   000F82                     PORTC           equ	3970	;# 
   700   000F83                     PORTD           equ	3971	;# 
   701   000F84                     PORTE           equ	3972	;# 
   702   000F89                     LATA            equ	3977	;# 
   703   000F8A                     LATB            equ	3978	;# 
   704   000F8B                     LATC            equ	3979	;# 
   705   000F8C                     LATD            equ	3980	;# 
   706   000F8D                     LATE            equ	3981	;# 
   707   000F92                     TRISA           equ	3986	;# 
   708   000F92                     DDRA            equ	3986	;# 
   709   000F93                     TRISB           equ	3987	;# 
   710   000F93                     DDRB            equ	3987	;# 
   711   000F94                     TRISC           equ	3988	;# 
   712   000F94                     DDRC            equ	3988	;# 
   713   000F95                     TRISD           equ	3989	;# 
   714   000F95                     DDRD            equ	3989	;# 
   715   000F96                     TRISE           equ	3990	;# 
   716   000F96                     DDRE            equ	3990	;# 
   717   000F9B                     OSCTUNE         equ	3995	;# 
   718   000F9D                     PIE1            equ	3997	;# 
   719   000F9E                     PIR1            equ	3998	;# 
   720   000F9F                     IPR1            equ	3999	;# 
   721   000FA0                     PIE2            equ	4000	;# 
   722   000FA1                     PIR2            equ	4001	;# 
   723   000FA2                     IPR2            equ	4002	;# 
   724   000FA6                     EECON1          equ	4006	;# 
   725   000FA7                     EECON2          equ	4007	;# 
   726   000FA8                     EEDATA          equ	4008	;# 
   727   000FA9                     EEADR           equ	4009	;# 
   728   000FAB                     RCSTA           equ	4011	;# 
   729   000FAB                     RCSTA1          equ	4011	;# 
   730   000FAC                     TXSTA           equ	4012	;# 
   731   000FAC                     TXSTA1          equ	4012	;# 
   732   000FAD                     TXREG           equ	4013	;# 
   733   000FAD                     TXREG1          equ	4013	;# 
   734   000FAE                     RCREG           equ	4014	;# 
   735   000FAE                     RCREG1          equ	4014	;# 
   736   000FAF                     SPBRG           equ	4015	;# 
   737   000FAF                     SPBRG1          equ	4015	;# 
   738   000FB0                     SPBRGH          equ	4016	;# 
   739   000FB1                     T3CON           equ	4017	;# 
   740   000FB2                     TMR3            equ	4018	;# 
   741   000FB2                     TMR3L           equ	4018	;# 
   742   000FB3                     TMR3H           equ	4019	;# 
   743   000FB4                     CMCON           equ	4020	;# 
   744   000FB5                     CVRCON          equ	4021	;# 
   745   000FB6                     ECCP1AS         equ	4022	;# 
   746   000FB7                     ECCP1DEL        equ	4023	;# 
   747   000FB7                     PWM1CON         equ	4023	;# 
   748   000FB8                     BAUDCON         equ	4024	;# 
   749   000FB8                     BAUDCTL         equ	4024	;# 
   750   000FBA                     CCP2CON         equ	4026	;# 
   751   000FBB                     CCPR2           equ	4027	;# 
   752   000FBB                     CCPR2L          equ	4027	;# 
   753   000FBC                     CCPR2H          equ	4028	;# 
   754   000FBD                     CCP1CON         equ	4029	;# 
   755   000FBD                     ECCP1CON        equ	4029	;# 
   756   000FBE                     CCPR1           equ	4030	;# 
   757   000FBE                     CCPR1L          equ	4030	;# 
   758   000FBF                     CCPR1H          equ	4031	;# 
   759   000FC0                     ADCON2          equ	4032	;# 
   760   000FC1                     ADCON1          equ	4033	;# 
   761   000FC2                     ADCON0          equ	4034	;# 
   762   000FC3                     ADRES           equ	4035	;# 
   763   000FC3                     ADRESL          equ	4035	;# 
   764   000FC4                     ADRESH          equ	4036	;# 
   765   000FC5                     SSPCON2         equ	4037	;# 
   766   000FC6                     SSPCON1         equ	4038	;# 
   767   000FC7                     SSPSTAT         equ	4039	;# 
   768   000FC8                     SSPADD          equ	4040	;# 
   769   000FC9                     SSPBUF          equ	4041	;# 
   770   000FCA                     T2CON           equ	4042	;# 
   771   000FCB                     PR2             equ	4043	;# 
   772   000FCB                     MEMCON          equ	4043	;# 
   773   000FCC                     TMR2            equ	4044	;# 
   774   000FCD                     T1CON           equ	4045	;# 
   775   000FCE                     TMR1            equ	4046	;# 
   776   000FCE                     TMR1L           equ	4046	;# 
   777   000FCF                     TMR1H           equ	4047	;# 
   778   000FD0                     RCON            equ	4048	;# 
   779   000FD1                     WDTCON          equ	4049	;# 
   780   000FD2                     HLVDCON         equ	4050	;# 
   781   000FD2                     LVDCON          equ	4050	;# 
   782   000FD3                     OSCCON          equ	4051	;# 
   783   000FD5                     T0CON           equ	4053	;# 
   784   000FD6                     TMR0            equ	4054	;# 
   785   000FD6                     TMR0L           equ	4054	;# 
   786   000FD7                     TMR0H           equ	4055	;# 
   787   000FD8                     STATUS          equ	4056	;# 
   788   000FD9                     FSR2            equ	4057	;# 
   789   000FD9                     FSR2L           equ	4057	;# 
   790   000FDA                     FSR2H           equ	4058	;# 
   791   000FDB                     PLUSW2          equ	4059	;# 
   792   000FDC                     PREINC2         equ	4060	;# 
   793   000FDD                     POSTDEC2        equ	4061	;# 
   794   000FDE                     POSTINC2        equ	4062	;# 
   795   000FDF                     INDF2           equ	4063	;# 
   796   000FE0                     BSR             equ	4064	;# 
   797   000FE1                     FSR1            equ	4065	;# 
   798   000FE1                     FSR1L           equ	4065	;# 
   799   000FE2                     FSR1H           equ	4066	;# 
   800   000FE3                     PLUSW1          equ	4067	;# 
   801   000FE4                     PREINC1         equ	4068	;# 
   802   000FE5                     POSTDEC1        equ	4069	;# 
   803   000FE6                     POSTINC1        equ	4070	;# 
   804   000FE7                     INDF1           equ	4071	;# 
   805   000FE8                     WREG            equ	4072	;# 
   806   000FE9                     FSR0            equ	4073	;# 
   807   000FE9                     FSR0L           equ	4073	;# 
   808   000FEA                     FSR0H           equ	4074	;# 
   809   000FEB                     PLUSW0          equ	4075	;# 
   810   000FEC                     PREINC0         equ	4076	;# 
   811   000FED                     POSTDEC0        equ	4077	;# 
   812   000FEE                     POSTINC0        equ	4078	;# 
   813   000FEF                     INDF0           equ	4079	;# 
   814   000FF0                     INTCON3         equ	4080	;# 
   815   000FF1                     INTCON2         equ	4081	;# 
   816   000FF2                     INTCON          equ	4082	;# 
   817   000FF3                     PROD            equ	4083	;# 
   818   000FF3                     PRODL           equ	4083	;# 
   819   000FF4                     PRODH           equ	4084	;# 
   820   000FF5                     TABLAT          equ	4085	;# 
   821   000FF6                     TBLPTR          equ	4086	;# 
   822   000FF6                     TBLPTRL         equ	4086	;# 
   823   000FF7                     TBLPTRH         equ	4087	;# 
   824   000FF8                     TBLPTRU         equ	4088	;# 
   825   000FF9                     PCLAT           equ	4089	;# 
   826   000FF9                     PC              equ	4089	;# 
   827   000FF9                     PCL             equ	4089	;# 
   828   000FFA                     PCLATH          equ	4090	;# 
   829   000FFB                     PCLATU          equ	4091	;# 
   830   000FFC                     STKPTR          equ	4092	;# 
   831   000FFD                     TOS             equ	4093	;# 
   832   000FFD                     TOSL            equ	4093	;# 
   833   000FFE                     TOSH            equ	4094	;# 
   834   000FFF                     TOSU            equ	4095	;# 
   835   000F80                     PORTA           equ	3968	;# 
   836   000F81                     PORTB           equ	3969	;# 
   837   000F82                     PORTC           equ	3970	;# 
   838   000F83                     PORTD           equ	3971	;# 
   839   000F84                     PORTE           equ	3972	;# 
   840   000F89                     LATA            equ	3977	;# 
   841   000F8A                     LATB            equ	3978	;# 
   842   000F8B                     LATC            equ	3979	;# 
   843   000F8C                     LATD            equ	3980	;# 
   844   000F8D                     LATE            equ	3981	;# 
   845   000F92                     TRISA           equ	3986	;# 
   846   000F92                     DDRA            equ	3986	;# 
   847   000F93                     TRISB           equ	3987	;# 
   848   000F93                     DDRB            equ	3987	;# 
   849   000F94                     TRISC           equ	3988	;# 
   850   000F94                     DDRC            equ	3988	;# 
   851   000F95                     TRISD           equ	3989	;# 
   852   000F95                     DDRD            equ	3989	;# 
   853   000F96                     TRISE           equ	3990	;# 
   854   000F96                     DDRE            equ	3990	;# 
   855   000F9B                     OSCTUNE         equ	3995	;# 
   856   000F9D                     PIE1            equ	3997	;# 
   857   000F9E                     PIR1            equ	3998	;# 
   858   000F9F                     IPR1            equ	3999	;# 
   859   000FA0                     PIE2            equ	4000	;# 
   860   000FA1                     PIR2            equ	4001	;# 
   861   000FA2                     IPR2            equ	4002	;# 
   862   000FA6                     EECON1          equ	4006	;# 
   863   000FA7                     EECON2          equ	4007	;# 
   864   000FA8                     EEDATA          equ	4008	;# 
   865   000FA9                     EEADR           equ	4009	;# 
   866   000FAB                     RCSTA           equ	4011	;# 
   867   000FAB                     RCSTA1          equ	4011	;# 
   868   000FAC                     TXSTA           equ	4012	;# 
   869   000FAC                     TXSTA1          equ	4012	;# 
   870   000FAD                     TXREG           equ	4013	;# 
   871   000FAD                     TXREG1          equ	4013	;# 
   872   000FAE                     RCREG           equ	4014	;# 
   873   000FAE                     RCREG1          equ	4014	;# 
   874   000FAF                     SPBRG           equ	4015	;# 
   875   000FAF                     SPBRG1          equ	4015	;# 
   876   000FB0                     SPBRGH          equ	4016	;# 
   877   000FB1                     T3CON           equ	4017	;# 
   878   000FB2                     TMR3            equ	4018	;# 
   879   000FB2                     TMR3L           equ	4018	;# 
   880   000FB3                     TMR3H           equ	4019	;# 
   881   000FB4                     CMCON           equ	4020	;# 
   882   000FB5                     CVRCON          equ	4021	;# 
   883   000FB6                     ECCP1AS         equ	4022	;# 
   884   000FB7                     ECCP1DEL        equ	4023	;# 
   885   000FB7                     PWM1CON         equ	4023	;# 
   886   000FB8                     BAUDCON         equ	4024	;# 
   887   000FB8                     BAUDCTL         equ	4024	;# 
   888   000FBA                     CCP2CON         equ	4026	;# 
   889   000FBB                     CCPR2           equ	4027	;# 
   890   000FBB                     CCPR2L          equ	4027	;# 
   891   000FBC                     CCPR2H          equ	4028	;# 
   892   000FBD                     CCP1CON         equ	4029	;# 
   893   000FBD                     ECCP1CON        equ	4029	;# 
   894   000FBE                     CCPR1           equ	4030	;# 
   895   000FBE                     CCPR1L          equ	4030	;# 
   896   000FBF                     CCPR1H          equ	4031	;# 
   897   000FC0                     ADCON2          equ	4032	;# 
   898   000FC1                     ADCON1          equ	4033	;# 
   899   000FC2                     ADCON0          equ	4034	;# 
   900   000FC3                     ADRES           equ	4035	;# 
   901   000FC3                     ADRESL          equ	4035	;# 
   902   000FC4                     ADRESH          equ	4036	;# 
   903   000FC5                     SSPCON2         equ	4037	;# 
   904   000FC6                     SSPCON1         equ	4038	;# 
   905   000FC7                     SSPSTAT         equ	4039	;# 
   906   000FC8                     SSPADD          equ	4040	;# 
   907   000FC9                     SSPBUF          equ	4041	;# 
   908   000FCA                     T2CON           equ	4042	;# 
   909   000FCB                     PR2             equ	4043	;# 
   910   000FCB                     MEMCON          equ	4043	;# 
   911   000FCC                     TMR2            equ	4044	;# 
   912   000FCD                     T1CON           equ	4045	;# 
   913   000FCE                     TMR1            equ	4046	;# 
   914   000FCE                     TMR1L           equ	4046	;# 
   915   000FCF                     TMR1H           equ	4047	;# 
   916   000FD0                     RCON            equ	4048	;# 
   917   000FD1                     WDTCON          equ	4049	;# 
   918   000FD2                     HLVDCON         equ	4050	;# 
   919   000FD2                     LVDCON          equ	4050	;# 
   920   000FD3                     OSCCON          equ	4051	;# 
   921   000FD5                     T0CON           equ	4053	;# 
   922   000FD6                     TMR0            equ	4054	;# 
   923   000FD6                     TMR0L           equ	4054	;# 
   924   000FD7                     TMR0H           equ	4055	;# 
   925   000FD8                     STATUS          equ	4056	;# 
   926   000FD9                     FSR2            equ	4057	;# 
   927   000FD9                     FSR2L           equ	4057	;# 
   928   000FDA                     FSR2H           equ	4058	;# 
   929   000FDB                     PLUSW2          equ	4059	;# 
   930   000FDC                     PREINC2         equ	4060	;# 
   931   000FDD                     POSTDEC2        equ	4061	;# 
   932   000FDE                     POSTINC2        equ	4062	;# 
   933   000FDF                     INDF2           equ	4063	;# 
   934   000FE0                     BSR             equ	4064	;# 
   935   000FE1                     FSR1            equ	4065	;# 
   936   000FE1                     FSR1L           equ	4065	;# 
   937   000FE2                     FSR1H           equ	4066	;# 
   938   000FE3                     PLUSW1          equ	4067	;# 
   939   000FE4                     PREINC1         equ	4068	;# 
   940   000FE5                     POSTDEC1        equ	4069	;# 
   941   000FE6                     POSTINC1        equ	4070	;# 
   942   000FE7                     INDF1           equ	4071	;# 
   943   000FE8                     WREG            equ	4072	;# 
   944   000FE9                     FSR0            equ	4073	;# 
   945   000FE9                     FSR0L           equ	4073	;# 
   946   000FEA                     FSR0H           equ	4074	;# 
   947   000FEB                     PLUSW0          equ	4075	;# 
   948   000FEC                     PREINC0         equ	4076	;# 
   949   000FED                     POSTDEC0        equ	4077	;# 
   950   000FEE                     POSTINC0        equ	4078	;# 
   951   000FEF                     INDF0           equ	4079	;# 
   952   000FF0                     INTCON3         equ	4080	;# 
   953   000FF1                     INTCON2         equ	4081	;# 
   954   000FF2                     INTCON          equ	4082	;# 
   955   000FF3                     PROD            equ	4083	;# 
   956   000FF3                     PRODL           equ	4083	;# 
   957   000FF4                     PRODH           equ	4084	;# 
   958   000FF5                     TABLAT          equ	4085	;# 
   959   000FF6                     TBLPTR          equ	4086	;# 
   960   000FF6                     TBLPTRL         equ	4086	;# 
   961   000FF7                     TBLPTRH         equ	4087	;# 
   962   000FF8                     TBLPTRU         equ	4088	;# 
   963   000FF9                     PCLAT           equ	4089	;# 
   964   000FF9                     PC              equ	4089	;# 
   965   000FF9                     PCL             equ	4089	;# 
   966   000FFA                     PCLATH          equ	4090	;# 
   967   000FFB                     PCLATU          equ	4091	;# 
   968   000FFC                     STKPTR          equ	4092	;# 
   969   000FFD                     TOS             equ	4093	;# 
   970   000FFD                     TOSL            equ	4093	;# 
   971   000FFE                     TOSH            equ	4094	;# 
   972   000FFF                     TOSU            equ	4095	;# 
   973                           
   974                           	psect	mediumconst
   975   001EDC                     __pmediumconst:
   976                           	callstack 0
   977   001EDC  00                 	db	0
   978   001EDD                     GetTecla@F3221:
   979                           	callstack 0
   980   001EDD  01                 	db	1
   981   001EDE  02                 	db	2
   982   001EDF  03                 	db	3
   983   001EE0  04                 	db	4
   984   001EE1  05                 	db	5
   985   001EE2  06                 	db	6
   986   001EE3  07                 	db	7
   987   001EE4  08                 	db	8
   988   001EE5  09                 	db	9
   989   001EE6  0A                 	db	10
   990   001EE7  00                 	db	0
   991   001EE8  0B                 	db	11
   992   001EE9                     __end_ofGetTecla@F3221:
   993                           	callstack 0
   994   007F92                     _TMR0IF         set	32658
   995   000FD6                     _TMR0           set	4054
   996   000FAE                     _RCREG          set	4014
   997   000FAD                     _TXREG          set	4013
   998   000F9E                     _PIR1bits       set	3998
   999   000FB8                     _BAUDCON        set	4024
  1000   000FAF                     _SPBRG          set	4015
  1001   000FAB                     _RCSTA          set	4011
  1002   000FAC                     _TXSTA          set	4012
  1003   000F81                     _PORTBbits      set	3969
  1004   000F8A                     _LATBbits       set	3978
  1005   000F93                     _TRISBbits      set	3987
  1006   000F82                     _PORTCbits      set	3970
  1007   000F8B                     _LATCbits       set	3979
  1008   000F94                     _TRISCbits      set	3988
  1009   000F8C                     _LATD           set	3980
  1010   000F95                     _TRISD          set	3989
  1011   000F83                     _PORTD          set	3971
  1012   000FD5                     _T0CON          set	4053
  1013   000F8B                     _LATC           set	3979
  1014   000F92                     _TRISA          set	3986
  1015   000FC1                     _ADCON1         set	4033
  1016   000F89                     _LATA           set	3977
  1017   000FF2                     _INTCONbits     set	4082
  1018   001EE9                     STR_17:
  1019   001EE9  45                 	db	69	;'E'
  1020   001EEA  52                 	db	82	;'R'
  1021   001EEB  52                 	db	82	;'R'
  1022   001EEC  4F                 	db	79	;'O'
  1023   001EED  52                 	db	82	;'R'
  1024   001EEE  2E                 	db	46
  1025   001EEF  20                 	db	32
  1026   001EF0  56                 	db	86	;'V'
  1027   001EF1  61                 	db	97	;'a'
  1028   001EF2  6C                 	db	108	;'l'
  1029   001EF3  6F                 	db	111	;'o'
  1030   001EF4  72                 	db	114	;'r'
  1031   001EF5  20                 	db	32
  1032   001EF6  69                 	db	105	;'i'
  1033   001EF7  6E                 	db	110	;'n'
  1034   001EF8  74                 	db	116	;'t'
  1035   001EF9  72                 	db	114	;'r'
  1036   001EFA  6F                 	db	111	;'o'
  1037   001EFB  64                 	db	100	;'d'
  1038   001EFC  75                 	db	117	;'u'
  1039   001EFD  69                 	db	105	;'i'
  1040   001EFE  74                 	db	116	;'t'
  1041   001EFF  20                 	db	32
  1042   001F00  65                 	db	101	;'e'
  1043   001F01  72                 	db	114	;'r'
  1044   001F02  72                 	db	114	;'r'
  1045   001F03  6F                 	db	111	;'o'
  1046   001F04  6E                 	db	110	;'n'
  1047   001F05  69                 	db	105	;'i'
  1048   001F06  2E                 	db	46
  1049   001F07  0D                 	db	13
  1050   001F08  0A                 	db	10
  1051   001F09  00                 	db	0
  1052   001F0A                     STR_12:
  1053   001F0A  09                 	db	9
  1054   001F0B  33                 	db	51	;'3'
  1055   001F0C  2E                 	db	46
  1056   001F0D  20                 	db	32
  1057   001F0E  4D                 	db	77	;'M'
  1058   001F0F  6F                 	db	111	;'o'
  1059   001F10  64                 	db	100	;'d'
  1060   001F11  69                 	db	105	;'i'
  1061   001F12  66                 	db	102	;'f'
  1062   001F13  69                 	db	105	;'i'
  1063   001F14  63                 	db	99	;'c'
  1064   001F15  61                 	db	97	;'a'
  1065   001F16  72                 	db	114	;'r'
  1066   001F17  20                 	db	32
  1067   001F18  68                 	db	104	;'h'
  1068   001F19  6F                 	db	111	;'o'
  1069   001F1A  72                 	db	114	;'r'
  1070   001F1B  61                 	db	97	;'a'
  1071   001F1C  20                 	db	32
  1072   001F1D  64                 	db	100	;'d'
  1073   001F1E  65                 	db	101	;'e'
  1074   001F1F  6C                 	db	108	;'l'
  1075   001F20  20                 	db	32
  1076   001F21  73                 	db	115	;'s'
  1077   001F22  69                 	db	105	;'i'
  1078   001F23  73                 	db	115	;'s'
  1079   001F24  74                 	db	116	;'t'
  1080   001F25  65                 	db	101	;'e'
  1081   001F26  6D                 	db	109	;'m'
  1082   001F27  61                 	db	97	;'a'
  1083   001F28  0D                 	db	13
  1084   001F29  0A                 	db	10
  1085   001F2A  00                 	db	0
  1086   001F2B                     STR_11:
  1087   001F2B  09                 	db	9
  1088   001F2C  32                 	db	50	;'2'
  1089   001F2D  2E                 	db	46
  1090   001F2E  20                 	db	32
  1091   001F2F  4D                 	db	77	;'M'
  1092   001F30  6F                 	db	111	;'o'
  1093   001F31  73                 	db	115	;'s'
  1094   001F32  74                 	db	116	;'t'
  1095   001F33  72                 	db	114	;'r'
  1096   001F34  61                 	db	97	;'a'
  1097   001F35  72                 	db	114	;'r'
  1098   001F36  20                 	db	32
  1099   001F37  63                 	db	99	;'c'
  1100   001F38  6F                 	db	111	;'o'
  1101   001F39  6E                 	db	110	;'n'
  1102   001F3A  66                 	db	102	;'f'
  1103   001F3B  69                 	db	105	;'i'
  1104   001F3C  67                 	db	103	;'g'
  1105   001F3D  75                 	db	117	;'u'
  1106   001F3E  72                 	db	114	;'r'
  1107   001F3F  61                 	db	97	;'a'
  1108   001F40  63                 	db	99	;'c'
  1109   001F41  69                 	db	105	;'i'
  1110   001F42  6F                 	db	111	;'o'
  1111   001F43  6E                 	db	110	;'n'
  1112   001F44  73                 	db	115	;'s'
  1113   001F45  0D                 	db	13
  1114   001F46  0A                 	db	10
  1115   001F47  00                 	db	0
  1116   001F48                     STR_5:
  1117   001F48  55                 	db	85	;'U'
  1118   001F49  49                 	db	73	;'I'
  1119   001F4A  44                 	db	68	;'D'
  1120   001F4B  3A                 	db	58	;':'
  1121   001F4C  20                 	db	32
  1122   001F4D  25                 	db	37
  1123   001F4E  30                 	db	48	;'0'
  1124   001F4F  32                 	db	50	;'2'
  1125   001F50  58                 	db	88	;'X'
  1126   001F51  25                 	db	37
  1127   001F52  30                 	db	48	;'0'
  1128   001F53  32                 	db	50	;'2'
  1129   001F54  58                 	db	88	;'X'
  1130   001F55  25                 	db	37
  1131   001F56  30                 	db	48	;'0'
  1132   001F57  32                 	db	50	;'2'
  1133   001F58  58                 	db	88	;'X'
  1134   001F59  25                 	db	37
  1135   001F5A  30                 	db	48	;'0'
  1136   001F5B  32                 	db	50	;'2'
  1137   001F5C  58                 	db	88	;'X'
  1138   001F5D  25                 	db	37
  1139   001F5E  30                 	db	48	;'0'
  1140   001F5F  32                 	db	50	;'2'
  1141   001F60  58                 	db	88	;'X'
  1142   001F61  0D                 	db	13
  1143   001F62  0A                 	db	10
  1144   001F63  00                 	db	0
  1145   001F64                     STR_10:
  1146   001F64  09                 	db	9
  1147   001F65  31                 	db	49	;'1'
  1148   001F66  2E                 	db	46
  1149   001F67  20                 	db	32
  1150   001F68  51                 	db	81	;'Q'
  1151   001F69  75                 	db	117	;'u'
  1152   001F6A  69                 	db	105	;'i'
  1153   001F6B  20                 	db	32
  1154   001F6C  68                 	db	104	;'h'
  1155   001F6D  69                 	db	105	;'i'
  1156   001F6E  20                 	db	32
  1157   001F6F  68                 	db	104	;'h'
  1158   001F70  61                 	db	97	;'a'
  1159   001F71  20                 	db	32
  1160   001F72  61                 	db	97	;'a'
  1161   001F73  20                 	db	32
  1162   001F74  6C                 	db	108	;'l'
  1163   001F75  61                 	db	97	;'a'
  1164   001F76  20                 	db	32
  1165   001F77  73                 	db	115	;'s'
  1166   001F78  61                 	db	97	;'a'
  1167   001F79  6C                 	db	108	;'l'
  1168   001F7A  61                 	db	97	;'a'
  1169   001F7B  3F                 	db	63	;'?'
  1170   001F7C  0D                 	db	13
  1171   001F7D  0A                 	db	10
  1172   001F7E  00                 	db	0
  1173   001F7F                     STR_9:
  1174   001F7F  54                 	db	84	;'T'
  1175   001F80  72                 	db	114	;'r'
  1176   001F81  69                 	db	105	;'i'
  1177   001F82  61                 	db	97	;'a'
  1178   001F83  20                 	db	32
  1179   001F84  75                 	db	117	;'u'
  1180   001F85  6E                 	db	110	;'n'
  1181   001F86  61                 	db	97	;'a'
  1182   001F87  20                 	db	32
  1183   001F88  6F                 	db	111	;'o'
  1184   001F89  70                 	db	112	;'p'
  1185   001F8A  63                 	db	99	;'c'
  1186   001F8B  69                 	db	105	;'i'
  1187   001F8C  C3                 	db	-61
  1188   001F8D  B3                 	db	-77
  1189   001F8E  3A                 	db	58	;':'
  1190   001F8F  0D                 	db	13
  1191   001F90  0A                 	db	10
  1192   001F91  00                 	db	0
  1193   001F92                     STR_6:
  1194   001F92  2D                 	db	45
  1195   001F93  2D                 	db	45
  1196   001F94  2D                 	db	45
  1197   001F95  2D                 	db	45
  1198   001F96  2D                 	db	45
  1199   001F97  2D                 	db	45
  1200   001F98  2D                 	db	45
  1201   001F99  2D                 	db	45
  1202   001F9A  2D                 	db	45
  1203   001F9B  2D                 	db	45
  1204   001F9C  2D                 	db	45
  1205   001F9D  2D                 	db	45
  1206   001F9E  2D                 	db	45
  1207   001F9F  2D                 	db	45
  1208   001FA0  2D                 	db	45
  1209   001FA1  0D                 	db	13
  1210   001FA2  0A                 	db	10
  1211   001FA3  00                 	db	0
  1212   001FA4                     STR_7:
  1213   001FA4  4D                 	db	77	;'M'
  1214   001FA5  65                 	db	101	;'e'
  1215   001FA6  6E                 	db	110	;'n'
  1216   001FA7  C3                 	db	-61
  1217   001FA8  BA                 	db	-70
  1218   001FA9  20                 	db	32
  1219   001FAA  70                 	db	112	;'p'
  1220   001FAB  72                 	db	114	;'r'
  1221   001FAC  69                 	db	105	;'i'
  1222   001FAD  6E                 	db	110	;'n'
  1223   001FAE  63                 	db	99	;'c'
  1224   001FAF  69                 	db	105	;'i'
  1225   001FB0  70                 	db	112	;'p'
  1226   001FB1  61                 	db	97	;'a'
  1227   001FB2  6C                 	db	108	;'l'
  1228   001FB3  0D                 	db	13
  1229   001FB4  0A                 	db	10
  1230   001FB5  00                 	db	0
  1231   001FB6                     STR_14:
  1232   001FB6  48                 	db	72	;'H'
  1233   001FB7  61                 	db	97	;'a'
  1234   001FB8  73                 	db	115	;'s'
  1235   001FB9  20                 	db	32
  1236   001FBA  70                 	db	112	;'p'
  1237   001FBB  75                 	db	117	;'u'
  1238   001FBC  6C                 	db	108	;'l'
  1239   001FBD  73                 	db	115	;'s'
  1240   001FBE  61                 	db	97	;'a'
  1241   001FBF  64                 	db	100	;'d'
  1242   001FC0  6F                 	db	111	;'o'
  1243   001FC1  20                 	db	32
  1244   001FC2  31                 	db	49	;'1'
  1245   001FC3  0D                 	db	13
  1246   001FC4  0A                 	db	10
  1247   001FC5  00                 	db	0
  1248   001FC6                     STR_15:
  1249   001FC6  48                 	db	72	;'H'
  1250   001FC7  61                 	db	97	;'a'
  1251   001FC8  73                 	db	115	;'s'
  1252   001FC9  20                 	db	32
  1253   001FCA  70                 	db	112	;'p'
  1254   001FCB  75                 	db	117	;'u'
  1255   001FCC  6C                 	db	108	;'l'
  1256   001FCD  73                 	db	115	;'s'
  1257   001FCE  61                 	db	97	;'a'
  1258   001FCF  64                 	db	100	;'d'
  1259   001FD0  6F                 	db	111	;'o'
  1260   001FD1  20                 	db	32
  1261   001FD2  32                 	db	50	;'2'
  1262   001FD3  0D                 	db	13
  1263   001FD4  0A                 	db	10
  1264   001FD5  00                 	db	0
  1265   001FD6                     STR_16:
  1266   001FD6  48                 	db	72	;'H'
  1267   001FD7  61                 	db	97	;'a'
  1268   001FD8  73                 	db	115	;'s'
  1269   001FD9  20                 	db	32
  1270   001FDA  70                 	db	112	;'p'
  1271   001FDB  75                 	db	117	;'u'
  1272   001FDC  6C                 	db	108	;'l'
  1273   001FDD  73                 	db	115	;'s'
  1274   001FDE  61                 	db	97	;'a'
  1275   001FDF  64                 	db	100	;'d'
  1276   001FE0  6F                 	db	111	;'o'
  1277   001FE1  20                 	db	32
  1278   001FE2  33                 	db	51	;'3'
  1279   001FE3  0D                 	db	13
  1280   001FE4  0A                 	db	10
  1281   001FE5  00                 	db	0
  1282   001FE6                     STR_13:
  1283   001FE6  4F                 	db	79	;'O'
  1284   001FE7  70                 	db	112	;'p'
  1285   001FE8  63                 	db	99	;'c'
  1286   001FE9  69                 	db	105	;'i'
  1287   001FEA  C3                 	db	-61
  1288   001FEB  B3                 	db	-77
  1289   001FEC  3A                 	db	58	;':'
  1290   001FED  20                 	db	32
  1291   001FEE  00                 	db	0
  1292   001FEF  55                 	db	85	;'U'
  1293   001FF0  49                 	db	73	;'I'
  1294   001FF1  44                 	db	68	;'D'
  1295   001FF2  3A                 	db	58	;':'
  1296   001FF3  20                 	db	32
  1297   001FF4  00                 	db	0
  1298   001FF5  25                 	db	37
  1299   001FF6  30                 	db	48	;'0'
  1300   001FF7  32                 	db	50	;'2'
  1301   001FF8  58                 	db	88	;'X'
  1302   001FF9  00                 	db	0
  1303   001FFA                     STR_1:
  1304   001FFA  68                 	db	104	;'h'
  1305   001FFB  6F                 	db	111	;'o'
  1306   001FFC  6C                 	db	108	;'l'
  1307   001FFD  61                 	db	97	;'a'
  1308   001FFE  00                 	db	0
  1309   001F92                     STR_8           equ	STR_6
  1310   001FA2                     STR_4           equ	STR_6+16
  1311   001FFF  00                 	db	0	; dummy byte at the end
  1312   001EDC                     __smallconst    set	__pmediumconst
  1313   001EDC                     __mediumconst   set	__pmediumconst
  1314   000002                     __activetblptr  equ	2
  1315                           
  1316                           ; #config settings
  1317                           
  1318                           	psect	cinit
  1319   0015F4                     __pcinit:
  1320                           	callstack 0
  1321   0015F4                     start_initialization:
  1322                           	callstack 0
  1323   0015F4                     __initialization:
  1324                           	callstack 0
  1325                           
  1326                           ; Clear objects allocated to BANK0 (102 bytes)
  1327   0015F4  EE00  F080         	lfsr	0,__pbssBANK0
  1328   0015F8  0E66               	movlw	102
  1329   0015FA                     clear_0:
  1330   0015FA  6AEE               	clrf	postinc0,c
  1331   0015FC  06E8               	decf	wreg,f,c
  1332   0015FE  E1FD               	bnz	clear_0
  1333                           
  1334                           ; Clear objects allocated to COMRAM (39 bytes)
  1335   001600  EE00  F053         	lfsr	0,__pbssCOMRAM
  1336   001604  0E27               	movlw	39
  1337   001606                     clear_1:
  1338   001606  6AEE               	clrf	postinc0,c
  1339   001608  06E8               	decf	wreg,f,c
  1340   00160A  E1FD               	bnz	clear_1
  1341   00160C                     end_of_initialization:
  1342                           	callstack 0
  1343   00160C                     __end_of__initialization:
  1344                           	callstack 0
  1345   00160C  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1346   00160E  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1347   001610  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1348   001612  6EF8               	movwf	tblptru,c
  1349   001614  0100               	movlb	0
  1350   001616  EF0B  F00A         	goto	_main	;jump to C main() function
  1351                           
  1352                           	psect	bssCOMRAM
  1353   000053                     __pbssCOMRAM:
  1354                           	callstack 0
  1355   000053                     motor_RFID@UID:
  1356                           	callstack 0
  1357   000053                     	ds	6
  1358   000059                     _Tics:
  1359                           	callstack 0
  1360   000059                     	ds	4
  1361   00005D                     _width:
  1362                           	callstack 0
  1363   00005D                     	ds	2
  1364   00005F                     _prec:
  1365                           	callstack 0
  1366   00005F                     	ds	2
  1367   000061                     	ds	2
  1368   000063                     _flags:
  1369                           	callstack 0
  1370   000063                     	ds	1
  1371   000064                     motorTerminal@state:
  1372                           	callstack 0
  1373   000064                     	ds	1
  1374   000065                     _hashtag_pressed:
  1375                           	callstack 0
  1376   000065                     	ds	1
  1377   000066                     _ColumnAct:
  1378                           	callstack 0
  1379   000066                     	ds	1
  1380   000067                     _RowAct:
  1381                           	callstack 0
  1382   000067                     	ds	1
  1383   000068                     _Columns:
  1384                           	callstack 0
  1385   000068                     	ds	1
  1386   000069                     _Rows:
  1387                           	callstack 0
  1388   000069                     	ds	1
  1389   00006A                     motor_RFID@allZero:
  1390                           	callstack 0
  1391   00006A                     	ds	1
  1392   00006B                     motor_RFID@checksum:
  1393                           	callstack 0
  1394   00006B                     	ds	1
  1395   00006C                     motor_RFID@TagType:
  1396                           	callstack 0
  1397   00006C                     	ds	1
  1398   00006D                     	ds	1
  1399   00006E                     motor_RFID@i:
  1400                           	callstack 0
  1401   00006E                     	ds	1
  1402   00006F                     motor_RFID@n:
  1403                           	callstack 0
  1404   00006F                     	ds	1
  1405   000070                     motor_RFID@waitIRq:
  1406                           	callstack 0
  1407   000070                     	ds	1
  1408   000071                     motor_RFID@irqEn:
  1409                           	callstack 0
  1410   000071                     	ds	1
  1411   000072                     motor_RFID@substate:
  1412                           	callstack 0
  1413   000072                     	ds	1
  1414   000073                     motor_RFID@state:
  1415                           	callstack 0
  1416   000073                     	ds	1
  1417   000074                     _state:
  1418                           	callstack 0
  1419   000074                     	ds	1
  1420   000075                     _tecla:
  1421                           	callstack 0
  1422   000075                     	ds	1
  1423   000076                     _Columnas:
  1424                           	callstack 0
  1425   000076                     	ds	1
  1426   000077                     _Filas:
  1427                           	callstack 0
  1428   000077                     	ds	1
  1429   000078                     _Timer:
  1430                           	callstack 0
  1431   000078                     	ds	1
  1432   000079                     _timer:
  1433                           	callstack 0
  1434   000079                     	ds	1
  1435                           
  1436                           	psect	bssBANK0
  1437   000080                     __pbssBANK0:
  1438                           	callstack 0
  1439   000080                     _Timers:
  1440                           	callstack 0
  1441   000080                     	ds	20
  1442   000094                     motor_RFID@buffer:
  1443                           	callstack 0
  1444   000094                     	ds	50
  1445   0000C6                     _dbuf:
  1446                           	callstack 0
  1447   0000C6                     	ds	32
  1448                           
  1449                           	psect	cstackCOMRAM
  1450   000001                     __pcstackCOMRAM:
  1451                           	callstack 0
  1452   000001                     ??_LowRSI:
  1453                           
  1454                           ; 1 bytes @ 0x0
  1455   000001                     	ds	1
  1456   000002                     ?_Terminal_TXAvailable:
  1457                           	callstack 0
  1458   000002                     ?_read_prec_or_width:
  1459                           	callstack 0
  1460   000002                     ?_TI_GetTics:
  1461                           	callstack 0
  1462   000002                     TI_Init@counter:
  1463                           	callstack 0
  1464   000002                     TI_NewTimer@TimerHandle:
  1465                           	callstack 0
  1466   000002                     TI_ResetTics@TimerHandle:
  1467                           	callstack 0
  1468   000002                     Terminal_SendChar@c:
  1469                           	callstack 0
  1470   000002                     read_prec_or_width@fmt:
  1471                           	callstack 0
  1472   000002                     fputc@c:
  1473                           	callstack 0
  1474   000002                     ??_GetTecla:
  1475   000002                     ??_delay_us:
  1476   000002                     ??_CantaPartAlta:
  1477   000002                     ??_CantaPartBaixa:
  1478   000002                     
  1479                           ; 1 bytes @ 0x1
  1480   000002                     	ds	1
  1481   000003                     CantaPartAlta@c:
  1482                           	callstack 0
  1483   000003                     CantaPartBaixa@c:
  1484                           	callstack 0
  1485   000003                     read_prec_or_width@ap:
  1486                           	callstack 0
  1487   000003                     
  1488                           ; 1 bytes @ 0x2
  1489   000003                     	ds	1
  1490   000004                     TI_NewTimer@Comptador:
  1491                           	callstack 0
  1492   000004                     CantaIR@IR:
  1493                           	callstack 0
  1494   000004                     CantaData@Data:
  1495                           	callstack 0
  1496   000004                     fputc@fp:
  1497                           	callstack 0
  1498   000004                     GetTecla@keymap:
  1499                           	callstack 0
  1500   000004                     ??_Terminal_TXAvailable:
  1501   000004                     ??_read_prec_or_width:
  1502                           
  1503                           ; 1 bytes @ 0x3
  1504   000004                     	ds	1
  1505   000005                     delay_us@howMany:
  1506                           	callstack 0
  1507   000005                     Terminal_SendString@str:
  1508                           	callstack 0
  1509   000005                     ??_fputc:
  1510                           
  1511                           ; 1 bytes @ 0x4
  1512   000005                     	ds	1
  1513   000006                     delay_us@x:
  1514                           	callstack 0
  1515   000006                     read_prec_or_width@c:
  1516                           	callstack 0
  1517   000006                     ??_TI_GetTics:
  1518                           
  1519                           ; 1 bytes @ 0x5
  1520   000006                     	ds	1
  1521   000007                     read_prec_or_width@n:
  1522                           	callstack 0
  1523   000007                     ??_MFRC522_Rd:
  1524   000007                     
  1525                           ; 1 bytes @ 0x6
  1526   000007                     	ds	1
  1527   000008                     MFRC522_Rd@Address:
  1528                           	callstack 0
  1529                           
  1530                           ; 1 bytes @ 0x7
  1531   000008                     	ds	1
  1532   000009                     MFRC522_Rd@ucAddr:
  1533                           	callstack 0
  1534                           
  1535                           ; 1 bytes @ 0x8
  1536   000009                     	ds	1
  1537   00000A                     MFRC522_Rd@ucResult:
  1538                           	callstack 0
  1539   00000A                     fputs@s:
  1540                           	callstack 0
  1541   00000A                     TI_GetTics@CopiaTicsActual:
  1542                           	callstack 0
  1543                           
  1544                           ; 4 bytes @ 0x9
  1545   00000A                     	ds	1
  1546   00000B                     MFRC522_Rd@i:
  1547                           	callstack 0
  1548   00000B                     fputs@fp:
  1549                           	callstack 0
  1550                           
  1551                           ; 1 bytes @ 0xA
  1552   00000B                     	ds	1
  1553   00000C                     MFRC522_Wr@value:
  1554                           	callstack 0
  1555   00000C                     fputs@c:
  1556                           	callstack 0
  1557   00000C                     
  1558                           ; 1 bytes @ 0xB
  1559   00000C                     	ds	1
  1560   00000D                     fputs@i:
  1561                           	callstack 0
  1562   00000D                     ??_MFRC522_Wr:
  1563                           
  1564                           ; 1 bytes @ 0xC
  1565   00000D                     	ds	1
  1566   00000E                     TI_GetTics@TimerHandle:
  1567                           	callstack 0
  1568   00000E                     MFRC522_Wr@Address:
  1569                           	callstack 0
  1570                           
  1571                           ; 1 bytes @ 0xD
  1572   00000E                     	ds	1
  1573   00000F                     MFRC522_Wr@ucAddr:
  1574                           	callstack 0
  1575   00000F                     WaitForBusy@Busy:
  1576                           	callstack 0
  1577   00000F                     pad@fp:
  1578                           	callstack 0
  1579   00000F                     
  1580                           ; 1 bytes @ 0xE
  1581   00000F                     	ds	1
  1582   000010                     GetTecla@columna:
  1583                           	callstack 0
  1584   000010                     MFRC522_Wr@i:
  1585                           	callstack 0
  1586   000010                     LcGotoXY@Row:
  1587                           	callstack 0
  1588   000010                     pad@buf:
  1589                           	callstack 0
  1590                           
  1591                           ; 1 bytes @ 0xF
  1592   000010                     	ds	1
  1593   000011                     GetTecla@fila:
  1594                           	callstack 0
  1595   000011                     MFRC522_Clear_Bit@mask:
  1596                           	callstack 0
  1597   000011                     MFRC522_Set_Bit@mask:
  1598                           	callstack 0
  1599   000011                     pad@p:
  1600                           	callstack 0
  1601   000011                     ??_LcGotoXY:
  1602                           
  1603                           ; 1 bytes @ 0x10
  1604   000011                     	ds	1
  1605   000012                     MFRC522_Set_Bit@addr:
  1606                           	callstack 0
  1607   000012                     ??_MFRC522_Clear_Bit:
  1608   000012                     
  1609                           ; 1 bytes @ 0x11
  1610   000012                     	ds	1
  1611   000013                     MFRC522_Clear_Bit@addr:
  1612                           	callstack 0
  1613   000013                     _LcGotoXY$754:
  1614                           	callstack 0
  1615   000013                     ??_pad:
  1616                           
  1617                           ; 1 bytes @ 0x12
  1618   000013                     	ds	1
  1619   000014                     pad@i:
  1620                           	callstack 0
  1621   000014                     
  1622                           ; 1 bytes @ 0x13
  1623   000014                     	ds	1
  1624   000015                     LcGotoXY@Fisics:
  1625                           	callstack 0
  1626                           
  1627                           ; 2 bytes @ 0x14
  1628   000015                     	ds	1
  1629   000016                     xtoa@fp:
  1630                           	callstack 0
  1631                           
  1632                           ; 1 bytes @ 0x15
  1633   000016                     	ds	1
  1634   000017                     LcGotoXY@Column:
  1635                           	callstack 0
  1636   000017                     xtoa@d:
  1637                           	callstack 0
  1638                           
  1639                           ; 2 bytes @ 0x16
  1640   000017                     	ds	1
  1641   000018                     LcPutChar@c:
  1642                           	callstack 0
  1643   000018                     
  1644                           ; 1 bytes @ 0x17
  1645   000018                     	ds	1
  1646   000019                     LcPutString@s:
  1647                           	callstack 0
  1648   000019                     ??_xtoa:
  1649                           
  1650                           ; 1 bytes @ 0x18
  1651   000019                     	ds	2
  1652   00001B                     
  1653                           ; 1 bytes @ 0x1A
  1654   00001B                     	ds	1
  1655   00001C                     xtoa@p:
  1656                           	callstack 0
  1657                           
  1658                           ; 1 bytes @ 0x1B
  1659   00001C                     	ds	1
  1660   00001D                     xtoa@w:
  1661                           	callstack 0
  1662                           
  1663                           ; 2 bytes @ 0x1C
  1664   00001D                     	ds	2
  1665   00001F                     xtoa@c:
  1666                           	callstack 0
  1667                           
  1668                           ; 1 bytes @ 0x1E
  1669   00001F                     	ds	1
  1670   000020                     xtoa@i:
  1671                           	callstack 0
  1672                           
  1673                           ; 2 bytes @ 0x1F
  1674   000020                     	ds	2
  1675   000022                     vfpfcnvrt@fp:
  1676                           	callstack 0
  1677                           
  1678                           ; 1 bytes @ 0x21
  1679   000022                     	ds	1
  1680   000023                     vfpfcnvrt@fmt:
  1681                           	callstack 0
  1682                           
  1683                           ; 1 bytes @ 0x22
  1684   000023                     	ds	1
  1685   000024                     vfpfcnvrt@ap:
  1686                           	callstack 0
  1687                           
  1688                           ; 1 bytes @ 0x23
  1689   000024                     	ds	1
  1690   000025                     ??_vfpfcnvrt:
  1691                           
  1692                           ; 1 bytes @ 0x24
  1693   000025                     	ds	2
  1694   000027                     vfpfcnvrt@convarg:
  1695                           	callstack 0
  1696                           
  1697                           ; 4 bytes @ 0x26
  1698   000027                     	ds	4
  1699   00002B                     vfpfcnvrt@done:
  1700                           	callstack 0
  1701                           
  1702                           ; 1 bytes @ 0x2A
  1703   00002B                     	ds	1
  1704   00002C                     vfpfcnvrt@cp:
  1705                           	callstack 0
  1706                           
  1707                           ; 2 bytes @ 0x2B
  1708   00002C                     	ds	2
  1709   00002E                     ?_vfprintf:
  1710                           	callstack 0
  1711   00002E                     vfprintf@fp:
  1712                           	callstack 0
  1713                           
  1714                           ; 1 bytes @ 0x2D
  1715   00002E                     	ds	1
  1716   00002F                     vfprintf@fmt:
  1717                           	callstack 0
  1718                           
  1719                           ; 2 bytes @ 0x2E
  1720   00002F                     	ds	2
  1721   000031                     vfprintf@ap:
  1722                           	callstack 0
  1723                           
  1724                           ; 1 bytes @ 0x30
  1725   000031                     	ds	1
  1726   000032                     vfprintf@cfmt:
  1727                           	callstack 0
  1728   000032                     
  1729                           ; 1 bytes @ 0x31
  1730   000032                     	ds	2
  1731   000034                     ?_sprintf:
  1732                           	callstack 0
  1733   000034                     sprintf@s:
  1734                           	callstack 0
  1735                           
  1736                           ; 1 bytes @ 0x33
  1737   000034                     	ds	1
  1738   000035                     sprintf@fmt:
  1739                           	callstack 0
  1740                           
  1741                           ; 2 bytes @ 0x34
  1742   000035                     	ds	12
  1743   000041                     sprintf@ap:
  1744                           	callstack 0
  1745   000041                     
  1746                           ; 1 bytes @ 0x40
  1747   000041                     	ds	1
  1748   000042                     sprintf@f:
  1749                           	callstack 0
  1750                           
  1751                           ; 11 bytes @ 0x41
  1752   000042                     	ds	11
  1753   00004D                     ??_motor_RFID:
  1754                           
  1755                           ; 1 bytes @ 0x4C
  1756   00004D                     	ds	2
  1757   00004F                     motor_RFID@backBitsCalc:
  1758                           	callstack 0
  1759                           
  1760                           ; 2 bytes @ 0x4E
  1761   00004F                     	ds	2
  1762   000051                     motor_RFID@fifoLevel:
  1763                           	callstack 0
  1764                           
  1765                           ; 1 bytes @ 0x50
  1766   000051                     	ds	1
  1767   000052                     motor_RFID@lastBitsVal:
  1768                           	callstack 0
  1769                           
  1770                           ; 1 bytes @ 0x51
  1771   000052                     	ds	1
  1772   000053                     
  1773                           ; 1 bytes @ 0x52
  1774 ;;
  1775 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1776 ;;
  1777 ;; *************** function _main *****************
  1778 ;; Defined at:
  1779 ;;		line 37 in file "main.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1
  1793 ;;      Params:         0       0       0
  1794 ;;      Locals:         0       0       0
  1795 ;;      Temps:          0       0       0
  1796 ;;      Totals:         0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels required when called: 12
  1799 ;; This function calls:
  1800 ;;		_LcPutString
  1801 ;;		_TI_Init
  1802 ;;		_Terminal_Init
  1803 ;;		_initPorts
  1804 ;;		_initRFID
  1805 ;;		_initTeclado
  1806 ;;		_motorTeclado
  1807 ;;		_motorTerminal
  1808 ;;		_motor_RFID
  1809 ;; This function is called by:
  1810 ;;		Startup code after reset
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text0
  1815   001416                     __ptext0:
  1816                           	callstack 0
  1817   001416                     _main:
  1818                           	callstack 19
  1819   001416                     
  1820                           ;main.c: 38:  TRISA = 0x00;
  1821   001416  EC99  F00A         	call	_TI_Init	;wreg free
  1822                           
  1823                           ;main.c: 39: }
  1824   00141A  EC46  F00B         	call	_initTeclado	;wreg free
  1825   00141E                     
  1826                           ;main.c: 40: 
  1827   00141E  EC8A  F00B         	call	_initRFID	;wreg free
  1828   001422                     
  1829                           ;main.c: 41: 
  1830   001422  EC70  F00B         	call	_Terminal_Init	;wreg free
  1831   001426                     
  1832                           ;main.c: 42: 
  1833   001426  EC97  F00B         	call	_initPorts	;wreg free
  1834   00142A                     
  1835                           ;main.c: 45: 
  1836   00142A  8EF2               	bsf	242,7,c	;volatile
  1837   00142C                     
  1838                           ;main.c: 46:  LATC = key;
  1839   00142C  8CF2               	bsf	242,6,c	;volatile
  1840   00142E                     l3702:
  1841   00142E  6A89               	clrf	137,c	;volatile
  1842   001430  EC96  F002         	call	_motorTeclado	;wreg free
  1843   001434  ECE5  F004         	call	_motorTerminal	;wreg free
  1844   001438  0EFA               	movlw	low STR_1
  1845   00143A  6E19               	movwf	LcPutString@s^0,c
  1846   00143C  0E1F               	movlw	high STR_1
  1847   00143E  6E1A               	movwf	(LcPutString@s+1)^0,c
  1848   001440  EC7E  F00A         	call	_LcPutString	;wreg free
  1849   001444  EC15  F000         	call	_motor_RFID	;wreg free
  1850   001448  6889               	setf	137,c	;volatile
  1851   00144A  EF17  F00A         	goto	l3702
  1852   00144E  EF13  F000         	goto	start
  1853   001452                     __end_of_main:
  1854                           	callstack 0
  1855                           
  1856 ;; *************** function _motor_RFID *****************
  1857 ;; Defined at:
  1858 ;;		line 322 in file "TAD_RFID.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  backBitsCalc    2   78[COMRAM] unsigned int 
  1863 ;;  lastBitsVal     1   81[COMRAM] unsigned char 
  1864 ;;  fifoLevel       1   80[COMRAM] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1
  1874 ;;      Params:         0       0       0
  1875 ;;      Locals:         4       0       0
  1876 ;;      Temps:          2       0       0
  1877 ;;      Totals:         6       0       0
  1878 ;;Total ram usage:        6 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; Hardware stack levels required when called: 11
  1881 ;; This function calls:
  1882 ;;		_MFRC522_Clear_Bit
  1883 ;;		_MFRC522_Rd
  1884 ;;		_MFRC522_Set_Bit
  1885 ;;		_MFRC522_Wr
  1886 ;;		_Terminal_SendString
  1887 ;;		_sprintf
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text1
  1894   00002A                     __ptext1:
  1895                           	callstack 0
  1896   00002A                     _motor_RFID:
  1897                           	callstack 19
  1898   00002A                     
  1899                           ;TAD_RFID.c: 323:     static char state = 0;;TAD_RFID.c: 324:     static char substate =
      +                           0;;TAD_RFID.c: 325:     static char irqEn, waitIRq, n;;TAD_RFID.c: 326:     static unsi
      +                          gned char i;;TAD_RFID.c: 327:     static char _status;;TAD_RFID.c: 328:     static unsig
      +                          ned unLen;;TAD_RFID.c: 329:     static char TagType;;TAD_RFID.c: 330:     static unsigne
      +                          d char UID[6];;TAD_RFID.c: 331:     static char buffer[50];;TAD_RFID.c: 332:     static 
      +                          unsigned char checksum;;TAD_RFID.c: 333:     static unsigned char allZero;
  1900   00002A  EF8A  F002         	goto	l3664
  1901   00002E                     l3466:
  1902                           
  1903                           ;TAD_RFID.c: 340:                     MFRC522_Wr(0x0D, 0x07);
  1904   00002E  0E07               	movlw	7
  1905   000030  6E0C               	movwf	MFRC522_Wr@value^0,c
  1906   000032  0E0D               	movlw	13
  1907   000034  EC40  F007         	call	_MFRC522_Wr
  1908   000038                     
  1909                           ;TAD_RFID.c: 341:                     TagType = 0x26;
  1910   000038  0E26               	movlw	38
  1911   00003A  6E6C               	movwf	motor_RFID@TagType^0,c
  1912   00003C                     l3470:
  1913                           
  1914                           ;TAD_RFID.c: 342:                     substate = 1;
  1915   00003C  0E01               	movlw	1
  1916   00003E  6E72               	movwf	motor_RFID@substate^0,c
  1917                           
  1918                           ;TAD_RFID.c: 343:                     break;
  1919   000040  EF95  F002         	goto	l412
  1920   000044                     l3472:
  1921                           
  1922                           ;TAD_RFID.c: 346:                     irqEn = 0x77;
  1923   000044  0E77               	movlw	119
  1924   000046  6E71               	movwf	motor_RFID@irqEn^0,c
  1925                           
  1926                           ;TAD_RFID.c: 347:                     waitIRq = 0x30;
  1927   000048  0E30               	movlw	48
  1928   00004A  6E70               	movwf	motor_RFID@waitIRq^0,c
  1929   00004C                     
  1930                           ;TAD_RFID.c: 348:                     MFRC522_Wr(0x02, irqEn | 0x80);
  1931   00004C  0EF7               	movlw	247
  1932   00004E  6E0C               	movwf	MFRC522_Wr@value^0,c
  1933   000050  0E02               	movlw	2
  1934   000052  EC40  F007         	call	_MFRC522_Wr
  1935   000056                     l3476:
  1936                           
  1937                           ;TAD_RFID.c: 349:                     substate = 2;
  1938   000056  0E02               	movlw	2
  1939   000058  6E72               	movwf	motor_RFID@substate^0,c
  1940                           
  1941                           ;TAD_RFID.c: 350:                     break;
  1942   00005A  EF95  F002         	goto	l412
  1943   00005E                     l3478:
  1944                           
  1945                           ;TAD_RFID.c: 353:                     MFRC522_Clear_Bit(0x04, 0x80);
  1946   00005E  0E80               	movlw	128
  1947   000060  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  1948   000062  0E04               	movlw	4
  1949   000064  EC2D  F00B         	call	_MFRC522_Clear_Bit
  1950   000068                     l3480:
  1951                           
  1952                           ;TAD_RFID.c: 354:                     substate = 3;
  1953   000068  0E03               	movlw	3
  1954   00006A  6E72               	movwf	motor_RFID@substate^0,c
  1955                           
  1956                           ;TAD_RFID.c: 355:                     break;
  1957   00006C  EF95  F002         	goto	l412
  1958   000070                     l3482:
  1959                           
  1960                           ;TAD_RFID.c: 358:                     MFRC522_Set_Bit(0x0A, 0x80);
  1961   000070  0E80               	movlw	128
  1962   000072  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  1963   000074  0E0A               	movlw	10
  1964   000076  EC66  F00B         	call	_MFRC522_Set_Bit
  1965   00007A                     l3484:
  1966                           
  1967                           ;TAD_RFID.c: 359:                     substate = 4;
  1968   00007A  0E04               	movlw	4
  1969   00007C  6E72               	movwf	motor_RFID@substate^0,c
  1970                           
  1971                           ;TAD_RFID.c: 360:                     break;
  1972   00007E  EF95  F002         	goto	l412
  1973   000082                     l3486:
  1974                           
  1975                           ;TAD_RFID.c: 363:                     MFRC522_Wr(0x01, 0x00);
  1976   000082  0E00               	movlw	0
  1977   000084  6E0C               	movwf	MFRC522_Wr@value^0,c
  1978   000086  0E01               	movlw	1
  1979   000088  EC40  F007         	call	_MFRC522_Wr
  1980   00008C                     l3488:
  1981                           
  1982                           ;TAD_RFID.c: 364:                     substate = 5;
  1983   00008C  0E05               	movlw	5
  1984   00008E  6E72               	movwf	motor_RFID@substate^0,c
  1985                           
  1986                           ;TAD_RFID.c: 365:                     break;
  1987   000090  EF95  F002         	goto	l412
  1988   000094                     l3490:
  1989                           
  1990                           ;TAD_RFID.c: 368:                     MFRC522_Wr(0x09, TagType);
  1991   000094  C06C  F00C         	movff	motor_RFID@TagType,MFRC522_Wr@value
  1992   000098  0E09               	movlw	9
  1993   00009A  EC40  F007         	call	_MFRC522_Wr
  1994   00009E                     l3492:
  1995                           
  1996                           ;TAD_RFID.c: 369:                     substate = 6;
  1997   00009E  0E06               	movlw	6
  1998   0000A0  6E72               	movwf	motor_RFID@substate^0,c
  1999                           
  2000                           ;TAD_RFID.c: 370:                     break;
  2001   0000A2  EF95  F002         	goto	l412
  2002   0000A6                     l3494:
  2003                           
  2004                           ;TAD_RFID.c: 373:                     MFRC522_Wr(0x01, 0x0C);
  2005   0000A6  0E0C               	movlw	12
  2006   0000A8  6E0C               	movwf	MFRC522_Wr@value^0,c
  2007   0000AA  0E01               	movlw	1
  2008   0000AC  EC40  F007         	call	_MFRC522_Wr
  2009   0000B0                     l3496:
  2010                           
  2011                           ;TAD_RFID.c: 374:                     substate = 7;
  2012   0000B0  0E07               	movlw	7
  2013   0000B2  6E72               	movwf	motor_RFID@substate^0,c
  2014                           
  2015                           ;TAD_RFID.c: 375:                     break;
  2016   0000B4  EF95  F002         	goto	l412
  2017   0000B8                     l3498:
  2018                           
  2019                           ;TAD_RFID.c: 378:                     MFRC522_Set_Bit(0x0D, 0x80);
  2020   0000B8  0E80               	movlw	128
  2021   0000BA  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2022   0000BC  0E0D               	movlw	13
  2023   0000BE  EC66  F00B         	call	_MFRC522_Set_Bit
  2024   0000C2                     
  2025                           ;TAD_RFID.c: 379:                     i = 0xFF;
  2026   0000C2  686E               	setf	motor_RFID@i^0,c
  2027   0000C4                     l3502:
  2028                           
  2029                           ;TAD_RFID.c: 380:                     substate = 8;
  2030   0000C4  0E08               	movlw	8
  2031   0000C6  6E72               	movwf	motor_RFID@substate^0,c
  2032                           
  2033                           ;TAD_RFID.c: 381:                     break;
  2034   0000C8  EF95  F002         	goto	l412
  2035   0000CC                     l3504:
  2036                           
  2037                           ;TAD_RFID.c: 384:                     n = MFRC522_Rd(0x04);
  2038   0000CC  0E04               	movlw	4
  2039   0000CE  EC94  F007         	call	_MFRC522_Rd
  2040   0000D2  6E6F               	movwf	motor_RFID@n^0,c
  2041   0000D4                     
  2042                           ;TAD_RFID.c: 385:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2043   0000D4  B06F               	btfsc	motor_RFID@n^0,0,c
  2044   0000D6  EF6F  F000         	goto	u2791
  2045   0000DA  EF71  F000         	goto	u2790
  2046   0000DE                     u2791:
  2047   0000DE  EF7E  F000         	goto	l3512
  2048   0000E2                     u2790:
  2049   0000E2  506F               	movf	motor_RFID@n^0,w,c
  2050   0000E4  1470               	andwf	motor_RFID@waitIRq^0,w,c
  2051   0000E6  0900               	iorlw	0
  2052   0000E8  A4D8               	btfss	status,2,c
  2053   0000EA  EF79  F000         	goto	u2801
  2054   0000EE  EF7B  F000         	goto	u2800
  2055   0000F2                     u2801:
  2056   0000F2  EF7E  F000         	goto	l3512
  2057   0000F6                     u2800:
  2058   0000F6  2E6E               	decfsz	motor_RFID@i^0,f,c
  2059   0000F8  EF95  F002         	goto	l412
  2060   0000FC                     l3512:
  2061                           
  2062                           ;TAD_RFID.c: 386:                         substate = 9;
  2063   0000FC  0E09               	movlw	9
  2064   0000FE  6E72               	movwf	motor_RFID@substate^0,c
  2065   000100  EF95  F002         	goto	l412
  2066   000104                     l3514:
  2067                           
  2068                           ;TAD_RFID.c: 391:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2069   000104  0E80               	movlw	128
  2070   000106  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2071   000108  0E0D               	movlw	13
  2072   00010A  EC2D  F00B         	call	_MFRC522_Clear_Bit
  2073   00010E                     l3516:
  2074                           
  2075                           ;TAD_RFID.c: 392:                     substate = 10;
  2076   00010E  0E0A               	movlw	10
  2077   000110  6E72               	movwf	motor_RFID@substate^0,c
  2078                           
  2079                           ;TAD_RFID.c: 393:                     break;
  2080   000112  EF95  F002         	goto	l412
  2081   000116                     l3518:
  2082                           
  2083                           ;TAD_RFID.c: 396:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2084   000116  506E               	movf	motor_RFID@i^0,w,c
  2085   000118  B4D8               	btfsc	status,2,c
  2086   00011A  EF91  F000         	goto	u2811
  2087   00011E  EF93  F000         	goto	u2810
  2088   000122                     u2811:
  2089   000122  EFDD  F000         	goto	l3534
  2090   000126                     u2810:
  2091   000126  0E06               	movlw	6
  2092   000128  EC94  F007         	call	_MFRC522_Rd
  2093   00012C  6E4D               	movwf	??_motor_RFID^0,c
  2094   00012E  0E1B               	movlw	27
  2095   000130  164D               	andwf	??_motor_RFID^0,f,c
  2096   000132  A4D8               	btfss	status,2,c
  2097   000134  EF9E  F000         	goto	u2821
  2098   000138  EFA0  F000         	goto	u2820
  2099   00013C                     u2821:
  2100   00013C  EFDD  F000         	goto	l3534
  2101   000140                     u2820:
  2102   000140                     
  2103                           ;TAD_RFID.c: 397:                         unsigned char fifoLevel = MFRC522_Rd(0x0A);
  2104   000140  0E0A               	movlw	10
  2105   000142  EC94  F007         	call	_MFRC522_Rd
  2106   000146  6E51               	movwf	motor_RFID@fifoLevel^0,c
  2107                           
  2108                           ;TAD_RFID.c: 398:                         unsigned char lastBitsVal = MFRC522_Rd(0x0C) &
      +                           0x07;
  2109   000148  0E0C               	movlw	12
  2110   00014A  EC94  F007         	call	_MFRC522_Rd
  2111   00014E  0B07               	andlw	7
  2112   000150  6E52               	movwf	motor_RFID@lastBitsVal^0,c
  2113   000152                     
  2114                           ;TAD_RFID.c: 399:                         unsigned backBitsCalc;;TAD_RFID.c: 400:       
      +                                            if (lastBitsVal)
  2115   000152  5052               	movf	motor_RFID@lastBitsVal^0,w,c
  2116   000154  B4D8               	btfsc	status,2,c
  2117   000156  EFAF  F000         	goto	u2831
  2118   00015A  EFB1  F000         	goto	u2830
  2119   00015E                     u2831:
  2120   00015E  EFC9  F000         	goto	l3528
  2121   000162                     u2830:
  2122   000162                     
  2123                           ;TAD_RFID.c: 401:                             backBitsCalc = (fifoLevel - 1) * 8 + lastB
      +                          itsVal;
  2124   000162  5052               	movf	motor_RFID@lastBitsVal^0,w,c
  2125   000164  C051  F04D         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2126   000168  6A4E               	clrf	(??_motor_RFID+1)^0,c
  2127   00016A  90D8               	bcf	status,0,c
  2128   00016C  364D               	rlcf	??_motor_RFID^0,f,c
  2129   00016E  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2130   000170  90D8               	bcf	status,0,c
  2131   000172  364D               	rlcf	??_motor_RFID^0,f,c
  2132   000174  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2133   000176  90D8               	bcf	status,0,c
  2134   000178  364D               	rlcf	??_motor_RFID^0,f,c
  2135   00017A  364E               	rlcf	(??_motor_RFID+1)^0,f,c
  2136   00017C  264D               	addwf	??_motor_RFID^0,f,c
  2137   00017E  0E00               	movlw	0
  2138   000180  224E               	addwfc	(??_motor_RFID+1)^0,f,c
  2139   000182  0EF8               	movlw	248
  2140   000184  244D               	addwf	??_motor_RFID^0,w,c
  2141   000186  6E4F               	movwf	motor_RFID@backBitsCalc^0,c
  2142   000188  0EFF               	movlw	255
  2143   00018A  204E               	addwfc	(??_motor_RFID+1)^0,w,c
  2144   00018C  6E50               	movwf	(motor_RFID@backBitsCalc+1)^0,c
  2145   00018E  EFCF  F000         	goto	l3530
  2146   000192                     l3528:
  2147                           
  2148                           ;TAD_RFID.c: 403:                             backBitsCalc = fifoLevel * 8;
  2149   000192  5051               	movf	motor_RFID@fifoLevel^0,w,c
  2150   000194  0D08               	mullw	8
  2151   000196  CFF3 F04F          	movff	prodl,motor_RFID@backBitsCalc
  2152   00019A  CFF4 F050          	movff	prodh,motor_RFID@backBitsCalc+1
  2153   00019E                     l3530:
  2154                           
  2155                           ;TAD_RFID.c: 405:                         if (backBitsCalc == 0x10) {
  2156   00019E  0E10               	movlw	16
  2157   0001A0  184F               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2158   0001A2  1050               	iorwf	(motor_RFID@backBitsCalc+1)^0,w,c
  2159   0001A4  A4D8               	btfss	status,2,c
  2160   0001A6  EFD7  F000         	goto	u2841
  2161   0001AA  EFD9  F000         	goto	u2840
  2162   0001AE                     u2841:
  2163   0001AE  EFDD  F000         	goto	l3534
  2164   0001B2                     u2840:
  2165   0001B2                     l3532:
  2166                           
  2167                           ;TAD_RFID.c: 406:                             substate = 11;
  2168   0001B2  0E0B               	movlw	11
  2169   0001B4  6E72               	movwf	motor_RFID@substate^0,c
  2170                           
  2171                           ;TAD_RFID.c: 407:                         } else {
  2172   0001B6  EF95  F002         	goto	l412
  2173   0001BA                     l3534:
  2174                           
  2175                           ;TAD_RFID.c: 408:                             substate = 12;
  2176   0001BA  0E0C               	movlw	12
  2177   0001BC  6E72               	movwf	motor_RFID@substate^0,c
  2178   0001BE  EF95  F002         	goto	l412
  2179   0001C2                     l3538:
  2180                           
  2181                           ;TAD_RFID.c: 416:                     state = 1;
  2182   0001C2  0E01               	movlw	1
  2183   0001C4  6E73               	movwf	motor_RFID@state^0,c
  2184   0001C6                     l3540:
  2185                           
  2186                           ;TAD_RFID.c: 417:                     substate = 0;
  2187   0001C6  6A72               	clrf	motor_RFID@substate^0,c
  2188                           
  2189                           ;TAD_RFID.c: 418:                     break;
  2190   0001C8  EF95  F002         	goto	l412
  2191   0001CC                     l372:
  2192                           
  2193                           ;TAD_RFID.c: 421:                     state = 0;
  2194   0001CC  6A73               	clrf	motor_RFID@state^0,c
  2195                           
  2196                           ;TAD_RFID.c: 422:                     substate = 0;
  2197   0001CE  6A72               	clrf	motor_RFID@substate^0,c
  2198                           
  2199                           ;TAD_RFID.c: 423:                     break;
  2200   0001D0  EF95  F002         	goto	l412
  2201   0001D4                     l3544:
  2202   0001D4  5072               	movf	motor_RFID@substate^0,w,c
  2203                           
  2204                           ; Switch size 1, requested type "simple"
  2205                           ; Number of cases is 13, Range of values is 0 to 12
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte           40    21 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210   0001D6  0A00               	xorlw	0	; case 0
  2211   0001D8  B4D8               	btfsc	status,2,c
  2212   0001DA  EF17  F000         	goto	l3466
  2213   0001DE  0A01               	xorlw	1	; case 1
  2214   0001E0  B4D8               	btfsc	status,2,c
  2215   0001E2  EF22  F000         	goto	l3472
  2216   0001E6  0A03               	xorlw	3	; case 2
  2217   0001E8  B4D8               	btfsc	status,2,c
  2218   0001EA  EF2F  F000         	goto	l3478
  2219   0001EE  0A01               	xorlw	1	; case 3
  2220   0001F0  B4D8               	btfsc	status,2,c
  2221   0001F2  EF38  F000         	goto	l3482
  2222   0001F6  0A07               	xorlw	7	; case 4
  2223   0001F8  B4D8               	btfsc	status,2,c
  2224   0001FA  EF41  F000         	goto	l3486
  2225   0001FE  0A01               	xorlw	1	; case 5
  2226   000200  B4D8               	btfsc	status,2,c
  2227   000202  EF4A  F000         	goto	l3490
  2228   000206  0A03               	xorlw	3	; case 6
  2229   000208  B4D8               	btfsc	status,2,c
  2230   00020A  EF53  F000         	goto	l3494
  2231   00020E  0A01               	xorlw	1	; case 7
  2232   000210  B4D8               	btfsc	status,2,c
  2233   000212  EF5C  F000         	goto	l3498
  2234   000216  0A0F               	xorlw	15	; case 8
  2235   000218  B4D8               	btfsc	status,2,c
  2236   00021A  EF66  F000         	goto	l3504
  2237   00021E  0A01               	xorlw	1	; case 9
  2238   000220  B4D8               	btfsc	status,2,c
  2239   000222  EF82  F000         	goto	l3514
  2240   000226  0A03               	xorlw	3	; case 10
  2241   000228  B4D8               	btfsc	status,2,c
  2242   00022A  EF8B  F000         	goto	l3518
  2243   00022E  0A01               	xorlw	1	; case 11
  2244   000230  B4D8               	btfsc	status,2,c
  2245   000232  EFE1  F000         	goto	l3538
  2246   000236  0A07               	xorlw	7	; case 12
  2247   000238  B4D8               	btfsc	status,2,c
  2248   00023A  EFE6  F000         	goto	l372
  2249   00023E  EF95  F002         	goto	l412
  2250   000242                     l3546:
  2251                           
  2252                           ;TAD_RFID.c: 431:                     MFRC522_Wr(0x0D, 0x00);
  2253   000242  0E00               	movlw	0
  2254   000244  6E0C               	movwf	MFRC522_Wr@value^0,c
  2255   000246  0E0D               	movlw	13
  2256   000248  EC40  F007         	call	_MFRC522_Wr
  2257   00024C                     
  2258                           ;TAD_RFID.c: 432:                     UID[0] = 0x93;
  2259   00024C  0E93               	movlw	147
  2260   00024E  6E53               	movwf	motor_RFID@UID^0,c
  2261   000250                     
  2262                           ;TAD_RFID.c: 433:                     UID[1] = 0x20;
  2263   000250  0E20               	movlw	32
  2264   000252  6E54               	movwf	(motor_RFID@UID+1)^0,c
  2265   000254  EF1E  F000         	goto	l3470
  2266   000258                     l3554:
  2267                           
  2268                           ;TAD_RFID.c: 438:                     MFRC522_Clear_Bit(0x08, 0x08);
  2269   000258  0E08               	movlw	8
  2270   00025A  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2271   00025C  0E08               	movlw	8
  2272   00025E  EC2D  F00B         	call	_MFRC522_Clear_Bit
  2273   000262  EF2B  F000         	goto	l3476
  2274   000266                     l3558:
  2275                           
  2276                           ;TAD_RFID.c: 443:                     irqEn = 0x77;
  2277   000266  0E77               	movlw	119
  2278   000268  6E71               	movwf	motor_RFID@irqEn^0,c
  2279                           
  2280                           ;TAD_RFID.c: 444:                     waitIRq = 0x30;
  2281   00026A  0E30               	movlw	48
  2282   00026C  6E70               	movwf	motor_RFID@waitIRq^0,c
  2283   00026E                     
  2284                           ;TAD_RFID.c: 445:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2285   00026E  0EF7               	movlw	247
  2286   000270  6E0C               	movwf	MFRC522_Wr@value^0,c
  2287   000272  0E02               	movlw	2
  2288   000274  EC40  F007         	call	_MFRC522_Wr
  2289   000278  EF34  F000         	goto	l3480
  2290   00027C                     l3564:
  2291                           
  2292                           ;TAD_RFID.c: 450:                     MFRC522_Clear_Bit(0x04, 0x80);
  2293   00027C  0E80               	movlw	128
  2294   00027E  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2295   000280  0E04               	movlw	4
  2296   000282  EC2D  F00B         	call	_MFRC522_Clear_Bit
  2297   000286  EF3D  F000         	goto	l3484
  2298   00028A                     l3568:
  2299                           
  2300                           ;TAD_RFID.c: 455:                     MFRC522_Set_Bit(0x0A, 0x80);
  2301   00028A  0E80               	movlw	128
  2302   00028C  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2303   00028E  0E0A               	movlw	10
  2304   000290  EC66  F00B         	call	_MFRC522_Set_Bit
  2305   000294  EF46  F000         	goto	l3488
  2306   000298                     l3572:
  2307                           
  2308                           ;TAD_RFID.c: 460:                     MFRC522_Wr(0x01, 0x00);
  2309   000298  0E00               	movlw	0
  2310   00029A  6E0C               	movwf	MFRC522_Wr@value^0,c
  2311   00029C  0E01               	movlw	1
  2312   00029E  EC40  F007         	call	_MFRC522_Wr
  2313   0002A2  EF4F  F000         	goto	l3492
  2314   0002A6                     l3576:
  2315                           
  2316                           ;TAD_RFID.c: 465:                     MFRC522_Wr(0x09, UID[0]);
  2317   0002A6  C053  F00C         	movff	motor_RFID@UID,MFRC522_Wr@value
  2318   0002AA  0E09               	movlw	9
  2319   0002AC  EC40  F007         	call	_MFRC522_Wr
  2320                           
  2321                           ;TAD_RFID.c: 466:                     MFRC522_Wr(0x09, UID[1]);
  2322   0002B0  C054  F00C         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2323   0002B4  0E09               	movlw	9
  2324   0002B6  EC40  F007         	call	_MFRC522_Wr
  2325   0002BA  EF58  F000         	goto	l3496
  2326   0002BE                     l3580:
  2327                           
  2328                           ;TAD_RFID.c: 471:                     MFRC522_Wr(0x01, 0x0C);
  2329   0002BE  0E0C               	movlw	12
  2330   0002C0  6E0C               	movwf	MFRC522_Wr@value^0,c
  2331   0002C2  0E01               	movlw	1
  2332   0002C4  EC40  F007         	call	_MFRC522_Wr
  2333   0002C8  EF62  F000         	goto	l3502
  2334   0002CC                     l3584:
  2335                           
  2336                           ;TAD_RFID.c: 476:                     MFRC522_Set_Bit(0x0D, 0x80);
  2337   0002CC  0E80               	movlw	128
  2338   0002CE  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  2339   0002D0  0E0D               	movlw	13
  2340   0002D2  EC66  F00B         	call	_MFRC522_Set_Bit
  2341   0002D6                     
  2342                           ;TAD_RFID.c: 477:                     i = 0xFF;
  2343   0002D6  686E               	setf	motor_RFID@i^0,c
  2344   0002D8  EF7E  F000         	goto	l3512
  2345   0002DC                     l3590:
  2346                           
  2347                           ;TAD_RFID.c: 482:                     n = MFRC522_Rd(0x04);
  2348   0002DC  0E04               	movlw	4
  2349   0002DE  EC94  F007         	call	_MFRC522_Rd
  2350   0002E2  6E6F               	movwf	motor_RFID@n^0,c
  2351   0002E4                     
  2352                           ;TAD_RFID.c: 483:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2353   0002E4  B06F               	btfsc	motor_RFID@n^0,0,c
  2354   0002E6  EF77  F001         	goto	u2851
  2355   0002EA  EF79  F001         	goto	u2850
  2356   0002EE                     u2851:
  2357   0002EE  EF87  F000         	goto	l3516
  2358   0002F2                     u2850:
  2359   0002F2  506F               	movf	motor_RFID@n^0,w,c
  2360   0002F4  1470               	andwf	motor_RFID@waitIRq^0,w,c
  2361   0002F6  0900               	iorlw	0
  2362   0002F8  A4D8               	btfss	status,2,c
  2363   0002FA  EF81  F001         	goto	u2861
  2364   0002FE  EF83  F001         	goto	u2860
  2365   000302                     u2861:
  2366   000302  EF87  F000         	goto	l3516
  2367   000306                     u2860:
  2368   000306  2E6E               	decfsz	motor_RFID@i^0,f,c
  2369   000308  EF95  F002         	goto	l412
  2370   00030C  EF87  F000         	goto	l3516
  2371   000310                     l3600:
  2372                           
  2373                           ;TAD_RFID.c: 489:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2374   000310  0E80               	movlw	128
  2375   000312  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  2376   000314  0E0D               	movlw	13
  2377   000316  EC2D  F00B         	call	_MFRC522_Clear_Bit
  2378   00031A  EFD9  F000         	goto	l3532
  2379   00031E                     l3604:
  2380                           
  2381                           ;TAD_RFID.c: 494:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2382   00031E  506E               	movf	motor_RFID@i^0,w,c
  2383   000320  B4D8               	btfsc	status,2,c
  2384   000322  EF95  F001         	goto	u2871
  2385   000326  EF97  F001         	goto	u2870
  2386   00032A                     u2871:
  2387   00032A  EFE6  F000         	goto	l372
  2388   00032E                     u2870:
  2389   00032E  0E06               	movlw	6
  2390   000330  EC94  F007         	call	_MFRC522_Rd
  2391   000334  6E4D               	movwf	??_motor_RFID^0,c
  2392   000336  0E1B               	movlw	27
  2393   000338  164D               	andwf	??_motor_RFID^0,f,c
  2394   00033A  A4D8               	btfss	status,2,c
  2395   00033C  EFA2  F001         	goto	u2881
  2396   000340  EFA4  F001         	goto	u2880
  2397   000344                     u2881:
  2398   000344  EFE6  F000         	goto	l372
  2399   000348                     u2880:
  2400   000348                     
  2401                           ;TAD_RFID.c: 496:                         UID[0] = MFRC522_Rd(0x09);
  2402   000348  0E09               	movlw	9
  2403   00034A  EC94  F007         	call	_MFRC522_Rd
  2404   00034E  6E53               	movwf	motor_RFID@UID^0,c
  2405                           
  2406                           ;TAD_RFID.c: 497:                         UID[1] = MFRC522_Rd(0x09);
  2407   000350  0E09               	movlw	9
  2408   000352  EC94  F007         	call	_MFRC522_Rd
  2409   000356  6E54               	movwf	(motor_RFID@UID+1)^0,c
  2410   000358  EFDD  F000         	goto	l3534
  2411   00035C                     l3612:
  2412                           
  2413                           ;TAD_RFID.c: 507:                     UID[2] = MFRC522_Rd(0x09);
  2414   00035C  0E09               	movlw	9
  2415   00035E  EC94  F007         	call	_MFRC522_Rd
  2416   000362  6E55               	movwf	(motor_RFID@UID+2)^0,c
  2417                           
  2418                           ;TAD_RFID.c: 508:                     UID[3] = MFRC522_Rd(0x09);
  2419   000364  0E09               	movlw	9
  2420   000366  EC94  F007         	call	_MFRC522_Rd
  2421   00036A  6E56               	movwf	(motor_RFID@UID+3)^0,c
  2422   00036C                     
  2423                           ;TAD_RFID.c: 509:                     substate = 13;
  2424   00036C  0E0D               	movlw	13
  2425   00036E  6E72               	movwf	motor_RFID@substate^0,c
  2426                           
  2427                           ;TAD_RFID.c: 510:                     break;
  2428   000370  EF95  F002         	goto	l412
  2429   000374                     l3616:
  2430                           
  2431                           ;TAD_RFID.c: 513:                     UID[4] = MFRC522_Rd(0x09);
  2432   000374  0E09               	movlw	9
  2433   000376  EC94  F007         	call	_MFRC522_Rd
  2434   00037A  6E57               	movwf	(motor_RFID@UID+4)^0,c
  2435   00037C                     
  2436                           ;TAD_RFID.c: 514:                     UID[5] = 0;
  2437   00037C  6A58               	clrf	(motor_RFID@UID+5)^0,c
  2438   00037E                     
  2439                           ;TAD_RFID.c: 515:                     substate = 14;
  2440   00037E  0E0E               	movlw	14
  2441   000380  6E72               	movwf	motor_RFID@substate^0,c
  2442                           
  2443                           ;TAD_RFID.c: 516:                     break;
  2444   000382  EF95  F002         	goto	l412
  2445   000386                     l3622:
  2446                           
  2447                           ;TAD_RFID.c: 519:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  2448   000386  5054               	movf	(motor_RFID@UID+1)^0,w,c
  2449   000388  1855               	xorwf	(motor_RFID@UID+2)^0,w,c
  2450   00038A  1856               	xorwf	(motor_RFID@UID+3)^0,w,c
  2451   00038C  1853               	xorwf	motor_RFID@UID^0,w,c
  2452   00038E  6E6B               	movwf	motor_RFID@checksum^0,c
  2453   000390                     
  2454                           ;TAD_RFID.c: 521:                     allZero = 1;
  2455   000390  0E01               	movlw	1
  2456   000392  6E6A               	movwf	motor_RFID@allZero^0,c
  2457   000394                     
  2458                           ;TAD_RFID.c: 522:                     substate = 15;
  2459   000394  0E0F               	movlw	15
  2460   000396  6E72               	movwf	motor_RFID@substate^0,c
  2461                           
  2462                           ;TAD_RFID.c: 523:                     break;
  2463   000398  EF95  F002         	goto	l412
  2464   00039C                     l3628:
  2465                           
  2466                           ;TAD_RFID.c: 526:                     if (UID[0] != 0 || UID[1] != 0) {
  2467   00039C  5053               	movf	motor_RFID@UID^0,w,c
  2468   00039E  A4D8               	btfss	status,2,c
  2469   0003A0  EFD4  F001         	goto	u2891
  2470   0003A4  EFD6  F001         	goto	u2890
  2471   0003A8                     u2891:
  2472   0003A8  EFDE  F001         	goto	l400
  2473   0003AC                     u2890:
  2474   0003AC  5054               	movf	(motor_RFID@UID+1)^0,w,c
  2475   0003AE  B4D8               	btfsc	status,2,c
  2476   0003B0  EFDC  F001         	goto	u2901
  2477   0003B4  EFDE  F001         	goto	u2900
  2478   0003B8                     u2901:
  2479   0003B8  EFDF  F001         	goto	l3632
  2480   0003BC                     u2900:
  2481   0003BC                     l400:
  2482                           
  2483                           ;TAD_RFID.c: 527:                         allZero = 0;
  2484   0003BC  6A6A               	clrf	motor_RFID@allZero^0,c
  2485   0003BE                     l3632:
  2486                           
  2487                           ;TAD_RFID.c: 529:                     substate = 16;
  2488   0003BE  0E10               	movlw	16
  2489   0003C0  6E72               	movwf	motor_RFID@substate^0,c
  2490                           
  2491                           ;TAD_RFID.c: 530:                     break;
  2492   0003C2  EF95  F002         	goto	l412
  2493   0003C6                     l3634:
  2494                           
  2495                           ;TAD_RFID.c: 533:                     if (UID[2] != 0 || UID[3] != 0) {
  2496   0003C6  5055               	movf	(motor_RFID@UID+2)^0,w,c
  2497   0003C8  A4D8               	btfss	status,2,c
  2498   0003CA  EFE9  F001         	goto	u2911
  2499   0003CE  EFEB  F001         	goto	u2910
  2500   0003D2                     u2911:
  2501   0003D2  EFF3  F001         	goto	l404
  2502   0003D6                     u2910:
  2503   0003D6  5056               	movf	(motor_RFID@UID+3)^0,w,c
  2504   0003D8  B4D8               	btfsc	status,2,c
  2505   0003DA  EFF1  F001         	goto	u2921
  2506   0003DE  EFF3  F001         	goto	u2920
  2507   0003E2                     u2921:
  2508   0003E2  EFF4  F001         	goto	l3638
  2509   0003E6                     u2920:
  2510   0003E6                     l404:
  2511                           
  2512                           ;TAD_RFID.c: 534:                         allZero = 0;
  2513   0003E6  6A6A               	clrf	motor_RFID@allZero^0,c
  2514   0003E8                     l3638:
  2515                           
  2516                           ;TAD_RFID.c: 536:                     substate = 17;
  2517   0003E8  0E11               	movlw	17
  2518   0003EA  6E72               	movwf	motor_RFID@substate^0,c
  2519                           
  2520                           ;TAD_RFID.c: 537:                     break;
  2521   0003EC  EF95  F002         	goto	l412
  2522   0003F0                     l3640:
  2523                           
  2524                           ;TAD_RFID.c: 540:                     if (checksum != UID[4] || allZero) {
  2525   0003F0  506B               	movf	motor_RFID@checksum^0,w,c
  2526   0003F2  1857               	xorwf	(motor_RFID@UID+4)^0,w,c
  2527   0003F4  A4D8               	btfss	status,2,c
  2528   0003F6  EFFF  F001         	goto	u2931
  2529   0003FA  EF01  F002         	goto	u2930
  2530   0003FE                     u2931:
  2531   0003FE  EFE6  F000         	goto	l372
  2532   000402                     u2930:
  2533   000402  506A               	movf	motor_RFID@allZero^0,w,c
  2534   000404  B4D8               	btfsc	status,2,c
  2535   000406  EF07  F002         	goto	u2941
  2536   00040A  EF09  F002         	goto	u2940
  2537   00040E                     u2941:
  2538   00040E  EF0B  F002         	goto	l3644
  2539   000412                     u2940:
  2540   000412  EFE6  F000         	goto	l372
  2541   000416                     l3644:
  2542                           
  2543                           ;TAD_RFID.c: 546:                         substate = 18;
  2544   000416  0E12               	movlw	18
  2545   000418  6E72               	movwf	motor_RFID@substate^0,c
  2546   00041A  EF95  F002         	goto	l412
  2547   00041E                     l3646:
  2548                           
  2549                           ;TAD_RFID.c: 551:                     sprintf(buffer, "UID: %02X%02X%02X%02X%02X\r\n", U
      +                          ID[0], UID[1], UID[2], UID[3], UID[4]);
  2550   00041E  0E94               	movlw	low motor_RFID@buffer
  2551   000420  6E34               	movwf	sprintf@s^0,c
  2552   000422  0E48               	movlw	low STR_5
  2553   000424  6E35               	movwf	sprintf@fmt^0,c
  2554   000426  0E1F               	movlw	high STR_5
  2555   000428  6E36               	movwf	(sprintf@fmt+1)^0,c
  2556   00042A  C053  F037         	movff	motor_RFID@UID,?_sprintf+3
  2557   00042E  6A38               	clrf	(?_sprintf+4)^0,c
  2558   000430  C054  F039         	movff	motor_RFID@UID+1,?_sprintf+5
  2559   000434  6A3A               	clrf	(?_sprintf+6)^0,c
  2560   000436  C055  F03B         	movff	motor_RFID@UID+2,?_sprintf+7
  2561   00043A  6A3C               	clrf	(?_sprintf+8)^0,c
  2562   00043C  C056  F03D         	movff	motor_RFID@UID+3,?_sprintf+9
  2563   000440  6A3E               	clrf	(?_sprintf+10)^0,c
  2564   000442  C057  F03F         	movff	motor_RFID@UID+4,?_sprintf+11
  2565   000446  6A40               	clrf	(?_sprintf+12)^0,c
  2566   000448  EC47  F00A         	call	_sprintf	;wreg free
  2567   00044C                     
  2568                           ;TAD_RFID.c: 552:                     Terminal_SendString(buffer);
  2569   00044C  0E94               	movlw	low motor_RFID@buffer
  2570   00044E  6E05               	movwf	Terminal_SendString@str^0,c
  2571   000450  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2572   000452  ECB6  F008         	call	_Terminal_SendString	;wreg free
  2573   000456                     
  2574                           ;TAD_RFID.c: 553:                     substate = 19;
  2575   000456  0E13               	movlw	19
  2576   000458  6E72               	movwf	motor_RFID@substate^0,c
  2577                           
  2578                           ;TAD_RFID.c: 554:                     break;
  2579   00045A  EF95  F002         	goto	l412
  2580   00045E                     l3652:
  2581                           
  2582                           ;TAD_RFID.c: 557:                     MFRC522_Wr(0x0D, 0x00);
  2583   00045E  0E00               	movlw	0
  2584   000460  6E0C               	movwf	MFRC522_Wr@value^0,c
  2585   000462  0E0D               	movlw	13
  2586   000464  EC40  F007         	call	_MFRC522_Wr
  2587   000468                     
  2588                           ;TAD_RFID.c: 558:                     state = 0;
  2589   000468  6A73               	clrf	motor_RFID@state^0,c
  2590   00046A  EFE3  F000         	goto	l3540
  2591   00046E                     l3660:
  2592   00046E  5072               	movf	motor_RFID@substate^0,w,c
  2593                           
  2594                           ; Switch size 1, requested type "simple"
  2595                           ; Number of cases is 20, Range of values is 0 to 19
  2596                           ; switch strategies available:
  2597                           ; Name         Instructions Cycles
  2598                           ; simple_byte           61    31 (average)
  2599                           ;	Chosen strategy is simple_byte
  2600   000470  0A00               	xorlw	0	; case 0
  2601   000472  B4D8               	btfsc	status,2,c
  2602   000474  EF21  F001         	goto	l3546
  2603   000478  0A01               	xorlw	1	; case 1
  2604   00047A  B4D8               	btfsc	status,2,c
  2605   00047C  EF2C  F001         	goto	l3554
  2606   000480  0A03               	xorlw	3	; case 2
  2607   000482  B4D8               	btfsc	status,2,c
  2608   000484  EF33  F001         	goto	l3558
  2609   000488  0A01               	xorlw	1	; case 3
  2610   00048A  B4D8               	btfsc	status,2,c
  2611   00048C  EF3E  F001         	goto	l3564
  2612   000490  0A07               	xorlw	7	; case 4
  2613   000492  B4D8               	btfsc	status,2,c
  2614   000494  EF45  F001         	goto	l3568
  2615   000498  0A01               	xorlw	1	; case 5
  2616   00049A  B4D8               	btfsc	status,2,c
  2617   00049C  EF4C  F001         	goto	l3572
  2618   0004A0  0A03               	xorlw	3	; case 6
  2619   0004A2  B4D8               	btfsc	status,2,c
  2620   0004A4  EF53  F001         	goto	l3576
  2621   0004A8  0A01               	xorlw	1	; case 7
  2622   0004AA  B4D8               	btfsc	status,2,c
  2623   0004AC  EF5F  F001         	goto	l3580
  2624   0004B0  0A0F               	xorlw	15	; case 8
  2625   0004B2  B4D8               	btfsc	status,2,c
  2626   0004B4  EF66  F001         	goto	l3584
  2627   0004B8  0A01               	xorlw	1	; case 9
  2628   0004BA  B4D8               	btfsc	status,2,c
  2629   0004BC  EF6E  F001         	goto	l3590
  2630   0004C0  0A03               	xorlw	3	; case 10
  2631   0004C2  B4D8               	btfsc	status,2,c
  2632   0004C4  EF88  F001         	goto	l3600
  2633   0004C8  0A01               	xorlw	1	; case 11
  2634   0004CA  B4D8               	btfsc	status,2,c
  2635   0004CC  EF8F  F001         	goto	l3604
  2636   0004D0  0A07               	xorlw	7	; case 12
  2637   0004D2  B4D8               	btfsc	status,2,c
  2638   0004D4  EFAE  F001         	goto	l3612
  2639   0004D8  0A01               	xorlw	1	; case 13
  2640   0004DA  B4D8               	btfsc	status,2,c
  2641   0004DC  EFBA  F001         	goto	l3616
  2642   0004E0  0A03               	xorlw	3	; case 14
  2643   0004E2  B4D8               	btfsc	status,2,c
  2644   0004E4  EFC3  F001         	goto	l3622
  2645   0004E8  0A01               	xorlw	1	; case 15
  2646   0004EA  B4D8               	btfsc	status,2,c
  2647   0004EC  EFCE  F001         	goto	l3628
  2648   0004F0  0A1F               	xorlw	31	; case 16
  2649   0004F2  B4D8               	btfsc	status,2,c
  2650   0004F4  EFE3  F001         	goto	l3634
  2651   0004F8  0A01               	xorlw	1	; case 17
  2652   0004FA  B4D8               	btfsc	status,2,c
  2653   0004FC  EFF8  F001         	goto	l3640
  2654   000500  0A03               	xorlw	3	; case 18
  2655   000502  B4D8               	btfsc	status,2,c
  2656   000504  EF0F  F002         	goto	l3646
  2657   000508  0A01               	xorlw	1	; case 19
  2658   00050A  B4D8               	btfsc	status,2,c
  2659   00050C  EF2F  F002         	goto	l3652
  2660   000510  EF95  F002         	goto	l412
  2661   000514                     l3664:
  2662   000514  5073               	movf	motor_RFID@state^0,w,c
  2663                           
  2664                           ; Switch size 1, requested type "simple"
  2665                           ; Number of cases is 2, Range of values is 0 to 1
  2666                           ; switch strategies available:
  2667                           ; Name         Instructions Cycles
  2668                           ; simple_byte            7     4 (average)
  2669                           ;	Chosen strategy is simple_byte
  2670   000516  0A00               	xorlw	0	; case 0
  2671   000518  B4D8               	btfsc	status,2,c
  2672   00051A  EFEA  F000         	goto	l3544
  2673   00051E  0A01               	xorlw	1	; case 1
  2674   000520  B4D8               	btfsc	status,2,c
  2675   000522  EF37  F002         	goto	l3660
  2676   000526  EF95  F002         	goto	l412
  2677   00052A                     l412:
  2678   00052A  0012               	return		;funcret
  2679   00052C                     __end_of_motor_RFID:
  2680                           	callstack 0
  2681                           
  2682 ;; *************** function _sprintf *****************
  2683 ;; Defined at:
  2684 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  s               1   51[COMRAM] PTR unsigned char 
  2687 ;;		 -> motor_RFID@buffer(50), ReadRFID_NoCooperatiu@buffer(50), 
  2688 ;;  fmt             2   52[COMRAM] PTR const unsigned char 
  2689 ;;		 -> STR_5(28), STR_3(5), 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  f              11   65[COMRAM] struct _IO_FILE
  2692 ;;  ret             2    0        int 
  2693 ;;  ap              1   64[COMRAM] PTR void [1]
  2694 ;;		 -> ?_sprintf(2), 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  2   51[COMRAM] int 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1
  2704 ;;      Params:        13       0       0
  2705 ;;      Locals:        12       0       0
  2706 ;;      Temps:          0       0       0
  2707 ;;      Totals:        25       0       0
  2708 ;;Total ram usage:       25 bytes
  2709 ;; Hardware stack levels used: 1
  2710 ;; Hardware stack levels required when called: 10
  2711 ;; This function calls:
  2712 ;;		_vfprintf
  2713 ;; This function is called by:
  2714 ;;		_motor_RFID
  2715 ;;		_ReadRFID_NoCooperatiu
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text2
  2720   00148E                     __ptext2:
  2721                           	callstack 0
  2722   00148E                     _sprintf:
  2723                           	callstack 19
  2724   00148E  0E37               	movlw	low (?_sprintf+3)
  2725   001490  6E41               	movwf	sprintf@ap^0,c
  2726   001492  C034  F042         	movff	sprintf@s,sprintf@f
  2727   001496  0E00               	movlw	0
  2728   001498  6E45               	movwf	(sprintf@f+3)^0,c
  2729   00149A  0E00               	movlw	0
  2730   00149C  6E44               	movwf	(sprintf@f+2)^0,c
  2731   00149E  0E00               	movlw	0
  2732   0014A0  6E4C               	movwf	(sprintf@f+10)^0,c
  2733   0014A2  0E00               	movlw	0
  2734   0014A4  6E4B               	movwf	(sprintf@f+9)^0,c
  2735   0014A6  0E42               	movlw	low sprintf@f
  2736   0014A8  6E2E               	movwf	vfprintf@fp^0,c
  2737   0014AA  C035  F02F         	movff	sprintf@fmt,vfprintf@fmt
  2738   0014AE  C036  F030         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2739   0014B2  0E41               	movlw	low sprintf@ap
  2740   0014B4  6E31               	movwf	vfprintf@ap^0,c
  2741   0014B6  ECEA  F009         	call	_vfprintf	;wreg free
  2742   0014BA  5034               	movf	sprintf@s^0,w,c
  2743   0014BC  2444               	addwf	(sprintf@f+2)^0,w,c
  2744   0014BE  6ED9               	movwf	fsr2l,c
  2745   0014C0  6ADA               	clrf	fsr2h,c
  2746   0014C2  6ADF               	clrf	indf2,c
  2747   0014C4  0012               	return		;funcret
  2748   0014C6                     __end_of_sprintf:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _vfprintf *****************
  2752 ;; Defined at:
  2753 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  2756 ;;		 -> sprintf@f(11), 
  2757 ;;  fmt             2   46[COMRAM] PTR const unsigned char 
  2758 ;;		 -> STR_5(28), STR_3(5), 
  2759 ;;  ap              1   48[COMRAM] PTR PTR void 
  2760 ;;		 -> sprintf@ap(1), 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  cfmt            2   49[COMRAM] PTR unsigned char 
  2763 ;;		 -> STR_5(28), STR_3(5), 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  2   45[COMRAM] int 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1
  2773 ;;      Params:         4       0       0
  2774 ;;      Locals:         2       0       0
  2775 ;;      Temps:          0       0       0
  2776 ;;      Totals:         6       0       0
  2777 ;;Total ram usage:        6 bytes
  2778 ;; Hardware stack levels used: 1
  2779 ;; Hardware stack levels required when called: 9
  2780 ;; This function calls:
  2781 ;;		_vfpfcnvrt
  2782 ;; This function is called by:
  2783 ;;		_sprintf
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text3
  2788   0013D4                     __ptext3:
  2789                           	callstack 0
  2790   0013D4                     _vfprintf:
  2791                           	callstack 19
  2792   0013D4                     
  2793                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2794   0013D4  C02F  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  2795   0013D8  C030  F033         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2796                           
  2797                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2798   0013DC  EFF8  F009         	goto	l3138
  2799   0013E0                     l3136:
  2800                           
  2801                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2802   0013E0  C02E  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  2803   0013E4  0E32               	movlw	low vfprintf@cfmt
  2804   0013E6  6E23               	movwf	vfpfcnvrt@fmt^0,c
  2805   0013E8  C031  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  2806   0013EC  ECAE  F003         	call	_vfpfcnvrt	;wreg free
  2807   0013F0                     l3138:
  2808                           
  2809                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2810   0013F0  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  2811   0013F4  C033  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2812   0013F8                     	if	0	;tblptru may be non-zero
  2813   0013F8                     	endif
  2814   0013F8                     	if	0	;tblptru may be non-zero
  2815   0013F8                     	endif
  2816   0013F8  0008               	tblrd		*
  2817   0013FA  50F5               	movf	tablat,w,c
  2818   0013FC  0900               	iorlw	0
  2819   0013FE  A4D8               	btfss	status,2,c
  2820   001400  EF04  F00A         	goto	u2371
  2821   001404  EF06  F00A         	goto	u2370
  2822   001408                     u2371:
  2823   001408  EFF0  F009         	goto	l3136
  2824   00140C                     u2370:
  2825   00140C                     
  2826                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2827   00140C  0E00               	movlw	0
  2828   00140E  6E2F               	movwf	(?_vfprintf+1)^0,c
  2829   001410  0E00               	movlw	0
  2830   001412  6E2E               	movwf	?_vfprintf^0,c
  2831   001414  0012               	return		;funcret
  2832   001416                     __end_of_vfprintf:
  2833                           	callstack 0
  2834                           
  2835 ;; *************** function _vfpfcnvrt *****************
  2836 ;; Defined at:
  2837 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  2840 ;;		 -> sprintf@f(11), 
  2841 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  2842 ;;		 -> vfprintf@cfmt(2), 
  2843 ;;  ap              1   35[COMRAM] PTR PTR void 
  2844 ;;		 -> sprintf@ap(1), 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  convarg         4   38[COMRAM] struct .
  2847 ;;  cp              2   43[COMRAM] PTR unsigned char 
  2848 ;;		 -> STR_5(28), STR_3(5), 
  2849 ;;  done            1   42[COMRAM] _Bool 
  2850 ;;  c               1    0        unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1
  2860 ;;      Params:         3       0       0
  2861 ;;      Locals:         7       0       0
  2862 ;;      Temps:          2       0       0
  2863 ;;      Totals:        12       0       0
  2864 ;;Total ram usage:       12 bytes
  2865 ;; Hardware stack levels used: 1
  2866 ;; Hardware stack levels required when called: 8
  2867 ;; This function calls:
  2868 ;;		_fputc
  2869 ;;		_read_prec_or_width
  2870 ;;		_xtoa
  2871 ;; This function is called by:
  2872 ;;		_vfprintf
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text4
  2877   00075C                     __ptext4:
  2878                           	callstack 0
  2879   00075C                     _vfpfcnvrt:
  2880                           	callstack 19
  2881   00075C                     
  2882                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2883   00075C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2884   00075E  6ED9               	movwf	fsr2l,c
  2885   000760  6ADA               	clrf	fsr2h,c
  2886   000762  CFDE FFF6          	movff	postinc2,tblptrl
  2887   000766  CFDD FFF7          	movff	postdec2,tblptrh
  2888   00076A                     	if	0	;tblptru may be non-zero
  2889   00076A                     	endif
  2890   00076A                     	if	0	;tblptru may be non-zero
  2891   00076A                     	endif
  2892   00076A  0008               	tblrd		*
  2893   00076C  50F5               	movf	tablat,w,c
  2894   00076E  0A25               	xorlw	37
  2895   000770  A4D8               	btfss	status,2,c
  2896   000772  EFBD  F003         	goto	u2101
  2897   000776  EFBF  F003         	goto	u2100
  2898   00077A                     u2101:
  2899   00077A  EF58  F004         	goto	l2956
  2900   00077E                     u2100:
  2901   00077E                     
  2902                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2903   00077E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2904   000780  6ED9               	movwf	fsr2l,c
  2905   000782  6ADA               	clrf	fsr2h,c
  2906   000784  2ADE               	incf	postinc2,f,c
  2907   000786  0E00               	movlw	0
  2908   000788  22DD               	addwfc	postdec2,f,c
  2909   00078A                     
  2910                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2911   00078A  0E00               	movlw	0
  2912   00078C  6E5E               	movwf	(_width+1)^0,c
  2913   00078E  0E00               	movlw	0
  2914   000790  6E5D               	movwf	_width^0,c
  2915   000792  C05D  F063         	movff	_width,_flags
  2916   000796                     
  2917                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2918   000796  685F               	setf	_prec^0,c
  2919   000798  6860               	setf	(_prec+1)^0,c
  2920   00079A                     
  2921                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2922   00079A  6A2B               	clrf	vfpfcnvrt@done^0,c
  2923                           
  2924                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2925   00079C  EFEC  F003         	goto	l2928
  2926   0007A0                     l2918:
  2927                           
  2928                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2929   0007A0  8263               	bsf	_flags^0,1,c
  2930   0007A2                     
  2931                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2932   0007A2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2933   0007A4  6ED9               	movwf	fsr2l,c
  2934   0007A6  6ADA               	clrf	fsr2h,c
  2935   0007A8  2ADE               	incf	postinc2,f,c
  2936   0007AA  0E00               	movlw	0
  2937   0007AC  22DD               	addwfc	postdec2,f,c
  2938                           
  2939                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2940   0007AE  EFEC  F003         	goto	l2928
  2941   0007B2                     l2922:
  2942                           
  2943                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2944   0007B2  0E01               	movlw	1
  2945   0007B4  6E2B               	movwf	vfpfcnvrt@done^0,c
  2946                           
  2947                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2948   0007B6  EFEC  F003         	goto	l2928
  2949   0007BA                     l2926:
  2950   0007BA  5023               	movf	vfpfcnvrt@fmt^0,w,c
  2951   0007BC  6ED9               	movwf	fsr2l,c
  2952   0007BE  6ADA               	clrf	fsr2h,c
  2953   0007C0  CFDE FFF6          	movff	postinc2,tblptrl
  2954   0007C4  CFDD FFF7          	movff	postdec2,tblptrh
  2955   0007C8                     	if	0	;tblptru may be non-zero
  2956   0007C8                     	endif
  2957   0007C8                     	if	0	;tblptru may be non-zero
  2958   0007C8                     	endif
  2959   0007C8  0008               	tblrd		*
  2960   0007CA  50F5               	movf	tablat,w,c
  2961                           
  2962                           ; Switch size 1, requested type "simple"
  2963                           ; Number of cases is 1, Range of values is 48 to 48
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte            4     3 (average)
  2967                           ;	Chosen strategy is simple_byte
  2968   0007CC  0A30               	xorlw	48	; case 48
  2969   0007CE  B4D8               	btfsc	status,2,c
  2970   0007D0  EFD0  F003         	goto	l2918
  2971   0007D4  EFD9  F003         	goto	l2922
  2972   0007D8                     l2928:
  2973                           
  2974                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2975   0007D8  502B               	movf	vfpfcnvrt@done^0,w,c
  2976   0007DA  B4D8               	btfsc	status,2,c
  2977   0007DC  EFF2  F003         	goto	u2111
  2978   0007E0  EFF4  F003         	goto	u2110
  2979   0007E4                     u2111:
  2980   0007E4  EFDD  F003         	goto	l2926
  2981   0007E8                     u2110:
  2982   0007E8                     
  2983                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2984   0007E8  C023  F002         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2985   0007EC  C024  F003         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2986   0007F0  EC95  F006         	call	_read_prec_or_width	;wreg free
  2987   0007F4  C002  F05D         	movff	?_read_prec_or_width,_width
  2988   0007F8  C003  F05E         	movff	?_read_prec_or_width+1,_width+1
  2989   0007FC                     
  2990                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2991   0007FC  BE5E               	btfsc	(_width+1)^0,7,c
  2992   0007FE  EF05  F004         	goto	u2120
  2993   000802  EF03  F004         	goto	u2121
  2994   000806                     u2121:
  2995   000806  EF0A  F004         	goto	l2936
  2996   00080A                     u2120:
  2997   00080A                     
  2998                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2999   00080A  8063               	bsf	_flags^0,0,c
  3000                           
  3001                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  3002   00080C  6C5D               	negf	_width^0,c
  3003   00080E  1E5E               	comf	(_width+1)^0,f,c
  3004   000810  B0D8               	btfsc	status,0,c
  3005   000812  2A5E               	incf	(_width+1)^0,f,c
  3006   000814                     l2936:
  3007                           
  3008                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  3009   000814  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3010   000816  6ED9               	movwf	fsr2l,c
  3011   000818  6ADA               	clrf	fsr2h,c
  3012   00081A  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  3013   00081E  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  3014   000822  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3015   000826  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3016   00082A                     	if	0	;tblptru may be non-zero
  3017   00082A                     	endif
  3018   00082A                     	if	0	;tblptru may be non-zero
  3019   00082A                     	endif
  3020   00082A  0008               	tblrd		*
  3021   00082C  50F5               	movf	tablat,w,c
  3022   00082E  0A58               	xorlw	88
  3023   000830  A4D8               	btfss	status,2,c
  3024   000832  EF1D  F004         	goto	u2131
  3025   000836  EF1F  F004         	goto	u2130
  3026   00083A                     u2131:
  3027   00083A  EF50  F004         	goto	l2952
  3028   00083E                     u2130:
  3029   00083E                     
  3030                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  3031   00083E  5024               	movf	vfpfcnvrt@ap^0,w,c
  3032   000840  6ED9               	movwf	fsr2l,c
  3033   000842  6ADA               	clrf	fsr2h,c
  3034   000844  0E02               	movlw	2
  3035   000846  26DF               	addwf	indf2,f,c
  3036   000848  5CDF               	subwf	indf2,w,c
  3037   00084A  6ED9               	movwf	fsr2l,c
  3038   00084C  6ADA               	clrf	fsr2h,c
  3039   00084E  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  3040   000852  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  3041   000856                     
  3042                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  3043   000856  0E01               	movlw	1
  3044   000858  242C               	addwf	vfpfcnvrt@cp^0,w,c
  3045   00085A  6E25               	movwf	??_vfpfcnvrt^0,c
  3046   00085C  0E00               	movlw	0
  3047   00085E  202D               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3048   000860  6E26               	movwf	(??_vfpfcnvrt+1)^0,c
  3049   000862  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3050   000864  6ED9               	movwf	fsr2l,c
  3051   000866  6ADA               	clrf	fsr2h,c
  3052   000868  C025  FFDE         	movff	??_vfpfcnvrt,postinc2
  3053   00086C  C026  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3054                           
  3055                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3056   000870  EF44  F004         	goto	l2950
  3057   000874                     l2944:
  3058                           
  3059                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (void) xtoa(fp,convarg.uint);;	Return value of _vfpfcnvrt is never used
  3060   000874  C022  F016         	movff	vfpfcnvrt@fp,xtoa@fp
  3061   000878  C027  F017         	movff	vfpfcnvrt@convarg,xtoa@d
  3062   00087C  C028  F018         	movff	vfpfcnvrt@convarg+1,xtoa@d+1
  3063   000880  EC6A  F004         	call	_xtoa	;wreg free
  3064   000884  EF69  F004         	goto	l1332
  3065   000888                     l2950:
  3066   000888  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3067   00088C  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3068   000890                     	if	0	;tblptru may be non-zero
  3069   000890                     	endif
  3070   000890                     	if	0	;tblptru may be non-zero
  3071   000890                     	endif
  3072   000890  0008               	tblrd		*
  3073   000892  50F5               	movf	tablat,w,c
  3074                           
  3075                           ; Switch size 1, requested type "simple"
  3076                           ; Number of cases is 1, Range of values is 88 to 88
  3077                           ; switch strategies available:
  3078                           ; Name         Instructions Cycles
  3079                           ; simple_byte            4     3 (average)
  3080                           ;	Chosen strategy is simple_byte
  3081   000894  0A58               	xorlw	88	; case 88
  3082   000896  B4D8               	btfsc	status,2,c
  3083   000898  EF3A  F004         	goto	l2944
  3084   00089C  EF50  F004         	goto	l2952
  3085   0008A0                     l2952:
  3086                           
  3087                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3088   0008A0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3089   0008A2  6ED9               	movwf	fsr2l,c
  3090   0008A4  6ADA               	clrf	fsr2h,c
  3091   0008A6  2ADE               	incf	postinc2,f,c
  3092   0008A8  0E00               	movlw	0
  3093   0008AA  22DD               	addwfc	postdec2,f,c
  3094   0008AC  EF69  F004         	goto	l1332
  3095   0008B0                     l2956:
  3096                           
  3097                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3098   0008B0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3099   0008B2  6ED9               	movwf	fsr2l,c
  3100   0008B4  6ADA               	clrf	fsr2h,c
  3101   0008B6  CFDE FFF6          	movff	postinc2,tblptrl
  3102   0008BA  CFDD FFF7          	movff	postdec2,tblptrh
  3103   0008BE                     	if	0	;tblptru may be non-zero
  3104   0008BE                     	endif
  3105   0008BE                     	if	0	;tblptru may be non-zero
  3106   0008BE                     	endif
  3107   0008BE  0008               	tblrd		*
  3108   0008C0  50F5               	movf	tablat,w,c
  3109   0008C2  6E02               	movwf	fputc@c^0,c
  3110   0008C4  6A03               	clrf	(fputc@c+1)^0,c
  3111   0008C6  C022  F004         	movff	vfpfcnvrt@fp,fputc@fp
  3112   0008CA  ECEB  F006         	call	_fputc	;wreg free
  3113   0008CE  EF50  F004         	goto	l2952
  3114   0008D2                     l1332:
  3115   0008D2  0012               	return		;funcret
  3116   0008D4                     __end_of_vfpfcnvrt:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _xtoa *****************
  3120 ;; Defined at:
  3121 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  3124 ;;		 -> sprintf@f(11), 
  3125 ;;  d               2   22[COMRAM] unsigned int 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               2   31[COMRAM] int 
  3128 ;;  w               2   28[COMRAM] int 
  3129 ;;  c               1   30[COMRAM] unsigned char 
  3130 ;;  p               1   27[COMRAM] _Bool 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1
  3140 ;;      Params:         3       0       0
  3141 ;;      Locals:         6       0       0
  3142 ;;      Temps:          3       0       0
  3143 ;;      Totals:        12       0       0
  3144 ;;Total ram usage:       12 bytes
  3145 ;; Hardware stack levels used: 1
  3146 ;; Hardware stack levels required when called: 7
  3147 ;; This function calls:
  3148 ;;		_pad
  3149 ;; This function is called by:
  3150 ;;		_vfpfcnvrt
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text5
  3155   0008D4                     __ptext5:
  3156                           	callstack 0
  3157   0008D4                     _xtoa:
  3158                           	callstack 19
  3159   0008D4                     
  3160                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1055: static void
      +                           xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1059:  char c;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 
      +                          1063:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c
      +                          : 1067:  _Bool p = 1;
  3161   0008D4  0E01               	movlw	1
  3162   0008D6  6E1C               	movwf	xtoa@p^0,c
  3163   0008D8                     
  3164                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  3165   0008D8  C05D  F01D         	movff	_width,xtoa@w
  3166   0008DC  C05E  F01E         	movff	_width+1,xtoa@w+1
  3167                           
  3168                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  3169   0008E0  0E00               	movlw	0
  3170   0008E2  6E21               	movwf	(xtoa@i+1)^0,c
  3171   0008E4  0E1F               	movlw	31
  3172   0008E6  6E20               	movwf	xtoa@i^0,c
  3173   0008E8                     
  3174                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  3175   0008E8  0100               	movlb	0	; () banked
  3176   0008EA  6BE5               	clrf	(_dbuf+31)& (0+255),b
  3177                           
  3178                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3179   0008EC  EFA6  F004         	goto	l2824
  3180   0008F0                     l2806:
  3181                           
  3182                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1107:         --i;
  3183   0008F0  0620               	decf	xtoa@i^0,f,c
  3184   0008F2  A0D8               	btfss	status,0,c
  3185   0008F4  0621               	decf	(xtoa@i+1)^0,f,c
  3186   0008F6                     
  3187                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  3188   0008F6  5017               	movf	xtoa@d^0,w,c
  3189   0008F8  0B0F               	andlw	15
  3190   0008FA  6E1F               	movwf	xtoa@c^0,c
  3191   0008FC                     
  3192                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  3193   0008FC  0E0A               	movlw	10
  3194   0008FE  601F               	cpfslt	xtoa@c^0,c
  3195   000900  EF84  F004         	goto	u1981
  3196   000904  EF86  F004         	goto	u1980
  3197   000908                     u1981:
  3198   000908  EF8A  F004         	goto	l2814
  3199   00090C                     u1980:
  3200   00090C                     
  3201                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  3202   00090C  0E30               	movlw	48
  3203   00090E  261F               	addwf	xtoa@c^0,f,c
  3204                           
  3205                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1111:   }
  3206   000910  EF8C  F004         	goto	l2816
  3207   000914                     l2814:
  3208                           
  3209                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  3210   000914  0E37               	movlw	55
  3211   000916  261F               	addwf	xtoa@c^0,f,c
  3212   000918                     l2816:
  3213                           
  3214                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  3215   000918  5020               	movf	xtoa@i^0,w,c
  3216   00091A  0FC6               	addlw	low _dbuf
  3217   00091C  6ED9               	movwf	fsr2l,c
  3218   00091E  6ADA               	clrf	fsr2h,c
  3219   000920  C01F  FFDF         	movff	xtoa@c,indf2
  3220   000924                     
  3221                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  3222   000924  6A1C               	clrf	xtoa@p^0,c
  3223   000926                     
  3224                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  3225   000926  061D               	decf	xtoa@w^0,f,c
  3226   000928  A0D8               	btfss	status,0,c
  3227   00092A  061E               	decf	(xtoa@w+1)^0,f,c
  3228   00092C                     
  3229                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  3230   00092C  C017  F019         	movff	xtoa@d,??_xtoa
  3231   000930  C018  F01A         	movff	xtoa@d+1,??_xtoa+1
  3232   000934  0E04               	movlw	4
  3233   000936  6E1B               	movwf	(??_xtoa+2)^0,c
  3234   000938                     u1995:
  3235   000938  90D8               	bcf	status,0,c
  3236   00093A  321A               	rrcf	(??_xtoa+1)^0,f,c
  3237   00093C  3219               	rrcf	??_xtoa^0,f,c
  3238   00093E  2E1B               	decfsz	(??_xtoa+2)^0,f,c
  3239   000940  EF9C  F004         	goto	u1995
  3240   000944  C019  F017         	movff	??_xtoa,xtoa@d
  3241   000948  C01A  F018         	movff	??_xtoa+1,xtoa@d+1
  3242   00094C                     l2824:
  3243                           
  3244                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  3245   00094C  BE21               	btfsc	(xtoa@i+1)^0,7,c
  3246   00094E  EFB2  F004         	goto	u2001
  3247   000952  5021               	movf	(xtoa@i+1)^0,w,c
  3248   000954  E109               	bnz	u2000
  3249   000956  0E02               	movlw	2
  3250   000958  5C20               	subwf	xtoa@i^0,w,c
  3251   00095A  A0D8               	btfss	status,0,c
  3252   00095C  EFB2  F004         	goto	u2001
  3253   000960  EFB4  F004         	goto	u2000
  3254   000964                     u2001:
  3255   000964  EFD9  F004         	goto	l2834
  3256   000968                     u2000:
  3257   000968  5017               	movf	xtoa@d^0,w,c
  3258   00096A  1018               	iorwf	(xtoa@d+1)^0,w,c
  3259   00096C  A4D8               	btfss	status,2,c
  3260   00096E  EFBB  F004         	goto	u2011
  3261   000972  EFBD  F004         	goto	u2010
  3262   000976                     u2011:
  3263   000976  EF78  F004         	goto	l2806
  3264   00097A                     u2010:
  3265   00097A  501C               	movf	xtoa@p^0,w,c
  3266   00097C  A4D8               	btfss	status,2,c
  3267   00097E  EFC3  F004         	goto	u2021
  3268   000982  EFC5  F004         	goto	u2020
  3269   000986                     u2021:
  3270   000986  EF78  F004         	goto	l2806
  3271   00098A                     u2020:
  3272   00098A  BE1E               	btfsc	(xtoa@w+1)^0,7,c
  3273   00098C  EFD0  F004         	goto	u2031
  3274   000990  501E               	movf	(xtoa@w+1)^0,w,c
  3275   000992  E108               	bnz	u2030
  3276   000994  041D               	decf	xtoa@w^0,w,c
  3277   000996  A0D8               	btfss	status,0,c
  3278   000998  EFD0  F004         	goto	u2031
  3279   00099C  EFD2  F004         	goto	u2030
  3280   0009A0                     u2031:
  3281   0009A0  EFD9  F004         	goto	l2834
  3282   0009A4                     u2030:
  3283   0009A4  B263               	btfsc	_flags^0,1,c
  3284   0009A6  EFD7  F004         	goto	u2041
  3285   0009AA  EFD9  F004         	goto	u2040
  3286   0009AE                     u2041:
  3287   0009AE  EF78  F004         	goto	l2806
  3288   0009B2                     u2040:
  3289   0009B2                     l2834:
  3290                           
  3291                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  3292   0009B2  C016  F00F         	movff	xtoa@fp,pad@fp
  3293   0009B6  5020               	movf	xtoa@i^0,w,c
  3294   0009B8  0FC6               	addlw	low _dbuf
  3295   0009BA  6E10               	movwf	pad@buf^0,c
  3296   0009BC  C01D  F011         	movff	xtoa@w,pad@p
  3297   0009C0  C01E  F012         	movff	xtoa@w+1,pad@p+1
  3298   0009C4  EC71  F008         	call	_pad	;wreg free
  3299   0009C8  0012               	return		;funcret
  3300   0009CA                     __end_of_xtoa:
  3301                           	callstack 0
  3302                           
  3303 ;; *************** function _pad *****************
  3304 ;; Defined at:
  3305 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  3308 ;;		 -> sprintf@f(11), 
  3309 ;;  buf             1   15[COMRAM] PTR unsigned char 
  3310 ;;		 -> dbuf(32), 
  3311 ;;  p               2   16[COMRAM] int 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  i               2   19[COMRAM] int 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1
  3323 ;;      Params:         4       0       0
  3324 ;;      Locals:         2       0       0
  3325 ;;      Temps:          1       0       0
  3326 ;;      Totals:         7       0       0
  3327 ;;Total ram usage:        7 bytes
  3328 ;; Hardware stack levels used: 1
  3329 ;; Hardware stack levels required when called: 6
  3330 ;; This function calls:
  3331 ;;		_fputc
  3332 ;;		_fputs
  3333 ;; This function is called by:
  3334 ;;		_xtoa
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text6
  3339   0010E2                     __ptext6:
  3340                           	callstack 0
  3341   0010E2                     _pad:
  3342                           	callstack 19
  3343   0010E2                     
  3344                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  3345   0010E2  A063               	btfss	_flags^0,0,c
  3346   0010E4  EF76  F008         	goto	u1671
  3347   0010E8  EF78  F008         	goto	u1670
  3348   0010EC                     u1671:
  3349   0010EC  EF7E  F008         	goto	l2680
  3350   0010F0                     u1670:
  3351   0010F0                     
  3352                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  3353   0010F0  C010  F00A         	movff	pad@buf,fputs@s
  3354   0010F4  C00F  F00B         	movff	pad@fp,fputs@fp
  3355   0010F8  EC29  F00A         	call	_fputs	;wreg free
  3356   0010FC                     l2680:
  3357                           
  3358                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  3359   0010FC  BE12               	btfsc	(pad@p+1)^0,7,c
  3360   0010FE  EF85  F008         	goto	u1680
  3361   001102  EF83  F008         	goto	u1681
  3362   001106                     u1681:
  3363   001106  EF89  F008         	goto	l1290
  3364   00110A                     u1680:
  3365   00110A                     
  3366                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  3367   00110A  0E00               	movlw	0
  3368   00110C  6E12               	movwf	(pad@p+1)^0,c
  3369   00110E  0E00               	movlw	0
  3370   001110  6E11               	movwf	pad@p^0,c
  3371   001112                     l1290:
  3372                           
  3373                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  3374   001112  0E00               	movlw	0
  3375   001114  6E15               	movwf	(pad@i+1)^0,c
  3376   001116  0E00               	movlw	0
  3377   001118  6E14               	movwf	pad@i^0,c
  3378                           
  3379                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3380   00111A  EF99  F008         	goto	l2688
  3381   00111E                     l2684:
  3382                           
  3383                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3384   00111E  0E00               	movlw	0
  3385   001120  6E03               	movwf	(fputc@c+1)^0,c
  3386   001122  0E20               	movlw	32
  3387   001124  6E02               	movwf	fputc@c^0,c
  3388   001126  C00F  F004         	movff	pad@fp,fputc@fp
  3389   00112A  ECEB  F006         	call	_fputc	;wreg free
  3390   00112E                     
  3391                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3392   00112E  4A14               	infsnz	pad@i^0,f,c
  3393   001130  2A15               	incf	(pad@i+1)^0,f,c
  3394   001132                     l2688:
  3395                           
  3396                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3397   001132  5011               	movf	pad@p^0,w,c
  3398   001134  5C14               	subwf	pad@i^0,w,c
  3399   001136  5015               	movf	(pad@i+1)^0,w,c
  3400   001138  0A80               	xorlw	128
  3401   00113A  6E13               	movwf	??_pad^0,c
  3402   00113C  5012               	movf	(pad@p+1)^0,w,c
  3403   00113E  0A80               	xorlw	128
  3404   001140  5813               	subwfb	??_pad^0,w,c
  3405   001142  A0D8               	btfss	status,0,c
  3406   001144  EFA6  F008         	goto	u1691
  3407   001148  EFA8  F008         	goto	u1690
  3408   00114C                     u1691:
  3409   00114C  EF8F  F008         	goto	l2684
  3410   001150                     u1690:
  3411   001150                     
  3412                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3413   001150  B063               	btfsc	_flags^0,0,c
  3414   001152  EFAD  F008         	goto	u1701
  3415   001156  EFAF  F008         	goto	u1700
  3416   00115A                     u1701:
  3417   00115A  EFB5  F008         	goto	l1295
  3418   00115E                     u1700:
  3419   00115E                     
  3420                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3421   00115E  C010  F00A         	movff	pad@buf,fputs@s
  3422   001162  C00F  F00B         	movff	pad@fp,fputs@fp
  3423   001166  EC29  F00A         	call	_fputs	;wreg free
  3424   00116A                     l1295:
  3425   00116A  0012               	return		;funcret
  3426   00116C                     __end_of_pad:
  3427                           	callstack 0
  3428                           
  3429 ;; *************** function _fputs *****************
  3430 ;; Defined at:
  3431 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  s               1    9[COMRAM] PTR const unsigned char 
  3434 ;;		 -> dbuf(32), 
  3435 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  3436 ;;		 -> sprintf@f(11), 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  i               2   12[COMRAM] int 
  3439 ;;  c               1   11[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  2    9[COMRAM] int 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1
  3449 ;;      Params:         2       0       0
  3450 ;;      Locals:         3       0       0
  3451 ;;      Temps:          0       0       0
  3452 ;;      Totals:         5       0       0
  3453 ;;Total ram usage:        5 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 5
  3456 ;; This function calls:
  3457 ;;		_fputc
  3458 ;; This function is called by:
  3459 ;;		_pad
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text7
  3464   001452                     __ptext7:
  3465                           	callstack 0
  3466   001452                     _fputs:
  3467                           	callstack 19
  3468   001452  0E00               	movlw	0
  3469   001454  6E0E               	movwf	(fputs@i+1)^0,c
  3470   001456  0E00               	movlw	0
  3471   001458  6E0D               	movwf	fputs@i^0,c
  3472   00145A  EF38  F00A         	goto	l2668
  3473   00145E                     l2664:
  3474   00145E  C00C  F002         	movff	fputs@c,fputc@c
  3475   001462  6A03               	clrf	(fputc@c+1)^0,c
  3476   001464  C00B  F004         	movff	fputs@fp,fputc@fp
  3477   001468  ECEB  F006         	call	_fputc	;wreg free
  3478   00146C  4A0D               	infsnz	fputs@i^0,f,c
  3479   00146E  2A0E               	incf	(fputs@i+1)^0,f,c
  3480   001470                     l2668:
  3481   001470  500A               	movf	fputs@s^0,w,c
  3482   001472  240D               	addwf	fputs@i^0,w,c
  3483   001474  6ED9               	movwf	fsr2l,c
  3484   001476  6ADA               	clrf	fsr2h,c
  3485   001478  50DF               	movf	indf2,w,c
  3486   00147A  6E0C               	movwf	fputs@c^0,c
  3487   00147C  500C               	movf	fputs@c^0,w,c
  3488   00147E  A4D8               	btfss	status,2,c
  3489   001480  EF44  F00A         	goto	u1651
  3490   001484  EF46  F00A         	goto	u1650
  3491   001488                     u1651:
  3492   001488  EF2F  F00A         	goto	l2664
  3493   00148C                     u1650:
  3494   00148C  0012               	return		;funcret
  3495   00148E                     __end_of_fputs:
  3496                           	callstack 0
  3497                           
  3498 ;; *************** function _fputc *****************
  3499 ;; Defined at:
  3500 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  c               2    1[COMRAM] int 
  3503 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  3504 ;;		 -> sprintf@f(11), 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  2    1[COMRAM] int 
  3509 ;; Registers used:
  3510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1
  3516 ;;      Params:         3       0       0
  3517 ;;      Locals:         0       0       0
  3518 ;;      Temps:          5       0       0
  3519 ;;      Totals:         8       0       0
  3520 ;;Total ram usage:        8 bytes
  3521 ;; Hardware stack levels used: 1
  3522 ;; Hardware stack levels required when called: 4
  3523 ;; This function calls:
  3524 ;;		_putch
  3525 ;; This function is called by:
  3526 ;;		_pad
  3527 ;;		_vfpfcnvrt
  3528 ;;		_fputs
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text8
  3533   000DD6                     __ptext8:
  3534                           	callstack 0
  3535   000DD6                     _fputc:
  3536                           	callstack 19
  3537   000DD6  5004               	movf	fputc@fp^0,w,c
  3538   000DD8  B4D8               	btfsc	status,2,c
  3539   000DDA  EFF1  F006         	goto	u1611
  3540   000DDE  EFF3  F006         	goto	u1610
  3541   000DE2                     u1611:
  3542   000DE2  EFFB  F006         	goto	l2652
  3543   000DE6                     u1610:
  3544   000DE6  5004               	movf	fputc@fp^0,w,c
  3545   000DE8  A4D8               	btfss	status,2,c
  3546   000DEA  EFF9  F006         	goto	u1621
  3547   000DEE  EFFB  F006         	goto	u1620
  3548   000DF2                     u1621:
  3549   000DF2  EF00  F007         	goto	l2654
  3550   000DF6                     u1620:
  3551   000DF6                     l2652:
  3552   000DF6  5002               	movf	fputc@c^0,w,c
  3553   000DF8  ECA3  F00B         	call	_putch
  3554   000DFC  EF3F  F007         	goto	l1351
  3555   000E00                     l2654:
  3556   000E00  5004               	movf	fputc@fp^0,w,c
  3557   000E02  6ED9               	movwf	fsr2l,c
  3558   000E04  6ADA               	clrf	fsr2h,c
  3559   000E06  0E09               	movlw	9
  3560   000E08  26D9               	addwf	fsr2l,f,c
  3561   000E0A  50DE               	movf	postinc2,w,c
  3562   000E0C  10DE               	iorwf	postinc2,w,c
  3563   000E0E  B4D8               	btfsc	status,2,c
  3564   000E10  EF0C  F007         	goto	u1631
  3565   000E14  EF0E  F007         	goto	u1630
  3566   000E18                     u1631:
  3567   000E18  EF27  F007         	goto	l2658
  3568   000E1C                     u1630:
  3569   000E1C  5004               	movf	fputc@fp^0,w,c
  3570   000E1E  6ED9               	movwf	fsr2l,c
  3571   000E20  6ADA               	clrf	fsr2h,c
  3572   000E22  0E09               	movlw	9
  3573   000E24  26D9               	addwf	fsr2l,f,c
  3574   000E26  5004               	movf	fputc@fp^0,w,c
  3575   000E28  6EE1               	movwf	fsr1l,c
  3576   000E2A  6AE2               	clrf	fsr1h,c
  3577   000E2C  0E02               	movlw	2
  3578   000E2E  26E1               	addwf	fsr1l,f,c
  3579   000E30  50DE               	movf	postinc2,w,c
  3580   000E32  5CE6               	subwf	postinc1,w,c
  3581   000E34  50E6               	movf	postinc1,w,c
  3582   000E36  0A80               	xorlw	128
  3583   000E38  6E09               	movwf	(??_fputc+4)^0,c
  3584   000E3A  50DE               	movf	postinc2,w,c
  3585   000E3C  0A80               	xorlw	128
  3586   000E3E  5809               	subwfb	(??_fputc+4)^0,w,c
  3587   000E40  B0D8               	btfsc	status,0,c
  3588   000E42  EF25  F007         	goto	u1641
  3589   000E46  EF27  F007         	goto	u1640
  3590   000E4A                     u1641:
  3591   000E4A  EF3F  F007         	goto	l1351
  3592   000E4E                     u1640:
  3593   000E4E                     l2658:
  3594   000E4E  5004               	movf	fputc@fp^0,w,c
  3595   000E50  6ED9               	movwf	fsr2l,c
  3596   000E52  6ADA               	clrf	fsr2h,c
  3597   000E54  0E02               	movlw	2
  3598   000E56  26D9               	addwf	fsr2l,f,c
  3599   000E58  50DF               	movf	indf2,w,c
  3600   000E5A  6E05               	movwf	??_fputc^0,c
  3601   000E5C  5004               	movf	fputc@fp^0,w,c
  3602   000E5E  6ED9               	movwf	fsr2l,c
  3603   000E60  6ADA               	clrf	fsr2h,c
  3604   000E62  50DF               	movf	indf2,w,c
  3605   000E64  2405               	addwf	??_fputc^0,w,c
  3606   000E66  6ED9               	movwf	fsr2l,c
  3607   000E68  6ADA               	clrf	fsr2h,c
  3608   000E6A  C002  FFDF         	movff	fputc@c,indf2
  3609   000E6E  5004               	movf	fputc@fp^0,w,c
  3610   000E70  6ED9               	movwf	fsr2l,c
  3611   000E72  6ADA               	clrf	fsr2h,c
  3612   000E74  0E02               	movlw	2
  3613   000E76  26D9               	addwf	fsr2l,f,c
  3614   000E78  2ADE               	incf	postinc2,f,c
  3615   000E7A  0E00               	movlw	0
  3616   000E7C  22DD               	addwfc	postdec2,f,c
  3617   000E7E                     l1351:
  3618   000E7E  0012               	return		;funcret
  3619   000E80                     __end_of_fputc:
  3620                           	callstack 0
  3621                           
  3622 ;; *************** function _putch *****************
  3623 ;; Defined at:
  3624 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  c               1    wreg     unsigned char 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  c               1    0[COMRAM] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1
  3638 ;;      Params:         0       0       0
  3639 ;;      Locals:         0       0       0
  3640 ;;      Temps:          0       0       0
  3641 ;;      Totals:         0       0       0
  3642 ;;Total ram usage:        0 bytes
  3643 ;; Hardware stack levels used: 1
  3644 ;; Hardware stack levels required when called: 3
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_fputc
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text9
  3653   001746                     __ptext9:
  3654                           	callstack 0
  3655   001746                     _putch:
  3656                           	callstack 19
  3657   001746  0012               	return		;funcret
  3658   001748                     __end_of_putch:
  3659                           	callstack 0
  3660                           
  3661 ;; *************** function _read_prec_or_width *****************
  3662 ;; Defined at:
  3663 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  fmt             1    1[COMRAM] PTR PTR const unsigned c
  3666 ;;		 -> vfprintf@cfmt(2), 
  3667 ;;  ap              1    2[COMRAM] PTR PTR void [1]
  3668 ;;		 -> sprintf@ap(1), 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  c               1    5[COMRAM] unsigned char 
  3671 ;;  n               2    6[COMRAM] int 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  2    1[COMRAM] int 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1
  3681 ;;      Params:         2       0       0
  3682 ;;      Locals:         3       0       0
  3683 ;;      Temps:          2       0       0
  3684 ;;      Totals:         7       0       0
  3685 ;;Total ram usage:        7 bytes
  3686 ;; Hardware stack levels used: 1
  3687 ;; Hardware stack levels required when called: 3
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_vfpfcnvrt
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text10
  3696   000D2A                     __ptext10:
  3697                           	callstack 0
  3698   000D2A                     _read_prec_or_width:
  3699                           	callstack 23
  3700   000D2A                     
  3701                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  3702   000D2A  0E00               	movlw	0
  3703   000D2C  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3704   000D2E  0E00               	movlw	0
  3705   000D30  6E07               	movwf	read_prec_or_width@n^0,c
  3706   000D32                     
  3707                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  3708   000D32  5002               	movf	read_prec_or_width@fmt^0,w,c
  3709   000D34  6ED9               	movwf	fsr2l,c
  3710   000D36  6ADA               	clrf	fsr2h,c
  3711   000D38  CFDE FFF6          	movff	postinc2,tblptrl
  3712   000D3C  CFDD FFF7          	movff	postdec2,tblptrh
  3713   000D40                     	if	0	;tblptru may be non-zero
  3714   000D40                     	endif
  3715   000D40                     	if	0	;tblptru may be non-zero
  3716   000D40                     	endif
  3717   000D40  0008               	tblrd		*
  3718   000D42  50F5               	movf	tablat,w,c
  3719   000D44  0A2A               	xorlw	42
  3720   000D46  A4D8               	btfss	status,2,c
  3721   000D48  EFA8  F006         	goto	u2051
  3722   000D4C  EFAA  F006         	goto	u2050
  3723   000D50                     u2051:
  3724   000D50  EFD3  F006         	goto	l2850
  3725   000D54                     u2050:
  3726   000D54                     
  3727                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  3728   000D54  5002               	movf	read_prec_or_width@fmt^0,w,c
  3729   000D56  6ED9               	movwf	fsr2l,c
  3730   000D58  6ADA               	clrf	fsr2h,c
  3731   000D5A  2ADE               	incf	postinc2,f,c
  3732   000D5C  0E00               	movlw	0
  3733   000D5E  22DD               	addwfc	postdec2,f,c
  3734   000D60                     
  3735                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  3736   000D60  5003               	movf	read_prec_or_width@ap^0,w,c
  3737   000D62  6ED9               	movwf	fsr2l,c
  3738   000D64  6ADA               	clrf	fsr2h,c
  3739   000D66  0E02               	movlw	2
  3740   000D68  26DF               	addwf	indf2,f,c
  3741   000D6A  5CDF               	subwf	indf2,w,c
  3742   000D6C  6ED9               	movwf	fsr2l,c
  3743   000D6E  6ADA               	clrf	fsr2h,c
  3744   000D70  CFDE F007          	movff	postinc2,read_prec_or_width@n
  3745   000D74  CFDE F008          	movff	postinc2,read_prec_or_width@n+1
  3746                           
  3747                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  3748   000D78  EFE6  F006         	goto	l1311
  3749   000D7C                     l2846:
  3750                           
  3751                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  3752   000D7C  0E0A               	movlw	10
  3753   000D7E  0207               	mulwf	read_prec_or_width@n^0,c
  3754   000D80  CFF3 F004          	movff	prodl,??_read_prec_or_width
  3755   000D84  CFF4 F005          	movff	prodh,??_read_prec_or_width+1
  3756   000D88  0208               	mulwf	(read_prec_or_width@n+1)^0,c
  3757   000D8A  50F3               	movf	prodl,w,c
  3758   000D8C  2605               	addwf	(??_read_prec_or_width+1)^0,f,c
  3759   000D8E  5006               	movf	read_prec_or_width@c^0,w,c
  3760   000D90  2404               	addwf	??_read_prec_or_width^0,w,c
  3761   000D92  6E07               	movwf	read_prec_or_width@n^0,c
  3762   000D94  0E00               	movlw	0
  3763   000D96  2005               	addwfc	(??_read_prec_or_width+1)^0,w,c
  3764   000D98  6E08               	movwf	(read_prec_or_width@n+1)^0,c
  3765   000D9A                     
  3766                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  3767   000D9A  5002               	movf	read_prec_or_width@fmt^0,w,c
  3768   000D9C  6ED9               	movwf	fsr2l,c
  3769   000D9E  6ADA               	clrf	fsr2h,c
  3770   000DA0  2ADE               	incf	postinc2,f,c
  3771   000DA2  0E00               	movlw	0
  3772   000DA4  22DD               	addwfc	postdec2,f,c
  3773   000DA6                     l2850:
  3774                           
  3775                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  3776   000DA6  5002               	movf	read_prec_or_width@fmt^0,w,c
  3777   000DA8  6ED9               	movwf	fsr2l,c
  3778   000DAA  6ADA               	clrf	fsr2h,c
  3779   000DAC  CFDE FFF6          	movff	postinc2,tblptrl
  3780   000DB0  CFDD FFF7          	movff	postdec2,tblptrh
  3781   000DB4                     	if	0	;tblptru may be non-zero
  3782   000DB4                     	endif
  3783   000DB4                     	if	0	;tblptru may be non-zero
  3784   000DB4                     	endif
  3785   000DB4  0008               	tblrd		*
  3786   000DB6  50F5               	movf	tablat,w,c
  3787   000DB8  0FD0               	addlw	208
  3788   000DBA  6E06               	movwf	read_prec_or_width@c^0,c
  3789   000DBC  0E09               	movlw	9
  3790   000DBE  6406               	cpfsgt	read_prec_or_width@c^0,c
  3791   000DC0  EFE4  F006         	goto	u2061
  3792   000DC4  EFE6  F006         	goto	u2060
  3793   000DC8                     u2061:
  3794   000DC8  EFBE  F006         	goto	l2846
  3795   000DCC                     u2060:
  3796   000DCC                     l1311:
  3797                           
  3798                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  3799   000DCC  C007  F002         	movff	read_prec_or_width@n,?_read_prec_or_width
  3800   000DD0  C008  F003         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  3801   000DD4  0012               	return		;funcret
  3802   000DD6                     __end_of_read_prec_or_width:
  3803                           	callstack 0
  3804                           
  3805 ;; *************** function _motorTerminal *****************
  3806 ;; Defined at:
  3807 ;;		line 63 in file "TAD_TERMINAL.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1
  3821 ;;      Params:         0       0       0
  3822 ;;      Locals:         0       0       0
  3823 ;;      Temps:          0       0       0
  3824 ;;      Totals:         0       0       0
  3825 ;;Total ram usage:        0 bytes
  3826 ;; Hardware stack levels used: 1
  3827 ;; Hardware stack levels required when called: 6
  3828 ;; This function calls:
  3829 ;;		_Terminal_RXAvailable
  3830 ;;		_Terminal_ReceiveChar
  3831 ;;		_Terminal_SendString
  3832 ;;		_initTeclado
  3833 ;;		_showMenu
  3834 ;; This function is called by:
  3835 ;;		_main
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text11
  3840   0009CA                     __ptext11:
  3841                           	callstack 0
  3842   0009CA                     _motorTerminal:
  3843                           	callstack 24
  3844   0009CA                     
  3845                           ;TAD_TERMINAL.c: 64:  static char state = 0;;TAD_TERMINAL.c: 66:  switch(state) {
  3846   0009CA  EF4F  F005         	goto	l3454
  3847   0009CE                     l3412:
  3848                           
  3849                           ;TAD_TERMINAL.c: 68:    if (Terminal_ReceiveChar() == 0x1B) {
  3850   0009CE  ECA1  F00B         	call	_Terminal_ReceiveChar	;wreg free
  3851   0009D2  0A1B               	xorlw	27
  3852   0009D4  A4D8               	btfss	status,2,c
  3853   0009D6  EFEF  F004         	goto	u2721
  3854   0009DA  EFF1  F004         	goto	u2720
  3855   0009DE                     u2721:
  3856   0009DE  EFF5  F004         	goto	l3418
  3857   0009E2                     u2720:
  3858   0009E2                     
  3859                           ;TAD_TERMINAL.c: 69:     showMenu();
  3860   0009E2  ECF0  F008         	call	_showMenu	;wreg free
  3861   0009E6                     
  3862                           ;TAD_TERMINAL.c: 70:     state = 1;
  3863   0009E6  0E01               	movlw	1
  3864   0009E8  6E64               	movwf	motorTerminal@state^0,c
  3865   0009EA                     l3418:
  3866                           
  3867                           ;TAD_TERMINAL.c: 72:    if (hashtag_pressed == 1){
  3868   0009EA  0465               	decf	_hashtag_pressed^0,w,c
  3869   0009EC  A4D8               	btfss	status,2,c
  3870   0009EE  EFFB  F004         	goto	u2731
  3871   0009F2  EFFD  F004         	goto	u2730
  3872   0009F6                     u2731:
  3873   0009F6  EF5A  F005         	goto	l591
  3874   0009FA                     u2730:
  3875   0009FA                     
  3876                           ;TAD_TERMINAL.c: 73:     showMenu();
  3877   0009FA  ECF0  F008         	call	_showMenu	;wreg free
  3878   0009FE                     
  3879                           ;TAD_TERMINAL.c: 74:     state = 1;
  3880   0009FE  0E01               	movlw	1
  3881   000A00  6E64               	movwf	motorTerminal@state^0,c
  3882   000A02                     
  3883                           ;TAD_TERMINAL.c: 75:     hashtag_pressed = 0;
  3884   000A02  6A65               	clrf	_hashtag_pressed^0,c
  3885   000A04  EF5A  F005         	goto	l591
  3886   000A08                     l3426:
  3887                           
  3888                           ;TAD_TERMINAL.c: 79:    if(Terminal_RXAvailable() == 1){
  3889   000A08  EC5C  F00B         	call	_Terminal_RXAvailable	;wreg free
  3890   000A0C  06E8               	decf	wreg,f,c
  3891   000A0E  A4D8               	btfss	status,2,c
  3892   000A10  EF0C  F005         	goto	u2741
  3893   000A14  EF0E  F005         	goto	u2740
  3894   000A18                     u2741:
  3895   000A18  EF5A  F005         	goto	l591
  3896   000A1C                     u2740:
  3897   000A1C                     
  3898                           ;TAD_TERMINAL.c: 80:     initTeclado();
  3899   000A1C  EC46  F00B         	call	_initTeclado	;wreg free
  3900   000A20                     
  3901                           ;TAD_TERMINAL.c: 81:     if (Terminal_ReceiveChar() == '1') {
  3902   000A20  ECA1  F00B         	call	_Terminal_ReceiveChar	;wreg free
  3903   000A24  0A31               	xorlw	49
  3904   000A26  A4D8               	btfss	status,2,c
  3905   000A28  EF18  F005         	goto	u2751
  3906   000A2C  EF1A  F005         	goto	u2750
  3907   000A30                     u2751:
  3908   000A30  EF23  F005         	goto	l3436
  3909   000A34                     u2750:
  3910   000A34                     
  3911                           ;TAD_TERMINAL.c: 82:      Terminal_SendString("Has pulsado 1\r\n");
  3912   000A34  0EB6               	movlw	low STR_14
  3913   000A36  6E05               	movwf	Terminal_SendString@str^0,c
  3914   000A38  0E1F               	movlw	high STR_14
  3915   000A3A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3916   000A3C  ECB6  F008         	call	_Terminal_SendString	;wreg free
  3917   000A40                     l3434:
  3918                           
  3919                           ;TAD_TERMINAL.c: 84:      state = 0;
  3920   000A40  6A64               	clrf	motorTerminal@state^0,c
  3921                           
  3922                           ;TAD_TERMINAL.c: 85:     }
  3923   000A42  EF5A  F005         	goto	l591
  3924   000A46                     l3436:
  3925   000A46  ECA1  F00B         	call	_Terminal_ReceiveChar	;wreg free
  3926   000A4A  0A32               	xorlw	50
  3927   000A4C  A4D8               	btfss	status,2,c
  3928   000A4E  EF2B  F005         	goto	u2761
  3929   000A52  EF2D  F005         	goto	u2760
  3930   000A56                     u2761:
  3931   000A56  EF35  F005         	goto	l3442
  3932   000A5A                     u2760:
  3933   000A5A                     
  3934                           ;TAD_TERMINAL.c: 87:      Terminal_SendString("Has pulsado 2\r\n");
  3935   000A5A  0EC6               	movlw	low STR_15
  3936   000A5C  6E05               	movwf	Terminal_SendString@str^0,c
  3937   000A5E  0E1F               	movlw	high STR_15
  3938   000A60  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3939   000A62  ECB6  F008         	call	_Terminal_SendString	;wreg free
  3940   000A66  EF20  F005         	goto	l3434
  3941   000A6A                     l3442:
  3942   000A6A  ECA1  F00B         	call	_Terminal_ReceiveChar	;wreg free
  3943   000A6E  0A33               	xorlw	51
  3944   000A70  A4D8               	btfss	status,2,c
  3945   000A72  EF3D  F005         	goto	u2771
  3946   000A76  EF3F  F005         	goto	u2770
  3947   000A7A                     u2771:
  3948   000A7A  EF47  F005         	goto	l3448
  3949   000A7E                     u2770:
  3950   000A7E                     
  3951                           ;TAD_TERMINAL.c: 92:      Terminal_SendString("Has pulsado 3\r\n");
  3952   000A7E  0ED6               	movlw	low STR_16
  3953   000A80  6E05               	movwf	Terminal_SendString@str^0,c
  3954   000A82  0E1F               	movlw	high STR_16
  3955   000A84  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3956   000A86  ECB6  F008         	call	_Terminal_SendString	;wreg free
  3957   000A8A  EF20  F005         	goto	l3434
  3958   000A8E                     l3448:
  3959                           
  3960                           ;TAD_TERMINAL.c: 97:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  3961   000A8E  0EE9               	movlw	low STR_17
  3962   000A90  6E05               	movwf	Terminal_SendString@str^0,c
  3963   000A92  0E1E               	movlw	high STR_17
  3964   000A94  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  3965   000A96  ECB6  F008         	call	_Terminal_SendString	;wreg free
  3966   000A9A  EF20  F005         	goto	l3434
  3967   000A9E                     l3454:
  3968   000A9E  5064               	movf	motorTerminal@state^0,w,c
  3969                           
  3970                           ; Switch size 1, requested type "simple"
  3971                           ; Number of cases is 2, Range of values is 0 to 1
  3972                           ; switch strategies available:
  3973                           ; Name         Instructions Cycles
  3974                           ; simple_byte            7     4 (average)
  3975                           ;	Chosen strategy is simple_byte
  3976   000AA0  0A00               	xorlw	0	; case 0
  3977   000AA2  B4D8               	btfsc	status,2,c
  3978   000AA4  EFE7  F004         	goto	l3412
  3979   000AA8  0A01               	xorlw	1	; case 1
  3980   000AAA  B4D8               	btfsc	status,2,c
  3981   000AAC  EF04  F005         	goto	l3426
  3982   000AB0  EF5A  F005         	goto	l591
  3983   000AB4                     l591:
  3984   000AB4  0012               	return		;funcret
  3985   000AB6                     __end_of_motorTerminal:
  3986                           	callstack 0
  3987                           
  3988 ;; *************** function _showMenu *****************
  3989 ;; Defined at:
  3990 ;;		line 47 in file "TAD_TERMINAL.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1
  4004 ;;      Params:         0       0       0
  4005 ;;      Locals:         0       0       0
  4006 ;;      Temps:          0       0       0
  4007 ;;      Totals:         0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 5
  4011 ;; This function calls:
  4012 ;;		_Terminal_SendString
  4013 ;; This function is called by:
  4014 ;;		_motorTerminal
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text12
  4019   0011E0                     __ptext12:
  4020                           	callstack 0
  4021   0011E0                     _showMenu:
  4022                           	callstack 24
  4023   0011E0                     
  4024                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("---------------\r\n");
  4025   0011E0  0E92               	movlw	low STR_6
  4026   0011E2  6E05               	movwf	Terminal_SendString@str^0,c
  4027   0011E4  0E1F               	movlw	high STR_6
  4028   0011E6  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4029   0011E8  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4030                           
  4031                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("MenÃº principal\r\n");
  4032   0011EC  0EA4               	movlw	low STR_7
  4033   0011EE  6E05               	movwf	Terminal_SendString@str^0,c
  4034   0011F0  0E1F               	movlw	high STR_7
  4035   0011F2  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4036   0011F4  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4037                           
  4038                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("---------------\r\n");
  4039   0011F8  0E92               	movlw	low STR_6
  4040   0011FA  6E05               	movwf	Terminal_SendString@str^0,c
  4041   0011FC  0E1F               	movlw	high STR_6
  4042   0011FE  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4043   001200  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4044                           
  4045                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("Tria una opciÃ³:\r\n");
  4046   001204  0E7F               	movlw	low STR_9
  4047   001206  6E05               	movwf	Terminal_SendString@str^0,c
  4048   001208  0E1F               	movlw	high STR_9
  4049   00120A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4050   00120C  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4051                           
  4052                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  4053   001210  0E64               	movlw	low STR_10
  4054   001212  6E05               	movwf	Terminal_SendString@str^0,c
  4055   001214  0E1F               	movlw	high STR_10
  4056   001216  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4057   001218  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4058                           
  4059                           ;TAD_TERMINAL.c: 53:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  4060   00121C  0E2B               	movlw	low STR_11
  4061   00121E  6E05               	movwf	Terminal_SendString@str^0,c
  4062   001220  0E1F               	movlw	high STR_11
  4063   001222  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4064   001224  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4065                           
  4066                           ;TAD_TERMINAL.c: 54:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  4067   001228  0E0A               	movlw	low STR_12
  4068   00122A  6E05               	movwf	Terminal_SendString@str^0,c
  4069   00122C  0E1F               	movlw	high STR_12
  4070   00122E  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4071   001230  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4072                           
  4073                           ;TAD_TERMINAL.c: 55:  Terminal_SendString("OpciÃ³: ");
  4074   001234  0EE6               	movlw	low STR_13
  4075   001236  6E05               	movwf	Terminal_SendString@str^0,c
  4076   001238  0E1F               	movlw	high STR_13
  4077   00123A  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  4078   00123C  ECB6  F008         	call	_Terminal_SendString	;wreg free
  4079   001240  0012               	return		;funcret
  4080   001242                     __end_of_showMenu:
  4081                           	callstack 0
  4082                           
  4083 ;; *************** function _Terminal_SendString *****************
  4084 ;; Defined at:
  4085 ;;		line 40 in file "TAD_TERMINAL.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  str             2    4[COMRAM] PTR const unsigned char 
  4088 ;;		 -> STR_17(33), STR_16(16), STR_15(16), STR_14(16), 
  4089 ;;		 -> STR_13(9), STR_12(33), STR_11(29), STR_10(27), 
  4090 ;;		 -> STR_9(19), STR_8(18), STR_7(18), STR_6(18), 
  4091 ;;		 -> motor_RFID@buffer(50), STR_4(2), ReadRFID_NoCooperatiu@buffer(50), STR_2(6), 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1
  4103 ;;      Params:         2       0       0
  4104 ;;      Locals:         0       0       0
  4105 ;;      Temps:          0       0       0
  4106 ;;      Totals:         2       0       0
  4107 ;;Total ram usage:        2 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 4
  4110 ;; This function calls:
  4111 ;;		_Terminal_SendChar
  4112 ;;		_Terminal_TXAvailable
  4113 ;; This function is called by:
  4114 ;;		_motor_RFID
  4115 ;;		_showMenu
  4116 ;;		_motorTerminal
  4117 ;;		_ReadRFID_NoCooperatiu
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text13
  4122   00116C                     __ptext13:
  4123                           	callstack 0
  4124   00116C                     _Terminal_SendString:
  4125                           	callstack 25
  4126   00116C                     
  4127                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4128   00116C  EFD7  F008         	goto	l3080
  4129   001170                     l3074:
  4130   001170  EC1F  F00B         	call	_Terminal_TXAvailable	;wreg free
  4131   001174  5002               	movf	?_Terminal_TXAvailable^0,w,c
  4132   001176  1003               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  4133   001178  B4D8               	btfsc	status,2,c
  4134   00117A  EFC1  F008         	goto	u2291
  4135   00117E  EFC3  F008         	goto	u2290
  4136   001182                     u2291:
  4137   001182  EFB8  F008         	goto	l3074
  4138   001186                     u2290:
  4139   001186                     
  4140                           ;TAD_TERMINAL.c: 43:   Terminal_SendChar(*str++);
  4141   001186  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4142   00118A  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4143   00118E  6AF8               	clrf	tblptru,c
  4144   001190  0E01               	movlw	(high __ramtop+-1)
  4145   001192  64F7               	cpfsgt	tblptrh,c
  4146   001194  D003               	bra	u2307
  4147   001196  0008               	tblrd		*
  4148   001198  50F5               	movf	tablat,w,c
  4149   00119A  D005               	bra	u2300
  4150   00119C                     u2307:
  4151   00119C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4152   0011A0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4153   0011A4  50EF               	movf	indf0,w,c
  4154   0011A6                     u2300:
  4155   0011A6  EC8F  F00B         	call	_Terminal_SendChar
  4156   0011AA  4A05               	infsnz	Terminal_SendString@str^0,f,c
  4157   0011AC  2A06               	incf	(Terminal_SendString@str+1)^0,f,c
  4158   0011AE                     l3080:
  4159                           
  4160                           ;TAD_TERMINAL.c: 41:  while (*str) {
  4161   0011AE  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  4162   0011B2  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4163   0011B6  6AF8               	clrf	tblptru,c
  4164   0011B8  0E01               	movlw	(high __ramtop+-1)
  4165   0011BA  64F7               	cpfsgt	tblptrh,c
  4166   0011BC  D003               	bra	u2317
  4167   0011BE  0008               	tblrd		*
  4168   0011C0  50F5               	movf	tablat,w,c
  4169   0011C2  D005               	bra	u2310
  4170   0011C4                     u2317:
  4171   0011C4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4172   0011C8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4173   0011CC  50EF               	movf	indf0,w,c
  4174   0011CE                     u2310:
  4175   0011CE  0900               	iorlw	0
  4176   0011D0  A4D8               	btfss	status,2,c
  4177   0011D2  EFED  F008         	goto	u2321
  4178   0011D6  EFEF  F008         	goto	u2320
  4179   0011DA                     u2321:
  4180   0011DA  EFB8  F008         	goto	l3074
  4181   0011DE                     u2320:
  4182   0011DE  0012               	return		;funcret
  4183   0011E0                     __end_of_Terminal_SendString:
  4184                           	callstack 0
  4185                           
  4186 ;; *************** function _Terminal_TXAvailable *****************
  4187 ;; Defined at:
  4188 ;;		line 20 in file "TAD_TERMINAL.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2    1[COMRAM] int 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1
  4202 ;;      Params:         2       0       0
  4203 ;;      Locals:         0       0       0
  4204 ;;      Temps:          1       0       0
  4205 ;;      Totals:         3       0       0
  4206 ;;Total ram usage:        3 bytes
  4207 ;; Hardware stack levels used: 1
  4208 ;; Hardware stack levels required when called: 3
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_Terminal_SendString
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text14
  4217   00163E                     __ptext14:
  4218                           	callstack 0
  4219   00163E                     _Terminal_TXAvailable:
  4220                           	callstack 25
  4221   00163E                     
  4222                           ;TAD_TERMINAL.c: 21:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  4223   00163E  B89E               	btfsc	158,4,c	;volatile
  4224   001640  EF24  F00B         	goto	u2091
  4225   001644  EF28  F00B         	goto	u2090
  4226   001648                     u2091:
  4227   001648  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4228   00164A  2A04               	incf	??_Terminal_TXAvailable^0,f,c
  4229   00164C  EF29  F00B         	goto	u2098
  4230   001650                     u2090:
  4231   001650  6A04               	clrf	??_Terminal_TXAvailable^0,c
  4232   001652                     u2098:
  4233   001652  5004               	movf	??_Terminal_TXAvailable^0,w,c
  4234   001654  6E02               	movwf	?_Terminal_TXAvailable^0,c
  4235   001656  6A03               	clrf	(?_Terminal_TXAvailable+1)^0,c
  4236   001658  0012               	return		;funcret
  4237   00165A                     __end_of_Terminal_TXAvailable:
  4238                           	callstack 0
  4239                           
  4240 ;; *************** function _Terminal_SendChar *****************
  4241 ;; Defined at:
  4242 ;;		line 30 in file "TAD_TERMINAL.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  c               1    wreg     unsigned char 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  c               1    1[COMRAM] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1
  4256 ;;      Params:         0       0       0
  4257 ;;      Locals:         1       0       0
  4258 ;;      Temps:          0       0       0
  4259 ;;      Totals:         1       0       0
  4260 ;;Total ram usage:        1 bytes
  4261 ;; Hardware stack levels used: 1
  4262 ;; Hardware stack levels required when called: 3
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_Terminal_SendString
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text15
  4271   00171E                     __ptext15:
  4272                           	callstack 0
  4273   00171E                     _Terminal_SendChar:
  4274                           	callstack 25
  4275                           
  4276                           ;incstack = 0
  4277                           ;Terminal_SendChar@c stored from wreg
  4278   00171E  6E02               	movwf	Terminal_SendChar@c^0,c
  4279   001720                     
  4280                           ;TAD_TERMINAL.c: 31:  TXREG = c;
  4281   001720  C002  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  4282   001724  0012               	return		;funcret
  4283   001726                     __end_of_Terminal_SendChar:
  4284                           	callstack 0
  4285                           
  4286 ;; *************** function _initTeclado *****************
  4287 ;; Defined at:
  4288 ;;		line 14 in file "TAD_TECLADO.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1
  4302 ;;      Params:         0       0       0
  4303 ;;      Locals:         0       0       0
  4304 ;;      Temps:          0       0       0
  4305 ;;      Totals:         0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used: 1
  4308 ;; Hardware stack levels required when called: 4
  4309 ;; This function calls:
  4310 ;;		_TI_NewTimer
  4311 ;;		_initPortsTeclado
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;;		_motorTerminal
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text16
  4319   00168C                     __ptext16:
  4320                           	callstack 0
  4321   00168C                     _initTeclado:
  4322                           	callstack 25
  4323   00168C                     
  4324                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  4325   00168C  EC93  F00B         	call	_initPortsTeclado	;wreg free
  4326   001690                     
  4327                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  4328   001690  6A77               	clrf	_Filas^0,c
  4329   001692                     
  4330                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  4331   001692  6A76               	clrf	_Columnas^0,c
  4332   001694                     
  4333                           ;TAD_TECLADO.c: 18:     tecla = 0;
  4334   001694  6A75               	clrf	_tecla^0,c
  4335   001696                     
  4336                           ;TAD_TECLADO.c: 19:  state = 0;
  4337   001696  6A74               	clrf	_state^0,c
  4338   001698                     
  4339                           ;TAD_TECLADO.c: 20:     TI_NewTimer(&timer);
  4340   001698  0E79               	movlw	low _timer
  4341   00169A  6E02               	movwf	TI_NewTimer@TimerHandle^0,c
  4342   00169C  EC4F  F009         	call	_TI_NewTimer	;wreg free
  4343   0016A0  0012               	return		;funcret
  4344   0016A2                     __end_of_initTeclado:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _initPortsTeclado *****************
  4348 ;; Defined at:
  4349 ;;		line 23 in file "TAD_TECLADO.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1
  4363 ;;      Params:         0       0       0
  4364 ;;      Locals:         0       0       0
  4365 ;;      Temps:          0       0       0
  4366 ;;      Totals:         0       0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used: 1
  4369 ;; Hardware stack levels required when called: 3
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_initTeclado
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text17
  4378   001726                     __ptext17:
  4379                           	callstack 0
  4380   001726                     _initPortsTeclado:
  4381                           	callstack 25
  4382   001726                     
  4383                           ;TAD_TECLADO.c: 26:  TRISD = 0x0F;
  4384   001726  0E0F               	movlw	15
  4385   001728  6E95               	movwf	149,c	;volatile
  4386   00172A                     
  4387                           ;TAD_TECLADO.c: 27:  LATD = 0x00;
  4388   00172A  6A8C               	clrf	140,c	;volatile
  4389   00172C  0012               	return		;funcret
  4390   00172E                     __end_of_initPortsTeclado:
  4391                           	callstack 0
  4392                           
  4393 ;; *************** function _TI_NewTimer *****************
  4394 ;; Defined at:
  4395 ;;		line 43 in file "TAD_TIMER.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  4398 ;;		 -> Timer(1), timer(1), 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  Comptador       1    3[COMRAM] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      unsigned char 
  4403 ;; Registers used:
  4404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1
  4410 ;;      Params:         1       0       0
  4411 ;;      Locals:         1       0       0
  4412 ;;      Temps:          1       0       0
  4413 ;;      Totals:         3       0       0
  4414 ;;Total ram usage:        3 bytes
  4415 ;; Hardware stack levels used: 1
  4416 ;; Hardware stack levels required when called: 3
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_initTeclado
  4421 ;;		_LcInit
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           	psect	text18
  4426   00129E                     __ptext18:
  4427                           	callstack 0
  4428   00129E                     _TI_NewTimer:
  4429                           	callstack 25
  4430   00129E                     
  4431                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  4432   00129E  6A04               	clrf	TI_NewTimer@Comptador^0,c
  4433                           
  4434                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4435   0012A0  EF5E  F009         	goto	l2968
  4436   0012A4                     l2964:
  4437                           
  4438                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  4439   0012A4  2A04               	incf	TI_NewTimer@Comptador^0,f,c
  4440   0012A6  0E04               	movlw	4
  4441   0012A8  1804               	xorwf	TI_NewTimer@Comptador^0,w,c
  4442   0012AA  A4D8               	btfss	status,2,c
  4443   0012AC  EF5A  F009         	goto	u2141
  4444   0012B0  EF5C  F009         	goto	u2140
  4445   0012B4                     u2141:
  4446   0012B4  EF5E  F009         	goto	l2968
  4447   0012B8                     u2140:
  4448   0012B8  EF79  F009         	goto	l81
  4449   0012BC                     l2968:
  4450                           
  4451                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4452   0012BC  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4453   0012BE  0D05               	mullw	5
  4454   0012C0  50F3               	movf	243,w,c
  4455   0012C2  0F84               	addlw	low (_Timers+4)
  4456   0012C4  6ED9               	movwf	fsr2l,c
  4457   0012C6  6ADA               	clrf	fsr2h,c
  4458   0012C8  04DE               	decf	postinc2,w,c
  4459   0012CA  B4D8               	btfsc	status,2,c
  4460   0012CC  EF6A  F009         	goto	u2151
  4461   0012D0  EF6C  F009         	goto	u2150
  4462   0012D4                     u2151:
  4463   0012D4  EF52  F009         	goto	l2964
  4464   0012D8                     u2150:
  4465   0012D8                     
  4466                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  4467   0012D8  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4468   0012DA  0D05               	mullw	5
  4469   0012DC  50F3               	movf	243,w,c
  4470   0012DE  0F84               	addlw	low (_Timers+4)
  4471   0012E0  6ED9               	movwf	fsr2l,c
  4472   0012E2  6ADA               	clrf	fsr2h,c
  4473   0012E4  0E01               	movlw	1
  4474   0012E6  6EDF               	movwf	indf2,c
  4475   0012E8                     
  4476                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  4477   0012E8  5002               	movf	TI_NewTimer@TimerHandle^0,w,c
  4478   0012EA  6ED9               	movwf	fsr2l,c
  4479   0012EC  6ADA               	clrf	fsr2h,c
  4480   0012EE  C004  FFDF         	movff	TI_NewTimer@Comptador,indf2
  4481   0012F2                     l81:
  4482   0012F2  0012               	return		;funcret
  4483   0012F4                     __end_of_TI_NewTimer:
  4484                           	callstack 0
  4485                           
  4486 ;; *************** function _Terminal_ReceiveChar *****************
  4487 ;; Defined at:
  4488 ;;		line 35 in file "TAD_TERMINAL.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      unsigned char 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1
  4502 ;;      Params:         0       0       0
  4503 ;;      Locals:         0       0       0
  4504 ;;      Temps:          0       0       0
  4505 ;;      Totals:         0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used: 1
  4508 ;; Hardware stack levels required when called: 3
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_motorTerminal
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text19
  4517   001742                     __ptext19:
  4518                           	callstack 0
  4519   001742                     _Terminal_ReceiveChar:
  4520                           	callstack 26
  4521   001742                     
  4522                           ;TAD_TERMINAL.c: 36:  return RCREG;
  4523   001742  50AE               	movf	174,w,c	;volatile
  4524   001744  0012               	return		;funcret
  4525   001746                     __end_of_Terminal_ReceiveChar:
  4526                           	callstack 0
  4527                           
  4528 ;; *************** function _Terminal_RXAvailable *****************
  4529 ;; Defined at:
  4530 ;;		line 25 in file "TAD_TERMINAL.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      unsigned char 
  4537 ;; Registers used:
  4538 ;;		wreg
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1
  4544 ;;      Params:         0       0       0
  4545 ;;      Locals:         0       0       0
  4546 ;;      Temps:          0       0       0
  4547 ;;      Totals:         0       0       0
  4548 ;;Total ram usage:        0 bytes
  4549 ;; Hardware stack levels used: 1
  4550 ;; Hardware stack levels required when called: 3
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_motorTerminal
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text20
  4559   0016B8                     __ptext20:
  4560                           	callstack 0
  4561   0016B8                     _Terminal_RXAvailable:
  4562                           	callstack 26
  4563   0016B8                     
  4564                           ;TAD_TERMINAL.c: 26:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4565   0016B8  BA9E               	btfsc	158,5,c	;volatile
  4566   0016BA  EF61  F00B         	goto	u981
  4567   0016BE  EF64  F00B         	goto	u980
  4568   0016C2                     u981:
  4569   0016C2  0E01               	movlw	1
  4570   0016C4  EF65  F00B         	goto	u986
  4571   0016C8                     u980:
  4572   0016C8  0E00               	movlw	0
  4573   0016CA                     u986:
  4574   0016CA  0012               	return		;funcret
  4575   0016CC                     __end_of_Terminal_RXAvailable:
  4576                           	callstack 0
  4577                           
  4578 ;; *************** function _motorTeclado *****************
  4579 ;; Defined at:
  4580 ;;		line 34 in file "TAD_TECLADO.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;		None
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1
  4594 ;;      Params:         0       0       0
  4595 ;;      Locals:         0       0       0
  4596 ;;      Temps:          0       0       0
  4597 ;;      Totals:         0       0       0
  4598 ;;Total ram usage:        0 bytes
  4599 ;; Hardware stack levels used: 1
  4600 ;; Hardware stack levels required when called: 4
  4601 ;; This function calls:
  4602 ;;		_GetTecla
  4603 ;;		_ReadFilas
  4604 ;;		_TI_GetTics
  4605 ;;		_TI_ResetTics
  4606 ;;		_hashtag_pressed3s
  4607 ;;		_writeColumnas
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text21
  4614   00052C                     __ptext21:
  4615                           	callstack 0
  4616   00052C                     _motorTeclado:
  4617                           	callstack 26
  4618   00052C                     
  4619                           ;TAD_TECLADO.c: 35:  switch(state) {
  4620   00052C  EF92  F003         	goto	l3408
  4621   000530                     l3304:
  4622                           
  4623                           ;TAD_TECLADO.c: 37:    Filas = ReadFilas();
  4624   000530  EC9E  F00B         	call	_ReadFilas	;wreg free
  4625   000534  6E77               	movwf	_Filas^0,c
  4626   000536                     
  4627                           ;TAD_TECLADO.c: 38:    if (Filas == 0x0) {
  4628   000536  5077               	movf	_Filas^0,w,c
  4629   000538  A4D8               	btfss	status,2,c
  4630   00053A  EFA1  F002         	goto	u2551
  4631   00053E  EFA3  F002         	goto	u2550
  4632   000542                     u2551:
  4633   000542  EFAB  F002         	goto	l3314
  4634   000546                     u2550:
  4635   000546                     
  4636                           ;TAD_TECLADO.c: 39:     Columnas = (0x01);
  4637   000546  0E01               	movlw	1
  4638   000548  6E76               	movwf	_Columnas^0,c
  4639   00054A                     
  4640                           ;TAD_TECLADO.c: 40:     writeColumnas();
  4641   00054A  ECC7  F009         	call	_writeColumnas	;wreg free
  4642   00054E                     
  4643                           ;TAD_TECLADO.c: 41:     state = 1;
  4644   00054E  0E01               	movlw	1
  4645   000550  6E74               	movwf	_state^0,c
  4646                           
  4647                           ;TAD_TECLADO.c: 42:    }
  4648   000552  EFAD  F003         	goto	l162
  4649   000556                     l3314:
  4650   000556  5077               	movf	_Filas^0,w,c
  4651   000558  B4D8               	btfsc	status,2,c
  4652   00055A  EFB1  F002         	goto	u2561
  4653   00055E  EFB3  F002         	goto	u2560
  4654   000562                     u2561:
  4655   000562  EFAD  F003         	goto	l162
  4656   000566                     u2560:
  4657   000566                     
  4658                           ;TAD_TECLADO.c: 44:     TI_ResetTics(timer);
  4659   000566  5079               	movf	_timer^0,w,c
  4660   000568  EC0D  F00B         	call	_TI_ResetTics
  4661   00056C                     l3318:
  4662                           
  4663                           ;TAD_TECLADO.c: 45:     state = 3;
  4664   00056C  0E03               	movlw	3
  4665   00056E  6E74               	movwf	_state^0,c
  4666   000570  EFAD  F003         	goto	l162
  4667   000574                     l3320:
  4668                           
  4669                           ;TAD_TECLADO.c: 49:    Filas = ReadFilas();
  4670   000574  EC9E  F00B         	call	_ReadFilas	;wreg free
  4671   000578  6E77               	movwf	_Filas^0,c
  4672   00057A                     
  4673                           ;TAD_TECLADO.c: 50:    if (Filas == 0x0) {
  4674   00057A  5077               	movf	_Filas^0,w,c
  4675   00057C  A4D8               	btfss	status,2,c
  4676   00057E  EFC3  F002         	goto	u2571
  4677   000582  EFC5  F002         	goto	u2570
  4678   000586                     u2571:
  4679   000586  EFCD  F002         	goto	l3330
  4680   00058A                     u2570:
  4681   00058A                     
  4682                           ;TAD_TECLADO.c: 51:     Columnas = (0x02);
  4683   00058A  0E02               	movlw	2
  4684   00058C  6E76               	movwf	_Columnas^0,c
  4685   00058E                     
  4686                           ;TAD_TECLADO.c: 52:     writeColumnas();
  4687   00058E  ECC7  F009         	call	_writeColumnas	;wreg free
  4688   000592                     
  4689                           ;TAD_TECLADO.c: 53:     state = 2;
  4690   000592  0E02               	movlw	2
  4691   000594  6E74               	movwf	_state^0,c
  4692                           
  4693                           ;TAD_TECLADO.c: 54:    }
  4694   000596  EFAD  F003         	goto	l162
  4695   00059A                     l3330:
  4696   00059A  5077               	movf	_Filas^0,w,c
  4697   00059C  B4D8               	btfsc	status,2,c
  4698   00059E  EFD3  F002         	goto	u2581
  4699   0005A2  EFD5  F002         	goto	u2580
  4700   0005A6                     u2581:
  4701   0005A6  EFAD  F003         	goto	l162
  4702   0005AA                     u2580:
  4703   0005AA                     
  4704                           ;TAD_TECLADO.c: 56:     TI_ResetTics(timer);
  4705   0005AA  5079               	movf	_timer^0,w,c
  4706   0005AC  EC0D  F00B         	call	_TI_ResetTics
  4707   0005B0  EFB6  F002         	goto	l3318
  4708   0005B4                     l3336:
  4709                           
  4710                           ;TAD_TECLADO.c: 61:    Filas = ReadFilas();
  4711   0005B4  EC9E  F00B         	call	_ReadFilas	;wreg free
  4712   0005B8  6E77               	movwf	_Filas^0,c
  4713   0005BA                     
  4714                           ;TAD_TECLADO.c: 62:    if (Filas != 0x0) {
  4715   0005BA  5077               	movf	_Filas^0,w,c
  4716   0005BC  B4D8               	btfsc	status,2,c
  4717   0005BE  EFE3  F002         	goto	u2591
  4718   0005C2  EFE5  F002         	goto	u2590
  4719   0005C6                     u2591:
  4720   0005C6  EFEA  F002         	goto	l3344
  4721   0005CA                     u2590:
  4722   0005CA                     
  4723                           ;TAD_TECLADO.c: 63:     TI_ResetTics(timer);
  4724   0005CA  5079               	movf	_timer^0,w,c
  4725   0005CC  EC0D  F00B         	call	_TI_ResetTics
  4726   0005D0  EFB6  F002         	goto	l3318
  4727   0005D4                     l3344:
  4728   0005D4  5077               	movf	_Filas^0,w,c
  4729   0005D6  A4D8               	btfss	status,2,c
  4730   0005D8  EFF0  F002         	goto	u2601
  4731   0005DC  EFF2  F002         	goto	u2600
  4732   0005E0                     u2601:
  4733   0005E0  EFAD  F003         	goto	l162
  4734   0005E4                     u2600:
  4735   0005E4                     l3346:
  4736                           
  4737                           ;TAD_TECLADO.c: 67:     Columnas = (0x04);
  4738   0005E4  0E04               	movlw	4
  4739   0005E6  6E76               	movwf	_Columnas^0,c
  4740   0005E8                     
  4741                           ;TAD_TECLADO.c: 68:     writeColumnas();
  4742   0005E8  ECC7  F009         	call	_writeColumnas	;wreg free
  4743   0005EC                     l3350:
  4744                           
  4745                           ;TAD_TECLADO.c: 69:     state = 0;
  4746   0005EC  6A74               	clrf	_state^0,c
  4747   0005EE  EFAD  F003         	goto	l162
  4748   0005F2                     l3352:
  4749                           
  4750                           ;TAD_TECLADO.c: 73:    tecla = GetTecla ();
  4751   0005F2  EC33  F006         	call	_GetTecla	;wreg free
  4752   0005F6  6E75               	movwf	_tecla^0,c
  4753   0005F8                     
  4754                           ;TAD_TECLADO.c: 74:    Filas = ReadFilas();
  4755   0005F8  EC9E  F00B         	call	_ReadFilas	;wreg free
  4756   0005FC  6E77               	movwf	_Filas^0,c
  4757   0005FE                     
  4758                           ;TAD_TECLADO.c: 75:    if (Filas == 0x0) {
  4759   0005FE  5077               	movf	_Filas^0,w,c
  4760   000600  A4D8               	btfss	status,2,c
  4761   000602  EF05  F003         	goto	u2611
  4762   000606  EF07  F003         	goto	u2610
  4763   00060A                     u2611:
  4764   00060A  EF09  F003         	goto	l3364
  4765   00060E                     u2610:
  4766   00060E  EFF2  F002         	goto	l3346
  4767   000612                     l3364:
  4768   000612  5077               	movf	_Filas^0,w,c
  4769   000614  B4D8               	btfsc	status,2,c
  4770   000616  EF0F  F003         	goto	u2621
  4771   00061A  EF11  F003         	goto	u2620
  4772   00061E                     u2621:
  4773   00061E  EF2E  F003         	goto	l3372
  4774   000622                     u2620:
  4775   000622  5079               	movf	_timer^0,w,c
  4776   000624  ECA1  F009         	call	_TI_GetTics
  4777   000628  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4778   00062A  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4779   00062C  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4780   00062E  E109               	bnz	u2630
  4781   000630  0E09               	movlw	9
  4782   000632  5C02               	subwf	?_TI_GetTics^0,w,c
  4783   000634  A0D8               	btfss	status,0,c
  4784   000636  EF1F  F003         	goto	u2631
  4785   00063A  EF21  F003         	goto	u2630
  4786   00063E                     u2631:
  4787   00063E  EF2E  F003         	goto	l3372
  4788   000642                     u2630:
  4789   000642  0E0B               	movlw	11
  4790   000644  1875               	xorwf	_tecla^0,w,c
  4791   000646  B4D8               	btfsc	status,2,c
  4792   000648  EF28  F003         	goto	u2641
  4793   00064C  EF2A  F003         	goto	u2640
  4794   000650                     u2641:
  4795   000650  EF2E  F003         	goto	l3372
  4796   000654                     u2640:
  4797   000654                     l3370:
  4798                           
  4799                           ;TAD_TECLADO.c: 81:     state = 5;
  4800   000654  0E05               	movlw	5
  4801   000656  6E74               	movwf	_state^0,c
  4802                           
  4803                           ;TAD_TECLADO.c: 82:    }
  4804   000658  EFAD  F003         	goto	l162
  4805   00065C                     l3372:
  4806   00065C  5077               	movf	_Filas^0,w,c
  4807   00065E  B4D8               	btfsc	status,2,c
  4808   000660  EF34  F003         	goto	u2651
  4809   000664  EF36  F003         	goto	u2650
  4810   000668                     u2651:
  4811   000668  EFAD  F003         	goto	l162
  4812   00066C                     u2650:
  4813   00066C  5079               	movf	_timer^0,w,c
  4814   00066E  ECA1  F009         	call	_TI_GetTics
  4815   000672  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4816   000674  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4817   000676  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  4818   000678  E109               	bnz	u2660
  4819   00067A  0E09               	movlw	9
  4820   00067C  5C02               	subwf	?_TI_GetTics^0,w,c
  4821   00067E  A0D8               	btfss	status,0,c
  4822   000680  EF44  F003         	goto	u2661
  4823   000684  EF46  F003         	goto	u2660
  4824   000688                     u2661:
  4825   000688  EFAD  F003         	goto	l162
  4826   00068C                     u2660:
  4827   00068C  0E0B               	movlw	11
  4828   00068E  1875               	xorwf	_tecla^0,w,c
  4829   000690  A4D8               	btfss	status,2,c
  4830   000692  EF4D  F003         	goto	u2671
  4831   000696  EF4F  F003         	goto	u2670
  4832   00069A                     u2671:
  4833   00069A  EFAD  F003         	goto	l162
  4834   00069E                     u2670:
  4835   00069E                     
  4836                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  4837   00069E  5079               	movf	_timer^0,w,c
  4838   0006A0  EC0D  F00B         	call	_TI_ResetTics
  4839   0006A4                     
  4840                           ;TAD_TECLADO.c: 85:     state = 4;
  4841   0006A4  0E04               	movlw	4
  4842   0006A6  6E74               	movwf	_state^0,c
  4843   0006A8  EFAD  F003         	goto	l162
  4844   0006AC                     l3382:
  4845                           
  4846                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  4847   0006AC  EC9E  F00B         	call	_ReadFilas	;wreg free
  4848   0006B0  6E77               	movwf	_Filas^0,c
  4849   0006B2                     
  4850                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  4851   0006B2  5077               	movf	_Filas^0,w,c
  4852   0006B4  A4D8               	btfss	status,2,c
  4853   0006B6  EF5F  F003         	goto	u2681
  4854   0006BA  EF61  F003         	goto	u2680
  4855   0006BE                     u2681:
  4856   0006BE  EF63  F003         	goto	l3388
  4857   0006C2                     u2680:
  4858   0006C2  EFF6  F002         	goto	l3350
  4859   0006C6                     l3388:
  4860   0006C6  5077               	movf	_Filas^0,w,c
  4861   0006C8  B4D8               	btfsc	status,2,c
  4862   0006CA  EF69  F003         	goto	u2691
  4863   0006CE  EF6B  F003         	goto	u2690
  4864   0006D2                     u2691:
  4865   0006D2  EFAD  F003         	goto	l162
  4866   0006D6                     u2690:
  4867   0006D6  5079               	movf	_timer^0,w,c
  4868   0006D8  ECA1  F009         	call	_TI_GetTics
  4869   0006DC  5005               	movf	(?_TI_GetTics+3)^0,w,c
  4870   0006DE  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  4871   0006E0  E10B               	bnz	u2700
  4872   0006E2  0EDD               	movlw	221
  4873   0006E4  5C02               	subwf	?_TI_GetTics^0,w,c
  4874   0006E6  0E05               	movlw	5
  4875   0006E8  5803               	subwfb	(?_TI_GetTics+1)^0,w,c
  4876   0006EA  A0D8               	btfss	status,0,c
  4877   0006EC  EF7A  F003         	goto	u2701
  4878   0006F0  EF7C  F003         	goto	u2700
  4879   0006F4                     u2701:
  4880   0006F4  EFAD  F003         	goto	l162
  4881   0006F8                     u2700:
  4882   0006F8                     
  4883                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  4884   0006F8  EC9B  F00B         	call	_hashtag_pressed3s	;wreg free
  4885   0006FC  EF2A  F003         	goto	l3370
  4886   000700                     l3396:
  4887                           
  4888                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  4889   000700  EC9E  F00B         	call	_ReadFilas	;wreg free
  4890   000704  6E77               	movwf	_Filas^0,c
  4891   000706                     
  4892                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  4893   000706  5077               	movf	_Filas^0,w,c
  4894   000708  A4D8               	btfss	status,2,c
  4895   00070A  EF89  F003         	goto	u2711
  4896   00070E  EF8B  F003         	goto	u2710
  4897   000712                     u2711:
  4898   000712  EFAD  F003         	goto	l162
  4899   000716                     u2710:
  4900   000716                     
  4901                           ;TAD_TECLADO.c: 102:     state = 0;
  4902   000716  6A74               	clrf	_state^0,c
  4903   000718                     
  4904                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  4905   000718  0E04               	movlw	4
  4906   00071A  6E76               	movwf	_Columnas^0,c
  4907   00071C                     
  4908                           ;TAD_TECLADO.c: 104:     writeColumnas();
  4909   00071C  ECC7  F009         	call	_writeColumnas	;wreg free
  4910   000720  EFAD  F003         	goto	l162
  4911   000724                     l3408:
  4912   000724  5074               	movf	_state^0,w,c
  4913                           
  4914                           ; Switch size 1, requested type "simple"
  4915                           ; Number of cases is 6, Range of values is 0 to 5
  4916                           ; switch strategies available:
  4917                           ; Name         Instructions Cycles
  4918                           ; simple_byte           19    10 (average)
  4919                           ;	Chosen strategy is simple_byte
  4920   000726  0A00               	xorlw	0	; case 0
  4921   000728  B4D8               	btfsc	status,2,c
  4922   00072A  EF98  F002         	goto	l3304
  4923   00072E  0A01               	xorlw	1	; case 1
  4924   000730  B4D8               	btfsc	status,2,c
  4925   000732  EFBA  F002         	goto	l3320
  4926   000736  0A03               	xorlw	3	; case 2
  4927   000738  B4D8               	btfsc	status,2,c
  4928   00073A  EFDA  F002         	goto	l3336
  4929   00073E  0A01               	xorlw	1	; case 3
  4930   000740  B4D8               	btfsc	status,2,c
  4931   000742  EFF9  F002         	goto	l3352
  4932   000746  0A07               	xorlw	7	; case 4
  4933   000748  B4D8               	btfsc	status,2,c
  4934   00074A  EF56  F003         	goto	l3382
  4935   00074E  0A01               	xorlw	1	; case 5
  4936   000750  B4D8               	btfsc	status,2,c
  4937   000752  EF80  F003         	goto	l3396
  4938   000756  EFAD  F003         	goto	l162
  4939   00075A                     l162:
  4940   00075A  0012               	return		;funcret
  4941   00075C                     __end_of_motorTeclado:
  4942                           	callstack 0
  4943                           
  4944 ;; *************** function _writeColumnas *****************
  4945 ;; Defined at:
  4946 ;;		line 114 in file "TAD_TECLADO.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, status,2, status,0
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1
  4960 ;;      Params:         0       0       0
  4961 ;;      Locals:         0       0       0
  4962 ;;      Temps:          0       0       0
  4963 ;;      Totals:         0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used: 1
  4966 ;; Hardware stack levels required when called: 3
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_motorTeclado
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text22
  4975   00138E                     __ptext22:
  4976                           	callstack 0
  4977   00138E                     _writeColumnas:
  4978                           	callstack 26
  4979   00138E                     
  4980                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  4981   00138E  6A8C               	clrf	140,c	;volatile
  4982   001390                     
  4983                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  4984   001390  0476               	decf	_Columnas^0,w,c
  4985   001392  A4D8               	btfss	status,2,c
  4986   001394  EFCE  F009         	goto	u781
  4987   001398  EFD0  F009         	goto	u780
  4988   00139C                     u781:
  4989   00139C  EFD3  F009         	goto	l1886
  4990   0013A0                     u780:
  4991   0013A0                     
  4992                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  4993   0013A0  8A8C               	bsf	140,5,c	;volatile
  4994                           
  4995                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  4996   0013A2  EFE9  F009         	goto	l170
  4997   0013A6                     l1886:
  4998   0013A6  0E02               	movlw	2
  4999   0013A8  1876               	xorwf	_Columnas^0,w,c
  5000   0013AA  A4D8               	btfss	status,2,c
  5001   0013AC  EFDA  F009         	goto	u791
  5002   0013B0  EFDC  F009         	goto	u790
  5003   0013B4                     u791:
  5004   0013B4  EFDF  F009         	goto	l1890
  5005   0013B8                     u790:
  5006   0013B8                     
  5007                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  5008   0013B8  8C8C               	bsf	140,6,c	;volatile
  5009                           
  5010                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  5011   0013BA  EFE9  F009         	goto	l170
  5012   0013BE                     l1890:
  5013   0013BE  0E04               	movlw	4
  5014   0013C0  1876               	xorwf	_Columnas^0,w,c
  5015   0013C2  A4D8               	btfss	status,2,c
  5016   0013C4  EFE6  F009         	goto	u801
  5017   0013C8  EFE8  F009         	goto	u800
  5018   0013CC                     u801:
  5019   0013CC  EFE9  F009         	goto	l170
  5020   0013D0                     u800:
  5021   0013D0                     
  5022                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  5023   0013D0  888C               	bsf	140,4,c	;volatile
  5024   0013D2                     l170:
  5025   0013D2  0012               	return		;funcret
  5026   0013D4                     __end_of_writeColumnas:
  5027                           	callstack 0
  5028                           
  5029 ;; *************** function _hashtag_pressed3s *****************
  5030 ;; Defined at:
  5031 ;;		line 58 in file "TAD_TERMINAL.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1
  5045 ;;      Params:         0       0       0
  5046 ;;      Locals:         0       0       0
  5047 ;;      Temps:          0       0       0
  5048 ;;      Totals:         0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used: 1
  5051 ;; Hardware stack levels required when called: 3
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_motorTeclado
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text23
  5060   001736                     __ptext23:
  5061                           	callstack 0
  5062   001736                     _hashtag_pressed3s:
  5063                           	callstack 26
  5064   001736                     
  5065                           ;TAD_TERMINAL.c: 59:  hashtag_pressed = 1;
  5066   001736  0E01               	movlw	1
  5067   001738  6E65               	movwf	_hashtag_pressed^0,c
  5068   00173A  0012               	return		;funcret
  5069   00173C                     __end_of_hashtag_pressed3s:
  5070                           	callstack 0
  5071                           
  5072 ;; *************** function _ReadFilas *****************
  5073 ;; Defined at:
  5074 ;;		line 10 in file "TAD_TECLADO.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      unsigned char 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1
  5088 ;;      Params:         0       0       0
  5089 ;;      Locals:         0       0       0
  5090 ;;      Temps:          0       0       0
  5091 ;;      Totals:         0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used: 1
  5094 ;; Hardware stack levels required when called: 3
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_motorTeclado
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text24
  5103   00173C                     __ptext24:
  5104                           	callstack 0
  5105   00173C                     _ReadFilas:
  5106                           	callstack 26
  5107   00173C                     
  5108                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  5109   00173C  5083               	movf	131,w,c	;volatile
  5110   00173E  0B0F               	andlw	15
  5111   001740  0012               	return		;funcret
  5112   001742                     __end_of_ReadFilas:
  5113                           	callstack 0
  5114                           
  5115 ;; *************** function _GetTecla *****************
  5116 ;; Defined at:
  5117 ;;		line 128 in file "TAD_TECLADO.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  5122 ;;  fila            1   16[COMRAM] unsigned char 
  5123 ;;  columna         1   15[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      unsigned char 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1
  5133 ;;      Params:         0       0       0
  5134 ;;      Locals:        14       0       0
  5135 ;;      Temps:          2       0       0
  5136 ;;      Totals:        16       0       0
  5137 ;;Total ram usage:       16 bytes
  5138 ;; Hardware stack levels used: 1
  5139 ;; Hardware stack levels required when called: 3
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_motorTeclado
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text25
  5148   000C66                     __ptext25:
  5149                           	callstack 0
  5150   000C66                     _GetTecla:
  5151                           	callstack 26
  5152   000C66                     
  5153                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  5154   000C66  6A10               	clrf	GetTecla@columna^0,c
  5155                           
  5156                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  5157   000C68  EF48  F006         	goto	l1908
  5158   000C6C                     l174:
  5159   000C6C  6A11               	clrf	GetTecla@fila^0,c
  5160   000C6E  EF66  F006         	goto	l1920
  5161   000C72                     l1896:
  5162   000C72  0E01               	movlw	1
  5163   000C74  6E11               	movwf	GetTecla@fila^0,c
  5164   000C76  EF66  F006         	goto	l1920
  5165   000C7A                     l1898:
  5166   000C7A  0E02               	movlw	2
  5167   000C7C  6E11               	movwf	GetTecla@fila^0,c
  5168   000C7E  EF66  F006         	goto	l1920
  5169   000C82                     l1900:
  5170   000C82  0E03               	movlw	3
  5171   000C84  6E11               	movwf	GetTecla@fila^0,c
  5172   000C86  EF66  F006         	goto	l1920
  5173   000C8A                     l1902:
  5174   000C8A  0EFF               	movlw	255
  5175   000C8C  EF94  F006         	goto	l180
  5176   000C90                     l1908:
  5177   000C90  5077               	movf	_Filas^0,w,c
  5178                           
  5179                           ; Switch size 1, requested type "simple"
  5180                           ; Number of cases is 4, Range of values is 1 to 8
  5181                           ; switch strategies available:
  5182                           ; Name         Instructions Cycles
  5183                           ; simple_byte           13     7 (average)
  5184                           ;	Chosen strategy is simple_byte
  5185   000C92  0A01               	xorlw	1	; case 1
  5186   000C94  B4D8               	btfsc	status,2,c
  5187   000C96  EF36  F006         	goto	l174
  5188   000C9A  0A03               	xorlw	3	; case 2
  5189   000C9C  B4D8               	btfsc	status,2,c
  5190   000C9E  EF39  F006         	goto	l1896
  5191   000CA2  0A06               	xorlw	6	; case 4
  5192   000CA4  B4D8               	btfsc	status,2,c
  5193   000CA6  EF3D  F006         	goto	l1898
  5194   000CAA  0A0C               	xorlw	12	; case 8
  5195   000CAC  B4D8               	btfsc	status,2,c
  5196   000CAE  EF41  F006         	goto	l1900
  5197   000CB2  EF45  F006         	goto	l1902
  5198   000CB6                     l182:
  5199   000CB6  6A10               	clrf	GetTecla@columna^0,c
  5200   000CB8  EF80  F006         	goto	l1922
  5201   000CBC                     l1910:
  5202   000CBC  0E01               	movlw	1
  5203   000CBE  6E10               	movwf	GetTecla@columna^0,c
  5204   000CC0  EF80  F006         	goto	l1922
  5205   000CC4                     l1912:
  5206   000CC4  0E02               	movlw	2
  5207   000CC6  6E10               	movwf	GetTecla@columna^0,c
  5208   000CC8  EF80  F006         	goto	l1922
  5209   000CCC                     l1920:
  5210   000CCC  5076               	movf	_Columnas^0,w,c
  5211   000CCE  0B07               	andlw	7
  5212   000CD0  6E02               	movwf	??_GetTecla^0,c
  5213   000CD2  6A03               	clrf	(??_GetTecla+1)^0,c
  5214                           
  5215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5216                           ; Switch size 1, requested type "simple"
  5217                           ; Number of cases is 1, Range of values is 0 to 0
  5218                           ; switch strategies available:
  5219                           ; Name         Instructions Cycles
  5220                           ; simple_byte            4     3 (average)
  5221                           ;	Chosen strategy is simple_byte
  5222   000CD4  5003               	movf	(??_GetTecla+1)^0,w,c
  5223   000CD6  0A00               	xorlw	0	; case 0
  5224   000CD8  B4D8               	btfsc	status,2,c
  5225   000CDA  EF71  F006         	goto	l3854
  5226   000CDE  EF45  F006         	goto	l1902
  5227   000CE2                     l3854:
  5228                           
  5229                           ; Switch size 1, requested type "simple"
  5230                           ; Number of cases is 3, Range of values is 1 to 4
  5231                           ; switch strategies available:
  5232                           ; Name         Instructions Cycles
  5233                           ; simple_byte           10     6 (average)
  5234                           ;	Chosen strategy is simple_byte
  5235   000CE2  5002               	movf	??_GetTecla^0,w,c
  5236   000CE4  0A01               	xorlw	1	; case 1
  5237   000CE6  B4D8               	btfsc	status,2,c
  5238   000CE8  EF5B  F006         	goto	l182
  5239   000CEC  0A03               	xorlw	3	; case 2
  5240   000CEE  B4D8               	btfsc	status,2,c
  5241   000CF0  EF5E  F006         	goto	l1910
  5242   000CF4  0A06               	xorlw	6	; case 4
  5243   000CF6  B4D8               	btfsc	status,2,c
  5244   000CF8  EF62  F006         	goto	l1912
  5245   000CFC  EF45  F006         	goto	l1902
  5246   000D00                     l1922:
  5247                           
  5248                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  5249   000D00  0EDD               	movlw	low GetTecla@F3221
  5250   000D02  6EF6               	movwf	tblptrl,c
  5251   000D04                     	if	1	;There is more than 1 active tblptr byte
  5252   000D04  0E1E               	movlw	high GetTecla@F3221
  5253   000D06  6EF7               	movwf	tblptrh,c
  5254   000D08                     	endif
  5255   000D08                     	if	0	;There are less than 3 active tblptr bytes
  5256   000D08                     	endif
  5257   000D08  EE20  F004         	lfsr	2,GetTecla@keymap
  5258   000D0C  0E0B               	movlw	11
  5259   000D0E                     u810:
  5260   000D0E  0009               	tblrd		*+
  5261   000D10  CFF5 FFDE          	movff	tablat,postinc2
  5262   000D14  06E8               	decf	wreg,f,c
  5263   000D16  E2FB               	bc	u810
  5264   000D18                     
  5265                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  5266   000D18  5011               	movf	GetTecla@fila^0,w,c
  5267   000D1A  0D03               	mullw	3
  5268   000D1C  50F3               	movf	243,w,c
  5269   000D1E  0F04               	addlw	low GetTecla@keymap
  5270   000D20  2410               	addwf	GetTecla@columna^0,w,c
  5271   000D22  6ED9               	movwf	fsr2l,c
  5272   000D24  6ADA               	clrf	fsr2h,c
  5273   000D26  50DF               	movf	indf2,w,c
  5274   000D28                     l180:
  5275   000D28  0012               	return		;funcret
  5276   000D2A                     __end_of_GetTecla:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _initRFID *****************
  5280 ;; Defined at:
  5281 ;;		line 297 in file "TAD_RFID.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1
  5295 ;;      Params:         0       0       0
  5296 ;;      Locals:         0       0       0
  5297 ;;      Temps:          0       0       0
  5298 ;;      Totals:         0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used: 1
  5301 ;; Hardware stack levels required when called: 8
  5302 ;; This function calls:
  5303 ;;		_InitPortDirections
  5304 ;;		_MFRC522_Init
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text26
  5311   001714                     __ptext26:
  5312                           	callstack 0
  5313   001714                     _initRFID:
  5314                           	callstack 22
  5315   001714                     
  5316                           ;TAD_RFID.c: 298:     InitPortDirections();
  5317   001714  EC84  F00B         	call	_InitPortDirections	;wreg free
  5318   001718                     
  5319                           ;TAD_RFID.c: 299:     MFRC522_Init();
  5320   001718  EC7A  F009         	call	_MFRC522_Init	;wreg free
  5321   00171C  0012               	return		;funcret
  5322   00171E                     __end_of_initRFID:
  5323                           	callstack 0
  5324                           
  5325 ;; *************** function _MFRC522_Init *****************
  5326 ;; Defined at:
  5327 ;;		line 118 in file "TAD_RFID.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1
  5341 ;;      Params:         0       0       0
  5342 ;;      Locals:         0       0       0
  5343 ;;      Temps:          0       0       0
  5344 ;;      Totals:         0       0       0
  5345 ;;Total ram usage:        0 bytes
  5346 ;; Hardware stack levels used: 1
  5347 ;; Hardware stack levels required when called: 7
  5348 ;; This function calls:
  5349 ;;		_MFRC522_AntennaOff
  5350 ;;		_MFRC522_AntennaOn
  5351 ;;		_MFRC522_Reset
  5352 ;;		_MFRC522_Wr
  5353 ;; This function is called by:
  5354 ;;		_initRFID
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text27
  5359   0012F4                     __ptext27:
  5360                           	callstack 0
  5361   0012F4                     _MFRC522_Init:
  5362                           	callstack 22
  5363   0012F4                     
  5364                           ;TAD_RFID.c: 119:     LATCbits.LATC3 = 1;
  5365   0012F4  868B               	bsf	139,3,c	;volatile
  5366                           
  5367                           ;TAD_RFID.c: 120:     LATCbits.LATC4 = 1;
  5368   0012F6  888B               	bsf	139,4,c	;volatile
  5369   0012F8                     
  5370                           ;TAD_RFID.c: 122:     MFRC522_Reset();
  5371   0012F8  ECE5  F00A         	call	_MFRC522_Reset	;wreg free
  5372                           
  5373                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2A, 0x8D);
  5374   0012FC  0E8D               	movlw	141
  5375   0012FE  6E0C               	movwf	MFRC522_Wr@value^0,c
  5376   001300  0E2A               	movlw	42
  5377   001302  EC40  F007         	call	_MFRC522_Wr
  5378                           
  5379                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2B, 0x3E);
  5380   001306  0E3E               	movlw	62
  5381   001308  6E0C               	movwf	MFRC522_Wr@value^0,c
  5382   00130A  0E2B               	movlw	43
  5383   00130C  EC40  F007         	call	_MFRC522_Wr
  5384                           
  5385                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x2D, 30);
  5386   001310  0E1E               	movlw	30
  5387   001312  6E0C               	movwf	MFRC522_Wr@value^0,c
  5388   001314  0E2D               	movlw	45
  5389   001316  EC40  F007         	call	_MFRC522_Wr
  5390                           
  5391                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x2C, 0);
  5392   00131A  0E00               	movlw	0
  5393   00131C  6E0C               	movwf	MFRC522_Wr@value^0,c
  5394   00131E  0E2C               	movlw	44
  5395   001320  EC40  F007         	call	_MFRC522_Wr
  5396                           
  5397                           ;TAD_RFID.c: 127:     MFRC522_Wr(0x15, 0x40);
  5398   001324  0E40               	movlw	64
  5399   001326  6E0C               	movwf	MFRC522_Wr@value^0,c
  5400   001328  0E15               	movlw	21
  5401   00132A  EC40  F007         	call	_MFRC522_Wr
  5402                           
  5403                           ;TAD_RFID.c: 128:     MFRC522_Wr(0x11, 0x3D);
  5404   00132E  0E3D               	movlw	61
  5405   001330  6E0C               	movwf	MFRC522_Wr@value^0,c
  5406   001332  0E11               	movlw	17
  5407   001334  EC40  F007         	call	_MFRC522_Wr
  5408                           
  5409                           ;TAD_RFID.c: 130:     MFRC522_AntennaOff();
  5410   001338  EC7E  F00B         	call	_MFRC522_AntennaOff	;wreg free
  5411                           
  5412                           ;TAD_RFID.c: 131:     MFRC522_AntennaOn();
  5413   00133C  EC78  F00B         	call	_MFRC522_AntennaOn	;wreg free
  5414   001340  0012               	return		;funcret
  5415   001342                     __end_of_MFRC522_Init:
  5416                           	callstack 0
  5417                           
  5418 ;; *************** function _MFRC522_Reset *****************
  5419 ;; Defined at:
  5420 ;;		line 99 in file "TAD_RFID.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;		None
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;		None
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      void 
  5427 ;; Registers used:
  5428 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMRAM   BANK0   BANK1
  5434 ;;      Params:         0       0       0
  5435 ;;      Locals:         0       0       0
  5436 ;;      Temps:          0       0       0
  5437 ;;      Totals:         0       0       0
  5438 ;;Total ram usage:        0 bytes
  5439 ;; Hardware stack levels used: 1
  5440 ;; Hardware stack levels required when called: 5
  5441 ;; This function calls:
  5442 ;;		_MFRC522_Wr
  5443 ;;		_delay_us
  5444 ;; This function is called by:
  5445 ;;		_MFRC522_Init
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text28
  5450   0015CA                     __ptext28:
  5451                           	callstack 0
  5452   0015CA                     _MFRC522_Reset:
  5453                           	callstack 23
  5454   0015CA                     
  5455                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 1;
  5456   0015CA  888B               	bsf	139,4,c	;volatile
  5457   0015CC                     
  5458                           ;TAD_RFID.c: 101:     delay_us (1);
  5459   0015CC  0E01               	movlw	1
  5460   0015CE  EC63  F00A         	call	_delay_us
  5461   0015D2                     
  5462                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 0;
  5463   0015D2  988B               	bcf	139,4,c	;volatile
  5464                           
  5465                           ;TAD_RFID.c: 103:     delay_us (1);
  5466   0015D4  0E01               	movlw	1
  5467   0015D6  EC63  F00A         	call	_delay_us
  5468   0015DA                     
  5469                           ;TAD_RFID.c: 104:     LATCbits.LATC4 = 1;
  5470   0015DA  888B               	bsf	139,4,c	;volatile
  5471                           
  5472                           ;TAD_RFID.c: 105:     delay_us (1);
  5473   0015DC  0E01               	movlw	1
  5474   0015DE  EC63  F00A         	call	_delay_us
  5475                           
  5476                           ;TAD_RFID.c: 106:     MFRC522_Wr(0x01, 0x0F);
  5477   0015E2  0E0F               	movlw	15
  5478   0015E4  6E0C               	movwf	MFRC522_Wr@value^0,c
  5479   0015E6  0E01               	movlw	1
  5480   0015E8  EC40  F007         	call	_MFRC522_Wr
  5481                           
  5482                           ;TAD_RFID.c: 107:     delay_us (1);
  5483   0015EC  0E01               	movlw	1
  5484   0015EE  EC63  F00A         	call	_delay_us
  5485   0015F2  0012               	return		;funcret
  5486   0015F4                     __end_of_MFRC522_Reset:
  5487                           	callstack 0
  5488                           
  5489 ;; *************** function _MFRC522_AntennaOn *****************
  5490 ;; Defined at:
  5491 ;;		line 110 in file "TAD_RFID.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1
  5505 ;;      Params:         0       0       0
  5506 ;;      Locals:         0       0       0
  5507 ;;      Temps:          0       0       0
  5508 ;;      Totals:         0       0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used: 1
  5511 ;; Hardware stack levels required when called: 6
  5512 ;; This function calls:
  5513 ;;		_MFRC522_Set_Bit
  5514 ;; This function is called by:
  5515 ;;		_MFRC522_Init
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text29
  5520   0016F0                     __ptext29:
  5521                           	callstack 0
  5522   0016F0                     _MFRC522_AntennaOn:
  5523                           	callstack 22
  5524   0016F0                     
  5525                           ;TAD_RFID.c: 111:     MFRC522_Set_Bit(0x14, 0x03);
  5526   0016F0  0E03               	movlw	3
  5527   0016F2  6E11               	movwf	MFRC522_Set_Bit@mask^0,c
  5528   0016F4  0E14               	movlw	20
  5529   0016F6  EC66  F00B         	call	_MFRC522_Set_Bit
  5530   0016FA  0012               	return		;funcret
  5531   0016FC                     __end_of_MFRC522_AntennaOn:
  5532                           	callstack 0
  5533                           
  5534 ;; *************** function _MFRC522_Set_Bit *****************
  5535 ;; Defined at:
  5536 ;;		line 95 in file "TAD_RFID.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  addr            1    wreg     unsigned char 
  5539 ;;  mask            1   16[COMRAM] unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  addr            1   17[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1
  5551 ;;      Params:         1       0       0
  5552 ;;      Locals:         1       0       0
  5553 ;;      Temps:          0       0       0
  5554 ;;      Totals:         2       0       0
  5555 ;;Total ram usage:        2 bytes
  5556 ;; Hardware stack levels used: 1
  5557 ;; Hardware stack levels required when called: 5
  5558 ;; This function calls:
  5559 ;;		_MFRC522_Rd
  5560 ;;		_MFRC522_Wr
  5561 ;; This function is called by:
  5562 ;;		_MFRC522_AntennaOn
  5563 ;;		_motor_RFID
  5564 ;;		_MFRC522_ToCard
  5565 ;;		_MFRC522_CRC
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text30
  5570   0016CC                     __ptext30:
  5571                           	callstack 0
  5572   0016CC                     _MFRC522_Set_Bit:
  5573                           	callstack 24
  5574                           
  5575                           ;incstack = 0
  5576                           ;MFRC522_Set_Bit@addr stored from wreg
  5577   0016CC  6E12               	movwf	MFRC522_Set_Bit@addr^0,c
  5578   0016CE                     
  5579                           ;TAD_RFID.c: 96:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  5580   0016CE  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5581   0016D0  EC94  F007         	call	_MFRC522_Rd
  5582   0016D4  1011               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  5583   0016D6  6E0C               	movwf	MFRC522_Wr@value^0,c
  5584   0016D8  5012               	movf	MFRC522_Set_Bit@addr^0,w,c
  5585   0016DA  EC40  F007         	call	_MFRC522_Wr
  5586   0016DE  0012               	return		;funcret
  5587   0016E0                     __end_of_MFRC522_Set_Bit:
  5588                           	callstack 0
  5589                           
  5590 ;; *************** function _MFRC522_AntennaOff *****************
  5591 ;; Defined at:
  5592 ;;		line 114 in file "TAD_RFID.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1
  5606 ;;      Params:         0       0       0
  5607 ;;      Locals:         0       0       0
  5608 ;;      Temps:          0       0       0
  5609 ;;      Totals:         0       0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used: 1
  5612 ;; Hardware stack levels required when called: 6
  5613 ;; This function calls:
  5614 ;;		_MFRC522_Clear_Bit
  5615 ;; This function is called by:
  5616 ;;		_MFRC522_Init
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text31
  5621   0016FC                     __ptext31:
  5622                           	callstack 0
  5623   0016FC                     _MFRC522_AntennaOff:
  5624                           	callstack 22
  5625   0016FC                     
  5626                           ;TAD_RFID.c: 115:     MFRC522_Clear_Bit(0x14, 0x03);
  5627   0016FC  0E03               	movlw	3
  5628   0016FE  6E11               	movwf	MFRC522_Clear_Bit@mask^0,c
  5629   001700  0E14               	movlw	20
  5630   001702  EC2D  F00B         	call	_MFRC522_Clear_Bit
  5631   001706  0012               	return		;funcret
  5632   001708                     __end_of_MFRC522_AntennaOff:
  5633                           	callstack 0
  5634                           
  5635 ;; *************** function _MFRC522_Clear_Bit *****************
  5636 ;; Defined at:
  5637 ;;		line 91 in file "TAD_RFID.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  addr            1    wreg     unsigned char 
  5640 ;;  mask            1   16[COMRAM] unsigned char 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;  addr            1   18[COMRAM] unsigned char 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1
  5652 ;;      Params:         1       0       0
  5653 ;;      Locals:         1       0       0
  5654 ;;      Temps:          1       0       0
  5655 ;;      Totals:         3       0       0
  5656 ;;Total ram usage:        3 bytes
  5657 ;; Hardware stack levels used: 1
  5658 ;; Hardware stack levels required when called: 5
  5659 ;; This function calls:
  5660 ;;		_MFRC522_Rd
  5661 ;;		_MFRC522_Wr
  5662 ;; This function is called by:
  5663 ;;		_MFRC522_AntennaOff
  5664 ;;		_motor_RFID
  5665 ;;		_MFRC522_ToCard
  5666 ;;		_MFRC522_CRC
  5667 ;;		_MFRC522_Halt
  5668 ;;		_MFRC522_AntiColl
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           	psect	text32
  5673   00165A                     __ptext32:
  5674                           	callstack 0
  5675   00165A                     _MFRC522_Clear_Bit:
  5676                           	callstack 24
  5677                           
  5678                           ;incstack = 0
  5679                           ;MFRC522_Clear_Bit@addr stored from wreg
  5680   00165A  6E13               	movwf	MFRC522_Clear_Bit@addr^0,c
  5681   00165C                     
  5682                           ;TAD_RFID.c: 92:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  5683   00165C  5011               	movf	MFRC522_Clear_Bit@mask^0,w,c
  5684   00165E  0AFF               	xorlw	255
  5685   001660  6E12               	movwf	??_MFRC522_Clear_Bit^0,c
  5686   001662  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5687   001664  EC94  F007         	call	_MFRC522_Rd
  5688   001668  1412               	andwf	??_MFRC522_Clear_Bit^0,w,c
  5689   00166A  6E0C               	movwf	MFRC522_Wr@value^0,c
  5690   00166C  5013               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5691   00166E  EC40  F007         	call	_MFRC522_Wr
  5692   001672  0012               	return		;funcret
  5693   001674                     __end_of_MFRC522_Clear_Bit:
  5694                           	callstack 0
  5695                           
  5696 ;; *************** function _MFRC522_Wr *****************
  5697 ;; Defined at:
  5698 ;;		line 63 in file "TAD_RFID.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  Address         1    wreg     unsigned char 
  5701 ;;  value           1   11[COMRAM] unsigned char 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  Address         1   13[COMRAM] unsigned char 
  5704 ;;  i               1   15[COMRAM] unsigned char 
  5705 ;;  ucAddr          1   14[COMRAM] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      void 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1
  5715 ;;      Params:         1       0       0
  5716 ;;      Locals:         3       0       0
  5717 ;;      Temps:          1       0       0
  5718 ;;      Totals:         5       0       0
  5719 ;;Total ram usage:        5 bytes
  5720 ;; Hardware stack levels used: 1
  5721 ;; Hardware stack levels required when called: 4
  5722 ;; This function calls:
  5723 ;;		_delay_us
  5724 ;; This function is called by:
  5725 ;;		_MFRC522_Clear_Bit
  5726 ;;		_MFRC522_Set_Bit
  5727 ;;		_MFRC522_Reset
  5728 ;;		_MFRC522_Init
  5729 ;;		_motor_RFID
  5730 ;;		_MFRC522_ToCard
  5731 ;;		_MFRC522_Request
  5732 ;;		_MFRC522_CRC
  5733 ;;		_MFRC522_AntiColl
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text33
  5738   000E80                     __ptext33:
  5739                           	callstack 0
  5740   000E80                     _MFRC522_Wr:
  5741                           	callstack 25
  5742                           
  5743                           ;incstack = 0
  5744                           ;MFRC522_Wr@Address stored from wreg
  5745   000E80  6E0E               	movwf	MFRC522_Wr@Address^0,c
  5746   000E82                     
  5747                           ;TAD_RFID.c: 64:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  5748   000E82  500E               	movf	MFRC522_Wr@Address^0,w,c
  5749   000E84  240E               	addwf	MFRC522_Wr@Address^0,w,c
  5750   000E86  0B7E               	andlw	126
  5751   000E88  6E0F               	movwf	MFRC522_Wr@ucAddr^0,c
  5752   000E8A                     
  5753                           ;TAD_RFID.c: 65:     LATCbits.LATC2 = 0;
  5754   000E8A  948B               	bcf	139,2,c	;volatile
  5755   000E8C                     
  5756                           ;TAD_RFID.c: 66:     LATCbits.LATC3 = 0;
  5757   000E8C  968B               	bcf	139,3,c	;volatile
  5758   000E8E                     
  5759                           ;TAD_RFID.c: 67:     for (i = 8; i > 0; i--) {
  5760   000E8E  0E08               	movlw	8
  5761   000E90  6E10               	movwf	MFRC522_Wr@i^0,c
  5762   000E92                     l2764:
  5763                           
  5764                           ;TAD_RFID.c: 68:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5765   000E92  BE0F               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  5766   000E94  EF4E  F007         	goto	u1761
  5767   000E98  EF52  F007         	goto	u1760
  5768   000E9C                     u1761:
  5769   000E9C  6A0D               	clrf	??_MFRC522_Wr^0,c
  5770   000E9E  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5771   000EA0  EF53  F007         	goto	u1778
  5772   000EA4                     u1760:
  5773   000EA4  6A0D               	clrf	??_MFRC522_Wr^0,c
  5774   000EA6                     u1778:
  5775   000EA6  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5776   000EA8  508B               	movf	139,w,c	;volatile
  5777   000EAA  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5778   000EAC  0BFD               	andlw	-3
  5779   000EAE  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5780   000EB0  6E8B               	movwf	139,c	;volatile
  5781   000EB2                     
  5782                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 1;
  5783   000EB2  848B               	bsf	139,2,c	;volatile
  5784                           
  5785                           ;TAD_RFID.c: 70:         ucAddr <<= 1;
  5786   000EB4  90D8               	bcf	status,0,c
  5787   000EB6  360F               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  5788   000EB8                     
  5789                           ;TAD_RFID.c: 71:         delay_us(5);
  5790   000EB8  0E05               	movlw	5
  5791   000EBA  EC63  F00A         	call	_delay_us
  5792   000EBE                     
  5793                           ;TAD_RFID.c: 72:         LATCbits.LATC2 = 0;
  5794   000EBE  948B               	bcf	139,2,c	;volatile
  5795   000EC0                     
  5796                           ;TAD_RFID.c: 73:         delay_us(5);
  5797   000EC0  0E05               	movlw	5
  5798   000EC2  EC63  F00A         	call	_delay_us
  5799   000EC6                     
  5800                           ;TAD_RFID.c: 74:     }
  5801   000EC6  0610               	decf	MFRC522_Wr@i^0,f,c
  5802   000EC8  5010               	movf	MFRC522_Wr@i^0,w,c
  5803   000ECA  A4D8               	btfss	status,2,c
  5804   000ECC  EF6A  F007         	goto	u1781
  5805   000ED0  EF6C  F007         	goto	u1780
  5806   000ED4                     u1781:
  5807   000ED4  EF49  F007         	goto	l2764
  5808   000ED8                     u1780:
  5809   000ED8                     
  5810                           ;TAD_RFID.c: 76:     for (i = 8; i > 0; i--) {
  5811   000ED8  0E08               	movlw	8
  5812   000EDA  6E10               	movwf	MFRC522_Wr@i^0,c
  5813   000EDC                     l2782:
  5814                           
  5815                           ;TAD_RFID.c: 77:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  5816   000EDC  BE0C               	btfsc	MFRC522_Wr@value^0,7,c
  5817   000EDE  EF73  F007         	goto	u1791
  5818   000EE2  EF77  F007         	goto	u1790
  5819   000EE6                     u1791:
  5820   000EE6  6A0D               	clrf	??_MFRC522_Wr^0,c
  5821   000EE8  2A0D               	incf	??_MFRC522_Wr^0,f,c
  5822   000EEA  EF78  F007         	goto	u1808
  5823   000EEE                     u1790:
  5824   000EEE  6A0D               	clrf	??_MFRC522_Wr^0,c
  5825   000EF0                     u1808:
  5826   000EF0  460D               	rlncf	??_MFRC522_Wr^0,f,c
  5827   000EF2  508B               	movf	139,w,c	;volatile
  5828   000EF4  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5829   000EF6  0BFD               	andlw	-3
  5830   000EF8  180D               	xorwf	??_MFRC522_Wr^0,w,c
  5831   000EFA  6E8B               	movwf	139,c	;volatile
  5832   000EFC                     
  5833                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 1;
  5834   000EFC  848B               	bsf	139,2,c	;volatile
  5835                           
  5836                           ;TAD_RFID.c: 79:         value <<= 1;
  5837   000EFE  90D8               	bcf	status,0,c
  5838   000F00  360C               	rlcf	MFRC522_Wr@value^0,f,c
  5839   000F02                     
  5840                           ;TAD_RFID.c: 80:         delay_us(5);
  5841   000F02  0E05               	movlw	5
  5842   000F04  EC63  F00A         	call	_delay_us
  5843   000F08                     
  5844                           ;TAD_RFID.c: 81:         LATCbits.LATC2 = 0;
  5845   000F08  948B               	bcf	139,2,c	;volatile
  5846   000F0A                     
  5847                           ;TAD_RFID.c: 82:         delay_us(5);
  5848   000F0A  0E05               	movlw	5
  5849   000F0C  EC63  F00A         	call	_delay_us
  5850   000F10                     
  5851                           ;TAD_RFID.c: 83:     }
  5852   000F10  0610               	decf	MFRC522_Wr@i^0,f,c
  5853   000F12  5010               	movf	MFRC522_Wr@i^0,w,c
  5854   000F14  A4D8               	btfss	status,2,c
  5855   000F16  EF8F  F007         	goto	u1811
  5856   000F1A  EF91  F007         	goto	u1810
  5857   000F1E                     u1811:
  5858   000F1E  EF6E  F007         	goto	l2782
  5859   000F22                     u1810:
  5860   000F22                     
  5861                           ;TAD_RFID.c: 85:     LATCbits.LATC3 = 1;
  5862   000F22  868B               	bsf	139,3,c	;volatile
  5863                           
  5864                           ;TAD_RFID.c: 86:     LATCbits.LATC2 = 1;
  5865   000F24  848B               	bsf	139,2,c	;volatile
  5866   000F26  0012               	return		;funcret
  5867   000F28                     __end_of_MFRC522_Wr:
  5868                           	callstack 0
  5869                           
  5870 ;; *************** function _MFRC522_Rd *****************
  5871 ;; Defined at:
  5872 ;;		line 32 in file "TAD_RFID.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;  Address         1    wreg     unsigned char 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  Address         1    7[COMRAM] unsigned char 
  5877 ;;  i               1   10[COMRAM] unsigned char 
  5878 ;;  ucResult        1    9[COMRAM] unsigned char 
  5879 ;;  ucAddr          1    8[COMRAM] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      unsigned char 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1
  5889 ;;      Params:         0       0       0
  5890 ;;      Locals:         4       0       0
  5891 ;;      Temps:          1       0       0
  5892 ;;      Totals:         5       0       0
  5893 ;;Total ram usage:        5 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 4
  5896 ;; This function calls:
  5897 ;;		_delay_us
  5898 ;; This function is called by:
  5899 ;;		_MFRC522_Clear_Bit
  5900 ;;		_MFRC522_Set_Bit
  5901 ;;		_motor_RFID
  5902 ;;		_MFRC522_ToCard
  5903 ;;		_MFRC522_CRC
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text34
  5908   000F28                     __ptext34:
  5909                           	callstack 0
  5910   000F28                     _MFRC522_Rd:
  5911                           	callstack 24
  5912                           
  5913                           ;incstack = 0
  5914                           ;MFRC522_Rd@Address stored from wreg
  5915   000F28  6E08               	movwf	MFRC522_Rd@Address^0,c
  5916   000F2A                     
  5917                           ;TAD_RFID.c: 33:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  5918   000F2A  5008               	movf	MFRC522_Rd@Address^0,w,c
  5919   000F2C  2408               	addwf	MFRC522_Rd@Address^0,w,c
  5920   000F2E  0B7E               	andlw	126
  5921   000F30  0980               	iorlw	128
  5922   000F32  6E09               	movwf	MFRC522_Rd@ucAddr^0,c
  5923   000F34                     
  5924                           ;TAD_RFID.c: 34:     unsigned char ucResult = 0;
  5925   000F34  6A0A               	clrf	MFRC522_Rd@ucResult^0,c
  5926   000F36                     
  5927                           ;TAD_RFID.c: 36:     LATCbits.LATC2 = 0;
  5928   000F36  948B               	bcf	139,2,c	;volatile
  5929   000F38                     
  5930                           ;TAD_RFID.c: 37:     LATCbits.LATC3 = 0;
  5931   000F38  968B               	bcf	139,3,c	;volatile
  5932   000F3A                     
  5933                           ;TAD_RFID.c: 39:     for (i = 8; i > 0; i--) {
  5934   000F3A  0E08               	movlw	8
  5935   000F3C  6E0B               	movwf	MFRC522_Rd@i^0,c
  5936   000F3E                     l2718:
  5937                           
  5938                           ;TAD_RFID.c: 40:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5939   000F3E  BE09               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  5940   000F40  EFA4  F007         	goto	u1711
  5941   000F44  EFA8  F007         	goto	u1710
  5942   000F48                     u1711:
  5943   000F48  6A07               	clrf	??_MFRC522_Rd^0,c
  5944   000F4A  2A07               	incf	??_MFRC522_Rd^0,f,c
  5945   000F4C  EFA9  F007         	goto	u1728
  5946   000F50                     u1710:
  5947   000F50  6A07               	clrf	??_MFRC522_Rd^0,c
  5948   000F52                     u1728:
  5949   000F52  4607               	rlncf	??_MFRC522_Rd^0,f,c
  5950   000F54  508B               	movf	139,w,c	;volatile
  5951   000F56  1807               	xorwf	??_MFRC522_Rd^0,w,c
  5952   000F58  0BFD               	andlw	-3
  5953   000F5A  1807               	xorwf	??_MFRC522_Rd^0,w,c
  5954   000F5C  6E8B               	movwf	139,c	;volatile
  5955   000F5E                     
  5956                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 1;
  5957   000F5E  848B               	bsf	139,2,c	;volatile
  5958   000F60                     
  5959                           ;TAD_RFID.c: 42:         delay_us(5);
  5960   000F60  0E05               	movlw	5
  5961   000F62  EC63  F00A         	call	_delay_us
  5962   000F66                     
  5963                           ;TAD_RFID.c: 43:         ucAddr <<= 1;
  5964   000F66  90D8               	bcf	status,0,c
  5965   000F68  3609               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  5966   000F6A                     
  5967                           ;TAD_RFID.c: 44:         LATCbits.LATC2 = 0;
  5968   000F6A  948B               	bcf	139,2,c	;volatile
  5969                           
  5970                           ;TAD_RFID.c: 45:         delay_us(5);
  5971   000F6C  0E05               	movlw	5
  5972   000F6E  EC63  F00A         	call	_delay_us
  5973   000F72                     
  5974                           ;TAD_RFID.c: 46:     }
  5975   000F72  060B               	decf	MFRC522_Rd@i^0,f,c
  5976   000F74  500B               	movf	MFRC522_Rd@i^0,w,c
  5977   000F76  A4D8               	btfss	status,2,c
  5978   000F78  EFC0  F007         	goto	u1731
  5979   000F7C  EFC2  F007         	goto	u1730
  5980   000F80                     u1731:
  5981   000F80  EF9F  F007         	goto	l2718
  5982   000F84                     u1730:
  5983   000F84                     
  5984                           ;TAD_RFID.c: 48:     for (i = 8; i > 0; i--) {
  5985   000F84  0E08               	movlw	8
  5986   000F86  6E0B               	movwf	MFRC522_Rd@i^0,c
  5987   000F88                     l214:
  5988                           
  5989                           ;TAD_RFID.c: 49:         LATCbits.LATC2 = 1;
  5990   000F88  848B               	bsf	139,2,c	;volatile
  5991   000F8A                     
  5992                           ;TAD_RFID.c: 50:         delay_us(5);
  5993   000F8A  0E05               	movlw	5
  5994   000F8C  EC63  F00A         	call	_delay_us
  5995   000F90                     
  5996                           ;TAD_RFID.c: 51:         ucResult <<= 1;
  5997   000F90  90D8               	bcf	status,0,c
  5998   000F92  360A               	rlcf	MFRC522_Rd@ucResult^0,f,c
  5999   000F94                     
  6000                           ;TAD_RFID.c: 52:         ucResult|= PORTCbits.RC0;
  6001   000F94  B082               	btfsc	130,0,c	;volatile
  6002   000F96  EFCF  F007         	goto	u1741
  6003   000F9A  EFD2  F007         	goto	u1740
  6004   000F9E                     u1741:
  6005   000F9E  0E01               	movlw	1
  6006   000FA0  EFD3  F007         	goto	u1746
  6007   000FA4                     u1740:
  6008   000FA4  0E00               	movlw	0
  6009   000FA6                     u1746:
  6010   000FA6  120A               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6011   000FA8                     
  6012                           ;TAD_RFID.c: 53:         LATCbits.LATC2 = 0;
  6013   000FA8  948B               	bcf	139,2,c	;volatile
  6014                           
  6015                           ;TAD_RFID.c: 54:         delay_us(5);
  6016   000FAA  0E05               	movlw	5
  6017   000FAC  EC63  F00A         	call	_delay_us
  6018   000FB0                     
  6019                           ;TAD_RFID.c: 55:     }
  6020   000FB0  060B               	decf	MFRC522_Rd@i^0,f,c
  6021   000FB2  500B               	movf	MFRC522_Rd@i^0,w,c
  6022   000FB4  A4D8               	btfss	status,2,c
  6023   000FB6  EFDF  F007         	goto	u1751
  6024   000FBA  EFE1  F007         	goto	u1750
  6025   000FBE                     u1751:
  6026   000FBE  EFC4  F007         	goto	l214
  6027   000FC2                     u1750:
  6028   000FC2                     
  6029                           ;TAD_RFID.c: 57:     LATCbits.LATC3 = 1;
  6030   000FC2  868B               	bsf	139,3,c	;volatile
  6031                           
  6032                           ;TAD_RFID.c: 58:     LATCbits.LATC2 = 1;
  6033   000FC4  848B               	bsf	139,2,c	;volatile
  6034   000FC6                     
  6035                           ;TAD_RFID.c: 59:     return ucResult;
  6036   000FC6  500A               	movf	MFRC522_Rd@ucResult^0,w,c
  6037   000FC8  0012               	return		;funcret
  6038   000FCA                     __end_of_MFRC522_Rd:
  6039                           	callstack 0
  6040                           
  6041 ;; *************** function _delay_us *****************
  6042 ;; Defined at:
  6043 ;;		line 27 in file "TAD_RFID.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  howMany         1    wreg     unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  howMany         1    4[COMRAM] unsigned char 
  6048 ;;  x               1    5[COMRAM] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  1    wreg      void 
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0, prodl, prodh
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1
  6058 ;;      Params:         0       0       0
  6059 ;;      Locals:         2       0       0
  6060 ;;      Temps:          3       0       0
  6061 ;;      Totals:         5       0       0
  6062 ;;Total ram usage:        5 bytes
  6063 ;; Hardware stack levels used: 1
  6064 ;; Hardware stack levels required when called: 3
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		_MFRC522_Rd
  6069 ;;		_MFRC522_Wr
  6070 ;;		_MFRC522_Reset
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text35
  6075   0014C6                     __ptext35:
  6076                           	callstack 0
  6077   0014C6                     _delay_us:
  6078                           	callstack 25
  6079                           
  6080                           ;incstack = 0
  6081                           ;delay_us@howMany stored from wreg
  6082   0014C6  6E05               	movwf	delay_us@howMany^0,c
  6083   0014C8                     
  6084                           ;TAD_RFID.c: 28:     char x;;TAD_RFID.c: 29:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  6085   0014C8  6A06               	clrf	delay_us@x^0,c
  6086   0014CA  EF69  F00A         	goto	l2674
  6087   0014CE                     l207:
  6088   0014CE  0000               	nop	
  6089   0014D0  2A06               	incf	delay_us@x^0,f,c
  6090   0014D2                     l2674:
  6091   0014D2  5005               	movf	delay_us@howMany^0,w,c
  6092   0014D4  0D10               	mullw	16
  6093   0014D6  5006               	movf	delay_us@x^0,w,c
  6094   0014D8  6E02               	movwf	??_delay_us^0,c
  6095   0014DA  6A03               	clrf	(??_delay_us+1)^0,c
  6096   0014DC  50F3               	movf	243,w,c
  6097   0014DE  5C02               	subwf	??_delay_us^0,w,c
  6098   0014E0  5003               	movf	(??_delay_us+1)^0,w,c
  6099   0014E2  0A80               	xorlw	128
  6100   0014E4  6E04               	movwf	(??_delay_us+2)^0,c
  6101   0014E6  50F4               	movf	244,w,c
  6102   0014E8  0A80               	xorlw	128
  6103   0014EA  5804               	subwfb	(??_delay_us+2)^0,w,c
  6104   0014EC  A0D8               	btfss	status,0,c
  6105   0014EE  EF7B  F00A         	goto	u1661
  6106   0014F2  EF7D  F00A         	goto	u1660
  6107   0014F6                     u1661:
  6108   0014F6  EF67  F00A         	goto	l207
  6109   0014FA                     u1660:
  6110   0014FA  0012               	return		;funcret
  6111   0014FC                     __end_of_delay_us:
  6112                           	callstack 0
  6113                           
  6114 ;; *************** function _InitPortDirections *****************
  6115 ;; Defined at:
  6116 ;;		line 19 in file "TAD_RFID.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		None
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1
  6130 ;;      Params:         0       0       0
  6131 ;;      Locals:         0       0       0
  6132 ;;      Temps:          0       0       0
  6133 ;;      Totals:         0       0       0
  6134 ;;Total ram usage:        0 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; Hardware stack levels required when called: 3
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_initRFID
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text36
  6145   001708                     __ptext36:
  6146                           	callstack 0
  6147   001708                     _InitPortDirections:
  6148                           	callstack 26
  6149   001708                     
  6150                           ;TAD_RFID.c: 20:     TRISCbits.TRISC0 = 1;
  6151   001708  8094               	bsf	148,0,c	;volatile
  6152                           
  6153                           ;TAD_RFID.c: 21:     TRISCbits.TRISC1 = 0;
  6154   00170A  9294               	bcf	148,1,c	;volatile
  6155                           
  6156                           ;TAD_RFID.c: 22:     TRISCbits.TRISC2 = 0;
  6157   00170C  9494               	bcf	148,2,c	;volatile
  6158                           
  6159                           ;TAD_RFID.c: 23:     TRISCbits.TRISC3 = 0;
  6160   00170E  9694               	bcf	148,3,c	;volatile
  6161                           
  6162                           ;TAD_RFID.c: 24:     TRISCbits.TRISC4 = 0;
  6163   001710  9894               	bcf	148,4,c	;volatile
  6164   001712  0012               	return		;funcret
  6165   001714                     __end_of_InitPortDirections:
  6166                           	callstack 0
  6167                           
  6168 ;; *************** function _initPorts *****************
  6169 ;; Defined at:
  6170 ;;		line 58 in file "main.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;		None
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1
  6184 ;;      Params:         0       0       0
  6185 ;;      Locals:         0       0       0
  6186 ;;      Temps:          0       0       0
  6187 ;;      Totals:         0       0       0
  6188 ;;Total ram usage:        0 bytes
  6189 ;; Hardware stack levels used: 1
  6190 ;; Hardware stack levels required when called: 3
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text37
  6199   00172E                     __ptext37:
  6200                           	callstack 0
  6201   00172E                     _initPorts:
  6202                           	callstack 27
  6203   00172E  0E0F               	movlw	15
  6204   001730  6EC1               	movwf	193,c	;volatile
  6205   001732  6A92               	clrf	146,c	;volatile
  6206   001734  0012               	return		;funcret
  6207   001736                     __end_of_initPorts:
  6208                           	callstack 0
  6209                           
  6210 ;; *************** function _Terminal_Init *****************
  6211 ;; Defined at:
  6212 ;;		line 11 in file "TAD_TERMINAL.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;		None
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      void 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMRAM   BANK0   BANK1
  6226 ;;      Params:         0       0       0
  6227 ;;      Locals:         0       0       0
  6228 ;;      Temps:          0       0       0
  6229 ;;      Totals:         0       0       0
  6230 ;;Total ram usage:        0 bytes
  6231 ;; Hardware stack levels used: 1
  6232 ;; Hardware stack levels required when called: 3
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_main
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text38
  6241   0016E0                     __ptext38:
  6242                           	callstack 0
  6243   0016E0                     _Terminal_Init:
  6244                           	callstack 27
  6245   0016E0                     
  6246                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  6247   0016E0  0E24               	movlw	36
  6248   0016E2  6EAC               	movwf	172,c	;volatile
  6249                           
  6250                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  6251   0016E4  0E90               	movlw	144
  6252   0016E6  6EAB               	movwf	171,c	;volatile
  6253   0016E8                     
  6254                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  6255   0016E8  68AF               	setf	175,c	;volatile
  6256   0016EA                     
  6257                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  6258   0016EA  6AB8               	clrf	184,c	;volatile
  6259   0016EC                     
  6260                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  6261   0016EC  6A65               	clrf	_hashtag_pressed^0,c
  6262   0016EE  0012               	return		;funcret
  6263   0016F0                     __end_of_Terminal_Init:
  6264                           	callstack 0
  6265                           
  6266 ;; *************** function _TI_Init *****************
  6267 ;; Defined at:
  6268 ;;		line 32 in file "TAD_TIMER.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  counter         1    1[COMRAM] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1
  6282 ;;      Params:         0       0       0
  6283 ;;      Locals:         1       0       0
  6284 ;;      Temps:          0       0       0
  6285 ;;      Totals:         1       0       0
  6286 ;;Total ram usage:        1 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 3
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_main
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text39
  6297   001532                     __ptext39:
  6298                           	callstack 0
  6299   001532                     _TI_Init:
  6300                           	callstack 27
  6301   001532                     
  6302                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  6303   001532  6A02               	clrf	TI_Init@counter^0,c
  6304   001534                     l3286:
  6305                           
  6306                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  6307   001534  5002               	movf	TI_Init@counter^0,w,c
  6308   001536  0D05               	mullw	5
  6309   001538  50F3               	movf	243,w,c
  6310   00153A  0F84               	addlw	low (_Timers+4)
  6311   00153C  6ED9               	movwf	fsr2l,c
  6312   00153E  6ADA               	clrf	fsr2h,c
  6313   001540  6ADF               	clrf	indf2,c
  6314   001542                     
  6315                           ;TAD_TIMER.c: 35:  }
  6316   001542  2A02               	incf	TI_Init@counter^0,f,c
  6317   001544  0E03               	movlw	3
  6318   001546  6402               	cpfsgt	TI_Init@counter^0,c
  6319   001548  EFA8  F00A         	goto	u2541
  6320   00154C  EFAA  F00A         	goto	u2540
  6321   001550                     u2541:
  6322   001550  EF9A  F00A         	goto	l3286
  6323   001554                     u2540:
  6324   001554                     
  6325                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  6326   001554  0E82               	movlw	130
  6327   001556  6ED5               	movwf	213,c	;volatile
  6328                           
  6329                           ;TAD_TIMER.c: 37:     TMR0=63036;
  6330   001558  0EF6               	movlw	246
  6331   00155A  6ED7               	movwf	215,c	;volatile
  6332   00155C  0E3C               	movlw	60
  6333   00155E  6ED6               	movwf	214,c	;volatile
  6334   001560                     
  6335                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  6336   001560  94F2               	bcf	242,2,c	;volatile
  6337   001562                     
  6338                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  6339   001562  8AF2               	bsf	242,5,c	;volatile
  6340   001564  0012               	return		;funcret
  6341   001566                     __end_of_TI_Init:
  6342                           	callstack 0
  6343                           
  6344 ;; *************** function _LcPutString *****************
  6345 ;; Defined at:
  6346 ;;		line 195 in file "TAD_DISPLAY.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  s               2   24[COMRAM] PTR unsigned char 
  6349 ;;		 -> STR_1(5), 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      void 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1
  6361 ;;      Params:         2       0       0
  6362 ;;      Locals:         0       0       0
  6363 ;;      Temps:          0       0       0
  6364 ;;      Totals:         2       0       0
  6365 ;;Total ram usage:        2 bytes
  6366 ;; Hardware stack levels used: 1
  6367 ;; Hardware stack levels required when called: 7
  6368 ;; This function calls:
  6369 ;;		_LcPutChar
  6370 ;; This function is called by:
  6371 ;;		_main
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text40
  6376   0014FC                     __ptext40:
  6377                           	callstack 0
  6378   0014FC                     _LcPutString:
  6379                           	callstack 23
  6380   0014FC                     
  6381                           ;TAD_DISPLAY.c: 199:  while(*s) LcPutChar(*s++);
  6382   0014FC  EF8A  F00A         	goto	l3462
  6383   001500                     l3458:
  6384   001500  C019  FFF6         	movff	LcPutString@s,tblptrl
  6385   001504  C01A  FFF7         	movff	LcPutString@s+1,tblptrh
  6386   001508                     	if	0	;tblptru may be non-zero
  6387   001508                     	endif
  6388   001508                     	if	0	;tblptru may be non-zero
  6389   001508                     	endif
  6390   001508  0008               	tblrd		*
  6391   00150A  50F5               	movf	tablat,w,c
  6392   00150C  ECCF  F005         	call	_LcPutChar
  6393   001510  4A19               	infsnz	LcPutString@s^0,f,c
  6394   001512  2A1A               	incf	(LcPutString@s+1)^0,f,c
  6395   001514                     l3462:
  6396   001514  C019  FFF6         	movff	LcPutString@s,tblptrl
  6397   001518  C01A  FFF7         	movff	LcPutString@s+1,tblptrh
  6398   00151C                     	if	0	;tblptru may be non-zero
  6399   00151C                     	endif
  6400   00151C                     	if	0	;tblptru may be non-zero
  6401   00151C                     	endif
  6402   00151C  0008               	tblrd		*
  6403   00151E  50F5               	movf	tablat,w,c
  6404   001520  0900               	iorlw	0
  6405   001522  A4D8               	btfss	status,2,c
  6406   001524  EF96  F00A         	goto	u2781
  6407   001528  EF98  F00A         	goto	u2780
  6408   00152C                     u2781:
  6409   00152C  EF80  F00A         	goto	l3458
  6410   001530                     u2780:
  6411   001530  0012               	return		;funcret
  6412   001532                     __end_of_LcPutString:
  6413                           	callstack 0
  6414                           
  6415 ;; *************** function _LcPutChar *****************
  6416 ;; Defined at:
  6417 ;;		line 161 in file "TAD_DISPLAY.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  c               1    wreg     unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  c               1   23[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1
  6431 ;;      Params:         0       0       0
  6432 ;;      Locals:         1       0       0
  6433 ;;      Temps:          0       0       0
  6434 ;;      Totals:         1       0       0
  6435 ;;Total ram usage:        1 bytes
  6436 ;; Hardware stack levels used: 1
  6437 ;; Hardware stack levels required when called: 6
  6438 ;; This function calls:
  6439 ;;		_CantaData
  6440 ;;		_LcGotoXY
  6441 ;;		_WaitForBusy
  6442 ;; This function is called by:
  6443 ;;		_LcPutString
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text41
  6448   000B9E                     __ptext41:
  6449                           	callstack 0
  6450   000B9E                     _LcPutChar:
  6451                           	callstack 23
  6452                           
  6453                           ;incstack = 0
  6454                           ;LcPutChar@c stored from wreg
  6455   000B9E  6E18               	movwf	LcPutChar@c^0,c
  6456   000BA0                     
  6457                           ;TAD_DISPLAY.c: 171:  WaitForBusy(); CantaData(c);
  6458   000BA0  EC21  F009         	call	_WaitForBusy	;wreg free
  6459   000BA4  5018               	movf	LcPutChar@c^0,w,c
  6460   000BA6  ECCC  F00A         	call	_CantaData
  6461   000BAA                     
  6462                           ;TAD_DISPLAY.c: 173:  ++ColumnAct;
  6463   000BAA  2A66               	incf	_ColumnAct^0,f,c
  6464   000BAC                     
  6465                           ;TAD_DISPLAY.c: 174:  if (Rows == 3) {
  6466   000BAC  0E03               	movlw	3
  6467   000BAE  1869               	xorwf	_Rows^0,w,c
  6468   000BB0  A4D8               	btfss	status,2,c
  6469   000BB2  EFDD  F005         	goto	u2461
  6470   000BB6  EFDF  F005         	goto	u2460
  6471   000BBA                     u2461:
  6472   000BBA  EFF9  F005         	goto	l3258
  6473   000BBE                     u2460:
  6474   000BBE                     
  6475                           ;TAD_DISPLAY.c: 175:   if (ColumnAct >= 20) {
  6476   000BBE  0E13               	movlw	19
  6477   000BC0  6466               	cpfsgt	_ColumnAct^0,c
  6478   000BC2  EFE5  F005         	goto	u2471
  6479   000BC6  EFE7  F005         	goto	u2470
  6480   000BCA                     u2471:
  6481   000BCA  EF32  F006         	goto	l492
  6482   000BCE                     u2470:
  6483   000BCE                     
  6484                           ;TAD_DISPLAY.c: 176:    ColumnAct = 0;
  6485   000BCE  6A66               	clrf	_ColumnAct^0,c
  6486   000BD0                     
  6487                           ;TAD_DISPLAY.c: 177:    if (++RowAct >= 4) RowAct = 0;
  6488   000BD0  2A67               	incf	_RowAct^0,f,c
  6489   000BD2  0E03               	movlw	3
  6490   000BD4  6467               	cpfsgt	_RowAct^0,c
  6491   000BD6  EFEF  F005         	goto	u2481
  6492   000BDA  EFF1  F005         	goto	u2480
  6493   000BDE                     u2481:
  6494   000BDE  EFF2  F005         	goto	l3256
  6495   000BE2                     u2480:
  6496   000BE2  6A67               	clrf	_RowAct^0,c
  6497   000BE4                     l3256:
  6498                           
  6499                           ;TAD_DISPLAY.c: 178:    LcGotoXY(ColumnAct, RowAct);
  6500   000BE4  C067  F010         	movff	_RowAct,LcGotoXY@Row
  6501   000BE8  5066               	movf	_ColumnAct^0,w,c
  6502   000BEA  EC5B  F005         	call	_LcGotoXY
  6503   000BEE  EF32  F006         	goto	l492
  6504   000BF2                     l3258:
  6505                           
  6506                           ;TAD_DISPLAY.c: 181:  if (Rows == 2) {
  6507   000BF2  0E02               	movlw	2
  6508   000BF4  1869               	xorwf	_Rows^0,w,c
  6509   000BF6  A4D8               	btfss	status,2,c
  6510   000BF8  EF00  F006         	goto	u2491
  6511   000BFC  EF02  F006         	goto	u2490
  6512   000C00                     u2491:
  6513   000C00  EF1C  F006         	goto	l3270
  6514   000C04                     u2490:
  6515   000C04                     
  6516                           ;TAD_DISPLAY.c: 182:   if (ColumnAct >= 40) {
  6517   000C04  0E27               	movlw	39
  6518   000C06  6466               	cpfsgt	_ColumnAct^0,c
  6519   000C08  EF08  F006         	goto	u2501
  6520   000C0C  EF0A  F006         	goto	u2500
  6521   000C10                     u2501:
  6522   000C10  EF32  F006         	goto	l492
  6523   000C14                     u2500:
  6524   000C14                     
  6525                           ;TAD_DISPLAY.c: 183:    ColumnAct = 0;
  6526   000C14  6A66               	clrf	_ColumnAct^0,c
  6527   000C16                     
  6528                           ;TAD_DISPLAY.c: 184:    if (++RowAct >= 2) RowAct = 0;
  6529   000C16  2A67               	incf	_RowAct^0,f,c
  6530   000C18  0E01               	movlw	1
  6531   000C1A  6467               	cpfsgt	_RowAct^0,c
  6532   000C1C  EF12  F006         	goto	u2511
  6533   000C20  EF14  F006         	goto	u2510
  6534   000C24                     u2511:
  6535   000C24  EF15  F006         	goto	l3268
  6536   000C28                     u2510:
  6537   000C28  6A67               	clrf	_RowAct^0,c
  6538   000C2A                     l3268:
  6539                           
  6540                           ;TAD_DISPLAY.c: 185:    LcGotoXY(ColumnAct, RowAct);
  6541   000C2A  C067  F010         	movff	_RowAct,LcGotoXY@Row
  6542   000C2E  5066               	movf	_ColumnAct^0,w,c
  6543   000C30  EC5B  F005         	call	_LcGotoXY
  6544   000C34  EF32  F006         	goto	l492
  6545   000C38                     l3270:
  6546                           
  6547                           ;TAD_DISPLAY.c: 188:  if (RowAct == 1) {
  6548   000C38  0467               	decf	_RowAct^0,w,c
  6549   000C3A  A4D8               	btfss	status,2,c
  6550   000C3C  EF22  F006         	goto	u2521
  6551   000C40  EF24  F006         	goto	u2520
  6552   000C44                     u2521:
  6553   000C44  EF32  F006         	goto	l492
  6554   000C48                     u2520:
  6555   000C48                     
  6556                           ;TAD_DISPLAY.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  6557   000C48  0E27               	movlw	39
  6558   000C4A  6466               	cpfsgt	_ColumnAct^0,c
  6559   000C4C  EF2A  F006         	goto	u2531
  6560   000C50  EF2C  F006         	goto	u2530
  6561   000C54                     u2531:
  6562   000C54  EF2D  F006         	goto	l3276
  6563   000C58                     u2530:
  6564   000C58  6A66               	clrf	_ColumnAct^0,c
  6565   000C5A                     l3276:
  6566                           
  6567                           ;TAD_DISPLAY.c: 190:   LcGotoXY(ColumnAct, RowAct);
  6568   000C5A  C067  F010         	movff	_RowAct,LcGotoXY@Row
  6569   000C5E  5066               	movf	_ColumnAct^0,w,c
  6570   000C60  EC5B  F005         	call	_LcGotoXY
  6571   000C64                     l492:
  6572   000C64  0012               	return		;funcret
  6573   000C66                     __end_of_LcPutChar:
  6574                           	callstack 0
  6575                           
  6576 ;; *************** function _LcGotoXY *****************
  6577 ;; Defined at:
  6578 ;;		line 134 in file "TAD_DISPLAY.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  Column          1    wreg     unsigned char 
  6581 ;;  Row             1   15[COMRAM] unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  Column          1   22[COMRAM] unsigned char 
  6584 ;;  Fisics          2   20[COMRAM] int 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1
  6594 ;;      Params:         1       0       0
  6595 ;;      Locals:         5       0       0
  6596 ;;      Temps:          2       0       0
  6597 ;;      Totals:         8       0       0
  6598 ;;Total ram usage:        8 bytes
  6599 ;; Hardware stack levels used: 1
  6600 ;; Hardware stack levels required when called: 5
  6601 ;; This function calls:
  6602 ;;		_CantaIR
  6603 ;;		_WaitForBusy
  6604 ;; This function is called by:
  6605 ;;		_LcPutChar
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           	psect	text42
  6610   000AB6                     __ptext42:
  6611                           	callstack 0
  6612   000AB6                     _LcGotoXY:
  6613                           	callstack 23
  6614                           
  6615                           ;incstack = 0
  6616                           ;LcGotoXY@Column stored from wreg
  6617   000AB6  6E17               	movwf	LcGotoXY@Column^0,c
  6618   000AB8                     
  6619                           ;TAD_DISPLAY.c: 138:  int Fisics;;TAD_DISPLAY.c: 140:  switch (Rows) {
  6620   000AB8  EFB5  F005         	goto	l3106
  6621   000ABC                     l3084:
  6622                           
  6623                           ;TAD_DISPLAY.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  6624   000ABC  5010               	movf	LcGotoXY@Row^0,w,c
  6625   000ABE  B4D8               	btfsc	status,2,c
  6626   000AC0  EF64  F005         	goto	u2331
  6627   000AC4  EF66  F005         	goto	u2330
  6628   000AC8                     u2331:
  6629   000AC8  EF6C  F005         	goto	l3088
  6630   000ACC                     u2330:
  6631   000ACC  0E00               	movlw	0
  6632   000ACE  6E14               	movwf	(_LcGotoXY$754+1)^0,c
  6633   000AD0  0E40               	movlw	64
  6634   000AD2  6E13               	movwf	_LcGotoXY$754^0,c
  6635   000AD4  EF70  F005         	goto	l3090
  6636   000AD8                     l3088:
  6637   000AD8  0E00               	movlw	0
  6638   000ADA  6E14               	movwf	(_LcGotoXY$754+1)^0,c
  6639   000ADC  0E00               	movlw	0
  6640   000ADE  6E13               	movwf	_LcGotoXY$754^0,c
  6641   000AE0                     l3090:
  6642   000AE0  5017               	movf	LcGotoXY@Column^0,w,c
  6643   000AE2  2413               	addwf	_LcGotoXY$754^0,w,c
  6644   000AE4  6E15               	movwf	LcGotoXY@Fisics^0,c
  6645   000AE6  0E00               	movlw	0
  6646   000AE8  2014               	addwfc	(_LcGotoXY$754+1)^0,w,c
  6647   000AEA  6E16               	movwf	(LcGotoXY@Fisics+1)^0,c
  6648   000AEC  EFC4  F005         	goto	l3108
  6649   000AF0                     l471:
  6650                           
  6651                           ;TAD_DISPLAY.c: 144:    Fisics = Column;
  6652   000AF0  C017  F015         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6653   000AF4  6A16               	clrf	(LcGotoXY@Fisics+1)^0,c
  6654   000AF6                     
  6655                           ;TAD_DISPLAY.c: 145:    if (Row == 1) Fisics += 0x40; else
  6656   000AF6  0410               	decf	LcGotoXY@Row^0,w,c
  6657   000AF8  A4D8               	btfss	status,2,c
  6658   000AFA  EF81  F005         	goto	u2341
  6659   000AFE  EF83  F005         	goto	u2340
  6660   000B02                     u2341:
  6661   000B02  EF89  F005         	goto	l3096
  6662   000B06                     u2340:
  6663   000B06  0E40               	movlw	64
  6664   000B08  2615               	addwf	LcGotoXY@Fisics^0,f,c
  6665   000B0A  0E00               	movlw	0
  6666   000B0C  2216               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6667   000B0E  EFC4  F005         	goto	l3108
  6668   000B12                     l3096:
  6669                           
  6670                           ;TAD_DISPLAY.c: 146:    if (Row == 2) Fisics += Columns; else
  6671   000B12  0E02               	movlw	2
  6672   000B14  1810               	xorwf	LcGotoXY@Row^0,w,c
  6673   000B16  A4D8               	btfss	status,2,c
  6674   000B18  EF90  F005         	goto	u2351
  6675   000B1C  EF92  F005         	goto	u2350
  6676   000B20                     u2351:
  6677   000B20  EF98  F005         	goto	l3100
  6678   000B24                     u2350:
  6679   000B24  5068               	movf	_Columns^0,w,c
  6680   000B26  2615               	addwf	LcGotoXY@Fisics^0,f,c
  6681   000B28  0E00               	movlw	0
  6682   000B2A  2216               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6683   000B2C  EFC4  F005         	goto	l3108
  6684   000B30                     l3100:
  6685                           
  6686                           ;TAD_DISPLAY.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  6687   000B30  0E03               	movlw	3
  6688   000B32  1810               	xorwf	LcGotoXY@Row^0,w,c
  6689   000B34  A4D8               	btfss	status,2,c
  6690   000B36  EF9F  F005         	goto	u2361
  6691   000B3A  EFA1  F005         	goto	u2360
  6692   000B3E                     u2361:
  6693   000B3E  EFAE  F005         	goto	l473
  6694   000B42                     u2360:
  6695   000B42  5068               	movf	_Columns^0,w,c
  6696   000B44  6E11               	movwf	??_LcGotoXY^0,c
  6697   000B46  6A12               	clrf	(??_LcGotoXY+1)^0,c
  6698   000B48  0E40               	movlw	64
  6699   000B4A  2611               	addwf	??_LcGotoXY^0,f,c
  6700   000B4C  0E00               	movlw	0
  6701   000B4E  2212               	addwfc	(??_LcGotoXY+1)^0,f,c
  6702   000B50  5011               	movf	??_LcGotoXY^0,w,c
  6703   000B52  2615               	addwf	LcGotoXY@Fisics^0,f,c
  6704   000B54  5012               	movf	(??_LcGotoXY+1)^0,w,c
  6705   000B56  2216               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6706   000B58  EFC4  F005         	goto	l3108
  6707   000B5C                     l473:
  6708                           
  6709                           ;TAD_DISPLAY.c: 148:    break;
  6710   000B5C  EFC4  F005         	goto	l3108
  6711   000B60                     l478:
  6712                           
  6713                           ;TAD_DISPLAY.c: 151:    Fisics = Column; break;
  6714   000B60  C017  F015         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6715   000B64  6A16               	clrf	(LcGotoXY@Fisics+1)^0,c
  6716   000B66  EFC4  F005         	goto	l3108
  6717   000B6A                     l3106:
  6718   000B6A  5069               	movf	_Rows^0,w,c
  6719                           
  6720                           ; Switch size 1, requested type "simple"
  6721                           ; Number of cases is 3, Range of values is 1 to 4
  6722                           ; switch strategies available:
  6723                           ; Name         Instructions Cycles
  6724                           ; simple_byte           10     6 (average)
  6725                           ;	Chosen strategy is simple_byte
  6726   000B6C  0A01               	xorlw	1	; case 1
  6727   000B6E  B4D8               	btfsc	status,2,c
  6728   000B70  EFB0  F005         	goto	l478
  6729   000B74  0A03               	xorlw	3	; case 2
  6730   000B76  B4D8               	btfsc	status,2,c
  6731   000B78  EF5E  F005         	goto	l3084
  6732   000B7C  0A06               	xorlw	6	; case 4
  6733   000B7E  B4D8               	btfsc	status,2,c
  6734   000B80  EF78  F005         	goto	l471
  6735   000B84  EFB0  F005         	goto	l478
  6736   000B88                     l3108:
  6737                           
  6738                           ;TAD_DISPLAY.c: 154:  WaitForBusy();
  6739   000B88  EC21  F009         	call	_WaitForBusy	;wreg free
  6740   000B8C                     
  6741                           ;TAD_DISPLAY.c: 155:  CantaIR((char)(0x80 | Fisics));
  6742   000B8C  5015               	movf	LcGotoXY@Fisics^0,w,c
  6743   000B8E  0980               	iorlw	128
  6744   000B90  ECB3  F00A         	call	_CantaIR
  6745   000B94                     
  6746                           ;TAD_DISPLAY.c: 157:  RowAct = Row;
  6747   000B94  C010  F067         	movff	LcGotoXY@Row,_RowAct
  6748   000B98                     
  6749                           ;TAD_DISPLAY.c: 158:  ColumnAct = Column;
  6750   000B98  C017  F066         	movff	LcGotoXY@Column,_ColumnAct
  6751   000B9C  0012               	return		;funcret
  6752   000B9E                     __end_of_LcGotoXY:
  6753                           	callstack 0
  6754                           
  6755 ;; *************** function _WaitForBusy *****************
  6756 ;; Defined at:
  6757 ;;		line 261 in file "TAD_DISPLAY.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;  Busy            1   14[COMRAM] unsigned char 
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      void 
  6764 ;; Registers used:
  6765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1
  6771 ;;      Params:         0       0       0
  6772 ;;      Locals:         1       0       0
  6773 ;;      Temps:          0       0       0
  6774 ;;      Totals:         1       0       0
  6775 ;;Total ram usage:        1 bytes
  6776 ;; Hardware stack levels used: 1
  6777 ;; Hardware stack levels required when called: 4
  6778 ;; This function calls:
  6779 ;;		_TI_GetTics
  6780 ;;		_TI_ResetTics
  6781 ;; This function is called by:
  6782 ;;		_LcGotoXY
  6783 ;;		_LcPutChar
  6784 ;;		_LcInit
  6785 ;;		_LcClear
  6786 ;;		_LcCursorOn
  6787 ;;		_LcCursorOff
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text43
  6792   001242                     __ptext43:
  6793                           	callstack 0
  6794   001242                     _WaitForBusy:
  6795                           	callstack 24
  6796   001242                     
  6797                           ;TAD_DISPLAY.c: 262:  char Busy;;TAD_DISPLAY.c: 263:  (TRISBbits.TRISB4 = TRISBbits.TRIS
      +                          B5 = TRISBbits.TRISB6 = TRISBbits.TRISB7 = 1);
  6798   001242  8E93               	bsf	147,7,c	;volatile
  6799   001244  8C93               	bsf	147,6,c	;volatile
  6800   001246  8A93               	bsf	147,5,c	;volatile
  6801   001248  8893               	bsf	147,4,c	;volatile
  6802                           
  6803                           ;TAD_DISPLAY.c: 264:  (LATBbits.LATB2 = 0);
  6804   00124A  948A               	bcf	138,2,c	;volatile
  6805                           
  6806                           ;TAD_DISPLAY.c: 265:  (LATBbits.LATB2 = 1);
  6807   00124C  848A               	bsf	138,2,c	;volatile
  6808   00124E                     
  6809                           ;TAD_DISPLAY.c: 266:  TI_ResetTics((unsigned char)Timer);
  6810   00124E  5078               	movf	_Timer^0,w,c
  6811   001250  EC0D  F00B         	call	_TI_ResetTics
  6812   001254                     l2878:
  6813                           
  6814                           ;TAD_DISPLAY.c: 268:   (LATBbits.LATB5 = 1);(LATBbits.LATB5 = 1);
  6815   001254  8A8A               	bsf	138,5,c	;volatile
  6816   001256  8A8A               	bsf	138,5,c	;volatile
  6817   001258                     
  6818                           ;TAD_DISPLAY.c: 269:   Busy = (PORTBbits.RB7);
  6819   001258  0E00               	movlw	0
  6820   00125A  BE81               	btfsc	129,7,c	;volatile
  6821   00125C  0E01               	movlw	1
  6822   00125E  6E0F               	movwf	WaitForBusy@Busy^0,c
  6823   001260                     
  6824                           ;TAD_DISPLAY.c: 270:   (LATBbits.LATB5 = 0);
  6825   001260  9A8A               	bcf	138,5,c	;volatile
  6826   001262                     
  6827                           ;TAD_DISPLAY.c: 271:   (LATBbits.LATB5 = 0);
  6828   001262  9A8A               	bcf	138,5,c	;volatile
  6829   001264                     
  6830                           ;TAD_DISPLAY.c: 272:   (LATBbits.LATB5 = 1);(LATBbits.LATB5 = 1);
  6831   001264  8A8A               	bsf	138,5,c	;volatile
  6832   001266  8A8A               	bsf	138,5,c	;volatile
  6833   001268                     
  6834                           ;TAD_DISPLAY.c: 274:   (LATBbits.LATB5 = 0);
  6835   001268  9A8A               	bcf	138,5,c	;volatile
  6836   00126A                     
  6837                           ;TAD_DISPLAY.c: 275:   (LATBbits.LATB5 = 0);
  6838   00126A  9A8A               	bcf	138,5,c	;volatile
  6839   00126C                     
  6840                           ;TAD_DISPLAY.c: 276:   if (TI_GetTics((unsigned char)Timer)) break;
  6841   00126C  5078               	movf	_Timer^0,w,c
  6842   00126E  ECA1  F009         	call	_TI_GetTics
  6843   001272  5002               	movf	?_TI_GetTics^0,w,c
  6844   001274  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  6845   001276  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  6846   001278  1005               	iorwf	(?_TI_GetTics+3)^0,w,c
  6847   00127A  B4D8               	btfsc	status,2,c
  6848   00127C  EF42  F009         	goto	u2071
  6849   001280  EF44  F009         	goto	u2070
  6850   001284                     u2071:
  6851   001284  EF46  F009         	goto	l2900
  6852   001288                     u2070:
  6853   001288  EF4E  F009         	goto	l522
  6854   00128C                     l2900:
  6855                           
  6856                           ;TAD_DISPLAY.c: 277:  } while(Busy);
  6857   00128C  500F               	movf	WaitForBusy@Busy^0,w,c
  6858   00128E  A4D8               	btfss	status,2,c
  6859   001290  EF4C  F009         	goto	u2081
  6860   001294  EF4E  F009         	goto	u2080
  6861   001298                     u2081:
  6862   001298  EF2A  F009         	goto	l2878
  6863   00129C                     u2080:
  6864   00129C                     l522:
  6865   00129C  0012               	return		;funcret
  6866   00129E                     __end_of_WaitForBusy:
  6867                           	callstack 0
  6868                           
  6869 ;; *************** function _TI_ResetTics *****************
  6870 ;; Defined at:
  6871 ;;		line 53 in file "TAD_TIMER.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  TimerHandle     1    wreg     unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  1    wreg      void 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1
  6885 ;;      Params:         0       0       0
  6886 ;;      Locals:         1       0       0
  6887 ;;      Temps:          0       0       0
  6888 ;;      Totals:         1       0       0
  6889 ;;Total ram usage:        1 bytes
  6890 ;; Hardware stack levels used: 1
  6891 ;; Hardware stack levels required when called: 3
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_motorTeclado
  6896 ;;		_WaitForBusy
  6897 ;;		_Espera
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text44
  6902   00161A                     __ptext44:
  6903                           	callstack 0
  6904   00161A                     _TI_ResetTics:
  6905                           	callstack 26
  6906                           
  6907                           ;incstack = 0
  6908                           ;TI_ResetTics@TimerHandle stored from wreg
  6909   00161A  6E02               	movwf	TI_ResetTics@TimerHandle^0,c
  6910   00161C                     
  6911                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  6912   00161C  9EF2               	bcf	242,7,c	;volatile
  6913   00161E  5002               	movf	TI_ResetTics@TimerHandle^0,w,c
  6914   001620  0D05               	mullw	5
  6915   001622  50F3               	movf	243,w,c
  6916   001624  0F80               	addlw	low _Timers
  6917   001626  6ED9               	movwf	fsr2l,c
  6918   001628  6ADA               	clrf	fsr2h,c
  6919   00162A  C059  FFDE         	movff	_Tics,postinc2	;volatile
  6920   00162E  C05A  FFDE         	movff	_Tics+1,postinc2	;volatile
  6921   001632  C05B  FFDE         	movff	_Tics+2,postinc2	;volatile
  6922   001636  C05C  FFDE         	movff	_Tics+3,postinc2	;volatile
  6923   00163A  8EF2               	bsf	242,7,c	;volatile
  6924   00163C  0012               	return		;funcret
  6925   00163E                     __end_of_TI_ResetTics:
  6926                           	callstack 0
  6927                           
  6928 ;; *************** function _TI_GetTics *****************
  6929 ;; Defined at:
  6930 ;;		line 61 in file "TAD_TIMER.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;  TimerHandle     1    wreg     unsigned char 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  6935 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  4    1[COMRAM] unsigned long 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1
  6945 ;;      Params:         4       0       0
  6946 ;;      Locals:         5       0       0
  6947 ;;      Temps:          4       0       0
  6948 ;;      Totals:        13       0       0
  6949 ;;Total ram usage:       13 bytes
  6950 ;; Hardware stack levels used: 1
  6951 ;; Hardware stack levels required when called: 3
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_motorTeclado
  6956 ;;		_WaitForBusy
  6957 ;;		_Espera
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text45
  6962   001342                     __ptext45:
  6963                           	callstack 0
  6964   001342                     _TI_GetTics:
  6965                           	callstack 26
  6966                           
  6967                           ;incstack = 0
  6968                           ;TI_GetTics@TimerHandle stored from wreg
  6969   001342  6E0E               	movwf	TI_GetTics@TimerHandle^0,c
  6970   001344                     
  6971                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  6972   001344  9EF2               	bcf	242,7,c	;volatile
  6973   001346  C059  F00A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  6974   00134A  C05A  F00B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  6975   00134E  C05B  F00C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  6976   001352  C05C  F00D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  6977   001356  8EF2               	bsf	242,7,c	;volatile
  6978   001358                     
  6979                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  6980   001358  500E               	movf	TI_GetTics@TimerHandle^0,w,c
  6981   00135A  0D05               	mullw	5
  6982   00135C  50F3               	movf	243,w,c
  6983   00135E  0F80               	addlw	low _Timers
  6984   001360  6ED9               	movwf	fsr2l,c
  6985   001362  6ADA               	clrf	fsr2h,c
  6986   001364  CFDE F006          	movff	postinc2,??_TI_GetTics
  6987   001368  CFDE F007          	movff	postinc2,??_TI_GetTics+1
  6988   00136C  CFDE F008          	movff	postinc2,??_TI_GetTics+2
  6989   001370  CFDE F009          	movff	postinc2,??_TI_GetTics+3
  6990   001374  5006               	movf	??_TI_GetTics^0,w,c
  6991   001376  5C0A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  6992   001378  6E02               	movwf	?_TI_GetTics^0,c
  6993   00137A  5007               	movf	(??_TI_GetTics+1)^0,w,c
  6994   00137C  580B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  6995   00137E  6E03               	movwf	(?_TI_GetTics+1)^0,c
  6996   001380  5008               	movf	(??_TI_GetTics+2)^0,w,c
  6997   001382  580C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  6998   001384  6E04               	movwf	(?_TI_GetTics+2)^0,c
  6999   001386  5009               	movf	(??_TI_GetTics+3)^0,w,c
  7000   001388  580D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  7001   00138A  6E05               	movwf	(?_TI_GetTics+3)^0,c
  7002   00138C  0012               	return		;funcret
  7003   00138E                     __end_of_TI_GetTics:
  7004                           	callstack 0
  7005                           
  7006 ;; *************** function _CantaIR *****************
  7007 ;; Defined at:
  7008 ;;		line 229 in file "TAD_DISPLAY.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  IR              1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  IR              1    3[COMRAM] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		wreg, status,2, status,0, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1
  7022 ;;      Params:         0       0       0
  7023 ;;      Locals:         1       0       0
  7024 ;;      Temps:          0       0       0
  7025 ;;      Totals:         1       0       0
  7026 ;;Total ram usage:        1 bytes
  7027 ;; Hardware stack levels used: 1
  7028 ;; Hardware stack levels required when called: 4
  7029 ;; This function calls:
  7030 ;;		_CantaPartAlta
  7031 ;;		_CantaPartBaixa
  7032 ;; This function is called by:
  7033 ;;		_LcGotoXY
  7034 ;;		_LcInit
  7035 ;;		_LcClear
  7036 ;;		_LcCursorOn
  7037 ;;		_LcCursorOff
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text46
  7042   001566                     __ptext46:
  7043                           	callstack 0
  7044   001566                     _CantaIR:
  7045                           	callstack 23
  7046                           
  7047                           ;incstack = 0
  7048                           ;CantaIR@IR stored from wreg
  7049   001566  6E04               	movwf	CantaIR@IR^0,c
  7050   001568                     
  7051                           ;TAD_DISPLAY.c: 230:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISBbits.TRISB6 = TRISBbit
      +                          s.TRISB7 = 0);
  7052   001568  9E93               	bcf	147,7,c	;volatile
  7053   00156A  9C93               	bcf	147,6,c	;volatile
  7054   00156C  9A93               	bcf	147,5,c	;volatile
  7055   00156E  9893               	bcf	147,4,c	;volatile
  7056                           
  7057                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB2 = 0);
  7058   001570  948A               	bcf	138,2,c	;volatile
  7059                           
  7060                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB2 = 0);
  7061   001572  948A               	bcf	138,2,c	;volatile
  7062                           
  7063                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB5 = 1);
  7064   001574  8A8A               	bsf	138,5,c	;volatile
  7065   001576                     
  7066                           ;TAD_DISPLAY.c: 234:  CantaPartAlta(IR);
  7067   001576  5004               	movf	CantaIR@IR^0,w,c
  7068   001578  EC2B  F008         	call	_CantaPartAlta
  7069   00157C                     
  7070                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB5 = 1);
  7071   00157C  8A8A               	bsf	138,5,c	;volatile
  7072   00157E                     
  7073                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB5 = 0);
  7074   00157E  9A8A               	bcf	138,5,c	;volatile
  7075   001580                     
  7076                           ;TAD_DISPLAY.c: 237:  (LATBbits.LATB5 = 0);
  7077   001580  9A8A               	bcf	138,5,c	;volatile
  7078   001582                     
  7079                           ;TAD_DISPLAY.c: 238:  (LATBbits.LATB5 = 1);
  7080   001582  8A8A               	bsf	138,5,c	;volatile
  7081                           
  7082                           ;TAD_DISPLAY.c: 239:  CantaPartBaixa(IR);
  7083   001584  5004               	movf	CantaIR@IR^0,w,c
  7084   001586  ECE5  F007         	call	_CantaPartBaixa
  7085   00158A                     
  7086                           ;TAD_DISPLAY.c: 240:  (LATBbits.LATB5 = 1);
  7087   00158A  8A8A               	bsf	138,5,c	;volatile
  7088   00158C                     
  7089                           ;TAD_DISPLAY.c: 241:  (LATBbits.LATB5 = 0);
  7090   00158C  9A8A               	bcf	138,5,c	;volatile
  7091   00158E                     
  7092                           ;TAD_DISPLAY.c: 242:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISBbits.TRISB6 = TRISBbit
      +                          s.TRISB7 = 1);
  7093   00158E  8E93               	bsf	147,7,c	;volatile
  7094   001590  8C93               	bsf	147,6,c	;volatile
  7095   001592  8A93               	bsf	147,5,c	;volatile
  7096   001594  8893               	bsf	147,4,c	;volatile
  7097   001596  0012               	return		;funcret
  7098   001598                     __end_of_CantaIR:
  7099                           	callstack 0
  7100                           
  7101 ;; *************** function _CantaData *****************
  7102 ;; Defined at:
  7103 ;;		line 245 in file "TAD_DISPLAY.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  Data            1    wreg     unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  Data            1    3[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      void 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1
  7117 ;;      Params:         0       0       0
  7118 ;;      Locals:         1       0       0
  7119 ;;      Temps:          0       0       0
  7120 ;;      Totals:         1       0       0
  7121 ;;Total ram usage:        1 bytes
  7122 ;; Hardware stack levels used: 1
  7123 ;; Hardware stack levels required when called: 4
  7124 ;; This function calls:
  7125 ;;		_CantaPartAlta
  7126 ;;		_CantaPartBaixa
  7127 ;; This function is called by:
  7128 ;;		_LcPutChar
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text47
  7133   001598                     __ptext47:
  7134                           	callstack 0
  7135   001598                     _CantaData:
  7136                           	callstack 24
  7137                           
  7138                           ;incstack = 0
  7139                           ;CantaData@Data stored from wreg
  7140   001598  6E04               	movwf	CantaData@Data^0,c
  7141   00159A                     
  7142                           ;TAD_DISPLAY.c: 246:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISBbits.TRISB6 = TRISBbit
      +                          s.TRISB7 = 0);
  7143   00159A  9E93               	bcf	147,7,c	;volatile
  7144   00159C  9C93               	bcf	147,6,c	;volatile
  7145   00159E  9A93               	bcf	147,5,c	;volatile
  7146   0015A0  9893               	bcf	147,4,c	;volatile
  7147                           
  7148                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB3 = 1);
  7149   0015A2  868A               	bsf	138,3,c	;volatile
  7150                           
  7151                           ;TAD_DISPLAY.c: 248:  (LATBbits.LATB2 = 0);
  7152   0015A4  948A               	bcf	138,2,c	;volatile
  7153                           
  7154                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB5 = 1);
  7155   0015A6  8A8A               	bsf	138,5,c	;volatile
  7156   0015A8                     
  7157                           ;TAD_DISPLAY.c: 250:  CantaPartAlta(Data);
  7158   0015A8  5004               	movf	CantaData@Data^0,w,c
  7159   0015AA  EC2B  F008         	call	_CantaPartAlta
  7160   0015AE                     
  7161                           ;TAD_DISPLAY.c: 251:  (LATBbits.LATB5 = 1);
  7162   0015AE  8A8A               	bsf	138,5,c	;volatile
  7163   0015B0                     
  7164                           ;TAD_DISPLAY.c: 252:  (LATBbits.LATB5 = 0);
  7165   0015B0  9A8A               	bcf	138,5,c	;volatile
  7166   0015B2                     
  7167                           ;TAD_DISPLAY.c: 253:  (LATBbits.LATB5 = 0);
  7168   0015B2  9A8A               	bcf	138,5,c	;volatile
  7169   0015B4                     
  7170                           ;TAD_DISPLAY.c: 254:  (LATBbits.LATB5 = 1);
  7171   0015B4  8A8A               	bsf	138,5,c	;volatile
  7172                           
  7173                           ;TAD_DISPLAY.c: 255:  CantaPartBaixa(Data);
  7174   0015B6  5004               	movf	CantaData@Data^0,w,c
  7175   0015B8  ECE5  F007         	call	_CantaPartBaixa
  7176   0015BC                     
  7177                           ;TAD_DISPLAY.c: 256:  (LATBbits.LATB5 = 1);
  7178   0015BC  8A8A               	bsf	138,5,c	;volatile
  7179   0015BE                     
  7180                           ;TAD_DISPLAY.c: 257:  (LATBbits.LATB5 = 0);
  7181   0015BE  9A8A               	bcf	138,5,c	;volatile
  7182   0015C0                     
  7183                           ;TAD_DISPLAY.c: 258:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISBbits.TRISB6 = TRISBbit
      +                          s.TRISB7 = 1);
  7184   0015C0  8E93               	bsf	147,7,c	;volatile
  7185   0015C2  8C93               	bsf	147,6,c	;volatile
  7186   0015C4  8A93               	bsf	147,5,c	;volatile
  7187   0015C6  8893               	bsf	147,4,c	;volatile
  7188   0015C8  0012               	return		;funcret
  7189   0015CA                     __end_of_CantaData:
  7190                           	callstack 0
  7191                           
  7192 ;; *************** function _CantaPartBaixa *****************
  7193 ;; Defined at:
  7194 ;;		line 222 in file "TAD_DISPLAY.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  c               1    wreg     unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  c               1    2[COMRAM] unsigned char 
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, status,2, status,0
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMRAM   BANK0   BANK1
  7208 ;;      Params:         0       0       0
  7209 ;;      Locals:         1       0       0
  7210 ;;      Temps:          1       0       0
  7211 ;;      Totals:         2       0       0
  7212 ;;Total ram usage:        2 bytes
  7213 ;; Hardware stack levels used: 1
  7214 ;; Hardware stack levels required when called: 3
  7215 ;; This function calls:
  7216 ;;		Nothing
  7217 ;; This function is called by:
  7218 ;;		_CantaIR
  7219 ;;		_CantaData
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text48
  7224   000FCA                     __ptext48:
  7225                           	callstack 0
  7226   000FCA                     _CantaPartBaixa:
  7227                           	callstack 23
  7228                           
  7229                           ;incstack = 0
  7230                           ;CantaPartBaixa@c stored from wreg
  7231   000FCA  6E03               	movwf	CantaPartBaixa@c^0,c
  7232   000FCC                     
  7233                           ;TAD_DISPLAY.c: 223:   (LATBbits.LATB7 = (c & 0x08 ? 1 : 0));
  7234   000FCC  B603               	btfsc	CantaPartBaixa@c^0,3,c
  7235   000FCE  EFEB  F007         	goto	u1901
  7236   000FD2  EFEF  F007         	goto	u1900
  7237   000FD6                     u1901:
  7238   000FD6  6A02               	clrf	??_CantaPartBaixa^0,c
  7239   000FD8  2A02               	incf	??_CantaPartBaixa^0,f,c
  7240   000FDA  EFF0  F007         	goto	u1918
  7241   000FDE                     u1900:
  7242   000FDE  6A02               	clrf	??_CantaPartBaixa^0,c
  7243   000FE0                     u1918:
  7244   000FE0  3202               	rrcf	??_CantaPartBaixa^0,f,c
  7245   000FE2  3202               	rrcf	??_CantaPartBaixa^0,f,c
  7246   000FE4  508A               	movf	138,w,c	;volatile
  7247   000FE6  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7248   000FE8  0B7F               	andlw	-129
  7249   000FEA  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7250   000FEC  6E8A               	movwf	138,c	;volatile
  7251                           
  7252                           ;TAD_DISPLAY.c: 224:   (LATBbits.LATB6 = (c & 0x04 ? 1 : 0));
  7253   000FEE  B403               	btfsc	CantaPartBaixa@c^0,2,c
  7254   000FF0  EFFC  F007         	goto	u1921
  7255   000FF4  EF00  F008         	goto	u1920
  7256   000FF8                     u1921:
  7257   000FF8  6A02               	clrf	??_CantaPartBaixa^0,c
  7258   000FFA  2A02               	incf	??_CantaPartBaixa^0,f,c
  7259   000FFC  EF01  F008         	goto	u1938
  7260   001000                     u1920:
  7261   001000  6A02               	clrf	??_CantaPartBaixa^0,c
  7262   001002                     u1938:
  7263   001002  3A02               	swapf	??_CantaPartBaixa^0,f,c
  7264   001004  4602               	rlncf	??_CantaPartBaixa^0,f,c
  7265   001006  4602               	rlncf	??_CantaPartBaixa^0,f,c
  7266   001008  508A               	movf	138,w,c	;volatile
  7267   00100A  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7268   00100C  0BBF               	andlw	-65
  7269   00100E  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7270   001010  6E8A               	movwf	138,c	;volatile
  7271                           
  7272                           ;TAD_DISPLAY.c: 225:   (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  7273   001012  B203               	btfsc	CantaPartBaixa@c^0,1,c
  7274   001014  EF0E  F008         	goto	u1941
  7275   001018  EF12  F008         	goto	u1940
  7276   00101C                     u1941:
  7277   00101C  6A02               	clrf	??_CantaPartBaixa^0,c
  7278   00101E  2A02               	incf	??_CantaPartBaixa^0,f,c
  7279   001020  EF13  F008         	goto	u1958
  7280   001024                     u1940:
  7281   001024  6A02               	clrf	??_CantaPartBaixa^0,c
  7282   001026                     u1958:
  7283   001026  3A02               	swapf	??_CantaPartBaixa^0,f,c
  7284   001028  4602               	rlncf	??_CantaPartBaixa^0,f,c
  7285   00102A  508A               	movf	138,w,c	;volatile
  7286   00102C  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7287   00102E  0BDF               	andlw	-33
  7288   001030  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7289   001032  6E8A               	movwf	138,c	;volatile
  7290                           
  7291                           ;TAD_DISPLAY.c: 226:   (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  7292   001034  B003               	btfsc	CantaPartBaixa@c^0,0,c
  7293   001036  EF1F  F008         	goto	u1961
  7294   00103A  EF23  F008         	goto	u1960
  7295   00103E                     u1961:
  7296   00103E  6A02               	clrf	??_CantaPartBaixa^0,c
  7297   001040  2A02               	incf	??_CantaPartBaixa^0,f,c
  7298   001042  EF24  F008         	goto	u1978
  7299   001046                     u1960:
  7300   001046  6A02               	clrf	??_CantaPartBaixa^0,c
  7301   001048                     u1978:
  7302   001048  3A02               	swapf	??_CantaPartBaixa^0,f,c
  7303   00104A  508A               	movf	138,w,c	;volatile
  7304   00104C  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7305   00104E  0BEF               	andlw	-17
  7306   001050  1802               	xorwf	??_CantaPartBaixa^0,w,c
  7307   001052  6E8A               	movwf	138,c	;volatile
  7308   001054  0012               	return		;funcret
  7309   001056                     __end_of_CantaPartBaixa:
  7310                           	callstack 0
  7311                           
  7312 ;; *************** function _CantaPartAlta *****************
  7313 ;; Defined at:
  7314 ;;		line 215 in file "TAD_DISPLAY.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  c               1    wreg     unsigned char 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  c               1    2[COMRAM] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1
  7328 ;;      Params:         0       0       0
  7329 ;;      Locals:         1       0       0
  7330 ;;      Temps:          1       0       0
  7331 ;;      Totals:         2       0       0
  7332 ;;Total ram usage:        2 bytes
  7333 ;; Hardware stack levels used: 1
  7334 ;; Hardware stack levels required when called: 3
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_CantaIR
  7339 ;;		_CantaData
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text49
  7344   001056                     __ptext49:
  7345                           	callstack 0
  7346   001056                     _CantaPartAlta:
  7347                           	callstack 23
  7348                           
  7349                           ;incstack = 0
  7350                           ;CantaPartAlta@c stored from wreg
  7351   001056  6E03               	movwf	CantaPartAlta@c^0,c
  7352   001058                     
  7353                           ;TAD_DISPLAY.c: 216:   (LATBbits.LATB7 = (c & 0x80 ? 1 : 0));
  7354   001058  BE03               	btfsc	CantaPartAlta@c^0,7,c
  7355   00105A  EF31  F008         	goto	u1821
  7356   00105E  EF35  F008         	goto	u1820
  7357   001062                     u1821:
  7358   001062  6A02               	clrf	??_CantaPartAlta^0,c
  7359   001064  2A02               	incf	??_CantaPartAlta^0,f,c
  7360   001066  EF36  F008         	goto	u1838
  7361   00106A                     u1820:
  7362   00106A  6A02               	clrf	??_CantaPartAlta^0,c
  7363   00106C                     u1838:
  7364   00106C  3202               	rrcf	??_CantaPartAlta^0,f,c
  7365   00106E  3202               	rrcf	??_CantaPartAlta^0,f,c
  7366   001070  508A               	movf	138,w,c	;volatile
  7367   001072  1802               	xorwf	??_CantaPartAlta^0,w,c
  7368   001074  0B7F               	andlw	-129
  7369   001076  1802               	xorwf	??_CantaPartAlta^0,w,c
  7370   001078  6E8A               	movwf	138,c	;volatile
  7371                           
  7372                           ;TAD_DISPLAY.c: 217:   (LATBbits.LATB6 = (c & 0x40 ? 1 : 0));
  7373   00107A  BC03               	btfsc	CantaPartAlta@c^0,6,c
  7374   00107C  EF42  F008         	goto	u1841
  7375   001080  EF46  F008         	goto	u1840
  7376   001084                     u1841:
  7377   001084  6A02               	clrf	??_CantaPartAlta^0,c
  7378   001086  2A02               	incf	??_CantaPartAlta^0,f,c
  7379   001088  EF47  F008         	goto	u1858
  7380   00108C                     u1840:
  7381   00108C  6A02               	clrf	??_CantaPartAlta^0,c
  7382   00108E                     u1858:
  7383   00108E  3A02               	swapf	??_CantaPartAlta^0,f,c
  7384   001090  4602               	rlncf	??_CantaPartAlta^0,f,c
  7385   001092  4602               	rlncf	??_CantaPartAlta^0,f,c
  7386   001094  508A               	movf	138,w,c	;volatile
  7387   001096  1802               	xorwf	??_CantaPartAlta^0,w,c
  7388   001098  0BBF               	andlw	-65
  7389   00109A  1802               	xorwf	??_CantaPartAlta^0,w,c
  7390   00109C  6E8A               	movwf	138,c	;volatile
  7391                           
  7392                           ;TAD_DISPLAY.c: 218:   (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  7393   00109E  BA03               	btfsc	CantaPartAlta@c^0,5,c
  7394   0010A0  EF54  F008         	goto	u1861
  7395   0010A4  EF58  F008         	goto	u1860
  7396   0010A8                     u1861:
  7397   0010A8  6A02               	clrf	??_CantaPartAlta^0,c
  7398   0010AA  2A02               	incf	??_CantaPartAlta^0,f,c
  7399   0010AC  EF59  F008         	goto	u1878
  7400   0010B0                     u1860:
  7401   0010B0  6A02               	clrf	??_CantaPartAlta^0,c
  7402   0010B2                     u1878:
  7403   0010B2  3A02               	swapf	??_CantaPartAlta^0,f,c
  7404   0010B4  4602               	rlncf	??_CantaPartAlta^0,f,c
  7405   0010B6  508A               	movf	138,w,c	;volatile
  7406   0010B8  1802               	xorwf	??_CantaPartAlta^0,w,c
  7407   0010BA  0BDF               	andlw	-33
  7408   0010BC  1802               	xorwf	??_CantaPartAlta^0,w,c
  7409   0010BE  6E8A               	movwf	138,c	;volatile
  7410                           
  7411                           ;TAD_DISPLAY.c: 219:   (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  7412   0010C0  B803               	btfsc	CantaPartAlta@c^0,4,c
  7413   0010C2  EF65  F008         	goto	u1881
  7414   0010C6  EF69  F008         	goto	u1880
  7415   0010CA                     u1881:
  7416   0010CA  6A02               	clrf	??_CantaPartAlta^0,c
  7417   0010CC  2A02               	incf	??_CantaPartAlta^0,f,c
  7418   0010CE  EF6A  F008         	goto	u1898
  7419   0010D2                     u1880:
  7420   0010D2  6A02               	clrf	??_CantaPartAlta^0,c
  7421   0010D4                     u1898:
  7422   0010D4  3A02               	swapf	??_CantaPartAlta^0,f,c
  7423   0010D6  508A               	movf	138,w,c	;volatile
  7424   0010D8  1802               	xorwf	??_CantaPartAlta^0,w,c
  7425   0010DA  0BEF               	andlw	-17
  7426   0010DC  1802               	xorwf	??_CantaPartAlta^0,w,c
  7427   0010DE  6E8A               	movwf	138,c	;volatile
  7428   0010E0  0012               	return		;funcret
  7429   0010E2                     __end_of_CantaPartAlta:
  7430                           	callstack 0
  7431                           
  7432 ;; *************** function _LowRSI *****************
  7433 ;; Defined at:
  7434 ;;		line 32 in file "main.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		None
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1
  7448 ;;      Params:         0       0       0
  7449 ;;      Locals:         0       0       0
  7450 ;;      Temps:          1       0       0
  7451 ;;      Totals:         1       0       0
  7452 ;;Total ram usage:        1 bytes
  7453 ;; Hardware stack levels used: 1
  7454 ;; Hardware stack levels required when called: 2
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		Interrupt level 1
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	intcodelo
  7463   000018                     __pintcodelo:
  7464                           	callstack 0
  7465   000018                     _LowRSI:
  7466                           	callstack 19
  7467                           
  7468                           ;incstack = 0
  7469   000018  807A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7470   00001A  CFE0 F001          	movff	bsr,??_LowRSI
  7471   00001E  C001  FFE0         	movff	??_LowRSI,bsr
  7472   000022  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7473   000024  0010               	retfie	
  7474   000026                     __end_of_LowRSI:
  7475                           	callstack 0
  7476                           
  7477 ;; *************** function _HighRSI *****************
  7478 ;; Defined at:
  7479 ;;		line 28 in file "main.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, status,2, status,0, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1
  7493 ;;      Params:         0       0       0
  7494 ;;      Locals:         0       0       0
  7495 ;;      Temps:          0       0       0
  7496 ;;      Totals:         0       0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used: 1
  7499 ;; Hardware stack levels required when called: 1
  7500 ;; This function calls:
  7501 ;;		_RSI_Timer0
  7502 ;; This function is called by:
  7503 ;;		Interrupt level 2
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	intcode
  7508   000008                     __pintcode:
  7509                           	callstack 0
  7510   000008                     _HighRSI:
  7511                           	callstack 19
  7512                           
  7513                           ;incstack = 0
  7514   000008  827A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7515   00000A  EF51  F00B         	goto	int_func
  7516                           
  7517                           	psect	intcode_body
  7518   0016A2                     __pintcode_body:
  7519                           	callstack 19
  7520   0016A2                     int_func:
  7521                           	callstack 19
  7522   0016A2                     
  7523                           ;main.c: 30:   motor_RFID();
  7524   0016A2  A4F2               	btfss	242,2,c	;volatile
  7525   0016A4  EF56  F00B         	goto	i2u144_41
  7526   0016A8  EF58  F00B         	goto	i2u144_40
  7527   0016AC                     i2u144_41:
  7528   0016AC  EF5A  F00B         	goto	i2l36
  7529   0016B0                     i2u144_40:
  7530   0016B0  EC3A  F00B         	call	_RSI_Timer0	;wreg free
  7531   0016B4                     i2l36:
  7532   0016B4  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7533   0016B6  0011               	retfie		f
  7534   0016B8                     __end_of_HighRSI:
  7535                           	callstack 0
  7536                           
  7537 ;; *************** function _RSI_Timer0 *****************
  7538 ;; Defined at:
  7539 ;;		line 25 in file "TAD_TIMER.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;		None
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      void 
  7546 ;; Registers used:
  7547 ;;		wreg, status,2, status,0
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMRAM   BANK0   BANK1
  7553 ;;      Params:         0       0       0
  7554 ;;      Locals:         0       0       0
  7555 ;;      Temps:          0       0       0
  7556 ;;      Totals:         0       0       0
  7557 ;;Total ram usage:        0 bytes
  7558 ;; Hardware stack levels used: 1
  7559 ;; This function calls:
  7560 ;;		Nothing
  7561 ;; This function is called by:
  7562 ;;		_HighRSI
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text52
  7567   001674                     __ptext52:
  7568                           	callstack 0
  7569   001674                     _RSI_Timer0:
  7570                           	callstack 19
  7571   001674                     
  7572                           ;TAD_TIMER.c: 27:     TMR0=63036;
  7573   001674  0EF6               	movlw	246
  7574   001676  6ED7               	movwf	215,c	;volatile
  7575   001678  0E3C               	movlw	60
  7576   00167A  6ED6               	movwf	214,c	;volatile
  7577   00167C                     
  7578                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  7579   00167C  94F2               	bcf	4082,2,c	;volatile
  7580   00167E                     
  7581                           ;TAD_TIMER.c: 29:     Tics++;
  7582   00167E  0E01               	movlw	1
  7583   001680  2659               	addwf	_Tics^0,f,c	;volatile
  7584   001682  0E00               	movlw	0
  7585   001684  225A               	addwfc	(_Tics+1)^0,f,c	;volatile
  7586   001686  225B               	addwfc	(_Tics+2)^0,f,c	;volatile
  7587   001688  225C               	addwfc	(_Tics+3)^0,f,c	;volatile
  7588   00168A  0012               	return		;funcret
  7589   00168C                     __end_of_RSI_Timer0:
  7590                           	callstack 0
  7591                           
  7592                           	psect	rparam
  7593   000001                     ___rparam_used  equ	1
  7594   000000                     ___param_bank   equ	0
  7595   000000                     __Lparam        equ	__Lrparam
  7596   000000                     __Hparam        equ	__Hrparam
  7597                           
  7598                           	psect	temp
  7599   00007A                     btemp:
  7600                           	callstack 0
  7601   00007A                     	ds	1
  7602   00007A                     int$flags       set	btemp
  7603   00007B                     wtemp8          set	btemp+1
  7604   00007B                     ttemp5          set	btemp+1
  7605   00007E                     ttemp6          set	btemp+4
  7606   000082                     ttemp7          set	btemp+8
  7607                           
  7608                           	psect	idloc
  7609                           
  7610                           ;Config register IDLOC0 @ 0x200000
  7611                           ;	unspecified, using default values
  7612   200000                     	org	2097152
  7613   200000  FF                 	db	255
  7614                           
  7615                           ;Config register IDLOC1 @ 0x200001
  7616                           ;	unspecified, using default values
  7617   200001                     	org	2097153
  7618   200001  FF                 	db	255
  7619                           
  7620                           ;Config register IDLOC2 @ 0x200002
  7621                           ;	unspecified, using default values
  7622   200002                     	org	2097154
  7623   200002  FF                 	db	255
  7624                           
  7625                           ;Config register IDLOC3 @ 0x200003
  7626                           ;	unspecified, using default values
  7627   200003                     	org	2097155
  7628   200003  FF                 	db	255
  7629                           
  7630                           ;Config register IDLOC4 @ 0x200004
  7631                           ;	unspecified, using default values
  7632   200004                     	org	2097156
  7633   200004  FF                 	db	255
  7634                           
  7635                           ;Config register IDLOC5 @ 0x200005
  7636                           ;	unspecified, using default values
  7637   200005                     	org	2097157
  7638   200005  FF                 	db	255
  7639                           
  7640                           ;Config register IDLOC6 @ 0x200006
  7641                           ;	unspecified, using default values
  7642   200006                     	org	2097158
  7643   200006  FF                 	db	255
  7644                           
  7645                           ;Config register IDLOC7 @ 0x200007
  7646                           ;	unspecified, using default values
  7647   200007                     	org	2097159
  7648   200007  FF                 	db	255
  7649                           
  7650                           	psect	config
  7651                           
  7652                           ; Padding undefined space
  7653   300000                     	org	3145728
  7654   300000  FF                 	db	255
  7655                           
  7656                           ;Config register CONFIG1H @ 0x300001
  7657                           ;	Oscillator
  7658                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  7659                           ;	Fail-Safe Clock Monitor Enable bit
  7660                           ;	FCMEN = 0x0, unprogrammed default
  7661                           ;	Internal/External Oscillator Switchover bit
  7662                           ;	IESO = 0x0, unprogrammed default
  7663   300001                     	org	3145729
  7664   300001  06                 	db	6
  7665                           
  7666                           ;Config register CONFIG2L @ 0x300002
  7667                           ;	Power-up Timer Enable bit
  7668                           ;	PWRT = OFF, PWRT disabled
  7669                           ;	Brown-out Reset Enable bits
  7670                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  7671                           ;	Brown-out Reset Voltage bits
  7672                           ;	BORV = 0x3, unprogrammed default
  7673   300002                     	org	3145730
  7674   300002  19                 	db	25
  7675                           
  7676                           ;Config register CONFIG2H @ 0x300003
  7677                           ;	Watchdog Timer Enable bit
  7678                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7679                           ;	Watchdog Timer Postscale Select bits
  7680                           ;	WDTPS = 0xF, unprogrammed default
  7681   300003                     	org	3145731
  7682   300003  1E                 	db	30
  7683                           
  7684                           ; Padding undefined space
  7685   300004                     	org	3145732
  7686   300004  FF                 	db	255
  7687                           
  7688                           ;Config register CONFIG3H @ 0x300005
  7689                           ;	CCP2 MUX bit
  7690                           ;	CCP2MX = 0x1, unprogrammed default
  7691                           ;	PORTB A/D Enable bit
  7692                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7693                           ;	Low-Power Timer1 Oscillator Enable bit
  7694                           ;	LPT1OSC = 0x0, unprogrammed default
  7695                           ;	MCLR Pin Enable bit
  7696                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  7697   300005                     	org	3145733
  7698   300005  01                 	db	1
  7699                           
  7700                           ;Config register CONFIG4L @ 0x300006
  7701                           ;	Stack Full/Underflow Reset Enable bit
  7702                           ;	STVREN = 0x1, unprogrammed default
  7703                           ;	Single-Supply ICSP Enable bit
  7704                           ;	LVP = OFF, Single-Supply ICSP disabled
  7705                           ;	Boot Block Size Select bits
  7706                           ;	BBSIZ = 0x0, unprogrammed default
  7707                           ;	Extended Instruction Set Enable bit
  7708                           ;	XINST = 0x0, unprogrammed default
  7709                           ;	Background Debugger Enable bit
  7710                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  7711   300006                     	org	3145734
  7712   300006  81                 	db	129
  7713                           
  7714                           ; Padding undefined space
  7715   300007                     	org	3145735
  7716   300007  FF                 	db	255
  7717                           
  7718                           ;Config register CONFIG5L @ 0x300008
  7719                           ;	unspecified, using default values
  7720                           ;	Code Protection bit
  7721                           ;	CP0 = 0x1, unprogrammed default
  7722                           ;	Code Protection bit
  7723                           ;	CP1 = 0x1, unprogrammed default
  7724   300008                     	org	3145736
  7725   300008  03                 	db	3
  7726                           
  7727                           ;Config register CONFIG5H @ 0x300009
  7728                           ;	unspecified, using default values
  7729                           ;	Boot Block Code Protection bitProtect Boot
  7730                           ;	CPB = 0x1, unprogrammed default
  7731                           ;	Data EEPROM Code Protection bit
  7732                           ;	CPD = 0x1, unprogrammed default
  7733   300009                     	org	3145737
  7734   300009  C0                 	db	192
  7735                           
  7736                           ;Config register CONFIG6L @ 0x30000A
  7737                           ;	unspecified, using default values
  7738                           ;	Write Protection bit
  7739                           ;	WRT0 = 0x1, unprogrammed default
  7740                           ;	Write Protection bit
  7741                           ;	WRT1 = 0x1, unprogrammed default
  7742   30000A                     	org	3145738
  7743   30000A  03                 	db	3
  7744                           
  7745                           ;Config register CONFIG6H @ 0x30000B
  7746                           ;	unspecified, using default values
  7747                           ;	Configuration Register Write Protection bit
  7748                           ;	WRTC = 0x1, unprogrammed default
  7749                           ;	Boot Block Write Protection bit
  7750                           ;	WRTB = 0x1, unprogrammed default
  7751                           ;	Data EEPROM Write Protection bit
  7752                           ;	WRTD = 0x1, unprogrammed default
  7753   30000B                     	org	3145739
  7754   30000B  E0                 	db	224
  7755                           
  7756                           ;Config register CONFIG7L @ 0x30000C
  7757                           ;	unspecified, using default values
  7758                           ;	Table Read Protection bit
  7759                           ;	EBTR0 = 0x1, unprogrammed default
  7760                           ;	Table Read Protection bit
  7761                           ;	EBTR1 = 0x1, unprogrammed default
  7762   30000C                     	org	3145740
  7763   30000C  03                 	db	3
  7764                           
  7765                           ;Config register CONFIG7H @ 0x30000D
  7766                           ;	unspecified, using default values
  7767                           ;	Boot Block Table Read Protection bit
  7768                           ;	EBTRB = 0x1, unprogrammed default
  7769   30000D                     	org	3145741
  7770   30000D  40                 	db	64
  7771                           tosu	equ	0xFFF
  7772                           tosh	equ	0xFFE
  7773                           tosl	equ	0xFFD
  7774                           stkptr	equ	0xFFC
  7775                           pclatu	equ	0xFFB
  7776                           pclath	equ	0xFFA
  7777                           pcl	equ	0xFF9
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           indf0	equ	0xFEF
  7785                           postinc0	equ	0xFEE
  7786                           postdec0	equ	0xFED
  7787                           preinc0	equ	0xFEC
  7788                           plusw0	equ	0xFEB
  7789                           fsr0h	equ	0xFEA
  7790                           fsr0l	equ	0xFE9
  7791                           wreg	equ	0xFE8
  7792                           indf1	equ	0xFE7
  7793                           postinc1	equ	0xFE6
  7794                           postdec1	equ	0xFE5
  7795                           preinc1	equ	0xFE4
  7796                           plusw1	equ	0xFE3
  7797                           fsr1h	equ	0xFE2
  7798                           fsr1l	equ	0xFE1
  7799                           bsr	equ	0xFE0
  7800                           indf2	equ	0xFDF
  7801                           postinc2	equ	0xFDE
  7802                           postdec2	equ	0xFDD
  7803                           preinc2	equ	0xFDC
  7804                           plusw2	equ	0xFDB
  7805                           fsr2h	equ	0xFDA
  7806                           fsr2l	equ	0xFD9
  7807                           status	equ	0xFD8

Data Sizes:
    Strings     278
    Constant    12
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82     121
    BANK0           128      0     102
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LcPutString@s	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S1306$buffer	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    S1306$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_3(CODE[5]), STR_5(CODE[28]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 50
		 -> motor_RFID@buffer(BANK0[50]), ReadRFID_NoCooperatiu@buffer(COMRAM[50]), STR_10(CODE[27]), STR_11(CODE[29]), 
		 -> STR_12(CODE[33]), STR_13(CODE[9]), STR_14(CODE[16]), STR_15(CODE[16]), 
		 -> STR_16(CODE[16]), STR_17(CODE[33]), STR_2(CODE[6]), STR_4(CODE[2]), 
		 -> STR_6(CODE[18]), STR_7(CODE[18]), STR_8(CODE[18]), STR_9(CODE[19]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 28
		 -> STR_3(CODE[5]), STR_5(CODE[28]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 28
		 -> STR_3(CODE[5]), STR_5(CODE[28]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_3(CODE[5]), STR_5(CODE[28]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _motorTeclado->_GetTecla
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us
    _LcPutString->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _WaitForBusy->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7449
                        _LcPutString
                            _TI_Init
                      _Terminal_Init
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           6     6      0    4026
                                             76 COMRAM     6     6      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
                _Terminal_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    14     13    2223
                                             51 COMRAM    25    12     13
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    2018
                                             45 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    1884
                                             33 COMRAM    12     9      3
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                12     9      3    1045
                                             21 COMRAM    12     9      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  7     3      4     747
                                             14 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                5     3      2     333
                                              9 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                8     5      3     232
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   7     5      2     182
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     293
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      90
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendString                                  2     0      2      90
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (3) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendChar                                    1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     126
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1679
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1679
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     303
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     561
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Set_Bit                                      2     1      1     561
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     565
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     565
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     250
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           5     5      0     223
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      53
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcPutString                                          2     0      2    1144
                                             24 COMRAM     2     0      2
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1098
                                             23 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     675
                                             15 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     104
                                             14 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowRSI                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _HighRSI                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (12) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcPutString
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
           _CantaPartAlta
           _CantaPartBaixa
         _WaitForBusy
           _TI_GetTics
           _TI_ResetTics
       _WaitForBusy
   _TI_Init
   _Terminal_Init
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _initTeclado
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Clear_Bit
     _MFRC522_Rd
     _MFRC522_Set_Bit
     _MFRC522_Wr
     _Terminal_SendString
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
           _read_prec_or_width
           _xtoa
             _pad
               _fputc
               _fputs
                 _fputc

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     102     79.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     82     121     96.0%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     223      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 06 19:38:48 2025

       __end_ofGetTecla@F3221 1EE9         ?_Terminal_ReceiveChar 0001                    _RSI_Timer0 1674  
                 MFRC522_Rd@i 000B                   MFRC522_Wr@i 0010                            l52 1734  
                          l81 12F2                            l75 1564                            l85 163C  
                          l88 138C                    _TI_GetTics 1342                            bsr 0FE0  
        ??_InitPortDirections 0002                           l130 16A0                           l203 1712  
                         l133 172C                           l214 0F88                           l222 0F22  
                         l207 14CE                           l215 0FC2                           l223 0F26  
                         l311 171C                           l127 1740                           l216 0FC8  
                         l232 15F2                           l400 03BC                           l209 14FA  
                         l241 1340                           l226 1672                           l170 13D2  
                         l162 075A                           l235 16FA                           l180 0D28  
                         l404 03E6                           l412 052A                           l229 16DE  
                         l510 1054                           l238 1706                           l182 0CB6  
                         l174 0C6C                           l513 1596                           l522 129C  
                         l507 10E0                           l516 15C8                           l372 01CC  
                         l471 0AF0                           l552 16CA                           l473 0B5C  
                         l546 16EE                           l570 1240                           l555 1724  
                         l492 0C64                           l573 173A                           l549 1658  
                         l478 0B60                           l558 1744                           l479 0B9C  
                         l567 11DE                           l591 0AB4                           l498 1530  
                         u800 13D0                           u801 13CC                           u810 0D0E  
                         u780 13A0                           u781 139C                           u790 13B8  
                         u791 13B4                           u980 16C8                           u981 16C2  
                         u986 16CA                           _pad 10E2              ??_CantaPartBaixa 0002  
                         wreg 0FE8           __end_of_LcPutString 1532                ??_MFRC522_Init 0014  
                        l2100 16EA                          l2102 16EC                          l1311 0DCC  
                        l2104 172E                          l2106 1732                          l1315 0DD4  
                        l1307 09C8                          l3100 0B30                          l1332 08D2  
                        l3110 0B8C                          l3102 0B42                          l2062 1742  
                        l1351 0E7E                          l3120 15AE                          l3112 0B94  
                        l1272 14C4                          l3130 15BE                          l3122 15B0  
                        l3114 0B98                          l3106 0B6A                          l2058 16B8  
                        l1362 1746                          l1290 1112                          l1339 1414  
                        l3132 15C0                          l3124 15B2                          l3116 159A  
                        l3108 0B88                          l3300 1718                          l3140 140C  
                        l1293 1150                          l3126 15B4                          l3118 15A8  
                        l3310 054A                          l3302 052C                          l3150 1694  
                        l3134 13D4                          l3230 1496                          l1359 148C  
                        l1295 116A                          l3128 15BC                          l3240 0BA0  
                        l2096 16E0                          l3400 0716                          l3320 0574  
                        l3312 054E                          l3304 0530                          l3152 1696  
                        l3144 168C                          l3080 11AE                          l3072 116C  
                        l3136 13E0                          l3232 149E                          l3090 0AE0  
                        l3082 0AB8                          l3250 0BCE                          l3242 0BA4  
                        l2098 16E8                          l3402 0718                          l3330 059A  
                        l3322 057A                          l3314 0556                          l3306 0536  
                        l3154 1698                          l3146 1690                          l3074 1170  
                        l3410 09CA                          l3138 13F0                          l3234 14A6  
                        l2700 1358                          l3092 0AF6                          l3084 0ABC  
                        l3260 0C04                          l3252 0BD0                          l3244 0BAA  
                        l3156 12F4                          l1900 0C82                          l3404 071C  
                        l3340 05CA                          l3332 05AA                          l3324 058A  
                        l3316 0566                          l3308 0546                          l3148 1692  
                        l3076 1186                          l3420 09FA                          l3412 09CE  
                        l3236 14BA                          l3228 148E                          l3500 00C2  
                        l3094 0B06                          l3086 0ACC                          l3262 0C14  
                        l3270 0C38                          l3254 0BE2                          l3246 0BAC  
                        l2710 0F38                          l3158 12F8                          l1910 0CBC  
                        l1902 0C8A                          l3350 05EC                          l3326 058E  
                        l3318 056C                          l3078 11AA                          l3430 0A20  
                        l3422 09FE                          l3414 09E2                          l3510 00F6  
                        l3502 00C4                          l3096 0B12                          l3088 0AD8  
                        l3272 0C48                          l3264 0C16                          l3256 0BE4  
                        l3248 0BBE                          l3280 1532                          l2720 0F5E  
                        l2712 0F3A                          l2704 0F2A                          l1912 0CC4  
                        l1920 0CCC                          l3352 05F2                          l3344 05D4  
                        l3336 05B4                          l3328 0592                          l3408 0724  
                        l3432 0A34                          l3424 0A02                          l3416 09E6  
                        l2800 08D4                          l3600 0310                          l3520 0126  
                        l3512 00FC                          l3504 00CC                          l3098 0B24  
                        l3274 0C58                          l3266 0C28                          l3258 0BF2  
                        l3290 1544                          l2730 0F74                          l2722 0F60  
                        l2706 0F34                          l1922 0D00                          l3370 0654  
                        l3354 05F8                          l3346 05E4                          l3338 05BA  
                        l3442 0A6A                          l3434 0A40                          l3426 0A08  
                        l3418 09EA                          l2650 0DE6                          l2810 08FC  
                        l2802 08D8                          l3530 019E                          l3522 0140  
                        l3514 0104                          l3506 00D4                          l2900 128C  
                        l3276 0C5A                          l3268 0C2A                          l3460 1510  
                        l3292 1554                          l2740 0F94                          l2732 0F84  
                        l2724 0F66                          l2708 0F36                          l1924 0D18  
                        l1908 0C90                          l1932 1736                          l3380 06A4  
                        l3372 065C                          l3364 0612                          l3356 05FE  
                        l3348 05E8                          l1692 1726                          l3444 0A7E  
                        l3436 0A46                          l3428 0A1C                          l2652 0DF6  
                        l2820 0926                          l2812 090C                          l2804 08E8  
                        l3620 037E                          l3612 035C                          l3604 031E  
                        l3540 01C6                          l3532 01B2                          l3524 0152  
                        l3516 010E                          l3508 00E2                          l3700 142C  
                        l3462 1514                          l3294 1560                          l3286 1534  
                        l1934 1708                          l2670 14C8                          l2742 0FA8  
                        l2726 0F6A                          l2718 0F3E                          l3390 06D6  
                        l3382 06AC                          l3374 066C                          l3366 0622  
                        l1694 172A                          l2902 163E                          l3278 11E0  
                        l3438 0A5A                          l3454 0A9E                          l2654 0E00  
                        l2662 1452                          l2830 098A                          l2822 092C  
                        l2814 0914                          l2806 08F0                          l2910 077E  
                        l3630 03AC                          l3622 0386                          l3614 036C  
                        l3606 032E                          l3550 0250                          l3526 0162  
                        l3534 01BA                          l3518 0116                          l3470 003C  
                        l3710 1444                          l3702 142E                          l3456 14FC  
                        l3296 1562                          l3288 1542                          l2672 14D0  
                        l2744 0FB0                          l2736 0F8A                          l2728 0F72  
                        l2752 0E82                          l1880 138E                          l3392 06F8  
                        l3384 06B2                          l3376 068C                          l3368 0642  
                        l3448 0A8E                          l2840 0D32                          l2656 0E1C  
                        l2648 0DD6                          l2664 145E                          l2680 10FC  
                        l2832 09A4                          l2816 0918                          l2808 08F6  
                        l2824 094C                          l2920 07A2                          l2912 078A  
                        l3640 03F0                          l3632 03BE                          l3624 0390  
                        l3616 0374                          l3608 0348                          l3560 026E  
                        l3544 01D4                          l3528 0192                          l3480 0068  
                        l3472 0044                          l3464 002A                          l3712 1448  
                        l3704 1430                          l3458 1500                          l2674 14D2  
                        l2746 0FB2                          l2738 0F90                          l2770 0EBE  
                        l2754 0E8A                          l3298 1714                          l1890 13BE  
                        l1882 1390                          l3378 069E                          l2906 1720  
                        l2842 0D54                          l2850 0DA6                          l2658 0E4E  
                        l2666 146C                          l2690 115E                          l2682 110A  
                        l2826 0968                          l2834 09B2                          l2818 0924  
                        l2930 07E8                          l2922 07B2                          l2914 0796  
                        l3650 0456                          l3642 0402                          l3634 03C6  
                        l3626 0394                          l3618 037C                          l3554 0258  
                        l3546 0242                          l3538 01C2                          l3490 0094  
                        l3482 0070                          l3474 004C                          l3466 002E  
                        l3706 1434                   _TI_NewTimer 129E                          l2860 157C  
                        l2692 161C                          l2748 0FC6                          l2772 0EC0  
                        l2764 0E92                          l2756 0E8C                          l2852 165C  
                        l1876 173C                          l1892 13D0                          l1884 13A0  
                        l3396 0700                          l3388 06C6                          l2844 0D60  
                        l2668 1470                          l2684 111E                          l2676 10E2  
                        l2828 097A                          l2940 083E                          l2932 07FC  
                        l2916 079A                          l2908 075C                          l3660 046E  
                        l3652 045E                          l3644 0416                          l3636 03D6  
                        l3628 039C                          l3580 02BE                          l3572 0298  
                        l3564 027C                          l3548 024C                          l3492 009E  
                        l3484 007A                          l3476 0056                          l3468 0038  
                        l3708 1438                          l2870 158C                          l2862 157E  
                        l2694 161E                          l2790 0F0A                          l2782 0EDC  
                        l2774 0EC6                          l2766 0EB2                          l2758 0E8E  
                        l2854 16CE                          l1894 0C66                          l1886 13A6  
                        l3398 0706                          l2846 0D7C                          l2838 0D2A  
                        l2686 112E                          l2678 10F0                          l2950 0888  
                        l2942 0856                          l2934 080A                          l2926 07BA  
                        l2918 07A0                          l3654 0468                          l3646 041E  
                        l3638 03E8                          l3590 02DC                          l3558 0266  
                        l3494 00A6                          l3486 0082                          l3478 005E  
                        ?_pad 000F                          l2872 158E                          l2864 1580  
                        l2856 1568                          l2696 163A                          l2880 1256  
                        l2792 0F10                          l2784 0EFC                          l2776 0EC8  
                        l2768 0EB8                          l1896 0C72                          l1888 13B8  
                        l2848 0D9A                          l2688 1132                          l2944 0874  
                        l2952 08A0                          l2936 0814                          l2928 07D8  
                        l3648 044C                          l3592 02E4                          l3584 02CC  
                        l3576 02A6                          l3568 028A                          l3496 00B0  
                        l3488 008C                          l3664 0514                          l2866 1582  
                        l2858 1576                          l2698 1344                          l2890 1266  
                        l2882 1258                          l2874 1242                          l2794 0F12  
                        l2786 0F02                          l2778 0ED8                          l1898 0C7A  
                        l2970 12D8                          l2962 129E                          l2938 0822  
                        l3594 02F2                          l3586 02D6                          l3498 00B8  
                        l3690 1416                          l2796 1058                          l2868 158A  
                        l2892 1268                          l2884 1260                          l2876 124E  
                        l2788 0F08                          l2980 15D2                          l2972 12E8  
                        l2964 12A4                          l2956 08B0                          l3596 0306  
                        l3692 141E                          l2798 0FCC                          l2894 126A  
                        l2886 1262                          l2878 1254                          l2982 15DA  
                        l3854 0CE2                          l3694 1422                          l2896 126C  
                        l2888 1264                          l2984 16F0                          l2976 15CA  
                        l2968 12BC                          l3696 1426                          l2986 16FC  
                        l2978 15CC                          l3698 142A                          STR_1 1FFA  
                        STR_2 1FEF                          STR_3 1FF5                          STR_5 1F48  
                        STR_6 1F92                          STR_7 1FA4                          STR_8 1F92  
                        STR_9 1F7F                          u2000 0968                          u2001 0964  
                        u2010 097A                          u2011 0976                          u2020 098A  
                        u2100 077E                          u2021 0986                          u2101 077A  
                        u2030 09A4                          u2110 07E8                          u2031 09A0  
                        u2111 07E4                          u2040 09B2                          u2120 080A  
                        u2041 09AE                          u2121 0806                          u2050 0D54  
                        u2130 083E                          u2051 0D50                          u2131 083A  
                        u2140 12B8                          u2300 11A6                          u2060 0DCC  
                        u2141 12B4                          u2061 0DC8                          _LATA 0F89  
                        u2070 1288                          u2150 12D8                          u2310 11CE  
                        u2071 1284                          u2151 12D4                          _LATC 0F8B  
                        u2080 129C                          u2320 11DE                          _LATD 0F8C  
                        u2081 1298                          u2321 11DA                          u2330 0ACC  
                        u2090 1650                          u1610 0DE6                          u2331 0AC8  
                        u2091 1648                          u2307 119C                          u1611 0DE2  
                        u2340 0B06                          u2500 0C14                          u1620 0DF6  
                        u1700 115E                          u2341 0B02                          u2501 0C10  
                        u2317 11C4                          u1621 0DF2                          u1701 115A  
                        u2350 0B24                          u2510 0C28                          u1710 0F50  
                        u1630 0E1C                          u2351 0B20                          u2511 0C24  
                        u1711 0F48                          u1631 0E18                          u2360 0B42  
                        u2520 0C48                          u2600 05E4                          u1640 0E4E  
                        u2361 0B3E                          u2521 0C44                          u2601 05E0  
                        u1641 0E4A                          u2530 0C58                          u1730 0F84  
                        u1810 0F22                          u2610 060E                          u2098 1652  
                        u2290 1186                          u1650 148C                          u2370 140C  
                        u2531 0C54                          u1731 0F80                          u1811 0F1E  
                        u2611 060A                          u2291 1182                          u1651 1488  
                        u2371 1408                          u1820 106A                          u1900 0FDE  
                        u2460 0BBE                          u2540 1554                          u1660 14FA  
                        u1740 0FA4                          u2700 06F8                          u2620 0622  
                        u1821 1062                          u1901 0FD6                          u2461 0BBA  
                        u2541 1550                          u1661 14F6                          u1741 0F9E  
                        u2701 06F4                          u2621 061E                          u2470 0BCE  
                        u1750 0FC2                          u2710 0716                          u2630 0642  
                        u2550 0546                          u1670 10F0                          u2471 0BCA  
                        u1751 0FBE                          u2711 0712                          u2631 063E  
                        u2551 0542                          u1671 10EC                          u1840 108C  
                        u1920 1000                          u2480 0BE2                          u1728 0F52  
                        u1808 0EF0                          u1760 0EA4                          u2640 0654  
                        u2560 0566                          u2720 09E2                          u1680 110A  
                        u2800 00F6                          u1841 1084                          u1921 0FF8  
                        u2481 0BDE                          u1761 0E9C                          u2641 0650  
                        u2561 0562                          u2721 09DE                          u1681 1106  
                        u2801 00F2                          u2490 0C04                          u1746 0FA6  
                        u2650 066C                          u2570 058A                          u2730 09FA  
                        u1690 1150                          u2810 0126                          u2491 0C00  
                        u2651 0668                          u2571 0586                          u2731 09F6  
                        u1691 114C                          u2811 0122                          u1860 10B0  
                        u1940 1024                          u1780 0ED8                          u2660 068C  
                        u2580 05AA                          u2740 0A1C                          u2900 03BC  
                        u2820 0140                          u1861 10A8                          u1941 101C  
                        u1781 0ED4                          u2661 0688                          u2581 05A6  
                        u2741 0A18                          u2901 03B8                          u2821 013C  
                        u1838 106C                          u1918 0FE0                          u1790 0EEE  
                        u2670 069E                          u2590 05CA                          u2750 0A34  
                        u2910 03D6                          u2830 0162                          u1791 0EE6  
                        u2671 069A                          u2591 05C6                          u2751 0A30  
                        u2911 03D2                          u2831 015E                          u1880 10D2  
                        u1960 1046                          u2680 06C2                          u2760 0A5A  
                        u2920 03E6                          u2840 01B2                          u1881 10CA  
                        u1961 103E                          u2681 06BE                          u2761 0A56  
                        u2921 03E2                          u2841 01AE                          u1858 108E  
                        u1938 1002                          u1778 0EA6                          u2690 06D6  
                        u2770 0A7E                          u2930 0402                          u2850 02F2  
                        u2691 06D2                          u2771 0A7A                          u2931 03FE  
                        u2851 02EE                          u2780 1530                          u1980 090C  
                        u2940 0412                          u2860 0306                          u2781 152C  
                        u1981 0908                          u2941 040E                          u2861 0302  
                        u1878 10B2                          u1958 1026                          u2870 032E  
                        u2790 00E2                          u2871 032A                          u2791 00DE  
                        u2880 0348                          i1l41 001E                          u2881 0344  
                        u1898 10D4                          u1978 1048                          u2890 03AC  
                        u1995 0938                          u2891 03A8                          i2l36 16B4  
                        i2l70 168A                          _TMR0 0FD6                          _Tics 0059  
                        _Rows 0069                          _dbuf 00C6                          _main 1416  
                        _prec 005F                          pad@i 0014                          pad@p 0011  
                        fsr0h 0FEA                          fsr1h 0FE2                          indf0 0FEF  
                        fsr2h 0FDA                          fsr0l 0FE9                          indf2 0FDF  
                        fsr1l 0FE1                          fsr2l 0FD9                          btemp 007A  
                        _xtoa 08D4               __end_of_TI_Init 1566                          prodh 0FF4  
                        prodl 0FF3                          start 0026               __end_of_CantaIR 1598  
             __end_of_HighRSI 16B8                  ___param_bank 0000               ??_MFRC522_Reset 0011  
                ?_initTeclado 0001                         ??_pad 0013                         ?_main 0001  
                       STR_10 1F64                         STR_11 1F2B                         STR_12 1F0A  
                       STR_13 1FE6                         STR_14 1FB6                         STR_15 1FC6  
                       STR_16 1FD6                         STR_17 1EE9                         _T0CON 0FD5  
                       ?_xtoa 0016                         _RCREG 0FAE                         _RCSTA 0FAB  
                vfpfcnvrt@fmt 0023                         _SPBRG 0FAF                         _PORTD 0F83  
                       _TRISA 0F92                         _TRISD 0F95                         _TXREG 0FAD  
                       _TXSTA 0FAC                         _Filas 0077                         _Timer 0078  
                       _flags 0063               motor_RFID@irqEn 0071           read_prec_or_width@c 0006  
         read_prec_or_width@n 0007               motor_RFID@unLen 0061                         _fputc 0DD6  
                       _fputs 1452                  _TI_ResetTics 161A                         _tecla 0075  
             motor_RFID@state 0073                         _timer 0079                         pad@fp 000F  
                       _width 005D                         _state 0074                         _putch 1746  
                       tablat 0FF5             _MFRC522_Clear_Bit 165A                         ttemp5 007B  
                       ttemp6 007E                         ttemp7 0082                         status 0FD8  
                       wtemp8 007B               __end_of_sprintf 14C6                         xtoa@c 001F  
                       xtoa@d 0017                         xtoa@i 0020                         xtoa@p 001C  
                       xtoa@w 001D            Terminal_SendChar@c 0002            ?_MFRC522_Clear_Bit 0011  
            __end_of_LcGotoXY 0B9E              __end_of_GetTecla 0D2A             _MFRC522_AntennaOn 16F0  
      ??_Terminal_ReceiveChar 0002               __initialization 15F4                  __end_of_main 1452  
          ?_MFRC522_AntennaOn 0001           ??_MFRC522_Clear_Bit 0012                  __end_of_xtoa 09CA  
                 ?_RSI_Timer0 0001                TI_Init@counter 0002              _initPortsTeclado 1726  
                 ?_TI_GetTics 0002                        ??_main 0053                   _LcPutString 14FC  
         ??_MFRC522_AntennaOn 0013                        ??_xtoa 0019                 __activetblptr 0002  
          MFRC522_Rd@ucResult 000A    __end_of_read_prec_or_width 0DD6                        _ADCON1 0FC1  
             MFRC522_Wr@value 000C     __end_of_MFRC522_Clear_Bit 1674                        ?_fputc 0002  
                      ?_fputs 000A                        ?_putch 0001                     ??_TI_Init 0002  
                   ??_CantaIR 0004        Terminal_SendString@str 0005                        i2l2070 167C  
                      i2l2072 167E                        i2l2068 1674                        i2l2496 16A2  
                      i2l2498 16B0                LcGotoXY@Fisics 0015                LcGotoXY@Column 0017  
               ??_WaitForBusy 000F                 vfpfcnvrt@done 002B                        _TMR0IF 7F92  
                   ??_HighRSI 0001     __end_of_MFRC522_AntennaOn 16FC              __end_of_delay_us 14FC  
                      _LowRSI 0018                  _LcGotoXY$754 0013                        _RowAct 0067  
                      _Timers 0080                  vfprintf@cfmt 0032          __end_of_MFRC522_Init 1342  
            __end_of_initRFID 171E              motor_RFID@buffer 0094            motorTerminal@state 0064  
        read_prec_or_width@ap 0003                        clear_0 15FA                        clear_1 1606  
                      isa$std 0001                        pad@buf 0010                        fputc@c 0002  
                      fputs@c 000C                        fputs@i 000D                        fputs@s 000A  
            __end_of_showMenu 1242                  __mediumconst 1EDC                        tblptrh 0FF7  
                      tblptrl 0FF6                        tblptru 0FF8                        putch@c 0001  
            __end_of_vfprintf 1416             __end_of_CantaData 15CA         __end_of_Terminal_Init 16F0  
                   ??_sprintf 0041                        xtoa@fp 0016                    __accesstop 0080  
     __end_of__initialization 160C             __end_of_LcPutChar 0C66               delay_us@howMany 0005  
               ___rparam_used 0001                  ??_MFRC522_Rd 0007                  ??_MFRC522_Wr 000D  
          _MFRC522_AntennaOff 16FC                __pcstackCOMRAM 0001           __end_of_WaitForBusy 129E  
         ?_MFRC522_AntennaOff 0001                 __end_of_fputc 0E80                 __end_of_fputs 148E  
               __end_of_putch 1748          TI_NewTimer@Comptador 0004             __end_of_ReadFilas 1742  
            MFRC522_Rd@ucAddr 0009                     ?_LcGotoXY 0010             ??_MFRC522_Set_Bit 0012  
          __end_of_MFRC522_Rd 0FCA            __end_of_MFRC522_Wr 0F28                     ?_GetTecla 0001  
                     ??_fputc 0005                       ??_fputs 000C          ??_MFRC522_AntennaOff 0014  
                ?_TI_NewTimer 0002                       ??_putch 0002                    __pbssBANK0 0080  
       __end_of_motorTerminal 0AB6                 _CantaPartAlta 1056        TI_NewTimer@TimerHandle 0002  
                     ?_LowRSI 0001              MFRC522_Wr@ucAddr 000F       TI_ResetTics@TimerHandle 0002  
               _writeColumnas 138E                       _BAUDCON 0FB8                    ??_LcGotoXY 0011  
                   ?_delay_us 0001                    ??_GetTecla 0002             _Terminal_SendChar 171E  
                     _TI_Init 1532            ?_Terminal_SendChar 0001      __end_of_initPortsTeclado 172E  
                     _CantaIR 1566                     ?_initRFID 0001                       _HighRSI 0008  
                 _WaitForBusy 1242                ?_CantaPartAlta 0001                       _Columns 0068  
           motor_RFID@TagType 006C           ??_Terminal_SendChar 0002                       __Hparam 0000  
                     __Lparam 0000                     ?_showMenu 0001                  ??_RSI_Timer0 0001  
              ?_writeColumnas 0001                     ?_vfprintf 002E                  ??_TI_GetTics 0006  
           motor_RFID@allZero 006A                       __pcinit 15F4         __end_of_MFRC522_Reset 15F4  
                     __ramtop 0200             motor_RFID@_status 006D                  ?_LcPutString 0019  
                     __ptext0 1416                       __ptext1 002A                       __ptext2 148E  
                     __ptext3 13D4                       __ptext4 075C                       __ptext5 08D4  
                     __ptext6 10E2                       __ptext7 1452                       __ptext8 0DD6  
                     __ptext9 1746                 ?_motorTeclado 0001                     CantaIR@IR 0004  
           __end_of_initPorts 1736         read_prec_or_width@fmt 0002     __end_of_Terminal_SendChar 1726  
           motor_RFID@waitIRq 0070                    ??_delay_us 0002               WaitForBusy@Busy 000F  
                     _sprintf 148E                  _MFRC522_Init 12F4                __pintcode_body 16A2  
        end_of_initialization 160C                   motor_RFID@i 006E                   motor_RFID@n 006F  
                  ??_initRFID 0014            __end_of_RSI_Timer0 168C                       fputc@fp 0004  
               __Lmediumconst 1EDC                       int_func 16A2                       fputs@fp 000B  
          __end_of_TI_GetTics 138E            _read_prec_or_width 0D2A             __end_of_vfpfcnvrt 08D4  
                  ??_showMenu 0007                    _motor_RFID 002A                       postdec2 0FDD  
         ?_read_prec_or_width 0002                       postinc0 0FEE                       postinc1 0FE6  
                     postinc2 0FDE              vfpfcnvrt@convarg 0027                 GetTecla@F3221 1EDD  
                  ??_vfprintf 0032                ??_motorTeclado 0012                     _PORTBbits 0F81  
                   _PORTCbits 0F82           _Terminal_SendString 116C         TI_GetTics@TimerHandle 000E  
                   _TRISBbits 0F93                     _TRISCbits 0F94          ??_read_prec_or_width 0004  
             ??_CantaPartAlta 0002                     _CantaData 1598          ?_Terminal_SendString 0005  
           MFRC522_Rd@Address 0008               ??_writeColumnas 0002                     _LcPutChar 0B9E  
              __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 16CC               _MFRC522_Set_Bit 16CC  
                 vfpfcnvrt@ap 0024                   vfpfcnvrt@cp 002C                   vfpfcnvrt@fp 0022  
                   _ColumnAct 0066           start_initialization 15F4                     _ReadFilas 173C  
                 __end_of_pad 116C  __end_of_Terminal_TXAvailable 165A                    ?_CantaData 0001  
       ??_Terminal_SendString 0007                      ??_LowRSI 0001                   vfprintf@fmt 002F  
                  ?_LcPutChar 0001                   ?_motor_RFID 0001                 ??_initTeclado 0005  
                 __pbssCOMRAM 0053                    ?_ReadFilas 0001             MFRC522_Wr@Address 000E  
               ?_TI_ResetTics 0001                      ?_TI_Init 0001                      ?_CantaIR 0001  
           ?_initPortsTeclado 0001                _CantaPartBaixa 0FCA                      ?_HighRSI 0001  
                ?_WaitForBusy 0001          __end_of_motorTeclado 075C            ??_initPortsTeclado 0002  
     __end_of_MFRC522_Set_Bit 16E0           motor_RFID@fifoLevel 0051           MFRC522_Set_Bit@addr 0012  
         MFRC522_Set_Bit@mask 0011                     __pintcode 0008                 __pmediumconst 1EDC  
  __end_of_InitPortDirections 1714               CantaPartBaixa@c 0003                   __pintcodelo 0018  
                 __smallconst 1EDC           __end_of_initTeclado 16A2                ??_TI_ResetTics 0002  
                   _initPorts 172E                      ?_sprintf 0034        __end_of_CantaPartBaixa 1056  
               _Terminal_Init 16E0          _Terminal_RXAvailable 16B8                   ??_CantaData 0004  
                    _LATBbits 0F8A                      _LATCbits 0F8B                     delay_us@x 0006  
             _hashtag_pressed 0065                      i2u144_40 16B0                      i2u144_41 16AC  
                    _PIR1bits 0F9E                   ??_LcPutChar 0018         motor_RFID@lastBitsVal 0052  
                LcPutString@s 0019                     _vfpfcnvrt 075C          _Terminal_TXAvailable 163E  
                GetTecla@fila 0011                      _LcGotoXY 0AB6                   ??_ReadFilas 0002  
                    _GetTecla 0C66  __end_of_Terminal_ReceiveChar 1746                    ?_initPorts 0001  
               motor_RFID@UID 0053                ?_Terminal_Init 0001                   LcGotoXY@Row 0010  
             ?_CantaPartBaixa 0001                      _Columnas 0076         ?_Terminal_RXAvailable 0001  
               _motorTerminal 09CA              ?_MFRC522_Set_Bit 0011                      __Hrparam 0000  
       MFRC522_Clear_Bit@addr 0013         MFRC522_Clear_Bit@mask 0011                    vfprintf@ap 0031  
                    __Lrparam 0000                    vfprintf@fp 002E                   _initTeclado 168C  
       ?_Terminal_TXAvailable 0002                    ?_vfpfcnvrt 0022            motor_RFID@checksum 006B  
                  sprintf@fmt 0035                      _delay_us 14C6                      __ptext10 0D2A  
                    __ptext11 09CA                      __ptext20 16B8                      __ptext12 11E0  
                    __ptext21 052C                      __ptext13 116C                      __ptext30 16CC  
                    __ptext22 138E                      __ptext14 163E                      __ptext31 16FC  
                    __ptext23 1736                      __ptext15 171E                      __ptext40 14FC  
                    __ptext32 165A                      __ptext24 173C                      __ptext16 168C  
                    __ptext41 0B9E                      __ptext33 0E80                      __ptext25 0C66  
                    __ptext17 1726                      __ptext42 0AB6                      __ptext34 0F28  
                    __ptext26 1714                      __ptext18 129E                      __ptext43 1242  
                    __ptext35 14C6                      __ptext27 12F4                      __ptext19 1742  
                    __ptext52 1674                      __ptext44 161A                      __ptext36 1708  
                    __ptext28 15CA                      __ptext45 1342                      __ptext37 172E  
                    __ptext29 16F0                      __ptext46 1566                      __ptext38 16E0  
                    __ptext47 1598                      __ptext39 1532                      __ptext48 0FCA  
                    __ptext49 1056                 ??_TI_NewTimer 0003                CantaPartAlta@c 0003  
                    _initRFID 1714                ?_motorTerminal 0001         __end_of_CantaPartAlta 10E2  
               CantaData@Data 0004                    _MFRC522_Rd 0F28                    _MFRC522_Wr 0E80  
                ??_motor_RFID 004D                      isa$xinst 0000                      _showMenu 11E0  
        __end_of_TI_ResetTics 163E                      int$flags 007A         __end_of_writeColumnas 13D4  
          motor_RFID@substate 0072                      _vfprintf 13D4                 _MFRC522_Reset 15CA  
                _motorTeclado 052C                    _INTCONbits 0FF2               ??_Terminal_Init 0002  
   TI_GetTics@CopiaTicsActual 000A                   ??_initPorts 0002        ??_Terminal_RXAvailable 0002  
           _hashtag_pressed3s 1736   __end_of_Terminal_SendString 11E0            __end_of_motor_RFID 052C  
                    intlevel1 0000                      intlevel2 0000                     sprintf@ap 0041  
          ?_hashtag_pressed3s 0001                    LcPutChar@c 0018           __end_of_TI_NewTimer 12F4  
         ??_hashtag_pressed3s 0002        ??_Terminal_TXAvailable 0004          _Terminal_ReceiveChar 1742  
                 ??_vfpfcnvrt 0025                ?_MFRC522_Reset 0001                 ??_LcPutString 001B  
                    sprintf@f 0042        motor_RFID@backBitsCalc 004F                      sprintf@s 0034  
   __end_of_hashtag_pressed3s 173C            _InitPortDirections 1708    __end_of_MFRC522_AntennaOff 1708  
               ?_MFRC522_Init 0001               ??_motorTerminal 0007           ?_InitPortDirections 0001  
             GetTecla@columna 0010                   ?_MFRC522_Rd 0001                   ?_MFRC522_Wr 000C  
              GetTecla@keymap 0004  

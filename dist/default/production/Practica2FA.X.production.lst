

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Mar 05 17:30:12 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    14                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=3
    17                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 05/12/2024 GMT
    63                           ; 
    64                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4321 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000FE0                     bsr             equ	4064
    97   000FE9                     fsr0            equ	4073
    98   000FEA                     fsr0h           equ	4074
    99   000FE9                     fsr0l           equ	4073
   100   000FE1                     fsr1            equ	4065
   101   000FE2                     fsr1h           equ	4066
   102   000FE1                     fsr1l           equ	4065
   103   000FD9                     fsr2            equ	4057
   104   000FDA                     fsr2h           equ	4058
   105   000FD9                     fsr2l           equ	4057
   106   000FEF                     indf0           equ	4079
   107   000FE7                     indf1           equ	4071
   108   000FDF                     indf2           equ	4063
   109   000FF2                     intcon          equ	4082
   110   000000                     nvmcon          equ	0
   111   000FF9                     pcl             equ	4089
   112   000FFA                     pclath          equ	4090
   113   000FFB                     pclatu          equ	4091
   114   000FEB                     plusw0          equ	4075
   115   000FE3                     plusw1          equ	4067
   116   000FDB                     plusw2          equ	4059
   117   000FED                     postdec0        equ	4077
   118   000FE5                     postdec1        equ	4069
   119   000FDD                     postdec2        equ	4061
   120   000FEE                     postinc0        equ	4078
   121   000FE6                     postinc1        equ	4070
   122   000FDE                     postinc2        equ	4062
   123   000FEC                     preinc0         equ	4076
   124   000FE4                     preinc1         equ	4068
   125   000FDC                     preinc2         equ	4060
   126   000FF3                     prod            equ	4083
   127   000FF4                     prodh           equ	4084
   128   000FF3                     prodl           equ	4083
   129   000FD8                     status          equ	4056
   130   000FF5                     tablat          equ	4085
   131   000FF6                     tblptr          equ	4086
   132   000FF7                     tblptrh         equ	4087
   133   000FF6                     tblptrl         equ	4086
   134   000FF8                     tblptru         equ	4088
   135   000FFD                     tosl            equ	4093
   136   000FE8                     wreg            equ	4072
   137   000F80                     PORTA           equ	3968	;# 
   138   000F81                     PORTB           equ	3969	;# 
   139   000F82                     PORTC           equ	3970	;# 
   140   000F83                     PORTD           equ	3971	;# 
   141   000F84                     PORTE           equ	3972	;# 
   142   000F89                     LATA            equ	3977	;# 
   143   000F8A                     LATB            equ	3978	;# 
   144   000F8B                     LATC            equ	3979	;# 
   145   000F8C                     LATD            equ	3980	;# 
   146   000F8D                     LATE            equ	3981	;# 
   147   000F92                     TRISA           equ	3986	;# 
   148   000F92                     DDRA            equ	3986	;# 
   149   000F93                     TRISB           equ	3987	;# 
   150   000F93                     DDRB            equ	3987	;# 
   151   000F94                     TRISC           equ	3988	;# 
   152   000F94                     DDRC            equ	3988	;# 
   153   000F95                     TRISD           equ	3989	;# 
   154   000F95                     DDRD            equ	3989	;# 
   155   000F96                     TRISE           equ	3990	;# 
   156   000F96                     DDRE            equ	3990	;# 
   157   000F9B                     OSCTUNE         equ	3995	;# 
   158   000F9D                     PIE1            equ	3997	;# 
   159   000F9E                     PIR1            equ	3998	;# 
   160   000F9F                     IPR1            equ	3999	;# 
   161   000FA0                     PIE2            equ	4000	;# 
   162   000FA1                     PIR2            equ	4001	;# 
   163   000FA2                     IPR2            equ	4002	;# 
   164   000FA6                     EECON1          equ	4006	;# 
   165   000FA7                     EECON2          equ	4007	;# 
   166   000FA8                     EEDATA          equ	4008	;# 
   167   000FA9                     EEADR           equ	4009	;# 
   168   000FAB                     RCSTA           equ	4011	;# 
   169   000FAB                     RCSTA1          equ	4011	;# 
   170   000FAC                     TXSTA           equ	4012	;# 
   171   000FAC                     TXSTA1          equ	4012	;# 
   172   000FAD                     TXREG           equ	4013	;# 
   173   000FAD                     TXREG1          equ	4013	;# 
   174   000FAE                     RCREG           equ	4014	;# 
   175   000FAE                     RCREG1          equ	4014	;# 
   176   000FAF                     SPBRG           equ	4015	;# 
   177   000FAF                     SPBRG1          equ	4015	;# 
   178   000FB0                     SPBRGH          equ	4016	;# 
   179   000FB1                     T3CON           equ	4017	;# 
   180   000FB2                     TMR3            equ	4018	;# 
   181   000FB2                     TMR3L           equ	4018	;# 
   182   000FB3                     TMR3H           equ	4019	;# 
   183   000FB4                     CMCON           equ	4020	;# 
   184   000FB5                     CVRCON          equ	4021	;# 
   185   000FB6                     ECCP1AS         equ	4022	;# 
   186   000FB7                     ECCP1DEL        equ	4023	;# 
   187   000FB7                     PWM1CON         equ	4023	;# 
   188   000FB8                     BAUDCON         equ	4024	;# 
   189   000FB8                     BAUDCTL         equ	4024	;# 
   190   000FBA                     CCP2CON         equ	4026	;# 
   191   000FBB                     CCPR2           equ	4027	;# 
   192   000FBB                     CCPR2L          equ	4027	;# 
   193   000FBC                     CCPR2H          equ	4028	;# 
   194   000FBD                     CCP1CON         equ	4029	;# 
   195   000FBD                     ECCP1CON        equ	4029	;# 
   196   000FBE                     CCPR1           equ	4030	;# 
   197   000FBE                     CCPR1L          equ	4030	;# 
   198   000FBF                     CCPR1H          equ	4031	;# 
   199   000FC0                     ADCON2          equ	4032	;# 
   200   000FC1                     ADCON1          equ	4033	;# 
   201   000FC2                     ADCON0          equ	4034	;# 
   202   000FC3                     ADRES           equ	4035	;# 
   203   000FC3                     ADRESL          equ	4035	;# 
   204   000FC4                     ADRESH          equ	4036	;# 
   205   000FC5                     SSPCON2         equ	4037	;# 
   206   000FC6                     SSPCON1         equ	4038	;# 
   207   000FC7                     SSPSTAT         equ	4039	;# 
   208   000FC8                     SSPADD          equ	4040	;# 
   209   000FC9                     SSPBUF          equ	4041	;# 
   210   000FCA                     T2CON           equ	4042	;# 
   211   000FCB                     PR2             equ	4043	;# 
   212   000FCB                     MEMCON          equ	4043	;# 
   213   000FCC                     TMR2            equ	4044	;# 
   214   000FCD                     T1CON           equ	4045	;# 
   215   000FCE                     TMR1            equ	4046	;# 
   216   000FCE                     TMR1L           equ	4046	;# 
   217   000FCF                     TMR1H           equ	4047	;# 
   218   000FD0                     RCON            equ	4048	;# 
   219   000FD1                     WDTCON          equ	4049	;# 
   220   000FD2                     HLVDCON         equ	4050	;# 
   221   000FD2                     LVDCON          equ	4050	;# 
   222   000FD3                     OSCCON          equ	4051	;# 
   223   000FD5                     T0CON           equ	4053	;# 
   224   000FD6                     TMR0            equ	4054	;# 
   225   000FD6                     TMR0L           equ	4054	;# 
   226   000FD7                     TMR0H           equ	4055	;# 
   227   000FD8                     STATUS          equ	4056	;# 
   228   000FD9                     FSR2            equ	4057	;# 
   229   000FD9                     FSR2L           equ	4057	;# 
   230   000FDA                     FSR2H           equ	4058	;# 
   231   000FDB                     PLUSW2          equ	4059	;# 
   232   000FDC                     PREINC2         equ	4060	;# 
   233   000FDD                     POSTDEC2        equ	4061	;# 
   234   000FDE                     POSTINC2        equ	4062	;# 
   235   000FDF                     INDF2           equ	4063	;# 
   236   000FE0                     BSR             equ	4064	;# 
   237   000FE1                     FSR1            equ	4065	;# 
   238   000FE1                     FSR1L           equ	4065	;# 
   239   000FE2                     FSR1H           equ	4066	;# 
   240   000FE3                     PLUSW1          equ	4067	;# 
   241   000FE4                     PREINC1         equ	4068	;# 
   242   000FE5                     POSTDEC1        equ	4069	;# 
   243   000FE6                     POSTINC1        equ	4070	;# 
   244   000FE7                     INDF1           equ	4071	;# 
   245   000FE8                     WREG            equ	4072	;# 
   246   000FE9                     FSR0            equ	4073	;# 
   247   000FE9                     FSR0L           equ	4073	;# 
   248   000FEA                     FSR0H           equ	4074	;# 
   249   000FEB                     PLUSW0          equ	4075	;# 
   250   000FEC                     PREINC0         equ	4076	;# 
   251   000FED                     POSTDEC0        equ	4077	;# 
   252   000FEE                     POSTINC0        equ	4078	;# 
   253   000FEF                     INDF0           equ	4079	;# 
   254   000FF0                     INTCON3         equ	4080	;# 
   255   000FF1                     INTCON2         equ	4081	;# 
   256   000FF2                     INTCON          equ	4082	;# 
   257   000FF3                     PROD            equ	4083	;# 
   258   000FF3                     PRODL           equ	4083	;# 
   259   000FF4                     PRODH           equ	4084	;# 
   260   000FF5                     TABLAT          equ	4085	;# 
   261   000FF6                     TBLPTR          equ	4086	;# 
   262   000FF6                     TBLPTRL         equ	4086	;# 
   263   000FF7                     TBLPTRH         equ	4087	;# 
   264   000FF8                     TBLPTRU         equ	4088	;# 
   265   000FF9                     PCLAT           equ	4089	;# 
   266   000FF9                     PC              equ	4089	;# 
   267   000FF9                     PCL             equ	4089	;# 
   268   000FFA                     PCLATH          equ	4090	;# 
   269   000FFB                     PCLATU          equ	4091	;# 
   270   000FFC                     STKPTR          equ	4092	;# 
   271   000FFD                     TOS             equ	4093	;# 
   272   000FFD                     TOSL            equ	4093	;# 
   273   000FFE                     TOSH            equ	4094	;# 
   274   000FFF                     TOSU            equ	4095	;# 
   275   000F80                     PORTA           equ	3968	;# 
   276   000F81                     PORTB           equ	3969	;# 
   277   000F82                     PORTC           equ	3970	;# 
   278   000F83                     PORTD           equ	3971	;# 
   279   000F84                     PORTE           equ	3972	;# 
   280   000F89                     LATA            equ	3977	;# 
   281   000F8A                     LATB            equ	3978	;# 
   282   000F8B                     LATC            equ	3979	;# 
   283   000F8C                     LATD            equ	3980	;# 
   284   000F8D                     LATE            equ	3981	;# 
   285   000F92                     TRISA           equ	3986	;# 
   286   000F92                     DDRA            equ	3986	;# 
   287   000F93                     TRISB           equ	3987	;# 
   288   000F93                     DDRB            equ	3987	;# 
   289   000F94                     TRISC           equ	3988	;# 
   290   000F94                     DDRC            equ	3988	;# 
   291   000F95                     TRISD           equ	3989	;# 
   292   000F95                     DDRD            equ	3989	;# 
   293   000F96                     TRISE           equ	3990	;# 
   294   000F96                     DDRE            equ	3990	;# 
   295   000F9B                     OSCTUNE         equ	3995	;# 
   296   000F9D                     PIE1            equ	3997	;# 
   297   000F9E                     PIR1            equ	3998	;# 
   298   000F9F                     IPR1            equ	3999	;# 
   299   000FA0                     PIE2            equ	4000	;# 
   300   000FA1                     PIR2            equ	4001	;# 
   301   000FA2                     IPR2            equ	4002	;# 
   302   000FA6                     EECON1          equ	4006	;# 
   303   000FA7                     EECON2          equ	4007	;# 
   304   000FA8                     EEDATA          equ	4008	;# 
   305   000FA9                     EEADR           equ	4009	;# 
   306   000FAB                     RCSTA           equ	4011	;# 
   307   000FAB                     RCSTA1          equ	4011	;# 
   308   000FAC                     TXSTA           equ	4012	;# 
   309   000FAC                     TXSTA1          equ	4012	;# 
   310   000FAD                     TXREG           equ	4013	;# 
   311   000FAD                     TXREG1          equ	4013	;# 
   312   000FAE                     RCREG           equ	4014	;# 
   313   000FAE                     RCREG1          equ	4014	;# 
   314   000FAF                     SPBRG           equ	4015	;# 
   315   000FAF                     SPBRG1          equ	4015	;# 
   316   000FB0                     SPBRGH          equ	4016	;# 
   317   000FB1                     T3CON           equ	4017	;# 
   318   000FB2                     TMR3            equ	4018	;# 
   319   000FB2                     TMR3L           equ	4018	;# 
   320   000FB3                     TMR3H           equ	4019	;# 
   321   000FB4                     CMCON           equ	4020	;# 
   322   000FB5                     CVRCON          equ	4021	;# 
   323   000FB6                     ECCP1AS         equ	4022	;# 
   324   000FB7                     ECCP1DEL        equ	4023	;# 
   325   000FB7                     PWM1CON         equ	4023	;# 
   326   000FB8                     BAUDCON         equ	4024	;# 
   327   000FB8                     BAUDCTL         equ	4024	;# 
   328   000FBA                     CCP2CON         equ	4026	;# 
   329   000FBB                     CCPR2           equ	4027	;# 
   330   000FBB                     CCPR2L          equ	4027	;# 
   331   000FBC                     CCPR2H          equ	4028	;# 
   332   000FBD                     CCP1CON         equ	4029	;# 
   333   000FBD                     ECCP1CON        equ	4029	;# 
   334   000FBE                     CCPR1           equ	4030	;# 
   335   000FBE                     CCPR1L          equ	4030	;# 
   336   000FBF                     CCPR1H          equ	4031	;# 
   337   000FC0                     ADCON2          equ	4032	;# 
   338   000FC1                     ADCON1          equ	4033	;# 
   339   000FC2                     ADCON0          equ	4034	;# 
   340   000FC3                     ADRES           equ	4035	;# 
   341   000FC3                     ADRESL          equ	4035	;# 
   342   000FC4                     ADRESH          equ	4036	;# 
   343   000FC5                     SSPCON2         equ	4037	;# 
   344   000FC6                     SSPCON1         equ	4038	;# 
   345   000FC7                     SSPSTAT         equ	4039	;# 
   346   000FC8                     SSPADD          equ	4040	;# 
   347   000FC9                     SSPBUF          equ	4041	;# 
   348   000FCA                     T2CON           equ	4042	;# 
   349   000FCB                     PR2             equ	4043	;# 
   350   000FCB                     MEMCON          equ	4043	;# 
   351   000FCC                     TMR2            equ	4044	;# 
   352   000FCD                     T1CON           equ	4045	;# 
   353   000FCE                     TMR1            equ	4046	;# 
   354   000FCE                     TMR1L           equ	4046	;# 
   355   000FCF                     TMR1H           equ	4047	;# 
   356   000FD0                     RCON            equ	4048	;# 
   357   000FD1                     WDTCON          equ	4049	;# 
   358   000FD2                     HLVDCON         equ	4050	;# 
   359   000FD2                     LVDCON          equ	4050	;# 
   360   000FD3                     OSCCON          equ	4051	;# 
   361   000FD5                     T0CON           equ	4053	;# 
   362   000FD6                     TMR0            equ	4054	;# 
   363   000FD6                     TMR0L           equ	4054	;# 
   364   000FD7                     TMR0H           equ	4055	;# 
   365   000FD8                     STATUS          equ	4056	;# 
   366   000FD9                     FSR2            equ	4057	;# 
   367   000FD9                     FSR2L           equ	4057	;# 
   368   000FDA                     FSR2H           equ	4058	;# 
   369   000FDB                     PLUSW2          equ	4059	;# 
   370   000FDC                     PREINC2         equ	4060	;# 
   371   000FDD                     POSTDEC2        equ	4061	;# 
   372   000FDE                     POSTINC2        equ	4062	;# 
   373   000FDF                     INDF2           equ	4063	;# 
   374   000FE0                     BSR             equ	4064	;# 
   375   000FE1                     FSR1            equ	4065	;# 
   376   000FE1                     FSR1L           equ	4065	;# 
   377   000FE2                     FSR1H           equ	4066	;# 
   378   000FE3                     PLUSW1          equ	4067	;# 
   379   000FE4                     PREINC1         equ	4068	;# 
   380   000FE5                     POSTDEC1        equ	4069	;# 
   381   000FE6                     POSTINC1        equ	4070	;# 
   382   000FE7                     INDF1           equ	4071	;# 
   383   000FE8                     WREG            equ	4072	;# 
   384   000FE9                     FSR0            equ	4073	;# 
   385   000FE9                     FSR0L           equ	4073	;# 
   386   000FEA                     FSR0H           equ	4074	;# 
   387   000FEB                     PLUSW0          equ	4075	;# 
   388   000FEC                     PREINC0         equ	4076	;# 
   389   000FED                     POSTDEC0        equ	4077	;# 
   390   000FEE                     POSTINC0        equ	4078	;# 
   391   000FEF                     INDF0           equ	4079	;# 
   392   000FF0                     INTCON3         equ	4080	;# 
   393   000FF1                     INTCON2         equ	4081	;# 
   394   000FF2                     INTCON          equ	4082	;# 
   395   000FF3                     PROD            equ	4083	;# 
   396   000FF3                     PRODL           equ	4083	;# 
   397   000FF4                     PRODH           equ	4084	;# 
   398   000FF5                     TABLAT          equ	4085	;# 
   399   000FF6                     TBLPTR          equ	4086	;# 
   400   000FF6                     TBLPTRL         equ	4086	;# 
   401   000FF7                     TBLPTRH         equ	4087	;# 
   402   000FF8                     TBLPTRU         equ	4088	;# 
   403   000FF9                     PCLAT           equ	4089	;# 
   404   000FF9                     PC              equ	4089	;# 
   405   000FF9                     PCL             equ	4089	;# 
   406   000FFA                     PCLATH          equ	4090	;# 
   407   000FFB                     PCLATU          equ	4091	;# 
   408   000FFC                     STKPTR          equ	4092	;# 
   409   000FFD                     TOS             equ	4093	;# 
   410   000FFD                     TOSL            equ	4093	;# 
   411   000FFE                     TOSH            equ	4094	;# 
   412   000FFF                     TOSU            equ	4095	;# 
   413   000F80                     PORTA           equ	3968	;# 
   414   000F81                     PORTB           equ	3969	;# 
   415   000F82                     PORTC           equ	3970	;# 
   416   000F83                     PORTD           equ	3971	;# 
   417   000F84                     PORTE           equ	3972	;# 
   418   000F89                     LATA            equ	3977	;# 
   419   000F8A                     LATB            equ	3978	;# 
   420   000F8B                     LATC            equ	3979	;# 
   421   000F8C                     LATD            equ	3980	;# 
   422   000F8D                     LATE            equ	3981	;# 
   423   000F92                     TRISA           equ	3986	;# 
   424   000F92                     DDRA            equ	3986	;# 
   425   000F93                     TRISB           equ	3987	;# 
   426   000F93                     DDRB            equ	3987	;# 
   427   000F94                     TRISC           equ	3988	;# 
   428   000F94                     DDRC            equ	3988	;# 
   429   000F95                     TRISD           equ	3989	;# 
   430   000F95                     DDRD            equ	3989	;# 
   431   000F96                     TRISE           equ	3990	;# 
   432   000F96                     DDRE            equ	3990	;# 
   433   000F9B                     OSCTUNE         equ	3995	;# 
   434   000F9D                     PIE1            equ	3997	;# 
   435   000F9E                     PIR1            equ	3998	;# 
   436   000F9F                     IPR1            equ	3999	;# 
   437   000FA0                     PIE2            equ	4000	;# 
   438   000FA1                     PIR2            equ	4001	;# 
   439   000FA2                     IPR2            equ	4002	;# 
   440   000FA6                     EECON1          equ	4006	;# 
   441   000FA7                     EECON2          equ	4007	;# 
   442   000FA8                     EEDATA          equ	4008	;# 
   443   000FA9                     EEADR           equ	4009	;# 
   444   000FAB                     RCSTA           equ	4011	;# 
   445   000FAB                     RCSTA1          equ	4011	;# 
   446   000FAC                     TXSTA           equ	4012	;# 
   447   000FAC                     TXSTA1          equ	4012	;# 
   448   000FAD                     TXREG           equ	4013	;# 
   449   000FAD                     TXREG1          equ	4013	;# 
   450   000FAE                     RCREG           equ	4014	;# 
   451   000FAE                     RCREG1          equ	4014	;# 
   452   000FAF                     SPBRG           equ	4015	;# 
   453   000FAF                     SPBRG1          equ	4015	;# 
   454   000FB0                     SPBRGH          equ	4016	;# 
   455   000FB1                     T3CON           equ	4017	;# 
   456   000FB2                     TMR3            equ	4018	;# 
   457   000FB2                     TMR3L           equ	4018	;# 
   458   000FB3                     TMR3H           equ	4019	;# 
   459   000FB4                     CMCON           equ	4020	;# 
   460   000FB5                     CVRCON          equ	4021	;# 
   461   000FB6                     ECCP1AS         equ	4022	;# 
   462   000FB7                     ECCP1DEL        equ	4023	;# 
   463   000FB7                     PWM1CON         equ	4023	;# 
   464   000FB8                     BAUDCON         equ	4024	;# 
   465   000FB8                     BAUDCTL         equ	4024	;# 
   466   000FBA                     CCP2CON         equ	4026	;# 
   467   000FBB                     CCPR2           equ	4027	;# 
   468   000FBB                     CCPR2L          equ	4027	;# 
   469   000FBC                     CCPR2H          equ	4028	;# 
   470   000FBD                     CCP1CON         equ	4029	;# 
   471   000FBD                     ECCP1CON        equ	4029	;# 
   472   000FBE                     CCPR1           equ	4030	;# 
   473   000FBE                     CCPR1L          equ	4030	;# 
   474   000FBF                     CCPR1H          equ	4031	;# 
   475   000FC0                     ADCON2          equ	4032	;# 
   476   000FC1                     ADCON1          equ	4033	;# 
   477   000FC2                     ADCON0          equ	4034	;# 
   478   000FC3                     ADRES           equ	4035	;# 
   479   000FC3                     ADRESL          equ	4035	;# 
   480   000FC4                     ADRESH          equ	4036	;# 
   481   000FC5                     SSPCON2         equ	4037	;# 
   482   000FC6                     SSPCON1         equ	4038	;# 
   483   000FC7                     SSPSTAT         equ	4039	;# 
   484   000FC8                     SSPADD          equ	4040	;# 
   485   000FC9                     SSPBUF          equ	4041	;# 
   486   000FCA                     T2CON           equ	4042	;# 
   487   000FCB                     PR2             equ	4043	;# 
   488   000FCB                     MEMCON          equ	4043	;# 
   489   000FCC                     TMR2            equ	4044	;# 
   490   000FCD                     T1CON           equ	4045	;# 
   491   000FCE                     TMR1            equ	4046	;# 
   492   000FCE                     TMR1L           equ	4046	;# 
   493   000FCF                     TMR1H           equ	4047	;# 
   494   000FD0                     RCON            equ	4048	;# 
   495   000FD1                     WDTCON          equ	4049	;# 
   496   000FD2                     HLVDCON         equ	4050	;# 
   497   000FD2                     LVDCON          equ	4050	;# 
   498   000FD3                     OSCCON          equ	4051	;# 
   499   000FD5                     T0CON           equ	4053	;# 
   500   000FD6                     TMR0            equ	4054	;# 
   501   000FD6                     TMR0L           equ	4054	;# 
   502   000FD7                     TMR0H           equ	4055	;# 
   503   000FD8                     STATUS          equ	4056	;# 
   504   000FD9                     FSR2            equ	4057	;# 
   505   000FD9                     FSR2L           equ	4057	;# 
   506   000FDA                     FSR2H           equ	4058	;# 
   507   000FDB                     PLUSW2          equ	4059	;# 
   508   000FDC                     PREINC2         equ	4060	;# 
   509   000FDD                     POSTDEC2        equ	4061	;# 
   510   000FDE                     POSTINC2        equ	4062	;# 
   511   000FDF                     INDF2           equ	4063	;# 
   512   000FE0                     BSR             equ	4064	;# 
   513   000FE1                     FSR1            equ	4065	;# 
   514   000FE1                     FSR1L           equ	4065	;# 
   515   000FE2                     FSR1H           equ	4066	;# 
   516   000FE3                     PLUSW1          equ	4067	;# 
   517   000FE4                     PREINC1         equ	4068	;# 
   518   000FE5                     POSTDEC1        equ	4069	;# 
   519   000FE6                     POSTINC1        equ	4070	;# 
   520   000FE7                     INDF1           equ	4071	;# 
   521   000FE8                     WREG            equ	4072	;# 
   522   000FE9                     FSR0            equ	4073	;# 
   523   000FE9                     FSR0L           equ	4073	;# 
   524   000FEA                     FSR0H           equ	4074	;# 
   525   000FEB                     PLUSW0          equ	4075	;# 
   526   000FEC                     PREINC0         equ	4076	;# 
   527   000FED                     POSTDEC0        equ	4077	;# 
   528   000FEE                     POSTINC0        equ	4078	;# 
   529   000FEF                     INDF0           equ	4079	;# 
   530   000FF0                     INTCON3         equ	4080	;# 
   531   000FF1                     INTCON2         equ	4081	;# 
   532   000FF2                     INTCON          equ	4082	;# 
   533   000FF3                     PROD            equ	4083	;# 
   534   000FF3                     PRODL           equ	4083	;# 
   535   000FF4                     PRODH           equ	4084	;# 
   536   000FF5                     TABLAT          equ	4085	;# 
   537   000FF6                     TBLPTR          equ	4086	;# 
   538   000FF6                     TBLPTRL         equ	4086	;# 
   539   000FF7                     TBLPTRH         equ	4087	;# 
   540   000FF8                     TBLPTRU         equ	4088	;# 
   541   000FF9                     PCLAT           equ	4089	;# 
   542   000FF9                     PC              equ	4089	;# 
   543   000FF9                     PCL             equ	4089	;# 
   544   000FFA                     PCLATH          equ	4090	;# 
   545   000FFB                     PCLATU          equ	4091	;# 
   546   000FFC                     STKPTR          equ	4092	;# 
   547   000FFD                     TOS             equ	4093	;# 
   548   000FFD                     TOSL            equ	4093	;# 
   549   000FFE                     TOSH            equ	4094	;# 
   550   000FFF                     TOSU            equ	4095	;# 
   551   000F80                     PORTA           equ	3968	;# 
   552   000F81                     PORTB           equ	3969	;# 
   553   000F82                     PORTC           equ	3970	;# 
   554   000F83                     PORTD           equ	3971	;# 
   555   000F84                     PORTE           equ	3972	;# 
   556   000F89                     LATA            equ	3977	;# 
   557   000F8A                     LATB            equ	3978	;# 
   558   000F8B                     LATC            equ	3979	;# 
   559   000F8C                     LATD            equ	3980	;# 
   560   000F8D                     LATE            equ	3981	;# 
   561   000F92                     TRISA           equ	3986	;# 
   562   000F92                     DDRA            equ	3986	;# 
   563   000F93                     TRISB           equ	3987	;# 
   564   000F93                     DDRB            equ	3987	;# 
   565   000F94                     TRISC           equ	3988	;# 
   566   000F94                     DDRC            equ	3988	;# 
   567   000F95                     TRISD           equ	3989	;# 
   568   000F95                     DDRD            equ	3989	;# 
   569   000F96                     TRISE           equ	3990	;# 
   570   000F96                     DDRE            equ	3990	;# 
   571   000F9B                     OSCTUNE         equ	3995	;# 
   572   000F9D                     PIE1            equ	3997	;# 
   573   000F9E                     PIR1            equ	3998	;# 
   574   000F9F                     IPR1            equ	3999	;# 
   575   000FA0                     PIE2            equ	4000	;# 
   576   000FA1                     PIR2            equ	4001	;# 
   577   000FA2                     IPR2            equ	4002	;# 
   578   000FA6                     EECON1          equ	4006	;# 
   579   000FA7                     EECON2          equ	4007	;# 
   580   000FA8                     EEDATA          equ	4008	;# 
   581   000FA9                     EEADR           equ	4009	;# 
   582   000FAB                     RCSTA           equ	4011	;# 
   583   000FAB                     RCSTA1          equ	4011	;# 
   584   000FAC                     TXSTA           equ	4012	;# 
   585   000FAC                     TXSTA1          equ	4012	;# 
   586   000FAD                     TXREG           equ	4013	;# 
   587   000FAD                     TXREG1          equ	4013	;# 
   588   000FAE                     RCREG           equ	4014	;# 
   589   000FAE                     RCREG1          equ	4014	;# 
   590   000FAF                     SPBRG           equ	4015	;# 
   591   000FAF                     SPBRG1          equ	4015	;# 
   592   000FB0                     SPBRGH          equ	4016	;# 
   593   000FB1                     T3CON           equ	4017	;# 
   594   000FB2                     TMR3            equ	4018	;# 
   595   000FB2                     TMR3L           equ	4018	;# 
   596   000FB3                     TMR3H           equ	4019	;# 
   597   000FB4                     CMCON           equ	4020	;# 
   598   000FB5                     CVRCON          equ	4021	;# 
   599   000FB6                     ECCP1AS         equ	4022	;# 
   600   000FB7                     ECCP1DEL        equ	4023	;# 
   601   000FB7                     PWM1CON         equ	4023	;# 
   602   000FB8                     BAUDCON         equ	4024	;# 
   603   000FB8                     BAUDCTL         equ	4024	;# 
   604   000FBA                     CCP2CON         equ	4026	;# 
   605   000FBB                     CCPR2           equ	4027	;# 
   606   000FBB                     CCPR2L          equ	4027	;# 
   607   000FBC                     CCPR2H          equ	4028	;# 
   608   000FBD                     CCP1CON         equ	4029	;# 
   609   000FBD                     ECCP1CON        equ	4029	;# 
   610   000FBE                     CCPR1           equ	4030	;# 
   611   000FBE                     CCPR1L          equ	4030	;# 
   612   000FBF                     CCPR1H          equ	4031	;# 
   613   000FC0                     ADCON2          equ	4032	;# 
   614   000FC1                     ADCON1          equ	4033	;# 
   615   000FC2                     ADCON0          equ	4034	;# 
   616   000FC3                     ADRES           equ	4035	;# 
   617   000FC3                     ADRESL          equ	4035	;# 
   618   000FC4                     ADRESH          equ	4036	;# 
   619   000FC5                     SSPCON2         equ	4037	;# 
   620   000FC6                     SSPCON1         equ	4038	;# 
   621   000FC7                     SSPSTAT         equ	4039	;# 
   622   000FC8                     SSPADD          equ	4040	;# 
   623   000FC9                     SSPBUF          equ	4041	;# 
   624   000FCA                     T2CON           equ	4042	;# 
   625   000FCB                     PR2             equ	4043	;# 
   626   000FCB                     MEMCON          equ	4043	;# 
   627   000FCC                     TMR2            equ	4044	;# 
   628   000FCD                     T1CON           equ	4045	;# 
   629   000FCE                     TMR1            equ	4046	;# 
   630   000FCE                     TMR1L           equ	4046	;# 
   631   000FCF                     TMR1H           equ	4047	;# 
   632   000FD0                     RCON            equ	4048	;# 
   633   000FD1                     WDTCON          equ	4049	;# 
   634   000FD2                     HLVDCON         equ	4050	;# 
   635   000FD2                     LVDCON          equ	4050	;# 
   636   000FD3                     OSCCON          equ	4051	;# 
   637   000FD5                     T0CON           equ	4053	;# 
   638   000FD6                     TMR0            equ	4054	;# 
   639   000FD6                     TMR0L           equ	4054	;# 
   640   000FD7                     TMR0H           equ	4055	;# 
   641   000FD8                     STATUS          equ	4056	;# 
   642   000FD9                     FSR2            equ	4057	;# 
   643   000FD9                     FSR2L           equ	4057	;# 
   644   000FDA                     FSR2H           equ	4058	;# 
   645   000FDB                     PLUSW2          equ	4059	;# 
   646   000FDC                     PREINC2         equ	4060	;# 
   647   000FDD                     POSTDEC2        equ	4061	;# 
   648   000FDE                     POSTINC2        equ	4062	;# 
   649   000FDF                     INDF2           equ	4063	;# 
   650   000FE0                     BSR             equ	4064	;# 
   651   000FE1                     FSR1            equ	4065	;# 
   652   000FE1                     FSR1L           equ	4065	;# 
   653   000FE2                     FSR1H           equ	4066	;# 
   654   000FE3                     PLUSW1          equ	4067	;# 
   655   000FE4                     PREINC1         equ	4068	;# 
   656   000FE5                     POSTDEC1        equ	4069	;# 
   657   000FE6                     POSTINC1        equ	4070	;# 
   658   000FE7                     INDF1           equ	4071	;# 
   659   000FE8                     WREG            equ	4072	;# 
   660   000FE9                     FSR0            equ	4073	;# 
   661   000FE9                     FSR0L           equ	4073	;# 
   662   000FEA                     FSR0H           equ	4074	;# 
   663   000FEB                     PLUSW0          equ	4075	;# 
   664   000FEC                     PREINC0         equ	4076	;# 
   665   000FED                     POSTDEC0        equ	4077	;# 
   666   000FEE                     POSTINC0        equ	4078	;# 
   667   000FEF                     INDF0           equ	4079	;# 
   668   000FF0                     INTCON3         equ	4080	;# 
   669   000FF1                     INTCON2         equ	4081	;# 
   670   000FF2                     INTCON          equ	4082	;# 
   671   000FF3                     PROD            equ	4083	;# 
   672   000FF3                     PRODL           equ	4083	;# 
   673   000FF4                     PRODH           equ	4084	;# 
   674   000FF5                     TABLAT          equ	4085	;# 
   675   000FF6                     TBLPTR          equ	4086	;# 
   676   000FF6                     TBLPTRL         equ	4086	;# 
   677   000FF7                     TBLPTRH         equ	4087	;# 
   678   000FF8                     TBLPTRU         equ	4088	;# 
   679   000FF9                     PCLAT           equ	4089	;# 
   680   000FF9                     PC              equ	4089	;# 
   681   000FF9                     PCL             equ	4089	;# 
   682   000FFA                     PCLATH          equ	4090	;# 
   683   000FFB                     PCLATU          equ	4091	;# 
   684   000FFC                     STKPTR          equ	4092	;# 
   685   000FFD                     TOS             equ	4093	;# 
   686   000FFD                     TOSL            equ	4093	;# 
   687   000FFE                     TOSH            equ	4094	;# 
   688   000FFF                     TOSU            equ	4095	;# 
   689   000F80                     PORTA           equ	3968	;# 
   690   000F81                     PORTB           equ	3969	;# 
   691   000F82                     PORTC           equ	3970	;# 
   692   000F83                     PORTD           equ	3971	;# 
   693   000F84                     PORTE           equ	3972	;# 
   694   000F89                     LATA            equ	3977	;# 
   695   000F8A                     LATB            equ	3978	;# 
   696   000F8B                     LATC            equ	3979	;# 
   697   000F8C                     LATD            equ	3980	;# 
   698   000F8D                     LATE            equ	3981	;# 
   699   000F92                     TRISA           equ	3986	;# 
   700   000F92                     DDRA            equ	3986	;# 
   701   000F93                     TRISB           equ	3987	;# 
   702   000F93                     DDRB            equ	3987	;# 
   703   000F94                     TRISC           equ	3988	;# 
   704   000F94                     DDRC            equ	3988	;# 
   705   000F95                     TRISD           equ	3989	;# 
   706   000F95                     DDRD            equ	3989	;# 
   707   000F96                     TRISE           equ	3990	;# 
   708   000F96                     DDRE            equ	3990	;# 
   709   000F9B                     OSCTUNE         equ	3995	;# 
   710   000F9D                     PIE1            equ	3997	;# 
   711   000F9E                     PIR1            equ	3998	;# 
   712   000F9F                     IPR1            equ	3999	;# 
   713   000FA0                     PIE2            equ	4000	;# 
   714   000FA1                     PIR2            equ	4001	;# 
   715   000FA2                     IPR2            equ	4002	;# 
   716   000FA6                     EECON1          equ	4006	;# 
   717   000FA7                     EECON2          equ	4007	;# 
   718   000FA8                     EEDATA          equ	4008	;# 
   719   000FA9                     EEADR           equ	4009	;# 
   720   000FAB                     RCSTA           equ	4011	;# 
   721   000FAB                     RCSTA1          equ	4011	;# 
   722   000FAC                     TXSTA           equ	4012	;# 
   723   000FAC                     TXSTA1          equ	4012	;# 
   724   000FAD                     TXREG           equ	4013	;# 
   725   000FAD                     TXREG1          equ	4013	;# 
   726   000FAE                     RCREG           equ	4014	;# 
   727   000FAE                     RCREG1          equ	4014	;# 
   728   000FAF                     SPBRG           equ	4015	;# 
   729   000FAF                     SPBRG1          equ	4015	;# 
   730   000FB0                     SPBRGH          equ	4016	;# 
   731   000FB1                     T3CON           equ	4017	;# 
   732   000FB2                     TMR3            equ	4018	;# 
   733   000FB2                     TMR3L           equ	4018	;# 
   734   000FB3                     TMR3H           equ	4019	;# 
   735   000FB4                     CMCON           equ	4020	;# 
   736   000FB5                     CVRCON          equ	4021	;# 
   737   000FB6                     ECCP1AS         equ	4022	;# 
   738   000FB7                     ECCP1DEL        equ	4023	;# 
   739   000FB7                     PWM1CON         equ	4023	;# 
   740   000FB8                     BAUDCON         equ	4024	;# 
   741   000FB8                     BAUDCTL         equ	4024	;# 
   742   000FBA                     CCP2CON         equ	4026	;# 
   743   000FBB                     CCPR2           equ	4027	;# 
   744   000FBB                     CCPR2L          equ	4027	;# 
   745   000FBC                     CCPR2H          equ	4028	;# 
   746   000FBD                     CCP1CON         equ	4029	;# 
   747   000FBD                     ECCP1CON        equ	4029	;# 
   748   000FBE                     CCPR1           equ	4030	;# 
   749   000FBE                     CCPR1L          equ	4030	;# 
   750   000FBF                     CCPR1H          equ	4031	;# 
   751   000FC0                     ADCON2          equ	4032	;# 
   752   000FC1                     ADCON1          equ	4033	;# 
   753   000FC2                     ADCON0          equ	4034	;# 
   754   000FC3                     ADRES           equ	4035	;# 
   755   000FC3                     ADRESL          equ	4035	;# 
   756   000FC4                     ADRESH          equ	4036	;# 
   757   000FC5                     SSPCON2         equ	4037	;# 
   758   000FC6                     SSPCON1         equ	4038	;# 
   759   000FC7                     SSPSTAT         equ	4039	;# 
   760   000FC8                     SSPADD          equ	4040	;# 
   761   000FC9                     SSPBUF          equ	4041	;# 
   762   000FCA                     T2CON           equ	4042	;# 
   763   000FCB                     PR2             equ	4043	;# 
   764   000FCB                     MEMCON          equ	4043	;# 
   765   000FCC                     TMR2            equ	4044	;# 
   766   000FCD                     T1CON           equ	4045	;# 
   767   000FCE                     TMR1            equ	4046	;# 
   768   000FCE                     TMR1L           equ	4046	;# 
   769   000FCF                     TMR1H           equ	4047	;# 
   770   000FD0                     RCON            equ	4048	;# 
   771   000FD1                     WDTCON          equ	4049	;# 
   772   000FD2                     HLVDCON         equ	4050	;# 
   773   000FD2                     LVDCON          equ	4050	;# 
   774   000FD3                     OSCCON          equ	4051	;# 
   775   000FD5                     T0CON           equ	4053	;# 
   776   000FD6                     TMR0            equ	4054	;# 
   777   000FD6                     TMR0L           equ	4054	;# 
   778   000FD7                     TMR0H           equ	4055	;# 
   779   000FD8                     STATUS          equ	4056	;# 
   780   000FD9                     FSR2            equ	4057	;# 
   781   000FD9                     FSR2L           equ	4057	;# 
   782   000FDA                     FSR2H           equ	4058	;# 
   783   000FDB                     PLUSW2          equ	4059	;# 
   784   000FDC                     PREINC2         equ	4060	;# 
   785   000FDD                     POSTDEC2        equ	4061	;# 
   786   000FDE                     POSTINC2        equ	4062	;# 
   787   000FDF                     INDF2           equ	4063	;# 
   788   000FE0                     BSR             equ	4064	;# 
   789   000FE1                     FSR1            equ	4065	;# 
   790   000FE1                     FSR1L           equ	4065	;# 
   791   000FE2                     FSR1H           equ	4066	;# 
   792   000FE3                     PLUSW1          equ	4067	;# 
   793   000FE4                     PREINC1         equ	4068	;# 
   794   000FE5                     POSTDEC1        equ	4069	;# 
   795   000FE6                     POSTINC1        equ	4070	;# 
   796   000FE7                     INDF1           equ	4071	;# 
   797   000FE8                     WREG            equ	4072	;# 
   798   000FE9                     FSR0            equ	4073	;# 
   799   000FE9                     FSR0L           equ	4073	;# 
   800   000FEA                     FSR0H           equ	4074	;# 
   801   000FEB                     PLUSW0          equ	4075	;# 
   802   000FEC                     PREINC0         equ	4076	;# 
   803   000FED                     POSTDEC0        equ	4077	;# 
   804   000FEE                     POSTINC0        equ	4078	;# 
   805   000FEF                     INDF0           equ	4079	;# 
   806   000FF0                     INTCON3         equ	4080	;# 
   807   000FF1                     INTCON2         equ	4081	;# 
   808   000FF2                     INTCON          equ	4082	;# 
   809   000FF3                     PROD            equ	4083	;# 
   810   000FF3                     PRODL           equ	4083	;# 
   811   000FF4                     PRODH           equ	4084	;# 
   812   000FF5                     TABLAT          equ	4085	;# 
   813   000FF6                     TBLPTR          equ	4086	;# 
   814   000FF6                     TBLPTRL         equ	4086	;# 
   815   000FF7                     TBLPTRH         equ	4087	;# 
   816   000FF8                     TBLPTRU         equ	4088	;# 
   817   000FF9                     PCLAT           equ	4089	;# 
   818   000FF9                     PC              equ	4089	;# 
   819   000FF9                     PCL             equ	4089	;# 
   820   000FFA                     PCLATH          equ	4090	;# 
   821   000FFB                     PCLATU          equ	4091	;# 
   822   000FFC                     STKPTR          equ	4092	;# 
   823   000FFD                     TOS             equ	4093	;# 
   824   000FFD                     TOSL            equ	4093	;# 
   825   000FFE                     TOSH            equ	4094	;# 
   826   000FFF                     TOSU            equ	4095	;# 
   827   000F80                     PORTA           equ	3968	;# 
   828   000F81                     PORTB           equ	3969	;# 
   829   000F82                     PORTC           equ	3970	;# 
   830   000F83                     PORTD           equ	3971	;# 
   831   000F84                     PORTE           equ	3972	;# 
   832   000F89                     LATA            equ	3977	;# 
   833   000F8A                     LATB            equ	3978	;# 
   834   000F8B                     LATC            equ	3979	;# 
   835   000F8C                     LATD            equ	3980	;# 
   836   000F8D                     LATE            equ	3981	;# 
   837   000F92                     TRISA           equ	3986	;# 
   838   000F92                     DDRA            equ	3986	;# 
   839   000F93                     TRISB           equ	3987	;# 
   840   000F93                     DDRB            equ	3987	;# 
   841   000F94                     TRISC           equ	3988	;# 
   842   000F94                     DDRC            equ	3988	;# 
   843   000F95                     TRISD           equ	3989	;# 
   844   000F95                     DDRD            equ	3989	;# 
   845   000F96                     TRISE           equ	3990	;# 
   846   000F96                     DDRE            equ	3990	;# 
   847   000F9B                     OSCTUNE         equ	3995	;# 
   848   000F9D                     PIE1            equ	3997	;# 
   849   000F9E                     PIR1            equ	3998	;# 
   850   000F9F                     IPR1            equ	3999	;# 
   851   000FA0                     PIE2            equ	4000	;# 
   852   000FA1                     PIR2            equ	4001	;# 
   853   000FA2                     IPR2            equ	4002	;# 
   854   000FA6                     EECON1          equ	4006	;# 
   855   000FA7                     EECON2          equ	4007	;# 
   856   000FA8                     EEDATA          equ	4008	;# 
   857   000FA9                     EEADR           equ	4009	;# 
   858   000FAB                     RCSTA           equ	4011	;# 
   859   000FAB                     RCSTA1          equ	4011	;# 
   860   000FAC                     TXSTA           equ	4012	;# 
   861   000FAC                     TXSTA1          equ	4012	;# 
   862   000FAD                     TXREG           equ	4013	;# 
   863   000FAD                     TXREG1          equ	4013	;# 
   864   000FAE                     RCREG           equ	4014	;# 
   865   000FAE                     RCREG1          equ	4014	;# 
   866   000FAF                     SPBRG           equ	4015	;# 
   867   000FAF                     SPBRG1          equ	4015	;# 
   868   000FB0                     SPBRGH          equ	4016	;# 
   869   000FB1                     T3CON           equ	4017	;# 
   870   000FB2                     TMR3            equ	4018	;# 
   871   000FB2                     TMR3L           equ	4018	;# 
   872   000FB3                     TMR3H           equ	4019	;# 
   873   000FB4                     CMCON           equ	4020	;# 
   874   000FB5                     CVRCON          equ	4021	;# 
   875   000FB6                     ECCP1AS         equ	4022	;# 
   876   000FB7                     ECCP1DEL        equ	4023	;# 
   877   000FB7                     PWM1CON         equ	4023	;# 
   878   000FB8                     BAUDCON         equ	4024	;# 
   879   000FB8                     BAUDCTL         equ	4024	;# 
   880   000FBA                     CCP2CON         equ	4026	;# 
   881   000FBB                     CCPR2           equ	4027	;# 
   882   000FBB                     CCPR2L          equ	4027	;# 
   883   000FBC                     CCPR2H          equ	4028	;# 
   884   000FBD                     CCP1CON         equ	4029	;# 
   885   000FBD                     ECCP1CON        equ	4029	;# 
   886   000FBE                     CCPR1           equ	4030	;# 
   887   000FBE                     CCPR1L          equ	4030	;# 
   888   000FBF                     CCPR1H          equ	4031	;# 
   889   000FC0                     ADCON2          equ	4032	;# 
   890   000FC1                     ADCON1          equ	4033	;# 
   891   000FC2                     ADCON0          equ	4034	;# 
   892   000FC3                     ADRES           equ	4035	;# 
   893   000FC3                     ADRESL          equ	4035	;# 
   894   000FC4                     ADRESH          equ	4036	;# 
   895   000FC5                     SSPCON2         equ	4037	;# 
   896   000FC6                     SSPCON1         equ	4038	;# 
   897   000FC7                     SSPSTAT         equ	4039	;# 
   898   000FC8                     SSPADD          equ	4040	;# 
   899   000FC9                     SSPBUF          equ	4041	;# 
   900   000FCA                     T2CON           equ	4042	;# 
   901   000FCB                     PR2             equ	4043	;# 
   902   000FCB                     MEMCON          equ	4043	;# 
   903   000FCC                     TMR2            equ	4044	;# 
   904   000FCD                     T1CON           equ	4045	;# 
   905   000FCE                     TMR1            equ	4046	;# 
   906   000FCE                     TMR1L           equ	4046	;# 
   907   000FCF                     TMR1H           equ	4047	;# 
   908   000FD0                     RCON            equ	4048	;# 
   909   000FD1                     WDTCON          equ	4049	;# 
   910   000FD2                     HLVDCON         equ	4050	;# 
   911   000FD2                     LVDCON          equ	4050	;# 
   912   000FD3                     OSCCON          equ	4051	;# 
   913   000FD5                     T0CON           equ	4053	;# 
   914   000FD6                     TMR0            equ	4054	;# 
   915   000FD6                     TMR0L           equ	4054	;# 
   916   000FD7                     TMR0H           equ	4055	;# 
   917   000FD8                     STATUS          equ	4056	;# 
   918   000FD9                     FSR2            equ	4057	;# 
   919   000FD9                     FSR2L           equ	4057	;# 
   920   000FDA                     FSR2H           equ	4058	;# 
   921   000FDB                     PLUSW2          equ	4059	;# 
   922   000FDC                     PREINC2         equ	4060	;# 
   923   000FDD                     POSTDEC2        equ	4061	;# 
   924   000FDE                     POSTINC2        equ	4062	;# 
   925   000FDF                     INDF2           equ	4063	;# 
   926   000FE0                     BSR             equ	4064	;# 
   927   000FE1                     FSR1            equ	4065	;# 
   928   000FE1                     FSR1L           equ	4065	;# 
   929   000FE2                     FSR1H           equ	4066	;# 
   930   000FE3                     PLUSW1          equ	4067	;# 
   931   000FE4                     PREINC1         equ	4068	;# 
   932   000FE5                     POSTDEC1        equ	4069	;# 
   933   000FE6                     POSTINC1        equ	4070	;# 
   934   000FE7                     INDF1           equ	4071	;# 
   935   000FE8                     WREG            equ	4072	;# 
   936   000FE9                     FSR0            equ	4073	;# 
   937   000FE9                     FSR0L           equ	4073	;# 
   938   000FEA                     FSR0H           equ	4074	;# 
   939   000FEB                     PLUSW0          equ	4075	;# 
   940   000FEC                     PREINC0         equ	4076	;# 
   941   000FED                     POSTDEC0        equ	4077	;# 
   942   000FEE                     POSTINC0        equ	4078	;# 
   943   000FEF                     INDF0           equ	4079	;# 
   944   000FF0                     INTCON3         equ	4080	;# 
   945   000FF1                     INTCON2         equ	4081	;# 
   946   000FF2                     INTCON          equ	4082	;# 
   947   000FF3                     PROD            equ	4083	;# 
   948   000FF3                     PRODL           equ	4083	;# 
   949   000FF4                     PRODH           equ	4084	;# 
   950   000FF5                     TABLAT          equ	4085	;# 
   951   000FF6                     TBLPTR          equ	4086	;# 
   952   000FF6                     TBLPTRL         equ	4086	;# 
   953   000FF7                     TBLPTRH         equ	4087	;# 
   954   000FF8                     TBLPTRU         equ	4088	;# 
   955   000FF9                     PCLAT           equ	4089	;# 
   956   000FF9                     PC              equ	4089	;# 
   957   000FF9                     PCL             equ	4089	;# 
   958   000FFA                     PCLATH          equ	4090	;# 
   959   000FFB                     PCLATU          equ	4091	;# 
   960   000FFC                     STKPTR          equ	4092	;# 
   961   000FFD                     TOS             equ	4093	;# 
   962   000FFD                     TOSL            equ	4093	;# 
   963   000FFE                     TOSH            equ	4094	;# 
   964   000FFF                     TOSU            equ	4095	;# 
   965                           
   966                           	psect	mediumconst
   967   001EFC                     __pmediumconst:
   968                           	callstack 0
   969   001EFC  00                 	db	0
   970   001EFD                     GetTecla@F3223:
   971                           	callstack 0
   972   001EFD  01                 	db	1
   973   001EFE  02                 	db	2
   974   001EFF  03                 	db	3
   975   001F00  04                 	db	4
   976   001F01  05                 	db	5
   977   001F02  06                 	db	6
   978   001F03  07                 	db	7
   979   001F04  08                 	db	8
   980   001F05  09                 	db	9
   981   001F06  0A                 	db	10
   982   001F07  00                 	db	0
   983   001F08  0B                 	db	11
   984   001F09                     __end_ofGetTecla@F3223:
   985                           	callstack 0
   986   007F92                     _TMR0IF         set	32658
   987   000FD6                     _TMR0           set	4054
   988   000FAE                     _RCREG          set	4014
   989   000FAD                     _TXREG          set	4013
   990   000F9E                     _PIR1bits       set	3998
   991   000FB8                     _BAUDCON        set	4024
   992   000FAF                     _SPBRG          set	4015
   993   000FAB                     _RCSTA          set	4011
   994   000FAC                     _TXSTA          set	4012
   995   000F81                     _PORTBbits      set	3969
   996   000F8A                     _LATBbits       set	3978
   997   000F93                     _TRISBbits      set	3987
   998   000F82                     _PORTCbits      set	3970
   999   000F8B                     _LATCbits       set	3979
  1000   000F94                     _TRISCbits      set	3988
  1001   000F8C                     _LATD           set	3980
  1002   000F95                     _TRISD          set	3989
  1003   000F83                     _PORTD          set	3971
  1004   000FD5                     _T0CON          set	4053
  1005   000F8B                     _LATC           set	3979
  1006   000FF2                     _INTCONbits     set	4082
  1007   001F09                     STR_15:
  1008   001F09  45                 	db	69	;'E'
  1009   001F0A  52                 	db	82	;'R'
  1010   001F0B  52                 	db	82	;'R'
  1011   001F0C  4F                 	db	79	;'O'
  1012   001F0D  52                 	db	82	;'R'
  1013   001F0E  2E                 	db	46
  1014   001F0F  20                 	db	32
  1015   001F10  56                 	db	86	;'V'
  1016   001F11  61                 	db	97	;'a'
  1017   001F12  6C                 	db	108	;'l'
  1018   001F13  6F                 	db	111	;'o'
  1019   001F14  72                 	db	114	;'r'
  1020   001F15  20                 	db	32
  1021   001F16  69                 	db	105	;'i'
  1022   001F17  6E                 	db	110	;'n'
  1023   001F18  74                 	db	116	;'t'
  1024   001F19  72                 	db	114	;'r'
  1025   001F1A  6F                 	db	111	;'o'
  1026   001F1B  64                 	db	100	;'d'
  1027   001F1C  75                 	db	117	;'u'
  1028   001F1D  69                 	db	105	;'i'
  1029   001F1E  74                 	db	116	;'t'
  1030   001F1F  20                 	db	32
  1031   001F20  65                 	db	101	;'e'
  1032   001F21  72                 	db	114	;'r'
  1033   001F22  72                 	db	114	;'r'
  1034   001F23  6F                 	db	111	;'o'
  1035   001F24  6E                 	db	110	;'n'
  1036   001F25  69                 	db	105	;'i'
  1037   001F26  2E                 	db	46
  1038   001F27  0D                 	db	13
  1039   001F28  0A                 	db	10
  1040   001F29  00                 	db	0
  1041   001F2A                     STR_10:
  1042   001F2A  09                 	db	9
  1043   001F2B  33                 	db	51	;'3'
  1044   001F2C  2E                 	db	46
  1045   001F2D  20                 	db	32
  1046   001F2E  4D                 	db	77	;'M'
  1047   001F2F  6F                 	db	111	;'o'
  1048   001F30  64                 	db	100	;'d'
  1049   001F31  69                 	db	105	;'i'
  1050   001F32  66                 	db	102	;'f'
  1051   001F33  69                 	db	105	;'i'
  1052   001F34  63                 	db	99	;'c'
  1053   001F35  61                 	db	97	;'a'
  1054   001F36  72                 	db	114	;'r'
  1055   001F37  20                 	db	32
  1056   001F38  68                 	db	104	;'h'
  1057   001F39  6F                 	db	111	;'o'
  1058   001F3A  72                 	db	114	;'r'
  1059   001F3B  61                 	db	97	;'a'
  1060   001F3C  20                 	db	32
  1061   001F3D  64                 	db	100	;'d'
  1062   001F3E  65                 	db	101	;'e'
  1063   001F3F  6C                 	db	108	;'l'
  1064   001F40  20                 	db	32
  1065   001F41  73                 	db	115	;'s'
  1066   001F42  69                 	db	105	;'i'
  1067   001F43  73                 	db	115	;'s'
  1068   001F44  74                 	db	116	;'t'
  1069   001F45  65                 	db	101	;'e'
  1070   001F46  6D                 	db	109	;'m'
  1071   001F47  61                 	db	97	;'a'
  1072   001F48  0D                 	db	13
  1073   001F49  0A                 	db	10
  1074   001F4A  00                 	db	0
  1075   001F4B                     STR_9:
  1076   001F4B  09                 	db	9
  1077   001F4C  32                 	db	50	;'2'
  1078   001F4D  2E                 	db	46
  1079   001F4E  20                 	db	32
  1080   001F4F  4D                 	db	77	;'M'
  1081   001F50  6F                 	db	111	;'o'
  1082   001F51  73                 	db	115	;'s'
  1083   001F52  74                 	db	116	;'t'
  1084   001F53  72                 	db	114	;'r'
  1085   001F54  61                 	db	97	;'a'
  1086   001F55  72                 	db	114	;'r'
  1087   001F56  20                 	db	32
  1088   001F57  63                 	db	99	;'c'
  1089   001F58  6F                 	db	111	;'o'
  1090   001F59  6E                 	db	110	;'n'
  1091   001F5A  66                 	db	102	;'f'
  1092   001F5B  69                 	db	105	;'i'
  1093   001F5C  67                 	db	103	;'g'
  1094   001F5D  75                 	db	117	;'u'
  1095   001F5E  72                 	db	114	;'r'
  1096   001F5F  61                 	db	97	;'a'
  1097   001F60  63                 	db	99	;'c'
  1098   001F61  69                 	db	105	;'i'
  1099   001F62  6F                 	db	111	;'o'
  1100   001F63  6E                 	db	110	;'n'
  1101   001F64  73                 	db	115	;'s'
  1102   001F65  0D                 	db	13
  1103   001F66  0A                 	db	10
  1104   001F67  00                 	db	0
  1105   001F68                     STR_8:
  1106   001F68  09                 	db	9
  1107   001F69  31                 	db	49	;'1'
  1108   001F6A  2E                 	db	46
  1109   001F6B  20                 	db	32
  1110   001F6C  51                 	db	81	;'Q'
  1111   001F6D  75                 	db	117	;'u'
  1112   001F6E  69                 	db	105	;'i'
  1113   001F6F  20                 	db	32
  1114   001F70  68                 	db	104	;'h'
  1115   001F71  69                 	db	105	;'i'
  1116   001F72  20                 	db	32
  1117   001F73  68                 	db	104	;'h'
  1118   001F74  61                 	db	97	;'a'
  1119   001F75  20                 	db	32
  1120   001F76  61                 	db	97	;'a'
  1121   001F77  20                 	db	32
  1122   001F78  6C                 	db	108	;'l'
  1123   001F79  61                 	db	97	;'a'
  1124   001F7A  20                 	db	32
  1125   001F7B  73                 	db	115	;'s'
  1126   001F7C  61                 	db	97	;'a'
  1127   001F7D  6C                 	db	108	;'l'
  1128   001F7E  61                 	db	97	;'a'
  1129   001F7F  3F                 	db	63	;'?'
  1130   001F80  0D                 	db	13
  1131   001F81  0A                 	db	10
  1132   001F82  00                 	db	0
  1133   001F83                     STR_7:
  1134   001F83  54                 	db	84	;'T'
  1135   001F84  72                 	db	114	;'r'
  1136   001F85  69                 	db	105	;'i'
  1137   001F86  61                 	db	97	;'a'
  1138   001F87  20                 	db	32
  1139   001F88  75                 	db	117	;'u'
  1140   001F89  6E                 	db	110	;'n'
  1141   001F8A  61                 	db	97	;'a'
  1142   001F8B  20                 	db	32
  1143   001F8C  6F                 	db	111	;'o'
  1144   001F8D  70                 	db	112	;'p'
  1145   001F8E  63                 	db	99	;'c'
  1146   001F8F  69                 	db	105	;'i'
  1147   001F90  C3                 	db	-61
  1148   001F91  B3                 	db	-77
  1149   001F92  3A                 	db	58	;':'
  1150   001F93  0D                 	db	13
  1151   001F94  0A                 	db	10
  1152   001F95  00                 	db	0
  1153   001F96                     STR_4:
  1154   001F96  2D                 	db	45
  1155   001F97  2D                 	db	45
  1156   001F98  2D                 	db	45
  1157   001F99  2D                 	db	45
  1158   001F9A  2D                 	db	45
  1159   001F9B  2D                 	db	45
  1160   001F9C  2D                 	db	45
  1161   001F9D  2D                 	db	45
  1162   001F9E  2D                 	db	45
  1163   001F9F  2D                 	db	45
  1164   001FA0  2D                 	db	45
  1165   001FA1  2D                 	db	45
  1166   001FA2  2D                 	db	45
  1167   001FA3  2D                 	db	45
  1168   001FA4  2D                 	db	45
  1169   001FA5  0D                 	db	13
  1170   001FA6  0A                 	db	10
  1171   001FA7  00                 	db	0
  1172   001FA8                     STR_5:
  1173   001FA8  4D                 	db	77	;'M'
  1174   001FA9  65                 	db	101	;'e'
  1175   001FAA  6E                 	db	110	;'n'
  1176   001FAB  C3                 	db	-61
  1177   001FAC  BA                 	db	-70
  1178   001FAD  20                 	db	32
  1179   001FAE  70                 	db	112	;'p'
  1180   001FAF  72                 	db	114	;'r'
  1181   001FB0  69                 	db	105	;'i'
  1182   001FB1  6E                 	db	110	;'n'
  1183   001FB2  63                 	db	99	;'c'
  1184   001FB3  69                 	db	105	;'i'
  1185   001FB4  70                 	db	112	;'p'
  1186   001FB5  61                 	db	97	;'a'
  1187   001FB6  6C                 	db	108	;'l'
  1188   001FB7  0D                 	db	13
  1189   001FB8  0A                 	db	10
  1190   001FB9  00                 	db	0
  1191   001FBA                     STR_12:
  1192   001FBA  48                 	db	72	;'H'
  1193   001FBB  61                 	db	97	;'a'
  1194   001FBC  73                 	db	115	;'s'
  1195   001FBD  20                 	db	32
  1196   001FBE  70                 	db	112	;'p'
  1197   001FBF  75                 	db	117	;'u'
  1198   001FC0  6C                 	db	108	;'l'
  1199   001FC1  73                 	db	115	;'s'
  1200   001FC2  61                 	db	97	;'a'
  1201   001FC3  64                 	db	100	;'d'
  1202   001FC4  6F                 	db	111	;'o'
  1203   001FC5  20                 	db	32
  1204   001FC6  31                 	db	49	;'1'
  1205   001FC7  00                 	db	0
  1206   001FC8                     STR_13:
  1207   001FC8  48                 	db	72	;'H'
  1208   001FC9  61                 	db	97	;'a'
  1209   001FCA  73                 	db	115	;'s'
  1210   001FCB  20                 	db	32
  1211   001FCC  70                 	db	112	;'p'
  1212   001FCD  75                 	db	117	;'u'
  1213   001FCE  6C                 	db	108	;'l'
  1214   001FCF  73                 	db	115	;'s'
  1215   001FD0  61                 	db	97	;'a'
  1216   001FD1  64                 	db	100	;'d'
  1217   001FD2  6F                 	db	111	;'o'
  1218   001FD3  20                 	db	32
  1219   001FD4  32                 	db	50	;'2'
  1220   001FD5  00                 	db	0
  1221   001FD6                     STR_14:
  1222   001FD6  48                 	db	72	;'H'
  1223   001FD7  61                 	db	97	;'a'
  1224   001FD8  73                 	db	115	;'s'
  1225   001FD9  20                 	db	32
  1226   001FDA  70                 	db	112	;'p'
  1227   001FDB  75                 	db	117	;'u'
  1228   001FDC  6C                 	db	108	;'l'
  1229   001FDD  73                 	db	115	;'s'
  1230   001FDE  61                 	db	97	;'a'
  1231   001FDF  64                 	db	100	;'d'
  1232   001FE0  6F                 	db	111	;'o'
  1233   001FE1  20                 	db	32
  1234   001FE2  33                 	db	51	;'3'
  1235   001FE3  00                 	db	0
  1236   001FE4                     STR_1:
  1237   001FE4  73                 	db	115	;'s'
  1238   001FE5  74                 	db	116	;'t'
  1239   001FE6  61                 	db	97	;'a'
  1240   001FE7  74                 	db	116	;'t'
  1241   001FE8  65                 	db	101	;'e'
  1242   001FE9  3A                 	db	58	;':'
  1243   001FEA  20                 	db	32
  1244   001FEB  25                 	db	37
  1245   001FEC  64                 	db	100	;'d'
  1246   001FED  0D                 	db	13
  1247   001FEE  0A                 	db	10
  1248   001FEF  00                 	db	0
  1249   001FF0                     STR_11:
  1250   001FF0  4F                 	db	79	;'O'
  1251   001FF1  70                 	db	112	;'p'
  1252   001FF2  63                 	db	99	;'c'
  1253   001FF3  69                 	db	105	;'i'
  1254   001FF4  C3                 	db	-61
  1255   001FF5  B3                 	db	-77
  1256   001FF6  3A                 	db	58	;':'
  1257   001FF7  20                 	db	32
  1258   001FF8  00                 	db	0
  1259   001FF9                     STR_2:
  1260   001FF9  55                 	db	85	;'U'
  1261   001FFA  49                 	db	73	;'I'
  1262   001FFB  44                 	db	68	;'D'
  1263   001FFC  3A                 	db	58	;':'
  1264   001FFD  20                 	db	32
  1265   001FFE  00                 	db	0
  1266   001F96                     STR_6           equ	STR_4
  1267   001FA6                     STR_3           equ	STR_4+16
  1268   001FFF  00                 	db	0	; dummy byte at the end
  1269   001EFC                     __smallconst    set	__pmediumconst
  1270   001EFC                     __mediumconst   set	__pmediumconst
  1271   000002                     __activetblptr  equ	2
  1272                           
  1273                           ; #config settings
  1274                           
  1275                           	psect	cinit
  1276   00106C                     __pcinit:
  1277                           	callstack 0
  1278   00106C                     start_initialization:
  1279                           	callstack 0
  1280   00106C                     __initialization:
  1281                           	callstack 0
  1282                           
  1283                           ; Clear objects allocated to BANK1 (100 bytes)
  1284   00106C  EE01  F000         	lfsr	0,__pbssBANK1
  1285   001070  0E64               	movlw	100
  1286   001072                     clear_0:
  1287   001072  6AEE               	clrf	postinc0,c
  1288   001074  06E8               	decf	wreg,f,c
  1289   001076  E1FD               	bnz	clear_0
  1290                           
  1291                           ; Clear objects allocated to BANK0 (32 bytes)
  1292   001078  EE00  F080         	lfsr	0,__pbssBANK0
  1293   00107C  0E20               	movlw	32
  1294   00107E                     clear_1:
  1295   00107E  6AEE               	clrf	postinc0,c
  1296   001080  06E8               	decf	wreg,f,c
  1297   001082  E1FD               	bnz	clear_1
  1298                           
  1299                           ; Clear objects allocated to COMRAM (63 bytes)
  1300   001084  EE00  F001         	lfsr	0,__pbssCOMRAM
  1301   001088  0E3F               	movlw	63
  1302   00108A                     clear_2:
  1303   00108A  6AEE               	clrf	postinc0,c
  1304   00108C  06E8               	decf	wreg,f,c
  1305   00108E  E1FD               	bnz	clear_2
  1306   001090                     end_of_initialization:
  1307                           	callstack 0
  1308   001090                     __end_of__initialization:
  1309                           	callstack 0
  1310   001090  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1311   001092  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1312   001094  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1313   001096  6EF8               	movwf	tblptru,c
  1314   001098  0100               	movlb	0
  1315   00109A  EF64  F008         	goto	_main	;jump to C main() function
  1316                           
  1317                           	psect	bssCOMRAM
  1318   000001                     __pbssCOMRAM:
  1319                           	callstack 0
  1320   000001                     _Timers:
  1321                           	callstack 0
  1322   000001                     	ds	20
  1323   000015                     _Tics:
  1324                           	callstack 0
  1325   000015                     	ds	4
  1326   000019                     _nout:
  1327                           	callstack 0
  1328   000019                     	ds	2
  1329   00001B                     _width:
  1330                           	callstack 0
  1331   00001B                     	ds	2
  1332   00001D                     _prec:
  1333                           	callstack 0
  1334   00001D                     	ds	2
  1335   00001F                     	ds	2
  1336   000021                     	ds	2
  1337   000023                     _flags:
  1338                           	callstack 0
  1339   000023                     	ds	1
  1340   000024                     motorTerminal@state:
  1341                           	callstack 0
  1342   000024                     	ds	1
  1343   000025                     _hashtag_pressed:
  1344                           	callstack 0
  1345   000025                     	ds	1
  1346   000026                     _ColumnAct:
  1347                           	callstack 0
  1348   000026                     	ds	1
  1349   000027                     _RowAct:
  1350                           	callstack 0
  1351   000027                     	ds	1
  1352   000028                     _Columns:
  1353                           	callstack 0
  1354   000028                     	ds	1
  1355   000029                     _Rows:
  1356                           	callstack 0
  1357   000029                     	ds	1
  1358   00002A                     motor_RFID@TagType:
  1359                           	callstack 0
  1360   00002A                     	ds	1
  1361   00002B                     	ds	1
  1362   00002C                     motor_RFID@i:
  1363                           	callstack 0
  1364   00002C                     	ds	1
  1365   00002D                     motor_RFID@n:
  1366                           	callstack 0
  1367   00002D                     	ds	1
  1368   00002E                     	ds	1
  1369   00002F                     motor_RFID@waitIRq:
  1370                           	callstack 0
  1371   00002F                     	ds	1
  1372   000030                     motor_RFID@irqEn:
  1373                           	callstack 0
  1374   000030                     	ds	1
  1375   000031                     	ds	1
  1376   000032                     motor_RFID@substate:
  1377                           	callstack 0
  1378   000032                     	ds	1
  1379   000033                     motor_RFID@state:
  1380                           	callstack 0
  1381   000033                     	ds	1
  1382   000034                     _state:
  1383                           	callstack 0
  1384   000034                     	ds	1
  1385   000035                     _tecla:
  1386                           	callstack 0
  1387   000035                     	ds	1
  1388   000036                     _Columnas:
  1389                           	callstack 0
  1390   000036                     	ds	1
  1391   000037                     _Filas:
  1392                           	callstack 0
  1393   000037                     	ds	1
  1394   000038                     motor_RFID@UID:
  1395                           	callstack 0
  1396   000038                     	ds	6
  1397   00003E                     _Timer:
  1398                           	callstack 0
  1399   00003E                     	ds	1
  1400   00003F                     _timer:
  1401                           	callstack 0
  1402   00003F                     	ds	1
  1403                           
  1404                           	psect	bssBANK0
  1405   000080                     __pbssBANK0:
  1406                           	callstack 0
  1407   000080                     _dbuf:
  1408                           	callstack 0
  1409   000080                     	ds	32
  1410                           
  1411                           	psect	bssBANK1
  1412   000100                     __pbssBANK1:
  1413                           	callstack 0
  1414   000100                     motor_RFID@buffer:
  1415                           	callstack 0
  1416   000100                     	ds	100
  1417                           
  1418                           	psect	cstackCOMRAM
  1419   000040                     __pcstackCOMRAM:
  1420                           	callstack 0
  1421   000040                     ??_LowRSI:
  1422                           
  1423                           ; 1 bytes @ 0x0
  1424   000040                     	ds	1
  1425   000041                     ?_Terminal_TXAvailable:
  1426                           	callstack 0
  1427   000041                     ?___awdiv:
  1428                           	callstack 0
  1429   000041                     ?___awmod:
  1430                           	callstack 0
  1431   000041                     ?_TI_GetTics:
  1432                           	callstack 0
  1433   000041                     TI_Init@counter:
  1434                           	callstack 0
  1435   000041                     TI_NewTimer@TimerHandle:
  1436                           	callstack 0
  1437   000041                     TI_ResetTics@TimerHandle:
  1438                           	callstack 0
  1439   000041                     Terminal_SendChar@c:
  1440                           	callstack 0
  1441   000041                     ___awdiv@dividend:
  1442                           	callstack 0
  1443   000041                     ___awmod@dividend:
  1444                           	callstack 0
  1445   000041                     fputc@c:
  1446                           	callstack 0
  1447   000041                     ??_GetTecla:
  1448   000041                     ??_delay_us:
  1449   000041                     
  1450                           ; 1 bytes @ 0x1
  1451   000041                     	ds	1
  1452   000042                     
  1453                           ; 1 bytes @ 0x2
  1454   000042                     	ds	1
  1455   000043                     TI_NewTimer@Comptador:
  1456                           	callstack 0
  1457   000043                     fputc@fp:
  1458                           	callstack 0
  1459   000043                     ___awdiv@divisor:
  1460                           	callstack 0
  1461   000043                     ___awmod@divisor:
  1462                           	callstack 0
  1463   000043                     GetTecla@keymap:
  1464                           	callstack 0
  1465   000043                     ??_Terminal_TXAvailable:
  1466                           
  1467                           ; 1 bytes @ 0x3
  1468   000043                     	ds	1
  1469   000044                     delay_us@howMany:
  1470                           	callstack 0
  1471   000044                     Terminal_SendString@str:
  1472                           	callstack 0
  1473   000044                     ??_fputc:
  1474                           
  1475                           ; 1 bytes @ 0x4
  1476   000044                     	ds	1
  1477   000045                     delay_us@x:
  1478                           	callstack 0
  1479   000045                     ___awdiv@counter:
  1480                           	callstack 0
  1481   000045                     ___awmod@counter:
  1482                           	callstack 0
  1483   000045                     ??_TI_GetTics:
  1484   000045                     
  1485                           ; 1 bytes @ 0x5
  1486   000045                     	ds	1
  1487   000046                     displayUID@uid:
  1488                           	callstack 0
  1489   000046                     ___awdiv@sign:
  1490                           	callstack 0
  1491   000046                     ___awmod@sign:
  1492                           	callstack 0
  1493   000046                     ??_MFRC522_Rd:
  1494   000046                     
  1495                           ; 1 bytes @ 0x6
  1496   000046                     	ds	1
  1497   000047                     ?_abs:
  1498                           	callstack 0
  1499   000047                     MFRC522_Rd@Address:
  1500                           	callstack 0
  1501   000047                     ___awdiv@quotient:
  1502                           	callstack 0
  1503   000047                     abs@a:
  1504                           	callstack 0
  1505   000047                     ??_displayUID:
  1506                           
  1507                           ; 1 bytes @ 0x7
  1508   000047                     	ds	1
  1509   000048                     MFRC522_Rd@ucAddr:
  1510                           	callstack 0
  1511   000048                     displayUID@hexString:
  1512                           	callstack 0
  1513                           
  1514                           ; 11 bytes @ 0x8
  1515   000048                     	ds	1
  1516   000049                     MFRC522_Rd@ucResult:
  1517                           	callstack 0
  1518   000049                     TI_GetTics@CopiaTicsActual:
  1519                           	callstack 0
  1520   000049                     ??_abs:
  1521                           
  1522                           ; 1 bytes @ 0x9
  1523   000049                     	ds	1
  1524   00004A                     MFRC522_Rd@i:
  1525                           	callstack 0
  1526                           
  1527                           ; 1 bytes @ 0xA
  1528   00004A                     	ds	1
  1529   00004B                     ?_vfpfcnvrt:
  1530                           	callstack 0
  1531   00004B                     MFRC522_Wr@value:
  1532                           	callstack 0
  1533   00004B                     vfpfcnvrt@fp:
  1534                           	callstack 0
  1535                           
  1536                           ; 1 bytes @ 0xB
  1537   00004B                     	ds	1
  1538   00004C                     vfpfcnvrt@fmt:
  1539                           	callstack 0
  1540   00004C                     ??_MFRC522_Wr:
  1541                           
  1542                           ; 1 bytes @ 0xC
  1543   00004C                     	ds	1
  1544   00004D                     TI_GetTics@TimerHandle:
  1545                           	callstack 0
  1546   00004D                     MFRC522_Wr@Address:
  1547                           	callstack 0
  1548   00004D                     vfpfcnvrt@ap:
  1549                           	callstack 0
  1550                           
  1551                           ; 1 bytes @ 0xD
  1552   00004D                     	ds	1
  1553   00004E                     MFRC522_Wr@ucAddr:
  1554                           	callstack 0
  1555   00004E                     ??_vfpfcnvrt:
  1556                           
  1557                           ; 1 bytes @ 0xE
  1558   00004E                     	ds	1
  1559   00004F                     GetTecla@columna:
  1560                           	callstack 0
  1561   00004F                     MFRC522_Wr@i:
  1562                           	callstack 0
  1563                           
  1564                           ; 1 bytes @ 0xF
  1565   00004F                     	ds	1
  1566   000050                     GetTecla@fila:
  1567                           	callstack 0
  1568   000050                     MFRC522_Clear_Bit@mask:
  1569                           	callstack 0
  1570   000050                     MFRC522_Set_Bit@mask:
  1571                           	callstack 0
  1572   000050                     vfpfcnvrt@done:
  1573                           	callstack 0
  1574   000050                     
  1575                           ; 1 bytes @ 0x10
  1576   000050                     	ds	1
  1577   000051                     MFRC522_Set_Bit@addr:
  1578                           	callstack 0
  1579   000051                     vfpfcnvrt@cnt:
  1580                           	callstack 0
  1581   000051                     ??_MFRC522_Clear_Bit:
  1582   000051                     
  1583                           ; 1 bytes @ 0x11
  1584   000051                     	ds	1
  1585   000052                     MFRC522_Clear_Bit@addr:
  1586                           	callstack 0
  1587   000052                     
  1588                           ; 1 bytes @ 0x12
  1589   000052                     	ds	1
  1590   000053                     _displayUID$822:
  1591                           	callstack 0
  1592   000053                     vfpfcnvrt@cp:
  1593                           	callstack 0
  1594   000053                     
  1595                           ; 1 bytes @ 0x13
  1596   000053                     	ds	2
  1597   000055                     _displayUID$823:
  1598                           	callstack 0
  1599   000055                     vfpfcnvrt@convarg:
  1600                           	callstack 0
  1601                           
  1602                           ; 4 bytes @ 0x15
  1603   000055                     	ds	2
  1604   000057                     displayUID@i:
  1605                           	callstack 0
  1606                           
  1607                           ; 2 bytes @ 0x17
  1608   000057                     	ds	2
  1609   000059                     displayUID@nibble:
  1610                           	callstack 0
  1611   000059                     vfpfcnvrt@c:
  1612                           	callstack 0
  1613                           
  1614                           ; 1 bytes @ 0x19
  1615   000059                     	ds	1
  1616   00005A                     ?_vfprintf:
  1617                           	callstack 0
  1618   00005A                     vfprintf@fp:
  1619                           	callstack 0
  1620                           
  1621                           ; 1 bytes @ 0x1A
  1622   00005A                     	ds	1
  1623   00005B                     vfprintf@fmt:
  1624                           	callstack 0
  1625                           
  1626                           ; 2 bytes @ 0x1B
  1627   00005B                     	ds	2
  1628   00005D                     vfprintf@ap:
  1629                           	callstack 0
  1630                           
  1631                           ; 1 bytes @ 0x1D
  1632   00005D                     	ds	1
  1633   00005E                     vfprintf@cfmt:
  1634                           	callstack 0
  1635   00005E                     
  1636                           ; 1 bytes @ 0x1E
  1637   00005E                     	ds	2
  1638   000060                     ?_sprintf:
  1639                           	callstack 0
  1640   000060                     sprintf@s:
  1641                           	callstack 0
  1642                           
  1643                           ; 2 bytes @ 0x20
  1644   000060                     	ds	2
  1645   000062                     sprintf@fmt:
  1646                           	callstack 0
  1647                           
  1648                           ; 2 bytes @ 0x22
  1649   000062                     	ds	4
  1650   000066                     sprintf@ret:
  1651                           	callstack 0
  1652   000066                     
  1653                           ; 1 bytes @ 0x26
  1654   000066                     	ds	2
  1655   000068                     sprintf@ap:
  1656                           	callstack 0
  1657                           
  1658                           ; 1 bytes @ 0x28
  1659   000068                     	ds	1
  1660   000069                     sprintf@f:
  1661                           	callstack 0
  1662                           
  1663                           ; 11 bytes @ 0x29
  1664   000069                     	ds	11
  1665   000074                     ??_motor_RFID:
  1666                           
  1667                           ; 1 bytes @ 0x34
  1668   000074                     	ds	1
  1669   000075                     motor_RFID@p:
  1670                           	callstack 0
  1671                           
  1672                           ; 2 bytes @ 0x35
  1673   000075                     	ds	2
  1674   000077                     
  1675                           ; 1 bytes @ 0x37
  1676 ;;
  1677 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1678 ;;
  1679 ;; *************** function _main *****************
  1680 ;; Defined at:
  1681 ;;		line 36 in file "main.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1
  1695 ;;      Params:         0       0       0
  1696 ;;      Locals:         0       0       0
  1697 ;;      Temps:          0       0       0
  1698 ;;      Totals:         0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels required when called: 9
  1701 ;; This function calls:
  1702 ;;		_TI_Init
  1703 ;;		_Terminal_Init
  1704 ;;		_initRFID
  1705 ;;		_initTeclado
  1706 ;;		_motorTeclado
  1707 ;;		_motorTerminal
  1708 ;;		_motor_RFID
  1709 ;; This function is called by:
  1710 ;;		Startup code after reset
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text0
  1715   0010C8                     __ptext0:
  1716                           	callstack 0
  1717   0010C8                     _main:
  1718                           	callstack 22
  1719   0010C8                     
  1720                           ;main.c: 37:  LATC = key;
  1721   0010C8  EC1C  F008         	call	_TI_Init	;wreg free
  1722                           
  1723                           ;main.c: 38: }
  1724   0010CC  ECB1  F008         	call	_initTeclado	;wreg free
  1725   0010D0  ECF6  F008         	call	_initRFID	;wreg free
  1726   0010D4  ECDB  F008         	call	_Terminal_Init	;wreg free
  1727   0010D8  8EF2               	bsf	242,7,c	;volatile
  1728   0010DA  8CF2               	bsf	242,6,c	;volatile
  1729   0010DC                     l3445:
  1730   0010DC  EC6C  F001         	call	_motorTeclado	;wreg free
  1731   0010E0  ECFE  F003         	call	_motorTerminal	;wreg free
  1732   0010E4  EC15  F000         	call	_motor_RFID	;wreg free
  1733   0010E8  EF6E  F008         	goto	l3445
  1734   0010EC  EF13  F000         	goto	start
  1735   0010F0                     __end_of_main:
  1736                           	callstack 0
  1737                           
  1738 ;; *************** function _motor_RFID *****************
  1739 ;; Defined at:
  1740 ;;		line 315 in file "TAD_RFID.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  p               2   53[COMRAM] PTR unsigned char 
  1745 ;;		 -> motor_RFID@buffer(100), 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1
  1755 ;;      Params:         0       0       0
  1756 ;;      Locals:         2       0       0
  1757 ;;      Temps:          1       0       0
  1758 ;;      Totals:         3       0       0
  1759 ;;Total ram usage:        3 bytes
  1760 ;; Hardware stack levels used: 1
  1761 ;; Hardware stack levels required when called: 8
  1762 ;; This function calls:
  1763 ;;		_MFRC522_Clear_Bit
  1764 ;;		_MFRC522_Rd
  1765 ;;		_MFRC522_Set_Bit
  1766 ;;		_MFRC522_Wr
  1767 ;;		_displayUID
  1768 ;;		_sprintf
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text1
  1775   00002A                     __ptext1:
  1776                           	callstack 0
  1777   00002A                     _motor_RFID:
  1778                           	callstack 22
  1779   00002A                     
  1780                           ;TAD_RFID.c: 316:     static char state = 0;;TAD_RFID.c: 317:     static char substate =
      +                           0;;TAD_RFID.c: 318:     static char function_state = 0;;TAD_RFID.c: 319:     static cha
      +                          r irqEn, waitIRq, lastBits, n;;TAD_RFID.c: 320:     static unsigned char i;;TAD_RFID.c: 
      +                          321:     static char _status;;TAD_RFID.c: 322:     static unsigned backBits, unLen;;TAD_
      +                          RFID.c: 323:     static char TagType;;TAD_RFID.c: 324:     static unsigned char UID[6];;
      +                          TAD_RFID.c: 325:     static char buffer[100];;TAD_RFID.c: 326:     char *p = buffer;
  1781   00002A  0E00               	movlw	low motor_RFID@buffer
  1782   00002C  6E75               	movwf	motor_RFID@p^0,c
  1783   00002E  0E01               	movlw	high motor_RFID@buffer
  1784   000030  6E76               	movwf	(motor_RFID@p+1)^0,c
  1785   000032                     
  1786                           ;TAD_RFID.c: 327:     p += sprintf(p, "state: %d\r\n", state);
  1787   000032  C075  F060         	movff	motor_RFID@p,sprintf@s
  1788   000036  C076  F061         	movff	motor_RFID@p+1,sprintf@s+1
  1789   00003A  0EE4               	movlw	low STR_1
  1790   00003C  6E62               	movwf	sprintf@fmt^0,c
  1791   00003E  0E1F               	movlw	high STR_1
  1792   000040  6E63               	movwf	(sprintf@fmt+1)^0,c
  1793   000042  C033  F064         	movff	motor_RFID@state,?_sprintf+4
  1794   000046  6A65               	clrf	(?_sprintf+5)^0,c
  1795   000048  EC4F  F007         	call	_sprintf	;wreg free
  1796   00004C  5060               	movf	?_sprintf^0,w,c
  1797   00004E  2675               	addwf	motor_RFID@p^0,f,c
  1798   000050  5061               	movf	(?_sprintf+1)^0,w,c
  1799   000052  2276               	addwfc	(motor_RFID@p+1)^0,f,c
  1800                           
  1801                           ;TAD_RFID.c: 328:     switch(state) {
  1802   000054  EF5C  F001         	goto	l3371
  1803   000058                     l3249:
  1804                           
  1805                           ;TAD_RFID.c: 332:                     MFRC522_Wr(0x0D, 0x07);
  1806   000058  0E07               	movlw	7
  1807   00005A  6E4B               	movwf	MFRC522_Wr@value^0,c
  1808   00005C  0E0D               	movlw	13
  1809   00005E  ECEB  F005         	call	_MFRC522_Wr
  1810   000062                     
  1811                           ;TAD_RFID.c: 333:                     TagType = 0x26;
  1812   000062  0E26               	movlw	38
  1813   000064  6E2A               	movwf	motor_RFID@TagType^0,c
  1814   000066                     l3253:
  1815                           
  1816                           ;TAD_RFID.c: 334:                     substate = 1;
  1817   000066  0E01               	movlw	1
  1818   000068  6E32               	movwf	motor_RFID@substate^0,c
  1819                           
  1820                           ;TAD_RFID.c: 335:                     break;
  1821   00006A  EF6B  F001         	goto	l360
  1822   00006E                     l3255:
  1823                           
  1824                           ;TAD_RFID.c: 338:                     irqEn = 0x77;
  1825   00006E  0E77               	movlw	119
  1826   000070  6E30               	movwf	motor_RFID@irqEn^0,c
  1827                           
  1828                           ;TAD_RFID.c: 339:                     waitIRq = 0x30;
  1829   000072  0E30               	movlw	48
  1830   000074  6E2F               	movwf	motor_RFID@waitIRq^0,c
  1831   000076                     
  1832                           ;TAD_RFID.c: 340:                     MFRC522_Wr(0x02, irqEn | 0x80);
  1833   000076  0EF7               	movlw	247
  1834   000078  6E4B               	movwf	MFRC522_Wr@value^0,c
  1835   00007A  0E02               	movlw	2
  1836   00007C  ECEB  F005         	call	_MFRC522_Wr
  1837   000080                     
  1838                           ;TAD_RFID.c: 341:                     MFRC522_Clear_Bit(0x04, 0x80);
  1839   000080  0E80               	movlw	128
  1840   000082  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  1841   000084  0E04               	movlw	4
  1842   000086  EC98  F008         	call	_MFRC522_Clear_Bit
  1843   00008A                     
  1844                           ;TAD_RFID.c: 342:                     MFRC522_Set_Bit(0x0A, 0x80);
  1845   00008A  0E80               	movlw	128
  1846   00008C  6E50               	movwf	MFRC522_Set_Bit@mask^0,c
  1847   00008E  0E0A               	movlw	10
  1848   000090  ECD1  F008         	call	_MFRC522_Set_Bit
  1849   000094                     
  1850                           ;TAD_RFID.c: 343:                     MFRC522_Wr(0x01, 0x00);
  1851   000094  0E00               	movlw	0
  1852   000096  6E4B               	movwf	MFRC522_Wr@value^0,c
  1853   000098  0E01               	movlw	1
  1854   00009A  ECEB  F005         	call	_MFRC522_Wr
  1855   00009E                     
  1856                           ;TAD_RFID.c: 344:                     MFRC522_Wr(0x09, TagType);
  1857   00009E  C02A  F04B         	movff	motor_RFID@TagType,MFRC522_Wr@value
  1858   0000A2  0E09               	movlw	9
  1859   0000A4  ECEB  F005         	call	_MFRC522_Wr
  1860   0000A8                     
  1861                           ;TAD_RFID.c: 345:                     MFRC522_Wr(0x01, 0x0C);
  1862   0000A8  0E0C               	movlw	12
  1863   0000AA  6E4B               	movwf	MFRC522_Wr@value^0,c
  1864   0000AC  0E01               	movlw	1
  1865   0000AE  ECEB  F005         	call	_MFRC522_Wr
  1866   0000B2                     
  1867                           ;TAD_RFID.c: 346:                     MFRC522_Set_Bit(0x0D, 0x80);
  1868   0000B2  0E80               	movlw	128
  1869   0000B4  6E50               	movwf	MFRC522_Set_Bit@mask^0,c
  1870   0000B6  0E0D               	movlw	13
  1871   0000B8  ECD1  F008         	call	_MFRC522_Set_Bit
  1872   0000BC                     
  1873                           ;TAD_RFID.c: 347:                     i = 0xFF;
  1874   0000BC  682C               	setf	motor_RFID@i^0,c
  1875   0000BE                     
  1876                           ;TAD_RFID.c: 348:                     substate = 2;
  1877   0000BE  0E02               	movlw	2
  1878   0000C0  6E32               	movwf	motor_RFID@substate^0,c
  1879                           
  1880                           ;TAD_RFID.c: 349:                     break;
  1881   0000C2  EF6B  F001         	goto	l360
  1882   0000C6                     l3275:
  1883                           
  1884                           ;TAD_RFID.c: 352:                     n = MFRC522_Rd(0x04);
  1885   0000C6  0E04               	movlw	4
  1886   0000C8  EC3F  F006         	call	_MFRC522_Rd
  1887   0000CC  6E2D               	movwf	motor_RFID@n^0,c
  1888   0000CE                     
  1889                           ;TAD_RFID.c: 353:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  1890   0000CE  B02D               	btfsc	motor_RFID@n^0,0,c
  1891   0000D0  EF6C  F000         	goto	u2601
  1892   0000D4  EF6E  F000         	goto	u2600
  1893   0000D8                     u2601:
  1894   0000D8  EF7B  F000         	goto	l3283
  1895   0000DC                     u2600:
  1896   0000DC  502D               	movf	motor_RFID@n^0,w,c
  1897   0000DE  142F               	andwf	motor_RFID@waitIRq^0,w,c
  1898   0000E0  0900               	iorlw	0
  1899   0000E2  A4D8               	btfss	status,2,c
  1900   0000E4  EF76  F000         	goto	u2611
  1901   0000E8  EF78  F000         	goto	u2610
  1902   0000EC                     u2611:
  1903   0000EC  EF7B  F000         	goto	l3283
  1904   0000F0                     u2610:
  1905   0000F0  2E2C               	decfsz	motor_RFID@i^0,f,c
  1906   0000F2  EF6B  F001         	goto	l360
  1907   0000F6                     l3283:
  1908                           
  1909                           ;TAD_RFID.c: 354:                         MFRC522_Clear_Bit(0x0D, 0x80);
  1910   0000F6  0E80               	movlw	128
  1911   0000F8  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  1912   0000FA  0E0D               	movlw	13
  1913   0000FC  EC98  F008         	call	_MFRC522_Clear_Bit
  1914   000100                     
  1915                           ;TAD_RFID.c: 355:                         if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  1916   000100  502C               	movf	motor_RFID@i^0,w,c
  1917   000102  B4D8               	btfsc	status,2,c
  1918   000104  EF86  F000         	goto	u2621
  1919   000108  EF88  F000         	goto	u2620
  1920   00010C                     u2621:
  1921   00010C  EFA1  F000         	goto	l3293
  1922   000110                     u2620:
  1923   000110  0E06               	movlw	6
  1924   000112  EC3F  F006         	call	_MFRC522_Rd
  1925   000116  6E74               	movwf	??_motor_RFID^0,c
  1926   000118  0E1B               	movlw	27
  1927   00011A  1674               	andwf	??_motor_RFID^0,f,c
  1928   00011C  A4D8               	btfss	status,2,c
  1929   00011E  EF93  F000         	goto	u2631
  1930   000122  EF95  F000         	goto	u2630
  1931   000126                     u2631:
  1932   000126  EFA1  F000         	goto	l3293
  1933   00012A                     u2630:
  1934   00012A                     
  1935                           ;TAD_RFID.c: 356:                             if (!(n & irqEn & 0x01)) {
  1936   00012A  502D               	movf	motor_RFID@n^0,w,c
  1937   00012C  1430               	andwf	motor_RFID@irqEn^0,w,c
  1938   00012E  6E74               	movwf	??_motor_RFID^0,c
  1939   000130  B074               	btfsc	??_motor_RFID^0,0,c
  1940   000132  EF9D  F000         	goto	u2641
  1941   000136  EF9F  F000         	goto	u2640
  1942   00013A                     u2641:
  1943   00013A  EFA1  F000         	goto	l3293
  1944   00013E                     u2640:
  1945   00013E                     
  1946                           ;TAD_RFID.c: 357:                                 state = 1;
  1947   00013E  0E01               	movlw	1
  1948   000140  6E33               	movwf	motor_RFID@state^0,c
  1949   000142                     l3293:
  1950                           
  1951                           ;TAD_RFID.c: 360:                         substate = 0;
  1952   000142  6A32               	clrf	motor_RFID@substate^0,c
  1953   000144  EF6B  F001         	goto	l360
  1954   000148                     l3297:
  1955   000148  5032               	movf	motor_RFID@substate^0,w,c
  1956                           
  1957                           ; Switch size 1, requested type "simple"
  1958                           ; Number of cases is 3, Range of values is 0 to 2
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte           10     6 (average)
  1962                           ;	Chosen strategy is simple_byte
  1963   00014A  0A00               	xorlw	0	; case 0
  1964   00014C  B4D8               	btfsc	status,2,c
  1965   00014E  EF2C  F000         	goto	l3249
  1966   000152  0A01               	xorlw	1	; case 1
  1967   000154  B4D8               	btfsc	status,2,c
  1968   000156  EF37  F000         	goto	l3255
  1969   00015A  0A03               	xorlw	3	; case 2
  1970   00015C  B4D8               	btfsc	status,2,c
  1971   00015E  EF63  F000         	goto	l3275
  1972   000162  EF6B  F001         	goto	l360
  1973   000166                     l3299:
  1974                           
  1975                           ;TAD_RFID.c: 369:                     MFRC522_Wr(0x0D, 0x00);
  1976   000166  0E00               	movlw	0
  1977   000168  6E4B               	movwf	MFRC522_Wr@value^0,c
  1978   00016A  0E0D               	movlw	13
  1979   00016C  ECEB  F005         	call	_MFRC522_Wr
  1980   000170                     
  1981                           ;TAD_RFID.c: 370:                     UID[0] = 0x93;
  1982   000170  0E93               	movlw	147
  1983   000172  6E38               	movwf	motor_RFID@UID^0,c
  1984   000174                     
  1985                           ;TAD_RFID.c: 371:                     UID[1] = 0x20;
  1986   000174  0E20               	movlw	32
  1987   000176  6E39               	movwf	(motor_RFID@UID+1)^0,c
  1988                           
  1989                           ;TAD_RFID.c: 372:                     MFRC522_Clear_Bit(0x08, 0x08);
  1990   000178  0E08               	movlw	8
  1991   00017A  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  1992   00017C  0E08               	movlw	8
  1993   00017E  EC98  F008         	call	_MFRC522_Clear_Bit
  1994   000182  EF33  F000         	goto	l3253
  1995   000186                     l3307:
  1996                           
  1997                           ;TAD_RFID.c: 377:                     irqEn = 0x77;
  1998   000186  0E77               	movlw	119
  1999   000188  6E30               	movwf	motor_RFID@irqEn^0,c
  2000                           
  2001                           ;TAD_RFID.c: 378:                     waitIRq = 0x30;
  2002   00018A  0E30               	movlw	48
  2003   00018C  6E2F               	movwf	motor_RFID@waitIRq^0,c
  2004   00018E                     
  2005                           ;TAD_RFID.c: 379:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2006   00018E  0EF7               	movlw	247
  2007   000190  6E4B               	movwf	MFRC522_Wr@value^0,c
  2008   000192  0E02               	movlw	2
  2009   000194  ECEB  F005         	call	_MFRC522_Wr
  2010   000198                     
  2011                           ;TAD_RFID.c: 380:                     MFRC522_Clear_Bit(0x04, 0x80);
  2012   000198  0E80               	movlw	128
  2013   00019A  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  2014   00019C  0E04               	movlw	4
  2015   00019E  EC98  F008         	call	_MFRC522_Clear_Bit
  2016   0001A2                     
  2017                           ;TAD_RFID.c: 381:                     MFRC522_Set_Bit(0x0A, 0x80);
  2018   0001A2  0E80               	movlw	128
  2019   0001A4  6E50               	movwf	MFRC522_Set_Bit@mask^0,c
  2020   0001A6  0E0A               	movlw	10
  2021   0001A8  ECD1  F008         	call	_MFRC522_Set_Bit
  2022   0001AC                     
  2023                           ;TAD_RFID.c: 382:                     MFRC522_Wr(0x01, 0x00);
  2024   0001AC  0E00               	movlw	0
  2025   0001AE  6E4B               	movwf	MFRC522_Wr@value^0,c
  2026   0001B0  0E01               	movlw	1
  2027   0001B2  ECEB  F005         	call	_MFRC522_Wr
  2028   0001B6                     
  2029                           ;TAD_RFID.c: 383:                     MFRC522_Wr(0x09, UID[0]);
  2030   0001B6  C038  F04B         	movff	motor_RFID@UID,MFRC522_Wr@value
  2031   0001BA  0E09               	movlw	9
  2032   0001BC  ECEB  F005         	call	_MFRC522_Wr
  2033   0001C0                     
  2034                           ;TAD_RFID.c: 384:                     MFRC522_Wr(0x09, UID[1]);
  2035   0001C0  C039  F04B         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2036   0001C4  0E09               	movlw	9
  2037   0001C6  ECEB  F005         	call	_MFRC522_Wr
  2038   0001CA                     
  2039                           ;TAD_RFID.c: 385:                     MFRC522_Wr(0x01, 0x0C);
  2040   0001CA  0E0C               	movlw	12
  2041   0001CC  6E4B               	movwf	MFRC522_Wr@value^0,c
  2042   0001CE  0E01               	movlw	1
  2043   0001D0  ECEB  F005         	call	_MFRC522_Wr
  2044   0001D4                     
  2045                           ;TAD_RFID.c: 386:                     MFRC522_Set_Bit(0x0D, 0x80);
  2046   0001D4  0E80               	movlw	128
  2047   0001D6  6E50               	movwf	MFRC522_Set_Bit@mask^0,c
  2048   0001D8  0E0D               	movlw	13
  2049   0001DA  ECD1  F008         	call	_MFRC522_Set_Bit
  2050   0001DE                     
  2051                           ;TAD_RFID.c: 387:                     i = 0xFF;
  2052   0001DE  682C               	setf	motor_RFID@i^0,c
  2053                           
  2054                           ;TAD_RFID.c: 388:                     substate = 2;
  2055   0001E0  0E02               	movlw	2
  2056   0001E2  6E32               	movwf	motor_RFID@substate^0,c
  2057                           
  2058                           ;TAD_RFID.c: 389:                     break;
  2059   0001E4  EF6B  F001         	goto	l360
  2060   0001E8                     l3327:
  2061                           
  2062                           ;TAD_RFID.c: 392:                     n = MFRC522_Rd(0x04);
  2063   0001E8  0E04               	movlw	4
  2064   0001EA  EC3F  F006         	call	_MFRC522_Rd
  2065   0001EE  6E2D               	movwf	motor_RFID@n^0,c
  2066   0001F0                     
  2067                           ;TAD_RFID.c: 393:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2068   0001F0  B02D               	btfsc	motor_RFID@n^0,0,c
  2069   0001F2  EFFD  F000         	goto	u2651
  2070   0001F6  EFFF  F000         	goto	u2650
  2071   0001FA                     u2651:
  2072   0001FA  EF0C  F001         	goto	l3335
  2073   0001FE                     u2650:
  2074   0001FE  502D               	movf	motor_RFID@n^0,w,c
  2075   000200  142F               	andwf	motor_RFID@waitIRq^0,w,c
  2076   000202  0900               	iorlw	0
  2077   000204  A4D8               	btfss	status,2,c
  2078   000206  EF07  F001         	goto	u2661
  2079   00020A  EF09  F001         	goto	u2660
  2080   00020E                     u2661:
  2081   00020E  EF0C  F001         	goto	l3335
  2082   000212                     u2660:
  2083   000212  2E2C               	decfsz	motor_RFID@i^0,f,c
  2084   000214  EF6B  F001         	goto	l360
  2085   000218                     l3335:
  2086                           
  2087                           ;TAD_RFID.c: 394:                         MFRC522_Clear_Bit(0x0D, 0x80);
  2088   000218  0E80               	movlw	128
  2089   00021A  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  2090   00021C  0E0D               	movlw	13
  2091   00021E  EC98  F008         	call	_MFRC522_Clear_Bit
  2092   000222                     
  2093                           ;TAD_RFID.c: 395:                         if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2094   000222  502C               	movf	motor_RFID@i^0,w,c
  2095   000224  B4D8               	btfsc	status,2,c
  2096   000226  EF17  F001         	goto	u2671
  2097   00022A  EF19  F001         	goto	u2670
  2098   00022E                     u2671:
  2099   00022E  EFA1  F000         	goto	l3293
  2100   000232                     u2670:
  2101   000232  0E06               	movlw	6
  2102   000234  EC3F  F006         	call	_MFRC522_Rd
  2103   000238  6E74               	movwf	??_motor_RFID^0,c
  2104   00023A  0E1B               	movlw	27
  2105   00023C  1674               	andwf	??_motor_RFID^0,f,c
  2106   00023E  A4D8               	btfss	status,2,c
  2107   000240  EF24  F001         	goto	u2681
  2108   000244  EF26  F001         	goto	u2680
  2109   000248                     u2681:
  2110   000248  EFA1  F000         	goto	l3293
  2111   00024C                     u2680:
  2112   00024C                     
  2113                           ;TAD_RFID.c: 397:                             n = MFRC522_Rd(0x0A);
  2114   00024C  0E0A               	movlw	10
  2115   00024E  EC3F  F006         	call	_MFRC522_Rd
  2116   000252  6E2D               	movwf	motor_RFID@n^0,c
  2117   000254                     
  2118                           ;TAD_RFID.c: 398:                             for (i = 0; i < 4; i++) {
  2119   000254  6A2C               	clrf	motor_RFID@i^0,c
  2120   000256                     l3349:
  2121                           
  2122                           ;TAD_RFID.c: 399:                                 UID[i] = MFRC522_Rd(0x09);
  2123   000256  502C               	movf	motor_RFID@i^0,w,c
  2124   000258  0F38               	addlw	low motor_RFID@UID
  2125   00025A  6ED9               	movwf	fsr2l,c
  2126   00025C  6ADA               	clrf	fsr2h,c
  2127   00025E  0E09               	movlw	9
  2128   000260  EC3F  F006         	call	_MFRC522_Rd
  2129   000264  6EDF               	movwf	indf2,c
  2130   000266                     
  2131                           ;TAD_RFID.c: 400:                             }
  2132   000266  2A2C               	incf	motor_RFID@i^0,f,c
  2133   000268  0E03               	movlw	3
  2134   00026A  642C               	cpfsgt	motor_RFID@i^0,c
  2135   00026C  EF3A  F001         	goto	u2691
  2136   000270  EF3C  F001         	goto	u2690
  2137   000274                     u2691:
  2138   000274  EF2B  F001         	goto	l3349
  2139   000278                     u2690:
  2140   000278                     
  2141                           ;TAD_RFID.c: 401:                             UID[4] = 0;
  2142   000278  6A3C               	clrf	(motor_RFID@UID+4)^0,c
  2143   00027A                     
  2144                           ;TAD_RFID.c: 402:                             displayUID(UID);
  2145   00027A  0E38               	movlw	low motor_RFID@UID
  2146   00027C  6E46               	movwf	displayUID@uid^0,c
  2147   00027E  EC86  F003         	call	_displayUID	;wreg free
  2148   000282                     
  2149                           ;TAD_RFID.c: 403:                             state = 2;
  2150   000282  0E02               	movlw	2
  2151   000284  6E33               	movwf	motor_RFID@state^0,c
  2152   000286  EFA1  F000         	goto	l3293
  2153   00028A                     l3363:
  2154   00028A  5032               	movf	motor_RFID@substate^0,w,c
  2155                           
  2156                           ; Switch size 1, requested type "simple"
  2157                           ; Number of cases is 3, Range of values is 0 to 2
  2158                           ; switch strategies available:
  2159                           ; Name         Instructions Cycles
  2160                           ; simple_byte           10     6 (average)
  2161                           ;	Chosen strategy is simple_byte
  2162   00028C  0A00               	xorlw	0	; case 0
  2163   00028E  B4D8               	btfsc	status,2,c
  2164   000290  EFB3  F000         	goto	l3299
  2165   000294  0A01               	xorlw	1	; case 1
  2166   000296  B4D8               	btfsc	status,2,c
  2167   000298  EFC3  F000         	goto	l3307
  2168   00029C  0A03               	xorlw	3	; case 2
  2169   00029E  B4D8               	btfsc	status,2,c
  2170   0002A0  EFF4  F000         	goto	l3327
  2171   0002A4  EF6B  F001         	goto	l360
  2172   0002A8                     l3365:
  2173                           
  2174                           ;TAD_RFID.c: 412:             MFRC522_Wr(0x01, 0x50);
  2175   0002A8  0E50               	movlw	80
  2176   0002AA  6E4B               	movwf	MFRC522_Wr@value^0,c
  2177   0002AC  0E01               	movlw	1
  2178   0002AE  ECEB  F005         	call	_MFRC522_Wr
  2179   0002B2                     
  2180                           ;TAD_RFID.c: 413:             state = 0;
  2181   0002B2  6A33               	clrf	motor_RFID@state^0,c
  2182                           
  2183                           ;TAD_RFID.c: 414:             break;
  2184   0002B4  EF6B  F001         	goto	l360
  2185   0002B8                     l3371:
  2186   0002B8  5033               	movf	motor_RFID@state^0,w,c
  2187                           
  2188                           ; Switch size 1, requested type "simple"
  2189                           ; Number of cases is 3, Range of values is 0 to 2
  2190                           ; switch strategies available:
  2191                           ; Name         Instructions Cycles
  2192                           ; simple_byte           10     6 (average)
  2193                           ;	Chosen strategy is simple_byte
  2194   0002BA  0A00               	xorlw	0	; case 0
  2195   0002BC  B4D8               	btfsc	status,2,c
  2196   0002BE  EFA4  F000         	goto	l3297
  2197   0002C2  0A01               	xorlw	1	; case 1
  2198   0002C4  B4D8               	btfsc	status,2,c
  2199   0002C6  EF45  F001         	goto	l3363
  2200   0002CA  0A03               	xorlw	3	; case 2
  2201   0002CC  B4D8               	btfsc	status,2,c
  2202   0002CE  EF54  F001         	goto	l3365
  2203   0002D2  EF6B  F001         	goto	l360
  2204   0002D6                     l360:
  2205   0002D6  0012               	return		;funcret
  2206   0002D8                     __end_of_motor_RFID:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _sprintf *****************
  2210 ;; Defined at:
  2211 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  s               2   32[COMRAM] PTR unsigned char 
  2214 ;;		 -> motor_RFID@buffer(100), 
  2215 ;;  fmt             2   34[COMRAM] PTR const unsigned char 
  2216 ;;		 -> STR_1(12), 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  f              11   41[COMRAM] struct _IO_FILE
  2219 ;;  ret             2   38[COMRAM] int 
  2220 ;;  ap              1   40[COMRAM] PTR void [1]
  2221 ;;		 -> ?_sprintf(2), 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2   32[COMRAM] int 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1
  2231 ;;      Params:         6       0       0
  2232 ;;      Locals:        14       0       0
  2233 ;;      Temps:          0       0       0
  2234 ;;      Totals:        20       0       0
  2235 ;;Total ram usage:       20 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 7
  2238 ;; This function calls:
  2239 ;;		_vfprintf
  2240 ;; This function is called by:
  2241 ;;		_motor_RFID
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text2
  2246   000E9E                     __ptext2:
  2247                           	callstack 0
  2248   000E9E                     _sprintf:
  2249                           	callstack 22
  2250   000E9E  0E64               	movlw	low (?_sprintf+4)
  2251   000EA0  6E68               	movwf	sprintf@ap^0,c
  2252   000EA2  C060  F069         	movff	sprintf@s,sprintf@f
  2253   000EA6  C061  F06A         	movff	sprintf@s+1,sprintf@f+1
  2254   000EAA  0E00               	movlw	0
  2255   000EAC  6E6C               	movwf	(sprintf@f+3)^0,c
  2256   000EAE  0E00               	movlw	0
  2257   000EB0  6E6B               	movwf	(sprintf@f+2)^0,c
  2258   000EB2  0E00               	movlw	0
  2259   000EB4  6E73               	movwf	(sprintf@f+10)^0,c
  2260   000EB6  0E00               	movlw	0
  2261   000EB8  6E72               	movwf	(sprintf@f+9)^0,c
  2262   000EBA  0E69               	movlw	low sprintf@f
  2263   000EBC  6E5A               	movwf	vfprintf@fp^0,c
  2264   000EBE  C062  F05B         	movff	sprintf@fmt,vfprintf@fmt
  2265   000EC2  C063  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2266   000EC6  0E68               	movlw	low sprintf@ap
  2267   000EC8  6E5D               	movwf	vfprintf@ap^0,c
  2268   000ECA  EC26  F007         	call	_vfprintf	;wreg free
  2269   000ECE  C05A  F066         	movff	?_vfprintf,sprintf@ret
  2270   000ED2  C05B  F067         	movff	?_vfprintf+1,sprintf@ret+1
  2271   000ED6  506B               	movf	(sprintf@f+2)^0,w,c
  2272   000ED8  2460               	addwf	sprintf@s^0,w,c
  2273   000EDA  6ED9               	movwf	fsr2l,c
  2274   000EDC  506C               	movf	(sprintf@f+3)^0,w,c
  2275   000EDE  2061               	addwfc	(sprintf@s+1)^0,w,c
  2276   000EE0  6EDA               	movwf	fsr2h,c
  2277   000EE2  6ADF               	clrf	indf2,c
  2278   000EE4  C066  F060         	movff	sprintf@ret,?_sprintf
  2279   000EE8  C067  F061         	movff	sprintf@ret+1,?_sprintf+1
  2280   000EEC  0012               	return		;funcret
  2281   000EEE                     __end_of_sprintf:
  2282                           	callstack 0
  2283                           
  2284 ;; *************** function _vfprintf *****************
  2285 ;; Defined at:
  2286 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
  2289 ;;		 -> sprintf@f(11), 
  2290 ;;  fmt             2   27[COMRAM] PTR const unsigned char 
  2291 ;;		 -> STR_1(12), 
  2292 ;;  ap              1   29[COMRAM] PTR PTR void 
  2293 ;;		 -> sprintf@ap(1), 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  cfmt            2   30[COMRAM] PTR unsigned char 
  2296 ;;		 -> STR_1(12), 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  2   26[COMRAM] int 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1
  2306 ;;      Params:         4       0       0
  2307 ;;      Locals:         2       0       0
  2308 ;;      Temps:          0       0       0
  2309 ;;      Totals:         6       0       0
  2310 ;;Total ram usage:        6 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 6
  2313 ;; This function calls:
  2314 ;;		_vfpfcnvrt
  2315 ;; This function is called by:
  2316 ;;		_sprintf
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text3
  2321   000E4C                     __ptext3:
  2322                           	callstack 0
  2323   000E4C                     _vfprintf:
  2324                           	callstack 22
  2325   000E4C                     
  2326                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2327   000E4C  C05B  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
  2328   000E50  C05C  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2329   000E54                     
  2330                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  2331   000E54  0E00               	movlw	0
  2332   000E56  6E1A               	movwf	(_nout+1)^0,c
  2333   000E58  0E00               	movlw	0
  2334   000E5A  6E19               	movwf	_nout^0,c
  2335                           
  2336                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2337   000E5C  EF3C  F007         	goto	l2915
  2338   000E60                     l2913:
  2339                           
  2340                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  2341   000E60  C05A  F04B         	movff	vfprintf@fp,vfpfcnvrt@fp
  2342   000E64  0E5E               	movlw	low vfprintf@cfmt
  2343   000E66  6E4C               	movwf	vfpfcnvrt@fmt^0,c
  2344   000E68  C05D  F04D         	movff	vfprintf@ap,vfpfcnvrt@ap
  2345   000E6C  EC84  F002         	call	_vfpfcnvrt	;wreg free
  2346   000E70  504B               	movf	?_vfpfcnvrt^0,w,c
  2347   000E72  2619               	addwf	_nout^0,f,c
  2348   000E74  504C               	movf	(?_vfpfcnvrt+1)^0,w,c
  2349   000E76  221A               	addwfc	(_nout+1)^0,f,c
  2350   000E78                     l2915:
  2351                           
  2352                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2353   000E78  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
  2354   000E7C  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2355   000E80                     	if	0	;tblptru may be non-zero
  2356   000E80                     	endif
  2357   000E80                     	if	0	;tblptru may be non-zero
  2358   000E80                     	endif
  2359   000E80  0008               	tblrd		*
  2360   000E82  50F5               	movf	tablat,w,c
  2361   000E84  0900               	iorlw	0
  2362   000E86  A4D8               	btfss	status,2,c
  2363   000E88  EF48  F007         	goto	u2211
  2364   000E8C  EF4A  F007         	goto	u2210
  2365   000E90                     u2211:
  2366   000E90  EF30  F007         	goto	l2913
  2367   000E94                     u2210:
  2368   000E94                     
  2369                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  2370   000E94  C019  F05A         	movff	_nout,?_vfprintf
  2371   000E98  C01A  F05B         	movff	_nout+1,?_vfprintf+1
  2372   000E9C  0012               	return		;funcret
  2373   000E9E                     __end_of_vfprintf:
  2374                           	callstack 0
  2375                           
  2376 ;; *************** function _vfpfcnvrt *****************
  2377 ;; Defined at:
  2378 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  2381 ;;		 -> sprintf@f(11), 
  2382 ;;  fmt             1   12[COMRAM] PTR PTR unsigned char 
  2383 ;;		 -> vfprintf@cfmt(2), 
  2384 ;;  ap              1   13[COMRAM] PTR PTR void 
  2385 ;;		 -> sprintf@ap(1), 
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  convarg         4   21[COMRAM] struct .
  2388 ;;  cp              2   19[COMRAM] PTR unsigned char 
  2389 ;;		 -> STR_1(12), 
  2390 ;;  cnt             2   17[COMRAM] int 
  2391 ;;  c               1   25[COMRAM] unsigned char 
  2392 ;;  done            1   16[COMRAM] _Bool 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2   11[COMRAM] int 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1
  2402 ;;      Params:         3       0       0
  2403 ;;      Locals:        10       0       0
  2404 ;;      Temps:          2       0       0
  2405 ;;      Totals:        15       0       0
  2406 ;;Total ram usage:       15 bytes
  2407 ;; Hardware stack levels used: 1
  2408 ;; Hardware stack levels required when called: 5
  2409 ;; This function calls:
  2410 ;;		___awdiv
  2411 ;;		___awmod
  2412 ;;		_abs
  2413 ;;		_fputc
  2414 ;; This function is called by:
  2415 ;;		_vfprintf
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text4
  2420   000508                     __ptext4:
  2421                           	callstack 0
  2422   000508                     _vfpfcnvrt:
  2423                           	callstack 22
  2424   000508                     
  2425                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  2426   000508  0E00               	movlw	0
  2427   00050A  6E52               	movwf	(vfpfcnvrt@cnt+1)^0,c
  2428   00050C  0E00               	movlw	0
  2429   00050E  6E51               	movwf	vfpfcnvrt@cnt^0,c
  2430   000510                     
  2431                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  2432   000510  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2433   000512  6ED9               	movwf	fsr2l,c
  2434   000514  6ADA               	clrf	fsr2h,c
  2435   000516  CFDE FFF6          	movff	postinc2,tblptrl
  2436   00051A  CFDD FFF7          	movff	postdec2,tblptrh
  2437   00051E                     	if	0	;tblptru may be non-zero
  2438   00051E                     	endif
  2439   00051E                     	if	0	;tblptru may be non-zero
  2440   00051E                     	endif
  2441   00051E  0008               	tblrd		*
  2442   000520  50F5               	movf	tablat,w,c
  2443   000522  0A25               	xorlw	37
  2444   000524  A4D8               	btfss	status,2,c
  2445   000526  EF97  F002         	goto	u1921
  2446   00052A  EF99  F002         	goto	u1920
  2447   00052E                     u1921:
  2448   00052E  EF6C  F003         	goto	l2781
  2449   000532                     u1920:
  2450   000532                     
  2451                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2452   000532  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2453   000534  6ED9               	movwf	fsr2l,c
  2454   000536  6ADA               	clrf	fsr2h,c
  2455   000538  2ADE               	incf	postinc2,f,c
  2456   00053A  0E00               	movlw	0
  2457   00053C  22DD               	addwfc	postdec2,f,c
  2458   00053E                     
  2459                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2460   00053E  0E00               	movlw	0
  2461   000540  6E1C               	movwf	(_width+1)^0,c
  2462   000542  0E00               	movlw	0
  2463   000544  6E1B               	movwf	_width^0,c
  2464   000546  C01B  F023         	movff	_width,_flags
  2465   00054A                     
  2466                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2467   00054A  681D               	setf	_prec^0,c
  2468   00054C  681E               	setf	(_prec+1)^0,c
  2469   00054E                     
  2470                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2471   00054E  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2472   000550  6ED9               	movwf	fsr2l,c
  2473   000552  6ADA               	clrf	fsr2h,c
  2474   000554  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2475   000558  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2476   00055C                     
  2477                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2478   00055C  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2479   000560  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2480   000564                     	if	0	;tblptru may be non-zero
  2481   000564                     	endif
  2482   000564                     	if	0	;tblptru may be non-zero
  2483   000564                     	endif
  2484   000564  0008               	tblrd		*
  2485   000566  50F5               	movf	tablat,w,c
  2486   000568  0A64               	xorlw	100
  2487   00056A  B4D8               	btfsc	status,2,c
  2488   00056C  EFBA  F002         	goto	u1931
  2489   000570  EFBC  F002         	goto	u1930
  2490   000574                     u1931:
  2491   000574  EFCA  F002         	goto	l2745
  2492   000578                     u1930:
  2493   000578  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2494   00057C  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2495   000580                     	if	0	;tblptru may be non-zero
  2496   000580                     	endif
  2497   000580                     	if	0	;tblptru may be non-zero
  2498   000580                     	endif
  2499   000580  0008               	tblrd		*
  2500   000582  50F5               	movf	tablat,w,c
  2501   000584  0A69               	xorlw	105
  2502   000586  A4D8               	btfss	status,2,c
  2503   000588  EFC8  F002         	goto	u1941
  2504   00058C  EFCA  F002         	goto	u1940
  2505   000590                     u1941:
  2506   000590  EF60  F003         	goto	l2775
  2507   000594                     u1940:
  2508   000594                     l2745:
  2509                           
  2510                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2511   000594  504D               	movf	vfpfcnvrt@ap^0,w,c
  2512   000596  6ED9               	movwf	fsr2l,c
  2513   000598  6ADA               	clrf	fsr2h,c
  2514   00059A  0E02               	movlw	2
  2515   00059C  26DF               	addwf	indf2,f,c
  2516   00059E  5CDF               	subwf	indf2,w,c
  2517   0005A0  6ED9               	movwf	fsr2l,c
  2518   0005A2  6ADA               	clrf	fsr2h,c
  2519   0005A4  CFDE F055          	movff	postinc2,vfpfcnvrt@convarg
  2520   0005A8  CFDE F056          	movff	postinc2,vfpfcnvrt@convarg+1
  2521   0005AC                     
  2522                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2523   0005AC  0E01               	movlw	1
  2524   0005AE  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2525   0005B0  6E4E               	movwf	??_vfpfcnvrt^0,c
  2526   0005B2  0E00               	movlw	0
  2527   0005B4  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2528   0005B6  6E4F               	movwf	(??_vfpfcnvrt+1)^0,c
  2529   0005B8  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2530   0005BA  6ED9               	movwf	fsr2l,c
  2531   0005BC  6ADA               	clrf	fsr2h,c
  2532   0005BE  C04E  FFDE         	movff	??_vfpfcnvrt,postinc2
  2533   0005C2  C04F  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2534   0005C6                     
  2535                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2536   0005C6  0E20               	movlw	32
  2537   0005C8  6E59               	movwf	vfpfcnvrt@c^0,c
  2538                           
  2539                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2540   0005CA  BE56               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2541   0005CC  EFEA  F002         	goto	u1951
  2542   0005D0  EFED  F002         	goto	u1950
  2543   0005D4                     u1951:
  2544   0005D4  0E01               	movlw	1
  2545   0005D6  EFEE  F002         	goto	u1960
  2546   0005DA                     u1950:
  2547   0005DA  0E00               	movlw	0
  2548   0005DC                     u1960:
  2549   0005DC  6E50               	movwf	vfpfcnvrt@done^0,c
  2550   0005DE                     l2751:
  2551                           
  2552                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2553   0005DE  0659               	decf	vfpfcnvrt@c^0,f,c
  2554   0005E0  5059               	movf	vfpfcnvrt@c^0,w,c
  2555   0005E2  0F80               	addlw	low _dbuf
  2556   0005E4  6ED9               	movwf	fsr2l,c
  2557   0005E6  6ADA               	clrf	fsr2h,c
  2558   0005E8  C055  F041         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2559   0005EC  C056  F042         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2560   0005F0  0E00               	movlw	0
  2561   0005F2  6E44               	movwf	(___awmod@divisor+1)^0,c
  2562   0005F4  0E0A               	movlw	10
  2563   0005F6  6E43               	movwf	___awmod@divisor^0,c
  2564   0005F8  EC94  F005         	call	___awmod	;wreg free
  2565   0005FC  C041  F047         	movff	?___awmod,abs@a
  2566   000600  C042  F048         	movff	?___awmod+1,abs@a+1
  2567   000604  EC02  F008         	call	_abs	;wreg free
  2568   000608  5047               	movf	?_abs^0,w,c
  2569   00060A  0F30               	addlw	48
  2570   00060C  6EDF               	movwf	indf2,c
  2571   00060E                     
  2572                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2573   00060E  C055  F041         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2574   000612  C056  F042         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2575   000616  0E00               	movlw	0
  2576   000618  6E44               	movwf	(___awdiv@divisor+1)^0,c
  2577   00061A  0E0A               	movlw	10
  2578   00061C  6E43               	movwf	___awdiv@divisor^0,c
  2579   00061E  ECD6  F004         	call	___awdiv	;wreg free
  2580   000622  C041  F055         	movff	?___awdiv,vfpfcnvrt@convarg
  2581   000626  C042  F056         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2582   00062A                     
  2583                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  2584   00062A  4A51               	infsnz	vfpfcnvrt@cnt^0,f,c
  2585   00062C  2A52               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  2586   00062E                     
  2587                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2588   00062E  5055               	movf	vfpfcnvrt@convarg^0,w,c
  2589   000630  1056               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2590   000632  B4D8               	btfsc	status,2,c
  2591   000634  EF1E  F003         	goto	u1971
  2592   000638  EF20  F003         	goto	u1970
  2593   00063C                     u1971:
  2594   00063C  EF28  F003         	goto	l2761
  2595   000640                     u1970:
  2596   000640  5059               	movf	vfpfcnvrt@c^0,w,c
  2597   000642  A4D8               	btfss	status,2,c
  2598   000644  EF26  F003         	goto	u1981
  2599   000648  EF28  F003         	goto	u1980
  2600   00064C                     u1981:
  2601   00064C  EFEF  F002         	goto	l2751
  2602   000650                     u1980:
  2603   000650                     l2761:
  2604                           
  2605                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2606   000650  5059               	movf	vfpfcnvrt@c^0,w,c
  2607   000652  B4D8               	btfsc	status,2,c
  2608   000654  EF2E  F003         	goto	u1991
  2609   000658  EF30  F003         	goto	u1990
  2610   00065C                     u1991:
  2611   00065C  EF51  F003         	goto	l2773
  2612   000660                     u1990:
  2613   000660  5050               	movf	vfpfcnvrt@done^0,w,c
  2614   000662  B4D8               	btfsc	status,2,c
  2615   000664  EF36  F003         	goto	u2001
  2616   000668  EF38  F003         	goto	u2000
  2617   00066C                     u2001:
  2618   00066C  EF51  F003         	goto	l2773
  2619   000670                     u2000:
  2620   000670                     
  2621                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2622   000670  0659               	decf	vfpfcnvrt@c^0,f,c
  2623   000672  5059               	movf	vfpfcnvrt@c^0,w,c
  2624   000674  0F80               	addlw	low _dbuf
  2625   000676  6ED9               	movwf	fsr2l,c
  2626   000678  6ADA               	clrf	fsr2h,c
  2627   00067A  0E2D               	movlw	45
  2628   00067C  6EDF               	movwf	indf2,c
  2629   00067E                     
  2630                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  2631   00067E  4A51               	infsnz	vfpfcnvrt@cnt^0,f,c
  2632   000680  2A52               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  2633   000682  EF51  F003         	goto	l2773
  2634   000686                     l2769:
  2635                           
  2636                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2637   000686  5059               	movf	vfpfcnvrt@c^0,w,c
  2638   000688  0F80               	addlw	low _dbuf
  2639   00068A  6ED9               	movwf	fsr2l,c
  2640   00068C  6ADA               	clrf	fsr2h,c
  2641   00068E  50DF               	movf	indf2,w,c
  2642   000690  6E4E               	movwf	??_vfpfcnvrt^0,c
  2643   000692  504E               	movf	??_vfpfcnvrt^0,w,c
  2644   000694  6E41               	movwf	fputc@c^0,c
  2645   000696  6A42               	clrf	(fputc@c+1)^0,c
  2646   000698  C04B  F043         	movff	vfpfcnvrt@fp,fputc@fp
  2647   00069C  EC37  F005         	call	_fputc	;wreg free
  2648   0006A0  2A59               	incf	vfpfcnvrt@c^0,f,c
  2649   0006A2                     l2773:
  2650                           
  2651                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2652   0006A2  0E20               	movlw	32
  2653   0006A4  1859               	xorwf	vfpfcnvrt@c^0,w,c
  2654   0006A6  A4D8               	btfss	status,2,c
  2655   0006A8  EF58  F003         	goto	u2011
  2656   0006AC  EF5A  F003         	goto	u2010
  2657   0006B0                     u2011:
  2658   0006B0  EF43  F003         	goto	l2769
  2659   0006B4                     u2010:
  2660   0006B4                     
  2661                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  2662   0006B4  C051  F04B         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  2663   0006B8  C052  F04C         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  2664   0006BC  EF85  F003         	goto	l1277
  2665   0006C0                     l2775:
  2666                           
  2667                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2668   0006C0  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2669   0006C2  6ED9               	movwf	fsr2l,c
  2670   0006C4  6ADA               	clrf	fsr2h,c
  2671   0006C6  2ADE               	incf	postinc2,f,c
  2672   0006C8  0E00               	movlw	0
  2673   0006CA  22DD               	addwfc	postdec2,f,c
  2674   0006CC                     
  2675                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  2676   0006CC  0E00               	movlw	0
  2677   0006CE  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
  2678   0006D0  0E00               	movlw	0
  2679   0006D2  6E4B               	movwf	?_vfpfcnvrt^0,c
  2680   0006D4  EF85  F003         	goto	l1277
  2681   0006D8                     l2781:
  2682                           
  2683                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2684   0006D8  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2685   0006DA  6ED9               	movwf	fsr2l,c
  2686   0006DC  6ADA               	clrf	fsr2h,c
  2687   0006DE  CFDE FFF6          	movff	postinc2,tblptrl
  2688   0006E2  CFDD FFF7          	movff	postdec2,tblptrh
  2689   0006E6                     	if	0	;tblptru may be non-zero
  2690   0006E6                     	endif
  2691   0006E6                     	if	0	;tblptru may be non-zero
  2692   0006E6                     	endif
  2693   0006E6  0008               	tblrd		*
  2694   0006E8  50F5               	movf	tablat,w,c
  2695   0006EA  6E41               	movwf	fputc@c^0,c
  2696   0006EC  6A42               	clrf	(fputc@c+1)^0,c
  2697   0006EE  C04B  F043         	movff	vfpfcnvrt@fp,fputc@fp
  2698   0006F2  EC37  F005         	call	_fputc	;wreg free
  2699   0006F6                     
  2700                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2701   0006F6  504C               	movf	vfpfcnvrt@fmt^0,w,c
  2702   0006F8  6ED9               	movwf	fsr2l,c
  2703   0006FA  6ADA               	clrf	fsr2h,c
  2704   0006FC  2ADE               	incf	postinc2,f,c
  2705   0006FE  0E00               	movlw	0
  2706   000700  22DD               	addwfc	postdec2,f,c
  2707   000702                     
  2708                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2709   000702  0E00               	movlw	0
  2710   000704  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
  2711   000706  0E01               	movlw	1
  2712   000708  6E4B               	movwf	?_vfpfcnvrt^0,c
  2713   00070A                     l1277:
  2714   00070A  0012               	return		;funcret
  2715   00070C                     __end_of_vfpfcnvrt:
  2716                           	callstack 0
  2717                           
  2718 ;; *************** function _fputc *****************
  2719 ;; Defined at:
  2720 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  c               2    1[COMRAM] int 
  2723 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  2724 ;;		 -> sprintf@f(11), 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  2    1[COMRAM] int 
  2729 ;; Registers used:
  2730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1
  2736 ;;      Params:         3       0       0
  2737 ;;      Locals:         0       0       0
  2738 ;;      Temps:          5       0       0
  2739 ;;      Totals:         8       0       0
  2740 ;;Total ram usage:        8 bytes
  2741 ;; Hardware stack levels used: 1
  2742 ;; Hardware stack levels required when called: 4
  2743 ;; This function calls:
  2744 ;;		_putch
  2745 ;; This function is called by:
  2746 ;;		_vfpfcnvrt
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text5
  2751   000A6E                     __ptext5:
  2752                           	callstack 0
  2753   000A6E                     _fputc:
  2754                           	callstack 22
  2755   000A6E  5043               	movf	fputc@fp^0,w,c
  2756   000A70  B4D8               	btfsc	status,2,c
  2757   000A72  EF3D  F005         	goto	u1861
  2758   000A76  EF3F  F005         	goto	u1860
  2759   000A7A                     u1861:
  2760   000A7A  EF47  F005         	goto	l2705
  2761   000A7E                     u1860:
  2762   000A7E  5043               	movf	fputc@fp^0,w,c
  2763   000A80  A4D8               	btfss	status,2,c
  2764   000A82  EF45  F005         	goto	u1871
  2765   000A86  EF47  F005         	goto	u1870
  2766   000A8A                     u1871:
  2767   000A8A  EF4C  F005         	goto	l2707
  2768   000A8E                     u1870:
  2769   000A8E                     l2705:
  2770   000A8E  5041               	movf	fputc@c^0,w,c
  2771   000A90  EC0B  F009         	call	_putch
  2772   000A94  EF93  F005         	goto	l1302
  2773   000A98                     l2707:
  2774   000A98  5043               	movf	fputc@fp^0,w,c
  2775   000A9A  6ED9               	movwf	fsr2l,c
  2776   000A9C  6ADA               	clrf	fsr2h,c
  2777   000A9E  0E09               	movlw	9
  2778   000AA0  26D9               	addwf	fsr2l,f,c
  2779   000AA2  50DE               	movf	postinc2,w,c
  2780   000AA4  10DE               	iorwf	postinc2,w,c
  2781   000AA6  B4D8               	btfsc	status,2,c
  2782   000AA8  EF58  F005         	goto	u1881
  2783   000AAC  EF5A  F005         	goto	u1880
  2784   000AB0                     u1881:
  2785   000AB0  EF73  F005         	goto	l2711
  2786   000AB4                     u1880:
  2787   000AB4  5043               	movf	fputc@fp^0,w,c
  2788   000AB6  6ED9               	movwf	fsr2l,c
  2789   000AB8  6ADA               	clrf	fsr2h,c
  2790   000ABA  0E09               	movlw	9
  2791   000ABC  26D9               	addwf	fsr2l,f,c
  2792   000ABE  5043               	movf	fputc@fp^0,w,c
  2793   000AC0  6EE1               	movwf	fsr1l,c
  2794   000AC2  6AE2               	clrf	fsr1h,c
  2795   000AC4  0E02               	movlw	2
  2796   000AC6  26E1               	addwf	fsr1l,f,c
  2797   000AC8  50DE               	movf	postinc2,w,c
  2798   000ACA  5CE6               	subwf	postinc1,w,c
  2799   000ACC  50E6               	movf	postinc1,w,c
  2800   000ACE  0A80               	xorlw	128
  2801   000AD0  6E48               	movwf	(??_fputc+4)^0,c
  2802   000AD2  50DE               	movf	postinc2,w,c
  2803   000AD4  0A80               	xorlw	128
  2804   000AD6  5848               	subwfb	(??_fputc+4)^0,w,c
  2805   000AD8  B0D8               	btfsc	status,0,c
  2806   000ADA  EF71  F005         	goto	u1891
  2807   000ADE  EF73  F005         	goto	u1890
  2808   000AE2                     u1891:
  2809   000AE2  EF93  F005         	goto	l1302
  2810   000AE6                     u1890:
  2811   000AE6                     l2711:
  2812   000AE6  5043               	movf	fputc@fp^0,w,c
  2813   000AE8  6ED9               	movwf	fsr2l,c
  2814   000AEA  6ADA               	clrf	fsr2h,c
  2815   000AEC  0E02               	movlw	2
  2816   000AEE  26D9               	addwf	fsr2l,f,c
  2817   000AF0  CFDE F044          	movff	postinc2,??_fputc
  2818   000AF4  CFDD F045          	movff	postdec2,??_fputc+1
  2819   000AF8  5043               	movf	fputc@fp^0,w,c
  2820   000AFA  6ED9               	movwf	fsr2l,c
  2821   000AFC  6ADA               	clrf	fsr2h,c
  2822   000AFE  CFDE F046          	movff	postinc2,??_fputc+2
  2823   000B02  CFDD F047          	movff	postdec2,??_fputc+3
  2824   000B06  5044               	movf	??_fputc^0,w,c
  2825   000B08  2446               	addwf	(??_fputc+2)^0,w,c
  2826   000B0A  6ED9               	movwf	fsr2l,c
  2827   000B0C  5045               	movf	(??_fputc+1)^0,w,c
  2828   000B0E  2047               	addwfc	(??_fputc+3)^0,w,c
  2829   000B10  6EDA               	movwf	fsr2h,c
  2830   000B12  C041  FFDF         	movff	fputc@c,indf2
  2831   000B16  5043               	movf	fputc@fp^0,w,c
  2832   000B18  6ED9               	movwf	fsr2l,c
  2833   000B1A  6ADA               	clrf	fsr2h,c
  2834   000B1C  0E02               	movlw	2
  2835   000B1E  26D9               	addwf	fsr2l,f,c
  2836   000B20  2ADE               	incf	postinc2,f,c
  2837   000B22  0E00               	movlw	0
  2838   000B24  22DD               	addwfc	postdec2,f,c
  2839   000B26                     l1302:
  2840   000B26  0012               	return		;funcret
  2841   000B28                     __end_of_fputc:
  2842                           	callstack 0
  2843                           
  2844 ;; *************** function _putch *****************
  2845 ;; Defined at:
  2846 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  c               1    wreg     unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  c               1    0[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1
  2860 ;;      Params:         0       0       0
  2861 ;;      Locals:         0       0       0
  2862 ;;      Temps:          0       0       0
  2863 ;;      Totals:         0       0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels used: 1
  2866 ;; Hardware stack levels required when called: 3
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_fputc
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text6
  2875   001216                     __ptext6:
  2876                           	callstack 0
  2877   001216                     _putch:
  2878                           	callstack 22
  2879   001216  0012               	return		;funcret
  2880   001218                     __end_of_putch:
  2881                           	callstack 0
  2882                           
  2883 ;; *************** function _abs *****************
  2884 ;; Defined at:
  2885 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  a               2    7[COMRAM] int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2    7[COMRAM] int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1
  2899 ;;      Params:         2       0       0
  2900 ;;      Locals:         0       0       0
  2901 ;;      Temps:          2       0       0
  2902 ;;      Totals:         4       0       0
  2903 ;;Total ram usage:        4 bytes
  2904 ;; Hardware stack levels used: 1
  2905 ;; Hardware stack levels required when called: 3
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_vfpfcnvrt
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text7
  2914   001004                     __ptext7:
  2915                           	callstack 0
  2916   001004                     _abs:
  2917                           	callstack 23
  2918   001004  BE48               	btfsc	(abs@a+1)^0,7,c
  2919   001006  EF07  F008         	goto	u1901
  2920   00100A  EF09  F008         	goto	u1900
  2921   00100E                     u1901:
  2922   00100E  EF0F  F008         	goto	l1287
  2923   001012                     u1900:
  2924   001012  C047  F047         	movff	abs@a,?_abs
  2925   001016  C048  F048         	movff	abs@a+1,?_abs+1
  2926   00101A  EF1B  F008         	goto	l1290
  2927   00101E                     l1287:
  2928   00101E  C047  F049         	movff	abs@a,??_abs
  2929   001022  C048  F04A         	movff	abs@a+1,??_abs+1
  2930   001026  1E49               	comf	??_abs^0,f,c
  2931   001028  1E4A               	comf	(??_abs+1)^0,f,c
  2932   00102A  4A49               	infsnz	??_abs^0,f,c
  2933   00102C  2A4A               	incf	(??_abs+1)^0,f,c
  2934   00102E  C049  F047         	movff	??_abs,?_abs
  2935   001032  C04A  F048         	movff	??_abs+1,?_abs+1
  2936   001036                     l1290:
  2937   001036  0012               	return		;funcret
  2938   001038                     __end_of_abs:
  2939                           	callstack 0
  2940                           
  2941 ;; *************** function ___awmod *****************
  2942 ;; Defined at:
  2943 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  dividend        2    1[COMRAM] int 
  2946 ;;  divisor         2    3[COMRAM] int 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  sign            1    6[COMRAM] unsigned char 
  2949 ;;  counter         1    5[COMRAM] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2    1[COMRAM] int 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1
  2959 ;;      Params:         4       0       0
  2960 ;;      Locals:         2       0       0
  2961 ;;      Temps:          0       0       0
  2962 ;;      Totals:         6       0       0
  2963 ;;Total ram usage:        6 bytes
  2964 ;; Hardware stack levels used: 1
  2965 ;; Hardware stack levels required when called: 3
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_vfpfcnvrt
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text8
  2974   000B28                     __ptext8:
  2975                           	callstack 0
  2976   000B28                     ___awmod:
  2977                           	callstack 23
  2978   000B28  6A46               	clrf	___awmod@sign^0,c
  2979   000B2A  BE42               	btfsc	(___awmod@dividend+1)^0,7,c
  2980   000B2C  EF9C  F005         	goto	u1800
  2981   000B30  EF9A  F005         	goto	u1801
  2982   000B34                     u1801:
  2983   000B34  EFA2  F005         	goto	l2673
  2984   000B38                     u1800:
  2985   000B38  6C41               	negf	___awmod@dividend^0,c
  2986   000B3A  1E42               	comf	(___awmod@dividend+1)^0,f,c
  2987   000B3C  B0D8               	btfsc	status,0,c
  2988   000B3E  2A42               	incf	(___awmod@dividend+1)^0,f,c
  2989   000B40  0E01               	movlw	1
  2990   000B42  6E46               	movwf	___awmod@sign^0,c
  2991   000B44                     l2673:
  2992   000B44  BE44               	btfsc	(___awmod@divisor+1)^0,7,c
  2993   000B46  EFA9  F005         	goto	u1810
  2994   000B4A  EFA7  F005         	goto	u1811
  2995   000B4E                     u1811:
  2996   000B4E  EFAD  F005         	goto	l2677
  2997   000B52                     u1810:
  2998   000B52  6C43               	negf	___awmod@divisor^0,c
  2999   000B54  1E44               	comf	(___awmod@divisor+1)^0,f,c
  3000   000B56  B0D8               	btfsc	status,0,c
  3001   000B58  2A44               	incf	(___awmod@divisor+1)^0,f,c
  3002   000B5A                     l2677:
  3003   000B5A  5043               	movf	___awmod@divisor^0,w,c
  3004   000B5C  1044               	iorwf	(___awmod@divisor+1)^0,w,c
  3005   000B5E  B4D8               	btfsc	status,2,c
  3006   000B60  EFB4  F005         	goto	u1821
  3007   000B64  EFB6  F005         	goto	u1820
  3008   000B68                     u1821:
  3009   000B68  EFDA  F005         	goto	l2693
  3010   000B6C                     u1820:
  3011   000B6C  0E01               	movlw	1
  3012   000B6E  6E45               	movwf	___awmod@counter^0,c
  3013   000B70  EFBE  F005         	goto	l2683
  3014   000B74                     l2681:
  3015   000B74  90D8               	bcf	status,0,c
  3016   000B76  3643               	rlcf	___awmod@divisor^0,f,c
  3017   000B78  3644               	rlcf	(___awmod@divisor+1)^0,f,c
  3018   000B7A  2A45               	incf	___awmod@counter^0,f,c
  3019   000B7C                     l2683:
  3020   000B7C  AE44               	btfss	(___awmod@divisor+1)^0,7,c
  3021   000B7E  EFC3  F005         	goto	u1831
  3022   000B82  EFC5  F005         	goto	u1830
  3023   000B86                     u1831:
  3024   000B86  EFBA  F005         	goto	l2681
  3025   000B8A                     u1830:
  3026   000B8A                     l2685:
  3027   000B8A  5043               	movf	___awmod@divisor^0,w,c
  3028   000B8C  5C41               	subwf	___awmod@dividend^0,w,c
  3029   000B8E  5044               	movf	(___awmod@divisor+1)^0,w,c
  3030   000B90  5842               	subwfb	(___awmod@dividend+1)^0,w,c
  3031   000B92  A0D8               	btfss	status,0,c
  3032   000B94  EFCE  F005         	goto	u1841
  3033   000B98  EFD0  F005         	goto	u1840
  3034   000B9C                     u1841:
  3035   000B9C  EFD4  F005         	goto	l2689
  3036   000BA0                     u1840:
  3037   000BA0  5043               	movf	___awmod@divisor^0,w,c
  3038   000BA2  5E41               	subwf	___awmod@dividend^0,f,c
  3039   000BA4  5044               	movf	(___awmod@divisor+1)^0,w,c
  3040   000BA6  5A42               	subwfb	(___awmod@dividend+1)^0,f,c
  3041   000BA8                     l2689:
  3042   000BA8  90D8               	bcf	status,0,c
  3043   000BAA  3244               	rrcf	(___awmod@divisor+1)^0,f,c
  3044   000BAC  3243               	rrcf	___awmod@divisor^0,f,c
  3045   000BAE  2E45               	decfsz	___awmod@counter^0,f,c
  3046   000BB0  EFC5  F005         	goto	l2685
  3047   000BB4                     l2693:
  3048   000BB4  5046               	movf	___awmod@sign^0,w,c
  3049   000BB6  B4D8               	btfsc	status,2,c
  3050   000BB8  EFE0  F005         	goto	u1851
  3051   000BBC  EFE2  F005         	goto	u1850
  3052   000BC0                     u1851:
  3053   000BC0  EFE6  F005         	goto	l2697
  3054   000BC4                     u1850:
  3055   000BC4  6C41               	negf	___awmod@dividend^0,c
  3056   000BC6  1E42               	comf	(___awmod@dividend+1)^0,f,c
  3057   000BC8  B0D8               	btfsc	status,0,c
  3058   000BCA  2A42               	incf	(___awmod@dividend+1)^0,f,c
  3059   000BCC                     l2697:
  3060   000BCC  C041  F041         	movff	___awmod@dividend,?___awmod
  3061   000BD0  C042  F042         	movff	___awmod@dividend+1,?___awmod+1
  3062   000BD4  0012               	return		;funcret
  3063   000BD6                     __end_of___awmod:
  3064                           	callstack 0
  3065                           
  3066 ;; *************** function ___awdiv *****************
  3067 ;; Defined at:
  3068 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  dividend        2    1[COMRAM] int 
  3071 ;;  divisor         2    3[COMRAM] int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  quotient        2    7[COMRAM] int 
  3074 ;;  sign            1    6[COMRAM] unsigned char 
  3075 ;;  counter         1    5[COMRAM] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  2    1[COMRAM] int 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1
  3085 ;;      Params:         4       0       0
  3086 ;;      Locals:         4       0       0
  3087 ;;      Temps:          0       0       0
  3088 ;;      Totals:         8       0       0
  3089 ;;Total ram usage:        8 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; Hardware stack levels required when called: 3
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_vfpfcnvrt
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text9
  3100   0009AC                     __ptext9:
  3101                           	callstack 0
  3102   0009AC                     ___awdiv:
  3103                           	callstack 23
  3104   0009AC  6A46               	clrf	___awdiv@sign^0,c
  3105   0009AE  BE44               	btfsc	(___awdiv@divisor+1)^0,7,c
  3106   0009B0  EFDE  F004         	goto	u1740
  3107   0009B4  EFDC  F004         	goto	u1741
  3108   0009B8                     u1741:
  3109   0009B8  EFE4  F004         	goto	l2629
  3110   0009BC                     u1740:
  3111   0009BC  6C43               	negf	___awdiv@divisor^0,c
  3112   0009BE  1E44               	comf	(___awdiv@divisor+1)^0,f,c
  3113   0009C0  B0D8               	btfsc	status,0,c
  3114   0009C2  2A44               	incf	(___awdiv@divisor+1)^0,f,c
  3115   0009C4  0E01               	movlw	1
  3116   0009C6  6E46               	movwf	___awdiv@sign^0,c
  3117   0009C8                     l2629:
  3118   0009C8  BE42               	btfsc	(___awdiv@dividend+1)^0,7,c
  3119   0009CA  EFEB  F004         	goto	u1750
  3120   0009CE  EFE9  F004         	goto	u1751
  3121   0009D2                     u1751:
  3122   0009D2  EFF1  F004         	goto	l2635
  3123   0009D6                     u1750:
  3124   0009D6  6C41               	negf	___awdiv@dividend^0,c
  3125   0009D8  1E42               	comf	(___awdiv@dividend+1)^0,f,c
  3126   0009DA  B0D8               	btfsc	status,0,c
  3127   0009DC  2A42               	incf	(___awdiv@dividend+1)^0,f,c
  3128   0009DE  0E01               	movlw	1
  3129   0009E0  1A46               	xorwf	___awdiv@sign^0,f,c
  3130   0009E2                     l2635:
  3131   0009E2  0E00               	movlw	0
  3132   0009E4  6E48               	movwf	(___awdiv@quotient+1)^0,c
  3133   0009E6  0E00               	movlw	0
  3134   0009E8  6E47               	movwf	___awdiv@quotient^0,c
  3135   0009EA  5043               	movf	___awdiv@divisor^0,w,c
  3136   0009EC  1044               	iorwf	(___awdiv@divisor+1)^0,w,c
  3137   0009EE  B4D8               	btfsc	status,2,c
  3138   0009F0  EFFC  F004         	goto	u1761
  3139   0009F4  EFFE  F004         	goto	u1760
  3140   0009F8                     u1761:
  3141   0009F8  EF26  F005         	goto	l2657
  3142   0009FC                     u1760:
  3143   0009FC  0E01               	movlw	1
  3144   0009FE  6E45               	movwf	___awdiv@counter^0,c
  3145   000A00  EF06  F005         	goto	l2643
  3146   000A04                     l2641:
  3147   000A04  90D8               	bcf	status,0,c
  3148   000A06  3643               	rlcf	___awdiv@divisor^0,f,c
  3149   000A08  3644               	rlcf	(___awdiv@divisor+1)^0,f,c
  3150   000A0A  2A45               	incf	___awdiv@counter^0,f,c
  3151   000A0C                     l2643:
  3152   000A0C  AE44               	btfss	(___awdiv@divisor+1)^0,7,c
  3153   000A0E  EF0B  F005         	goto	u1771
  3154   000A12  EF0D  F005         	goto	u1770
  3155   000A16                     u1771:
  3156   000A16  EF02  F005         	goto	l2641
  3157   000A1A                     u1770:
  3158   000A1A                     l2645:
  3159   000A1A  90D8               	bcf	status,0,c
  3160   000A1C  3647               	rlcf	___awdiv@quotient^0,f,c
  3161   000A1E  3648               	rlcf	(___awdiv@quotient+1)^0,f,c
  3162   000A20  5043               	movf	___awdiv@divisor^0,w,c
  3163   000A22  5C41               	subwf	___awdiv@dividend^0,w,c
  3164   000A24  5044               	movf	(___awdiv@divisor+1)^0,w,c
  3165   000A26  5842               	subwfb	(___awdiv@dividend+1)^0,w,c
  3166   000A28  A0D8               	btfss	status,0,c
  3167   000A2A  EF19  F005         	goto	u1781
  3168   000A2E  EF1B  F005         	goto	u1780
  3169   000A32                     u1781:
  3170   000A32  EF20  F005         	goto	l2653
  3171   000A36                     u1780:
  3172   000A36  5043               	movf	___awdiv@divisor^0,w,c
  3173   000A38  5E41               	subwf	___awdiv@dividend^0,f,c
  3174   000A3A  5044               	movf	(___awdiv@divisor+1)^0,w,c
  3175   000A3C  5A42               	subwfb	(___awdiv@dividend+1)^0,f,c
  3176   000A3E  8047               	bsf	___awdiv@quotient^0,0,c
  3177   000A40                     l2653:
  3178   000A40  90D8               	bcf	status,0,c
  3179   000A42  3244               	rrcf	(___awdiv@divisor+1)^0,f,c
  3180   000A44  3243               	rrcf	___awdiv@divisor^0,f,c
  3181   000A46  2E45               	decfsz	___awdiv@counter^0,f,c
  3182   000A48  EF0D  F005         	goto	l2645
  3183   000A4C                     l2657:
  3184   000A4C  5046               	movf	___awdiv@sign^0,w,c
  3185   000A4E  B4D8               	btfsc	status,2,c
  3186   000A50  EF2C  F005         	goto	u1791
  3187   000A54  EF2E  F005         	goto	u1790
  3188   000A58                     u1791:
  3189   000A58  EF32  F005         	goto	l2661
  3190   000A5C                     u1790:
  3191   000A5C  6C47               	negf	___awdiv@quotient^0,c
  3192   000A5E  1E48               	comf	(___awdiv@quotient+1)^0,f,c
  3193   000A60  B0D8               	btfsc	status,0,c
  3194   000A62  2A48               	incf	(___awdiv@quotient+1)^0,f,c
  3195   000A64                     l2661:
  3196   000A64  C047  F041         	movff	___awdiv@quotient,?___awdiv
  3197   000A68  C048  F042         	movff	___awdiv@quotient+1,?___awdiv+1
  3198   000A6C  0012               	return		;funcret
  3199   000A6E                     __end_of___awdiv:
  3200                           	callstack 0
  3201                           
  3202 ;; *************** function _displayUID *****************
  3203 ;; Defined at:
  3204 ;;		line 10 in file "TAD_TERMINAL.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  uid             1    6[COMRAM] PTR unsigned char 
  3207 ;;		 -> motor_RFID@UID(6), ReadRFID_NoCooperatiu@UID(6), 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  nibble          1   25[COMRAM] unsigned char 
  3210 ;;  i               2   23[COMRAM] int 
  3211 ;;  hexString      11    8[COMRAM] unsigned char [11]
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1
  3221 ;;      Params:         1       0       0
  3222 ;;      Locals:        18       0       0
  3223 ;;      Temps:          1       0       0
  3224 ;;      Totals:        20       0       0
  3225 ;;Total ram usage:       20 bytes
  3226 ;; Hardware stack levels used: 1
  3227 ;; Hardware stack levels required when called: 5
  3228 ;; This function calls:
  3229 ;;		_Terminal_SendString
  3230 ;; This function is called by:
  3231 ;;		_motor_RFID
  3232 ;;		_ReadRFID_NoCooperatiu
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text10
  3237   00070C                     __ptext10:
  3238                           	callstack 0
  3239   00070C                     _displayUID:
  3240                           	callstack 24
  3241   00070C                     
  3242                           ;TAD_TERMINAL.c: 11:     char hexString[11];;TAD_TERMINAL.c: 12:     for (int i = 0; i <
      +                           5; i++) {
  3243   00070C  0E00               	movlw	0
  3244   00070E  6E58               	movwf	(displayUID@i+1)^0,c
  3245   000710  0E00               	movlw	0
  3246   000712  6E57               	movwf	displayUID@i^0,c
  3247   000714                     l3013:
  3248                           
  3249                           ;TAD_TERMINAL.c: 13:         unsigned char nibble = (uid[i] >> 4) & 0x0F;
  3250   000714  5046               	movf	displayUID@uid^0,w,c
  3251   000716  2457               	addwf	displayUID@i^0,w,c
  3252   000718  6ED9               	movwf	fsr2l,c
  3253   00071A  6ADA               	clrf	fsr2h,c
  3254   00071C  50DF               	movf	indf2,w,c
  3255   00071E  6E47               	movwf	??_displayUID^0,c
  3256   000720  3847               	swapf	??_displayUID^0,w,c
  3257   000722  0B0F               	andlw	15
  3258   000724  0B0F               	andlw	15
  3259   000726  6E59               	movwf	displayUID@nibble^0,c
  3260   000728                     
  3261                           ;TAD_TERMINAL.c: 14:         hexString[i*2] = (nibble < 10) ? nibble + '0' : nibble - 10
      +                           + 'A';
  3262   000728  0E09               	movlw	9
  3263   00072A  6459               	cpfsgt	displayUID@nibble^0,c
  3264   00072C  EF9A  F003         	goto	u2301
  3265   000730  EF9C  F003         	goto	u2300
  3266   000734                     u2301:
  3267   000734  EFA4  F003         	goto	l3019
  3268   000738                     u2300:
  3269   000738  0E37               	movlw	55
  3270   00073A  2459               	addwf	displayUID@nibble^0,w,c
  3271   00073C  6E53               	movwf	_displayUID$822^0,c
  3272   00073E  6A54               	clrf	(_displayUID$822+1)^0,c
  3273   000740  0E00               	movlw	0
  3274   000742  2254               	addwfc	(_displayUID$822+1)^0,f,c
  3275   000744  EFAA  F003         	goto	l3021
  3276   000748                     l3019:
  3277   000748  0E30               	movlw	48
  3278   00074A  2459               	addwf	displayUID@nibble^0,w,c
  3279   00074C  6E53               	movwf	_displayUID$822^0,c
  3280   00074E  6A54               	clrf	(_displayUID$822+1)^0,c
  3281   000750  0E00               	movlw	0
  3282   000752  2254               	addwfc	(_displayUID$822+1)^0,f,c
  3283   000754                     l3021:
  3284   000754  5057               	movf	displayUID@i^0,w,c
  3285   000756  0D02               	mullw	2
  3286   000758  50F3               	movf	243,w,c
  3287   00075A  0F48               	addlw	low displayUID@hexString
  3288   00075C  6ED9               	movwf	fsr2l,c
  3289   00075E  6ADA               	clrf	fsr2h,c
  3290   000760  C053  FFDF         	movff	_displayUID$822,indf2
  3291   000764                     
  3292                           ;TAD_TERMINAL.c: 15:         nibble = uid[i] & 0x0F;
  3293   000764  5046               	movf	displayUID@uid^0,w,c
  3294   000766  2457               	addwf	displayUID@i^0,w,c
  3295   000768  6ED9               	movwf	fsr2l,c
  3296   00076A  6ADA               	clrf	fsr2h,c
  3297   00076C  50DF               	movf	indf2,w,c
  3298   00076E  0B0F               	andlw	15
  3299   000770  6E59               	movwf	displayUID@nibble^0,c
  3300   000772                     
  3301                           ;TAD_TERMINAL.c: 16:         hexString[i*2 + 1] = (nibble < 10) ? nibble + '0' : nibble 
      +                          - 10 + 'A';
  3302   000772  0E09               	movlw	9
  3303   000774  6459               	cpfsgt	displayUID@nibble^0,c
  3304   000776  EFBF  F003         	goto	u2311
  3305   00077A  EFC1  F003         	goto	u2310
  3306   00077E                     u2311:
  3307   00077E  EFC9  F003         	goto	l3029
  3308   000782                     u2310:
  3309   000782  0E37               	movlw	55
  3310   000784  2459               	addwf	displayUID@nibble^0,w,c
  3311   000786  6E55               	movwf	_displayUID$823^0,c
  3312   000788  6A56               	clrf	(_displayUID$823+1)^0,c
  3313   00078A  0E00               	movlw	0
  3314   00078C  2256               	addwfc	(_displayUID$823+1)^0,f,c
  3315   00078E  EFCF  F003         	goto	l3031
  3316   000792                     l3029:
  3317   000792  0E30               	movlw	48
  3318   000794  2459               	addwf	displayUID@nibble^0,w,c
  3319   000796  6E55               	movwf	_displayUID$823^0,c
  3320   000798  6A56               	clrf	(_displayUID$823+1)^0,c
  3321   00079A  0E00               	movlw	0
  3322   00079C  2256               	addwfc	(_displayUID$823+1)^0,f,c
  3323   00079E                     l3031:
  3324   00079E  5057               	movf	displayUID@i^0,w,c
  3325   0007A0  0D02               	mullw	2
  3326   0007A2  CFF3 F047          	movff	prodl,??_displayUID
  3327   0007A6  0E01               	movlw	1
  3328   0007A8  2647               	addwf	??_displayUID^0,f,c
  3329   0007AA  5047               	movf	??_displayUID^0,w,c
  3330   0007AC  0F48               	addlw	low displayUID@hexString
  3331   0007AE  6ED9               	movwf	fsr2l,c
  3332   0007B0  6ADA               	clrf	fsr2h,c
  3333   0007B2  C055  FFDF         	movff	_displayUID$823,indf2
  3334   0007B6                     
  3335                           ;TAD_TERMINAL.c: 17:     }
  3336   0007B6  4A57               	infsnz	displayUID@i^0,f,c
  3337   0007B8  2A58               	incf	(displayUID@i+1)^0,f,c
  3338   0007BA  BE58               	btfsc	(displayUID@i+1)^0,7,c
  3339   0007BC  EFE9  F003         	goto	u2321
  3340   0007C0  5058               	movf	(displayUID@i+1)^0,w,c
  3341   0007C2  E109               	bnz	u2320
  3342   0007C4  0E05               	movlw	5
  3343   0007C6  5C57               	subwf	displayUID@i^0,w,c
  3344   0007C8  A0D8               	btfss	status,0,c
  3345   0007CA  EFE9  F003         	goto	u2321
  3346   0007CE  EFEB  F003         	goto	u2320
  3347   0007D2                     u2321:
  3348   0007D2  EF8A  F003         	goto	l3013
  3349   0007D6                     u2320:
  3350   0007D6                     
  3351                           ;TAD_TERMINAL.c: 18:     hexString[10] = '\0';
  3352   0007D6  6A52               	clrf	(displayUID@hexString+10)^0,c
  3353   0007D8                     
  3354                           ;TAD_TERMINAL.c: 20:     Terminal_SendString("UID: ");
  3355   0007D8  0EF9               	movlw	low STR_2
  3356   0007DA  6E44               	movwf	Terminal_SendString@str^0,c
  3357   0007DC  0E1F               	movlw	high STR_2
  3358   0007DE  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3359   0007E0  EC90  F006         	call	_Terminal_SendString	;wreg free
  3360                           
  3361                           ;TAD_TERMINAL.c: 21:     Terminal_SendString(hexString);
  3362   0007E4  0E48               	movlw	low displayUID@hexString
  3363   0007E6  6E44               	movwf	Terminal_SendString@str^0,c
  3364   0007E8  6A45               	clrf	(Terminal_SendString@str+1)^0,c
  3365   0007EA  EC90  F006         	call	_Terminal_SendString	;wreg free
  3366                           
  3367                           ;TAD_TERMINAL.c: 22:     Terminal_SendString("\n");
  3368   0007EE  0EA6               	movlw	low (STR_4+16)
  3369   0007F0  6E44               	movwf	Terminal_SendString@str^0,c
  3370   0007F2  0E1F               	movlw	high (STR_4+16)
  3371   0007F4  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3372   0007F6  EC90  F006         	call	_Terminal_SendString	;wreg free
  3373   0007FA  0012               	return		;funcret
  3374   0007FC                     __end_of_displayUID:
  3375                           	callstack 0
  3376                           
  3377 ;; *************** function _motorTerminal *****************
  3378 ;; Defined at:
  3379 ;;		line 78 in file "TAD_TERMINAL.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1
  3393 ;;      Params:         0       0       0
  3394 ;;      Locals:         0       0       0
  3395 ;;      Temps:          0       0       0
  3396 ;;      Totals:         0       0       0
  3397 ;;Total ram usage:        0 bytes
  3398 ;; Hardware stack levels used: 1
  3399 ;; Hardware stack levels required when called: 6
  3400 ;; This function calls:
  3401 ;;		_Terminal_RXAvailable
  3402 ;;		_Terminal_ReceiveChar
  3403 ;;		_Terminal_SendString
  3404 ;;		_initTeclado
  3405 ;;		_showMenu
  3406 ;; This function is called by:
  3407 ;;		_main
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text11
  3412   0007FC                     __ptext11:
  3413                           	callstack 0
  3414   0007FC                     _motorTerminal:
  3415                           	callstack 24
  3416   0007FC                     
  3417                           ;TAD_TERMINAL.c: 79:  static char state = 0;;TAD_TERMINAL.c: 81:  switch(state) {
  3418   0007FC  EF68  F004         	goto	l3243
  3419   000800                     l3201:
  3420                           
  3421                           ;TAD_TERMINAL.c: 83:    if (Terminal_ReceiveChar() == 0x1B) {
  3422   000800  EC09  F009         	call	_Terminal_ReceiveChar	;wreg free
  3423   000804  0A1B               	xorlw	27
  3424   000806  A4D8               	btfss	status,2,c
  3425   000808  EF08  F004         	goto	u2541
  3426   00080C  EF0A  F004         	goto	u2540
  3427   000810                     u2541:
  3428   000810  EF0E  F004         	goto	l3207
  3429   000814                     u2540:
  3430   000814                     
  3431                           ;TAD_TERMINAL.c: 84:     showMenu();
  3432   000814  ECCA  F006         	call	_showMenu	;wreg free
  3433   000818                     
  3434                           ;TAD_TERMINAL.c: 85:     state = 1;
  3435   000818  0E01               	movlw	1
  3436   00081A  6E24               	movwf	motorTerminal@state^0,c
  3437   00081C                     l3207:
  3438                           
  3439                           ;TAD_TERMINAL.c: 87:    if (hashtag_pressed == 1){
  3440   00081C  0425               	decf	_hashtag_pressed^0,w,c
  3441   00081E  A4D8               	btfss	status,2,c
  3442   000820  EF14  F004         	goto	u2551
  3443   000824  EF16  F004         	goto	u2550
  3444   000828                     u2551:
  3445   000828  EF73  F004         	goto	l554
  3446   00082C                     u2550:
  3447   00082C                     
  3448                           ;TAD_TERMINAL.c: 88:     showMenu();
  3449   00082C  ECCA  F006         	call	_showMenu	;wreg free
  3450   000830                     
  3451                           ;TAD_TERMINAL.c: 89:     state = 1;
  3452   000830  0E01               	movlw	1
  3453   000832  6E24               	movwf	motorTerminal@state^0,c
  3454   000834                     
  3455                           ;TAD_TERMINAL.c: 90:     hashtag_pressed = 0;
  3456   000834  6A25               	clrf	_hashtag_pressed^0,c
  3457   000836  EF73  F004         	goto	l554
  3458   00083A                     l3215:
  3459                           
  3460                           ;TAD_TERMINAL.c: 94:    if(Terminal_RXAvailable() == 1){
  3461   00083A  ECC7  F008         	call	_Terminal_RXAvailable	;wreg free
  3462   00083E  06E8               	decf	wreg,f,c
  3463   000840  A4D8               	btfss	status,2,c
  3464   000842  EF25  F004         	goto	u2561
  3465   000846  EF27  F004         	goto	u2560
  3466   00084A                     u2561:
  3467   00084A  EF73  F004         	goto	l554
  3468   00084E                     u2560:
  3469   00084E                     
  3470                           ;TAD_TERMINAL.c: 95:     initTeclado();
  3471   00084E  ECB1  F008         	call	_initTeclado	;wreg free
  3472   000852                     
  3473                           ;TAD_TERMINAL.c: 96:     if (Terminal_ReceiveChar() == '1') {
  3474   000852  EC09  F009         	call	_Terminal_ReceiveChar	;wreg free
  3475   000856  0A31               	xorlw	49
  3476   000858  A4D8               	btfss	status,2,c
  3477   00085A  EF31  F004         	goto	u2571
  3478   00085E  EF33  F004         	goto	u2570
  3479   000862                     u2571:
  3480   000862  EF3C  F004         	goto	l3225
  3481   000866                     u2570:
  3482   000866                     
  3483                           ;TAD_TERMINAL.c: 97:      Terminal_SendString("Has pulsado 1");
  3484   000866  0EBA               	movlw	low STR_12
  3485   000868  6E44               	movwf	Terminal_SendString@str^0,c
  3486   00086A  0E1F               	movlw	high STR_12
  3487   00086C  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3488   00086E  EC90  F006         	call	_Terminal_SendString	;wreg free
  3489   000872                     l3223:
  3490                           
  3491                           ;TAD_TERMINAL.c: 99:      state = 0;
  3492   000872  6A24               	clrf	motorTerminal@state^0,c
  3493                           
  3494                           ;TAD_TERMINAL.c: 100:     }
  3495   000874  EF73  F004         	goto	l554
  3496   000878                     l3225:
  3497   000878  EC09  F009         	call	_Terminal_ReceiveChar	;wreg free
  3498   00087C  0A32               	xorlw	50
  3499   00087E  A4D8               	btfss	status,2,c
  3500   000880  EF44  F004         	goto	u2581
  3501   000884  EF46  F004         	goto	u2580
  3502   000888                     u2581:
  3503   000888  EF4E  F004         	goto	l3231
  3504   00088C                     u2580:
  3505   00088C                     
  3506                           ;TAD_TERMINAL.c: 102:      Terminal_SendString("Has pulsado 2");
  3507   00088C  0EC8               	movlw	low STR_13
  3508   00088E  6E44               	movwf	Terminal_SendString@str^0,c
  3509   000890  0E1F               	movlw	high STR_13
  3510   000892  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3511   000894  EC90  F006         	call	_Terminal_SendString	;wreg free
  3512   000898  EF39  F004         	goto	l3223
  3513   00089C                     l3231:
  3514   00089C  EC09  F009         	call	_Terminal_ReceiveChar	;wreg free
  3515   0008A0  0A33               	xorlw	51
  3516   0008A2  A4D8               	btfss	status,2,c
  3517   0008A4  EF56  F004         	goto	u2591
  3518   0008A8  EF58  F004         	goto	u2590
  3519   0008AC                     u2591:
  3520   0008AC  EF60  F004         	goto	l3237
  3521   0008B0                     u2590:
  3522   0008B0                     
  3523                           ;TAD_TERMINAL.c: 107:      Terminal_SendString("Has pulsado 3");
  3524   0008B0  0ED6               	movlw	low STR_14
  3525   0008B2  6E44               	movwf	Terminal_SendString@str^0,c
  3526   0008B4  0E1F               	movlw	high STR_14
  3527   0008B6  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3528   0008B8  EC90  F006         	call	_Terminal_SendString	;wreg free
  3529   0008BC  EF39  F004         	goto	l3223
  3530   0008C0                     l3237:
  3531                           
  3532                           ;TAD_TERMINAL.c: 112:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  3533   0008C0  0E09               	movlw	low STR_15
  3534   0008C2  6E44               	movwf	Terminal_SendString@str^0,c
  3535   0008C4  0E1F               	movlw	high STR_15
  3536   0008C6  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3537   0008C8  EC90  F006         	call	_Terminal_SendString	;wreg free
  3538   0008CC  EF39  F004         	goto	l3223
  3539   0008D0                     l3243:
  3540   0008D0  5024               	movf	motorTerminal@state^0,w,c
  3541                           
  3542                           ; Switch size 1, requested type "simple"
  3543                           ; Number of cases is 2, Range of values is 0 to 1
  3544                           ; switch strategies available:
  3545                           ; Name         Instructions Cycles
  3546                           ; simple_byte            7     4 (average)
  3547                           ;	Chosen strategy is simple_byte
  3548   0008D2  0A00               	xorlw	0	; case 0
  3549   0008D4  B4D8               	btfsc	status,2,c
  3550   0008D6  EF00  F004         	goto	l3201
  3551   0008DA  0A01               	xorlw	1	; case 1
  3552   0008DC  B4D8               	btfsc	status,2,c
  3553   0008DE  EF1D  F004         	goto	l3215
  3554   0008E2  EF73  F004         	goto	l554
  3555   0008E6                     l554:
  3556   0008E6  0012               	return		;funcret
  3557   0008E8                     __end_of_motorTerminal:
  3558                           	callstack 0
  3559                           
  3560 ;; *************** function _showMenu *****************
  3561 ;; Defined at:
  3562 ;;		line 62 in file "TAD_TERMINAL.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1
  3576 ;;      Params:         0       0       0
  3577 ;;      Locals:         0       0       0
  3578 ;;      Temps:          0       0       0
  3579 ;;      Totals:         0       0       0
  3580 ;;Total ram usage:        0 bytes
  3581 ;; Hardware stack levels used: 1
  3582 ;; Hardware stack levels required when called: 5
  3583 ;; This function calls:
  3584 ;;		_Terminal_SendString
  3585 ;; This function is called by:
  3586 ;;		_motorTerminal
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text12
  3591   000D94                     __ptext12:
  3592                           	callstack 0
  3593   000D94                     _showMenu:
  3594                           	callstack 24
  3595   000D94                     
  3596                           ;TAD_TERMINAL.c: 63:  Terminal_SendString("---------------\r\n");
  3597   000D94  0E96               	movlw	low STR_4
  3598   000D96  6E44               	movwf	Terminal_SendString@str^0,c
  3599   000D98  0E1F               	movlw	high STR_4
  3600   000D9A  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3601   000D9C  EC90  F006         	call	_Terminal_SendString	;wreg free
  3602                           
  3603                           ;TAD_TERMINAL.c: 64:  Terminal_SendString("MenÃº principal\r\n");
  3604   000DA0  0EA8               	movlw	low STR_5
  3605   000DA2  6E44               	movwf	Terminal_SendString@str^0,c
  3606   000DA4  0E1F               	movlw	high STR_5
  3607   000DA6  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3608   000DA8  EC90  F006         	call	_Terminal_SendString	;wreg free
  3609                           
  3610                           ;TAD_TERMINAL.c: 65:  Terminal_SendString("---------------\r\n");
  3611   000DAC  0E96               	movlw	low STR_4
  3612   000DAE  6E44               	movwf	Terminal_SendString@str^0,c
  3613   000DB0  0E1F               	movlw	high STR_4
  3614   000DB2  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3615   000DB4  EC90  F006         	call	_Terminal_SendString	;wreg free
  3616                           
  3617                           ;TAD_TERMINAL.c: 66:  Terminal_SendString("Tria una opciÃ³:\r\n");
  3618   000DB8  0E83               	movlw	low STR_7
  3619   000DBA  6E44               	movwf	Terminal_SendString@str^0,c
  3620   000DBC  0E1F               	movlw	high STR_7
  3621   000DBE  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3622   000DC0  EC90  F006         	call	_Terminal_SendString	;wreg free
  3623                           
  3624                           ;TAD_TERMINAL.c: 67:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  3625   000DC4  0E68               	movlw	low STR_8
  3626   000DC6  6E44               	movwf	Terminal_SendString@str^0,c
  3627   000DC8  0E1F               	movlw	high STR_8
  3628   000DCA  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3629   000DCC  EC90  F006         	call	_Terminal_SendString	;wreg free
  3630                           
  3631                           ;TAD_TERMINAL.c: 68:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  3632   000DD0  0E4B               	movlw	low STR_9
  3633   000DD2  6E44               	movwf	Terminal_SendString@str^0,c
  3634   000DD4  0E1F               	movlw	high STR_9
  3635   000DD6  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3636   000DD8  EC90  F006         	call	_Terminal_SendString	;wreg free
  3637                           
  3638                           ;TAD_TERMINAL.c: 69:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  3639   000DDC  0E2A               	movlw	low STR_10
  3640   000DDE  6E44               	movwf	Terminal_SendString@str^0,c
  3641   000DE0  0E1F               	movlw	high STR_10
  3642   000DE2  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3643   000DE4  EC90  F006         	call	_Terminal_SendString	;wreg free
  3644                           
  3645                           ;TAD_TERMINAL.c: 70:  Terminal_SendString("OpciÃ³: ");
  3646   000DE8  0EF0               	movlw	low STR_11
  3647   000DEA  6E44               	movwf	Terminal_SendString@str^0,c
  3648   000DEC  0E1F               	movlw	high STR_11
  3649   000DEE  6E45               	movwf	(Terminal_SendString@str+1)^0,c
  3650   000DF0  EC90  F006         	call	_Terminal_SendString	;wreg free
  3651   000DF4  0012               	return		;funcret
  3652   000DF6                     __end_of_showMenu:
  3653                           	callstack 0
  3654                           
  3655 ;; *************** function _Terminal_SendString *****************
  3656 ;; Defined at:
  3657 ;;		line 55 in file "TAD_TERMINAL.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  str             2    4[COMRAM] PTR const unsigned char 
  3660 ;;		 -> STR_15(33), STR_14(14), STR_13(14), STR_12(14), 
  3661 ;;		 -> STR_11(9), STR_10(33), STR_9(29), STR_8(27), 
  3662 ;;		 -> STR_7(19), STR_6(18), STR_5(18), STR_4(18), 
  3663 ;;		 -> STR_3(2), STR_2(6), displayUID@hexString(11), 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;		None
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1
  3675 ;;      Params:         2       0       0
  3676 ;;      Locals:         0       0       0
  3677 ;;      Temps:          0       0       0
  3678 ;;      Totals:         2       0       0
  3679 ;;Total ram usage:        2 bytes
  3680 ;; Hardware stack levels used: 1
  3681 ;; Hardware stack levels required when called: 4
  3682 ;; This function calls:
  3683 ;;		_Terminal_SendChar
  3684 ;;		_Terminal_TXAvailable
  3685 ;; This function is called by:
  3686 ;;		_displayUID
  3687 ;;		_showMenu
  3688 ;;		_motorTerminal
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text13
  3693   000D20                     __ptext13:
  3694                           	callstack 0
  3695   000D20                     _Terminal_SendString:
  3696                           	callstack 24
  3697   000D20                     
  3698                           ;TAD_TERMINAL.c: 56:  while (*str) {
  3699   000D20  EFB1  F006         	goto	l2907
  3700   000D24                     l2901:
  3701   000D24  EC8A  F008         	call	_Terminal_TXAvailable	;wreg free
  3702   000D28  5041               	movf	?_Terminal_TXAvailable^0,w,c
  3703   000D2A  1042               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  3704   000D2C  B4D8               	btfsc	status,2,c
  3705   000D2E  EF9B  F006         	goto	u2171
  3706   000D32  EF9D  F006         	goto	u2170
  3707   000D36                     u2171:
  3708   000D36  EF92  F006         	goto	l2901
  3709   000D3A                     u2170:
  3710   000D3A                     
  3711                           ;TAD_TERMINAL.c: 58:   Terminal_SendChar(*str++);
  3712   000D3A  C044  FFF6         	movff	Terminal_SendString@str,tblptrl
  3713   000D3E  C045  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3714   000D42  6AF8               	clrf	tblptru,c
  3715   000D44  0E01               	movlw	(high __ramtop+-1)
  3716   000D46  64F7               	cpfsgt	tblptrh,c
  3717   000D48  D003               	bra	u2187
  3718   000D4A  0008               	tblrd		*
  3719   000D4C  50F5               	movf	tablat,w,c
  3720   000D4E  D005               	bra	u2180
  3721   000D50                     u2187:
  3722   000D50  CFF6 FFE9          	movff	tblptrl,fsr0l
  3723   000D54  CFF7 FFEA          	movff	tblptrh,fsr0h
  3724   000D58  50EF               	movf	indf0,w,c
  3725   000D5A                     u2180:
  3726   000D5A  ECFB  F008         	call	_Terminal_SendChar
  3727   000D5E  4A44               	infsnz	Terminal_SendString@str^0,f,c
  3728   000D60  2A45               	incf	(Terminal_SendString@str+1)^0,f,c
  3729   000D62                     l2907:
  3730                           
  3731                           ;TAD_TERMINAL.c: 56:  while (*str) {
  3732   000D62  C044  FFF6         	movff	Terminal_SendString@str,tblptrl
  3733   000D66  C045  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3734   000D6A  6AF8               	clrf	tblptru,c
  3735   000D6C  0E01               	movlw	(high __ramtop+-1)
  3736   000D6E  64F7               	cpfsgt	tblptrh,c
  3737   000D70  D003               	bra	u2197
  3738   000D72  0008               	tblrd		*
  3739   000D74  50F5               	movf	tablat,w,c
  3740   000D76  D005               	bra	u2190
  3741   000D78                     u2197:
  3742   000D78  CFF6 FFE9          	movff	tblptrl,fsr0l
  3743   000D7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3744   000D80  50EF               	movf	indf0,w,c
  3745   000D82                     u2190:
  3746   000D82  0900               	iorlw	0
  3747   000D84  A4D8               	btfss	status,2,c
  3748   000D86  EFC7  F006         	goto	u2201
  3749   000D8A  EFC9  F006         	goto	u2200
  3750   000D8E                     u2201:
  3751   000D8E  EF92  F006         	goto	l2901
  3752   000D92                     u2200:
  3753   000D92  0012               	return		;funcret
  3754   000D94                     __end_of_Terminal_SendString:
  3755                           	callstack 0
  3756                           
  3757 ;; *************** function _Terminal_TXAvailable *****************
  3758 ;; Defined at:
  3759 ;;		line 35 in file "TAD_TERMINAL.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2    1[COMRAM] int 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1
  3773 ;;      Params:         2       0       0
  3774 ;;      Locals:         0       0       0
  3775 ;;      Temps:          1       0       0
  3776 ;;      Totals:         3       0       0
  3777 ;;Total ram usage:        3 bytes
  3778 ;; Hardware stack levels used: 1
  3779 ;; Hardware stack levels required when called: 3
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_Terminal_SendString
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text14
  3788   001114                     __ptext14:
  3789                           	callstack 0
  3790   001114                     _Terminal_TXAvailable:
  3791                           	callstack 24
  3792   001114                     
  3793                           ;TAD_TERMINAL.c: 36:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  3794   001114  B89E               	btfsc	158,4,c	;volatile
  3795   001116  EF8F  F008         	goto	u1911
  3796   00111A  EF93  F008         	goto	u1910
  3797   00111E                     u1911:
  3798   00111E  6A43               	clrf	??_Terminal_TXAvailable^0,c
  3799   001120  2A43               	incf	??_Terminal_TXAvailable^0,f,c
  3800   001122  EF94  F008         	goto	u1918
  3801   001126                     u1910:
  3802   001126  6A43               	clrf	??_Terminal_TXAvailable^0,c
  3803   001128                     u1918:
  3804   001128  5043               	movf	??_Terminal_TXAvailable^0,w,c
  3805   00112A  6E41               	movwf	?_Terminal_TXAvailable^0,c
  3806   00112C  6A42               	clrf	(?_Terminal_TXAvailable+1)^0,c
  3807   00112E  0012               	return		;funcret
  3808   001130                     __end_of_Terminal_TXAvailable:
  3809                           	callstack 0
  3810                           
  3811 ;; *************** function _Terminal_SendChar *****************
  3812 ;; Defined at:
  3813 ;;		line 45 in file "TAD_TERMINAL.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  c               1    wreg     unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  c               1    1[COMRAM] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1
  3827 ;;      Params:         0       0       0
  3828 ;;      Locals:         1       0       0
  3829 ;;      Temps:          0       0       0
  3830 ;;      Totals:         1       0       0
  3831 ;;Total ram usage:        1 bytes
  3832 ;; Hardware stack levels used: 1
  3833 ;; Hardware stack levels required when called: 3
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_Terminal_SendString
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text15
  3842   0011F6                     __ptext15:
  3843                           	callstack 0
  3844   0011F6                     _Terminal_SendChar:
  3845                           	callstack 24
  3846                           
  3847                           ;incstack = 0
  3848                           ;Terminal_SendChar@c stored from wreg
  3849   0011F6  6E41               	movwf	Terminal_SendChar@c^0,c
  3850   0011F8                     
  3851                           ;TAD_TERMINAL.c: 46:  TXREG = c;
  3852   0011F8  C041  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  3853   0011FC  0012               	return		;funcret
  3854   0011FE                     __end_of_Terminal_SendChar:
  3855                           	callstack 0
  3856                           
  3857 ;; *************** function _initTeclado *****************
  3858 ;; Defined at:
  3859 ;;		line 14 in file "TAD_TECLADO.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1
  3873 ;;      Params:         0       0       0
  3874 ;;      Locals:         0       0       0
  3875 ;;      Temps:          0       0       0
  3876 ;;      Totals:         0       0       0
  3877 ;;Total ram usage:        0 bytes
  3878 ;; Hardware stack levels used: 1
  3879 ;; Hardware stack levels required when called: 4
  3880 ;; This function calls:
  3881 ;;		_TI_NewTimer
  3882 ;;		_initPortsTeclado
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;;		_motorTerminal
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text16
  3890   001162                     __ptext16:
  3891                           	callstack 0
  3892   001162                     _initTeclado:
  3893                           	callstack 25
  3894   001162                     
  3895                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  3896   001162  ECFF  F008         	call	_initPortsTeclado	;wreg free
  3897   001166                     
  3898                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  3899   001166  6A37               	clrf	_Filas^0,c
  3900   001168                     
  3901                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  3902   001168  6A36               	clrf	_Columnas^0,c
  3903   00116A                     
  3904                           ;TAD_TECLADO.c: 18:     tecla = 0;
  3905   00116A  6A35               	clrf	_tecla^0,c
  3906   00116C                     
  3907                           ;TAD_TECLADO.c: 19:  state = 0;
  3908   00116C  6A34               	clrf	_state^0,c
  3909   00116E                     
  3910                           ;TAD_TECLADO.c: 20:     TI_NewTimer(&timer);
  3911   00116E  0E3F               	movlw	low _timer
  3912   001170  6E41               	movwf	TI_NewTimer@TimerHandle^0,c
  3913   001172  ECFB  F006         	call	_TI_NewTimer	;wreg free
  3914   001176  0012               	return		;funcret
  3915   001178                     __end_of_initTeclado:
  3916                           	callstack 0
  3917                           
  3918 ;; *************** function _initPortsTeclado *****************
  3919 ;; Defined at:
  3920 ;;		line 23 in file "TAD_TECLADO.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1
  3934 ;;      Params:         0       0       0
  3935 ;;      Locals:         0       0       0
  3936 ;;      Temps:          0       0       0
  3937 ;;      Totals:         0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; Hardware stack levels required when called: 3
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_initTeclado
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text17
  3949   0011FE                     __ptext17:
  3950                           	callstack 0
  3951   0011FE                     _initPortsTeclado:
  3952                           	callstack 25
  3953   0011FE                     
  3954                           ;TAD_TECLADO.c: 26:  TRISD = 0x0F;
  3955   0011FE  0E0F               	movlw	15
  3956   001200  6E95               	movwf	149,c	;volatile
  3957   001202                     
  3958                           ;TAD_TECLADO.c: 27:  LATD = 0x00;
  3959   001202  6A8C               	clrf	140,c	;volatile
  3960   001204  0012               	return		;funcret
  3961   001206                     __end_of_initPortsTeclado:
  3962                           	callstack 0
  3963                           
  3964 ;; *************** function _TI_NewTimer *****************
  3965 ;; Defined at:
  3966 ;;		line 43 in file "TAD_TIMER.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  3969 ;;		 -> Timer(1), timer(1), 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  Comptador       1    3[COMRAM] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      unsigned char 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1
  3981 ;;      Params:         1       0       0
  3982 ;;      Locals:         1       0       0
  3983 ;;      Temps:          1       0       0
  3984 ;;      Totals:         3       0       0
  3985 ;;Total ram usage:        3 bytes
  3986 ;; Hardware stack levels used: 1
  3987 ;; Hardware stack levels required when called: 3
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_initTeclado
  3992 ;;		_LcInit
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text18
  3997   000DF6                     __ptext18:
  3998                           	callstack 0
  3999   000DF6                     _TI_NewTimer:
  4000                           	callstack 25
  4001   000DF6                     
  4002                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  4003   000DF6  6A43               	clrf	TI_NewTimer@Comptador^0,c
  4004                           
  4005                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4006   000DF8  EF0A  F007         	goto	l2795
  4007   000DFC                     l2791:
  4008                           
  4009                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  4010   000DFC  2A43               	incf	TI_NewTimer@Comptador^0,f,c
  4011   000DFE  0E04               	movlw	4
  4012   000E00  1843               	xorwf	TI_NewTimer@Comptador^0,w,c
  4013   000E02  A4D8               	btfss	status,2,c
  4014   000E04  EF06  F007         	goto	u2021
  4015   000E08  EF08  F007         	goto	u2020
  4016   000E0C                     u2021:
  4017   000E0C  EF0A  F007         	goto	l2795
  4018   000E10                     u2020:
  4019   000E10  EF25  F007         	goto	l68
  4020   000E14                     l2795:
  4021                           
  4022                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4023   000E14  5043               	movf	TI_NewTimer@Comptador^0,w,c
  4024   000E16  0D05               	mullw	5
  4025   000E18  50F3               	movf	243,w,c
  4026   000E1A  0F05               	addlw	low (_Timers+4)
  4027   000E1C  6ED9               	movwf	fsr2l,c
  4028   000E1E  6ADA               	clrf	fsr2h,c
  4029   000E20  04DE               	decf	postinc2,w,c
  4030   000E22  B4D8               	btfsc	status,2,c
  4031   000E24  EF16  F007         	goto	u2031
  4032   000E28  EF18  F007         	goto	u2030
  4033   000E2C                     u2031:
  4034   000E2C  EFFE  F006         	goto	l2791
  4035   000E30                     u2030:
  4036   000E30                     
  4037                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  4038   000E30  5043               	movf	TI_NewTimer@Comptador^0,w,c
  4039   000E32  0D05               	mullw	5
  4040   000E34  50F3               	movf	243,w,c
  4041   000E36  0F05               	addlw	low (_Timers+4)
  4042   000E38  6ED9               	movwf	fsr2l,c
  4043   000E3A  6ADA               	clrf	fsr2h,c
  4044   000E3C  0E01               	movlw	1
  4045   000E3E  6EDF               	movwf	indf2,c
  4046   000E40                     
  4047                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  4048   000E40  5041               	movf	TI_NewTimer@TimerHandle^0,w,c
  4049   000E42  6ED9               	movwf	fsr2l,c
  4050   000E44  6ADA               	clrf	fsr2h,c
  4051   000E46  C043  FFDF         	movff	TI_NewTimer@Comptador,indf2
  4052   000E4A                     l68:
  4053   000E4A  0012               	return		;funcret
  4054   000E4C                     __end_of_TI_NewTimer:
  4055                           	callstack 0
  4056                           
  4057 ;; *************** function _Terminal_ReceiveChar *****************
  4058 ;; Defined at:
  4059 ;;		line 50 in file "TAD_TERMINAL.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      unsigned char 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1
  4073 ;;      Params:         0       0       0
  4074 ;;      Locals:         0       0       0
  4075 ;;      Temps:          0       0       0
  4076 ;;      Totals:         0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used: 1
  4079 ;; Hardware stack levels required when called: 3
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_motorTerminal
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text19
  4088   001212                     __ptext19:
  4089                           	callstack 0
  4090   001212                     _Terminal_ReceiveChar:
  4091                           	callstack 26
  4092   001212                     
  4093                           ;TAD_TERMINAL.c: 51:  return RCREG;
  4094   001212  50AE               	movf	174,w,c	;volatile
  4095   001214  0012               	return		;funcret
  4096   001216                     __end_of_Terminal_ReceiveChar:
  4097                           	callstack 0
  4098                           
  4099 ;; *************** function _Terminal_RXAvailable *****************
  4100 ;; Defined at:
  4101 ;;		line 40 in file "TAD_TERMINAL.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      unsigned char 
  4108 ;; Registers used:
  4109 ;;		wreg
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1
  4115 ;;      Params:         0       0       0
  4116 ;;      Locals:         0       0       0
  4117 ;;      Temps:          0       0       0
  4118 ;;      Totals:         0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used: 1
  4121 ;; Hardware stack levels required when called: 3
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_motorTerminal
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text20
  4130   00118E                     __ptext20:
  4131                           	callstack 0
  4132   00118E                     _Terminal_RXAvailable:
  4133                           	callstack 26
  4134   00118E                     
  4135                           ;TAD_TERMINAL.c: 41:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4136   00118E  BA9E               	btfsc	158,5,c	;volatile
  4137   001190  EFCC  F008         	goto	u801
  4138   001194  EFCF  F008         	goto	u800
  4139   001198                     u801:
  4140   001198  0E01               	movlw	1
  4141   00119A  EFD0  F008         	goto	u806
  4142   00119E                     u800:
  4143   00119E  0E00               	movlw	0
  4144   0011A0                     u806:
  4145   0011A0  0012               	return		;funcret
  4146   0011A2                     __end_of_Terminal_RXAvailable:
  4147                           	callstack 0
  4148                           
  4149 ;; *************** function _motorTeclado *****************
  4150 ;; Defined at:
  4151 ;;		line 34 in file "TAD_TECLADO.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1
  4165 ;;      Params:         0       0       0
  4166 ;;      Locals:         0       0       0
  4167 ;;      Temps:          0       0       0
  4168 ;;      Totals:         0       0       0
  4169 ;;Total ram usage:        0 bytes
  4170 ;; Hardware stack levels used: 1
  4171 ;; Hardware stack levels required when called: 4
  4172 ;; This function calls:
  4173 ;;		_GetTecla
  4174 ;;		_ReadFilas
  4175 ;;		_TI_GetTics
  4176 ;;		_TI_ResetTics
  4177 ;;		_hashtag_pressed3s
  4178 ;;		_writeColumnas
  4179 ;; This function is called by:
  4180 ;;		_main
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text21
  4185   0002D8                     __ptext21:
  4186                           	callstack 0
  4187   0002D8                     _motorTeclado:
  4188                           	callstack 26
  4189   0002D8                     
  4190                           ;TAD_TECLADO.c: 35:  switch(state) {
  4191   0002D8  EF68  F002         	goto	l3197
  4192   0002DC                     l3093:
  4193                           
  4194                           ;TAD_TECLADO.c: 37:    Filas = ReadFilas();
  4195   0002DC  EC06  F009         	call	_ReadFilas	;wreg free
  4196   0002E0  6E37               	movwf	_Filas^0,c
  4197   0002E2                     
  4198                           ;TAD_TECLADO.c: 38:    if (Filas == 0x0) {
  4199   0002E2  5037               	movf	_Filas^0,w,c
  4200   0002E4  A4D8               	btfss	status,2,c
  4201   0002E6  EF77  F001         	goto	u2371
  4202   0002EA  EF79  F001         	goto	u2370
  4203   0002EE                     u2371:
  4204   0002EE  EF81  F001         	goto	l3103
  4205   0002F2                     u2370:
  4206   0002F2                     
  4207                           ;TAD_TECLADO.c: 39:     Columnas = (0x01);
  4208   0002F2  0E01               	movlw	1
  4209   0002F4  6E36               	movwf	_Columnas^0,c
  4210   0002F6                     
  4211                           ;TAD_TECLADO.c: 40:     writeColumnas();
  4212   0002F6  ECC4  F007         	call	_writeColumnas	;wreg free
  4213   0002FA                     
  4214                           ;TAD_TECLADO.c: 41:     state = 1;
  4215   0002FA  0E01               	movlw	1
  4216   0002FC  6E34               	movwf	_state^0,c
  4217                           
  4218                           ;TAD_TECLADO.c: 42:    }
  4219   0002FE  EF83  F002         	goto	l149
  4220   000302                     l3103:
  4221   000302  5037               	movf	_Filas^0,w,c
  4222   000304  B4D8               	btfsc	status,2,c
  4223   000306  EF87  F001         	goto	u2381
  4224   00030A  EF89  F001         	goto	u2380
  4225   00030E                     u2381:
  4226   00030E  EF83  F002         	goto	l149
  4227   000312                     u2380:
  4228   000312                     
  4229                           ;TAD_TECLADO.c: 44:     TI_ResetTics(timer);
  4230   000312  503F               	movf	_timer^0,w,c
  4231   000314  EC78  F008         	call	_TI_ResetTics
  4232   000318                     l3107:
  4233                           
  4234                           ;TAD_TECLADO.c: 45:     state = 3;
  4235   000318  0E03               	movlw	3
  4236   00031A  6E34               	movwf	_state^0,c
  4237   00031C  EF83  F002         	goto	l149
  4238   000320                     l3109:
  4239                           
  4240                           ;TAD_TECLADO.c: 49:    Filas = ReadFilas();
  4241   000320  EC06  F009         	call	_ReadFilas	;wreg free
  4242   000324  6E37               	movwf	_Filas^0,c
  4243   000326                     
  4244                           ;TAD_TECLADO.c: 50:    if (Filas == 0x0) {
  4245   000326  5037               	movf	_Filas^0,w,c
  4246   000328  A4D8               	btfss	status,2,c
  4247   00032A  EF99  F001         	goto	u2391
  4248   00032E  EF9B  F001         	goto	u2390
  4249   000332                     u2391:
  4250   000332  EFA3  F001         	goto	l3119
  4251   000336                     u2390:
  4252   000336                     
  4253                           ;TAD_TECLADO.c: 51:     Columnas = (0x02);
  4254   000336  0E02               	movlw	2
  4255   000338  6E36               	movwf	_Columnas^0,c
  4256   00033A                     
  4257                           ;TAD_TECLADO.c: 52:     writeColumnas();
  4258   00033A  ECC4  F007         	call	_writeColumnas	;wreg free
  4259   00033E                     
  4260                           ;TAD_TECLADO.c: 53:     state = 2;
  4261   00033E  0E02               	movlw	2
  4262   000340  6E34               	movwf	_state^0,c
  4263                           
  4264                           ;TAD_TECLADO.c: 54:    }
  4265   000342  EF83  F002         	goto	l149
  4266   000346                     l3119:
  4267   000346  5037               	movf	_Filas^0,w,c
  4268   000348  B4D8               	btfsc	status,2,c
  4269   00034A  EFA9  F001         	goto	u2401
  4270   00034E  EFAB  F001         	goto	u2400
  4271   000352                     u2401:
  4272   000352  EF83  F002         	goto	l149
  4273   000356                     u2400:
  4274   000356                     
  4275                           ;TAD_TECLADO.c: 56:     TI_ResetTics(timer);
  4276   000356  503F               	movf	_timer^0,w,c
  4277   000358  EC78  F008         	call	_TI_ResetTics
  4278   00035C  EF8C  F001         	goto	l3107
  4279   000360                     l3125:
  4280                           
  4281                           ;TAD_TECLADO.c: 61:    Filas = ReadFilas();
  4282   000360  EC06  F009         	call	_ReadFilas	;wreg free
  4283   000364  6E37               	movwf	_Filas^0,c
  4284   000366                     
  4285                           ;TAD_TECLADO.c: 62:    if (Filas != 0x0) {
  4286   000366  5037               	movf	_Filas^0,w,c
  4287   000368  B4D8               	btfsc	status,2,c
  4288   00036A  EFB9  F001         	goto	u2411
  4289   00036E  EFBB  F001         	goto	u2410
  4290   000372                     u2411:
  4291   000372  EFC0  F001         	goto	l3133
  4292   000376                     u2410:
  4293   000376                     
  4294                           ;TAD_TECLADO.c: 63:     TI_ResetTics(timer);
  4295   000376  503F               	movf	_timer^0,w,c
  4296   000378  EC78  F008         	call	_TI_ResetTics
  4297   00037C  EF8C  F001         	goto	l3107
  4298   000380                     l3133:
  4299   000380  5037               	movf	_Filas^0,w,c
  4300   000382  A4D8               	btfss	status,2,c
  4301   000384  EFC6  F001         	goto	u2421
  4302   000388  EFC8  F001         	goto	u2420
  4303   00038C                     u2421:
  4304   00038C  EF83  F002         	goto	l149
  4305   000390                     u2420:
  4306   000390                     l3135:
  4307                           
  4308                           ;TAD_TECLADO.c: 67:     Columnas = (0x04);
  4309   000390  0E04               	movlw	4
  4310   000392  6E36               	movwf	_Columnas^0,c
  4311   000394                     
  4312                           ;TAD_TECLADO.c: 68:     writeColumnas();
  4313   000394  ECC4  F007         	call	_writeColumnas	;wreg free
  4314   000398                     l3139:
  4315                           
  4316                           ;TAD_TECLADO.c: 69:     state = 0;
  4317   000398  6A34               	clrf	_state^0,c
  4318   00039A  EF83  F002         	goto	l149
  4319   00039E                     l3141:
  4320                           
  4321                           ;TAD_TECLADO.c: 73:    tecla = GetTecla ();
  4322   00039E  EC74  F004         	call	_GetTecla	;wreg free
  4323   0003A2  6E35               	movwf	_tecla^0,c
  4324   0003A4                     
  4325                           ;TAD_TECLADO.c: 74:    Filas = ReadFilas();
  4326   0003A4  EC06  F009         	call	_ReadFilas	;wreg free
  4327   0003A8  6E37               	movwf	_Filas^0,c
  4328   0003AA                     
  4329                           ;TAD_TECLADO.c: 75:    if (Filas == 0x0) {
  4330   0003AA  5037               	movf	_Filas^0,w,c
  4331   0003AC  A4D8               	btfss	status,2,c
  4332   0003AE  EFDB  F001         	goto	u2431
  4333   0003B2  EFDD  F001         	goto	u2430
  4334   0003B6                     u2431:
  4335   0003B6  EFDF  F001         	goto	l3153
  4336   0003BA                     u2430:
  4337   0003BA  EFC8  F001         	goto	l3135
  4338   0003BE                     l3153:
  4339   0003BE  5037               	movf	_Filas^0,w,c
  4340   0003C0  B4D8               	btfsc	status,2,c
  4341   0003C2  EFE5  F001         	goto	u2441
  4342   0003C6  EFE7  F001         	goto	u2440
  4343   0003CA                     u2441:
  4344   0003CA  EF04  F002         	goto	l3161
  4345   0003CE                     u2440:
  4346   0003CE  503F               	movf	_timer^0,w,c
  4347   0003D0  EC9E  F007         	call	_TI_GetTics
  4348   0003D4  5044               	movf	(?_TI_GetTics+3)^0,w,c
  4349   0003D6  1043               	iorwf	(?_TI_GetTics+2)^0,w,c
  4350   0003D8  1042               	iorwf	(?_TI_GetTics+1)^0,w,c
  4351   0003DA  E109               	bnz	u2450
  4352   0003DC  0E09               	movlw	9
  4353   0003DE  5C41               	subwf	?_TI_GetTics^0,w,c
  4354   0003E0  A0D8               	btfss	status,0,c
  4355   0003E2  EFF5  F001         	goto	u2451
  4356   0003E6  EFF7  F001         	goto	u2450
  4357   0003EA                     u2451:
  4358   0003EA  EF04  F002         	goto	l3161
  4359   0003EE                     u2450:
  4360   0003EE  0E0B               	movlw	11
  4361   0003F0  1835               	xorwf	_tecla^0,w,c
  4362   0003F2  B4D8               	btfsc	status,2,c
  4363   0003F4  EFFE  F001         	goto	u2461
  4364   0003F8  EF00  F002         	goto	u2460
  4365   0003FC                     u2461:
  4366   0003FC  EF04  F002         	goto	l3161
  4367   000400                     u2460:
  4368   000400                     l3159:
  4369                           
  4370                           ;TAD_TECLADO.c: 81:     state = 5;
  4371   000400  0E05               	movlw	5
  4372   000402  6E34               	movwf	_state^0,c
  4373                           
  4374                           ;TAD_TECLADO.c: 82:    }
  4375   000404  EF83  F002         	goto	l149
  4376   000408                     l3161:
  4377   000408  5037               	movf	_Filas^0,w,c
  4378   00040A  B4D8               	btfsc	status,2,c
  4379   00040C  EF0A  F002         	goto	u2471
  4380   000410  EF0C  F002         	goto	u2470
  4381   000414                     u2471:
  4382   000414  EF83  F002         	goto	l149
  4383   000418                     u2470:
  4384   000418  503F               	movf	_timer^0,w,c
  4385   00041A  EC9E  F007         	call	_TI_GetTics
  4386   00041E  5044               	movf	(?_TI_GetTics+3)^0,w,c
  4387   000420  1043               	iorwf	(?_TI_GetTics+2)^0,w,c
  4388   000422  1042               	iorwf	(?_TI_GetTics+1)^0,w,c
  4389   000424  E109               	bnz	u2480
  4390   000426  0E09               	movlw	9
  4391   000428  5C41               	subwf	?_TI_GetTics^0,w,c
  4392   00042A  A0D8               	btfss	status,0,c
  4393   00042C  EF1A  F002         	goto	u2481
  4394   000430  EF1C  F002         	goto	u2480
  4395   000434                     u2481:
  4396   000434  EF83  F002         	goto	l149
  4397   000438                     u2480:
  4398   000438  0E0B               	movlw	11
  4399   00043A  1835               	xorwf	_tecla^0,w,c
  4400   00043C  A4D8               	btfss	status,2,c
  4401   00043E  EF23  F002         	goto	u2491
  4402   000442  EF25  F002         	goto	u2490
  4403   000446                     u2491:
  4404   000446  EF83  F002         	goto	l149
  4405   00044A                     u2490:
  4406   00044A                     
  4407                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  4408   00044A  503F               	movf	_timer^0,w,c
  4409   00044C  EC78  F008         	call	_TI_ResetTics
  4410   000450                     
  4411                           ;TAD_TECLADO.c: 85:     state = 4;
  4412   000450  0E04               	movlw	4
  4413   000452  6E34               	movwf	_state^0,c
  4414   000454  EF83  F002         	goto	l149
  4415   000458                     l3171:
  4416                           
  4417                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  4418   000458  EC06  F009         	call	_ReadFilas	;wreg free
  4419   00045C  6E37               	movwf	_Filas^0,c
  4420   00045E                     
  4421                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  4422   00045E  5037               	movf	_Filas^0,w,c
  4423   000460  A4D8               	btfss	status,2,c
  4424   000462  EF35  F002         	goto	u2501
  4425   000466  EF37  F002         	goto	u2500
  4426   00046A                     u2501:
  4427   00046A  EF39  F002         	goto	l3177
  4428   00046E                     u2500:
  4429   00046E  EFCC  F001         	goto	l3139
  4430   000472                     l3177:
  4431   000472  5037               	movf	_Filas^0,w,c
  4432   000474  B4D8               	btfsc	status,2,c
  4433   000476  EF3F  F002         	goto	u2511
  4434   00047A  EF41  F002         	goto	u2510
  4435   00047E                     u2511:
  4436   00047E  EF83  F002         	goto	l149
  4437   000482                     u2510:
  4438   000482  503F               	movf	_timer^0,w,c
  4439   000484  EC9E  F007         	call	_TI_GetTics
  4440   000488  5044               	movf	(?_TI_GetTics+3)^0,w,c
  4441   00048A  1043               	iorwf	(?_TI_GetTics+2)^0,w,c
  4442   00048C  E10B               	bnz	u2520
  4443   00048E  0EDD               	movlw	221
  4444   000490  5C41               	subwf	?_TI_GetTics^0,w,c
  4445   000492  0E05               	movlw	5
  4446   000494  5842               	subwfb	(?_TI_GetTics+1)^0,w,c
  4447   000496  A0D8               	btfss	status,0,c
  4448   000498  EF50  F002         	goto	u2521
  4449   00049C  EF52  F002         	goto	u2520
  4450   0004A0                     u2521:
  4451   0004A0  EF83  F002         	goto	l149
  4452   0004A4                     u2520:
  4453   0004A4                     
  4454                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  4455   0004A4  EC03  F009         	call	_hashtag_pressed3s	;wreg free
  4456   0004A8  EF00  F002         	goto	l3159
  4457   0004AC                     l3185:
  4458                           
  4459                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  4460   0004AC  EC06  F009         	call	_ReadFilas	;wreg free
  4461   0004B0  6E37               	movwf	_Filas^0,c
  4462   0004B2                     
  4463                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  4464   0004B2  5037               	movf	_Filas^0,w,c
  4465   0004B4  A4D8               	btfss	status,2,c
  4466   0004B6  EF5F  F002         	goto	u2531
  4467   0004BA  EF61  F002         	goto	u2530
  4468   0004BE                     u2531:
  4469   0004BE  EF83  F002         	goto	l149
  4470   0004C2                     u2530:
  4471   0004C2                     
  4472                           ;TAD_TECLADO.c: 102:     state = 0;
  4473   0004C2  6A34               	clrf	_state^0,c
  4474   0004C4                     
  4475                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  4476   0004C4  0E04               	movlw	4
  4477   0004C6  6E36               	movwf	_Columnas^0,c
  4478   0004C8                     
  4479                           ;TAD_TECLADO.c: 104:     writeColumnas();
  4480   0004C8  ECC4  F007         	call	_writeColumnas	;wreg free
  4481   0004CC  EF83  F002         	goto	l149
  4482   0004D0                     l3197:
  4483   0004D0  5034               	movf	_state^0,w,c
  4484                           
  4485                           ; Switch size 1, requested type "simple"
  4486                           ; Number of cases is 6, Range of values is 0 to 5
  4487                           ; switch strategies available:
  4488                           ; Name         Instructions Cycles
  4489                           ; simple_byte           19    10 (average)
  4490                           ;	Chosen strategy is simple_byte
  4491   0004D2  0A00               	xorlw	0	; case 0
  4492   0004D4  B4D8               	btfsc	status,2,c
  4493   0004D6  EF6E  F001         	goto	l3093
  4494   0004DA  0A01               	xorlw	1	; case 1
  4495   0004DC  B4D8               	btfsc	status,2,c
  4496   0004DE  EF90  F001         	goto	l3109
  4497   0004E2  0A03               	xorlw	3	; case 2
  4498   0004E4  B4D8               	btfsc	status,2,c
  4499   0004E6  EFB0  F001         	goto	l3125
  4500   0004EA  0A01               	xorlw	1	; case 3
  4501   0004EC  B4D8               	btfsc	status,2,c
  4502   0004EE  EFCF  F001         	goto	l3141
  4503   0004F2  0A07               	xorlw	7	; case 4
  4504   0004F4  B4D8               	btfsc	status,2,c
  4505   0004F6  EF2C  F002         	goto	l3171
  4506   0004FA  0A01               	xorlw	1	; case 5
  4507   0004FC  B4D8               	btfsc	status,2,c
  4508   0004FE  EF56  F002         	goto	l3185
  4509   000502  EF83  F002         	goto	l149
  4510   000506                     l149:
  4511   000506  0012               	return		;funcret
  4512   000508                     __end_of_motorTeclado:
  4513                           	callstack 0
  4514                           
  4515 ;; *************** function _writeColumnas *****************
  4516 ;; Defined at:
  4517 ;;		line 114 in file "TAD_TECLADO.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  1    wreg      void 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1
  4531 ;;      Params:         0       0       0
  4532 ;;      Locals:         0       0       0
  4533 ;;      Temps:          0       0       0
  4534 ;;      Totals:         0       0       0
  4535 ;;Total ram usage:        0 bytes
  4536 ;; Hardware stack levels used: 1
  4537 ;; Hardware stack levels required when called: 3
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_motorTeclado
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text22
  4546   000F88                     __ptext22:
  4547                           	callstack 0
  4548   000F88                     _writeColumnas:
  4549                           	callstack 26
  4550   000F88                     
  4551                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  4552   000F88  6A8C               	clrf	140,c	;volatile
  4553   000F8A                     
  4554                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  4555   000F8A  0436               	decf	_Columnas^0,w,c
  4556   000F8C  A4D8               	btfss	status,2,c
  4557   000F8E  EFCB  F007         	goto	u611
  4558   000F92  EFCD  F007         	goto	u610
  4559   000F96                     u611:
  4560   000F96  EFD0  F007         	goto	l1753
  4561   000F9A                     u610:
  4562   000F9A                     
  4563                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  4564   000F9A  8A8C               	bsf	140,5,c	;volatile
  4565                           
  4566                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  4567   000F9C  EFE6  F007         	goto	l157
  4568   000FA0                     l1753:
  4569   000FA0  0E02               	movlw	2
  4570   000FA2  1836               	xorwf	_Columnas^0,w,c
  4571   000FA4  A4D8               	btfss	status,2,c
  4572   000FA6  EFD7  F007         	goto	u621
  4573   000FAA  EFD9  F007         	goto	u620
  4574   000FAE                     u621:
  4575   000FAE  EFDC  F007         	goto	l1757
  4576   000FB2                     u620:
  4577   000FB2                     
  4578                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  4579   000FB2  8C8C               	bsf	140,6,c	;volatile
  4580                           
  4581                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  4582   000FB4  EFE6  F007         	goto	l157
  4583   000FB8                     l1757:
  4584   000FB8  0E04               	movlw	4
  4585   000FBA  1836               	xorwf	_Columnas^0,w,c
  4586   000FBC  A4D8               	btfss	status,2,c
  4587   000FBE  EFE3  F007         	goto	u631
  4588   000FC2  EFE5  F007         	goto	u630
  4589   000FC6                     u631:
  4590   000FC6  EFE6  F007         	goto	l157
  4591   000FCA                     u630:
  4592   000FCA                     
  4593                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  4594   000FCA  888C               	bsf	140,4,c	;volatile
  4595   000FCC                     l157:
  4596   000FCC  0012               	return		;funcret
  4597   000FCE                     __end_of_writeColumnas:
  4598                           	callstack 0
  4599                           
  4600 ;; *************** function _hashtag_pressed3s *****************
  4601 ;; Defined at:
  4602 ;;		line 73 in file "TAD_TERMINAL.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1
  4616 ;;      Params:         0       0       0
  4617 ;;      Locals:         0       0       0
  4618 ;;      Temps:          0       0       0
  4619 ;;      Totals:         0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; Hardware stack levels required when called: 3
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_motorTeclado
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text23
  4631   001206                     __ptext23:
  4632                           	callstack 0
  4633   001206                     _hashtag_pressed3s:
  4634                           	callstack 26
  4635   001206                     
  4636                           ;TAD_TERMINAL.c: 74:  hashtag_pressed = 1;
  4637   001206  0E01               	movlw	1
  4638   001208  6E25               	movwf	_hashtag_pressed^0,c
  4639   00120A  0012               	return		;funcret
  4640   00120C                     __end_of_hashtag_pressed3s:
  4641                           	callstack 0
  4642                           
  4643 ;; *************** function _TI_ResetTics *****************
  4644 ;; Defined at:
  4645 ;;		line 53 in file "TAD_TIMER.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  TimerHandle     1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1
  4659 ;;      Params:         0       0       0
  4660 ;;      Locals:         1       0       0
  4661 ;;      Temps:          0       0       0
  4662 ;;      Totals:         1       0       0
  4663 ;;Total ram usage:        1 bytes
  4664 ;; Hardware stack levels used: 1
  4665 ;; Hardware stack levels required when called: 3
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_motorTeclado
  4670 ;;		_Espera
  4671 ;;		_WaitForBusy
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text24
  4676   0010F0                     __ptext24:
  4677                           	callstack 0
  4678   0010F0                     _TI_ResetTics:
  4679                           	callstack 26
  4680                           
  4681                           ;incstack = 0
  4682                           ;TI_ResetTics@TimerHandle stored from wreg
  4683   0010F0  6E41               	movwf	TI_ResetTics@TimerHandle^0,c
  4684   0010F2                     
  4685                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  4686   0010F2  9EF2               	bcf	242,7,c	;volatile
  4687   0010F4  5041               	movf	TI_ResetTics@TimerHandle^0,w,c
  4688   0010F6  0D05               	mullw	5
  4689   0010F8  50F3               	movf	243,w,c
  4690   0010FA  0F01               	addlw	low _Timers
  4691   0010FC  6ED9               	movwf	fsr2l,c
  4692   0010FE  6ADA               	clrf	fsr2h,c
  4693   001100  C015  FFDE         	movff	_Tics,postinc2	;volatile
  4694   001104  C016  FFDE         	movff	_Tics+1,postinc2	;volatile
  4695   001108  C017  FFDE         	movff	_Tics+2,postinc2	;volatile
  4696   00110C  C018  FFDE         	movff	_Tics+3,postinc2	;volatile
  4697   001110  8EF2               	bsf	242,7,c	;volatile
  4698   001112  0012               	return		;funcret
  4699   001114                     __end_of_TI_ResetTics:
  4700                           	callstack 0
  4701                           
  4702 ;; *************** function _TI_GetTics *****************
  4703 ;; Defined at:
  4704 ;;		line 61 in file "TAD_TIMER.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  TimerHandle     1    wreg     unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  4709 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  4    1[COMRAM] unsigned long 
  4712 ;; Registers used:
  4713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1
  4719 ;;      Params:         4       0       0
  4720 ;;      Locals:         5       0       0
  4721 ;;      Temps:          4       0       0
  4722 ;;      Totals:        13       0       0
  4723 ;;Total ram usage:       13 bytes
  4724 ;; Hardware stack levels used: 1
  4725 ;; Hardware stack levels required when called: 3
  4726 ;; This function calls:
  4727 ;;		Nothing
  4728 ;; This function is called by:
  4729 ;;		_motorTeclado
  4730 ;;		_Espera
  4731 ;;		_WaitForBusy
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text25
  4736   000F3C                     __ptext25:
  4737                           	callstack 0
  4738   000F3C                     _TI_GetTics:
  4739                           	callstack 26
  4740                           
  4741                           ;incstack = 0
  4742                           ;TI_GetTics@TimerHandle stored from wreg
  4743   000F3C  6E4D               	movwf	TI_GetTics@TimerHandle^0,c
  4744   000F3E                     
  4745                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  4746   000F3E  9EF2               	bcf	242,7,c	;volatile
  4747   000F40  C015  F049         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  4748   000F44  C016  F04A         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  4749   000F48  C017  F04B         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  4750   000F4C  C018  F04C         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  4751   000F50  8EF2               	bsf	242,7,c	;volatile
  4752   000F52                     
  4753                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  4754   000F52  504D               	movf	TI_GetTics@TimerHandle^0,w,c
  4755   000F54  0D05               	mullw	5
  4756   000F56  50F3               	movf	243,w,c
  4757   000F58  0F01               	addlw	low _Timers
  4758   000F5A  6ED9               	movwf	fsr2l,c
  4759   000F5C  6ADA               	clrf	fsr2h,c
  4760   000F5E  CFDE F045          	movff	postinc2,??_TI_GetTics
  4761   000F62  CFDE F046          	movff	postinc2,??_TI_GetTics+1
  4762   000F66  CFDE F047          	movff	postinc2,??_TI_GetTics+2
  4763   000F6A  CFDE F048          	movff	postinc2,??_TI_GetTics+3
  4764   000F6E  5045               	movf	??_TI_GetTics^0,w,c
  4765   000F70  5C49               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  4766   000F72  6E41               	movwf	?_TI_GetTics^0,c
  4767   000F74  5046               	movf	(??_TI_GetTics+1)^0,w,c
  4768   000F76  584A               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  4769   000F78  6E42               	movwf	(?_TI_GetTics+1)^0,c
  4770   000F7A  5047               	movf	(??_TI_GetTics+2)^0,w,c
  4771   000F7C  584B               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  4772   000F7E  6E43               	movwf	(?_TI_GetTics+2)^0,c
  4773   000F80  5048               	movf	(??_TI_GetTics+3)^0,w,c
  4774   000F82  584C               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  4775   000F84  6E44               	movwf	(?_TI_GetTics+3)^0,c
  4776   000F86  0012               	return		;funcret
  4777   000F88                     __end_of_TI_GetTics:
  4778                           	callstack 0
  4779                           
  4780 ;; *************** function _ReadFilas *****************
  4781 ;; Defined at:
  4782 ;;		line 10 in file "TAD_TECLADO.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;		None
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      unsigned char 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1
  4796 ;;      Params:         0       0       0
  4797 ;;      Locals:         0       0       0
  4798 ;;      Temps:          0       0       0
  4799 ;;      Totals:         0       0       0
  4800 ;;Total ram usage:        0 bytes
  4801 ;; Hardware stack levels used: 1
  4802 ;; Hardware stack levels required when called: 3
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_motorTeclado
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text26
  4811   00120C                     __ptext26:
  4812                           	callstack 0
  4813   00120C                     _ReadFilas:
  4814                           	callstack 26
  4815   00120C                     
  4816                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  4817   00120C  5083               	movf	131,w,c	;volatile
  4818   00120E  0B0F               	andlw	15
  4819   001210  0012               	return		;funcret
  4820   001212                     __end_of_ReadFilas:
  4821                           	callstack 0
  4822                           
  4823 ;; *************** function _GetTecla *****************
  4824 ;; Defined at:
  4825 ;;		line 128 in file "TAD_TECLADO.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  4830 ;;  fila            1   16[COMRAM] unsigned char 
  4831 ;;  columna         1   15[COMRAM] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      unsigned char 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1
  4841 ;;      Params:         0       0       0
  4842 ;;      Locals:        14       0       0
  4843 ;;      Temps:          2       0       0
  4844 ;;      Totals:        16       0       0
  4845 ;;Total ram usage:       16 bytes
  4846 ;; Hardware stack levels used: 1
  4847 ;; Hardware stack levels required when called: 3
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_motorTeclado
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text27
  4856   0008E8                     __ptext27:
  4857                           	callstack 0
  4858   0008E8                     _GetTecla:
  4859                           	callstack 26
  4860   0008E8                     
  4861                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  4862   0008E8  6A4F               	clrf	GetTecla@columna^0,c
  4863                           
  4864                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  4865   0008EA  EF89  F004         	goto	l1775
  4866   0008EE                     l161:
  4867   0008EE  6A50               	clrf	GetTecla@fila^0,c
  4868   0008F0  EFA7  F004         	goto	l1787
  4869   0008F4                     l1763:
  4870   0008F4  0E01               	movlw	1
  4871   0008F6  6E50               	movwf	GetTecla@fila^0,c
  4872   0008F8  EFA7  F004         	goto	l1787
  4873   0008FC                     l1765:
  4874   0008FC  0E02               	movlw	2
  4875   0008FE  6E50               	movwf	GetTecla@fila^0,c
  4876   000900  EFA7  F004         	goto	l1787
  4877   000904                     l1767:
  4878   000904  0E03               	movlw	3
  4879   000906  6E50               	movwf	GetTecla@fila^0,c
  4880   000908  EFA7  F004         	goto	l1787
  4881   00090C                     l1769:
  4882   00090C  0EFF               	movlw	255
  4883   00090E  EFD5  F004         	goto	l167
  4884   000912                     l1775:
  4885   000912  5037               	movf	_Filas^0,w,c
  4886                           
  4887                           ; Switch size 1, requested type "simple"
  4888                           ; Number of cases is 4, Range of values is 1 to 8
  4889                           ; switch strategies available:
  4890                           ; Name         Instructions Cycles
  4891                           ; simple_byte           13     7 (average)
  4892                           ;	Chosen strategy is simple_byte
  4893   000914  0A01               	xorlw	1	; case 1
  4894   000916  B4D8               	btfsc	status,2,c
  4895   000918  EF77  F004         	goto	l161
  4896   00091C  0A03               	xorlw	3	; case 2
  4897   00091E  B4D8               	btfsc	status,2,c
  4898   000920  EF7A  F004         	goto	l1763
  4899   000924  0A06               	xorlw	6	; case 4
  4900   000926  B4D8               	btfsc	status,2,c
  4901   000928  EF7E  F004         	goto	l1765
  4902   00092C  0A0C               	xorlw	12	; case 8
  4903   00092E  B4D8               	btfsc	status,2,c
  4904   000930  EF82  F004         	goto	l1767
  4905   000934  EF86  F004         	goto	l1769
  4906   000938                     l169:
  4907   000938  6A4F               	clrf	GetTecla@columna^0,c
  4908   00093A  EFC1  F004         	goto	l1789
  4909   00093E                     l1777:
  4910   00093E  0E01               	movlw	1
  4911   000940  6E4F               	movwf	GetTecla@columna^0,c
  4912   000942  EFC1  F004         	goto	l1789
  4913   000946                     l1779:
  4914   000946  0E02               	movlw	2
  4915   000948  6E4F               	movwf	GetTecla@columna^0,c
  4916   00094A  EFC1  F004         	goto	l1789
  4917   00094E                     l1787:
  4918   00094E  5036               	movf	_Columnas^0,w,c
  4919   000950  0B07               	andlw	7
  4920   000952  6E41               	movwf	??_GetTecla^0,c
  4921   000954  6A42               	clrf	(??_GetTecla+1)^0,c
  4922                           
  4923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4924                           ; Switch size 1, requested type "simple"
  4925                           ; Number of cases is 1, Range of values is 0 to 0
  4926                           ; switch strategies available:
  4927                           ; Name         Instructions Cycles
  4928                           ; simple_byte            4     3 (average)
  4929                           ;	Chosen strategy is simple_byte
  4930   000956  5042               	movf	(??_GetTecla+1)^0,w,c
  4931   000958  0A00               	xorlw	0	; case 0
  4932   00095A  B4D8               	btfsc	status,2,c
  4933   00095C  EFB2  F004         	goto	l3593
  4934   000960  EF86  F004         	goto	l1769
  4935   000964                     l3593:
  4936                           
  4937                           ; Switch size 1, requested type "simple"
  4938                           ; Number of cases is 3, Range of values is 1 to 4
  4939                           ; switch strategies available:
  4940                           ; Name         Instructions Cycles
  4941                           ; simple_byte           10     6 (average)
  4942                           ;	Chosen strategy is simple_byte
  4943   000964  5041               	movf	??_GetTecla^0,w,c
  4944   000966  0A01               	xorlw	1	; case 1
  4945   000968  B4D8               	btfsc	status,2,c
  4946   00096A  EF9C  F004         	goto	l169
  4947   00096E  0A03               	xorlw	3	; case 2
  4948   000970  B4D8               	btfsc	status,2,c
  4949   000972  EF9F  F004         	goto	l1777
  4950   000976  0A06               	xorlw	6	; case 4
  4951   000978  B4D8               	btfsc	status,2,c
  4952   00097A  EFA3  F004         	goto	l1779
  4953   00097E  EF86  F004         	goto	l1769
  4954   000982                     l1789:
  4955                           
  4956                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  4957   000982  0EFD               	movlw	low GetTecla@F3223
  4958   000984  6EF6               	movwf	tblptrl,c
  4959   000986                     	if	1	;There is more than 1 active tblptr byte
  4960   000986  0E1E               	movlw	high GetTecla@F3223
  4961   000988  6EF7               	movwf	tblptrh,c
  4962   00098A                     	endif
  4963   00098A                     	if	0	;There are less than 3 active tblptr bytes
  4964   00098A                     	endif
  4965   00098A  EE20  F043         	lfsr	2,GetTecla@keymap
  4966   00098E  0E0B               	movlw	11
  4967   000990                     u640:
  4968   000990  0009               	tblrd		*+
  4969   000992  CFF5 FFDE          	movff	tablat,postinc2
  4970   000996  06E8               	decf	wreg,f,c
  4971   000998  E2FB               	bc	u640
  4972   00099A                     
  4973                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  4974   00099A  5050               	movf	GetTecla@fila^0,w,c
  4975   00099C  0D03               	mullw	3
  4976   00099E  50F3               	movf	243,w,c
  4977   0009A0  0F43               	addlw	low GetTecla@keymap
  4978   0009A2  244F               	addwf	GetTecla@columna^0,w,c
  4979   0009A4  6ED9               	movwf	fsr2l,c
  4980   0009A6  6ADA               	clrf	fsr2h,c
  4981   0009A8  50DF               	movf	indf2,w,c
  4982   0009AA                     l167:
  4983   0009AA  0012               	return		;funcret
  4984   0009AC                     __end_of_GetTecla:
  4985                           	callstack 0
  4986                           
  4987 ;; *************** function _initRFID *****************
  4988 ;; Defined at:
  4989 ;;		line 296 in file "TAD_RFID.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1
  5003 ;;      Params:         0       0       0
  5004 ;;      Locals:         0       0       0
  5005 ;;      Temps:          0       0       0
  5006 ;;      Totals:         0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used: 1
  5009 ;; Hardware stack levels required when called: 8
  5010 ;; This function calls:
  5011 ;;		_InitPortDirections
  5012 ;;		_MFRC522_Init
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text28
  5019   0011EC                     __ptext28:
  5020                           	callstack 0
  5021   0011EC                     _initRFID:
  5022                           	callstack 22
  5023   0011EC                     
  5024                           ;TAD_RFID.c: 297:     InitPortDirections();
  5025   0011EC  ECF0  F008         	call	_InitPortDirections	;wreg free
  5026   0011F0                     
  5027                           ;TAD_RFID.c: 298:     MFRC522_Init();
  5028   0011F0  EC77  F007         	call	_MFRC522_Init	;wreg free
  5029   0011F4  0012               	return		;funcret
  5030   0011F6                     __end_of_initRFID:
  5031                           	callstack 0
  5032                           
  5033 ;; *************** function _MFRC522_Init *****************
  5034 ;; Defined at:
  5035 ;;		line 117 in file "TAD_RFID.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1
  5049 ;;      Params:         0       0       0
  5050 ;;      Locals:         0       0       0
  5051 ;;      Temps:          0       0       0
  5052 ;;      Totals:         0       0       0
  5053 ;;Total ram usage:        0 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; Hardware stack levels required when called: 7
  5056 ;; This function calls:
  5057 ;;		_MFRC522_AntennaOff
  5058 ;;		_MFRC522_AntennaOn
  5059 ;;		_MFRC522_Reset
  5060 ;;		_MFRC522_Wr
  5061 ;; This function is called by:
  5062 ;;		_initRFID
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text29
  5067   000EEE                     __ptext29:
  5068                           	callstack 0
  5069   000EEE                     _MFRC522_Init:
  5070                           	callstack 22
  5071   000EEE                     
  5072                           ;TAD_RFID.c: 118:     LATCbits.LATC3 = 1;
  5073   000EEE  868B               	bsf	139,3,c	;volatile
  5074                           
  5075                           ;TAD_RFID.c: 119:     LATCbits.LATC4 = 1;
  5076   000EF0  888B               	bsf	139,4,c	;volatile
  5077   000EF2                     
  5078                           ;TAD_RFID.c: 121:     MFRC522_Reset();
  5079   000EF2  EC4F  F008         	call	_MFRC522_Reset	;wreg free
  5080                           
  5081                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2A, 0x8D);
  5082   000EF6  0E8D               	movlw	141
  5083   000EF8  6E4B               	movwf	MFRC522_Wr@value^0,c
  5084   000EFA  0E2A               	movlw	42
  5085   000EFC  ECEB  F005         	call	_MFRC522_Wr
  5086                           
  5087                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2B, 0x3E);
  5088   000F00  0E3E               	movlw	62
  5089   000F02  6E4B               	movwf	MFRC522_Wr@value^0,c
  5090   000F04  0E2B               	movlw	43
  5091   000F06  ECEB  F005         	call	_MFRC522_Wr
  5092                           
  5093                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2D, 30);
  5094   000F0A  0E1E               	movlw	30
  5095   000F0C  6E4B               	movwf	MFRC522_Wr@value^0,c
  5096   000F0E  0E2D               	movlw	45
  5097   000F10  ECEB  F005         	call	_MFRC522_Wr
  5098                           
  5099                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x2C, 0);
  5100   000F14  0E00               	movlw	0
  5101   000F16  6E4B               	movwf	MFRC522_Wr@value^0,c
  5102   000F18  0E2C               	movlw	44
  5103   000F1A  ECEB  F005         	call	_MFRC522_Wr
  5104                           
  5105                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x15, 0x40);
  5106   000F1E  0E40               	movlw	64
  5107   000F20  6E4B               	movwf	MFRC522_Wr@value^0,c
  5108   000F22  0E15               	movlw	21
  5109   000F24  ECEB  F005         	call	_MFRC522_Wr
  5110                           
  5111                           ;TAD_RFID.c: 127:     MFRC522_Wr(0x11, 0x3D);
  5112   000F28  0E3D               	movlw	61
  5113   000F2A  6E4B               	movwf	MFRC522_Wr@value^0,c
  5114   000F2C  0E11               	movlw	17
  5115   000F2E  ECEB  F005         	call	_MFRC522_Wr
  5116                           
  5117                           ;TAD_RFID.c: 129:     MFRC522_AntennaOff();
  5118   000F32  ECEA  F008         	call	_MFRC522_AntennaOff	;wreg free
  5119                           
  5120                           ;TAD_RFID.c: 130:     MFRC522_AntennaOn();
  5121   000F36  ECE4  F008         	call	_MFRC522_AntennaOn	;wreg free
  5122   000F3A  0012               	return		;funcret
  5123   000F3C                     __end_of_MFRC522_Init:
  5124                           	callstack 0
  5125                           
  5126 ;; *************** function _MFRC522_Reset *****************
  5127 ;; Defined at:
  5128 ;;		line 98 in file "TAD_RFID.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      void 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1
  5142 ;;      Params:         0       0       0
  5143 ;;      Locals:         0       0       0
  5144 ;;      Temps:          0       0       0
  5145 ;;      Totals:         0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used: 1
  5148 ;; Hardware stack levels required when called: 5
  5149 ;; This function calls:
  5150 ;;		_MFRC522_Wr
  5151 ;;		_delay_us
  5152 ;; This function is called by:
  5153 ;;		_MFRC522_Init
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text30
  5158   00109E                     __ptext30:
  5159                           	callstack 0
  5160   00109E                     _MFRC522_Reset:
  5161                           	callstack 23
  5162   00109E                     
  5163                           ;TAD_RFID.c: 99:     LATCbits.LATC4 = 1;
  5164   00109E  888B               	bsf	139,4,c	;volatile
  5165   0010A0                     
  5166                           ;TAD_RFID.c: 100:     delay_us (1);
  5167   0010A0  0E01               	movlw	1
  5168   0010A2  ECE7  F007         	call	_delay_us
  5169   0010A6                     
  5170                           ;TAD_RFID.c: 101:     LATCbits.LATC4 = 0;
  5171   0010A6  988B               	bcf	139,4,c	;volatile
  5172                           
  5173                           ;TAD_RFID.c: 102:     delay_us (1);
  5174   0010A8  0E01               	movlw	1
  5175   0010AA  ECE7  F007         	call	_delay_us
  5176   0010AE                     
  5177                           ;TAD_RFID.c: 103:     LATCbits.LATC4 = 1;
  5178   0010AE  888B               	bsf	139,4,c	;volatile
  5179                           
  5180                           ;TAD_RFID.c: 104:     delay_us (1);
  5181   0010B0  0E01               	movlw	1
  5182   0010B2  ECE7  F007         	call	_delay_us
  5183                           
  5184                           ;TAD_RFID.c: 105:     MFRC522_Wr(0x01, 0x0F);
  5185   0010B6  0E0F               	movlw	15
  5186   0010B8  6E4B               	movwf	MFRC522_Wr@value^0,c
  5187   0010BA  0E01               	movlw	1
  5188   0010BC  ECEB  F005         	call	_MFRC522_Wr
  5189                           
  5190                           ;TAD_RFID.c: 106:     delay_us (1);
  5191   0010C0  0E01               	movlw	1
  5192   0010C2  ECE7  F007         	call	_delay_us
  5193   0010C6  0012               	return		;funcret
  5194   0010C8                     __end_of_MFRC522_Reset:
  5195                           	callstack 0
  5196                           
  5197 ;; *************** function _MFRC522_AntennaOn *****************
  5198 ;; Defined at:
  5199 ;;		line 109 in file "TAD_RFID.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1
  5213 ;;      Params:         0       0       0
  5214 ;;      Locals:         0       0       0
  5215 ;;      Temps:          0       0       0
  5216 ;;      Totals:         0       0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used: 1
  5219 ;; Hardware stack levels required when called: 6
  5220 ;; This function calls:
  5221 ;;		_MFRC522_Set_Bit
  5222 ;; This function is called by:
  5223 ;;		_MFRC522_Init
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text31
  5228   0011C8                     __ptext31:
  5229                           	callstack 0
  5230   0011C8                     _MFRC522_AntennaOn:
  5231                           	callstack 22
  5232   0011C8                     
  5233                           ;TAD_RFID.c: 110:     MFRC522_Set_Bit(0x14, 0x03);
  5234   0011C8  0E03               	movlw	3
  5235   0011CA  6E50               	movwf	MFRC522_Set_Bit@mask^0,c
  5236   0011CC  0E14               	movlw	20
  5237   0011CE  ECD1  F008         	call	_MFRC522_Set_Bit
  5238   0011D2  0012               	return		;funcret
  5239   0011D4                     __end_of_MFRC522_AntennaOn:
  5240                           	callstack 0
  5241                           
  5242 ;; *************** function _MFRC522_Set_Bit *****************
  5243 ;; Defined at:
  5244 ;;		line 94 in file "TAD_RFID.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  addr            1    wreg     unsigned char 
  5247 ;;  mask            1   16[COMRAM] unsigned char 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  addr            1   17[COMRAM] unsigned char 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1
  5259 ;;      Params:         1       0       0
  5260 ;;      Locals:         1       0       0
  5261 ;;      Temps:          0       0       0
  5262 ;;      Totals:         2       0       0
  5263 ;;Total ram usage:        2 bytes
  5264 ;; Hardware stack levels used: 1
  5265 ;; Hardware stack levels required when called: 5
  5266 ;; This function calls:
  5267 ;;		_MFRC522_Rd
  5268 ;;		_MFRC522_Wr
  5269 ;; This function is called by:
  5270 ;;		_MFRC522_AntennaOn
  5271 ;;		_motor_RFID
  5272 ;;		_MFRC522_ToCard
  5273 ;;		_MFRC522_CRC
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text32
  5278   0011A2                     __ptext32:
  5279                           	callstack 0
  5280   0011A2                     _MFRC522_Set_Bit:
  5281                           	callstack 24
  5282                           
  5283                           ;incstack = 0
  5284                           ;MFRC522_Set_Bit@addr stored from wreg
  5285   0011A2  6E51               	movwf	MFRC522_Set_Bit@addr^0,c
  5286   0011A4                     
  5287                           ;TAD_RFID.c: 95:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  5288   0011A4  5051               	movf	MFRC522_Set_Bit@addr^0,w,c
  5289   0011A6  EC3F  F006         	call	_MFRC522_Rd
  5290   0011AA  1050               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  5291   0011AC  6E4B               	movwf	MFRC522_Wr@value^0,c
  5292   0011AE  5051               	movf	MFRC522_Set_Bit@addr^0,w,c
  5293   0011B0  ECEB  F005         	call	_MFRC522_Wr
  5294   0011B4  0012               	return		;funcret
  5295   0011B6                     __end_of_MFRC522_Set_Bit:
  5296                           	callstack 0
  5297                           
  5298 ;; *************** function _MFRC522_AntennaOff *****************
  5299 ;; Defined at:
  5300 ;;		line 113 in file "TAD_RFID.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1
  5314 ;;      Params:         0       0       0
  5315 ;;      Locals:         0       0       0
  5316 ;;      Temps:          0       0       0
  5317 ;;      Totals:         0       0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used: 1
  5320 ;; Hardware stack levels required when called: 6
  5321 ;; This function calls:
  5322 ;;		_MFRC522_Clear_Bit
  5323 ;; This function is called by:
  5324 ;;		_MFRC522_Init
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text33
  5329   0011D4                     __ptext33:
  5330                           	callstack 0
  5331   0011D4                     _MFRC522_AntennaOff:
  5332                           	callstack 22
  5333   0011D4                     
  5334                           ;TAD_RFID.c: 114:     MFRC522_Clear_Bit(0x14, 0x03);
  5335   0011D4  0E03               	movlw	3
  5336   0011D6  6E50               	movwf	MFRC522_Clear_Bit@mask^0,c
  5337   0011D8  0E14               	movlw	20
  5338   0011DA  EC98  F008         	call	_MFRC522_Clear_Bit
  5339   0011DE  0012               	return		;funcret
  5340   0011E0                     __end_of_MFRC522_AntennaOff:
  5341                           	callstack 0
  5342                           
  5343 ;; *************** function _MFRC522_Clear_Bit *****************
  5344 ;; Defined at:
  5345 ;;		line 90 in file "TAD_RFID.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  addr            1    wreg     unsigned char 
  5348 ;;  mask            1   16[COMRAM] unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  addr            1   18[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1
  5360 ;;      Params:         1       0       0
  5361 ;;      Locals:         1       0       0
  5362 ;;      Temps:          1       0       0
  5363 ;;      Totals:         3       0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used: 1
  5366 ;; Hardware stack levels required when called: 5
  5367 ;; This function calls:
  5368 ;;		_MFRC522_Rd
  5369 ;;		_MFRC522_Wr
  5370 ;; This function is called by:
  5371 ;;		_MFRC522_AntennaOff
  5372 ;;		_motor_RFID
  5373 ;;		_MFRC522_ToCard
  5374 ;;		_MFRC522_CRC
  5375 ;;		_MFRC522_Halt
  5376 ;;		_MFRC522_AntiColl
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text34
  5381   001130                     __ptext34:
  5382                           	callstack 0
  5383   001130                     _MFRC522_Clear_Bit:
  5384                           	callstack 24
  5385                           
  5386                           ;incstack = 0
  5387                           ;MFRC522_Clear_Bit@addr stored from wreg
  5388   001130  6E52               	movwf	MFRC522_Clear_Bit@addr^0,c
  5389   001132                     
  5390                           ;TAD_RFID.c: 91:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  5391   001132  5050               	movf	MFRC522_Clear_Bit@mask^0,w,c
  5392   001134  0AFF               	xorlw	255
  5393   001136  6E51               	movwf	??_MFRC522_Clear_Bit^0,c
  5394   001138  5052               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5395   00113A  EC3F  F006         	call	_MFRC522_Rd
  5396   00113E  1451               	andwf	??_MFRC522_Clear_Bit^0,w,c
  5397   001140  6E4B               	movwf	MFRC522_Wr@value^0,c
  5398   001142  5052               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5399   001144  ECEB  F005         	call	_MFRC522_Wr
  5400   001148  0012               	return		;funcret
  5401   00114A                     __end_of_MFRC522_Clear_Bit:
  5402                           	callstack 0
  5403                           
  5404 ;; *************** function _MFRC522_Wr *****************
  5405 ;; Defined at:
  5406 ;;		line 62 in file "TAD_RFID.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  Address         1    wreg     unsigned char 
  5409 ;;  value           1   11[COMRAM] unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  Address         1   13[COMRAM] unsigned char 
  5412 ;;  i               1   15[COMRAM] unsigned char 
  5413 ;;  ucAddr          1   14[COMRAM] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMRAM   BANK0   BANK1
  5423 ;;      Params:         1       0       0
  5424 ;;      Locals:         3       0       0
  5425 ;;      Temps:          1       0       0
  5426 ;;      Totals:         5       0       0
  5427 ;;Total ram usage:        5 bytes
  5428 ;; Hardware stack levels used: 1
  5429 ;; Hardware stack levels required when called: 4
  5430 ;; This function calls:
  5431 ;;		_delay_us
  5432 ;; This function is called by:
  5433 ;;		_MFRC522_Clear_Bit
  5434 ;;		_MFRC522_Set_Bit
  5435 ;;		_MFRC522_Reset
  5436 ;;		_MFRC522_Init
  5437 ;;		_motor_RFID
  5438 ;;		_MFRC522_ToCard
  5439 ;;		_MFRC522_Request
  5440 ;;		_MFRC522_CRC
  5441 ;;		_MFRC522_AntiColl
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           	psect	text35
  5446   000BD6                     __ptext35:
  5447                           	callstack 0
  5448   000BD6                     _MFRC522_Wr:
  5449                           	callstack 25
  5450                           
  5451                           ;incstack = 0
  5452                           ;MFRC522_Wr@Address stored from wreg
  5453   000BD6  6E4D               	movwf	MFRC522_Wr@Address^0,c
  5454   000BD8                     
  5455                           ;TAD_RFID.c: 63:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  5456   000BD8  504D               	movf	MFRC522_Wr@Address^0,w,c
  5457   000BDA  244D               	addwf	MFRC522_Wr@Address^0,w,c
  5458   000BDC  0B7E               	andlw	126
  5459   000BDE  6E4E               	movwf	MFRC522_Wr@ucAddr^0,c
  5460   000BE0                     
  5461                           ;TAD_RFID.c: 64:     LATCbits.LATC2 = 0;
  5462   000BE0  948B               	bcf	139,2,c	;volatile
  5463   000BE2                     
  5464                           ;TAD_RFID.c: 65:     LATCbits.LATC3 = 0;
  5465   000BE2  968B               	bcf	139,3,c	;volatile
  5466   000BE4                     
  5467                           ;TAD_RFID.c: 66:     for (i = 8; i > 0; i--) {
  5468   000BE4  0E08               	movlw	8
  5469   000BE6  6E4F               	movwf	MFRC522_Wr@i^0,c
  5470   000BE8                     l2589:
  5471                           
  5472                           ;TAD_RFID.c: 67:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5473   000BE8  BE4E               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  5474   000BEA  EFF9  F005         	goto	u1681
  5475   000BEE  EFFD  F005         	goto	u1680
  5476   000BF2                     u1681:
  5477   000BF2  6A4C               	clrf	??_MFRC522_Wr^0,c
  5478   000BF4  2A4C               	incf	??_MFRC522_Wr^0,f,c
  5479   000BF6  EFFE  F005         	goto	u1698
  5480   000BFA                     u1680:
  5481   000BFA  6A4C               	clrf	??_MFRC522_Wr^0,c
  5482   000BFC                     u1698:
  5483   000BFC  464C               	rlncf	??_MFRC522_Wr^0,f,c
  5484   000BFE  508B               	movf	139,w,c	;volatile
  5485   000C00  184C               	xorwf	??_MFRC522_Wr^0,w,c
  5486   000C02  0BFD               	andlw	-3
  5487   000C04  184C               	xorwf	??_MFRC522_Wr^0,w,c
  5488   000C06  6E8B               	movwf	139,c	;volatile
  5489   000C08                     
  5490                           ;TAD_RFID.c: 68:         LATCbits.LATC2 = 1;
  5491   000C08  848B               	bsf	139,2,c	;volatile
  5492                           
  5493                           ;TAD_RFID.c: 69:         ucAddr <<= 1;
  5494   000C0A  90D8               	bcf	status,0,c
  5495   000C0C  364E               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  5496   000C0E                     
  5497                           ;TAD_RFID.c: 70:         delay_us(5);
  5498   000C0E  0E05               	movlw	5
  5499   000C10  ECE7  F007         	call	_delay_us
  5500   000C14                     
  5501                           ;TAD_RFID.c: 71:         LATCbits.LATC2 = 0;
  5502   000C14  948B               	bcf	139,2,c	;volatile
  5503   000C16                     
  5504                           ;TAD_RFID.c: 72:         delay_us(5);
  5505   000C16  0E05               	movlw	5
  5506   000C18  ECE7  F007         	call	_delay_us
  5507   000C1C                     
  5508                           ;TAD_RFID.c: 73:     }
  5509   000C1C  064F               	decf	MFRC522_Wr@i^0,f,c
  5510   000C1E  504F               	movf	MFRC522_Wr@i^0,w,c
  5511   000C20  A4D8               	btfss	status,2,c
  5512   000C22  EF15  F006         	goto	u1701
  5513   000C26  EF17  F006         	goto	u1700
  5514   000C2A                     u1701:
  5515   000C2A  EFF4  F005         	goto	l2589
  5516   000C2E                     u1700:
  5517   000C2E                     
  5518                           ;TAD_RFID.c: 75:     for (i = 8; i > 0; i--) {
  5519   000C2E  0E08               	movlw	8
  5520   000C30  6E4F               	movwf	MFRC522_Wr@i^0,c
  5521   000C32                     l2607:
  5522                           
  5523                           ;TAD_RFID.c: 76:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  5524   000C32  BE4B               	btfsc	MFRC522_Wr@value^0,7,c
  5525   000C34  EF1E  F006         	goto	u1711
  5526   000C38  EF22  F006         	goto	u1710
  5527   000C3C                     u1711:
  5528   000C3C  6A4C               	clrf	??_MFRC522_Wr^0,c
  5529   000C3E  2A4C               	incf	??_MFRC522_Wr^0,f,c
  5530   000C40  EF23  F006         	goto	u1728
  5531   000C44                     u1710:
  5532   000C44  6A4C               	clrf	??_MFRC522_Wr^0,c
  5533   000C46                     u1728:
  5534   000C46  464C               	rlncf	??_MFRC522_Wr^0,f,c
  5535   000C48  508B               	movf	139,w,c	;volatile
  5536   000C4A  184C               	xorwf	??_MFRC522_Wr^0,w,c
  5537   000C4C  0BFD               	andlw	-3
  5538   000C4E  184C               	xorwf	??_MFRC522_Wr^0,w,c
  5539   000C50  6E8B               	movwf	139,c	;volatile
  5540   000C52                     
  5541                           ;TAD_RFID.c: 77:         LATCbits.LATC2 = 1;
  5542   000C52  848B               	bsf	139,2,c	;volatile
  5543                           
  5544                           ;TAD_RFID.c: 78:         value <<= 1;
  5545   000C54  90D8               	bcf	status,0,c
  5546   000C56  364B               	rlcf	MFRC522_Wr@value^0,f,c
  5547   000C58                     
  5548                           ;TAD_RFID.c: 79:         delay_us(5);
  5549   000C58  0E05               	movlw	5
  5550   000C5A  ECE7  F007         	call	_delay_us
  5551   000C5E                     
  5552                           ;TAD_RFID.c: 80:         LATCbits.LATC2 = 0;
  5553   000C5E  948B               	bcf	139,2,c	;volatile
  5554   000C60                     
  5555                           ;TAD_RFID.c: 81:         delay_us(5);
  5556   000C60  0E05               	movlw	5
  5557   000C62  ECE7  F007         	call	_delay_us
  5558   000C66                     
  5559                           ;TAD_RFID.c: 82:     }
  5560   000C66  064F               	decf	MFRC522_Wr@i^0,f,c
  5561   000C68  504F               	movf	MFRC522_Wr@i^0,w,c
  5562   000C6A  A4D8               	btfss	status,2,c
  5563   000C6C  EF3A  F006         	goto	u1731
  5564   000C70  EF3C  F006         	goto	u1730
  5565   000C74                     u1731:
  5566   000C74  EF19  F006         	goto	l2607
  5567   000C78                     u1730:
  5568   000C78                     
  5569                           ;TAD_RFID.c: 84:     LATCbits.LATC3 = 1;
  5570   000C78  868B               	bsf	139,3,c	;volatile
  5571                           
  5572                           ;TAD_RFID.c: 85:     LATCbits.LATC2 = 1;
  5573   000C7A  848B               	bsf	139,2,c	;volatile
  5574   000C7C  0012               	return		;funcret
  5575   000C7E                     __end_of_MFRC522_Wr:
  5576                           	callstack 0
  5577                           
  5578 ;; *************** function _MFRC522_Rd *****************
  5579 ;; Defined at:
  5580 ;;		line 31 in file "TAD_RFID.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  Address         1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  Address         1    7[COMRAM] unsigned char 
  5585 ;;  i               1   10[COMRAM] unsigned char 
  5586 ;;  ucResult        1    9[COMRAM] unsigned char 
  5587 ;;  ucAddr          1    8[COMRAM] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      unsigned char 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1
  5597 ;;      Params:         0       0       0
  5598 ;;      Locals:         4       0       0
  5599 ;;      Temps:          1       0       0
  5600 ;;      Totals:         5       0       0
  5601 ;;Total ram usage:        5 bytes
  5602 ;; Hardware stack levels used: 1
  5603 ;; Hardware stack levels required when called: 4
  5604 ;; This function calls:
  5605 ;;		_delay_us
  5606 ;; This function is called by:
  5607 ;;		_MFRC522_Clear_Bit
  5608 ;;		_MFRC522_Set_Bit
  5609 ;;		_motor_RFID
  5610 ;;		_MFRC522_ToCard
  5611 ;;		_MFRC522_CRC
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text36
  5616   000C7E                     __ptext36:
  5617                           	callstack 0
  5618   000C7E                     _MFRC522_Rd:
  5619                           	callstack 24
  5620                           
  5621                           ;incstack = 0
  5622                           ;MFRC522_Rd@Address stored from wreg
  5623   000C7E  6E47               	movwf	MFRC522_Rd@Address^0,c
  5624   000C80                     
  5625                           ;TAD_RFID.c: 32:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  5626   000C80  5047               	movf	MFRC522_Rd@Address^0,w,c
  5627   000C82  2447               	addwf	MFRC522_Rd@Address^0,w,c
  5628   000C84  0B7E               	andlw	126
  5629   000C86  0980               	iorlw	128
  5630   000C88  6E48               	movwf	MFRC522_Rd@ucAddr^0,c
  5631   000C8A                     
  5632                           ;TAD_RFID.c: 33:     unsigned char ucResult = 0;
  5633   000C8A  6A49               	clrf	MFRC522_Rd@ucResult^0,c
  5634   000C8C                     
  5635                           ;TAD_RFID.c: 35:     LATCbits.LATC2 = 0;
  5636   000C8C  948B               	bcf	139,2,c	;volatile
  5637   000C8E                     
  5638                           ;TAD_RFID.c: 36:     LATCbits.LATC3 = 0;
  5639   000C8E  968B               	bcf	139,3,c	;volatile
  5640   000C90                     
  5641                           ;TAD_RFID.c: 38:     for (i = 8; i > 0; i--) {
  5642   000C90  0E08               	movlw	8
  5643   000C92  6E4A               	movwf	MFRC522_Rd@i^0,c
  5644   000C94                     l2543:
  5645                           
  5646                           ;TAD_RFID.c: 39:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  5647   000C94  BE48               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  5648   000C96  EF4F  F006         	goto	u1631
  5649   000C9A  EF53  F006         	goto	u1630
  5650   000C9E                     u1631:
  5651   000C9E  6A46               	clrf	??_MFRC522_Rd^0,c
  5652   000CA0  2A46               	incf	??_MFRC522_Rd^0,f,c
  5653   000CA2  EF54  F006         	goto	u1648
  5654   000CA6                     u1630:
  5655   000CA6  6A46               	clrf	??_MFRC522_Rd^0,c
  5656   000CA8                     u1648:
  5657   000CA8  4646               	rlncf	??_MFRC522_Rd^0,f,c
  5658   000CAA  508B               	movf	139,w,c	;volatile
  5659   000CAC  1846               	xorwf	??_MFRC522_Rd^0,w,c
  5660   000CAE  0BFD               	andlw	-3
  5661   000CB0  1846               	xorwf	??_MFRC522_Rd^0,w,c
  5662   000CB2  6E8B               	movwf	139,c	;volatile
  5663   000CB4                     
  5664                           ;TAD_RFID.c: 40:         LATCbits.LATC2 = 1;
  5665   000CB4  848B               	bsf	139,2,c	;volatile
  5666   000CB6                     
  5667                           ;TAD_RFID.c: 41:         delay_us(5);
  5668   000CB6  0E05               	movlw	5
  5669   000CB8  ECE7  F007         	call	_delay_us
  5670   000CBC                     
  5671                           ;TAD_RFID.c: 42:         ucAddr <<= 1;
  5672   000CBC  90D8               	bcf	status,0,c
  5673   000CBE  3648               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  5674   000CC0                     
  5675                           ;TAD_RFID.c: 43:         LATCbits.LATC2 = 0;
  5676   000CC0  948B               	bcf	139,2,c	;volatile
  5677                           
  5678                           ;TAD_RFID.c: 44:         delay_us(5);
  5679   000CC2  0E05               	movlw	5
  5680   000CC4  ECE7  F007         	call	_delay_us
  5681   000CC8                     
  5682                           ;TAD_RFID.c: 45:     }
  5683   000CC8  064A               	decf	MFRC522_Rd@i^0,f,c
  5684   000CCA  504A               	movf	MFRC522_Rd@i^0,w,c
  5685   000CCC  A4D8               	btfss	status,2,c
  5686   000CCE  EF6B  F006         	goto	u1651
  5687   000CD2  EF6D  F006         	goto	u1650
  5688   000CD6                     u1651:
  5689   000CD6  EF4A  F006         	goto	l2543
  5690   000CDA                     u1650:
  5691   000CDA                     
  5692                           ;TAD_RFID.c: 47:     for (i = 8; i > 0; i--) {
  5693   000CDA  0E08               	movlw	8
  5694   000CDC  6E4A               	movwf	MFRC522_Rd@i^0,c
  5695   000CDE                     l201:
  5696                           
  5697                           ;TAD_RFID.c: 48:         LATCbits.LATC2 = 1;
  5698   000CDE  848B               	bsf	139,2,c	;volatile
  5699   000CE0                     
  5700                           ;TAD_RFID.c: 49:         delay_us(5);
  5701   000CE0  0E05               	movlw	5
  5702   000CE2  ECE7  F007         	call	_delay_us
  5703   000CE6                     
  5704                           ;TAD_RFID.c: 50:         ucResult <<= 1;
  5705   000CE6  90D8               	bcf	status,0,c
  5706   000CE8  3649               	rlcf	MFRC522_Rd@ucResult^0,f,c
  5707   000CEA                     
  5708                           ;TAD_RFID.c: 51:         ucResult|= PORTCbits.RC0;
  5709   000CEA  B082               	btfsc	130,0,c	;volatile
  5710   000CEC  EF7A  F006         	goto	u1661
  5711   000CF0  EF7D  F006         	goto	u1660
  5712   000CF4                     u1661:
  5713   000CF4  0E01               	movlw	1
  5714   000CF6  EF7E  F006         	goto	u1666
  5715   000CFA                     u1660:
  5716   000CFA  0E00               	movlw	0
  5717   000CFC                     u1666:
  5718   000CFC  1249               	iorwf	MFRC522_Rd@ucResult^0,f,c
  5719   000CFE                     
  5720                           ;TAD_RFID.c: 52:         LATCbits.LATC2 = 0;
  5721   000CFE  948B               	bcf	139,2,c	;volatile
  5722                           
  5723                           ;TAD_RFID.c: 53:         delay_us(5);
  5724   000D00  0E05               	movlw	5
  5725   000D02  ECE7  F007         	call	_delay_us
  5726   000D06                     
  5727                           ;TAD_RFID.c: 54:     }
  5728   000D06  064A               	decf	MFRC522_Rd@i^0,f,c
  5729   000D08  504A               	movf	MFRC522_Rd@i^0,w,c
  5730   000D0A  A4D8               	btfss	status,2,c
  5731   000D0C  EF8A  F006         	goto	u1671
  5732   000D10  EF8C  F006         	goto	u1670
  5733   000D14                     u1671:
  5734   000D14  EF6F  F006         	goto	l201
  5735   000D18                     u1670:
  5736   000D18                     
  5737                           ;TAD_RFID.c: 56:     LATCbits.LATC3 = 1;
  5738   000D18  868B               	bsf	139,3,c	;volatile
  5739                           
  5740                           ;TAD_RFID.c: 57:     LATCbits.LATC2 = 1;
  5741   000D1A  848B               	bsf	139,2,c	;volatile
  5742   000D1C                     
  5743                           ;TAD_RFID.c: 58:     return ucResult;
  5744   000D1C  5049               	movf	MFRC522_Rd@ucResult^0,w,c
  5745   000D1E  0012               	return		;funcret
  5746   000D20                     __end_of_MFRC522_Rd:
  5747                           	callstack 0
  5748                           
  5749 ;; *************** function _delay_us *****************
  5750 ;; Defined at:
  5751 ;;		line 25 in file "TAD_RFID.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  howMany         1    wreg     unsigned char 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  howMany         1    4[COMRAM] unsigned char 
  5756 ;;  x               1    5[COMRAM] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0, prodl, prodh
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1
  5766 ;;      Params:         0       0       0
  5767 ;;      Locals:         2       0       0
  5768 ;;      Temps:          3       0       0
  5769 ;;      Totals:         5       0       0
  5770 ;;Total ram usage:        5 bytes
  5771 ;; Hardware stack levels used: 1
  5772 ;; Hardware stack levels required when called: 3
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_MFRC522_Rd
  5777 ;;		_MFRC522_Wr
  5778 ;;		_MFRC522_Reset
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text37
  5783   000FCE                     __ptext37:
  5784                           	callstack 0
  5785   000FCE                     _delay_us:
  5786                           	callstack 25
  5787                           
  5788                           ;incstack = 0
  5789                           ;delay_us@howMany stored from wreg
  5790   000FCE  6E44               	movwf	delay_us@howMany^0,c
  5791   000FD0                     
  5792                           ;TAD_RFID.c: 27:     char x;;TAD_RFID.c: 28:     for (x = 0; x < howMany * 3; x++) __nop
      +                          ();
  5793   000FD0  6A45               	clrf	delay_us@x^0,c
  5794   000FD2  EFED  F007         	goto	l2527
  5795   000FD6                     l194:
  5796   000FD6  0000               	nop	
  5797   000FD8  2A45               	incf	delay_us@x^0,f,c
  5798   000FDA                     l2527:
  5799   000FDA  5044               	movf	delay_us@howMany^0,w,c
  5800   000FDC  0D03               	mullw	3
  5801   000FDE  5045               	movf	delay_us@x^0,w,c
  5802   000FE0  6E41               	movwf	??_delay_us^0,c
  5803   000FE2  6A42               	clrf	(??_delay_us+1)^0,c
  5804   000FE4  50F3               	movf	243,w,c
  5805   000FE6  5C41               	subwf	??_delay_us^0,w,c
  5806   000FE8  5042               	movf	(??_delay_us+1)^0,w,c
  5807   000FEA  0A80               	xorlw	128
  5808   000FEC  6E43               	movwf	(??_delay_us+2)^0,c
  5809   000FEE  50F4               	movf	244,w,c
  5810   000FF0  0A80               	xorlw	128
  5811   000FF2  5843               	subwfb	(??_delay_us+2)^0,w,c
  5812   000FF4  A0D8               	btfss	status,0,c
  5813   000FF6  EFFF  F007         	goto	u1621
  5814   000FFA  EF01  F008         	goto	u1620
  5815   000FFE                     u1621:
  5816   000FFE  EFEB  F007         	goto	l194
  5817   001002                     u1620:
  5818   001002  0012               	return		;funcret
  5819   001004                     __end_of_delay_us:
  5820                           	callstack 0
  5821                           
  5822 ;; *************** function _InitPortDirections *****************
  5823 ;; Defined at:
  5824 ;;		line 17 in file "TAD_RFID.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;		None
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		None
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1
  5838 ;;      Params:         0       0       0
  5839 ;;      Locals:         0       0       0
  5840 ;;      Temps:          0       0       0
  5841 ;;      Totals:         0       0       0
  5842 ;;Total ram usage:        0 bytes
  5843 ;; Hardware stack levels used: 1
  5844 ;; Hardware stack levels required when called: 3
  5845 ;; This function calls:
  5846 ;;		Nothing
  5847 ;; This function is called by:
  5848 ;;		_initRFID
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text38
  5853   0011E0                     __ptext38:
  5854                           	callstack 0
  5855   0011E0                     _InitPortDirections:
  5856                           	callstack 26
  5857   0011E0                     
  5858                           ;TAD_RFID.c: 18:     TRISCbits.TRISC0 = 1;
  5859   0011E0  8094               	bsf	148,0,c	;volatile
  5860                           
  5861                           ;TAD_RFID.c: 19:     TRISCbits.TRISC1 = 0;
  5862   0011E2  9294               	bcf	148,1,c	;volatile
  5863                           
  5864                           ;TAD_RFID.c: 20:     TRISCbits.TRISC2 = 0;
  5865   0011E4  9494               	bcf	148,2,c	;volatile
  5866                           
  5867                           ;TAD_RFID.c: 21:     TRISCbits.TRISC3 = 0;
  5868   0011E6  9694               	bcf	148,3,c	;volatile
  5869                           
  5870                           ;TAD_RFID.c: 22:     TRISCbits.TRISC4 = 0;
  5871   0011E8  9894               	bcf	148,4,c	;volatile
  5872   0011EA  0012               	return		;funcret
  5873   0011EC                     __end_of_InitPortDirections:
  5874                           	callstack 0
  5875                           
  5876 ;; *************** function _Terminal_Init *****************
  5877 ;; Defined at:
  5878 ;;		line 26 in file "TAD_TERMINAL.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1
  5892 ;;      Params:         0       0       0
  5893 ;;      Locals:         0       0       0
  5894 ;;      Temps:          0       0       0
  5895 ;;      Totals:         0       0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used: 1
  5898 ;; Hardware stack levels required when called: 3
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_main
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text39
  5907   0011B6                     __ptext39:
  5908                           	callstack 0
  5909   0011B6                     _Terminal_Init:
  5910                           	callstack 27
  5911   0011B6                     
  5912                           ;TAD_TERMINAL.c: 27:  TXSTA = 0x24;
  5913   0011B6  0E24               	movlw	36
  5914   0011B8  6EAC               	movwf	172,c	;volatile
  5915                           
  5916                           ;TAD_TERMINAL.c: 28:  RCSTA = 0x90;
  5917   0011BA  0E90               	movlw	144
  5918   0011BC  6EAB               	movwf	171,c	;volatile
  5919                           
  5920                           ;TAD_TERMINAL.c: 29:  SPBRG = 64;
  5921   0011BE  0E40               	movlw	64
  5922   0011C0  6EAF               	movwf	175,c	;volatile
  5923   0011C2                     
  5924                           ;TAD_TERMINAL.c: 30:  BAUDCON = 0x00;
  5925   0011C2  6AB8               	clrf	184,c	;volatile
  5926   0011C4                     
  5927                           ;TAD_TERMINAL.c: 31:  hashtag_pressed = 0;
  5928   0011C4  6A25               	clrf	_hashtag_pressed^0,c
  5929   0011C6  0012               	return		;funcret
  5930   0011C8                     __end_of_Terminal_Init:
  5931                           	callstack 0
  5932                           
  5933 ;; *************** function _TI_Init *****************
  5934 ;; Defined at:
  5935 ;;		line 32 in file "TAD_TIMER.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;		None
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;  counter         1    1[COMRAM] unsigned char 
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1
  5949 ;;      Params:         0       0       0
  5950 ;;      Locals:         1       0       0
  5951 ;;      Temps:          0       0       0
  5952 ;;      Totals:         1       0       0
  5953 ;;Total ram usage:        1 bytes
  5954 ;; Hardware stack levels used: 1
  5955 ;; Hardware stack levels required when called: 3
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_main
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text40
  5964   001038                     __ptext40:
  5965                           	callstack 0
  5966   001038                     _TI_Init:
  5967                           	callstack 27
  5968   001038                     
  5969                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  5970   001038  6A41               	clrf	TI_Init@counter^0,c
  5971   00103A                     l1973:
  5972                           
  5973                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  5974   00103A  5041               	movf	TI_Init@counter^0,w,c
  5975   00103C  0D05               	mullw	5
  5976   00103E  50F3               	movf	243,w,c
  5977   001040  0F05               	addlw	low (_Timers+4)
  5978   001042  6ED9               	movwf	fsr2l,c
  5979   001044  6ADA               	clrf	fsr2h,c
  5980   001046  6ADF               	clrf	indf2,c
  5981   001048                     
  5982                           ;TAD_TIMER.c: 35:  }
  5983   001048  2A41               	incf	TI_Init@counter^0,f,c
  5984   00104A  0E03               	movlw	3
  5985   00104C  6441               	cpfsgt	TI_Init@counter^0,c
  5986   00104E  EF2B  F008         	goto	u811
  5987   001052  EF2D  F008         	goto	u810
  5988   001056                     u811:
  5989   001056  EF1D  F008         	goto	l1973
  5990   00105A                     u810:
  5991   00105A                     
  5992                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  5993   00105A  0E82               	movlw	130
  5994   00105C  6ED5               	movwf	213,c	;volatile
  5995                           
  5996                           ;TAD_TIMER.c: 37:     TMR0=64911;
  5997   00105E  0EFD               	movlw	253
  5998   001060  6ED7               	movwf	215,c	;volatile
  5999   001062  0E8F               	movlw	143
  6000   001064  6ED6               	movwf	214,c	;volatile
  6001   001066                     
  6002                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  6003   001066  94F2               	bcf	242,2,c	;volatile
  6004   001068                     
  6005                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  6006   001068  8AF2               	bsf	242,5,c	;volatile
  6007   00106A  0012               	return		;funcret
  6008   00106C                     __end_of_TI_Init:
  6009                           	callstack 0
  6010                           
  6011 ;; *************** function _LowRSI *****************
  6012 ;; Defined at:
  6013 ;;		line 31 in file "main.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		None
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1
  6027 ;;      Params:         0       0       0
  6028 ;;      Locals:         0       0       0
  6029 ;;      Temps:          1       0       0
  6030 ;;      Totals:         1       0       0
  6031 ;;Total ram usage:        1 bytes
  6032 ;; Hardware stack levels used: 1
  6033 ;; Hardware stack levels required when called: 2
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		Interrupt level 1
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	intcodelo
  6042   000018                     __pintcodelo:
  6043                           	callstack 0
  6044   000018                     _LowRSI:
  6045                           	callstack 22
  6046                           
  6047                           ;incstack = 0
  6048   000018  8077               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6049   00001A  CFE0 F040          	movff	bsr,??_LowRSI
  6050   00001E  C040  FFE0         	movff	??_LowRSI,bsr
  6051   000022  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6052   000024  0010               	retfie	
  6053   000026                     __end_of_LowRSI:
  6054                           	callstack 0
  6055                           
  6056 ;; *************** function _HighRSI *****************
  6057 ;; Defined at:
  6058 ;;		line 27 in file "main.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1
  6072 ;;      Params:         0       0       0
  6073 ;;      Locals:         0       0       0
  6074 ;;      Temps:          0       0       0
  6075 ;;      Totals:         0       0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used: 1
  6078 ;; Hardware stack levels required when called: 1
  6079 ;; This function calls:
  6080 ;;		_RSI_Timer0
  6081 ;; This function is called by:
  6082 ;;		Interrupt level 2
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	intcode
  6087   000008                     __pintcode:
  6088                           	callstack 0
  6089   000008                     _HighRSI:
  6090                           	callstack 22
  6091                           
  6092                           ;incstack = 0
  6093   000008  8277               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6094   00000A  EFBC  F008         	goto	int_func
  6095                           
  6096                           	psect	intcode_body
  6097   001178                     __pintcode_body:
  6098                           	callstack 22
  6099   001178                     int_func:
  6100                           	callstack 22
  6101   001178                     
  6102                           ;main.c: 29:  }
  6103   001178  A4F2               	btfss	242,2,c	;volatile
  6104   00117A  EFC1  F008         	goto	i2u143_41
  6105   00117E  EFC3  F008         	goto	i2u143_40
  6106   001182                     i2u143_41:
  6107   001182  EFC5  F008         	goto	i2l26
  6108   001186                     i2u143_40:
  6109   001186  ECA5  F008         	call	_RSI_Timer0	;wreg free
  6110   00118A                     i2l26:
  6111   00118A  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6112   00118C  0011               	retfie		f
  6113   00118E                     __end_of_HighRSI:
  6114                           	callstack 0
  6115                           
  6116 ;; *************** function _RSI_Timer0 *****************
  6117 ;; Defined at:
  6118 ;;		line 25 in file "TAD_TIMER.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1
  6132 ;;      Params:         0       0       0
  6133 ;;      Locals:         0       0       0
  6134 ;;      Temps:          0       0       0
  6135 ;;      Totals:         0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used: 1
  6138 ;; This function calls:
  6139 ;;		Nothing
  6140 ;; This function is called by:
  6141 ;;		_HighRSI
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text43
  6146   00114A                     __ptext43:
  6147                           	callstack 0
  6148   00114A                     _RSI_Timer0:
  6149                           	callstack 22
  6150   00114A                     
  6151                           ;TAD_TIMER.c: 27:     TMR0=64911;
  6152   00114A  0EFD               	movlw	253
  6153   00114C  6ED7               	movwf	215,c	;volatile
  6154   00114E  0E8F               	movlw	143
  6155   001150  6ED6               	movwf	214,c	;volatile
  6156   001152                     
  6157                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  6158   001152  94F2               	bcf	4082,2,c	;volatile
  6159   001154                     
  6160                           ;TAD_TIMER.c: 29:     Tics++;
  6161   001154  0E01               	movlw	1
  6162   001156  2615               	addwf	_Tics^0,f,c	;volatile
  6163   001158  0E00               	movlw	0
  6164   00115A  2216               	addwfc	(_Tics+1)^0,f,c	;volatile
  6165   00115C  2217               	addwfc	(_Tics+2)^0,f,c	;volatile
  6166   00115E  2218               	addwfc	(_Tics+3)^0,f,c	;volatile
  6167   001160  0012               	return		;funcret
  6168   001162                     __end_of_RSI_Timer0:
  6169                           	callstack 0
  6170                           
  6171                           	psect	rparam
  6172   000001                     ___rparam_used  equ	1
  6173   000000                     ___param_bank   equ	0
  6174   000000                     __Lparam        equ	__Lrparam
  6175   000000                     __Hparam        equ	__Hrparam
  6176                           
  6177                           	psect	temp
  6178   000077                     btemp:
  6179                           	callstack 0
  6180   000077                     	ds	1
  6181   000077                     int$flags       set	btemp
  6182   000078                     wtemp8          set	btemp+1
  6183   000078                     ttemp5          set	btemp+1
  6184   00007B                     ttemp6          set	btemp+4
  6185   00007F                     ttemp7          set	btemp+8
  6186                           
  6187                           	psect	idloc
  6188                           
  6189                           ;Config register IDLOC0 @ 0x200000
  6190                           ;	unspecified, using default values
  6191   200000                     	org	2097152
  6192   200000  FF                 	db	255
  6193                           
  6194                           ;Config register IDLOC1 @ 0x200001
  6195                           ;	unspecified, using default values
  6196   200001                     	org	2097153
  6197   200001  FF                 	db	255
  6198                           
  6199                           ;Config register IDLOC2 @ 0x200002
  6200                           ;	unspecified, using default values
  6201   200002                     	org	2097154
  6202   200002  FF                 	db	255
  6203                           
  6204                           ;Config register IDLOC3 @ 0x200003
  6205                           ;	unspecified, using default values
  6206   200003                     	org	2097155
  6207   200003  FF                 	db	255
  6208                           
  6209                           ;Config register IDLOC4 @ 0x200004
  6210                           ;	unspecified, using default values
  6211   200004                     	org	2097156
  6212   200004  FF                 	db	255
  6213                           
  6214                           ;Config register IDLOC5 @ 0x200005
  6215                           ;	unspecified, using default values
  6216   200005                     	org	2097157
  6217   200005  FF                 	db	255
  6218                           
  6219                           ;Config register IDLOC6 @ 0x200006
  6220                           ;	unspecified, using default values
  6221   200006                     	org	2097158
  6222   200006  FF                 	db	255
  6223                           
  6224                           ;Config register IDLOC7 @ 0x200007
  6225                           ;	unspecified, using default values
  6226   200007                     	org	2097159
  6227   200007  FF                 	db	255
  6228                           
  6229                           	psect	config
  6230                           
  6231                           ; Padding undefined space
  6232   300000                     	org	3145728
  6233   300000  FF                 	db	255
  6234                           
  6235                           ;Config register CONFIG1H @ 0x300001
  6236                           ;	Oscillator
  6237                           ;	OSC = HS, HS Oscillator
  6238                           ;	Fail-Safe Clock Monitor Enable bit
  6239                           ;	FCMEN = 0x0, unprogrammed default
  6240                           ;	Internal/External Oscillator Switchover bit
  6241                           ;	IESO = 0x0, unprogrammed default
  6242   300001                     	org	3145729
  6243   300001  02                 	db	2
  6244                           
  6245                           ;Config register CONFIG2L @ 0x300002
  6246                           ;	Power-up Timer Enable bit
  6247                           ;	PWRT = OFF, PWRT disabled
  6248                           ;	Brown-out Reset Enable bits
  6249                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6250                           ;	Brown-out Reset Voltage bits
  6251                           ;	BORV = 0x3, unprogrammed default
  6252   300002                     	org	3145730
  6253   300002  19                 	db	25
  6254                           
  6255                           ;Config register CONFIG2H @ 0x300003
  6256                           ;	Watchdog Timer Enable bit
  6257                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6258                           ;	Watchdog Timer Postscale Select bits
  6259                           ;	WDTPS = 0xF, unprogrammed default
  6260   300003                     	org	3145731
  6261   300003  1E                 	db	30
  6262                           
  6263                           ; Padding undefined space
  6264   300004                     	org	3145732
  6265   300004  FF                 	db	255
  6266                           
  6267                           ;Config register CONFIG3H @ 0x300005
  6268                           ;	CCP2 MUX bit
  6269                           ;	CCP2MX = 0x1, unprogrammed default
  6270                           ;	PORTB A/D Enable bit
  6271                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6272                           ;	Low-Power Timer1 Oscillator Enable bit
  6273                           ;	LPT1OSC = 0x0, unprogrammed default
  6274                           ;	MCLR Pin Enable bit
  6275                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  6276   300005                     	org	3145733
  6277   300005  01                 	db	1
  6278                           
  6279                           ;Config register CONFIG4L @ 0x300006
  6280                           ;	Stack Full/Underflow Reset Enable bit
  6281                           ;	STVREN = 0x1, unprogrammed default
  6282                           ;	Single-Supply ICSP Enable bit
  6283                           ;	LVP = OFF, Single-Supply ICSP disabled
  6284                           ;	Boot Block Size Select bits
  6285                           ;	BBSIZ = 0x0, unprogrammed default
  6286                           ;	Extended Instruction Set Enable bit
  6287                           ;	XINST = 0x0, unprogrammed default
  6288                           ;	Background Debugger Enable bit
  6289                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  6290   300006                     	org	3145734
  6291   300006  81                 	db	129
  6292                           
  6293                           ; Padding undefined space
  6294   300007                     	org	3145735
  6295   300007  FF                 	db	255
  6296                           
  6297                           ;Config register CONFIG5L @ 0x300008
  6298                           ;	unspecified, using default values
  6299                           ;	Code Protection bit
  6300                           ;	CP0 = 0x1, unprogrammed default
  6301                           ;	Code Protection bit
  6302                           ;	CP1 = 0x1, unprogrammed default
  6303   300008                     	org	3145736
  6304   300008  03                 	db	3
  6305                           
  6306                           ;Config register CONFIG5H @ 0x300009
  6307                           ;	unspecified, using default values
  6308                           ;	Boot Block Code Protection bitProtect Boot
  6309                           ;	CPB = 0x1, unprogrammed default
  6310                           ;	Data EEPROM Code Protection bit
  6311                           ;	CPD = 0x1, unprogrammed default
  6312   300009                     	org	3145737
  6313   300009  C0                 	db	192
  6314                           
  6315                           ;Config register CONFIG6L @ 0x30000A
  6316                           ;	unspecified, using default values
  6317                           ;	Write Protection bit
  6318                           ;	WRT0 = 0x1, unprogrammed default
  6319                           ;	Write Protection bit
  6320                           ;	WRT1 = 0x1, unprogrammed default
  6321   30000A                     	org	3145738
  6322   30000A  03                 	db	3
  6323                           
  6324                           ;Config register CONFIG6H @ 0x30000B
  6325                           ;	unspecified, using default values
  6326                           ;	Configuration Register Write Protection bit
  6327                           ;	WRTC = 0x1, unprogrammed default
  6328                           ;	Boot Block Write Protection bit
  6329                           ;	WRTB = 0x1, unprogrammed default
  6330                           ;	Data EEPROM Write Protection bit
  6331                           ;	WRTD = 0x1, unprogrammed default
  6332   30000B                     	org	3145739
  6333   30000B  E0                 	db	224
  6334                           
  6335                           ;Config register CONFIG7L @ 0x30000C
  6336                           ;	unspecified, using default values
  6337                           ;	Table Read Protection bit
  6338                           ;	EBTR0 = 0x1, unprogrammed default
  6339                           ;	Table Read Protection bit
  6340                           ;	EBTR1 = 0x1, unprogrammed default
  6341   30000C                     	org	3145740
  6342   30000C  03                 	db	3
  6343                           
  6344                           ;Config register CONFIG7H @ 0x30000D
  6345                           ;	unspecified, using default values
  6346                           ;	Boot Block Table Read Protection bit
  6347                           ;	EBTRB = 0x1, unprogrammed default
  6348   30000D                     	org	3145741
  6349   30000D  40                 	db	64
  6350                           tosu	equ	0xFFF
  6351                           tosh	equ	0xFFE
  6352                           tosl	equ	0xFFD
  6353                           stkptr	equ	0xFFC
  6354                           pclatu	equ	0xFFB
  6355                           pclath	equ	0xFFA
  6356                           pcl	equ	0xFF9
  6357                           tblptru	equ	0xFF8
  6358                           tblptrh	equ	0xFF7
  6359                           tblptrl	equ	0xFF6
  6360                           tablat	equ	0xFF5
  6361                           prodh	equ	0xFF4
  6362                           prodl	equ	0xFF3
  6363                           indf0	equ	0xFEF
  6364                           postinc0	equ	0xFEE
  6365                           postdec0	equ	0xFED
  6366                           preinc0	equ	0xFEC
  6367                           plusw0	equ	0xFEB
  6368                           fsr0h	equ	0xFEA
  6369                           fsr0l	equ	0xFE9
  6370                           wreg	equ	0xFE8
  6371                           indf1	equ	0xFE7
  6372                           postinc1	equ	0xFE6
  6373                           postdec1	equ	0xFE5
  6374                           preinc1	equ	0xFE4
  6375                           plusw1	equ	0xFE3
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           bsr	equ	0xFE0
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           preinc2	equ	0xFDC
  6383                           plusw2	equ	0xFDB
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8

Data Sizes:
    Strings     246
    Constant    12
    Data        0
    BSS         195
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     55     118
    BANK0           128      0      32
    BANK1           256      0     100

Pointer List with Targets:

    displayUID@uid	PTR unsigned char  size(1) Largest target is 6
		 -> motor_RFID@UID(COMRAM[6]), ReadRFID_NoCooperatiu@UID(COMRAM[6]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 100
		 -> motor_RFID@buffer(BANK1[100]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 100
		 -> motor_RFID@buffer(BANK1[100]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    motor_RFID@p	PTR unsigned char  size(2) Largest target is 100
		 -> motor_RFID@buffer(BANK1[100]), 

    S1300$buffer	PTR unsigned char  size(2) Largest target is 100
		 -> motor_RFID@buffer(BANK1[100]), 

    S1300$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> motor_RFID@buffer(BANK1[100]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> displayUID@hexString(COMRAM[11]), STR_10(CODE[33]), STR_11(CODE[9]), STR_12(CODE[14]), 
		 -> STR_13(CODE[14]), STR_14(CODE[14]), STR_15(CODE[33]), STR_2(CODE[6]), 
		 -> STR_3(CODE[2]), STR_4(CODE[18]), STR_5(CODE[18]), STR_6(CODE[18]), 
		 -> STR_7(CODE[19]), STR_8(CODE[27]), STR_9(CODE[29]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _displayUID->_Terminal_SendString
    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _motorTeclado->_GetTecla
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6211
                            _TI_Init
                      _Terminal_Init
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           3     3      0    3971
                                             52 COMRAM     3     3      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
                         _displayUID
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20    14      6    1801
                                             32 COMRAM    20    14      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    1584
                                             26 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           15    12      3    1459
                                             11 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     230
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     302
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _displayUID                                          20    19      1     547
                                              6 COMRAM    20    19      1
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     291
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      89
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2      89
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     112
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1679
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1679
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     303
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     561
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Set_Bit                                      2     1      1     561
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     565
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     565
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     250
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           5     5      0     223
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      53
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _initTeclado
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Clear_Bit
     _MFRC522_Rd
     _MFRC522_Set_Bit
     _MFRC522_Wr
     _displayUID
       _Terminal_SendString
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0     100     39.1%
BITBANK0           128      0       0      0.0%
BANK0              128      0      32     25.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     55     118     93.7%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     248      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Mar 05 17:30:12 2025

       __end_ofGetTecla@F3223 1F09         ?_Terminal_ReceiveChar 0040                    _RSI_Timer0 114A  
                 MFRC522_Rd@i 004A                   MFRC522_Wr@i 004F                            l62 106A  
                          l72 1112                            l75 0F86                            l68 0E4A  
                ___awdiv@sign 0046                    _TI_GetTics 0F3C                            bsr 0FE0  
        ??_InitPortDirections 0041                           l120 1204                           l201 0CDE  
                         l202 0D18                           l210 0C7C                           l114 1210  
                         l203 0D1E                           l213 1148                           l117 1176  
                         l222 11D2                           l216 11B4                           l209 0C78  
                         l225 11DE                           l161 08EE                           l219 10C6  
                         l228 0F3A                           l157 0FCC                           l149 0506  
                         l190 11EA                           l167 09AA                           l512 112E  
                         l360 02D6                           l169 0938                           l521 1214  
                         l194 0FD6                           l530 0D92                           l506 07FA  
                         l515 11A0                           l196 1002                           l509 11C6  
                         l533 0DF4                           l518 11FC                           l358 0278  
                         l536 120A                           l801 0BD4                           l298 11F4  
                         l554 08E6                           l497 07D6                           l788 0A6C  
                         u610 0F9A                           u611 0F96                           u620 0FB2  
                         u621 0FAE                           u630 0FCA                           u631 0FC6  
                         u640 0990                           u800 119E                           u801 1198  
                         u810 105A                           u811 1056                           u806 11A0  
                         _abs 1004                  ___awmod@sign 0046                           wreg 0FE8  
              ??_MFRC522_Init 0053                          ?_abs 0047                          l1302 0B26  
                        l1313 1216                          l1235 0EEC                          l3101 02FA  
                        l3021 0754                          l3013 0714                          l3111 0326  
                        l3103 0302                          l3031 079E                          l3023 0764  
                        l3015 0728                          l3007 070C                          l3121 0356  
                        l3113 0336                          l3105 0312                          l1601 11FE  
                        l3201 0800                          l3033 07B6                          l3025 0772  
                        l3017 0738                          l3041 0EAA                          l1290 1036  
                        l1282 0E94                          l3115 033A                          l3107 0318  
                        l1603 1202                          l3211 0830                          l3203 0814  
                        l3035 07BA                          l3027 0782                          l3019 0748  
                        l1283 0E9C                          l3043 0EB2                          l1276 06B4  
                        l3141 039E                          l3133 0380                          l3125 0360  
                        l3117 033E                          l3109 0320                          l3221 0866  
                        l3213 0834                          l3205 0818                          l3037 07D8  
                        l3029 0792                          l1277 070A                          l3045 0EBA  
                        l3301 0170                          l3143 03A4                          l3135 0390  
                        l3127 0366                          l3119 0346                          l3231 089C  
                        l3223 0872                          l3215 083A                          l3207 081C  
                        l1287 101E                          l3047 0ED6                          l3039 0E9E  
                        l3311 0198                          l3303 0174                          l1801 11E0  
                        l2601 0C1E                          l3161 0408                          l3153 03BE  
                        l3145 03AA                          l3137 0394                          l3129 0376  
                        l3233 08B0                          l3225 0878                          l3217 084E  
                        l3209 082C                          l3049 0EE4                          l3321 01CA  
                        l3313 01A2                          l2523 0FD0                          l2531 0C8A  
                        l2611 0C58                          l2603 0C2E                          l1731 10F2  
                        l3171 0458                          l3163 0418                          l3155 03CE  
                        l3139 0398                          l3091 02D8                          l3227 088C  
                        l3219 0852                          l3243 08D0                          l3331 01FE  
                        l3323 01D4                          l3315 01AC                          l3307 0186  
                        l3251 0062                          l2525 0FD8                          l2533 0C8C  
                        l2613 0C5E                          l1733 10F4                          l3181 04A4  
                        l3173 045E                          l3165 0438                          l3157 03EE  
                        l3093 02DC                          l3085 0D94                          l3237 08C0  
                        l2621 09AC                          l2701 0A6E                          l3341 024C  
                        l3333 0212                          l3325 01DE                          l3317 01B6  
                        l3309 018E                          l3261 008A                          l3253 0066  
                        l3245 002A                          l2527 0FDA                          l2551 0CC0  
                        l2543 0C94                          l2535 0C8E                          l2615 0C60  
                        l2607 0C32                          l3087 11EC                          l1743 120C  
                        l1735 1110                          l1751 0F9A                          l3191 04C4  
                        l3167 044A                          l3159 0400                          l3095 02E2  
                        l2631 09D6                          l2623 09AE                          l2711 0AE6  
                        l2703 0A7E                          l3351 0266                          l3343 0254  
                        l3335 0218                          l3327 01E8                          l3319 01C0  
                        l3271 00BC                          l3263 0094                          l3255 006E  
                        l3247 0032                          l2561 0CE0                          l2553 0CC8  
                        l2545 0CB4                          l2537 0C90                          l2529 0C80  
                        l2617 0C66                          l2609 0C52                          l2721 11A4  
                        l3089 11F0                          l1761 08E8                          l1753 0FA0  
                        l3193 04C8                          l3185 04AC                          l3177 0472  
                        l3169 0450                          l3097 02F2                          l2641 0A04  
                        l2633 09DE                          l2625 09BC                          l2705 0A8E  
                        l3353 0268                          l3337 0222                          l3329 01F0  
                        l3281 00F0                          l3273 00BE                          l3265 009E  
                        l3257 0076                          l3249 0058                          l3441 10D8  
                        l2571 0D08                          l2563 0CE6                          l2555 0CCA  
                        l2547 0CB6                          l2619 0C68                          l2811 11C8  
                        l2803 109E                          l1763 08F4                          l1755 0FB2  
                        l1747 0F88                          l3187 04B2                          l3179 0482  
                        l3099 02F6                          l2723 1114                          l2651 0A3E  
                        l2643 0A0C                          l2635 09E2                          l2627 09C4  
                        l2715 1004                          l2707 0A98                          l2731 0510  
                        l3363 028A                          l3355 027A                          l3339 0232  
                        l3291 013E                          l3283 00F6                          l3275 00C6  
                        l3267 00A8                          l3259 0080                          l3371 02B8  
                        l3443 10DA                          l3435 10C8                          l2573 0D1C  
                        l2565 0CEA                          l2557 0CDA                          l2549 0CBC  
                        l2581 0BE2                          l2813 11D4                          l2805 10A0  
                        l1765 08FC                          l1757 0FB8                          l1749 0F8A  
                        l3189 04C2                          l3197 04D0                          l2901 0D24  
                        l2661 0A64                          l2653 0A40                          l2645 0A1A  
                        l2637 09EA                          l2629 09C8                          l2717 1012  
                        l2709 0AB4                          l2741 055C                          l2733 0532  
                        l3365 02A8                          l3357 0282                          l3349 0256  
                        l3293 0142                          l3285 0100                          l3277 00CE  
                        l3269 00B2                          l3445 10DC                          l3437 10D0  
                        l2567 0CFE                          l2591 0C08                          l2583 0BE4  
                        l2719 1132                          l2807 10A6                          l1791 099A  
                        l1767 0904                          l1775 0912                          l1759 0FCA  
                        l1951 118E                          l2727 11F8                          l2903 0D3A  
                        l3199 07FC                          l2655 0A46                          l2647 0A20  
                        l2639 09FC                          l2671 0B40                          l2751 05DE  
                        l2743 0578                          l2735 053E                          l2911 0E54  
                        l3367 02B2                          l3287 0110                          l3279 00DC  
                        l3447 10E0                          l3439 10D4                          l2569 0D06  
                        l2593 0C0E                          l2577 0BD8                          l2809 10AE  
                        l1777 093E                          l1769 090C                          l2921 1168  
                        l2905 0D5E                          l2649 0A36                          l2657 0A4C  
                        l2681 0B74                          l2673 0B44                          l2665 0B28  
                        l2761 0650                          l2753 060E                          l2745 0594  
                        l2737 054A                          l2729 0508                          l2913 0E60  
                        l3297 0148                          l3289 012A                          l3449 10E4  
                 _TI_NewTimer 0DF6                          l2595 0C14                          l2579 0BE0  
                        l1779 0946                          l1787 094E                          l2931 0F52  
                        l1955 1212                          l2923 116A                          l2907 0D62  
                        l2659 0A5C                          l2691 0BAE                          l2683 0B7C  
                        l2675 0B52                          l2667 0B2A                          l2771 06A0  
                        l2763 0660                          l2755 062A                          l2747 05AC  
                        l2739 054E                          l2915 0E78                          l3299 0166  
                        l1981 1066                          l1973 103A                          l2597 0C16  
                        l2589 0BE8                          l1789 0982                          l2925 116C  
                        l2917 1162                          l2685 0B8A                          l2693 0BB4  
                        l2677 0B5A                          l2669 0B38                          l2765 0670  
                        l2773 06A2                          l2757 062E                          l2749 05C6  
                        l2781 06D8                          l2909 0E4C                          l1983 1068  
                        l1975 1048                          l1967 1038                          l1991 11C2  
                        l2599 0C1C                          l2935 0EEE                          l1799 1206  
                        l2791 0DFC                          l2927 116E                          l2919 1166  
                        l2695 0BC4                          l2687 0BA0                          l2679 0B6C  
                        l2783 06F6                          l2767 067E                          l2759 0640  
                        l2775 06C0                          l1977 104A                          l1993 11C4  
                        l2937 0EF2                          l3593 0964                          l2929 0F3E  
                        l2697 0BCC                          l2689 0BA8                          l2785 0702  
                        l2777 06CC                          l2769 0686                          l1979 105A  
                        l2795 0E14                          l1989 11B6                          l2797 0E30  
                        l2789 0DF6                          l2799 0E40                          l2899 0D20  
                        STR_1 1FE4                          STR_2 1FF9                          STR_3 1FA6  
                        STR_4 1F96                          STR_5 1FA8                          STR_6 1F96  
                        STR_7 1F83                          STR_8 1F68                          STR_9 1F4B  
                        u2000 0670                          u2001 066C                          u2010 06B4  
                        u2011 06B0                          u2020 0E10                          u2021 0E0C  
                        u2030 0E30                          u2031 0E2C                          u2200 0D92  
                        u2201 0D8E                          u2210 0E94                          u2211 0E90  
                        u2300 0738                          u2301 0734                          u2310 0782  
                        u2311 077E                          _LATC 0F8B                          u2400 0356  
                        u2320 07D6                          _LATD 0F8C                          u2401 0352  
                        u2321 07D2                          u2410 0376                          u2170 0D3A  
                        u2411 0372                          u2171 0D36                          u1620 1002  
                        u1700 0C2E                          u2500 046E                          u2420 0390  
                        u2180 0D5A                          u1621 0FFE                          u1701 0C2A  
                        u2501 046A                          u2421 038C                          u1630 0CA6  
                        u1710 0C44                          u2510 0482                          u2430 03BA  
                        u2190 0D82                          u1631 0C9E                          u1711 0C3C  
                        u2511 047E                          u2431 03B6                          u2520 04A4  
                        u2440 03CE                          u1800 0B38                          u2600 00DC  
                        u2521 04A0                          u2441 03CA                          u1801 0B34  
                        u2601 00D8                          u1650 0CDA                          u1730 0C78  
                        u2530 04C2                          u2450 03EE                          u2370 02F2  
                        u1810 0B52                          u2610 00F0                          u1651 0CD6  
                        u1731 0C74                          u2531 04BE                          u2451 03EA  
                        u2371 02EE                          u2187 0D50                          u1811 0B4E  
                        u2611 00EC                          u1660 0CFA                          u2460 0400  
                        u2380 0312                          u2540 0814                          u1740 09BC  
                        u1820 0B6C                          u1900 1012                          u2620 0110  
                        u1661 0CF4                          u2461 03FC                          u2381 030E  
                        u2197 0D78                          u2541 0810                          u1741 09B8  
                        u1821 0B68                          u1901 100E                          u2621 010C  
                        u1670 0D18                          u2470 0418                          u2390 0336  
                        u1910 1126                          u2550 082C                          u1750 09D6  
                        u1830 0B8A                          u2630 012A                          u1671 0D14  
                        u2471 0414                          u2391 0332                          u1911 111E  
                        u2551 0828                          u1751 09D2                          u1831 0B86  
                        u2631 0126                          u1648 0CA8                          u1728 0C46  
                        u1680 0BFA                          u2480 0438                          u2560 084E  
                        u1760 09FC                          u1840 0BA0                          u1920 0532  
                        u2640 013E                          u1681 0BF2                          u2481 0434  
                        u2561 084A                          u1761 09F8                          u1841 0B9C  
                        u1921 052E                          u2641 013A                          u1666 0CFC  
                        u2490 044A                          u2570 0866                          u1770 0A1A  
                        u1850 0BC4                          u1930 0578                          u2650 01FE  
                        u2491 0446                          u2571 0862                          u1771 0A16  
                        u1851 0BC0                          u1931 0574                          u2651 01FA  
                        u2580 088C                          u1780 0A36                          u1860 0A7E  
                        u1940 0594                          u2660 0212                          u2581 0888  
                        u1781 0A32                          u1861 0A7A                          u1941 0590  
                        u2661 020E                          u1918 1128                          u2590 08B0  
                        u1790 0A5C                          u1870 0A8E                          u1950 05DA  
                        u2670 0232                          u2591 08AC                          u1791 0A58  
                        u1871 0A8A                          u1951 05D4                          u2671 022E  
                        u1880 0AB4                          u1960 05DC                          u2680 024C  
                        u1881 0AB0                          u2681 0248                          u1698 0BFC  
                        u1890 0AE6                          u1970 0640                          u2690 0278  
                        u1891 0AE2                          u1971 063C                          u2691 0274  
                        u1980 0650                          u1981 064C                          u1990 0660  
                        i1l31 001E                          u1991 065C                          i2l26 118A  
                        i2l57 1160                          _TMR0 0FD6                   displayUID@i 0057  
                        _Tics 0015                          _Rows 0029                          abs@a 0047  
                        _dbuf 0080                          _main 10C8                          _prec 001D  
                        _nout 0019                          fsr0h 0FEA                          fsr1h 0FE2  
                        indf0 0FEF                          fsr2h 0FDA                          fsr0l 0FE9  
                        indf2 0FDF                          fsr1l 0FE1                          fsr2l 0FD9  
                        btemp 0077               __end_of_TI_Init 106C                          prodh 0FF4  
                        prodl 0FF3                          start 0026               __end_of_HighRSI 118E  
                ___param_bank 0000               ??_MFRC522_Reset 0050                         ??_abs 0049  
                ?_initTeclado 0040                         ?_main 0040               __end_of___awdiv 0A6E  
                       STR_10 1F2A                         STR_11 1FF0                         STR_12 1FBA  
                       STR_13 1FC8                         STR_14 1FD6                         STR_15 1F09  
             __end_of___awmod 0BD6                         _T0CON 0FD5               ___awdiv@divisor 0043  
             ___awdiv@counter 0045                         _RCREG 0FAE                         _RCSTA 0FAB  
                vfpfcnvrt@cnt 0051                  vfpfcnvrt@fmt 004C                         _SPBRG 0FAF  
                       _PORTD 0F83                         _TRISD 0F95                         _TXREG 0FAD  
                       _TXSTA 0FAC                         _Filas 0037                         _Timer 003E  
                       _flags 0023               motor_RFID@irqEn 0030               motor_RFID@unLen 001F  
                       _fputc 0A6E                  _TI_ResetTics 10F0                         _tecla 0035  
             motor_RFID@state 0033                         _timer 003F                         _width 001B  
                       _state 0034                         _putch 1216                         tablat 0FF5  
           _MFRC522_Clear_Bit 1130                         ttemp5 0078                         ttemp6 007B  
                       ttemp7 007F                         status 0FD8                         wtemp8 0078  
             __end_of_sprintf 0EEE            Terminal_SendChar@c 0041            ?_MFRC522_Clear_Bit 0050  
            __end_of_GetTecla 09AC             _MFRC522_AntennaOn 11C8        ??_Terminal_ReceiveChar 0041  
             __initialization 106C                  __end_of_main 10F0            ?_MFRC522_AntennaOn 0040  
         ??_MFRC522_Clear_Bit 0051                   ?_RSI_Timer0 0040                TI_Init@counter 0041  
            _initPortsTeclado 11FE                   ?_TI_GetTics 0041                        ??_main 0077  
         ??_MFRC522_AntennaOn 0052                 __activetblptr 0002            MFRC522_Rd@ucResult 0049  
             MFRC522_Wr@value 004B     __end_of_MFRC522_Clear_Bit 114A                        ?_fputc 0041  
            ___awdiv@dividend 0041                        ?_putch 0040                     ??_TI_Init 0041  
         displayUID@hexString 0048        Terminal_SendString@str 0044                        i2l2341 1178  
                      i2l2343 1186                        i2l1961 114A                        i2l1963 1152  
                      i2l1965 1154                 vfpfcnvrt@done 0050                        _TMR0IF 7F92  
                   ??_HighRSI 0040     __end_of_MFRC522_AntennaOn 11D4                 displayUID@uid 0046  
            __end_of_delay_us 1004                        _LowRSI 0018                        _RowAct 0027  
                      _Timers 0001                  vfprintf@cfmt 005E                     ??___awdiv 0045  
        __end_of_MFRC522_Init 0F3C                     ??___awmod 0045              __end_of_initRFID 11F6  
            motor_RFID@buffer 0100            motorTerminal@state 0024                        clear_0 1072  
                      clear_1 107E                        clear_2 108A              ___awdiv@quotient 0047  
             ___awmod@divisor 0043                        isa$std 0001               ___awmod@counter 0045  
                      fputc@c 0041              __end_of_showMenu 0DF6                  __mediumconst 1EFC  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
                      putch@c 0040              __end_of_vfprintf 0E9E         __end_of_Terminal_Init 11C8  
                   ??_sprintf 0066                    __accesstop 0080       __end_of__initialization 1090  
             delay_us@howMany 0044                 ___rparam_used 0001                  ??_MFRC522_Rd 0046  
                ??_MFRC522_Wr 004C            _MFRC522_AntennaOff 11D4                __pcstackCOMRAM 0040  
         ?_MFRC522_AntennaOff 0040                 __end_of_fputc 0B28                 __end_of_putch 1218  
        TI_NewTimer@Comptador 0043             __end_of_ReadFilas 1212              MFRC522_Rd@ucAddr 0048  
           ??_MFRC522_Set_Bit 0051            __end_of_MFRC522_Rd 0D20            __end_of_MFRC522_Wr 0C7E  
                   ?_GetTecla 0040                       ??_fputc 0044          ??_MFRC522_AntennaOff 0053  
                ?_TI_NewTimer 0041                       ??_putch 0041                    __pbssBANK0 0080  
                  __pbssBANK1 0100         __end_of_motorTerminal 08E8        TI_NewTimer@TimerHandle 0041  
                     ?_LowRSI 0040              MFRC522_Wr@ucAddr 004E       TI_ResetTics@TimerHandle 0041  
               _writeColumnas 0F88                       _BAUDCON 0FB8                     ?_delay_us 0040  
                  ??_GetTecla 0041             _Terminal_SendChar 11F6                    _displayUID 070C  
                     _TI_Init 1038            ?_Terminal_SendChar 0040      __end_of_initPortsTeclado 1206  
                   ?_initRFID 0040                       _HighRSI 0008      motor_RFID@function_state 0031  
                     _Columns 0028             motor_RFID@TagType 002A           ??_Terminal_SendChar 0041  
                     __Hparam 0000                       __Lparam 0000                     ?_showMenu 0040  
                ??_RSI_Timer0 0040                       ___awdiv 09AC                ?_writeColumnas 0040  
                     ___awmod 0B28                     ?_vfprintf 005A                  ??_TI_GetTics 0045  
                     __pcinit 106C         __end_of_MFRC522_Reset 10C8                       __ramtop 0200  
           motor_RFID@_status 002B                       __ptext0 10C8                       __ptext1 002A  
                     __ptext2 0E9E                       __ptext3 0E4C                       __ptext4 0508  
                     __ptext5 0A6E                       __ptext6 1216                       __ptext7 1004  
                     __ptext8 0B28                       __ptext9 09AC                 ?_motorTeclado 0040  
   __end_of_Terminal_SendChar 11FE              ___awmod@dividend 0041             motor_RFID@waitIRq 002F  
                  ??_delay_us 0041                       _sprintf 0E9E                  _MFRC522_Init 0EEE  
              __pintcode_body 1178          end_of_initialization 1090                   motor_RFID@i 002C  
                 motor_RFID@n 002D                   motor_RFID@p 0075                    ??_initRFID 0053  
          __end_of_RSI_Timer0 1162                       fputc@fp 0043                 __Lmediumconst 1EFC  
                     int_func 1178            __end_of_TI_GetTics 0F88             __end_of_vfpfcnvrt 070C  
                  ??_showMenu 0046                    _motor_RFID 002A                       postdec2 0FDD  
                     postinc0 0FEE                       postinc1 0FE6                       postinc2 0FDE  
            vfpfcnvrt@convarg 0055                 GetTecla@F3223 1EFD                    ??_vfprintf 005E  
              ??_motorTeclado 0051                     _PORTBbits 0F81                     _PORTCbits 0F82  
         _Terminal_SendString 0D20         TI_GetTics@TimerHandle 004D                     _TRISBbits 0F93  
                   _TRISCbits 0F94                   ?_displayUID 0046              displayUID@nibble 0059  
        ?_Terminal_SendString 0044             MFRC522_Rd@Address 0047               ??_writeColumnas 0041  
              __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 11A2               _MFRC522_Set_Bit 11A2  
                 vfpfcnvrt@ap 004D                   vfpfcnvrt@cp 0053                   vfpfcnvrt@fp 004B  
                   _ColumnAct 0026           start_initialization 106C                     _ReadFilas 120C  
                 __end_of_abs 1038  __end_of_Terminal_TXAvailable 1130         ??_Terminal_SendString 0046  
                    ??_LowRSI 0040                   vfprintf@fmt 005B                   ?_motor_RFID 0040  
               ??_initTeclado 0044                   __pbssCOMRAM 0001                    ?_ReadFilas 0040  
           MFRC522_Wr@Address 004D                 ?_TI_ResetTics 0040                      ?_TI_Init 0040  
           ?_initPortsTeclado 0040                      ?_HighRSI 0040          __end_of_motorTeclado 0508  
          ??_initPortsTeclado 0041       __end_of_MFRC522_Set_Bit 11B6           MFRC522_Set_Bit@addr 0051  
         MFRC522_Set_Bit@mask 0050                     __pintcode 0008                 __pmediumconst 1EFC  
                    ?___awdiv 0041    __end_of_InitPortDirections 11EC                      ?___awmod 0041  
                 __pintcodelo 0018                   __smallconst 1EFC           __end_of_initTeclado 1178  
              ??_TI_ResetTics 0041                      ?_sprintf 0060                 _Terminal_Init 11B6  
        _Terminal_RXAvailable 118E                      _LATBbits 0F8A                      _LATCbits 0F8B  
                   delay_us@x 0045               _hashtag_pressed 0025                      i2u143_40 1186  
                    i2u143_41 1182                      _PIR1bits 0F9E                     _vfpfcnvrt 0508  
        _Terminal_TXAvailable 1114                  GetTecla@fila 0050                   ??_ReadFilas 0041  
                ??_displayUID 0047                      _GetTecla 08E8  __end_of_Terminal_ReceiveChar 1216  
                  vfpfcnvrt@c 0059                 motor_RFID@UID 0038                ?_Terminal_Init 0040  
                    _Columnas 0036         ?_Terminal_RXAvailable 0040                 _motorTerminal 07FC  
            ?_MFRC522_Set_Bit 0050                      __Hrparam 0000         MFRC522_Clear_Bit@addr 0052  
       MFRC522_Clear_Bit@mask 0050                    vfprintf@ap 005D                      __Lrparam 0000  
                  vfprintf@fp 005A            motor_RFID@backBits 0021                   _initTeclado 1162  
          __end_of_displayUID 07FC         ?_Terminal_TXAvailable 0041                    ?_vfpfcnvrt 004B  
                  sprintf@fmt 0062                    sprintf@ret 0066                      _delay_us 0FCE  
                    __ptext10 070C                      __ptext11 07FC                      __ptext20 118E  
                    __ptext12 0D94                      __ptext21 02D8                      __ptext13 0D20  
                    __ptext30 109E                      __ptext22 0F88                      __ptext14 1114  
                    __ptext31 11C8                      __ptext23 1206                      __ptext15 11F6  
                    __ptext40 1038                      __ptext32 11A2                      __ptext24 10F0  
                    __ptext16 1162                      __ptext33 11D4                      __ptext25 0F3C  
                    __ptext17 11FE                      __ptext34 1130                      __ptext26 120C  
                    __ptext18 0DF6                      __ptext43 114A                      __ptext35 0BD6  
                    __ptext27 08E8                      __ptext19 1212                      __ptext36 0C7E  
                    __ptext28 11EC                      __ptext37 0FCE                      __ptext29 0EEE  
                    __ptext38 11E0                      __ptext39 11B6                 ??_TI_NewTimer 0042  
          motor_RFID@lastBits 002E                      _initRFID 11EC                ?_motorTerminal 0040  
                  _MFRC522_Rd 0C7E                    _MFRC522_Wr 0BD6                  ??_motor_RFID 0074  
                    isa$xinst 0000                      _showMenu 0D94          __end_of_TI_ResetTics 1114  
                    int$flags 0077         __end_of_writeColumnas 0FCE            motor_RFID@substate 0032  
                    _vfprintf 0E4C                 _MFRC522_Reset 109E                  _motorTeclado 02D8  
                  _INTCONbits 0FF2               ??_Terminal_Init 0041     TI_GetTics@CopiaTicsActual 0049  
      ??_Terminal_RXAvailable 0041             _hashtag_pressed3s 1206   __end_of_Terminal_SendString 0D94  
              _displayUID$822 0053            __end_of_motor_RFID 02D8                _displayUID$823 0055  
                    intlevel1 0000                      intlevel2 0000                     sprintf@ap 0068  
          ?_hashtag_pressed3s 0040           __end_of_TI_NewTimer 0E4C           ??_hashtag_pressed3s 0041  
      ??_Terminal_TXAvailable 0043          _Terminal_ReceiveChar 1212                   ??_vfpfcnvrt 004E  
              ?_MFRC522_Reset 0040                      sprintf@f 0069                      sprintf@s 0060  
   __end_of_hashtag_pressed3s 120C            _InitPortDirections 11E0    __end_of_MFRC522_AntennaOff 11E0  
               ?_MFRC522_Init 0040               ??_motorTerminal 0046           ?_InitPortDirections 0040  
             GetTecla@columna 004F                   ?_MFRC522_Rd 0040                   ?_MFRC522_Wr 004B  
              GetTecla@keymap 0043  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Mar 04 15:57:17 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    56                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    58   000000                     
    59                           ; Generated 05/12/2024 GMT
    60                           ; 
    61                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4321 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93   000FE0                     bsr             equ	4064
    94   000FE9                     fsr0            equ	4073
    95   000FEA                     fsr0h           equ	4074
    96   000FE9                     fsr0l           equ	4073
    97   000FE1                     fsr1            equ	4065
    98   000FE2                     fsr1h           equ	4066
    99   000FE1                     fsr1l           equ	4065
   100   000FD9                     fsr2            equ	4057
   101   000FDA                     fsr2h           equ	4058
   102   000FD9                     fsr2l           equ	4057
   103   000FEF                     indf0           equ	4079
   104   000FE7                     indf1           equ	4071
   105   000FDF                     indf2           equ	4063
   106   000FF2                     intcon          equ	4082
   107   000000                     nvmcon          equ	0
   108   000FF9                     pcl             equ	4089
   109   000FFA                     pclath          equ	4090
   110   000FFB                     pclatu          equ	4091
   111   000FEB                     plusw0          equ	4075
   112   000FE3                     plusw1          equ	4067
   113   000FDB                     plusw2          equ	4059
   114   000FED                     postdec0        equ	4077
   115   000FE5                     postdec1        equ	4069
   116   000FDD                     postdec2        equ	4061
   117   000FEE                     postinc0        equ	4078
   118   000FE6                     postinc1        equ	4070
   119   000FDE                     postinc2        equ	4062
   120   000FEC                     preinc0         equ	4076
   121   000FE4                     preinc1         equ	4068
   122   000FDC                     preinc2         equ	4060
   123   000FF3                     prod            equ	4083
   124   000FF4                     prodh           equ	4084
   125   000FF3                     prodl           equ	4083
   126   000FD8                     status          equ	4056
   127   000FF5                     tablat          equ	4085
   128   000FF6                     tblptr          equ	4086
   129   000FF7                     tblptrh         equ	4087
   130   000FF6                     tblptrl         equ	4086
   131   000FF8                     tblptru         equ	4088
   132   000FFD                     tosl            equ	4093
   133   000FE8                     wreg            equ	4072
   134   000F80                     PORTA           equ	3968	;# 
   135   000F81                     PORTB           equ	3969	;# 
   136   000F82                     PORTC           equ	3970	;# 
   137   000F83                     PORTD           equ	3971	;# 
   138   000F84                     PORTE           equ	3972	;# 
   139   000F89                     LATA            equ	3977	;# 
   140   000F8A                     LATB            equ	3978	;# 
   141   000F8B                     LATC            equ	3979	;# 
   142   000F8C                     LATD            equ	3980	;# 
   143   000F8D                     LATE            equ	3981	;# 
   144   000F92                     TRISA           equ	3986	;# 
   145   000F92                     DDRA            equ	3986	;# 
   146   000F93                     TRISB           equ	3987	;# 
   147   000F93                     DDRB            equ	3987	;# 
   148   000F94                     TRISC           equ	3988	;# 
   149   000F94                     DDRC            equ	3988	;# 
   150   000F95                     TRISD           equ	3989	;# 
   151   000F95                     DDRD            equ	3989	;# 
   152   000F96                     TRISE           equ	3990	;# 
   153   000F96                     DDRE            equ	3990	;# 
   154   000F9B                     OSCTUNE         equ	3995	;# 
   155   000F9D                     PIE1            equ	3997	;# 
   156   000F9E                     PIR1            equ	3998	;# 
   157   000F9F                     IPR1            equ	3999	;# 
   158   000FA0                     PIE2            equ	4000	;# 
   159   000FA1                     PIR2            equ	4001	;# 
   160   000FA2                     IPR2            equ	4002	;# 
   161   000FA6                     EECON1          equ	4006	;# 
   162   000FA7                     EECON2          equ	4007	;# 
   163   000FA8                     EEDATA          equ	4008	;# 
   164   000FA9                     EEADR           equ	4009	;# 
   165   000FAB                     RCSTA           equ	4011	;# 
   166   000FAB                     RCSTA1          equ	4011	;# 
   167   000FAC                     TXSTA           equ	4012	;# 
   168   000FAC                     TXSTA1          equ	4012	;# 
   169   000FAD                     TXREG           equ	4013	;# 
   170   000FAD                     TXREG1          equ	4013	;# 
   171   000FAE                     RCREG           equ	4014	;# 
   172   000FAE                     RCREG1          equ	4014	;# 
   173   000FAF                     SPBRG           equ	4015	;# 
   174   000FAF                     SPBRG1          equ	4015	;# 
   175   000FB0                     SPBRGH          equ	4016	;# 
   176   000FB1                     T3CON           equ	4017	;# 
   177   000FB2                     TMR3            equ	4018	;# 
   178   000FB2                     TMR3L           equ	4018	;# 
   179   000FB3                     TMR3H           equ	4019	;# 
   180   000FB4                     CMCON           equ	4020	;# 
   181   000FB5                     CVRCON          equ	4021	;# 
   182   000FB6                     ECCP1AS         equ	4022	;# 
   183   000FB7                     ECCP1DEL        equ	4023	;# 
   184   000FB7                     PWM1CON         equ	4023	;# 
   185   000FB8                     BAUDCON         equ	4024	;# 
   186   000FB8                     BAUDCTL         equ	4024	;# 
   187   000FBA                     CCP2CON         equ	4026	;# 
   188   000FBB                     CCPR2           equ	4027	;# 
   189   000FBB                     CCPR2L          equ	4027	;# 
   190   000FBC                     CCPR2H          equ	4028	;# 
   191   000FBD                     CCP1CON         equ	4029	;# 
   192   000FBD                     ECCP1CON        equ	4029	;# 
   193   000FBE                     CCPR1           equ	4030	;# 
   194   000FBE                     CCPR1L          equ	4030	;# 
   195   000FBF                     CCPR1H          equ	4031	;# 
   196   000FC0                     ADCON2          equ	4032	;# 
   197   000FC1                     ADCON1          equ	4033	;# 
   198   000FC2                     ADCON0          equ	4034	;# 
   199   000FC3                     ADRES           equ	4035	;# 
   200   000FC3                     ADRESL          equ	4035	;# 
   201   000FC4                     ADRESH          equ	4036	;# 
   202   000FC5                     SSPCON2         equ	4037	;# 
   203   000FC6                     SSPCON1         equ	4038	;# 
   204   000FC7                     SSPSTAT         equ	4039	;# 
   205   000FC8                     SSPADD          equ	4040	;# 
   206   000FC9                     SSPBUF          equ	4041	;# 
   207   000FCA                     T2CON           equ	4042	;# 
   208   000FCB                     PR2             equ	4043	;# 
   209   000FCB                     MEMCON          equ	4043	;# 
   210   000FCC                     TMR2            equ	4044	;# 
   211   000FCD                     T1CON           equ	4045	;# 
   212   000FCE                     TMR1            equ	4046	;# 
   213   000FCE                     TMR1L           equ	4046	;# 
   214   000FCF                     TMR1H           equ	4047	;# 
   215   000FD0                     RCON            equ	4048	;# 
   216   000FD1                     WDTCON          equ	4049	;# 
   217   000FD2                     HLVDCON         equ	4050	;# 
   218   000FD2                     LVDCON          equ	4050	;# 
   219   000FD3                     OSCCON          equ	4051	;# 
   220   000FD5                     T0CON           equ	4053	;# 
   221   000FD6                     TMR0            equ	4054	;# 
   222   000FD6                     TMR0L           equ	4054	;# 
   223   000FD7                     TMR0H           equ	4055	;# 
   224   000FD8                     STATUS          equ	4056	;# 
   225   000FD9                     FSR2            equ	4057	;# 
   226   000FD9                     FSR2L           equ	4057	;# 
   227   000FDA                     FSR2H           equ	4058	;# 
   228   000FDB                     PLUSW2          equ	4059	;# 
   229   000FDC                     PREINC2         equ	4060	;# 
   230   000FDD                     POSTDEC2        equ	4061	;# 
   231   000FDE                     POSTINC2        equ	4062	;# 
   232   000FDF                     INDF2           equ	4063	;# 
   233   000FE0                     BSR             equ	4064	;# 
   234   000FE1                     FSR1            equ	4065	;# 
   235   000FE1                     FSR1L           equ	4065	;# 
   236   000FE2                     FSR1H           equ	4066	;# 
   237   000FE3                     PLUSW1          equ	4067	;# 
   238   000FE4                     PREINC1         equ	4068	;# 
   239   000FE5                     POSTDEC1        equ	4069	;# 
   240   000FE6                     POSTINC1        equ	4070	;# 
   241   000FE7                     INDF1           equ	4071	;# 
   242   000FE8                     WREG            equ	4072	;# 
   243   000FE9                     FSR0            equ	4073	;# 
   244   000FE9                     FSR0L           equ	4073	;# 
   245   000FEA                     FSR0H           equ	4074	;# 
   246   000FEB                     PLUSW0          equ	4075	;# 
   247   000FEC                     PREINC0         equ	4076	;# 
   248   000FED                     POSTDEC0        equ	4077	;# 
   249   000FEE                     POSTINC0        equ	4078	;# 
   250   000FEF                     INDF0           equ	4079	;# 
   251   000FF0                     INTCON3         equ	4080	;# 
   252   000FF1                     INTCON2         equ	4081	;# 
   253   000FF2                     INTCON          equ	4082	;# 
   254   000FF3                     PROD            equ	4083	;# 
   255   000FF3                     PRODL           equ	4083	;# 
   256   000FF4                     PRODH           equ	4084	;# 
   257   000FF5                     TABLAT          equ	4085	;# 
   258   000FF6                     TBLPTR          equ	4086	;# 
   259   000FF6                     TBLPTRL         equ	4086	;# 
   260   000FF7                     TBLPTRH         equ	4087	;# 
   261   000FF8                     TBLPTRU         equ	4088	;# 
   262   000FF9                     PCLAT           equ	4089	;# 
   263   000FF9                     PC              equ	4089	;# 
   264   000FF9                     PCL             equ	4089	;# 
   265   000FFA                     PCLATH          equ	4090	;# 
   266   000FFB                     PCLATU          equ	4091	;# 
   267   000FFC                     STKPTR          equ	4092	;# 
   268   000FFD                     TOS             equ	4093	;# 
   269   000FFD                     TOSL            equ	4093	;# 
   270   000FFE                     TOSH            equ	4094	;# 
   271   000FFF                     TOSU            equ	4095	;# 
   272   000F80                     PORTA           equ	3968	;# 
   273   000F81                     PORTB           equ	3969	;# 
   274   000F82                     PORTC           equ	3970	;# 
   275   000F83                     PORTD           equ	3971	;# 
   276   000F84                     PORTE           equ	3972	;# 
   277   000F89                     LATA            equ	3977	;# 
   278   000F8A                     LATB            equ	3978	;# 
   279   000F8B                     LATC            equ	3979	;# 
   280   000F8C                     LATD            equ	3980	;# 
   281   000F8D                     LATE            equ	3981	;# 
   282   000F92                     TRISA           equ	3986	;# 
   283   000F92                     DDRA            equ	3986	;# 
   284   000F93                     TRISB           equ	3987	;# 
   285   000F93                     DDRB            equ	3987	;# 
   286   000F94                     TRISC           equ	3988	;# 
   287   000F94                     DDRC            equ	3988	;# 
   288   000F95                     TRISD           equ	3989	;# 
   289   000F95                     DDRD            equ	3989	;# 
   290   000F96                     TRISE           equ	3990	;# 
   291   000F96                     DDRE            equ	3990	;# 
   292   000F9B                     OSCTUNE         equ	3995	;# 
   293   000F9D                     PIE1            equ	3997	;# 
   294   000F9E                     PIR1            equ	3998	;# 
   295   000F9F                     IPR1            equ	3999	;# 
   296   000FA0                     PIE2            equ	4000	;# 
   297   000FA1                     PIR2            equ	4001	;# 
   298   000FA2                     IPR2            equ	4002	;# 
   299   000FA6                     EECON1          equ	4006	;# 
   300   000FA7                     EECON2          equ	4007	;# 
   301   000FA8                     EEDATA          equ	4008	;# 
   302   000FA9                     EEADR           equ	4009	;# 
   303   000FAB                     RCSTA           equ	4011	;# 
   304   000FAB                     RCSTA1          equ	4011	;# 
   305   000FAC                     TXSTA           equ	4012	;# 
   306   000FAC                     TXSTA1          equ	4012	;# 
   307   000FAD                     TXREG           equ	4013	;# 
   308   000FAD                     TXREG1          equ	4013	;# 
   309   000FAE                     RCREG           equ	4014	;# 
   310   000FAE                     RCREG1          equ	4014	;# 
   311   000FAF                     SPBRG           equ	4015	;# 
   312   000FAF                     SPBRG1          equ	4015	;# 
   313   000FB0                     SPBRGH          equ	4016	;# 
   314   000FB1                     T3CON           equ	4017	;# 
   315   000FB2                     TMR3            equ	4018	;# 
   316   000FB2                     TMR3L           equ	4018	;# 
   317   000FB3                     TMR3H           equ	4019	;# 
   318   000FB4                     CMCON           equ	4020	;# 
   319   000FB5                     CVRCON          equ	4021	;# 
   320   000FB6                     ECCP1AS         equ	4022	;# 
   321   000FB7                     ECCP1DEL        equ	4023	;# 
   322   000FB7                     PWM1CON         equ	4023	;# 
   323   000FB8                     BAUDCON         equ	4024	;# 
   324   000FB8                     BAUDCTL         equ	4024	;# 
   325   000FBA                     CCP2CON         equ	4026	;# 
   326   000FBB                     CCPR2           equ	4027	;# 
   327   000FBB                     CCPR2L          equ	4027	;# 
   328   000FBC                     CCPR2H          equ	4028	;# 
   329   000FBD                     CCP1CON         equ	4029	;# 
   330   000FBD                     ECCP1CON        equ	4029	;# 
   331   000FBE                     CCPR1           equ	4030	;# 
   332   000FBE                     CCPR1L          equ	4030	;# 
   333   000FBF                     CCPR1H          equ	4031	;# 
   334   000FC0                     ADCON2          equ	4032	;# 
   335   000FC1                     ADCON1          equ	4033	;# 
   336   000FC2                     ADCON0          equ	4034	;# 
   337   000FC3                     ADRES           equ	4035	;# 
   338   000FC3                     ADRESL          equ	4035	;# 
   339   000FC4                     ADRESH          equ	4036	;# 
   340   000FC5                     SSPCON2         equ	4037	;# 
   341   000FC6                     SSPCON1         equ	4038	;# 
   342   000FC7                     SSPSTAT         equ	4039	;# 
   343   000FC8                     SSPADD          equ	4040	;# 
   344   000FC9                     SSPBUF          equ	4041	;# 
   345   000FCA                     T2CON           equ	4042	;# 
   346   000FCB                     PR2             equ	4043	;# 
   347   000FCB                     MEMCON          equ	4043	;# 
   348   000FCC                     TMR2            equ	4044	;# 
   349   000FCD                     T1CON           equ	4045	;# 
   350   000FCE                     TMR1            equ	4046	;# 
   351   000FCE                     TMR1L           equ	4046	;# 
   352   000FCF                     TMR1H           equ	4047	;# 
   353   000FD0                     RCON            equ	4048	;# 
   354   000FD1                     WDTCON          equ	4049	;# 
   355   000FD2                     HLVDCON         equ	4050	;# 
   356   000FD2                     LVDCON          equ	4050	;# 
   357   000FD3                     OSCCON          equ	4051	;# 
   358   000FD5                     T0CON           equ	4053	;# 
   359   000FD6                     TMR0            equ	4054	;# 
   360   000FD6                     TMR0L           equ	4054	;# 
   361   000FD7                     TMR0H           equ	4055	;# 
   362   000FD8                     STATUS          equ	4056	;# 
   363   000FD9                     FSR2            equ	4057	;# 
   364   000FD9                     FSR2L           equ	4057	;# 
   365   000FDA                     FSR2H           equ	4058	;# 
   366   000FDB                     PLUSW2          equ	4059	;# 
   367   000FDC                     PREINC2         equ	4060	;# 
   368   000FDD                     POSTDEC2        equ	4061	;# 
   369   000FDE                     POSTINC2        equ	4062	;# 
   370   000FDF                     INDF2           equ	4063	;# 
   371   000FE0                     BSR             equ	4064	;# 
   372   000FE1                     FSR1            equ	4065	;# 
   373   000FE1                     FSR1L           equ	4065	;# 
   374   000FE2                     FSR1H           equ	4066	;# 
   375   000FE3                     PLUSW1          equ	4067	;# 
   376   000FE4                     PREINC1         equ	4068	;# 
   377   000FE5                     POSTDEC1        equ	4069	;# 
   378   000FE6                     POSTINC1        equ	4070	;# 
   379   000FE7                     INDF1           equ	4071	;# 
   380   000FE8                     WREG            equ	4072	;# 
   381   000FE9                     FSR0            equ	4073	;# 
   382   000FE9                     FSR0L           equ	4073	;# 
   383   000FEA                     FSR0H           equ	4074	;# 
   384   000FEB                     PLUSW0          equ	4075	;# 
   385   000FEC                     PREINC0         equ	4076	;# 
   386   000FED                     POSTDEC0        equ	4077	;# 
   387   000FEE                     POSTINC0        equ	4078	;# 
   388   000FEF                     INDF0           equ	4079	;# 
   389   000FF0                     INTCON3         equ	4080	;# 
   390   000FF1                     INTCON2         equ	4081	;# 
   391   000FF2                     INTCON          equ	4082	;# 
   392   000FF3                     PROD            equ	4083	;# 
   393   000FF3                     PRODL           equ	4083	;# 
   394   000FF4                     PRODH           equ	4084	;# 
   395   000FF5                     TABLAT          equ	4085	;# 
   396   000FF6                     TBLPTR          equ	4086	;# 
   397   000FF6                     TBLPTRL         equ	4086	;# 
   398   000FF7                     TBLPTRH         equ	4087	;# 
   399   000FF8                     TBLPTRU         equ	4088	;# 
   400   000FF9                     PCLAT           equ	4089	;# 
   401   000FF9                     PC              equ	4089	;# 
   402   000FF9                     PCL             equ	4089	;# 
   403   000FFA                     PCLATH          equ	4090	;# 
   404   000FFB                     PCLATU          equ	4091	;# 
   405   000FFC                     STKPTR          equ	4092	;# 
   406   000FFD                     TOS             equ	4093	;# 
   407   000FFD                     TOSL            equ	4093	;# 
   408   000FFE                     TOSH            equ	4094	;# 
   409   000FFF                     TOSU            equ	4095	;# 
   410   000F80                     PORTA           equ	3968	;# 
   411   000F81                     PORTB           equ	3969	;# 
   412   000F82                     PORTC           equ	3970	;# 
   413   000F83                     PORTD           equ	3971	;# 
   414   000F84                     PORTE           equ	3972	;# 
   415   000F89                     LATA            equ	3977	;# 
   416   000F8A                     LATB            equ	3978	;# 
   417   000F8B                     LATC            equ	3979	;# 
   418   000F8C                     LATD            equ	3980	;# 
   419   000F8D                     LATE            equ	3981	;# 
   420   000F92                     TRISA           equ	3986	;# 
   421   000F92                     DDRA            equ	3986	;# 
   422   000F93                     TRISB           equ	3987	;# 
   423   000F93                     DDRB            equ	3987	;# 
   424   000F94                     TRISC           equ	3988	;# 
   425   000F94                     DDRC            equ	3988	;# 
   426   000F95                     TRISD           equ	3989	;# 
   427   000F95                     DDRD            equ	3989	;# 
   428   000F96                     TRISE           equ	3990	;# 
   429   000F96                     DDRE            equ	3990	;# 
   430   000F9B                     OSCTUNE         equ	3995	;# 
   431   000F9D                     PIE1            equ	3997	;# 
   432   000F9E                     PIR1            equ	3998	;# 
   433   000F9F                     IPR1            equ	3999	;# 
   434   000FA0                     PIE2            equ	4000	;# 
   435   000FA1                     PIR2            equ	4001	;# 
   436   000FA2                     IPR2            equ	4002	;# 
   437   000FA6                     EECON1          equ	4006	;# 
   438   000FA7                     EECON2          equ	4007	;# 
   439   000FA8                     EEDATA          equ	4008	;# 
   440   000FA9                     EEADR           equ	4009	;# 
   441   000FAB                     RCSTA           equ	4011	;# 
   442   000FAB                     RCSTA1          equ	4011	;# 
   443   000FAC                     TXSTA           equ	4012	;# 
   444   000FAC                     TXSTA1          equ	4012	;# 
   445   000FAD                     TXREG           equ	4013	;# 
   446   000FAD                     TXREG1          equ	4013	;# 
   447   000FAE                     RCREG           equ	4014	;# 
   448   000FAE                     RCREG1          equ	4014	;# 
   449   000FAF                     SPBRG           equ	4015	;# 
   450   000FAF                     SPBRG1          equ	4015	;# 
   451   000FB0                     SPBRGH          equ	4016	;# 
   452   000FB1                     T3CON           equ	4017	;# 
   453   000FB2                     TMR3            equ	4018	;# 
   454   000FB2                     TMR3L           equ	4018	;# 
   455   000FB3                     TMR3H           equ	4019	;# 
   456   000FB4                     CMCON           equ	4020	;# 
   457   000FB5                     CVRCON          equ	4021	;# 
   458   000FB6                     ECCP1AS         equ	4022	;# 
   459   000FB7                     ECCP1DEL        equ	4023	;# 
   460   000FB7                     PWM1CON         equ	4023	;# 
   461   000FB8                     BAUDCON         equ	4024	;# 
   462   000FB8                     BAUDCTL         equ	4024	;# 
   463   000FBA                     CCP2CON         equ	4026	;# 
   464   000FBB                     CCPR2           equ	4027	;# 
   465   000FBB                     CCPR2L          equ	4027	;# 
   466   000FBC                     CCPR2H          equ	4028	;# 
   467   000FBD                     CCP1CON         equ	4029	;# 
   468   000FBD                     ECCP1CON        equ	4029	;# 
   469   000FBE                     CCPR1           equ	4030	;# 
   470   000FBE                     CCPR1L          equ	4030	;# 
   471   000FBF                     CCPR1H          equ	4031	;# 
   472   000FC0                     ADCON2          equ	4032	;# 
   473   000FC1                     ADCON1          equ	4033	;# 
   474   000FC2                     ADCON0          equ	4034	;# 
   475   000FC3                     ADRES           equ	4035	;# 
   476   000FC3                     ADRESL          equ	4035	;# 
   477   000FC4                     ADRESH          equ	4036	;# 
   478   000FC5                     SSPCON2         equ	4037	;# 
   479   000FC6                     SSPCON1         equ	4038	;# 
   480   000FC7                     SSPSTAT         equ	4039	;# 
   481   000FC8                     SSPADD          equ	4040	;# 
   482   000FC9                     SSPBUF          equ	4041	;# 
   483   000FCA                     T2CON           equ	4042	;# 
   484   000FCB                     PR2             equ	4043	;# 
   485   000FCB                     MEMCON          equ	4043	;# 
   486   000FCC                     TMR2            equ	4044	;# 
   487   000FCD                     T1CON           equ	4045	;# 
   488   000FCE                     TMR1            equ	4046	;# 
   489   000FCE                     TMR1L           equ	4046	;# 
   490   000FCF                     TMR1H           equ	4047	;# 
   491   000FD0                     RCON            equ	4048	;# 
   492   000FD1                     WDTCON          equ	4049	;# 
   493   000FD2                     HLVDCON         equ	4050	;# 
   494   000FD2                     LVDCON          equ	4050	;# 
   495   000FD3                     OSCCON          equ	4051	;# 
   496   000FD5                     T0CON           equ	4053	;# 
   497   000FD6                     TMR0            equ	4054	;# 
   498   000FD6                     TMR0L           equ	4054	;# 
   499   000FD7                     TMR0H           equ	4055	;# 
   500   000FD8                     STATUS          equ	4056	;# 
   501   000FD9                     FSR2            equ	4057	;# 
   502   000FD9                     FSR2L           equ	4057	;# 
   503   000FDA                     FSR2H           equ	4058	;# 
   504   000FDB                     PLUSW2          equ	4059	;# 
   505   000FDC                     PREINC2         equ	4060	;# 
   506   000FDD                     POSTDEC2        equ	4061	;# 
   507   000FDE                     POSTINC2        equ	4062	;# 
   508   000FDF                     INDF2           equ	4063	;# 
   509   000FE0                     BSR             equ	4064	;# 
   510   000FE1                     FSR1            equ	4065	;# 
   511   000FE1                     FSR1L           equ	4065	;# 
   512   000FE2                     FSR1H           equ	4066	;# 
   513   000FE3                     PLUSW1          equ	4067	;# 
   514   000FE4                     PREINC1         equ	4068	;# 
   515   000FE5                     POSTDEC1        equ	4069	;# 
   516   000FE6                     POSTINC1        equ	4070	;# 
   517   000FE7                     INDF1           equ	4071	;# 
   518   000FE8                     WREG            equ	4072	;# 
   519   000FE9                     FSR0            equ	4073	;# 
   520   000FE9                     FSR0L           equ	4073	;# 
   521   000FEA                     FSR0H           equ	4074	;# 
   522   000FEB                     PLUSW0          equ	4075	;# 
   523   000FEC                     PREINC0         equ	4076	;# 
   524   000FED                     POSTDEC0        equ	4077	;# 
   525   000FEE                     POSTINC0        equ	4078	;# 
   526   000FEF                     INDF0           equ	4079	;# 
   527   000FF0                     INTCON3         equ	4080	;# 
   528   000FF1                     INTCON2         equ	4081	;# 
   529   000FF2                     INTCON          equ	4082	;# 
   530   000FF3                     PROD            equ	4083	;# 
   531   000FF3                     PRODL           equ	4083	;# 
   532   000FF4                     PRODH           equ	4084	;# 
   533   000FF5                     TABLAT          equ	4085	;# 
   534   000FF6                     TBLPTR          equ	4086	;# 
   535   000FF6                     TBLPTRL         equ	4086	;# 
   536   000FF7                     TBLPTRH         equ	4087	;# 
   537   000FF8                     TBLPTRU         equ	4088	;# 
   538   000FF9                     PCLAT           equ	4089	;# 
   539   000FF9                     PC              equ	4089	;# 
   540   000FF9                     PCL             equ	4089	;# 
   541   000FFA                     PCLATH          equ	4090	;# 
   542   000FFB                     PCLATU          equ	4091	;# 
   543   000FFC                     STKPTR          equ	4092	;# 
   544   000FFD                     TOS             equ	4093	;# 
   545   000FFD                     TOSL            equ	4093	;# 
   546   000FFE                     TOSH            equ	4094	;# 
   547   000FFF                     TOSU            equ	4095	;# 
   548   000F80                     PORTA           equ	3968	;# 
   549   000F81                     PORTB           equ	3969	;# 
   550   000F82                     PORTC           equ	3970	;# 
   551   000F83                     PORTD           equ	3971	;# 
   552   000F84                     PORTE           equ	3972	;# 
   553   000F89                     LATA            equ	3977	;# 
   554   000F8A                     LATB            equ	3978	;# 
   555   000F8B                     LATC            equ	3979	;# 
   556   000F8C                     LATD            equ	3980	;# 
   557   000F8D                     LATE            equ	3981	;# 
   558   000F92                     TRISA           equ	3986	;# 
   559   000F92                     DDRA            equ	3986	;# 
   560   000F93                     TRISB           equ	3987	;# 
   561   000F93                     DDRB            equ	3987	;# 
   562   000F94                     TRISC           equ	3988	;# 
   563   000F94                     DDRC            equ	3988	;# 
   564   000F95                     TRISD           equ	3989	;# 
   565   000F95                     DDRD            equ	3989	;# 
   566   000F96                     TRISE           equ	3990	;# 
   567   000F96                     DDRE            equ	3990	;# 
   568   000F9B                     OSCTUNE         equ	3995	;# 
   569   000F9D                     PIE1            equ	3997	;# 
   570   000F9E                     PIR1            equ	3998	;# 
   571   000F9F                     IPR1            equ	3999	;# 
   572   000FA0                     PIE2            equ	4000	;# 
   573   000FA1                     PIR2            equ	4001	;# 
   574   000FA2                     IPR2            equ	4002	;# 
   575   000FA6                     EECON1          equ	4006	;# 
   576   000FA7                     EECON2          equ	4007	;# 
   577   000FA8                     EEDATA          equ	4008	;# 
   578   000FA9                     EEADR           equ	4009	;# 
   579   000FAB                     RCSTA           equ	4011	;# 
   580   000FAB                     RCSTA1          equ	4011	;# 
   581   000FAC                     TXSTA           equ	4012	;# 
   582   000FAC                     TXSTA1          equ	4012	;# 
   583   000FAD                     TXREG           equ	4013	;# 
   584   000FAD                     TXREG1          equ	4013	;# 
   585   000FAE                     RCREG           equ	4014	;# 
   586   000FAE                     RCREG1          equ	4014	;# 
   587   000FAF                     SPBRG           equ	4015	;# 
   588   000FAF                     SPBRG1          equ	4015	;# 
   589   000FB0                     SPBRGH          equ	4016	;# 
   590   000FB1                     T3CON           equ	4017	;# 
   591   000FB2                     TMR3            equ	4018	;# 
   592   000FB2                     TMR3L           equ	4018	;# 
   593   000FB3                     TMR3H           equ	4019	;# 
   594   000FB4                     CMCON           equ	4020	;# 
   595   000FB5                     CVRCON          equ	4021	;# 
   596   000FB6                     ECCP1AS         equ	4022	;# 
   597   000FB7                     ECCP1DEL        equ	4023	;# 
   598   000FB7                     PWM1CON         equ	4023	;# 
   599   000FB8                     BAUDCON         equ	4024	;# 
   600   000FB8                     BAUDCTL         equ	4024	;# 
   601   000FBA                     CCP2CON         equ	4026	;# 
   602   000FBB                     CCPR2           equ	4027	;# 
   603   000FBB                     CCPR2L          equ	4027	;# 
   604   000FBC                     CCPR2H          equ	4028	;# 
   605   000FBD                     CCP1CON         equ	4029	;# 
   606   000FBD                     ECCP1CON        equ	4029	;# 
   607   000FBE                     CCPR1           equ	4030	;# 
   608   000FBE                     CCPR1L          equ	4030	;# 
   609   000FBF                     CCPR1H          equ	4031	;# 
   610   000FC0                     ADCON2          equ	4032	;# 
   611   000FC1                     ADCON1          equ	4033	;# 
   612   000FC2                     ADCON0          equ	4034	;# 
   613   000FC3                     ADRES           equ	4035	;# 
   614   000FC3                     ADRESL          equ	4035	;# 
   615   000FC4                     ADRESH          equ	4036	;# 
   616   000FC5                     SSPCON2         equ	4037	;# 
   617   000FC6                     SSPCON1         equ	4038	;# 
   618   000FC7                     SSPSTAT         equ	4039	;# 
   619   000FC8                     SSPADD          equ	4040	;# 
   620   000FC9                     SSPBUF          equ	4041	;# 
   621   000FCA                     T2CON           equ	4042	;# 
   622   000FCB                     PR2             equ	4043	;# 
   623   000FCB                     MEMCON          equ	4043	;# 
   624   000FCC                     TMR2            equ	4044	;# 
   625   000FCD                     T1CON           equ	4045	;# 
   626   000FCE                     TMR1            equ	4046	;# 
   627   000FCE                     TMR1L           equ	4046	;# 
   628   000FCF                     TMR1H           equ	4047	;# 
   629   000FD0                     RCON            equ	4048	;# 
   630   000FD1                     WDTCON          equ	4049	;# 
   631   000FD2                     HLVDCON         equ	4050	;# 
   632   000FD2                     LVDCON          equ	4050	;# 
   633   000FD3                     OSCCON          equ	4051	;# 
   634   000FD5                     T0CON           equ	4053	;# 
   635   000FD6                     TMR0            equ	4054	;# 
   636   000FD6                     TMR0L           equ	4054	;# 
   637   000FD7                     TMR0H           equ	4055	;# 
   638   000FD8                     STATUS          equ	4056	;# 
   639   000FD9                     FSR2            equ	4057	;# 
   640   000FD9                     FSR2L           equ	4057	;# 
   641   000FDA                     FSR2H           equ	4058	;# 
   642   000FDB                     PLUSW2          equ	4059	;# 
   643   000FDC                     PREINC2         equ	4060	;# 
   644   000FDD                     POSTDEC2        equ	4061	;# 
   645   000FDE                     POSTINC2        equ	4062	;# 
   646   000FDF                     INDF2           equ	4063	;# 
   647   000FE0                     BSR             equ	4064	;# 
   648   000FE1                     FSR1            equ	4065	;# 
   649   000FE1                     FSR1L           equ	4065	;# 
   650   000FE2                     FSR1H           equ	4066	;# 
   651   000FE3                     PLUSW1          equ	4067	;# 
   652   000FE4                     PREINC1         equ	4068	;# 
   653   000FE5                     POSTDEC1        equ	4069	;# 
   654   000FE6                     POSTINC1        equ	4070	;# 
   655   000FE7                     INDF1           equ	4071	;# 
   656   000FE8                     WREG            equ	4072	;# 
   657   000FE9                     FSR0            equ	4073	;# 
   658   000FE9                     FSR0L           equ	4073	;# 
   659   000FEA                     FSR0H           equ	4074	;# 
   660   000FEB                     PLUSW0          equ	4075	;# 
   661   000FEC                     PREINC0         equ	4076	;# 
   662   000FED                     POSTDEC0        equ	4077	;# 
   663   000FEE                     POSTINC0        equ	4078	;# 
   664   000FEF                     INDF0           equ	4079	;# 
   665   000FF0                     INTCON3         equ	4080	;# 
   666   000FF1                     INTCON2         equ	4081	;# 
   667   000FF2                     INTCON          equ	4082	;# 
   668   000FF3                     PROD            equ	4083	;# 
   669   000FF3                     PRODL           equ	4083	;# 
   670   000FF4                     PRODH           equ	4084	;# 
   671   000FF5                     TABLAT          equ	4085	;# 
   672   000FF6                     TBLPTR          equ	4086	;# 
   673   000FF6                     TBLPTRL         equ	4086	;# 
   674   000FF7                     TBLPTRH         equ	4087	;# 
   675   000FF8                     TBLPTRU         equ	4088	;# 
   676   000FF9                     PCLAT           equ	4089	;# 
   677   000FF9                     PC              equ	4089	;# 
   678   000FF9                     PCL             equ	4089	;# 
   679   000FFA                     PCLATH          equ	4090	;# 
   680   000FFB                     PCLATU          equ	4091	;# 
   681   000FFC                     STKPTR          equ	4092	;# 
   682   000FFD                     TOS             equ	4093	;# 
   683   000FFD                     TOSL            equ	4093	;# 
   684   000FFE                     TOSH            equ	4094	;# 
   685   000FFF                     TOSU            equ	4095	;# 
   686   000F80                     PORTA           equ	3968	;# 
   687   000F81                     PORTB           equ	3969	;# 
   688   000F82                     PORTC           equ	3970	;# 
   689   000F83                     PORTD           equ	3971	;# 
   690   000F84                     PORTE           equ	3972	;# 
   691   000F89                     LATA            equ	3977	;# 
   692   000F8A                     LATB            equ	3978	;# 
   693   000F8B                     LATC            equ	3979	;# 
   694   000F8C                     LATD            equ	3980	;# 
   695   000F8D                     LATE            equ	3981	;# 
   696   000F92                     TRISA           equ	3986	;# 
   697   000F92                     DDRA            equ	3986	;# 
   698   000F93                     TRISB           equ	3987	;# 
   699   000F93                     DDRB            equ	3987	;# 
   700   000F94                     TRISC           equ	3988	;# 
   701   000F94                     DDRC            equ	3988	;# 
   702   000F95                     TRISD           equ	3989	;# 
   703   000F95                     DDRD            equ	3989	;# 
   704   000F96                     TRISE           equ	3990	;# 
   705   000F96                     DDRE            equ	3990	;# 
   706   000F9B                     OSCTUNE         equ	3995	;# 
   707   000F9D                     PIE1            equ	3997	;# 
   708   000F9E                     PIR1            equ	3998	;# 
   709   000F9F                     IPR1            equ	3999	;# 
   710   000FA0                     PIE2            equ	4000	;# 
   711   000FA1                     PIR2            equ	4001	;# 
   712   000FA2                     IPR2            equ	4002	;# 
   713   000FA6                     EECON1          equ	4006	;# 
   714   000FA7                     EECON2          equ	4007	;# 
   715   000FA8                     EEDATA          equ	4008	;# 
   716   000FA9                     EEADR           equ	4009	;# 
   717   000FAB                     RCSTA           equ	4011	;# 
   718   000FAB                     RCSTA1          equ	4011	;# 
   719   000FAC                     TXSTA           equ	4012	;# 
   720   000FAC                     TXSTA1          equ	4012	;# 
   721   000FAD                     TXREG           equ	4013	;# 
   722   000FAD                     TXREG1          equ	4013	;# 
   723   000FAE                     RCREG           equ	4014	;# 
   724   000FAE                     RCREG1          equ	4014	;# 
   725   000FAF                     SPBRG           equ	4015	;# 
   726   000FAF                     SPBRG1          equ	4015	;# 
   727   000FB0                     SPBRGH          equ	4016	;# 
   728   000FB1                     T3CON           equ	4017	;# 
   729   000FB2                     TMR3            equ	4018	;# 
   730   000FB2                     TMR3L           equ	4018	;# 
   731   000FB3                     TMR3H           equ	4019	;# 
   732   000FB4                     CMCON           equ	4020	;# 
   733   000FB5                     CVRCON          equ	4021	;# 
   734   000FB6                     ECCP1AS         equ	4022	;# 
   735   000FB7                     ECCP1DEL        equ	4023	;# 
   736   000FB7                     PWM1CON         equ	4023	;# 
   737   000FB8                     BAUDCON         equ	4024	;# 
   738   000FB8                     BAUDCTL         equ	4024	;# 
   739   000FBA                     CCP2CON         equ	4026	;# 
   740   000FBB                     CCPR2           equ	4027	;# 
   741   000FBB                     CCPR2L          equ	4027	;# 
   742   000FBC                     CCPR2H          equ	4028	;# 
   743   000FBD                     CCP1CON         equ	4029	;# 
   744   000FBD                     ECCP1CON        equ	4029	;# 
   745   000FBE                     CCPR1           equ	4030	;# 
   746   000FBE                     CCPR1L          equ	4030	;# 
   747   000FBF                     CCPR1H          equ	4031	;# 
   748   000FC0                     ADCON2          equ	4032	;# 
   749   000FC1                     ADCON1          equ	4033	;# 
   750   000FC2                     ADCON0          equ	4034	;# 
   751   000FC3                     ADRES           equ	4035	;# 
   752   000FC3                     ADRESL          equ	4035	;# 
   753   000FC4                     ADRESH          equ	4036	;# 
   754   000FC5                     SSPCON2         equ	4037	;# 
   755   000FC6                     SSPCON1         equ	4038	;# 
   756   000FC7                     SSPSTAT         equ	4039	;# 
   757   000FC8                     SSPADD          equ	4040	;# 
   758   000FC9                     SSPBUF          equ	4041	;# 
   759   000FCA                     T2CON           equ	4042	;# 
   760   000FCB                     PR2             equ	4043	;# 
   761   000FCB                     MEMCON          equ	4043	;# 
   762   000FCC                     TMR2            equ	4044	;# 
   763   000FCD                     T1CON           equ	4045	;# 
   764   000FCE                     TMR1            equ	4046	;# 
   765   000FCE                     TMR1L           equ	4046	;# 
   766   000FCF                     TMR1H           equ	4047	;# 
   767   000FD0                     RCON            equ	4048	;# 
   768   000FD1                     WDTCON          equ	4049	;# 
   769   000FD2                     HLVDCON         equ	4050	;# 
   770   000FD2                     LVDCON          equ	4050	;# 
   771   000FD3                     OSCCON          equ	4051	;# 
   772   000FD5                     T0CON           equ	4053	;# 
   773   000FD6                     TMR0            equ	4054	;# 
   774   000FD6                     TMR0L           equ	4054	;# 
   775   000FD7                     TMR0H           equ	4055	;# 
   776   000FD8                     STATUS          equ	4056	;# 
   777   000FD9                     FSR2            equ	4057	;# 
   778   000FD9                     FSR2L           equ	4057	;# 
   779   000FDA                     FSR2H           equ	4058	;# 
   780   000FDB                     PLUSW2          equ	4059	;# 
   781   000FDC                     PREINC2         equ	4060	;# 
   782   000FDD                     POSTDEC2        equ	4061	;# 
   783   000FDE                     POSTINC2        equ	4062	;# 
   784   000FDF                     INDF2           equ	4063	;# 
   785   000FE0                     BSR             equ	4064	;# 
   786   000FE1                     FSR1            equ	4065	;# 
   787   000FE1                     FSR1L           equ	4065	;# 
   788   000FE2                     FSR1H           equ	4066	;# 
   789   000FE3                     PLUSW1          equ	4067	;# 
   790   000FE4                     PREINC1         equ	4068	;# 
   791   000FE5                     POSTDEC1        equ	4069	;# 
   792   000FE6                     POSTINC1        equ	4070	;# 
   793   000FE7                     INDF1           equ	4071	;# 
   794   000FE8                     WREG            equ	4072	;# 
   795   000FE9                     FSR0            equ	4073	;# 
   796   000FE9                     FSR0L           equ	4073	;# 
   797   000FEA                     FSR0H           equ	4074	;# 
   798   000FEB                     PLUSW0          equ	4075	;# 
   799   000FEC                     PREINC0         equ	4076	;# 
   800   000FED                     POSTDEC0        equ	4077	;# 
   801   000FEE                     POSTINC0        equ	4078	;# 
   802   000FEF                     INDF0           equ	4079	;# 
   803   000FF0                     INTCON3         equ	4080	;# 
   804   000FF1                     INTCON2         equ	4081	;# 
   805   000FF2                     INTCON          equ	4082	;# 
   806   000FF3                     PROD            equ	4083	;# 
   807   000FF3                     PRODL           equ	4083	;# 
   808   000FF4                     PRODH           equ	4084	;# 
   809   000FF5                     TABLAT          equ	4085	;# 
   810   000FF6                     TBLPTR          equ	4086	;# 
   811   000FF6                     TBLPTRL         equ	4086	;# 
   812   000FF7                     TBLPTRH         equ	4087	;# 
   813   000FF8                     TBLPTRU         equ	4088	;# 
   814   000FF9                     PCLAT           equ	4089	;# 
   815   000FF9                     PC              equ	4089	;# 
   816   000FF9                     PCL             equ	4089	;# 
   817   000FFA                     PCLATH          equ	4090	;# 
   818   000FFB                     PCLATU          equ	4091	;# 
   819   000FFC                     STKPTR          equ	4092	;# 
   820   000FFD                     TOS             equ	4093	;# 
   821   000FFD                     TOSL            equ	4093	;# 
   822   000FFE                     TOSH            equ	4094	;# 
   823   000FFF                     TOSU            equ	4095	;# 
   824   000F80                     PORTA           equ	3968	;# 
   825   000F81                     PORTB           equ	3969	;# 
   826   000F82                     PORTC           equ	3970	;# 
   827   000F83                     PORTD           equ	3971	;# 
   828   000F84                     PORTE           equ	3972	;# 
   829   000F89                     LATA            equ	3977	;# 
   830   000F8A                     LATB            equ	3978	;# 
   831   000F8B                     LATC            equ	3979	;# 
   832   000F8C                     LATD            equ	3980	;# 
   833   000F8D                     LATE            equ	3981	;# 
   834   000F92                     TRISA           equ	3986	;# 
   835   000F92                     DDRA            equ	3986	;# 
   836   000F93                     TRISB           equ	3987	;# 
   837   000F93                     DDRB            equ	3987	;# 
   838   000F94                     TRISC           equ	3988	;# 
   839   000F94                     DDRC            equ	3988	;# 
   840   000F95                     TRISD           equ	3989	;# 
   841   000F95                     DDRD            equ	3989	;# 
   842   000F96                     TRISE           equ	3990	;# 
   843   000F96                     DDRE            equ	3990	;# 
   844   000F9B                     OSCTUNE         equ	3995	;# 
   845   000F9D                     PIE1            equ	3997	;# 
   846   000F9E                     PIR1            equ	3998	;# 
   847   000F9F                     IPR1            equ	3999	;# 
   848   000FA0                     PIE2            equ	4000	;# 
   849   000FA1                     PIR2            equ	4001	;# 
   850   000FA2                     IPR2            equ	4002	;# 
   851   000FA6                     EECON1          equ	4006	;# 
   852   000FA7                     EECON2          equ	4007	;# 
   853   000FA8                     EEDATA          equ	4008	;# 
   854   000FA9                     EEADR           equ	4009	;# 
   855   000FAB                     RCSTA           equ	4011	;# 
   856   000FAB                     RCSTA1          equ	4011	;# 
   857   000FAC                     TXSTA           equ	4012	;# 
   858   000FAC                     TXSTA1          equ	4012	;# 
   859   000FAD                     TXREG           equ	4013	;# 
   860   000FAD                     TXREG1          equ	4013	;# 
   861   000FAE                     RCREG           equ	4014	;# 
   862   000FAE                     RCREG1          equ	4014	;# 
   863   000FAF                     SPBRG           equ	4015	;# 
   864   000FAF                     SPBRG1          equ	4015	;# 
   865   000FB0                     SPBRGH          equ	4016	;# 
   866   000FB1                     T3CON           equ	4017	;# 
   867   000FB2                     TMR3            equ	4018	;# 
   868   000FB2                     TMR3L           equ	4018	;# 
   869   000FB3                     TMR3H           equ	4019	;# 
   870   000FB4                     CMCON           equ	4020	;# 
   871   000FB5                     CVRCON          equ	4021	;# 
   872   000FB6                     ECCP1AS         equ	4022	;# 
   873   000FB7                     ECCP1DEL        equ	4023	;# 
   874   000FB7                     PWM1CON         equ	4023	;# 
   875   000FB8                     BAUDCON         equ	4024	;# 
   876   000FB8                     BAUDCTL         equ	4024	;# 
   877   000FBA                     CCP2CON         equ	4026	;# 
   878   000FBB                     CCPR2           equ	4027	;# 
   879   000FBB                     CCPR2L          equ	4027	;# 
   880   000FBC                     CCPR2H          equ	4028	;# 
   881   000FBD                     CCP1CON         equ	4029	;# 
   882   000FBD                     ECCP1CON        equ	4029	;# 
   883   000FBE                     CCPR1           equ	4030	;# 
   884   000FBE                     CCPR1L          equ	4030	;# 
   885   000FBF                     CCPR1H          equ	4031	;# 
   886   000FC0                     ADCON2          equ	4032	;# 
   887   000FC1                     ADCON1          equ	4033	;# 
   888   000FC2                     ADCON0          equ	4034	;# 
   889   000FC3                     ADRES           equ	4035	;# 
   890   000FC3                     ADRESL          equ	4035	;# 
   891   000FC4                     ADRESH          equ	4036	;# 
   892   000FC5                     SSPCON2         equ	4037	;# 
   893   000FC6                     SSPCON1         equ	4038	;# 
   894   000FC7                     SSPSTAT         equ	4039	;# 
   895   000FC8                     SSPADD          equ	4040	;# 
   896   000FC9                     SSPBUF          equ	4041	;# 
   897   000FCA                     T2CON           equ	4042	;# 
   898   000FCB                     PR2             equ	4043	;# 
   899   000FCB                     MEMCON          equ	4043	;# 
   900   000FCC                     TMR2            equ	4044	;# 
   901   000FCD                     T1CON           equ	4045	;# 
   902   000FCE                     TMR1            equ	4046	;# 
   903   000FCE                     TMR1L           equ	4046	;# 
   904   000FCF                     TMR1H           equ	4047	;# 
   905   000FD0                     RCON            equ	4048	;# 
   906   000FD1                     WDTCON          equ	4049	;# 
   907   000FD2                     HLVDCON         equ	4050	;# 
   908   000FD2                     LVDCON          equ	4050	;# 
   909   000FD3                     OSCCON          equ	4051	;# 
   910   000FD5                     T0CON           equ	4053	;# 
   911   000FD6                     TMR0            equ	4054	;# 
   912   000FD6                     TMR0L           equ	4054	;# 
   913   000FD7                     TMR0H           equ	4055	;# 
   914   000FD8                     STATUS          equ	4056	;# 
   915   000FD9                     FSR2            equ	4057	;# 
   916   000FD9                     FSR2L           equ	4057	;# 
   917   000FDA                     FSR2H           equ	4058	;# 
   918   000FDB                     PLUSW2          equ	4059	;# 
   919   000FDC                     PREINC2         equ	4060	;# 
   920   000FDD                     POSTDEC2        equ	4061	;# 
   921   000FDE                     POSTINC2        equ	4062	;# 
   922   000FDF                     INDF2           equ	4063	;# 
   923   000FE0                     BSR             equ	4064	;# 
   924   000FE1                     FSR1            equ	4065	;# 
   925   000FE1                     FSR1L           equ	4065	;# 
   926   000FE2                     FSR1H           equ	4066	;# 
   927   000FE3                     PLUSW1          equ	4067	;# 
   928   000FE4                     PREINC1         equ	4068	;# 
   929   000FE5                     POSTDEC1        equ	4069	;# 
   930   000FE6                     POSTINC1        equ	4070	;# 
   931   000FE7                     INDF1           equ	4071	;# 
   932   000FE8                     WREG            equ	4072	;# 
   933   000FE9                     FSR0            equ	4073	;# 
   934   000FE9                     FSR0L           equ	4073	;# 
   935   000FEA                     FSR0H           equ	4074	;# 
   936   000FEB                     PLUSW0          equ	4075	;# 
   937   000FEC                     PREINC0         equ	4076	;# 
   938   000FED                     POSTDEC0        equ	4077	;# 
   939   000FEE                     POSTINC0        equ	4078	;# 
   940   000FEF                     INDF0           equ	4079	;# 
   941   000FF0                     INTCON3         equ	4080	;# 
   942   000FF1                     INTCON2         equ	4081	;# 
   943   000FF2                     INTCON          equ	4082	;# 
   944   000FF3                     PROD            equ	4083	;# 
   945   000FF3                     PRODL           equ	4083	;# 
   946   000FF4                     PRODH           equ	4084	;# 
   947   000FF5                     TABLAT          equ	4085	;# 
   948   000FF6                     TBLPTR          equ	4086	;# 
   949   000FF6                     TBLPTRL         equ	4086	;# 
   950   000FF7                     TBLPTRH         equ	4087	;# 
   951   000FF8                     TBLPTRU         equ	4088	;# 
   952   000FF9                     PCLAT           equ	4089	;# 
   953   000FF9                     PC              equ	4089	;# 
   954   000FF9                     PCL             equ	4089	;# 
   955   000FFA                     PCLATH          equ	4090	;# 
   956   000FFB                     PCLATU          equ	4091	;# 
   957   000FFC                     STKPTR          equ	4092	;# 
   958   000FFD                     TOS             equ	4093	;# 
   959   000FFD                     TOSL            equ	4093	;# 
   960   000FFE                     TOSH            equ	4094	;# 
   961   000FFF                     TOSU            equ	4095	;# 
   962                           
   963                           	psect	smallconst
   964   000200                     __psmallconst:
   965                           	callstack 0
   966   000200  00                 	db	0
   967   000201                     GetTecla@F3224:
   968                           	callstack 0
   969   000201  01                 	db	1
   970   000202  02                 	db	2
   971   000203  03                 	db	3
   972   000204  04                 	db	4
   973   000205  05                 	db	5
   974   000206  06                 	db	6
   975   000207  07                 	db	7
   976   000208  08                 	db	8
   977   000209  09                 	db	9
   978   00020A  0A                 	db	10
   979   00020B  00                 	db	0
   980   00020C  0B                 	db	11
   981   00020D                     __end_ofGetTecla@F3224:
   982                           	callstack 0
   983   007F92                     _TMR0IF         set	32658
   984   000FD6                     _TMR0           set	4054
   985   000FAE                     _RCREG          set	4014
   986   000FAD                     _TXREG          set	4013
   987   000F9E                     _PIR1bits       set	3998
   988   000FB8                     _BAUDCON        set	4024
   989   000FAF                     _SPBRG          set	4015
   990   000FAB                     _RCSTA          set	4011
   991   000FAC                     _TXSTA          set	4012
   992   000F81                     _PORTBbits      set	3969
   993   000F8A                     _LATBbits       set	3978
   994   000F93                     _TRISBbits      set	3987
   995   000F82                     _PORTCbits      set	3970
   996   000F8B                     _LATCbits       set	3979
   997   000F94                     _TRISCbits      set	3988
   998   000F8C                     _LATD           set	3980
   999   000F95                     _TRISD          set	3989
  1000   000F83                     _PORTD          set	3971
  1001   000FD5                     _T0CON          set	4053
  1002   000F8B                     _LATC           set	3979
  1003   000FF2                     _INTCONbits     set	4082
  1004   00020D                     STR_13:
  1005   00020D  45                 	db	69	;'E'
  1006   00020E  52                 	db	82	;'R'
  1007   00020F  52                 	db	82	;'R'
  1008   000210  4F                 	db	79	;'O'
  1009   000211  52                 	db	82	;'R'
  1010   000212  2E                 	db	46
  1011   000213  20                 	db	32
  1012   000214  56                 	db	86	;'V'
  1013   000215  61                 	db	97	;'a'
  1014   000216  6C                 	db	108	;'l'
  1015   000217  6F                 	db	111	;'o'
  1016   000218  72                 	db	114	;'r'
  1017   000219  20                 	db	32
  1018   00021A  69                 	db	105	;'i'
  1019   00021B  6E                 	db	110	;'n'
  1020   00021C  74                 	db	116	;'t'
  1021   00021D  72                 	db	114	;'r'
  1022   00021E  6F                 	db	111	;'o'
  1023   00021F  64                 	db	100	;'d'
  1024   000220  75                 	db	117	;'u'
  1025   000221  69                 	db	105	;'i'
  1026   000222  74                 	db	116	;'t'
  1027   000223  20                 	db	32
  1028   000224  65                 	db	101	;'e'
  1029   000225  72                 	db	114	;'r'
  1030   000226  72                 	db	114	;'r'
  1031   000227  6F                 	db	111	;'o'
  1032   000228  6E                 	db	110	;'n'
  1033   000229  69                 	db	105	;'i'
  1034   00022A  2E                 	db	46
  1035   00022B  0D                 	db	13
  1036   00022C  0A                 	db	10
  1037   00022D  00                 	db	0
  1038   00022E                     STR_10:
  1039   00022E  09                 	db	9
  1040   00022F  33                 	db	51	;'3'
  1041   000230  2E                 	db	46
  1042   000231  20                 	db	32
  1043   000232  4D                 	db	77	;'M'
  1044   000233  6F                 	db	111	;'o'
  1045   000234  64                 	db	100	;'d'
  1046   000235  69                 	db	105	;'i'
  1047   000236  66                 	db	102	;'f'
  1048   000237  69                 	db	105	;'i'
  1049   000238  63                 	db	99	;'c'
  1050   000239  61                 	db	97	;'a'
  1051   00023A  72                 	db	114	;'r'
  1052   00023B  20                 	db	32
  1053   00023C  68                 	db	104	;'h'
  1054   00023D  6F                 	db	111	;'o'
  1055   00023E  72                 	db	114	;'r'
  1056   00023F  61                 	db	97	;'a'
  1057   000240  20                 	db	32
  1058   000241  64                 	db	100	;'d'
  1059   000242  65                 	db	101	;'e'
  1060   000243  6C                 	db	108	;'l'
  1061   000244  20                 	db	32
  1062   000245  73                 	db	115	;'s'
  1063   000246  69                 	db	105	;'i'
  1064   000247  73                 	db	115	;'s'
  1065   000248  74                 	db	116	;'t'
  1066   000249  65                 	db	101	;'e'
  1067   00024A  6D                 	db	109	;'m'
  1068   00024B  61                 	db	97	;'a'
  1069   00024C  0D                 	db	13
  1070   00024D  0A                 	db	10
  1071   00024E  00                 	db	0
  1072   00024F                     STR_9:
  1073   00024F  09                 	db	9
  1074   000250  32                 	db	50	;'2'
  1075   000251  2E                 	db	46
  1076   000252  20                 	db	32
  1077   000253  4D                 	db	77	;'M'
  1078   000254  6F                 	db	111	;'o'
  1079   000255  73                 	db	115	;'s'
  1080   000256  74                 	db	116	;'t'
  1081   000257  72                 	db	114	;'r'
  1082   000258  61                 	db	97	;'a'
  1083   000259  72                 	db	114	;'r'
  1084   00025A  20                 	db	32
  1085   00025B  63                 	db	99	;'c'
  1086   00025C  6F                 	db	111	;'o'
  1087   00025D  6E                 	db	110	;'n'
  1088   00025E  66                 	db	102	;'f'
  1089   00025F  69                 	db	105	;'i'
  1090   000260  67                 	db	103	;'g'
  1091   000261  75                 	db	117	;'u'
  1092   000262  72                 	db	114	;'r'
  1093   000263  61                 	db	97	;'a'
  1094   000264  63                 	db	99	;'c'
  1095   000265  69                 	db	105	;'i'
  1096   000266  6F                 	db	111	;'o'
  1097   000267  6E                 	db	110	;'n'
  1098   000268  73                 	db	115	;'s'
  1099   000269  0D                 	db	13
  1100   00026A  0A                 	db	10
  1101   00026B  00                 	db	0
  1102   00026C                     STR_8:
  1103   00026C  09                 	db	9
  1104   00026D  31                 	db	49	;'1'
  1105   00026E  2E                 	db	46
  1106   00026F  20                 	db	32
  1107   000270  51                 	db	81	;'Q'
  1108   000271  75                 	db	117	;'u'
  1109   000272  69                 	db	105	;'i'
  1110   000273  20                 	db	32
  1111   000274  68                 	db	104	;'h'
  1112   000275  69                 	db	105	;'i'
  1113   000276  20                 	db	32
  1114   000277  68                 	db	104	;'h'
  1115   000278  61                 	db	97	;'a'
  1116   000279  20                 	db	32
  1117   00027A  61                 	db	97	;'a'
  1118   00027B  20                 	db	32
  1119   00027C  6C                 	db	108	;'l'
  1120   00027D  61                 	db	97	;'a'
  1121   00027E  20                 	db	32
  1122   00027F  73                 	db	115	;'s'
  1123   000280  61                 	db	97	;'a'
  1124   000281  6C                 	db	108	;'l'
  1125   000282  61                 	db	97	;'a'
  1126   000283  3F                 	db	63	;'?'
  1127   000284  0D                 	db	13
  1128   000285  0A                 	db	10
  1129   000286  00                 	db	0
  1130   000287                     STR_7:
  1131   000287  54                 	db	84	;'T'
  1132   000288  72                 	db	114	;'r'
  1133   000289  69                 	db	105	;'i'
  1134   00028A  61                 	db	97	;'a'
  1135   00028B  20                 	db	32
  1136   00028C  75                 	db	117	;'u'
  1137   00028D  6E                 	db	110	;'n'
  1138   00028E  61                 	db	97	;'a'
  1139   00028F  20                 	db	32
  1140   000290  6F                 	db	111	;'o'
  1141   000291  70                 	db	112	;'p'
  1142   000292  63                 	db	99	;'c'
  1143   000293  69                 	db	105	;'i'
  1144   000294  C3                 	db	-61
  1145   000295  B3                 	db	-77
  1146   000296  3A                 	db	58	;':'
  1147   000297  0D                 	db	13
  1148   000298  0A                 	db	10
  1149   000299  00                 	db	0
  1150   00029A                     STR_4:
  1151   00029A  2D                 	db	45
  1152   00029B  2D                 	db	45
  1153   00029C  2D                 	db	45
  1154   00029D  2D                 	db	45
  1155   00029E  2D                 	db	45
  1156   00029F  2D                 	db	45
  1157   0002A0  2D                 	db	45
  1158   0002A1  2D                 	db	45
  1159   0002A2  2D                 	db	45
  1160   0002A3  2D                 	db	45
  1161   0002A4  2D                 	db	45
  1162   0002A5  2D                 	db	45
  1163   0002A6  2D                 	db	45
  1164   0002A7  2D                 	db	45
  1165   0002A8  2D                 	db	45
  1166   0002A9  0D                 	db	13
  1167   0002AA  0A                 	db	10
  1168   0002AB  00                 	db	0
  1169   0002AC                     STR_5:
  1170   0002AC  4D                 	db	77	;'M'
  1171   0002AD  65                 	db	101	;'e'
  1172   0002AE  6E                 	db	110	;'n'
  1173   0002AF  C3                 	db	-61
  1174   0002B0  BA                 	db	-70
  1175   0002B1  20                 	db	32
  1176   0002B2  70                 	db	112	;'p'
  1177   0002B3  72                 	db	114	;'r'
  1178   0002B4  69                 	db	105	;'i'
  1179   0002B5  6E                 	db	110	;'n'
  1180   0002B6  63                 	db	99	;'c'
  1181   0002B7  69                 	db	105	;'i'
  1182   0002B8  70                 	db	112	;'p'
  1183   0002B9  61                 	db	97	;'a'
  1184   0002BA  6C                 	db	108	;'l'
  1185   0002BB  0D                 	db	13
  1186   0002BC  0A                 	db	10
  1187   0002BD  00                 	db	0
  1188   0002BE                     STR_12:
  1189   0002BE  48                 	db	72	;'H'
  1190   0002BF  61                 	db	97	;'a'
  1191   0002C0  73                 	db	115	;'s'
  1192   0002C1  20                 	db	32
  1193   0002C2  70                 	db	112	;'p'
  1194   0002C3  75                 	db	117	;'u'
  1195   0002C4  6C                 	db	108	;'l'
  1196   0002C5  73                 	db	115	;'s'
  1197   0002C6  61                 	db	97	;'a'
  1198   0002C7  64                 	db	100	;'d'
  1199   0002C8  6F                 	db	111	;'o'
  1200   0002C9  20                 	db	32
  1201   0002CA  31                 	db	49	;'1'
  1202   0002CB  00                 	db	0
  1203   0002CC                     STR_1:
  1204   0002CC  54                 	db	84	;'T'
  1205   0002CD  65                 	db	101	;'e'
  1206   0002CE  63                 	db	99	;'c'
  1207   0002CF  6C                 	db	108	;'l'
  1208   0002D0  61                 	db	97	;'a'
  1209   0002D1  3A                 	db	58	;':'
  1210   0002D2  20                 	db	32
  1211   0002D3  25                 	db	37
  1212   0002D4  64                 	db	100	;'d'
  1213   0002D5  00                 	db	0
  1214   0002D6                     STR_11:
  1215   0002D6  4F                 	db	79	;'O'
  1216   0002D7  70                 	db	112	;'p'
  1217   0002D8  63                 	db	99	;'c'
  1218   0002D9  69                 	db	105	;'i'
  1219   0002DA  C3                 	db	-61
  1220   0002DB  B3                 	db	-77
  1221   0002DC  3A                 	db	58	;':'
  1222   0002DD  20                 	db	32
  1223   0002DE  00                 	db	0
  1224   0002DF  55                 	db	85	;'U'
  1225   0002E0  49                 	db	73	;'I'
  1226   0002E1  44                 	db	68	;'D'
  1227   0002E2  3A                 	db	58	;':'
  1228   0002E3  20                 	db	32
  1229   0002E4  00                 	db	0
  1230   00029A                     STR_6           equ	STR_4
  1231   0002AA                     STR_3           equ	STR_4+16
  1232   0002E5  00                 	db	0	; dummy byte at the end
  1233   000200                     __smallconst    set	__psmallconst
  1234   000200                     __mediumconst   set	__psmallconst
  1235   000002                     __activetblptr  equ	2
  1236                           
  1237                           ; #config settings
  1238                           
  1239                           	psect	cinit
  1240   000F16                     __pcinit:
  1241                           	callstack 0
  1242   000F16                     start_initialization:
  1243                           	callstack 0
  1244   000F16                     __initialization:
  1245                           	callstack 0
  1246                           
  1247                           ; Clear objects allocated to BANK0 (32 bytes)
  1248   000F16  EE00  F080         	lfsr	0,__pbssBANK0
  1249   000F1A  0E20               	movlw	32
  1250   000F1C                     clear_0:
  1251   000F1C  6AEE               	clrf	postinc0,c
  1252   000F1E  06E8               	decf	wreg,f,c
  1253   000F20  E1FD               	bnz	clear_0
  1254                           
  1255                           ; Clear objects allocated to COMRAM (41 bytes)
  1256   000F22  EE00  F04B         	lfsr	0,__pbssCOMRAM
  1257   000F26  0E29               	movlw	41
  1258   000F28                     clear_1:
  1259   000F28  6AEE               	clrf	postinc0,c
  1260   000F2A  06E8               	decf	wreg,f,c
  1261   000F2C  E1FD               	bnz	clear_1
  1262   000F2E                     end_of_initialization:
  1263                           	callstack 0
  1264   000F2E                     __end_of__initialization:
  1265                           	callstack 0
  1266   000F2E  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1267   000F30  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1268   000F32  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1269   000F34  6EF8               	movwf	tblptru,c
  1270   000F36  0100               	movlb	0
  1271   000F38  EF9E  F007         	goto	_main	;jump to C main() function
  1272                           
  1273                           	psect	bssCOMRAM
  1274   00004B                     __pbssCOMRAM:
  1275                           	callstack 0
  1276   00004B                     _Timers:
  1277                           	callstack 0
  1278   00004B                     	ds	20
  1279   00005F                     _Tics:
  1280                           	callstack 0
  1281   00005F                     	ds	4
  1282   000063                     _width:
  1283                           	callstack 0
  1284   000063                     	ds	2
  1285   000065                     _prec:
  1286                           	callstack 0
  1287   000065                     	ds	2
  1288   000067                     _flags:
  1289                           	callstack 0
  1290   000067                     	ds	1
  1291   000068                     motorTerminal@state:
  1292                           	callstack 0
  1293   000068                     	ds	1
  1294   000069                     _hashtag_pressed:
  1295                           	callstack 0
  1296   000069                     	ds	1
  1297   00006A                     _ColumnAct:
  1298                           	callstack 0
  1299   00006A                     	ds	1
  1300   00006B                     _RowAct:
  1301                           	callstack 0
  1302   00006B                     	ds	1
  1303   00006C                     _Columns:
  1304                           	callstack 0
  1305   00006C                     	ds	1
  1306   00006D                     _Rows:
  1307                           	callstack 0
  1308   00006D                     	ds	1
  1309   00006E                     motorTeclado@state:
  1310                           	callstack 0
  1311   00006E                     	ds	1
  1312   00006F                     _tecla:
  1313                           	callstack 0
  1314   00006F                     	ds	1
  1315   000070                     _Columnas:
  1316                           	callstack 0
  1317   000070                     	ds	1
  1318   000071                     _Filas:
  1319                           	callstack 0
  1320   000071                     	ds	1
  1321   000072                     _Timer:
  1322                           	callstack 0
  1323   000072                     	ds	1
  1324   000073                     _timer:
  1325                           	callstack 0
  1326   000073                     	ds	1
  1327                           
  1328                           	psect	bssBANK0
  1329   000080                     __pbssBANK0:
  1330                           	callstack 0
  1331   000080                     _dbuf:
  1332                           	callstack 0
  1333   000080                     	ds	32
  1334                           
  1335                           	psect	cstackCOMRAM
  1336   000001                     __pcstackCOMRAM:
  1337                           	callstack 0
  1338   000001                     ??_LowRSI:
  1339                           
  1340                           ; 1 bytes @ 0x0
  1341   000001                     	ds	1
  1342   000002                     ?_Terminal_TXAvailable:
  1343                           	callstack 0
  1344   000002                     ?___awdiv:
  1345                           	callstack 0
  1346   000002                     ?___awmod:
  1347                           	callstack 0
  1348   000002                     ?_TI_GetTics:
  1349                           	callstack 0
  1350   000002                     TI_Init@counter:
  1351                           	callstack 0
  1352   000002                     TI_NewTimer@TimerHandle:
  1353                           	callstack 0
  1354   000002                     TI_ResetTics@TimerHandle:
  1355                           	callstack 0
  1356   000002                     Terminal_SendChar@c:
  1357                           	callstack 0
  1358   000002                     ___awdiv@dividend:
  1359                           	callstack 0
  1360   000002                     ___awmod@dividend:
  1361                           	callstack 0
  1362   000002                     fputc@c:
  1363                           	callstack 0
  1364   000002                     ??_writeColumnas:
  1365   000002                     ??_GetTecla:
  1366   000002                     ??_delay_us:
  1367   000002                     ??_MFRC522_Rd:
  1368   000002                     
  1369                           ; 1 bytes @ 0x1
  1370   000002                     	ds	1
  1371   000003                     writeColumnas@out:
  1372                           	callstack 0
  1373   000003                     MFRC522_Rd@Address:
  1374                           	callstack 0
  1375   000003                     
  1376                           ; 1 bytes @ 0x2
  1377   000003                     	ds	1
  1378   000004                     TI_NewTimer@Comptador:
  1379                           	callstack 0
  1380   000004                     MFRC522_Rd@ucAddr:
  1381                           	callstack 0
  1382   000004                     fputc@fp:
  1383                           	callstack 0
  1384   000004                     ___awdiv@divisor:
  1385                           	callstack 0
  1386   000004                     ___awmod@divisor:
  1387                           	callstack 0
  1388   000004                     GetTecla@keymap:
  1389                           	callstack 0
  1390   000004                     ??_Terminal_TXAvailable:
  1391                           
  1392                           ; 1 bytes @ 0x3
  1393   000004                     	ds	1
  1394   000005                     delay_us@howMany:
  1395                           	callstack 0
  1396   000005                     MFRC522_Rd@ucResult:
  1397                           	callstack 0
  1398   000005                     Terminal_SendString@str:
  1399                           	callstack 0
  1400   000005                     ??_fputc:
  1401                           
  1402                           ; 1 bytes @ 0x4
  1403   000005                     	ds	1
  1404   000006                     delay_us@x:
  1405                           	callstack 0
  1406   000006                     MFRC522_Rd@i:
  1407                           	callstack 0
  1408   000006                     ___awdiv@counter:
  1409                           	callstack 0
  1410   000006                     ___awmod@counter:
  1411                           	callstack 0
  1412   000006                     ??_TI_GetTics:
  1413   000006                     
  1414                           ; 1 bytes @ 0x5
  1415   000006                     	ds	1
  1416   000007                     MFRC522_Wr@value:
  1417                           	callstack 0
  1418   000007                     ___awdiv@sign:
  1419                           	callstack 0
  1420   000007                     ___awmod@sign:
  1421                           	callstack 0
  1422   000007                     
  1423                           ; 1 bytes @ 0x6
  1424   000007                     	ds	1
  1425   000008                     ?_abs:
  1426                           	callstack 0
  1427   000008                     ___awdiv@quotient:
  1428                           	callstack 0
  1429   000008                     abs@a:
  1430                           	callstack 0
  1431   000008                     ??_MFRC522_Wr:
  1432                           
  1433                           ; 1 bytes @ 0x7
  1434   000008                     	ds	1
  1435   000009                     MFRC522_Wr@Address:
  1436                           	callstack 0
  1437                           
  1438                           ; 1 bytes @ 0x8
  1439   000009                     	ds	1
  1440   00000A                     MFRC522_Wr@ucAddr:
  1441                           	callstack 0
  1442   00000A                     TI_GetTics@CopiaTicsActual:
  1443                           	callstack 0
  1444   00000A                     ??_abs:
  1445                           
  1446                           ; 1 bytes @ 0x9
  1447   00000A                     	ds	1
  1448   00000B                     MFRC522_Wr@i:
  1449                           	callstack 0
  1450                           
  1451                           ; 1 bytes @ 0xA
  1452   00000B                     	ds	1
  1453   00000C                     MFRC522_Clear_Bit@mask:
  1454                           	callstack 0
  1455   00000C                     MFRC522_Set_Bit@mask:
  1456                           	callstack 0
  1457   00000C                     vfpfcnvrt@fp:
  1458                           	callstack 0
  1459   00000C                     
  1460                           ; 1 bytes @ 0xB
  1461   00000C                     	ds	1
  1462   00000D                     MFRC522_Set_Bit@addr:
  1463                           	callstack 0
  1464   00000D                     vfpfcnvrt@fmt:
  1465                           	callstack 0
  1466   00000D                     ??_MFRC522_Clear_Bit:
  1467   00000D                     
  1468                           ; 1 bytes @ 0xC
  1469   00000D                     	ds	1
  1470   00000E                     TI_GetTics@TimerHandle:
  1471                           	callstack 0
  1472   00000E                     MFRC522_Clear_Bit@addr:
  1473                           	callstack 0
  1474   00000E                     vfpfcnvrt@ap:
  1475                           	callstack 0
  1476   00000E                     
  1477                           ; 1 bytes @ 0xD
  1478   00000E                     	ds	1
  1479   00000F                     ??_vfpfcnvrt:
  1480                           
  1481                           ; 1 bytes @ 0xE
  1482   00000F                     	ds	1
  1483   000010                     GetTecla@columna:
  1484                           	callstack 0
  1485   000010                     vfpfcnvrt@done:
  1486                           	callstack 0
  1487                           
  1488                           ; 1 bytes @ 0xF
  1489   000010                     	ds	1
  1490   000011                     GetTecla@fila:
  1491                           	callstack 0
  1492   000011                     vfpfcnvrt@cp:
  1493                           	callstack 0
  1494                           
  1495                           ; 1 bytes @ 0x10
  1496   000011                     	ds	1
  1497   000012                     vfpfcnvrt@convarg:
  1498                           	callstack 0
  1499                           
  1500                           ; 4 bytes @ 0x11
  1501   000012                     	ds	4
  1502   000016                     vfpfcnvrt@c:
  1503                           	callstack 0
  1504                           
  1505                           ; 1 bytes @ 0x15
  1506   000016                     	ds	1
  1507   000017                     ?_vfprintf:
  1508                           	callstack 0
  1509   000017                     vfprintf@fp:
  1510                           	callstack 0
  1511                           
  1512                           ; 1 bytes @ 0x16
  1513   000017                     	ds	1
  1514   000018                     vfprintf@fmt:
  1515                           	callstack 0
  1516                           
  1517                           ; 1 bytes @ 0x17
  1518   000018                     	ds	1
  1519   000019                     vfprintf@ap:
  1520                           	callstack 0
  1521                           
  1522                           ; 1 bytes @ 0x18
  1523   000019                     	ds	1
  1524   00001A                     vfprintf@cfmt:
  1525                           	callstack 0
  1526   00001A                     
  1527                           ; 1 bytes @ 0x19
  1528   00001A                     	ds	1
  1529   00001B                     ?_sprintf:
  1530                           	callstack 0
  1531   00001B                     sprintf@s:
  1532                           	callstack 0
  1533                           
  1534                           ; 1 bytes @ 0x1A
  1535   00001B                     	ds	1
  1536   00001C                     sprintf@fmt:
  1537                           	callstack 0
  1538                           
  1539                           ; 1 bytes @ 0x1B
  1540   00001C                     	ds	3
  1541   00001F                     sprintf@ap:
  1542                           	callstack 0
  1543   00001F                     
  1544                           ; 1 bytes @ 0x1E
  1545   00001F                     	ds	1
  1546   000020                     sprintf@f:
  1547                           	callstack 0
  1548                           
  1549                           ; 11 bytes @ 0x1F
  1550   000020                     	ds	11
  1551   00002B                     showTecla@buffer:
  1552                           	callstack 0
  1553   00002B                     
  1554                           ; 1 bytes @ 0x2A
  1555   00002B                     	ds	32
  1556   00004B                     
  1557                           ; 1 bytes @ 0x4A
  1558 ;;
  1559 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1560 ;;
  1561 ;; *************** function _main *****************
  1562 ;; Defined at:
  1563 ;;		line 36 in file "main.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;		None
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1
  1577 ;;      Params:         0       0       0
  1578 ;;      Locals:         0       0       0
  1579 ;;      Temps:          0       0       0
  1580 ;;      Totals:         0       0       0
  1581 ;;Total ram usage:        0 bytes
  1582 ;; Hardware stack levels required when called: 10
  1583 ;; This function calls:
  1584 ;;		_TI_Init
  1585 ;;		_Terminal_Init
  1586 ;;		_initRFID
  1587 ;;		_initTeclado
  1588 ;;		_motorTeclado
  1589 ;;		_motorTerminal
  1590 ;; This function is called by:
  1591 ;;		Startup code after reset
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text0
  1596   000F3C                     __ptext0:
  1597                           	callstack 0
  1598   000F3C                     _main:
  1599                           	callstack 21
  1600   000F3C                     
  1601                           ;main.c: 37:  LATC = key;
  1602   000F3C  EC5C  F007         	call	_TI_Init	;wreg free
  1603                           
  1604                           ;main.c: 38: }
  1605   000F40  EC0D  F008         	call	_initTeclado	;wreg free
  1606   000F44  EC3C  F008         	call	_initRFID	;wreg free
  1607   000F48  EC21  F008         	call	_Terminal_Init	;wreg free
  1608   000F4C  8EF2               	bsf	242,7,c	;volatile
  1609   000F4E  8CF2               	bsf	242,6,c	;volatile
  1610   000F50                     l2983:
  1611   000F50  EC73  F001         	call	_motorTeclado	;wreg free
  1612   000F54  EC5A  F003         	call	_motorTerminal	;wreg free
  1613   000F58  EFA8  F007         	goto	l2983
  1614   000F5C  EF13  F000         	goto	start
  1615   000F60                     __end_of_main:
  1616                           	callstack 0
  1617                           
  1618 ;; *************** function _motorTerminal *****************
  1619 ;; Defined at:
  1620 ;;		line 77 in file "TAD_TERMINAL.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1
  1634 ;;      Params:         0       0       0
  1635 ;;      Locals:         0       0       0
  1636 ;;      Temps:          0       0       0
  1637 ;;      Totals:         0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used: 1
  1640 ;; Hardware stack levels required when called: 6
  1641 ;; This function calls:
  1642 ;;		_Terminal_RXAvailable
  1643 ;;		_Terminal_ReceiveChar
  1644 ;;		_Terminal_SendString
  1645 ;;		_showMenu
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text1
  1652   0006B4                     __ptext1:
  1653                           	callstack 0
  1654   0006B4                     _motorTerminal:
  1655                           	callstack 24
  1656   0006B4                     
  1657                           ;TAD_TERMINAL.c: 78:  static char state = 0;;TAD_TERMINAL.c: 80:  switch(state) {
  1658   0006B4  EFB9  F003         	goto	l2909
  1659   0006B8                     l2875:
  1660                           
  1661                           ;TAD_TERMINAL.c: 82:    if (Terminal_ReceiveChar() == 0x1B) {
  1662   0006B8  EC4C  F008         	call	_Terminal_ReceiveChar	;wreg free
  1663   0006BC  0A1B               	xorlw	27
  1664   0006BE  A4D8               	btfss	status,2,c
  1665   0006C0  EF64  F003         	goto	u2351
  1666   0006C4  EF66  F003         	goto	u2350
  1667   0006C8                     u2351:
  1668   0006C8  EF6A  F003         	goto	l2881
  1669   0006CC                     u2350:
  1670   0006CC                     
  1671                           ;TAD_TERMINAL.c: 83:     showMenu();
  1672   0006CC  ECCD  F005         	call	_showMenu	;wreg free
  1673   0006D0                     
  1674                           ;TAD_TERMINAL.c: 84:     state = 1;
  1675   0006D0  0E01               	movlw	1
  1676   0006D2  6E68               	movwf	motorTerminal@state^0,c
  1677   0006D4                     l2881:
  1678                           
  1679                           ;TAD_TERMINAL.c: 86:    if (hashtag_pressed == 1){
  1680   0006D4  0469               	decf	_hashtag_pressed^0,w,c
  1681   0006D6  A4D8               	btfss	status,2,c
  1682   0006D8  EF70  F003         	goto	u2361
  1683   0006DC  EF72  F003         	goto	u2360
  1684   0006E0                     u2361:
  1685   0006E0  EFC4  F003         	goto	l498
  1686   0006E4                     u2360:
  1687   0006E4                     
  1688                           ;TAD_TERMINAL.c: 87:     showMenu();
  1689   0006E4  ECCD  F005         	call	_showMenu	;wreg free
  1690   0006E8                     
  1691                           ;TAD_TERMINAL.c: 88:     state = 1;
  1692   0006E8  0E01               	movlw	1
  1693   0006EA  6E68               	movwf	motorTerminal@state^0,c
  1694   0006EC  EFC4  F003         	goto	l498
  1695   0006F0                     l2887:
  1696                           
  1697                           ;TAD_TERMINAL.c: 92:    if(Terminal_RXAvailable() == 1){
  1698   0006F0  EC03  F008         	call	_Terminal_RXAvailable	;wreg free
  1699   0006F4  06E8               	decf	wreg,f,c
  1700   0006F6  A4D8               	btfss	status,2,c
  1701   0006F8  EF80  F003         	goto	u2371
  1702   0006FC  EF82  F003         	goto	u2370
  1703   000700                     u2371:
  1704   000700  EFC4  F003         	goto	l498
  1705   000704                     u2370:
  1706   000704                     
  1707                           ;TAD_TERMINAL.c: 93:     if (Terminal_ReceiveChar() == '1') {
  1708   000704  EC4C  F008         	call	_Terminal_ReceiveChar	;wreg free
  1709   000708  0A31               	xorlw	49
  1710   00070A  A4D8               	btfss	status,2,c
  1711   00070C  EF8A  F003         	goto	u2381
  1712   000710  EF8C  F003         	goto	u2380
  1713   000714                     u2381:
  1714   000714  EF97  F003         	goto	l2895
  1715   000718                     u2380:
  1716   000718                     
  1717                           ;TAD_TERMINAL.c: 94:      Terminal_SendString("Has pulsado 1");
  1718   000718  0EBE               	movlw	low STR_12
  1719   00071A  6E05               	movwf	Terminal_SendString@str^0,c
  1720   00071C  5005               	movf	Terminal_SendString@str^0,w,c
  1721   00071E  A4D8               	btfss	status,2,c
  1722   000720  0E02               	movlw	high __smallconst
  1723   000722  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1724   000724  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1725   000728                     l2893:
  1726                           
  1727                           ;TAD_TERMINAL.c: 96:      state = 0;
  1728   000728  6A68               	clrf	motorTerminal@state^0,c
  1729                           
  1730                           ;TAD_TERMINAL.c: 97:     }
  1731   00072A  EFC4  F003         	goto	l498
  1732   00072E                     l2895:
  1733   00072E  EC4C  F008         	call	_Terminal_ReceiveChar	;wreg free
  1734   000732  0A32               	xorlw	50
  1735   000734  A4D8               	btfss	status,2,c
  1736   000736  EF9F  F003         	goto	u2391
  1737   00073A  EFA1  F003         	goto	u2390
  1738   00073E                     u2391:
  1739   00073E  EFA3  F003         	goto	l2899
  1740   000742                     u2390:
  1741   000742  EF94  F003         	goto	l2893
  1742   000746                     l2899:
  1743   000746  EC4C  F008         	call	_Terminal_ReceiveChar	;wreg free
  1744   00074A  0A33               	xorlw	51
  1745   00074C  A4D8               	btfss	status,2,c
  1746   00074E  EFAB  F003         	goto	u2401
  1747   000752  EFAD  F003         	goto	u2400
  1748   000756                     u2401:
  1749   000756  EFAF  F003         	goto	l2903
  1750   00075A                     u2400:
  1751   00075A  EF94  F003         	goto	l2893
  1752   00075E                     l2903:
  1753                           
  1754                           ;TAD_TERMINAL.c: 107:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  1755   00075E  0E0D               	movlw	low STR_13
  1756   000760  6E05               	movwf	Terminal_SendString@str^0,c
  1757   000762  5005               	movf	Terminal_SendString@str^0,w,c
  1758   000764  A4D8               	btfss	status,2,c
  1759   000766  0E02               	movlw	high __smallconst
  1760   000768  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1761   00076A  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1762   00076E  EF94  F003         	goto	l2893
  1763   000772                     l2909:
  1764   000772  5068               	movf	motorTerminal@state^0,w,c
  1765                           
  1766                           ; Switch size 1, requested type "simple"
  1767                           ; Number of cases is 2, Range of values is 0 to 1
  1768                           ; switch strategies available:
  1769                           ; Name         Instructions Cycles
  1770                           ; simple_byte            7     4 (average)
  1771                           ;	Chosen strategy is simple_byte
  1772   000774  0A00               	xorlw	0	; case 0
  1773   000776  B4D8               	btfsc	status,2,c
  1774   000778  EF5C  F003         	goto	l2875
  1775   00077C  0A01               	xorlw	1	; case 1
  1776   00077E  B4D8               	btfsc	status,2,c
  1777   000780  EF78  F003         	goto	l2887
  1778   000784  EFC4  F003         	goto	l498
  1779   000788                     l498:
  1780   000788  0012               	return		;funcret
  1781   00078A                     __end_of_motorTerminal:
  1782                           	callstack 0
  1783                           
  1784 ;; *************** function _showMenu *****************
  1785 ;; Defined at:
  1786 ;;		line 61 in file "TAD_TERMINAL.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1
  1800 ;;      Params:         0       0       0
  1801 ;;      Locals:         0       0       0
  1802 ;;      Temps:          0       0       0
  1803 ;;      Totals:         0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used: 1
  1806 ;; Hardware stack levels required when called: 5
  1807 ;; This function calls:
  1808 ;;		_Terminal_SendString
  1809 ;; This function is called by:
  1810 ;;		_motorTerminal
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text2
  1815   000B9A                     __ptext2:
  1816                           	callstack 0
  1817   000B9A                     _showMenu:
  1818                           	callstack 24
  1819   000B9A                     
  1820                           ;TAD_TERMINAL.c: 62:  Terminal_SendString("---------------\r\n");
  1821   000B9A  0E9A               	movlw	low STR_4
  1822   000B9C  6E05               	movwf	Terminal_SendString@str^0,c
  1823   000B9E  5005               	movf	Terminal_SendString@str^0,w,c
  1824   000BA0  A4D8               	btfss	status,2,c
  1825   000BA2  0E02               	movlw	high __smallconst
  1826   000BA4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1827   000BA6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1828                           
  1829                           ;TAD_TERMINAL.c: 63:  Terminal_SendString("MenÃº principal\r\n");
  1830   000BAA  0EAC               	movlw	low STR_5
  1831   000BAC  6E05               	movwf	Terminal_SendString@str^0,c
  1832   000BAE  5005               	movf	Terminal_SendString@str^0,w,c
  1833   000BB0  A4D8               	btfss	status,2,c
  1834   000BB2  0E02               	movlw	high __smallconst
  1835   000BB4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1836   000BB6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1837                           
  1838                           ;TAD_TERMINAL.c: 64:  Terminal_SendString("---------------\r\n");
  1839   000BBA  0E9A               	movlw	low STR_4
  1840   000BBC  6E05               	movwf	Terminal_SendString@str^0,c
  1841   000BBE  5005               	movf	Terminal_SendString@str^0,w,c
  1842   000BC0  A4D8               	btfss	status,2,c
  1843   000BC2  0E02               	movlw	high __smallconst
  1844   000BC4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1845   000BC6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1846                           
  1847                           ;TAD_TERMINAL.c: 65:  Terminal_SendString("Tria una opciÃ³:\r\n");
  1848   000BCA  0E87               	movlw	low STR_7
  1849   000BCC  6E05               	movwf	Terminal_SendString@str^0,c
  1850   000BCE  5005               	movf	Terminal_SendString@str^0,w,c
  1851   000BD0  A4D8               	btfss	status,2,c
  1852   000BD2  0E02               	movlw	high __smallconst
  1853   000BD4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1854   000BD6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1855                           
  1856                           ;TAD_TERMINAL.c: 66:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  1857   000BDA  0E6C               	movlw	low STR_8
  1858   000BDC  6E05               	movwf	Terminal_SendString@str^0,c
  1859   000BDE  5005               	movf	Terminal_SendString@str^0,w,c
  1860   000BE0  A4D8               	btfss	status,2,c
  1861   000BE2  0E02               	movlw	high __smallconst
  1862   000BE4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1863   000BE6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1864                           
  1865                           ;TAD_TERMINAL.c: 67:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  1866   000BEA  0E4F               	movlw	low STR_9
  1867   000BEC  6E05               	movwf	Terminal_SendString@str^0,c
  1868   000BEE  5005               	movf	Terminal_SendString@str^0,w,c
  1869   000BF0  A4D8               	btfss	status,2,c
  1870   000BF2  0E02               	movlw	high __smallconst
  1871   000BF4  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1872   000BF6  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1873                           
  1874                           ;TAD_TERMINAL.c: 68:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  1875   000BFA  0E2E               	movlw	low STR_10
  1876   000BFC  6E05               	movwf	Terminal_SendString@str^0,c
  1877   000BFE  5005               	movf	Terminal_SendString@str^0,w,c
  1878   000C00  A4D8               	btfss	status,2,c
  1879   000C02  0E02               	movlw	high __smallconst
  1880   000C04  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1881   000C06  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1882                           
  1883                           ;TAD_TERMINAL.c: 69:  Terminal_SendString("OpciÃ³: ");
  1884   000C0A  0ED6               	movlw	low STR_11
  1885   000C0C  6E05               	movwf	Terminal_SendString@str^0,c
  1886   000C0E  5005               	movf	Terminal_SendString@str^0,w,c
  1887   000C10  A4D8               	btfss	status,2,c
  1888   000C12  0E02               	movlw	high __smallconst
  1889   000C14  6E06               	movwf	(Terminal_SendString@str+1)^0,c
  1890   000C16  EC0E  F006         	call	_Terminal_SendString	;wreg free
  1891   000C1A  0012               	return		;funcret
  1892   000C1C                     __end_of_showMenu:
  1893                           	callstack 0
  1894                           
  1895 ;; *************** function _Terminal_ReceiveChar *****************
  1896 ;; Defined at:
  1897 ;;		line 49 in file "TAD_TERMINAL.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      unsigned char 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1
  1911 ;;      Params:         0       0       0
  1912 ;;      Locals:         0       0       0
  1913 ;;      Temps:          0       0       0
  1914 ;;      Totals:         0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used: 1
  1917 ;; Hardware stack levels required when called: 3
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_motorTerminal
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text3
  1926   001098                     __ptext3:
  1927                           	callstack 0
  1928   001098                     _Terminal_ReceiveChar:
  1929                           	callstack 26
  1930   001098                     
  1931                           ;TAD_TERMINAL.c: 50:  return RCREG;
  1932   001098  50AE               	movf	174,w,c	;volatile
  1933   00109A  0012               	return		;funcret
  1934   00109C                     __end_of_Terminal_ReceiveChar:
  1935                           	callstack 0
  1936                           
  1937 ;; *************** function _Terminal_RXAvailable *****************
  1938 ;; Defined at:
  1939 ;;		line 39 in file "TAD_TERMINAL.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      unsigned char 
  1946 ;; Registers used:
  1947 ;;		wreg
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1
  1953 ;;      Params:         0       0       0
  1954 ;;      Locals:         0       0       0
  1955 ;;      Temps:          0       0       0
  1956 ;;      Totals:         0       0       0
  1957 ;;Total ram usage:        0 bytes
  1958 ;; Hardware stack levels used: 1
  1959 ;; Hardware stack levels required when called: 3
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_motorTerminal
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text4
  1968   001006                     __ptext4:
  1969                           	callstack 0
  1970   001006                     _Terminal_RXAvailable:
  1971                           	callstack 26
  1972   001006                     
  1973                           ;TAD_TERMINAL.c: 40:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  1974   001006  BA9E               	btfsc	158,5,c	;volatile
  1975   001008  EF08  F008         	goto	u771
  1976   00100C  EF0B  F008         	goto	u770
  1977   001010                     u771:
  1978   001010  0E01               	movlw	1
  1979   001012  EF0C  F008         	goto	u776
  1980   001016                     u770:
  1981   001016  0E00               	movlw	0
  1982   001018                     u776:
  1983   001018  0012               	return		;funcret
  1984   00101A                     __end_of_Terminal_RXAvailable:
  1985                           	callstack 0
  1986                           
  1987 ;; *************** function _motorTeclado *****************
  1988 ;; Defined at:
  1989 ;;		line 31 in file "TAD_TECLADO.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1
  2003 ;;      Params:         0       0       0
  2004 ;;      Locals:         0       0       0
  2005 ;;      Temps:          0       0       0
  2006 ;;      Totals:         0       0       0
  2007 ;;Total ram usage:        0 bytes
  2008 ;; Hardware stack levels used: 1
  2009 ;; Hardware stack levels required when called: 9
  2010 ;; This function calls:
  2011 ;;		_GetTecla
  2012 ;;		_ReadFilas
  2013 ;;		_TI_GetTics
  2014 ;;		_TI_ResetTics
  2015 ;;		_showTecla
  2016 ;;		_writeColumnas
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text5
  2023   0002E6                     __ptext5:
  2024                           	callstack 0
  2025   0002E6                     _motorTeclado:
  2026                           	callstack 21
  2027   0002E6                     
  2028                           ;TAD_TECLADO.c: 32:  static char state = 0;;TAD_TECLADO.c: 33:  Filas = ReadFilas();
  2029   0002E6  EC49  F008         	call	_ReadFilas	;wreg free
  2030   0002EA  6E71               	movwf	_Filas^0,c
  2031                           
  2032                           ;TAD_TECLADO.c: 34:  switch(state) {
  2033   0002EC  EF62  F002         	goto	l2871
  2034   0002F0                     l2777:
  2035                           
  2036                           ;TAD_TECLADO.c: 36:    if (Filas == 0x0) {
  2037   0002F0  5071               	movf	_Filas^0,w,c
  2038   0002F2  A4D8               	btfss	status,2,c
  2039   0002F4  EF7E  F001         	goto	u2181
  2040   0002F8  EF80  F001         	goto	u2180
  2041   0002FC                     u2181:
  2042   0002FC  EF88  F001         	goto	l2785
  2043   000300                     u2180:
  2044   000300                     
  2045                           ;TAD_TECLADO.c: 37:     Columnas = (0x01);
  2046   000300  0E01               	movlw	1
  2047   000302  6E70               	movwf	_Columnas^0,c
  2048   000304                     
  2049                           ;TAD_TECLADO.c: 38:     writeColumnas();
  2050   000304  EC48  F006         	call	_writeColumnas	;wreg free
  2051   000308                     
  2052                           ;TAD_TECLADO.c: 39:     state = 1;
  2053   000308  0E01               	movlw	1
  2054   00030A  6E6E               	movwf	motorTeclado@state^0,c
  2055                           
  2056                           ;TAD_TECLADO.c: 40:    }
  2057   00030C  EF7D  F002         	goto	l151
  2058   000310                     l2785:
  2059   000310  5071               	movf	_Filas^0,w,c
  2060   000312  B4D8               	btfsc	status,2,c
  2061   000314  EF8E  F001         	goto	u2191
  2062   000318  EF90  F001         	goto	u2190
  2063   00031C                     u2191:
  2064   00031C  EF7D  F002         	goto	l151
  2065   000320                     u2190:
  2066   000320                     
  2067                           ;TAD_TECLADO.c: 42:     TI_ResetTics(timer);
  2068   000320  5073               	movf	_timer^0,w,c
  2069   000322  ECB0  F007         	call	_TI_ResetTics
  2070   000326                     l2789:
  2071                           
  2072                           ;TAD_TECLADO.c: 43:     state = 3;
  2073   000326  0E03               	movlw	3
  2074   000328  6E6E               	movwf	motorTeclado@state^0,c
  2075   00032A  EF7D  F002         	goto	l151
  2076   00032E                     l2791:
  2077                           
  2078                           ;TAD_TECLADO.c: 47:    if (Filas == 0x0) {
  2079   00032E  5071               	movf	_Filas^0,w,c
  2080   000330  A4D8               	btfss	status,2,c
  2081   000332  EF9D  F001         	goto	u2201
  2082   000336  EF9F  F001         	goto	u2200
  2083   00033A                     u2201:
  2084   00033A  EFA7  F001         	goto	l2799
  2085   00033E                     u2200:
  2086   00033E                     
  2087                           ;TAD_TECLADO.c: 48:     Columnas = (0x02);
  2088   00033E  0E02               	movlw	2
  2089   000340  6E70               	movwf	_Columnas^0,c
  2090   000342                     
  2091                           ;TAD_TECLADO.c: 49:     writeColumnas();
  2092   000342  EC48  F006         	call	_writeColumnas	;wreg free
  2093   000346                     
  2094                           ;TAD_TECLADO.c: 50:     state = 2;
  2095   000346  0E02               	movlw	2
  2096   000348  6E6E               	movwf	motorTeclado@state^0,c
  2097                           
  2098                           ;TAD_TECLADO.c: 51:    }
  2099   00034A  EF7D  F002         	goto	l151
  2100   00034E                     l2799:
  2101   00034E  5071               	movf	_Filas^0,w,c
  2102   000350  B4D8               	btfsc	status,2,c
  2103   000352  EFAD  F001         	goto	u2211
  2104   000356  EFAF  F001         	goto	u2210
  2105   00035A                     u2211:
  2106   00035A  EF7D  F002         	goto	l151
  2107   00035E                     u2210:
  2108   00035E                     
  2109                           ;TAD_TECLADO.c: 53:     TI_ResetTics(timer);
  2110   00035E  5073               	movf	_timer^0,w,c
  2111   000360  ECB0  F007         	call	_TI_ResetTics
  2112   000364  EF93  F001         	goto	l2789
  2113   000368                     l2805:
  2114                           
  2115                           ;TAD_TECLADO.c: 58:    if (Filas != 0x0) {
  2116   000368  5071               	movf	_Filas^0,w,c
  2117   00036A  B4D8               	btfsc	status,2,c
  2118   00036C  EFBA  F001         	goto	u2221
  2119   000370  EFBC  F001         	goto	u2220
  2120   000374                     u2221:
  2121   000374  EFC1  F001         	goto	l2811
  2122   000378                     u2220:
  2123   000378                     
  2124                           ;TAD_TECLADO.c: 59:     TI_ResetTics(timer);
  2125   000378  5073               	movf	_timer^0,w,c
  2126   00037A  ECB0  F007         	call	_TI_ResetTics
  2127   00037E  EF93  F001         	goto	l2789
  2128   000382                     l2811:
  2129   000382  5071               	movf	_Filas^0,w,c
  2130   000384  A4D8               	btfss	status,2,c
  2131   000386  EFC7  F001         	goto	u2231
  2132   00038A  EFC9  F001         	goto	u2230
  2133   00038E                     u2231:
  2134   00038E  EF7D  F002         	goto	l151
  2135   000392                     u2230:
  2136   000392                     l2813:
  2137                           
  2138                           ;TAD_TECLADO.c: 63:     Columnas = (0x04);
  2139   000392  0E04               	movlw	4
  2140   000394  6E70               	movwf	_Columnas^0,c
  2141   000396                     
  2142                           ;TAD_TECLADO.c: 64:     writeColumnas();
  2143   000396  EC48  F006         	call	_writeColumnas	;wreg free
  2144   00039A                     l2817:
  2145                           
  2146                           ;TAD_TECLADO.c: 65:     state = 0;
  2147   00039A  6A6E               	clrf	motorTeclado@state^0,c
  2148   00039C  EF7D  F002         	goto	l151
  2149   0003A0                     l2819:
  2150                           
  2151                           ;TAD_TECLADO.c: 69:    tecla = GetTecla ();
  2152   0003A0  ECC5  F003         	call	_GetTecla	;wreg free
  2153   0003A4  6E6F               	movwf	_tecla^0,c
  2154   0003A6                     
  2155                           ;TAD_TECLADO.c: 70:    if (Filas == 0x0) {
  2156   0003A6  5071               	movf	_Filas^0,w,c
  2157   0003A8  A4D8               	btfss	status,2,c
  2158   0003AA  EFD9  F001         	goto	u2241
  2159   0003AE  EFDB  F001         	goto	u2240
  2160   0003B2                     u2241:
  2161   0003B2  EFDD  F001         	goto	l2829
  2162   0003B6                     u2240:
  2163   0003B6  EFC9  F001         	goto	l2813
  2164   0003BA                     l2829:
  2165   0003BA  5071               	movf	_Filas^0,w,c
  2166   0003BC  B4D8               	btfsc	status,2,c
  2167   0003BE  EFE3  F001         	goto	u2251
  2168   0003C2  EFE5  F001         	goto	u2250
  2169   0003C6                     u2251:
  2170   0003C6  EF06  F002         	goto	l2841
  2171   0003CA                     u2250:
  2172   0003CA  5073               	movf	_timer^0,w,c
  2173   0003CC  ECC8  F006         	call	_TI_GetTics
  2174   0003D0  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2175   0003D2  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2176   0003D4  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  2177   0003D6  E109               	bnz	u2260
  2178   0003D8  0E09               	movlw	9
  2179   0003DA  5C02               	subwf	?_TI_GetTics^0,w,c
  2180   0003DC  A0D8               	btfss	status,0,c
  2181   0003DE  EFF3  F001         	goto	u2261
  2182   0003E2  EFF5  F001         	goto	u2260
  2183   0003E6                     u2261:
  2184   0003E6  EF06  F002         	goto	l2841
  2185   0003EA                     u2260:
  2186   0003EA  0E0B               	movlw	11
  2187   0003EC  186F               	xorwf	_tecla^0,w,c
  2188   0003EE  B4D8               	btfsc	status,2,c
  2189   0003F0  EFFC  F001         	goto	u2271
  2190   0003F4  EFFE  F001         	goto	u2270
  2191   0003F8                     u2271:
  2192   0003F8  EF06  F002         	goto	l2841
  2193   0003FC                     u2270:
  2194   0003FC                     
  2195                           ;TAD_TECLADO.c: 76:     LATD = tecla;
  2196   0003FC  C06F  FF8C         	movff	_tecla,3980	;volatile
  2197   000400                     
  2198                           ;TAD_TECLADO.c: 77:     showTecla();
  2199   000400  ECC2  F007         	call	_showTecla	;wreg free
  2200   000404                     l2839:
  2201                           
  2202                           ;TAD_TECLADO.c: 78:     state = 5;
  2203   000404  0E05               	movlw	5
  2204   000406  6E6E               	movwf	motorTeclado@state^0,c
  2205                           
  2206                           ;TAD_TECLADO.c: 79:    }
  2207   000408  EF7D  F002         	goto	l151
  2208   00040C                     l2841:
  2209   00040C  5071               	movf	_Filas^0,w,c
  2210   00040E  B4D8               	btfsc	status,2,c
  2211   000410  EF0C  F002         	goto	u2281
  2212   000414  EF0E  F002         	goto	u2280
  2213   000418                     u2281:
  2214   000418  EF7D  F002         	goto	l151
  2215   00041C                     u2280:
  2216   00041C  5073               	movf	_timer^0,w,c
  2217   00041E  ECC8  F006         	call	_TI_GetTics
  2218   000422  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2219   000424  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2220   000426  1003               	iorwf	(?_TI_GetTics+1)^0,w,c
  2221   000428  E109               	bnz	u2290
  2222   00042A  0E09               	movlw	9
  2223   00042C  5C02               	subwf	?_TI_GetTics^0,w,c
  2224   00042E  A0D8               	btfss	status,0,c
  2225   000430  EF1C  F002         	goto	u2291
  2226   000434  EF1E  F002         	goto	u2290
  2227   000438                     u2291:
  2228   000438  EF7D  F002         	goto	l151
  2229   00043C                     u2290:
  2230   00043C  0E0B               	movlw	11
  2231   00043E  186F               	xorwf	_tecla^0,w,c
  2232   000440  A4D8               	btfss	status,2,c
  2233   000442  EF25  F002         	goto	u2301
  2234   000446  EF27  F002         	goto	u2300
  2235   00044A                     u2301:
  2236   00044A  EF7D  F002         	goto	l151
  2237   00044E                     u2300:
  2238   00044E                     
  2239                           ;TAD_TECLADO.c: 81:     TI_ResetTics(timer);
  2240   00044E  5073               	movf	_timer^0,w,c
  2241   000450  ECB0  F007         	call	_TI_ResetTics
  2242   000454                     
  2243                           ;TAD_TECLADO.c: 82:     state = 4;
  2244   000454  0E04               	movlw	4
  2245   000456  6E6E               	movwf	motorTeclado@state^0,c
  2246   000458  EF7D  F002         	goto	l151
  2247   00045C                     l2851:
  2248                           
  2249                           ;TAD_TECLADO.c: 86:    if (Filas == 0x0) {
  2250   00045C  5071               	movf	_Filas^0,w,c
  2251   00045E  A4D8               	btfss	status,2,c
  2252   000460  EF34  F002         	goto	u2311
  2253   000464  EF36  F002         	goto	u2310
  2254   000468                     u2311:
  2255   000468  EF38  F002         	goto	l2855
  2256   00046C                     u2310:
  2257   00046C  EFCD  F001         	goto	l2817
  2258   000470                     l2855:
  2259   000470  5071               	movf	_Filas^0,w,c
  2260   000472  B4D8               	btfsc	status,2,c
  2261   000474  EF3E  F002         	goto	u2321
  2262   000478  EF40  F002         	goto	u2320
  2263   00047C                     u2321:
  2264   00047C  EF7D  F002         	goto	l151
  2265   000480                     u2320:
  2266   000480  5073               	movf	_timer^0,w,c
  2267   000482  ECC8  F006         	call	_TI_GetTics
  2268   000486  5005               	movf	(?_TI_GetTics+3)^0,w,c
  2269   000488  1004               	iorwf	(?_TI_GetTics+2)^0,w,c
  2270   00048A  E10B               	bnz	u2330
  2271   00048C  0EDD               	movlw	221
  2272   00048E  5C02               	subwf	?_TI_GetTics^0,w,c
  2273   000490  0E05               	movlw	5
  2274   000492  5803               	subwfb	(?_TI_GetTics+1)^0,w,c
  2275   000494  A0D8               	btfss	status,0,c
  2276   000496  EF4F  F002         	goto	u2331
  2277   00049A  EF51  F002         	goto	u2330
  2278   00049E                     u2331:
  2279   00049E  EF7D  F002         	goto	l151
  2280   0004A2                     u2330:
  2281   0004A2  EF02  F002         	goto	l2839
  2282   0004A6                     l2861:
  2283                           
  2284                           ;TAD_TECLADO.c: 95:    if (Filas == 0x0) {
  2285   0004A6  5071               	movf	_Filas^0,w,c
  2286   0004A8  A4D8               	btfss	status,2,c
  2287   0004AA  EF59  F002         	goto	u2341
  2288   0004AE  EF5B  F002         	goto	u2340
  2289   0004B2                     u2341:
  2290   0004B2  EF7D  F002         	goto	l151
  2291   0004B6                     u2340:
  2292   0004B6                     
  2293                           ;TAD_TECLADO.c: 96:     state = 0;
  2294   0004B6  6A6E               	clrf	motorTeclado@state^0,c
  2295   0004B8                     
  2296                           ;TAD_TECLADO.c: 97:     Columnas = (0x04);
  2297   0004B8  0E04               	movlw	4
  2298   0004BA  6E70               	movwf	_Columnas^0,c
  2299   0004BC                     
  2300                           ;TAD_TECLADO.c: 98:     writeColumnas();
  2301   0004BC  EC48  F006         	call	_writeColumnas	;wreg free
  2302   0004C0  EF7D  F002         	goto	l151
  2303   0004C4                     l2871:
  2304   0004C4  506E               	movf	motorTeclado@state^0,w,c
  2305                           
  2306                           ; Switch size 1, requested type "simple"
  2307                           ; Number of cases is 6, Range of values is 0 to 5
  2308                           ; switch strategies available:
  2309                           ; Name         Instructions Cycles
  2310                           ; simple_byte           19    10 (average)
  2311                           ;	Chosen strategy is simple_byte
  2312   0004C6  0A00               	xorlw	0	; case 0
  2313   0004C8  B4D8               	btfsc	status,2,c
  2314   0004CA  EF78  F001         	goto	l2777
  2315   0004CE  0A01               	xorlw	1	; case 1
  2316   0004D0  B4D8               	btfsc	status,2,c
  2317   0004D2  EF97  F001         	goto	l2791
  2318   0004D6  0A03               	xorlw	3	; case 2
  2319   0004D8  B4D8               	btfsc	status,2,c
  2320   0004DA  EFB4  F001         	goto	l2805
  2321   0004DE  0A01               	xorlw	1	; case 3
  2322   0004E0  B4D8               	btfsc	status,2,c
  2323   0004E2  EFD0  F001         	goto	l2819
  2324   0004E6  0A07               	xorlw	7	; case 4
  2325   0004E8  B4D8               	btfsc	status,2,c
  2326   0004EA  EF2E  F002         	goto	l2851
  2327   0004EE  0A01               	xorlw	1	; case 5
  2328   0004F0  B4D8               	btfsc	status,2,c
  2329   0004F2  EF53  F002         	goto	l2861
  2330   0004F6  EF7D  F002         	goto	l151
  2331   0004FA                     l151:
  2332   0004FA  0012               	return		;funcret
  2333   0004FC                     __end_of_motorTeclado:
  2334                           	callstack 0
  2335                           
  2336 ;; *************** function _writeColumnas *****************
  2337 ;; Defined at:
  2338 ;;		line 108 in file "TAD_TECLADO.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;  out             1    2[COMRAM] unsigned char 
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, status,2, status,0
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0   BANK1
  2352 ;;      Params:         0       0       0
  2353 ;;      Locals:         1       0       0
  2354 ;;      Temps:          1       0       0
  2355 ;;      Totals:         2       0       0
  2356 ;;Total ram usage:        2 bytes
  2357 ;; Hardware stack levels used: 1
  2358 ;; Hardware stack levels required when called: 3
  2359 ;; This function calls:
  2360 ;;		Nothing
  2361 ;; This function is called by:
  2362 ;;		_motorTeclado
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text6
  2367   000C90                     __ptext6:
  2368                           	callstack 0
  2369   000C90                     _writeColumnas:
  2370                           	callstack 26
  2371   000C90                     
  2372                           ;TAD_TECLADO.c: 109:  unsigned char out = 0x00;
  2373   000C90  6A03               	clrf	writeColumnas@out^0,c
  2374   000C92                     
  2375                           ;TAD_TECLADO.c: 110:     if (Columnas == 0x01)
  2376   000C92  0470               	decf	_Columnas^0,w,c
  2377   000C94  A4D8               	btfss	status,2,c
  2378   000C96  EF4F  F006         	goto	u611
  2379   000C9A  EF51  F006         	goto	u610
  2380   000C9E                     u611:
  2381   000C9E  EF55  F006         	goto	l1673
  2382   000CA2                     u610:
  2383   000CA2                     
  2384                           ;TAD_TECLADO.c: 111:         out = 0x20;
  2385   000CA2  0E20               	movlw	32
  2386   000CA4  6E03               	movwf	writeColumnas@out^0,c
  2387   000CA6  EF6D  F006         	goto	l1681
  2388   000CAA                     l1673:
  2389   000CAA  0E02               	movlw	2
  2390   000CAC  1870               	xorwf	_Columnas^0,w,c
  2391   000CAE  A4D8               	btfss	status,2,c
  2392   000CB0  EF5C  F006         	goto	u621
  2393   000CB4  EF5E  F006         	goto	u620
  2394   000CB8                     u621:
  2395   000CB8  EF62  F006         	goto	l1677
  2396   000CBC                     u620:
  2397   000CBC                     
  2398                           ;TAD_TECLADO.c: 113:         out = 0x40;
  2399   000CBC  0E40               	movlw	64
  2400   000CBE  6E03               	movwf	writeColumnas@out^0,c
  2401   000CC0  EF6D  F006         	goto	l1681
  2402   000CC4                     l1677:
  2403   000CC4  0E04               	movlw	4
  2404   000CC6  1870               	xorwf	_Columnas^0,w,c
  2405   000CC8  A4D8               	btfss	status,2,c
  2406   000CCA  EF69  F006         	goto	u631
  2407   000CCE  EF6B  F006         	goto	u630
  2408   000CD2                     u631:
  2409   000CD2  EF6D  F006         	goto	l1681
  2410   000CD6                     u630:
  2411   000CD6                     
  2412                           ;TAD_TECLADO.c: 115:         out = 0x10;
  2413   000CD6  0E10               	movlw	16
  2414   000CD8  6E03               	movwf	writeColumnas@out^0,c
  2415   000CDA                     l1681:
  2416                           
  2417                           ;TAD_TECLADO.c: 118:     LATD = (LATD & 0x8F) | (out & 0x70);
  2418   000CDA  C003  F002         	movff	writeColumnas@out,??_writeColumnas
  2419   000CDE  0E70               	movlw	112
  2420   000CE0  1602               	andwf	??_writeColumnas^0,f,c
  2421   000CE2  508C               	movf	140,w,c	;volatile
  2422   000CE4  0B8F               	andlw	143
  2423   000CE6  1002               	iorwf	??_writeColumnas^0,w,c
  2424   000CE8  6E8C               	movwf	140,c	;volatile
  2425   000CEA  0012               	return		;funcret
  2426   000CEC                     __end_of_writeColumnas:
  2427                           	callstack 0
  2428                           
  2429 ;; *************** function _showTecla *****************
  2430 ;; Defined at:
  2431 ;;		line 151 in file "TAD_TECLADO.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;		None
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  buffer         32   42[COMRAM] unsigned char [32]
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1
  2445 ;;      Params:         0       0       0
  2446 ;;      Locals:        32       0       0
  2447 ;;      Temps:          0       0       0
  2448 ;;      Totals:        32       0       0
  2449 ;;Total ram usage:       32 bytes
  2450 ;; Hardware stack levels used: 1
  2451 ;; Hardware stack levels required when called: 8
  2452 ;; This function calls:
  2453 ;;		_Terminal_SendString
  2454 ;;		_sprintf
  2455 ;; This function is called by:
  2456 ;;		_motorTeclado
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text7
  2461   000F84                     __ptext7:
  2462                           	callstack 0
  2463   000F84                     _showTecla:
  2464                           	callstack 21
  2465   000F84                     
  2466                           ;TAD_TECLADO.c: 153:  char buffer[32];;TAD_TECLADO.c: 154:  sprintf(buffer, "Tecla: %d",
      +                           tecla);
  2467   000F84  0E2B               	movlw	low showTecla@buffer
  2468   000F86  6E1B               	movwf	sprintf@s^0,c
  2469   000F88  0ECC               	movlw	low STR_1
  2470   000F8A  6E1C               	movwf	sprintf@fmt^0,c
  2471   000F8C  C06F  F01D         	movff	_tecla,?_sprintf+2
  2472   000F90  6A1E               	clrf	(?_sprintf+3)^0,c
  2473   000F92  EC28  F007         	call	_sprintf	;wreg free
  2474   000F96                     
  2475                           ;TAD_TECLADO.c: 155:     Terminal_SendString(buffer);
  2476   000F96  0E2B               	movlw	low showTecla@buffer
  2477   000F98  6E05               	movwf	Terminal_SendString@str^0,c
  2478   000F9A  6A06               	clrf	(Terminal_SendString@str+1)^0,c
  2479   000F9C  EC0E  F006         	call	_Terminal_SendString	;wreg free
  2480   000FA0  0012               	return		;funcret
  2481   000FA2                     __end_of_showTecla:
  2482                           	callstack 0
  2483                           
  2484 ;; *************** function _sprintf *****************
  2485 ;; Defined at:
  2486 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  s               1   26[COMRAM] PTR unsigned char 
  2489 ;;		 -> showTecla@buffer(32), 
  2490 ;;  fmt             1   27[COMRAM] PTR const unsigned char 
  2491 ;;		 -> STR_1(10), 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  f              11   31[COMRAM] struct _IO_FILE
  2494 ;;  ret             2    0        int 
  2495 ;;  ap              1   30[COMRAM] PTR void [1]
  2496 ;;		 -> ?_sprintf(2), 
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  2   26[COMRAM] int 
  2499 ;; Registers used:
  2500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMRAM   BANK0   BANK1
  2506 ;;      Params:         4       0       0
  2507 ;;      Locals:        12       0       0
  2508 ;;      Temps:          0       0       0
  2509 ;;      Totals:        16       0       0
  2510 ;;Total ram usage:       16 bytes
  2511 ;; Hardware stack levels used: 1
  2512 ;; Hardware stack levels required when called: 7
  2513 ;; This function calls:
  2514 ;;		_vfprintf
  2515 ;; This function is called by:
  2516 ;;		_showTecla
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text8
  2521   000E50                     __ptext8:
  2522                           	callstack 0
  2523   000E50                     _sprintf:
  2524                           	callstack 21
  2525   000E50  0E1D               	movlw	low (?_sprintf+2)
  2526   000E52  6E1F               	movwf	sprintf@ap^0,c
  2527   000E54  C01B  F020         	movff	sprintf@s,sprintf@f
  2528   000E58  0E00               	movlw	0
  2529   000E5A  6E23               	movwf	(sprintf@f+3)^0,c
  2530   000E5C  0E00               	movlw	0
  2531   000E5E  6E22               	movwf	(sprintf@f+2)^0,c
  2532   000E60  0E00               	movlw	0
  2533   000E62  6E2A               	movwf	(sprintf@f+10)^0,c
  2534   000E64  0E00               	movlw	0
  2535   000E66  6E29               	movwf	(sprintf@f+9)^0,c
  2536   000E68  0E20               	movlw	low sprintf@f
  2537   000E6A  6E17               	movwf	vfprintf@fp^0,c
  2538   000E6C  C01C  F018         	movff	sprintf@fmt,vfprintf@fmt
  2539   000E70  0E1F               	movlw	low sprintf@ap
  2540   000E72  6E19               	movwf	vfprintf@ap^0,c
  2541   000E74  ECEE  F006         	call	_vfprintf	;wreg free
  2542   000E78  501B               	movf	sprintf@s^0,w,c
  2543   000E7A  2422               	addwf	(sprintf@f+2)^0,w,c
  2544   000E7C  6ED9               	movwf	fsr2l,c
  2545   000E7E  6ADA               	clrf	fsr2h,c
  2546   000E80  6ADF               	clrf	indf2,c
  2547   000E82  0012               	return		;funcret
  2548   000E84                     __end_of_sprintf:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function _vfprintf *****************
  2552 ;; Defined at:
  2553 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  2556 ;;		 -> sprintf@f(11), 
  2557 ;;  fmt             1   23[COMRAM] PTR const unsigned char 
  2558 ;;		 -> STR_1(10), 
  2559 ;;  ap              1   24[COMRAM] PTR PTR void 
  2560 ;;		 -> sprintf@ap(1), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  cfmt            1   25[COMRAM] PTR unsigned char 
  2563 ;;		 -> STR_1(10), 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2   22[COMRAM] int 
  2566 ;; Registers used:
  2567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1
  2573 ;;      Params:         3       0       0
  2574 ;;      Locals:         1       0       0
  2575 ;;      Temps:          0       0       0
  2576 ;;      Totals:         4       0       0
  2577 ;;Total ram usage:        4 bytes
  2578 ;; Hardware stack levels used: 1
  2579 ;; Hardware stack levels required when called: 6
  2580 ;; This function calls:
  2581 ;;		_vfpfcnvrt
  2582 ;; This function is called by:
  2583 ;;		_sprintf
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text9
  2588   000DDC                     __ptext9:
  2589                           	callstack 0
  2590   000DDC                     _vfprintf:
  2591                           	callstack 21
  2592   000DDC                     
  2593                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2594   000DDC  C018  F01A         	movff	vfprintf@fmt,vfprintf@cfmt
  2595                           
  2596                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2597   000DE0  EFFA  F006         	goto	l2503
  2598   000DE4                     l2501:
  2599                           
  2600                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2601   000DE4  C017  F00C         	movff	vfprintf@fp,vfpfcnvrt@fp
  2602   000DE8  0E1A               	movlw	low vfprintf@cfmt
  2603   000DEA  6E0D               	movwf	vfpfcnvrt@fmt^0,c
  2604   000DEC  C019  F00E         	movff	vfprintf@ap,vfpfcnvrt@ap
  2605   000DF0  EC7E  F002         	call	_vfpfcnvrt	;wreg free
  2606   000DF4                     l2503:
  2607                           
  2608                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2609   000DF4  C01A  FFF6         	movff	vfprintf@cfmt,tblptrl
  2610   000DF8                     	if	1	;There is more than 1 active tblptr byte
  2611   000DF8  0E02               	movlw	high __smallconst
  2612   000DFA  6EF7               	movwf	tblptrh,c
  2613   000DFC                     	endif
  2614   000DFC                     	if	0	;tblptru may be non-zero
  2615   000DFC                     	endif
  2616   000DFC                     	if	0	;tblptru may be non-zero
  2617   000DFC                     	endif
  2618   000DFC  0008               	tblrd		*
  2619   000DFE  50F5               	movf	tablat,w,c
  2620   000E00  0900               	iorlw	0
  2621   000E02  A4D8               	btfss	status,2,c
  2622   000E04  EF06  F007         	goto	u1861
  2623   000E08  EF08  F007         	goto	u1860
  2624   000E0C                     u1861:
  2625   000E0C  EFF2  F006         	goto	l2501
  2626   000E10                     u1860:
  2627   000E10                     
  2628                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2629   000E10  0E00               	movlw	0
  2630   000E12  6E18               	movwf	(?_vfprintf+1)^0,c
  2631   000E14  0E00               	movlw	0
  2632   000E16  6E17               	movwf	?_vfprintf^0,c
  2633   000E18  0012               	return		;funcret
  2634   000E1A                     __end_of_vfprintf:
  2635                           	callstack 0
  2636                           
  2637 ;; *************** function _vfpfcnvrt *****************
  2638 ;; Defined at:
  2639 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  2642 ;;		 -> sprintf@f(11), 
  2643 ;;  fmt             1   12[COMRAM] PTR PTR unsigned char 
  2644 ;;		 -> vfprintf@cfmt(1), 
  2645 ;;  ap              1   13[COMRAM] PTR PTR void 
  2646 ;;		 -> sprintf@ap(1), 
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;  convarg         4   17[COMRAM] struct .
  2649 ;;  c               1   21[COMRAM] unsigned char 
  2650 ;;  cp              1   16[COMRAM] PTR unsigned char 
  2651 ;;		 -> STR_1(10), 
  2652 ;;  done            1   15[COMRAM] _Bool 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1
  2662 ;;      Params:         3       0       0
  2663 ;;      Locals:         7       0       0
  2664 ;;      Temps:          1       0       0
  2665 ;;      Totals:        11       0       0
  2666 ;;Total ram usage:       11 bytes
  2667 ;; Hardware stack levels used: 1
  2668 ;; Hardware stack levels required when called: 5
  2669 ;; This function calls:
  2670 ;;		___awdiv
  2671 ;;		___awmod
  2672 ;;		_abs
  2673 ;;		_fputc
  2674 ;; This function is called by:
  2675 ;;		_vfprintf
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text10
  2680   0004FC                     __ptext10:
  2681                           	callstack 0
  2682   0004FC                     _vfpfcnvrt:
  2683                           	callstack 21
  2684   0004FC                     
  2685                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2686   0004FC  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2687   0004FE  6ED9               	movwf	fsr2l,c
  2688   000500  6ADA               	clrf	fsr2h,c
  2689   000502  CFDF FFF6          	movff	indf2,tblptrl
  2690   000506                     	if	1	;There is more than 1 active tblptr byte
  2691   000506  0E02               	movlw	high __smallconst
  2692   000508  6EF7               	movwf	tblptrh,c
  2693   00050A                     	endif
  2694   00050A                     	if	0	;tblptru may be non-zero
  2695   00050A                     	endif
  2696   00050A                     	if	0	;tblptru may be non-zero
  2697   00050A                     	endif
  2698   00050A  0008               	tblrd		*
  2699   00050C  50F5               	movf	tablat,w,c
  2700   00050E  0A25               	xorlw	37
  2701   000510  A4D8               	btfss	status,2,c
  2702   000512  EF8D  F002         	goto	u1751
  2703   000516  EF8F  F002         	goto	u1750
  2704   00051A                     u1751:
  2705   00051A  EF48  F003         	goto	l2485
  2706   00051E                     u1750:
  2707   00051E                     
  2708                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2709   00051E  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2710   000520  6ED9               	movwf	fsr2l,c
  2711   000522  6ADA               	clrf	fsr2h,c
  2712   000524  2ADF               	incf	indf2,f,c
  2713   000526                     
  2714                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2715   000526  0E00               	movlw	0
  2716   000528  6E64               	movwf	(_width+1)^0,c
  2717   00052A  0E00               	movlw	0
  2718   00052C  6E63               	movwf	_width^0,c
  2719   00052E  C063  F067         	movff	_width,_flags
  2720   000532                     
  2721                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2722   000532  6865               	setf	_prec^0,c
  2723   000534  6866               	setf	(_prec+1)^0,c
  2724   000536                     
  2725                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2726   000536  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2727   000538  6ED9               	movwf	fsr2l,c
  2728   00053A  6ADA               	clrf	fsr2h,c
  2729   00053C  50DF               	movf	indf2,w,c
  2730   00053E  6E11               	movwf	vfpfcnvrt@cp^0,c
  2731   000540                     
  2732                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2733   000540  C011  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2734   000544                     	if	1	;There is more than 1 active tblptr byte
  2735   000544  0E02               	movlw	high __smallconst
  2736   000546  6EF7               	movwf	tblptrh,c
  2737   000548                     	endif
  2738   000548                     	if	0	;tblptru may be non-zero
  2739   000548                     	endif
  2740   000548                     	if	0	;tblptru may be non-zero
  2741   000548                     	endif
  2742   000548  0008               	tblrd		*
  2743   00054A  50F5               	movf	tablat,w,c
  2744   00054C  0A64               	xorlw	100
  2745   00054E  B4D8               	btfsc	status,2,c
  2746   000550  EFAC  F002         	goto	u1761
  2747   000554  EFAE  F002         	goto	u1760
  2748   000558                     u1761:
  2749   000558  EFBC  F002         	goto	l2455
  2750   00055C                     u1760:
  2751   00055C  C011  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2752   000560                     	if	1	;There is more than 1 active tblptr byte
  2753   000560  0E02               	movlw	high __smallconst
  2754   000562  6EF7               	movwf	tblptrh,c
  2755   000564                     	endif
  2756   000564                     	if	0	;tblptru may be non-zero
  2757   000564                     	endif
  2758   000564                     	if	0	;tblptru may be non-zero
  2759   000564                     	endif
  2760   000564  0008               	tblrd		*
  2761   000566  50F5               	movf	tablat,w,c
  2762   000568  0A69               	xorlw	105
  2763   00056A  A4D8               	btfss	status,2,c
  2764   00056C  EFBA  F002         	goto	u1771
  2765   000570  EFBC  F002         	goto	u1770
  2766   000574                     u1771:
  2767   000574  EF42  F003         	goto	l2481
  2768   000578                     u1770:
  2769   000578                     l2455:
  2770                           
  2771                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2772   000578  500E               	movf	vfpfcnvrt@ap^0,w,c
  2773   00057A  6ED9               	movwf	fsr2l,c
  2774   00057C  6ADA               	clrf	fsr2h,c
  2775   00057E  0E02               	movlw	2
  2776   000580  26DF               	addwf	indf2,f,c
  2777   000582  5CDF               	subwf	indf2,w,c
  2778   000584  6ED9               	movwf	fsr2l,c
  2779   000586  6ADA               	clrf	fsr2h,c
  2780   000588  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg
  2781   00058C  CFDE F013          	movff	postinc2,vfpfcnvrt@convarg+1
  2782   000590                     
  2783                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2784   000590  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2785   000592  6ED9               	movwf	fsr2l,c
  2786   000594  6ADA               	clrf	fsr2h,c
  2787   000596  2811               	incf	vfpfcnvrt@cp^0,w,c
  2788   000598  6EDF               	movwf	indf2,c
  2789   00059A                     
  2790                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2791   00059A  0E20               	movlw	32
  2792   00059C  6E16               	movwf	vfpfcnvrt@c^0,c
  2793                           
  2794                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2795   00059E  BE13               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2796   0005A0  EFD4  F002         	goto	u1781
  2797   0005A4  EFD7  F002         	goto	u1780
  2798   0005A8                     u1781:
  2799   0005A8  0E01               	movlw	1
  2800   0005AA  EFD8  F002         	goto	u1790
  2801   0005AE                     u1780:
  2802   0005AE  0E00               	movlw	0
  2803   0005B0                     u1790:
  2804   0005B0  6E10               	movwf	vfpfcnvrt@done^0,c
  2805   0005B2                     l2461:
  2806                           
  2807                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2808   0005B2  0616               	decf	vfpfcnvrt@c^0,f,c
  2809   0005B4  5016               	movf	vfpfcnvrt@c^0,w,c
  2810   0005B6  0F80               	addlw	low _dbuf
  2811   0005B8  6ED9               	movwf	fsr2l,c
  2812   0005BA  6ADA               	clrf	fsr2h,c
  2813   0005BC  C012  F002         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2814   0005C0  C013  F003         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2815   0005C4  0E00               	movlw	0
  2816   0005C6  6E05               	movwf	(___awmod@divisor+1)^0,c
  2817   0005C8  0E0A               	movlw	10
  2818   0005CA  6E04               	movwf	___awmod@divisor^0,c
  2819   0005CC  EC88  F004         	call	___awmod	;wreg free
  2820   0005D0  C002  F008         	movff	?___awmod,abs@a
  2821   0005D4  C003  F009         	movff	?___awmod+1,abs@a+1
  2822   0005D8  EC42  F007         	call	_abs	;wreg free
  2823   0005DC  5008               	movf	?_abs^0,w,c
  2824   0005DE  0F30               	addlw	48
  2825   0005E0  6EDF               	movwf	indf2,c
  2826   0005E2                     
  2827                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2828   0005E2  C012  F002         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2829   0005E6  C013  F003         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2830   0005EA  0E00               	movlw	0
  2831   0005EC  6E05               	movwf	(___awdiv@divisor+1)^0,c
  2832   0005EE  0E0A               	movlw	10
  2833   0005F0  6E04               	movwf	___awdiv@divisor^0,c
  2834   0005F2  EC27  F004         	call	___awdiv	;wreg free
  2835   0005F6  C002  F012         	movff	?___awdiv,vfpfcnvrt@convarg
  2836   0005FA  C003  F013         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2837   0005FE                     
  2838                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2839   0005FE  5012               	movf	vfpfcnvrt@convarg^0,w,c
  2840   000600  1013               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2841   000602  B4D8               	btfsc	status,2,c
  2842   000604  EF06  F003         	goto	u1801
  2843   000608  EF08  F003         	goto	u1800
  2844   00060C                     u1801:
  2845   00060C  EF10  F003         	goto	l2469
  2846   000610                     u1800:
  2847   000610  5016               	movf	vfpfcnvrt@c^0,w,c
  2848   000612  A4D8               	btfss	status,2,c
  2849   000614  EF0E  F003         	goto	u1811
  2850   000618  EF10  F003         	goto	u1810
  2851   00061C                     u1811:
  2852   00061C  EFD9  F002         	goto	l2461
  2853   000620                     u1810:
  2854   000620                     l2469:
  2855                           
  2856                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2857   000620  5016               	movf	vfpfcnvrt@c^0,w,c
  2858   000622  B4D8               	btfsc	status,2,c
  2859   000624  EF16  F003         	goto	u1821
  2860   000628  EF18  F003         	goto	u1820
  2861   00062C                     u1821:
  2862   00062C  EF37  F003         	goto	l2479
  2863   000630                     u1820:
  2864   000630  5010               	movf	vfpfcnvrt@done^0,w,c
  2865   000632  B4D8               	btfsc	status,2,c
  2866   000634  EF1E  F003         	goto	u1831
  2867   000638  EF20  F003         	goto	u1830
  2868   00063C                     u1831:
  2869   00063C  EF37  F003         	goto	l2479
  2870   000640                     u1830:
  2871   000640                     
  2872                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2873   000640  0616               	decf	vfpfcnvrt@c^0,f,c
  2874   000642  5016               	movf	vfpfcnvrt@c^0,w,c
  2875   000644  0F80               	addlw	low _dbuf
  2876   000646  6ED9               	movwf	fsr2l,c
  2877   000648  6ADA               	clrf	fsr2h,c
  2878   00064A  0E2D               	movlw	45
  2879   00064C  6EDF               	movwf	indf2,c
  2880   00064E  EF37  F003         	goto	l2479
  2881   000652                     l2475:
  2882                           
  2883                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2884   000652  5016               	movf	vfpfcnvrt@c^0,w,c
  2885   000654  0F80               	addlw	low _dbuf
  2886   000656  6ED9               	movwf	fsr2l,c
  2887   000658  6ADA               	clrf	fsr2h,c
  2888   00065A  50DF               	movf	indf2,w,c
  2889   00065C  6E0F               	movwf	??_vfpfcnvrt^0,c
  2890   00065E  500F               	movf	??_vfpfcnvrt^0,w,c
  2891   000660  6E02               	movwf	fputc@c^0,c
  2892   000662  6A03               	clrf	(fputc@c+1)^0,c
  2893   000664  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  2894   000668  ECDF  F004         	call	_fputc	;wreg free
  2895   00066C  2A16               	incf	vfpfcnvrt@c^0,f,c
  2896   00066E                     l2479:
  2897                           
  2898                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2899   00066E  0E20               	movlw	32
  2900   000670  1816               	xorwf	vfpfcnvrt@c^0,w,c
  2901   000672  A4D8               	btfss	status,2,c
  2902   000674  EF3E  F003         	goto	u1841
  2903   000678  EF40  F003         	goto	u1840
  2904   00067C                     u1841:
  2905   00067C  EF29  F003         	goto	l2475
  2906   000680                     u1840:
  2907   000680  EF59  F003         	goto	l1217
  2908   000684                     l2481:
  2909                           
  2910                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2911   000684  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2912   000686  6ED9               	movwf	fsr2l,c
  2913   000688  6ADA               	clrf	fsr2h,c
  2914   00068A  2ADF               	incf	indf2,f,c
  2915   00068C  EF59  F003         	goto	l1217
  2916   000690                     l2485:
  2917                           
  2918                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2919   000690  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2920   000692  6ED9               	movwf	fsr2l,c
  2921   000694  6ADA               	clrf	fsr2h,c
  2922   000696  CFDF FFF6          	movff	indf2,tblptrl
  2923   00069A                     	if	1	;There is more than 1 active tblptr byte
  2924   00069A  0E02               	movlw	high __smallconst
  2925   00069C  6EF7               	movwf	tblptrh,c
  2926   00069E                     	endif
  2927   00069E                     	if	0	;tblptru may be non-zero
  2928   00069E                     	endif
  2929   00069E                     	if	0	;tblptru may be non-zero
  2930   00069E                     	endif
  2931   00069E  0008               	tblrd		*
  2932   0006A0  50F5               	movf	tablat,w,c
  2933   0006A2  6E02               	movwf	fputc@c^0,c
  2934   0006A4  6A03               	clrf	(fputc@c+1)^0,c
  2935   0006A6  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  2936   0006AA  ECDF  F004         	call	_fputc	;wreg free
  2937   0006AE  EF42  F003         	goto	l2481
  2938   0006B2                     l1217:
  2939   0006B2  0012               	return		;funcret
  2940   0006B4                     __end_of_vfpfcnvrt:
  2941                           	callstack 0
  2942                           
  2943 ;; *************** function _fputc *****************
  2944 ;; Defined at:
  2945 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  c               2    1[COMRAM] int 
  2948 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  2949 ;;		 -> sprintf@f(11), 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  2    1[COMRAM] int 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1
  2961 ;;      Params:         3       0       0
  2962 ;;      Locals:         0       0       0
  2963 ;;      Temps:          5       0       0
  2964 ;;      Totals:         8       0       0
  2965 ;;Total ram usage:        8 bytes
  2966 ;; Hardware stack levels used: 1
  2967 ;; Hardware stack levels required when called: 4
  2968 ;; This function calls:
  2969 ;;		_putch
  2970 ;; This function is called by:
  2971 ;;		_vfpfcnvrt
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text11
  2976   0009BE                     __ptext11:
  2977                           	callstack 0
  2978   0009BE                     _fputc:
  2979                           	callstack 21
  2980   0009BE  5004               	movf	fputc@fp^0,w,c
  2981   0009C0  B4D8               	btfsc	status,2,c
  2982   0009C2  EFE5  F004         	goto	u1641
  2983   0009C6  EFE7  F004         	goto	u1640
  2984   0009CA                     u1641:
  2985   0009CA  EFEF  F004         	goto	l2383
  2986   0009CE                     u1640:
  2987   0009CE  5004               	movf	fputc@fp^0,w,c
  2988   0009D0  A4D8               	btfss	status,2,c
  2989   0009D2  EFED  F004         	goto	u1651
  2990   0009D6  EFEF  F004         	goto	u1650
  2991   0009DA                     u1651:
  2992   0009DA  EFF4  F004         	goto	l2385
  2993   0009DE                     u1650:
  2994   0009DE                     l2383:
  2995   0009DE  5002               	movf	fputc@c^0,w,c
  2996   0009E0  EC4E  F008         	call	_putch
  2997   0009E4  EF33  F005         	goto	l1242
  2998   0009E8                     l2385:
  2999   0009E8  5004               	movf	fputc@fp^0,w,c
  3000   0009EA  6ED9               	movwf	fsr2l,c
  3001   0009EC  6ADA               	clrf	fsr2h,c
  3002   0009EE  0E09               	movlw	9
  3003   0009F0  26D9               	addwf	fsr2l,f,c
  3004   0009F2  50DE               	movf	postinc2,w,c
  3005   0009F4  10DE               	iorwf	postinc2,w,c
  3006   0009F6  B4D8               	btfsc	status,2,c
  3007   0009F8  EF00  F005         	goto	u1661
  3008   0009FC  EF02  F005         	goto	u1660
  3009   000A00                     u1661:
  3010   000A00  EF1B  F005         	goto	l2389
  3011   000A04                     u1660:
  3012   000A04  5004               	movf	fputc@fp^0,w,c
  3013   000A06  6ED9               	movwf	fsr2l,c
  3014   000A08  6ADA               	clrf	fsr2h,c
  3015   000A0A  0E09               	movlw	9
  3016   000A0C  26D9               	addwf	fsr2l,f,c
  3017   000A0E  5004               	movf	fputc@fp^0,w,c
  3018   000A10  6EE1               	movwf	fsr1l,c
  3019   000A12  6AE2               	clrf	fsr1h,c
  3020   000A14  0E02               	movlw	2
  3021   000A16  26E1               	addwf	fsr1l,f,c
  3022   000A18  50DE               	movf	postinc2,w,c
  3023   000A1A  5CE6               	subwf	postinc1,w,c
  3024   000A1C  50E6               	movf	postinc1,w,c
  3025   000A1E  0A80               	xorlw	128
  3026   000A20  6E09               	movwf	(??_fputc+4)^0,c
  3027   000A22  50DE               	movf	postinc2,w,c
  3028   000A24  0A80               	xorlw	128
  3029   000A26  5809               	subwfb	(??_fputc+4)^0,w,c
  3030   000A28  B0D8               	btfsc	status,0,c
  3031   000A2A  EF19  F005         	goto	u1671
  3032   000A2E  EF1B  F005         	goto	u1670
  3033   000A32                     u1671:
  3034   000A32  EF33  F005         	goto	l1242
  3035   000A36                     u1670:
  3036   000A36                     l2389:
  3037   000A36  5004               	movf	fputc@fp^0,w,c
  3038   000A38  6ED9               	movwf	fsr2l,c
  3039   000A3A  6ADA               	clrf	fsr2h,c
  3040   000A3C  0E02               	movlw	2
  3041   000A3E  26D9               	addwf	fsr2l,f,c
  3042   000A40  50DF               	movf	indf2,w,c
  3043   000A42  6E05               	movwf	??_fputc^0,c
  3044   000A44  5004               	movf	fputc@fp^0,w,c
  3045   000A46  6ED9               	movwf	fsr2l,c
  3046   000A48  6ADA               	clrf	fsr2h,c
  3047   000A4A  50DF               	movf	indf2,w,c
  3048   000A4C  2405               	addwf	??_fputc^0,w,c
  3049   000A4E  6ED9               	movwf	fsr2l,c
  3050   000A50  6ADA               	clrf	fsr2h,c
  3051   000A52  C002  FFDF         	movff	fputc@c,indf2
  3052   000A56  5004               	movf	fputc@fp^0,w,c
  3053   000A58  6ED9               	movwf	fsr2l,c
  3054   000A5A  6ADA               	clrf	fsr2h,c
  3055   000A5C  0E02               	movlw	2
  3056   000A5E  26D9               	addwf	fsr2l,f,c
  3057   000A60  2ADE               	incf	postinc2,f,c
  3058   000A62  0E00               	movlw	0
  3059   000A64  22DD               	addwfc	postdec2,f,c
  3060   000A66                     l1242:
  3061   000A66  0012               	return		;funcret
  3062   000A68                     __end_of_fputc:
  3063                           	callstack 0
  3064                           
  3065 ;; *************** function _putch *****************
  3066 ;; Defined at:
  3067 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  c               1    wreg     unsigned char 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  c               1    0[COMRAM] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1
  3081 ;;      Params:         0       0       0
  3082 ;;      Locals:         0       0       0
  3083 ;;      Temps:          0       0       0
  3084 ;;      Totals:         0       0       0
  3085 ;;Total ram usage:        0 bytes
  3086 ;; Hardware stack levels used: 1
  3087 ;; Hardware stack levels required when called: 3
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_fputc
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text12
  3096   00109C                     __ptext12:
  3097                           	callstack 0
  3098   00109C                     _putch:
  3099                           	callstack 21
  3100   00109C  0012               	return		;funcret
  3101   00109E                     __end_of_putch:
  3102                           	callstack 0
  3103                           
  3104 ;; *************** function _abs *****************
  3105 ;; Defined at:
  3106 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  a               2    7[COMRAM] int 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2    7[COMRAM] int 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1
  3120 ;;      Params:         2       0       0
  3121 ;;      Locals:         0       0       0
  3122 ;;      Temps:          2       0       0
  3123 ;;      Totals:         4       0       0
  3124 ;;Total ram usage:        4 bytes
  3125 ;; Hardware stack levels used: 1
  3126 ;; Hardware stack levels required when called: 3
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_vfpfcnvrt
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text13
  3135   000E84                     __ptext13:
  3136                           	callstack 0
  3137   000E84                     _abs:
  3138                           	callstack 22
  3139   000E84  BE09               	btfsc	(abs@a+1)^0,7,c
  3140   000E86  EF47  F007         	goto	u1681
  3141   000E8A  EF49  F007         	goto	u1680
  3142   000E8E                     u1681:
  3143   000E8E  EF4F  F007         	goto	l1227
  3144   000E92                     u1680:
  3145   000E92  C008  F008         	movff	abs@a,?_abs
  3146   000E96  C009  F009         	movff	abs@a+1,?_abs+1
  3147   000E9A  EF5B  F007         	goto	l1230
  3148   000E9E                     l1227:
  3149   000E9E  C008  F00A         	movff	abs@a,??_abs
  3150   000EA2  C009  F00B         	movff	abs@a+1,??_abs+1
  3151   000EA6  1E0A               	comf	??_abs^0,f,c
  3152   000EA8  1E0B               	comf	(??_abs+1)^0,f,c
  3153   000EAA  4A0A               	infsnz	??_abs^0,f,c
  3154   000EAC  2A0B               	incf	(??_abs+1)^0,f,c
  3155   000EAE  C00A  F008         	movff	??_abs,?_abs
  3156   000EB2  C00B  F009         	movff	??_abs+1,?_abs+1
  3157   000EB6                     l1230:
  3158   000EB6  0012               	return		;funcret
  3159   000EB8                     __end_of_abs:
  3160                           	callstack 0
  3161                           
  3162 ;; *************** function ___awmod *****************
  3163 ;; Defined at:
  3164 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  dividend        2    1[COMRAM] int 
  3167 ;;  divisor         2    3[COMRAM] int 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  sign            1    6[COMRAM] unsigned char 
  3170 ;;  counter         1    5[COMRAM] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  2    1[COMRAM] int 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1
  3180 ;;      Params:         4       0       0
  3181 ;;      Locals:         2       0       0
  3182 ;;      Temps:          0       0       0
  3183 ;;      Totals:         6       0       0
  3184 ;;Total ram usage:        6 bytes
  3185 ;; Hardware stack levels used: 1
  3186 ;; Hardware stack levels required when called: 3
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_vfpfcnvrt
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text14
  3195   000910                     __ptext14:
  3196                           	callstack 0
  3197   000910                     ___awmod:
  3198                           	callstack 22
  3199   000910  6A07               	clrf	___awmod@sign^0,c
  3200   000912  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
  3201   000914  EF90  F004         	goto	u1580
  3202   000918  EF8E  F004         	goto	u1581
  3203   00091C                     u1581:
  3204   00091C  EF96  F004         	goto	l2351
  3205   000920                     u1580:
  3206   000920  6C02               	negf	___awmod@dividend^0,c
  3207   000922  1E03               	comf	(___awmod@dividend+1)^0,f,c
  3208   000924  B0D8               	btfsc	status,0,c
  3209   000926  2A03               	incf	(___awmod@dividend+1)^0,f,c
  3210   000928  0E01               	movlw	1
  3211   00092A  6E07               	movwf	___awmod@sign^0,c
  3212   00092C                     l2351:
  3213   00092C  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
  3214   00092E  EF9D  F004         	goto	u1590
  3215   000932  EF9B  F004         	goto	u1591
  3216   000936                     u1591:
  3217   000936  EFA1  F004         	goto	l2355
  3218   00093A                     u1590:
  3219   00093A  6C04               	negf	___awmod@divisor^0,c
  3220   00093C  1E05               	comf	(___awmod@divisor+1)^0,f,c
  3221   00093E  B0D8               	btfsc	status,0,c
  3222   000940  2A05               	incf	(___awmod@divisor+1)^0,f,c
  3223   000942                     l2355:
  3224   000942  5004               	movf	___awmod@divisor^0,w,c
  3225   000944  1005               	iorwf	(___awmod@divisor+1)^0,w,c
  3226   000946  B4D8               	btfsc	status,2,c
  3227   000948  EFA8  F004         	goto	u1601
  3228   00094C  EFAA  F004         	goto	u1600
  3229   000950                     u1601:
  3230   000950  EFCE  F004         	goto	l2371
  3231   000954                     u1600:
  3232   000954  0E01               	movlw	1
  3233   000956  6E06               	movwf	___awmod@counter^0,c
  3234   000958  EFB2  F004         	goto	l2361
  3235   00095C                     l2359:
  3236   00095C  90D8               	bcf	status,0,c
  3237   00095E  3604               	rlcf	___awmod@divisor^0,f,c
  3238   000960  3605               	rlcf	(___awmod@divisor+1)^0,f,c
  3239   000962  2A06               	incf	___awmod@counter^0,f,c
  3240   000964                     l2361:
  3241   000964  AE05               	btfss	(___awmod@divisor+1)^0,7,c
  3242   000966  EFB7  F004         	goto	u1611
  3243   00096A  EFB9  F004         	goto	u1610
  3244   00096E                     u1611:
  3245   00096E  EFAE  F004         	goto	l2359
  3246   000972                     u1610:
  3247   000972                     l2363:
  3248   000972  5004               	movf	___awmod@divisor^0,w,c
  3249   000974  5C02               	subwf	___awmod@dividend^0,w,c
  3250   000976  5005               	movf	(___awmod@divisor+1)^0,w,c
  3251   000978  5803               	subwfb	(___awmod@dividend+1)^0,w,c
  3252   00097A  A0D8               	btfss	status,0,c
  3253   00097C  EFC2  F004         	goto	u1621
  3254   000980  EFC4  F004         	goto	u1620
  3255   000984                     u1621:
  3256   000984  EFC8  F004         	goto	l2367
  3257   000988                     u1620:
  3258   000988  5004               	movf	___awmod@divisor^0,w,c
  3259   00098A  5E02               	subwf	___awmod@dividend^0,f,c
  3260   00098C  5005               	movf	(___awmod@divisor+1)^0,w,c
  3261   00098E  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
  3262   000990                     l2367:
  3263   000990  90D8               	bcf	status,0,c
  3264   000992  3205               	rrcf	(___awmod@divisor+1)^0,f,c
  3265   000994  3204               	rrcf	___awmod@divisor^0,f,c
  3266   000996  2E06               	decfsz	___awmod@counter^0,f,c
  3267   000998  EFB9  F004         	goto	l2363
  3268   00099C                     l2371:
  3269   00099C  5007               	movf	___awmod@sign^0,w,c
  3270   00099E  B4D8               	btfsc	status,2,c
  3271   0009A0  EFD4  F004         	goto	u1631
  3272   0009A4  EFD6  F004         	goto	u1630
  3273   0009A8                     u1631:
  3274   0009A8  EFDA  F004         	goto	l2375
  3275   0009AC                     u1630:
  3276   0009AC  6C02               	negf	___awmod@dividend^0,c
  3277   0009AE  1E03               	comf	(___awmod@dividend+1)^0,f,c
  3278   0009B0  B0D8               	btfsc	status,0,c
  3279   0009B2  2A03               	incf	(___awmod@dividend+1)^0,f,c
  3280   0009B4                     l2375:
  3281   0009B4  C002  F002         	movff	___awmod@dividend,?___awmod
  3282   0009B8  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
  3283   0009BC  0012               	return		;funcret
  3284   0009BE                     __end_of___awmod:
  3285                           	callstack 0
  3286                           
  3287 ;; *************** function ___awdiv *****************
  3288 ;; Defined at:
  3289 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  dividend        2    1[COMRAM] int 
  3292 ;;  divisor         2    3[COMRAM] int 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  quotient        2    7[COMRAM] int 
  3295 ;;  sign            1    6[COMRAM] unsigned char 
  3296 ;;  counter         1    5[COMRAM] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  2    1[COMRAM] int 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1
  3306 ;;      Params:         4       0       0
  3307 ;;      Locals:         4       0       0
  3308 ;;      Temps:          0       0       0
  3309 ;;      Totals:         8       0       0
  3310 ;;Total ram usage:        8 bytes
  3311 ;; Hardware stack levels used: 1
  3312 ;; Hardware stack levels required when called: 3
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_vfpfcnvrt
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text15
  3321   00084E                     __ptext15:
  3322                           	callstack 0
  3323   00084E                     ___awdiv:
  3324                           	callstack 22
  3325   00084E  6A07               	clrf	___awdiv@sign^0,c
  3326   000850  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  3327   000852  EF2F  F004         	goto	u1520
  3328   000856  EF2D  F004         	goto	u1521
  3329   00085A                     u1521:
  3330   00085A  EF35  F004         	goto	l2307
  3331   00085E                     u1520:
  3332   00085E  6C04               	negf	___awdiv@divisor^0,c
  3333   000860  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  3334   000862  B0D8               	btfsc	status,0,c
  3335   000864  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  3336   000866  0E01               	movlw	1
  3337   000868  6E07               	movwf	___awdiv@sign^0,c
  3338   00086A                     l2307:
  3339   00086A  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  3340   00086C  EF3C  F004         	goto	u1530
  3341   000870  EF3A  F004         	goto	u1531
  3342   000874                     u1531:
  3343   000874  EF42  F004         	goto	l2313
  3344   000878                     u1530:
  3345   000878  6C02               	negf	___awdiv@dividend^0,c
  3346   00087A  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  3347   00087C  B0D8               	btfsc	status,0,c
  3348   00087E  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  3349   000880  0E01               	movlw	1
  3350   000882  1A07               	xorwf	___awdiv@sign^0,f,c
  3351   000884                     l2313:
  3352   000884  0E00               	movlw	0
  3353   000886  6E09               	movwf	(___awdiv@quotient+1)^0,c
  3354   000888  0E00               	movlw	0
  3355   00088A  6E08               	movwf	___awdiv@quotient^0,c
  3356   00088C  5004               	movf	___awdiv@divisor^0,w,c
  3357   00088E  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  3358   000890  B4D8               	btfsc	status,2,c
  3359   000892  EF4D  F004         	goto	u1541
  3360   000896  EF4F  F004         	goto	u1540
  3361   00089A                     u1541:
  3362   00089A  EF77  F004         	goto	l2335
  3363   00089E                     u1540:
  3364   00089E  0E01               	movlw	1
  3365   0008A0  6E06               	movwf	___awdiv@counter^0,c
  3366   0008A2  EF57  F004         	goto	l2321
  3367   0008A6                     l2319:
  3368   0008A6  90D8               	bcf	status,0,c
  3369   0008A8  3604               	rlcf	___awdiv@divisor^0,f,c
  3370   0008AA  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  3371   0008AC  2A06               	incf	___awdiv@counter^0,f,c
  3372   0008AE                     l2321:
  3373   0008AE  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  3374   0008B0  EF5C  F004         	goto	u1551
  3375   0008B4  EF5E  F004         	goto	u1550
  3376   0008B8                     u1551:
  3377   0008B8  EF53  F004         	goto	l2319
  3378   0008BC                     u1550:
  3379   0008BC                     l2323:
  3380   0008BC  90D8               	bcf	status,0,c
  3381   0008BE  3608               	rlcf	___awdiv@quotient^0,f,c
  3382   0008C0  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  3383   0008C2  5004               	movf	___awdiv@divisor^0,w,c
  3384   0008C4  5C02               	subwf	___awdiv@dividend^0,w,c
  3385   0008C6  5005               	movf	(___awdiv@divisor+1)^0,w,c
  3386   0008C8  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  3387   0008CA  A0D8               	btfss	status,0,c
  3388   0008CC  EF6A  F004         	goto	u1561
  3389   0008D0  EF6C  F004         	goto	u1560
  3390   0008D4                     u1561:
  3391   0008D4  EF71  F004         	goto	l2331
  3392   0008D8                     u1560:
  3393   0008D8  5004               	movf	___awdiv@divisor^0,w,c
  3394   0008DA  5E02               	subwf	___awdiv@dividend^0,f,c
  3395   0008DC  5005               	movf	(___awdiv@divisor+1)^0,w,c
  3396   0008DE  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  3397   0008E0  8008               	bsf	___awdiv@quotient^0,0,c
  3398   0008E2                     l2331:
  3399   0008E2  90D8               	bcf	status,0,c
  3400   0008E4  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  3401   0008E6  3204               	rrcf	___awdiv@divisor^0,f,c
  3402   0008E8  2E06               	decfsz	___awdiv@counter^0,f,c
  3403   0008EA  EF5E  F004         	goto	l2323
  3404   0008EE                     l2335:
  3405   0008EE  5007               	movf	___awdiv@sign^0,w,c
  3406   0008F0  B4D8               	btfsc	status,2,c
  3407   0008F2  EF7D  F004         	goto	u1571
  3408   0008F6  EF7F  F004         	goto	u1570
  3409   0008FA                     u1571:
  3410   0008FA  EF83  F004         	goto	l2339
  3411   0008FE                     u1570:
  3412   0008FE  6C08               	negf	___awdiv@quotient^0,c
  3413   000900  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  3414   000902  B0D8               	btfsc	status,0,c
  3415   000904  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  3416   000906                     l2339:
  3417   000906  C008  F002         	movff	___awdiv@quotient,?___awdiv
  3418   00090A  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  3419   00090E  0012               	return		;funcret
  3420   000910                     __end_of___awdiv:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _Terminal_SendString *****************
  3424 ;; Defined at:
  3425 ;;		line 54 in file "TAD_TERMINAL.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  str             2    4[COMRAM] PTR const unsigned char 
  3428 ;;		 -> STR_13(33), STR_12(14), STR_11(9), STR_10(33), 
  3429 ;;		 -> STR_9(29), STR_8(27), STR_7(19), STR_6(18), 
  3430 ;;		 -> STR_5(18), STR_4(18), STR_3(2), STR_2(6), 
  3431 ;;		 -> displayUID@hexString(11), showTecla@buffer(32), 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1
  3443 ;;      Params:         2       0       0
  3444 ;;      Locals:         0       0       0
  3445 ;;      Temps:          0       0       0
  3446 ;;      Totals:         2       0       0
  3447 ;;Total ram usage:        2 bytes
  3448 ;; Hardware stack levels used: 1
  3449 ;; Hardware stack levels required when called: 4
  3450 ;; This function calls:
  3451 ;;		_Terminal_SendChar
  3452 ;;		_Terminal_TXAvailable
  3453 ;; This function is called by:
  3454 ;;		_showTecla
  3455 ;;		_showMenu
  3456 ;;		_motorTerminal
  3457 ;;		_displayUID
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text16
  3462   000C1C                     __ptext16:
  3463                           	callstack 0
  3464   000C1C                     _Terminal_SendString:
  3465                           	callstack 24
  3466   000C1C                     
  3467                           ;TAD_TERMINAL.c: 55:  while (*str) {
  3468   000C1C  EF2F  F006         	goto	l2529
  3469   000C20                     l2523:
  3470   000C20  ECD1  F007         	call	_Terminal_TXAvailable	;wreg free
  3471   000C24  5002               	movf	?_Terminal_TXAvailable^0,w,c
  3472   000C26  1003               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  3473   000C28  B4D8               	btfsc	status,2,c
  3474   000C2A  EF19  F006         	goto	u1871
  3475   000C2E  EF1B  F006         	goto	u1870
  3476   000C32                     u1871:
  3477   000C32  EF10  F006         	goto	l2523
  3478   000C36                     u1870:
  3479   000C36                     
  3480                           ;TAD_TERMINAL.c: 57:   Terminal_SendChar(*str++);
  3481   000C36  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  3482   000C3A  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3483   000C3E  6AF8               	clrf	tblptru,c
  3484   000C40  0E01               	movlw	(high __ramtop+-1)
  3485   000C42  64F7               	cpfsgt	tblptrh,c
  3486   000C44  D003               	bra	u1887
  3487   000C46  0008               	tblrd		*
  3488   000C48  50F5               	movf	tablat,w,c
  3489   000C4A  D005               	bra	u1880
  3490   000C4C                     u1887:
  3491   000C4C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3492   000C50  CFF7 FFEA          	movff	tblptrh,fsr0h
  3493   000C54  50EF               	movf	indf0,w,c
  3494   000C56                     u1880:
  3495   000C56  EC41  F008         	call	_Terminal_SendChar
  3496   000C5A  4A05               	infsnz	Terminal_SendString@str^0,f,c
  3497   000C5C  2A06               	incf	(Terminal_SendString@str+1)^0,f,c
  3498   000C5E                     l2529:
  3499                           
  3500                           ;TAD_TERMINAL.c: 55:  while (*str) {
  3501   000C5E  C005  FFF6         	movff	Terminal_SendString@str,tblptrl
  3502   000C62  C006  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  3503   000C66  6AF8               	clrf	tblptru,c
  3504   000C68  0E01               	movlw	(high __ramtop+-1)
  3505   000C6A  64F7               	cpfsgt	tblptrh,c
  3506   000C6C  D003               	bra	u1897
  3507   000C6E  0008               	tblrd		*
  3508   000C70  50F5               	movf	tablat,w,c
  3509   000C72  D005               	bra	u1890
  3510   000C74                     u1897:
  3511   000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
  3512   000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
  3513   000C7C  50EF               	movf	indf0,w,c
  3514   000C7E                     u1890:
  3515   000C7E  0900               	iorlw	0
  3516   000C80  A4D8               	btfss	status,2,c
  3517   000C82  EF45  F006         	goto	u1901
  3518   000C86  EF47  F006         	goto	u1900
  3519   000C8A                     u1901:
  3520   000C8A  EF10  F006         	goto	l2523
  3521   000C8E                     u1900:
  3522   000C8E  0012               	return		;funcret
  3523   000C90                     __end_of_Terminal_SendString:
  3524                           	callstack 0
  3525                           
  3526 ;; *************** function _Terminal_TXAvailable *****************
  3527 ;; Defined at:
  3528 ;;		line 34 in file "TAD_TERMINAL.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  2    1[COMRAM] int 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1
  3542 ;;      Params:         2       0       0
  3543 ;;      Locals:         0       0       0
  3544 ;;      Temps:          1       0       0
  3545 ;;      Totals:         3       0       0
  3546 ;;Total ram usage:        3 bytes
  3547 ;; Hardware stack levels used: 1
  3548 ;; Hardware stack levels required when called: 3
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_Terminal_SendString
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text17
  3557   000FA2                     __ptext17:
  3558                           	callstack 0
  3559   000FA2                     _Terminal_TXAvailable:
  3560                           	callstack 24
  3561   000FA2                     
  3562                           ;TAD_TERMINAL.c: 35:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  3563   000FA2  B89E               	btfsc	158,4,c	;volatile
  3564   000FA4  EFD6  F007         	goto	u1851
  3565   000FA8  EFDA  F007         	goto	u1850
  3566   000FAC                     u1851:
  3567   000FAC  6A04               	clrf	??_Terminal_TXAvailable^0,c
  3568   000FAE  2A04               	incf	??_Terminal_TXAvailable^0,f,c
  3569   000FB0  EFDB  F007         	goto	u1858
  3570   000FB4                     u1850:
  3571   000FB4  6A04               	clrf	??_Terminal_TXAvailable^0,c
  3572   000FB6                     u1858:
  3573   000FB6  5004               	movf	??_Terminal_TXAvailable^0,w,c
  3574   000FB8  6E02               	movwf	?_Terminal_TXAvailable^0,c
  3575   000FBA  6A03               	clrf	(?_Terminal_TXAvailable+1)^0,c
  3576   000FBC  0012               	return		;funcret
  3577   000FBE                     __end_of_Terminal_TXAvailable:
  3578                           	callstack 0
  3579                           
  3580 ;; *************** function _Terminal_SendChar *****************
  3581 ;; Defined at:
  3582 ;;		line 44 in file "TAD_TERMINAL.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;  c               1    wreg     unsigned char 
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  c               1    1[COMRAM] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      void 
  3589 ;; Registers used:
  3590 ;;		wreg
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1
  3596 ;;      Params:         0       0       0
  3597 ;;      Locals:         1       0       0
  3598 ;;      Temps:          0       0       0
  3599 ;;      Totals:         1       0       0
  3600 ;;Total ram usage:        1 bytes
  3601 ;; Hardware stack levels used: 1
  3602 ;; Hardware stack levels required when called: 3
  3603 ;; This function calls:
  3604 ;;		Nothing
  3605 ;; This function is called by:
  3606 ;;		_Terminal_SendString
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text18
  3611   001082                     __ptext18:
  3612                           	callstack 0
  3613   001082                     _Terminal_SendChar:
  3614                           	callstack 24
  3615                           
  3616                           ;incstack = 0
  3617                           ;Terminal_SendChar@c stored from wreg
  3618   001082  6E02               	movwf	Terminal_SendChar@c^0,c
  3619   001084                     
  3620                           ;TAD_TERMINAL.c: 45:  TXREG = c;
  3621   001084  C002  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  3622   001088  0012               	return		;funcret
  3623   00108A                     __end_of_Terminal_SendChar:
  3624                           	callstack 0
  3625                           
  3626 ;; *************** function _TI_ResetTics *****************
  3627 ;; Defined at:
  3628 ;;		line 53 in file "TAD_TIMER.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  TimerHandle     1    wreg     unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1
  3642 ;;      Params:         0       0       0
  3643 ;;      Locals:         1       0       0
  3644 ;;      Temps:          0       0       0
  3645 ;;      Totals:         1       0       0
  3646 ;;Total ram usage:        1 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 3
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_motorTeclado
  3653 ;;		_Espera
  3654 ;;		_WaitForBusy
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text19
  3659   000F60                     __ptext19:
  3660                           	callstack 0
  3661   000F60                     _TI_ResetTics:
  3662                           	callstack 26
  3663                           
  3664                           ;incstack = 0
  3665                           ;TI_ResetTics@TimerHandle stored from wreg
  3666   000F60  6E02               	movwf	TI_ResetTics@TimerHandle^0,c
  3667   000F62                     
  3668                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  3669   000F62  9EF2               	bcf	242,7,c	;volatile
  3670   000F64  5002               	movf	TI_ResetTics@TimerHandle^0,w,c
  3671   000F66  0D05               	mullw	5
  3672   000F68  50F3               	movf	243,w,c
  3673   000F6A  0F4B               	addlw	low _Timers
  3674   000F6C  6ED9               	movwf	fsr2l,c
  3675   000F6E  6ADA               	clrf	fsr2h,c
  3676   000F70  C05F  FFDE         	movff	_Tics,postinc2	;volatile
  3677   000F74  C060  FFDE         	movff	_Tics+1,postinc2	;volatile
  3678   000F78  C061  FFDE         	movff	_Tics+2,postinc2	;volatile
  3679   000F7C  C062  FFDE         	movff	_Tics+3,postinc2	;volatile
  3680   000F80  8EF2               	bsf	242,7,c	;volatile
  3681   000F82  0012               	return		;funcret
  3682   000F84                     __end_of_TI_ResetTics:
  3683                           	callstack 0
  3684                           
  3685 ;; *************** function _TI_GetTics *****************
  3686 ;; Defined at:
  3687 ;;		line 61 in file "TAD_TIMER.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  TimerHandle     1    wreg     unsigned char 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  3692 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  4    1[COMRAM] unsigned long 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1
  3702 ;;      Params:         4       0       0
  3703 ;;      Locals:         5       0       0
  3704 ;;      Temps:          4       0       0
  3705 ;;      Totals:        13       0       0
  3706 ;;Total ram usage:       13 bytes
  3707 ;; Hardware stack levels used: 1
  3708 ;; Hardware stack levels required when called: 3
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_motorTeclado
  3713 ;;		_Espera
  3714 ;;		_WaitForBusy
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text20
  3719   000D90                     __ptext20:
  3720                           	callstack 0
  3721   000D90                     _TI_GetTics:
  3722                           	callstack 26
  3723                           
  3724                           ;incstack = 0
  3725                           ;TI_GetTics@TimerHandle stored from wreg
  3726   000D90  6E0E               	movwf	TI_GetTics@TimerHandle^0,c
  3727   000D92                     
  3728                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  3729   000D92  9EF2               	bcf	242,7,c	;volatile
  3730   000D94  C05F  F00A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  3731   000D98  C060  F00B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  3732   000D9C  C061  F00C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  3733   000DA0  C062  F00D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  3734   000DA4  8EF2               	bsf	242,7,c	;volatile
  3735   000DA6                     
  3736                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  3737   000DA6  500E               	movf	TI_GetTics@TimerHandle^0,w,c
  3738   000DA8  0D05               	mullw	5
  3739   000DAA  50F3               	movf	243,w,c
  3740   000DAC  0F4B               	addlw	low _Timers
  3741   000DAE  6ED9               	movwf	fsr2l,c
  3742   000DB0  6ADA               	clrf	fsr2h,c
  3743   000DB2  CFDE F006          	movff	postinc2,??_TI_GetTics
  3744   000DB6  CFDE F007          	movff	postinc2,??_TI_GetTics+1
  3745   000DBA  CFDE F008          	movff	postinc2,??_TI_GetTics+2
  3746   000DBE  CFDE F009          	movff	postinc2,??_TI_GetTics+3
  3747   000DC2  5006               	movf	??_TI_GetTics^0,w,c
  3748   000DC4  5C0A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  3749   000DC6  6E02               	movwf	?_TI_GetTics^0,c
  3750   000DC8  5007               	movf	(??_TI_GetTics+1)^0,w,c
  3751   000DCA  580B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  3752   000DCC  6E03               	movwf	(?_TI_GetTics+1)^0,c
  3753   000DCE  5008               	movf	(??_TI_GetTics+2)^0,w,c
  3754   000DD0  580C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  3755   000DD2  6E04               	movwf	(?_TI_GetTics+2)^0,c
  3756   000DD4  5009               	movf	(??_TI_GetTics+3)^0,w,c
  3757   000DD6  580D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  3758   000DD8  6E05               	movwf	(?_TI_GetTics+3)^0,c
  3759   000DDA  0012               	return		;funcret
  3760   000DDC                     __end_of_TI_GetTics:
  3761                           	callstack 0
  3762                           
  3763 ;; *************** function _ReadFilas *****************
  3764 ;; Defined at:
  3765 ;;		line 10 in file "TAD_TECLADO.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      unsigned char 
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1
  3779 ;;      Params:         0       0       0
  3780 ;;      Locals:         0       0       0
  3781 ;;      Temps:          0       0       0
  3782 ;;      Totals:         0       0       0
  3783 ;;Total ram usage:        0 bytes
  3784 ;; Hardware stack levels used: 1
  3785 ;; Hardware stack levels required when called: 3
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_motorTeclado
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text21
  3794   001092                     __ptext21:
  3795                           	callstack 0
  3796   001092                     _ReadFilas:
  3797                           	callstack 26
  3798   001092                     
  3799                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  3800   001092  5083               	movf	131,w,c	;volatile
  3801   001094  0B0F               	andlw	15
  3802   001096  0012               	return		;funcret
  3803   001098                     __end_of_ReadFilas:
  3804                           	callstack 0
  3805                           
  3806 ;; *************** function _GetTecla *****************
  3807 ;; Defined at:
  3808 ;;		line 121 in file "TAD_TECLADO.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  3813 ;;  fila            1   16[COMRAM] unsigned char 
  3814 ;;  columna         1   15[COMRAM] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      unsigned char 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1
  3824 ;;      Params:         0       0       0
  3825 ;;      Locals:        14       0       0
  3826 ;;      Temps:          2       0       0
  3827 ;;      Totals:        16       0       0
  3828 ;;Total ram usage:       16 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 3
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_motorTeclado
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text22
  3839   00078A                     __ptext22:
  3840                           	callstack 0
  3841   00078A                     _GetTecla:
  3842                           	callstack 26
  3843   00078A                     
  3844                           ;TAD_TECLADO.c: 123:     unsigned char columna = 0;
  3845   00078A  6A10               	clrf	GetTecla@columna^0,c
  3846                           
  3847                           ;TAD_TECLADO.c: 125:     switch(Filas) {
  3848   00078C  EFDA  F003         	goto	l1697
  3849   000790                     l163:
  3850   000790  6A11               	clrf	GetTecla@fila^0,c
  3851   000792  EFF8  F003         	goto	l1709
  3852   000796                     l1685:
  3853   000796  0E01               	movlw	1
  3854   000798  6E11               	movwf	GetTecla@fila^0,c
  3855   00079A  EFF8  F003         	goto	l1709
  3856   00079E                     l1687:
  3857   00079E  0E02               	movlw	2
  3858   0007A0  6E11               	movwf	GetTecla@fila^0,c
  3859   0007A2  EFF8  F003         	goto	l1709
  3860   0007A6                     l1689:
  3861   0007A6  0E03               	movlw	3
  3862   0007A8  6E11               	movwf	GetTecla@fila^0,c
  3863   0007AA  EFF8  F003         	goto	l1709
  3864   0007AE                     l1691:
  3865   0007AE  0EFF               	movlw	255
  3866   0007B0  EF26  F004         	goto	l169
  3867   0007B4                     l1697:
  3868   0007B4  5071               	movf	_Filas^0,w,c
  3869                           
  3870                           ; Switch size 1, requested type "simple"
  3871                           ; Number of cases is 4, Range of values is 1 to 8
  3872                           ; switch strategies available:
  3873                           ; Name         Instructions Cycles
  3874                           ; simple_byte           13     7 (average)
  3875                           ;	Chosen strategy is simple_byte
  3876   0007B6  0A01               	xorlw	1	; case 1
  3877   0007B8  B4D8               	btfsc	status,2,c
  3878   0007BA  EFC8  F003         	goto	l163
  3879   0007BE  0A03               	xorlw	3	; case 2
  3880   0007C0  B4D8               	btfsc	status,2,c
  3881   0007C2  EFCB  F003         	goto	l1685
  3882   0007C6  0A06               	xorlw	6	; case 4
  3883   0007C8  B4D8               	btfsc	status,2,c
  3884   0007CA  EFCF  F003         	goto	l1687
  3885   0007CE  0A0C               	xorlw	12	; case 8
  3886   0007D0  B4D8               	btfsc	status,2,c
  3887   0007D2  EFD3  F003         	goto	l1689
  3888   0007D6  EFD7  F003         	goto	l1691
  3889   0007DA                     l171:
  3890   0007DA  6A10               	clrf	GetTecla@columna^0,c
  3891   0007DC  EF12  F004         	goto	l1711
  3892   0007E0                     l1699:
  3893   0007E0  0E01               	movlw	1
  3894   0007E2  6E10               	movwf	GetTecla@columna^0,c
  3895   0007E4  EF12  F004         	goto	l1711
  3896   0007E8                     l1701:
  3897   0007E8  0E02               	movlw	2
  3898   0007EA  6E10               	movwf	GetTecla@columna^0,c
  3899   0007EC  EF12  F004         	goto	l1711
  3900   0007F0                     l1709:
  3901   0007F0  5070               	movf	_Columnas^0,w,c
  3902   0007F2  0B07               	andlw	7
  3903   0007F4  6E02               	movwf	??_GetTecla^0,c
  3904   0007F6  6A03               	clrf	(??_GetTecla+1)^0,c
  3905                           
  3906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3907                           ; Switch size 1, requested type "simple"
  3908                           ; Number of cases is 1, Range of values is 0 to 0
  3909                           ; switch strategies available:
  3910                           ; Name         Instructions Cycles
  3911                           ; simple_byte            4     3 (average)
  3912                           ;	Chosen strategy is simple_byte
  3913   0007F8  5003               	movf	(??_GetTecla+1)^0,w,c
  3914   0007FA  0A00               	xorlw	0	; case 0
  3915   0007FC  B4D8               	btfsc	status,2,c
  3916   0007FE  EF03  F004         	goto	l3161
  3917   000802  EFD7  F003         	goto	l1691
  3918   000806                     l3161:
  3919                           
  3920                           ; Switch size 1, requested type "simple"
  3921                           ; Number of cases is 3, Range of values is 1 to 4
  3922                           ; switch strategies available:
  3923                           ; Name         Instructions Cycles
  3924                           ; simple_byte           10     6 (average)
  3925                           ;	Chosen strategy is simple_byte
  3926   000806  5002               	movf	??_GetTecla^0,w,c
  3927   000808  0A01               	xorlw	1	; case 1
  3928   00080A  B4D8               	btfsc	status,2,c
  3929   00080C  EFED  F003         	goto	l171
  3930   000810  0A03               	xorlw	3	; case 2
  3931   000812  B4D8               	btfsc	status,2,c
  3932   000814  EFF0  F003         	goto	l1699
  3933   000818  0A06               	xorlw	6	; case 4
  3934   00081A  B4D8               	btfsc	status,2,c
  3935   00081C  EFF4  F003         	goto	l1701
  3936   000820  EFD7  F003         	goto	l1691
  3937   000824                     l1711:
  3938                           
  3939                           ;TAD_TECLADO.c: 141:     const unsigned char keymap[4][3] = {
  3940   000824  0E01               	movlw	low GetTecla@F3224
  3941   000826  6EF6               	movwf	tblptrl,c
  3942   000828                     	if	1	;There is more than 1 active tblptr byte
  3943   000828  0E02               	movlw	high GetTecla@F3224
  3944   00082A  6EF7               	movwf	tblptrh,c
  3945   00082C                     	endif
  3946   00082C                     	if	0	;There are less than 3 active tblptr bytes
  3947   00082C                     	endif
  3948   00082C  EE20  F004         	lfsr	2,GetTecla@keymap
  3949   000830  0E0B               	movlw	11
  3950   000832                     u640:
  3951   000832  0009               	tblrd		*+
  3952   000834  CFF5 FFDE          	movff	tablat,postinc2
  3953   000838  06E8               	decf	wreg,f,c
  3954   00083A  E2FB               	bc	u640
  3955   00083C                     
  3956                           ;TAD_TECLADO.c: 148:     return keymap[fila][columna];
  3957   00083C  5011               	movf	GetTecla@fila^0,w,c
  3958   00083E  0D03               	mullw	3
  3959   000840  50F3               	movf	243,w,c
  3960   000842  0F04               	addlw	low GetTecla@keymap
  3961   000844  2410               	addwf	GetTecla@columna^0,w,c
  3962   000846  6ED9               	movwf	fsr2l,c
  3963   000848  6ADA               	clrf	fsr2h,c
  3964   00084A  50DF               	movf	indf2,w,c
  3965   00084C                     l169:
  3966   00084C  0012               	return		;funcret
  3967   00084E                     __end_of_GetTecla:
  3968                           	callstack 0
  3969                           
  3970 ;; *************** function _initTeclado *****************
  3971 ;; Defined at:
  3972 ;;		line 14 in file "TAD_TECLADO.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;		None
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1
  3986 ;;      Params:         0       0       0
  3987 ;;      Locals:         0       0       0
  3988 ;;      Temps:          0       0       0
  3989 ;;      Totals:         0       0       0
  3990 ;;Total ram usage:        0 bytes
  3991 ;; Hardware stack levels used: 1
  3992 ;; Hardware stack levels required when called: 4
  3993 ;; This function calls:
  3994 ;;		_TI_NewTimer
  3995 ;;		_initPortsTeclado
  3996 ;; This function is called by:
  3997 ;;		_main
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text23
  4002   00101A                     __ptext23:
  4003                           	callstack 0
  4004   00101A                     _initTeclado:
  4005                           	callstack 26
  4006   00101A                     
  4007                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  4008   00101A  EC45  F008         	call	_initPortsTeclado	;wreg free
  4009   00101E                     
  4010                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  4011   00101E  6A71               	clrf	_Filas^0,c
  4012   001020                     
  4013                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  4014   001020  6A70               	clrf	_Columnas^0,c
  4015   001022                     
  4016                           ;TAD_TECLADO.c: 18:     tecla = 0;
  4017   001022  6A6F               	clrf	_tecla^0,c
  4018   001024                     
  4019                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  4020   001024  0E73               	movlw	low _timer
  4021   001026  6E02               	movwf	TI_NewTimer@TimerHandle^0,c
  4022   001028  EC76  F006         	call	_TI_NewTimer	;wreg free
  4023   00102C  0012               	return		;funcret
  4024   00102E                     __end_of_initTeclado:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function _initPortsTeclado *****************
  4028 ;; Defined at:
  4029 ;;		line 22 in file "TAD_TECLADO.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1
  4043 ;;      Params:         0       0       0
  4044 ;;      Locals:         0       0       0
  4045 ;;      Temps:          0       0       0
  4046 ;;      Totals:         0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used: 1
  4049 ;; Hardware stack levels required when called: 3
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_initTeclado
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text24
  4058   00108A                     __ptext24:
  4059                           	callstack 0
  4060   00108A                     _initPortsTeclado:
  4061                           	callstack 26
  4062   00108A                     
  4063                           ;TAD_TECLADO.c: 23:  TRISD = 0x0F;
  4064   00108A  0E0F               	movlw	15
  4065   00108C  6E95               	movwf	149,c	;volatile
  4066   00108E                     
  4067                           ;TAD_TECLADO.c: 24:  LATD = 0x00;
  4068   00108E  6A8C               	clrf	140,c	;volatile
  4069   001090  0012               	return		;funcret
  4070   001092                     __end_of_initPortsTeclado:
  4071                           	callstack 0
  4072                           
  4073 ;; *************** function _TI_NewTimer *****************
  4074 ;; Defined at:
  4075 ;;		line 43 in file "TAD_TIMER.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  4078 ;;		 -> Timer(1), timer(1), 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  Comptador       1    3[COMRAM] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      unsigned char 
  4083 ;; Registers used:
  4084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1
  4090 ;;      Params:         1       0       0
  4091 ;;      Locals:         1       0       0
  4092 ;;      Temps:          1       0       0
  4093 ;;      Totals:         3       0       0
  4094 ;;Total ram usage:        3 bytes
  4095 ;; Hardware stack levels used: 1
  4096 ;; Hardware stack levels required when called: 3
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_initTeclado
  4101 ;;		_LcInit
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text25
  4106   000CEC                     __ptext25:
  4107                           	callstack 0
  4108   000CEC                     _TI_NewTimer:
  4109                           	callstack 26
  4110   000CEC                     
  4111                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  4112   000CEC  6A04               	clrf	TI_NewTimer@Comptador^0,c
  4113                           
  4114                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4115   000CEE  EF85  F006         	goto	l2635
  4116   000CF2                     l2631:
  4117                           
  4118                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  4119   000CF2  2A04               	incf	TI_NewTimer@Comptador^0,f,c
  4120   000CF4  0E04               	movlw	4
  4121   000CF6  1804               	xorwf	TI_NewTimer@Comptador^0,w,c
  4122   000CF8  A4D8               	btfss	status,2,c
  4123   000CFA  EF81  F006         	goto	u2041
  4124   000CFE  EF83  F006         	goto	u2040
  4125   000D02                     u2041:
  4126   000D02  EF85  F006         	goto	l2635
  4127   000D06                     u2040:
  4128   000D06  EFA0  F006         	goto	l66
  4129   000D0A                     l2635:
  4130                           
  4131                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  4132   000D0A  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4133   000D0C  0D05               	mullw	5
  4134   000D0E  50F3               	movf	243,w,c
  4135   000D10  0F4F               	addlw	low (_Timers+4)
  4136   000D12  6ED9               	movwf	fsr2l,c
  4137   000D14  6ADA               	clrf	fsr2h,c
  4138   000D16  04DE               	decf	postinc2,w,c
  4139   000D18  B4D8               	btfsc	status,2,c
  4140   000D1A  EF91  F006         	goto	u2051
  4141   000D1E  EF93  F006         	goto	u2050
  4142   000D22                     u2051:
  4143   000D22  EF79  F006         	goto	l2631
  4144   000D26                     u2050:
  4145   000D26                     
  4146                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  4147   000D26  5004               	movf	TI_NewTimer@Comptador^0,w,c
  4148   000D28  0D05               	mullw	5
  4149   000D2A  50F3               	movf	243,w,c
  4150   000D2C  0F4F               	addlw	low (_Timers+4)
  4151   000D2E  6ED9               	movwf	fsr2l,c
  4152   000D30  6ADA               	clrf	fsr2h,c
  4153   000D32  0E01               	movlw	1
  4154   000D34  6EDF               	movwf	indf2,c
  4155   000D36                     
  4156                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  4157   000D36  5002               	movf	TI_NewTimer@TimerHandle^0,w,c
  4158   000D38  6ED9               	movwf	fsr2l,c
  4159   000D3A  6ADA               	clrf	fsr2h,c
  4160   000D3C  C004  FFDF         	movff	TI_NewTimer@Comptador,indf2
  4161   000D40                     l66:
  4162   000D40  0012               	return		;funcret
  4163   000D42                     __end_of_TI_NewTimer:
  4164                           	callstack 0
  4165                           
  4166 ;; *************** function _initRFID *****************
  4167 ;; Defined at:
  4168 ;;		line 294 in file "TAD_RFID.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;		None
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;		None
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1
  4182 ;;      Params:         0       0       0
  4183 ;;      Locals:         0       0       0
  4184 ;;      Temps:          0       0       0
  4185 ;;      Totals:         0       0       0
  4186 ;;Total ram usage:        0 bytes
  4187 ;; Hardware stack levels used: 1
  4188 ;; Hardware stack levels required when called: 8
  4189 ;; This function calls:
  4190 ;;		_InitPortDirections
  4191 ;;		_MFRC522_Init
  4192 ;; This function is called by:
  4193 ;;		_main
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text26
  4198   001078                     __ptext26:
  4199                           	callstack 0
  4200   001078                     _initRFID:
  4201                           	callstack 22
  4202   001078                     
  4203                           ;TAD_RFID.c: 295:     InitPortDirections();
  4204   001078  EC36  F008         	call	_InitPortDirections	;wreg free
  4205   00107C                     
  4206                           ;TAD_RFID.c: 296:     MFRC522_Init();
  4207   00107C  ECA1  F006         	call	_MFRC522_Init	;wreg free
  4208   001080  0012               	return		;funcret
  4209   001082                     __end_of_initRFID:
  4210                           	callstack 0
  4211                           
  4212 ;; *************** function _MFRC522_Init *****************
  4213 ;; Defined at:
  4214 ;;		line 115 in file "TAD_RFID.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1
  4228 ;;      Params:         0       0       0
  4229 ;;      Locals:         0       0       0
  4230 ;;      Temps:          0       0       0
  4231 ;;      Totals:         0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used: 1
  4234 ;; Hardware stack levels required when called: 7
  4235 ;; This function calls:
  4236 ;;		_MFRC522_AntennaOff
  4237 ;;		_MFRC522_AntennaOn
  4238 ;;		_MFRC522_Reset
  4239 ;;		_MFRC522_Wr
  4240 ;; This function is called by:
  4241 ;;		_initRFID
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text27
  4246   000D42                     __ptext27:
  4247                           	callstack 0
  4248   000D42                     _MFRC522_Init:
  4249                           	callstack 22
  4250   000D42                     
  4251                           ;TAD_RFID.c: 116:     LATCbits.LATC3 = 1;
  4252   000D42  868B               	bsf	139,3,c	;volatile
  4253                           
  4254                           ;TAD_RFID.c: 117:     LATCbits.LATC4 = 1;
  4255   000D44  888B               	bsf	139,4,c	;volatile
  4256   000D46                     
  4257                           ;TAD_RFID.c: 119:     MFRC522_Reset();
  4258   000D46  EC76  F007         	call	_MFRC522_Reset	;wreg free
  4259                           
  4260                           ;TAD_RFID.c: 120:     MFRC522_Wr(0x2A, 0x8D);
  4261   000D4A  0E8D               	movlw	141
  4262   000D4C  6E07               	movwf	MFRC522_Wr@value^0,c
  4263   000D4E  0E2A               	movlw	42
  4264   000D50  EC34  F005         	call	_MFRC522_Wr
  4265                           
  4266                           ;TAD_RFID.c: 121:     MFRC522_Wr(0x2B, 0x3E);
  4267   000D54  0E3E               	movlw	62
  4268   000D56  6E07               	movwf	MFRC522_Wr@value^0,c
  4269   000D58  0E2B               	movlw	43
  4270   000D5A  EC34  F005         	call	_MFRC522_Wr
  4271                           
  4272                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2D, 30);
  4273   000D5E  0E1E               	movlw	30
  4274   000D60  6E07               	movwf	MFRC522_Wr@value^0,c
  4275   000D62  0E2D               	movlw	45
  4276   000D64  EC34  F005         	call	_MFRC522_Wr
  4277                           
  4278                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2C, 0);
  4279   000D68  0E00               	movlw	0
  4280   000D6A  6E07               	movwf	MFRC522_Wr@value^0,c
  4281   000D6C  0E2C               	movlw	44
  4282   000D6E  EC34  F005         	call	_MFRC522_Wr
  4283                           
  4284                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x15, 0x40);
  4285   000D72  0E40               	movlw	64
  4286   000D74  6E07               	movwf	MFRC522_Wr@value^0,c
  4287   000D76  0E15               	movlw	21
  4288   000D78  EC34  F005         	call	_MFRC522_Wr
  4289                           
  4290                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x11, 0x3D);
  4291   000D7C  0E3D               	movlw	61
  4292   000D7E  6E07               	movwf	MFRC522_Wr@value^0,c
  4293   000D80  0E11               	movlw	17
  4294   000D82  EC34  F005         	call	_MFRC522_Wr
  4295                           
  4296                           ;TAD_RFID.c: 127:     MFRC522_AntennaOff();
  4297   000D86  EC30  F008         	call	_MFRC522_AntennaOff	;wreg free
  4298                           
  4299                           ;TAD_RFID.c: 128:     MFRC522_AntennaOn();
  4300   000D8A  EC2A  F008         	call	_MFRC522_AntennaOn	;wreg free
  4301   000D8E  0012               	return		;funcret
  4302   000D90                     __end_of_MFRC522_Init:
  4303                           	callstack 0
  4304                           
  4305 ;; *************** function _MFRC522_Reset *****************
  4306 ;; Defined at:
  4307 ;;		line 96 in file "TAD_RFID.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;		None
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1
  4321 ;;      Params:         0       0       0
  4322 ;;      Locals:         0       0       0
  4323 ;;      Temps:          0       0       0
  4324 ;;      Totals:         0       0       0
  4325 ;;Total ram usage:        0 bytes
  4326 ;; Hardware stack levels used: 1
  4327 ;; Hardware stack levels required when called: 5
  4328 ;; This function calls:
  4329 ;;		_MFRC522_Wr
  4330 ;;		_delay_us
  4331 ;; This function is called by:
  4332 ;;		_MFRC522_Init
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text28
  4337   000EEC                     __ptext28:
  4338                           	callstack 0
  4339   000EEC                     _MFRC522_Reset:
  4340                           	callstack 23
  4341   000EEC                     
  4342                           ;TAD_RFID.c: 97:     LATCbits.LATC4 = 1;
  4343   000EEC  888B               	bsf	139,4,c	;volatile
  4344   000EEE                     
  4345                           ;TAD_RFID.c: 98:     delay_us (1);
  4346   000EEE  0E01               	movlw	1
  4347   000EF0  EC0D  F007         	call	_delay_us
  4348   000EF4                     
  4349                           ;TAD_RFID.c: 99:     LATCbits.LATC4 = 0;
  4350   000EF4  988B               	bcf	139,4,c	;volatile
  4351                           
  4352                           ;TAD_RFID.c: 100:     delay_us (1);
  4353   000EF6  0E01               	movlw	1
  4354   000EF8  EC0D  F007         	call	_delay_us
  4355   000EFC                     
  4356                           ;TAD_RFID.c: 101:     LATCbits.LATC4 = 1;
  4357   000EFC  888B               	bsf	139,4,c	;volatile
  4358                           
  4359                           ;TAD_RFID.c: 102:     delay_us (1);
  4360   000EFE  0E01               	movlw	1
  4361   000F00  EC0D  F007         	call	_delay_us
  4362                           
  4363                           ;TAD_RFID.c: 103:     MFRC522_Wr(0x01, 0x0F);
  4364   000F04  0E0F               	movlw	15
  4365   000F06  6E07               	movwf	MFRC522_Wr@value^0,c
  4366   000F08  0E01               	movlw	1
  4367   000F0A  EC34  F005         	call	_MFRC522_Wr
  4368                           
  4369                           ;TAD_RFID.c: 104:     delay_us (1);
  4370   000F0E  0E01               	movlw	1
  4371   000F10  EC0D  F007         	call	_delay_us
  4372   000F14  0012               	return		;funcret
  4373   000F16                     __end_of_MFRC522_Reset:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function _MFRC522_AntennaOn *****************
  4377 ;; Defined at:
  4378 ;;		line 107 in file "TAD_RFID.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1
  4392 ;;      Params:         0       0       0
  4393 ;;      Locals:         0       0       0
  4394 ;;      Temps:          0       0       0
  4395 ;;      Totals:         0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used: 1
  4398 ;; Hardware stack levels required when called: 6
  4399 ;; This function calls:
  4400 ;;		_MFRC522_Set_Bit
  4401 ;; This function is called by:
  4402 ;;		_MFRC522_Init
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text29
  4407   001054                     __ptext29:
  4408                           	callstack 0
  4409   001054                     _MFRC522_AntennaOn:
  4410                           	callstack 22
  4411   001054                     
  4412                           ;TAD_RFID.c: 108:     MFRC522_Set_Bit(0x14, 0x03);
  4413   001054  0E03               	movlw	3
  4414   001056  6E0C               	movwf	MFRC522_Set_Bit@mask^0,c
  4415   001058  0E14               	movlw	20
  4416   00105A  EC17  F008         	call	_MFRC522_Set_Bit
  4417   00105E  0012               	return		;funcret
  4418   001060                     __end_of_MFRC522_AntennaOn:
  4419                           	callstack 0
  4420                           
  4421 ;; *************** function _MFRC522_Set_Bit *****************
  4422 ;; Defined at:
  4423 ;;		line 92 in file "TAD_RFID.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  addr            1    wreg     unsigned char 
  4426 ;;  mask            1   11[COMRAM] unsigned char 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  addr            1   12[COMRAM] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1
  4438 ;;      Params:         1       0       0
  4439 ;;      Locals:         1       0       0
  4440 ;;      Temps:          0       0       0
  4441 ;;      Totals:         2       0       0
  4442 ;;Total ram usage:        2 bytes
  4443 ;; Hardware stack levels used: 1
  4444 ;; Hardware stack levels required when called: 5
  4445 ;; This function calls:
  4446 ;;		_MFRC522_Rd
  4447 ;;		_MFRC522_Wr
  4448 ;; This function is called by:
  4449 ;;		_MFRC522_AntennaOn
  4450 ;;		_MFRC522_ToCard
  4451 ;;		_MFRC522_CRC
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text30
  4456   00102E                     __ptext30:
  4457                           	callstack 0
  4458   00102E                     _MFRC522_Set_Bit:
  4459                           	callstack 22
  4460                           
  4461                           ;incstack = 0
  4462                           ;MFRC522_Set_Bit@addr stored from wreg
  4463   00102E  6E0D               	movwf	MFRC522_Set_Bit@addr^0,c
  4464   001030                     
  4465                           ;TAD_RFID.c: 93:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  4466   001030  500D               	movf	MFRC522_Set_Bit@addr^0,w,c
  4467   001032  EC88  F005         	call	_MFRC522_Rd
  4468   001036  100C               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  4469   001038  6E07               	movwf	MFRC522_Wr@value^0,c
  4470   00103A  500D               	movf	MFRC522_Set_Bit@addr^0,w,c
  4471   00103C  EC34  F005         	call	_MFRC522_Wr
  4472   001040  0012               	return		;funcret
  4473   001042                     __end_of_MFRC522_Set_Bit:
  4474                           	callstack 0
  4475                           
  4476 ;; *************** function _MFRC522_AntennaOff *****************
  4477 ;; Defined at:
  4478 ;;		line 111 in file "TAD_RFID.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;		None
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      void 
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1
  4492 ;;      Params:         0       0       0
  4493 ;;      Locals:         0       0       0
  4494 ;;      Temps:          0       0       0
  4495 ;;      Totals:         0       0       0
  4496 ;;Total ram usage:        0 bytes
  4497 ;; Hardware stack levels used: 1
  4498 ;; Hardware stack levels required when called: 6
  4499 ;; This function calls:
  4500 ;;		_MFRC522_Clear_Bit
  4501 ;; This function is called by:
  4502 ;;		_MFRC522_Init
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text31
  4507   001060                     __ptext31:
  4508                           	callstack 0
  4509   001060                     _MFRC522_AntennaOff:
  4510                           	callstack 22
  4511   001060                     
  4512                           ;TAD_RFID.c: 112:     MFRC522_Clear_Bit(0x14, 0x03);
  4513   001060  0E03               	movlw	3
  4514   001062  6E0C               	movwf	MFRC522_Clear_Bit@mask^0,c
  4515   001064  0E14               	movlw	20
  4516   001066  ECDF  F007         	call	_MFRC522_Clear_Bit
  4517   00106A  0012               	return		;funcret
  4518   00106C                     __end_of_MFRC522_AntennaOff:
  4519                           	callstack 0
  4520                           
  4521 ;; *************** function _MFRC522_Clear_Bit *****************
  4522 ;; Defined at:
  4523 ;;		line 88 in file "TAD_RFID.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  addr            1    wreg     unsigned char 
  4526 ;;  mask            1   11[COMRAM] unsigned char 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  addr            1   13[COMRAM] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1
  4538 ;;      Params:         1       0       0
  4539 ;;      Locals:         1       0       0
  4540 ;;      Temps:          1       0       0
  4541 ;;      Totals:         3       0       0
  4542 ;;Total ram usage:        3 bytes
  4543 ;; Hardware stack levels used: 1
  4544 ;; Hardware stack levels required when called: 5
  4545 ;; This function calls:
  4546 ;;		_MFRC522_Rd
  4547 ;;		_MFRC522_Wr
  4548 ;; This function is called by:
  4549 ;;		_MFRC522_AntennaOff
  4550 ;;		_MFRC522_ToCard
  4551 ;;		_MFRC522_CRC
  4552 ;;		_MFRC522_Halt
  4553 ;;		_MFRC522_AntiColl
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text32
  4558   000FBE                     __ptext32:
  4559                           	callstack 0
  4560   000FBE                     _MFRC522_Clear_Bit:
  4561                           	callstack 22
  4562                           
  4563                           ;incstack = 0
  4564                           ;MFRC522_Clear_Bit@addr stored from wreg
  4565   000FBE  6E0E               	movwf	MFRC522_Clear_Bit@addr^0,c
  4566   000FC0                     
  4567                           ;TAD_RFID.c: 89:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  4568   000FC0  500C               	movf	MFRC522_Clear_Bit@mask^0,w,c
  4569   000FC2  0AFF               	xorlw	255
  4570   000FC4  6E0D               	movwf	??_MFRC522_Clear_Bit^0,c
  4571   000FC6  500E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4572   000FC8  EC88  F005         	call	_MFRC522_Rd
  4573   000FCC  140D               	andwf	??_MFRC522_Clear_Bit^0,w,c
  4574   000FCE  6E07               	movwf	MFRC522_Wr@value^0,c
  4575   000FD0  500E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4576   000FD2  EC34  F005         	call	_MFRC522_Wr
  4577   000FD6  0012               	return		;funcret
  4578   000FD8                     __end_of_MFRC522_Clear_Bit:
  4579                           	callstack 0
  4580                           
  4581 ;; *************** function _MFRC522_Wr *****************
  4582 ;; Defined at:
  4583 ;;		line 60 in file "TAD_RFID.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  Address         1    wreg     unsigned char 
  4586 ;;  value           1    6[COMRAM] unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  Address         1    8[COMRAM] unsigned char 
  4589 ;;  i               1   10[COMRAM] unsigned char 
  4590 ;;  ucAddr          1    9[COMRAM] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      void 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1
  4600 ;;      Params:         1       0       0
  4601 ;;      Locals:         3       0       0
  4602 ;;      Temps:          1       0       0
  4603 ;;      Totals:         5       0       0
  4604 ;;Total ram usage:        5 bytes
  4605 ;; Hardware stack levels used: 1
  4606 ;; Hardware stack levels required when called: 4
  4607 ;; This function calls:
  4608 ;;		_delay_us
  4609 ;; This function is called by:
  4610 ;;		_MFRC522_Clear_Bit
  4611 ;;		_MFRC522_Set_Bit
  4612 ;;		_MFRC522_Reset
  4613 ;;		_MFRC522_Init
  4614 ;;		_MFRC522_ToCard
  4615 ;;		_MFRC522_Request
  4616 ;;		_MFRC522_CRC
  4617 ;;		_MFRC522_AntiColl
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text33
  4622   000A68                     __ptext33:
  4623                           	callstack 0
  4624   000A68                     _MFRC522_Wr:
  4625                           	callstack 24
  4626                           
  4627                           ;incstack = 0
  4628                           ;MFRC522_Wr@Address stored from wreg
  4629   000A68  6E09               	movwf	MFRC522_Wr@Address^0,c
  4630   000A6A                     
  4631                           ;TAD_RFID.c: 61:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  4632   000A6A  5009               	movf	MFRC522_Wr@Address^0,w,c
  4633   000A6C  2409               	addwf	MFRC522_Wr@Address^0,w,c
  4634   000A6E  0B7E               	andlw	126
  4635   000A70  6E0A               	movwf	MFRC522_Wr@ucAddr^0,c
  4636   000A72                     
  4637                           ;TAD_RFID.c: 62:     LATCbits.LATC2 = 0;
  4638   000A72  948B               	bcf	139,2,c	;volatile
  4639   000A74                     
  4640                           ;TAD_RFID.c: 63:     LATCbits.LATC3 = 0;
  4641   000A74  968B               	bcf	139,3,c	;volatile
  4642   000A76                     
  4643                           ;TAD_RFID.c: 64:     for (i = 8; i > 0; i--) {
  4644   000A76  0E08               	movlw	8
  4645   000A78  6E0B               	movwf	MFRC522_Wr@i^0,c
  4646   000A7A                     l2409:
  4647                           
  4648                           ;TAD_RFID.c: 65:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4649   000A7A  BE0A               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  4650   000A7C  EF42  F005         	goto	u1691
  4651   000A80  EF46  F005         	goto	u1690
  4652   000A84                     u1691:
  4653   000A84  6A08               	clrf	??_MFRC522_Wr^0,c
  4654   000A86  2A08               	incf	??_MFRC522_Wr^0,f,c
  4655   000A88  EF47  F005         	goto	u1708
  4656   000A8C                     u1690:
  4657   000A8C  6A08               	clrf	??_MFRC522_Wr^0,c
  4658   000A8E                     u1708:
  4659   000A8E  4608               	rlncf	??_MFRC522_Wr^0,f,c
  4660   000A90  508B               	movf	139,w,c	;volatile
  4661   000A92  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4662   000A94  0BFD               	andlw	-3
  4663   000A96  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4664   000A98  6E8B               	movwf	139,c	;volatile
  4665   000A9A                     
  4666                           ;TAD_RFID.c: 66:         LATCbits.LATC2 = 1;
  4667   000A9A  848B               	bsf	139,2,c	;volatile
  4668                           
  4669                           ;TAD_RFID.c: 67:         ucAddr <<= 1;
  4670   000A9C  90D8               	bcf	status,0,c
  4671   000A9E  360A               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  4672   000AA0                     
  4673                           ;TAD_RFID.c: 68:         delay_us(5);
  4674   000AA0  0E05               	movlw	5
  4675   000AA2  EC0D  F007         	call	_delay_us
  4676   000AA6                     
  4677                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 0;
  4678   000AA6  948B               	bcf	139,2,c	;volatile
  4679   000AA8                     
  4680                           ;TAD_RFID.c: 70:         delay_us(5);
  4681   000AA8  0E05               	movlw	5
  4682   000AAA  EC0D  F007         	call	_delay_us
  4683   000AAE                     
  4684                           ;TAD_RFID.c: 71:     }
  4685   000AAE  060B               	decf	MFRC522_Wr@i^0,f,c
  4686   000AB0  500B               	movf	MFRC522_Wr@i^0,w,c
  4687   000AB2  A4D8               	btfss	status,2,c
  4688   000AB4  EF5E  F005         	goto	u1711
  4689   000AB8  EF60  F005         	goto	u1710
  4690   000ABC                     u1711:
  4691   000ABC  EF3D  F005         	goto	l2409
  4692   000AC0                     u1710:
  4693   000AC0                     
  4694                           ;TAD_RFID.c: 73:     for (i = 8; i > 0; i--) {
  4695   000AC0  0E08               	movlw	8
  4696   000AC2  6E0B               	movwf	MFRC522_Wr@i^0,c
  4697   000AC4                     l2427:
  4698                           
  4699                           ;TAD_RFID.c: 74:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  4700   000AC4  BE07               	btfsc	MFRC522_Wr@value^0,7,c
  4701   000AC6  EF67  F005         	goto	u1721
  4702   000ACA  EF6B  F005         	goto	u1720
  4703   000ACE                     u1721:
  4704   000ACE  6A08               	clrf	??_MFRC522_Wr^0,c
  4705   000AD0  2A08               	incf	??_MFRC522_Wr^0,f,c
  4706   000AD2  EF6C  F005         	goto	u1738
  4707   000AD6                     u1720:
  4708   000AD6  6A08               	clrf	??_MFRC522_Wr^0,c
  4709   000AD8                     u1738:
  4710   000AD8  4608               	rlncf	??_MFRC522_Wr^0,f,c
  4711   000ADA  508B               	movf	139,w,c	;volatile
  4712   000ADC  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4713   000ADE  0BFD               	andlw	-3
  4714   000AE0  1808               	xorwf	??_MFRC522_Wr^0,w,c
  4715   000AE2  6E8B               	movwf	139,c	;volatile
  4716   000AE4                     
  4717                           ;TAD_RFID.c: 75:         LATCbits.LATC2 = 1;
  4718   000AE4  848B               	bsf	139,2,c	;volatile
  4719                           
  4720                           ;TAD_RFID.c: 76:         value <<= 1;
  4721   000AE6  90D8               	bcf	status,0,c
  4722   000AE8  3607               	rlcf	MFRC522_Wr@value^0,f,c
  4723   000AEA                     
  4724                           ;TAD_RFID.c: 77:         delay_us(5);
  4725   000AEA  0E05               	movlw	5
  4726   000AEC  EC0D  F007         	call	_delay_us
  4727   000AF0                     
  4728                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 0;
  4729   000AF0  948B               	bcf	139,2,c	;volatile
  4730   000AF2                     
  4731                           ;TAD_RFID.c: 79:         delay_us(5);
  4732   000AF2  0E05               	movlw	5
  4733   000AF4  EC0D  F007         	call	_delay_us
  4734   000AF8                     
  4735                           ;TAD_RFID.c: 80:     }
  4736   000AF8  060B               	decf	MFRC522_Wr@i^0,f,c
  4737   000AFA  500B               	movf	MFRC522_Wr@i^0,w,c
  4738   000AFC  A4D8               	btfss	status,2,c
  4739   000AFE  EF83  F005         	goto	u1741
  4740   000B02  EF85  F005         	goto	u1740
  4741   000B06                     u1741:
  4742   000B06  EF62  F005         	goto	l2427
  4743   000B0A                     u1740:
  4744   000B0A                     
  4745                           ;TAD_RFID.c: 82:     LATCbits.LATC3 = 1;
  4746   000B0A  868B               	bsf	139,3,c	;volatile
  4747                           
  4748                           ;TAD_RFID.c: 83:     LATCbits.LATC2 = 1;
  4749   000B0C  848B               	bsf	139,2,c	;volatile
  4750   000B0E  0012               	return		;funcret
  4751   000B10                     __end_of_MFRC522_Wr:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _delay_us *****************
  4755 ;; Defined at:
  4756 ;;		line 23 in file "TAD_RFID.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  howMany         1    wreg     unsigned char 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  howMany         1    4[COMRAM] unsigned char 
  4761 ;;  x               1    5[COMRAM] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0, prodl, prodh
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1
  4771 ;;      Params:         0       0       0
  4772 ;;      Locals:         2       0       0
  4773 ;;      Temps:          3       0       0
  4774 ;;      Totals:         5       0       0
  4775 ;;Total ram usage:        5 bytes
  4776 ;; Hardware stack levels used: 1
  4777 ;; Hardware stack levels required when called: 3
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_MFRC522_Wr
  4782 ;;		_MFRC522_Reset
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text34
  4787   000E1A                     __ptext34:
  4788                           	callstack 0
  4789   000E1A                     _delay_us:
  4790                           	callstack 24
  4791                           
  4792                           ;incstack = 0
  4793                           ;delay_us@howMany stored from wreg
  4794   000E1A  6E05               	movwf	delay_us@howMany^0,c
  4795   000E1C                     
  4796                           ;TAD_RFID.c: 25:     char x;;TAD_RFID.c: 26:     for (x = 0; x < howMany * 3; x++) __nop
      +                          ();
  4797   000E1C  6A06               	clrf	delay_us@x^0,c
  4798   000E1E  EF13  F007         	goto	l1259
  4799   000E22                     l197:
  4800   000E22  0000               	nop	
  4801   000E24  2A06               	incf	delay_us@x^0,f,c
  4802   000E26                     l1259:
  4803   000E26  5005               	movf	delay_us@howMany^0,w,c
  4804   000E28  0D03               	mullw	3
  4805   000E2A  5006               	movf	delay_us@x^0,w,c
  4806   000E2C  6E02               	movwf	??_delay_us^0,c
  4807   000E2E  6A03               	clrf	(??_delay_us+1)^0,c
  4808   000E30  50F3               	movf	243,w,c
  4809   000E32  5C02               	subwf	??_delay_us^0,w,c
  4810   000E34  5003               	movf	(??_delay_us+1)^0,w,c
  4811   000E36  0A80               	xorlw	128
  4812   000E38  6E04               	movwf	(??_delay_us+2)^0,c
  4813   000E3A  50F4               	movf	244,w,c
  4814   000E3C  0A80               	xorlw	128
  4815   000E3E  5804               	subwfb	(??_delay_us+2)^0,w,c
  4816   000E40  A0D8               	btfss	status,0,c
  4817   000E42  EF25  F007         	goto	u11
  4818   000E46  EF27  F007         	goto	u10
  4819   000E4A                     u11:
  4820   000E4A  EF11  F007         	goto	l197
  4821   000E4E                     u10:
  4822   000E4E  0012               	return		;funcret
  4823   000E50                     __end_of_delay_us:
  4824                           	callstack 0
  4825                           
  4826 ;; *************** function _MFRC522_Rd *****************
  4827 ;; Defined at:
  4828 ;;		line 29 in file "TAD_RFID.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  Address         1    wreg     unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  Address         1    2[COMRAM] unsigned char 
  4833 ;;  i               1    5[COMRAM] unsigned char 
  4834 ;;  ucResult        1    4[COMRAM] unsigned char 
  4835 ;;  ucAddr          1    3[COMRAM] unsigned char 
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      unsigned char 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1
  4845 ;;      Params:         0       0       0
  4846 ;;      Locals:         4       0       0
  4847 ;;      Temps:          1       0       0
  4848 ;;      Totals:         5       0       0
  4849 ;;Total ram usage:        5 bytes
  4850 ;; Hardware stack levels used: 1
  4851 ;; Hardware stack levels required when called: 3
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_MFRC522_Clear_Bit
  4856 ;;		_MFRC522_Set_Bit
  4857 ;;		_MFRC522_ToCard
  4858 ;;		_MFRC522_CRC
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text35
  4863   000B10                     __ptext35:
  4864                           	callstack 0
  4865   000B10                     _MFRC522_Rd:
  4866                           	callstack 23
  4867                           
  4868                           ;incstack = 0
  4869                           ;MFRC522_Rd@Address stored from wreg
  4870   000B10  6E03               	movwf	MFRC522_Rd@Address^0,c
  4871   000B12                     
  4872                           ;TAD_RFID.c: 30:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  4873   000B12  5003               	movf	MFRC522_Rd@Address^0,w,c
  4874   000B14  2403               	addwf	MFRC522_Rd@Address^0,w,c
  4875   000B16  0B7E               	andlw	126
  4876   000B18  0980               	iorlw	128
  4877   000B1A  6E04               	movwf	MFRC522_Rd@ucAddr^0,c
  4878   000B1C                     
  4879                           ;TAD_RFID.c: 31:     unsigned char ucResult = 0;
  4880   000B1C  6A05               	clrf	MFRC522_Rd@ucResult^0,c
  4881   000B1E                     
  4882                           ;TAD_RFID.c: 33:     LATCbits.LATC2 = 0;
  4883   000B1E  948B               	bcf	139,2,c	;volatile
  4884   000B20                     
  4885                           ;TAD_RFID.c: 34:     LATCbits.LATC3 = 0;
  4886   000B20  968B               	bcf	139,3,c	;volatile
  4887   000B22                     
  4888                           ;TAD_RFID.c: 36:     for (i = 8; i > 0; i--) {
  4889   000B22  0E08               	movlw	8
  4890   000B24  6E06               	movwf	MFRC522_Rd@i^0,c
  4891   000B26                     l1373:
  4892                           
  4893                           ;TAD_RFID.c: 37:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4894   000B26  BE04               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  4895   000B28  EF98  F005         	goto	u191
  4896   000B2C  EF9C  F005         	goto	u190
  4897   000B30                     u191:
  4898   000B30  6A02               	clrf	??_MFRC522_Rd^0,c
  4899   000B32  2A02               	incf	??_MFRC522_Rd^0,f,c
  4900   000B34  EF9D  F005         	goto	u208
  4901   000B38                     u190:
  4902   000B38  6A02               	clrf	??_MFRC522_Rd^0,c
  4903   000B3A                     u208:
  4904   000B3A  4602               	rlncf	??_MFRC522_Rd^0,f,c
  4905   000B3C  508B               	movf	139,w,c	;volatile
  4906   000B3E  1802               	xorwf	??_MFRC522_Rd^0,w,c
  4907   000B40  0BFD               	andlw	-3
  4908   000B42  1802               	xorwf	??_MFRC522_Rd^0,w,c
  4909   000B44  6E8B               	movwf	139,c	;volatile
  4910   000B46                     
  4911                           ;TAD_RFID.c: 38:         LATCbits.LATC2 = 1;
  4912   000B46  848B               	bsf	139,2,c	;volatile
  4913                           
  4914                           ;TAD_RFID.c: 40:         ucAddr <<= 1;
  4915   000B48  90D8               	bcf	status,0,c
  4916   000B4A  3604               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  4917   000B4C                     
  4918                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 0;
  4919   000B4C  948B               	bcf	139,2,c	;volatile
  4920   000B4E                     
  4921                           ;TAD_RFID.c: 43:     }
  4922   000B4E  0606               	decf	MFRC522_Rd@i^0,f,c
  4923   000B50  5006               	movf	MFRC522_Rd@i^0,w,c
  4924   000B52  A4D8               	btfss	status,2,c
  4925   000B54  EFAE  F005         	goto	u211
  4926   000B58  EFB0  F005         	goto	u210
  4927   000B5C                     u211:
  4928   000B5C  EF93  F005         	goto	l1373
  4929   000B60                     u210:
  4930   000B60                     
  4931                           ;TAD_RFID.c: 45:     for (i = 8; i > 0; i--) {
  4932   000B60  0E08               	movlw	8
  4933   000B62  6E06               	movwf	MFRC522_Rd@i^0,c
  4934   000B64                     l204:
  4935                           
  4936                           ;TAD_RFID.c: 46:         LATCbits.LATC2 = 1;
  4937   000B64  848B               	bsf	139,2,c	;volatile
  4938   000B66                     
  4939                           ;TAD_RFID.c: 48:         ucResult <<= 1;
  4940   000B66  90D8               	bcf	status,0,c
  4941   000B68  3605               	rlcf	MFRC522_Rd@ucResult^0,f,c
  4942                           
  4943                           ;TAD_RFID.c: 49:         ucResult|= PORTCbits.RC0;
  4944   000B6A  B082               	btfsc	130,0,c	;volatile
  4945   000B6C  EFBA  F005         	goto	u221
  4946   000B70  EFBD  F005         	goto	u220
  4947   000B74                     u221:
  4948   000B74  0E01               	movlw	1
  4949   000B76  EFBE  F005         	goto	u226
  4950   000B7A                     u220:
  4951   000B7A  0E00               	movlw	0
  4952   000B7C                     u226:
  4953   000B7C  1205               	iorwf	MFRC522_Rd@ucResult^0,f,c
  4954   000B7E                     
  4955                           ;TAD_RFID.c: 50:         LATCbits.LATC2 = 0;
  4956   000B7E  948B               	bcf	139,2,c	;volatile
  4957   000B80                     
  4958                           ;TAD_RFID.c: 52:     }
  4959   000B80  0606               	decf	MFRC522_Rd@i^0,f,c
  4960   000B82  5006               	movf	MFRC522_Rd@i^0,w,c
  4961   000B84  A4D8               	btfss	status,2,c
  4962   000B86  EFC7  F005         	goto	u231
  4963   000B8A  EFC9  F005         	goto	u230
  4964   000B8E                     u231:
  4965   000B8E  EFB2  F005         	goto	l204
  4966   000B92                     u230:
  4967   000B92                     
  4968                           ;TAD_RFID.c: 54:     LATCbits.LATC3 = 1;
  4969   000B92  868B               	bsf	139,3,c	;volatile
  4970                           
  4971                           ;TAD_RFID.c: 55:     LATCbits.LATC2 = 1;
  4972   000B94  848B               	bsf	139,2,c	;volatile
  4973   000B96                     
  4974                           ;TAD_RFID.c: 56:     return ucResult;
  4975   000B96  5005               	movf	MFRC522_Rd@ucResult^0,w,c
  4976   000B98  0012               	return		;funcret
  4977   000B9A                     __end_of_MFRC522_Rd:
  4978                           	callstack 0
  4979                           
  4980 ;; *************** function _InitPortDirections *****************
  4981 ;; Defined at:
  4982 ;;		line 15 in file "TAD_RFID.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		None
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1
  4996 ;;      Params:         0       0       0
  4997 ;;      Locals:         0       0       0
  4998 ;;      Temps:          0       0       0
  4999 ;;      Totals:         0       0       0
  5000 ;;Total ram usage:        0 bytes
  5001 ;; Hardware stack levels used: 1
  5002 ;; Hardware stack levels required when called: 3
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_initRFID
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text36
  5011   00106C                     __ptext36:
  5012                           	callstack 0
  5013   00106C                     _InitPortDirections:
  5014                           	callstack 26
  5015   00106C                     
  5016                           ;TAD_RFID.c: 16:     TRISCbits.TRISC0 = 1;
  5017   00106C  8094               	bsf	148,0,c	;volatile
  5018                           
  5019                           ;TAD_RFID.c: 17:     TRISCbits.TRISC1 = 0;
  5020   00106E  9294               	bcf	148,1,c	;volatile
  5021                           
  5022                           ;TAD_RFID.c: 18:     TRISCbits.TRISC2 = 0;
  5023   001070  9494               	bcf	148,2,c	;volatile
  5024                           
  5025                           ;TAD_RFID.c: 19:     TRISCbits.TRISC3 = 0;
  5026   001072  9694               	bcf	148,3,c	;volatile
  5027                           
  5028                           ;TAD_RFID.c: 20:     TRISCbits.TRISC4 = 0;
  5029   001074  9894               	bcf	148,4,c	;volatile
  5030   001076  0012               	return		;funcret
  5031   001078                     __end_of_InitPortDirections:
  5032                           	callstack 0
  5033                           
  5034 ;; *************** function _Terminal_Init *****************
  5035 ;; Defined at:
  5036 ;;		line 25 in file "TAD_TERMINAL.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;		None
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  1    wreg      void 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMRAM   BANK0   BANK1
  5050 ;;      Params:         0       0       0
  5051 ;;      Locals:         0       0       0
  5052 ;;      Temps:          0       0       0
  5053 ;;      Totals:         0       0       0
  5054 ;;Total ram usage:        0 bytes
  5055 ;; Hardware stack levels used: 1
  5056 ;; Hardware stack levels required when called: 3
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_main
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text37
  5065   001042                     __ptext37:
  5066                           	callstack 0
  5067   001042                     _Terminal_Init:
  5068                           	callstack 27
  5069   001042                     
  5070                           ;TAD_TERMINAL.c: 26:  TXSTA = 0x24;
  5071   001042  0E24               	movlw	36
  5072   001044  6EAC               	movwf	172,c	;volatile
  5073                           
  5074                           ;TAD_TERMINAL.c: 27:  RCSTA = 0x90;
  5075   001046  0E90               	movlw	144
  5076   001048  6EAB               	movwf	171,c	;volatile
  5077                           
  5078                           ;TAD_TERMINAL.c: 28:  SPBRG = 64;
  5079   00104A  0E40               	movlw	64
  5080   00104C  6EAF               	movwf	175,c	;volatile
  5081   00104E                     
  5082                           ;TAD_TERMINAL.c: 29:  BAUDCON = 0x00;
  5083   00104E  6AB8               	clrf	184,c	;volatile
  5084   001050                     
  5085                           ;TAD_TERMINAL.c: 30:  hashtag_pressed = 0;
  5086   001050  6A69               	clrf	_hashtag_pressed^0,c
  5087   001052  0012               	return		;funcret
  5088   001054                     __end_of_Terminal_Init:
  5089                           	callstack 0
  5090                           
  5091 ;; *************** function _TI_Init *****************
  5092 ;; Defined at:
  5093 ;;		line 32 in file "TAD_TIMER.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  counter         1    1[COMRAM] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1
  5107 ;;      Params:         0       0       0
  5108 ;;      Locals:         1       0       0
  5109 ;;      Temps:          0       0       0
  5110 ;;      Totals:         1       0       0
  5111 ;;Total ram usage:        1 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 3
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_main
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text38
  5122   000EB8                     __ptext38:
  5123                           	callstack 0
  5124   000EB8                     _TI_Init:
  5125                           	callstack 27
  5126   000EB8                     
  5127                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  5128   000EB8  6A02               	clrf	TI_Init@counter^0,c
  5129   000EBA                     l1853:
  5130                           
  5131                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  5132   000EBA  5002               	movf	TI_Init@counter^0,w,c
  5133   000EBC  0D05               	mullw	5
  5134   000EBE  50F3               	movf	243,w,c
  5135   000EC0  0F4F               	addlw	low (_Timers+4)
  5136   000EC2  6ED9               	movwf	fsr2l,c
  5137   000EC4  6ADA               	clrf	fsr2h,c
  5138   000EC6  6ADF               	clrf	indf2,c
  5139   000EC8                     
  5140                           ;TAD_TIMER.c: 35:  }
  5141   000EC8  2A02               	incf	TI_Init@counter^0,f,c
  5142   000ECA  0E03               	movlw	3
  5143   000ECC  6402               	cpfsgt	TI_Init@counter^0,c
  5144   000ECE  EF6B  F007         	goto	u781
  5145   000ED2  EF6D  F007         	goto	u780
  5146   000ED6                     u781:
  5147   000ED6  EF5D  F007         	goto	l1853
  5148   000EDA                     u780:
  5149   000EDA                     
  5150                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  5151   000EDA  0E82               	movlw	130
  5152   000EDC  6ED5               	movwf	213,c	;volatile
  5153                           
  5154                           ;TAD_TIMER.c: 37:     TMR0=64911;
  5155   000EDE  0EFD               	movlw	253
  5156   000EE0  6ED7               	movwf	215,c	;volatile
  5157   000EE2  0E8F               	movlw	143
  5158   000EE4  6ED6               	movwf	214,c	;volatile
  5159   000EE6                     
  5160                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  5161   000EE6  94F2               	bcf	242,2,c	;volatile
  5162   000EE8                     
  5163                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  5164   000EE8  8AF2               	bsf	242,5,c	;volatile
  5165   000EEA  0012               	return		;funcret
  5166   000EEC                     __end_of_TI_Init:
  5167                           	callstack 0
  5168                           
  5169 ;; *************** function _LowRSI *****************
  5170 ;; Defined at:
  5171 ;;		line 31 in file "main.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		None
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1
  5185 ;;      Params:         0       0       0
  5186 ;;      Locals:         0       0       0
  5187 ;;      Temps:          1       0       0
  5188 ;;      Totals:         1       0       0
  5189 ;;Total ram usage:        1 bytes
  5190 ;; Hardware stack levels used: 1
  5191 ;; Hardware stack levels required when called: 2
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		Interrupt level 1
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	intcodelo
  5200   000018                     __pintcodelo:
  5201                           	callstack 0
  5202   000018                     _LowRSI:
  5203                           	callstack 21
  5204                           
  5205                           ;incstack = 0
  5206   000018  8074               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  5207   00001A  CFE0 F001          	movff	bsr,??_LowRSI
  5208   00001E  C001  FFE0         	movff	??_LowRSI,bsr
  5209   000022  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  5210   000024  0010               	retfie	
  5211   000026                     __end_of_LowRSI:
  5212                           	callstack 0
  5213                           
  5214 ;; *************** function _HighRSI *****************
  5215 ;; Defined at:
  5216 ;;		line 27 in file "main.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1
  5230 ;;      Params:         0       0       0
  5231 ;;      Locals:         0       0       0
  5232 ;;      Temps:          0       0       0
  5233 ;;      Totals:         0       0       0
  5234 ;;Total ram usage:        0 bytes
  5235 ;; Hardware stack levels used: 1
  5236 ;; Hardware stack levels required when called: 1
  5237 ;; This function calls:
  5238 ;;		_RSI_Timer0
  5239 ;; This function is called by:
  5240 ;;		Interrupt level 2
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	intcode
  5245   000008                     __pintcode:
  5246                           	callstack 0
  5247   000008                     _HighRSI:
  5248                           	callstack 21
  5249                           
  5250                           ;incstack = 0
  5251   000008  8274               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5252   00000A  EFF8  F007         	goto	int_func
  5253                           
  5254                           	psect	intcode_body
  5255   000FF0                     __pintcode_body:
  5256                           	callstack 21
  5257   000FF0                     int_func:
  5258                           	callstack 21
  5259   000FF0                     
  5260                           ;main.c: 29:  }
  5261   000FF0  A4F2               	btfss	242,2,c	;volatile
  5262   000FF2  EFFD  F007         	goto	i2u130_41
  5263   000FF6  EFFF  F007         	goto	i2u130_40
  5264   000FFA                     i2u130_41:
  5265   000FFA  EF01  F008         	goto	i2l24
  5266   000FFE                     i2u130_40:
  5267   000FFE  ECEC  F007         	call	_RSI_Timer0	;wreg free
  5268   001002                     i2l24:
  5269   001002  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5270   001004  0011               	retfie		f
  5271   001006                     __end_of_HighRSI:
  5272                           	callstack 0
  5273                           
  5274 ;; *************** function _RSI_Timer0 *****************
  5275 ;; Defined at:
  5276 ;;		line 25 in file "TAD_TIMER.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1
  5290 ;;      Params:         0       0       0
  5291 ;;      Locals:         0       0       0
  5292 ;;      Temps:          0       0       0
  5293 ;;      Totals:         0       0       0
  5294 ;;Total ram usage:        0 bytes
  5295 ;; Hardware stack levels used: 1
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_HighRSI
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text41
  5304   000FD8                     __ptext41:
  5305                           	callstack 0
  5306   000FD8                     _RSI_Timer0:
  5307                           	callstack 21
  5308   000FD8                     
  5309                           ;TAD_TIMER.c: 27:     TMR0=64911;
  5310   000FD8  0EFD               	movlw	253
  5311   000FDA  6ED7               	movwf	215,c	;volatile
  5312   000FDC  0E8F               	movlw	143
  5313   000FDE  6ED6               	movwf	214,c	;volatile
  5314   000FE0                     
  5315                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  5316   000FE0  94F2               	bcf	4082,2,c	;volatile
  5317   000FE2                     
  5318                           ;TAD_TIMER.c: 29:     Tics++;
  5319   000FE2  0E01               	movlw	1
  5320   000FE4  265F               	addwf	_Tics^0,f,c	;volatile
  5321   000FE6  0E00               	movlw	0
  5322   000FE8  2260               	addwfc	(_Tics+1)^0,f,c	;volatile
  5323   000FEA  2261               	addwfc	(_Tics+2)^0,f,c	;volatile
  5324   000FEC  2262               	addwfc	(_Tics+3)^0,f,c	;volatile
  5325   000FEE  0012               	return		;funcret
  5326   000FF0                     __end_of_RSI_Timer0:
  5327                           	callstack 0
  5328                           
  5329                           	psect	rparam
  5330   000001                     ___rparam_used  equ	1
  5331   000000                     ___param_bank   equ	0
  5332   000000                     __Lparam        equ	__Lrparam
  5333   000000                     __Hparam        equ	__Hrparam
  5334                           
  5335                           	psect	temp
  5336   000074                     btemp:
  5337                           	callstack 0
  5338   000074                     	ds	1
  5339   000074                     int$flags       set	btemp
  5340   000075                     wtemp8          set	btemp+1
  5341   000075                     ttemp5          set	btemp+1
  5342   000078                     ttemp6          set	btemp+4
  5343   00007C                     ttemp7          set	btemp+8
  5344                           
  5345                           	psect	idloc
  5346                           
  5347                           ;Config register IDLOC0 @ 0x200000
  5348                           ;	unspecified, using default values
  5349   200000                     	org	2097152
  5350   200000  FF                 	db	255
  5351                           
  5352                           ;Config register IDLOC1 @ 0x200001
  5353                           ;	unspecified, using default values
  5354   200001                     	org	2097153
  5355   200001  FF                 	db	255
  5356                           
  5357                           ;Config register IDLOC2 @ 0x200002
  5358                           ;	unspecified, using default values
  5359   200002                     	org	2097154
  5360   200002  FF                 	db	255
  5361                           
  5362                           ;Config register IDLOC3 @ 0x200003
  5363                           ;	unspecified, using default values
  5364   200003                     	org	2097155
  5365   200003  FF                 	db	255
  5366                           
  5367                           ;Config register IDLOC4 @ 0x200004
  5368                           ;	unspecified, using default values
  5369   200004                     	org	2097156
  5370   200004  FF                 	db	255
  5371                           
  5372                           ;Config register IDLOC5 @ 0x200005
  5373                           ;	unspecified, using default values
  5374   200005                     	org	2097157
  5375   200005  FF                 	db	255
  5376                           
  5377                           ;Config register IDLOC6 @ 0x200006
  5378                           ;	unspecified, using default values
  5379   200006                     	org	2097158
  5380   200006  FF                 	db	255
  5381                           
  5382                           ;Config register IDLOC7 @ 0x200007
  5383                           ;	unspecified, using default values
  5384   200007                     	org	2097159
  5385   200007  FF                 	db	255
  5386                           
  5387                           	psect	config
  5388                           
  5389                           ; Padding undefined space
  5390   300000                     	org	3145728
  5391   300000  FF                 	db	255
  5392                           
  5393                           ;Config register CONFIG1H @ 0x300001
  5394                           ;	Oscillator
  5395                           ;	OSC = HS, HS Oscillator
  5396                           ;	Fail-Safe Clock Monitor Enable bit
  5397                           ;	FCMEN = 0x0, unprogrammed default
  5398                           ;	Internal/External Oscillator Switchover bit
  5399                           ;	IESO = 0x0, unprogrammed default
  5400   300001                     	org	3145729
  5401   300001  02                 	db	2
  5402                           
  5403                           ;Config register CONFIG2L @ 0x300002
  5404                           ;	Power-up Timer Enable bit
  5405                           ;	PWRT = OFF, PWRT disabled
  5406                           ;	Brown-out Reset Enable bits
  5407                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  5408                           ;	Brown-out Reset Voltage bits
  5409                           ;	BORV = 0x3, unprogrammed default
  5410   300002                     	org	3145730
  5411   300002  19                 	db	25
  5412                           
  5413                           ;Config register CONFIG2H @ 0x300003
  5414                           ;	Watchdog Timer Enable bit
  5415                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5416                           ;	Watchdog Timer Postscale Select bits
  5417                           ;	WDTPS = 0xF, unprogrammed default
  5418   300003                     	org	3145731
  5419   300003  1E                 	db	30
  5420                           
  5421                           ; Padding undefined space
  5422   300004                     	org	3145732
  5423   300004  FF                 	db	255
  5424                           
  5425                           ;Config register CONFIG3H @ 0x300005
  5426                           ;	CCP2 MUX bit
  5427                           ;	CCP2MX = 0x1, unprogrammed default
  5428                           ;	PORTB A/D Enable bit
  5429                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  5430                           ;	Low-Power Timer1 Oscillator Enable bit
  5431                           ;	LPT1OSC = 0x0, unprogrammed default
  5432                           ;	MCLR Pin Enable bit
  5433                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  5434   300005                     	org	3145733
  5435   300005  01                 	db	1
  5436                           
  5437                           ;Config register CONFIG4L @ 0x300006
  5438                           ;	Stack Full/Underflow Reset Enable bit
  5439                           ;	STVREN = 0x1, unprogrammed default
  5440                           ;	Single-Supply ICSP Enable bit
  5441                           ;	LVP = OFF, Single-Supply ICSP disabled
  5442                           ;	Boot Block Size Select bits
  5443                           ;	BBSIZ = 0x0, unprogrammed default
  5444                           ;	Extended Instruction Set Enable bit
  5445                           ;	XINST = 0x0, unprogrammed default
  5446                           ;	Background Debugger Enable bit
  5447                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5448   300006                     	org	3145734
  5449   300006  81                 	db	129
  5450                           
  5451                           ; Padding undefined space
  5452   300007                     	org	3145735
  5453   300007  FF                 	db	255
  5454                           
  5455                           ;Config register CONFIG5L @ 0x300008
  5456                           ;	unspecified, using default values
  5457                           ;	Code Protection bit
  5458                           ;	CP0 = 0x1, unprogrammed default
  5459                           ;	Code Protection bit
  5460                           ;	CP1 = 0x1, unprogrammed default
  5461   300008                     	org	3145736
  5462   300008  03                 	db	3
  5463                           
  5464                           ;Config register CONFIG5H @ 0x300009
  5465                           ;	unspecified, using default values
  5466                           ;	Boot Block Code Protection bitProtect Boot
  5467                           ;	CPB = 0x1, unprogrammed default
  5468                           ;	Data EEPROM Code Protection bit
  5469                           ;	CPD = 0x1, unprogrammed default
  5470   300009                     	org	3145737
  5471   300009  C0                 	db	192
  5472                           
  5473                           ;Config register CONFIG6L @ 0x30000A
  5474                           ;	unspecified, using default values
  5475                           ;	Write Protection bit
  5476                           ;	WRT0 = 0x1, unprogrammed default
  5477                           ;	Write Protection bit
  5478                           ;	WRT1 = 0x1, unprogrammed default
  5479   30000A                     	org	3145738
  5480   30000A  03                 	db	3
  5481                           
  5482                           ;Config register CONFIG6H @ 0x30000B
  5483                           ;	unspecified, using default values
  5484                           ;	Configuration Register Write Protection bit
  5485                           ;	WRTC = 0x1, unprogrammed default
  5486                           ;	Boot Block Write Protection bit
  5487                           ;	WRTB = 0x1, unprogrammed default
  5488                           ;	Data EEPROM Write Protection bit
  5489                           ;	WRTD = 0x1, unprogrammed default
  5490   30000B                     	org	3145739
  5491   30000B  E0                 	db	224
  5492                           
  5493                           ;Config register CONFIG7L @ 0x30000C
  5494                           ;	unspecified, using default values
  5495                           ;	Table Read Protection bit
  5496                           ;	EBTR0 = 0x1, unprogrammed default
  5497                           ;	Table Read Protection bit
  5498                           ;	EBTR1 = 0x1, unprogrammed default
  5499   30000C                     	org	3145740
  5500   30000C  03                 	db	3
  5501                           
  5502                           ;Config register CONFIG7H @ 0x30000D
  5503                           ;	unspecified, using default values
  5504                           ;	Boot Block Table Read Protection bit
  5505                           ;	EBTRB = 0x1, unprogrammed default
  5506   30000D                     	org	3145741
  5507   30000D  40                 	db	64
  5508                           tosu	equ	0xFFF
  5509                           tosh	equ	0xFFE
  5510                           tosl	equ	0xFFD
  5511                           stkptr	equ	0xFFC
  5512                           pclatu	equ	0xFFB
  5513                           pclath	equ	0xFFA
  5514                           pcl	equ	0xFF9
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           indf0	equ	0xFEF
  5522                           postinc0	equ	0xFEE
  5523                           postdec0	equ	0xFED
  5524                           preinc0	equ	0xFEC
  5525                           plusw0	equ	0xFEB
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           postinc1	equ	0xFE6
  5531                           postdec1	equ	0xFE5
  5532                           preinc1	equ	0xFE4
  5533                           plusw1	equ	0xFE3
  5534                           fsr1h	equ	0xFE2
  5535                           fsr1l	equ	0xFE1
  5536                           bsr	equ	0xFE0
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           preinc2	equ	0xFDC
  5541                           plusw2	equ	0xFDB
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8

Data Sizes:
    Strings     216
    Constant    12
    Data        0
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     74     115
    BANK0           128      0      32
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> showTecla@buffer(COMRAM[32]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> showTecla@buffer(COMRAM[32]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    S1281$buffer	PTR unsigned char  size(1) Largest target is 32
		 -> showTecla@buffer(COMRAM[32]), 

    S1281$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 32
		 -> showTecla@buffer(COMRAM[32]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> displayUID@hexString(COMRAM[11]), showTecla@buffer(COMRAM[32]), STR_10(CODE[33]), STR_11(CODE[9]), 
		 -> STR_12(CODE[14]), STR_13(CODE[33]), STR_2(CODE[6]), STR_3(CODE[2]), 
		 -> STR_4(CODE[18]), STR_5(CODE[18]), STR_6(CODE[18]), STR_7(CODE[19]), 
		 -> STR_8(CODE[27]), STR_9(CODE[29]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _motorTeclado->_showTecla
    _showTecla->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Wr->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3588
                            _TI_Init
                      _Terminal_Init
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     148
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      74
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0    2011
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                          _showTecla
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        2     2      0      15
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _showTecla                                           32    32      0    1884
                                             42 COMRAM    32    32      0
                _Terminal_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18    14      4    1760
                                             26 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    1559
                                             22 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           11     8      3    1434
                                             11 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     230
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      67
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2      74
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1271
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1271
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     245
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     404
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     404
                                             11 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     407
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     407
                                             11 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     215
                                              6 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     105
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _showTecla
       _Terminal_SendString
         _Terminal_SendChar
         _Terminal_TXAvailable
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
     _showMenu
       _Terminal_SendString

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0      32     25.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     74     115     91.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     147      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Mar 04 15:57:17 2025

       __end_ofGetTecla@F3224 020D         ?_Terminal_ReceiveChar 0001                    _RSI_Timer0 0FD8  
                 MFRC522_Rd@i 0006                   MFRC522_Wr@i 000B                            l60 0EEA  
                          l70 0F82                            l73 0DDA                            l66 0D40  
                          u10 0E4E                            u11 0E4A                  ___awdiv@sign 0007  
                  _TI_GetTics 0D90                            bsr 0FE0          ??_InitPortDirections 0002  
                         l120 1090                           l114 1096                           l204 0B64  
                         l212 0B0A                           l205 0B92                           l213 0B0E  
                         l301 1080                           l117 102C                           l206 0B98  
                         l222 0F14                           l231 0D8E                           l151 04FA  
                         l216 0FD6                           l225 105E                           l219 1040  
                         l171 07DA                           l163 0790                           l228 106A  
                         l180 0FA0                           l159 0CEA                           l193 1076  
                         l169 084C                           l453 1052                           l197 0E22  
                         l462 1088                           l199 0E4E                           l456 0FBC  
                         l465 109A                           l474 0C8E                           l459 1018  
                         l732 090E                           l477 0C1A                           l745 09BC  
                         l498 0788                           u210 0B60                           u211 0B5C  
                         u220 0B7A                           u221 0B74                           u230 0B92  
                         u231 0B8E                           u208 0B3A                           u226 0B7C  
                         u190 0B38                           u191 0B30                           u610 0CA2  
                         u611 0C9E                           u620 0CBC                           u621 0CB8  
                         u630 0CD6                           u631 0CD2                           u640 0832  
                         u770 1016                           u771 1010                           u780 0EDA  
                         u781 0ED6                           u776 1018                           _abs 0E84  
                ___awmod@sign 0007                           wreg 0FE8                ??_MFRC522_Init 000F  
                        ?_abs 0008                          l1230 0EB6                          l1223 0E18  
                        l1217 06B2                          l1242 0A66                          l1227 0E9E  
                        l1501 1084                          l2301 0850                          l1253 109C  
                        l1255 0E1C                          l2311 0880                          l2303 085E  
                        l1361 0B1C                          l1257 0E24                          l2401 0A74  
                        l2321 08AE                          l2313 0884                          l2305 0866  
                        l1363 0B1E                          l1259 0E26                          l2411 0A9A  
                        l2403 0A76                          l2331 08E2                          l2323 08BC  
                        l2315 088C                          l2307 086A                          l1179 0E82  
                        l1381 0B50                          l1373 0B26                          l1365 0B20  
                        l2421 0AB0                          l2413 0AA0                          l1701 07E8  
                        l2333 08E8                          l2325 08C2                          l2317 089E  
                        l2309 0878                          l2501 0DE4                          l1391 0B80  
                        l1383 0B60                          l1375 0B46                          l1367 0B22  
                        l1359 0B12                          l2431 0AEA                          l2423 0AC0  
                        l2415 0AA6                          l1711 0824                          l2327 08D8  
                        l2319 08A6                          l2335 08EE                          l2351 092C  
                        l2343 0910                          l2503 0DF4                          l2511 0E58  
                        l1393 0B82                          l1377 0B4C                          l2433 0AF0  
                        l2417 0AA8                          l2409 0A7A                          l1713 083C  
                        l3161 0806                          l2521 0C1C                          l2337 08FE  
                        l2329 08E0                          l2361 0964                          l2353 093A  
                        l2345 0912                          l2441 04FC                          l2505 0E10  
                        l2513 0E60                          l1395 0B96                          l1387 0B66  
                        l1379 0B4E                          l2435 0AF2                          l2427 0AC4  
                        l2419 0AAE                          l2531 0EEC                          l1651 0F80  
                        l2523 0C20                          l2339 0906                          l2363 0972  
                        l2371 099C                          l2355 0942                          l2347 0920  
                        l2451 0540                          l2443 051E                          l2515 0E68  
                        l1725 106C                          l1389 0B7E                          l2437 0AF8  
                        l2429 0AE4                          l2541 1060                          l2533 0EEE  
                        l1709 07F0                          l2525 0C36                          l2373 09AC  
                        l2365 0988                          l2357 0954                          l2349 0928  
                        l2381 09CE                          l2461 05B2                          l2453 055C  
                        l2445 0526                          l2517 0E78                          l2509 0E50  
                        l2439 0AFA                          l2535 0EF4                          l2631 0CF2  
                        l1663 108A                          l1647 0F62                          l2527 0C5A  
                        l2375 09B4                          l2367 0990                          l2359 095C  
                        l2383 09DE                          l2471 0630                          l2463 05E2  
                        l2455 0578                          l2447 0532                          l1671 0CA2  
                        l1831 1006                          l2537 0EFC                          l1665 108E  
                        l1649 0F64                          l2529 0C5E                          l2369 0996  
                        l2393 0E84                          l2385 09E8                          l2473 0640  
                        l2465 05FE                          l2457 0590                          l2481 0684  
                        l2449 0536                          l1681 0CDA                          l1673 0CAA  
                        l2801 035E                          l2491 0FC0                          l2539 1054  
                        l2635 0D0A                          l1691 07AE                          l1683 078A  
                        l1659 1092                          l2643 0D92                          l2299 084E  
                        l2395 0E92                          l2387 0A04                          l2379 09BE  
                        l2475 0652                          l2467 0610                          l2459 059A  
                        l2651 0F96                          l1675 0CBC                          l1667 0C90  
                        l2811 0382                          l1835 1098                          l1861 0EE6  
                        l1853 0EBA                          l2397 0A6A                          l2493 1030  
                        l2653 0D42                          l2637 0D26                          l2629 0CEC  
                        l1685 0796                          l2645 0DA6                          l2389 0A36  
                        l2477 066C                          l2469 0620                          l2485 0690  
                        l1677 0CC4                          l1669 0C92                          l2821 03A6  
                        l2813 0392                          l2805 0368                          l1863 0EE8  
                        l1855 0EC8                          l1847 0EB8                          l2399 0A72  
                        l2655 0D46                          l2639 0D36                          l1687 079E  
                        l2495 0FA2                          l2479 066E                          l1679 0CD6  
                        l2831 03CA                          l2815 0396                          l2807 0378  
                        l2903 075E                          l1857 0ECA                          l1881 104E  
                        l2761 101A                          l1689 07A6                          l1697 07B4  
                        l2649 0F84                          l2833 03EA                          l2841 040C  
                        l2817 039A                   _TI_NewTimer 0CEC                          l1859 0EDA  
                        l1883 1050                          l2771 1078                          l2763 101E  
                        l1699 07E0                          l2499 0DDC                          l2851 045C  
                        l2843 041C                          l2835 03FC                          l2819 03A0  
                        l2773 107C                          l2765 1020                          l2861 04A6  
                        l2845 043C                          l2837 0400                          l2829 03BA  
                        l2781 0304                          l2909 0772                          l1879 1042  
                        l2767 1022                          l2863 04B6                          l2855 0470  
                        l2847 044E                          l2839 0404                          l2791 032E  
                        l2783 0308                          l2871 04C4                          l2775 02E6  
                        l2759 0B9A                          l2769 1024                          l2865 04B8  
                        l2857 0480                          l2849 0454                          l2793 033E  
                        l2785 0310                          l2777 02F0                          l2881 06D4  
                        l2873 06B4                          l2867 04BC                          l2795 0342  
                        l2787 0320                          l2779 0300                          l2891 0718  
                        l2883 06E4                          l2875 06B8                          l2797 0346  
                        l2789 0326                          l2893 0728                          l2885 06E8  
                        l2877 06CC                          l2981 0F4E                          l2973 0F3C  
                        l2799 034E                          l2895 072E                          l2887 06F0  
                        l2879 06D0                          l2983 0F50                          l2975 0F44  
                        l2889 0704                          l2985 0F54                          l2977 0F48  
                        l2899 0746                          l2979 0F4C                          STR_1 02CC  
                        STR_2 02DF                          STR_4 029A                          STR_5 02AC  
                        STR_6 029A                          STR_7 0287                          STR_8 026C  
                        STR_9 024F                          u2040 0D06                          u2200 033E  
                        u2041 0D02                          u2201 033A                          u2050 0D26  
                        u2210 035E                          u2051 0D22                          u2211 035A  
                        u2300 044E                          u2220 0378                          u2301 044A  
                        u2221 0374                          u2310 046C                          u2230 0392  
                        u2311 0468                          u2231 038E                          _LATC 0F8B  
                        u1520 085E                          u1600 0954                          u2320 0480  
                        u2240 03B6                          u2400 075A                          _LATD 0F8C  
                        u1521 085A                          u1601 0950                          u2321 047C  
                        u2241 03B2                          u2401 0756                          u1530 0878  
                        u1610 0972                          u2330 04A2                          u2250 03CA  
                        u1531 0874                          u1611 096E                          u2331 049E  
                        u2251 03C6                          u1540 089E                          u1620 0988  
                        u2340 04B6                          u2260 03EA                          u2180 0300  
                        u1541 089A                          u1621 0984                          u2341 04B2  
                        u2261 03E6                          u2181 02FC                          u1710 0AC0  
                        u1550 08BC                          u1630 09AC                          u2270 03FC  
                        u2190 0320                          u2350 06CC                          u1711 0ABC  
                        u1551 08B8                          u1631 09A8                          u2271 03F8  
                        u2191 031C                          u2351 06C8                          u1720 0AD6  
                        u1560 08D8                          u1640 09CE                          u1800 0610  
                        u2280 041C                          u2360 06E4                          u1721 0ACE  
                        u1561 08D4                          u1641 09CA                          u1801 060C  
                        u2281 0418                          u2361 06E0                          u1570 08FE  
                        u1650 09DE                          u1810 0620                          u2290 043C  
                        u2370 0704                          u1571 08FA                          u1651 09DA  
                        u1811 061C                          u2291 0438                          u2371 0700  
                        u1740 0B0A                          u1708 0A8E                          u1900 0C8E  
                        u1580 0920                          u1660 0A04                          u1820 0630  
                        u2380 0718                          u1741 0B06                          u1901 0C8A  
                        u1581 091C                          u1661 0A00                          u1821 062C  
                        u2381 0714                          u1590 093A                          u1670 0A36  
                        u1830 0640                          u1750 051E                          u2390 0742  
                        u1591 0936                          u1671 0A32                          u1831 063C  
                        u1751 051A                          u2391 073E                          u1680 0E92  
                        u1840 0680                          u1760 055C                          u1681 0E8E  
                        u1841 067C                          u1761 0558                          u1738 0AD8  
                        u1690 0A8C                          u1850 0FB4                          u1770 0578  
                        u1691 0A84                          u1851 0FAC                          u1771 0574  
                        u1780 05AE                          u1860 0E10                          u1781 05A8  
                        u1861 0E0C                          u1870 0C36                          u1790 05B0  
                        u1871 0C32                          u1880 0C56                          u1858 0FB6  
                        u1890 0C7E                          u1887 0C4C                          u1897 0C74  
                        i1l29 001E                          i2l24 1002                          i2l55 0FEE  
                        _TMR0 0FD6                          _Tics 005F                          _Rows 006D  
                        abs@a 0008                          _dbuf 0080                          _main 0F3C  
                        _prec 0065                          fsr0h 0FEA                          fsr1h 0FE2  
                        indf0 0FEF                          fsr2h 0FDA                          fsr0l 0FE9  
                        indf2 0FDF                          fsr1l 0FE1                          fsr2l 0FD9  
                        btemp 0074               __end_of_TI_Init 0EEC                          prodh 0FF4  
                        prodl 0FF3                          start 0026               __end_of_HighRSI 1006  
                ___param_bank 0000               ??_MFRC522_Reset 000C                         ??_abs 000A  
                ?_initTeclado 0001                         ?_main 0001               __end_of___awdiv 0910  
                       STR_10 022E                         STR_11 02D6                         STR_12 02BE  
                       STR_13 020D               __end_of___awmod 09BE                         _T0CON 0FD5  
             ___awdiv@divisor 0004               ___awdiv@counter 0006                         _RCREG 0FAE  
                       _RCSTA 0FAB                  vfpfcnvrt@fmt 000D                         _SPBRG 0FAF  
                       _PORTD 0F83                         _TRISD 0F95                         _TXREG 0FAD  
                       _TXSTA 0FAC                         _Filas 0071                         _Timer 0072  
                       _flags 0067                         _fputc 09BE                  _TI_ResetTics 0F60  
                       _tecla 006F                         _timer 0073                         _width 0063  
                       _putch 109C                         tablat 0FF5             _MFRC522_Clear_Bit 0FBE  
                       ttemp5 0075                         ttemp6 0078                         ttemp7 007C  
                       status 0FD8                         wtemp8 0075               __end_of_sprintf 0E84  
          Terminal_SendChar@c 0002            ?_MFRC522_Clear_Bit 000C              __end_of_GetTecla 084E  
           _MFRC522_AntennaOn 1054        ??_Terminal_ReceiveChar 0002               __initialization 0F16  
                __end_of_main 0F60            ?_MFRC522_AntennaOn 0001           ??_MFRC522_Clear_Bit 000D  
                 ?_RSI_Timer0 0001                TI_Init@counter 0002              _initPortsTeclado 108A  
                 ?_TI_GetTics 0002                        ??_main 004B           ??_MFRC522_AntennaOn 000E  
               __activetblptr 0002            MFRC522_Rd@ucResult 0005               MFRC522_Wr@value 0007  
   __end_of_MFRC522_Clear_Bit 0FD8                        ?_fputc 0002              ___awdiv@dividend 0002  
                      ?_putch 0001                     ??_TI_Init 0002        Terminal_SendString@str 0005  
                      i2l2085 0FF0                        i2l2087 0FFE                        i2l1841 0FD8  
                      i2l1843 0FE0                        i2l1845 0FE2                 vfpfcnvrt@done 0010  
                      _TMR0IF 7F92                     ??_HighRSI 0001     __end_of_MFRC522_AntennaOn 1060  
            __end_of_delay_us 0E50                        _LowRSI 0018                        _RowAct 006B  
                      _Timers 004B                  vfprintf@cfmt 001A                     ??___awdiv 0006  
        __end_of_MFRC522_Init 0D90                     ??___awmod 0006              __end_of_initRFID 1082  
          motorTerminal@state 0068                        clear_0 0F1C                        clear_1 0F28  
            ___awdiv@quotient 0008               ___awmod@divisor 0004                        isa$std 0001  
             ___awmod@counter 0006                        fputc@c 0002              __end_of_showMenu 0C1C  
                __mediumconst 0200                        tblptrh 0FF7                        tblptrl 0FF6  
                      tblptru 0FF8                        putch@c 0001              __end_of_vfprintf 0E1A  
       __end_of_Terminal_Init 1054                     ??_sprintf 001F                    __accesstop 0080  
     __end_of__initialization 0F2E               delay_us@howMany 0005                 ___rparam_used 0001  
                ??_MFRC522_Rd 0002                  ??_MFRC522_Wr 0008            _MFRC522_AntennaOff 1060  
              __pcstackCOMRAM 0001           ?_MFRC522_AntennaOff 0001                 __end_of_fputc 0A68  
               __end_of_putch 109E          TI_NewTimer@Comptador 0004             __end_of_ReadFilas 1098  
            MFRC522_Rd@ucAddr 0004             motorTeclado@state 006E             ??_MFRC522_Set_Bit 000D  
          __end_of_MFRC522_Rd 0B9A            __end_of_MFRC522_Wr 0B10                     ?_GetTecla 0001  
                     ??_fputc 0005          ??_MFRC522_AntennaOff 000F                  ?_TI_NewTimer 0002  
                     ??_putch 0002                    __pbssBANK0 0080         __end_of_motorTerminal 078A  
      TI_NewTimer@TimerHandle 0002                       ?_LowRSI 0001              MFRC522_Wr@ucAddr 000A  
     TI_ResetTics@TimerHandle 0002                 _writeColumnas 0C90                       _BAUDCON 0FB8  
                   ?_delay_us 0001                    ??_GetTecla 0002             _Terminal_SendChar 1082  
                     _TI_Init 0EB8            ?_Terminal_SendChar 0001      __end_of_initPortsTeclado 1092  
                   ?_initRFID 0001                       _HighRSI 0008                       _Columns 006C  
         ??_Terminal_SendChar 0002                       __Hparam 0000                       __Lparam 0000  
                   ?_showMenu 0001                  ??_RSI_Timer0 0001                       ___awdiv 084E  
              ?_writeColumnas 0001                       ___awmod 0910                     ?_vfprintf 0017  
                __psmallconst 0200                  ??_TI_GetTics 0006                       __pcinit 0F16  
       __end_of_MFRC522_Reset 0F16                       __ramtop 0200                       __ptext0 0F3C  
                     __ptext1 06B4                       __ptext2 0B9A                       __ptext3 1098  
                     __ptext4 1006                       __ptext5 02E6                       __ptext6 0C90  
                     __ptext7 0F84                       __ptext8 0E50                       __ptext9 0DDC  
               ?_motorTeclado 0001     __end_of_Terminal_SendChar 108A              ___awmod@dividend 0002  
                  ??_delay_us 0002                       _sprintf 0E50                  _MFRC522_Init 0D42  
              __pintcode_body 0FF0          end_of_initialization 0F2E                    ??_initRFID 000F  
          __end_of_RSI_Timer0 0FF0                       fputc@fp 0004                 __Lmediumconst 0000  
                     int_func 0FF0            __end_of_TI_GetTics 0DDC             __end_of_showTecla 0FA2  
           __end_of_vfpfcnvrt 06B4                    ??_showMenu 0007                       postdec2 0FDD  
                     postinc0 0FEE                       postinc1 0FE6                       postinc2 0FDE  
            vfpfcnvrt@convarg 0012                 GetTecla@F3224 0201                    ??_vfprintf 001A  
              ??_motorTeclado 004B                     _PORTBbits 0F81                     _PORTCbits 0F82  
         _Terminal_SendString 0C1C         TI_GetTics@TimerHandle 000E                     _TRISBbits 0F93  
                   _TRISCbits 0F94          ?_Terminal_SendString 0005             MFRC522_Rd@Address 0003  
             ??_writeColumnas 0002                __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 101A  
             _MFRC522_Set_Bit 102E                   vfpfcnvrt@ap 000E                   vfpfcnvrt@cp 0011  
                 vfpfcnvrt@fp 000C                     _ColumnAct 006A           start_initialization 0F16  
                   _ReadFilas 1092                   __end_of_abs 0EB8  __end_of_Terminal_TXAvailable 0FBE  
       ??_Terminal_SendString 0007                      ??_LowRSI 0001                   vfprintf@fmt 0018  
               ??_initTeclado 0005                   __pbssCOMRAM 004B                    ?_ReadFilas 0001  
           MFRC522_Wr@Address 0009                 ?_TI_ResetTics 0001                      ?_TI_Init 0001  
           ?_initPortsTeclado 0001                      ?_HighRSI 0001          __end_of_motorTeclado 04FC  
          ??_initPortsTeclado 0002       __end_of_MFRC522_Set_Bit 1042           MFRC522_Set_Bit@addr 000D  
            writeColumnas@out 0003           MFRC522_Set_Bit@mask 000C                     __pintcode 0008  
                    ?___awdiv 0002    __end_of_InitPortDirections 1078                      ?___awmod 0002  
                 __pintcodelo 0018                   __smallconst 0200           __end_of_initTeclado 102E  
              ??_TI_ResetTics 0002                      ?_sprintf 001B                 _Terminal_Init 1042  
        _Terminal_RXAvailable 1006                      _LATBbits 0F8A                      _LATCbits 0F8B  
                   delay_us@x 0006               _hashtag_pressed 0069                      i2u130_40 0FFE  
                    i2u130_41 0FFA                      _PIR1bits 0F9E                     _showTecla 0F84  
                   _vfpfcnvrt 04FC          _Terminal_TXAvailable 0FA2                  GetTecla@fila 0011  
                 ??_ReadFilas 0002                      _GetTecla 078A  __end_of_Terminal_ReceiveChar 109C  
                  vfpfcnvrt@c 0016                ?_Terminal_Init 0001                      _Columnas 0070  
       ?_Terminal_RXAvailable 0001               showTecla@buffer 002B                 _motorTerminal 06B4  
            ?_MFRC522_Set_Bit 000C                      __Hrparam 0000         MFRC522_Clear_Bit@addr 000E  
       MFRC522_Clear_Bit@mask 000C                    vfprintf@ap 0019                      __Lrparam 0000  
                  vfprintf@fp 0017                    ?_showTecla 0001                   _initTeclado 101A  
       ?_Terminal_TXAvailable 0002                    ?_vfpfcnvrt 000C                    sprintf@fmt 001C  
                    _delay_us 0E1A                      __ptext10 04FC                      __ptext11 09BE  
                    __ptext20 0D90                      __ptext12 109C                      __ptext21 1092  
                    __ptext13 0E84                      __ptext30 102E                      __ptext22 078A  
                    __ptext14 0910                      __ptext31 1060                      __ptext23 101A  
                    __ptext15 084E                      __ptext32 0FBE                      __ptext24 108A  
                    __ptext16 0C1C                      __ptext41 0FD8                      __ptext33 0A68  
                    __ptext25 0CEC                      __ptext17 0FA2                      __ptext34 0E1A  
                    __ptext26 1078                      __ptext18 1082                      __ptext35 0B10  
                    __ptext27 0D42                      __ptext19 0F60                      __ptext36 106C  
                    __ptext28 0EEC                      __ptext37 1042                      __ptext29 1054  
                    __ptext38 0EB8                 ??_TI_NewTimer 0003                      _initRFID 1078  
              ?_motorTerminal 0001                    _MFRC522_Rd 0B10                    _MFRC522_Wr 0A68  
                    isa$xinst 0000                      _showMenu 0B9A          __end_of_TI_ResetTics 0F84  
                    int$flags 0074         __end_of_writeColumnas 0CEC                      _vfprintf 0DDC  
               _MFRC522_Reset 0EEC                  _motorTeclado 02E6                    _INTCONbits 0FF2  
             ??_Terminal_Init 0002     TI_GetTics@CopiaTicsActual 000A        ??_Terminal_RXAvailable 0002  
 __end_of_Terminal_SendString 0C90                      intlevel1 0000                      intlevel2 0000  
                   sprintf@ap 001F           __end_of_TI_NewTimer 0D42                   ??_showTecla 002B  
      ??_Terminal_TXAvailable 0004          _Terminal_ReceiveChar 1098                   ??_vfpfcnvrt 000F  
              ?_MFRC522_Reset 0001                      sprintf@f 0020                      sprintf@s 001B  
          _InitPortDirections 106C    __end_of_MFRC522_AntennaOff 106C                 ?_MFRC522_Init 0001  
             ??_motorTerminal 0007           ?_InitPortDirections 0001               GetTecla@columna 0010  
                 ?_MFRC522_Rd 0001                   ?_MFRC522_Wr 0007                GetTecla@keymap 0004  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 20 13:15:26 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70   000000                     
    71                           ; Generated 05/12/2024 GMT
    72                           ; 
    73                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4321 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105   000FE0                     bsr             equ	4064
   106   000FE9                     fsr0            equ	4073
   107   000FEA                     fsr0h           equ	4074
   108   000FE9                     fsr0l           equ	4073
   109   000FE1                     fsr1            equ	4065
   110   000FE2                     fsr1h           equ	4066
   111   000FE1                     fsr1l           equ	4065
   112   000FD9                     fsr2            equ	4057
   113   000FDA                     fsr2h           equ	4058
   114   000FD9                     fsr2l           equ	4057
   115   000FEF                     indf0           equ	4079
   116   000FE7                     indf1           equ	4071
   117   000FDF                     indf2           equ	4063
   118   000FF2                     intcon          equ	4082
   119   000000                     nvmcon          equ	0
   120   000FF9                     pcl             equ	4089
   121   000FFA                     pclath          equ	4090
   122   000FFB                     pclatu          equ	4091
   123   000FEB                     plusw0          equ	4075
   124   000FE3                     plusw1          equ	4067
   125   000FDB                     plusw2          equ	4059
   126   000FED                     postdec0        equ	4077
   127   000FE5                     postdec1        equ	4069
   128   000FDD                     postdec2        equ	4061
   129   000FEE                     postinc0        equ	4078
   130   000FE6                     postinc1        equ	4070
   131   000FDE                     postinc2        equ	4062
   132   000FEC                     preinc0         equ	4076
   133   000FE4                     preinc1         equ	4068
   134   000FDC                     preinc2         equ	4060
   135   000FF3                     prod            equ	4083
   136   000FF4                     prodh           equ	4084
   137   000FF3                     prodl           equ	4083
   138   000FD8                     status          equ	4056
   139   000FF5                     tablat          equ	4085
   140   000FF6                     tblptr          equ	4086
   141   000FF7                     tblptrh         equ	4087
   142   000FF6                     tblptrl         equ	4086
   143   000FF8                     tblptru         equ	4088
   144   000FFD                     tosl            equ	4093
   145   000FE8                     wreg            equ	4072
   146   000F80                     PORTA           equ	3968	;# 
   147   000F81                     PORTB           equ	3969	;# 
   148   000F82                     PORTC           equ	3970	;# 
   149   000F83                     PORTD           equ	3971	;# 
   150   000F84                     PORTE           equ	3972	;# 
   151   000F89                     LATA            equ	3977	;# 
   152   000F8A                     LATB            equ	3978	;# 
   153   000F8B                     LATC            equ	3979	;# 
   154   000F8C                     LATD            equ	3980	;# 
   155   000F8D                     LATE            equ	3981	;# 
   156   000F92                     TRISA           equ	3986	;# 
   157   000F92                     DDRA            equ	3986	;# 
   158   000F93                     TRISB           equ	3987	;# 
   159   000F93                     DDRB            equ	3987	;# 
   160   000F94                     TRISC           equ	3988	;# 
   161   000F94                     DDRC            equ	3988	;# 
   162   000F95                     TRISD           equ	3989	;# 
   163   000F95                     DDRD            equ	3989	;# 
   164   000F96                     TRISE           equ	3990	;# 
   165   000F96                     DDRE            equ	3990	;# 
   166   000F9B                     OSCTUNE         equ	3995	;# 
   167   000F9D                     PIE1            equ	3997	;# 
   168   000F9E                     PIR1            equ	3998	;# 
   169   000F9F                     IPR1            equ	3999	;# 
   170   000FA0                     PIE2            equ	4000	;# 
   171   000FA1                     PIR2            equ	4001	;# 
   172   000FA2                     IPR2            equ	4002	;# 
   173   000FA6                     EECON1          equ	4006	;# 
   174   000FA7                     EECON2          equ	4007	;# 
   175   000FA8                     EEDATA          equ	4008	;# 
   176   000FA9                     EEADR           equ	4009	;# 
   177   000FAB                     RCSTA           equ	4011	;# 
   178   000FAB                     RCSTA1          equ	4011	;# 
   179   000FAC                     TXSTA           equ	4012	;# 
   180   000FAC                     TXSTA1          equ	4012	;# 
   181   000FAD                     TXREG           equ	4013	;# 
   182   000FAD                     TXREG1          equ	4013	;# 
   183   000FAE                     RCREG           equ	4014	;# 
   184   000FAE                     RCREG1          equ	4014	;# 
   185   000FAF                     SPBRG           equ	4015	;# 
   186   000FAF                     SPBRG1          equ	4015	;# 
   187   000FB0                     SPBRGH          equ	4016	;# 
   188   000FB1                     T3CON           equ	4017	;# 
   189   000FB2                     TMR3            equ	4018	;# 
   190   000FB2                     TMR3L           equ	4018	;# 
   191   000FB3                     TMR3H           equ	4019	;# 
   192   000FB4                     CMCON           equ	4020	;# 
   193   000FB5                     CVRCON          equ	4021	;# 
   194   000FB6                     ECCP1AS         equ	4022	;# 
   195   000FB7                     ECCP1DEL        equ	4023	;# 
   196   000FB7                     PWM1CON         equ	4023	;# 
   197   000FB8                     BAUDCON         equ	4024	;# 
   198   000FB8                     BAUDCTL         equ	4024	;# 
   199   000FBA                     CCP2CON         equ	4026	;# 
   200   000FBB                     CCPR2           equ	4027	;# 
   201   000FBB                     CCPR2L          equ	4027	;# 
   202   000FBC                     CCPR2H          equ	4028	;# 
   203   000FBD                     CCP1CON         equ	4029	;# 
   204   000FBD                     ECCP1CON        equ	4029	;# 
   205   000FBE                     CCPR1           equ	4030	;# 
   206   000FBE                     CCPR1L          equ	4030	;# 
   207   000FBF                     CCPR1H          equ	4031	;# 
   208   000FC0                     ADCON2          equ	4032	;# 
   209   000FC1                     ADCON1          equ	4033	;# 
   210   000FC2                     ADCON0          equ	4034	;# 
   211   000FC3                     ADRES           equ	4035	;# 
   212   000FC3                     ADRESL          equ	4035	;# 
   213   000FC4                     ADRESH          equ	4036	;# 
   214   000FC5                     SSPCON2         equ	4037	;# 
   215   000FC6                     SSPCON1         equ	4038	;# 
   216   000FC7                     SSPSTAT         equ	4039	;# 
   217   000FC8                     SSPADD          equ	4040	;# 
   218   000FC9                     SSPBUF          equ	4041	;# 
   219   000FCA                     T2CON           equ	4042	;# 
   220   000FCB                     PR2             equ	4043	;# 
   221   000FCB                     MEMCON          equ	4043	;# 
   222   000FCC                     TMR2            equ	4044	;# 
   223   000FCD                     T1CON           equ	4045	;# 
   224   000FCE                     TMR1            equ	4046	;# 
   225   000FCE                     TMR1L           equ	4046	;# 
   226   000FCF                     TMR1H           equ	4047	;# 
   227   000FD0                     RCON            equ	4048	;# 
   228   000FD1                     WDTCON          equ	4049	;# 
   229   000FD2                     HLVDCON         equ	4050	;# 
   230   000FD2                     LVDCON          equ	4050	;# 
   231   000FD3                     OSCCON          equ	4051	;# 
   232   000FD5                     T0CON           equ	4053	;# 
   233   000FD6                     TMR0            equ	4054	;# 
   234   000FD6                     TMR0L           equ	4054	;# 
   235   000FD7                     TMR0H           equ	4055	;# 
   236   000FD8                     STATUS          equ	4056	;# 
   237   000FD9                     FSR2            equ	4057	;# 
   238   000FD9                     FSR2L           equ	4057	;# 
   239   000FDA                     FSR2H           equ	4058	;# 
   240   000FDB                     PLUSW2          equ	4059	;# 
   241   000FDC                     PREINC2         equ	4060	;# 
   242   000FDD                     POSTDEC2        equ	4061	;# 
   243   000FDE                     POSTINC2        equ	4062	;# 
   244   000FDF                     INDF2           equ	4063	;# 
   245   000FE0                     BSR             equ	4064	;# 
   246   000FE1                     FSR1            equ	4065	;# 
   247   000FE1                     FSR1L           equ	4065	;# 
   248   000FE2                     FSR1H           equ	4066	;# 
   249   000FE3                     PLUSW1          equ	4067	;# 
   250   000FE4                     PREINC1         equ	4068	;# 
   251   000FE5                     POSTDEC1        equ	4069	;# 
   252   000FE6                     POSTINC1        equ	4070	;# 
   253   000FE7                     INDF1           equ	4071	;# 
   254   000FE8                     WREG            equ	4072	;# 
   255   000FE9                     FSR0            equ	4073	;# 
   256   000FE9                     FSR0L           equ	4073	;# 
   257   000FEA                     FSR0H           equ	4074	;# 
   258   000FEB                     PLUSW0          equ	4075	;# 
   259   000FEC                     PREINC0         equ	4076	;# 
   260   000FED                     POSTDEC0        equ	4077	;# 
   261   000FEE                     POSTINC0        equ	4078	;# 
   262   000FEF                     INDF0           equ	4079	;# 
   263   000FF0                     INTCON3         equ	4080	;# 
   264   000FF1                     INTCON2         equ	4081	;# 
   265   000FF2                     INTCON          equ	4082	;# 
   266   000FF3                     PROD            equ	4083	;# 
   267   000FF3                     PRODL           equ	4083	;# 
   268   000FF4                     PRODH           equ	4084	;# 
   269   000FF5                     TABLAT          equ	4085	;# 
   270   000FF6                     TBLPTR          equ	4086	;# 
   271   000FF6                     TBLPTRL         equ	4086	;# 
   272   000FF7                     TBLPTRH         equ	4087	;# 
   273   000FF8                     TBLPTRU         equ	4088	;# 
   274   000FF9                     PCLAT           equ	4089	;# 
   275   000FF9                     PC              equ	4089	;# 
   276   000FF9                     PCL             equ	4089	;# 
   277   000FFA                     PCLATH          equ	4090	;# 
   278   000FFB                     PCLATU          equ	4091	;# 
   279   000FFC                     STKPTR          equ	4092	;# 
   280   000FFD                     TOS             equ	4093	;# 
   281   000FFD                     TOSL            equ	4093	;# 
   282   000FFE                     TOSH            equ	4094	;# 
   283   000FFF                     TOSU            equ	4095	;# 
   284   000F80                     PORTA           equ	3968	;# 
   285   000F81                     PORTB           equ	3969	;# 
   286   000F82                     PORTC           equ	3970	;# 
   287   000F83                     PORTD           equ	3971	;# 
   288   000F84                     PORTE           equ	3972	;# 
   289   000F89                     LATA            equ	3977	;# 
   290   000F8A                     LATB            equ	3978	;# 
   291   000F8B                     LATC            equ	3979	;# 
   292   000F8C                     LATD            equ	3980	;# 
   293   000F8D                     LATE            equ	3981	;# 
   294   000F92                     TRISA           equ	3986	;# 
   295   000F92                     DDRA            equ	3986	;# 
   296   000F93                     TRISB           equ	3987	;# 
   297   000F93                     DDRB            equ	3987	;# 
   298   000F94                     TRISC           equ	3988	;# 
   299   000F94                     DDRC            equ	3988	;# 
   300   000F95                     TRISD           equ	3989	;# 
   301   000F95                     DDRD            equ	3989	;# 
   302   000F96                     TRISE           equ	3990	;# 
   303   000F96                     DDRE            equ	3990	;# 
   304   000F9B                     OSCTUNE         equ	3995	;# 
   305   000F9D                     PIE1            equ	3997	;# 
   306   000F9E                     PIR1            equ	3998	;# 
   307   000F9F                     IPR1            equ	3999	;# 
   308   000FA0                     PIE2            equ	4000	;# 
   309   000FA1                     PIR2            equ	4001	;# 
   310   000FA2                     IPR2            equ	4002	;# 
   311   000FA6                     EECON1          equ	4006	;# 
   312   000FA7                     EECON2          equ	4007	;# 
   313   000FA8                     EEDATA          equ	4008	;# 
   314   000FA9                     EEADR           equ	4009	;# 
   315   000FAB                     RCSTA           equ	4011	;# 
   316   000FAB                     RCSTA1          equ	4011	;# 
   317   000FAC                     TXSTA           equ	4012	;# 
   318   000FAC                     TXSTA1          equ	4012	;# 
   319   000FAD                     TXREG           equ	4013	;# 
   320   000FAD                     TXREG1          equ	4013	;# 
   321   000FAE                     RCREG           equ	4014	;# 
   322   000FAE                     RCREG1          equ	4014	;# 
   323   000FAF                     SPBRG           equ	4015	;# 
   324   000FAF                     SPBRG1          equ	4015	;# 
   325   000FB0                     SPBRGH          equ	4016	;# 
   326   000FB1                     T3CON           equ	4017	;# 
   327   000FB2                     TMR3            equ	4018	;# 
   328   000FB2                     TMR3L           equ	4018	;# 
   329   000FB3                     TMR3H           equ	4019	;# 
   330   000FB4                     CMCON           equ	4020	;# 
   331   000FB5                     CVRCON          equ	4021	;# 
   332   000FB6                     ECCP1AS         equ	4022	;# 
   333   000FB7                     ECCP1DEL        equ	4023	;# 
   334   000FB7                     PWM1CON         equ	4023	;# 
   335   000FB8                     BAUDCON         equ	4024	;# 
   336   000FB8                     BAUDCTL         equ	4024	;# 
   337   000FBA                     CCP2CON         equ	4026	;# 
   338   000FBB                     CCPR2           equ	4027	;# 
   339   000FBB                     CCPR2L          equ	4027	;# 
   340   000FBC                     CCPR2H          equ	4028	;# 
   341   000FBD                     CCP1CON         equ	4029	;# 
   342   000FBD                     ECCP1CON        equ	4029	;# 
   343   000FBE                     CCPR1           equ	4030	;# 
   344   000FBE                     CCPR1L          equ	4030	;# 
   345   000FBF                     CCPR1H          equ	4031	;# 
   346   000FC0                     ADCON2          equ	4032	;# 
   347   000FC1                     ADCON1          equ	4033	;# 
   348   000FC2                     ADCON0          equ	4034	;# 
   349   000FC3                     ADRES           equ	4035	;# 
   350   000FC3                     ADRESL          equ	4035	;# 
   351   000FC4                     ADRESH          equ	4036	;# 
   352   000FC5                     SSPCON2         equ	4037	;# 
   353   000FC6                     SSPCON1         equ	4038	;# 
   354   000FC7                     SSPSTAT         equ	4039	;# 
   355   000FC8                     SSPADD          equ	4040	;# 
   356   000FC9                     SSPBUF          equ	4041	;# 
   357   000FCA                     T2CON           equ	4042	;# 
   358   000FCB                     PR2             equ	4043	;# 
   359   000FCB                     MEMCON          equ	4043	;# 
   360   000FCC                     TMR2            equ	4044	;# 
   361   000FCD                     T1CON           equ	4045	;# 
   362   000FCE                     TMR1            equ	4046	;# 
   363   000FCE                     TMR1L           equ	4046	;# 
   364   000FCF                     TMR1H           equ	4047	;# 
   365   000FD0                     RCON            equ	4048	;# 
   366   000FD1                     WDTCON          equ	4049	;# 
   367   000FD2                     HLVDCON         equ	4050	;# 
   368   000FD2                     LVDCON          equ	4050	;# 
   369   000FD3                     OSCCON          equ	4051	;# 
   370   000FD5                     T0CON           equ	4053	;# 
   371   000FD6                     TMR0            equ	4054	;# 
   372   000FD6                     TMR0L           equ	4054	;# 
   373   000FD7                     TMR0H           equ	4055	;# 
   374   000FD8                     STATUS          equ	4056	;# 
   375   000FD9                     FSR2            equ	4057	;# 
   376   000FD9                     FSR2L           equ	4057	;# 
   377   000FDA                     FSR2H           equ	4058	;# 
   378   000FDB                     PLUSW2          equ	4059	;# 
   379   000FDC                     PREINC2         equ	4060	;# 
   380   000FDD                     POSTDEC2        equ	4061	;# 
   381   000FDE                     POSTINC2        equ	4062	;# 
   382   000FDF                     INDF2           equ	4063	;# 
   383   000FE0                     BSR             equ	4064	;# 
   384   000FE1                     FSR1            equ	4065	;# 
   385   000FE1                     FSR1L           equ	4065	;# 
   386   000FE2                     FSR1H           equ	4066	;# 
   387   000FE3                     PLUSW1          equ	4067	;# 
   388   000FE4                     PREINC1         equ	4068	;# 
   389   000FE5                     POSTDEC1        equ	4069	;# 
   390   000FE6                     POSTINC1        equ	4070	;# 
   391   000FE7                     INDF1           equ	4071	;# 
   392   000FE8                     WREG            equ	4072	;# 
   393   000FE9                     FSR0            equ	4073	;# 
   394   000FE9                     FSR0L           equ	4073	;# 
   395   000FEA                     FSR0H           equ	4074	;# 
   396   000FEB                     PLUSW0          equ	4075	;# 
   397   000FEC                     PREINC0         equ	4076	;# 
   398   000FED                     POSTDEC0        equ	4077	;# 
   399   000FEE                     POSTINC0        equ	4078	;# 
   400   000FEF                     INDF0           equ	4079	;# 
   401   000FF0                     INTCON3         equ	4080	;# 
   402   000FF1                     INTCON2         equ	4081	;# 
   403   000FF2                     INTCON          equ	4082	;# 
   404   000FF3                     PROD            equ	4083	;# 
   405   000FF3                     PRODL           equ	4083	;# 
   406   000FF4                     PRODH           equ	4084	;# 
   407   000FF5                     TABLAT          equ	4085	;# 
   408   000FF6                     TBLPTR          equ	4086	;# 
   409   000FF6                     TBLPTRL         equ	4086	;# 
   410   000FF7                     TBLPTRH         equ	4087	;# 
   411   000FF8                     TBLPTRU         equ	4088	;# 
   412   000FF9                     PCLAT           equ	4089	;# 
   413   000FF9                     PC              equ	4089	;# 
   414   000FF9                     PCL             equ	4089	;# 
   415   000FFA                     PCLATH          equ	4090	;# 
   416   000FFB                     PCLATU          equ	4091	;# 
   417   000FFC                     STKPTR          equ	4092	;# 
   418   000FFD                     TOS             equ	4093	;# 
   419   000FFD                     TOSL            equ	4093	;# 
   420   000FFE                     TOSH            equ	4094	;# 
   421   000FFF                     TOSU            equ	4095	;# 
   422   000F80                     PORTA           equ	3968	;# 
   423   000F81                     PORTB           equ	3969	;# 
   424   000F82                     PORTC           equ	3970	;# 
   425   000F83                     PORTD           equ	3971	;# 
   426   000F84                     PORTE           equ	3972	;# 
   427   000F89                     LATA            equ	3977	;# 
   428   000F8A                     LATB            equ	3978	;# 
   429   000F8B                     LATC            equ	3979	;# 
   430   000F8C                     LATD            equ	3980	;# 
   431   000F8D                     LATE            equ	3981	;# 
   432   000F92                     TRISA           equ	3986	;# 
   433   000F92                     DDRA            equ	3986	;# 
   434   000F93                     TRISB           equ	3987	;# 
   435   000F93                     DDRB            equ	3987	;# 
   436   000F94                     TRISC           equ	3988	;# 
   437   000F94                     DDRC            equ	3988	;# 
   438   000F95                     TRISD           equ	3989	;# 
   439   000F95                     DDRD            equ	3989	;# 
   440   000F96                     TRISE           equ	3990	;# 
   441   000F96                     DDRE            equ	3990	;# 
   442   000F9B                     OSCTUNE         equ	3995	;# 
   443   000F9D                     PIE1            equ	3997	;# 
   444   000F9E                     PIR1            equ	3998	;# 
   445   000F9F                     IPR1            equ	3999	;# 
   446   000FA0                     PIE2            equ	4000	;# 
   447   000FA1                     PIR2            equ	4001	;# 
   448   000FA2                     IPR2            equ	4002	;# 
   449   000FA6                     EECON1          equ	4006	;# 
   450   000FA7                     EECON2          equ	4007	;# 
   451   000FA8                     EEDATA          equ	4008	;# 
   452   000FA9                     EEADR           equ	4009	;# 
   453   000FAB                     RCSTA           equ	4011	;# 
   454   000FAB                     RCSTA1          equ	4011	;# 
   455   000FAC                     TXSTA           equ	4012	;# 
   456   000FAC                     TXSTA1          equ	4012	;# 
   457   000FAD                     TXREG           equ	4013	;# 
   458   000FAD                     TXREG1          equ	4013	;# 
   459   000FAE                     RCREG           equ	4014	;# 
   460   000FAE                     RCREG1          equ	4014	;# 
   461   000FAF                     SPBRG           equ	4015	;# 
   462   000FAF                     SPBRG1          equ	4015	;# 
   463   000FB0                     SPBRGH          equ	4016	;# 
   464   000FB1                     T3CON           equ	4017	;# 
   465   000FB2                     TMR3            equ	4018	;# 
   466   000FB2                     TMR3L           equ	4018	;# 
   467   000FB3                     TMR3H           equ	4019	;# 
   468   000FB4                     CMCON           equ	4020	;# 
   469   000FB5                     CVRCON          equ	4021	;# 
   470   000FB6                     ECCP1AS         equ	4022	;# 
   471   000FB7                     ECCP1DEL        equ	4023	;# 
   472   000FB7                     PWM1CON         equ	4023	;# 
   473   000FB8                     BAUDCON         equ	4024	;# 
   474   000FB8                     BAUDCTL         equ	4024	;# 
   475   000FBA                     CCP2CON         equ	4026	;# 
   476   000FBB                     CCPR2           equ	4027	;# 
   477   000FBB                     CCPR2L          equ	4027	;# 
   478   000FBC                     CCPR2H          equ	4028	;# 
   479   000FBD                     CCP1CON         equ	4029	;# 
   480   000FBD                     ECCP1CON        equ	4029	;# 
   481   000FBE                     CCPR1           equ	4030	;# 
   482   000FBE                     CCPR1L          equ	4030	;# 
   483   000FBF                     CCPR1H          equ	4031	;# 
   484   000FC0                     ADCON2          equ	4032	;# 
   485   000FC1                     ADCON1          equ	4033	;# 
   486   000FC2                     ADCON0          equ	4034	;# 
   487   000FC3                     ADRES           equ	4035	;# 
   488   000FC3                     ADRESL          equ	4035	;# 
   489   000FC4                     ADRESH          equ	4036	;# 
   490   000FC5                     SSPCON2         equ	4037	;# 
   491   000FC6                     SSPCON1         equ	4038	;# 
   492   000FC7                     SSPSTAT         equ	4039	;# 
   493   000FC8                     SSPADD          equ	4040	;# 
   494   000FC9                     SSPBUF          equ	4041	;# 
   495   000FCA                     T2CON           equ	4042	;# 
   496   000FCB                     PR2             equ	4043	;# 
   497   000FCB                     MEMCON          equ	4043	;# 
   498   000FCC                     TMR2            equ	4044	;# 
   499   000FCD                     T1CON           equ	4045	;# 
   500   000FCE                     TMR1            equ	4046	;# 
   501   000FCE                     TMR1L           equ	4046	;# 
   502   000FCF                     TMR1H           equ	4047	;# 
   503   000FD0                     RCON            equ	4048	;# 
   504   000FD1                     WDTCON          equ	4049	;# 
   505   000FD2                     HLVDCON         equ	4050	;# 
   506   000FD2                     LVDCON          equ	4050	;# 
   507   000FD3                     OSCCON          equ	4051	;# 
   508   000FD5                     T0CON           equ	4053	;# 
   509   000FD6                     TMR0            equ	4054	;# 
   510   000FD6                     TMR0L           equ	4054	;# 
   511   000FD7                     TMR0H           equ	4055	;# 
   512   000FD8                     STATUS          equ	4056	;# 
   513   000FD9                     FSR2            equ	4057	;# 
   514   000FD9                     FSR2L           equ	4057	;# 
   515   000FDA                     FSR2H           equ	4058	;# 
   516   000FDB                     PLUSW2          equ	4059	;# 
   517   000FDC                     PREINC2         equ	4060	;# 
   518   000FDD                     POSTDEC2        equ	4061	;# 
   519   000FDE                     POSTINC2        equ	4062	;# 
   520   000FDF                     INDF2           equ	4063	;# 
   521   000FE0                     BSR             equ	4064	;# 
   522   000FE1                     FSR1            equ	4065	;# 
   523   000FE1                     FSR1L           equ	4065	;# 
   524   000FE2                     FSR1H           equ	4066	;# 
   525   000FE3                     PLUSW1          equ	4067	;# 
   526   000FE4                     PREINC1         equ	4068	;# 
   527   000FE5                     POSTDEC1        equ	4069	;# 
   528   000FE6                     POSTINC1        equ	4070	;# 
   529   000FE7                     INDF1           equ	4071	;# 
   530   000FE8                     WREG            equ	4072	;# 
   531   000FE9                     FSR0            equ	4073	;# 
   532   000FE9                     FSR0L           equ	4073	;# 
   533   000FEA                     FSR0H           equ	4074	;# 
   534   000FEB                     PLUSW0          equ	4075	;# 
   535   000FEC                     PREINC0         equ	4076	;# 
   536   000FED                     POSTDEC0        equ	4077	;# 
   537   000FEE                     POSTINC0        equ	4078	;# 
   538   000FEF                     INDF0           equ	4079	;# 
   539   000FF0                     INTCON3         equ	4080	;# 
   540   000FF1                     INTCON2         equ	4081	;# 
   541   000FF2                     INTCON          equ	4082	;# 
   542   000FF3                     PROD            equ	4083	;# 
   543   000FF3                     PRODL           equ	4083	;# 
   544   000FF4                     PRODH           equ	4084	;# 
   545   000FF5                     TABLAT          equ	4085	;# 
   546   000FF6                     TBLPTR          equ	4086	;# 
   547   000FF6                     TBLPTRL         equ	4086	;# 
   548   000FF7                     TBLPTRH         equ	4087	;# 
   549   000FF8                     TBLPTRU         equ	4088	;# 
   550   000FF9                     PCLAT           equ	4089	;# 
   551   000FF9                     PC              equ	4089	;# 
   552   000FF9                     PCL             equ	4089	;# 
   553   000FFA                     PCLATH          equ	4090	;# 
   554   000FFB                     PCLATU          equ	4091	;# 
   555   000FFC                     STKPTR          equ	4092	;# 
   556   000FFD                     TOS             equ	4093	;# 
   557   000FFD                     TOSL            equ	4093	;# 
   558   000FFE                     TOSH            equ	4094	;# 
   559   000FFF                     TOSU            equ	4095	;# 
   560   000F80                     PORTA           equ	3968	;# 
   561   000F81                     PORTB           equ	3969	;# 
   562   000F82                     PORTC           equ	3970	;# 
   563   000F83                     PORTD           equ	3971	;# 
   564   000F84                     PORTE           equ	3972	;# 
   565   000F89                     LATA            equ	3977	;# 
   566   000F8A                     LATB            equ	3978	;# 
   567   000F8B                     LATC            equ	3979	;# 
   568   000F8C                     LATD            equ	3980	;# 
   569   000F8D                     LATE            equ	3981	;# 
   570   000F92                     TRISA           equ	3986	;# 
   571   000F92                     DDRA            equ	3986	;# 
   572   000F93                     TRISB           equ	3987	;# 
   573   000F93                     DDRB            equ	3987	;# 
   574   000F94                     TRISC           equ	3988	;# 
   575   000F94                     DDRC            equ	3988	;# 
   576   000F95                     TRISD           equ	3989	;# 
   577   000F95                     DDRD            equ	3989	;# 
   578   000F96                     TRISE           equ	3990	;# 
   579   000F96                     DDRE            equ	3990	;# 
   580   000F9B                     OSCTUNE         equ	3995	;# 
   581   000F9D                     PIE1            equ	3997	;# 
   582   000F9E                     PIR1            equ	3998	;# 
   583   000F9F                     IPR1            equ	3999	;# 
   584   000FA0                     PIE2            equ	4000	;# 
   585   000FA1                     PIR2            equ	4001	;# 
   586   000FA2                     IPR2            equ	4002	;# 
   587   000FA6                     EECON1          equ	4006	;# 
   588   000FA7                     EECON2          equ	4007	;# 
   589   000FA8                     EEDATA          equ	4008	;# 
   590   000FA9                     EEADR           equ	4009	;# 
   591   000FAB                     RCSTA           equ	4011	;# 
   592   000FAB                     RCSTA1          equ	4011	;# 
   593   000FAC                     TXSTA           equ	4012	;# 
   594   000FAC                     TXSTA1          equ	4012	;# 
   595   000FAD                     TXREG           equ	4013	;# 
   596   000FAD                     TXREG1          equ	4013	;# 
   597   000FAE                     RCREG           equ	4014	;# 
   598   000FAE                     RCREG1          equ	4014	;# 
   599   000FAF                     SPBRG           equ	4015	;# 
   600   000FAF                     SPBRG1          equ	4015	;# 
   601   000FB0                     SPBRGH          equ	4016	;# 
   602   000FB1                     T3CON           equ	4017	;# 
   603   000FB2                     TMR3            equ	4018	;# 
   604   000FB2                     TMR3L           equ	4018	;# 
   605   000FB3                     TMR3H           equ	4019	;# 
   606   000FB4                     CMCON           equ	4020	;# 
   607   000FB5                     CVRCON          equ	4021	;# 
   608   000FB6                     ECCP1AS         equ	4022	;# 
   609   000FB7                     ECCP1DEL        equ	4023	;# 
   610   000FB7                     PWM1CON         equ	4023	;# 
   611   000FB8                     BAUDCON         equ	4024	;# 
   612   000FB8                     BAUDCTL         equ	4024	;# 
   613   000FBA                     CCP2CON         equ	4026	;# 
   614   000FBB                     CCPR2           equ	4027	;# 
   615   000FBB                     CCPR2L          equ	4027	;# 
   616   000FBC                     CCPR2H          equ	4028	;# 
   617   000FBD                     CCP1CON         equ	4029	;# 
   618   000FBD                     ECCP1CON        equ	4029	;# 
   619   000FBE                     CCPR1           equ	4030	;# 
   620   000FBE                     CCPR1L          equ	4030	;# 
   621   000FBF                     CCPR1H          equ	4031	;# 
   622   000FC0                     ADCON2          equ	4032	;# 
   623   000FC1                     ADCON1          equ	4033	;# 
   624   000FC2                     ADCON0          equ	4034	;# 
   625   000FC3                     ADRES           equ	4035	;# 
   626   000FC3                     ADRESL          equ	4035	;# 
   627   000FC4                     ADRESH          equ	4036	;# 
   628   000FC5                     SSPCON2         equ	4037	;# 
   629   000FC6                     SSPCON1         equ	4038	;# 
   630   000FC7                     SSPSTAT         equ	4039	;# 
   631   000FC8                     SSPADD          equ	4040	;# 
   632   000FC9                     SSPBUF          equ	4041	;# 
   633   000FCA                     T2CON           equ	4042	;# 
   634   000FCB                     PR2             equ	4043	;# 
   635   000FCB                     MEMCON          equ	4043	;# 
   636   000FCC                     TMR2            equ	4044	;# 
   637   000FCD                     T1CON           equ	4045	;# 
   638   000FCE                     TMR1            equ	4046	;# 
   639   000FCE                     TMR1L           equ	4046	;# 
   640   000FCF                     TMR1H           equ	4047	;# 
   641   000FD0                     RCON            equ	4048	;# 
   642   000FD1                     WDTCON          equ	4049	;# 
   643   000FD2                     HLVDCON         equ	4050	;# 
   644   000FD2                     LVDCON          equ	4050	;# 
   645   000FD3                     OSCCON          equ	4051	;# 
   646   000FD5                     T0CON           equ	4053	;# 
   647   000FD6                     TMR0            equ	4054	;# 
   648   000FD6                     TMR0L           equ	4054	;# 
   649   000FD7                     TMR0H           equ	4055	;# 
   650   000FD8                     STATUS          equ	4056	;# 
   651   000FD9                     FSR2            equ	4057	;# 
   652   000FD9                     FSR2L           equ	4057	;# 
   653   000FDA                     FSR2H           equ	4058	;# 
   654   000FDB                     PLUSW2          equ	4059	;# 
   655   000FDC                     PREINC2         equ	4060	;# 
   656   000FDD                     POSTDEC2        equ	4061	;# 
   657   000FDE                     POSTINC2        equ	4062	;# 
   658   000FDF                     INDF2           equ	4063	;# 
   659   000FE0                     BSR             equ	4064	;# 
   660   000FE1                     FSR1            equ	4065	;# 
   661   000FE1                     FSR1L           equ	4065	;# 
   662   000FE2                     FSR1H           equ	4066	;# 
   663   000FE3                     PLUSW1          equ	4067	;# 
   664   000FE4                     PREINC1         equ	4068	;# 
   665   000FE5                     POSTDEC1        equ	4069	;# 
   666   000FE6                     POSTINC1        equ	4070	;# 
   667   000FE7                     INDF1           equ	4071	;# 
   668   000FE8                     WREG            equ	4072	;# 
   669   000FE9                     FSR0            equ	4073	;# 
   670   000FE9                     FSR0L           equ	4073	;# 
   671   000FEA                     FSR0H           equ	4074	;# 
   672   000FEB                     PLUSW0          equ	4075	;# 
   673   000FEC                     PREINC0         equ	4076	;# 
   674   000FED                     POSTDEC0        equ	4077	;# 
   675   000FEE                     POSTINC0        equ	4078	;# 
   676   000FEF                     INDF0           equ	4079	;# 
   677   000FF0                     INTCON3         equ	4080	;# 
   678   000FF1                     INTCON2         equ	4081	;# 
   679   000FF2                     INTCON          equ	4082	;# 
   680   000FF3                     PROD            equ	4083	;# 
   681   000FF3                     PRODL           equ	4083	;# 
   682   000FF4                     PRODH           equ	4084	;# 
   683   000FF5                     TABLAT          equ	4085	;# 
   684   000FF6                     TBLPTR          equ	4086	;# 
   685   000FF6                     TBLPTRL         equ	4086	;# 
   686   000FF7                     TBLPTRH         equ	4087	;# 
   687   000FF8                     TBLPTRU         equ	4088	;# 
   688   000FF9                     PCLAT           equ	4089	;# 
   689   000FF9                     PC              equ	4089	;# 
   690   000FF9                     PCL             equ	4089	;# 
   691   000FFA                     PCLATH          equ	4090	;# 
   692   000FFB                     PCLATU          equ	4091	;# 
   693   000FFC                     STKPTR          equ	4092	;# 
   694   000FFD                     TOS             equ	4093	;# 
   695   000FFD                     TOSL            equ	4093	;# 
   696   000FFE                     TOSH            equ	4094	;# 
   697   000FFF                     TOSU            equ	4095	;# 
   698   000F80                     PORTA           equ	3968	;# 
   699   000F81                     PORTB           equ	3969	;# 
   700   000F82                     PORTC           equ	3970	;# 
   701   000F83                     PORTD           equ	3971	;# 
   702   000F84                     PORTE           equ	3972	;# 
   703   000F89                     LATA            equ	3977	;# 
   704   000F8A                     LATB            equ	3978	;# 
   705   000F8B                     LATC            equ	3979	;# 
   706   000F8C                     LATD            equ	3980	;# 
   707   000F8D                     LATE            equ	3981	;# 
   708   000F92                     TRISA           equ	3986	;# 
   709   000F92                     DDRA            equ	3986	;# 
   710   000F93                     TRISB           equ	3987	;# 
   711   000F93                     DDRB            equ	3987	;# 
   712   000F94                     TRISC           equ	3988	;# 
   713   000F94                     DDRC            equ	3988	;# 
   714   000F95                     TRISD           equ	3989	;# 
   715   000F95                     DDRD            equ	3989	;# 
   716   000F96                     TRISE           equ	3990	;# 
   717   000F96                     DDRE            equ	3990	;# 
   718   000F9B                     OSCTUNE         equ	3995	;# 
   719   000F9D                     PIE1            equ	3997	;# 
   720   000F9E                     PIR1            equ	3998	;# 
   721   000F9F                     IPR1            equ	3999	;# 
   722   000FA0                     PIE2            equ	4000	;# 
   723   000FA1                     PIR2            equ	4001	;# 
   724   000FA2                     IPR2            equ	4002	;# 
   725   000FA6                     EECON1          equ	4006	;# 
   726   000FA7                     EECON2          equ	4007	;# 
   727   000FA8                     EEDATA          equ	4008	;# 
   728   000FA9                     EEADR           equ	4009	;# 
   729   000FAB                     RCSTA           equ	4011	;# 
   730   000FAB                     RCSTA1          equ	4011	;# 
   731   000FAC                     TXSTA           equ	4012	;# 
   732   000FAC                     TXSTA1          equ	4012	;# 
   733   000FAD                     TXREG           equ	4013	;# 
   734   000FAD                     TXREG1          equ	4013	;# 
   735   000FAE                     RCREG           equ	4014	;# 
   736   000FAE                     RCREG1          equ	4014	;# 
   737   000FAF                     SPBRG           equ	4015	;# 
   738   000FAF                     SPBRG1          equ	4015	;# 
   739   000FB0                     SPBRGH          equ	4016	;# 
   740   000FB1                     T3CON           equ	4017	;# 
   741   000FB2                     TMR3            equ	4018	;# 
   742   000FB2                     TMR3L           equ	4018	;# 
   743   000FB3                     TMR3H           equ	4019	;# 
   744   000FB4                     CMCON           equ	4020	;# 
   745   000FB5                     CVRCON          equ	4021	;# 
   746   000FB6                     ECCP1AS         equ	4022	;# 
   747   000FB7                     ECCP1DEL        equ	4023	;# 
   748   000FB7                     PWM1CON         equ	4023	;# 
   749   000FB8                     BAUDCON         equ	4024	;# 
   750   000FB8                     BAUDCTL         equ	4024	;# 
   751   000FBA                     CCP2CON         equ	4026	;# 
   752   000FBB                     CCPR2           equ	4027	;# 
   753   000FBB                     CCPR2L          equ	4027	;# 
   754   000FBC                     CCPR2H          equ	4028	;# 
   755   000FBD                     CCP1CON         equ	4029	;# 
   756   000FBD                     ECCP1CON        equ	4029	;# 
   757   000FBE                     CCPR1           equ	4030	;# 
   758   000FBE                     CCPR1L          equ	4030	;# 
   759   000FBF                     CCPR1H          equ	4031	;# 
   760   000FC0                     ADCON2          equ	4032	;# 
   761   000FC1                     ADCON1          equ	4033	;# 
   762   000FC2                     ADCON0          equ	4034	;# 
   763   000FC3                     ADRES           equ	4035	;# 
   764   000FC3                     ADRESL          equ	4035	;# 
   765   000FC4                     ADRESH          equ	4036	;# 
   766   000FC5                     SSPCON2         equ	4037	;# 
   767   000FC6                     SSPCON1         equ	4038	;# 
   768   000FC7                     SSPSTAT         equ	4039	;# 
   769   000FC8                     SSPADD          equ	4040	;# 
   770   000FC9                     SSPBUF          equ	4041	;# 
   771   000FCA                     T2CON           equ	4042	;# 
   772   000FCB                     PR2             equ	4043	;# 
   773   000FCB                     MEMCON          equ	4043	;# 
   774   000FCC                     TMR2            equ	4044	;# 
   775   000FCD                     T1CON           equ	4045	;# 
   776   000FCE                     TMR1            equ	4046	;# 
   777   000FCE                     TMR1L           equ	4046	;# 
   778   000FCF                     TMR1H           equ	4047	;# 
   779   000FD0                     RCON            equ	4048	;# 
   780   000FD1                     WDTCON          equ	4049	;# 
   781   000FD2                     HLVDCON         equ	4050	;# 
   782   000FD2                     LVDCON          equ	4050	;# 
   783   000FD3                     OSCCON          equ	4051	;# 
   784   000FD5                     T0CON           equ	4053	;# 
   785   000FD6                     TMR0            equ	4054	;# 
   786   000FD6                     TMR0L           equ	4054	;# 
   787   000FD7                     TMR0H           equ	4055	;# 
   788   000FD8                     STATUS          equ	4056	;# 
   789   000FD9                     FSR2            equ	4057	;# 
   790   000FD9                     FSR2L           equ	4057	;# 
   791   000FDA                     FSR2H           equ	4058	;# 
   792   000FDB                     PLUSW2          equ	4059	;# 
   793   000FDC                     PREINC2         equ	4060	;# 
   794   000FDD                     POSTDEC2        equ	4061	;# 
   795   000FDE                     POSTINC2        equ	4062	;# 
   796   000FDF                     INDF2           equ	4063	;# 
   797   000FE0                     BSR             equ	4064	;# 
   798   000FE1                     FSR1            equ	4065	;# 
   799   000FE1                     FSR1L           equ	4065	;# 
   800   000FE2                     FSR1H           equ	4066	;# 
   801   000FE3                     PLUSW1          equ	4067	;# 
   802   000FE4                     PREINC1         equ	4068	;# 
   803   000FE5                     POSTDEC1        equ	4069	;# 
   804   000FE6                     POSTINC1        equ	4070	;# 
   805   000FE7                     INDF1           equ	4071	;# 
   806   000FE8                     WREG            equ	4072	;# 
   807   000FE9                     FSR0            equ	4073	;# 
   808   000FE9                     FSR0L           equ	4073	;# 
   809   000FEA                     FSR0H           equ	4074	;# 
   810   000FEB                     PLUSW0          equ	4075	;# 
   811   000FEC                     PREINC0         equ	4076	;# 
   812   000FED                     POSTDEC0        equ	4077	;# 
   813   000FEE                     POSTINC0        equ	4078	;# 
   814   000FEF                     INDF0           equ	4079	;# 
   815   000FF0                     INTCON3         equ	4080	;# 
   816   000FF1                     INTCON2         equ	4081	;# 
   817   000FF2                     INTCON          equ	4082	;# 
   818   000FF3                     PROD            equ	4083	;# 
   819   000FF3                     PRODL           equ	4083	;# 
   820   000FF4                     PRODH           equ	4084	;# 
   821   000FF5                     TABLAT          equ	4085	;# 
   822   000FF6                     TBLPTR          equ	4086	;# 
   823   000FF6                     TBLPTRL         equ	4086	;# 
   824   000FF7                     TBLPTRH         equ	4087	;# 
   825   000FF8                     TBLPTRU         equ	4088	;# 
   826   000FF9                     PCLAT           equ	4089	;# 
   827   000FF9                     PC              equ	4089	;# 
   828   000FF9                     PCL             equ	4089	;# 
   829   000FFA                     PCLATH          equ	4090	;# 
   830   000FFB                     PCLATU          equ	4091	;# 
   831   000FFC                     STKPTR          equ	4092	;# 
   832   000FFD                     TOS             equ	4093	;# 
   833   000FFD                     TOSL            equ	4093	;# 
   834   000FFE                     TOSH            equ	4094	;# 
   835   000FFF                     TOSU            equ	4095	;# 
   836   000F80                     PORTA           equ	3968	;# 
   837   000F81                     PORTB           equ	3969	;# 
   838   000F82                     PORTC           equ	3970	;# 
   839   000F83                     PORTD           equ	3971	;# 
   840   000F84                     PORTE           equ	3972	;# 
   841   000F89                     LATA            equ	3977	;# 
   842   000F8A                     LATB            equ	3978	;# 
   843   000F8B                     LATC            equ	3979	;# 
   844   000F8C                     LATD            equ	3980	;# 
   845   000F8D                     LATE            equ	3981	;# 
   846   000F92                     TRISA           equ	3986	;# 
   847   000F92                     DDRA            equ	3986	;# 
   848   000F93                     TRISB           equ	3987	;# 
   849   000F93                     DDRB            equ	3987	;# 
   850   000F94                     TRISC           equ	3988	;# 
   851   000F94                     DDRC            equ	3988	;# 
   852   000F95                     TRISD           equ	3989	;# 
   853   000F95                     DDRD            equ	3989	;# 
   854   000F96                     TRISE           equ	3990	;# 
   855   000F96                     DDRE            equ	3990	;# 
   856   000F9B                     OSCTUNE         equ	3995	;# 
   857   000F9D                     PIE1            equ	3997	;# 
   858   000F9E                     PIR1            equ	3998	;# 
   859   000F9F                     IPR1            equ	3999	;# 
   860   000FA0                     PIE2            equ	4000	;# 
   861   000FA1                     PIR2            equ	4001	;# 
   862   000FA2                     IPR2            equ	4002	;# 
   863   000FA6                     EECON1          equ	4006	;# 
   864   000FA7                     EECON2          equ	4007	;# 
   865   000FA8                     EEDATA          equ	4008	;# 
   866   000FA9                     EEADR           equ	4009	;# 
   867   000FAB                     RCSTA           equ	4011	;# 
   868   000FAB                     RCSTA1          equ	4011	;# 
   869   000FAC                     TXSTA           equ	4012	;# 
   870   000FAC                     TXSTA1          equ	4012	;# 
   871   000FAD                     TXREG           equ	4013	;# 
   872   000FAD                     TXREG1          equ	4013	;# 
   873   000FAE                     RCREG           equ	4014	;# 
   874   000FAE                     RCREG1          equ	4014	;# 
   875   000FAF                     SPBRG           equ	4015	;# 
   876   000FAF                     SPBRG1          equ	4015	;# 
   877   000FB0                     SPBRGH          equ	4016	;# 
   878   000FB1                     T3CON           equ	4017	;# 
   879   000FB2                     TMR3            equ	4018	;# 
   880   000FB2                     TMR3L           equ	4018	;# 
   881   000FB3                     TMR3H           equ	4019	;# 
   882   000FB4                     CMCON           equ	4020	;# 
   883   000FB5                     CVRCON          equ	4021	;# 
   884   000FB6                     ECCP1AS         equ	4022	;# 
   885   000FB7                     ECCP1DEL        equ	4023	;# 
   886   000FB7                     PWM1CON         equ	4023	;# 
   887   000FB8                     BAUDCON         equ	4024	;# 
   888   000FB8                     BAUDCTL         equ	4024	;# 
   889   000FBA                     CCP2CON         equ	4026	;# 
   890   000FBB                     CCPR2           equ	4027	;# 
   891   000FBB                     CCPR2L          equ	4027	;# 
   892   000FBC                     CCPR2H          equ	4028	;# 
   893   000FBD                     CCP1CON         equ	4029	;# 
   894   000FBD                     ECCP1CON        equ	4029	;# 
   895   000FBE                     CCPR1           equ	4030	;# 
   896   000FBE                     CCPR1L          equ	4030	;# 
   897   000FBF                     CCPR1H          equ	4031	;# 
   898   000FC0                     ADCON2          equ	4032	;# 
   899   000FC1                     ADCON1          equ	4033	;# 
   900   000FC2                     ADCON0          equ	4034	;# 
   901   000FC3                     ADRES           equ	4035	;# 
   902   000FC3                     ADRESL          equ	4035	;# 
   903   000FC4                     ADRESH          equ	4036	;# 
   904   000FC5                     SSPCON2         equ	4037	;# 
   905   000FC6                     SSPCON1         equ	4038	;# 
   906   000FC7                     SSPSTAT         equ	4039	;# 
   907   000FC8                     SSPADD          equ	4040	;# 
   908   000FC9                     SSPBUF          equ	4041	;# 
   909   000FCA                     T2CON           equ	4042	;# 
   910   000FCB                     PR2             equ	4043	;# 
   911   000FCB                     MEMCON          equ	4043	;# 
   912   000FCC                     TMR2            equ	4044	;# 
   913   000FCD                     T1CON           equ	4045	;# 
   914   000FCE                     TMR1            equ	4046	;# 
   915   000FCE                     TMR1L           equ	4046	;# 
   916   000FCF                     TMR1H           equ	4047	;# 
   917   000FD0                     RCON            equ	4048	;# 
   918   000FD1                     WDTCON          equ	4049	;# 
   919   000FD2                     HLVDCON         equ	4050	;# 
   920   000FD2                     LVDCON          equ	4050	;# 
   921   000FD3                     OSCCON          equ	4051	;# 
   922   000FD5                     T0CON           equ	4053	;# 
   923   000FD6                     TMR0            equ	4054	;# 
   924   000FD6                     TMR0L           equ	4054	;# 
   925   000FD7                     TMR0H           equ	4055	;# 
   926   000FD8                     STATUS          equ	4056	;# 
   927   000FD9                     FSR2            equ	4057	;# 
   928   000FD9                     FSR2L           equ	4057	;# 
   929   000FDA                     FSR2H           equ	4058	;# 
   930   000FDB                     PLUSW2          equ	4059	;# 
   931   000FDC                     PREINC2         equ	4060	;# 
   932   000FDD                     POSTDEC2        equ	4061	;# 
   933   000FDE                     POSTINC2        equ	4062	;# 
   934   000FDF                     INDF2           equ	4063	;# 
   935   000FE0                     BSR             equ	4064	;# 
   936   000FE1                     FSR1            equ	4065	;# 
   937   000FE1                     FSR1L           equ	4065	;# 
   938   000FE2                     FSR1H           equ	4066	;# 
   939   000FE3                     PLUSW1          equ	4067	;# 
   940   000FE4                     PREINC1         equ	4068	;# 
   941   000FE5                     POSTDEC1        equ	4069	;# 
   942   000FE6                     POSTINC1        equ	4070	;# 
   943   000FE7                     INDF1           equ	4071	;# 
   944   000FE8                     WREG            equ	4072	;# 
   945   000FE9                     FSR0            equ	4073	;# 
   946   000FE9                     FSR0L           equ	4073	;# 
   947   000FEA                     FSR0H           equ	4074	;# 
   948   000FEB                     PLUSW0          equ	4075	;# 
   949   000FEC                     PREINC0         equ	4076	;# 
   950   000FED                     POSTDEC0        equ	4077	;# 
   951   000FEE                     POSTINC0        equ	4078	;# 
   952   000FEF                     INDF0           equ	4079	;# 
   953   000FF0                     INTCON3         equ	4080	;# 
   954   000FF1                     INTCON2         equ	4081	;# 
   955   000FF2                     INTCON          equ	4082	;# 
   956   000FF3                     PROD            equ	4083	;# 
   957   000FF3                     PRODL           equ	4083	;# 
   958   000FF4                     PRODH           equ	4084	;# 
   959   000FF5                     TABLAT          equ	4085	;# 
   960   000FF6                     TBLPTR          equ	4086	;# 
   961   000FF6                     TBLPTRL         equ	4086	;# 
   962   000FF7                     TBLPTRH         equ	4087	;# 
   963   000FF8                     TBLPTRU         equ	4088	;# 
   964   000FF9                     PCLAT           equ	4089	;# 
   965   000FF9                     PC              equ	4089	;# 
   966   000FF9                     PCL             equ	4089	;# 
   967   000FFA                     PCLATH          equ	4090	;# 
   968   000FFB                     PCLATU          equ	4091	;# 
   969   000FFC                     STKPTR          equ	4092	;# 
   970   000FFD                     TOS             equ	4093	;# 
   971   000FFD                     TOSL            equ	4093	;# 
   972   000FFE                     TOSH            equ	4094	;# 
   973   000FFF                     TOSU            equ	4095	;# 
   974   000F80                     PORTA           equ	3968	;# 
   975   000F81                     PORTB           equ	3969	;# 
   976   000F82                     PORTC           equ	3970	;# 
   977   000F83                     PORTD           equ	3971	;# 
   978   000F84                     PORTE           equ	3972	;# 
   979   000F89                     LATA            equ	3977	;# 
   980   000F8A                     LATB            equ	3978	;# 
   981   000F8B                     LATC            equ	3979	;# 
   982   000F8C                     LATD            equ	3980	;# 
   983   000F8D                     LATE            equ	3981	;# 
   984   000F92                     TRISA           equ	3986	;# 
   985   000F92                     DDRA            equ	3986	;# 
   986   000F93                     TRISB           equ	3987	;# 
   987   000F93                     DDRB            equ	3987	;# 
   988   000F94                     TRISC           equ	3988	;# 
   989   000F94                     DDRC            equ	3988	;# 
   990   000F95                     TRISD           equ	3989	;# 
   991   000F95                     DDRD            equ	3989	;# 
   992   000F96                     TRISE           equ	3990	;# 
   993   000F96                     DDRE            equ	3990	;# 
   994   000F9B                     OSCTUNE         equ	3995	;# 
   995   000F9D                     PIE1            equ	3997	;# 
   996   000F9E                     PIR1            equ	3998	;# 
   997   000F9F                     IPR1            equ	3999	;# 
   998   000FA0                     PIE2            equ	4000	;# 
   999   000FA1                     PIR2            equ	4001	;# 
  1000   000FA2                     IPR2            equ	4002	;# 
  1001   000FA6                     EECON1          equ	4006	;# 
  1002   000FA7                     EECON2          equ	4007	;# 
  1003   000FA8                     EEDATA          equ	4008	;# 
  1004   000FA9                     EEADR           equ	4009	;# 
  1005   000FAB                     RCSTA           equ	4011	;# 
  1006   000FAB                     RCSTA1          equ	4011	;# 
  1007   000FAC                     TXSTA           equ	4012	;# 
  1008   000FAC                     TXSTA1          equ	4012	;# 
  1009   000FAD                     TXREG           equ	4013	;# 
  1010   000FAD                     TXREG1          equ	4013	;# 
  1011   000FAE                     RCREG           equ	4014	;# 
  1012   000FAE                     RCREG1          equ	4014	;# 
  1013   000FAF                     SPBRG           equ	4015	;# 
  1014   000FAF                     SPBRG1          equ	4015	;# 
  1015   000FB0                     SPBRGH          equ	4016	;# 
  1016   000FB1                     T3CON           equ	4017	;# 
  1017   000FB2                     TMR3            equ	4018	;# 
  1018   000FB2                     TMR3L           equ	4018	;# 
  1019   000FB3                     TMR3H           equ	4019	;# 
  1020   000FB4                     CMCON           equ	4020	;# 
  1021   000FB5                     CVRCON          equ	4021	;# 
  1022   000FB6                     ECCP1AS         equ	4022	;# 
  1023   000FB7                     ECCP1DEL        equ	4023	;# 
  1024   000FB7                     PWM1CON         equ	4023	;# 
  1025   000FB8                     BAUDCON         equ	4024	;# 
  1026   000FB8                     BAUDCTL         equ	4024	;# 
  1027   000FBA                     CCP2CON         equ	4026	;# 
  1028   000FBB                     CCPR2           equ	4027	;# 
  1029   000FBB                     CCPR2L          equ	4027	;# 
  1030   000FBC                     CCPR2H          equ	4028	;# 
  1031   000FBD                     CCP1CON         equ	4029	;# 
  1032   000FBD                     ECCP1CON        equ	4029	;# 
  1033   000FBE                     CCPR1           equ	4030	;# 
  1034   000FBE                     CCPR1L          equ	4030	;# 
  1035   000FBF                     CCPR1H          equ	4031	;# 
  1036   000FC0                     ADCON2          equ	4032	;# 
  1037   000FC1                     ADCON1          equ	4033	;# 
  1038   000FC2                     ADCON0          equ	4034	;# 
  1039   000FC3                     ADRES           equ	4035	;# 
  1040   000FC3                     ADRESL          equ	4035	;# 
  1041   000FC4                     ADRESH          equ	4036	;# 
  1042   000FC5                     SSPCON2         equ	4037	;# 
  1043   000FC6                     SSPCON1         equ	4038	;# 
  1044   000FC7                     SSPSTAT         equ	4039	;# 
  1045   000FC8                     SSPADD          equ	4040	;# 
  1046   000FC9                     SSPBUF          equ	4041	;# 
  1047   000FCA                     T2CON           equ	4042	;# 
  1048   000FCB                     PR2             equ	4043	;# 
  1049   000FCB                     MEMCON          equ	4043	;# 
  1050   000FCC                     TMR2            equ	4044	;# 
  1051   000FCD                     T1CON           equ	4045	;# 
  1052   000FCE                     TMR1            equ	4046	;# 
  1053   000FCE                     TMR1L           equ	4046	;# 
  1054   000FCF                     TMR1H           equ	4047	;# 
  1055   000FD0                     RCON            equ	4048	;# 
  1056   000FD1                     WDTCON          equ	4049	;# 
  1057   000FD2                     HLVDCON         equ	4050	;# 
  1058   000FD2                     LVDCON          equ	4050	;# 
  1059   000FD3                     OSCCON          equ	4051	;# 
  1060   000FD5                     T0CON           equ	4053	;# 
  1061   000FD6                     TMR0            equ	4054	;# 
  1062   000FD6                     TMR0L           equ	4054	;# 
  1063   000FD7                     TMR0H           equ	4055	;# 
  1064   000FD8                     STATUS          equ	4056	;# 
  1065   000FD9                     FSR2            equ	4057	;# 
  1066   000FD9                     FSR2L           equ	4057	;# 
  1067   000FDA                     FSR2H           equ	4058	;# 
  1068   000FDB                     PLUSW2          equ	4059	;# 
  1069   000FDC                     PREINC2         equ	4060	;# 
  1070   000FDD                     POSTDEC2        equ	4061	;# 
  1071   000FDE                     POSTINC2        equ	4062	;# 
  1072   000FDF                     INDF2           equ	4063	;# 
  1073   000FE0                     BSR             equ	4064	;# 
  1074   000FE1                     FSR1            equ	4065	;# 
  1075   000FE1                     FSR1L           equ	4065	;# 
  1076   000FE2                     FSR1H           equ	4066	;# 
  1077   000FE3                     PLUSW1          equ	4067	;# 
  1078   000FE4                     PREINC1         equ	4068	;# 
  1079   000FE5                     POSTDEC1        equ	4069	;# 
  1080   000FE6                     POSTINC1        equ	4070	;# 
  1081   000FE7                     INDF1           equ	4071	;# 
  1082   000FE8                     WREG            equ	4072	;# 
  1083   000FE9                     FSR0            equ	4073	;# 
  1084   000FE9                     FSR0L           equ	4073	;# 
  1085   000FEA                     FSR0H           equ	4074	;# 
  1086   000FEB                     PLUSW0          equ	4075	;# 
  1087   000FEC                     PREINC0         equ	4076	;# 
  1088   000FED                     POSTDEC0        equ	4077	;# 
  1089   000FEE                     POSTINC0        equ	4078	;# 
  1090   000FEF                     INDF0           equ	4079	;# 
  1091   000FF0                     INTCON3         equ	4080	;# 
  1092   000FF1                     INTCON2         equ	4081	;# 
  1093   000FF2                     INTCON          equ	4082	;# 
  1094   000FF3                     PROD            equ	4083	;# 
  1095   000FF3                     PRODL           equ	4083	;# 
  1096   000FF4                     PRODH           equ	4084	;# 
  1097   000FF5                     TABLAT          equ	4085	;# 
  1098   000FF6                     TBLPTR          equ	4086	;# 
  1099   000FF6                     TBLPTRL         equ	4086	;# 
  1100   000FF7                     TBLPTRH         equ	4087	;# 
  1101   000FF8                     TBLPTRU         equ	4088	;# 
  1102   000FF9                     PCLAT           equ	4089	;# 
  1103   000FF9                     PC              equ	4089	;# 
  1104   000FF9                     PCL             equ	4089	;# 
  1105   000FFA                     PCLATH          equ	4090	;# 
  1106   000FFB                     PCLATU          equ	4091	;# 
  1107   000FFC                     STKPTR          equ	4092	;# 
  1108   000FFD                     TOS             equ	4093	;# 
  1109   000FFD                     TOSL            equ	4093	;# 
  1110   000FFE                     TOSH            equ	4094	;# 
  1111   000FFF                     TOSU            equ	4095	;# 
  1112   000F80                     PORTA           equ	3968	;# 
  1113   000F81                     PORTB           equ	3969	;# 
  1114   000F82                     PORTC           equ	3970	;# 
  1115   000F83                     PORTD           equ	3971	;# 
  1116   000F84                     PORTE           equ	3972	;# 
  1117   000F89                     LATA            equ	3977	;# 
  1118   000F8A                     LATB            equ	3978	;# 
  1119   000F8B                     LATC            equ	3979	;# 
  1120   000F8C                     LATD            equ	3980	;# 
  1121   000F8D                     LATE            equ	3981	;# 
  1122   000F92                     TRISA           equ	3986	;# 
  1123   000F92                     DDRA            equ	3986	;# 
  1124   000F93                     TRISB           equ	3987	;# 
  1125   000F93                     DDRB            equ	3987	;# 
  1126   000F94                     TRISC           equ	3988	;# 
  1127   000F94                     DDRC            equ	3988	;# 
  1128   000F95                     TRISD           equ	3989	;# 
  1129   000F95                     DDRD            equ	3989	;# 
  1130   000F96                     TRISE           equ	3990	;# 
  1131   000F96                     DDRE            equ	3990	;# 
  1132   000F9B                     OSCTUNE         equ	3995	;# 
  1133   000F9D                     PIE1            equ	3997	;# 
  1134   000F9E                     PIR1            equ	3998	;# 
  1135   000F9F                     IPR1            equ	3999	;# 
  1136   000FA0                     PIE2            equ	4000	;# 
  1137   000FA1                     PIR2            equ	4001	;# 
  1138   000FA2                     IPR2            equ	4002	;# 
  1139   000FA6                     EECON1          equ	4006	;# 
  1140   000FA7                     EECON2          equ	4007	;# 
  1141   000FA8                     EEDATA          equ	4008	;# 
  1142   000FA9                     EEADR           equ	4009	;# 
  1143   000FAB                     RCSTA           equ	4011	;# 
  1144   000FAB                     RCSTA1          equ	4011	;# 
  1145   000FAC                     TXSTA           equ	4012	;# 
  1146   000FAC                     TXSTA1          equ	4012	;# 
  1147   000FAD                     TXREG           equ	4013	;# 
  1148   000FAD                     TXREG1          equ	4013	;# 
  1149   000FAE                     RCREG           equ	4014	;# 
  1150   000FAE                     RCREG1          equ	4014	;# 
  1151   000FAF                     SPBRG           equ	4015	;# 
  1152   000FAF                     SPBRG1          equ	4015	;# 
  1153   000FB0                     SPBRGH          equ	4016	;# 
  1154   000FB1                     T3CON           equ	4017	;# 
  1155   000FB2                     TMR3            equ	4018	;# 
  1156   000FB2                     TMR3L           equ	4018	;# 
  1157   000FB3                     TMR3H           equ	4019	;# 
  1158   000FB4                     CMCON           equ	4020	;# 
  1159   000FB5                     CVRCON          equ	4021	;# 
  1160   000FB6                     ECCP1AS         equ	4022	;# 
  1161   000FB7                     ECCP1DEL        equ	4023	;# 
  1162   000FB7                     PWM1CON         equ	4023	;# 
  1163   000FB8                     BAUDCON         equ	4024	;# 
  1164   000FB8                     BAUDCTL         equ	4024	;# 
  1165   000FBA                     CCP2CON         equ	4026	;# 
  1166   000FBB                     CCPR2           equ	4027	;# 
  1167   000FBB                     CCPR2L          equ	4027	;# 
  1168   000FBC                     CCPR2H          equ	4028	;# 
  1169   000FBD                     CCP1CON         equ	4029	;# 
  1170   000FBD                     ECCP1CON        equ	4029	;# 
  1171   000FBE                     CCPR1           equ	4030	;# 
  1172   000FBE                     CCPR1L          equ	4030	;# 
  1173   000FBF                     CCPR1H          equ	4031	;# 
  1174   000FC0                     ADCON2          equ	4032	;# 
  1175   000FC1                     ADCON1          equ	4033	;# 
  1176   000FC2                     ADCON0          equ	4034	;# 
  1177   000FC3                     ADRES           equ	4035	;# 
  1178   000FC3                     ADRESL          equ	4035	;# 
  1179   000FC4                     ADRESH          equ	4036	;# 
  1180   000FC5                     SSPCON2         equ	4037	;# 
  1181   000FC6                     SSPCON1         equ	4038	;# 
  1182   000FC7                     SSPSTAT         equ	4039	;# 
  1183   000FC8                     SSPADD          equ	4040	;# 
  1184   000FC9                     SSPBUF          equ	4041	;# 
  1185   000FCA                     T2CON           equ	4042	;# 
  1186   000FCB                     PR2             equ	4043	;# 
  1187   000FCB                     MEMCON          equ	4043	;# 
  1188   000FCC                     TMR2            equ	4044	;# 
  1189   000FCD                     T1CON           equ	4045	;# 
  1190   000FCE                     TMR1            equ	4046	;# 
  1191   000FCE                     TMR1L           equ	4046	;# 
  1192   000FCF                     TMR1H           equ	4047	;# 
  1193   000FD0                     RCON            equ	4048	;# 
  1194   000FD1                     WDTCON          equ	4049	;# 
  1195   000FD2                     HLVDCON         equ	4050	;# 
  1196   000FD2                     LVDCON          equ	4050	;# 
  1197   000FD3                     OSCCON          equ	4051	;# 
  1198   000FD5                     T0CON           equ	4053	;# 
  1199   000FD6                     TMR0            equ	4054	;# 
  1200   000FD6                     TMR0L           equ	4054	;# 
  1201   000FD7                     TMR0H           equ	4055	;# 
  1202   000FD8                     STATUS          equ	4056	;# 
  1203   000FD9                     FSR2            equ	4057	;# 
  1204   000FD9                     FSR2L           equ	4057	;# 
  1205   000FDA                     FSR2H           equ	4058	;# 
  1206   000FDB                     PLUSW2          equ	4059	;# 
  1207   000FDC                     PREINC2         equ	4060	;# 
  1208   000FDD                     POSTDEC2        equ	4061	;# 
  1209   000FDE                     POSTINC2        equ	4062	;# 
  1210   000FDF                     INDF2           equ	4063	;# 
  1211   000FE0                     BSR             equ	4064	;# 
  1212   000FE1                     FSR1            equ	4065	;# 
  1213   000FE1                     FSR1L           equ	4065	;# 
  1214   000FE2                     FSR1H           equ	4066	;# 
  1215   000FE3                     PLUSW1          equ	4067	;# 
  1216   000FE4                     PREINC1         equ	4068	;# 
  1217   000FE5                     POSTDEC1        equ	4069	;# 
  1218   000FE6                     POSTINC1        equ	4070	;# 
  1219   000FE7                     INDF1           equ	4071	;# 
  1220   000FE8                     WREG            equ	4072	;# 
  1221   000FE9                     FSR0            equ	4073	;# 
  1222   000FE9                     FSR0L           equ	4073	;# 
  1223   000FEA                     FSR0H           equ	4074	;# 
  1224   000FEB                     PLUSW0          equ	4075	;# 
  1225   000FEC                     PREINC0         equ	4076	;# 
  1226   000FED                     POSTDEC0        equ	4077	;# 
  1227   000FEE                     POSTINC0        equ	4078	;# 
  1228   000FEF                     INDF0           equ	4079	;# 
  1229   000FF0                     INTCON3         equ	4080	;# 
  1230   000FF1                     INTCON2         equ	4081	;# 
  1231   000FF2                     INTCON          equ	4082	;# 
  1232   000FF3                     PROD            equ	4083	;# 
  1233   000FF3                     PRODL           equ	4083	;# 
  1234   000FF4                     PRODH           equ	4084	;# 
  1235   000FF5                     TABLAT          equ	4085	;# 
  1236   000FF6                     TBLPTR          equ	4086	;# 
  1237   000FF6                     TBLPTRL         equ	4086	;# 
  1238   000FF7                     TBLPTRH         equ	4087	;# 
  1239   000FF8                     TBLPTRU         equ	4088	;# 
  1240   000FF9                     PCLAT           equ	4089	;# 
  1241   000FF9                     PC              equ	4089	;# 
  1242   000FF9                     PCL             equ	4089	;# 
  1243   000FFA                     PCLATH          equ	4090	;# 
  1244   000FFB                     PCLATU          equ	4091	;# 
  1245   000FFC                     STKPTR          equ	4092	;# 
  1246   000FFD                     TOS             equ	4093	;# 
  1247   000FFD                     TOSL            equ	4093	;# 
  1248   000FFE                     TOSH            equ	4094	;# 
  1249   000FFF                     TOSU            equ	4095	;# 
  1250                           
  1251                           	psect	idataCOMRAM
  1252   001D8E                     __pidataCOMRAM:
  1253                           	callstack 0
  1254                           
  1255                           ;initializer for _currentTime
  1256   001D8E  30                 	db	48
  1257   001D8F  30                 	db	48
  1258   001D90  30                 	db	48
  1259   001D91  30                 	db	48
  1260                           
  1261                           ;initializer for motorTerminal@hour
  1262   001D92  30                 	db	48
  1263   001D93  30                 	db	48
  1264   001D94  30                 	db	48
  1265   001D95  30                 	db	48
  1266                           
  1267                           	psect	idataBANK0
  1268   00188C                     __pidataBANK0:
  1269                           	callstack 0
  1270                           
  1271                           ;initializer for _userUIDs
  1272   00188C  65                 	db	101
  1273   00188D  DC                 	db	220
  1274   00188E  F9                 	db	249
  1275   00188F  03                 	db	3
  1276   001890  43                 	db	67
  1277   001891  00                 	db	0
  1278   001892  00                 	db	0
  1279   001893  00                 	db	0
  1280   001894  00                 	db	0
  1281   001895  00                 	db	0
  1282   001896  00                 	db	0
  1283   001897  00                 	db	0
  1284   001898  00                 	db	0
  1285   001899  00                 	db	0
  1286   00189A  00                 	db	0
  1287   00189B  00                 	db	0
  1288   00189C  DC                 	db	220
  1289   00189D  0D                 	db	13
  1290   00189E  F9                 	db	249
  1291   00189F  03                 	db	3
  1292   0018A0  2B                 	db	43
  1293   0018A1  00                 	db	0
  1294   0018A2  00                 	db	0
  1295   0018A3  00                 	db	0
  1296   0018A4  00                 	db	0
  1297   0018A5  00                 	db	0
  1298   0018A6  00                 	db	0
  1299   0018A7  00                 	db	0
  1300   0018A8  00                 	db	0
  1301   0018A9  00                 	db	0
  1302   0018AA  00                 	db	0
  1303   0018AB  00                 	db	0
  1304   0018AC  DF                 	db	223
  1305   0018AD  8B                 	db	139
  1306   0018AE  DF                 	db	223
  1307   0018AF  C4                 	db	196
  1308   0018B0  4F                 	db	79
  1309   0018B1  00                 	db	0
  1310   0018B2  00                 	db	0
  1311   0018B3  00                 	db	0
  1312   0018B4  00                 	db	0
  1313   0018B5  00                 	db	0
  1314   0018B6  00                 	db	0
  1315   0018B7  00                 	db	0
  1316   0018B8  00                 	db	0
  1317   0018B9  00                 	db	0
  1318   0018BA  00                 	db	0
  1319   0018BB  00                 	db	0
  1320   0018BC  21                 	db	33
  1321   0018BD  32                 	db	50
  1322   0018BE  A9                 	db	169
  1323   0018BF  89                 	db	137
  1324   0018C0  33                 	db	51
  1325   0018C1  00                 	db	0
  1326   0018C2  00                 	db	0
  1327   0018C3  00                 	db	0
  1328   0018C4  00                 	db	0
  1329   0018C5  00                 	db	0
  1330   0018C6  00                 	db	0
  1331   0018C7  00                 	db	0
  1332   0018C8  00                 	db	0
  1333   0018C9  00                 	db	0
  1334   0018CA  00                 	db	0
  1335   0018CB  00                 	db	0
  1336                           
  1337                           ;initializer for _configurations
  1338   0018CC  01                 	db	1
  1339   0018CD  01                 	db	1
  1340   0018CE  01                 	db	1
  1341   0018CF  01                 	db	1
  1342   0018D0  01                 	db	1
  1343   0018D1  01                 	db	1
  1344   0018D2  01                 	db	1
  1345   0018D3  01                 	db	1
  1346   0018D4  01                 	db	1
  1347   0018D5  01                 	db	1
  1348   0018D6  01                 	db	1
  1349   0018D7  01                 	db	1
  1350   0018D8  01                 	db	1
  1351   0018D9  01                 	db	1
  1352   0018DA  01                 	db	1
  1353   0018DB  01                 	db	1
  1354   0018DC  01                 	db	1
  1355   0018DD  01                 	db	1
  1356   0018DE  01                 	db	1
  1357   0018DF  01                 	db	1
  1358   0018E0  01                 	db	1
  1359   0018E1  01                 	db	1
  1360   0018E2  01                 	db	1
  1361   0018E3  01                 	db	1
  1362                           
  1363                           	psect	mediumconst
  1364   001E9C                     __pmediumconst:
  1365                           	callstack 0
  1366   001E9C  00                 	db	0
  1367   001E9D                     _keymap:
  1368                           	callstack 0
  1369   001E9D  01                 	db	1
  1370   001E9E  02                 	db	2
  1371   001E9F  03                 	db	3
  1372   001EA0  04                 	db	4
  1373   001EA1  05                 	db	5
  1374   001EA2  06                 	db	6
  1375   001EA3  07                 	db	7
  1376   001EA4  08                 	db	8
  1377   001EA5  09                 	db	9
  1378   001EA6  0A                 	db	10
  1379   001EA7  00                 	db	0
  1380   001EA8  0B                 	db	11
  1381   001EA9                     __end_of_keymap:
  1382                           	callstack 0
  1383   001EA9                     controlLED@ledBits:
  1384                           	callstack 0
  1385   001EA9  01                 	db	1
  1386   001EAA  02                 	db	2
  1387   001EAB  04                 	db	4
  1388   001EAC  08                 	db	8
  1389   001EAD  10                 	db	16
  1390   001EAE  20                 	db	32
  1391   001EAF                     __end_ofcontrolLED@ledBits:
  1392                           	callstack 0
  1393   007F92                     _TMR0IF         set	32658
  1394   000FD6                     _TMR0           set	4054
  1395   000F89                     _LATA           set	3977
  1396   000F96                     _TRISE          set	3990
  1397   000F92                     _TRISA          set	3986
  1398   000FAE                     _RCREG          set	4014
  1399   000FAD                     _TXREG          set	4013
  1400   000F9E                     _PIR1bits       set	3998
  1401   000FB8                     _BAUDCON        set	4024
  1402   000FAF                     _SPBRG          set	4015
  1403   000FAB                     _RCSTA          set	4011
  1404   000FAC                     _TXSTA          set	4012
  1405   000F8A                     _LATBbits       set	3978
  1406   000F93                     _TRISBbits      set	3987
  1407   000F82                     _PORTCbits      set	3970
  1408   000F8B                     _LATCbits       set	3979
  1409   000F94                     _TRISCbits      set	3988
  1410   000F8C                     _LATD           set	3980
  1411   000F95                     _TRISD          set	3989
  1412   000F83                     _PORTD          set	3971
  1413   000FD5                     _T0CON          set	4053
  1414   000F8B                     _LATC           set	3979
  1415   000F96                     _TRISEbits      set	3990
  1416   000FC1                     _ADCON1         set	4033
  1417   000F8D                     _LATEbits       set	3981
  1418   000FF2                     _INTCONbits     set	4082
  1419   001EAF                     STR_21:
  1420   001EAF  4E                 	db	78	;'N'
  1421   001EB0  6F                 	db	111	;'o'
  1422   001EB1  20                 	db	32
  1423   001EB2  68                 	db	104	;'h'
  1424   001EB3  69                 	db	105	;'i'
  1425   001EB4  20                 	db	32
  1426   001EB5  68                 	db	104	;'h'
  1427   001EB6  61                 	db	97	;'a'
  1428   001EB7  20                 	db	32
  1429   001EB8  63                 	db	99	;'c'
  1430   001EB9  61                 	db	97	;'a'
  1431   001EBA  70                 	db	112	;'p'
  1432   001EBB  20                 	db	32
  1433   001EBC  75                 	db	117	;'u'
  1434   001EBD  73                 	db	115	;'s'
  1435   001EBE  75                 	db	117	;'u'
  1436   001EBF  61                 	db	97	;'a'
  1437   001EC0  72                 	db	114	;'r'
  1438   001EC1  69                 	db	105	;'i'
  1439   001EC2  20                 	db	32
  1440   001EC3  61                 	db	97	;'a'
  1441   001EC4  20                 	db	32
  1442   001EC5  6C                 	db	108	;'l'
  1443   001EC6  61                 	db	97	;'a'
  1444   001EC7  20                 	db	32
  1445   001EC8  73                 	db	115	;'s'
  1446   001EC9  61                 	db	97	;'a'
  1447   001ECA  6C                 	db	108	;'l'
  1448   001ECB  61                 	db	97	;'a'
  1449   001ECC  2E                 	db	46
  1450   001ECD  0D                 	db	13
  1451   001ECE  0A                 	db	10
  1452   001ECF  00                 	db	0
  1453   001ED0                     STR_19:
  1454   001ED0  45                 	db	69	;'E'
  1455   001ED1  52                 	db	82	;'R'
  1456   001ED2  52                 	db	82	;'R'
  1457   001ED3  4F                 	db	79	;'O'
  1458   001ED4  52                 	db	82	;'R'
  1459   001ED5  2E                 	db	46
  1460   001ED6  20                 	db	32
  1461   001ED7  56                 	db	86	;'V'
  1462   001ED8  61                 	db	97	;'a'
  1463   001ED9  6C                 	db	108	;'l'
  1464   001EDA  6F                 	db	111	;'o'
  1465   001EDB  72                 	db	114	;'r'
  1466   001EDC  20                 	db	32
  1467   001EDD  69                 	db	105	;'i'
  1468   001EDE  6E                 	db	110	;'n'
  1469   001EDF  74                 	db	116	;'t'
  1470   001EE0  72                 	db	114	;'r'
  1471   001EE1  6F                 	db	111	;'o'
  1472   001EE2  64                 	db	100	;'d'
  1473   001EE3  75                 	db	117	;'u'
  1474   001EE4  69                 	db	105	;'i'
  1475   001EE5  74                 	db	116	;'t'
  1476   001EE6  20                 	db	32
  1477   001EE7  65                 	db	101	;'e'
  1478   001EE8  72                 	db	114	;'r'
  1479   001EE9  72                 	db	114	;'r'
  1480   001EEA  6F                 	db	111	;'o'
  1481   001EEB  6E                 	db	110	;'n'
  1482   001EEC  69                 	db	105	;'i'
  1483   001EED  2E                 	db	46
  1484   001EEE  0D                 	db	13
  1485   001EEF  0A                 	db	10
  1486   001EF0  00                 	db	0
  1487   001EF1                     STR_14:
  1488   001EF1  09                 	db	9
  1489   001EF2  33                 	db	51	;'3'
  1490   001EF3  2E                 	db	46
  1491   001EF4  20                 	db	32
  1492   001EF5  4D                 	db	77	;'M'
  1493   001EF6  6F                 	db	111	;'o'
  1494   001EF7  64                 	db	100	;'d'
  1495   001EF8  69                 	db	105	;'i'
  1496   001EF9  66                 	db	102	;'f'
  1497   001EFA  69                 	db	105	;'i'
  1498   001EFB  63                 	db	99	;'c'
  1499   001EFC  61                 	db	97	;'a'
  1500   001EFD  72                 	db	114	;'r'
  1501   001EFE  20                 	db	32
  1502   001EFF  68                 	db	104	;'h'
  1503   001F00  6F                 	db	111	;'o'
  1504   001F01  72                 	db	114	;'r'
  1505   001F02  61                 	db	97	;'a'
  1506   001F03  20                 	db	32
  1507   001F04  64                 	db	100	;'d'
  1508   001F05  65                 	db	101	;'e'
  1509   001F06  6C                 	db	108	;'l'
  1510   001F07  20                 	db	32
  1511   001F08  73                 	db	115	;'s'
  1512   001F09  69                 	db	105	;'i'
  1513   001F0A  73                 	db	115	;'s'
  1514   001F0B  74                 	db	116	;'t'
  1515   001F0C  65                 	db	101	;'e'
  1516   001F0D  6D                 	db	109	;'m'
  1517   001F0E  61                 	db	97	;'a'
  1518   001F0F  0D                 	db	13
  1519   001F10  0A                 	db	10
  1520   001F11  00                 	db	0
  1521   001F12                     STR_24:
  1522   001F12  0D                 	db	13
  1523   001F13  0A                 	db	10
  1524   001F14  48                 	db	72	;'H'
  1525   001F15  6F                 	db	111	;'o'
  1526   001F16  72                 	db	114	;'r'
  1527   001F17  61                 	db	97	;'a'
  1528   001F18  20                 	db	32
  1529   001F19  69                 	db	105	;'i'
  1530   001F1A  6E                 	db	110	;'n'
  1531   001F1B  74                 	db	116	;'t'
  1532   001F1C  72                 	db	114	;'r'
  1533   001F1D  6F                 	db	111	;'o'
  1534   001F1E  64                 	db	100	;'d'
  1535   001F1F  75                 	db	117	;'u'
  1536   001F20  69                 	db	105	;'i'
  1537   001F21  64                 	db	100	;'d'
  1538   001F22  61                 	db	97	;'a'
  1539   001F23  20                 	db	32
  1540   001F24  63                 	db	99	;'c'
  1541   001F25  6F                 	db	111	;'o'
  1542   001F26  72                 	db	114	;'r'
  1543   001F27  72                 	db	114	;'r'
  1544   001F28  65                 	db	101	;'e'
  1545   001F29  63                 	db	99	;'c'
  1546   001F2A  74                 	db	116	;'t'
  1547   001F2B  61                 	db	97	;'a'
  1548   001F2C  6D                 	db	109	;'m'
  1549   001F2D  65                 	db	101	;'e'
  1550   001F2E  6E                 	db	110	;'n'
  1551   001F2F  74                 	db	116	;'t'
  1552   001F30  0D                 	db	13
  1553   001F31  0A                 	db	10
  1554   001F32  00                 	db	0
  1555   001F33                     STR_23:
  1556   001F33  49                 	db	73	;'I'
  1557   001F34  6E                 	db	110	;'n'
  1558   001F35  74                 	db	116	;'t'
  1559   001F36  72                 	db	114	;'r'
  1560   001F37  6F                 	db	111	;'o'
  1561   001F38  64                 	db	100	;'d'
  1562   001F39  75                 	db	117	;'u'
  1563   001F3A  63                 	db	99	;'c'
  1564   001F3B  65                 	db	101	;'e'
  1565   001F3C  20                 	db	32
  1566   001F3D  6C                 	db	108	;'l'
  1567   001F3E  61                 	db	97	;'a'
  1568   001F3F  20                 	db	32
  1569   001F40  68                 	db	104	;'h'
  1570   001F41  6F                 	db	111	;'o'
  1571   001F42  72                 	db	114	;'r'
  1572   001F43  61                 	db	97	;'a'
  1573   001F44  20                 	db	32
  1574   001F45  61                 	db	97	;'a'
  1575   001F46  63                 	db	99	;'c'
  1576   001F47  74                 	db	116	;'t'
  1577   001F48  75                 	db	117	;'u'
  1578   001F49  61                 	db	97	;'a'
  1579   001F4A  6C                 	db	108	;'l'
  1580   001F4B  28                 	db	40
  1581   001F4C  48                 	db	72	;'H'
  1582   001F4D  48                 	db	72	;'H'
  1583   001F4E  4D                 	db	77	;'M'
  1584   001F4F  4D                 	db	77	;'M'
  1585   001F50  29                 	db	41
  1586   001F51  3A                 	db	58	;':'
  1587   001F52  20                 	db	32
  1588   001F53  00                 	db	0
  1589   001F54                     STR_13:
  1590   001F54  09                 	db	9
  1591   001F55  32                 	db	50	;'2'
  1592   001F56  2E                 	db	46
  1593   001F57  20                 	db	32
  1594   001F58  4D                 	db	77	;'M'
  1595   001F59  6F                 	db	111	;'o'
  1596   001F5A  73                 	db	115	;'s'
  1597   001F5B  74                 	db	116	;'t'
  1598   001F5C  72                 	db	114	;'r'
  1599   001F5D  61                 	db	97	;'a'
  1600   001F5E  72                 	db	114	;'r'
  1601   001F5F  20                 	db	32
  1602   001F60  63                 	db	99	;'c'
  1603   001F61  6F                 	db	111	;'o'
  1604   001F62  6E                 	db	110	;'n'
  1605   001F63  66                 	db	102	;'f'
  1606   001F64  69                 	db	105	;'i'
  1607   001F65  67                 	db	103	;'g'
  1608   001F66  75                 	db	117	;'u'
  1609   001F67  72                 	db	114	;'r'
  1610   001F68  61                 	db	97	;'a'
  1611   001F69  63                 	db	99	;'c'
  1612   001F6A  69                 	db	105	;'i'
  1613   001F6B  6F                 	db	111	;'o'
  1614   001F6C  6E                 	db	110	;'n'
  1615   001F6D  73                 	db	115	;'s'
  1616   001F6E  0D                 	db	13
  1617   001F6F  0A                 	db	10
  1618   001F70  00                 	db	0
  1619   001F71                     STR_12:
  1620   001F71  09                 	db	9
  1621   001F72  31                 	db	49	;'1'
  1622   001F73  2E                 	db	46
  1623   001F74  20                 	db	32
  1624   001F75  51                 	db	81	;'Q'
  1625   001F76  75                 	db	117	;'u'
  1626   001F77  69                 	db	105	;'i'
  1627   001F78  20                 	db	32
  1628   001F79  68                 	db	104	;'h'
  1629   001F7A  69                 	db	105	;'i'
  1630   001F7B  20                 	db	32
  1631   001F7C  68                 	db	104	;'h'
  1632   001F7D  61                 	db	97	;'a'
  1633   001F7E  20                 	db	32
  1634   001F7F  61                 	db	97	;'a'
  1635   001F80  20                 	db	32
  1636   001F81  6C                 	db	108	;'l'
  1637   001F82  61                 	db	97	;'a'
  1638   001F83  20                 	db	32
  1639   001F84  73                 	db	115	;'s'
  1640   001F85  61                 	db	97	;'a'
  1641   001F86  6C                 	db	108	;'l'
  1642   001F87  61                 	db	97	;'a'
  1643   001F88  3F                 	db	63	;'?'
  1644   001F89  0D                 	db	13
  1645   001F8A  0A                 	db	10
  1646   001F8B  00                 	db	0
  1647   001F8C                     STR_29:
  1648   001F8C  54                 	db	84	;'T'
  1649   001F8D  61                 	db	97	;'a'
  1650   001F8E  72                 	db	114	;'r'
  1651   001F8F  67                 	db	103	;'g'
  1652   001F90  65                 	db	101	;'e'
  1653   001F91  74                 	db	116	;'t'
  1654   001F92  61                 	db	97	;'a'
  1655   001F93  20                 	db	32
  1656   001F94  64                 	db	100	;'d'
  1657   001F95  65                 	db	101	;'e'
  1658   001F96  74                 	db	116	;'t'
  1659   001F97  65                 	db	101	;'e'
  1660   001F98  63                 	db	99	;'c'
  1661   001F99  74                 	db	116	;'t'
  1662   001F9A  61                 	db	97	;'a'
  1663   001F9B  64                 	db	100	;'d'
  1664   001F9C  61                 	db	97	;'a'
  1665   001F9D  21                 	db	33
  1666   001F9E  0D                 	db	13
  1667   001F9F  0A                 	db	10
  1668   001FA0  09                 	db	9
  1669   001FA1  00                 	db	0
  1670   001FA2                     STR_11:
  1671   001FA2  54                 	db	84	;'T'
  1672   001FA3  72                 	db	114	;'r'
  1673   001FA4  69                 	db	105	;'i'
  1674   001FA5  61                 	db	97	;'a'
  1675   001FA6  20                 	db	32
  1676   001FA7  75                 	db	117	;'u'
  1677   001FA8  6E                 	db	110	;'n'
  1678   001FA9  61                 	db	97	;'a'
  1679   001FAA  20                 	db	32
  1680   001FAB  6F                 	db	111	;'o'
  1681   001FAC  70                 	db	112	;'p'
  1682   001FAD  63                 	db	99	;'c'
  1683   001FAE  69                 	db	105	;'i'
  1684   001FAF  C3                 	db	-61
  1685   001FB0  B3                 	db	-77
  1686   001FB1  3A                 	db	58	;':'
  1687   001FB2  0D                 	db	13
  1688   001FB3  0A                 	db	10
  1689   001FB4  00                 	db	0
  1690   001FB5                     STR_7:
  1691   001FB5  2D                 	db	45
  1692   001FB6  2D                 	db	45
  1693   001FB7  2D                 	db	45
  1694   001FB8  2D                 	db	45
  1695   001FB9  2D                 	db	45
  1696   001FBA  2D                 	db	45
  1697   001FBB  2D                 	db	45
  1698   001FBC  2D                 	db	45
  1699   001FBD  2D                 	db	45
  1700   001FBE  2D                 	db	45
  1701   001FBF  2D                 	db	45
  1702   001FC0  2D                 	db	45
  1703   001FC1  2D                 	db	45
  1704   001FC2  2D                 	db	45
  1705   001FC3  2D                 	db	45
  1706   001FC4  0D                 	db	13
  1707   001FC5  0A                 	db	10
  1708   001FC6  00                 	db	0
  1709   001FC7                     STR_9:
  1710   001FC7  4D                 	db	77	;'M'
  1711   001FC8  65                 	db	101	;'e'
  1712   001FC9  6E                 	db	110	;'n'
  1713   001FCA  C3                 	db	-61
  1714   001FCB  BA                 	db	-70
  1715   001FCC  20                 	db	32
  1716   001FCD  70                 	db	112	;'p'
  1717   001FCE  72                 	db	114	;'r'
  1718   001FCF  69                 	db	105	;'i'
  1719   001FD0  6E                 	db	110	;'n'
  1720   001FD1  63                 	db	99	;'c'
  1721   001FD2  69                 	db	105	;'i'
  1722   001FD3  70                 	db	112	;'p'
  1723   001FD4  61                 	db	97	;'a'
  1724   001FD5  6C                 	db	108	;'l'
  1725   001FD6  0D                 	db	13
  1726   001FD7  0A                 	db	10
  1727   001FD8  00                 	db	0
  1728   001FD9                     STR_26:
  1729   001FD9  20                 	db	32
  1730   001FDA  43                 	db	67	;'C'
  1731   001FDB  6F                 	db	111	;'o'
  1732   001FDC  6E                 	db	110	;'n'
  1733   001FDD  66                 	db	102	;'f'
  1734   001FDE  69                 	db	105	;'i'
  1735   001FDF  67                 	db	103	;'g'
  1736   001FE0  3A                 	db	58	;':'
  1737   001FE1  20                 	db	32
  1738   001FE2  00                 	db	0
  1739   001FE3                     STR_15:
  1740   001FE3  4F                 	db	79	;'O'
  1741   001FE4  70                 	db	112	;'p'
  1742   001FE5  63                 	db	99	;'c'
  1743   001FE6  69                 	db	105	;'i'
  1744   001FE7  C3                 	db	-61
  1745   001FE8  B3                 	db	-77
  1746   001FE9  3A                 	db	58	;':'
  1747   001FEA  20                 	db	32
  1748   001FEB  00                 	db	0
  1749   001FEC                     STR_25:
  1750   001FEC  55                 	db	85	;'U'
  1751   001FED  73                 	db	115	;'s'
  1752   001FEE  65                 	db	101	;'e'
  1753   001FEF  72                 	db	114	;'r'
  1754   001FF0  20                 	db	32
  1755   001FF1  00                 	db	0
  1756   001FF2                     STR_1:
  1757   001FF2  55                 	db	85	;'U'
  1758   001FF3  49                 	db	73	;'I'
  1759   001FF4  44                 	db	68	;'D'
  1760   001FF5  3A                 	db	58	;':'
  1761   001FF6  20                 	db	32
  1762   001FF7  00                 	db	0
  1763   001FF8                     STR_5:
  1764   001FF8  20                 	db	32
  1765   001FF9  2D                 	db	45
  1766   001FFA  20                 	db	32
  1767   001FFB  00                 	db	0
  1768   001FFC                     STR_2:
  1769   001FFC  2D                 	db	45
  1770   001FFD  00                 	db	0
  1771   001FF2                     STR_20          equ	STR_1
  1772   001FE9                     STR_4           equ	STR_15+6
  1773   001FFA                     STR_27          equ	STR_5+2
  1774   001FB5                     STR_8           equ	STR_7
  1775   001FB5                     STR_10          equ	STR_7
  1776   001FC4                     STR_3           equ	STR_7+15
  1777   001FC4                     STR_6           equ	STR_7+15
  1778   001FC4                     STR_16          equ	STR_7+15
  1779   001FC4                     STR_17          equ	STR_7+15
  1780   001FC4                     STR_18          equ	STR_7+15
  1781   001FC4                     STR_22          equ	STR_7+15
  1782   001FC4                     STR_28          equ	STR_7+15
  1783   001FA0                     STR_30          equ	STR_29+20
  1784   001FFE  00                 	db	0	; dummy byte at the end
  1785   001E9C                     __smallconst    set	__pmediumconst
  1786   001E9C                     __mediumconst   set	__pmediumconst
  1787   000002                     __activetblptr  equ	2
  1788                           
  1789                           ; #config settings
  1790                           
  1791                           	psect	cinit
  1792   001826                     __pcinit:
  1793                           	callstack 0
  1794   001826                     start_initialization:
  1795                           	callstack 0
  1796   001826                     __initialization:
  1797                           	callstack 0
  1798                           
  1799                           ; Initialize objects allocated to BANK0 (88 bytes)
  1800                           ; load TBLPTR registers with __pidataBANK0
  1801   001826  0E8C               	movlw	low __pidataBANK0
  1802   001828  6EF6               	movwf	tblptrl,c
  1803   00182A  0E18               	movlw	high __pidataBANK0
  1804   00182C  6EF7               	movwf	tblptrh,c
  1805   00182E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1806   001830  6EF8               	movwf	tblptru,c
  1807   001832  EE00  F080         	lfsr	0,__pdataBANK0
  1808   001836  EE10 F058          	lfsr	1,88
  1809   00183A                     copy_data0:
  1810   00183A  0009               	tblrd		*+
  1811   00183C  CFF5 FFEE          	movff	tablat,postinc0
  1812   001840  50E5               	movf	postdec1,w,c
  1813   001842  50E1               	movf	fsr1l,w,c
  1814   001844  E1FA               	bnz	copy_data0
  1815                           
  1816                           ; Initialize objects allocated to COMRAM (8 bytes)
  1817                           ; load TBLPTR registers with __pidataCOMRAM
  1818   001846  0E8E               	movlw	low __pidataCOMRAM
  1819   001848  6EF6               	movwf	tblptrl,c
  1820   00184A  0E1D               	movlw	high __pidataCOMRAM
  1821   00184C  6EF7               	movwf	tblptrh,c
  1822   00184E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1823   001850  6EF8               	movwf	tblptru,c
  1824   001852  EE00  F072         	lfsr	0,__pdataCOMRAM
  1825   001856  EE10 F008          	lfsr	1,8
  1826   00185A                     copy_data1:
  1827   00185A  0009               	tblrd		*+
  1828   00185C  CFF5 FFEE          	movff	tablat,postinc0
  1829   001860  50E5               	movf	postdec1,w,c
  1830   001862  50E1               	movf	fsr1l,w,c
  1831   001864  E1FA               	bnz	copy_data1
  1832                           
  1833                           ; Clear objects allocated to BANK0 (20 bytes)
  1834   001866  EE00  F0D8         	lfsr	0,__pbssBANK0
  1835   00186A  0E14               	movlw	20
  1836   00186C                     clear_0:
  1837   00186C  6AEE               	clrf	postinc0,c
  1838   00186E  06E8               	decf	wreg,f,c
  1839   001870  E1FD               	bnz	clear_0
  1840                           
  1841                           ; Clear objects allocated to COMRAM (79 bytes)
  1842   001872  EE00  F001         	lfsr	0,__pbssCOMRAM
  1843   001876  0E4F               	movlw	79
  1844   001878                     clear_1:
  1845   001878  6AEE               	clrf	postinc0,c
  1846   00187A  06E8               	decf	wreg,f,c
  1847   00187C  E1FD               	bnz	clear_1
  1848   00187E                     end_of_initialization:
  1849                           	callstack 0
  1850   00187E                     __end_of__initialization:
  1851                           	callstack 0
  1852   00187E  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1853   001880  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1854   001882  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1855   001884  6EF8               	movwf	tblptru,c
  1856   001886  0100               	movlb	0
  1857   001888  EF4F  F00D         	goto	_main	;jump to C main() function
  1858                           
  1859                           	psect	bssCOMRAM
  1860   000001                     __pbssCOMRAM:
  1861                           	callstack 0
  1862   000001                     motor_RFID@UID:
  1863                           	callstack 0
  1864   000001                     	ds	6
  1865   000007                     motor_LEDs@lastTics:
  1866                           	callstack 0
  1867   000007                     	ds	4
  1868   00000B                     _Tics:
  1869                           	callstack 0
  1870   00000B                     	ds	4
  1871   00000F                     _pointer:
  1872                           	callstack 0
  1873   00000F                     	ds	2
  1874   000011                     _index:
  1875                           	callstack 0
  1876   000011                     	ds	2
  1877   000013                     _str_ptr:
  1878                           	callstack 0
  1879   000013                     	ds	2
  1880   000015                     	ds	2
  1881   000017                     motor_Read@timeout_counter:
  1882                           	callstack 0
  1883   000017                     	ds	2
  1884   000019                     setLed@userIndex:
  1885                           	callstack 0
  1886   000019                     	ds	1
  1887   00001A                     setLed@ledIndex:
  1888                           	callstack 0
  1889   00001A                     	ds	1
  1890   00001B                     setLed@modeLED:
  1891                           	callstack 0
  1892   00001B                     	ds	1
  1893   00001C                     motor_datos@pointer:
  1894                           	callstack 0
  1895   00001C                     	ds	1
  1896   00001D                     motor_datos@state:
  1897                           	callstack 0
  1898   00001D                     	ds	1
  1899   00001E                     _new_user:
  1900                           	callstack 0
  1901   00001E                     	ds	1
  1902   00001F                     _new_configuration:
  1903                           	callstack 0
  1904   00001F                     	ds	1
  1905   000020                     motorTerminal@index:
  1906                           	callstack 0
  1907   000020                     	ds	1
  1908   000021                     motorTerminal@sending_string:
  1909                           	callstack 0
  1910   000021                     	ds	1
  1911   000022                     motorTerminal@state:
  1912                           	callstack 0
  1913   000022                     	ds	1
  1914   000023                     _hashtag_pressed:
  1915                           	callstack 0
  1916   000023                     	ds	1
  1917   000024                     _state_str:
  1918                           	callstack 0
  1919   000024                     	ds	1
  1920   000025                     _ColumnAct:
  1921                           	callstack 0
  1922   000025                     	ds	1
  1923   000026                     _RowAct:
  1924                           	callstack 0
  1925   000026                     	ds	1
  1926   000027                     _Columns:
  1927                           	callstack 0
  1928   000027                     	ds	1
  1929   000028                     _Rows:
  1930                           	callstack 0
  1931   000028                     	ds	1
  1932   000029                     motor_RFID@fifoLevel:
  1933                           	callstack 0
  1934   000029                     	ds	1
  1935   00002A                     motor_RFID@lastBitsVal:
  1936                           	callstack 0
  1937   00002A                     	ds	1
  1938   00002B                     motor_RFID@tempRegValue:
  1939                           	callstack 0
  1940   00002B                     	ds	1
  1941   00002C                     motor_RFID@allZero:
  1942                           	callstack 0
  1943   00002C                     	ds	1
  1944   00002D                     motor_RFID@checksum:
  1945                           	callstack 0
  1946   00002D                     	ds	1
  1947   00002E                     motor_RFID@TagType:
  1948                           	callstack 0
  1949   00002E                     	ds	1
  1950   00002F                     	ds	1
  1951   000030                     motor_RFID@i:
  1952                           	callstack 0
  1953   000030                     	ds	1
  1954   000031                     motor_RFID@n:
  1955                           	callstack 0
  1956   000031                     	ds	1
  1957   000032                     motor_RFID@waitIRq:
  1958                           	callstack 0
  1959   000032                     	ds	1
  1960   000033                     motor_RFID@irqEn:
  1961                           	callstack 0
  1962   000033                     	ds	1
  1963   000034                     motor_RFID@substate:
  1964                           	callstack 0
  1965   000034                     	ds	1
  1966   000035                     motor_RFID@state:
  1967                           	callstack 0
  1968   000035                     	ds	1
  1969   000036                     motor_Read@ucResult:
  1970                           	callstack 0
  1971   000036                     	ds	1
  1972   000037                     _state:
  1973                           	callstack 0
  1974   000037                     	ds	1
  1975   000038                     _tecla:
  1976                           	callstack 0
  1977   000038                     	ds	1
  1978   000039                     _Columnas:
  1979                           	callstack 0
  1980   000039                     	ds	1
  1981   00003A                     _Filas:
  1982                           	callstack 0
  1983   00003A                     	ds	1
  1984   00003B                     _ActualLeds:
  1985                           	callstack 0
  1986   00003B                     	ds	6
  1987   000041                     _currentUser:
  1988                           	callstack 0
  1989   000041                     	ds	5
  1990   000046                     _timer@TAD_LEDS$F977:
  1991                           	callstack 0
  1992   000046                     	ds	1
  1993   000047                     _Timer:
  1994                           	callstack 0
  1995   000047                     	ds	1
  1996   000048                     motor_Read@ucAddr:
  1997                           	callstack 0
  1998   000048                     	ds	1
  1999   000049                     motor_Read@bit_count:
  2000                           	callstack 0
  2001   000049                     	ds	1
  2002   00004A                     motor_Write@ucValue:
  2003                           	callstack 0
  2004   00004A                     	ds	1
  2005   00004B                     motor_Write@ucAddr:
  2006                           	callstack 0
  2007   00004B                     	ds	1
  2008   00004C                     motor_Write@bit_count:
  2009                           	callstack 0
  2010   00004C                     	ds	1
  2011   00004D                     _state_write:
  2012                           	callstack 0
  2013   00004D                     	ds	1
  2014   00004E                     _state_read:
  2015                           	callstack 0
  2016   00004E                     	ds	1
  2017   00004F                     _timer:
  2018                           	callstack 0
  2019   00004F                     	ds	1
  2020                           
  2021                           	psect	dataCOMRAM
  2022   000072                     __pdataCOMRAM:
  2023                           	callstack 0
  2024   000072                     _currentTime:
  2025                           	callstack 0
  2026   000072                     	ds	4
  2027   000076                     motorTerminal@hour:
  2028                           	callstack 0
  2029   000076                     	ds	4
  2030                           
  2031                           	psect	bssBANK0
  2032   0000D8                     __pbssBANK0:
  2033                           	callstack 0
  2034   0000D8                     _Timers:
  2035                           	callstack 0
  2036   0000D8                     	ds	20
  2037                           
  2038                           	psect	dataBANK0
  2039   000080                     __pdataBANK0:
  2040                           	callstack 0
  2041   000080                     _userUIDs:
  2042                           	callstack 0
  2043   000080                     	ds	64
  2044   0000C0                     _configurations:
  2045                           	callstack 0
  2046   0000C0                     	ds	24
  2047                           
  2048                           	psect	cstackCOMRAM
  2049   000050                     __pcstackCOMRAM:
  2050                           	callstack 0
  2051   000050                     ??_LowRSI:
  2052                           
  2053                           ; 1 bytes @ 0x0
  2054   000050                     	ds	1
  2055   000051                     ?_Terminal_TXAvailable:
  2056                           	callstack 0
  2057   000051                     ?_TI_GetTics:
  2058                           	callstack 0
  2059   000051                     TI_Init@counter:
  2060                           	callstack 0
  2061   000051                     TI_NewTimer@TimerHandle:
  2062                           	callstack 0
  2063   000051                     TI_ResetTics@TimerHandle:
  2064                           	callstack 0
  2065   000051                     delay_us@howMany:
  2066                           	callstack 0
  2067   000051                     getActualUID@UID:
  2068                           	callstack 0
  2069   000051                     saveHourToData@hour:
  2070                           	callstack 0
  2071   000051                     ??_EscriuPrimeraOrdre:
  2072   000051                     ??_CantaPartAlta:
  2073   000051                     ??_CantaPartBaixa:
  2074   000051                     
  2075                           ; 1 bytes @ 0x1
  2076   000051                     	ds	1
  2077   000052                     delay_us@x:
  2078                           	callstack 0
  2079   000052                     CantaPartAlta@c:
  2080                           	callstack 0
  2081   000052                     CantaPartBaixa@c:
  2082                           	callstack 0
  2083   000052                     EscriuPrimeraOrdre@ordre:
  2084                           	callstack 0
  2085   000052                     
  2086                           ; 1 bytes @ 0x2
  2087   000052                     	ds	1
  2088   000053                     TI_NewTimer@Comptador:
  2089                           	callstack 0
  2090   000053                     MFRC522_Wr@value:
  2091                           	callstack 0
  2092   000053                     processBit@val:
  2093                           	callstack 0
  2094   000053                     CantaIR@IR:
  2095                           	callstack 0
  2096   000053                     ??_MFRC522_Rd:
  2097   000053                     ??_Terminal_TXAvailable:
  2098                           
  2099                           ; 1 bytes @ 0x3
  2100   000053                     	ds	1
  2101   000054                     MFRC522_Rd@Address:
  2102                           	callstack 0
  2103   000054                     processBit@bit_count:
  2104                           	callstack 0
  2105   000054                     Terminal_SendChar@c:
  2106                           	callstack 0
  2107   000054                     motor_SendChar@c:
  2108                           	callstack 0
  2109   000054                     ??_MFRC522_Wr:
  2110   000054                     
  2111                           ; 1 bytes @ 0x4
  2112   000054                     	ds	1
  2113   000055                     MFRC522_Rd@ucAddr:
  2114                           	callstack 0
  2115   000055                     MFRC522_Wr@Address:
  2116                           	callstack 0
  2117   000055                     processBit@state:
  2118                           	callstack 0
  2119   000055                     Terminal_SendString@str:
  2120                           	callstack 0
  2121   000055                     motor_StartSendString@str:
  2122                           	callstack 0
  2123   000055                     ??_TI_GetTics:
  2124   000055                     
  2125                           ; 1 bytes @ 0x5
  2126   000055                     	ds	1
  2127   000056                     MFRC522_Rd@ucResult:
  2128                           	callstack 0
  2129   000056                     MFRC522_Wr@ucAddr:
  2130                           	callstack 0
  2131   000056                     processBit@next_state:
  2132                           	callstack 0
  2133                           
  2134                           ; 1 bytes @ 0x6
  2135   000056                     	ds	1
  2136   000057                     MFRC522_Rd@i:
  2137                           	callstack 0
  2138   000057                     MFRC522_Wr@i:
  2139                           	callstack 0
  2140   000057                     printfUID@currentUser:
  2141                           	callstack 0
  2142   000057                     printLedConfig@leds:
  2143                           	callstack 0
  2144   000057                     showAllConfigurations@j:
  2145                           	callstack 0
  2146   000057                     ??_processBit:
  2147   000057                     
  2148                           ; 1 bytes @ 0x7
  2149   000057                     	ds	1
  2150   000058                     MFRC522_Bit_Mask@mask:
  2151                           	callstack 0
  2152   000058                     motor_Write@value:
  2153                           	callstack 0
  2154   000058                     _printLedConfig$880:
  2155                           	callstack 0
  2156   000058                     ??_motor_Read:
  2157   000058                     ??_printfUID:
  2158   000058                     
  2159                           ; 1 bytes @ 0x8
  2160   000058                     	ds	1
  2161   000059                     MFRC522_Bit_Mask@op:
  2162                           	callstack 0
  2163   000059                     motor_Write@addr:
  2164                           	callstack 0
  2165   000059                     motor_Read@addr:
  2166                           	callstack 0
  2167   000059                     _printfUID$870:
  2168                           	callstack 0
  2169   000059                     showAllConfigurations@i:
  2170                           	callstack 0
  2171   000059                     TI_GetTics@CopiaTicsActual:
  2172                           	callstack 0
  2173   000059                     
  2174                           ; 1 bytes @ 0x9
  2175   000059                     	ds	1
  2176   00005A                     printLedConfig@val:
  2177                           	callstack 0
  2178   00005A                     _motor_Read$563:
  2179                           	callstack 0
  2180   00005A                     ??_MFRC522_Bit_Mask:
  2181                           
  2182                           ; 1 bytes @ 0xA
  2183   00005A                     	ds	1
  2184   00005B                     _MFRC522_Bit_Mask$534:
  2185                           	callstack 0
  2186   00005B                     _printfUID$872:
  2187                           	callstack 0
  2188   00005B                     printLedConfig@i:
  2189                           	callstack 0
  2190                           
  2191                           ; 2 bytes @ 0xB
  2192   00005B                     	ds	2
  2193   00005D                     TI_GetTics@TimerHandle:
  2194                           	callstack 0
  2195   00005D                     MFRC522_Bit_Mask@addr:
  2196                           	callstack 0
  2197   00005D                     printfUID@high:
  2198                           	callstack 0
  2199                           
  2200                           ; 1 bytes @ 0xD
  2201   00005D                     	ds	1
  2202   00005E                     MFRC522_Bit_Mask@temp:
  2203                           	callstack 0
  2204   00005E                     printfUID@low:
  2205                           	callstack 0
  2206   00005E                     Espera@Timer:
  2207                           	callstack 0
  2208                           
  2209                           ; 2 bytes @ 0xE
  2210   00005E                     	ds	1
  2211   00005F                     MFRC522_AntennaControl@on:
  2212                           	callstack 0
  2213   00005F                     printfUID@i:
  2214                           	callstack 0
  2215   00005F                     
  2216                           ; 1 bytes @ 0xF
  2217   00005F                     	ds	1
  2218   000060                     Espera@ms:
  2219                           	callstack 0
  2220   000060                     
  2221                           ; 1 bytes @ 0x10
  2222   000060                     	ds	1
  2223   000061                     setCurrentUser@UID1:
  2224                           	callstack 0
  2225   000061                     motorTerminal@currentUser:
  2226                           	callstack 0
  2227   000061                     
  2228                           ; 1 bytes @ 0x11
  2229   000061                     	ds	1
  2230   000062                     setCurrentUser@UID2:
  2231                           	callstack 0
  2232   000062                     ??_Espera:
  2233                           
  2234                           ; 1 bytes @ 0x12
  2235   000062                     	ds	1
  2236   000063                     setCurrentUser@UID3:
  2237                           	callstack 0
  2238                           
  2239                           ; 1 bytes @ 0x13
  2240   000063                     	ds	1
  2241   000064                     setCurrentUser@UID4:
  2242                           	callstack 0
  2243                           
  2244                           ; 1 bytes @ 0x14
  2245   000064                     	ds	1
  2246   000065                     setCurrentUser@UID0:
  2247                           	callstack 0
  2248   000065                     
  2249                           ; 1 bytes @ 0x15
  2250   000065                     	ds	1
  2251   000066                     LcInit@columns:
  2252                           	callstack 0
  2253   000066                     motorTerminal@currentUser_905:
  2254                           	callstack 0
  2255   000066                     ??_motor_RFID:
  2256   000066                     
  2257                           ; 1 bytes @ 0x16
  2258   000066                     	ds	1
  2259   000067                     LcInit@rows:
  2260                           	callstack 0
  2261   000067                     
  2262                           ; 1 bytes @ 0x17
  2263   000067                     	ds	1
  2264   000068                     motor_RFID@differentUID:
  2265                           	callstack 0
  2266   000068                     LcInit@i:
  2267                           	callstack 0
  2268                           
  2269                           ; 2 bytes @ 0x18
  2270   000068                     	ds	1
  2271   000069                     motor_RFID@currentUser:
  2272                           	callstack 0
  2273                           
  2274                           ; 5 bytes @ 0x19
  2275   000069                     	ds	5
  2276   00006E                     _motor_RFID$591:
  2277                           	callstack 0
  2278                           
  2279                           ; 2 bytes @ 0x1E
  2280   00006E                     	ds	2
  2281   000070                     motor_RFID@backBitsCalc:
  2282                           	callstack 0
  2283                           
  2284                           ; 1 bytes @ 0x20
  2285   000070                     	ds	1
  2286   000071                     motor_RFID@flag:
  2287                           	callstack 0
  2288                           
  2289                           ; 1 bytes @ 0x21
  2290   000071                     	ds	1
  2291   000072                     
  2292                           ; 1 bytes @ 0x22
  2293 ;;
  2294 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2295 ;;
  2296 ;; *************** function _main *****************
  2297 ;; Defined at:
  2298 ;;		line 39 in file "main.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;		None
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1
  2312 ;;      Params:         0       0       0
  2313 ;;      Locals:         0       0       0
  2314 ;;      Temps:          0       0       0
  2315 ;;      Totals:         0       0       0
  2316 ;;Total ram usage:        0 bytes
  2317 ;; Hardware stack levels required when called: 9
  2318 ;; This function calls:
  2319 ;;		_LcInit
  2320 ;;		_TI_Init
  2321 ;;		_Terminal_Init
  2322 ;;		_initData
  2323 ;;		_initLeds
  2324 ;;		_initPorts
  2325 ;;		_initRFID
  2326 ;;		_initTeclado
  2327 ;;		_motorTerminal
  2328 ;;		_motor_RFID
  2329 ;; This function is called by:
  2330 ;;		Startup code after reset
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text0
  2335   001A9E                     __ptext0:
  2336                           	callstack 0
  2337   001A9E                     _main:
  2338                           	callstack 22
  2339   001A9E                     
  2340                           ;main.c: 40:  ADCON1 = 0x0F;
  2341   001A9E  ECBD  F00D         	call	_TI_Init	;wreg free
  2342                           
  2343                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2344   001AA2  EC78  F00E         	call	_initTeclado	;wreg free
  2345   001AA6                     
  2346                           ;main.c: 42: }
  2347   001AA6  ECBD  F00E         	call	_initRFID	;wreg free
  2348   001AAA                     
  2349                           ;main.c: 43: 
  2350   001AAA  ECA2  F00E         	call	_Terminal_Init	;wreg free
  2351   001AAE                     
  2352                           ;main.c: 44: 
  2353   001AAE  ECCF  F00E         	call	_initPorts	;wreg free
  2354   001AB2                     
  2355                           ;main.c: 45: 
  2356   001AB2  ECAA  F00E         	call	_initLeds	;wreg free
  2357   001AB6                     
  2358                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2359   001AB6  0E10               	movlw	16
  2360   001AB8  6E66               	movwf	LcInit@columns^0,c
  2361   001ABA  0E02               	movlw	2
  2362   001ABC  EC02  F008         	call	_LcInit
  2363   001AC0                     
  2364                           ;main.c: 47: 
  2365   001AC0  ECB7  F00E         	call	_initData	;wreg free
  2366   001AC4  8EF2               	bsf	242,7,c	;volatile
  2367   001AC6  9CF2               	bcf	242,6,c	;volatile
  2368   001AC8                     l4754:
  2369   001AC8  EC79  F005         	call	_motorTerminal	;wreg free
  2370   001ACC  EC15  F000         	call	_motor_RFID	;wreg free
  2371   001AD0  748D               	btg	141,2,c	;volatile
  2372   001AD2  EF64  F00D         	goto	l4754
  2373   001AD6  EF13  F000         	goto	start
  2374   001ADA                     __end_of_main:
  2375                           	callstack 0
  2376                           
  2377 ;; *************** function _motor_RFID *****************
  2378 ;; Defined at:
  2379 ;;		line 253 in file "TAD_RFID.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  currentUser     5   25[COMRAM] unsigned char [5]
  2384 ;;  differentUID    1   24[COMRAM] unsigned char 
  2385 ;;  flag            1   33[COMRAM] unsigned char 
  2386 ;;  backBitsCalc    1   32[COMRAM] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1
  2396 ;;      Params:         0       0       0
  2397 ;;      Locals:        10       0       0
  2398 ;;      Temps:          2       0       0
  2399 ;;      Totals:        12       0       0
  2400 ;;Total ram usage:       12 bytes
  2401 ;; Hardware stack levels used: 1
  2402 ;; Hardware stack levels required when called: 8
  2403 ;; This function calls:
  2404 ;;		_getActualUID
  2405 ;;		_motor_Read
  2406 ;;		_motor_Write
  2407 ;;		_setCurrentUser
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text1
  2414   00002A                     __ptext1:
  2415                           	callstack 0
  2416   00002A                     _motor_RFID:
  2417                           	callstack 22
  2418   00002A                     
  2419                           ;TAD_RFID.c: 266:     static unsigned char lastBitsVal;;TAD_RFID.c: 267:     static unsi
      +                          gned char fifoLevel;;TAD_RFID.c: 268:     unsigned char backBitsCalc;;TAD_RFID.c: 270:  
      +                             switch(state) {
  2420   00002A  EF6D  F005         	goto	l4610
  2421   00002E                     l4172:
  2422                           
  2423                           ;TAD_RFID.c: 275:                     flag = motor_Write(0x0D, 0x07);
  2424   00002E  0E07               	movlw	7
  2425   000030  6E58               	movwf	motor_Write@value^0,c
  2426   000032  0E0D               	movlw	13
  2427   000034  ECDD  F00A         	call	_motor_Write
  2428   000038  6E71               	movwf	motor_RFID@flag^0,c
  2429   00003A                     
  2430                           ;TAD_RFID.c: 276:                     if (flag != 0){
  2431   00003A  5071               	movf	motor_RFID@flag^0,w,c
  2432   00003C  B4D8               	btfsc	status,2,c
  2433   00003E  EF23  F000         	goto	u3411
  2434   000042  EF25  F000         	goto	u3410
  2435   000046                     u3411:
  2436   000046  EF78  F005         	goto	l495
  2437   00004A                     u3410:
  2438   00004A                     
  2439                           ;TAD_RFID.c: 277:                         TagType = 0x26;
  2440   00004A  0E26               	movlw	38
  2441   00004C  6E2E               	movwf	motor_RFID@TagType^0,c
  2442                           
  2443                           ;TAD_RFID.c: 278:                         substate = 1;
  2444   00004E  0E01               	movlw	1
  2445   000050  6E34               	movwf	motor_RFID@substate^0,c
  2446   000052  EF78  F005         	goto	l495
  2447   000056                     l4178:
  2448                           
  2449                           ;TAD_RFID.c: 282:                     irqEn = 0x77;
  2450   000056  0E77               	movlw	119
  2451   000058  6E33               	movwf	motor_RFID@irqEn^0,c
  2452                           
  2453                           ;TAD_RFID.c: 283:                     waitIRq = 0x30;
  2454   00005A  0E30               	movlw	48
  2455   00005C  6E32               	movwf	motor_RFID@waitIRq^0,c
  2456   00005E                     
  2457                           ;TAD_RFID.c: 284:                     flag = motor_Write(0x02, irqEn | 0x80);
  2458   00005E  0EF7               	movlw	247
  2459   000060  6E58               	movwf	motor_Write@value^0,c
  2460   000062  0E02               	movlw	2
  2461   000064  ECDD  F00A         	call	_motor_Write
  2462   000068  6E71               	movwf	motor_RFID@flag^0,c
  2463   00006A                     
  2464                           ;TAD_RFID.c: 285:                     if (flag != 0) substate = 2;
  2465   00006A  5071               	movf	motor_RFID@flag^0,w,c
  2466   00006C  B4D8               	btfsc	status,2,c
  2467   00006E  EF3B  F000         	goto	u3421
  2468   000072  EF3D  F000         	goto	u3420
  2469   000076                     u3421:
  2470   000076  EF78  F005         	goto	l495
  2471   00007A                     u3420:
  2472   00007A                     l4184:
  2473   00007A  0E02               	movlw	2
  2474   00007C  6E34               	movwf	motor_RFID@substate^0,c
  2475   00007E  EF78  F005         	goto	l495
  2476   000082                     l4186:
  2477                           
  2478                           ;TAD_RFID.c: 288:                     flag = motor_Read(0x04);
  2479   000082  0E04               	movlw	4
  2480   000084  EC79  F007         	call	_motor_Read
  2481   000088  6E71               	movwf	motor_RFID@flag^0,c
  2482   00008A                     
  2483                           ;TAD_RFID.c: 289:                     if (flag == 0xFF) {
  2484   00008A  2871               	incf	motor_RFID@flag^0,w,c
  2485   00008C  A4D8               	btfss	status,2,c
  2486   00008E  EF4B  F000         	goto	u3431
  2487   000092  EF4D  F000         	goto	u3430
  2488   000096                     u3431:
  2489   000096  EF50  F000         	goto	l4192
  2490   00009A                     u3430:
  2491   00009A                     l4190:
  2492                           
  2493                           ;TAD_RFID.c: 290:                         substate = 0;
  2494   00009A  6A34               	clrf	motor_RFID@substate^0,c
  2495                           
  2496                           ;TAD_RFID.c: 291:                     } else if (flag != 0xFE) {
  2497   00009C  EF78  F005         	goto	l495
  2498   0000A0                     l4192:
  2499   0000A0  0EFE               	movlw	254
  2500   0000A2  1871               	xorwf	motor_RFID@flag^0,w,c
  2501   0000A4  B4D8               	btfsc	status,2,c
  2502   0000A6  EF57  F000         	goto	u3441
  2503   0000AA  EF59  F000         	goto	u3440
  2504   0000AE                     u3441:
  2505   0000AE  EF5F  F002         	goto	l344
  2506   0000B2                     u3440:
  2507   0000B2                     
  2508                           ;TAD_RFID.c: 292:                         tempRegValue = flag;
  2509   0000B2  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2510   0000B6                     l4196:
  2511                           
  2512                           ;TAD_RFID.c: 293:                         substate = 3;
  2513   0000B6  0E03               	movlw	3
  2514   0000B8  6E34               	movwf	motor_RFID@substate^0,c
  2515   0000BA  EF78  F005         	goto	l495
  2516   0000BE                     l4198:
  2517                           
  2518                           ;TAD_RFID.c: 297:                     flag = motor_Write(0x02, tempRegValue & ~0x80);
  2519   0000BE  502B               	movf	motor_RFID@tempRegValue^0,w,c
  2520   0000C0  0B7F               	andlw	127
  2521   0000C2  6E58               	movwf	motor_Write@value^0,c
  2522   0000C4  0E02               	movlw	2
  2523   0000C6  ECDD  F00A         	call	_motor_Write
  2524   0000CA  6E71               	movwf	motor_RFID@flag^0,c
  2525   0000CC                     
  2526                           ;TAD_RFID.c: 298:                     if (flag != 0) substate = 4;
  2527   0000CC  5071               	movf	motor_RFID@flag^0,w,c
  2528   0000CE  B4D8               	btfsc	status,2,c
  2529   0000D0  EF6C  F000         	goto	u3451
  2530   0000D4  EF6E  F000         	goto	u3450
  2531   0000D8                     u3451:
  2532   0000D8  EF78  F005         	goto	l495
  2533   0000DC                     u3450:
  2534   0000DC                     l4202:
  2535   0000DC  0E04               	movlw	4
  2536   0000DE  6E34               	movwf	motor_RFID@substate^0,c
  2537   0000E0  EF78  F005         	goto	l495
  2538   0000E4                     l4204:
  2539                           
  2540                           ;TAD_RFID.c: 301:                     flag = motor_Read(0x0A);
  2541   0000E4  0E0A               	movlw	10
  2542   0000E6  EC79  F007         	call	_motor_Read
  2543   0000EA  6E71               	movwf	motor_RFID@flag^0,c
  2544   0000EC                     
  2545                           ;TAD_RFID.c: 302:                     if (flag == 0xFF) {
  2546   0000EC  2871               	incf	motor_RFID@flag^0,w,c
  2547   0000EE  A4D8               	btfss	status,2,c
  2548   0000F0  EF7C  F000         	goto	u3461
  2549   0000F4  EF7E  F000         	goto	u3460
  2550   0000F8                     u3461:
  2551   0000F8  EF80  F000         	goto	l4210
  2552   0000FC                     u3460:
  2553   0000FC  EF4D  F000         	goto	l4190
  2554   000100                     l4210:
  2555   000100  0EFE               	movlw	254
  2556   000102  1871               	xorwf	motor_RFID@flag^0,w,c
  2557   000104  B4D8               	btfsc	status,2,c
  2558   000106  EF87  F000         	goto	u3471
  2559   00010A  EF89  F000         	goto	u3470
  2560   00010E                     u3471:
  2561   00010E  EF5F  F002         	goto	l344
  2562   000112                     u3470:
  2563   000112                     l4212:
  2564                           
  2565                           ;TAD_RFID.c: 305:                         tempRegValue = flag;
  2566   000112  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2567   000116                     
  2568                           ;TAD_RFID.c: 306:                         substate = 5;
  2569   000116  0E05               	movlw	5
  2570   000118  6E34               	movwf	motor_RFID@substate^0,c
  2571   00011A  EF78  F005         	goto	l495
  2572   00011E                     l4216:
  2573                           
  2574                           ;TAD_RFID.c: 310:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  2575   00011E  502B               	movf	motor_RFID@tempRegValue^0,w,c
  2576   000120  0980               	iorlw	128
  2577   000122  6E58               	movwf	motor_Write@value^0,c
  2578   000124  0E0A               	movlw	10
  2579   000126  ECDD  F00A         	call	_motor_Write
  2580   00012A  6E71               	movwf	motor_RFID@flag^0,c
  2581   00012C                     
  2582                           ;TAD_RFID.c: 311:                     if (flag != 0) substate = 6;
  2583   00012C  5071               	movf	motor_RFID@flag^0,w,c
  2584   00012E  B4D8               	btfsc	status,2,c
  2585   000130  EF9C  F000         	goto	u3481
  2586   000134  EF9E  F000         	goto	u3480
  2587   000138                     u3481:
  2588   000138  EF78  F005         	goto	l495
  2589   00013C                     u3480:
  2590   00013C                     l4220:
  2591   00013C  0E06               	movlw	6
  2592   00013E  6E34               	movwf	motor_RFID@substate^0,c
  2593   000140  EF78  F005         	goto	l495
  2594   000144                     l4222:
  2595                           
  2596                           ;TAD_RFID.c: 314:                     flag = motor_Write(0x01, 0x00);
  2597   000144  0E00               	movlw	0
  2598   000146  6E58               	movwf	motor_Write@value^0,c
  2599   000148  0E01               	movlw	1
  2600   00014A  ECDD  F00A         	call	_motor_Write
  2601   00014E  6E71               	movwf	motor_RFID@flag^0,c
  2602   000150                     
  2603                           ;TAD_RFID.c: 315:                     if (flag != 0) substate = 7;
  2604   000150  5071               	movf	motor_RFID@flag^0,w,c
  2605   000152  B4D8               	btfsc	status,2,c
  2606   000154  EFAE  F000         	goto	u3491
  2607   000158  EFB0  F000         	goto	u3490
  2608   00015C                     u3491:
  2609   00015C  EF78  F005         	goto	l495
  2610   000160                     u3490:
  2611   000160                     l4226:
  2612   000160  0E07               	movlw	7
  2613   000162  6E34               	movwf	motor_RFID@substate^0,c
  2614   000164  EF78  F005         	goto	l495
  2615   000168                     l4228:
  2616                           
  2617                           ;TAD_RFID.c: 318:                     flag = motor_Write(0x09, TagType);
  2618   000168  C02E  F058         	movff	motor_RFID@TagType,motor_Write@value
  2619   00016C  0E09               	movlw	9
  2620   00016E  ECDD  F00A         	call	_motor_Write
  2621   000172  6E71               	movwf	motor_RFID@flag^0,c
  2622   000174                     
  2623                           ;TAD_RFID.c: 319:                     if (flag != 0) substate = 8;
  2624   000174  5071               	movf	motor_RFID@flag^0,w,c
  2625   000176  B4D8               	btfsc	status,2,c
  2626   000178  EFC0  F000         	goto	u3501
  2627   00017C  EFC2  F000         	goto	u3500
  2628   000180                     u3501:
  2629   000180  EF78  F005         	goto	l495
  2630   000184                     u3500:
  2631   000184                     l4232:
  2632   000184  0E08               	movlw	8
  2633   000186  6E34               	movwf	motor_RFID@substate^0,c
  2634   000188  EF78  F005         	goto	l495
  2635   00018C                     l4234:
  2636                           
  2637                           ;TAD_RFID.c: 322:                     flag = motor_Write(0x01, 0x0C);
  2638   00018C  0E0C               	movlw	12
  2639   00018E  6E58               	movwf	motor_Write@value^0,c
  2640   000190  0E01               	movlw	1
  2641   000192  ECDD  F00A         	call	_motor_Write
  2642   000196  6E71               	movwf	motor_RFID@flag^0,c
  2643   000198                     
  2644                           ;TAD_RFID.c: 323:                     if (flag != 0) substate = 9;
  2645   000198  5071               	movf	motor_RFID@flag^0,w,c
  2646   00019A  B4D8               	btfsc	status,2,c
  2647   00019C  EFD2  F000         	goto	u3511
  2648   0001A0  EFD4  F000         	goto	u3510
  2649   0001A4                     u3511:
  2650   0001A4  EF78  F005         	goto	l495
  2651   0001A8                     u3510:
  2652   0001A8                     l4238:
  2653   0001A8  0E09               	movlw	9
  2654   0001AA  6E34               	movwf	motor_RFID@substate^0,c
  2655   0001AC  EF78  F005         	goto	l495
  2656   0001B0                     l4240:
  2657                           
  2658                           ;TAD_RFID.c: 326:                     flag = motor_Read(0x0D);
  2659   0001B0  0E0D               	movlw	13
  2660   0001B2  EC79  F007         	call	_motor_Read
  2661   0001B6  6E71               	movwf	motor_RFID@flag^0,c
  2662   0001B8                     
  2663                           ;TAD_RFID.c: 327:                     if (flag == 0xFF) {
  2664   0001B8  2871               	incf	motor_RFID@flag^0,w,c
  2665   0001BA  A4D8               	btfss	status,2,c
  2666   0001BC  EFE2  F000         	goto	u3521
  2667   0001C0  EFE4  F000         	goto	u3520
  2668   0001C4                     u3521:
  2669   0001C4  EFE6  F000         	goto	l4246
  2670   0001C8                     u3520:
  2671   0001C8  EF4D  F000         	goto	l4190
  2672   0001CC                     l4246:
  2673   0001CC  0EFE               	movlw	254
  2674   0001CE  1871               	xorwf	motor_RFID@flag^0,w,c
  2675   0001D0  B4D8               	btfsc	status,2,c
  2676   0001D2  EFED  F000         	goto	u3531
  2677   0001D6  EFEF  F000         	goto	u3530
  2678   0001DA                     u3531:
  2679   0001DA  EF5F  F002         	goto	l344
  2680   0001DE                     u3530:
  2681   0001DE                     
  2682                           ;TAD_RFID.c: 330:                         tempRegValue = flag;
  2683   0001DE  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2684   0001E2                     l4250:
  2685                           
  2686                           ;TAD_RFID.c: 331:                         substate = 10;
  2687   0001E2  0E0A               	movlw	10
  2688   0001E4  6E34               	movwf	motor_RFID@substate^0,c
  2689   0001E6  EF78  F005         	goto	l495
  2690   0001EA                     l4252:
  2691                           
  2692                           ;TAD_RFID.c: 335:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  2693   0001EA  502B               	movf	motor_RFID@tempRegValue^0,w,c
  2694   0001EC  0980               	iorlw	128
  2695   0001EE  6E58               	movwf	motor_Write@value^0,c
  2696   0001F0  0E0D               	movlw	13
  2697   0001F2  ECDD  F00A         	call	_motor_Write
  2698   0001F6  6E71               	movwf	motor_RFID@flag^0,c
  2699   0001F8                     
  2700                           ;TAD_RFID.c: 336:                     if (flag != 0){
  2701   0001F8  5071               	movf	motor_RFID@flag^0,w,c
  2702   0001FA  B4D8               	btfsc	status,2,c
  2703   0001FC  EF02  F001         	goto	u3541
  2704   000200  EF04  F001         	goto	u3540
  2705   000204                     u3541:
  2706   000204  EF78  F005         	goto	l495
  2707   000208                     u3540:
  2708   000208                     
  2709                           ;TAD_RFID.c: 337:                         i = 0xFF;
  2710   000208  6830               	setf	motor_RFID@i^0,c
  2711   00020A                     l4258:
  2712                           
  2713                           ;TAD_RFID.c: 338:                         substate = 11;
  2714   00020A  0E0B               	movlw	11
  2715   00020C  6E34               	movwf	motor_RFID@substate^0,c
  2716   00020E  EF78  F005         	goto	l495
  2717   000212                     l4260:
  2718                           
  2719                           ;TAD_RFID.c: 342:                     flag = motor_Read(0x04);
  2720   000212  0E04               	movlw	4
  2721   000214  EC79  F007         	call	_motor_Read
  2722   000218  6E71               	movwf	motor_RFID@flag^0,c
  2723   00021A                     
  2724                           ;TAD_RFID.c: 343:                     if (flag == 0xFF) {
  2725   00021A  2871               	incf	motor_RFID@flag^0,w,c
  2726   00021C  A4D8               	btfss	status,2,c
  2727   00021E  EF13  F001         	goto	u3551
  2728   000222  EF15  F001         	goto	u3550
  2729   000226                     u3551:
  2730   000226  EF17  F001         	goto	l4266
  2731   00022A                     u3550:
  2732   00022A  EF4D  F000         	goto	l4190
  2733   00022E                     l4266:
  2734   00022E  0EFE               	movlw	254
  2735   000230  1871               	xorwf	motor_RFID@flag^0,w,c
  2736   000232  B4D8               	btfsc	status,2,c
  2737   000234  EF1E  F001         	goto	u3561
  2738   000238  EF20  F001         	goto	u3560
  2739   00023C                     u3561:
  2740   00023C  EF78  F005         	goto	l495
  2741   000240                     u3560:
  2742   000240                     
  2743                           ;TAD_RFID.c: 346:                         n = flag;
  2744   000240  C071  F031         	movff	motor_RFID@flag,motor_RFID@n
  2745                           
  2746                           ;TAD_RFID.c: 347:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  2747   000244  B031               	btfsc	motor_RFID@n^0,0,c
  2748   000246  EF27  F001         	goto	u3571
  2749   00024A  EF29  F001         	goto	u3570
  2750   00024E                     u3571:
  2751   00024E  EF36  F001         	goto	l4274
  2752   000252                     u3570:
  2753   000252  5031               	movf	motor_RFID@n^0,w,c
  2754   000254  1432               	andwf	motor_RFID@waitIRq^0,w,c
  2755   000256  0900               	iorlw	0
  2756   000258  A4D8               	btfss	status,2,c
  2757   00025A  EF31  F001         	goto	u3581
  2758   00025E  EF33  F001         	goto	u3580
  2759   000262                     u3581:
  2760   000262  EF36  F001         	goto	l4274
  2761   000266                     u3580:
  2762   000266  2E30               	decfsz	motor_RFID@i^0,f,c
  2763   000268  EF78  F005         	goto	l495
  2764   00026C                     l4274:
  2765                           
  2766                           ;TAD_RFID.c: 348:                             substate = 12;
  2767   00026C  0E0C               	movlw	12
  2768   00026E  6E34               	movwf	motor_RFID@substate^0,c
  2769   000270  EF78  F005         	goto	l495
  2770   000274                     l4276:
  2771                           
  2772                           ;TAD_RFID.c: 353:                     flag = motor_Read(0x0D);
  2773   000274  0E0D               	movlw	13
  2774   000276  EC79  F007         	call	_motor_Read
  2775   00027A  6E71               	movwf	motor_RFID@flag^0,c
  2776   00027C                     
  2777                           ;TAD_RFID.c: 354:                     if (flag == 0xFF) {
  2778   00027C  2871               	incf	motor_RFID@flag^0,w,c
  2779   00027E  A4D8               	btfss	status,2,c
  2780   000280  EF44  F001         	goto	u3591
  2781   000284  EF46  F001         	goto	u3590
  2782   000288                     u3591:
  2783   000288  EF48  F001         	goto	l4282
  2784   00028C                     u3590:
  2785   00028C  EF4D  F000         	goto	l4190
  2786   000290                     l4282:
  2787   000290  0EFE               	movlw	254
  2788   000292  1871               	xorwf	motor_RFID@flag^0,w,c
  2789   000294  B4D8               	btfsc	status,2,c
  2790   000296  EF4F  F001         	goto	u3601
  2791   00029A  EF51  F001         	goto	u3600
  2792   00029E                     u3601:
  2793   00029E  EF5F  F002         	goto	l344
  2794   0002A2                     u3600:
  2795   0002A2  5071               	movf	motor_RFID@flag^0,w,c
  2796   0002A4  B4D8               	btfsc	status,2,c
  2797   0002A6  EF57  F001         	goto	u3611
  2798   0002AA  EF59  F001         	goto	u3610
  2799   0002AE                     u3611:
  2800   0002AE  EF5F  F002         	goto	l344
  2801   0002B2                     u3610:
  2802   0002B2                     l4286:
  2803                           
  2804                           ;TAD_RFID.c: 357:                         substate = 13;
  2805   0002B2  0E0D               	movlw	13
  2806   0002B4  6E34               	movwf	motor_RFID@substate^0,c
  2807   0002B6  EF78  F005         	goto	l495
  2808   0002BA                     l4288:
  2809                           
  2810                           ;TAD_RFID.c: 361:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  2811   0002BA  502B               	movf	motor_RFID@tempRegValue^0,w,c
  2812   0002BC  0B7F               	andlw	127
  2813   0002BE  6E58               	movwf	motor_Write@value^0,c
  2814   0002C0  0E0D               	movlw	13
  2815   0002C2  ECDD  F00A         	call	_motor_Write
  2816   0002C6  6E71               	movwf	motor_RFID@flag^0,c
  2817   0002C8                     
  2818                           ;TAD_RFID.c: 362:                     if (flag != 0) substate = 14;
  2819   0002C8  5071               	movf	motor_RFID@flag^0,w,c
  2820   0002CA  B4D8               	btfsc	status,2,c
  2821   0002CC  EF6A  F001         	goto	u3621
  2822   0002D0  EF6C  F001         	goto	u3620
  2823   0002D4                     u3621:
  2824   0002D4  EF78  F005         	goto	l495
  2825   0002D8                     u3620:
  2826   0002D8                     l4292:
  2827   0002D8  0E0E               	movlw	14
  2828   0002DA  6E34               	movwf	motor_RFID@substate^0,c
  2829   0002DC  EF78  F005         	goto	l495
  2830   0002E0                     l4294:
  2831                           
  2832                           ;TAD_RFID.c: 365:                     flag = motor_Read(0x06);
  2833   0002E0  0E06               	movlw	6
  2834   0002E2  EC79  F007         	call	_motor_Read
  2835   0002E6  6E71               	movwf	motor_RFID@flag^0,c
  2836   0002E8                     
  2837                           ;TAD_RFID.c: 366:                     if (flag == 0xFF) {
  2838   0002E8  2871               	incf	motor_RFID@flag^0,w,c
  2839   0002EA  A4D8               	btfss	status,2,c
  2840   0002EC  EF7A  F001         	goto	u3631
  2841   0002F0  EF7C  F001         	goto	u3630
  2842   0002F4                     u3631:
  2843   0002F4  EF7E  F001         	goto	l4300
  2844   0002F8                     u3630:
  2845   0002F8  EF4D  F000         	goto	l4190
  2846   0002FC                     l4300:
  2847   0002FC  0EFE               	movlw	254
  2848   0002FE  1871               	xorwf	motor_RFID@flag^0,w,c
  2849   000300  B4D8               	btfsc	status,2,c
  2850   000302  EF85  F001         	goto	u3641
  2851   000306  EF87  F001         	goto	u3640
  2852   00030A                     u3641:
  2853   00030A  EF78  F005         	goto	l495
  2854   00030E                     u3640:
  2855   00030E                     
  2856                           ;TAD_RFID.c: 369:                         tempRegValue = flag;
  2857   00030E  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2858   000312                     
  2859                           ;TAD_RFID.c: 370:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  2860   000312  5030               	movf	motor_RFID@i^0,w,c
  2861   000314  B4D8               	btfsc	status,2,c
  2862   000316  EF8F  F001         	goto	u3651
  2863   00031A  EF91  F001         	goto	u3650
  2864   00031E                     u3651:
  2865   00031E  EFA0  F001         	goto	l388
  2866   000322                     u3650:
  2867   000322  C02B  F066         	movff	motor_RFID@tempRegValue,??_motor_RFID
  2868   000326  0E1B               	movlw	27
  2869   000328  1666               	andwf	??_motor_RFID^0,f,c
  2870   00032A  A4D8               	btfss	status,2,c
  2871   00032C  EF9A  F001         	goto	u3661
  2872   000330  EF9C  F001         	goto	u3660
  2873   000334                     u3661:
  2874   000334  EFA0  F001         	goto	l388
  2875   000338                     u3660:
  2876   000338                     l4308:
  2877                           
  2878                           ;TAD_RFID.c: 371:                             substate = 15;
  2879   000338  0E0F               	movlw	15
  2880   00033A  6E34               	movwf	motor_RFID@substate^0,c
  2881                           
  2882                           ;TAD_RFID.c: 372:                         } else {
  2883   00033C  EF78  F005         	goto	l495
  2884   000340                     l388:
  2885                           
  2886                           ;TAD_RFID.c: 373:                             state = substate = 0;
  2887   000340  6A34               	clrf	motor_RFID@substate^0,c
  2888   000342  6A35               	clrf	motor_RFID@state^0,c
  2889   000344  EF78  F005         	goto	l495
  2890   000348                     l4310:
  2891                           
  2892                           ;TAD_RFID.c: 378:                     flag = motor_Read(0x0A);
  2893   000348  0E0A               	movlw	10
  2894   00034A  EC79  F007         	call	_motor_Read
  2895   00034E  6E71               	movwf	motor_RFID@flag^0,c
  2896   000350                     
  2897                           ;TAD_RFID.c: 379:                     if (flag == 0xFF) {
  2898   000350  2871               	incf	motor_RFID@flag^0,w,c
  2899   000352  A4D8               	btfss	status,2,c
  2900   000354  EFAE  F001         	goto	u3671
  2901   000358  EFB0  F001         	goto	u3670
  2902   00035C                     u3671:
  2903   00035C  EFB2  F001         	goto	l4316
  2904   000360                     u3670:
  2905   000360  EF4D  F000         	goto	l4190
  2906   000364                     l4316:
  2907   000364  0EFE               	movlw	254
  2908   000366  1871               	xorwf	motor_RFID@flag^0,w,c
  2909   000368  B4D8               	btfsc	status,2,c
  2910   00036A  EFB9  F001         	goto	u3681
  2911   00036E  EFBB  F001         	goto	u3680
  2912   000372                     u3681:
  2913   000372  EF5F  F002         	goto	l344
  2914   000376                     u3680:
  2915   000376                     
  2916                           ;TAD_RFID.c: 382:                         fifoLevel = flag;
  2917   000376  C071  F029         	movff	motor_RFID@flag,motor_RFID@fifoLevel
  2918   00037A                     l4320:
  2919                           
  2920                           ;TAD_RFID.c: 383:                         substate = 16;
  2921   00037A  0E10               	movlw	16
  2922   00037C  6E34               	movwf	motor_RFID@substate^0,c
  2923   00037E  EF78  F005         	goto	l495
  2924   000382                     l4322:
  2925                           
  2926                           ;TAD_RFID.c: 387:                     flag = motor_Read(0x0C);
  2927   000382  0E0C               	movlw	12
  2928   000384  EC79  F007         	call	_motor_Read
  2929   000388  6E71               	movwf	motor_RFID@flag^0,c
  2930   00038A                     
  2931                           ;TAD_RFID.c: 388:                     if (flag == 0xFF) {
  2932   00038A  2871               	incf	motor_RFID@flag^0,w,c
  2933   00038C  A4D8               	btfss	status,2,c
  2934   00038E  EFCB  F001         	goto	u3691
  2935   000392  EFCD  F001         	goto	u3690
  2936   000396                     u3691:
  2937   000396  EFCF  F001         	goto	l4328
  2938   00039A                     u3690:
  2939   00039A  EF4D  F000         	goto	l4190
  2940   00039E                     l4328:
  2941   00039E  0EFE               	movlw	254
  2942   0003A0  1871               	xorwf	motor_RFID@flag^0,w,c
  2943   0003A2  B4D8               	btfsc	status,2,c
  2944   0003A4  EFD6  F001         	goto	u3701
  2945   0003A8  EFD8  F001         	goto	u3700
  2946   0003AC                     u3701:
  2947   0003AC  EF5F  F002         	goto	l344
  2948   0003B0                     u3700:
  2949   0003B0                     
  2950                           ;TAD_RFID.c: 391:                         lastBitsVal = flag & 0x07;
  2951   0003B0  5071               	movf	motor_RFID@flag^0,w,c
  2952   0003B2  0B07               	andlw	7
  2953   0003B4  6E2A               	movwf	motor_RFID@lastBitsVal^0,c
  2954   0003B6                     l4332:
  2955                           
  2956                           ;TAD_RFID.c: 392:                         substate = 17;
  2957   0003B6  0E11               	movlw	17
  2958   0003B8  6E34               	movwf	motor_RFID@substate^0,c
  2959   0003BA  EF78  F005         	goto	l495
  2960   0003BE                     l4334:
  2961                           
  2962                           ;TAD_RFID.c: 396:                     backBitsCalc = lastBitsVal ? (fifoLevel - 1) * 8 +
      +                           lastBitsVal : fifoLevel * 8;
  2963   0003BE  502A               	movf	motor_RFID@lastBitsVal^0,w,c
  2964   0003C0  A4D8               	btfss	status,2,c
  2965   0003C2  EFE5  F001         	goto	u3711
  2966   0003C6  EFE7  F001         	goto	u3710
  2967   0003CA                     u3711:
  2968   0003CA  EFEF  F001         	goto	l4338
  2969   0003CE                     u3710:
  2970   0003CE  5029               	movf	motor_RFID@fifoLevel^0,w,c
  2971   0003D0  0D08               	mullw	8
  2972   0003D2  CFF3 F06E          	movff	prodl,_motor_RFID$591
  2973   0003D6  CFF4 F06F          	movff	prodh,_motor_RFID$591+1
  2974   0003DA  EF05  F002         	goto	l4340
  2975   0003DE                     l4338:
  2976   0003DE  502A               	movf	motor_RFID@lastBitsVal^0,w,c
  2977   0003E0  C029  F066         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2978   0003E4  6A67               	clrf	(??_motor_RFID+1)^0,c
  2979   0003E6  90D8               	bcf	status,0,c
  2980   0003E8  3666               	rlcf	??_motor_RFID^0,f,c
  2981   0003EA  3667               	rlcf	(??_motor_RFID+1)^0,f,c
  2982   0003EC  90D8               	bcf	status,0,c
  2983   0003EE  3666               	rlcf	??_motor_RFID^0,f,c
  2984   0003F0  3667               	rlcf	(??_motor_RFID+1)^0,f,c
  2985   0003F2  90D8               	bcf	status,0,c
  2986   0003F4  3666               	rlcf	??_motor_RFID^0,f,c
  2987   0003F6  3667               	rlcf	(??_motor_RFID+1)^0,f,c
  2988   0003F8  2666               	addwf	??_motor_RFID^0,f,c
  2989   0003FA  0E00               	movlw	0
  2990   0003FC  2267               	addwfc	(??_motor_RFID+1)^0,f,c
  2991   0003FE  0EF8               	movlw	248
  2992   000400  2466               	addwf	??_motor_RFID^0,w,c
  2993   000402  6E6E               	movwf	_motor_RFID$591^0,c
  2994   000404  0EFF               	movlw	255
  2995   000406  2067               	addwfc	(??_motor_RFID+1)^0,w,c
  2996   000408  6E6F               	movwf	(_motor_RFID$591+1)^0,c
  2997   00040A                     l4340:
  2998   00040A  C06E  F070         	movff	_motor_RFID$591,motor_RFID@backBitsCalc
  2999                           
  3000                           ;TAD_RFID.c: 397:                     if (backBitsCalc == 0x10) {
  3001   00040E  0E10               	movlw	16
  3002   000410  1870               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3003   000412  A4D8               	btfss	status,2,c
  3004   000414  EF0E  F002         	goto	u3721
  3005   000418  EF10  F002         	goto	u3720
  3006   00041C                     u3721:
  3007   00041C  EFA0  F001         	goto	l388
  3008   000420                     u3720:
  3009   000420                     
  3010                           ;TAD_RFID.c: 398:                         state = 1;
  3011   000420  0E01               	movlw	1
  3012   000422  6E35               	movwf	motor_RFID@state^0,c
  3013   000424  EF4D  F000         	goto	l4190
  3014   000428                     l4348:
  3015   000428  5034               	movf	motor_RFID@substate^0,w,c
  3016                           
  3017                           ; Switch size 1, requested type "simple"
  3018                           ; Number of cases is 18, Range of values is 0 to 17
  3019                           ; switch strategies available:
  3020                           ; Name         Instructions Cycles
  3021                           ; simple_byte           55    28 (average)
  3022                           ;	Chosen strategy is simple_byte
  3023   00042A  0A00               	xorlw	0	; case 0
  3024   00042C  B4D8               	btfsc	status,2,c
  3025   00042E  EF17  F000         	goto	l4172
  3026   000432  0A01               	xorlw	1	; case 1
  3027   000434  B4D8               	btfsc	status,2,c
  3028   000436  EF2B  F000         	goto	l4178
  3029   00043A  0A03               	xorlw	3	; case 2
  3030   00043C  B4D8               	btfsc	status,2,c
  3031   00043E  EF41  F000         	goto	l4186
  3032   000442  0A01               	xorlw	1	; case 3
  3033   000444  B4D8               	btfsc	status,2,c
  3034   000446  EF5F  F000         	goto	l4198
  3035   00044A  0A07               	xorlw	7	; case 4
  3036   00044C  B4D8               	btfsc	status,2,c
  3037   00044E  EF72  F000         	goto	l4204
  3038   000452  0A01               	xorlw	1	; case 5
  3039   000454  B4D8               	btfsc	status,2,c
  3040   000456  EF8F  F000         	goto	l4216
  3041   00045A  0A03               	xorlw	3	; case 6
  3042   00045C  B4D8               	btfsc	status,2,c
  3043   00045E  EFA2  F000         	goto	l4222
  3044   000462  0A01               	xorlw	1	; case 7
  3045   000464  B4D8               	btfsc	status,2,c
  3046   000466  EFB4  F000         	goto	l4228
  3047   00046A  0A0F               	xorlw	15	; case 8
  3048   00046C  B4D8               	btfsc	status,2,c
  3049   00046E  EFC6  F000         	goto	l4234
  3050   000472  0A01               	xorlw	1	; case 9
  3051   000474  B4D8               	btfsc	status,2,c
  3052   000476  EFD8  F000         	goto	l4240
  3053   00047A  0A03               	xorlw	3	; case 10
  3054   00047C  B4D8               	btfsc	status,2,c
  3055   00047E  EFF5  F000         	goto	l4252
  3056   000482  0A01               	xorlw	1	; case 11
  3057   000484  B4D8               	btfsc	status,2,c
  3058   000486  EF09  F001         	goto	l4260
  3059   00048A  0A07               	xorlw	7	; case 12
  3060   00048C  B4D8               	btfsc	status,2,c
  3061   00048E  EF3A  F001         	goto	l4276
  3062   000492  0A01               	xorlw	1	; case 13
  3063   000494  B4D8               	btfsc	status,2,c
  3064   000496  EF5D  F001         	goto	l4288
  3065   00049A  0A03               	xorlw	3	; case 14
  3066   00049C  B4D8               	btfsc	status,2,c
  3067   00049E  EF70  F001         	goto	l4294
  3068   0004A2  0A01               	xorlw	1	; case 15
  3069   0004A4  B4D8               	btfsc	status,2,c
  3070   0004A6  EFA4  F001         	goto	l4310
  3071   0004AA  0A1F               	xorlw	31	; case 16
  3072   0004AC  B4D8               	btfsc	status,2,c
  3073   0004AE  EFC1  F001         	goto	l4322
  3074   0004B2  0A01               	xorlw	1	; case 17
  3075   0004B4  B4D8               	btfsc	status,2,c
  3076   0004B6  EFDF  F001         	goto	l4334
  3077   0004BA  EF78  F005         	goto	l495
  3078   0004BE                     l344:
  3079                           
  3080                           ;TAD_RFID.c: 405:             break;
  3081   0004BE  EF78  F005         	goto	l495
  3082   0004C2                     l4350:
  3083                           
  3084                           ;TAD_RFID.c: 410:                     flag = motor_Write(0x0D, 0x00);
  3085   0004C2  0E00               	movlw	0
  3086   0004C4  6E58               	movwf	motor_Write@value^0,c
  3087   0004C6  0E0D               	movlw	13
  3088   0004C8  ECDD  F00A         	call	_motor_Write
  3089   0004CC  6E71               	movwf	motor_RFID@flag^0,c
  3090   0004CE                     
  3091                           ;TAD_RFID.c: 411:                     if (flag != 0){
  3092   0004CE  5071               	movf	motor_RFID@flag^0,w,c
  3093   0004D0  B4D8               	btfsc	status,2,c
  3094   0004D2  EF6D  F002         	goto	u3731
  3095   0004D6  EF6F  F002         	goto	u3730
  3096   0004DA                     u3731:
  3097   0004DA  EF78  F005         	goto	l495
  3098   0004DE                     u3730:
  3099   0004DE                     
  3100                           ;TAD_RFID.c: 412:                         UID[0] = 0x93;
  3101   0004DE  0E93               	movlw	147
  3102   0004E0  6E01               	movwf	motor_RFID@UID^0,c
  3103                           
  3104                           ;TAD_RFID.c: 413:                         UID[1] = 0x20;
  3105   0004E2  0E20               	movlw	32
  3106   0004E4  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3107                           
  3108                           ;TAD_RFID.c: 414:                         substate = 1;
  3109   0004E6  0E01               	movlw	1
  3110   0004E8  6E34               	movwf	motor_RFID@substate^0,c
  3111   0004EA  EF78  F005         	goto	l495
  3112   0004EE                     l4356:
  3113                           
  3114                           ;TAD_RFID.c: 418:                     flag = motor_Read(0x08);
  3115   0004EE  0E08               	movlw	8
  3116   0004F0  EC79  F007         	call	_motor_Read
  3117   0004F4  6E71               	movwf	motor_RFID@flag^0,c
  3118   0004F6                     
  3119                           ;TAD_RFID.c: 419:                     if (flag == 0xFF) {
  3120   0004F6  2871               	incf	motor_RFID@flag^0,w,c
  3121   0004F8  A4D8               	btfss	status,2,c
  3122   0004FA  EF81  F002         	goto	u3741
  3123   0004FE  EF83  F002         	goto	u3740
  3124   000502                     u3741:
  3125   000502  EF85  F002         	goto	l4362
  3126   000506                     u3740:
  3127   000506  EFA0  F001         	goto	l388
  3128   00050A                     l4362:
  3129   00050A  0EFE               	movlw	254
  3130   00050C  1871               	xorwf	motor_RFID@flag^0,w,c
  3131   00050E  B4D8               	btfsc	status,2,c
  3132   000510  EF8C  F002         	goto	u3751
  3133   000514  EF8E  F002         	goto	u3750
  3134   000518                     u3751:
  3135   000518  EF78  F005         	goto	l495
  3136   00051C                     u3750:
  3137   00051C                     
  3138                           ;TAD_RFID.c: 422:                         tempRegValue = flag;
  3139   00051C  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3140   000520  EF3D  F000         	goto	l4184
  3141   000524                     l4368:
  3142                           
  3143                           ;TAD_RFID.c: 427:                     flag = motor_Write(0x08, tempRegValue & ~0x08);
  3144   000524  502B               	movf	motor_RFID@tempRegValue^0,w,c
  3145   000526  0BF7               	andlw	247
  3146   000528  6E58               	movwf	motor_Write@value^0,c
  3147   00052A  0E08               	movlw	8
  3148   00052C  ECDD  F00A         	call	_motor_Write
  3149   000530  6E71               	movwf	motor_RFID@flag^0,c
  3150   000532                     
  3151                           ;TAD_RFID.c: 428:                     if (flag != 0) substate = 3;
  3152   000532  5071               	movf	motor_RFID@flag^0,w,c
  3153   000534  B4D8               	btfsc	status,2,c
  3154   000536  EF9F  F002         	goto	u3761
  3155   00053A  EFA1  F002         	goto	u3760
  3156   00053E                     u3761:
  3157   00053E  EF78  F005         	goto	l495
  3158   000542                     u3760:
  3159   000542  EF5B  F000         	goto	l4196
  3160   000546                     l4374:
  3161                           
  3162                           ;TAD_RFID.c: 431:                     irqEn = 0x77;
  3163   000546  0E77               	movlw	119
  3164   000548  6E33               	movwf	motor_RFID@irqEn^0,c
  3165                           
  3166                           ;TAD_RFID.c: 432:                     waitIRq = 0x30;
  3167   00054A  0E30               	movlw	48
  3168   00054C  6E32               	movwf	motor_RFID@waitIRq^0,c
  3169   00054E                     
  3170                           ;TAD_RFID.c: 433:                     flag = motor_Write(0x02, irqEn | 0x80);
  3171   00054E  0EF7               	movlw	247
  3172   000550  6E58               	movwf	motor_Write@value^0,c
  3173   000552  0E02               	movlw	2
  3174   000554  ECDD  F00A         	call	_motor_Write
  3175   000558  6E71               	movwf	motor_RFID@flag^0,c
  3176   00055A                     
  3177                           ;TAD_RFID.c: 434:                     if (flag != 0) substate = 4;
  3178   00055A  5071               	movf	motor_RFID@flag^0,w,c
  3179   00055C  B4D8               	btfsc	status,2,c
  3180   00055E  EFB3  F002         	goto	u3771
  3181   000562  EFB5  F002         	goto	u3770
  3182   000566                     u3771:
  3183   000566  EF78  F005         	goto	l495
  3184   00056A                     u3770:
  3185   00056A  EF6E  F000         	goto	l4202
  3186   00056E                     l4382:
  3187                           
  3188                           ;TAD_RFID.c: 437:                     flag = motor_Read(0x04);
  3189   00056E  0E04               	movlw	4
  3190   000570  EC79  F007         	call	_motor_Read
  3191   000574  6E71               	movwf	motor_RFID@flag^0,c
  3192   000576                     
  3193                           ;TAD_RFID.c: 438:                     if (flag == 0xFF) {
  3194   000576  2871               	incf	motor_RFID@flag^0,w,c
  3195   000578  A4D8               	btfss	status,2,c
  3196   00057A  EFC1  F002         	goto	u3781
  3197   00057E  EFC3  F002         	goto	u3780
  3198   000582                     u3781:
  3199   000582  EFC5  F002         	goto	l4388
  3200   000586                     u3780:
  3201   000586  EFA0  F001         	goto	l388
  3202   00058A                     l4388:
  3203   00058A  0EFE               	movlw	254
  3204   00058C  1871               	xorwf	motor_RFID@flag^0,w,c
  3205   00058E  B4D8               	btfsc	status,2,c
  3206   000590  EFCC  F002         	goto	u3791
  3207   000594  EFCE  F002         	goto	u3790
  3208   000598                     u3791:
  3209   000598  EF78  F005         	goto	l495
  3210   00059C                     u3790:
  3211   00059C  EF89  F000         	goto	l4212
  3212   0005A0                     l4394:
  3213                           
  3214                           ;TAD_RFID.c: 446:                     flag = motor_Write(0x04, tempRegValue & ~0x80);
  3215   0005A0  502B               	movf	motor_RFID@tempRegValue^0,w,c
  3216   0005A2  0B7F               	andlw	127
  3217   0005A4  6E58               	movwf	motor_Write@value^0,c
  3218   0005A6  0E04               	movlw	4
  3219   0005A8  ECDD  F00A         	call	_motor_Write
  3220   0005AC  6E71               	movwf	motor_RFID@flag^0,c
  3221   0005AE                     
  3222                           ;TAD_RFID.c: 447:                     if (flag != 0) substate = 6;
  3223   0005AE  5071               	movf	motor_RFID@flag^0,w,c
  3224   0005B0  B4D8               	btfsc	status,2,c
  3225   0005B2  EFDD  F002         	goto	u3801
  3226   0005B6  EFDF  F002         	goto	u3800
  3227   0005BA                     u3801:
  3228   0005BA  EF78  F005         	goto	l495
  3229   0005BE                     u3800:
  3230   0005BE  EF9E  F000         	goto	l4220
  3231   0005C2                     l4400:
  3232                           
  3233                           ;TAD_RFID.c: 450:                     flag = motor_Read(0x0A);
  3234   0005C2  0E0A               	movlw	10
  3235   0005C4  EC79  F007         	call	_motor_Read
  3236   0005C8  6E71               	movwf	motor_RFID@flag^0,c
  3237   0005CA                     
  3238                           ;TAD_RFID.c: 451:                     if (flag == 0xFF) {
  3239   0005CA  2871               	incf	motor_RFID@flag^0,w,c
  3240   0005CC  A4D8               	btfss	status,2,c
  3241   0005CE  EFEB  F002         	goto	u3811
  3242   0005D2  EFED  F002         	goto	u3810
  3243   0005D6                     u3811:
  3244   0005D6  EFEF  F002         	goto	l4406
  3245   0005DA                     u3810:
  3246   0005DA  EFA0  F001         	goto	l388
  3247   0005DE                     l4406:
  3248   0005DE  0EFE               	movlw	254
  3249   0005E0  1871               	xorwf	motor_RFID@flag^0,w,c
  3250   0005E2  B4D8               	btfsc	status,2,c
  3251   0005E4  EFF6  F002         	goto	u3821
  3252   0005E8  EFF8  F002         	goto	u3820
  3253   0005EC                     u3821:
  3254   0005EC  EF78  F005         	goto	l495
  3255   0005F0                     u3820:
  3256   0005F0                     
  3257                           ;TAD_RFID.c: 454:                         tempRegValue = flag;
  3258   0005F0  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3259   0005F4  EFB0  F000         	goto	l4226
  3260   0005F8                     l4412:
  3261                           
  3262                           ;TAD_RFID.c: 459:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  3263   0005F8  502B               	movf	motor_RFID@tempRegValue^0,w,c
  3264   0005FA  0980               	iorlw	128
  3265   0005FC  6E58               	movwf	motor_Write@value^0,c
  3266   0005FE  0E0A               	movlw	10
  3267   000600  ECDD  F00A         	call	_motor_Write
  3268   000604  6E71               	movwf	motor_RFID@flag^0,c
  3269   000606                     
  3270                           ;TAD_RFID.c: 460:                     if (flag != 0) substate = 8;
  3271   000606  5071               	movf	motor_RFID@flag^0,w,c
  3272   000608  B4D8               	btfsc	status,2,c
  3273   00060A  EF09  F003         	goto	u3831
  3274   00060E  EF0B  F003         	goto	u3830
  3275   000612                     u3831:
  3276   000612  EF78  F005         	goto	l495
  3277   000616                     u3830:
  3278   000616  EFC2  F000         	goto	l4232
  3279   00061A                     l4418:
  3280                           
  3281                           ;TAD_RFID.c: 463:                     flag = motor_Write(0x01, 0x00);
  3282   00061A  0E00               	movlw	0
  3283   00061C  6E58               	movwf	motor_Write@value^0,c
  3284   00061E  0E01               	movlw	1
  3285   000620  ECDD  F00A         	call	_motor_Write
  3286   000624  6E71               	movwf	motor_RFID@flag^0,c
  3287   000626                     
  3288                           ;TAD_RFID.c: 464:                     if (flag != 0) substate = 9;
  3289   000626  5071               	movf	motor_RFID@flag^0,w,c
  3290   000628  B4D8               	btfsc	status,2,c
  3291   00062A  EF19  F003         	goto	u3841
  3292   00062E  EF1B  F003         	goto	u3840
  3293   000632                     u3841:
  3294   000632  EF78  F005         	goto	l495
  3295   000636                     u3840:
  3296   000636  EFD4  F000         	goto	l4238
  3297   00063A                     l4424:
  3298                           
  3299                           ;TAD_RFID.c: 467:                     flag = motor_Write(0x09, UID[0]);
  3300   00063A  C001  F058         	movff	motor_RFID@UID,motor_Write@value
  3301   00063E  0E09               	movlw	9
  3302   000640  ECDD  F00A         	call	_motor_Write
  3303   000644  6E71               	movwf	motor_RFID@flag^0,c
  3304   000646                     
  3305                           ;TAD_RFID.c: 468:                     if (flag != 0) substate = 10;
  3306   000646  5071               	movf	motor_RFID@flag^0,w,c
  3307   000648  B4D8               	btfsc	status,2,c
  3308   00064A  EF29  F003         	goto	u3851
  3309   00064E  EF2B  F003         	goto	u3850
  3310   000652                     u3851:
  3311   000652  EF78  F005         	goto	l495
  3312   000656                     u3850:
  3313   000656  EFF1  F000         	goto	l4250
  3314   00065A                     l4430:
  3315                           
  3316                           ;TAD_RFID.c: 471:                     flag = motor_Write(0x09, UID[1]);
  3317   00065A  C002  F058         	movff	motor_RFID@UID+1,motor_Write@value
  3318   00065E  0E09               	movlw	9
  3319   000660  ECDD  F00A         	call	_motor_Write
  3320   000664  6E71               	movwf	motor_RFID@flag^0,c
  3321   000666                     
  3322                           ;TAD_RFID.c: 472:                     if (flag != 0) substate = 11;
  3323   000666  5071               	movf	motor_RFID@flag^0,w,c
  3324   000668  B4D8               	btfsc	status,2,c
  3325   00066A  EF39  F003         	goto	u3861
  3326   00066E  EF3B  F003         	goto	u3860
  3327   000672                     u3861:
  3328   000672  EF78  F005         	goto	l495
  3329   000676                     u3860:
  3330   000676  EF05  F001         	goto	l4258
  3331   00067A                     l4436:
  3332                           
  3333                           ;TAD_RFID.c: 475:                     flag = motor_Write(0x01, 0x0C);
  3334   00067A  0E0C               	movlw	12
  3335   00067C  6E58               	movwf	motor_Write@value^0,c
  3336   00067E  0E01               	movlw	1
  3337   000680  ECDD  F00A         	call	_motor_Write
  3338   000684  6E71               	movwf	motor_RFID@flag^0,c
  3339   000686                     
  3340                           ;TAD_RFID.c: 476:                     if (flag != 0) substate = 12;
  3341   000686  5071               	movf	motor_RFID@flag^0,w,c
  3342   000688  B4D8               	btfsc	status,2,c
  3343   00068A  EF49  F003         	goto	u3871
  3344   00068E  EF4B  F003         	goto	u3870
  3345   000692                     u3871:
  3346   000692  EF78  F005         	goto	l495
  3347   000696                     u3870:
  3348   000696  EF36  F001         	goto	l4274
  3349   00069A                     l4442:
  3350                           
  3351                           ;TAD_RFID.c: 479:                     flag = motor_Read(0x0D);
  3352   00069A  0E0D               	movlw	13
  3353   00069C  EC79  F007         	call	_motor_Read
  3354   0006A0  6E71               	movwf	motor_RFID@flag^0,c
  3355   0006A2                     
  3356                           ;TAD_RFID.c: 480:                     if (flag == 0xFF) {
  3357   0006A2  2871               	incf	motor_RFID@flag^0,w,c
  3358   0006A4  A4D8               	btfss	status,2,c
  3359   0006A6  EF57  F003         	goto	u3881
  3360   0006AA  EF59  F003         	goto	u3880
  3361   0006AE                     u3881:
  3362   0006AE  EF5B  F003         	goto	l4448
  3363   0006B2                     u3880:
  3364   0006B2  EFA0  F001         	goto	l388
  3365   0006B6                     l4448:
  3366   0006B6  0EFE               	movlw	254
  3367   0006B8  1871               	xorwf	motor_RFID@flag^0,w,c
  3368   0006BA  B4D8               	btfsc	status,2,c
  3369   0006BC  EF62  F003         	goto	u3891
  3370   0006C0  EF64  F003         	goto	u3890
  3371   0006C4                     u3891:
  3372   0006C4  EF78  F005         	goto	l495
  3373   0006C8                     u3890:
  3374   0006C8                     
  3375                           ;TAD_RFID.c: 483:                         tempRegValue = flag;
  3376   0006C8  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3377   0006CC  EF59  F001         	goto	l4286
  3378   0006D0                     l4454:
  3379                           
  3380                           ;TAD_RFID.c: 488:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  3381   0006D0  502B               	movf	motor_RFID@tempRegValue^0,w,c
  3382   0006D2  0980               	iorlw	128
  3383   0006D4  6E58               	movwf	motor_Write@value^0,c
  3384   0006D6  0E0D               	movlw	13
  3385   0006D8  ECDD  F00A         	call	_motor_Write
  3386   0006DC  6E71               	movwf	motor_RFID@flag^0,c
  3387   0006DE                     
  3388                           ;TAD_RFID.c: 489:                     if (flag != 0){
  3389   0006DE  5071               	movf	motor_RFID@flag^0,w,c
  3390   0006E0  B4D8               	btfsc	status,2,c
  3391   0006E2  EF75  F003         	goto	u3901
  3392   0006E6  EF77  F003         	goto	u3900
  3393   0006EA                     u3901:
  3394   0006EA  EF78  F005         	goto	l495
  3395   0006EE                     u3900:
  3396   0006EE                     
  3397                           ;TAD_RFID.c: 490:                         i = 0xFF;
  3398   0006EE  6830               	setf	motor_RFID@i^0,c
  3399   0006F0  EF6C  F001         	goto	l4292
  3400   0006F4                     l4462:
  3401                           
  3402                           ;TAD_RFID.c: 495:                     flag = motor_Read(0x04);
  3403   0006F4  0E04               	movlw	4
  3404   0006F6  EC79  F007         	call	_motor_Read
  3405   0006FA  6E71               	movwf	motor_RFID@flag^0,c
  3406   0006FC                     
  3407                           ;TAD_RFID.c: 496:                     if (flag == 0xFF) {
  3408   0006FC  2871               	incf	motor_RFID@flag^0,w,c
  3409   0006FE  A4D8               	btfss	status,2,c
  3410   000700  EF84  F003         	goto	u3911
  3411   000704  EF86  F003         	goto	u3910
  3412   000708                     u3911:
  3413   000708  EF88  F003         	goto	l4468
  3414   00070C                     u3910:
  3415   00070C  EFA0  F001         	goto	l388
  3416   000710                     l4468:
  3417   000710  0EFE               	movlw	254
  3418   000712  1871               	xorwf	motor_RFID@flag^0,w,c
  3419   000714  B4D8               	btfsc	status,2,c
  3420   000716  EF8F  F003         	goto	u3921
  3421   00071A  EF91  F003         	goto	u3920
  3422   00071E                     u3921:
  3423   00071E  EF78  F005         	goto	l495
  3424   000722                     u3920:
  3425   000722                     
  3426                           ;TAD_RFID.c: 499:                         n = flag;
  3427   000722  C071  F031         	movff	motor_RFID@flag,motor_RFID@n
  3428                           
  3429                           ;TAD_RFID.c: 500:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  3430   000726  B031               	btfsc	motor_RFID@n^0,0,c
  3431   000728  EF98  F003         	goto	u3931
  3432   00072C  EF9A  F003         	goto	u3930
  3433   000730                     u3931:
  3434   000730  EF9C  F001         	goto	l4308
  3435   000734                     u3930:
  3436   000734  5031               	movf	motor_RFID@n^0,w,c
  3437   000736  1432               	andwf	motor_RFID@waitIRq^0,w,c
  3438   000738  0900               	iorlw	0
  3439   00073A  A4D8               	btfss	status,2,c
  3440   00073C  EFA2  F003         	goto	u3941
  3441   000740  EFA4  F003         	goto	u3940
  3442   000744                     u3941:
  3443   000744  EF9C  F001         	goto	l4308
  3444   000748                     u3940:
  3445   000748  2E30               	decfsz	motor_RFID@i^0,f,c
  3446   00074A  EF78  F005         	goto	l495
  3447   00074E  EF9C  F001         	goto	l4308
  3448   000752                     l4478:
  3449                           
  3450                           ;TAD_RFID.c: 506:                     flag = motor_Read(0x0D);
  3451   000752  0E0D               	movlw	13
  3452   000754  EC79  F007         	call	_motor_Read
  3453   000758  6E71               	movwf	motor_RFID@flag^0,c
  3454   00075A                     
  3455                           ;TAD_RFID.c: 507:                     if (flag == 0xFF) {
  3456   00075A  2871               	incf	motor_RFID@flag^0,w,c
  3457   00075C  A4D8               	btfss	status,2,c
  3458   00075E  EFB3  F003         	goto	u3951
  3459   000762  EFB5  F003         	goto	u3950
  3460   000766                     u3951:
  3461   000766  EFB7  F003         	goto	l4484
  3462   00076A                     u3950:
  3463   00076A  EFA0  F001         	goto	l388
  3464   00076E                     l4484:
  3465   00076E  0EFE               	movlw	254
  3466   000770  1871               	xorwf	motor_RFID@flag^0,w,c
  3467   000772  B4D8               	btfsc	status,2,c
  3468   000774  EFBE  F003         	goto	u3961
  3469   000778  EFC0  F003         	goto	u3960
  3470   00077C                     u3961:
  3471   00077C  EF78  F005         	goto	l495
  3472   000780                     u3960:
  3473   000780                     
  3474                           ;TAD_RFID.c: 510:                         tempRegValue = flag;
  3475   000780  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3476   000784  EFBD  F001         	goto	l4320
  3477   000788                     l4490:
  3478                           
  3479                           ;TAD_RFID.c: 515:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  3480   000788  502B               	movf	motor_RFID@tempRegValue^0,w,c
  3481   00078A  0B7F               	andlw	127
  3482   00078C  6E58               	movwf	motor_Write@value^0,c
  3483   00078E  0E0D               	movlw	13
  3484   000790  ECDD  F00A         	call	_motor_Write
  3485   000794  6E71               	movwf	motor_RFID@flag^0,c
  3486   000796                     
  3487                           ;TAD_RFID.c: 516:                     if (flag != 0) substate = 17;
  3488   000796  5071               	movf	motor_RFID@flag^0,w,c
  3489   000798  B4D8               	btfsc	status,2,c
  3490   00079A  EFD1  F003         	goto	u3971
  3491   00079E  EFD3  F003         	goto	u3970
  3492   0007A2                     u3971:
  3493   0007A2  EF78  F005         	goto	l495
  3494   0007A6                     u3970:
  3495   0007A6  EFDB  F001         	goto	l4332
  3496   0007AA                     l4496:
  3497                           
  3498                           ;TAD_RFID.c: 519:                     flag = motor_Read(0x06);
  3499   0007AA  0E06               	movlw	6
  3500   0007AC  EC79  F007         	call	_motor_Read
  3501   0007B0  6E71               	movwf	motor_RFID@flag^0,c
  3502   0007B2                     
  3503                           ;TAD_RFID.c: 520:                     if (flag == 0xFF) {
  3504   0007B2  2871               	incf	motor_RFID@flag^0,w,c
  3505   0007B4  A4D8               	btfss	status,2,c
  3506   0007B6  EFDF  F003         	goto	u3981
  3507   0007BA  EFE1  F003         	goto	u3980
  3508   0007BE                     u3981:
  3509   0007BE  EFE3  F003         	goto	l4502
  3510   0007C2                     u3980:
  3511   0007C2  EFA0  F001         	goto	l388
  3512   0007C6                     l4502:
  3513   0007C6  0EFE               	movlw	254
  3514   0007C8  1871               	xorwf	motor_RFID@flag^0,w,c
  3515   0007CA  B4D8               	btfsc	status,2,c
  3516   0007CC  EFEA  F003         	goto	u3991
  3517   0007D0  EFEC  F003         	goto	u3990
  3518   0007D4                     u3991:
  3519   0007D4  EF78  F005         	goto	l495
  3520   0007D8                     u3990:
  3521   0007D8                     
  3522                           ;TAD_RFID.c: 523:                         tempRegValue = flag;
  3523   0007D8  C071  F02B         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3524   0007DC                     
  3525                           ;TAD_RFID.c: 524:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  3526   0007DC  5030               	movf	motor_RFID@i^0,w,c
  3527   0007DE  B4D8               	btfsc	status,2,c
  3528   0007E0  EFF4  F003         	goto	u4001
  3529   0007E4  EFF6  F003         	goto	u4000
  3530   0007E8                     u4001:
  3531   0007E8  EFA0  F001         	goto	l388
  3532   0007EC                     u4000:
  3533   0007EC  C02B  F066         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3534   0007F0  0E1B               	movlw	27
  3535   0007F2  1666               	andwf	??_motor_RFID^0,f,c
  3536   0007F4  A4D8               	btfss	status,2,c
  3537   0007F6  EFFF  F003         	goto	u4011
  3538   0007FA  EF01  F004         	goto	u4010
  3539   0007FE                     u4011:
  3540   0007FE  EFA0  F001         	goto	l388
  3541   000802                     u4010:
  3542   000802                     
  3543                           ;TAD_RFID.c: 525:                             substate = 18;
  3544   000802  0E12               	movlw	18
  3545   000804  6E34               	movwf	motor_RFID@substate^0,c
  3546                           
  3547                           ;TAD_RFID.c: 526:                         } else {
  3548   000806  EF78  F005         	goto	l495
  3549   00080A                     l4512:
  3550                           
  3551                           ;TAD_RFID.c: 533:                     flag = motor_Read(0x09);
  3552   00080A  0E09               	movlw	9
  3553   00080C  EC79  F007         	call	_motor_Read
  3554   000810  6E71               	movwf	motor_RFID@flag^0,c
  3555   000812                     
  3556                           ;TAD_RFID.c: 534:                     if (flag == 0xFF) {
  3557   000812  2871               	incf	motor_RFID@flag^0,w,c
  3558   000814  A4D8               	btfss	status,2,c
  3559   000816  EF0F  F004         	goto	u4021
  3560   00081A  EF11  F004         	goto	u4020
  3561   00081E                     u4021:
  3562   00081E  EF13  F004         	goto	l4518
  3563   000822                     u4020:
  3564   000822  EFA0  F001         	goto	l388
  3565   000826                     l4518:
  3566   000826  0EFE               	movlw	254
  3567   000828  1871               	xorwf	motor_RFID@flag^0,w,c
  3568   00082A  B4D8               	btfsc	status,2,c
  3569   00082C  EF1A  F004         	goto	u4031
  3570   000830  EF1C  F004         	goto	u4030
  3571   000834                     u4031:
  3572   000834  EF78  F005         	goto	l495
  3573   000838                     u4030:
  3574   000838                     
  3575                           ;TAD_RFID.c: 537:                         UID[0] = flag;
  3576   000838  C071  F001         	movff	motor_RFID@flag,motor_RFID@UID
  3577   00083C                     
  3578                           ;TAD_RFID.c: 538:                         substate = 19;
  3579   00083C  0E13               	movlw	19
  3580   00083E  6E34               	movwf	motor_RFID@substate^0,c
  3581   000840  EF78  F005         	goto	l495
  3582   000844                     l4524:
  3583                           
  3584                           ;TAD_RFID.c: 542:                     flag = motor_Read(0x09);
  3585   000844  0E09               	movlw	9
  3586   000846  EC79  F007         	call	_motor_Read
  3587   00084A  6E71               	movwf	motor_RFID@flag^0,c
  3588   00084C                     
  3589                           ;TAD_RFID.c: 543:                     if (flag == 0xFF) {
  3590   00084C  2871               	incf	motor_RFID@flag^0,w,c
  3591   00084E  A4D8               	btfss	status,2,c
  3592   000850  EF2C  F004         	goto	u4041
  3593   000854  EF2E  F004         	goto	u4040
  3594   000858                     u4041:
  3595   000858  EF30  F004         	goto	l4530
  3596   00085C                     u4040:
  3597   00085C  EFA0  F001         	goto	l388
  3598   000860                     l4530:
  3599   000860  0EFE               	movlw	254
  3600   000862  1871               	xorwf	motor_RFID@flag^0,w,c
  3601   000864  B4D8               	btfsc	status,2,c
  3602   000866  EF37  F004         	goto	u4051
  3603   00086A  EF39  F004         	goto	u4050
  3604   00086E                     u4051:
  3605   00086E  EF78  F005         	goto	l495
  3606   000872                     u4050:
  3607   000872                     
  3608                           ;TAD_RFID.c: 546:                         UID[1] = flag;
  3609   000872  C071  F002         	movff	motor_RFID@flag,motor_RFID@UID+1
  3610   000876                     
  3611                           ;TAD_RFID.c: 547:                         substate = 20;
  3612   000876  0E14               	movlw	20
  3613   000878  6E34               	movwf	motor_RFID@substate^0,c
  3614   00087A  EF78  F005         	goto	l495
  3615   00087E                     l4536:
  3616                           
  3617                           ;TAD_RFID.c: 551:                     flag = motor_Read(0x09);
  3618   00087E  0E09               	movlw	9
  3619   000880  EC79  F007         	call	_motor_Read
  3620   000884  6E71               	movwf	motor_RFID@flag^0,c
  3621   000886                     
  3622                           ;TAD_RFID.c: 552:                     if (flag == 0xFF) {
  3623   000886  2871               	incf	motor_RFID@flag^0,w,c
  3624   000888  A4D8               	btfss	status,2,c
  3625   00088A  EF49  F004         	goto	u4061
  3626   00088E  EF4B  F004         	goto	u4060
  3627   000892                     u4061:
  3628   000892  EF4D  F004         	goto	l4542
  3629   000896                     u4060:
  3630   000896  EFA0  F001         	goto	l388
  3631   00089A                     l4542:
  3632   00089A  0EFE               	movlw	254
  3633   00089C  1871               	xorwf	motor_RFID@flag^0,w,c
  3634   00089E  B4D8               	btfsc	status,2,c
  3635   0008A0  EF54  F004         	goto	u4071
  3636   0008A4  EF56  F004         	goto	u4070
  3637   0008A8                     u4071:
  3638   0008A8  EF78  F005         	goto	l495
  3639   0008AC                     u4070:
  3640   0008AC                     
  3641                           ;TAD_RFID.c: 555:                         UID[2] = flag;
  3642   0008AC  C071  F003         	movff	motor_RFID@flag,motor_RFID@UID+2
  3643   0008B0                     
  3644                           ;TAD_RFID.c: 556:                         substate = 21;
  3645   0008B0  0E15               	movlw	21
  3646   0008B2  6E34               	movwf	motor_RFID@substate^0,c
  3647   0008B4  EF78  F005         	goto	l495
  3648   0008B8                     l4548:
  3649                           
  3650                           ;TAD_RFID.c: 560:                     flag = motor_Read(0x09);
  3651   0008B8  0E09               	movlw	9
  3652   0008BA  EC79  F007         	call	_motor_Read
  3653   0008BE  6E71               	movwf	motor_RFID@flag^0,c
  3654   0008C0                     
  3655                           ;TAD_RFID.c: 561:                     if (flag == 0xFF) {
  3656   0008C0  2871               	incf	motor_RFID@flag^0,w,c
  3657   0008C2  A4D8               	btfss	status,2,c
  3658   0008C4  EF66  F004         	goto	u4081
  3659   0008C8  EF68  F004         	goto	u4080
  3660   0008CC                     u4081:
  3661   0008CC  EF6A  F004         	goto	l4554
  3662   0008D0                     u4080:
  3663   0008D0  EFA0  F001         	goto	l388
  3664   0008D4                     l4554:
  3665   0008D4  0EFE               	movlw	254
  3666   0008D6  1871               	xorwf	motor_RFID@flag^0,w,c
  3667   0008D8  B4D8               	btfsc	status,2,c
  3668   0008DA  EF71  F004         	goto	u4091
  3669   0008DE  EF73  F004         	goto	u4090
  3670   0008E2                     u4091:
  3671   0008E2  EF78  F005         	goto	l495
  3672   0008E6                     u4090:
  3673   0008E6                     
  3674                           ;TAD_RFID.c: 564:                         UID[3] = flag;
  3675   0008E6  C071  F004         	movff	motor_RFID@flag,motor_RFID@UID+3
  3676   0008EA                     
  3677                           ;TAD_RFID.c: 565:                         substate = 22;
  3678   0008EA  0E16               	movlw	22
  3679   0008EC  6E34               	movwf	motor_RFID@substate^0,c
  3680   0008EE  EF78  F005         	goto	l495
  3681   0008F2                     l4560:
  3682                           
  3683                           ;TAD_RFID.c: 570:                     flag = motor_Read(0x09);
  3684   0008F2  0E09               	movlw	9
  3685   0008F4  EC79  F007         	call	_motor_Read
  3686   0008F8  6E71               	movwf	motor_RFID@flag^0,c
  3687   0008FA                     
  3688                           ;TAD_RFID.c: 571:                     if (flag == 0xFF) {
  3689   0008FA  2871               	incf	motor_RFID@flag^0,w,c
  3690   0008FC  A4D8               	btfss	status,2,c
  3691   0008FE  EF83  F004         	goto	u4101
  3692   000902  EF85  F004         	goto	u4100
  3693   000906                     u4101:
  3694   000906  EF87  F004         	goto	l4566
  3695   00090A                     u4100:
  3696   00090A  EFA0  F001         	goto	l388
  3697   00090E                     l4566:
  3698   00090E  0EFE               	movlw	254
  3699   000910  1871               	xorwf	motor_RFID@flag^0,w,c
  3700   000912  B4D8               	btfsc	status,2,c
  3701   000914  EF8E  F004         	goto	u4111
  3702   000918  EF90  F004         	goto	u4110
  3703   00091C                     u4111:
  3704   00091C  EF78  F005         	goto	l495
  3705   000920                     u4110:
  3706   000920                     
  3707                           ;TAD_RFID.c: 574:                         UID[4] = flag;
  3708   000920  C071  F005         	movff	motor_RFID@flag,motor_RFID@UID+4
  3709                           
  3710                           ;TAD_RFID.c: 575:                         UID[5] = 0;
  3711   000924  6A06               	clrf	(motor_RFID@UID+5)^0,c
  3712   000926                     
  3713                           ;TAD_RFID.c: 576:                         substate = 23;
  3714   000926  0E17               	movlw	23
  3715   000928  6E34               	movwf	motor_RFID@substate^0,c
  3716   00092A  EF78  F005         	goto	l495
  3717   00092E                     l4572:
  3718                           
  3719                           ;TAD_RFID.c: 581:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  3720   00092E  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3721   000930  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  3722   000932  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  3723   000934  1801               	xorwf	motor_RFID@UID^0,w,c
  3724   000936  6E2D               	movwf	motor_RFID@checksum^0,c
  3725   000938                     
  3726                           ;TAD_RFID.c: 582:                     allZero = 1;
  3727   000938  0E01               	movlw	1
  3728   00093A  6E2C               	movwf	motor_RFID@allZero^0,c
  3729   00093C                     
  3730                           ;TAD_RFID.c: 583:                     substate = 24;
  3731   00093C  0E18               	movlw	24
  3732   00093E  6E34               	movwf	motor_RFID@substate^0,c
  3733                           
  3734                           ;TAD_RFID.c: 584:                     break;
  3735   000940  EF78  F005         	goto	l495
  3736   000944                     l4578:
  3737                           
  3738                           ;TAD_RFID.c: 588:                     allZero = ((UID[0] | UID[1] | UID[2] | UID[3]) == 
      +                          0);
  3739   000944  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3740   000946  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  3741   000948  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  3742   00094A  1001               	iorwf	motor_RFID@UID^0,w,c
  3743   00094C  0900               	iorlw	0
  3744   00094E  B4D8               	btfsc	status,2,c
  3745   000950  EFAC  F004         	goto	u4121
  3746   000954  EFAF  F004         	goto	u4120
  3747   000958                     u4121:
  3748   000958  0E01               	movlw	1
  3749   00095A  EFB0  F004         	goto	u4130
  3750   00095E                     u4120:
  3751   00095E  0E00               	movlw	0
  3752   000960                     u4130:
  3753   000960  6E2C               	movwf	motor_RFID@allZero^0,c
  3754   000962                     
  3755                           ;TAD_RFID.c: 589:                     substate = 26;
  3756   000962  0E1A               	movlw	26
  3757   000964  6E34               	movwf	motor_RFID@substate^0,c
  3758                           
  3759                           ;TAD_RFID.c: 590:                     break;
  3760   000966  EF78  F005         	goto	l495
  3761   00096A                     l4582:
  3762                           
  3763                           ;TAD_RFID.c: 593:                     if (checksum != UID[4] || allZero) {
  3764   00096A  502D               	movf	motor_RFID@checksum^0,w,c
  3765   00096C  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  3766   00096E  A4D8               	btfss	status,2,c
  3767   000970  EFBC  F004         	goto	u4141
  3768   000974  EFBE  F004         	goto	u4140
  3769   000978                     u4141:
  3770   000978  EFA0  F001         	goto	l388
  3771   00097C                     u4140:
  3772   00097C  502C               	movf	motor_RFID@allZero^0,w,c
  3773   00097E  B4D8               	btfsc	status,2,c
  3774   000980  EFC4  F004         	goto	u4151
  3775   000984  EFC6  F004         	goto	u4150
  3776   000988                     u4151:
  3777   000988  EFC8  F004         	goto	l4586
  3778   00098C                     u4150:
  3779   00098C  EFA0  F001         	goto	l388
  3780   000990                     l4586:
  3781                           
  3782                           ;TAD_RFID.c: 596:                         substate = 27;
  3783   000990  0E1B               	movlw	27
  3784   000992  6E34               	movwf	motor_RFID@substate^0,c
  3785   000994  EF78  F005         	goto	l495
  3786   000998                     l4588:
  3787                           
  3788                           ;TAD_RFID.c: 601:                     {;TAD_RFID.c: 602:                         char di
      +                          fferentUID = 1;
  3789   000998  0E01               	movlw	1
  3790   00099A  6E68               	movwf	motor_RFID@differentUID^0,c
  3791   00099C                     
  3792                           ;TAD_RFID.c: 603:                         unsigned char currentUser[5];;TAD_RFID.c: 604:
      +                                                   getActualUID(currentUser);
  3793   00099C  0E69               	movlw	low motor_RFID@currentUser
  3794   00099E  6E51               	movwf	getActualUID@UID^0,c
  3795   0009A0  EC46  F00A         	call	_getActualUID	;wreg free
  3796   0009A4                     
  3797                           ;TAD_RFID.c: 606:                         if(currentUser[0] != UID[0]) {
  3798   0009A4  5001               	movf	motor_RFID@UID^0,w,c
  3799   0009A6  1869               	xorwf	motor_RFID@currentUser^0,w,c
  3800   0009A8  B4D8               	btfsc	status,2,c
  3801   0009AA  EFD9  F004         	goto	u4161
  3802   0009AE  EFDB  F004         	goto	u4160
  3803   0009B2                     u4161:
  3804   0009B2  EFE6  F004         	goto	l4596
  3805   0009B6                     u4160:
  3806   0009B6                     
  3807                           ;TAD_RFID.c: 607:                             setCurrentUser(UID[0], UID[1], UID[2], UID
      +                          [3], UID[4]);
  3808   0009B6  C002  F061         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3809   0009BA  C003  F062         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3810   0009BE  C004  F063         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3811   0009C2  C005  F064         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3812   0009C6  5001               	movf	motor_RFID@UID^0,w,c
  3813   0009C8  ECE9  F00C         	call	_setCurrentUser
  3814   0009CC                     l4596:
  3815                           
  3816                           ;TAD_RFID.c: 609:                         substate = 28;
  3817   0009CC  0E1C               	movlw	28
  3818   0009CE  6E34               	movwf	motor_RFID@substate^0,c
  3819                           
  3820                           ;TAD_RFID.c: 610:                     };TAD_RFID.c: 611:                     break;
  3821   0009D0  EF78  F005         	goto	l495
  3822   0009D4                     l4598:
  3823                           
  3824                           ;TAD_RFID.c: 614:                     flag = motor_Write(0x0D, 0x00);
  3825   0009D4  0E00               	movlw	0
  3826   0009D6  6E58               	movwf	motor_Write@value^0,c
  3827   0009D8  0E0D               	movlw	13
  3828   0009DA  ECDD  F00A         	call	_motor_Write
  3829   0009DE  6E71               	movwf	motor_RFID@flag^0,c
  3830   0009E0                     
  3831                           ;TAD_RFID.c: 615:                     if (flag != 0) {
  3832   0009E0  5071               	movf	motor_RFID@flag^0,w,c
  3833   0009E2  B4D8               	btfsc	status,2,c
  3834   0009E4  EFF6  F004         	goto	u4171
  3835   0009E8  EFF8  F004         	goto	u4170
  3836   0009EC                     u4171:
  3837   0009EC  EF78  F005         	goto	l495
  3838   0009F0                     u4170:
  3839   0009F0  EFA0  F001         	goto	l388
  3840   0009F4                     l4606:
  3841   0009F4  5034               	movf	motor_RFID@substate^0,w,c
  3842                           
  3843                           ; Switch size 1, requested type "simple"
  3844                           ; Number of cases is 28, Range of values is 0 to 28
  3845                           ; switch strategies available:
  3846                           ; Name         Instructions Cycles
  3847                           ; simple_byte           85    43 (average)
  3848                           ;	Chosen strategy is simple_byte
  3849   0009F6  0A00               	xorlw	0	; case 0
  3850   0009F8  B4D8               	btfsc	status,2,c
  3851   0009FA  EF61  F002         	goto	l4350
  3852   0009FE  0A01               	xorlw	1	; case 1
  3853   000A00  B4D8               	btfsc	status,2,c
  3854   000A02  EF77  F002         	goto	l4356
  3855   000A06  0A03               	xorlw	3	; case 2
  3856   000A08  B4D8               	btfsc	status,2,c
  3857   000A0A  EF92  F002         	goto	l4368
  3858   000A0E  0A01               	xorlw	1	; case 3
  3859   000A10  B4D8               	btfsc	status,2,c
  3860   000A12  EFA3  F002         	goto	l4374
  3861   000A16  0A07               	xorlw	7	; case 4
  3862   000A18  B4D8               	btfsc	status,2,c
  3863   000A1A  EFB7  F002         	goto	l4382
  3864   000A1E  0A01               	xorlw	1	; case 5
  3865   000A20  B4D8               	btfsc	status,2,c
  3866   000A22  EFD0  F002         	goto	l4394
  3867   000A26  0A03               	xorlw	3	; case 6
  3868   000A28  B4D8               	btfsc	status,2,c
  3869   000A2A  EFE1  F002         	goto	l4400
  3870   000A2E  0A01               	xorlw	1	; case 7
  3871   000A30  B4D8               	btfsc	status,2,c
  3872   000A32  EFFC  F002         	goto	l4412
  3873   000A36  0A0F               	xorlw	15	; case 8
  3874   000A38  B4D8               	btfsc	status,2,c
  3875   000A3A  EF0D  F003         	goto	l4418
  3876   000A3E  0A01               	xorlw	1	; case 9
  3877   000A40  B4D8               	btfsc	status,2,c
  3878   000A42  EF1D  F003         	goto	l4424
  3879   000A46  0A03               	xorlw	3	; case 10
  3880   000A48  B4D8               	btfsc	status,2,c
  3881   000A4A  EF2D  F003         	goto	l4430
  3882   000A4E  0A01               	xorlw	1	; case 11
  3883   000A50  B4D8               	btfsc	status,2,c
  3884   000A52  EF3D  F003         	goto	l4436
  3885   000A56  0A07               	xorlw	7	; case 12
  3886   000A58  B4D8               	btfsc	status,2,c
  3887   000A5A  EF4D  F003         	goto	l4442
  3888   000A5E  0A01               	xorlw	1	; case 13
  3889   000A60  B4D8               	btfsc	status,2,c
  3890   000A62  EF68  F003         	goto	l4454
  3891   000A66  0A03               	xorlw	3	; case 14
  3892   000A68  B4D8               	btfsc	status,2,c
  3893   000A6A  EF7A  F003         	goto	l4462
  3894   000A6E  0A01               	xorlw	1	; case 15
  3895   000A70  B4D8               	btfsc	status,2,c
  3896   000A72  EFA9  F003         	goto	l4478
  3897   000A76  0A1F               	xorlw	31	; case 16
  3898   000A78  B4D8               	btfsc	status,2,c
  3899   000A7A  EFC4  F003         	goto	l4490
  3900   000A7E  0A01               	xorlw	1	; case 17
  3901   000A80  B4D8               	btfsc	status,2,c
  3902   000A82  EFD5  F003         	goto	l4496
  3903   000A86  0A03               	xorlw	3	; case 18
  3904   000A88  B4D8               	btfsc	status,2,c
  3905   000A8A  EF05  F004         	goto	l4512
  3906   000A8E  0A01               	xorlw	1	; case 19
  3907   000A90  B4D8               	btfsc	status,2,c
  3908   000A92  EF22  F004         	goto	l4524
  3909   000A96  0A07               	xorlw	7	; case 20
  3910   000A98  B4D8               	btfsc	status,2,c
  3911   000A9A  EF3F  F004         	goto	l4536
  3912   000A9E  0A01               	xorlw	1	; case 21
  3913   000AA0  B4D8               	btfsc	status,2,c
  3914   000AA2  EF5C  F004         	goto	l4548
  3915   000AA6  0A03               	xorlw	3	; case 22
  3916   000AA8  B4D8               	btfsc	status,2,c
  3917   000AAA  EF79  F004         	goto	l4560
  3918   000AAE  0A01               	xorlw	1	; case 23
  3919   000AB0  B4D8               	btfsc	status,2,c
  3920   000AB2  EF97  F004         	goto	l4572
  3921   000AB6  0A0F               	xorlw	15	; case 24
  3922   000AB8  B4D8               	btfsc	status,2,c
  3923   000ABA  EFA2  F004         	goto	l4578
  3924   000ABE  0A02               	xorlw	2	; case 26
  3925   000AC0  B4D8               	btfsc	status,2,c
  3926   000AC2  EFB5  F004         	goto	l4582
  3927   000AC6  0A01               	xorlw	1	; case 27
  3928   000AC8  B4D8               	btfsc	status,2,c
  3929   000ACA  EFCC  F004         	goto	l4588
  3930   000ACE  0A07               	xorlw	7	; case 28
  3931   000AD0  B4D8               	btfsc	status,2,c
  3932   000AD2  EFEA  F004         	goto	l4598
  3933   000AD6  EF78  F005         	goto	l495
  3934   000ADA                     l4610:
  3935   000ADA  5035               	movf	motor_RFID@state^0,w,c
  3936                           
  3937                           ; Switch size 1, requested type "simple"
  3938                           ; Number of cases is 2, Range of values is 0 to 1
  3939                           ; switch strategies available:
  3940                           ; Name         Instructions Cycles
  3941                           ; simple_byte            7     4 (average)
  3942                           ;	Chosen strategy is simple_byte
  3943   000ADC  0A00               	xorlw	0	; case 0
  3944   000ADE  B4D8               	btfsc	status,2,c
  3945   000AE0  EF14  F002         	goto	l4348
  3946   000AE4  0A01               	xorlw	1	; case 1
  3947   000AE6  B4D8               	btfsc	status,2,c
  3948   000AE8  EFFA  F004         	goto	l4606
  3949   000AEC  EF78  F005         	goto	l495
  3950   000AF0                     l495:
  3951   000AF0  0012               	return		;funcret
  3952   000AF2                     __end_of_motor_RFID:
  3953                           	callstack 0
  3954                           
  3955 ;; *************** function _setCurrentUser *****************
  3956 ;; Defined at:
  3957 ;;		line 81 in file "TAD_DATOS.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  UID0            1    wreg     unsigned char 
  3960 ;;  UID1            1   17[COMRAM] unsigned char 
  3961 ;;  UID2            1   18[COMRAM] unsigned char 
  3962 ;;  UID3            1   19[COMRAM] unsigned char 
  3963 ;;  UID4            1   20[COMRAM] unsigned char 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  UID0            1   21[COMRAM] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1
  3975 ;;      Params:         4       0       0
  3976 ;;      Locals:         1       0       0
  3977 ;;      Temps:          0       0       0
  3978 ;;      Totals:         5       0       0
  3979 ;;Total ram usage:        5 bytes
  3980 ;; Hardware stack levels used: 1
  3981 ;; Hardware stack levels required when called: 7
  3982 ;; This function calls:
  3983 ;;		_Terminal_SendString
  3984 ;;		_printLedConfig
  3985 ;;		_printfUID
  3986 ;; This function is called by:
  3987 ;;		_motor_RFID
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text2
  3992   0019D2                     __ptext2:
  3993                           	callstack 0
  3994   0019D2                     _setCurrentUser:
  3995                           	callstack 22
  3996                           
  3997                           ;incstack = 0
  3998                           ;setCurrentUser@UID0 stored from wreg
  3999   0019D2  6E65               	movwf	setCurrentUser@UID0^0,c
  4000   0019D4                     
  4001                           ;TAD_DATOS.c: 82:  currentUser[0] = UID0;
  4002   0019D4  C065  F041         	movff	setCurrentUser@UID0,_currentUser
  4003   0019D8                     
  4004                           ;TAD_DATOS.c: 83:  currentUser[1] = UID1;
  4005   0019D8  C061  F042         	movff	setCurrentUser@UID1,_currentUser+1
  4006   0019DC                     
  4007                           ;TAD_DATOS.c: 84:  currentUser[2] = UID2;
  4008   0019DC  C062  F043         	movff	setCurrentUser@UID2,_currentUser+2
  4009   0019E0                     
  4010                           ;TAD_DATOS.c: 85:  currentUser[3] = UID3;
  4011   0019E0  C063  F044         	movff	setCurrentUser@UID3,_currentUser+3
  4012   0019E4                     
  4013                           ;TAD_DATOS.c: 86:  currentUser[4] = UID4;
  4014   0019E4  C064  F045         	movff	setCurrentUser@UID4,_currentUser+4
  4015   0019E8                     
  4016                           ;TAD_DATOS.c: 87:  new_user = 1;
  4017   0019E8  0E01               	movlw	1
  4018   0019EA  6E1E               	movwf	_new_user^0,c
  4019   0019EC                     
  4020                           ;TAD_DATOS.c: 88:  Terminal_SendString("Targeta detectada!\r\n\t");
  4021   0019EC  0E8C               	movlw	low STR_29
  4022   0019EE  6E55               	movwf	Terminal_SendString@str^0,c
  4023   0019F0  0E1F               	movlw	high STR_29
  4024   0019F2  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  4025   0019F4  EC88  F00D         	call	_Terminal_SendString	;wreg free
  4026   0019F8                     
  4027                           ;TAD_DATOS.c: 89:  printfUID(currentUser);
  4028   0019F8  0E41               	movlw	low _currentUser
  4029   0019FA  6E57               	movwf	printfUID@currentUser^0,c
  4030   0019FC  EC7E  F008         	call	_printfUID	;wreg free
  4031   001A00                     
  4032                           ;TAD_DATOS.c: 90:  Terminal_SendString("\t");
  4033   001A00  0EA0               	movlw	low (STR_29+20)
  4034   001A02  6E55               	movwf	Terminal_SendString@str^0,c
  4035   001A04  0E1F               	movlw	high (STR_29+20)
  4036   001A06  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  4037   001A08  EC88  F00D         	call	_Terminal_SendString	;wreg free
  4038   001A0C                     
  4039                           ;TAD_DATOS.c: 91:  printLedConfig(configurations[index]);
  4040   001A0C  5011               	movf	_index^0,w,c
  4041   001A0E  0D06               	mullw	6
  4042   001A10  50F3               	movf	243,w,c
  4043   001A12  0FC0               	addlw	low _configurations
  4044   001A14  6E57               	movwf	printLedConfig@leds^0,c
  4045   001A16  ECF6  F008         	call	_printLedConfig	;wreg free
  4046   001A1A  0012               	return		;funcret
  4047   001A1C                     __end_of_setCurrentUser:
  4048                           	callstack 0
  4049                           
  4050 ;; *************** function _printLedConfig *****************
  4051 ;; Defined at:
  4052 ;;		line 110 in file "TAD_TERMINAL.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  leds            1    7[COMRAM] PTR unsigned char 
  4055 ;;		 -> configurations(24), 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  val             1   10[COMRAM] unsigned char 
  4058 ;;  i               2   11[COMRAM] int 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1
  4068 ;;      Params:         1       0       0
  4069 ;;      Locals:         5       0       0
  4070 ;;      Temps:          0       0       0
  4071 ;;      Totals:         6       0       0
  4072 ;;Total ram usage:        6 bytes
  4073 ;; Hardware stack levels used: 1
  4074 ;; Hardware stack levels required when called: 6
  4075 ;; This function calls:
  4076 ;;		_Terminal_SendChar
  4077 ;;		_Terminal_SendString
  4078 ;; This function is called by:
  4079 ;;		_setCurrentUser
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text3
  4084   0011EC                     __ptext3:
  4085                           	callstack 0
  4086   0011EC                     _printLedConfig:
  4087                           	callstack 22
  4088   0011EC                     
  4089                           ;TAD_TERMINAL.c: 111:  for (int i = 0; i < 6; i++) {
  4090   0011EC  0E00               	movlw	0
  4091   0011EE  6E5C               	movwf	(printLedConfig@i+1)^0,c
  4092   0011F0  0E00               	movlw	0
  4093   0011F2  6E5B               	movwf	printLedConfig@i^0,c
  4094   0011F4                     l3602:
  4095                           
  4096                           ;TAD_TERMINAL.c: 113:   Terminal_SendChar('L');
  4097   0011F4  0E4C               	movlw	76
  4098   0011F6  EC4F  F00E         	call	_Terminal_SendChar
  4099                           
  4100                           ;TAD_TERMINAL.c: 114:   Terminal_SendChar('0' + i);
  4101   0011FA  505B               	movf	printLedConfig@i^0,w,c
  4102   0011FC  0F30               	addlw	48
  4103   0011FE  EC4F  F00E         	call	_Terminal_SendChar
  4104   001202                     
  4105                           ;TAD_TERMINAL.c: 115:   Terminal_SendString(": ");
  4106   001202  0EE9               	movlw	low (STR_15+6)
  4107   001204  6E55               	movwf	Terminal_SendString@str^0,c
  4108   001206  0E1F               	movlw	high (STR_15+6)
  4109   001208  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  4110   00120A  EC88  F00D         	call	_Terminal_SendString	;wreg free
  4111   00120E                     
  4112                           ;TAD_TERMINAL.c: 118:   unsigned char val = leds[i];
  4113   00120E  5057               	movf	printLedConfig@leds^0,w,c
  4114   001210  245B               	addwf	printLedConfig@i^0,w,c
  4115   001212  6ED9               	movwf	fsr2l,c
  4116   001214  6ADA               	clrf	fsr2h,c
  4117   001216  50DF               	movf	indf2,w,c
  4118   001218  6E5A               	movwf	printLedConfig@val^0,c
  4119   00121A                     
  4120                           ;TAD_TERMINAL.c: 119:   Terminal_SendChar(val < 10 ? '0' + val : 'A' + val - 10);
  4121   00121A  0E09               	movlw	9
  4122   00121C  645A               	cpfsgt	printLedConfig@val^0,c
  4123   00121E  EF13  F009         	goto	u2931
  4124   001222  EF15  F009         	goto	u2930
  4125   001226                     u2931:
  4126   001226  EF1D  F009         	goto	l3612
  4127   00122A                     u2930:
  4128   00122A  0E37               	movlw	55
  4129   00122C  245A               	addwf	printLedConfig@val^0,w,c
  4130   00122E  6E58               	movwf	_printLedConfig$880^0,c
  4131   001230  6A59               	clrf	(_printLedConfig$880+1)^0,c
  4132   001232  0E00               	movlw	0
  4133   001234  2259               	addwfc	(_printLedConfig$880+1)^0,f,c
  4134   001236  EF23  F009         	goto	l3614
  4135   00123A                     l3612:
  4136   00123A  0E30               	movlw	48
  4137   00123C  245A               	addwf	printLedConfig@val^0,w,c
  4138   00123E  6E58               	movwf	_printLedConfig$880^0,c
  4139   001240  6A59               	clrf	(_printLedConfig$880+1)^0,c
  4140   001242  0E00               	movlw	0
  4141   001244  2259               	addwfc	(_printLedConfig$880+1)^0,f,c
  4142   001246                     l3614:
  4143   001246  5058               	movf	_printLedConfig$880^0,w,c
  4144   001248  EC4F  F00E         	call	_Terminal_SendChar
  4145   00124C                     
  4146                           ;TAD_TERMINAL.c: 122:   if (i < 6 - 1) Terminal_SendString(" - ");
  4147   00124C  BE5C               	btfsc	(printLedConfig@i+1)^0,7,c
  4148   00124E  EF34  F009         	goto	u2940
  4149   001252  505C               	movf	(printLedConfig@i+1)^0,w,c
  4150   001254  E107               	bnz	u2941
  4151   001256  0E05               	movlw	5
  4152   001258  5C5B               	subwf	printLedConfig@i^0,w,c
  4153   00125A  B0D8               	btfsc	status,0,c
  4154   00125C  EF32  F009         	goto	u2941
  4155   001260  EF34  F009         	goto	u2940
  4156   001264                     u2941:
  4157   001264  EF3A  F009         	goto	l3620
  4158   001268                     u2940:
  4159   001268  0EF8               	movlw	low STR_5
  4160   00126A  6E55               	movwf	Terminal_SendString@str^0,c
  4161   00126C  0E1F               	movlw	high STR_5
  4162   00126E  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  4163   001270  EC88  F00D         	call	_Terminal_SendString	;wreg free
  4164   001274                     l3620:
  4165                           
  4166                           ;TAD_TERMINAL.c: 123:  }
  4167   001274  4A5B               	infsnz	printLedConfig@i^0,f,c
  4168   001276  2A5C               	incf	(printLedConfig@i+1)^0,f,c
  4169   001278  BE5C               	btfsc	(printLedConfig@i+1)^0,7,c
  4170   00127A  EF48  F009         	goto	u2951
  4171   00127E  505C               	movf	(printLedConfig@i+1)^0,w,c
  4172   001280  E109               	bnz	u2950
  4173   001282  0E06               	movlw	6
  4174   001284  5C5B               	subwf	printLedConfig@i^0,w,c
  4175   001286  A0D8               	btfss	status,0,c
  4176   001288  EF48  F009         	goto	u2951
  4177   00128C  EF4A  F009         	goto	u2950
  4178   001290                     u2951:
  4179   001290  EFFA  F008         	goto	l3602
  4180   001294                     u2950:
  4181   001294                     
  4182                           ;TAD_TERMINAL.c: 124:  Terminal_SendString("\r\n");
  4183   001294  0EC4               	movlw	low (STR_7+15)
  4184   001296  6E55               	movwf	Terminal_SendString@str^0,c
  4185   001298  0E1F               	movlw	high (STR_7+15)
  4186   00129A  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  4187   00129C  EC88  F00D         	call	_Terminal_SendString	;wreg free
  4188   0012A0  0012               	return		;funcret
  4189   0012A2                     __end_of_printLedConfig:
  4190                           	callstack 0
  4191                           
  4192 ;; *************** function _motor_Write *****************
  4193 ;; Defined at:
  4194 ;;		line 161 in file "TAD_RFID.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  addr            1    wreg     unsigned char 
  4197 ;;  value           1    8[COMRAM] unsigned char 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  addr            1    9[COMRAM] unsigned char 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      unsigned char 
  4202 ;; Registers used:
  4203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1
  4209 ;;      Params:         1       0       0
  4210 ;;      Locals:         1       0       0
  4211 ;;      Temps:          0       0       0
  4212 ;;      Totals:         2       0       0
  4213 ;;Total ram usage:        2 bytes
  4214 ;; Hardware stack levels used: 1
  4215 ;; Hardware stack levels required when called: 5
  4216 ;; This function calls:
  4217 ;;		_processBit
  4218 ;; This function is called by:
  4219 ;;		_motor_RFID
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text4
  4224   0015BA                     __ptext4:
  4225                           	callstack 0
  4226   0015BA                     _motor_Write:
  4227                           	callstack 24
  4228                           
  4229                           ;incstack = 0
  4230                           ;motor_Write@addr stored from wreg
  4231   0015BA  6E59               	movwf	motor_Write@addr^0,c
  4232   0015BC                     
  4233                           ;TAD_RFID.c: 162:     static char bit_count = 0;;TAD_RFID.c: 163:     static unsigned ch
      +                          ar ucAddr;;TAD_RFID.c: 164:     static unsigned char ucValue;;TAD_RFID.c: 166:     switc
      +                          h (state_write) {
  4234   0015BC  EF10  F00B         	goto	l3668
  4235   0015C0                     l272:
  4236                           
  4237                           ;TAD_RFID.c: 168:             LATCbits.LATC2 = 0;
  4238   0015C0  948B               	bcf	139,2,c	;volatile
  4239                           
  4240                           ;TAD_RFID.c: 169:             LATCbits.LATC3 = 0;
  4241   0015C2  968B               	bcf	139,3,c	;volatile
  4242   0015C4                     
  4243                           ;TAD_RFID.c: 170:             ucAddr = ((addr << 1) & 0x7E);
  4244   0015C4  5059               	movf	motor_Write@addr^0,w,c
  4245   0015C6  2459               	addwf	motor_Write@addr^0,w,c
  4246   0015C8  0B7E               	andlw	126
  4247   0015CA  6E4B               	movwf	motor_Write@ucAddr^0,c
  4248   0015CC                     
  4249                           ;TAD_RFID.c: 171:             ucValue = value;
  4250   0015CC  C058  F04A         	movff	motor_Write@value,motor_Write@ucValue
  4251   0015D0                     
  4252                           ;TAD_RFID.c: 172:             bit_count = 0;
  4253   0015D0  6A4C               	clrf	motor_Write@bit_count^0,c
  4254   0015D2                     
  4255                           ;TAD_RFID.c: 173:             state_write = 1;
  4256   0015D2  0E01               	movlw	1
  4257   0015D4  6E4D               	movwf	_state_write^0,c
  4258                           
  4259                           ;TAD_RFID.c: 174:             break;
  4260   0015D6  EF1F  F00B         	goto	l3670
  4261   0015DA                     l3654:
  4262                           
  4263                           ;TAD_RFID.c: 177:             processBit(&ucAddr, &bit_count, &state_write, 2);
  4264   0015DA  0E4B               	movlw	low motor_Write@ucAddr
  4265   0015DC  6E53               	movwf	processBit@val^0,c
  4266   0015DE  0E4C               	movlw	low motor_Write@bit_count
  4267   0015E0  6E54               	movwf	processBit@bit_count^0,c
  4268   0015E2  0E4D               	movlw	low _state_write
  4269   0015E4  6E55               	movwf	processBit@state^0,c
  4270   0015E6  0E02               	movlw	2
  4271   0015E8  6E56               	movwf	processBit@next_state^0,c
  4272   0015EA  ECA5  F00B         	call	_processBit	;wreg free
  4273                           
  4274                           ;TAD_RFID.c: 178:             break;
  4275   0015EE  EF1F  F00B         	goto	l3670
  4276   0015F2                     l3656:
  4277                           
  4278                           ;TAD_RFID.c: 181:             processBit(&ucValue, &bit_count, &state_write, 0);
  4279   0015F2  0E4A               	movlw	low motor_Write@ucValue
  4280   0015F4  6E53               	movwf	processBit@val^0,c
  4281   0015F6  0E4C               	movlw	low motor_Write@bit_count
  4282   0015F8  6E54               	movwf	processBit@bit_count^0,c
  4283   0015FA  0E4D               	movlw	low _state_write
  4284   0015FC  6E55               	movwf	processBit@state^0,c
  4285   0015FE  0E00               	movlw	0
  4286   001600  6E56               	movwf	processBit@next_state^0,c
  4287   001602  ECA5  F00B         	call	_processBit	;wreg free
  4288   001606                     
  4289                           ;TAD_RFID.c: 182:             if (state_write == 0) {
  4290   001606  504D               	movf	_state_write^0,w,c
  4291   001608  A4D8               	btfss	status,2,c
  4292   00160A  EF09  F00B         	goto	u2981
  4293   00160E  EF0B  F00B         	goto	u2980
  4294   001612                     u2981:
  4295   001612  EF1F  F00B         	goto	l3670
  4296   001616                     u2980:
  4297   001616                     
  4298                           ;TAD_RFID.c: 183:                 LATCbits.LATC3 = 1;
  4299   001616  868B               	bsf	139,3,c	;volatile
  4300                           
  4301                           ;TAD_RFID.c: 184:                 LATCbits.LATC2 = 1;
  4302   001618  848B               	bsf	139,2,c	;volatile
  4303   00161A                     
  4304                           ;TAD_RFID.c: 185:                 return 1;
  4305   00161A  0E01               	movlw	1
  4306   00161C  EF20  F00B         	goto	l277
  4307   001620                     l3668:
  4308   001620  504D               	movf	_state_write^0,w,c
  4309                           
  4310                           ; Switch size 1, requested type "simple"
  4311                           ; Number of cases is 3, Range of values is 0 to 2
  4312                           ; switch strategies available:
  4313                           ; Name         Instructions Cycles
  4314                           ; simple_byte           10     6 (average)
  4315                           ;	Chosen strategy is simple_byte
  4316   001622  0A00               	xorlw	0	; case 0
  4317   001624  B4D8               	btfsc	status,2,c
  4318   001626  EFE0  F00A         	goto	l272
  4319   00162A  0A01               	xorlw	1	; case 1
  4320   00162C  B4D8               	btfsc	status,2,c
  4321   00162E  EFED  F00A         	goto	l3654
  4322   001632  0A03               	xorlw	3	; case 2
  4323   001634  B4D8               	btfsc	status,2,c
  4324   001636  EFF9  F00A         	goto	l3656
  4325   00163A  EF1F  F00B         	goto	l3670
  4326   00163E                     l3670:
  4327                           
  4328                           ;TAD_RFID.c: 189:     return 0;
  4329   00163E  0E00               	movlw	0
  4330   001640                     l277:
  4331   001640  0012               	return		;funcret
  4332   001642                     __end_of_motor_Write:
  4333                           	callstack 0
  4334                           
  4335 ;; *************** function _motor_Read *****************
  4336 ;; Defined at:
  4337 ;;		line 193 in file "TAD_RFID.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  addr            1    wreg     unsigned char 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  addr            1    9[COMRAM] unsigned char 
  4342 ;;  MAX_TIMEOUT     2    0        const unsigned int 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      unsigned char 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1
  4352 ;;      Params:         0       0       0
  4353 ;;      Locals:         3       0       0
  4354 ;;      Temps:          1       0       0
  4355 ;;      Totals:         4       0       0
  4356 ;;Total ram usage:        4 bytes
  4357 ;; Hardware stack levels used: 1
  4358 ;; Hardware stack levels required when called: 5
  4359 ;; This function calls:
  4360 ;;		_delay_us
  4361 ;;		_processBit
  4362 ;; This function is called by:
  4363 ;;		_motor_RFID
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text5
  4368   000EF2                     __ptext5:
  4369                           	callstack 0
  4370   000EF2                     _motor_Read:
  4371                           	callstack 24
  4372                           
  4373                           ;incstack = 0
  4374                           ;motor_Read@addr stored from wreg
  4375   000EF2  6E59               	movwf	motor_Read@addr^0,c
  4376   000EF4                     
  4377                           ;TAD_RFID.c: 200:     if (++timeout_counter > MAX_TIMEOUT) {
  4378   000EF4  4A17               	infsnz	motor_Read@timeout_counter^0,f,c
  4379   000EF6  2A18               	incf	(motor_Read@timeout_counter+1)^0,f,c
  4380   000EF8  0EE9               	movlw	233
  4381   000EFA  5C17               	subwf	motor_Read@timeout_counter^0,w,c
  4382   000EFC  0E03               	movlw	3
  4383   000EFE  5818               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  4384   000F00  A0D8               	btfss	status,0,c
  4385   000F02  EF85  F007         	goto	u2991
  4386   000F06  EF87  F007         	goto	u2990
  4387   000F0A                     u2991:
  4388   000F0A  EFF2  F007         	goto	l3738
  4389   000F0E                     u2990:
  4390   000F0E                     
  4391                           ;TAD_RFID.c: 201:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  4392   000F0E  848B               	bsf	139,2,c	;volatile
  4393   000F10  868B               	bsf	139,3,c	;volatile
  4394                           
  4395                           ;TAD_RFID.c: 202:         state_read = 0;
  4396   000F12  6A4E               	clrf	_state_read^0,c
  4397   000F14                     
  4398                           ;TAD_RFID.c: 203:         timeout_counter = 0;
  4399   000F14  0E00               	movlw	0
  4400   000F16  6E18               	movwf	(motor_Read@timeout_counter+1)^0,c
  4401   000F18  0E00               	movlw	0
  4402   000F1A  6E17               	movwf	motor_Read@timeout_counter^0,c
  4403   000F1C                     
  4404                           ;TAD_RFID.c: 204:         return 0xFF;
  4405   000F1C  0EFF               	movlw	255
  4406   000F1E  EF01  F008         	goto	l289
  4407   000F22                     l3686:
  4408                           
  4409                           ;TAD_RFID.c: 209:             timeout_counter = 0;
  4410   000F22  0E00               	movlw	0
  4411   000F24  6E18               	movwf	(motor_Read@timeout_counter+1)^0,c
  4412   000F26  0E00               	movlw	0
  4413   000F28  6E17               	movwf	motor_Read@timeout_counter^0,c
  4414   000F2A                     
  4415                           ;TAD_RFID.c: 210:             LATCbits.LATC2 = 0;
  4416   000F2A  948B               	bcf	139,2,c	;volatile
  4417   000F2C                     
  4418                           ;TAD_RFID.c: 211:             LATCbits.LATC3 = 0;
  4419   000F2C  968B               	bcf	139,3,c	;volatile
  4420   000F2E                     
  4421                           ;TAD_RFID.c: 212:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  4422   000F2E  5059               	movf	motor_Read@addr^0,w,c
  4423   000F30  2459               	addwf	motor_Read@addr^0,w,c
  4424   000F32  0B7E               	andlw	126
  4425   000F34  0980               	iorlw	128
  4426   000F36  6E48               	movwf	motor_Read@ucAddr^0,c
  4427   000F38                     
  4428                           ;TAD_RFID.c: 213:             ucResult = 0;
  4429   000F38  6A36               	clrf	motor_Read@ucResult^0,c
  4430   000F3A                     
  4431                           ;TAD_RFID.c: 214:             bit_count = 0;
  4432   000F3A  6A49               	clrf	motor_Read@bit_count^0,c
  4433   000F3C                     
  4434                           ;TAD_RFID.c: 215:             state_read = 1;
  4435   000F3C  0E01               	movlw	1
  4436   000F3E  6E4E               	movwf	_state_read^0,c
  4437   000F40                     l3700:
  4438                           
  4439                           ;TAD_RFID.c: 216:             return 0xFE;
  4440   000F40  0EFE               	movlw	254
  4441   000F42  EF01  F008         	goto	l289
  4442   000F46                     l3704:
  4443                           
  4444                           ;TAD_RFID.c: 219:             processBit(&ucAddr, &bit_count, &state_read, 2);
  4445   000F46  0E48               	movlw	low motor_Read@ucAddr
  4446   000F48  6E53               	movwf	processBit@val^0,c
  4447   000F4A  0E49               	movlw	low motor_Read@bit_count
  4448   000F4C  6E54               	movwf	processBit@bit_count^0,c
  4449   000F4E  0E4E               	movlw	low _state_read
  4450   000F50  6E55               	movwf	processBit@state^0,c
  4451   000F52  0E02               	movlw	2
  4452   000F54  6E56               	movwf	processBit@next_state^0,c
  4453   000F56  ECA5  F00B         	call	_processBit	;wreg free
  4454   000F5A  EFA0  F007         	goto	l3700
  4455   000F5E                     l293:
  4456                           
  4457                           ;TAD_RFID.c: 223:             LATCbits.LATC2 = 1;
  4458   000F5E  848B               	bsf	139,2,c	;volatile
  4459   000F60                     
  4460                           ;TAD_RFID.c: 224:             delay_us(5);
  4461   000F60  0E05               	movlw	5
  4462   000F62  EC1A  F00E         	call	_delay_us
  4463   000F66                     
  4464                           ;TAD_RFID.c: 225:             ucResult = (ucResult << 1) | PORTCbits.RC0;
  4465   000F66  B082               	btfsc	130,0,c	;volatile
  4466   000F68  EFB8  F007         	goto	u3001
  4467   000F6C  EFBC  F007         	goto	u3000
  4468   000F70                     u3001:
  4469   000F70  6A58               	clrf	??_motor_Read^0,c
  4470   000F72  2A58               	incf	??_motor_Read^0,f,c
  4471   000F74  EFBD  F007         	goto	u3008
  4472   000F78                     u3000:
  4473   000F78  6A58               	clrf	??_motor_Read^0,c
  4474   000F7A                     u3008:
  4475   000F7A  5036               	movf	motor_Read@ucResult^0,w,c
  4476   000F7C  2436               	addwf	motor_Read@ucResult^0,w,c
  4477   000F7E  1058               	iorwf	??_motor_Read^0,w,c
  4478   000F80  6E36               	movwf	motor_Read@ucResult^0,c
  4479   000F82                     
  4480                           ;TAD_RFID.c: 226:             LATCbits.LATC2 = 0;
  4481   000F82  948B               	bcf	139,2,c	;volatile
  4482   000F84                     
  4483                           ;TAD_RFID.c: 227:             delay_us(5);
  4484   000F84  0E05               	movlw	5
  4485   000F86  EC1A  F00E         	call	_delay_us
  4486                           
  4487                           ;TAD_RFID.c: 229:             if (++bit_count >= 8) {
  4488   000F8A  2A49               	incf	motor_Read@bit_count^0,f,c
  4489   000F8C  0E07               	movlw	7
  4490   000F8E  6449               	cpfsgt	motor_Read@bit_count^0,c
  4491   000F90  EFCC  F007         	goto	u3011
  4492   000F94  EFCE  F007         	goto	u3010
  4493   000F98                     u3011:
  4494   000F98  EFA0  F007         	goto	l3700
  4495   000F9C                     u3010:
  4496   000F9C                     
  4497                           ;TAD_RFID.c: 230:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  4498   000F9C  848B               	bsf	139,2,c	;volatile
  4499   000F9E  868B               	bsf	139,3,c	;volatile
  4500                           
  4501                           ;TAD_RFID.c: 231:                 state_read = 0;
  4502   000FA0  6A4E               	clrf	_state_read^0,c
  4503   000FA2                     
  4504                           ;TAD_RFID.c: 232:                 timeout_counter = 0;
  4505   000FA2  0E00               	movlw	0
  4506   000FA4  6E18               	movwf	(motor_Read@timeout_counter+1)^0,c
  4507   000FA6  0E00               	movlw	0
  4508   000FA8  6E17               	movwf	motor_Read@timeout_counter^0,c
  4509   000FAA                     
  4510                           ;TAD_RFID.c: 233:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  4511   000FAA  0EFE               	movlw	254
  4512   000FAC  1836               	xorwf	motor_Read@ucResult^0,w,c
  4513   000FAE  B4D8               	btfsc	status,2,c
  4514   000FB0  EFDC  F007         	goto	u3021
  4515   000FB4  EFDE  F007         	goto	u3020
  4516   000FB8                     u3021:
  4517   000FB8  EFEB  F007         	goto	l3728
  4518   000FBC                     u3020:
  4519   000FBC  2836               	incf	motor_Read@ucResult^0,w,c
  4520   000FBE  B4D8               	btfsc	status,2,c
  4521   000FC0  EFE4  F007         	goto	u3031
  4522   000FC4  EFE6  F007         	goto	u3030
  4523   000FC8                     u3031:
  4524   000FC8  EFEB  F007         	goto	l3728
  4525   000FCC                     u3030:
  4526   000FCC  C036  F05A         	movff	motor_Read@ucResult,_motor_Read$563
  4527   000FD0  6A5B               	clrf	(_motor_Read$563+1)^0,c
  4528   000FD2  EFEF  F007         	goto	l298
  4529   000FD6                     l3728:
  4530   000FD6  0E00               	movlw	0
  4531   000FD8  6E5B               	movwf	(_motor_Read$563+1)^0,c
  4532   000FDA  0EFD               	movlw	253
  4533   000FDC  6E5A               	movwf	_motor_Read$563^0,c
  4534   000FDE                     l298:
  4535   000FDE  505A               	movf	_motor_Read$563^0,w,c
  4536   000FE0  EF01  F008         	goto	l289
  4537   000FE4                     l3738:
  4538   000FE4  504E               	movf	_state_read^0,w,c
  4539                           
  4540                           ; Switch size 1, requested type "simple"
  4541                           ; Number of cases is 3, Range of values is 0 to 2
  4542                           ; switch strategies available:
  4543                           ; Name         Instructions Cycles
  4544                           ; simple_byte           10     6 (average)
  4545                           ;	Chosen strategy is simple_byte
  4546   000FE6  0A00               	xorlw	0	; case 0
  4547   000FE8  B4D8               	btfsc	status,2,c
  4548   000FEA  EF91  F007         	goto	l3686
  4549   000FEE  0A01               	xorlw	1	; case 1
  4550   000FF0  B4D8               	btfsc	status,2,c
  4551   000FF2  EFA3  F007         	goto	l3704
  4552   000FF6  0A03               	xorlw	3	; case 2
  4553   000FF8  B4D8               	btfsc	status,2,c
  4554   000FFA  EFAF  F007         	goto	l293
  4555   000FFE  EFA0  F007         	goto	l3700
  4556   001002                     l289:
  4557   001002  0012               	return		;funcret
  4558   001004                     __end_of_motor_Read:
  4559                           	callstack 0
  4560                           
  4561 ;; *************** function _processBit *****************
  4562 ;; Defined at:
  4563 ;;		line 147 in file "TAD_RFID.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  val             1    3[COMRAM] PTR unsigned char 
  4566 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  4567 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  4568 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  4569 ;;  state           1    5[COMRAM] PTR unsigned char 
  4570 ;;		 -> state_write(1), state_read(1), 
  4571 ;;  next_state      1    6[COMRAM] unsigned char 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1
  4583 ;;      Params:         4       0       0
  4584 ;;      Locals:         0       0       0
  4585 ;;      Temps:          1       0       0
  4586 ;;      Totals:         5       0       0
  4587 ;;Total ram usage:        5 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; Hardware stack levels required when called: 4
  4590 ;; This function calls:
  4591 ;;		_delay_us
  4592 ;; This function is called by:
  4593 ;;		_motor_Write
  4594 ;;		_motor_Read
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text6
  4599   00174A                     __ptext6:
  4600                           	callstack 0
  4601   00174A                     _processBit:
  4602                           	callstack 24
  4603   00174A                     
  4604                           ;TAD_RFID.c: 148:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  4605   00174A  5053               	movf	processBit@val^0,w,c
  4606   00174C  6ED9               	movwf	fsr2l,c
  4607   00174E  6ADA               	clrf	fsr2h,c
  4608   001750  BEDF               	btfsc	indf2,7,c
  4609   001752  EFAD  F00B         	goto	u2671
  4610   001756  EFB1  F00B         	goto	u2670
  4611   00175A                     u2671:
  4612   00175A  6A57               	clrf	??_processBit^0,c
  4613   00175C  2A57               	incf	??_processBit^0,f,c
  4614   00175E  EFB2  F00B         	goto	u2688
  4615   001762                     u2670:
  4616   001762  6A57               	clrf	??_processBit^0,c
  4617   001764                     u2688:
  4618   001764  4657               	rlncf	??_processBit^0,f,c
  4619   001766  508B               	movf	139,w,c	;volatile
  4620   001768  1857               	xorwf	??_processBit^0,w,c
  4621   00176A  0BFD               	andlw	-3
  4622   00176C  1857               	xorwf	??_processBit^0,w,c
  4623   00176E  6E8B               	movwf	139,c	;volatile
  4624   001770                     
  4625                           ;TAD_RFID.c: 149:     LATCbits.LATC2 = 1;
  4626   001770  848B               	bsf	139,2,c	;volatile
  4627                           
  4628                           ;TAD_RFID.c: 150:     *val <<= 1;
  4629   001772  5053               	movf	processBit@val^0,w,c
  4630   001774  6ED9               	movwf	fsr2l,c
  4631   001776  6ADA               	clrf	fsr2h,c
  4632   001778  90D8               	bcf	status,0,c
  4633   00177A  36DF               	rlcf	indf2,f,c
  4634   00177C                     
  4635                           ;TAD_RFID.c: 151:     delay_us(5);
  4636   00177C  0E05               	movlw	5
  4637   00177E  EC1A  F00E         	call	_delay_us
  4638   001782                     
  4639                           ;TAD_RFID.c: 152:     LATCbits.LATC2 = 0;
  4640   001782  948B               	bcf	139,2,c	;volatile
  4641   001784                     
  4642                           ;TAD_RFID.c: 153:     delay_us(5);
  4643   001784  0E05               	movlw	5
  4644   001786  EC1A  F00E         	call	_delay_us
  4645                           
  4646                           ;TAD_RFID.c: 154:     if (++(*bit_count) == 8) {
  4647   00178A  5054               	movf	processBit@bit_count^0,w,c
  4648   00178C  6ED9               	movwf	fsr2l,c
  4649   00178E  6ADA               	clrf	fsr2h,c
  4650   001790  2ADF               	incf	indf2,f,c
  4651   001792  0E08               	movlw	8
  4652   001794  18DE               	xorwf	postinc2,w,c
  4653   001796  A4D8               	btfss	status,2,c
  4654   001798  EFD0  F00B         	goto	u2691
  4655   00179C  EFD2  F00B         	goto	u2690
  4656   0017A0                     u2691:
  4657   0017A0  EFDB  F00B         	goto	l262
  4658   0017A4                     u2690:
  4659   0017A4                     
  4660                           ;TAD_RFID.c: 155:         *bit_count = 0;
  4661   0017A4  5054               	movf	processBit@bit_count^0,w,c
  4662   0017A6  6ED9               	movwf	fsr2l,c
  4663   0017A8  6ADA               	clrf	fsr2h,c
  4664   0017AA  6ADF               	clrf	indf2,c
  4665                           
  4666                           ;TAD_RFID.c: 156:         *state = next_state;
  4667   0017AC  5055               	movf	processBit@state^0,w,c
  4668   0017AE  6ED9               	movwf	fsr2l,c
  4669   0017B0  6ADA               	clrf	fsr2h,c
  4670   0017B2  C056  FFDF         	movff	processBit@next_state,indf2
  4671   0017B6                     l262:
  4672   0017B6  0012               	return		;funcret
  4673   0017B8                     __end_of_processBit:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function _motorTerminal *****************
  4677 ;; Defined at:
  4678 ;;		line 127 in file "TAD_TERMINAL.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  currentUser     5   22[COMRAM] unsigned char [5]
  4683 ;;  currentUser     5   17[COMRAM] unsigned char [5]
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1
  4693 ;;      Params:         0       0       0
  4694 ;;      Locals:        10       0       0
  4695 ;;      Temps:          0       0       0
  4696 ;;      Totals:        10       0       0
  4697 ;;Total ram usage:       10 bytes
  4698 ;; Hardware stack levels used: 1
  4699 ;; Hardware stack levels required when called: 7
  4700 ;; This function calls:
  4701 ;;		_Terminal_RXAvailable
  4702 ;;		_Terminal_ReceiveChar
  4703 ;;		_Terminal_SendChar
  4704 ;;		_getActualUID
  4705 ;;		_motor_SendString
  4706 ;;		_motor_StartSendString
  4707 ;;		_printfUID
  4708 ;;		_saveHourToData
  4709 ;;		_showAllConfigurations
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text7
  4716   000AF2                     __ptext7:
  4717                           	callstack 0
  4718   000AF2                     _motorTerminal:
  4719                           	callstack 23
  4720   000AF2                     
  4721                           ;TAD_TERMINAL.c: 128:  static char state = 0;;TAD_TERMINAL.c: 129:  static char sending_
      +                          string = 0;;TAD_TERMINAL.c: 132:  if (sending_string) {
  4722   000AF2  5021               	movf	motorTerminal@sending_string^0,w,c
  4723   000AF4  B4D8               	btfsc	status,2,c
  4724   000AF6  EF7F  F005         	goto	u3181
  4725   000AFA  EF81  F005         	goto	u3180
  4726   000AFE                     u3181:
  4727   000AFE  EF39  F007         	goto	l4168
  4728   000B02                     u3180:
  4729   000B02                     
  4730                           ;TAD_TERMINAL.c: 133:   if (motor_SendString() == 1) {
  4731   000B02  ECDC  F00B         	call	_motor_SendString	;wreg free
  4732   000B06  06E8               	decf	wreg,f,c
  4733   000B08  A4D8               	btfss	status,2,c
  4734   000B0A  EF89  F005         	goto	u3191
  4735   000B0E  EF8B  F005         	goto	u3190
  4736   000B12                     u3191:
  4737   000B12  EF78  F007         	goto	l708
  4738   000B16                     u3190:
  4739   000B16                     
  4740                           ;TAD_TERMINAL.c: 134:    sending_string = 0;
  4741   000B16  6A21               	clrf	motorTerminal@sending_string^0,c
  4742                           
  4743                           ;TAD_TERMINAL.c: 135:   } else {
  4744   000B18  EF39  F007         	goto	l4168
  4745   000B1C                     l3994:
  4746                           
  4747                           ;TAD_TERMINAL.c: 142:    if (Terminal_ReceiveChar() == 0x1B) {
  4748   000B1C  ECD3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4749   000B20  0A1B               	xorlw	27
  4750   000B22  A4D8               	btfss	status,2,c
  4751   000B24  EF96  F005         	goto	u3201
  4752   000B28  EF98  F005         	goto	u3200
  4753   000B2C                     u3201:
  4754   000B2C  EFA2  F005         	goto	l4002
  4755   000B30                     u3200:
  4756   000B30                     
  4757                           ;TAD_TERMINAL.c: 143:     motor_StartSendString("---------------\r\n");
  4758   000B30  0EB5               	movlw	low STR_7
  4759   000B32  6E55               	movwf	motor_StartSendString@str^0,c
  4760   000B34  0E1F               	movlw	high STR_7
  4761   000B36  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4762   000B38  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4763   000B3C                     
  4764                           ;TAD_TERMINAL.c: 144:     sending_string = 1;
  4765   000B3C  0E01               	movlw	1
  4766   000B3E  6E21               	movwf	motorTerminal@sending_string^0,c
  4767   000B40                     
  4768                           ;TAD_TERMINAL.c: 145:     state = 10;
  4769   000B40  0E0A               	movlw	10
  4770   000B42  6E22               	movwf	motorTerminal@state^0,c
  4771   000B44                     l4002:
  4772                           
  4773                           ;TAD_TERMINAL.c: 148:    if (hashtag_pressed == 1){
  4774   000B44  0423               	decf	_hashtag_pressed^0,w,c
  4775   000B46  A4D8               	btfss	status,2,c
  4776   000B48  EFA8  F005         	goto	u3211
  4777   000B4C  EFAA  F005         	goto	u3210
  4778   000B50                     u3211:
  4779   000B50  EF78  F007         	goto	l708
  4780   000B54                     u3210:
  4781   000B54                     
  4782                           ;TAD_TERMINAL.c: 149:     motor_StartSendString("---------------\r\n");
  4783   000B54  0EB5               	movlw	low STR_7
  4784   000B56  6E55               	movwf	motor_StartSendString@str^0,c
  4785   000B58  0E1F               	movlw	high STR_7
  4786   000B5A  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4787   000B5C  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4788   000B60                     
  4789                           ;TAD_TERMINAL.c: 150:     sending_string = 1;
  4790   000B60  0E01               	movlw	1
  4791   000B62  6E21               	movwf	motorTerminal@sending_string^0,c
  4792   000B64                     
  4793                           ;TAD_TERMINAL.c: 151:     state = 10;
  4794   000B64  0E0A               	movlw	10
  4795   000B66  6E22               	movwf	motorTerminal@state^0,c
  4796   000B68                     
  4797                           ;TAD_TERMINAL.c: 152:     hashtag_pressed = 0;
  4798   000B68  6A23               	clrf	_hashtag_pressed^0,c
  4799   000B6A  EF78  F007         	goto	l708
  4800   000B6E                     l4012:
  4801                           
  4802                           ;TAD_TERMINAL.c: 157:    if (!sending_string) {
  4803   000B6E  5021               	movf	motorTerminal@sending_string^0,w,c
  4804   000B70  A4D8               	btfss	status,2,c
  4805   000B72  EFBD  F005         	goto	u3221
  4806   000B76  EFBF  F005         	goto	u3220
  4807   000B7A                     u3221:
  4808   000B7A  EF78  F007         	goto	l708
  4809   000B7E                     u3220:
  4810   000B7E                     
  4811                           ;TAD_TERMINAL.c: 158:     motor_StartSendString("MenÃº principal\r\n");
  4812   000B7E  0EC7               	movlw	low STR_9
  4813   000B80  6E55               	movwf	motor_StartSendString@str^0,c
  4814   000B82  0E1F               	movlw	high STR_9
  4815   000B84  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4816   000B86  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4817   000B8A                     
  4818                           ;TAD_TERMINAL.c: 159:     sending_string = 1;
  4819   000B8A  0E01               	movlw	1
  4820   000B8C  6E21               	movwf	motorTerminal@sending_string^0,c
  4821   000B8E                     
  4822                           ;TAD_TERMINAL.c: 160:     state = 11;
  4823   000B8E  0E0B               	movlw	11
  4824   000B90  6E22               	movwf	motorTerminal@state^0,c
  4825   000B92  EF78  F007         	goto	l708
  4826   000B96                     l4020:
  4827                           
  4828                           ;TAD_TERMINAL.c: 165:    if (!sending_string) {
  4829   000B96  5021               	movf	motorTerminal@sending_string^0,w,c
  4830   000B98  A4D8               	btfss	status,2,c
  4831   000B9A  EFD1  F005         	goto	u3231
  4832   000B9E  EFD3  F005         	goto	u3230
  4833   000BA2                     u3231:
  4834   000BA2  EF78  F007         	goto	l708
  4835   000BA6                     u3230:
  4836   000BA6                     
  4837                           ;TAD_TERMINAL.c: 166:     motor_StartSendString("---------------\r\n");
  4838   000BA6  0EB5               	movlw	low STR_7
  4839   000BA8  6E55               	movwf	motor_StartSendString@str^0,c
  4840   000BAA  0E1F               	movlw	high STR_7
  4841   000BAC  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4842   000BAE  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4843   000BB2                     
  4844                           ;TAD_TERMINAL.c: 167:     sending_string = 1;
  4845   000BB2  0E01               	movlw	1
  4846   000BB4  6E21               	movwf	motorTerminal@sending_string^0,c
  4847   000BB6                     
  4848                           ;TAD_TERMINAL.c: 168:     state = 12;
  4849   000BB6  0E0C               	movlw	12
  4850   000BB8  6E22               	movwf	motorTerminal@state^0,c
  4851   000BBA  EF78  F007         	goto	l708
  4852   000BBE                     l4028:
  4853                           
  4854                           ;TAD_TERMINAL.c: 173:    if (!sending_string) {
  4855   000BBE  5021               	movf	motorTerminal@sending_string^0,w,c
  4856   000BC0  A4D8               	btfss	status,2,c
  4857   000BC2  EFE5  F005         	goto	u3241
  4858   000BC6  EFE7  F005         	goto	u3240
  4859   000BCA                     u3241:
  4860   000BCA  EF78  F007         	goto	l708
  4861   000BCE                     u3240:
  4862   000BCE                     
  4863                           ;TAD_TERMINAL.c: 174:     motor_StartSendString("Tria una opciÃ³:\r\n");
  4864   000BCE  0EA2               	movlw	low STR_11
  4865   000BD0  6E55               	movwf	motor_StartSendString@str^0,c
  4866   000BD2  0E1F               	movlw	high STR_11
  4867   000BD4  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4868   000BD6  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4869   000BDA                     
  4870                           ;TAD_TERMINAL.c: 175:     sending_string = 1;
  4871   000BDA  0E01               	movlw	1
  4872   000BDC  6E21               	movwf	motorTerminal@sending_string^0,c
  4873   000BDE                     
  4874                           ;TAD_TERMINAL.c: 176:     state = 13;
  4875   000BDE  0E0D               	movlw	13
  4876   000BE0  6E22               	movwf	motorTerminal@state^0,c
  4877   000BE2  EF78  F007         	goto	l708
  4878   000BE6                     l4036:
  4879                           
  4880                           ;TAD_TERMINAL.c: 181:    if (!sending_string) {
  4881   000BE6  5021               	movf	motorTerminal@sending_string^0,w,c
  4882   000BE8  A4D8               	btfss	status,2,c
  4883   000BEA  EFF9  F005         	goto	u3251
  4884   000BEE  EFFB  F005         	goto	u3250
  4885   000BF2                     u3251:
  4886   000BF2  EF78  F007         	goto	l708
  4887   000BF6                     u3250:
  4888   000BF6                     
  4889                           ;TAD_TERMINAL.c: 182:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n");
  4890   000BF6  0E71               	movlw	low STR_12
  4891   000BF8  6E55               	movwf	motor_StartSendString@str^0,c
  4892   000BFA  0E1F               	movlw	high STR_12
  4893   000BFC  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4894   000BFE  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4895   000C02                     
  4896                           ;TAD_TERMINAL.c: 183:     sending_string = 1;
  4897   000C02  0E01               	movlw	1
  4898   000C04  6E21               	movwf	motorTerminal@sending_string^0,c
  4899   000C06                     
  4900                           ;TAD_TERMINAL.c: 184:     state = 14;
  4901   000C06  0E0E               	movlw	14
  4902   000C08  6E22               	movwf	motorTerminal@state^0,c
  4903   000C0A  EF78  F007         	goto	l708
  4904   000C0E                     l4044:
  4905                           
  4906                           ;TAD_TERMINAL.c: 189:    if (!sending_string) {
  4907   000C0E  5021               	movf	motorTerminal@sending_string^0,w,c
  4908   000C10  A4D8               	btfss	status,2,c
  4909   000C12  EF0D  F006         	goto	u3261
  4910   000C16  EF0F  F006         	goto	u3260
  4911   000C1A                     u3261:
  4912   000C1A  EF78  F007         	goto	l708
  4913   000C1E                     u3260:
  4914   000C1E                     
  4915                           ;TAD_TERMINAL.c: 190:     motor_StartSendString("\t2. Mostrar configuracions\r\n");
  4916   000C1E  0E54               	movlw	low STR_13
  4917   000C20  6E55               	movwf	motor_StartSendString@str^0,c
  4918   000C22  0E1F               	movlw	high STR_13
  4919   000C24  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4920   000C26  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4921   000C2A                     
  4922                           ;TAD_TERMINAL.c: 191:     sending_string = 1;
  4923   000C2A  0E01               	movlw	1
  4924   000C2C  6E21               	movwf	motorTerminal@sending_string^0,c
  4925   000C2E                     
  4926                           ;TAD_TERMINAL.c: 192:     state = 15;
  4927   000C2E  0E0F               	movlw	15
  4928   000C30  6E22               	movwf	motorTerminal@state^0,c
  4929   000C32  EF78  F007         	goto	l708
  4930   000C36                     l4052:
  4931                           
  4932                           ;TAD_TERMINAL.c: 197:    if (!sending_string) {
  4933   000C36  5021               	movf	motorTerminal@sending_string^0,w,c
  4934   000C38  A4D8               	btfss	status,2,c
  4935   000C3A  EF21  F006         	goto	u3271
  4936   000C3E  EF23  F006         	goto	u3270
  4937   000C42                     u3271:
  4938   000C42  EF78  F007         	goto	l708
  4939   000C46                     u3270:
  4940   000C46                     
  4941                           ;TAD_TERMINAL.c: 198:     motor_StartSendString("\t3. Modificar hora del sistema\r\n");
  4942   000C46  0EF1               	movlw	low STR_14
  4943   000C48  6E55               	movwf	motor_StartSendString@str^0,c
  4944   000C4A  0E1E               	movlw	high STR_14
  4945   000C4C  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4946   000C4E  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4947   000C52                     
  4948                           ;TAD_TERMINAL.c: 199:     sending_string = 1;
  4949   000C52  0E01               	movlw	1
  4950   000C54  6E21               	movwf	motorTerminal@sending_string^0,c
  4951   000C56                     
  4952                           ;TAD_TERMINAL.c: 200:     state = 16;
  4953   000C56  0E10               	movlw	16
  4954   000C58  6E22               	movwf	motorTerminal@state^0,c
  4955   000C5A  EF78  F007         	goto	l708
  4956   000C5E                     l4060:
  4957                           
  4958                           ;TAD_TERMINAL.c: 205:    if (!sending_string) {
  4959   000C5E  5021               	movf	motorTerminal@sending_string^0,w,c
  4960   000C60  A4D8               	btfss	status,2,c
  4961   000C62  EF35  F006         	goto	u3281
  4962   000C66  EF37  F006         	goto	u3280
  4963   000C6A                     u3281:
  4964   000C6A  EF78  F007         	goto	l708
  4965   000C6E                     u3280:
  4966   000C6E                     
  4967                           ;TAD_TERMINAL.c: 206:     motor_StartSendString("OpciÃ³: ");
  4968   000C6E  0EE3               	movlw	low STR_15
  4969   000C70  6E55               	movwf	motor_StartSendString@str^0,c
  4970   000C72  0E1F               	movlw	high STR_15
  4971   000C74  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  4972   000C76  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  4973   000C7A                     
  4974                           ;TAD_TERMINAL.c: 207:     sending_string = 1;
  4975   000C7A  0E01               	movlw	1
  4976   000C7C  6E21               	movwf	motorTerminal@sending_string^0,c
  4977   000C7E                     
  4978                           ;TAD_TERMINAL.c: 208:     state = 1;
  4979   000C7E  0E01               	movlw	1
  4980   000C80  6E22               	movwf	motorTerminal@state^0,c
  4981   000C82  EF78  F007         	goto	l708
  4982   000C86                     l4068:
  4983                           
  4984                           ;TAD_TERMINAL.c: 213:    if(Terminal_RXAvailable() == 1){
  4985   000C86  EC8E  F00E         	call	_Terminal_RXAvailable	;wreg free
  4986   000C8A  06E8               	decf	wreg,f,c
  4987   000C8C  A4D8               	btfss	status,2,c
  4988   000C8E  EF4B  F006         	goto	u3291
  4989   000C92  EF4D  F006         	goto	u3290
  4990   000C96                     u3291:
  4991   000C96  EF78  F007         	goto	l708
  4992   000C9A                     u3290:
  4993   000C9A                     
  4994                           ;TAD_TERMINAL.c: 214:     if (Terminal_ReceiveChar() == '1') {
  4995   000C9A  ECD3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4996   000C9E  0A31               	xorlw	49
  4997   000CA0  A4D8               	btfss	status,2,c
  4998   000CA2  EF55  F006         	goto	u3301
  4999   000CA6  EF57  F006         	goto	u3300
  5000   000CAA                     u3301:
  5001   000CAA  EF63  F006         	goto	l4078
  5002   000CAE                     u3300:
  5003   000CAE                     
  5004                           ;TAD_TERMINAL.c: 215:      motor_StartSendString("\r\n");
  5005   000CAE  0EC4               	movlw	low (STR_7+15)
  5006   000CB0  6E55               	movwf	motor_StartSendString@str^0,c
  5007   000CB2  0E1F               	movlw	high (STR_7+15)
  5008   000CB4  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5009   000CB6  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5010   000CBA                     
  5011                           ;TAD_TERMINAL.c: 216:      sending_string = 1;
  5012   000CBA  0E01               	movlw	1
  5013   000CBC  6E21               	movwf	motorTerminal@sending_string^0,c
  5014   000CBE                     
  5015                           ;TAD_TERMINAL.c: 217:      state = 20;
  5016   000CBE  0E14               	movlw	20
  5017   000CC0  6E22               	movwf	motorTerminal@state^0,c
  5018                           
  5019                           ;TAD_TERMINAL.c: 218:     }
  5020   000CC2  EF78  F007         	goto	l708
  5021   000CC6                     l4078:
  5022   000CC6  ECD3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5023   000CCA  0A32               	xorlw	50
  5024   000CCC  A4D8               	btfss	status,2,c
  5025   000CCE  EF6B  F006         	goto	u3311
  5026   000CD2  EF6D  F006         	goto	u3310
  5027   000CD6                     u3311:
  5028   000CD6  EF79  F006         	goto	l4086
  5029   000CDA                     u3310:
  5030   000CDA                     
  5031                           ;TAD_TERMINAL.c: 220:      motor_StartSendString("\r\n");
  5032   000CDA  0EC4               	movlw	low (STR_7+15)
  5033   000CDC  6E55               	movwf	motor_StartSendString@str^0,c
  5034   000CDE  0E1F               	movlw	high (STR_7+15)
  5035   000CE0  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5036   000CE2  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5037   000CE6                     
  5038                           ;TAD_TERMINAL.c: 221:      sending_string = 1;
  5039   000CE6  0E01               	movlw	1
  5040   000CE8  6E21               	movwf	motorTerminal@sending_string^0,c
  5041   000CEA                     
  5042                           ;TAD_TERMINAL.c: 222:      state = 30;
  5043   000CEA  0E1E               	movlw	30
  5044   000CEC  6E22               	movwf	motorTerminal@state^0,c
  5045                           
  5046                           ;TAD_TERMINAL.c: 223:     }
  5047   000CEE  EF78  F007         	goto	l708
  5048   000CF2                     l4086:
  5049   000CF2  ECD3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5050   000CF6  0A33               	xorlw	51
  5051   000CF8  A4D8               	btfss	status,2,c
  5052   000CFA  EF81  F006         	goto	u3321
  5053   000CFE  EF83  F006         	goto	u3320
  5054   000D02                     u3321:
  5055   000D02  EF8F  F006         	goto	l4094
  5056   000D06                     u3320:
  5057   000D06                     
  5058                           ;TAD_TERMINAL.c: 225:      motor_StartSendString("\r\n");
  5059   000D06  0EC4               	movlw	low (STR_7+15)
  5060   000D08  6E55               	movwf	motor_StartSendString@str^0,c
  5061   000D0A  0E1F               	movlw	high (STR_7+15)
  5062   000D0C  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5063   000D0E  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5064   000D12                     
  5065                           ;TAD_TERMINAL.c: 226:      sending_string = 1;
  5066   000D12  0E01               	movlw	1
  5067   000D14  6E21               	movwf	motorTerminal@sending_string^0,c
  5068   000D16                     
  5069                           ;TAD_TERMINAL.c: 227:      state = 40;
  5070   000D16  0E28               	movlw	40
  5071   000D18  6E22               	movwf	motorTerminal@state^0,c
  5072                           
  5073                           ;TAD_TERMINAL.c: 228:     }
  5074   000D1A  EF78  F007         	goto	l708
  5075   000D1E                     l4094:
  5076                           
  5077                           ;TAD_TERMINAL.c: 230:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5078   000D1E  0ED0               	movlw	low STR_19
  5079   000D20  6E55               	movwf	motor_StartSendString@str^0,c
  5080   000D22  0E1E               	movlw	high STR_19
  5081   000D24  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5082   000D26  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5083   000D2A                     l4096:
  5084                           
  5085                           ;TAD_TERMINAL.c: 231:      sending_string = 1;
  5086   000D2A  0E01               	movlw	1
  5087   000D2C  6E21               	movwf	motorTerminal@sending_string^0,c
  5088   000D2E                     l4098:
  5089                           
  5090                           ;TAD_TERMINAL.c: 232:      state = 0;
  5091   000D2E  6A22               	clrf	motorTerminal@state^0,c
  5092   000D30  EF78  F007         	goto	l708
  5093   000D34                     l4100:
  5094                           
  5095                           ;TAD_TERMINAL.c: 238:    if (!sending_string) {
  5096   000D34  5021               	movf	motorTerminal@sending_string^0,w,c
  5097   000D36  A4D8               	btfss	status,2,c
  5098   000D38  EFA0  F006         	goto	u3331
  5099   000D3C  EFA2  F006         	goto	u3330
  5100   000D40                     u3331:
  5101   000D40  EF78  F007         	goto	l708
  5102   000D44                     u3330:
  5103   000D44                     
  5104                           ;TAD_TERMINAL.c: 239:     unsigned char currentUser[5];;TAD_TERMINAL.c: 240:     getActu
      +                          alUID(currentUser);
  5105   000D44  0E61               	movlw	low motorTerminal@currentUser
  5106   000D46  6E51               	movwf	getActualUID@UID^0,c
  5107   000D48  EC46  F00A         	call	_getActualUID	;wreg free
  5108   000D4C                     
  5109                           ;TAD_TERMINAL.c: 242:     if (currentUser[0] != 0) {
  5110   000D4C  5061               	movf	motorTerminal@currentUser^0,w,c
  5111   000D4E  B4D8               	btfsc	status,2,c
  5112   000D50  EFAC  F006         	goto	u3341
  5113   000D54  EFAE  F006         	goto	u3340
  5114   000D58                     u3341:
  5115   000D58  EFBA  F006         	goto	l4112
  5116   000D5C                     u3340:
  5117   000D5C                     
  5118                           ;TAD_TERMINAL.c: 243:      motor_StartSendString("UID: ");
  5119   000D5C  0EF2               	movlw	low STR_1
  5120   000D5E  6E55               	movwf	motor_StartSendString@str^0,c
  5121   000D60  0E1F               	movlw	high STR_1
  5122   000D62  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5123   000D64  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5124   000D68                     
  5125                           ;TAD_TERMINAL.c: 244:      sending_string = 1;
  5126   000D68  0E01               	movlw	1
  5127   000D6A  6E21               	movwf	motorTerminal@sending_string^0,c
  5128   000D6C                     
  5129                           ;TAD_TERMINAL.c: 245:      state = 21;
  5130   000D6C  0E15               	movlw	21
  5131   000D6E  6E22               	movwf	motorTerminal@state^0,c
  5132                           
  5133                           ;TAD_TERMINAL.c: 246:     } else {
  5134   000D70  EF78  F007         	goto	l708
  5135   000D74                     l4112:
  5136                           
  5137                           ;TAD_TERMINAL.c: 247:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5138   000D74  0EAF               	movlw	low STR_21
  5139   000D76  6E55               	movwf	motor_StartSendString@str^0,c
  5140   000D78  0E1E               	movlw	high STR_21
  5141   000D7A  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5142   000D7C  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5143   000D80                     
  5144                           ;TAD_TERMINAL.c: 248:      sending_string = 1;
  5145   000D80  0E01               	movlw	1
  5146   000D82  6E21               	movwf	motorTerminal@sending_string^0,c
  5147   000D84                     l4116:
  5148                           
  5149                           ;TAD_TERMINAL.c: 249:      state = 25;
  5150   000D84  0E19               	movlw	25
  5151   000D86  6E22               	movwf	motorTerminal@state^0,c
  5152   000D88  EF78  F007         	goto	l708
  5153   000D8C                     l4118:
  5154                           
  5155                           ;TAD_TERMINAL.c: 255:    if (!sending_string) {
  5156   000D8C  5021               	movf	motorTerminal@sending_string^0,w,c
  5157   000D8E  A4D8               	btfss	status,2,c
  5158   000D90  EFCC  F006         	goto	u3351
  5159   000D94  EFCE  F006         	goto	u3350
  5160   000D98                     u3351:
  5161   000D98  EF78  F007         	goto	l708
  5162   000D9C                     u3350:
  5163   000D9C                     
  5164                           ;TAD_TERMINAL.c: 256:     unsigned char currentUser[5];;TAD_TERMINAL.c: 257:     getActu
      +                          alUID(currentUser);
  5165   000D9C  0E66               	movlw	low motorTerminal@currentUser_905
  5166   000D9E  6E51               	movwf	getActualUID@UID^0,c
  5167   000DA0  EC46  F00A         	call	_getActualUID	;wreg free
  5168   000DA4                     
  5169                           ;TAD_TERMINAL.c: 258:     printfUID(currentUser);
  5170   000DA4  0E66               	movlw	low motorTerminal@currentUser_905
  5171   000DA6  6E57               	movwf	printfUID@currentUser^0,c
  5172   000DA8  EC7E  F008         	call	_printfUID	;wreg free
  5173   000DAC  EFC2  F006         	goto	l4116
  5174   000DB0                     l4126:
  5175                           
  5176                           ;TAD_TERMINAL.c: 264:    if (!sending_string) {
  5177   000DB0  5021               	movf	motorTerminal@sending_string^0,w,c
  5178   000DB2  A4D8               	btfss	status,2,c
  5179   000DB4  EFDE  F006         	goto	u3361
  5180   000DB8  EFE0  F006         	goto	u3360
  5181   000DBC                     u3361:
  5182   000DBC  EF78  F007         	goto	l708
  5183   000DC0                     u3360:
  5184   000DC0                     
  5185                           ;TAD_TERMINAL.c: 265:     motor_StartSendString("\r\n");
  5186   000DC0  0EC4               	movlw	low (STR_7+15)
  5187   000DC2  6E55               	movwf	motor_StartSendString@str^0,c
  5188   000DC4  0E1F               	movlw	high (STR_7+15)
  5189   000DC6  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5190   000DC8  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5191   000DCC  EF95  F006         	goto	l4096
  5192   000DD0                     l4134:
  5193                           
  5194                           ;TAD_TERMINAL.c: 272:    if (!sending_string) {
  5195   000DD0  5021               	movf	motorTerminal@sending_string^0,w,c
  5196   000DD2  A4D8               	btfss	status,2,c
  5197   000DD4  EFEE  F006         	goto	u3371
  5198   000DD8  EFF0  F006         	goto	u3370
  5199   000DDC                     u3371:
  5200   000DDC  EF78  F007         	goto	l708
  5201   000DE0                     u3370:
  5202   000DE0                     
  5203                           ;TAD_TERMINAL.c: 273:     showAllConfigurations();
  5204   000DE0  ECF6  F009         	call	_showAllConfigurations	;wreg free
  5205   000DE4  EF97  F006         	goto	l4098
  5206   000DE8                     l4140:
  5207                           
  5208                           ;TAD_TERMINAL.c: 279:    if (!sending_string) {
  5209   000DE8  5021               	movf	motorTerminal@sending_string^0,w,c
  5210   000DEA  A4D8               	btfss	status,2,c
  5211   000DEC  EFFA  F006         	goto	u3381
  5212   000DF0  EFFC  F006         	goto	u3380
  5213   000DF4                     u3381:
  5214   000DF4  EF78  F007         	goto	l708
  5215   000DF8                     u3380:
  5216   000DF8                     
  5217                           ;TAD_TERMINAL.c: 280:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5218   000DF8  0E33               	movlw	low STR_23
  5219   000DFA  6E55               	movwf	motor_StartSendString@str^0,c
  5220   000DFC  0E1F               	movlw	high STR_23
  5221   000DFE  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5222   000E00  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5223   000E04                     
  5224                           ;TAD_TERMINAL.c: 281:     sending_string = 1;
  5225   000E04  0E01               	movlw	1
  5226   000E06  6E21               	movwf	motorTerminal@sending_string^0,c
  5227   000E08                     
  5228                           ;TAD_TERMINAL.c: 282:     state = 2;
  5229   000E08  0E02               	movlw	2
  5230   000E0A  6E22               	movwf	motorTerminal@state^0,c
  5231   000E0C  EF78  F007         	goto	l708
  5232   000E10                     l4148:
  5233                           
  5234                           ;TAD_TERMINAL.c: 287:    if(Terminal_RXAvailable() == 1){
  5235   000E10  EC8E  F00E         	call	_Terminal_RXAvailable	;wreg free
  5236   000E14  06E8               	decf	wreg,f,c
  5237   000E16  A4D8               	btfss	status,2,c
  5238   000E18  EF10  F007         	goto	u3391
  5239   000E1C  EF12  F007         	goto	u3390
  5240   000E20                     u3391:
  5241   000E20  EF78  F007         	goto	l708
  5242   000E24                     u3390:
  5243   000E24                     
  5244                           ;TAD_TERMINAL.c: 288:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 289:   
      +                            static char index = 0;;TAD_TERMINAL.c: 290:     hour[index] = Terminal_ReceiveChar();
  5245   000E24  5020               	movf	motorTerminal@index^0,w,c
  5246   000E26  0F76               	addlw	low motorTerminal@hour
  5247   000E28  6ED9               	movwf	fsr2l,c
  5248   000E2A  6ADA               	clrf	fsr2h,c
  5249   000E2C  ECD3  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5250   000E30  6EDF               	movwf	indf2,c
  5251                           
  5252                           ;TAD_TERMINAL.c: 291:     Terminal_SendChar(hour[index]);
  5253   000E32  5020               	movf	motorTerminal@index^0,w,c
  5254   000E34  0F76               	addlw	low motorTerminal@hour
  5255   000E36  6ED9               	movwf	fsr2l,c
  5256   000E38  6ADA               	clrf	fsr2h,c
  5257   000E3A  50DF               	movf	indf2,w,c
  5258   000E3C  EC4F  F00E         	call	_Terminal_SendChar
  5259   000E40                     
  5260                           ;TAD_TERMINAL.c: 292:     index++;
  5261   000E40  2A20               	incf	motorTerminal@index^0,f,c
  5262   000E42                     
  5263                           ;TAD_TERMINAL.c: 293:     if(index == 4){
  5264   000E42  0E04               	movlw	4
  5265   000E44  1820               	xorwf	motorTerminal@index^0,w,c
  5266   000E46  A4D8               	btfss	status,2,c
  5267   000E48  EF28  F007         	goto	u3401
  5268   000E4C  EF2A  F007         	goto	u3400
  5269   000E50                     u3401:
  5270   000E50  EF78  F007         	goto	l708
  5271   000E54                     u3400:
  5272   000E54                     
  5273                           ;TAD_TERMINAL.c: 294:      saveHourToData(hour);
  5274   000E54  0E76               	movlw	low motorTerminal@hour
  5275   000E56  6E51               	movwf	saveHourToData@hour^0,c
  5276   000E58  EC6D  F00D         	call	_saveHourToData	;wreg free
  5277   000E5C                     
  5278                           ;TAD_TERMINAL.c: 295:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5279   000E5C  0E12               	movlw	low STR_24
  5280   000E5E  6E55               	movwf	motor_StartSendString@str^0,c
  5281   000E60  0E1F               	movlw	high STR_24
  5282   000E62  6E56               	movwf	(motor_StartSendString@str+1)^0,c
  5283   000E64  EC3E  F00E         	call	_motor_StartSendString	;wreg free
  5284   000E68                     
  5285                           ;TAD_TERMINAL.c: 296:      sending_string = 1;
  5286   000E68  0E01               	movlw	1
  5287   000E6A  6E21               	movwf	motorTerminal@sending_string^0,c
  5288   000E6C                     
  5289                           ;TAD_TERMINAL.c: 297:      index = 0;
  5290   000E6C  6A20               	clrf	motorTerminal@index^0,c
  5291   000E6E  EF97  F006         	goto	l4098
  5292   000E72                     l4168:
  5293   000E72  5022               	movf	motorTerminal@state^0,w,c
  5294                           
  5295                           ; Switch size 1, requested type "simple"
  5296                           ; Number of cases is 15, Range of values is 0 to 40
  5297                           ; switch strategies available:
  5298                           ; Name         Instructions Cycles
  5299                           ; simple_byte           46    24 (average)
  5300                           ;	Chosen strategy is simple_byte
  5301   000E74  0A00               	xorlw	0	; case 0
  5302   000E76  B4D8               	btfsc	status,2,c
  5303   000E78  EF8E  F005         	goto	l3994
  5304   000E7C  0A01               	xorlw	1	; case 1
  5305   000E7E  B4D8               	btfsc	status,2,c
  5306   000E80  EF43  F006         	goto	l4068
  5307   000E84  0A03               	xorlw	3	; case 2
  5308   000E86  B4D8               	btfsc	status,2,c
  5309   000E88  EF08  F007         	goto	l4148
  5310   000E8C  0A08               	xorlw	8	; case 10
  5311   000E8E  B4D8               	btfsc	status,2,c
  5312   000E90  EFB7  F005         	goto	l4012
  5313   000E94  0A01               	xorlw	1	; case 11
  5314   000E96  B4D8               	btfsc	status,2,c
  5315   000E98  EFCB  F005         	goto	l4020
  5316   000E9C  0A07               	xorlw	7	; case 12
  5317   000E9E  B4D8               	btfsc	status,2,c
  5318   000EA0  EFDF  F005         	goto	l4028
  5319   000EA4  0A01               	xorlw	1	; case 13
  5320   000EA6  B4D8               	btfsc	status,2,c
  5321   000EA8  EFF3  F005         	goto	l4036
  5322   000EAC  0A03               	xorlw	3	; case 14
  5323   000EAE  B4D8               	btfsc	status,2,c
  5324   000EB0  EF07  F006         	goto	l4044
  5325   000EB4  0A01               	xorlw	1	; case 15
  5326   000EB6  B4D8               	btfsc	status,2,c
  5327   000EB8  EF1B  F006         	goto	l4052
  5328   000EBC  0A1F               	xorlw	31	; case 16
  5329   000EBE  B4D8               	btfsc	status,2,c
  5330   000EC0  EF2F  F006         	goto	l4060
  5331   000EC4  0A04               	xorlw	4	; case 20
  5332   000EC6  B4D8               	btfsc	status,2,c
  5333   000EC8  EF9A  F006         	goto	l4100
  5334   000ECC  0A01               	xorlw	1	; case 21
  5335   000ECE  B4D8               	btfsc	status,2,c
  5336   000ED0  EFC6  F006         	goto	l4118
  5337   000ED4  0A0C               	xorlw	12	; case 25
  5338   000ED6  B4D8               	btfsc	status,2,c
  5339   000ED8  EFD8  F006         	goto	l4126
  5340   000EDC  0A07               	xorlw	7	; case 30
  5341   000EDE  B4D8               	btfsc	status,2,c
  5342   000EE0  EFE8  F006         	goto	l4134
  5343   000EE4  0A36               	xorlw	54	; case 40
  5344   000EE6  B4D8               	btfsc	status,2,c
  5345   000EE8  EFF4  F006         	goto	l4140
  5346   000EEC  EF78  F007         	goto	l708
  5347   000EF0                     l708:
  5348   000EF0  0012               	return		;funcret
  5349   000EF2                     __end_of_motorTerminal:
  5350                           	callstack 0
  5351                           
  5352 ;; *************** function _showAllConfigurations *****************
  5353 ;; Defined at:
  5354 ;;		line 54 in file "TAD_DATOS.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  j               2    7[COMRAM] int 
  5359 ;;  i               2    9[COMRAM] int 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1
  5369 ;;      Params:         0       0       0
  5370 ;;      Locals:         4       0       0
  5371 ;;      Temps:          0       0       0
  5372 ;;      Totals:         4       0       0
  5373 ;;Total ram usage:        4 bytes
  5374 ;; Hardware stack levels used: 1
  5375 ;; Hardware stack levels required when called: 6
  5376 ;; This function calls:
  5377 ;;		_Terminal_SendChar
  5378 ;;		_Terminal_SendString
  5379 ;; This function is called by:
  5380 ;;		_motorTerminal
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text8
  5385   0013EC                     __ptext8:
  5386                           	callstack 0
  5387   0013EC                     _showAllConfigurations:
  5388                           	callstack 23
  5389   0013EC                     
  5390                           ;TAD_DATOS.c: 55:     for (int i = 0; i < 4; i++) {
  5391   0013EC  0E00               	movlw	0
  5392   0013EE  6E5A               	movwf	(showAllConfigurations@i+1)^0,c
  5393   0013F0  0E00               	movlw	0
  5394   0013F2  6E59               	movwf	showAllConfigurations@i^0,c
  5395   0013F4                     l3868:
  5396                           
  5397                           ;TAD_DATOS.c: 56:         Terminal_SendString("User ");
  5398   0013F4  0EEC               	movlw	low STR_25
  5399   0013F6  6E55               	movwf	Terminal_SendString@str^0,c
  5400   0013F8  0E1F               	movlw	high STR_25
  5401   0013FA  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5402   0013FC  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5403   001400                     
  5404                           ;TAD_DATOS.c: 57:         Terminal_SendChar('1' + i);
  5405   001400  5059               	movf	showAllConfigurations@i^0,w,c
  5406   001402  0F31               	addlw	49
  5407   001404  EC4F  F00E         	call	_Terminal_SendChar
  5408   001408                     
  5409                           ;TAD_DATOS.c: 58:         Terminal_SendString(" Config: ");
  5410   001408  0ED9               	movlw	low STR_26
  5411   00140A  6E55               	movwf	Terminal_SendString@str^0,c
  5412   00140C  0E1F               	movlw	high STR_26
  5413   00140E  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5414   001410  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5415   001414                     
  5416                           ;TAD_DATOS.c: 60:         for (int j = 0; j < 6; j++) {
  5417   001414  0E00               	movlw	0
  5418   001416  6E58               	movwf	(showAllConfigurations@j+1)^0,c
  5419   001418  0E00               	movlw	0
  5420   00141A  6E57               	movwf	showAllConfigurations@j^0,c
  5421   00141C                     l3880:
  5422                           
  5423                           ;TAD_DATOS.c: 62:             Terminal_SendChar('0' + configurations[i][j]);
  5424   00141C  5059               	movf	showAllConfigurations@i^0,w,c
  5425   00141E  0D06               	mullw	6
  5426   001420  50F3               	movf	243,w,c
  5427   001422  0FC0               	addlw	low _configurations
  5428   001424  2457               	addwf	showAllConfigurations@j^0,w,c
  5429   001426  6ED9               	movwf	fsr2l,c
  5430   001428  6ADA               	clrf	fsr2h,c
  5431   00142A  50DF               	movf	indf2,w,c
  5432   00142C  0F30               	addlw	48
  5433   00142E  EC4F  F00E         	call	_Terminal_SendChar
  5434   001432                     
  5435                           ;TAD_DATOS.c: 63:             Terminal_SendString(" ");
  5436   001432  0EFA               	movlw	low (STR_5+2)
  5437   001434  6E55               	movwf	Terminal_SendString@str^0,c
  5438   001436  0E1F               	movlw	high (STR_5+2)
  5439   001438  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5440   00143A  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5441   00143E                     
  5442                           ;TAD_DATOS.c: 64:         }
  5443   00143E  4A57               	infsnz	showAllConfigurations@j^0,f,c
  5444   001440  2A58               	incf	(showAllConfigurations@j+1)^0,f,c
  5445   001442  BE58               	btfsc	(showAllConfigurations@j+1)^0,7,c
  5446   001444  EF2D  F00A         	goto	u3141
  5447   001448  5058               	movf	(showAllConfigurations@j+1)^0,w,c
  5448   00144A  E109               	bnz	u3140
  5449   00144C  0E06               	movlw	6
  5450   00144E  5C57               	subwf	showAllConfigurations@j^0,w,c
  5451   001450  A0D8               	btfss	status,0,c
  5452   001452  EF2D  F00A         	goto	u3141
  5453   001456  EF2F  F00A         	goto	u3140
  5454   00145A                     u3141:
  5455   00145A  EF0E  F00A         	goto	l3880
  5456   00145E                     u3140:
  5457   00145E                     
  5458                           ;TAD_DATOS.c: 65:         Terminal_SendString("\r\n");
  5459   00145E  0EC4               	movlw	low (STR_7+15)
  5460   001460  6E55               	movwf	Terminal_SendString@str^0,c
  5461   001462  0E1F               	movlw	high (STR_7+15)
  5462   001464  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5463   001466  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5464   00146A                     
  5465                           ;TAD_DATOS.c: 66:     }
  5466   00146A  4A59               	infsnz	showAllConfigurations@i^0,f,c
  5467   00146C  2A5A               	incf	(showAllConfigurations@i+1)^0,f,c
  5468   00146E  BE5A               	btfsc	(showAllConfigurations@i+1)^0,7,c
  5469   001470  EF43  F00A         	goto	u3151
  5470   001474  505A               	movf	(showAllConfigurations@i+1)^0,w,c
  5471   001476  E109               	bnz	u3150
  5472   001478  0E04               	movlw	4
  5473   00147A  5C59               	subwf	showAllConfigurations@i^0,w,c
  5474   00147C  A0D8               	btfss	status,0,c
  5475   00147E  EF43  F00A         	goto	u3151
  5476   001482  EF45  F00A         	goto	u3150
  5477   001486                     u3151:
  5478   001486  EFFA  F009         	goto	l3868
  5479   00148A                     u3150:
  5480   00148A  0012               	return		;funcret
  5481   00148C                     __end_of_showAllConfigurations:
  5482                           	callstack 0
  5483                           
  5484 ;; *************** function _saveHourToData *****************
  5485 ;; Defined at:
  5486 ;;		line 74 in file "TAD_DATOS.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5489 ;;		 -> motorTerminal@hour(4), 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1
  5501 ;;      Params:         1       0       0
  5502 ;;      Locals:         0       0       0
  5503 ;;      Temps:          0       0       0
  5504 ;;      Totals:         1       0       0
  5505 ;;Total ram usage:        1 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; Hardware stack levels required when called: 3
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_motorTerminal
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text9
  5516   001ADA                     __ptext9:
  5517                           	callstack 0
  5518   001ADA                     _saveHourToData:
  5519                           	callstack 26
  5520   001ADA                     
  5521                           ;TAD_DATOS.c: 75:     currentTime[0] = hour[0];
  5522   001ADA  5051               	movf	saveHourToData@hour^0,w,c
  5523   001ADC  6ED9               	movwf	fsr2l,c
  5524   001ADE  6ADA               	clrf	fsr2h,c
  5525   001AE0  50DF               	movf	indf2,w,c
  5526   001AE2  6E72               	movwf	_currentTime^0,c
  5527   001AE4                     
  5528                           ;TAD_DATOS.c: 76:     currentTime[1] = hour[1];
  5529   001AE4  5051               	movf	saveHourToData@hour^0,w,c
  5530   001AE6  6ED9               	movwf	fsr2l,c
  5531   001AE8  6ADA               	clrf	fsr2h,c
  5532   001AEA  0E01               	movlw	1
  5533   001AEC  26D9               	addwf	fsr2l,f,c
  5534   001AEE  50DF               	movf	indf2,w,c
  5535   001AF0  6E73               	movwf	(_currentTime+1)^0,c
  5536   001AF2                     
  5537                           ;TAD_DATOS.c: 77:     currentTime[2] = hour[2];
  5538   001AF2  5051               	movf	saveHourToData@hour^0,w,c
  5539   001AF4  6ED9               	movwf	fsr2l,c
  5540   001AF6  6ADA               	clrf	fsr2h,c
  5541   001AF8  0E02               	movlw	2
  5542   001AFA  26D9               	addwf	fsr2l,f,c
  5543   001AFC  50DF               	movf	indf2,w,c
  5544   001AFE  6E74               	movwf	(_currentTime+2)^0,c
  5545   001B00                     
  5546                           ;TAD_DATOS.c: 78:     currentTime[3] = hour[3];
  5547   001B00  5051               	movf	saveHourToData@hour^0,w,c
  5548   001B02  6ED9               	movwf	fsr2l,c
  5549   001B04  6ADA               	clrf	fsr2h,c
  5550   001B06  0E03               	movlw	3
  5551   001B08  26D9               	addwf	fsr2l,f,c
  5552   001B0A  50DF               	movf	indf2,w,c
  5553   001B0C  6E75               	movwf	(_currentTime+3)^0,c
  5554   001B0E  0012               	return		;funcret
  5555   001B10                     __end_of_saveHourToData:
  5556                           	callstack 0
  5557                           
  5558 ;; *************** function _printfUID *****************
  5559 ;; Defined at:
  5560 ;;		line 93 in file "TAD_TERMINAL.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5563 ;;		 -> currentUser(5), motorTerminal@currentUser_905(5), 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  low             1   14[COMRAM] unsigned char 
  5566 ;;  high            1   13[COMRAM] unsigned char 
  5567 ;;  i               2   15[COMRAM] int 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1
  5577 ;;      Params:         1       0       0
  5578 ;;      Locals:         8       0       0
  5579 ;;      Temps:          1       0       0
  5580 ;;      Totals:        10       0       0
  5581 ;;Total ram usage:       10 bytes
  5582 ;; Hardware stack levels used: 1
  5583 ;; Hardware stack levels required when called: 6
  5584 ;; This function calls:
  5585 ;;		_Terminal_SendChar
  5586 ;;		_Terminal_SendString
  5587 ;; This function is called by:
  5588 ;;		_motorTerminal
  5589 ;;		_setCurrentUser
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text10
  5594   0010FC                     __ptext10:
  5595                           	callstack 0
  5596   0010FC                     _printfUID:
  5597                           	callstack 22
  5598   0010FC                     
  5599                           ;TAD_TERMINAL.c: 94:  Terminal_SendString("UID: ");
  5600   0010FC  0EF2               	movlw	low STR_1
  5601   0010FE  6E55               	movwf	Terminal_SendString@str^0,c
  5602   001100  0E1F               	movlw	high STR_1
  5603   001102  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5604   001104  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5605   001108                     
  5606                           ;TAD_TERMINAL.c: 95:  for (int i = 0; i < 5; i++) {
  5607   001108  0E00               	movlw	0
  5608   00110A  6E60               	movwf	(printfUID@i+1)^0,c
  5609   00110C  0E00               	movlw	0
  5610   00110E  6E5F               	movwf	printfUID@i^0,c
  5611   001110                     l3566:
  5612                           
  5613                           ;TAD_TERMINAL.c: 97:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  5614   001110  5057               	movf	printfUID@currentUser^0,w,c
  5615   001112  245F               	addwf	printfUID@i^0,w,c
  5616   001114  6ED9               	movwf	fsr2l,c
  5617   001116  6ADA               	clrf	fsr2h,c
  5618   001118  50DF               	movf	indf2,w,c
  5619   00111A  6E58               	movwf	??_printfUID^0,c
  5620   00111C  3858               	swapf	??_printfUID^0,w,c
  5621   00111E  0B0F               	andlw	15
  5622   001120  0B0F               	andlw	15
  5623   001122  6E5D               	movwf	printfUID@high^0,c
  5624   001124                     
  5625                           ;TAD_TERMINAL.c: 98:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  5626   001124  0E09               	movlw	9
  5627   001126  645D               	cpfsgt	printfUID@high^0,c
  5628   001128  EF98  F008         	goto	u2891
  5629   00112C  EF9A  F008         	goto	u2890
  5630   001130                     u2891:
  5631   001130  EFA2  F008         	goto	l3572
  5632   001134                     u2890:
  5633   001134  0E37               	movlw	55
  5634   001136  245D               	addwf	printfUID@high^0,w,c
  5635   001138  6E59               	movwf	_printfUID$870^0,c
  5636   00113A  6A5A               	clrf	(_printfUID$870+1)^0,c
  5637   00113C  0E00               	movlw	0
  5638   00113E  225A               	addwfc	(_printfUID$870+1)^0,f,c
  5639   001140  EFA8  F008         	goto	l3574
  5640   001144                     l3572:
  5641   001144  0E30               	movlw	48
  5642   001146  245D               	addwf	printfUID@high^0,w,c
  5643   001148  6E59               	movwf	_printfUID$870^0,c
  5644   00114A  6A5A               	clrf	(_printfUID$870+1)^0,c
  5645   00114C  0E00               	movlw	0
  5646   00114E  225A               	addwfc	(_printfUID$870+1)^0,f,c
  5647   001150                     l3574:
  5648   001150  5059               	movf	_printfUID$870^0,w,c
  5649   001152  EC4F  F00E         	call	_Terminal_SendChar
  5650   001156                     
  5651                           ;TAD_TERMINAL.c: 101:   unsigned char low = currentUser[i] & 0x0F;
  5652   001156  5057               	movf	printfUID@currentUser^0,w,c
  5653   001158  245F               	addwf	printfUID@i^0,w,c
  5654   00115A  6ED9               	movwf	fsr2l,c
  5655   00115C  6ADA               	clrf	fsr2h,c
  5656   00115E  50DF               	movf	indf2,w,c
  5657   001160  0B0F               	andlw	15
  5658   001162  6E5E               	movwf	printfUID@low^0,c
  5659   001164                     
  5660                           ;TAD_TERMINAL.c: 102:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  5661   001164  0E09               	movlw	9
  5662   001166  645E               	cpfsgt	printfUID@low^0,c
  5663   001168  EFB8  F008         	goto	u2901
  5664   00116C  EFBA  F008         	goto	u2900
  5665   001170                     u2901:
  5666   001170  EFC2  F008         	goto	l3582
  5667   001174                     u2900:
  5668   001174  0E37               	movlw	55
  5669   001176  245E               	addwf	printfUID@low^0,w,c
  5670   001178  6E5B               	movwf	_printfUID$872^0,c
  5671   00117A  6A5C               	clrf	(_printfUID$872+1)^0,c
  5672   00117C  0E00               	movlw	0
  5673   00117E  225C               	addwfc	(_printfUID$872+1)^0,f,c
  5674   001180  EFC8  F008         	goto	l3584
  5675   001184                     l3582:
  5676   001184  0E30               	movlw	48
  5677   001186  245E               	addwf	printfUID@low^0,w,c
  5678   001188  6E5B               	movwf	_printfUID$872^0,c
  5679   00118A  6A5C               	clrf	(_printfUID$872+1)^0,c
  5680   00118C  0E00               	movlw	0
  5681   00118E  225C               	addwfc	(_printfUID$872+1)^0,f,c
  5682   001190                     l3584:
  5683   001190  505B               	movf	_printfUID$872^0,w,c
  5684   001192  EC4F  F00E         	call	_Terminal_SendChar
  5685   001196                     
  5686                           ;TAD_TERMINAL.c: 105:   if (i < 4) Terminal_SendString("-");
  5687   001196  BE60               	btfsc	(printfUID@i+1)^0,7,c
  5688   001198  EFD9  F008         	goto	u2910
  5689   00119C  5060               	movf	(printfUID@i+1)^0,w,c
  5690   00119E  E107               	bnz	u2911
  5691   0011A0  0E04               	movlw	4
  5692   0011A2  5C5F               	subwf	printfUID@i^0,w,c
  5693   0011A4  B0D8               	btfsc	status,0,c
  5694   0011A6  EFD7  F008         	goto	u2911
  5695   0011AA  EFD9  F008         	goto	u2910
  5696   0011AE                     u2911:
  5697   0011AE  EFDF  F008         	goto	l3590
  5698   0011B2                     u2910:
  5699   0011B2  0EFC               	movlw	low STR_2
  5700   0011B4  6E55               	movwf	Terminal_SendString@str^0,c
  5701   0011B6  0E1F               	movlw	high STR_2
  5702   0011B8  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5703   0011BA  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5704   0011BE                     l3590:
  5705                           
  5706                           ;TAD_TERMINAL.c: 106:  }
  5707   0011BE  4A5F               	infsnz	printfUID@i^0,f,c
  5708   0011C0  2A60               	incf	(printfUID@i+1)^0,f,c
  5709   0011C2  BE60               	btfsc	(printfUID@i+1)^0,7,c
  5710   0011C4  EFED  F008         	goto	u2921
  5711   0011C8  5060               	movf	(printfUID@i+1)^0,w,c
  5712   0011CA  E109               	bnz	u2920
  5713   0011CC  0E05               	movlw	5
  5714   0011CE  5C5F               	subwf	printfUID@i^0,w,c
  5715   0011D0  A0D8               	btfss	status,0,c
  5716   0011D2  EFED  F008         	goto	u2921
  5717   0011D6  EFEF  F008         	goto	u2920
  5718   0011DA                     u2921:
  5719   0011DA  EF88  F008         	goto	l3566
  5720   0011DE                     u2920:
  5721   0011DE                     
  5722                           ;TAD_TERMINAL.c: 107:  Terminal_SendString("\r\n");
  5723   0011DE  0EC4               	movlw	low (STR_7+15)
  5724   0011E0  6E55               	movwf	Terminal_SendString@str^0,c
  5725   0011E2  0E1F               	movlw	high (STR_7+15)
  5726   0011E4  6E56               	movwf	(Terminal_SendString@str+1)^0,c
  5727   0011E6  EC88  F00D         	call	_Terminal_SendString	;wreg free
  5728   0011EA  0012               	return		;funcret
  5729   0011EC                     __end_of_printfUID:
  5730                           	callstack 0
  5731                           
  5732 ;; *************** function _Terminal_SendString *****************
  5733 ;; Defined at:
  5734 ;;		line 53 in file "TAD_TERMINAL.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5737 ;;		 -> STR_30(2), STR_29(22), STR_28(3), STR_27(2), 
  5738 ;;		 -> STR_26(10), STR_25(6), STR_6(3), STR_5(4), 
  5739 ;;		 -> STR_4(3), STR_3(3), STR_2(2), STR_1(6), 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;		None
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1
  5751 ;;      Params:         2       0       0
  5752 ;;      Locals:         0       0       0
  5753 ;;      Temps:          0       0       0
  5754 ;;      Totals:         2       0       0
  5755 ;;Total ram usage:        2 bytes
  5756 ;; Hardware stack levels used: 1
  5757 ;; Hardware stack levels required when called: 5
  5758 ;; This function calls:
  5759 ;;		_Terminal_SendChar
  5760 ;; This function is called by:
  5761 ;;		_printfUID
  5762 ;;		_printLedConfig
  5763 ;;		_showAllConfigurations
  5764 ;;		_setCurrentUser
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text11
  5769   001B10                     __ptext11:
  5770                           	callstack 0
  5771   001B10                     _Terminal_SendString:
  5772                           	callstack 22
  5773   001B10                     
  5774                           ;TAD_TERMINAL.c: 54:  while (*str) {
  5775   001B10  EF94  F00D         	goto	l3482
  5776   001B14                     l3478:
  5777                           
  5778                           ;TAD_TERMINAL.c: 55:   Terminal_SendChar(*str++);
  5779   001B14  C055  FFF6         	movff	Terminal_SendString@str,tblptrl
  5780   001B18  C056  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5781   001B1C                     	if	0	;tblptru may be non-zero
  5782   001B1C                     	endif
  5783   001B1C                     	if	0	;tblptru may be non-zero
  5784   001B1C                     	endif
  5785   001B1C  0008               	tblrd		*
  5786   001B1E  50F5               	movf	tablat,w,c
  5787   001B20  EC4F  F00E         	call	_Terminal_SendChar
  5788   001B24  4A55               	infsnz	Terminal_SendString@str^0,f,c
  5789   001B26  2A56               	incf	(Terminal_SendString@str+1)^0,f,c
  5790   001B28                     l3482:
  5791                           
  5792                           ;TAD_TERMINAL.c: 54:  while (*str) {
  5793   001B28  C055  FFF6         	movff	Terminal_SendString@str,tblptrl
  5794   001B2C  C056  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5795   001B30                     	if	0	;tblptru may be non-zero
  5796   001B30                     	endif
  5797   001B30                     	if	0	;tblptru may be non-zero
  5798   001B30                     	endif
  5799   001B30  0008               	tblrd		*
  5800   001B32  50F5               	movf	tablat,w,c
  5801   001B34  0900               	iorlw	0
  5802   001B36  A4D8               	btfss	status,2,c
  5803   001B38  EFA0  F00D         	goto	u2651
  5804   001B3C  EFA2  F00D         	goto	u2650
  5805   001B40                     u2651:
  5806   001B40  EF8A  F00D         	goto	l3478
  5807   001B44                     u2650:
  5808   001B44  0012               	return		;funcret
  5809   001B46                     __end_of_Terminal_SendString:
  5810                           	callstack 0
  5811                           
  5812 ;; *************** function _Terminal_SendChar *****************
  5813 ;; Defined at:
  5814 ;;		line 30 in file "TAD_TERMINAL.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  c               1    wreg     unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  c               1    4[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1
  5828 ;;      Params:         0       0       0
  5829 ;;      Locals:         1       0       0
  5830 ;;      Temps:          0       0       0
  5831 ;;      Totals:         1       0       0
  5832 ;;Total ram usage:        1 bytes
  5833 ;; Hardware stack levels used: 1
  5834 ;; Hardware stack levels required when called: 4
  5835 ;; This function calls:
  5836 ;;		_Terminal_TXAvailable
  5837 ;; This function is called by:
  5838 ;;		_Terminal_SendString
  5839 ;;		_printfUID
  5840 ;;		_printLedConfig
  5841 ;;		_motorTerminal
  5842 ;;		_showAllConfigurations
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text12
  5847   001C9E                     __ptext12:
  5848                           	callstack 0
  5849   001C9E                     _Terminal_SendChar:
  5850                           	callstack 22
  5851                           
  5852                           ;incstack = 0
  5853                           ;Terminal_SendChar@c stored from wreg
  5854   001C9E  6E54               	movwf	Terminal_SendChar@c^0,c
  5855   001CA0                     l3442:
  5856   001CA0  EC5E  F00E         	call	_Terminal_TXAvailable	;wreg free
  5857   001CA4  5051               	movf	?_Terminal_TXAvailable^0,w,c
  5858   001CA6  1052               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5859   001CA8  B4D8               	btfsc	status,2,c
  5860   001CAA  EF59  F00E         	goto	u2621
  5861   001CAE  EF5B  F00E         	goto	u2620
  5862   001CB2                     u2621:
  5863   001CB2  EF50  F00E         	goto	l3442
  5864   001CB6                     u2620:
  5865   001CB6                     
  5866                           ;TAD_TERMINAL.c: 32:  TXREG = c;
  5867   001CB6  C054  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5868   001CBA  0012               	return		;funcret
  5869   001CBC                     __end_of_Terminal_SendChar:
  5870                           	callstack 0
  5871                           
  5872 ;; *************** function _motor_StartSendString *****************
  5873 ;; Defined at:
  5874 ;;		line 82 in file "TAD_TERMINAL.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5877 ;;		 -> STR_24(33), STR_23(33), STR_22(3), STR_21(33), 
  5878 ;;		 -> STR_20(6), STR_19(33), STR_18(3), STR_17(3), 
  5879 ;;		 -> STR_16(3), STR_15(9), STR_14(33), STR_13(29), 
  5880 ;;		 -> STR_12(27), STR_11(19), STR_10(18), STR_9(18), 
  5881 ;;		 -> STR_8(18), STR_7(18), 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1
  5893 ;;      Params:         2       0       0
  5894 ;;      Locals:         0       0       0
  5895 ;;      Temps:          0       0       0
  5896 ;;      Totals:         2       0       0
  5897 ;;Total ram usage:        2 bytes
  5898 ;; Hardware stack levels used: 1
  5899 ;; Hardware stack levels required when called: 6
  5900 ;; This function calls:
  5901 ;;		_motor_SendString
  5902 ;; This function is called by:
  5903 ;;		_motorTerminal
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text13
  5908   001C7C                     __ptext13:
  5909                           	callstack 0
  5910   001C7C                     _motor_StartSendString:
  5911                           	callstack 23
  5912   001C7C                     
  5913                           ;TAD_TERMINAL.c: 83:     if (motor_SendString() == 1) {
  5914   001C7C  ECDC  F00B         	call	_motor_SendString	;wreg free
  5915   001C80  06E8               	decf	wreg,f,c
  5916   001C82  A4D8               	btfss	status,2,c
  5917   001C84  EF46  F00E         	goto	u3131
  5918   001C88  EF48  F00E         	goto	u3130
  5919   001C8C                     u3131:
  5920   001C8C  EF4E  F00E         	goto	l671
  5921   001C90                     u3130:
  5922   001C90                     
  5923                           ;TAD_TERMINAL.c: 84:         str_ptr = str;
  5924   001C90  C055  F013         	movff	motor_StartSendString@str,_str_ptr
  5925   001C94  C056  F014         	movff	motor_StartSendString@str+1,_str_ptr+1
  5926   001C98                     
  5927                           ;TAD_TERMINAL.c: 85:         state_str = 1;
  5928   001C98  0E01               	movlw	1
  5929   001C9A  6E24               	movwf	_state_str^0,c
  5930   001C9C                     l671:
  5931   001C9C  0012               	return		;funcret
  5932   001C9E                     __end_of_motor_StartSendString:
  5933                           	callstack 0
  5934                           
  5935 ;; *************** function _motor_SendString *****************
  5936 ;; Defined at:
  5937 ;;		line 60 in file "TAD_TERMINAL.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      unsigned char 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1
  5951 ;;      Params:         0       0       0
  5952 ;;      Locals:         0       0       0
  5953 ;;      Temps:          0       0       0
  5954 ;;      Totals:         0       0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used: 1
  5957 ;; Hardware stack levels required when called: 5
  5958 ;; This function calls:
  5959 ;;		_motor_SendChar
  5960 ;; This function is called by:
  5961 ;;		_motor_StartSendString
  5962 ;;		_motorTerminal
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text14
  5967   0017B8                     __ptext14:
  5968                           	callstack 0
  5969   0017B8                     _motor_SendString:
  5970                           	callstack 23
  5971   0017B8                     
  5972                           ;TAD_TERMINAL.c: 61:     switch(state_str) {
  5973   0017B8  EF07  F00C         	goto	l3552
  5974   0017BC                     l3530:
  5975                           
  5976                           ;TAD_TERMINAL.c: 63:             return 1;
  5977   0017BC  0E01               	movlw	1
  5978   0017BE  EF12  F00C         	goto	l663
  5979   0017C2                     l3534:
  5980                           
  5981                           ;TAD_TERMINAL.c: 66:             if (*str_ptr == 0) {
  5982   0017C2  C013  FFF6         	movff	_str_ptr,tblptrl
  5983   0017C6  C014  FFF7         	movff	_str_ptr+1,tblptrh
  5984   0017CA                     	if	0	;tblptru may be non-zero
  5985   0017CA                     	endif
  5986   0017CA                     	if	0	;tblptru may be non-zero
  5987   0017CA                     	endif
  5988   0017CA  0008               	tblrd		*
  5989   0017CC  50F5               	movf	tablat,w,c
  5990   0017CE  0900               	iorlw	0
  5991   0017D0  A4D8               	btfss	status,2,c
  5992   0017D2  EFED  F00B         	goto	u2871
  5993   0017D6  EFEF  F00B         	goto	u2870
  5994   0017DA                     u2871:
  5995   0017DA  EFF2  F00B         	goto	l3542
  5996   0017DE                     u2870:
  5997   0017DE                     
  5998                           ;TAD_TERMINAL.c: 67:                 state_str = 0;
  5999   0017DE  6A24               	clrf	_state_str^0,c
  6000   0017E0  EFDE  F00B         	goto	l3530
  6001   0017E4                     l3542:
  6002                           
  6003                           ;TAD_TERMINAL.c: 72:             if (motor_SendChar(*str_ptr)) {
  6004   0017E4  C013  FFF6         	movff	_str_ptr,tblptrl
  6005   0017E8  C014  FFF7         	movff	_str_ptr+1,tblptrh
  6006   0017EC                     	if	0	;tblptru may be non-zero
  6007   0017EC                     	endif
  6008   0017EC                     	if	0	;tblptru may be non-zero
  6009   0017EC                     	endif
  6010   0017EC  0008               	tblrd		*
  6011   0017EE  50F5               	movf	tablat,w,c
  6012   0017F0  EC07  F00E         	call	_motor_SendChar
  6013   0017F4  0900               	iorlw	0
  6014   0017F6  B4D8               	btfsc	status,2,c
  6015   0017F8  EF00  F00C         	goto	u2881
  6016   0017FC  EF02  F00C         	goto	u2880
  6017   001800                     u2881:
  6018   001800  EF04  F00C         	goto	l3546
  6019   001804                     u2880:
  6020   001804                     
  6021                           ;TAD_TERMINAL.c: 73:                 str_ptr++;
  6022   001804  4A13               	infsnz	_str_ptr^0,f,c
  6023   001806  2A14               	incf	(_str_ptr+1)^0,f,c
  6024   001808                     l3546:
  6025                           
  6026                           ;TAD_TERMINAL.c: 75:             return 0;
  6027   001808  0E00               	movlw	0
  6028   00180A  EF12  F00C         	goto	l663
  6029   00180E                     l3552:
  6030   00180E  5024               	movf	_state_str^0,w,c
  6031                           
  6032                           ; Switch size 1, requested type "simple"
  6033                           ; Number of cases is 2, Range of values is 0 to 1
  6034                           ; switch strategies available:
  6035                           ; Name         Instructions Cycles
  6036                           ; simple_byte            7     4 (average)
  6037                           ;	Chosen strategy is simple_byte
  6038   001810  0A00               	xorlw	0	; case 0
  6039   001812  B4D8               	btfsc	status,2,c
  6040   001814  EFDE  F00B         	goto	l3530
  6041   001818  0A01               	xorlw	1	; case 1
  6042   00181A  B4D8               	btfsc	status,2,c
  6043   00181C  EFE1  F00B         	goto	l3534
  6044   001820  EF04  F00C         	goto	l3546
  6045   001824                     l663:
  6046   001824  0012               	return		;funcret
  6047   001826                     __end_of_motor_SendString:
  6048                           	callstack 0
  6049                           
  6050 ;; *************** function _motor_SendChar *****************
  6051 ;; Defined at:
  6052 ;;		line 36 in file "TAD_TERMINAL.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  c               1    wreg     unsigned char 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  c               1    4[COMRAM] unsigned char 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      unsigned char 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1
  6066 ;;      Params:         0       0       0
  6067 ;;      Locals:         1       0       0
  6068 ;;      Temps:          0       0       0
  6069 ;;      Totals:         1       0       0
  6070 ;;Total ram usage:        1 bytes
  6071 ;; Hardware stack levels used: 1
  6072 ;; Hardware stack levels required when called: 4
  6073 ;; This function calls:
  6074 ;;		_Terminal_TXAvailable
  6075 ;; This function is called by:
  6076 ;;		_motor_SendString
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text15
  6081   001C0E                     __ptext15:
  6082                           	callstack 0
  6083   001C0E                     _motor_SendChar:
  6084                           	callstack 23
  6085                           
  6086                           ;incstack = 0
  6087                           ;motor_SendChar@c stored from wreg
  6088   001C0E  6E54               	movwf	motor_SendChar@c^0,c
  6089   001C10                     
  6090                           ;TAD_TERMINAL.c: 38:     if (Terminal_TXAvailable() == 0) {
  6091   001C10  EC5E  F00E         	call	_Terminal_TXAvailable	;wreg free
  6092   001C14  5051               	movf	?_Terminal_TXAvailable^0,w,c
  6093   001C16  1052               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6094   001C18  A4D8               	btfss	status,2,c
  6095   001C1A  EF11  F00E         	goto	u2641
  6096   001C1E  EF13  F00E         	goto	u2640
  6097   001C22                     u2641:
  6098   001C22  EF16  F00E         	goto	l648
  6099   001C26                     u2640:
  6100   001C26                     
  6101                           ;TAD_TERMINAL.c: 39:         return 0;
  6102   001C26  0E00               	movlw	0
  6103   001C28  EF19  F00E         	goto	l649
  6104   001C2C                     l648:
  6105                           
  6106                           ;TAD_TERMINAL.c: 43:     TXREG = c;
  6107   001C2C  C054  FFAD         	movff	motor_SendChar@c,4013	;volatile
  6108   001C30                     
  6109                           ;TAD_TERMINAL.c: 44:     return 1;
  6110   001C30  0E01               	movlw	1
  6111   001C32                     l649:
  6112   001C32  0012               	return		;funcret
  6113   001C34                     __end_of_motor_SendChar:
  6114                           	callstack 0
  6115                           
  6116 ;; *************** function _Terminal_TXAvailable *****************
  6117 ;; Defined at:
  6118 ;;		line 20 in file "TAD_TERMINAL.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  2    1[COMRAM] int 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1
  6132 ;;      Params:         2       0       0
  6133 ;;      Locals:         0       0       0
  6134 ;;      Temps:          1       0       0
  6135 ;;      Totals:         3       0       0
  6136 ;;Total ram usage:        3 bytes
  6137 ;; Hardware stack levels used: 1
  6138 ;; Hardware stack levels required when called: 3
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		_Terminal_SendChar
  6143 ;;		_motor_SendChar
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text16
  6148   001CBC                     __ptext16:
  6149                           	callstack 0
  6150   001CBC                     _Terminal_TXAvailable:
  6151                           	callstack 22
  6152   001CBC                     
  6153                           ;TAD_TERMINAL.c: 21:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  6154   001CBC  B89E               	btfsc	158,4,c	;volatile
  6155   001CBE  EF63  F00E         	goto	u2501
  6156   001CC2  EF67  F00E         	goto	u2500
  6157   001CC6                     u2501:
  6158   001CC6  6A53               	clrf	??_Terminal_TXAvailable^0,c
  6159   001CC8  2A53               	incf	??_Terminal_TXAvailable^0,f,c
  6160   001CCA  EF68  F00E         	goto	u2508
  6161   001CCE                     u2500:
  6162   001CCE  6A53               	clrf	??_Terminal_TXAvailable^0,c
  6163   001CD0                     u2508:
  6164   001CD0  5053               	movf	??_Terminal_TXAvailable^0,w,c
  6165   001CD2  6E51               	movwf	?_Terminal_TXAvailable^0,c
  6166   001CD4  6A52               	clrf	(?_Terminal_TXAvailable+1)^0,c
  6167   001CD6  0012               	return		;funcret
  6168   001CD8                     __end_of_Terminal_TXAvailable:
  6169                           	callstack 0
  6170                           
  6171 ;; *************** function _getActualUID *****************
  6172 ;; Defined at:
  6173 ;;		line 35 in file "TAD_DATOS.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6176 ;;		 -> motorTerminal@currentUser_905(5), motorTerminal@currentUser(5), NULL(0), motor_RFID@currentUser(5), 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1
  6188 ;;      Params:         1       0       0
  6189 ;;      Locals:         0       0       0
  6190 ;;      Temps:          0       0       0
  6191 ;;      Totals:         1       0       0
  6192 ;;Total ram usage:        1 bytes
  6193 ;; Hardware stack levels used: 1
  6194 ;; Hardware stack levels required when called: 3
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_motor_RFID
  6199 ;;		_motorTerminal
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text17
  6204   00148C                     __ptext17:
  6205                           	callstack 0
  6206   00148C                     _getActualUID:
  6207                           	callstack 26
  6208   00148C                     
  6209                           ;TAD_DATOS.c: 36:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  6210   00148C  5041               	movf	_currentUser^0,w,c
  6211   00148E  A4D8               	btfss	status,2,c
  6212   001490  EF4C  F00A         	goto	u3041
  6213   001494  EF4E  F00A         	goto	u3040
  6214   001498                     u3041:
  6215   001498  EF70  F00A         	goto	l3756
  6216   00149C                     u3040:
  6217   00149C  5042               	movf	(_currentUser+1)^0,w,c
  6218   00149E  A4D8               	btfss	status,2,c
  6219   0014A0  EF54  F00A         	goto	u3051
  6220   0014A4  EF56  F00A         	goto	u3050
  6221   0014A8                     u3051:
  6222   0014A8  EF70  F00A         	goto	l3756
  6223   0014AC                     u3050:
  6224   0014AC  5043               	movf	(_currentUser+2)^0,w,c
  6225   0014AE  A4D8               	btfss	status,2,c
  6226   0014B0  EF5C  F00A         	goto	u3061
  6227   0014B4  EF5E  F00A         	goto	u3060
  6228   0014B8                     u3061:
  6229   0014B8  EF70  F00A         	goto	l3756
  6230   0014BC                     u3060:
  6231   0014BC  5044               	movf	(_currentUser+3)^0,w,c
  6232   0014BE  A4D8               	btfss	status,2,c
  6233   0014C0  EF64  F00A         	goto	u3071
  6234   0014C4  EF66  F00A         	goto	u3070
  6235   0014C8                     u3071:
  6236   0014C8  EF70  F00A         	goto	l3756
  6237   0014CC                     u3070:
  6238   0014CC  5045               	movf	(_currentUser+4)^0,w,c
  6239   0014CE  A4D8               	btfss	status,2,c
  6240   0014D0  EF6C  F00A         	goto	u3081
  6241   0014D4  EF6E  F00A         	goto	u3080
  6242   0014D8                     u3081:
  6243   0014D8  EF70  F00A         	goto	l3756
  6244   0014DC                     u3080:
  6245   0014DC                     
  6246                           ;TAD_DATOS.c: 38:  }
  6247   0014DC  EF91  F00A         	goto	l788
  6248   0014E0                     l3756:
  6249                           
  6250                           ;TAD_DATOS.c: 40:   UID[0] = currentUser[0];
  6251   0014E0  5051               	movf	getActualUID@UID^0,w,c
  6252   0014E2  6ED9               	movwf	fsr2l,c
  6253   0014E4  6ADA               	clrf	fsr2h,c
  6254   0014E6  C041  FFDF         	movff	_currentUser,indf2
  6255   0014EA                     
  6256                           ;TAD_DATOS.c: 41:   UID[1] = currentUser[1];
  6257   0014EA  5051               	movf	getActualUID@UID^0,w,c
  6258   0014EC  6ED9               	movwf	fsr2l,c
  6259   0014EE  6ADA               	clrf	fsr2h,c
  6260   0014F0  0E01               	movlw	1
  6261   0014F2  26D9               	addwf	fsr2l,f,c
  6262   0014F4  C042  FFDF         	movff	_currentUser+1,indf2
  6263   0014F8                     
  6264                           ;TAD_DATOS.c: 42:   UID[2] = currentUser[2];
  6265   0014F8  5051               	movf	getActualUID@UID^0,w,c
  6266   0014FA  6ED9               	movwf	fsr2l,c
  6267   0014FC  6ADA               	clrf	fsr2h,c
  6268   0014FE  0E02               	movlw	2
  6269   001500  26D9               	addwf	fsr2l,f,c
  6270   001502  C043  FFDF         	movff	_currentUser+2,indf2
  6271   001506                     
  6272                           ;TAD_DATOS.c: 43:   UID[3] = currentUser[3];
  6273   001506  5051               	movf	getActualUID@UID^0,w,c
  6274   001508  6ED9               	movwf	fsr2l,c
  6275   00150A  6ADA               	clrf	fsr2h,c
  6276   00150C  0E03               	movlw	3
  6277   00150E  26D9               	addwf	fsr2l,f,c
  6278   001510  C044  FFDF         	movff	_currentUser+3,indf2
  6279   001514                     
  6280                           ;TAD_DATOS.c: 44:   UID[4] = currentUser[4];
  6281   001514  5051               	movf	getActualUID@UID^0,w,c
  6282   001516  6ED9               	movwf	fsr2l,c
  6283   001518  6ADA               	clrf	fsr2h,c
  6284   00151A  0E04               	movlw	4
  6285   00151C  26D9               	addwf	fsr2l,f,c
  6286   00151E  C045  FFDF         	movff	_currentUser+4,indf2
  6287   001522                     l788:
  6288   001522  0012               	return		;funcret
  6289   001524                     __end_of_getActualUID:
  6290                           	callstack 0
  6291                           
  6292 ;; *************** function _Terminal_ReceiveChar *****************
  6293 ;; Defined at:
  6294 ;;		line 48 in file "TAD_TERMINAL.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      unsigned char 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1
  6308 ;;      Params:         0       0       0
  6309 ;;      Locals:         0       0       0
  6310 ;;      Temps:          0       0       0
  6311 ;;      Totals:         0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used: 1
  6314 ;; Hardware stack levels required when called: 3
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_motorTerminal
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text18
  6323   001DA6                     __ptext18:
  6324                           	callstack 0
  6325   001DA6                     _Terminal_ReceiveChar:
  6326                           	callstack 26
  6327   001DA6                     
  6328                           ;TAD_TERMINAL.c: 49:  return RCREG;
  6329   001DA6  50AE               	movf	174,w,c	;volatile
  6330   001DA8  0012               	return		;funcret
  6331   001DAA                     __end_of_Terminal_ReceiveChar:
  6332                           	callstack 0
  6333                           
  6334 ;; *************** function _Terminal_RXAvailable *****************
  6335 ;; Defined at:
  6336 ;;		line 25 in file "TAD_TERMINAL.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;		None
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;		None
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      unsigned char 
  6343 ;; Registers used:
  6344 ;;		wreg
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMRAM   BANK0   BANK1
  6350 ;;      Params:         0       0       0
  6351 ;;      Locals:         0       0       0
  6352 ;;      Temps:          0       0       0
  6353 ;;      Totals:         0       0       0
  6354 ;;Total ram usage:        0 bytes
  6355 ;; Hardware stack levels used: 1
  6356 ;; Hardware stack levels required when called: 3
  6357 ;; This function calls:
  6358 ;;		Nothing
  6359 ;; This function is called by:
  6360 ;;		_motorTerminal
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           	psect	text19
  6365   001D1C                     __ptext19:
  6366                           	callstack 0
  6367   001D1C                     _Terminal_RXAvailable:
  6368                           	callstack 26
  6369   001D1C                     
  6370                           ;TAD_TERMINAL.c: 26:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  6371   001D1C  BA9E               	btfsc	158,5,c	;volatile
  6372   001D1E  EF93  F00E         	goto	u731
  6373   001D22  EF96  F00E         	goto	u730
  6374   001D26                     u731:
  6375   001D26  0E01               	movlw	1
  6376   001D28  EF97  F00E         	goto	u736
  6377   001D2C                     u730:
  6378   001D2C  0E00               	movlw	0
  6379   001D2E                     u736:
  6380   001D2E  0012               	return		;funcret
  6381   001D30                     __end_of_Terminal_RXAvailable:
  6382                           	callstack 0
  6383                           
  6384 ;; *************** function _initTeclado *****************
  6385 ;; Defined at:
  6386 ;;		line 20 in file "TAD_TECLADO.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;		None
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      void 
  6393 ;; Registers used:
  6394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1
  6400 ;;      Params:         0       0       0
  6401 ;;      Locals:         0       0       0
  6402 ;;      Temps:          0       0       0
  6403 ;;      Totals:         0       0       0
  6404 ;;Total ram usage:        0 bytes
  6405 ;; Hardware stack levels used: 1
  6406 ;; Hardware stack levels required when called: 4
  6407 ;; This function calls:
  6408 ;;		_TI_NewTimer
  6409 ;;		_initPortsTeclado
  6410 ;; This function is called by:
  6411 ;;		_main
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           	psect	text20
  6416   001CF0                     __ptext20:
  6417                           	callstack 0
  6418   001CF0                     _initTeclado:
  6419                           	callstack 26
  6420   001CF0                     
  6421                           ;TAD_TECLADO.c: 21:  initPortsTeclado();
  6422   001CF0  ECCB  F00E         	call	_initPortsTeclado	;wreg free
  6423   001CF4                     
  6424                           ;TAD_TECLADO.c: 22:     Filas = 0x00;
  6425   001CF4  6A3A               	clrf	_Filas^0,c
  6426   001CF6                     
  6427                           ;TAD_TECLADO.c: 23:     Columnas = 0x00;
  6428   001CF6  6A39               	clrf	_Columnas^0,c
  6429   001CF8                     
  6430                           ;TAD_TECLADO.c: 24:     tecla = 0;
  6431   001CF8  6A38               	clrf	_tecla^0,c
  6432   001CFA                     
  6433                           ;TAD_TECLADO.c: 25:  state = 0;
  6434   001CFA  6A37               	clrf	_state^0,c
  6435   001CFC                     
  6436                           ;TAD_TECLADO.c: 26:     TI_NewTimer(&timer);
  6437   001CFC  0E4F               	movlw	low _timer
  6438   001CFE  6E51               	movwf	TI_NewTimer@TimerHandle^0,c
  6439   001D00  EC72  F00C         	call	_TI_NewTimer	;wreg free
  6440   001D04  0012               	return		;funcret
  6441   001D06                     __end_of_initTeclado:
  6442                           	callstack 0
  6443                           
  6444 ;; *************** function _initPortsTeclado *****************
  6445 ;; Defined at:
  6446 ;;		line 29 in file "TAD_TECLADO.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;		None
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;		None
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  1    wreg      void 
  6453 ;; Registers used:
  6454 ;;		wreg, status,2
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMRAM   BANK0   BANK1
  6460 ;;      Params:         0       0       0
  6461 ;;      Locals:         0       0       0
  6462 ;;      Temps:          0       0       0
  6463 ;;      Totals:         0       0       0
  6464 ;;Total ram usage:        0 bytes
  6465 ;; Hardware stack levels used: 1
  6466 ;; Hardware stack levels required when called: 3
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_initTeclado
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text21
  6475   001D96                     __ptext21:
  6476                           	callstack 0
  6477   001D96                     _initPortsTeclado:
  6478                           	callstack 26
  6479   001D96                     
  6480                           ;TAD_TECLADO.c: 32:  TRISD = 0x0F;
  6481   001D96  0E0F               	movlw	15
  6482   001D98  6E95               	movwf	149,c	;volatile
  6483   001D9A                     
  6484                           ;TAD_TECLADO.c: 33:  LATD = 0x00;
  6485   001D9A  6A8C               	clrf	140,c	;volatile
  6486   001D9C  0012               	return		;funcret
  6487   001D9E                     __end_of_initPortsTeclado:
  6488                           	callstack 0
  6489                           
  6490 ;; *************** function _initRFID *****************
  6491 ;; Defined at:
  6492 ;;		line 241 in file "TAD_RFID.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1
  6506 ;;      Params:         0       0       0
  6507 ;;      Locals:         0       0       0
  6508 ;;      Temps:          0       0       0
  6509 ;;      Totals:         0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used: 1
  6512 ;; Hardware stack levels required when called: 8
  6513 ;; This function calls:
  6514 ;;		_InitPortDirections
  6515 ;;		_MFRC522_Init
  6516 ;; This function is called by:
  6517 ;;		_main
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text22
  6522   001D7A                     __ptext22:
  6523                           	callstack 0
  6524   001D7A                     _initRFID:
  6525                           	callstack 22
  6526   001D7A                     
  6527                           ;TAD_RFID.c: 242:     InitPortDirections();
  6528   001D7A  ECB1  F00E         	call	_InitPortDirections	;wreg free
  6529   001D7E                     
  6530                           ;TAD_RFID.c: 243:     MFRC522_Init();
  6531   001D7E  EC9D  F00C         	call	_MFRC522_Init	;wreg free
  6532   001D82  0012               	return		;funcret
  6533   001D84                     __end_of_initRFID:
  6534                           	callstack 0
  6535                           
  6536 ;; *************** function _MFRC522_Init *****************
  6537 ;; Defined at:
  6538 ;;		line 131 in file "TAD_RFID.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1
  6552 ;;      Params:         0       0       0
  6553 ;;      Locals:         0       0       0
  6554 ;;      Temps:          0       0       0
  6555 ;;      Totals:         0       0       0
  6556 ;;Total ram usage:        0 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 7
  6559 ;; This function calls:
  6560 ;;		_MFRC522_AntennaControl
  6561 ;;		_MFRC522_Reset
  6562 ;;		_MFRC522_Wr
  6563 ;; This function is called by:
  6564 ;;		_initRFID
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text23
  6569   00193A                     __ptext23:
  6570                           	callstack 0
  6571   00193A                     _MFRC522_Init:
  6572                           	callstack 22
  6573   00193A                     
  6574                           ;TAD_RFID.c: 132:     LATCbits.LATC3 = 1;
  6575   00193A  868B               	bsf	139,3,c	;volatile
  6576                           
  6577                           ;TAD_RFID.c: 133:     LATCbits.LATC4 = 1;
  6578   00193C  888B               	bsf	139,4,c	;volatile
  6579   00193E                     
  6580                           ;TAD_RFID.c: 135:     MFRC522_Reset();
  6581   00193E  ECF0  F00D         	call	_MFRC522_Reset	;wreg free
  6582                           
  6583                           ;TAD_RFID.c: 136:     MFRC522_Wr(0x2A, 0x8D);
  6584   001942  0E8D               	movlw	141
  6585   001944  6E53               	movwf	MFRC522_Wr@value^0,c
  6586   001946  0E2A               	movlw	42
  6587   001948  EC51  F009         	call	_MFRC522_Wr
  6588                           
  6589                           ;TAD_RFID.c: 137:     MFRC522_Wr(0x2B, 0x3E);
  6590   00194C  0E3E               	movlw	62
  6591   00194E  6E53               	movwf	MFRC522_Wr@value^0,c
  6592   001950  0E2B               	movlw	43
  6593   001952  EC51  F009         	call	_MFRC522_Wr
  6594                           
  6595                           ;TAD_RFID.c: 138:     MFRC522_Wr(0x2D, 30);
  6596   001956  0E1E               	movlw	30
  6597   001958  6E53               	movwf	MFRC522_Wr@value^0,c
  6598   00195A  0E2D               	movlw	45
  6599   00195C  EC51  F009         	call	_MFRC522_Wr
  6600                           
  6601                           ;TAD_RFID.c: 139:     MFRC522_Wr(0x2C, 0);
  6602   001960  0E00               	movlw	0
  6603   001962  6E53               	movwf	MFRC522_Wr@value^0,c
  6604   001964  0E2C               	movlw	44
  6605   001966  EC51  F009         	call	_MFRC522_Wr
  6606                           
  6607                           ;TAD_RFID.c: 140:     MFRC522_Wr(0x15, 0x40);
  6608   00196A  0E40               	movlw	64
  6609   00196C  6E53               	movwf	MFRC522_Wr@value^0,c
  6610   00196E  0E15               	movlw	21
  6611   001970  EC51  F009         	call	_MFRC522_Wr
  6612                           
  6613                           ;TAD_RFID.c: 141:     MFRC522_Wr(0x11, 0x3D);
  6614   001974  0E3D               	movlw	61
  6615   001976  6E53               	movwf	MFRC522_Wr@value^0,c
  6616   001978  0E11               	movlw	17
  6617   00197A  EC51  F009         	call	_MFRC522_Wr
  6618                           
  6619                           ;TAD_RFID.c: 143:     MFRC522_AntennaControl(1);
  6620   00197E  0E01               	movlw	1
  6621   001980  ECA3  F00D         	call	_MFRC522_AntennaControl
  6622   001984  0012               	return		;funcret
  6623   001986                     __end_of_MFRC522_Init:
  6624                           	callstack 0
  6625                           
  6626 ;; *************** function _MFRC522_Reset *****************
  6627 ;; Defined at:
  6628 ;;		line 106 in file "TAD_RFID.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;		None
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      void 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1
  6642 ;;      Params:         0       0       0
  6643 ;;      Locals:         0       0       0
  6644 ;;      Temps:          0       0       0
  6645 ;;      Totals:         0       0       0
  6646 ;;Total ram usage:        0 bytes
  6647 ;; Hardware stack levels used: 1
  6648 ;; Hardware stack levels required when called: 5
  6649 ;; This function calls:
  6650 ;;		_MFRC522_Wr
  6651 ;;		_delay_us
  6652 ;;		_resetMotorStates
  6653 ;; This function is called by:
  6654 ;;		_MFRC522_Init
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           	psect	text24
  6659   001BE0                     __ptext24:
  6660                           	callstack 0
  6661   001BE0                     _MFRC522_Reset:
  6662                           	callstack 23
  6663   001BE0                     
  6664                           ;TAD_RFID.c: 107:     resetMotorStates();
  6665   001BE0  ECC2  F00E         	call	_resetMotorStates	;wreg free
  6666   001BE4                     
  6667                           ;TAD_RFID.c: 109:     LATCbits.LATC4 = 1;
  6668   001BE4  888B               	bsf	139,4,c	;volatile
  6669   001BE6                     
  6670                           ;TAD_RFID.c: 110:     delay_us(1);
  6671   001BE6  0E01               	movlw	1
  6672   001BE8  EC1A  F00E         	call	_delay_us
  6673   001BEC                     
  6674                           ;TAD_RFID.c: 111:     LATCbits.LATC4 = 0;
  6675   001BEC  988B               	bcf	139,4,c	;volatile
  6676   001BEE                     
  6677                           ;TAD_RFID.c: 112:     delay_us(1);
  6678   001BEE  0E01               	movlw	1
  6679   001BF0  EC1A  F00E         	call	_delay_us
  6680   001BF4                     
  6681                           ;TAD_RFID.c: 113:     LATCbits.LATC4 = 1;
  6682   001BF4  888B               	bsf	139,4,c	;volatile
  6683   001BF6                     
  6684                           ;TAD_RFID.c: 114:     delay_us(1);
  6685   001BF6  0E01               	movlw	1
  6686   001BF8  EC1A  F00E         	call	_delay_us
  6687   001BFC                     
  6688                           ;TAD_RFID.c: 115:     MFRC522_Wr(0x01, 0x0F);
  6689   001BFC  0E0F               	movlw	15
  6690   001BFE  6E53               	movwf	MFRC522_Wr@value^0,c
  6691   001C00  0E01               	movlw	1
  6692   001C02  EC51  F009         	call	_MFRC522_Wr
  6693   001C06                     
  6694                           ;TAD_RFID.c: 116:     delay_us(1);
  6695   001C06  0E01               	movlw	1
  6696   001C08  EC1A  F00E         	call	_delay_us
  6697   001C0C  0012               	return		;funcret
  6698   001C0E                     __end_of_MFRC522_Reset:
  6699                           	callstack 0
  6700                           
  6701 ;; *************** function _resetMotorStates *****************
  6702 ;; Defined at:
  6703 ;;		line 101 in file "TAD_RFID.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;		None
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;		None
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		None
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1
  6717 ;;      Params:         0       0       0
  6718 ;;      Locals:         0       0       0
  6719 ;;      Temps:          0       0       0
  6720 ;;      Totals:         0       0       0
  6721 ;;Total ram usage:        0 bytes
  6722 ;; Hardware stack levels used: 1
  6723 ;; Hardware stack levels required when called: 3
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_MFRC522_Reset
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text25
  6732   001D84                     __ptext25:
  6733                           	callstack 0
  6734   001D84                     _resetMotorStates:
  6735                           	callstack 24
  6736   001D84                     
  6737                           ;TAD_RFID.c: 102:     state_read = state_write = 0;
  6738   001D84  6A4D               	clrf	_state_write^0,c
  6739   001D86  6A4E               	clrf	_state_read^0,c
  6740                           
  6741                           ;TAD_RFID.c: 103:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6742   001D88  848B               	bsf	139,2,c	;volatile
  6743   001D8A  868B               	bsf	139,3,c	;volatile
  6744   001D8C  0012               	return		;funcret
  6745   001D8E                     __end_of_resetMotorStates:
  6746                           	callstack 0
  6747                           
  6748 ;; *************** function _MFRC522_AntennaControl *****************
  6749 ;; Defined at:
  6750 ;;		line 120 in file "TAD_RFID.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  on              1    wreg     unsigned char 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  on              1   15[COMRAM] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1
  6764 ;;      Params:         0       0       0
  6765 ;;      Locals:         1       0       0
  6766 ;;      Temps:          0       0       0
  6767 ;;      Totals:         1       0       0
  6768 ;;Total ram usage:        1 bytes
  6769 ;; Hardware stack levels used: 1
  6770 ;; Hardware stack levels required when called: 6
  6771 ;; This function calls:
  6772 ;;		_MFRC522_Bit_Mask
  6773 ;; This function is called by:
  6774 ;;		_MFRC522_Init
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text26
  6779   001B46                     __ptext26:
  6780                           	callstack 0
  6781   001B46                     _MFRC522_AntennaControl:
  6782                           	callstack 22
  6783                           
  6784                           ;incstack = 0
  6785                           ;MFRC522_AntennaControl@on stored from wreg
  6786   001B46  6E5F               	movwf	MFRC522_AntennaControl@on^0,c
  6787   001B48                     
  6788                           ;TAD_RFID.c: 121:     if(on)
  6789   001B48  505F               	movf	MFRC522_AntennaControl@on^0,w,c
  6790   001B4A  B4D8               	btfsc	status,2,c
  6791   001B4C  EFAA  F00D         	goto	u2661
  6792   001B50  EFAC  F00D         	goto	u2660
  6793   001B54                     u2661:
  6794   001B54  EFB5  F00D         	goto	l3506
  6795   001B58                     u2660:
  6796   001B58                     
  6797                           ;TAD_RFID.c: 122:         MFRC522_Bit_Mask(0x14, 0x03, 1);
  6798   001B58  0E03               	movlw	3
  6799   001B5A  6E58               	movwf	MFRC522_Bit_Mask@mask^0,c
  6800   001B5C  0E01               	movlw	1
  6801   001B5E  6E59               	movwf	MFRC522_Bit_Mask@op^0,c
  6802   001B60  0E14               	movlw	20
  6803   001B62  EC0E  F00D         	call	_MFRC522_Bit_Mask
  6804   001B66  EFBC  F00D         	goto	l255
  6805   001B6A                     l3506:
  6806                           
  6807                           ;TAD_RFID.c: 124:         MFRC522_Bit_Mask(0x14, 0x03, 0);
  6808   001B6A  0E03               	movlw	3
  6809   001B6C  6E58               	movwf	MFRC522_Bit_Mask@mask^0,c
  6810   001B6E  0E00               	movlw	0
  6811   001B70  6E59               	movwf	MFRC522_Bit_Mask@op^0,c
  6812   001B72  0E14               	movlw	20
  6813   001B74  EC0E  F00D         	call	_MFRC522_Bit_Mask
  6814   001B78                     l255:
  6815   001B78  0012               	return		;funcret
  6816   001B7A                     __end_of_MFRC522_AntennaControl:
  6817                           	callstack 0
  6818                           
  6819 ;; *************** function _MFRC522_Bit_Mask *****************
  6820 ;; Defined at:
  6821 ;;		line 92 in file "TAD_RFID.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  addr            1    wreg     unsigned char 
  6824 ;;  mask            1    8[COMRAM] unsigned char 
  6825 ;;  op              1    9[COMRAM] unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  addr            1   13[COMRAM] unsigned char 
  6828 ;;  temp            1   14[COMRAM] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1
  6838 ;;      Params:         2       0       0
  6839 ;;      Locals:         4       0       0
  6840 ;;      Temps:          1       0       0
  6841 ;;      Totals:         7       0       0
  6842 ;;Total ram usage:        7 bytes
  6843 ;; Hardware stack levels used: 1
  6844 ;; Hardware stack levels required when called: 5
  6845 ;; This function calls:
  6846 ;;		_MFRC522_Rd
  6847 ;;		_MFRC522_Wr
  6848 ;; This function is called by:
  6849 ;;		_MFRC522_AntennaControl
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           	psect	text27
  6854   001A1C                     __ptext27:
  6855                           	callstack 0
  6856   001A1C                     _MFRC522_Bit_Mask:
  6857                           	callstack 22
  6858                           
  6859                           ;incstack = 0
  6860                           ;MFRC522_Bit_Mask@addr stored from wreg
  6861   001A1C  6E5D               	movwf	MFRC522_Bit_Mask@addr^0,c
  6862   001A1E                     
  6863                           ;TAD_RFID.c: 93:     char temp = MFRC522_Rd(addr);
  6864   001A1E  505D               	movf	MFRC522_Bit_Mask@addr^0,w,c
  6865   001A20  ECA5  F009         	call	_MFRC522_Rd
  6866   001A24  6E5E               	movwf	MFRC522_Bit_Mask@temp^0,c
  6867   001A26                     
  6868                           ;TAD_RFID.c: 94:     MFRC522_Wr(addr, op ? (temp | mask) : (temp & ~mask));
  6869   001A26  5059               	movf	MFRC522_Bit_Mask@op^0,w,c
  6870   001A28  A4D8               	btfss	status,2,c
  6871   001A2A  EF19  F00D         	goto	u2631
  6872   001A2E  EF1B  F00D         	goto	u2630
  6873   001A32                     u2631:
  6874   001A32  EF24  F00D         	goto	l3462
  6875   001A36                     u2630:
  6876   001A36  5058               	movf	MFRC522_Bit_Mask@mask^0,w,c
  6877   001A38  0AFF               	xorlw	255
  6878   001A3A  145E               	andwf	MFRC522_Bit_Mask@temp^0,w,c
  6879   001A3C  6E5A               	movwf	??_MFRC522_Bit_Mask^0,c
  6880   001A3E  505A               	movf	??_MFRC522_Bit_Mask^0,w,c
  6881   001A40  6E5B               	movwf	_MFRC522_Bit_Mask$534^0,c
  6882   001A42  6A5C               	clrf	(_MFRC522_Bit_Mask$534+1)^0,c
  6883   001A44  EF2A  F00D         	goto	l3464
  6884   001A48                     l3462:
  6885   001A48  505E               	movf	MFRC522_Bit_Mask@temp^0,w,c
  6886   001A4A  1058               	iorwf	MFRC522_Bit_Mask@mask^0,w,c
  6887   001A4C  6E5A               	movwf	??_MFRC522_Bit_Mask^0,c
  6888   001A4E  505A               	movf	??_MFRC522_Bit_Mask^0,w,c
  6889   001A50  6E5B               	movwf	_MFRC522_Bit_Mask$534^0,c
  6890   001A52  6A5C               	clrf	(_MFRC522_Bit_Mask$534+1)^0,c
  6891   001A54                     l3464:
  6892   001A54  C05B  F053         	movff	_MFRC522_Bit_Mask$534,MFRC522_Wr@value
  6893   001A58  505D               	movf	MFRC522_Bit_Mask@addr^0,w,c
  6894   001A5A  EC51  F009         	call	_MFRC522_Wr
  6895   001A5E  0012               	return		;funcret
  6896   001A60                     __end_of_MFRC522_Bit_Mask:
  6897                           	callstack 0
  6898                           
  6899 ;; *************** function _MFRC522_Wr *****************
  6900 ;; Defined at:
  6901 ;;		line 72 in file "TAD_RFID.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  Address         1    wreg     unsigned char 
  6904 ;;  value           1    3[COMRAM] unsigned char 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  Address         1    5[COMRAM] unsigned char 
  6907 ;;  i               1    7[COMRAM] unsigned char 
  6908 ;;  ucAddr          1    6[COMRAM] unsigned char 
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1
  6918 ;;      Params:         1       0       0
  6919 ;;      Locals:         3       0       0
  6920 ;;      Temps:          1       0       0
  6921 ;;      Totals:         5       0       0
  6922 ;;Total ram usage:        5 bytes
  6923 ;; Hardware stack levels used: 1
  6924 ;; Hardware stack levels required when called: 4
  6925 ;; This function calls:
  6926 ;;		_delay_us
  6927 ;; This function is called by:
  6928 ;;		_MFRC522_Bit_Mask
  6929 ;;		_MFRC522_Reset
  6930 ;;		_MFRC522_Init
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text28
  6935   0012A2                     __ptext28:
  6936                           	callstack 0
  6937   0012A2                     _MFRC522_Wr:
  6938                           	callstack 24
  6939                           
  6940                           ;incstack = 0
  6941                           ;MFRC522_Wr@Address stored from wreg
  6942   0012A2  6E55               	movwf	MFRC522_Wr@Address^0,c
  6943   0012A4                     
  6944                           ;TAD_RFID.c: 73:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  6945   0012A4  5055               	movf	MFRC522_Wr@Address^0,w,c
  6946   0012A6  2455               	addwf	MFRC522_Wr@Address^0,w,c
  6947   0012A8  0B7E               	andlw	126
  6948   0012AA  6E56               	movwf	MFRC522_Wr@ucAddr^0,c
  6949   0012AC                     
  6950                           ;TAD_RFID.c: 75:     LATCbits.LATC2 = 0;
  6951   0012AC  948B               	bcf	139,2,c	;volatile
  6952   0012AE                     
  6953                           ;TAD_RFID.c: 76:     LATCbits.LATC3 = 0;
  6954   0012AE  968B               	bcf	139,3,c	;volatile
  6955   0012B0                     
  6956                           ;TAD_RFID.c: 79:     for (i = 8; i > 0; i--) {
  6957   0012B0  0E08               	movlw	8
  6958   0012B2  6E57               	movwf	MFRC522_Wr@i^0,c
  6959   0012B4                     l3408:
  6960   0012B4  BE56               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  6961   0012B6  EF5F  F009         	goto	u2561
  6962   0012BA  EF63  F009         	goto	u2560
  6963   0012BE                     u2561:
  6964   0012BE  6A54               	clrf	??_MFRC522_Wr^0,c
  6965   0012C0  2A54               	incf	??_MFRC522_Wr^0,f,c
  6966   0012C2  EF64  F009         	goto	u2578
  6967   0012C6                     u2560:
  6968   0012C6  6A54               	clrf	??_MFRC522_Wr^0,c
  6969   0012C8                     u2578:
  6970   0012C8  4654               	rlncf	??_MFRC522_Wr^0,f,c
  6971   0012CA  508B               	movf	139,w,c	;volatile
  6972   0012CC  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6973   0012CE  0BFD               	andlw	-3
  6974   0012D0  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6975   0012D2  6E8B               	movwf	139,c	;volatile
  6976   0012D4  848B               	bsf	139,2,c	;volatile
  6977   0012D6  90D8               	bcf	status,0,c
  6978   0012D8  3656               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  6979   0012DA  0E05               	movlw	5
  6980   0012DC  EC1A  F00E         	call	_delay_us
  6981   0012E0  948B               	bcf	139,2,c	;volatile
  6982   0012E2  0E05               	movlw	5
  6983   0012E4  EC1A  F00E         	call	_delay_us
  6984   0012E8                     
  6985                           ;TAD_RFID.c: 81:     }
  6986   0012E8  0657               	decf	MFRC522_Wr@i^0,f,c
  6987   0012EA  5057               	movf	MFRC522_Wr@i^0,w,c
  6988   0012EC  A4D8               	btfss	status,2,c
  6989   0012EE  EF7B  F009         	goto	u2581
  6990   0012F2  EF7D  F009         	goto	u2580
  6991   0012F6                     u2581:
  6992   0012F6  EF5A  F009         	goto	l3408
  6993   0012FA                     u2580:
  6994   0012FA                     
  6995                           ;TAD_RFID.c: 83:     for (i = 8; i > 0; i--) {
  6996   0012FA  0E08               	movlw	8
  6997   0012FC  6E57               	movwf	MFRC522_Wr@i^0,c
  6998   0012FE                     l3426:
  6999   0012FE  BE53               	btfsc	MFRC522_Wr@value^0,7,c
  7000   001300  EF84  F009         	goto	u2591
  7001   001304  EF88  F009         	goto	u2590
  7002   001308                     u2591:
  7003   001308  6A54               	clrf	??_MFRC522_Wr^0,c
  7004   00130A  2A54               	incf	??_MFRC522_Wr^0,f,c
  7005   00130C  EF89  F009         	goto	u2608
  7006   001310                     u2590:
  7007   001310  6A54               	clrf	??_MFRC522_Wr^0,c
  7008   001312                     u2608:
  7009   001312  4654               	rlncf	??_MFRC522_Wr^0,f,c
  7010   001314  508B               	movf	139,w,c	;volatile
  7011   001316  1854               	xorwf	??_MFRC522_Wr^0,w,c
  7012   001318  0BFD               	andlw	-3
  7013   00131A  1854               	xorwf	??_MFRC522_Wr^0,w,c
  7014   00131C  6E8B               	movwf	139,c	;volatile
  7015   00131E  848B               	bsf	139,2,c	;volatile
  7016   001320  90D8               	bcf	status,0,c
  7017   001322  3653               	rlcf	MFRC522_Wr@value^0,f,c
  7018   001324  0E05               	movlw	5
  7019   001326  EC1A  F00E         	call	_delay_us
  7020   00132A  948B               	bcf	139,2,c	;volatile
  7021   00132C  0E05               	movlw	5
  7022   00132E  EC1A  F00E         	call	_delay_us
  7023   001332                     
  7024                           ;TAD_RFID.c: 85:     }
  7025   001332  0657               	decf	MFRC522_Wr@i^0,f,c
  7026   001334  5057               	movf	MFRC522_Wr@i^0,w,c
  7027   001336  A4D8               	btfss	status,2,c
  7028   001338  EFA0  F009         	goto	u2611
  7029   00133C  EFA2  F009         	goto	u2610
  7030   001340                     u2611:
  7031   001340  EF7F  F009         	goto	l3426
  7032   001344                     u2610:
  7033   001344                     
  7034                           ;TAD_RFID.c: 87:     LATCbits.LATC3 = 1;
  7035   001344  868B               	bsf	139,3,c	;volatile
  7036                           
  7037                           ;TAD_RFID.c: 88:     LATCbits.LATC2 = 1;
  7038   001346  848B               	bsf	139,2,c	;volatile
  7039   001348  0012               	return		;funcret
  7040   00134A                     __end_of_MFRC522_Wr:
  7041                           	callstack 0
  7042                           
  7043 ;; *************** function _MFRC522_Rd *****************
  7044 ;; Defined at:
  7045 ;;		line 46 in file "TAD_RFID.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  Address         1    wreg     unsigned char 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  Address         1    4[COMRAM] unsigned char 
  7050 ;;  i               1    7[COMRAM] unsigned char 
  7051 ;;  ucResult        1    6[COMRAM] unsigned char 
  7052 ;;  ucAddr          1    5[COMRAM] unsigned char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      unsigned char 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1
  7062 ;;      Params:         0       0       0
  7063 ;;      Locals:         4       0       0
  7064 ;;      Temps:          1       0       0
  7065 ;;      Totals:         5       0       0
  7066 ;;Total ram usage:        5 bytes
  7067 ;; Hardware stack levels used: 1
  7068 ;; Hardware stack levels required when called: 4
  7069 ;; This function calls:
  7070 ;;		_delay_us
  7071 ;; This function is called by:
  7072 ;;		_MFRC522_Bit_Mask
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text29
  7077   00134A                     __ptext29:
  7078                           	callstack 0
  7079   00134A                     _MFRC522_Rd:
  7080                           	callstack 22
  7081                           
  7082                           ;incstack = 0
  7083                           ;MFRC522_Rd@Address stored from wreg
  7084   00134A  6E54               	movwf	MFRC522_Rd@Address^0,c
  7085   00134C                     
  7086                           ;TAD_RFID.c: 47:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  7087   00134C  5054               	movf	MFRC522_Rd@Address^0,w,c
  7088   00134E  2454               	addwf	MFRC522_Rd@Address^0,w,c
  7089   001350  0B7E               	andlw	126
  7090   001352  0980               	iorlw	128
  7091   001354  6E55               	movwf	MFRC522_Rd@ucAddr^0,c
  7092   001356                     
  7093                           ;TAD_RFID.c: 48:     unsigned char ucResult = 0;
  7094   001356  6A56               	clrf	MFRC522_Rd@ucResult^0,c
  7095   001358                     
  7096                           ;TAD_RFID.c: 50:     LATCbits.LATC2 = 0;
  7097   001358  948B               	bcf	139,2,c	;volatile
  7098   00135A                     
  7099                           ;TAD_RFID.c: 51:     LATCbits.LATC3 = 0;
  7100   00135A  968B               	bcf	139,3,c	;volatile
  7101   00135C                     
  7102                           ;TAD_RFID.c: 54:     for (i = 8; i > 0; i--) {
  7103   00135C  0E08               	movlw	8
  7104   00135E  6E57               	movwf	MFRC522_Rd@i^0,c
  7105   001360                     l3362:
  7106   001360  BE55               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  7107   001362  EFB5  F009         	goto	u2511
  7108   001366  EFB9  F009         	goto	u2510
  7109   00136A                     u2511:
  7110   00136A  6A53               	clrf	??_MFRC522_Rd^0,c
  7111   00136C  2A53               	incf	??_MFRC522_Rd^0,f,c
  7112   00136E  EFBA  F009         	goto	u2528
  7113   001372                     u2510:
  7114   001372  6A53               	clrf	??_MFRC522_Rd^0,c
  7115   001374                     u2528:
  7116   001374  4653               	rlncf	??_MFRC522_Rd^0,f,c
  7117   001376  508B               	movf	139,w,c	;volatile
  7118   001378  1853               	xorwf	??_MFRC522_Rd^0,w,c
  7119   00137A  0BFD               	andlw	-3
  7120   00137C  1853               	xorwf	??_MFRC522_Rd^0,w,c
  7121   00137E  6E8B               	movwf	139,c	;volatile
  7122   001380  848B               	bsf	139,2,c	;volatile
  7123   001382  90D8               	bcf	status,0,c
  7124   001384  3655               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  7125   001386  0E05               	movlw	5
  7126   001388  EC1A  F00E         	call	_delay_us
  7127   00138C  948B               	bcf	139,2,c	;volatile
  7128   00138E  0E05               	movlw	5
  7129   001390  EC1A  F00E         	call	_delay_us
  7130   001394                     
  7131                           ;TAD_RFID.c: 56:     }
  7132   001394  0657               	decf	MFRC522_Rd@i^0,f,c
  7133   001396  5057               	movf	MFRC522_Rd@i^0,w,c
  7134   001398  A4D8               	btfss	status,2,c
  7135   00139A  EFD1  F009         	goto	u2531
  7136   00139E  EFD3  F009         	goto	u2530
  7137   0013A2                     u2531:
  7138   0013A2  EFB0  F009         	goto	l3362
  7139   0013A6                     u2530:
  7140   0013A6                     
  7141                           ;TAD_RFID.c: 58:     for (i = 8; i > 0; i--) {
  7142   0013A6  0E08               	movlw	8
  7143   0013A8  6E57               	movwf	MFRC522_Rd@i^0,c
  7144   0013AA                     l224:
  7145                           
  7146                           ;TAD_RFID.c: 59:         LATCbits.LATC2 = 1;
  7147   0013AA  848B               	bsf	139,2,c	;volatile
  7148   0013AC                     
  7149                           ;TAD_RFID.c: 60:         delay_us(5);
  7150   0013AC  0E05               	movlw	5
  7151   0013AE  EC1A  F00E         	call	_delay_us
  7152   0013B2                     
  7153                           ;TAD_RFID.c: 61:         ucResult <<= 1;
  7154   0013B2  90D8               	bcf	status,0,c
  7155   0013B4  3656               	rlcf	MFRC522_Rd@ucResult^0,f,c
  7156   0013B6                     
  7157                           ;TAD_RFID.c: 62:         ucResult|= PORTCbits.RC0;
  7158   0013B6  B082               	btfsc	130,0,c	;volatile
  7159   0013B8  EFE0  F009         	goto	u2541
  7160   0013BC  EFE3  F009         	goto	u2540
  7161   0013C0                     u2541:
  7162   0013C0  0E01               	movlw	1
  7163   0013C2  EFE4  F009         	goto	u2546
  7164   0013C6                     u2540:
  7165   0013C6  0E00               	movlw	0
  7166   0013C8                     u2546:
  7167   0013C8  1256               	iorwf	MFRC522_Rd@ucResult^0,f,c
  7168   0013CA                     
  7169                           ;TAD_RFID.c: 63:         LATCbits.LATC2 = 0;
  7170   0013CA  948B               	bcf	139,2,c	;volatile
  7171                           
  7172                           ;TAD_RFID.c: 64:         delay_us(5);
  7173   0013CC  0E05               	movlw	5
  7174   0013CE  EC1A  F00E         	call	_delay_us
  7175   0013D2                     
  7176                           ;TAD_RFID.c: 65:     }
  7177   0013D2  0657               	decf	MFRC522_Rd@i^0,f,c
  7178   0013D4  5057               	movf	MFRC522_Rd@i^0,w,c
  7179   0013D6  A4D8               	btfss	status,2,c
  7180   0013D8  EFF0  F009         	goto	u2551
  7181   0013DC  EFF2  F009         	goto	u2550
  7182   0013E0                     u2551:
  7183   0013E0  EFD5  F009         	goto	l224
  7184   0013E4                     u2550:
  7185   0013E4                     
  7186                           ;TAD_RFID.c: 67:     LATCbits.LATC3 = 1;
  7187   0013E4  868B               	bsf	139,3,c	;volatile
  7188                           
  7189                           ;TAD_RFID.c: 68:     LATCbits.LATC2 = 1;
  7190   0013E6  848B               	bsf	139,2,c	;volatile
  7191   0013E8                     
  7192                           ;TAD_RFID.c: 69:     return ucResult;
  7193   0013E8  5056               	movf	MFRC522_Rd@ucResult^0,w,c
  7194   0013EA  0012               	return		;funcret
  7195   0013EC                     __end_of_MFRC522_Rd:
  7196                           	callstack 0
  7197                           
  7198 ;; *************** function _delay_us *****************
  7199 ;; Defined at:
  7200 ;;		line 31 in file "TAD_RFID.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  howMany         1    wreg     unsigned char 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  howMany         1    1[COMRAM] unsigned char 
  7205 ;;  x               1    2[COMRAM] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0, prodl, prodh
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1
  7215 ;;      Params:         0       0       0
  7216 ;;      Locals:         2       0       0
  7217 ;;      Temps:          0       0       0
  7218 ;;      Totals:         2       0       0
  7219 ;;Total ram usage:        2 bytes
  7220 ;; Hardware stack levels used: 1
  7221 ;; Hardware stack levels required when called: 3
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_MFRC522_Rd
  7226 ;;		_MFRC522_Wr
  7227 ;;		_MFRC522_Reset
  7228 ;;		_processBit
  7229 ;;		_motor_Read
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text30
  7234   001C34                     __ptext30:
  7235                           	callstack 0
  7236   001C34                     _delay_us:
  7237                           	callstack 24
  7238                           
  7239                           ;incstack = 0
  7240                           ;delay_us@howMany stored from wreg
  7241   001C34  6E51               	movwf	delay_us@howMany^0,c
  7242   001C36                     
  7243                           ;TAD_RFID.c: 32:     char x = howMany * 8;
  7244   001C36  5051               	movf	delay_us@howMany^0,w,c
  7245   001C38  0D08               	mullw	8
  7246   001C3A  CFF3 F052          	movff	prodl,delay_us@x
  7247                           
  7248                           ;TAD_RFID.c: 33:     while(x--) __nop();
  7249   001C3E  EF22  F00E         	goto	l3342
  7250   001C42                     l215:
  7251   001C42  0000               	nop	
  7252   001C44                     l3342:
  7253   001C44  0652               	decf	delay_us@x^0,f,c
  7254   001C46  2852               	incf	delay_us@x^0,w,c
  7255   001C48  A4D8               	btfss	status,2,c
  7256   001C4A  EF29  F00E         	goto	u2491
  7257   001C4E  EF2B  F00E         	goto	u2490
  7258   001C52                     u2491:
  7259   001C52  EF21  F00E         	goto	l215
  7260   001C56                     u2490:
  7261   001C56  0012               	return		;funcret
  7262   001C58                     __end_of_delay_us:
  7263                           	callstack 0
  7264                           
  7265 ;; *************** function _InitPortDirections *****************
  7266 ;; Defined at:
  7267 ;;		line 22 in file "TAD_RFID.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		None
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1
  7281 ;;      Params:         0       0       0
  7282 ;;      Locals:         0       0       0
  7283 ;;      Temps:          0       0       0
  7284 ;;      Totals:         0       0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used: 1
  7287 ;; Hardware stack levels required when called: 3
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_initRFID
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text31
  7296   001D62                     __ptext31:
  7297                           	callstack 0
  7298   001D62                     _InitPortDirections:
  7299                           	callstack 26
  7300   001D62                     
  7301                           ;TAD_RFID.c: 23:     TRISCbits.TRISC0 = 1;
  7302   001D62  8094               	bsf	148,0,c	;volatile
  7303                           
  7304                           ;TAD_RFID.c: 24:     TRISCbits.TRISC1 = 0;
  7305   001D64  9294               	bcf	148,1,c	;volatile
  7306                           
  7307                           ;TAD_RFID.c: 25:     TRISCbits.TRISC2 = 0;
  7308   001D66  9494               	bcf	148,2,c	;volatile
  7309                           
  7310                           ;TAD_RFID.c: 26:     TRISCbits.TRISC3 = 0;
  7311   001D68  9694               	bcf	148,3,c	;volatile
  7312                           
  7313                           ;TAD_RFID.c: 27:     TRISCbits.TRISC4 = 0;
  7314   001D6A  9894               	bcf	148,4,c	;volatile
  7315   001D6C  0012               	return		;funcret
  7316   001D6E                     __end_of_InitPortDirections:
  7317                           	callstack 0
  7318                           
  7319 ;; *************** function _initPorts *****************
  7320 ;; Defined at:
  7321 ;;		line 63 in file "main.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;		None
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  1    wreg      void 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1
  7335 ;;      Params:         0       0       0
  7336 ;;      Locals:         0       0       0
  7337 ;;      Temps:          0       0       0
  7338 ;;      Totals:         0       0       0
  7339 ;;Total ram usage:        0 bytes
  7340 ;; Hardware stack levels used: 1
  7341 ;; Hardware stack levels required when called: 3
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		_main
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text32
  7350   001D9E                     __ptext32:
  7351                           	callstack 0
  7352   001D9E                     _initPorts:
  7353                           	callstack 27
  7354   001D9E  0E0F               	movlw	15
  7355   001DA0  6EC1               	movwf	193,c	;volatile
  7356   001DA2  9496               	bcf	150,2,c	;volatile
  7357   001DA4  0012               	return		;funcret
  7358   001DA6                     __end_of_initPorts:
  7359                           	callstack 0
  7360                           
  7361 ;; *************** function _initLeds *****************
  7362 ;; Defined at:
  7363 ;;		line 9 in file "TAD_LEDS.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMRAM   BANK0   BANK1
  7377 ;;      Params:         0       0       0
  7378 ;;      Locals:         0       0       0
  7379 ;;      Temps:          0       0       0
  7380 ;;      Totals:         0       0       0
  7381 ;;Total ram usage:        0 bytes
  7382 ;; Hardware stack levels used: 1
  7383 ;; Hardware stack levels required when called: 4
  7384 ;; This function calls:
  7385 ;;		_TI_NewTimer
  7386 ;; This function is called by:
  7387 ;;		_main
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text33
  7392   001D54                     __ptext33:
  7393                           	callstack 0
  7394   001D54                     _initLeds:
  7395                           	callstack 26
  7396   001D54                     
  7397                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  7398   001D54  6A92               	clrf	146,c	;volatile
  7399                           
  7400                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  7401   001D56  6A96               	clrf	150,c	;volatile
  7402   001D58                     
  7403                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  7404   001D58  0E46               	movlw	low _timer@TAD_LEDS$F977
  7405   001D5A  6E51               	movwf	TI_NewTimer@TimerHandle^0,c
  7406   001D5C  EC72  F00C         	call	_TI_NewTimer	;wreg free
  7407   001D60  0012               	return		;funcret
  7408   001D62                     __end_of_initLeds:
  7409                           	callstack 0
  7410                           
  7411 ;; *************** function _initData *****************
  7412 ;; Defined at:
  7413 ;;		line 26 in file "TAD_DATOS.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		None
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1
  7427 ;;      Params:         0       0       0
  7428 ;;      Locals:         0       0       0
  7429 ;;      Temps:          0       0       0
  7430 ;;      Totals:         0       0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used: 1
  7433 ;; Hardware stack levels required when called: 3
  7434 ;; This function calls:
  7435 ;;		Nothing
  7436 ;; This function is called by:
  7437 ;;		_main
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text34
  7442   001D6E                     __ptext34:
  7443                           	callstack 0
  7444   001D6E                     _initData:
  7445                           	callstack 27
  7446   001D6E                     
  7447                           ;TAD_DATOS.c: 27:  currentUser[0] = 0x00;
  7448   001D6E  6A41               	clrf	_currentUser^0,c
  7449                           
  7450                           ;TAD_DATOS.c: 28:  currentUser[1] = 0x00;
  7451   001D70  6A42               	clrf	(_currentUser+1)^0,c
  7452                           
  7453                           ;TAD_DATOS.c: 29:  currentUser[2] = 0x00;
  7454   001D72  6A43               	clrf	(_currentUser+2)^0,c
  7455                           
  7456                           ;TAD_DATOS.c: 30:  currentUser[3] = 0x00;
  7457   001D74  6A44               	clrf	(_currentUser+3)^0,c
  7458                           
  7459                           ;TAD_DATOS.c: 31:  currentUser[4] = 0x00;
  7460   001D76  6A45               	clrf	(_currentUser+4)^0,c
  7461   001D78  0012               	return		;funcret
  7462   001D7A                     __end_of_initData:
  7463                           	callstack 0
  7464                           
  7465 ;; *************** function _Terminal_Init *****************
  7466 ;; Defined at:
  7467 ;;		line 11 in file "TAD_TERMINAL.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1
  7481 ;;      Params:         0       0       0
  7482 ;;      Locals:         0       0       0
  7483 ;;      Temps:          0       0       0
  7484 ;;      Totals:         0       0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used: 1
  7487 ;; Hardware stack levels required when called: 3
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_main
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text35
  7496   001D44                     __ptext35:
  7497                           	callstack 0
  7498   001D44                     _Terminal_Init:
  7499                           	callstack 27
  7500   001D44                     
  7501                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  7502   001D44  0E24               	movlw	36
  7503   001D46  6EAC               	movwf	172,c	;volatile
  7504                           
  7505                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  7506   001D48  0E90               	movlw	144
  7507   001D4A  6EAB               	movwf	171,c	;volatile
  7508   001D4C                     
  7509                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  7510   001D4C  68AF               	setf	175,c	;volatile
  7511   001D4E                     
  7512                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  7513   001D4E  6AB8               	clrf	184,c	;volatile
  7514   001D50                     
  7515                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  7516   001D50  6A23               	clrf	_hashtag_pressed^0,c
  7517   001D52  0012               	return		;funcret
  7518   001D54                     __end_of_Terminal_Init:
  7519                           	callstack 0
  7520                           
  7521 ;; *************** function _TI_Init *****************
  7522 ;; Defined at:
  7523 ;;		line 32 in file "TAD_TIMER.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  counter         1    1[COMRAM] unsigned char 
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      void 
  7530 ;; Registers used:
  7531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1
  7537 ;;      Params:         0       0       0
  7538 ;;      Locals:         1       0       0
  7539 ;;      Temps:          0       0       0
  7540 ;;      Totals:         1       0       0
  7541 ;;Total ram usage:        1 bytes
  7542 ;; Hardware stack levels used: 1
  7543 ;; Hardware stack levels required when called: 3
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_main
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text36
  7552   001B7A                     __ptext36:
  7553                           	callstack 0
  7554   001B7A                     _TI_Init:
  7555                           	callstack 27
  7556   001B7A                     
  7557                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7558   001B7A  6A51               	clrf	TI_Init@counter^0,c
  7559   001B7C                     l3908:
  7560                           
  7561                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7562   001B7C  5051               	movf	TI_Init@counter^0,w,c
  7563   001B7E  0D05               	mullw	5
  7564   001B80  50F3               	movf	243,w,c
  7565   001B82  0FDC               	addlw	low (_Timers+4)
  7566   001B84  6ED9               	movwf	fsr2l,c
  7567   001B86  6ADA               	clrf	fsr2h,c
  7568   001B88  6ADF               	clrf	indf2,c
  7569   001B8A                     
  7570                           ;TAD_TIMER.c: 35:  }
  7571   001B8A  2A51               	incf	TI_Init@counter^0,f,c
  7572   001B8C  0E03               	movlw	3
  7573   001B8E  6451               	cpfsgt	TI_Init@counter^0,c
  7574   001B90  EFCC  F00D         	goto	u3161
  7575   001B94  EFCE  F00D         	goto	u3160
  7576   001B98                     u3161:
  7577   001B98  EFBE  F00D         	goto	l3908
  7578   001B9C                     u3160:
  7579   001B9C                     
  7580                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7581   001B9C  0E82               	movlw	130
  7582   001B9E  6ED5               	movwf	213,c	;volatile
  7583                           
  7584                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7585   001BA0  0EF6               	movlw	246
  7586   001BA2  6ED7               	movwf	215,c	;volatile
  7587   001BA4  0E3C               	movlw	60
  7588   001BA6  6ED6               	movwf	214,c	;volatile
  7589   001BA8                     
  7590                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7591   001BA8  94F2               	bcf	242,2,c	;volatile
  7592   001BAA                     
  7593                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7594   001BAA  8AF2               	bsf	242,5,c	;volatile
  7595   001BAC  0012               	return		;funcret
  7596   001BAE                     __end_of_TI_Init:
  7597                           	callstack 0
  7598                           
  7599 ;; *************** function _LcInit *****************
  7600 ;; Defined at:
  7601 ;;		line 68 in file "TAD_DISPLAY.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  rows            1    wreg     unsigned char 
  7604 ;;  columns         1   22[COMRAM] unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  rows            1   23[COMRAM] unsigned char 
  7607 ;;  i               2   24[COMRAM] int 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1
  7617 ;;      Params:         1       0       0
  7618 ;;      Locals:         3       0       0
  7619 ;;      Temps:          0       0       0
  7620 ;;      Totals:         4       0       0
  7621 ;;Total ram usage:        4 bytes
  7622 ;; Hardware stack levels used: 1
  7623 ;; Hardware stack levels required when called: 6
  7624 ;; This function calls:
  7625 ;;		_CantaIR
  7626 ;;		_EscriuPrimeraOrdre
  7627 ;;		_Espera
  7628 ;;		_TI_NewTimer
  7629 ;;		_WaitForBusy
  7630 ;; This function is called by:
  7631 ;;		_main
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text37
  7636   001004                     __ptext37:
  7637                           	callstack 0
  7638   001004                     _LcInit:
  7639                           	callstack 24
  7640                           
  7641                           ;incstack = 0
  7642                           ;LcInit@rows stored from wreg
  7643   001004  6E67               	movwf	LcInit@rows^0,c
  7644   001006                     
  7645                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7646   001006  0E47               	movlw	low _Timer
  7647   001008  6E51               	movwf	TI_NewTimer@TimerHandle^0,c
  7648   00100A  EC72  F00C         	call	_TI_NewTimer	;wreg free
  7649   00100E                     
  7650                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7651   00100E  C067  F028         	movff	LcInit@rows,_Rows
  7652   001012  C066  F027         	movff	LcInit@columns,_Columns
  7653   001016                     
  7654                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7655   001016  6A25               	clrf	_ColumnAct^0,c
  7656   001018  6A26               	clrf	_RowAct^0,c
  7657   00101A                     
  7658                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7659   00101A  9293               	bcf	147,1,c	;volatile
  7660   00101C  9493               	bcf	147,2,c	;volatile
  7661   00101E  9693               	bcf	147,3,c	;volatile
  7662   001020                     
  7663                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7664   001020  0E00               	movlw	0
  7665   001022  6E69               	movwf	(LcInit@i+1)^0,c
  7666   001024  0E00               	movlw	0
  7667   001026  6E68               	movwf	LcInit@i^0,c
  7668   001028                     l3956:
  7669                           
  7670                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7671   001028  C047  F05E         	movff	_Timer,Espera@Timer
  7672   00102C  6A5F               	clrf	(Espera@Timer+1)^0,c
  7673   00102E  0E00               	movlw	0
  7674   001030  6E61               	movwf	(Espera@ms+1)^0,c
  7675   001032  0E64               	movlw	100
  7676   001034  6E60               	movwf	Espera@ms^0,c
  7677   001036  EC30  F00D         	call	_Espera	;wreg free
  7678   00103A                     
  7679                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7680   00103A  0E03               	movlw	3
  7681   00103C  EC92  F00A         	call	_EscriuPrimeraOrdre
  7682   001040                     
  7683                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7684   001040  C047  F05E         	movff	_Timer,Espera@Timer
  7685   001044  6A5F               	clrf	(Espera@Timer+1)^0,c
  7686   001046  0E00               	movlw	0
  7687   001048  6E61               	movwf	(Espera@ms+1)^0,c
  7688   00104A  0E04               	movlw	4
  7689   00104C  6E60               	movwf	Espera@ms^0,c
  7690   00104E  EC30  F00D         	call	_Espera	;wreg free
  7691                           
  7692                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7693   001052  0E03               	movlw	3
  7694   001054  EC92  F00A         	call	_EscriuPrimeraOrdre
  7695   001058                     
  7696                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7697   001058  C047  F05E         	movff	_Timer,Espera@Timer
  7698   00105C  6A5F               	clrf	(Espera@Timer+1)^0,c
  7699   00105E  0E00               	movlw	0
  7700   001060  6E61               	movwf	(Espera@ms+1)^0,c
  7701   001062  0E01               	movlw	1
  7702   001064  6E60               	movwf	Espera@ms^0,c
  7703   001066  EC30  F00D         	call	_Espera	;wreg free
  7704   00106A                     
  7705                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7706   00106A  0E03               	movlw	3
  7707   00106C  EC92  F00A         	call	_EscriuPrimeraOrdre
  7708                           
  7709                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7710   001070  C047  F05E         	movff	_Timer,Espera@Timer
  7711   001074  6A5F               	clrf	(Espera@Timer+1)^0,c
  7712   001076  0E00               	movlw	0
  7713   001078  6E61               	movwf	(Espera@ms+1)^0,c
  7714   00107A  0E01               	movlw	1
  7715   00107C  6E60               	movwf	Espera@ms^0,c
  7716   00107E  EC30  F00D         	call	_Espera	;wreg free
  7717   001082                     
  7718                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7719   001082  0E02               	movlw	2
  7720   001084  EC92  F00A         	call	_EscriuPrimeraOrdre
  7721   001088                     
  7722                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7723   001088  C047  F05E         	movff	_Timer,Espera@Timer
  7724   00108C  6A5F               	clrf	(Espera@Timer+1)^0,c
  7725   00108E  0E00               	movlw	0
  7726   001090  6E61               	movwf	(Espera@ms+1)^0,c
  7727   001092  0E01               	movlw	1
  7728   001094  6E60               	movwf	Espera@ms^0,c
  7729   001096  EC30  F00D         	call	_Espera	;wreg free
  7730                           
  7731                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7732   00109A  0E28               	movlw	40
  7733   00109C  ECD7  F00D         	call	_CantaIR
  7734   0010A0                     
  7735                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7736   0010A0  EC98  F00E         	call	_WaitForBusy	;wreg free
  7737   0010A4  0E08               	movlw	8
  7738   0010A6  ECD7  F00D         	call	_CantaIR
  7739                           
  7740                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7741   0010AA  EC98  F00E         	call	_WaitForBusy	;wreg free
  7742   0010AE  0E01               	movlw	1
  7743   0010B0  ECD7  F00D         	call	_CantaIR
  7744   0010B4                     
  7745                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7746   0010B4  C047  F05E         	movff	_Timer,Espera@Timer
  7747   0010B8  6A5F               	clrf	(Espera@Timer+1)^0,c
  7748   0010BA  0E00               	movlw	0
  7749   0010BC  6E61               	movwf	(Espera@ms+1)^0,c
  7750   0010BE  0E02               	movlw	2
  7751   0010C0  6E60               	movwf	Espera@ms^0,c
  7752   0010C2  EC30  F00D         	call	_Espera	;wreg free
  7753   0010C6                     
  7754                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7755   0010C6  EC98  F00E         	call	_WaitForBusy	;wreg free
  7756   0010CA  0E06               	movlw	6
  7757   0010CC  ECD7  F00D         	call	_CantaIR
  7758                           
  7759                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7760   0010D0  EC98  F00E         	call	_WaitForBusy	;wreg free
  7761   0010D4  0E0F               	movlw	15
  7762   0010D6  ECD7  F00D         	call	_CantaIR
  7763   0010DA                     
  7764                           ;TAD_DISPLAY.c: 101:  }
  7765   0010DA  4A68               	infsnz	LcInit@i^0,f,c
  7766   0010DC  2A69               	incf	(LcInit@i+1)^0,f,c
  7767   0010DE  BE69               	btfsc	(LcInit@i+1)^0,7,c
  7768   0010E0  EF7B  F008         	goto	u3171
  7769   0010E4  5069               	movf	(LcInit@i+1)^0,w,c
  7770   0010E6  E109               	bnz	u3170
  7771   0010E8  0E02               	movlw	2
  7772   0010EA  5C68               	subwf	LcInit@i^0,w,c
  7773   0010EC  A0D8               	btfss	status,0,c
  7774   0010EE  EF7B  F008         	goto	u3171
  7775   0010F2  EF7D  F008         	goto	u3170
  7776   0010F6                     u3171:
  7777   0010F6  EF14  F008         	goto	l3956
  7778   0010FA                     u3170:
  7779   0010FA  0012               	return		;funcret
  7780   0010FC                     __end_of_LcInit:
  7781                           	callstack 0
  7782                           
  7783 ;; *************** function _WaitForBusy *****************
  7784 ;; Defined at:
  7785 ;;		line 256 in file "TAD_DISPLAY.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  Busy            1    0        unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1
  7799 ;;      Params:         0       0       0
  7800 ;;      Locals:         0       0       0
  7801 ;;      Temps:          0       0       0
  7802 ;;      Totals:         0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used: 1
  7805 ;; Hardware stack levels required when called: 5
  7806 ;; This function calls:
  7807 ;;		_Espera
  7808 ;; This function is called by:
  7809 ;;		_LcInit
  7810 ;;		_LcClear
  7811 ;;		_LcCursorOn
  7812 ;;		_LcCursorOff
  7813 ;;		_LcGotoXY
  7814 ;;		_LcPutChar
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text38
  7819   001D30                     __ptext38:
  7820                           	callstack 0
  7821   001D30                     _WaitForBusy:
  7822                           	callstack 24
  7823   001D30                     
  7824                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  7825   001D30  C047  F05E         	movff	_Timer,Espera@Timer
  7826   001D34  6A5F               	clrf	(Espera@Timer+1)^0,c
  7827   001D36  0E00               	movlw	0
  7828   001D38  6E61               	movwf	(Espera@ms+1)^0,c
  7829   001D3A  0E02               	movlw	2
  7830   001D3C  6E60               	movwf	Espera@ms^0,c
  7831   001D3E  EC30  F00D         	call	_Espera	;wreg free
  7832   001D42  0012               	return		;funcret
  7833   001D44                     __end_of_WaitForBusy:
  7834                           	callstack 0
  7835                           
  7836 ;; *************** function _Espera *****************
  7837 ;; Defined at:
  7838 ;;		line 205 in file "TAD_DISPLAY.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  Timer           2   14[COMRAM] int 
  7841 ;;  ms              2   16[COMRAM] int 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1
  7853 ;;      Params:         4       0       0
  7854 ;;      Locals:         0       0       0
  7855 ;;      Temps:          4       0       0
  7856 ;;      Totals:         8       0       0
  7857 ;;Total ram usage:        8 bytes
  7858 ;; Hardware stack levels used: 1
  7859 ;; Hardware stack levels required when called: 4
  7860 ;; This function calls:
  7861 ;;		_TI_GetTics
  7862 ;;		_TI_ResetTics
  7863 ;; This function is called by:
  7864 ;;		_LcInit
  7865 ;;		_WaitForBusy
  7866 ;;		_LcClear
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text39
  7871   001A60                     __ptext39:
  7872                           	callstack 0
  7873   001A60                     _Espera:
  7874                           	callstack 24
  7875   001A60                     
  7876                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  7877   001A60  505E               	movf	Espera@Timer^0,w,c
  7878   001A62  EC2C  F00E         	call	_TI_ResetTics
  7879   001A66                     l3522:
  7880   001A66  C060  F062         	movff	Espera@ms,??_Espera
  7881   001A6A  C061  F063         	movff	Espera@ms+1,??_Espera+1
  7882   001A6E  0E00               	movlw	0
  7883   001A70  BE63               	btfsc	(??_Espera+1)^0,7,c
  7884   001A72  0EFF               	movlw	255
  7885   001A74  6E64               	movwf	(??_Espera+2)^0,c
  7886   001A76  6E65               	movwf	(??_Espera+3)^0,c
  7887   001A78  505E               	movf	Espera@Timer^0,w,c
  7888   001A7A  ECC3  F00C         	call	_TI_GetTics
  7889   001A7E  5062               	movf	??_Espera^0,w,c
  7890   001A80  5C51               	subwf	?_TI_GetTics^0,w,c
  7891   001A82  5063               	movf	(??_Espera+1)^0,w,c
  7892   001A84  5852               	subwfb	(?_TI_GetTics+1)^0,w,c
  7893   001A86  5064               	movf	(??_Espera+2)^0,w,c
  7894   001A88  5853               	subwfb	(?_TI_GetTics+2)^0,w,c
  7895   001A8A  5065               	movf	(??_Espera+3)^0,w,c
  7896   001A8C  5854               	subwfb	(?_TI_GetTics+3)^0,w,c
  7897   001A8E  A0D8               	btfss	status,0,c
  7898   001A90  EF4C  F00D         	goto	u2701
  7899   001A94  EF4E  F00D         	goto	u2700
  7900   001A98                     u2701:
  7901   001A98  EF33  F00D         	goto	l3522
  7902   001A9C                     u2700:
  7903   001A9C  0012               	return		;funcret
  7904   001A9E                     __end_of_Espera:
  7905                           	callstack 0
  7906                           
  7907 ;; *************** function _TI_ResetTics *****************
  7908 ;; Defined at:
  7909 ;;		line 53 in file "TAD_TIMER.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  TimerHandle     1    wreg     unsigned char 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      void 
  7916 ;; Registers used:
  7917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1
  7923 ;;      Params:         0       0       0
  7924 ;;      Locals:         1       0       0
  7925 ;;      Temps:          0       0       0
  7926 ;;      Totals:         1       0       0
  7927 ;;Total ram usage:        1 bytes
  7928 ;; Hardware stack levels used: 1
  7929 ;; Hardware stack levels required when called: 3
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_Espera
  7934 ;;		_motorTeclado
  7935 ;;		_motor_LEDs
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text40
  7940   001C58                     __ptext40:
  7941                           	callstack 0
  7942   001C58                     _TI_ResetTics:
  7943                           	callstack 24
  7944                           
  7945                           ;incstack = 0
  7946                           ;TI_ResetTics@TimerHandle stored from wreg
  7947   001C58  6E51               	movwf	TI_ResetTics@TimerHandle^0,c
  7948   001C5A                     
  7949                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  7950   001C5A  9EF2               	bcf	242,7,c	;volatile
  7951   001C5C  5051               	movf	TI_ResetTics@TimerHandle^0,w,c
  7952   001C5E  0D05               	mullw	5
  7953   001C60  50F3               	movf	243,w,c
  7954   001C62  0FD8               	addlw	low _Timers
  7955   001C64  6ED9               	movwf	fsr2l,c
  7956   001C66  6ADA               	clrf	fsr2h,c
  7957   001C68  C00B  FFDE         	movff	_Tics,postinc2	;volatile
  7958   001C6C  C00C  FFDE         	movff	_Tics+1,postinc2	;volatile
  7959   001C70  C00D  FFDE         	movff	_Tics+2,postinc2	;volatile
  7960   001C74  C00E  FFDE         	movff	_Tics+3,postinc2	;volatile
  7961   001C78  8EF2               	bsf	242,7,c	;volatile
  7962   001C7A  0012               	return		;funcret
  7963   001C7C                     __end_of_TI_ResetTics:
  7964                           	callstack 0
  7965                           
  7966 ;; *************** function _TI_GetTics *****************
  7967 ;; Defined at:
  7968 ;;		line 61 in file "TAD_TIMER.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  TimerHandle     1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  7973 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  4    1[COMRAM] unsigned long 
  7976 ;; Registers used:
  7977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1
  7983 ;;      Params:         4       0       0
  7984 ;;      Locals:         5       0       0
  7985 ;;      Temps:          4       0       0
  7986 ;;      Totals:        13       0       0
  7987 ;;Total ram usage:       13 bytes
  7988 ;; Hardware stack levels used: 1
  7989 ;; Hardware stack levels required when called: 3
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_Espera
  7994 ;;		_motorTeclado
  7995 ;;		_motor_LEDs
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           	psect	text41
  8000   001986                     __ptext41:
  8001                           	callstack 0
  8002   001986                     _TI_GetTics:
  8003                           	callstack 24
  8004                           
  8005                           ;incstack = 0
  8006                           ;TI_GetTics@TimerHandle stored from wreg
  8007   001986  6E5D               	movwf	TI_GetTics@TimerHandle^0,c
  8008   001988                     
  8009                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8010   001988  9EF2               	bcf	242,7,c	;volatile
  8011   00198A  C00B  F059         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8012   00198E  C00C  F05A         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8013   001992  C00D  F05B         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8014   001996  C00E  F05C         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8015   00199A  8EF2               	bsf	242,7,c	;volatile
  8016   00199C                     
  8017                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8018   00199C  505D               	movf	TI_GetTics@TimerHandle^0,w,c
  8019   00199E  0D05               	mullw	5
  8020   0019A0  50F3               	movf	243,w,c
  8021   0019A2  0FD8               	addlw	low _Timers
  8022   0019A4  6ED9               	movwf	fsr2l,c
  8023   0019A6  6ADA               	clrf	fsr2h,c
  8024   0019A8  CFDE F055          	movff	postinc2,??_TI_GetTics
  8025   0019AC  CFDE F056          	movff	postinc2,??_TI_GetTics+1
  8026   0019B0  CFDE F057          	movff	postinc2,??_TI_GetTics+2
  8027   0019B4  CFDE F058          	movff	postinc2,??_TI_GetTics+3
  8028   0019B8  5055               	movf	??_TI_GetTics^0,w,c
  8029   0019BA  5C59               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8030   0019BC  6E51               	movwf	?_TI_GetTics^0,c
  8031   0019BE  5056               	movf	(??_TI_GetTics+1)^0,w,c
  8032   0019C0  585A               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8033   0019C2  6E52               	movwf	(?_TI_GetTics+1)^0,c
  8034   0019C4  5057               	movf	(??_TI_GetTics+2)^0,w,c
  8035   0019C6  585B               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8036   0019C8  6E53               	movwf	(?_TI_GetTics+2)^0,c
  8037   0019CA  5058               	movf	(??_TI_GetTics+3)^0,w,c
  8038   0019CC  585C               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8039   0019CE  6E54               	movwf	(?_TI_GetTics+3)^0,c
  8040   0019D0  0012               	return		;funcret
  8041   0019D2                     __end_of_TI_GetTics:
  8042                           	callstack 0
  8043                           
  8044 ;; *************** function _TI_NewTimer *****************
  8045 ;; Defined at:
  8046 ;;		line 43 in file "TAD_TIMER.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8049 ;;		 -> timer@TAD_LEDS$F977(1), Timer(1), timer(1), 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  Comptador       1    3[COMRAM] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      unsigned char 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1
  8061 ;;      Params:         1       0       0
  8062 ;;      Locals:         1       0       0
  8063 ;;      Temps:          1       0       0
  8064 ;;      Totals:         3       0       0
  8065 ;;Total ram usage:        3 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 3
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_initTeclado
  8072 ;;		_LcInit
  8073 ;;		_initLeds
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text42
  8078   0018E4                     __ptext42:
  8079                           	callstack 0
  8080   0018E4                     _TI_NewTimer:
  8081                           	callstack 26
  8082   0018E4                     
  8083                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8084   0018E4  6A53               	clrf	TI_NewTimer@Comptador^0,c
  8085                           
  8086                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8087   0018E6  EF81  F00C         	goto	l3632
  8088   0018EA                     l3628:
  8089                           
  8090                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8091   0018EA  2A53               	incf	TI_NewTimer@Comptador^0,f,c
  8092   0018EC  0E04               	movlw	4
  8093   0018EE  1853               	xorwf	TI_NewTimer@Comptador^0,w,c
  8094   0018F0  A4D8               	btfss	status,2,c
  8095   0018F2  EF7D  F00C         	goto	u2961
  8096   0018F6  EF7F  F00C         	goto	u2960
  8097   0018FA                     u2961:
  8098   0018FA  EF81  F00C         	goto	l3632
  8099   0018FE                     u2960:
  8100   0018FE  EF9C  F00C         	goto	l83
  8101   001902                     l3632:
  8102                           
  8103                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8104   001902  5053               	movf	TI_NewTimer@Comptador^0,w,c
  8105   001904  0D05               	mullw	5
  8106   001906  50F3               	movf	243,w,c
  8107   001908  0FDC               	addlw	low (_Timers+4)
  8108   00190A  6ED9               	movwf	fsr2l,c
  8109   00190C  6ADA               	clrf	fsr2h,c
  8110   00190E  04DE               	decf	postinc2,w,c
  8111   001910  B4D8               	btfsc	status,2,c
  8112   001912  EF8D  F00C         	goto	u2971
  8113   001916  EF8F  F00C         	goto	u2970
  8114   00191A                     u2971:
  8115   00191A  EF75  F00C         	goto	l3628
  8116   00191E                     u2970:
  8117   00191E                     
  8118                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8119   00191E  5053               	movf	TI_NewTimer@Comptador^0,w,c
  8120   001920  0D05               	mullw	5
  8121   001922  50F3               	movf	243,w,c
  8122   001924  0FDC               	addlw	low (_Timers+4)
  8123   001926  6ED9               	movwf	fsr2l,c
  8124   001928  6ADA               	clrf	fsr2h,c
  8125   00192A  0E01               	movlw	1
  8126   00192C  6EDF               	movwf	indf2,c
  8127   00192E                     
  8128                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8129   00192E  5051               	movf	TI_NewTimer@TimerHandle^0,w,c
  8130   001930  6ED9               	movwf	fsr2l,c
  8131   001932  6ADA               	clrf	fsr2h,c
  8132   001934  C053  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8133   001938                     l83:
  8134   001938  0012               	return		;funcret
  8135   00193A                     __end_of_TI_NewTimer:
  8136                           	callstack 0
  8137                           
  8138 ;; *************** function _EscriuPrimeraOrdre *****************
  8139 ;; Defined at:
  8140 ;;		line 260 in file "TAD_DISPLAY.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  ordre           1    wreg     unsigned char 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  ordre           1    2[COMRAM] unsigned char 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1
  8154 ;;      Params:         0       0       0
  8155 ;;      Locals:         1       0       0
  8156 ;;      Temps:          1       0       0
  8157 ;;      Totals:         2       0       0
  8158 ;;Total ram usage:        2 bytes
  8159 ;; Hardware stack levels used: 1
  8160 ;; Hardware stack levels required when called: 3
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_LcInit
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text43
  8169   001524                     __ptext43:
  8170                           	callstack 0
  8171   001524                     _EscriuPrimeraOrdre:
  8172                           	callstack 26
  8173                           
  8174                           ;incstack = 0
  8175                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8176   001524  6E52               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8177   001526                     
  8178                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8179   001526  9096               	bcf	150,0,c	;volatile
  8180   001528  9296               	bcf	150,1,c	;volatile
  8181   00152A  9A93               	bcf	147,5,c	;volatile
  8182   00152C  9893               	bcf	147,4,c	;volatile
  8183   00152E  968A               	bcf	138,3,c	;volatile
  8184   001530  948A               	bcf	138,2,c	;volatile
  8185                           
  8186                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8187   001532  828A               	bsf	138,1,c	;volatile
  8188   001534  828A               	bsf	138,1,c	;volatile
  8189   001536                     
  8190                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8191   001536  B652               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8192   001538  EFA0  F00A         	goto	u611
  8193   00153C  EFA4  F00A         	goto	u610
  8194   001540                     u611:
  8195   001540  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8196   001542  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  8197   001544  EFA5  F00A         	goto	u628
  8198   001548                     u610:
  8199   001548  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8200   00154A                     u628:
  8201   00154A  508D               	movf	141,w,c	;volatile
  8202   00154C  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8203   00154E  0BFE               	andlw	-2
  8204   001550  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8205   001552  6E8D               	movwf	141,c	;volatile
  8206                           
  8207                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8208   001554  B452               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8209   001556  EFAF  F00A         	goto	u631
  8210   00155A  EFB3  F00A         	goto	u630
  8211   00155E                     u631:
  8212   00155E  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8213   001560  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  8214   001562  EFB4  F00A         	goto	u648
  8215   001566                     u630:
  8216   001566  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8217   001568                     u648:
  8218   001568  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8219   00156A  508D               	movf	141,w,c	;volatile
  8220   00156C  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8221   00156E  0BFD               	andlw	-3
  8222   001570  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8223   001572  6E8D               	movwf	141,c	;volatile
  8224                           
  8225                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8226   001574  B252               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8227   001576  EFBF  F00A         	goto	u651
  8228   00157A  EFC3  F00A         	goto	u650
  8229   00157E                     u651:
  8230   00157E  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8231   001580  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  8232   001582  EFC4  F00A         	goto	u668
  8233   001586                     u650:
  8234   001586  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8235   001588                     u668:
  8236   001588  3A51               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8237   00158A  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8238   00158C  508A               	movf	138,w,c	;volatile
  8239   00158E  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8240   001590  0BDF               	andlw	-33
  8241   001592  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8242   001594  6E8A               	movwf	138,c	;volatile
  8243                           
  8244                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8245   001596  B052               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8246   001598  EFD0  F00A         	goto	u671
  8247   00159C  EFD4  F00A         	goto	u670
  8248   0015A0                     u671:
  8249   0015A0  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8250   0015A2  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  8251   0015A4  EFD5  F00A         	goto	u688
  8252   0015A8                     u670:
  8253   0015A8  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  8254   0015AA                     u688:
  8255   0015AA  3A51               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8256   0015AC  508A               	movf	138,w,c	;volatile
  8257   0015AE  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8258   0015B0  0BEF               	andlw	-17
  8259   0015B2  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8260   0015B4  6E8A               	movwf	138,c	;volatile
  8261   0015B6                     
  8262                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  8263   0015B6  928A               	bcf	138,1,c	;volatile
  8264   0015B8  0012               	return		;funcret
  8265   0015BA                     __end_of_EscriuPrimeraOrdre:
  8266                           	callstack 0
  8267                           
  8268 ;; *************** function _CantaIR *****************
  8269 ;; Defined at:
  8270 ;;		line 224 in file "TAD_DISPLAY.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  IR              1    wreg     unsigned char 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  IR              1    3[COMRAM] unsigned char 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  1    wreg      void 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMRAM   BANK0   BANK1
  8284 ;;      Params:         0       0       0
  8285 ;;      Locals:         1       0       0
  8286 ;;      Temps:          0       0       0
  8287 ;;      Totals:         1       0       0
  8288 ;;Total ram usage:        1 bytes
  8289 ;; Hardware stack levels used: 1
  8290 ;; Hardware stack levels required when called: 4
  8291 ;; This function calls:
  8292 ;;		_CantaPartAlta
  8293 ;;		_CantaPartBaixa
  8294 ;; This function is called by:
  8295 ;;		_LcInit
  8296 ;;		_LcClear
  8297 ;;		_LcCursorOn
  8298 ;;		_LcCursorOff
  8299 ;;		_LcGotoXY
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text44
  8304   001BAE                     __ptext44:
  8305                           	callstack 0
  8306   001BAE                     _CantaIR:
  8307                           	callstack 25
  8308                           
  8309                           ;incstack = 0
  8310                           ;CantaIR@IR stored from wreg
  8311   001BAE  6E53               	movwf	CantaIR@IR^0,c
  8312   001BB0                     
  8313                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8314   001BB0  9096               	bcf	150,0,c	;volatile
  8315   001BB2  9296               	bcf	150,1,c	;volatile
  8316   001BB4  9A93               	bcf	147,5,c	;volatile
  8317   001BB6  9893               	bcf	147,4,c	;volatile
  8318                           
  8319                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8320   001BB8  968A               	bcf	138,3,c	;volatile
  8321                           
  8322                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8323   001BBA  948A               	bcf	138,2,c	;volatile
  8324                           
  8325                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8326   001BBC  828A               	bsf	138,1,c	;volatile
  8327   001BBE                     
  8328                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8329   001BBE  5053               	movf	CantaIR@IR^0,w,c
  8330   001BC0  EC63  F00B         	call	_CantaPartAlta
  8331   001BC4                     
  8332                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8333   001BC4  828A               	bsf	138,1,c	;volatile
  8334   001BC6                     
  8335                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8336   001BC6  928A               	bcf	138,1,c	;volatile
  8337   001BC8                     
  8338                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8339   001BC8  928A               	bcf	138,1,c	;volatile
  8340   001BCA                     
  8341                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8342   001BCA  828A               	bsf	138,1,c	;volatile
  8343                           
  8344                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8345   001BCC  5053               	movf	CantaIR@IR^0,w,c
  8346   001BCE  EC21  F00B         	call	_CantaPartBaixa
  8347   001BD2                     
  8348                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8349   001BD2  828A               	bsf	138,1,c	;volatile
  8350   001BD4                     
  8351                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8352   001BD4  928A               	bcf	138,1,c	;volatile
  8353   001BD6                     
  8354                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8355   001BD6  8096               	bsf	150,0,c	;volatile
  8356   001BD8  8296               	bsf	150,1,c	;volatile
  8357   001BDA  8A93               	bsf	147,5,c	;volatile
  8358   001BDC  8893               	bsf	147,4,c	;volatile
  8359   001BDE  0012               	return		;funcret
  8360   001BE0                     __end_of_CantaIR:
  8361                           	callstack 0
  8362                           
  8363 ;; *************** function _CantaPartBaixa *****************
  8364 ;; Defined at:
  8365 ;;		line 217 in file "TAD_DISPLAY.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;  c               1    wreg     unsigned char 
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  c               1    2[COMRAM] unsigned char 
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      void 
  8372 ;; Registers used:
  8373 ;;		wreg, status,2, status,0
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1
  8379 ;;      Params:         0       0       0
  8380 ;;      Locals:         1       0       0
  8381 ;;      Temps:          1       0       0
  8382 ;;      Totals:         2       0       0
  8383 ;;Total ram usage:        2 bytes
  8384 ;; Hardware stack levels used: 1
  8385 ;; Hardware stack levels required when called: 3
  8386 ;; This function calls:
  8387 ;;		Nothing
  8388 ;; This function is called by:
  8389 ;;		_CantaIR
  8390 ;;		_CantaData
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text45
  8395   001642                     __ptext45:
  8396                           	callstack 0
  8397   001642                     _CantaPartBaixa:
  8398                           	callstack 25
  8399                           
  8400                           ;incstack = 0
  8401                           ;CantaPartBaixa@c stored from wreg
  8402   001642  6E52               	movwf	CantaPartBaixa@c^0,c
  8403   001644                     
  8404                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  8405   001644  B652               	btfsc	CantaPartBaixa@c^0,3,c
  8406   001646  EF27  F00B         	goto	u2791
  8407   00164A  EF2B  F00B         	goto	u2790
  8408   00164E                     u2791:
  8409   00164E  6A51               	clrf	??_CantaPartBaixa^0,c
  8410   001650  2A51               	incf	??_CantaPartBaixa^0,f,c
  8411   001652  EF2C  F00B         	goto	u2808
  8412   001656                     u2790:
  8413   001656  6A51               	clrf	??_CantaPartBaixa^0,c
  8414   001658                     u2808:
  8415   001658  508D               	movf	141,w,c	;volatile
  8416   00165A  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8417   00165C  0BFE               	andlw	-2
  8418   00165E  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8419   001660  6E8D               	movwf	141,c	;volatile
  8420                           
  8421                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  8422   001662  B452               	btfsc	CantaPartBaixa@c^0,2,c
  8423   001664  EF36  F00B         	goto	u2811
  8424   001668  EF3A  F00B         	goto	u2810
  8425   00166C                     u2811:
  8426   00166C  6A51               	clrf	??_CantaPartBaixa^0,c
  8427   00166E  2A51               	incf	??_CantaPartBaixa^0,f,c
  8428   001670  EF3B  F00B         	goto	u2828
  8429   001674                     u2810:
  8430   001674  6A51               	clrf	??_CantaPartBaixa^0,c
  8431   001676                     u2828:
  8432   001676  4651               	rlncf	??_CantaPartBaixa^0,f,c
  8433   001678  508D               	movf	141,w,c	;volatile
  8434   00167A  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8435   00167C  0BFD               	andlw	-3
  8436   00167E  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8437   001680  6E8D               	movwf	141,c	;volatile
  8438                           
  8439                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  8440   001682  B252               	btfsc	CantaPartBaixa@c^0,1,c
  8441   001684  EF46  F00B         	goto	u2831
  8442   001688  EF4A  F00B         	goto	u2830
  8443   00168C                     u2831:
  8444   00168C  6A51               	clrf	??_CantaPartBaixa^0,c
  8445   00168E  2A51               	incf	??_CantaPartBaixa^0,f,c
  8446   001690  EF4B  F00B         	goto	u2848
  8447   001694                     u2830:
  8448   001694  6A51               	clrf	??_CantaPartBaixa^0,c
  8449   001696                     u2848:
  8450   001696  3A51               	swapf	??_CantaPartBaixa^0,f,c
  8451   001698  4651               	rlncf	??_CantaPartBaixa^0,f,c
  8452   00169A  508A               	movf	138,w,c	;volatile
  8453   00169C  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8454   00169E  0BDF               	andlw	-33
  8455   0016A0  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8456   0016A2  6E8A               	movwf	138,c	;volatile
  8457                           
  8458                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  8459   0016A4  B052               	btfsc	CantaPartBaixa@c^0,0,c
  8460   0016A6  EF57  F00B         	goto	u2851
  8461   0016AA  EF5B  F00B         	goto	u2850
  8462   0016AE                     u2851:
  8463   0016AE  6A51               	clrf	??_CantaPartBaixa^0,c
  8464   0016B0  2A51               	incf	??_CantaPartBaixa^0,f,c
  8465   0016B2  EF5C  F00B         	goto	u2868
  8466   0016B6                     u2850:
  8467   0016B6  6A51               	clrf	??_CantaPartBaixa^0,c
  8468   0016B8                     u2868:
  8469   0016B8  3A51               	swapf	??_CantaPartBaixa^0,f,c
  8470   0016BA  508A               	movf	138,w,c	;volatile
  8471   0016BC  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8472   0016BE  0BEF               	andlw	-17
  8473   0016C0  1851               	xorwf	??_CantaPartBaixa^0,w,c
  8474   0016C2  6E8A               	movwf	138,c	;volatile
  8475   0016C4  0012               	return		;funcret
  8476   0016C6                     __end_of_CantaPartBaixa:
  8477                           	callstack 0
  8478                           
  8479 ;; *************** function _CantaPartAlta *****************
  8480 ;; Defined at:
  8481 ;;		line 210 in file "TAD_DISPLAY.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  c               1    wreg     unsigned char 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  c               1    2[COMRAM] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1
  8495 ;;      Params:         0       0       0
  8496 ;;      Locals:         1       0       0
  8497 ;;      Temps:          1       0       0
  8498 ;;      Totals:         2       0       0
  8499 ;;Total ram usage:        2 bytes
  8500 ;; Hardware stack levels used: 1
  8501 ;; Hardware stack levels required when called: 3
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_CantaIR
  8506 ;;		_CantaData
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           	psect	text46
  8511   0016C6                     __ptext46:
  8512                           	callstack 0
  8513   0016C6                     _CantaPartAlta:
  8514                           	callstack 25
  8515                           
  8516                           ;incstack = 0
  8517                           ;CantaPartAlta@c stored from wreg
  8518   0016C6  6E52               	movwf	CantaPartAlta@c^0,c
  8519   0016C8                     
  8520                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8521   0016C8  BE52               	btfsc	CantaPartAlta@c^0,7,c
  8522   0016CA  EF69  F00B         	goto	u2711
  8523   0016CE  EF6D  F00B         	goto	u2710
  8524   0016D2                     u2711:
  8525   0016D2  6A51               	clrf	??_CantaPartAlta^0,c
  8526   0016D4  2A51               	incf	??_CantaPartAlta^0,f,c
  8527   0016D6  EF6E  F00B         	goto	u2728
  8528   0016DA                     u2710:
  8529   0016DA  6A51               	clrf	??_CantaPartAlta^0,c
  8530   0016DC                     u2728:
  8531   0016DC  508D               	movf	141,w,c	;volatile
  8532   0016DE  1851               	xorwf	??_CantaPartAlta^0,w,c
  8533   0016E0  0BFE               	andlw	-2
  8534   0016E2  1851               	xorwf	??_CantaPartAlta^0,w,c
  8535   0016E4  6E8D               	movwf	141,c	;volatile
  8536                           
  8537                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8538   0016E6  BC52               	btfsc	CantaPartAlta@c^0,6,c
  8539   0016E8  EF78  F00B         	goto	u2731
  8540   0016EC  EF7C  F00B         	goto	u2730
  8541   0016F0                     u2731:
  8542   0016F0  6A51               	clrf	??_CantaPartAlta^0,c
  8543   0016F2  2A51               	incf	??_CantaPartAlta^0,f,c
  8544   0016F4  EF7D  F00B         	goto	u2748
  8545   0016F8                     u2730:
  8546   0016F8  6A51               	clrf	??_CantaPartAlta^0,c
  8547   0016FA                     u2748:
  8548   0016FA  4651               	rlncf	??_CantaPartAlta^0,f,c
  8549   0016FC  508D               	movf	141,w,c	;volatile
  8550   0016FE  1851               	xorwf	??_CantaPartAlta^0,w,c
  8551   001700  0BFD               	andlw	-3
  8552   001702  1851               	xorwf	??_CantaPartAlta^0,w,c
  8553   001704  6E8D               	movwf	141,c	;volatile
  8554                           
  8555                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8556   001706  BA52               	btfsc	CantaPartAlta@c^0,5,c
  8557   001708  EF88  F00B         	goto	u2751
  8558   00170C  EF8C  F00B         	goto	u2750
  8559   001710                     u2751:
  8560   001710  6A51               	clrf	??_CantaPartAlta^0,c
  8561   001712  2A51               	incf	??_CantaPartAlta^0,f,c
  8562   001714  EF8D  F00B         	goto	u2768
  8563   001718                     u2750:
  8564   001718  6A51               	clrf	??_CantaPartAlta^0,c
  8565   00171A                     u2768:
  8566   00171A  3A51               	swapf	??_CantaPartAlta^0,f,c
  8567   00171C  4651               	rlncf	??_CantaPartAlta^0,f,c
  8568   00171E  508A               	movf	138,w,c	;volatile
  8569   001720  1851               	xorwf	??_CantaPartAlta^0,w,c
  8570   001722  0BDF               	andlw	-33
  8571   001724  1851               	xorwf	??_CantaPartAlta^0,w,c
  8572   001726  6E8A               	movwf	138,c	;volatile
  8573                           
  8574                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8575   001728  B852               	btfsc	CantaPartAlta@c^0,4,c
  8576   00172A  EF99  F00B         	goto	u2771
  8577   00172E  EF9D  F00B         	goto	u2770
  8578   001732                     u2771:
  8579   001732  6A51               	clrf	??_CantaPartAlta^0,c
  8580   001734  2A51               	incf	??_CantaPartAlta^0,f,c
  8581   001736  EF9E  F00B         	goto	u2788
  8582   00173A                     u2770:
  8583   00173A  6A51               	clrf	??_CantaPartAlta^0,c
  8584   00173C                     u2788:
  8585   00173C  3A51               	swapf	??_CantaPartAlta^0,f,c
  8586   00173E  508A               	movf	138,w,c	;volatile
  8587   001740  1851               	xorwf	??_CantaPartAlta^0,w,c
  8588   001742  0BEF               	andlw	-17
  8589   001744  1851               	xorwf	??_CantaPartAlta^0,w,c
  8590   001746  6E8A               	movwf	138,c	;volatile
  8591   001748  0012               	return		;funcret
  8592   00174A                     __end_of_CantaPartAlta:
  8593                           	callstack 0
  8594                           
  8595 ;; *************** function _LowRSI *****************
  8596 ;; Defined at:
  8597 ;;		line 34 in file "main.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;		None
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;		None
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		None
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1
  8611 ;;      Params:         0       0       0
  8612 ;;      Locals:         0       0       0
  8613 ;;      Temps:          1       0       0
  8614 ;;      Totals:         1       0       0
  8615 ;;Total ram usage:        1 bytes
  8616 ;; Hardware stack levels used: 1
  8617 ;; Hardware stack levels required when called: 2
  8618 ;; This function calls:
  8619 ;;		Nothing
  8620 ;; This function is called by:
  8621 ;;		Interrupt level 1
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           	psect	intcodelo
  8626   000018                     __pintcodelo:
  8627                           	callstack 0
  8628   000018                     _LowRSI:
  8629                           	callstack 22
  8630                           
  8631                           ;incstack = 0
  8632   000018  807A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8633   00001A  CFE0 F050          	movff	bsr,??_LowRSI
  8634   00001E  C050  FFE0         	movff	??_LowRSI,bsr
  8635   000022  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8636   000024  0010               	retfie	
  8637   000026                     __end_of_LowRSI:
  8638                           	callstack 0
  8639                           
  8640 ;; *************** function _HighRSI *****************
  8641 ;; Defined at:
  8642 ;;		line 30 in file "main.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;		None
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  1    wreg      void 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1
  8656 ;;      Params:         0       0       0
  8657 ;;      Locals:         0       0       0
  8658 ;;      Temps:          0       0       0
  8659 ;;      Totals:         0       0       0
  8660 ;;Total ram usage:        0 bytes
  8661 ;; Hardware stack levels used: 1
  8662 ;; Hardware stack levels required when called: 1
  8663 ;; This function calls:
  8664 ;;		_RSI_Timer0
  8665 ;; This function is called by:
  8666 ;;		Interrupt level 2
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	intcode
  8671   000008                     __pintcode:
  8672                           	callstack 0
  8673   000008                     _HighRSI:
  8674                           	callstack 22
  8675                           
  8676                           ;incstack = 0
  8677   000008  827A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8678   00000A  EF83  F00E         	goto	int_func
  8679                           
  8680                           	psect	intcode_body
  8681   001D06                     __pintcode_body:
  8682                           	callstack 22
  8683   001D06                     int_func:
  8684                           	callstack 22
  8685   001D06                     
  8686                           ;main.c: 32:      motor_RFID();
  8687   001D06  A4F2               	btfss	242,2,c	;volatile
  8688   001D08  EF88  F00E         	goto	i2u215_41
  8689   001D0C  EF8A  F00E         	goto	i2u215_40
  8690   001D10                     i2u215_41:
  8691   001D10  EF8C  F00E         	goto	i2l38
  8692   001D14                     i2u215_40:
  8693   001D14  EC6C  F00E         	call	_RSI_Timer0	;wreg free
  8694   001D18                     i2l38:
  8695   001D18  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8696   001D1A  0011               	retfie		f
  8697   001D1C                     __end_of_HighRSI:
  8698                           	callstack 0
  8699                           
  8700 ;; *************** function _RSI_Timer0 *****************
  8701 ;; Defined at:
  8702 ;;		line 25 in file "TAD_TIMER.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1
  8716 ;;      Params:         0       0       0
  8717 ;;      Locals:         0       0       0
  8718 ;;      Temps:          0       0       0
  8719 ;;      Totals:         0       0       0
  8720 ;;Total ram usage:        0 bytes
  8721 ;; Hardware stack levels used: 1
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_HighRSI
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text49
  8730   001CD8                     __ptext49:
  8731                           	callstack 0
  8732   001CD8                     _RSI_Timer0:
  8733                           	callstack 22
  8734   001CD8                     
  8735                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8736   001CD8  0EF6               	movlw	246
  8737   001CDA  6ED7               	movwf	215,c	;volatile
  8738   001CDC  0E3C               	movlw	60
  8739   001CDE  6ED6               	movwf	214,c	;volatile
  8740   001CE0                     
  8741                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8742   001CE0  94F2               	bcf	4082,2,c	;volatile
  8743   001CE2                     
  8744                           ;TAD_TIMER.c: 29:     Tics++;
  8745   001CE2  0E01               	movlw	1
  8746   001CE4  260B               	addwf	_Tics^0,f,c	;volatile
  8747   001CE6  0E00               	movlw	0
  8748   001CE8  220C               	addwfc	(_Tics+1)^0,f,c	;volatile
  8749   001CEA  220D               	addwfc	(_Tics+2)^0,f,c	;volatile
  8750   001CEC  220E               	addwfc	(_Tics+3)^0,f,c	;volatile
  8751   001CEE  0012               	return		;funcret
  8752   001CF0                     __end_of_RSI_Timer0:
  8753                           	callstack 0
  8754                           
  8755                           	psect	rparam
  8756   000001                     ___rparam_used  equ	1
  8757   000000                     ___param_bank   equ	0
  8758   000000                     __Lparam        equ	__Lrparam
  8759   000000                     __Hparam        equ	__Hrparam
  8760                           
  8761                           	psect	temp
  8762   00007A                     btemp:
  8763                           	callstack 0
  8764   00007A                     	ds	1
  8765   00007A                     int$flags       set	btemp
  8766   00007B                     wtemp8          set	btemp+1
  8767   00007B                     ttemp5          set	btemp+1
  8768   00007E                     ttemp6          set	btemp+4
  8769   000082                     ttemp7          set	btemp+8
  8770                           
  8771                           	psect	idloc
  8772                           
  8773                           ;Config register IDLOC0 @ 0x200000
  8774                           ;	unspecified, using default values
  8775   200000                     	org	2097152
  8776   200000  FF                 	db	255
  8777                           
  8778                           ;Config register IDLOC1 @ 0x200001
  8779                           ;	unspecified, using default values
  8780   200001                     	org	2097153
  8781   200001  FF                 	db	255
  8782                           
  8783                           ;Config register IDLOC2 @ 0x200002
  8784                           ;	unspecified, using default values
  8785   200002                     	org	2097154
  8786   200002  FF                 	db	255
  8787                           
  8788                           ;Config register IDLOC3 @ 0x200003
  8789                           ;	unspecified, using default values
  8790   200003                     	org	2097155
  8791   200003  FF                 	db	255
  8792                           
  8793                           ;Config register IDLOC4 @ 0x200004
  8794                           ;	unspecified, using default values
  8795   200004                     	org	2097156
  8796   200004  FF                 	db	255
  8797                           
  8798                           ;Config register IDLOC5 @ 0x200005
  8799                           ;	unspecified, using default values
  8800   200005                     	org	2097157
  8801   200005  FF                 	db	255
  8802                           
  8803                           ;Config register IDLOC6 @ 0x200006
  8804                           ;	unspecified, using default values
  8805   200006                     	org	2097158
  8806   200006  FF                 	db	255
  8807                           
  8808                           ;Config register IDLOC7 @ 0x200007
  8809                           ;	unspecified, using default values
  8810   200007                     	org	2097159
  8811   200007  FF                 	db	255
  8812                           
  8813                           	psect	config
  8814                           
  8815                           ; Padding undefined space
  8816   300000                     	org	3145728
  8817   300000  FF                 	db	255
  8818                           
  8819                           ;Config register CONFIG1H @ 0x300001
  8820                           ;	Oscillator
  8821                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8822                           ;	Fail-Safe Clock Monitor Enable bit
  8823                           ;	FCMEN = 0x0, unprogrammed default
  8824                           ;	Internal/External Oscillator Switchover bit
  8825                           ;	IESO = 0x0, unprogrammed default
  8826   300001                     	org	3145729
  8827   300001  06                 	db	6
  8828                           
  8829                           ;Config register CONFIG2L @ 0x300002
  8830                           ;	Power-up Timer Enable bit
  8831                           ;	PWRT = OFF, PWRT disabled
  8832                           ;	Brown-out Reset Enable bits
  8833                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8834                           ;	Brown-out Reset Voltage bits
  8835                           ;	BORV = 0x3, unprogrammed default
  8836   300002                     	org	3145730
  8837   300002  19                 	db	25
  8838                           
  8839                           ;Config register CONFIG2H @ 0x300003
  8840                           ;	Watchdog Timer Enable bit
  8841                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8842                           ;	Watchdog Timer Postscale Select bits
  8843                           ;	WDTPS = 0xF, unprogrammed default
  8844   300003                     	org	3145731
  8845   300003  1E                 	db	30
  8846                           
  8847                           ; Padding undefined space
  8848   300004                     	org	3145732
  8849   300004  FF                 	db	255
  8850                           
  8851                           ;Config register CONFIG3H @ 0x300005
  8852                           ;	CCP2 MUX bit
  8853                           ;	CCP2MX = 0x1, unprogrammed default
  8854                           ;	PORTB A/D Enable bit
  8855                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8856                           ;	Low-Power Timer1 Oscillator Enable bit
  8857                           ;	LPT1OSC = 0x0, unprogrammed default
  8858                           ;	MCLR Pin Enable bit
  8859                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8860   300005                     	org	3145733
  8861   300005  81                 	db	129
  8862                           
  8863                           ;Config register CONFIG4L @ 0x300006
  8864                           ;	Stack Full/Underflow Reset Enable bit
  8865                           ;	STVREN = 0x1, unprogrammed default
  8866                           ;	Single-Supply ICSP Enable bit
  8867                           ;	LVP = OFF, Single-Supply ICSP disabled
  8868                           ;	Boot Block Size Select bits
  8869                           ;	BBSIZ = 0x0, unprogrammed default
  8870                           ;	Extended Instruction Set Enable bit
  8871                           ;	XINST = 0x0, unprogrammed default
  8872                           ;	Background Debugger Enable bit
  8873                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8874   300006                     	org	3145734
  8875   300006  81                 	db	129
  8876                           
  8877                           ; Padding undefined space
  8878   300007                     	org	3145735
  8879   300007  FF                 	db	255
  8880                           
  8881                           ;Config register CONFIG5L @ 0x300008
  8882                           ;	unspecified, using default values
  8883                           ;	Code Protection bit
  8884                           ;	CP0 = 0x1, unprogrammed default
  8885                           ;	Code Protection bit
  8886                           ;	CP1 = 0x1, unprogrammed default
  8887   300008                     	org	3145736
  8888   300008  03                 	db	3
  8889                           
  8890                           ;Config register CONFIG5H @ 0x300009
  8891                           ;	unspecified, using default values
  8892                           ;	Boot Block Code Protection bitProtect Boot
  8893                           ;	CPB = 0x1, unprogrammed default
  8894                           ;	Data EEPROM Code Protection bit
  8895                           ;	CPD = 0x1, unprogrammed default
  8896   300009                     	org	3145737
  8897   300009  C0                 	db	192
  8898                           
  8899                           ;Config register CONFIG6L @ 0x30000A
  8900                           ;	unspecified, using default values
  8901                           ;	Write Protection bit
  8902                           ;	WRT0 = 0x1, unprogrammed default
  8903                           ;	Write Protection bit
  8904                           ;	WRT1 = 0x1, unprogrammed default
  8905   30000A                     	org	3145738
  8906   30000A  03                 	db	3
  8907                           
  8908                           ;Config register CONFIG6H @ 0x30000B
  8909                           ;	unspecified, using default values
  8910                           ;	Configuration Register Write Protection bit
  8911                           ;	WRTC = 0x1, unprogrammed default
  8912                           ;	Boot Block Write Protection bit
  8913                           ;	WRTB = 0x1, unprogrammed default
  8914                           ;	Data EEPROM Write Protection bit
  8915                           ;	WRTD = 0x1, unprogrammed default
  8916   30000B                     	org	3145739
  8917   30000B  E0                 	db	224
  8918                           
  8919                           ;Config register CONFIG7L @ 0x30000C
  8920                           ;	unspecified, using default values
  8921                           ;	Table Read Protection bit
  8922                           ;	EBTR0 = 0x1, unprogrammed default
  8923                           ;	Table Read Protection bit
  8924                           ;	EBTR1 = 0x1, unprogrammed default
  8925   30000C                     	org	3145740
  8926   30000C  03                 	db	3
  8927                           
  8928                           ;Config register CONFIG7H @ 0x30000D
  8929                           ;	unspecified, using default values
  8930                           ;	Boot Block Table Read Protection bit
  8931                           ;	EBTRB = 0x1, unprogrammed default
  8932   30000D                     	org	3145741
  8933   30000D  40                 	db	64
  8934                           tosu	equ	0xFFF
  8935                           tosh	equ	0xFFE
  8936                           tosl	equ	0xFFD
  8937                           stkptr	equ	0xFFC
  8938                           pclatu	equ	0xFFB
  8939                           pclath	equ	0xFFA
  8940                           pcl	equ	0xFF9
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           indf0	equ	0xFEF
  8948                           postinc0	equ	0xFEE
  8949                           postdec0	equ	0xFED
  8950                           preinc0	equ	0xFEC
  8951                           plusw0	equ	0xFEB
  8952                           fsr0h	equ	0xFEA
  8953                           fsr0l	equ	0xFE9
  8954                           wreg	equ	0xFE8
  8955                           indf1	equ	0xFE7
  8956                           postinc1	equ	0xFE6
  8957                           postdec1	equ	0xFE5
  8958                           preinc1	equ	0xFE4
  8959                           plusw1	equ	0xFE3
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           bsr	equ	0xFE0
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           postdec2	equ	0xFDD
  8966                           preinc2	equ	0xFDC
  8967                           plusw2	equ	0xFDB
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8

Data Sizes:
    Strings     335
    Constant    18
    Data        96
    BSS         99
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     121
    BANK0           128      0     108
    BANK1           256      0       0

Pointer List with Targets:

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), motorTerminal@currentUser_905(COMRAM[5]), NULL(NULL[0]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_10(CODE[18]), STR_11(CODE[19]), STR_12(CODE[27]), STR_13(CODE[29]), 
		 -> STR_14(CODE[33]), STR_15(CODE[9]), STR_16(CODE[3]), STR_17(CODE[3]), 
		 -> STR_18(CODE[3]), STR_19(CODE[33]), STR_20(CODE[6]), STR_21(CODE[33]), 
		 -> STR_22(CODE[3]), STR_23(CODE[33]), STR_24(CODE[33]), STR_7(CODE[18]), 
		 -> STR_8(CODE[18]), STR_9(CODE[18]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser_905(COMRAM[5]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_10(CODE[18]), STR_11(CODE[19]), STR_12(CODE[27]), STR_13(CODE[29]), 
		 -> STR_14(CODE[33]), STR_15(CODE[9]), STR_16(CODE[3]), STR_17(CODE[3]), 
		 -> STR_18(CODE[3]), STR_19(CODE[33]), STR_20(CODE[6]), STR_21(CODE[33]), 
		 -> STR_22(CODE[3]), STR_23(CODE[33]), STR_24(CODE[33]), STR_7(CODE[18]), 
		 -> STR_8(CODE[18]), STR_9(CODE[18]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[6]), STR_2(CODE[2]), STR_25(CODE[6]), STR_26(CODE[10]), 
		 -> STR_27(CODE[2]), STR_28(CODE[3]), STR_29(CODE[22]), STR_3(CODE[3]), 
		 -> STR_30(CODE[2]), STR_4(CODE[3]), STR_5(CODE[4]), STR_6(CODE[3]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F977(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _motorTerminal->_printfUID
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _MFRC522_Init->_MFRC522_AntennaControl
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaControl->_MFRC522_Bit_Mask
    _MFRC522_Bit_Mask->_MFRC522_Rd
    _MFRC522_Bit_Mask->_MFRC522_Wr
    _MFRC522_Wr->_delay_us
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7171
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          12    12      0    3635
                                             22 COMRAM    12    12      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1003
                                             17 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       6     5      1     341
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     268
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           6     6      0     324
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                       10    10      0    1168
                                             17 COMRAM    10    10      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     273
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           10     9      1     455
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2      86
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _motor_StartSendString                                2     0      2      69
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (3) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (4) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         1     0      1     114
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1184
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1184
             _MFRC522_AntennaControl
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     280
                         _MFRC522_Wr
                           _delay_us
                   _resetMotorStates
 ---------------------------------------------------------------------------------
 (4) _resetMotorStates                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaControl                               1     1      0     676
                                             15 COMRAM     1     1      0
                   _MFRC522_Bit_Mask
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Bit_Mask                                     7     5      2     647
                                              8 COMRAM     7     5      2
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     228
                                              3 COMRAM     5     4      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     222
                                              3 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaControl
         _MFRC522_Bit_Mask
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _delay_us
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
         _resetMotorStates
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
         _Terminal_SendChar
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
   _motor_RFID
     _getActualUID
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     108     84.4%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     34     121     96.0%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     229      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 20 13:15:26 2025

         ?_Terminal_ReceiveChar 0050                      _RSI_Timer0 1CD8                     MFRC522_Rd@i 0057  
                   MFRC522_Wr@i 0057                              l54 1DA4                              l90 19D0  
                            l83 1938                              l77 1BAC                              l87 1C7A  
                    _TI_GetTics 1986                              bsr 0FE0            ??_InitPortDirections 0051  
                   _state_write 004D                             l211 1D6C                             l302 1D82  
                           l215 1C42                             l224 13AA                             l136 1D04  
                           l217 1C56                             l225 13E4                             l226 13EA  
                           l234 1344                             l250 1C0C                             l139 1D9C  
                           l244 1A5E                             l237 1348                             l262 17B6  
                           l255 1B78                             l247 1D8C                             l272 15C0  
                           l344 04BE                             l601 1D42                             l258 1984  
                           l604 15B8                             l293 0F5E                             l277 1640  
                           l534 10FA                             l800 148A                             l633 1D52  
                           l289 1002                             l298 0FDE                             l652 1DA8  
                           l636 1CD6                             l644 1CB6                             l708 0EF0  
                           l388 0340                             l645 1CBA                             l806 1B0E  
                           l639 1D2E                             l663 1824                             l671 1C9C  
                           l495 0AF0                             l592 16C4                             l648 1C2C  
                           l649 1C32                             l809 1A1A                             l586 1A9C  
                           l658 1B44                             l595 1BDE                             l589 1748  
                           l783 1D78                             l688 11EA                             l698 12A0  
                           l788 1522                             l878 1D60                             u610 1548  
                           u611 1540                             u630 1566                             u631 155E  
                           u650 1586                             u730 1D2C                             u651 157E  
                           u731 1D26                             u628 154A                             u670 15A8  
                           u671 15A0                             u648 1568                             u736 1D2E  
                           u668 1588                             u688 15AA                    printfUID@low 005E  
              ??_CantaPartBaixa 0051                             wreg 0FE8                  ??_MFRC522_Init 0060  
                          l2032 1526                            l2112 1DA6                            l2034 1536  
                          l2202 1D44                            l2210 1D9E                            l2036 15B6  
                          l2204 1D4C                            l2212 1DA2                            l2108 1D1C  
                          l2206 1D4E                            l2208 1D50                            l4000 0B40  
                          l4010 0B68                            l4002 0B44                            l4100 0D34  
                          l4020 0B96                            l4012 0B6E                            l4004 0B54  
                          l4110 0D6C                            l4102 0D44                            l4030 0BCE  
                          l4022 0BA6                            l4014 0B7E                            l4006 0B60  
                          l3400 12AE                            l1704 1D84                            l4120 0D9C  
                          l4112 0D74                            l4104 0D4C                            l4040 0C02  
                          l4032 0BDA                            l4024 0BB2                            l4016 0B8A  
                          l4008 0B64                            l4200 00CC                            l2266 1D6E  
                          l3410 12D4                            l3402 12B0                            l4122 0DA4  
                          l4114 0D80                            l4106 0D5C                            l4050 0C2E  
                          l4042 0C06                            l4034 0BDE                            l4026 0BB6  
                          l4018 0B8E                            l4210 0100                            l4202 00DC  
                          l3340 1C36                            l3420 12EA                            l3412 12DA  
                          l3500 1C06                            l4140 0DE8                            l4116 0D84  
                          l4108 0D68                            l4060 0C5E                            l4052 0C36  
                          l4044 0C0E                            l4036 0BE6                            l4028 0BBE  
                          l4300 02FC                            l4220 013C                            l4212 0112  
                          l4204 00E4                            l3342 1C44                            l3350 1356  
                          l3430 1324                            l3422 12FA                            l3414 12E0  
                          l3502 1B48                            l4150 0E24                            l4142 0DF8  
                          l4134 0DD0                            l4126 0DB0                            l4118 0D8C  
                          l4070 0C9A                            l4062 0C6E                            l4054 0C46  
                          l4046 0C1E                            l4038 0BF6                            l3510 1770  
                          l4310 0348                            l4302 030E                            l4230 0174  
                          l4222 0144                            l4214 0116                            l4206 00EC  
                          l3520 1A60                            l3352 1358                            l3432 132A  
                          l3416 12E2                            l3408 12B4                            l3504 1B58  
                          l3344 1CBC                            l3440 1CA0                            l4160 0E68  
                          l4152 0E40                            l4144 0E04                            l4136 0DE0  
                          l4128 0DC0                            l4080 0CDA                            l4072 0CAE  
                          l4064 0C7A                            l4056 0C52                            l4048 0C2A  
                          l3512 177C                            l4400 05C2                            l4320 037A  
                          l4312 0350                            l4304 0312                            l4240 01B0  
                          l4232 0184                            l4224 0150                            l4216 011E  
                          l3450 1988                            l3522 1A66                            l3370 138E  
                          l3362 1360                            l3354 135A                            l3434 132C  
                          l3426 12FE                            l3418 12E8                            l3506 1B6A  
                          l3530 17BC                            l3442 1CA0                            l4162 0E6C  
                          l4154 0E42                            l4146 0E08                            l4090 0D12  
                          l4082 0CE6                            l4074 0CBA                            l4066 0C7E  
                          l4058 0C56                            l3514 1782                            l3610 122A  
                          l3602 11F4                            l4402 05CA                            l4330 03B0  
                          l4322 0382                            l4306 0322                            l4250 01E2  
                          l4242 01B8                            l4234 018C                            l4226 0160  
                          l4218 012C                            l4170 002A                            l3524 16C8  
                          l3452 199C                            l3444 1C5A                            l3380 13AC  
                          l3372 1394                            l3364 1380                            l3356 135C  
                          l3348 134C                            l3436 1332                            l3428 131E  
                          l3460 1A36                            l4156 0E54                            l4148 0E10  
                          l4092 0D16                            l4084 0CEA                            l4076 0CBE  
                          l4068 0C86                            l3516 1784                            l3508 174A  
                          l3700 0F40                            l3620 1274                            l3612 123A  
                          l3604 1202                            l4420 0626                            l4412 05F8  
                          l4340 040A                            l4332 03B6                            l4324 038A  
                          l4316 0364                            l4308 0338                            l4260 0212  
                          l4252 01EA                            l4236 0198                            l4228 0168  
                          l4180 005E                            l4172 002E                            l3526 1644  
                          l3446 1C5C                            l3390 13D4                            l3382 13B2  
                          l3374 1396                            l3366 1386                            l3438 1334  
                          l3462 1A48                            l3542 17E4                            l3534 17C2  
                          l4158 0E5C                            l4094 0D1E                            l4086 0CF2  
                          l4078 0CC6                            l3518 17A4                            l3710 0F60  
                          l3622 1278                            l3614 1246                            l3606 120E  
                          l4510 0802                            l4502 07C6                            l4430 065A  
                          l4414 0606                            l4406 05DE                            l4350 04C2  
                          l4342 0420                            l4334 03BE                            l4318 0376  
                          l4270 0252                            l4262 021A                            l4254 01F8  
                          l4246 01CC                            l4238 01A8                            l4190 009A  
                          l4182 006A                            l4174 003A                            l3800 1BD4  
                          l3632 1902                            l3448 1C78                            l3392 13E8  
                          l3384 13B6                            l3376 13A6                            l3368 138C  
                          l3464 1A54                            l3456 1A1E                            l3640 193A  
                          l1880 1D96                            l3472 1C30                            l3544 1804  
                          l3536 17DE                            l3552 180E                            l3528 17B8  
                          l3480 1B24                            l3560 1108                            l4096 0D2A  
                          l4088 0D06                            l4168 0E72                            l3720 0FA2  
                          l3712 0F66                            l3704 0F46                            l3624 1294  
                          l3616 124C                            l3608 121A                            l4600 09E0  
                          l4520 0838                            l4512 080A                            l4504 07D8  
                          l4432 0666                            l4424 063A                            l4408 05F0  
                          l4352 04CE                            l4336 03CE                            l4328 039E  
                          l4272 0266                            l4256 0208                            l4248 01DE  
                          l4192 00A0                            l4184 007A                            l4176 004A  
                          l3802 1BD6                            l3634 191E                            l3626 18E4  
                          l3386 13CA                            l3458 1A26                            l3490 1BEC  
                          l3642 193E                            l1882 1D9A                            l3466 1C10  
                          l3546 1808                            l3482 1B28                            l3570 1134  
                          l4098 0D2E                            l3722 0FAA                            l3714 0F82  
                          l3650 15D0                            l3618 1268                            l4530 0860  
                          l4522 083C                            l4514 0812                            l4506 07DC  
                          l4450 06C8                            l4442 069A                            l4426 0646  
                          l4418 061A                            l4370 0532                            l4362 050A  
                          l4354 04DE                            l4338 03DE                            l4290 02C8  
                          l4282 0290                            l4274 026C                            l4266 022E  
                          l4258 020A                            l4194 00B2                            l4186 0082  
                          l4178 0056                            l4610 0ADA                     _TI_NewTimer 18E4  
                          l3636 192E                            l3628 18EA                            l3804 1D30  
                          l1884 1D62                            l3388 13D2                            l3396 12A4  
                          l3492 1BEE                            l3484 1BE0                            l3468 1C26  
                          l3476 1B10                            l3580 1174                            l3572 1144  
                          l3900 1B00                            l3724 0FBC                            l3716 0F84  
                          l3660 1616                            l3652 15D2                            l3644 15BC  
                          l4532 0872                            l4524 0844                            l4508 07EC  
                          l4444 06A2                            l4436 067A                            l4364 051C  
                          l4356 04EE                            l4348 0428                            l4292 02D8  
                          l4284 02A2                            l4276 0274                            l4268 0240  
                          l4196 00B6                            l4188 008A                            l3910 1B8A  
                          l3902 1B7A                            l3398 12AC                            l3494 1BF4  
                          l3486 1BE4                            l3750 14BC                            l3478 1B14  
                          l3590 11BE                            l3582 1184                            l3574 1150  
                          l3566 1110                            l3558 10FC                            l3726 0FCC  
                          l3718 0F9C                            l3662 161A                            l3654 15DA  
                          l3670 163E                            l3646 15C4                            l4606 09F4  
                          l4550 08C0                            l4542 089A                            l4534 0876  
                          l4526 084C                            l4518 0826                            l4470 0722  
                          l4462 06F4                            l4454 06D0                            l4438 0686  
                          l4382 056E                            l4374 0546                            l4358 04F6  
                          l4294 02E0                            l4286 02B2                            l4278 027C  
                          l4198 00BE                            l3912 1B8C                            l3496 1BF6  
                          l3488 1BE6                            l3920 1CF0                            l3760 14F8  
                          l3752 14CC                            l3744 148C                            l3592 11C2  
                          l3584 1190                            l3576 1156                            l3568 1124  
                          l3728 0FD6                            l3680 0F14                            l3656 15F2  
                          l3648 15CC                            l4560 08F2                            l4544 08AC  
                          l4536 087E                            l4480 075A                            l4472 0734  
                          l4464 06FC                            l4456 06DE                            l4448 06B6  
                          l4384 0576                            l4376 054E                            l4368 0524  
                          l4296 02E8                            l4288 02BA                            l3914 1B9C  
                          l3498 1BFC                            l3930 1CFC                            l3922 1CF4  
                          l3762 1506                            l3754 14DC                            l3746 149C  
                          l3594 11DE                            l3586 1196                            l3578 1164  
                          l3690 0F2C                            l3682 0F1C                            l3738 0FE4  
                          l3674 0EF4                            l3658 1606                            l3770 19DC  
                          l4570 0926                            l4562 08FA                            l4554 08D4  
                          l4546 08B0                            l4538 0886                            l4490 0788  
                          l4474 0748                            l4458 06EE                            l4394 05A0  
                          l4378 055A                            l3940 1006                            l3916 1BA8  
                          l3908 1B7C                            l3932 1D7A                            l3924 1CF6  
                          l3764 1514                            l3748 14AC                            l3756 14E0  
                          l3860 1C98                            l3588 11B2                            l3692 0F2E  
                          l3676 0EF4                            l3668 1620                            l3596 11EC  
                          l3780 19F8                            l3772 19E0                            l4580 0962  
                          l4572 092E                            l4556 08E6                            l4548 08B8  
                          l4492 0796                            l4484 076E                            l4468 0710  
                          l4396 05AE                            l4388 058A                            l4740 1AAA  
                          l3790 1BC4                            l3950 1020                            l3942 100E  
                          l3918 1BAA                            l3934 1D7E                            l3926 1CF8  
                          l3758 14EA                            l3870 1400                            l3862 13EC  
                          l3694 0F38                            l3686 0F22                            l3678 0F0E  
                          l3782 1A00                            l3774 19E4                            l3766 19D4  
                          l4590 099C                            l4582 096A                            l4574 0938  
                          l4566 090E                            l4558 08EA                            l4486 0780  
                          l4478 0752                            l4750 1AC4                            l4742 1AAE  
                          l3792 1BC6                            l3960 1040                            l3944 1012  
                          l3936 1D54                            l3928 1CFA                            l3856 1C7C  
                          l3880 141C                            l3872 1408                            l3696 0F3A  
                          l3688 0F2A                            l3784 1A0C                            l3776 19E8  
                          l3768 19D8                            l4592 09A4                            l4584 097C  
                          l4576 093C                            l4568 0920                            l4496 07AA  
                          l4752 1AC6                            l4744 1AB2                            l4736 1A9E  
                          l3794 1BC8                            l3786 1BB0                            l3970 10A0  
                          l3962 1058                            l3946 1016                            l3938 1D58  
                          l3858 1C90                            l3890 146A                            l3882 1432  
                          l3874 1414                            l3698 0F3C                            l3778 19EC  
                          l4594 09B6                            l4586 0990                            l4578 0944  
                          l4498 07B2                            l4754 1AC8                            l4746 1AB6  
                          l4738 1AA6                            l3796 1BCA                            l3788 1BBE  
                          l3980 10CA                            l3972 10A4                            l3964 106A  
                          l3956 1028                            l3948 101A                            l3892 146E  
                          l3884 143E                            l3868 13F4                            l4596 09CC  
                          l4588 0998                            l4756 1ACC                            l4748 1AC0  
                          l3798 1BD2                            l3982 10D4                            l3974 10AE  
                          l3966 1082                            l3958 103A                            l3894 1ADA  
                          l3886 1442                            l3990 0B02                            l4598 09D4  
                          l4758 1AD0                            l3984 10DA                            l3976 10B4  
                          l3968 1088                            l3896 1AE4                            l3888 145E  
                          l3992 0B16                            l3986 10DE                            l3978 10C6  
                          l3898 1AF2                            l3994 0B1C                            l3996 0B30  
                          l3988 0AF2                            l3998 0B3C                            STR_1 1FF2  
                          STR_2 1FFC                            STR_3 1FC4                            STR_4 1FE9  
                          STR_5 1FF8                            STR_6 1FC4                            STR_7 1FB5  
                          STR_8 1FB5                            STR_9 1FC7                            u3000 0F78  
                          u3001 0F70                            u3010 0F9C                            u3011 0F98  
                          u3020 0FBC                            u3021 0FB8                            _LATA 0F89  
                          u3030 0FCC                            u3031 0FC8                            _LATC 0F8B  
                          u3040 149C                            u3200 0B30                            u3008 0F7A  
                          u4000 07EC                            _LATD 0F8C                            u3041 1498  
                          u3201 0B2C                            u4001 07E8                            u3050 14AC  
                          u3130 1C90                            u3210 0B54                            u4010 0802  
                          u3051 14A8                            u3131 1C8C                            u3211 0B50  
                          u4011 07FE                            u3060 14BC                            u2500 1CCE  
                          u3140 145E                            u3300 0CAE                            u3220 0B7E  
                          u4100 090A                            u4020 0822                            u3061 14B8  
                          u2501 1CC6                            u3141 145A                            u3301 0CAA  
                          u3221 0B7A                            u4101 0906                            u4021 081E  
                          u2510 1372                            u3070 14CC                            u3150 148A  
                          u3310 0CDA                            u3230 0BA6                            u4110 0920  
                          u4030 0838                            u2511 136A                            u3071 14C8  
                          u3151 1486                            u3311 0CD6                            u3231 0BA2  
                          u4111 091C                            u4031 0834                            u3160 1B9C  
                          u3080 14DC                            u3400 0E54                            u3320 0D06  
                          u3240 0BCE                            u4120 095E                            u4040 085C  
                          u3161 1B98                            u3081 14D8                            u3401 0E50  
                          u3321 0D02                            u3241 0BCA                            u4121 0958  
                          u4041 0858                            u3170 10FA                            u2530 13A6  
                          u2610 1344                            u3330 0D44                            u3250 0BF6  
                          u4130 0960                            u4050 0872                            u3410 004A  
                          u3171 10F6                            u2531 13A2                            u2611 1340  
                          u3331 0D40                            u3251 0BF2                            u4051 086E  
                          u3411 0046                            u2700 1A9C                            u2540 13C6  
                          u2508 1CD0                            u2620 1CB6                            u3340 0D5C  
                          u3260 0C1E                            u3180 0B02                            u4140 097C  
                          u4060 0896                            u3500 0184                            u3420 007A  
                          u2701 1A98                            u2541 13C0                            u2621 1CB2  
                          u3341 0D58                            u3261 0C1A                            u3181 0AFE  
                          u4141 0978                            u4061 0892                            u3501 0180  
                          u3421 0076                            u2710 16DA                            u2550 13E4  
                          u2630 1A36                            u3350 0D9C                            u3270 0C46  
                          u3190 0B16                            u4150 098C                            u4070 08AC  
                          u3510 01A8                            u3430 009A                            u2711 16D2  
                          u2551 13E0                            u2631 1A32                            u3351 0D98  
                          u3271 0C42                            u3191 0B12                            u4151 0988  
                          u4071 08A8                            u3511 01A4                            u3431 0096  
                          u2528 1374                            u2608 1312                            u2560 12C6  
                          u2640 1C26                            u3360 0DC0                            u3280 0C6E  
                          u4160 09B6                            u4080 08D0                            u3600 02A2  
                          u3520 01C8                            u3440 00B2                            u2561 12BE  
                          u2641 1C22                            u3361 0DBC                            u3281 0C6A  
                          u4161 09B2                            u4081 08CC                            u3601 029E  
                          u3521 01C4                            u3441 00AE                            u2730 16F8  
                          u2810 1674                            u2490 1C56                            u2546 13C8  
                          u2650 1B44                            u3370 0DE0                            u3290 0C9A  
                          u4170 09F0                            u4090 08E6                            u3610 02B2  
                          u3530 01DE                            u3450 00DC                            u2731 16F0  
                          u2811 166C                            u2491 1C52                            u2651 1B40  
                          u3371 0DDC                            u3291 0C96                            u4171 09EC  
                          u4091 08E2                            u3611 02AE                            u3531 01DA  
                          u3451 00D8                            u2580 12FA                            u2660 1B58  
                          u2900 1174                            u3380 0DF8                            u3700 03B0  
                          u3620 02D8                            u3540 0208                            u3460 00FC  
                          u2581 12F6                            u2661 1B54                            u2901 1170  
                          u3381 0DF4                            u3701 03AC                            u3621 02D4  
                          u3541 0204                            u3461 00F8                            u2750 1718  
                          u2830 1694                            u2590 1310                            u2910 11B2  
                          u3390 0E24                            u2670 1762                            u3710 03CE  
                          u3630 02F8                            u3550 022A                            u3470 0112  
                          u2751 1710                            u2831 168C                            u2591 1308  
                          u2911 11AE                            u3391 0E20                            u2671 175A  
                          u3711 03CA                            u3631 02F4                            u3551 0226  
                          u3471 010E                            u2728 16DC                            u2808 1658  
                          u2920 11DE                            u3800 05BE                            u3720 0420  
                          u3640 030E                            u3560 0240                            u3480 013C  
                          u2921 11DA                            u3801 05BA                            u3721 041C  
                          u3641 030A                            u3561 023C                            u3481 0138  
                          u2770 173A                            u2850 16B6                            u2578 12C8  
                          u2690 17A4                            u2930 122A                            u3810 05DA  
                          u3730 04DE                            u3650 0322                            u3570 0252  
                          u3490 0160                            u2771 1732                            u2851 16AE  
                          u2691 17A0                            u2931 1226                            u3811 05D6  
                          u3731 04DA                            u3651 031E                            u3571 024E  
                          u3491 015C                            u2748 16FA                            u2828 1676  
                          u2940 1268                            u3900 06EE                            u3820 05F0  
                          u3740 0506                            u3660 0338                            u3580 0266  
                          u2941 1264                            u3901 06EA                            u3821 05EC  
                          u3741 0502                            u3661 0334                            u3581 0262  
                          u2790 1656                            u2870 17DE                            u2950 1294  
                          u3910 070C                            u3830 0616                            u3750 051C  
                          u3670 0360                            u3590 028C                            u2791 164E  
                          u2871 17DA                            u2951 1290                            u3911 0708  
                          u3831 0612                            u3751 0518                            u3671 035C  
                          u3591 0288                            u2768 171A                            u2848 1696  
                          u2960 18FE                            u2880 1804                            u2688 1764  
                          u3920 0722                            u3840 0636                            u3760 0542  
                          u3680 0376                            u2961 18FA                            u2881 1800  
                          u3921 071E                            u3841 0632                            u3761 053E  
                          u3681 0372                            u2970 191E                            u2890 1134  
                          u3930 0734                            u3850 0656                            u3770 056A  
                          u3690 039A                            i1l43 001E                            u2971 191A  
                          u2891 1130                            u3931 0730                            u3851 0652  
                          u3771 0566                            u3691 0396                            u2788 173C  
                          u2868 16B8                            u2980 1616                            u3940 0748  
                          u3860 0676                            u3780 0586                            u2981 1612  
                          u3941 0744                            u3861 0672                            u3781 0582  
                          u2990 0F0E                            u3950 076A                            u3870 0696  
                          u3790 059C                            u2991 0F0A                            u3951 0766  
                          u3871 0692                            u3791 0598                            u3960 0780  
                          u3880 06B2                            u3961 077C                            u3881 06AE  
                          u3970 07A6                            u3890 06C8                            u3971 07A2  
                          u3891 06C4                            u3980 07C2                            u3981 07BE  
                          i2l38 1D18                            u3990 07D8                            u3991 07D4  
                          i2l72 1CEE                            _TMR0 0FD6                      _ActualLeds 003B  
                          _Tics 000B           _showAllConfigurations 13EC                            _Rows 0028  
              motor_datos@state 001D                            _main 1A9E                   printfUID@high 005D  
                          fsr2h 0FDA                            indf2 0FDF                            fsr1l 0FE1  
                          fsr2l 0FD9                            btemp 007A                _MFRC522_Bit_Mask 1A1C  
               __end_of_TI_Init 1BAE                            prodh 0FF4                            prodl 0FF3  
                          start 0026                 __end_of_CantaIR 1BE0               ?_resetMotorStates 0050  
               __end_of_HighRSI 1D1C                   LcInit@columns 0066              setCurrentUser@UID0 0065  
            setCurrentUser@UID1 0061              setCurrentUser@UID2 0062              setCurrentUser@UID3 0063  
            setCurrentUser@UID4 0064                    ___param_bank 0000              ??_resetMotorStates 0051  
               printLedConfig@i 005B                 ??_MFRC522_Reset 0058                    ?_initTeclado 0050  
                 processBit@val 0053                     Espera@Timer 005E                           ?_main 0050  
                         STR_10 1FB5                           STR_11 1FA2                           STR_20 1FF2  
                         STR_12 1F71                           STR_13 1F54                           STR_21 1EAF  
                         STR_30 1FA0                           STR_22 1FC4                           STR_14 1EF1  
                         STR_15 1FE3                           STR_23 1F33                           STR_16 1FC4  
                         STR_24 1F12                           STR_17 1FC4                           STR_25 1FEC  
                         STR_18 1FC4                           STR_26 1FD9                           STR_27 1FFA  
                         STR_19 1ED0                           STR_28 1FC4                           STR_29 1F8C  
                         _T0CON 0FD5              MFRC522_Bit_Mask@op 0059                           _RCREG 0FAE  
                         _RCSTA 0FAB                           _SPBRG 0FAF                           _PORTD 0F83  
                         _TRISA 0F92                           _TRISD 0F95                           _TRISE 0F96  
                         _TXREG 0FAD                           _TXSTA 0FAC            __end_of_getActualUID 1524  
                         _Filas 003A                           _Timer 0047                 motor_RFID@irqEn 0033  
                         _index 0011                 motor_RFID@unLen 0015                    _TI_ResetTics 1C58  
                         _tecla 0038                 motor_RFID@state 0035                           _timer 004F  
                         _state 0037                 setLed@userIndex 0019             motor_Read@bit_count 0049  
                         tablat 0FF5                           ttemp5 007B                           ttemp6 007E  
                         ttemp7 0082                  _saveHourToData 1ADA                           status 0FD8  
                         wtemp8 007B              Terminal_SendChar@c 0054                ??_printLedConfig 0058  
       EscriuPrimeraOrdre@ordre 0052          ??_Terminal_ReceiveChar 0051                 __initialization 1826  
                  __end_of_main 1ADA                  _setCurrentUser 19D2                     ?_RSI_Timer0 0050  
                TI_Init@counter 0051                _initPortsTeclado 1D96                     ?_TI_GetTics 0051  
         _motor_StartSendString 1C7C                          ??_main 0072                   __activetblptr 0002  
            MFRC522_Rd@ucResult 0056          _MFRC522_AntennaControl 1B46                          _ADCON1 0FC1  
               MFRC522_Wr@value 0053                       ??_TI_Init 0051          ?_showAllConfigurations 0050  
        __end_of_saveHourToData 1B10                       ??_CantaIR 0053          Terminal_SendString@str 0055  
                        i2l2162 1CD8                          i2l3034 1D06                          i2l2164 1CE0  
                        i2l3036 1D14                          i2l2166 1CE2                   ??_WaitForBusy 0066  
                        _TMR0IF 7F92                       ??_HighRSI 0050                          _LcInit 1004  
              __end_of_delay_us 1C58                          _Espera 1A60                          _LowRSI 0018  
        __end_of_setCurrentUser 1A1C                          _RowAct 0026                          _Timers 00D8  
            motor_datos@pointer 001C            __end_of_MFRC522_Init 1986                __end_of_initRFID 1D84  
            motorTerminal@index 0020                __end_of_initData 1D7A                __end_of_initLeds 1D62  
            motorTerminal@state 0022                          _keymap 1E9D                          clear_0 186C  
                        clear_1 1878                    ?_motor_Write 0058                          isa$std 0001  
                  __pdataCOMRAM 0072                    __mediumconst 1E9C                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8           __end_of_Terminal_Init 1D54  
        motor_RFID@differentUID 0068                 ?_saveHourToData 0051                      __accesstop 0080  
       __end_of__initialization 187E                 delay_us@howMany 0051                   ___rparam_used 0001  
                  ??_MFRC522_Rd 0053                    ??_MFRC522_Wr 0054                   setLed@modeLED 001B  
               ?_setCurrentUser 0061                  __pcstackCOMRAM 0050             __end_of_WaitForBusy 1D44  
                  __pidataBANK0 188C          ?_motor_StartSendString 0055            TI_NewTimer@Comptador 0053  
              MFRC522_Rd@ucAddr 0055        __end_of_MFRC522_Bit_Mask 1A60                _motor_SendString 17B8  
           processBit@bit_count 0054               printLedConfig@val 005A              __end_of_MFRC522_Rd 13EC  
            __end_of_MFRC522_Wr 134A                    ?_TI_NewTimer 0051                      __pbssBANK0 00D8  
         __end_of_motorTerminal 0EF2                         ?_LcInit 0066                   _CantaPartAlta 16C6  
        TI_NewTimer@TimerHandle 0051                         ?_Espera 005E                         ?_LowRSI 0050  
                  _getActualUID 148C                 processBit@state 0055                MFRC522_Wr@ucAddr 0056  
           _timer@TAD_LEDS$F977 0046         TI_ResetTics@TimerHandle 0051                         _BAUDCON 0FB8  
               motor_SendChar@c 0054            MFRC522_Bit_Mask@addr 005D            MFRC522_Bit_Mask@mask 0058  
                       LcInit@i 0068            MFRC522_Bit_Mask@temp 005E                       ?_delay_us 0050  
               getActualUID@UID 0051               _Terminal_SendChar 1C9E                         _TI_Init 1B7A  
            ?_Terminal_SendChar 0050        __end_of_initPortsTeclado 1D9E                         _CantaIR 1BAE  
                     ?_initRFID 0050                       ?_initData 0050                       ?_initLeds 0050  
                       _HighRSI 0008                     _WaitForBusy 1D30                  ?_CantaPartAlta 0050  
                       _Columns 0027               motor_RFID@TagType 002E             ??_Terminal_SendChar 0054  
                       __Hparam 0000                         __Lparam 0000                    ??_RSI_Timer0 0050  
                  ??_TI_GetTics 0055               motor_RFID@allZero 002C                         __pcinit 1826  
         __end_of_MFRC522_Reset 1C0E                         __ramtop 0200               motor_RFID@_status 002F  
                       __ptext0 1A9E                         __ptext1 002A                         __ptext2 19D2  
                       __ptext3 11EC                         __ptext4 15BA                         __ptext5 0EF2  
                       __ptext6 174A                         __ptext7 0AF2                         __ptext8 13EC  
                       __ptext9 1ADA         ?_MFRC522_AntennaControl 0050                       CantaIR@IR 0053  
             __end_of_initPorts 1DA6       __end_of_Terminal_SendChar 1CBC               motor_RFID@waitIRq 0032  
      motorTerminal@currentUser 0061                      ??_delay_us 0051         ??_showAllConfigurations 0057  
                       _pointer 000F                         _str_ptr 0013                    _MFRC522_Init 193A  
                __pintcode_body 1D06            end_of_initialization 187E                     motor_RFID@i 0030  
                   motor_RFID@n 0031                      ??_initRFID 0060        MFRC522_AntennaControl@on 005F  
                    ??_initData 0051              __end_of_RSI_Timer0 1CF0                      ??_initLeds 0054  
                 __Lmediumconst 1E9C                         int_func 1D06              __end_of_TI_GetTics 19D2  
            saveHourToData@hour 0051                 motor_Write@addr 0059               __end_of_printfUID 11EC  
                    _motor_RFID 002A                         postdec1 0FE5                      _motor_Read 0EF2  
                       postinc0 0FEE                         postinc2 0FDE          showAllConfigurations@i 0059  
        showAllConfigurations@j 0057  __end_of_MFRC522_AntennaControl 1B7A                       _PORTCbits 0F82  
                    _processBit 174A             _Terminal_SendString 1B10           TI_GetTics@TimerHandle 005D  
                _motor_RFID$591 006E                ??_saveHourToData 0052                       _TRISBbits 0F93  
                     _TRISCbits 0F94                       _TRISEbits 0F96                      _state_read 004E  
                setLed@ledIndex 001A                 ??_CantaPartAlta 0051                ??_setCurrentUser 0065  
      motor_StartSendString@str 0055        __end_of_motor_SendString 1826            ?_Terminal_SendString 0055  
                __end_of_LcInit 10FC               MFRC522_Rd@Address 0054         ??_motor_StartSendString 0057  
                __end_of_Espera 1A9E                  __end_of_LowRSI 0026    __end_of_Terminal_RXAvailable 1D30  
    __end_of_EscriuPrimeraOrdre 15BA                   __pidataCOMRAM 1D8E       motor_Read@timeout_counter 0017  
                _motor_Read$563 005A    motorTerminal@currentUser_905 0066                  motor_RFID@flag 0071  
                     _ColumnAct 0025                  __end_of_keymap 1EA9                _resetMotorStates 1D84  
             ?_MFRC522_Bit_Mask 0058             start_initialization 1826              ??_MFRC522_Bit_Mask 005A  
                _motor_SendChar 1C0E              motor_Read@ucResult 0036    __end_of_Terminal_TXAvailable 1CD8  
         ??_Terminal_SendString 0057                        ??_LcInit 0067              printLedConfig@leds 0057  
                      ??_Espera 0062                        ??_LowRSI 0050                     ?_motor_RFID 0050  
             motorTerminal@hour 0076                     ?_motor_Read 0050                   ??_initTeclado 0054  
                   __pdataBANK0 0080                     ?_processBit 0053          __end_of_motor_SendChar 1C34  
                   __pbssCOMRAM 0001               MFRC522_Wr@Address 0055                   ?_TI_ResetTics 0050  
              motor_Read@ucAddr 0048                        ?_TI_Init 0050                        ?_CantaIR 0050  
             ?_initPortsTeclado 0050                  _CantaPartBaixa 1642                        ?_HighRSI 0050  
                  ?_WaitForBusy 0050              ??_initPortsTeclado 0051                  motor_Read@addr 0059  
           motor_RFID@fifoLevel 0029                       __pintcode 0008                   __pmediumconst 1E9C  
    __end_of_InitPortDirections 1D6E                 CantaPartBaixa@c 0052                     __pintcodelo 0018  
            motor_Write@ucValue 004A                     __smallconst 1E9C             __end_of_initTeclado 1D06  
               ?_motor_SendChar 0050                  ??_TI_ResetTics 0051            processBit@next_state 0056  
                     _initPorts 1D9E   __end_of_showAllConfigurations 148C          __end_of_CantaPartBaixa 16C6  
                 _Terminal_Init 1D44            _Terminal_RXAvailable 1D1C     motorTerminal@sending_string 0021  
            motor_LEDs@lastTics 0007                        _LATBbits 0F8A                        _LATCbits 0F8B  
                      _LATEbits 0F8D                       delay_us@x 0052            motor_Write@bit_count 004C  
               _hashtag_pressed 0023                        i2u215_40 1D14                        i2u215_41 1D10  
                      _PIR1bits 0F9E           motor_RFID@lastBitsVal 002A                       _printfUID 10FC  
                 ??_motor_Write 0059            _Terminal_TXAvailable 1CBC                  _printLedConfig 11EC  
                     _state_str 0024                      printfUID@i 005F          motor_RFID@tempRegValue 002B  
                      Espera@ms 0060    __end_of_Terminal_ReceiveChar 1DAA                      ?_initPorts 0050  
                 motor_RFID@UID 0001                  ?_Terminal_Init 0050                       copy_data0 183A  
                     copy_data1 185A                 ?_CantaPartBaixa 0050                        _Columnas 0039  
         ?_Terminal_RXAvailable 0050           motor_RFID@currentUser 0069                   _motorTerminal 0AF2  
      __end_of_resetMotorStates 1D8E               ?_motor_SendString 0050                        __Hrparam 0000  
                      __Lrparam 0000              ??_motor_SendString 0055          __end_of_printLedConfig 12A2  
 __end_of_motor_StartSendString 1C9E                      ?_printfUID 0057                     _initTeclado 1CF0  
         ?_Terminal_TXAvailable 0051              motor_RFID@checksum 002D                     _currentTime 0072  
                   _currentUser 0041             __end_of_motor_Write 1642                        _delay_us 1C34  
                      __ptext10 10FC                        __ptext11 1B10              _EscriuPrimeraOrdre 1524  
                      __ptext20 1CF0                        __ptext12 1C9E                        __ptext21 1D96  
                      __ptext13 1C7C                        __ptext30 1C34                        __ptext22 1D7A  
                      __ptext14 17B8                        __ptext31 1D62                        __ptext23 193A  
                      __ptext15 1C0E                        __ptext40 1C58                        __ptext32 1D9E  
                      __ptext24 1BE0                        __ptext16 1CBC                        __ptext41 1986  
                      __ptext33 1D54                        __ptext25 1D84                        __ptext17 148C  
                      __ptext42 18E4                        __ptext34 1D6E                        __ptext26 1B46  
                      __ptext18 1DA6                        __ptext43 1524                        __ptext35 1D44  
                      __ptext27 1A1C                        __ptext19 1D1C                        __ptext44 1BAE  
                      __ptext36 1B7A                        __ptext28 12A2                        __ptext45 1642  
                      __ptext37 1004                        __ptext29 134A                        __ptext46 16C6  
                      __ptext38 1D30                        __ptext39 1A60                        __ptext49 1CD8  
                 ??_TI_NewTimer 0052                  CantaPartAlta@c 0052               motor_Write@ucAddr 004B  
                      _initRFID 1D7A                        _initData 1D6E                        _initLeds 1D54  
           ?_EscriuPrimeraOrdre 0050                  ?_motorTerminal 0050           __end_of_CantaPartAlta 174A  
                      _new_user 001E                      _MFRC522_Rd 134A                      _MFRC522_Wr 12A2  
                 ?_getActualUID 0051                    ??_motor_RFID 0066                        isa$xinst 0000  
                  ??_motor_Read 0058            __end_of_TI_ResetTics 1C7C                        int$flags 007A  
            motor_RFID@substate 0034                 ?_printLedConfig 0057                        _userUIDs 0080  
                 _printfUID$870 0059                   _printfUID$872 005B               controlLED@ledBits 1EA9  
          _MFRC522_Bit_Mask$534 005B            ??_EscriuPrimeraOrdre 0051                      LcInit@rows 0067  
                 _MFRC522_Reset 1BE0                    ??_processBit 0057                      _INTCONbits 0FF2  
               ??_Terminal_Init 0051       TI_GetTics@CopiaTicsActual 0059               _new_configuration 001F  
                   ??_initPorts 0051          ??_Terminal_RXAvailable 0051                  _configurations 00C0  
   __end_of_Terminal_SendString 1B46              __end_of_motor_RFID 0AF2                        intlevel1 0000  
                      intlevel2 0000              __end_of_motor_Read 1004                motor_Write@value 0058  
           __end_of_TI_NewTimer 193A                  ??_getActualUID 0052              __end_of_processBit 17B8  
      ??_MFRC522_AntennaControl 005F          ??_Terminal_TXAvailable 0053            _Terminal_ReceiveChar 1DA6  
     __end_ofcontrolLED@ledBits 1EAF                     ??_printfUID 0058                ??_motor_SendChar 0054  
                ?_MFRC522_Reset 0050                     _motor_Write 15BA          motor_RFID@backBitsCalc 0070  
            _printLedConfig$880 0058              _InitPortDirections 1D62                   ?_MFRC522_Init 0050  
               ??_motorTerminal 0061             ?_InitPortDirections 0050            printfUID@currentUser 0057  
                   ?_MFRC522_Rd 0050                     ?_MFRC522_Wr 0053  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 13 15:49:47 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    67                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 05/12/2024 GMT
    71                           ; 
    72                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4321 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000FE0                     bsr             equ	4064
   105   000FE9                     fsr0            equ	4073
   106   000FEA                     fsr0h           equ	4074
   107   000FE9                     fsr0l           equ	4073
   108   000FE1                     fsr1            equ	4065
   109   000FE2                     fsr1h           equ	4066
   110   000FE1                     fsr1l           equ	4065
   111   000FD9                     fsr2            equ	4057
   112   000FDA                     fsr2h           equ	4058
   113   000FD9                     fsr2l           equ	4057
   114   000FEF                     indf0           equ	4079
   115   000FE7                     indf1           equ	4071
   116   000FDF                     indf2           equ	4063
   117   000FF2                     intcon          equ	4082
   118   000000                     nvmcon          equ	0
   119   000FF9                     pcl             equ	4089
   120   000FFA                     pclath          equ	4090
   121   000FFB                     pclatu          equ	4091
   122   000FEB                     plusw0          equ	4075
   123   000FE3                     plusw1          equ	4067
   124   000FDB                     plusw2          equ	4059
   125   000FED                     postdec0        equ	4077
   126   000FE5                     postdec1        equ	4069
   127   000FDD                     postdec2        equ	4061
   128   000FEE                     postinc0        equ	4078
   129   000FE6                     postinc1        equ	4070
   130   000FDE                     postinc2        equ	4062
   131   000FEC                     preinc0         equ	4076
   132   000FE4                     preinc1         equ	4068
   133   000FDC                     preinc2         equ	4060
   134   000FF3                     prod            equ	4083
   135   000FF4                     prodh           equ	4084
   136   000FF3                     prodl           equ	4083
   137   000FD8                     status          equ	4056
   138   000FF5                     tablat          equ	4085
   139   000FF6                     tblptr          equ	4086
   140   000FF7                     tblptrh         equ	4087
   141   000FF6                     tblptrl         equ	4086
   142   000FF8                     tblptru         equ	4088
   143   000FFD                     tosl            equ	4093
   144   000FE8                     wreg            equ	4072
   145   000F80                     PORTA           equ	3968	;# 
   146   000F81                     PORTB           equ	3969	;# 
   147   000F82                     PORTC           equ	3970	;# 
   148   000F83                     PORTD           equ	3971	;# 
   149   000F84                     PORTE           equ	3972	;# 
   150   000F89                     LATA            equ	3977	;# 
   151   000F8A                     LATB            equ	3978	;# 
   152   000F8B                     LATC            equ	3979	;# 
   153   000F8C                     LATD            equ	3980	;# 
   154   000F8D                     LATE            equ	3981	;# 
   155   000F92                     TRISA           equ	3986	;# 
   156   000F92                     DDRA            equ	3986	;# 
   157   000F93                     TRISB           equ	3987	;# 
   158   000F93                     DDRB            equ	3987	;# 
   159   000F94                     TRISC           equ	3988	;# 
   160   000F94                     DDRC            equ	3988	;# 
   161   000F95                     TRISD           equ	3989	;# 
   162   000F95                     DDRD            equ	3989	;# 
   163   000F96                     TRISE           equ	3990	;# 
   164   000F96                     DDRE            equ	3990	;# 
   165   000F9B                     OSCTUNE         equ	3995	;# 
   166   000F9D                     PIE1            equ	3997	;# 
   167   000F9E                     PIR1            equ	3998	;# 
   168   000F9F                     IPR1            equ	3999	;# 
   169   000FA0                     PIE2            equ	4000	;# 
   170   000FA1                     PIR2            equ	4001	;# 
   171   000FA2                     IPR2            equ	4002	;# 
   172   000FA6                     EECON1          equ	4006	;# 
   173   000FA7                     EECON2          equ	4007	;# 
   174   000FA8                     EEDATA          equ	4008	;# 
   175   000FA9                     EEADR           equ	4009	;# 
   176   000FAB                     RCSTA           equ	4011	;# 
   177   000FAB                     RCSTA1          equ	4011	;# 
   178   000FAC                     TXSTA           equ	4012	;# 
   179   000FAC                     TXSTA1          equ	4012	;# 
   180   000FAD                     TXREG           equ	4013	;# 
   181   000FAD                     TXREG1          equ	4013	;# 
   182   000FAE                     RCREG           equ	4014	;# 
   183   000FAE                     RCREG1          equ	4014	;# 
   184   000FAF                     SPBRG           equ	4015	;# 
   185   000FAF                     SPBRG1          equ	4015	;# 
   186   000FB0                     SPBRGH          equ	4016	;# 
   187   000FB1                     T3CON           equ	4017	;# 
   188   000FB2                     TMR3            equ	4018	;# 
   189   000FB2                     TMR3L           equ	4018	;# 
   190   000FB3                     TMR3H           equ	4019	;# 
   191   000FB4                     CMCON           equ	4020	;# 
   192   000FB5                     CVRCON          equ	4021	;# 
   193   000FB6                     ECCP1AS         equ	4022	;# 
   194   000FB7                     ECCP1DEL        equ	4023	;# 
   195   000FB7                     PWM1CON         equ	4023	;# 
   196   000FB8                     BAUDCON         equ	4024	;# 
   197   000FB8                     BAUDCTL         equ	4024	;# 
   198   000FBA                     CCP2CON         equ	4026	;# 
   199   000FBB                     CCPR2           equ	4027	;# 
   200   000FBB                     CCPR2L          equ	4027	;# 
   201   000FBC                     CCPR2H          equ	4028	;# 
   202   000FBD                     CCP1CON         equ	4029	;# 
   203   000FBD                     ECCP1CON        equ	4029	;# 
   204   000FBE                     CCPR1           equ	4030	;# 
   205   000FBE                     CCPR1L          equ	4030	;# 
   206   000FBF                     CCPR1H          equ	4031	;# 
   207   000FC0                     ADCON2          equ	4032	;# 
   208   000FC1                     ADCON1          equ	4033	;# 
   209   000FC2                     ADCON0          equ	4034	;# 
   210   000FC3                     ADRES           equ	4035	;# 
   211   000FC3                     ADRESL          equ	4035	;# 
   212   000FC4                     ADRESH          equ	4036	;# 
   213   000FC5                     SSPCON2         equ	4037	;# 
   214   000FC6                     SSPCON1         equ	4038	;# 
   215   000FC7                     SSPSTAT         equ	4039	;# 
   216   000FC8                     SSPADD          equ	4040	;# 
   217   000FC9                     SSPBUF          equ	4041	;# 
   218   000FCA                     T2CON           equ	4042	;# 
   219   000FCB                     PR2             equ	4043	;# 
   220   000FCB                     MEMCON          equ	4043	;# 
   221   000FCC                     TMR2            equ	4044	;# 
   222   000FCD                     T1CON           equ	4045	;# 
   223   000FCE                     TMR1            equ	4046	;# 
   224   000FCE                     TMR1L           equ	4046	;# 
   225   000FCF                     TMR1H           equ	4047	;# 
   226   000FD0                     RCON            equ	4048	;# 
   227   000FD1                     WDTCON          equ	4049	;# 
   228   000FD2                     HLVDCON         equ	4050	;# 
   229   000FD2                     LVDCON          equ	4050	;# 
   230   000FD3                     OSCCON          equ	4051	;# 
   231   000FD5                     T0CON           equ	4053	;# 
   232   000FD6                     TMR0            equ	4054	;# 
   233   000FD6                     TMR0L           equ	4054	;# 
   234   000FD7                     TMR0H           equ	4055	;# 
   235   000FD8                     STATUS          equ	4056	;# 
   236   000FD9                     FSR2            equ	4057	;# 
   237   000FD9                     FSR2L           equ	4057	;# 
   238   000FDA                     FSR2H           equ	4058	;# 
   239   000FDB                     PLUSW2          equ	4059	;# 
   240   000FDC                     PREINC2         equ	4060	;# 
   241   000FDD                     POSTDEC2        equ	4061	;# 
   242   000FDE                     POSTINC2        equ	4062	;# 
   243   000FDF                     INDF2           equ	4063	;# 
   244   000FE0                     BSR             equ	4064	;# 
   245   000FE1                     FSR1            equ	4065	;# 
   246   000FE1                     FSR1L           equ	4065	;# 
   247   000FE2                     FSR1H           equ	4066	;# 
   248   000FE3                     PLUSW1          equ	4067	;# 
   249   000FE4                     PREINC1         equ	4068	;# 
   250   000FE5                     POSTDEC1        equ	4069	;# 
   251   000FE6                     POSTINC1        equ	4070	;# 
   252   000FE7                     INDF1           equ	4071	;# 
   253   000FE8                     WREG            equ	4072	;# 
   254   000FE9                     FSR0            equ	4073	;# 
   255   000FE9                     FSR0L           equ	4073	;# 
   256   000FEA                     FSR0H           equ	4074	;# 
   257   000FEB                     PLUSW0          equ	4075	;# 
   258   000FEC                     PREINC0         equ	4076	;# 
   259   000FED                     POSTDEC0        equ	4077	;# 
   260   000FEE                     POSTINC0        equ	4078	;# 
   261   000FEF                     INDF0           equ	4079	;# 
   262   000FF0                     INTCON3         equ	4080	;# 
   263   000FF1                     INTCON2         equ	4081	;# 
   264   000FF2                     INTCON          equ	4082	;# 
   265   000FF3                     PROD            equ	4083	;# 
   266   000FF3                     PRODL           equ	4083	;# 
   267   000FF4                     PRODH           equ	4084	;# 
   268   000FF5                     TABLAT          equ	4085	;# 
   269   000FF6                     TBLPTR          equ	4086	;# 
   270   000FF6                     TBLPTRL         equ	4086	;# 
   271   000FF7                     TBLPTRH         equ	4087	;# 
   272   000FF8                     TBLPTRU         equ	4088	;# 
   273   000FF9                     PCLAT           equ	4089	;# 
   274   000FF9                     PC              equ	4089	;# 
   275   000FF9                     PCL             equ	4089	;# 
   276   000FFA                     PCLATH          equ	4090	;# 
   277   000FFB                     PCLATU          equ	4091	;# 
   278   000FFC                     STKPTR          equ	4092	;# 
   279   000FFD                     TOS             equ	4093	;# 
   280   000FFD                     TOSL            equ	4093	;# 
   281   000FFE                     TOSH            equ	4094	;# 
   282   000FFF                     TOSU            equ	4095	;# 
   283   000F80                     PORTA           equ	3968	;# 
   284   000F81                     PORTB           equ	3969	;# 
   285   000F82                     PORTC           equ	3970	;# 
   286   000F83                     PORTD           equ	3971	;# 
   287   000F84                     PORTE           equ	3972	;# 
   288   000F89                     LATA            equ	3977	;# 
   289   000F8A                     LATB            equ	3978	;# 
   290   000F8B                     LATC            equ	3979	;# 
   291   000F8C                     LATD            equ	3980	;# 
   292   000F8D                     LATE            equ	3981	;# 
   293   000F92                     TRISA           equ	3986	;# 
   294   000F92                     DDRA            equ	3986	;# 
   295   000F93                     TRISB           equ	3987	;# 
   296   000F93                     DDRB            equ	3987	;# 
   297   000F94                     TRISC           equ	3988	;# 
   298   000F94                     DDRC            equ	3988	;# 
   299   000F95                     TRISD           equ	3989	;# 
   300   000F95                     DDRD            equ	3989	;# 
   301   000F96                     TRISE           equ	3990	;# 
   302   000F96                     DDRE            equ	3990	;# 
   303   000F9B                     OSCTUNE         equ	3995	;# 
   304   000F9D                     PIE1            equ	3997	;# 
   305   000F9E                     PIR1            equ	3998	;# 
   306   000F9F                     IPR1            equ	3999	;# 
   307   000FA0                     PIE2            equ	4000	;# 
   308   000FA1                     PIR2            equ	4001	;# 
   309   000FA2                     IPR2            equ	4002	;# 
   310   000FA6                     EECON1          equ	4006	;# 
   311   000FA7                     EECON2          equ	4007	;# 
   312   000FA8                     EEDATA          equ	4008	;# 
   313   000FA9                     EEADR           equ	4009	;# 
   314   000FAB                     RCSTA           equ	4011	;# 
   315   000FAB                     RCSTA1          equ	4011	;# 
   316   000FAC                     TXSTA           equ	4012	;# 
   317   000FAC                     TXSTA1          equ	4012	;# 
   318   000FAD                     TXREG           equ	4013	;# 
   319   000FAD                     TXREG1          equ	4013	;# 
   320   000FAE                     RCREG           equ	4014	;# 
   321   000FAE                     RCREG1          equ	4014	;# 
   322   000FAF                     SPBRG           equ	4015	;# 
   323   000FAF                     SPBRG1          equ	4015	;# 
   324   000FB0                     SPBRGH          equ	4016	;# 
   325   000FB1                     T3CON           equ	4017	;# 
   326   000FB2                     TMR3            equ	4018	;# 
   327   000FB2                     TMR3L           equ	4018	;# 
   328   000FB3                     TMR3H           equ	4019	;# 
   329   000FB4                     CMCON           equ	4020	;# 
   330   000FB5                     CVRCON          equ	4021	;# 
   331   000FB6                     ECCP1AS         equ	4022	;# 
   332   000FB7                     ECCP1DEL        equ	4023	;# 
   333   000FB7                     PWM1CON         equ	4023	;# 
   334   000FB8                     BAUDCON         equ	4024	;# 
   335   000FB8                     BAUDCTL         equ	4024	;# 
   336   000FBA                     CCP2CON         equ	4026	;# 
   337   000FBB                     CCPR2           equ	4027	;# 
   338   000FBB                     CCPR2L          equ	4027	;# 
   339   000FBC                     CCPR2H          equ	4028	;# 
   340   000FBD                     CCP1CON         equ	4029	;# 
   341   000FBD                     ECCP1CON        equ	4029	;# 
   342   000FBE                     CCPR1           equ	4030	;# 
   343   000FBE                     CCPR1L          equ	4030	;# 
   344   000FBF                     CCPR1H          equ	4031	;# 
   345   000FC0                     ADCON2          equ	4032	;# 
   346   000FC1                     ADCON1          equ	4033	;# 
   347   000FC2                     ADCON0          equ	4034	;# 
   348   000FC3                     ADRES           equ	4035	;# 
   349   000FC3                     ADRESL          equ	4035	;# 
   350   000FC4                     ADRESH          equ	4036	;# 
   351   000FC5                     SSPCON2         equ	4037	;# 
   352   000FC6                     SSPCON1         equ	4038	;# 
   353   000FC7                     SSPSTAT         equ	4039	;# 
   354   000FC8                     SSPADD          equ	4040	;# 
   355   000FC9                     SSPBUF          equ	4041	;# 
   356   000FCA                     T2CON           equ	4042	;# 
   357   000FCB                     PR2             equ	4043	;# 
   358   000FCB                     MEMCON          equ	4043	;# 
   359   000FCC                     TMR2            equ	4044	;# 
   360   000FCD                     T1CON           equ	4045	;# 
   361   000FCE                     TMR1            equ	4046	;# 
   362   000FCE                     TMR1L           equ	4046	;# 
   363   000FCF                     TMR1H           equ	4047	;# 
   364   000FD0                     RCON            equ	4048	;# 
   365   000FD1                     WDTCON          equ	4049	;# 
   366   000FD2                     HLVDCON         equ	4050	;# 
   367   000FD2                     LVDCON          equ	4050	;# 
   368   000FD3                     OSCCON          equ	4051	;# 
   369   000FD5                     T0CON           equ	4053	;# 
   370   000FD6                     TMR0            equ	4054	;# 
   371   000FD6                     TMR0L           equ	4054	;# 
   372   000FD7                     TMR0H           equ	4055	;# 
   373   000FD8                     STATUS          equ	4056	;# 
   374   000FD9                     FSR2            equ	4057	;# 
   375   000FD9                     FSR2L           equ	4057	;# 
   376   000FDA                     FSR2H           equ	4058	;# 
   377   000FDB                     PLUSW2          equ	4059	;# 
   378   000FDC                     PREINC2         equ	4060	;# 
   379   000FDD                     POSTDEC2        equ	4061	;# 
   380   000FDE                     POSTINC2        equ	4062	;# 
   381   000FDF                     INDF2           equ	4063	;# 
   382   000FE0                     BSR             equ	4064	;# 
   383   000FE1                     FSR1            equ	4065	;# 
   384   000FE1                     FSR1L           equ	4065	;# 
   385   000FE2                     FSR1H           equ	4066	;# 
   386   000FE3                     PLUSW1          equ	4067	;# 
   387   000FE4                     PREINC1         equ	4068	;# 
   388   000FE5                     POSTDEC1        equ	4069	;# 
   389   000FE6                     POSTINC1        equ	4070	;# 
   390   000FE7                     INDF1           equ	4071	;# 
   391   000FE8                     WREG            equ	4072	;# 
   392   000FE9                     FSR0            equ	4073	;# 
   393   000FE9                     FSR0L           equ	4073	;# 
   394   000FEA                     FSR0H           equ	4074	;# 
   395   000FEB                     PLUSW0          equ	4075	;# 
   396   000FEC                     PREINC0         equ	4076	;# 
   397   000FED                     POSTDEC0        equ	4077	;# 
   398   000FEE                     POSTINC0        equ	4078	;# 
   399   000FEF                     INDF0           equ	4079	;# 
   400   000FF0                     INTCON3         equ	4080	;# 
   401   000FF1                     INTCON2         equ	4081	;# 
   402   000FF2                     INTCON          equ	4082	;# 
   403   000FF3                     PROD            equ	4083	;# 
   404   000FF3                     PRODL           equ	4083	;# 
   405   000FF4                     PRODH           equ	4084	;# 
   406   000FF5                     TABLAT          equ	4085	;# 
   407   000FF6                     TBLPTR          equ	4086	;# 
   408   000FF6                     TBLPTRL         equ	4086	;# 
   409   000FF7                     TBLPTRH         equ	4087	;# 
   410   000FF8                     TBLPTRU         equ	4088	;# 
   411   000FF9                     PCLAT           equ	4089	;# 
   412   000FF9                     PC              equ	4089	;# 
   413   000FF9                     PCL             equ	4089	;# 
   414   000FFA                     PCLATH          equ	4090	;# 
   415   000FFB                     PCLATU          equ	4091	;# 
   416   000FFC                     STKPTR          equ	4092	;# 
   417   000FFD                     TOS             equ	4093	;# 
   418   000FFD                     TOSL            equ	4093	;# 
   419   000FFE                     TOSH            equ	4094	;# 
   420   000FFF                     TOSU            equ	4095	;# 
   421   000F80                     PORTA           equ	3968	;# 
   422   000F81                     PORTB           equ	3969	;# 
   423   000F82                     PORTC           equ	3970	;# 
   424   000F83                     PORTD           equ	3971	;# 
   425   000F84                     PORTE           equ	3972	;# 
   426   000F89                     LATA            equ	3977	;# 
   427   000F8A                     LATB            equ	3978	;# 
   428   000F8B                     LATC            equ	3979	;# 
   429   000F8C                     LATD            equ	3980	;# 
   430   000F8D                     LATE            equ	3981	;# 
   431   000F92                     TRISA           equ	3986	;# 
   432   000F92                     DDRA            equ	3986	;# 
   433   000F93                     TRISB           equ	3987	;# 
   434   000F93                     DDRB            equ	3987	;# 
   435   000F94                     TRISC           equ	3988	;# 
   436   000F94                     DDRC            equ	3988	;# 
   437   000F95                     TRISD           equ	3989	;# 
   438   000F95                     DDRD            equ	3989	;# 
   439   000F96                     TRISE           equ	3990	;# 
   440   000F96                     DDRE            equ	3990	;# 
   441   000F9B                     OSCTUNE         equ	3995	;# 
   442   000F9D                     PIE1            equ	3997	;# 
   443   000F9E                     PIR1            equ	3998	;# 
   444   000F9F                     IPR1            equ	3999	;# 
   445   000FA0                     PIE2            equ	4000	;# 
   446   000FA1                     PIR2            equ	4001	;# 
   447   000FA2                     IPR2            equ	4002	;# 
   448   000FA6                     EECON1          equ	4006	;# 
   449   000FA7                     EECON2          equ	4007	;# 
   450   000FA8                     EEDATA          equ	4008	;# 
   451   000FA9                     EEADR           equ	4009	;# 
   452   000FAB                     RCSTA           equ	4011	;# 
   453   000FAB                     RCSTA1          equ	4011	;# 
   454   000FAC                     TXSTA           equ	4012	;# 
   455   000FAC                     TXSTA1          equ	4012	;# 
   456   000FAD                     TXREG           equ	4013	;# 
   457   000FAD                     TXREG1          equ	4013	;# 
   458   000FAE                     RCREG           equ	4014	;# 
   459   000FAE                     RCREG1          equ	4014	;# 
   460   000FAF                     SPBRG           equ	4015	;# 
   461   000FAF                     SPBRG1          equ	4015	;# 
   462   000FB0                     SPBRGH          equ	4016	;# 
   463   000FB1                     T3CON           equ	4017	;# 
   464   000FB2                     TMR3            equ	4018	;# 
   465   000FB2                     TMR3L           equ	4018	;# 
   466   000FB3                     TMR3H           equ	4019	;# 
   467   000FB4                     CMCON           equ	4020	;# 
   468   000FB5                     CVRCON          equ	4021	;# 
   469   000FB6                     ECCP1AS         equ	4022	;# 
   470   000FB7                     ECCP1DEL        equ	4023	;# 
   471   000FB7                     PWM1CON         equ	4023	;# 
   472   000FB8                     BAUDCON         equ	4024	;# 
   473   000FB8                     BAUDCTL         equ	4024	;# 
   474   000FBA                     CCP2CON         equ	4026	;# 
   475   000FBB                     CCPR2           equ	4027	;# 
   476   000FBB                     CCPR2L          equ	4027	;# 
   477   000FBC                     CCPR2H          equ	4028	;# 
   478   000FBD                     CCP1CON         equ	4029	;# 
   479   000FBD                     ECCP1CON        equ	4029	;# 
   480   000FBE                     CCPR1           equ	4030	;# 
   481   000FBE                     CCPR1L          equ	4030	;# 
   482   000FBF                     CCPR1H          equ	4031	;# 
   483   000FC0                     ADCON2          equ	4032	;# 
   484   000FC1                     ADCON1          equ	4033	;# 
   485   000FC2                     ADCON0          equ	4034	;# 
   486   000FC3                     ADRES           equ	4035	;# 
   487   000FC3                     ADRESL          equ	4035	;# 
   488   000FC4                     ADRESH          equ	4036	;# 
   489   000FC5                     SSPCON2         equ	4037	;# 
   490   000FC6                     SSPCON1         equ	4038	;# 
   491   000FC7                     SSPSTAT         equ	4039	;# 
   492   000FC8                     SSPADD          equ	4040	;# 
   493   000FC9                     SSPBUF          equ	4041	;# 
   494   000FCA                     T2CON           equ	4042	;# 
   495   000FCB                     PR2             equ	4043	;# 
   496   000FCB                     MEMCON          equ	4043	;# 
   497   000FCC                     TMR2            equ	4044	;# 
   498   000FCD                     T1CON           equ	4045	;# 
   499   000FCE                     TMR1            equ	4046	;# 
   500   000FCE                     TMR1L           equ	4046	;# 
   501   000FCF                     TMR1H           equ	4047	;# 
   502   000FD0                     RCON            equ	4048	;# 
   503   000FD1                     WDTCON          equ	4049	;# 
   504   000FD2                     HLVDCON         equ	4050	;# 
   505   000FD2                     LVDCON          equ	4050	;# 
   506   000FD3                     OSCCON          equ	4051	;# 
   507   000FD5                     T0CON           equ	4053	;# 
   508   000FD6                     TMR0            equ	4054	;# 
   509   000FD6                     TMR0L           equ	4054	;# 
   510   000FD7                     TMR0H           equ	4055	;# 
   511   000FD8                     STATUS          equ	4056	;# 
   512   000FD9                     FSR2            equ	4057	;# 
   513   000FD9                     FSR2L           equ	4057	;# 
   514   000FDA                     FSR2H           equ	4058	;# 
   515   000FDB                     PLUSW2          equ	4059	;# 
   516   000FDC                     PREINC2         equ	4060	;# 
   517   000FDD                     POSTDEC2        equ	4061	;# 
   518   000FDE                     POSTINC2        equ	4062	;# 
   519   000FDF                     INDF2           equ	4063	;# 
   520   000FE0                     BSR             equ	4064	;# 
   521   000FE1                     FSR1            equ	4065	;# 
   522   000FE1                     FSR1L           equ	4065	;# 
   523   000FE2                     FSR1H           equ	4066	;# 
   524   000FE3                     PLUSW1          equ	4067	;# 
   525   000FE4                     PREINC1         equ	4068	;# 
   526   000FE5                     POSTDEC1        equ	4069	;# 
   527   000FE6                     POSTINC1        equ	4070	;# 
   528   000FE7                     INDF1           equ	4071	;# 
   529   000FE8                     WREG            equ	4072	;# 
   530   000FE9                     FSR0            equ	4073	;# 
   531   000FE9                     FSR0L           equ	4073	;# 
   532   000FEA                     FSR0H           equ	4074	;# 
   533   000FEB                     PLUSW0          equ	4075	;# 
   534   000FEC                     PREINC0         equ	4076	;# 
   535   000FED                     POSTDEC0        equ	4077	;# 
   536   000FEE                     POSTINC0        equ	4078	;# 
   537   000FEF                     INDF0           equ	4079	;# 
   538   000FF0                     INTCON3         equ	4080	;# 
   539   000FF1                     INTCON2         equ	4081	;# 
   540   000FF2                     INTCON          equ	4082	;# 
   541   000FF3                     PROD            equ	4083	;# 
   542   000FF3                     PRODL           equ	4083	;# 
   543   000FF4                     PRODH           equ	4084	;# 
   544   000FF5                     TABLAT          equ	4085	;# 
   545   000FF6                     TBLPTR          equ	4086	;# 
   546   000FF6                     TBLPTRL         equ	4086	;# 
   547   000FF7                     TBLPTRH         equ	4087	;# 
   548   000FF8                     TBLPTRU         equ	4088	;# 
   549   000FF9                     PCLAT           equ	4089	;# 
   550   000FF9                     PC              equ	4089	;# 
   551   000FF9                     PCL             equ	4089	;# 
   552   000FFA                     PCLATH          equ	4090	;# 
   553   000FFB                     PCLATU          equ	4091	;# 
   554   000FFC                     STKPTR          equ	4092	;# 
   555   000FFD                     TOS             equ	4093	;# 
   556   000FFD                     TOSL            equ	4093	;# 
   557   000FFE                     TOSH            equ	4094	;# 
   558   000FFF                     TOSU            equ	4095	;# 
   559   000F80                     PORTA           equ	3968	;# 
   560   000F81                     PORTB           equ	3969	;# 
   561   000F82                     PORTC           equ	3970	;# 
   562   000F83                     PORTD           equ	3971	;# 
   563   000F84                     PORTE           equ	3972	;# 
   564   000F89                     LATA            equ	3977	;# 
   565   000F8A                     LATB            equ	3978	;# 
   566   000F8B                     LATC            equ	3979	;# 
   567   000F8C                     LATD            equ	3980	;# 
   568   000F8D                     LATE            equ	3981	;# 
   569   000F92                     TRISA           equ	3986	;# 
   570   000F92                     DDRA            equ	3986	;# 
   571   000F93                     TRISB           equ	3987	;# 
   572   000F93                     DDRB            equ	3987	;# 
   573   000F94                     TRISC           equ	3988	;# 
   574   000F94                     DDRC            equ	3988	;# 
   575   000F95                     TRISD           equ	3989	;# 
   576   000F95                     DDRD            equ	3989	;# 
   577   000F96                     TRISE           equ	3990	;# 
   578   000F96                     DDRE            equ	3990	;# 
   579   000F9B                     OSCTUNE         equ	3995	;# 
   580   000F9D                     PIE1            equ	3997	;# 
   581   000F9E                     PIR1            equ	3998	;# 
   582   000F9F                     IPR1            equ	3999	;# 
   583   000FA0                     PIE2            equ	4000	;# 
   584   000FA1                     PIR2            equ	4001	;# 
   585   000FA2                     IPR2            equ	4002	;# 
   586   000FA6                     EECON1          equ	4006	;# 
   587   000FA7                     EECON2          equ	4007	;# 
   588   000FA8                     EEDATA          equ	4008	;# 
   589   000FA9                     EEADR           equ	4009	;# 
   590   000FAB                     RCSTA           equ	4011	;# 
   591   000FAB                     RCSTA1          equ	4011	;# 
   592   000FAC                     TXSTA           equ	4012	;# 
   593   000FAC                     TXSTA1          equ	4012	;# 
   594   000FAD                     TXREG           equ	4013	;# 
   595   000FAD                     TXREG1          equ	4013	;# 
   596   000FAE                     RCREG           equ	4014	;# 
   597   000FAE                     RCREG1          equ	4014	;# 
   598   000FAF                     SPBRG           equ	4015	;# 
   599   000FAF                     SPBRG1          equ	4015	;# 
   600   000FB0                     SPBRGH          equ	4016	;# 
   601   000FB1                     T3CON           equ	4017	;# 
   602   000FB2                     TMR3            equ	4018	;# 
   603   000FB2                     TMR3L           equ	4018	;# 
   604   000FB3                     TMR3H           equ	4019	;# 
   605   000FB4                     CMCON           equ	4020	;# 
   606   000FB5                     CVRCON          equ	4021	;# 
   607   000FB6                     ECCP1AS         equ	4022	;# 
   608   000FB7                     ECCP1DEL        equ	4023	;# 
   609   000FB7                     PWM1CON         equ	4023	;# 
   610   000FB8                     BAUDCON         equ	4024	;# 
   611   000FB8                     BAUDCTL         equ	4024	;# 
   612   000FBA                     CCP2CON         equ	4026	;# 
   613   000FBB                     CCPR2           equ	4027	;# 
   614   000FBB                     CCPR2L          equ	4027	;# 
   615   000FBC                     CCPR2H          equ	4028	;# 
   616   000FBD                     CCP1CON         equ	4029	;# 
   617   000FBD                     ECCP1CON        equ	4029	;# 
   618   000FBE                     CCPR1           equ	4030	;# 
   619   000FBE                     CCPR1L          equ	4030	;# 
   620   000FBF                     CCPR1H          equ	4031	;# 
   621   000FC0                     ADCON2          equ	4032	;# 
   622   000FC1                     ADCON1          equ	4033	;# 
   623   000FC2                     ADCON0          equ	4034	;# 
   624   000FC3                     ADRES           equ	4035	;# 
   625   000FC3                     ADRESL          equ	4035	;# 
   626   000FC4                     ADRESH          equ	4036	;# 
   627   000FC5                     SSPCON2         equ	4037	;# 
   628   000FC6                     SSPCON1         equ	4038	;# 
   629   000FC7                     SSPSTAT         equ	4039	;# 
   630   000FC8                     SSPADD          equ	4040	;# 
   631   000FC9                     SSPBUF          equ	4041	;# 
   632   000FCA                     T2CON           equ	4042	;# 
   633   000FCB                     PR2             equ	4043	;# 
   634   000FCB                     MEMCON          equ	4043	;# 
   635   000FCC                     TMR2            equ	4044	;# 
   636   000FCD                     T1CON           equ	4045	;# 
   637   000FCE                     TMR1            equ	4046	;# 
   638   000FCE                     TMR1L           equ	4046	;# 
   639   000FCF                     TMR1H           equ	4047	;# 
   640   000FD0                     RCON            equ	4048	;# 
   641   000FD1                     WDTCON          equ	4049	;# 
   642   000FD2                     HLVDCON         equ	4050	;# 
   643   000FD2                     LVDCON          equ	4050	;# 
   644   000FD3                     OSCCON          equ	4051	;# 
   645   000FD5                     T0CON           equ	4053	;# 
   646   000FD6                     TMR0            equ	4054	;# 
   647   000FD6                     TMR0L           equ	4054	;# 
   648   000FD7                     TMR0H           equ	4055	;# 
   649   000FD8                     STATUS          equ	4056	;# 
   650   000FD9                     FSR2            equ	4057	;# 
   651   000FD9                     FSR2L           equ	4057	;# 
   652   000FDA                     FSR2H           equ	4058	;# 
   653   000FDB                     PLUSW2          equ	4059	;# 
   654   000FDC                     PREINC2         equ	4060	;# 
   655   000FDD                     POSTDEC2        equ	4061	;# 
   656   000FDE                     POSTINC2        equ	4062	;# 
   657   000FDF                     INDF2           equ	4063	;# 
   658   000FE0                     BSR             equ	4064	;# 
   659   000FE1                     FSR1            equ	4065	;# 
   660   000FE1                     FSR1L           equ	4065	;# 
   661   000FE2                     FSR1H           equ	4066	;# 
   662   000FE3                     PLUSW1          equ	4067	;# 
   663   000FE4                     PREINC1         equ	4068	;# 
   664   000FE5                     POSTDEC1        equ	4069	;# 
   665   000FE6                     POSTINC1        equ	4070	;# 
   666   000FE7                     INDF1           equ	4071	;# 
   667   000FE8                     WREG            equ	4072	;# 
   668   000FE9                     FSR0            equ	4073	;# 
   669   000FE9                     FSR0L           equ	4073	;# 
   670   000FEA                     FSR0H           equ	4074	;# 
   671   000FEB                     PLUSW0          equ	4075	;# 
   672   000FEC                     PREINC0         equ	4076	;# 
   673   000FED                     POSTDEC0        equ	4077	;# 
   674   000FEE                     POSTINC0        equ	4078	;# 
   675   000FEF                     INDF0           equ	4079	;# 
   676   000FF0                     INTCON3         equ	4080	;# 
   677   000FF1                     INTCON2         equ	4081	;# 
   678   000FF2                     INTCON          equ	4082	;# 
   679   000FF3                     PROD            equ	4083	;# 
   680   000FF3                     PRODL           equ	4083	;# 
   681   000FF4                     PRODH           equ	4084	;# 
   682   000FF5                     TABLAT          equ	4085	;# 
   683   000FF6                     TBLPTR          equ	4086	;# 
   684   000FF6                     TBLPTRL         equ	4086	;# 
   685   000FF7                     TBLPTRH         equ	4087	;# 
   686   000FF8                     TBLPTRU         equ	4088	;# 
   687   000FF9                     PCLAT           equ	4089	;# 
   688   000FF9                     PC              equ	4089	;# 
   689   000FF9                     PCL             equ	4089	;# 
   690   000FFA                     PCLATH          equ	4090	;# 
   691   000FFB                     PCLATU          equ	4091	;# 
   692   000FFC                     STKPTR          equ	4092	;# 
   693   000FFD                     TOS             equ	4093	;# 
   694   000FFD                     TOSL            equ	4093	;# 
   695   000FFE                     TOSH            equ	4094	;# 
   696   000FFF                     TOSU            equ	4095	;# 
   697   000F80                     PORTA           equ	3968	;# 
   698   000F81                     PORTB           equ	3969	;# 
   699   000F82                     PORTC           equ	3970	;# 
   700   000F83                     PORTD           equ	3971	;# 
   701   000F84                     PORTE           equ	3972	;# 
   702   000F89                     LATA            equ	3977	;# 
   703   000F8A                     LATB            equ	3978	;# 
   704   000F8B                     LATC            equ	3979	;# 
   705   000F8C                     LATD            equ	3980	;# 
   706   000F8D                     LATE            equ	3981	;# 
   707   000F92                     TRISA           equ	3986	;# 
   708   000F92                     DDRA            equ	3986	;# 
   709   000F93                     TRISB           equ	3987	;# 
   710   000F93                     DDRB            equ	3987	;# 
   711   000F94                     TRISC           equ	3988	;# 
   712   000F94                     DDRC            equ	3988	;# 
   713   000F95                     TRISD           equ	3989	;# 
   714   000F95                     DDRD            equ	3989	;# 
   715   000F96                     TRISE           equ	3990	;# 
   716   000F96                     DDRE            equ	3990	;# 
   717   000F9B                     OSCTUNE         equ	3995	;# 
   718   000F9D                     PIE1            equ	3997	;# 
   719   000F9E                     PIR1            equ	3998	;# 
   720   000F9F                     IPR1            equ	3999	;# 
   721   000FA0                     PIE2            equ	4000	;# 
   722   000FA1                     PIR2            equ	4001	;# 
   723   000FA2                     IPR2            equ	4002	;# 
   724   000FA6                     EECON1          equ	4006	;# 
   725   000FA7                     EECON2          equ	4007	;# 
   726   000FA8                     EEDATA          equ	4008	;# 
   727   000FA9                     EEADR           equ	4009	;# 
   728   000FAB                     RCSTA           equ	4011	;# 
   729   000FAB                     RCSTA1          equ	4011	;# 
   730   000FAC                     TXSTA           equ	4012	;# 
   731   000FAC                     TXSTA1          equ	4012	;# 
   732   000FAD                     TXREG           equ	4013	;# 
   733   000FAD                     TXREG1          equ	4013	;# 
   734   000FAE                     RCREG           equ	4014	;# 
   735   000FAE                     RCREG1          equ	4014	;# 
   736   000FAF                     SPBRG           equ	4015	;# 
   737   000FAF                     SPBRG1          equ	4015	;# 
   738   000FB0                     SPBRGH          equ	4016	;# 
   739   000FB1                     T3CON           equ	4017	;# 
   740   000FB2                     TMR3            equ	4018	;# 
   741   000FB2                     TMR3L           equ	4018	;# 
   742   000FB3                     TMR3H           equ	4019	;# 
   743   000FB4                     CMCON           equ	4020	;# 
   744   000FB5                     CVRCON          equ	4021	;# 
   745   000FB6                     ECCP1AS         equ	4022	;# 
   746   000FB7                     ECCP1DEL        equ	4023	;# 
   747   000FB7                     PWM1CON         equ	4023	;# 
   748   000FB8                     BAUDCON         equ	4024	;# 
   749   000FB8                     BAUDCTL         equ	4024	;# 
   750   000FBA                     CCP2CON         equ	4026	;# 
   751   000FBB                     CCPR2           equ	4027	;# 
   752   000FBB                     CCPR2L          equ	4027	;# 
   753   000FBC                     CCPR2H          equ	4028	;# 
   754   000FBD                     CCP1CON         equ	4029	;# 
   755   000FBD                     ECCP1CON        equ	4029	;# 
   756   000FBE                     CCPR1           equ	4030	;# 
   757   000FBE                     CCPR1L          equ	4030	;# 
   758   000FBF                     CCPR1H          equ	4031	;# 
   759   000FC0                     ADCON2          equ	4032	;# 
   760   000FC1                     ADCON1          equ	4033	;# 
   761   000FC2                     ADCON0          equ	4034	;# 
   762   000FC3                     ADRES           equ	4035	;# 
   763   000FC3                     ADRESL          equ	4035	;# 
   764   000FC4                     ADRESH          equ	4036	;# 
   765   000FC5                     SSPCON2         equ	4037	;# 
   766   000FC6                     SSPCON1         equ	4038	;# 
   767   000FC7                     SSPSTAT         equ	4039	;# 
   768   000FC8                     SSPADD          equ	4040	;# 
   769   000FC9                     SSPBUF          equ	4041	;# 
   770   000FCA                     T2CON           equ	4042	;# 
   771   000FCB                     PR2             equ	4043	;# 
   772   000FCB                     MEMCON          equ	4043	;# 
   773   000FCC                     TMR2            equ	4044	;# 
   774   000FCD                     T1CON           equ	4045	;# 
   775   000FCE                     TMR1            equ	4046	;# 
   776   000FCE                     TMR1L           equ	4046	;# 
   777   000FCF                     TMR1H           equ	4047	;# 
   778   000FD0                     RCON            equ	4048	;# 
   779   000FD1                     WDTCON          equ	4049	;# 
   780   000FD2                     HLVDCON         equ	4050	;# 
   781   000FD2                     LVDCON          equ	4050	;# 
   782   000FD3                     OSCCON          equ	4051	;# 
   783   000FD5                     T0CON           equ	4053	;# 
   784   000FD6                     TMR0            equ	4054	;# 
   785   000FD6                     TMR0L           equ	4054	;# 
   786   000FD7                     TMR0H           equ	4055	;# 
   787   000FD8                     STATUS          equ	4056	;# 
   788   000FD9                     FSR2            equ	4057	;# 
   789   000FD9                     FSR2L           equ	4057	;# 
   790   000FDA                     FSR2H           equ	4058	;# 
   791   000FDB                     PLUSW2          equ	4059	;# 
   792   000FDC                     PREINC2         equ	4060	;# 
   793   000FDD                     POSTDEC2        equ	4061	;# 
   794   000FDE                     POSTINC2        equ	4062	;# 
   795   000FDF                     INDF2           equ	4063	;# 
   796   000FE0                     BSR             equ	4064	;# 
   797   000FE1                     FSR1            equ	4065	;# 
   798   000FE1                     FSR1L           equ	4065	;# 
   799   000FE2                     FSR1H           equ	4066	;# 
   800   000FE3                     PLUSW1          equ	4067	;# 
   801   000FE4                     PREINC1         equ	4068	;# 
   802   000FE5                     POSTDEC1        equ	4069	;# 
   803   000FE6                     POSTINC1        equ	4070	;# 
   804   000FE7                     INDF1           equ	4071	;# 
   805   000FE8                     WREG            equ	4072	;# 
   806   000FE9                     FSR0            equ	4073	;# 
   807   000FE9                     FSR0L           equ	4073	;# 
   808   000FEA                     FSR0H           equ	4074	;# 
   809   000FEB                     PLUSW0          equ	4075	;# 
   810   000FEC                     PREINC0         equ	4076	;# 
   811   000FED                     POSTDEC0        equ	4077	;# 
   812   000FEE                     POSTINC0        equ	4078	;# 
   813   000FEF                     INDF0           equ	4079	;# 
   814   000FF0                     INTCON3         equ	4080	;# 
   815   000FF1                     INTCON2         equ	4081	;# 
   816   000FF2                     INTCON          equ	4082	;# 
   817   000FF3                     PROD            equ	4083	;# 
   818   000FF3                     PRODL           equ	4083	;# 
   819   000FF4                     PRODH           equ	4084	;# 
   820   000FF5                     TABLAT          equ	4085	;# 
   821   000FF6                     TBLPTR          equ	4086	;# 
   822   000FF6                     TBLPTRL         equ	4086	;# 
   823   000FF7                     TBLPTRH         equ	4087	;# 
   824   000FF8                     TBLPTRU         equ	4088	;# 
   825   000FF9                     PCLAT           equ	4089	;# 
   826   000FF9                     PC              equ	4089	;# 
   827   000FF9                     PCL             equ	4089	;# 
   828   000FFA                     PCLATH          equ	4090	;# 
   829   000FFB                     PCLATU          equ	4091	;# 
   830   000FFC                     STKPTR          equ	4092	;# 
   831   000FFD                     TOS             equ	4093	;# 
   832   000FFD                     TOSL            equ	4093	;# 
   833   000FFE                     TOSH            equ	4094	;# 
   834   000FFF                     TOSU            equ	4095	;# 
   835   000F80                     PORTA           equ	3968	;# 
   836   000F81                     PORTB           equ	3969	;# 
   837   000F82                     PORTC           equ	3970	;# 
   838   000F83                     PORTD           equ	3971	;# 
   839   000F84                     PORTE           equ	3972	;# 
   840   000F89                     LATA            equ	3977	;# 
   841   000F8A                     LATB            equ	3978	;# 
   842   000F8B                     LATC            equ	3979	;# 
   843   000F8C                     LATD            equ	3980	;# 
   844   000F8D                     LATE            equ	3981	;# 
   845   000F92                     TRISA           equ	3986	;# 
   846   000F92                     DDRA            equ	3986	;# 
   847   000F93                     TRISB           equ	3987	;# 
   848   000F93                     DDRB            equ	3987	;# 
   849   000F94                     TRISC           equ	3988	;# 
   850   000F94                     DDRC            equ	3988	;# 
   851   000F95                     TRISD           equ	3989	;# 
   852   000F95                     DDRD            equ	3989	;# 
   853   000F96                     TRISE           equ	3990	;# 
   854   000F96                     DDRE            equ	3990	;# 
   855   000F9B                     OSCTUNE         equ	3995	;# 
   856   000F9D                     PIE1            equ	3997	;# 
   857   000F9E                     PIR1            equ	3998	;# 
   858   000F9F                     IPR1            equ	3999	;# 
   859   000FA0                     PIE2            equ	4000	;# 
   860   000FA1                     PIR2            equ	4001	;# 
   861   000FA2                     IPR2            equ	4002	;# 
   862   000FA6                     EECON1          equ	4006	;# 
   863   000FA7                     EECON2          equ	4007	;# 
   864   000FA8                     EEDATA          equ	4008	;# 
   865   000FA9                     EEADR           equ	4009	;# 
   866   000FAB                     RCSTA           equ	4011	;# 
   867   000FAB                     RCSTA1          equ	4011	;# 
   868   000FAC                     TXSTA           equ	4012	;# 
   869   000FAC                     TXSTA1          equ	4012	;# 
   870   000FAD                     TXREG           equ	4013	;# 
   871   000FAD                     TXREG1          equ	4013	;# 
   872   000FAE                     RCREG           equ	4014	;# 
   873   000FAE                     RCREG1          equ	4014	;# 
   874   000FAF                     SPBRG           equ	4015	;# 
   875   000FAF                     SPBRG1          equ	4015	;# 
   876   000FB0                     SPBRGH          equ	4016	;# 
   877   000FB1                     T3CON           equ	4017	;# 
   878   000FB2                     TMR3            equ	4018	;# 
   879   000FB2                     TMR3L           equ	4018	;# 
   880   000FB3                     TMR3H           equ	4019	;# 
   881   000FB4                     CMCON           equ	4020	;# 
   882   000FB5                     CVRCON          equ	4021	;# 
   883   000FB6                     ECCP1AS         equ	4022	;# 
   884   000FB7                     ECCP1DEL        equ	4023	;# 
   885   000FB7                     PWM1CON         equ	4023	;# 
   886   000FB8                     BAUDCON         equ	4024	;# 
   887   000FB8                     BAUDCTL         equ	4024	;# 
   888   000FBA                     CCP2CON         equ	4026	;# 
   889   000FBB                     CCPR2           equ	4027	;# 
   890   000FBB                     CCPR2L          equ	4027	;# 
   891   000FBC                     CCPR2H          equ	4028	;# 
   892   000FBD                     CCP1CON         equ	4029	;# 
   893   000FBD                     ECCP1CON        equ	4029	;# 
   894   000FBE                     CCPR1           equ	4030	;# 
   895   000FBE                     CCPR1L          equ	4030	;# 
   896   000FBF                     CCPR1H          equ	4031	;# 
   897   000FC0                     ADCON2          equ	4032	;# 
   898   000FC1                     ADCON1          equ	4033	;# 
   899   000FC2                     ADCON0          equ	4034	;# 
   900   000FC3                     ADRES           equ	4035	;# 
   901   000FC3                     ADRESL          equ	4035	;# 
   902   000FC4                     ADRESH          equ	4036	;# 
   903   000FC5                     SSPCON2         equ	4037	;# 
   904   000FC6                     SSPCON1         equ	4038	;# 
   905   000FC7                     SSPSTAT         equ	4039	;# 
   906   000FC8                     SSPADD          equ	4040	;# 
   907   000FC9                     SSPBUF          equ	4041	;# 
   908   000FCA                     T2CON           equ	4042	;# 
   909   000FCB                     PR2             equ	4043	;# 
   910   000FCB                     MEMCON          equ	4043	;# 
   911   000FCC                     TMR2            equ	4044	;# 
   912   000FCD                     T1CON           equ	4045	;# 
   913   000FCE                     TMR1            equ	4046	;# 
   914   000FCE                     TMR1L           equ	4046	;# 
   915   000FCF                     TMR1H           equ	4047	;# 
   916   000FD0                     RCON            equ	4048	;# 
   917   000FD1                     WDTCON          equ	4049	;# 
   918   000FD2                     HLVDCON         equ	4050	;# 
   919   000FD2                     LVDCON          equ	4050	;# 
   920   000FD3                     OSCCON          equ	4051	;# 
   921   000FD5                     T0CON           equ	4053	;# 
   922   000FD6                     TMR0            equ	4054	;# 
   923   000FD6                     TMR0L           equ	4054	;# 
   924   000FD7                     TMR0H           equ	4055	;# 
   925   000FD8                     STATUS          equ	4056	;# 
   926   000FD9                     FSR2            equ	4057	;# 
   927   000FD9                     FSR2L           equ	4057	;# 
   928   000FDA                     FSR2H           equ	4058	;# 
   929   000FDB                     PLUSW2          equ	4059	;# 
   930   000FDC                     PREINC2         equ	4060	;# 
   931   000FDD                     POSTDEC2        equ	4061	;# 
   932   000FDE                     POSTINC2        equ	4062	;# 
   933   000FDF                     INDF2           equ	4063	;# 
   934   000FE0                     BSR             equ	4064	;# 
   935   000FE1                     FSR1            equ	4065	;# 
   936   000FE1                     FSR1L           equ	4065	;# 
   937   000FE2                     FSR1H           equ	4066	;# 
   938   000FE3                     PLUSW1          equ	4067	;# 
   939   000FE4                     PREINC1         equ	4068	;# 
   940   000FE5                     POSTDEC1        equ	4069	;# 
   941   000FE6                     POSTINC1        equ	4070	;# 
   942   000FE7                     INDF1           equ	4071	;# 
   943   000FE8                     WREG            equ	4072	;# 
   944   000FE9                     FSR0            equ	4073	;# 
   945   000FE9                     FSR0L           equ	4073	;# 
   946   000FEA                     FSR0H           equ	4074	;# 
   947   000FEB                     PLUSW0          equ	4075	;# 
   948   000FEC                     PREINC0         equ	4076	;# 
   949   000FED                     POSTDEC0        equ	4077	;# 
   950   000FEE                     POSTINC0        equ	4078	;# 
   951   000FEF                     INDF0           equ	4079	;# 
   952   000FF0                     INTCON3         equ	4080	;# 
   953   000FF1                     INTCON2         equ	4081	;# 
   954   000FF2                     INTCON          equ	4082	;# 
   955   000FF3                     PROD            equ	4083	;# 
   956   000FF3                     PRODL           equ	4083	;# 
   957   000FF4                     PRODH           equ	4084	;# 
   958   000FF5                     TABLAT          equ	4085	;# 
   959   000FF6                     TBLPTR          equ	4086	;# 
   960   000FF6                     TBLPTRL         equ	4086	;# 
   961   000FF7                     TBLPTRH         equ	4087	;# 
   962   000FF8                     TBLPTRU         equ	4088	;# 
   963   000FF9                     PCLAT           equ	4089	;# 
   964   000FF9                     PC              equ	4089	;# 
   965   000FF9                     PCL             equ	4089	;# 
   966   000FFA                     PCLATH          equ	4090	;# 
   967   000FFB                     PCLATU          equ	4091	;# 
   968   000FFC                     STKPTR          equ	4092	;# 
   969   000FFD                     TOS             equ	4093	;# 
   970   000FFD                     TOSL            equ	4093	;# 
   971   000FFE                     TOSH            equ	4094	;# 
   972   000FFF                     TOSU            equ	4095	;# 
   973   000F80                     PORTA           equ	3968	;# 
   974   000F81                     PORTB           equ	3969	;# 
   975   000F82                     PORTC           equ	3970	;# 
   976   000F83                     PORTD           equ	3971	;# 
   977   000F84                     PORTE           equ	3972	;# 
   978   000F89                     LATA            equ	3977	;# 
   979   000F8A                     LATB            equ	3978	;# 
   980   000F8B                     LATC            equ	3979	;# 
   981   000F8C                     LATD            equ	3980	;# 
   982   000F8D                     LATE            equ	3981	;# 
   983   000F92                     TRISA           equ	3986	;# 
   984   000F92                     DDRA            equ	3986	;# 
   985   000F93                     TRISB           equ	3987	;# 
   986   000F93                     DDRB            equ	3987	;# 
   987   000F94                     TRISC           equ	3988	;# 
   988   000F94                     DDRC            equ	3988	;# 
   989   000F95                     TRISD           equ	3989	;# 
   990   000F95                     DDRD            equ	3989	;# 
   991   000F96                     TRISE           equ	3990	;# 
   992   000F96                     DDRE            equ	3990	;# 
   993   000F9B                     OSCTUNE         equ	3995	;# 
   994   000F9D                     PIE1            equ	3997	;# 
   995   000F9E                     PIR1            equ	3998	;# 
   996   000F9F                     IPR1            equ	3999	;# 
   997   000FA0                     PIE2            equ	4000	;# 
   998   000FA1                     PIR2            equ	4001	;# 
   999   000FA2                     IPR2            equ	4002	;# 
  1000   000FA6                     EECON1          equ	4006	;# 
  1001   000FA7                     EECON2          equ	4007	;# 
  1002   000FA8                     EEDATA          equ	4008	;# 
  1003   000FA9                     EEADR           equ	4009	;# 
  1004   000FAB                     RCSTA           equ	4011	;# 
  1005   000FAB                     RCSTA1          equ	4011	;# 
  1006   000FAC                     TXSTA           equ	4012	;# 
  1007   000FAC                     TXSTA1          equ	4012	;# 
  1008   000FAD                     TXREG           equ	4013	;# 
  1009   000FAD                     TXREG1          equ	4013	;# 
  1010   000FAE                     RCREG           equ	4014	;# 
  1011   000FAE                     RCREG1          equ	4014	;# 
  1012   000FAF                     SPBRG           equ	4015	;# 
  1013   000FAF                     SPBRG1          equ	4015	;# 
  1014   000FB0                     SPBRGH          equ	4016	;# 
  1015   000FB1                     T3CON           equ	4017	;# 
  1016   000FB2                     TMR3            equ	4018	;# 
  1017   000FB2                     TMR3L           equ	4018	;# 
  1018   000FB3                     TMR3H           equ	4019	;# 
  1019   000FB4                     CMCON           equ	4020	;# 
  1020   000FB5                     CVRCON          equ	4021	;# 
  1021   000FB6                     ECCP1AS         equ	4022	;# 
  1022   000FB7                     ECCP1DEL        equ	4023	;# 
  1023   000FB7                     PWM1CON         equ	4023	;# 
  1024   000FB8                     BAUDCON         equ	4024	;# 
  1025   000FB8                     BAUDCTL         equ	4024	;# 
  1026   000FBA                     CCP2CON         equ	4026	;# 
  1027   000FBB                     CCPR2           equ	4027	;# 
  1028   000FBB                     CCPR2L          equ	4027	;# 
  1029   000FBC                     CCPR2H          equ	4028	;# 
  1030   000FBD                     CCP1CON         equ	4029	;# 
  1031   000FBD                     ECCP1CON        equ	4029	;# 
  1032   000FBE                     CCPR1           equ	4030	;# 
  1033   000FBE                     CCPR1L          equ	4030	;# 
  1034   000FBF                     CCPR1H          equ	4031	;# 
  1035   000FC0                     ADCON2          equ	4032	;# 
  1036   000FC1                     ADCON1          equ	4033	;# 
  1037   000FC2                     ADCON0          equ	4034	;# 
  1038   000FC3                     ADRES           equ	4035	;# 
  1039   000FC3                     ADRESL          equ	4035	;# 
  1040   000FC4                     ADRESH          equ	4036	;# 
  1041   000FC5                     SSPCON2         equ	4037	;# 
  1042   000FC6                     SSPCON1         equ	4038	;# 
  1043   000FC7                     SSPSTAT         equ	4039	;# 
  1044   000FC8                     SSPADD          equ	4040	;# 
  1045   000FC9                     SSPBUF          equ	4041	;# 
  1046   000FCA                     T2CON           equ	4042	;# 
  1047   000FCB                     PR2             equ	4043	;# 
  1048   000FCB                     MEMCON          equ	4043	;# 
  1049   000FCC                     TMR2            equ	4044	;# 
  1050   000FCD                     T1CON           equ	4045	;# 
  1051   000FCE                     TMR1            equ	4046	;# 
  1052   000FCE                     TMR1L           equ	4046	;# 
  1053   000FCF                     TMR1H           equ	4047	;# 
  1054   000FD0                     RCON            equ	4048	;# 
  1055   000FD1                     WDTCON          equ	4049	;# 
  1056   000FD2                     HLVDCON         equ	4050	;# 
  1057   000FD2                     LVDCON          equ	4050	;# 
  1058   000FD3                     OSCCON          equ	4051	;# 
  1059   000FD5                     T0CON           equ	4053	;# 
  1060   000FD6                     TMR0            equ	4054	;# 
  1061   000FD6                     TMR0L           equ	4054	;# 
  1062   000FD7                     TMR0H           equ	4055	;# 
  1063   000FD8                     STATUS          equ	4056	;# 
  1064   000FD9                     FSR2            equ	4057	;# 
  1065   000FD9                     FSR2L           equ	4057	;# 
  1066   000FDA                     FSR2H           equ	4058	;# 
  1067   000FDB                     PLUSW2          equ	4059	;# 
  1068   000FDC                     PREINC2         equ	4060	;# 
  1069   000FDD                     POSTDEC2        equ	4061	;# 
  1070   000FDE                     POSTINC2        equ	4062	;# 
  1071   000FDF                     INDF2           equ	4063	;# 
  1072   000FE0                     BSR             equ	4064	;# 
  1073   000FE1                     FSR1            equ	4065	;# 
  1074   000FE1                     FSR1L           equ	4065	;# 
  1075   000FE2                     FSR1H           equ	4066	;# 
  1076   000FE3                     PLUSW1          equ	4067	;# 
  1077   000FE4                     PREINC1         equ	4068	;# 
  1078   000FE5                     POSTDEC1        equ	4069	;# 
  1079   000FE6                     POSTINC1        equ	4070	;# 
  1080   000FE7                     INDF1           equ	4071	;# 
  1081   000FE8                     WREG            equ	4072	;# 
  1082   000FE9                     FSR0            equ	4073	;# 
  1083   000FE9                     FSR0L           equ	4073	;# 
  1084   000FEA                     FSR0H           equ	4074	;# 
  1085   000FEB                     PLUSW0          equ	4075	;# 
  1086   000FEC                     PREINC0         equ	4076	;# 
  1087   000FED                     POSTDEC0        equ	4077	;# 
  1088   000FEE                     POSTINC0        equ	4078	;# 
  1089   000FEF                     INDF0           equ	4079	;# 
  1090   000FF0                     INTCON3         equ	4080	;# 
  1091   000FF1                     INTCON2         equ	4081	;# 
  1092   000FF2                     INTCON          equ	4082	;# 
  1093   000FF3                     PROD            equ	4083	;# 
  1094   000FF3                     PRODL           equ	4083	;# 
  1095   000FF4                     PRODH           equ	4084	;# 
  1096   000FF5                     TABLAT          equ	4085	;# 
  1097   000FF6                     TBLPTR          equ	4086	;# 
  1098   000FF6                     TBLPTRL         equ	4086	;# 
  1099   000FF7                     TBLPTRH         equ	4087	;# 
  1100   000FF8                     TBLPTRU         equ	4088	;# 
  1101   000FF9                     PCLAT           equ	4089	;# 
  1102   000FF9                     PC              equ	4089	;# 
  1103   000FF9                     PCL             equ	4089	;# 
  1104   000FFA                     PCLATH          equ	4090	;# 
  1105   000FFB                     PCLATU          equ	4091	;# 
  1106   000FFC                     STKPTR          equ	4092	;# 
  1107   000FFD                     TOS             equ	4093	;# 
  1108   000FFD                     TOSL            equ	4093	;# 
  1109   000FFE                     TOSH            equ	4094	;# 
  1110   000FFF                     TOSU            equ	4095	;# 
  1111   000F80                     PORTA           equ	3968	;# 
  1112   000F81                     PORTB           equ	3969	;# 
  1113   000F82                     PORTC           equ	3970	;# 
  1114   000F83                     PORTD           equ	3971	;# 
  1115   000F84                     PORTE           equ	3972	;# 
  1116   000F89                     LATA            equ	3977	;# 
  1117   000F8A                     LATB            equ	3978	;# 
  1118   000F8B                     LATC            equ	3979	;# 
  1119   000F8C                     LATD            equ	3980	;# 
  1120   000F8D                     LATE            equ	3981	;# 
  1121   000F92                     TRISA           equ	3986	;# 
  1122   000F92                     DDRA            equ	3986	;# 
  1123   000F93                     TRISB           equ	3987	;# 
  1124   000F93                     DDRB            equ	3987	;# 
  1125   000F94                     TRISC           equ	3988	;# 
  1126   000F94                     DDRC            equ	3988	;# 
  1127   000F95                     TRISD           equ	3989	;# 
  1128   000F95                     DDRD            equ	3989	;# 
  1129   000F96                     TRISE           equ	3990	;# 
  1130   000F96                     DDRE            equ	3990	;# 
  1131   000F9B                     OSCTUNE         equ	3995	;# 
  1132   000F9D                     PIE1            equ	3997	;# 
  1133   000F9E                     PIR1            equ	3998	;# 
  1134   000F9F                     IPR1            equ	3999	;# 
  1135   000FA0                     PIE2            equ	4000	;# 
  1136   000FA1                     PIR2            equ	4001	;# 
  1137   000FA2                     IPR2            equ	4002	;# 
  1138   000FA6                     EECON1          equ	4006	;# 
  1139   000FA7                     EECON2          equ	4007	;# 
  1140   000FA8                     EEDATA          equ	4008	;# 
  1141   000FA9                     EEADR           equ	4009	;# 
  1142   000FAB                     RCSTA           equ	4011	;# 
  1143   000FAB                     RCSTA1          equ	4011	;# 
  1144   000FAC                     TXSTA           equ	4012	;# 
  1145   000FAC                     TXSTA1          equ	4012	;# 
  1146   000FAD                     TXREG           equ	4013	;# 
  1147   000FAD                     TXREG1          equ	4013	;# 
  1148   000FAE                     RCREG           equ	4014	;# 
  1149   000FAE                     RCREG1          equ	4014	;# 
  1150   000FAF                     SPBRG           equ	4015	;# 
  1151   000FAF                     SPBRG1          equ	4015	;# 
  1152   000FB0                     SPBRGH          equ	4016	;# 
  1153   000FB1                     T3CON           equ	4017	;# 
  1154   000FB2                     TMR3            equ	4018	;# 
  1155   000FB2                     TMR3L           equ	4018	;# 
  1156   000FB3                     TMR3H           equ	4019	;# 
  1157   000FB4                     CMCON           equ	4020	;# 
  1158   000FB5                     CVRCON          equ	4021	;# 
  1159   000FB6                     ECCP1AS         equ	4022	;# 
  1160   000FB7                     ECCP1DEL        equ	4023	;# 
  1161   000FB7                     PWM1CON         equ	4023	;# 
  1162   000FB8                     BAUDCON         equ	4024	;# 
  1163   000FB8                     BAUDCTL         equ	4024	;# 
  1164   000FBA                     CCP2CON         equ	4026	;# 
  1165   000FBB                     CCPR2           equ	4027	;# 
  1166   000FBB                     CCPR2L          equ	4027	;# 
  1167   000FBC                     CCPR2H          equ	4028	;# 
  1168   000FBD                     CCP1CON         equ	4029	;# 
  1169   000FBD                     ECCP1CON        equ	4029	;# 
  1170   000FBE                     CCPR1           equ	4030	;# 
  1171   000FBE                     CCPR1L          equ	4030	;# 
  1172   000FBF                     CCPR1H          equ	4031	;# 
  1173   000FC0                     ADCON2          equ	4032	;# 
  1174   000FC1                     ADCON1          equ	4033	;# 
  1175   000FC2                     ADCON0          equ	4034	;# 
  1176   000FC3                     ADRES           equ	4035	;# 
  1177   000FC3                     ADRESL          equ	4035	;# 
  1178   000FC4                     ADRESH          equ	4036	;# 
  1179   000FC5                     SSPCON2         equ	4037	;# 
  1180   000FC6                     SSPCON1         equ	4038	;# 
  1181   000FC7                     SSPSTAT         equ	4039	;# 
  1182   000FC8                     SSPADD          equ	4040	;# 
  1183   000FC9                     SSPBUF          equ	4041	;# 
  1184   000FCA                     T2CON           equ	4042	;# 
  1185   000FCB                     PR2             equ	4043	;# 
  1186   000FCB                     MEMCON          equ	4043	;# 
  1187   000FCC                     TMR2            equ	4044	;# 
  1188   000FCD                     T1CON           equ	4045	;# 
  1189   000FCE                     TMR1            equ	4046	;# 
  1190   000FCE                     TMR1L           equ	4046	;# 
  1191   000FCF                     TMR1H           equ	4047	;# 
  1192   000FD0                     RCON            equ	4048	;# 
  1193   000FD1                     WDTCON          equ	4049	;# 
  1194   000FD2                     HLVDCON         equ	4050	;# 
  1195   000FD2                     LVDCON          equ	4050	;# 
  1196   000FD3                     OSCCON          equ	4051	;# 
  1197   000FD5                     T0CON           equ	4053	;# 
  1198   000FD6                     TMR0            equ	4054	;# 
  1199   000FD6                     TMR0L           equ	4054	;# 
  1200   000FD7                     TMR0H           equ	4055	;# 
  1201   000FD8                     STATUS          equ	4056	;# 
  1202   000FD9                     FSR2            equ	4057	;# 
  1203   000FD9                     FSR2L           equ	4057	;# 
  1204   000FDA                     FSR2H           equ	4058	;# 
  1205   000FDB                     PLUSW2          equ	4059	;# 
  1206   000FDC                     PREINC2         equ	4060	;# 
  1207   000FDD                     POSTDEC2        equ	4061	;# 
  1208   000FDE                     POSTINC2        equ	4062	;# 
  1209   000FDF                     INDF2           equ	4063	;# 
  1210   000FE0                     BSR             equ	4064	;# 
  1211   000FE1                     FSR1            equ	4065	;# 
  1212   000FE1                     FSR1L           equ	4065	;# 
  1213   000FE2                     FSR1H           equ	4066	;# 
  1214   000FE3                     PLUSW1          equ	4067	;# 
  1215   000FE4                     PREINC1         equ	4068	;# 
  1216   000FE5                     POSTDEC1        equ	4069	;# 
  1217   000FE6                     POSTINC1        equ	4070	;# 
  1218   000FE7                     INDF1           equ	4071	;# 
  1219   000FE8                     WREG            equ	4072	;# 
  1220   000FE9                     FSR0            equ	4073	;# 
  1221   000FE9                     FSR0L           equ	4073	;# 
  1222   000FEA                     FSR0H           equ	4074	;# 
  1223   000FEB                     PLUSW0          equ	4075	;# 
  1224   000FEC                     PREINC0         equ	4076	;# 
  1225   000FED                     POSTDEC0        equ	4077	;# 
  1226   000FEE                     POSTINC0        equ	4078	;# 
  1227   000FEF                     INDF0           equ	4079	;# 
  1228   000FF0                     INTCON3         equ	4080	;# 
  1229   000FF1                     INTCON2         equ	4081	;# 
  1230   000FF2                     INTCON          equ	4082	;# 
  1231   000FF3                     PROD            equ	4083	;# 
  1232   000FF3                     PRODL           equ	4083	;# 
  1233   000FF4                     PRODH           equ	4084	;# 
  1234   000FF5                     TABLAT          equ	4085	;# 
  1235   000FF6                     TBLPTR          equ	4086	;# 
  1236   000FF6                     TBLPTRL         equ	4086	;# 
  1237   000FF7                     TBLPTRH         equ	4087	;# 
  1238   000FF8                     TBLPTRU         equ	4088	;# 
  1239   000FF9                     PCLAT           equ	4089	;# 
  1240   000FF9                     PC              equ	4089	;# 
  1241   000FF9                     PCL             equ	4089	;# 
  1242   000FFA                     PCLATH          equ	4090	;# 
  1243   000FFB                     PCLATU          equ	4091	;# 
  1244   000FFC                     STKPTR          equ	4092	;# 
  1245   000FFD                     TOS             equ	4093	;# 
  1246   000FFD                     TOSL            equ	4093	;# 
  1247   000FFE                     TOSH            equ	4094	;# 
  1248   000FFF                     TOSU            equ	4095	;# 
  1249                           
  1250                           	psect	idataCOMRAM
  1251   001DB8                     __pidataCOMRAM:
  1252                           	callstack 0
  1253                           
  1254                           ;initializer for _currentTime
  1255   001DB8  30                 	db	48
  1256   001DB9  30                 	db	48
  1257   001DBA  30                 	db	48
  1258   001DBB  30                 	db	48
  1259                           
  1260                           ;initializer for motorTerminal@hour
  1261   001DBC  30                 	db	48
  1262   001DBD  30                 	db	48
  1263   001DBE  30                 	db	48
  1264   001DBF  30                 	db	48
  1265                           
  1266                           	psect	idataBANK0
  1267   0018B6                     __pidataBANK0:
  1268                           	callstack 0
  1269                           
  1270                           ;initializer for _userUIDs
  1271   0018B6  65                 	db	101
  1272   0018B7  DC                 	db	220
  1273   0018B8  F9                 	db	249
  1274   0018B9  03                 	db	3
  1275   0018BA  43                 	db	67
  1276   0018BB  00                 	db	0
  1277   0018BC  00                 	db	0
  1278   0018BD  00                 	db	0
  1279   0018BE  00                 	db	0
  1280   0018BF  00                 	db	0
  1281   0018C0  00                 	db	0
  1282   0018C1  00                 	db	0
  1283   0018C2  00                 	db	0
  1284   0018C3  00                 	db	0
  1285   0018C4  00                 	db	0
  1286   0018C5  00                 	db	0
  1287   0018C6  DC                 	db	220
  1288   0018C7  0D                 	db	13
  1289   0018C8  F9                 	db	249
  1290   0018C9  03                 	db	3
  1291   0018CA  2B                 	db	43
  1292   0018CB  00                 	db	0
  1293   0018CC  00                 	db	0
  1294   0018CD  00                 	db	0
  1295   0018CE  00                 	db	0
  1296   0018CF  00                 	db	0
  1297   0018D0  00                 	db	0
  1298   0018D1  00                 	db	0
  1299   0018D2  00                 	db	0
  1300   0018D3  00                 	db	0
  1301   0018D4  00                 	db	0
  1302   0018D5  00                 	db	0
  1303   0018D6  DF                 	db	223
  1304   0018D7  8B                 	db	139
  1305   0018D8  DF                 	db	223
  1306   0018D9  C4                 	db	196
  1307   0018DA  4F                 	db	79
  1308   0018DB  00                 	db	0
  1309   0018DC  00                 	db	0
  1310   0018DD  00                 	db	0
  1311   0018DE  00                 	db	0
  1312   0018DF  00                 	db	0
  1313   0018E0  00                 	db	0
  1314   0018E1  00                 	db	0
  1315   0018E2  00                 	db	0
  1316   0018E3  00                 	db	0
  1317   0018E4  00                 	db	0
  1318   0018E5  00                 	db	0
  1319   0018E6  21                 	db	33
  1320   0018E7  32                 	db	50
  1321   0018E8  A9                 	db	169
  1322   0018E9  89                 	db	137
  1323   0018EA  33                 	db	51
  1324   0018EB  00                 	db	0
  1325   0018EC  00                 	db	0
  1326   0018ED  00                 	db	0
  1327   0018EE  00                 	db	0
  1328   0018EF  00                 	db	0
  1329   0018F0  00                 	db	0
  1330   0018F1  00                 	db	0
  1331   0018F2  00                 	db	0
  1332   0018F3  00                 	db	0
  1333   0018F4  00                 	db	0
  1334   0018F5  00                 	db	0
  1335                           
  1336                           ;initializer for _configurations
  1337   0018F6  01                 	db	1
  1338   0018F7  01                 	db	1
  1339   0018F8  01                 	db	1
  1340   0018F9  01                 	db	1
  1341   0018FA  01                 	db	1
  1342   0018FB  01                 	db	1
  1343   0018FC  01                 	db	1
  1344   0018FD  01                 	db	1
  1345   0018FE  01                 	db	1
  1346   0018FF  01                 	db	1
  1347   001900  01                 	db	1
  1348   001901  01                 	db	1
  1349   001902  01                 	db	1
  1350   001903  01                 	db	1
  1351   001904  01                 	db	1
  1352   001905  01                 	db	1
  1353   001906  01                 	db	1
  1354   001907  01                 	db	1
  1355   001908  01                 	db	1
  1356   001909  01                 	db	1
  1357   00190A  01                 	db	1
  1358   00190B  01                 	db	1
  1359   00190C  01                 	db	1
  1360   00190D  01                 	db	1
  1361                           
  1362                           	psect	mediumconst
  1363   001EA2                     __pmediumconst:
  1364                           	callstack 0
  1365   001EA2  00                 	db	0
  1366   001EA3                     GetTecla@F2759:
  1367                           	callstack 0
  1368   001EA3  01                 	db	1
  1369   001EA4  02                 	db	2
  1370   001EA5  03                 	db	3
  1371   001EA6  04                 	db	4
  1372   001EA7  05                 	db	5
  1373   001EA8  06                 	db	6
  1374   001EA9  07                 	db	7
  1375   001EAA  08                 	db	8
  1376   001EAB  09                 	db	9
  1377   001EAC  0A                 	db	10
  1378   001EAD  00                 	db	0
  1379   001EAE  0B                 	db	11
  1380   001EAF                     __end_ofGetTecla@F2759:
  1381                           	callstack 0
  1382   007F92                     _TMR0IF         set	32658
  1383   000FD6                     _TMR0           set	4054
  1384   000F89                     _LATAbits       set	3977
  1385   000F96                     _TRISE          set	3990
  1386   000F92                     _TRISA          set	3986
  1387   000FAE                     _RCREG          set	4014
  1388   000FAD                     _TXREG          set	4013
  1389   000F9E                     _PIR1bits       set	3998
  1390   000FB8                     _BAUDCON        set	4024
  1391   000FAF                     _SPBRG          set	4015
  1392   000FAB                     _RCSTA          set	4011
  1393   000FAC                     _TXSTA          set	4012
  1394   000F8A                     _LATBbits       set	3978
  1395   000F93                     _TRISBbits      set	3987
  1396   000F82                     _PORTCbits      set	3970
  1397   000F8B                     _LATCbits       set	3979
  1398   000F94                     _TRISCbits      set	3988
  1399   000F8C                     _LATD           set	3980
  1400   000F95                     _TRISD          set	3989
  1401   000F83                     _PORTD          set	3971
  1402   000FD5                     _T0CON          set	4053
  1403   000F8B                     _LATC           set	3979
  1404   000F96                     _TRISEbits      set	3990
  1405   000FC1                     _ADCON1         set	4033
  1406   000F8D                     _LATEbits       set	3981
  1407   000FF2                     _INTCONbits     set	4082
  1408   001EAF                     STR_29:
  1409   001EAF  4E                 	db	78	;'N'
  1410   001EB0  6F                 	db	111	;'o'
  1411   001EB1  20                 	db	32
  1412   001EB2  68                 	db	104	;'h'
  1413   001EB3  69                 	db	105	;'i'
  1414   001EB4  20                 	db	32
  1415   001EB5  68                 	db	104	;'h'
  1416   001EB6  61                 	db	97	;'a'
  1417   001EB7  20                 	db	32
  1418   001EB8  63                 	db	99	;'c'
  1419   001EB9  61                 	db	97	;'a'
  1420   001EBA  70                 	db	112	;'p'
  1421   001EBB  20                 	db	32
  1422   001EBC  75                 	db	117	;'u'
  1423   001EBD  73                 	db	115	;'s'
  1424   001EBE  75                 	db	117	;'u'
  1425   001EBF  61                 	db	97	;'a'
  1426   001EC0  72                 	db	114	;'r'
  1427   001EC1  69                 	db	105	;'i'
  1428   001EC2  20                 	db	32
  1429   001EC3  61                 	db	97	;'a'
  1430   001EC4  20                 	db	32
  1431   001EC5  6C                 	db	108	;'l'
  1432   001EC6  61                 	db	97	;'a'
  1433   001EC7  20                 	db	32
  1434   001EC8  73                 	db	115	;'s'
  1435   001EC9  61                 	db	97	;'a'
  1436   001ECA  6C                 	db	108	;'l'
  1437   001ECB  61                 	db	97	;'a'
  1438   001ECC  2E                 	db	46
  1439   001ECD  0D                 	db	13
  1440   001ECE  0A                 	db	10
  1441   001ECF  00                 	db	0
  1442   001ED0                     STR_27:
  1443   001ED0  45                 	db	69	;'E'
  1444   001ED1  52                 	db	82	;'R'
  1445   001ED2  52                 	db	82	;'R'
  1446   001ED3  4F                 	db	79	;'O'
  1447   001ED4  52                 	db	82	;'R'
  1448   001ED5  2E                 	db	46
  1449   001ED6  20                 	db	32
  1450   001ED7  56                 	db	86	;'V'
  1451   001ED8  61                 	db	97	;'a'
  1452   001ED9  6C                 	db	108	;'l'
  1453   001EDA  6F                 	db	111	;'o'
  1454   001EDB  72                 	db	114	;'r'
  1455   001EDC  20                 	db	32
  1456   001EDD  69                 	db	105	;'i'
  1457   001EDE  6E                 	db	110	;'n'
  1458   001EDF  74                 	db	116	;'t'
  1459   001EE0  72                 	db	114	;'r'
  1460   001EE1  6F                 	db	111	;'o'
  1461   001EE2  64                 	db	100	;'d'
  1462   001EE3  75                 	db	117	;'u'
  1463   001EE4  69                 	db	105	;'i'
  1464   001EE5  74                 	db	116	;'t'
  1465   001EE6  20                 	db	32
  1466   001EE7  65                 	db	101	;'e'
  1467   001EE8  72                 	db	114	;'r'
  1468   001EE9  72                 	db	114	;'r'
  1469   001EEA  6F                 	db	111	;'o'
  1470   001EEB  6E                 	db	110	;'n'
  1471   001EEC  69                 	db	105	;'i'
  1472   001EED  2E                 	db	46
  1473   001EEE  0D                 	db	13
  1474   001EEF  0A                 	db	10
  1475   001EF0  00                 	db	0
  1476   001EF1                     STR_7:
  1477   001EF1  09                 	db	9
  1478   001EF2  33                 	db	51	;'3'
  1479   001EF3  2E                 	db	46
  1480   001EF4  20                 	db	32
  1481   001EF5  4D                 	db	77	;'M'
  1482   001EF6  6F                 	db	111	;'o'
  1483   001EF7  64                 	db	100	;'d'
  1484   001EF8  69                 	db	105	;'i'
  1485   001EF9  66                 	db	102	;'f'
  1486   001EFA  69                 	db	105	;'i'
  1487   001EFB  63                 	db	99	;'c'
  1488   001EFC  61                 	db	97	;'a'
  1489   001EFD  72                 	db	114	;'r'
  1490   001EFE  20                 	db	32
  1491   001EFF  68                 	db	104	;'h'
  1492   001F00  6F                 	db	111	;'o'
  1493   001F01  72                 	db	114	;'r'
  1494   001F02  61                 	db	97	;'a'
  1495   001F03  20                 	db	32
  1496   001F04  64                 	db	100	;'d'
  1497   001F05  65                 	db	101	;'e'
  1498   001F06  6C                 	db	108	;'l'
  1499   001F07  20                 	db	32
  1500   001F08  73                 	db	115	;'s'
  1501   001F09  69                 	db	105	;'i'
  1502   001F0A  73                 	db	115	;'s'
  1503   001F0B  74                 	db	116	;'t'
  1504   001F0C  65                 	db	101	;'e'
  1505   001F0D  6D                 	db	109	;'m'
  1506   001F0E  61                 	db	97	;'a'
  1507   001F0F  0D                 	db	13
  1508   001F10  0A                 	db	10
  1509   001F11  00                 	db	0
  1510   001F12                     STR_32:
  1511   001F12  0D                 	db	13
  1512   001F13  0A                 	db	10
  1513   001F14  48                 	db	72	;'H'
  1514   001F15  6F                 	db	111	;'o'
  1515   001F16  72                 	db	114	;'r'
  1516   001F17  61                 	db	97	;'a'
  1517   001F18  20                 	db	32
  1518   001F19  69                 	db	105	;'i'
  1519   001F1A  6E                 	db	110	;'n'
  1520   001F1B  74                 	db	116	;'t'
  1521   001F1C  72                 	db	114	;'r'
  1522   001F1D  6F                 	db	111	;'o'
  1523   001F1E  64                 	db	100	;'d'
  1524   001F1F  75                 	db	117	;'u'
  1525   001F20  69                 	db	105	;'i'
  1526   001F21  64                 	db	100	;'d'
  1527   001F22  61                 	db	97	;'a'
  1528   001F23  20                 	db	32
  1529   001F24  63                 	db	99	;'c'
  1530   001F25  6F                 	db	111	;'o'
  1531   001F26  72                 	db	114	;'r'
  1532   001F27  72                 	db	114	;'r'
  1533   001F28  65                 	db	101	;'e'
  1534   001F29  63                 	db	99	;'c'
  1535   001F2A  74                 	db	116	;'t'
  1536   001F2B  61                 	db	97	;'a'
  1537   001F2C  6D                 	db	109	;'m'
  1538   001F2D  65                 	db	101	;'e'
  1539   001F2E  6E                 	db	110	;'n'
  1540   001F2F  74                 	db	116	;'t'
  1541   001F30  0D                 	db	13
  1542   001F31  0A                 	db	10
  1543   001F32  00                 	db	0
  1544   001F33                     STR_31:
  1545   001F33  49                 	db	73	;'I'
  1546   001F34  6E                 	db	110	;'n'
  1547   001F35  74                 	db	116	;'t'
  1548   001F36  72                 	db	114	;'r'
  1549   001F37  6F                 	db	111	;'o'
  1550   001F38  64                 	db	100	;'d'
  1551   001F39  75                 	db	117	;'u'
  1552   001F3A  63                 	db	99	;'c'
  1553   001F3B  65                 	db	101	;'e'
  1554   001F3C  20                 	db	32
  1555   001F3D  6C                 	db	108	;'l'
  1556   001F3E  61                 	db	97	;'a'
  1557   001F3F  20                 	db	32
  1558   001F40  68                 	db	104	;'h'
  1559   001F41  6F                 	db	111	;'o'
  1560   001F42  72                 	db	114	;'r'
  1561   001F43  61                 	db	97	;'a'
  1562   001F44  20                 	db	32
  1563   001F45  61                 	db	97	;'a'
  1564   001F46  63                 	db	99	;'c'
  1565   001F47  74                 	db	116	;'t'
  1566   001F48  75                 	db	117	;'u'
  1567   001F49  61                 	db	97	;'a'
  1568   001F4A  6C                 	db	108	;'l'
  1569   001F4B  28                 	db	40
  1570   001F4C  48                 	db	72	;'H'
  1571   001F4D  48                 	db	72	;'H'
  1572   001F4E  4D                 	db	77	;'M'
  1573   001F4F  4D                 	db	77	;'M'
  1574   001F50  29                 	db	41
  1575   001F51  3A                 	db	58	;':'
  1576   001F52  20                 	db	32
  1577   001F53  00                 	db	0
  1578   001F54                     STR_6:
  1579   001F54  09                 	db	9
  1580   001F55  32                 	db	50	;'2'
  1581   001F56  2E                 	db	46
  1582   001F57  20                 	db	32
  1583   001F58  4D                 	db	77	;'M'
  1584   001F59  6F                 	db	111	;'o'
  1585   001F5A  73                 	db	115	;'s'
  1586   001F5B  74                 	db	116	;'t'
  1587   001F5C  72                 	db	114	;'r'
  1588   001F5D  61                 	db	97	;'a'
  1589   001F5E  72                 	db	114	;'r'
  1590   001F5F  20                 	db	32
  1591   001F60  63                 	db	99	;'c'
  1592   001F61  6F                 	db	111	;'o'
  1593   001F62  6E                 	db	110	;'n'
  1594   001F63  66                 	db	102	;'f'
  1595   001F64  69                 	db	105	;'i'
  1596   001F65  67                 	db	103	;'g'
  1597   001F66  75                 	db	117	;'u'
  1598   001F67  72                 	db	114	;'r'
  1599   001F68  61                 	db	97	;'a'
  1600   001F69  63                 	db	99	;'c'
  1601   001F6A  69                 	db	105	;'i'
  1602   001F6B  6F                 	db	111	;'o'
  1603   001F6C  6E                 	db	110	;'n'
  1604   001F6D  73                 	db	115	;'s'
  1605   001F6E  0D                 	db	13
  1606   001F6F  0A                 	db	10
  1607   001F70  00                 	db	0
  1608   001F71                     STR_5:
  1609   001F71  09                 	db	9
  1610   001F72  31                 	db	49	;'1'
  1611   001F73  2E                 	db	46
  1612   001F74  20                 	db	32
  1613   001F75  51                 	db	81	;'Q'
  1614   001F76  75                 	db	117	;'u'
  1615   001F77  69                 	db	105	;'i'
  1616   001F78  20                 	db	32
  1617   001F79  68                 	db	104	;'h'
  1618   001F7A  69                 	db	105	;'i'
  1619   001F7B  20                 	db	32
  1620   001F7C  68                 	db	104	;'h'
  1621   001F7D  61                 	db	97	;'a'
  1622   001F7E  20                 	db	32
  1623   001F7F  61                 	db	97	;'a'
  1624   001F80  20                 	db	32
  1625   001F81  6C                 	db	108	;'l'
  1626   001F82  61                 	db	97	;'a'
  1627   001F83  20                 	db	32
  1628   001F84  73                 	db	115	;'s'
  1629   001F85  61                 	db	97	;'a'
  1630   001F86  6C                 	db	108	;'l'
  1631   001F87  61                 	db	97	;'a'
  1632   001F88  3F                 	db	63	;'?'
  1633   001F89  0D                 	db	13
  1634   001F8A  0A                 	db	10
  1635   001F8B  00                 	db	0
  1636   001F8C                     STR_37:
  1637   001F8C  54                 	db	84	;'T'
  1638   001F8D  61                 	db	97	;'a'
  1639   001F8E  72                 	db	114	;'r'
  1640   001F8F  67                 	db	103	;'g'
  1641   001F90  65                 	db	101	;'e'
  1642   001F91  74                 	db	116	;'t'
  1643   001F92  61                 	db	97	;'a'
  1644   001F93  20                 	db	32
  1645   001F94  64                 	db	100	;'d'
  1646   001F95  65                 	db	101	;'e'
  1647   001F96  74                 	db	116	;'t'
  1648   001F97  65                 	db	101	;'e'
  1649   001F98  63                 	db	99	;'c'
  1650   001F99  74                 	db	116	;'t'
  1651   001F9A  61                 	db	97	;'a'
  1652   001F9B  64                 	db	100	;'d'
  1653   001F9C  61                 	db	97	;'a'
  1654   001F9D  21                 	db	33
  1655   001F9E  0D                 	db	13
  1656   001F9F  0A                 	db	10
  1657   001FA0  09                 	db	9
  1658   001FA1  00                 	db	0
  1659   001FA2                     STR_4:
  1660   001FA2  54                 	db	84	;'T'
  1661   001FA3  72                 	db	114	;'r'
  1662   001FA4  69                 	db	105	;'i'
  1663   001FA5  61                 	db	97	;'a'
  1664   001FA6  20                 	db	32
  1665   001FA7  75                 	db	117	;'u'
  1666   001FA8  6E                 	db	110	;'n'
  1667   001FA9  61                 	db	97	;'a'
  1668   001FAA  20                 	db	32
  1669   001FAB  6F                 	db	111	;'o'
  1670   001FAC  70                 	db	112	;'p'
  1671   001FAD  63                 	db	99	;'c'
  1672   001FAE  69                 	db	105	;'i'
  1673   001FAF  C3                 	db	-61
  1674   001FB0  B3                 	db	-77
  1675   001FB1  3A                 	db	58	;':'
  1676   001FB2  0D                 	db	13
  1677   001FB3  0A                 	db	10
  1678   001FB4  00                 	db	0
  1679   001FB5                     STR_1:
  1680   001FB5  2D                 	db	45
  1681   001FB6  2D                 	db	45
  1682   001FB7  2D                 	db	45
  1683   001FB8  2D                 	db	45
  1684   001FB9  2D                 	db	45
  1685   001FBA  2D                 	db	45
  1686   001FBB  2D                 	db	45
  1687   001FBC  2D                 	db	45
  1688   001FBD  2D                 	db	45
  1689   001FBE  2D                 	db	45
  1690   001FBF  2D                 	db	45
  1691   001FC0  2D                 	db	45
  1692   001FC1  2D                 	db	45
  1693   001FC2  2D                 	db	45
  1694   001FC3  2D                 	db	45
  1695   001FC4  0D                 	db	13
  1696   001FC5  0A                 	db	10
  1697   001FC6  00                 	db	0
  1698   001FC7                     STR_2:
  1699   001FC7  4D                 	db	77	;'M'
  1700   001FC8  65                 	db	101	;'e'
  1701   001FC9  6E                 	db	110	;'n'
  1702   001FCA  C3                 	db	-61
  1703   001FCB  BA                 	db	-70
  1704   001FCC  20                 	db	32
  1705   001FCD  70                 	db	112	;'p'
  1706   001FCE  72                 	db	114	;'r'
  1707   001FCF  69                 	db	105	;'i'
  1708   001FD0  6E                 	db	110	;'n'
  1709   001FD1  63                 	db	99	;'c'
  1710   001FD2  69                 	db	105	;'i'
  1711   001FD3  70                 	db	112	;'p'
  1712   001FD4  61                 	db	97	;'a'
  1713   001FD5  6C                 	db	108	;'l'
  1714   001FD6  0D                 	db	13
  1715   001FD7  0A                 	db	10
  1716   001FD8  00                 	db	0
  1717   001FD9                     STR_34:
  1718   001FD9  20                 	db	32
  1719   001FDA  43                 	db	67	;'C'
  1720   001FDB  6F                 	db	111	;'o'
  1721   001FDC  6E                 	db	110	;'n'
  1722   001FDD  66                 	db	102	;'f'
  1723   001FDE  69                 	db	105	;'i'
  1724   001FDF  67                 	db	103	;'g'
  1725   001FE0  3A                 	db	58	;':'
  1726   001FE1  20                 	db	32
  1727   001FE2  00                 	db	0
  1728   001FE3                     STR_8:
  1729   001FE3  4F                 	db	79	;'O'
  1730   001FE4  70                 	db	112	;'p'
  1731   001FE5  63                 	db	99	;'c'
  1732   001FE6  69                 	db	105	;'i'
  1733   001FE7  C3                 	db	-61
  1734   001FE8  B3                 	db	-77
  1735   001FE9  3A                 	db	58	;':'
  1736   001FEA  20                 	db	32
  1737   001FEB  00                 	db	0
  1738   001FEC                     STR_33:
  1739   001FEC  55                 	db	85	;'U'
  1740   001FED  73                 	db	115	;'s'
  1741   001FEE  65                 	db	101	;'e'
  1742   001FEF  72                 	db	114	;'r'
  1743   001FF0  20                 	db	32
  1744   001FF1  00                 	db	0
  1745   001FF2                     STR_9:
  1746   001FF2  55                 	db	85	;'U'
  1747   001FF3  49                 	db	73	;'I'
  1748   001FF4  44                 	db	68	;'D'
  1749   001FF5  3A                 	db	58	;':'
  1750   001FF6  20                 	db	32
  1751   001FF7  00                 	db	0
  1752   001FF8                     STR_13:
  1753   001FF8  20                 	db	32
  1754   001FF9  2D                 	db	45
  1755   001FFA  20                 	db	32
  1756   001FFB  00                 	db	0
  1757   001FFC                     STR_10:
  1758   001FFC  2D                 	db	45
  1759   001FFD  00                 	db	0
  1760   001FF2                     STR_28          equ	STR_9
  1761   001FE3                     STR_23          equ	STR_8
  1762   001FE9                     STR_12          equ	STR_8+6
  1763   001FFA                     STR_35          equ	STR_13+2
  1764   001F54                     STR_21          equ	STR_6
  1765   001FC7                     STR_17          equ	STR_2
  1766   001EF1                     STR_22          equ	STR_7
  1767   001F71                     STR_20          equ	STR_5
  1768   001FA2                     STR_19          equ	STR_4
  1769   001FB5                     STR_3           equ	STR_1
  1770   001FB5                     STR_15          equ	STR_1
  1771   001FB5                     STR_16          equ	STR_1
  1772   001FB5                     STR_18          equ	STR_1
  1773   001FC4                     STR_11          equ	STR_1+15
  1774   001FC4                     STR_14          equ	STR_1+15
  1775   001FC4                     STR_24          equ	STR_1+15
  1776   001FC4                     STR_25          equ	STR_1+15
  1777   001FC4                     STR_26          equ	STR_1+15
  1778   001FC4                     STR_30          equ	STR_1+15
  1779   001FC4                     STR_36          equ	STR_1+15
  1780   001FA0                     STR_38          equ	STR_37+20
  1781   001FFE  00                 	db	0	; dummy byte at the end
  1782   001EA2                     __smallconst    set	__pmediumconst
  1783   001EA2                     __mediumconst   set	__pmediumconst
  1784   000002                     __activetblptr  equ	2
  1785                           
  1786                           ; #config settings
  1787                           
  1788                           	psect	cinit
  1789   001850                     __pcinit:
  1790                           	callstack 0
  1791   001850                     start_initialization:
  1792                           	callstack 0
  1793   001850                     __initialization:
  1794                           	callstack 0
  1795                           
  1796                           ; Initialize objects allocated to BANK0 (88 bytes)
  1797                           ; load TBLPTR registers with __pidataBANK0
  1798   001850  0EB6               	movlw	low __pidataBANK0
  1799   001852  6EF6               	movwf	tblptrl,c
  1800   001854  0E18               	movlw	high __pidataBANK0
  1801   001856  6EF7               	movwf	tblptrh,c
  1802   001858  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1803   00185A  6EF8               	movwf	tblptru,c
  1804   00185C  EE00  F080         	lfsr	0,__pdataBANK0
  1805   001860  EE10 F058          	lfsr	1,88
  1806   001864                     copy_data0:
  1807   001864  0009               	tblrd		*+
  1808   001866  CFF5 FFEE          	movff	tablat,postinc0
  1809   00186A  50E5               	movf	postdec1,w,c
  1810   00186C  50E1               	movf	fsr1l,w,c
  1811   00186E  E1FA               	bnz	copy_data0
  1812                           
  1813                           ; Initialize objects allocated to COMRAM (8 bytes)
  1814                           ; load TBLPTR registers with __pidataCOMRAM
  1815   001870  0EB8               	movlw	low __pidataCOMRAM
  1816   001872  6EF6               	movwf	tblptrl,c
  1817   001874  0E1D               	movlw	high __pidataCOMRAM
  1818   001876  6EF7               	movwf	tblptrh,c
  1819   001878  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1820   00187A  6EF8               	movwf	tblptru,c
  1821   00187C  EE00  F06E         	lfsr	0,__pdataCOMRAM
  1822   001880  EE10 F008          	lfsr	1,8
  1823   001884                     copy_data1:
  1824   001884  0009               	tblrd		*+
  1825   001886  CFF5 FFEE          	movff	tablat,postinc0
  1826   00188A  50E5               	movf	postdec1,w,c
  1827   00188C  50E1               	movf	fsr1l,w,c
  1828   00188E  E1FA               	bnz	copy_data1
  1829                           
  1830                           ; Clear objects allocated to BANK0 (20 bytes)
  1831   001890  EE00  F0D8         	lfsr	0,__pbssBANK0
  1832   001894  0E14               	movlw	20
  1833   001896                     clear_0:
  1834   001896  6AEE               	clrf	postinc0,c
  1835   001898  06E8               	decf	wreg,f,c
  1836   00189A  E1FD               	bnz	clear_0
  1837                           
  1838                           ; Clear objects allocated to COMRAM (75 bytes)
  1839   00189C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1840   0018A0  0E4B               	movlw	75
  1841   0018A2                     clear_1:
  1842   0018A2  6AEE               	clrf	postinc0,c
  1843   0018A4  06E8               	decf	wreg,f,c
  1844   0018A6  E1FD               	bnz	clear_1
  1845   0018A8                     end_of_initialization:
  1846                           	callstack 0
  1847   0018A8                     __end_of__initialization:
  1848                           	callstack 0
  1849   0018A8  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1850   0018AA  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1851   0018AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1852   0018AE  6EF8               	movwf	tblptru,c
  1853   0018B0  0100               	movlb	0
  1854   0018B2  EF64  F00D         	goto	_main	;jump to C main() function
  1855                           
  1856                           	psect	bssCOMRAM
  1857   000001                     __pbssCOMRAM:
  1858                           	callstack 0
  1859   000001                     motor_RFID@UID:
  1860                           	callstack 0
  1861   000001                     	ds	6
  1862   000007                     _Tics:
  1863                           	callstack 0
  1864   000007                     	ds	4
  1865   00000B                     _pointer:
  1866                           	callstack 0
  1867   00000B                     	ds	2
  1868   00000D                     _index:
  1869                           	callstack 0
  1870   00000D                     	ds	2
  1871   00000F                     _str_ptr:
  1872                           	callstack 0
  1873   00000F                     	ds	2
  1874   000011                     	ds	2
  1875   000013                     motor_Read@timeout_counter:
  1876                           	callstack 0
  1877   000013                     	ds	2
  1878   000015                     setLed@userIndex:
  1879                           	callstack 0
  1880   000015                     	ds	1
  1881   000016                     setLed@ledIndex:
  1882                           	callstack 0
  1883   000016                     	ds	1
  1884   000017                     setLed@modeLED:
  1885                           	callstack 0
  1886   000017                     	ds	1
  1887   000018                     motor_datos@pointer:
  1888                           	callstack 0
  1889   000018                     	ds	1
  1890   000019                     motor_datos@state:
  1891                           	callstack 0
  1892   000019                     	ds	1
  1893   00001A                     _new_user:
  1894                           	callstack 0
  1895   00001A                     	ds	1
  1896   00001B                     _new_configuration:
  1897                           	callstack 0
  1898   00001B                     	ds	1
  1899   00001C                     motorTerminal@index:
  1900                           	callstack 0
  1901   00001C                     	ds	1
  1902   00001D                     motorTerminal@sending_string:
  1903                           	callstack 0
  1904   00001D                     	ds	1
  1905   00001E                     motorTerminal@state:
  1906                           	callstack 0
  1907   00001E                     	ds	1
  1908   00001F                     _hashtag_pressed:
  1909                           	callstack 0
  1910   00001F                     	ds	1
  1911   000020                     _state_str:
  1912                           	callstack 0
  1913   000020                     	ds	1
  1914   000021                     _ColumnAct:
  1915                           	callstack 0
  1916   000021                     	ds	1
  1917   000022                     _RowAct:
  1918                           	callstack 0
  1919   000022                     	ds	1
  1920   000023                     _Columns:
  1921                           	callstack 0
  1922   000023                     	ds	1
  1923   000024                     _Rows:
  1924                           	callstack 0
  1925   000024                     	ds	1
  1926   000025                     motor_RFID@fifoLevel:
  1927                           	callstack 0
  1928   000025                     	ds	1
  1929   000026                     motor_RFID@lastBitsVal:
  1930                           	callstack 0
  1931   000026                     	ds	1
  1932   000027                     motor_RFID@tempRegValue:
  1933                           	callstack 0
  1934   000027                     	ds	1
  1935   000028                     motor_RFID@allZero:
  1936                           	callstack 0
  1937   000028                     	ds	1
  1938   000029                     motor_RFID@checksum:
  1939                           	callstack 0
  1940   000029                     	ds	1
  1941   00002A                     motor_RFID@TagType:
  1942                           	callstack 0
  1943   00002A                     	ds	1
  1944   00002B                     	ds	1
  1945   00002C                     motor_RFID@i:
  1946                           	callstack 0
  1947   00002C                     	ds	1
  1948   00002D                     motor_RFID@n:
  1949                           	callstack 0
  1950   00002D                     	ds	1
  1951   00002E                     motor_RFID@waitIRq:
  1952                           	callstack 0
  1953   00002E                     	ds	1
  1954   00002F                     motor_RFID@irqEn:
  1955                           	callstack 0
  1956   00002F                     	ds	1
  1957   000030                     motor_RFID@substate:
  1958                           	callstack 0
  1959   000030                     	ds	1
  1960   000031                     motor_RFID@state:
  1961                           	callstack 0
  1962   000031                     	ds	1
  1963   000032                     motor_Read@ucResult:
  1964                           	callstack 0
  1965   000032                     	ds	1
  1966   000033                     motor_Read@ucAddr:
  1967                           	callstack 0
  1968   000033                     	ds	1
  1969   000034                     motor_Read@bit_count:
  1970                           	callstack 0
  1971   000034                     	ds	1
  1972   000035                     motor_Write@ucValue:
  1973                           	callstack 0
  1974   000035                     	ds	1
  1975   000036                     motor_Write@ucAddr:
  1976                           	callstack 0
  1977   000036                     	ds	1
  1978   000037                     motor_Write@bit_count:
  1979                           	callstack 0
  1980   000037                     	ds	1
  1981   000038                     _state_write:
  1982                           	callstack 0
  1983   000038                     	ds	1
  1984   000039                     _state_read:
  1985                           	callstack 0
  1986   000039                     	ds	1
  1987   00003A                     _state:
  1988                           	callstack 0
  1989   00003A                     	ds	1
  1990   00003B                     _tecla:
  1991                           	callstack 0
  1992   00003B                     	ds	1
  1993   00003C                     _Columnas:
  1994                           	callstack 0
  1995   00003C                     	ds	1
  1996   00003D                     _Filas:
  1997                           	callstack 0
  1998   00003D                     	ds	1
  1999   00003E                     _ActualLeds:
  2000                           	callstack 0
  2001   00003E                     	ds	6
  2002   000044                     _currentUser:
  2003                           	callstack 0
  2004   000044                     	ds	5
  2005   000049                     _timer@TAD_LEDS$F1021:
  2006                           	callstack 0
  2007   000049                     	ds	1
  2008   00004A                     _Timer:
  2009                           	callstack 0
  2010   00004A                     	ds	1
  2011   00004B                     _timer:
  2012                           	callstack 0
  2013   00004B                     	ds	1
  2014                           
  2015                           	psect	dataCOMRAM
  2016   00006E                     __pdataCOMRAM:
  2017                           	callstack 0
  2018   00006E                     _currentTime:
  2019                           	callstack 0
  2020   00006E                     	ds	4
  2021   000072                     motorTerminal@hour:
  2022                           	callstack 0
  2023   000072                     	ds	4
  2024                           
  2025                           	psect	bssBANK0
  2026   0000D8                     __pbssBANK0:
  2027                           	callstack 0
  2028   0000D8                     _Timers:
  2029                           	callstack 0
  2030   0000D8                     	ds	20
  2031                           
  2032                           	psect	dataBANK0
  2033   000080                     __pdataBANK0:
  2034                           	callstack 0
  2035   000080                     _userUIDs:
  2036                           	callstack 0
  2037   000080                     	ds	64
  2038   0000C0                     _configurations:
  2039                           	callstack 0
  2040   0000C0                     	ds	24
  2041                           
  2042                           	psect	cstackCOMRAM
  2043   00004C                     __pcstackCOMRAM:
  2044                           	callstack 0
  2045   00004C                     ??_LowRSI:
  2046                           
  2047                           ; 1 bytes @ 0x0
  2048   00004C                     	ds	1
  2049   00004D                     ?_Terminal_TXAvailable:
  2050                           	callstack 0
  2051   00004D                     ?_TI_GetTics:
  2052                           	callstack 0
  2053   00004D                     TI_Init@counter:
  2054                           	callstack 0
  2055   00004D                     TI_NewTimer@TimerHandle:
  2056                           	callstack 0
  2057   00004D                     TI_ResetTics@TimerHandle:
  2058                           	callstack 0
  2059   00004D                     delay_us@howMany:
  2060                           	callstack 0
  2061   00004D                     getActualUID@UID:
  2062                           	callstack 0
  2063   00004D                     saveHourToData@hour:
  2064                           	callstack 0
  2065   00004D                     ??_EscriuPrimeraOrdre:
  2066   00004D                     ??_CantaPartAlta:
  2067   00004D                     ??_CantaPartBaixa:
  2068   00004D                     
  2069                           ; 1 bytes @ 0x1
  2070   00004D                     	ds	1
  2071   00004E                     delay_us@x:
  2072                           	callstack 0
  2073   00004E                     CantaPartAlta@c:
  2074                           	callstack 0
  2075   00004E                     CantaPartBaixa@c:
  2076                           	callstack 0
  2077   00004E                     EscriuPrimeraOrdre@ordre:
  2078                           	callstack 0
  2079   00004E                     
  2080                           ; 1 bytes @ 0x2
  2081   00004E                     	ds	1
  2082   00004F                     TI_NewTimer@Comptador:
  2083                           	callstack 0
  2084   00004F                     MFRC522_Wr@value:
  2085                           	callstack 0
  2086   00004F                     motor_Write@value:
  2087                           	callstack 0
  2088   00004F                     CantaIR@IR:
  2089                           	callstack 0
  2090   00004F                     ??_MFRC522_Rd:
  2091   00004F                     ??_motor_Read:
  2092   00004F                     ??_Terminal_TXAvailable:
  2093                           
  2094                           ; 1 bytes @ 0x3
  2095   00004F                     	ds	1
  2096   000050                     MFRC522_Rd@Address:
  2097                           	callstack 0
  2098   000050                     motor_Read@addr:
  2099                           	callstack 0
  2100   000050                     Terminal_SendChar@c:
  2101                           	callstack 0
  2102   000050                     motor_SendChar@c:
  2103                           	callstack 0
  2104   000050                     ??_MFRC522_Wr:
  2105   000050                     ??_motor_Write:
  2106   000050                     
  2107                           ; 1 bytes @ 0x4
  2108   000050                     	ds	1
  2109   000051                     MFRC522_Rd@ucAddr:
  2110                           	callstack 0
  2111   000051                     MFRC522_Wr@Address:
  2112                           	callstack 0
  2113   000051                     motor_Write@addr:
  2114                           	callstack 0
  2115   000051                     _motor_Read$559:
  2116                           	callstack 0
  2117   000051                     Terminal_SendString@str:
  2118                           	callstack 0
  2119   000051                     motor_StartSendString@str:
  2120                           	callstack 0
  2121   000051                     ??_TI_GetTics:
  2122   000051                     
  2123                           ; 1 bytes @ 0x5
  2124   000051                     	ds	1
  2125   000052                     MFRC522_Rd@ucResult:
  2126                           	callstack 0
  2127   000052                     MFRC522_Wr@ucAddr:
  2128                           	callstack 0
  2129                           
  2130                           ; 1 bytes @ 0x6
  2131   000052                     	ds	1
  2132   000053                     MFRC522_Rd@i:
  2133                           	callstack 0
  2134   000053                     MFRC522_Wr@i:
  2135                           	callstack 0
  2136   000053                     printfUID@currentUser:
  2137                           	callstack 0
  2138   000053                     printLedConfig@leds:
  2139                           	callstack 0
  2140   000053                     showAllConfigurations@j:
  2141                           	callstack 0
  2142   000053                     
  2143                           ; 1 bytes @ 0x7
  2144   000053                     	ds	1
  2145   000054                     MFRC522_Bit_Mask@mask:
  2146                           	callstack 0
  2147   000054                     _printLedConfig$885:
  2148                           	callstack 0
  2149   000054                     ??_printfUID:
  2150   000054                     
  2151                           ; 1 bytes @ 0x8
  2152   000054                     	ds	1
  2153   000055                     MFRC522_Bit_Mask@op:
  2154                           	callstack 0
  2155   000055                     _printfUID$875:
  2156                           	callstack 0
  2157   000055                     showAllConfigurations@i:
  2158                           	callstack 0
  2159   000055                     TI_GetTics@CopiaTicsActual:
  2160                           	callstack 0
  2161                           
  2162                           ; 4 bytes @ 0x9
  2163   000055                     	ds	1
  2164   000056                     printLedConfig@val:
  2165                           	callstack 0
  2166   000056                     ??_MFRC522_Bit_Mask:
  2167                           
  2168                           ; 1 bytes @ 0xA
  2169   000056                     	ds	1
  2170   000057                     _MFRC522_Bit_Mask$536:
  2171                           	callstack 0
  2172   000057                     _printfUID$877:
  2173                           	callstack 0
  2174   000057                     printLedConfig@i:
  2175                           	callstack 0
  2176                           
  2177                           ; 2 bytes @ 0xB
  2178   000057                     	ds	2
  2179   000059                     TI_GetTics@TimerHandle:
  2180                           	callstack 0
  2181   000059                     MFRC522_Bit_Mask@addr:
  2182                           	callstack 0
  2183   000059                     printfUID@high:
  2184                           	callstack 0
  2185                           
  2186                           ; 1 bytes @ 0xD
  2187   000059                     	ds	1
  2188   00005A                     MFRC522_Bit_Mask@temp:
  2189                           	callstack 0
  2190   00005A                     printfUID@low:
  2191                           	callstack 0
  2192   00005A                     Espera@Timer:
  2193                           	callstack 0
  2194                           
  2195                           ; 2 bytes @ 0xE
  2196   00005A                     	ds	1
  2197   00005B                     MFRC522_AntennaControl@on:
  2198                           	callstack 0
  2199   00005B                     printfUID@i:
  2200                           	callstack 0
  2201   00005B                     
  2202                           ; 1 bytes @ 0xF
  2203   00005B                     	ds	1
  2204   00005C                     Espera@ms:
  2205                           	callstack 0
  2206   00005C                     
  2207                           ; 1 bytes @ 0x10
  2208   00005C                     	ds	1
  2209   00005D                     setCurrentUser@UID1:
  2210                           	callstack 0
  2211   00005D                     motorTerminal@currentUser:
  2212                           	callstack 0
  2213   00005D                     
  2214                           ; 1 bytes @ 0x11
  2215   00005D                     	ds	1
  2216   00005E                     setCurrentUser@UID2:
  2217                           	callstack 0
  2218   00005E                     ??_Espera:
  2219                           
  2220                           ; 1 bytes @ 0x12
  2221   00005E                     	ds	1
  2222   00005F                     setCurrentUser@UID3:
  2223                           	callstack 0
  2224                           
  2225                           ; 1 bytes @ 0x13
  2226   00005F                     	ds	1
  2227   000060                     setCurrentUser@UID4:
  2228                           	callstack 0
  2229                           
  2230                           ; 1 bytes @ 0x14
  2231   000060                     	ds	1
  2232   000061                     setCurrentUser@UID0:
  2233                           	callstack 0
  2234   000061                     
  2235                           ; 1 bytes @ 0x15
  2236   000061                     	ds	1
  2237   000062                     LcInit@columns:
  2238                           	callstack 0
  2239   000062                     motorTerminal@currentUser_910:
  2240                           	callstack 0
  2241   000062                     ??_motor_RFID:
  2242   000062                     
  2243                           ; 1 bytes @ 0x16
  2244   000062                     	ds	1
  2245   000063                     LcInit@rows:
  2246                           	callstack 0
  2247   000063                     
  2248                           ; 1 bytes @ 0x17
  2249   000063                     	ds	1
  2250   000064                     motor_RFID@differentUID:
  2251                           	callstack 0
  2252   000064                     LcInit@i:
  2253                           	callstack 0
  2254                           
  2255                           ; 2 bytes @ 0x18
  2256   000064                     	ds	1
  2257   000065                     motor_RFID@currentUser:
  2258                           	callstack 0
  2259                           
  2260                           ; 5 bytes @ 0x19
  2261   000065                     	ds	5
  2262   00006A                     _motor_RFID$587:
  2263                           	callstack 0
  2264                           
  2265                           ; 2 bytes @ 0x1E
  2266   00006A                     	ds	2
  2267   00006C                     motor_RFID@backBitsCalc:
  2268                           	callstack 0
  2269                           
  2270                           ; 1 bytes @ 0x20
  2271   00006C                     	ds	1
  2272   00006D                     motor_RFID@flag:
  2273                           	callstack 0
  2274                           
  2275                           ; 1 bytes @ 0x21
  2276   00006D                     	ds	1
  2277   00006E                     
  2278                           ; 1 bytes @ 0x22
  2279 ;;
  2280 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2281 ;;
  2282 ;; *************** function _main *****************
  2283 ;; Defined at:
  2284 ;;		line 39 in file "main.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1
  2298 ;;      Params:         0       0       0
  2299 ;;      Locals:         0       0       0
  2300 ;;      Temps:          0       0       0
  2301 ;;      Totals:         0       0       0
  2302 ;;Total ram usage:        0 bytes
  2303 ;; Hardware stack levels required when called: 9
  2304 ;; This function calls:
  2305 ;;		_LcInit
  2306 ;;		_TI_Init
  2307 ;;		_Terminal_Init
  2308 ;;		_initData
  2309 ;;		_initLeds
  2310 ;;		_initPorts
  2311 ;;		_initRFID
  2312 ;;		_initTeclado
  2313 ;;		_motorTerminal
  2314 ;;		_motor_RFID
  2315 ;; This function is called by:
  2316 ;;		Startup code after reset
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text0
  2321   001AC8                     __ptext0:
  2322                           	callstack 0
  2323   001AC8                     _main:
  2324                           	callstack 22
  2325   001AC8                     
  2326                           ;main.c: 40:  ADCON1 = 0x0F;
  2327   001AC8  ECD2  F00D         	call	_TI_Init	;wreg free
  2328                           
  2329                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2330   001ACC  EC8D  F00E         	call	_initTeclado	;wreg free
  2331   001AD0                     
  2332                           ;main.c: 42: }
  2333   001AD0  ECD2  F00E         	call	_initRFID	;wreg free
  2334   001AD4                     
  2335                           ;main.c: 43: 
  2336   001AD4  ECB7  F00E         	call	_Terminal_Init	;wreg free
  2337   001AD8                     
  2338                           ;main.c: 44: 
  2339   001AD8  ECE4  F00E         	call	_initPorts	;wreg free
  2340   001ADC                     
  2341                           ;main.c: 45: 
  2342   001ADC  ECBF  F00E         	call	_initLeds	;wreg free
  2343   001AE0                     
  2344                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2345   001AE0  0E10               	movlw	16
  2346   001AE2  6E62               	movwf	LcInit@columns^0,c
  2347   001AE4  0E02               	movlw	2
  2348   001AE6  EC1E  F008         	call	_LcInit
  2349   001AEA                     
  2350                           ;main.c: 47: 
  2351   001AEA  ECCC  F00E         	call	_initData	;wreg free
  2352   001AEE  8EF2               	bsf	242,7,c	;volatile
  2353   001AF0  9CF2               	bcf	242,6,c	;volatile
  2354   001AF2                     l4802:
  2355   001AF2  EC79  F005         	call	_motorTerminal	;wreg free
  2356   001AF6  EC15  F000         	call	_motor_RFID	;wreg free
  2357   001AFA  748D               	btg	141,2,c	;volatile
  2358   001AFC  EF79  F00D         	goto	l4802
  2359   001B00  EF13  F000         	goto	start
  2360   001B04                     __end_of_main:
  2361                           	callstack 0
  2362                           
  2363 ;; *************** function _motor_RFID *****************
  2364 ;; Defined at:
  2365 ;;		line 262 in file "TAD_RFID.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  currentUser     5   25[COMRAM] unsigned char [5]
  2370 ;;  differentUID    1   24[COMRAM] unsigned char 
  2371 ;;  flag            1   33[COMRAM] unsigned char 
  2372 ;;  backBitsCalc    1   32[COMRAM] unsigned char 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1
  2382 ;;      Params:         0       0       0
  2383 ;;      Locals:        10       0       0
  2384 ;;      Temps:          2       0       0
  2385 ;;      Totals:        12       0       0
  2386 ;;Total ram usage:       12 bytes
  2387 ;; Hardware stack levels used: 1
  2388 ;; Hardware stack levels required when called: 8
  2389 ;; This function calls:
  2390 ;;		_getActualUID
  2391 ;;		_motor_Read
  2392 ;;		_motor_Write
  2393 ;;		_setCurrentUser
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text1
  2400   00002A                     __ptext1:
  2401                           	callstack 0
  2402   00002A                     _motor_RFID:
  2403                           	callstack 22
  2404   00002A                     
  2405                           ;TAD_RFID.c: 275:     static unsigned char lastBitsVal;;TAD_RFID.c: 276:     static unsi
      +                          gned char fifoLevel;;TAD_RFID.c: 277:     unsigned char backBitsCalc;;TAD_RFID.c: 279:  
      +                             switch(state) {
  2406   00002A  EF6D  F005         	goto	l4658
  2407   00002E                     l4220:
  2408                           
  2409                           ;TAD_RFID.c: 284:                     flag = motor_Write(0x0D, 0x07);
  2410   00002E  0E07               	movlw	7
  2411   000030  6E4F               	movwf	motor_Write@value^0,c
  2412   000032  0E0D               	movlw	13
  2413   000034  EC12  F009         	call	_motor_Write
  2414   000038  6E6D               	movwf	motor_RFID@flag^0,c
  2415   00003A                     
  2416                           ;TAD_RFID.c: 285:                     if (flag != 0){
  2417   00003A  506D               	movf	motor_RFID@flag^0,w,c
  2418   00003C  B4D8               	btfsc	status,2,c
  2419   00003E  EF23  F000         	goto	u3471
  2420   000042  EF25  F000         	goto	u3470
  2421   000046                     u3471:
  2422   000046  EF78  F005         	goto	l493
  2423   00004A                     u3470:
  2424   00004A                     
  2425                           ;TAD_RFID.c: 286:                         TagType = 0x26;
  2426   00004A  0E26               	movlw	38
  2427   00004C  6E2A               	movwf	motor_RFID@TagType^0,c
  2428                           
  2429                           ;TAD_RFID.c: 287:                         substate = 1;
  2430   00004E  0E01               	movlw	1
  2431   000050  6E30               	movwf	motor_RFID@substate^0,c
  2432   000052  EF78  F005         	goto	l493
  2433   000056                     l4226:
  2434                           
  2435                           ;TAD_RFID.c: 291:                     irqEn = 0x77;
  2436   000056  0E77               	movlw	119
  2437   000058  6E2F               	movwf	motor_RFID@irqEn^0,c
  2438                           
  2439                           ;TAD_RFID.c: 292:                     waitIRq = 0x30;
  2440   00005A  0E30               	movlw	48
  2441   00005C  6E2E               	movwf	motor_RFID@waitIRq^0,c
  2442   00005E                     
  2443                           ;TAD_RFID.c: 293:                     flag = motor_Write(0x02, irqEn | 0x80);
  2444   00005E  0EF7               	movlw	247
  2445   000060  6E4F               	movwf	motor_Write@value^0,c
  2446   000062  0E02               	movlw	2
  2447   000064  EC12  F009         	call	_motor_Write
  2448   000068  6E6D               	movwf	motor_RFID@flag^0,c
  2449   00006A                     
  2450                           ;TAD_RFID.c: 294:                     if (flag != 0) substate = 2;
  2451   00006A  506D               	movf	motor_RFID@flag^0,w,c
  2452   00006C  B4D8               	btfsc	status,2,c
  2453   00006E  EF3B  F000         	goto	u3481
  2454   000072  EF3D  F000         	goto	u3480
  2455   000076                     u3481:
  2456   000076  EF78  F005         	goto	l493
  2457   00007A                     u3480:
  2458   00007A                     l4232:
  2459   00007A  0E02               	movlw	2
  2460   00007C  6E30               	movwf	motor_RFID@substate^0,c
  2461   00007E  EF78  F005         	goto	l493
  2462   000082                     l4234:
  2463                           
  2464                           ;TAD_RFID.c: 297:                     flag = motor_Read(0x04);
  2465   000082  0E04               	movlw	4
  2466   000084  EC79  F007         	call	_motor_Read
  2467   000088  6E6D               	movwf	motor_RFID@flag^0,c
  2468   00008A                     
  2469                           ;TAD_RFID.c: 298:                     if (flag == 0xFF) {
  2470   00008A  286D               	incf	motor_RFID@flag^0,w,c
  2471   00008C  A4D8               	btfss	status,2,c
  2472   00008E  EF4B  F000         	goto	u3491
  2473   000092  EF4D  F000         	goto	u3490
  2474   000096                     u3491:
  2475   000096  EF50  F000         	goto	l4240
  2476   00009A                     u3490:
  2477   00009A                     l4238:
  2478                           
  2479                           ;TAD_RFID.c: 299:                         substate = 0;
  2480   00009A  6A30               	clrf	motor_RFID@substate^0,c
  2481                           
  2482                           ;TAD_RFID.c: 300:                     } else if (flag != 0xFE) {
  2483   00009C  EF78  F005         	goto	l493
  2484   0000A0                     l4240:
  2485   0000A0  0EFE               	movlw	254
  2486   0000A2  186D               	xorwf	motor_RFID@flag^0,w,c
  2487   0000A4  B4D8               	btfsc	status,2,c
  2488   0000A6  EF57  F000         	goto	u3501
  2489   0000AA  EF59  F000         	goto	u3500
  2490   0000AE                     u3501:
  2491   0000AE  EF5F  F002         	goto	l342
  2492   0000B2                     u3500:
  2493   0000B2                     
  2494                           ;TAD_RFID.c: 301:                         tempRegValue = flag;
  2495   0000B2  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2496   0000B6                     l4244:
  2497                           
  2498                           ;TAD_RFID.c: 302:                         substate = 3;
  2499   0000B6  0E03               	movlw	3
  2500   0000B8  6E30               	movwf	motor_RFID@substate^0,c
  2501   0000BA  EF78  F005         	goto	l493
  2502   0000BE                     l4246:
  2503                           
  2504                           ;TAD_RFID.c: 306:                     flag = motor_Write(0x02, tempRegValue & ~0x80);
  2505   0000BE  5027               	movf	motor_RFID@tempRegValue^0,w,c
  2506   0000C0  0B7F               	andlw	127
  2507   0000C2  6E4F               	movwf	motor_Write@value^0,c
  2508   0000C4  0E02               	movlw	2
  2509   0000C6  EC12  F009         	call	_motor_Write
  2510   0000CA  6E6D               	movwf	motor_RFID@flag^0,c
  2511   0000CC                     
  2512                           ;TAD_RFID.c: 307:                     if (flag != 0) substate = 4;
  2513   0000CC  506D               	movf	motor_RFID@flag^0,w,c
  2514   0000CE  B4D8               	btfsc	status,2,c
  2515   0000D0  EF6C  F000         	goto	u3511
  2516   0000D4  EF6E  F000         	goto	u3510
  2517   0000D8                     u3511:
  2518   0000D8  EF78  F005         	goto	l493
  2519   0000DC                     u3510:
  2520   0000DC                     l4250:
  2521   0000DC  0E04               	movlw	4
  2522   0000DE  6E30               	movwf	motor_RFID@substate^0,c
  2523   0000E0  EF78  F005         	goto	l493
  2524   0000E4                     l4252:
  2525                           
  2526                           ;TAD_RFID.c: 310:                     flag = motor_Read(0x0A);
  2527   0000E4  0E0A               	movlw	10
  2528   0000E6  EC79  F007         	call	_motor_Read
  2529   0000EA  6E6D               	movwf	motor_RFID@flag^0,c
  2530   0000EC                     
  2531                           ;TAD_RFID.c: 311:                     if (flag == 0xFF) {
  2532   0000EC  286D               	incf	motor_RFID@flag^0,w,c
  2533   0000EE  A4D8               	btfss	status,2,c
  2534   0000F0  EF7C  F000         	goto	u3521
  2535   0000F4  EF7E  F000         	goto	u3520
  2536   0000F8                     u3521:
  2537   0000F8  EF80  F000         	goto	l4258
  2538   0000FC                     u3520:
  2539   0000FC  EF4D  F000         	goto	l4238
  2540   000100                     l4258:
  2541   000100  0EFE               	movlw	254
  2542   000102  186D               	xorwf	motor_RFID@flag^0,w,c
  2543   000104  B4D8               	btfsc	status,2,c
  2544   000106  EF87  F000         	goto	u3531
  2545   00010A  EF89  F000         	goto	u3530
  2546   00010E                     u3531:
  2547   00010E  EF5F  F002         	goto	l342
  2548   000112                     u3530:
  2549   000112                     l4260:
  2550                           
  2551                           ;TAD_RFID.c: 314:                         tempRegValue = flag;
  2552   000112  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2553   000116                     
  2554                           ;TAD_RFID.c: 315:                         substate = 5;
  2555   000116  0E05               	movlw	5
  2556   000118  6E30               	movwf	motor_RFID@substate^0,c
  2557   00011A  EF78  F005         	goto	l493
  2558   00011E                     l4264:
  2559                           
  2560                           ;TAD_RFID.c: 319:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  2561   00011E  5027               	movf	motor_RFID@tempRegValue^0,w,c
  2562   000120  0980               	iorlw	128
  2563   000122  6E4F               	movwf	motor_Write@value^0,c
  2564   000124  0E0A               	movlw	10
  2565   000126  EC12  F009         	call	_motor_Write
  2566   00012A  6E6D               	movwf	motor_RFID@flag^0,c
  2567   00012C                     
  2568                           ;TAD_RFID.c: 320:                     if (flag != 0) substate = 6;
  2569   00012C  506D               	movf	motor_RFID@flag^0,w,c
  2570   00012E  B4D8               	btfsc	status,2,c
  2571   000130  EF9C  F000         	goto	u3541
  2572   000134  EF9E  F000         	goto	u3540
  2573   000138                     u3541:
  2574   000138  EF78  F005         	goto	l493
  2575   00013C                     u3540:
  2576   00013C                     l4268:
  2577   00013C  0E06               	movlw	6
  2578   00013E  6E30               	movwf	motor_RFID@substate^0,c
  2579   000140  EF78  F005         	goto	l493
  2580   000144                     l4270:
  2581                           
  2582                           ;TAD_RFID.c: 323:                     flag = motor_Write(0x01, 0x00);
  2583   000144  0E00               	movlw	0
  2584   000146  6E4F               	movwf	motor_Write@value^0,c
  2585   000148  0E01               	movlw	1
  2586   00014A  EC12  F009         	call	_motor_Write
  2587   00014E  6E6D               	movwf	motor_RFID@flag^0,c
  2588   000150                     
  2589                           ;TAD_RFID.c: 324:                     if (flag != 0) substate = 7;
  2590   000150  506D               	movf	motor_RFID@flag^0,w,c
  2591   000152  B4D8               	btfsc	status,2,c
  2592   000154  EFAE  F000         	goto	u3551
  2593   000158  EFB0  F000         	goto	u3550
  2594   00015C                     u3551:
  2595   00015C  EF78  F005         	goto	l493
  2596   000160                     u3550:
  2597   000160                     l4274:
  2598   000160  0E07               	movlw	7
  2599   000162  6E30               	movwf	motor_RFID@substate^0,c
  2600   000164  EF78  F005         	goto	l493
  2601   000168                     l4276:
  2602                           
  2603                           ;TAD_RFID.c: 327:                     flag = motor_Write(0x09, TagType);
  2604   000168  C02A  F04F         	movff	motor_RFID@TagType,motor_Write@value
  2605   00016C  0E09               	movlw	9
  2606   00016E  EC12  F009         	call	_motor_Write
  2607   000172  6E6D               	movwf	motor_RFID@flag^0,c
  2608   000174                     
  2609                           ;TAD_RFID.c: 328:                     if (flag != 0) substate = 8;
  2610   000174  506D               	movf	motor_RFID@flag^0,w,c
  2611   000176  B4D8               	btfsc	status,2,c
  2612   000178  EFC0  F000         	goto	u3561
  2613   00017C  EFC2  F000         	goto	u3560
  2614   000180                     u3561:
  2615   000180  EF78  F005         	goto	l493
  2616   000184                     u3560:
  2617   000184                     l4280:
  2618   000184  0E08               	movlw	8
  2619   000186  6E30               	movwf	motor_RFID@substate^0,c
  2620   000188  EF78  F005         	goto	l493
  2621   00018C                     l4282:
  2622                           
  2623                           ;TAD_RFID.c: 331:                     flag = motor_Write(0x01, 0x0C);
  2624   00018C  0E0C               	movlw	12
  2625   00018E  6E4F               	movwf	motor_Write@value^0,c
  2626   000190  0E01               	movlw	1
  2627   000192  EC12  F009         	call	_motor_Write
  2628   000196  6E6D               	movwf	motor_RFID@flag^0,c
  2629   000198                     
  2630                           ;TAD_RFID.c: 332:                     if (flag != 0) substate = 9;
  2631   000198  506D               	movf	motor_RFID@flag^0,w,c
  2632   00019A  B4D8               	btfsc	status,2,c
  2633   00019C  EFD2  F000         	goto	u3571
  2634   0001A0  EFD4  F000         	goto	u3570
  2635   0001A4                     u3571:
  2636   0001A4  EF78  F005         	goto	l493
  2637   0001A8                     u3570:
  2638   0001A8                     l4286:
  2639   0001A8  0E09               	movlw	9
  2640   0001AA  6E30               	movwf	motor_RFID@substate^0,c
  2641   0001AC  EF78  F005         	goto	l493
  2642   0001B0                     l4288:
  2643                           
  2644                           ;TAD_RFID.c: 335:                     flag = motor_Read(0x0D);
  2645   0001B0  0E0D               	movlw	13
  2646   0001B2  EC79  F007         	call	_motor_Read
  2647   0001B6  6E6D               	movwf	motor_RFID@flag^0,c
  2648   0001B8                     
  2649                           ;TAD_RFID.c: 336:                     if (flag == 0xFF) {
  2650   0001B8  286D               	incf	motor_RFID@flag^0,w,c
  2651   0001BA  A4D8               	btfss	status,2,c
  2652   0001BC  EFE2  F000         	goto	u3581
  2653   0001C0  EFE4  F000         	goto	u3580
  2654   0001C4                     u3581:
  2655   0001C4  EFE6  F000         	goto	l4294
  2656   0001C8                     u3580:
  2657   0001C8  EF4D  F000         	goto	l4238
  2658   0001CC                     l4294:
  2659   0001CC  0EFE               	movlw	254
  2660   0001CE  186D               	xorwf	motor_RFID@flag^0,w,c
  2661   0001D0  B4D8               	btfsc	status,2,c
  2662   0001D2  EFED  F000         	goto	u3591
  2663   0001D6  EFEF  F000         	goto	u3590
  2664   0001DA                     u3591:
  2665   0001DA  EF5F  F002         	goto	l342
  2666   0001DE                     u3590:
  2667   0001DE                     
  2668                           ;TAD_RFID.c: 339:                         tempRegValue = flag;
  2669   0001DE  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2670   0001E2                     l4298:
  2671                           
  2672                           ;TAD_RFID.c: 340:                         substate = 10;
  2673   0001E2  0E0A               	movlw	10
  2674   0001E4  6E30               	movwf	motor_RFID@substate^0,c
  2675   0001E6  EF78  F005         	goto	l493
  2676   0001EA                     l4300:
  2677                           
  2678                           ;TAD_RFID.c: 344:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  2679   0001EA  5027               	movf	motor_RFID@tempRegValue^0,w,c
  2680   0001EC  0980               	iorlw	128
  2681   0001EE  6E4F               	movwf	motor_Write@value^0,c
  2682   0001F0  0E0D               	movlw	13
  2683   0001F2  EC12  F009         	call	_motor_Write
  2684   0001F6  6E6D               	movwf	motor_RFID@flag^0,c
  2685   0001F8                     
  2686                           ;TAD_RFID.c: 345:                     if (flag != 0){
  2687   0001F8  506D               	movf	motor_RFID@flag^0,w,c
  2688   0001FA  B4D8               	btfsc	status,2,c
  2689   0001FC  EF02  F001         	goto	u3601
  2690   000200  EF04  F001         	goto	u3600
  2691   000204                     u3601:
  2692   000204  EF78  F005         	goto	l493
  2693   000208                     u3600:
  2694   000208                     
  2695                           ;TAD_RFID.c: 346:                         i = 0xFF;
  2696   000208  682C               	setf	motor_RFID@i^0,c
  2697   00020A                     l4306:
  2698                           
  2699                           ;TAD_RFID.c: 347:                         substate = 11;
  2700   00020A  0E0B               	movlw	11
  2701   00020C  6E30               	movwf	motor_RFID@substate^0,c
  2702   00020E  EF78  F005         	goto	l493
  2703   000212                     l4308:
  2704                           
  2705                           ;TAD_RFID.c: 351:                     flag = motor_Read(0x04);
  2706   000212  0E04               	movlw	4
  2707   000214  EC79  F007         	call	_motor_Read
  2708   000218  6E6D               	movwf	motor_RFID@flag^0,c
  2709   00021A                     
  2710                           ;TAD_RFID.c: 352:                     if (flag == 0xFF) {
  2711   00021A  286D               	incf	motor_RFID@flag^0,w,c
  2712   00021C  A4D8               	btfss	status,2,c
  2713   00021E  EF13  F001         	goto	u3611
  2714   000222  EF15  F001         	goto	u3610
  2715   000226                     u3611:
  2716   000226  EF17  F001         	goto	l4314
  2717   00022A                     u3610:
  2718   00022A  EF4D  F000         	goto	l4238
  2719   00022E                     l4314:
  2720   00022E  0EFE               	movlw	254
  2721   000230  186D               	xorwf	motor_RFID@flag^0,w,c
  2722   000232  B4D8               	btfsc	status,2,c
  2723   000234  EF1E  F001         	goto	u3621
  2724   000238  EF20  F001         	goto	u3620
  2725   00023C                     u3621:
  2726   00023C  EF78  F005         	goto	l493
  2727   000240                     u3620:
  2728   000240                     
  2729                           ;TAD_RFID.c: 355:                         n = flag;
  2730   000240  C06D  F02D         	movff	motor_RFID@flag,motor_RFID@n
  2731                           
  2732                           ;TAD_RFID.c: 356:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  2733   000244  B02D               	btfsc	motor_RFID@n^0,0,c
  2734   000246  EF27  F001         	goto	u3631
  2735   00024A  EF29  F001         	goto	u3630
  2736   00024E                     u3631:
  2737   00024E  EF36  F001         	goto	l4322
  2738   000252                     u3630:
  2739   000252  502D               	movf	motor_RFID@n^0,w,c
  2740   000254  142E               	andwf	motor_RFID@waitIRq^0,w,c
  2741   000256  0900               	iorlw	0
  2742   000258  A4D8               	btfss	status,2,c
  2743   00025A  EF31  F001         	goto	u3641
  2744   00025E  EF33  F001         	goto	u3640
  2745   000262                     u3641:
  2746   000262  EF36  F001         	goto	l4322
  2747   000266                     u3640:
  2748   000266  2E2C               	decfsz	motor_RFID@i^0,f,c
  2749   000268  EF78  F005         	goto	l493
  2750   00026C                     l4322:
  2751                           
  2752                           ;TAD_RFID.c: 357:                             substate = 12;
  2753   00026C  0E0C               	movlw	12
  2754   00026E  6E30               	movwf	motor_RFID@substate^0,c
  2755   000270  EF78  F005         	goto	l493
  2756   000274                     l4324:
  2757                           
  2758                           ;TAD_RFID.c: 362:                     flag = motor_Read(0x0D);
  2759   000274  0E0D               	movlw	13
  2760   000276  EC79  F007         	call	_motor_Read
  2761   00027A  6E6D               	movwf	motor_RFID@flag^0,c
  2762   00027C                     
  2763                           ;TAD_RFID.c: 363:                     if (flag == 0xFF) {
  2764   00027C  286D               	incf	motor_RFID@flag^0,w,c
  2765   00027E  A4D8               	btfss	status,2,c
  2766   000280  EF44  F001         	goto	u3651
  2767   000284  EF46  F001         	goto	u3650
  2768   000288                     u3651:
  2769   000288  EF48  F001         	goto	l4330
  2770   00028C                     u3650:
  2771   00028C  EF4D  F000         	goto	l4238
  2772   000290                     l4330:
  2773   000290  0EFE               	movlw	254
  2774   000292  186D               	xorwf	motor_RFID@flag^0,w,c
  2775   000294  B4D8               	btfsc	status,2,c
  2776   000296  EF4F  F001         	goto	u3661
  2777   00029A  EF51  F001         	goto	u3660
  2778   00029E                     u3661:
  2779   00029E  EF5F  F002         	goto	l342
  2780   0002A2                     u3660:
  2781   0002A2  506D               	movf	motor_RFID@flag^0,w,c
  2782   0002A4  B4D8               	btfsc	status,2,c
  2783   0002A6  EF57  F001         	goto	u3671
  2784   0002AA  EF59  F001         	goto	u3670
  2785   0002AE                     u3671:
  2786   0002AE  EF5F  F002         	goto	l342
  2787   0002B2                     u3670:
  2788   0002B2                     l4334:
  2789                           
  2790                           ;TAD_RFID.c: 366:                         substate = 13;
  2791   0002B2  0E0D               	movlw	13
  2792   0002B4  6E30               	movwf	motor_RFID@substate^0,c
  2793   0002B6  EF78  F005         	goto	l493
  2794   0002BA                     l4336:
  2795                           
  2796                           ;TAD_RFID.c: 370:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  2797   0002BA  5027               	movf	motor_RFID@tempRegValue^0,w,c
  2798   0002BC  0B7F               	andlw	127
  2799   0002BE  6E4F               	movwf	motor_Write@value^0,c
  2800   0002C0  0E0D               	movlw	13
  2801   0002C2  EC12  F009         	call	_motor_Write
  2802   0002C6  6E6D               	movwf	motor_RFID@flag^0,c
  2803   0002C8                     
  2804                           ;TAD_RFID.c: 371:                     if (flag != 0) substate = 14;
  2805   0002C8  506D               	movf	motor_RFID@flag^0,w,c
  2806   0002CA  B4D8               	btfsc	status,2,c
  2807   0002CC  EF6A  F001         	goto	u3681
  2808   0002D0  EF6C  F001         	goto	u3680
  2809   0002D4                     u3681:
  2810   0002D4  EF78  F005         	goto	l493
  2811   0002D8                     u3680:
  2812   0002D8                     l4340:
  2813   0002D8  0E0E               	movlw	14
  2814   0002DA  6E30               	movwf	motor_RFID@substate^0,c
  2815   0002DC  EF78  F005         	goto	l493
  2816   0002E0                     l4342:
  2817                           
  2818                           ;TAD_RFID.c: 374:                     flag = motor_Read(0x06);
  2819   0002E0  0E06               	movlw	6
  2820   0002E2  EC79  F007         	call	_motor_Read
  2821   0002E6  6E6D               	movwf	motor_RFID@flag^0,c
  2822   0002E8                     
  2823                           ;TAD_RFID.c: 375:                     if (flag == 0xFF) {
  2824   0002E8  286D               	incf	motor_RFID@flag^0,w,c
  2825   0002EA  A4D8               	btfss	status,2,c
  2826   0002EC  EF7A  F001         	goto	u3691
  2827   0002F0  EF7C  F001         	goto	u3690
  2828   0002F4                     u3691:
  2829   0002F4  EF7E  F001         	goto	l4348
  2830   0002F8                     u3690:
  2831   0002F8  EF4D  F000         	goto	l4238
  2832   0002FC                     l4348:
  2833   0002FC  0EFE               	movlw	254
  2834   0002FE  186D               	xorwf	motor_RFID@flag^0,w,c
  2835   000300  B4D8               	btfsc	status,2,c
  2836   000302  EF85  F001         	goto	u3701
  2837   000306  EF87  F001         	goto	u3700
  2838   00030A                     u3701:
  2839   00030A  EF78  F005         	goto	l493
  2840   00030E                     u3700:
  2841   00030E                     
  2842                           ;TAD_RFID.c: 378:                         tempRegValue = flag;
  2843   00030E  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2844   000312                     
  2845                           ;TAD_RFID.c: 379:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  2846   000312  502C               	movf	motor_RFID@i^0,w,c
  2847   000314  B4D8               	btfsc	status,2,c
  2848   000316  EF8F  F001         	goto	u3711
  2849   00031A  EF91  F001         	goto	u3710
  2850   00031E                     u3711:
  2851   00031E  EFA0  F001         	goto	l386
  2852   000322                     u3710:
  2853   000322  C027  F062         	movff	motor_RFID@tempRegValue,??_motor_RFID
  2854   000326  0E1B               	movlw	27
  2855   000328  1662               	andwf	??_motor_RFID^0,f,c
  2856   00032A  A4D8               	btfss	status,2,c
  2857   00032C  EF9A  F001         	goto	u3721
  2858   000330  EF9C  F001         	goto	u3720
  2859   000334                     u3721:
  2860   000334  EFA0  F001         	goto	l386
  2861   000338                     u3720:
  2862   000338                     l4356:
  2863                           
  2864                           ;TAD_RFID.c: 380:                             substate = 15;
  2865   000338  0E0F               	movlw	15
  2866   00033A  6E30               	movwf	motor_RFID@substate^0,c
  2867                           
  2868                           ;TAD_RFID.c: 381:                         } else {
  2869   00033C  EF78  F005         	goto	l493
  2870   000340                     l386:
  2871                           
  2872                           ;TAD_RFID.c: 382:                             state = substate = 0;
  2873   000340  6A30               	clrf	motor_RFID@substate^0,c
  2874   000342  6A31               	clrf	motor_RFID@state^0,c
  2875   000344  EF78  F005         	goto	l493
  2876   000348                     l4358:
  2877                           
  2878                           ;TAD_RFID.c: 387:                     flag = motor_Read(0x0A);
  2879   000348  0E0A               	movlw	10
  2880   00034A  EC79  F007         	call	_motor_Read
  2881   00034E  6E6D               	movwf	motor_RFID@flag^0,c
  2882   000350                     
  2883                           ;TAD_RFID.c: 388:                     if (flag == 0xFF) {
  2884   000350  286D               	incf	motor_RFID@flag^0,w,c
  2885   000352  A4D8               	btfss	status,2,c
  2886   000354  EFAE  F001         	goto	u3731
  2887   000358  EFB0  F001         	goto	u3730
  2888   00035C                     u3731:
  2889   00035C  EFB2  F001         	goto	l4364
  2890   000360                     u3730:
  2891   000360  EF4D  F000         	goto	l4238
  2892   000364                     l4364:
  2893   000364  0EFE               	movlw	254
  2894   000366  186D               	xorwf	motor_RFID@flag^0,w,c
  2895   000368  B4D8               	btfsc	status,2,c
  2896   00036A  EFB9  F001         	goto	u3741
  2897   00036E  EFBB  F001         	goto	u3740
  2898   000372                     u3741:
  2899   000372  EF5F  F002         	goto	l342
  2900   000376                     u3740:
  2901   000376                     
  2902                           ;TAD_RFID.c: 391:                         fifoLevel = flag;
  2903   000376  C06D  F025         	movff	motor_RFID@flag,motor_RFID@fifoLevel
  2904   00037A                     l4368:
  2905                           
  2906                           ;TAD_RFID.c: 392:                         substate = 16;
  2907   00037A  0E10               	movlw	16
  2908   00037C  6E30               	movwf	motor_RFID@substate^0,c
  2909   00037E  EF78  F005         	goto	l493
  2910   000382                     l4370:
  2911                           
  2912                           ;TAD_RFID.c: 396:                     flag = motor_Read(0x0C);
  2913   000382  0E0C               	movlw	12
  2914   000384  EC79  F007         	call	_motor_Read
  2915   000388  6E6D               	movwf	motor_RFID@flag^0,c
  2916   00038A                     
  2917                           ;TAD_RFID.c: 397:                     if (flag == 0xFF) {
  2918   00038A  286D               	incf	motor_RFID@flag^0,w,c
  2919   00038C  A4D8               	btfss	status,2,c
  2920   00038E  EFCB  F001         	goto	u3751
  2921   000392  EFCD  F001         	goto	u3750
  2922   000396                     u3751:
  2923   000396  EFCF  F001         	goto	l4376
  2924   00039A                     u3750:
  2925   00039A  EF4D  F000         	goto	l4238
  2926   00039E                     l4376:
  2927   00039E  0EFE               	movlw	254
  2928   0003A0  186D               	xorwf	motor_RFID@flag^0,w,c
  2929   0003A2  B4D8               	btfsc	status,2,c
  2930   0003A4  EFD6  F001         	goto	u3761
  2931   0003A8  EFD8  F001         	goto	u3760
  2932   0003AC                     u3761:
  2933   0003AC  EF5F  F002         	goto	l342
  2934   0003B0                     u3760:
  2935   0003B0                     
  2936                           ;TAD_RFID.c: 400:                         lastBitsVal = flag & 0x07;
  2937   0003B0  506D               	movf	motor_RFID@flag^0,w,c
  2938   0003B2  0B07               	andlw	7
  2939   0003B4  6E26               	movwf	motor_RFID@lastBitsVal^0,c
  2940   0003B6                     l4380:
  2941                           
  2942                           ;TAD_RFID.c: 401:                         substate = 17;
  2943   0003B6  0E11               	movlw	17
  2944   0003B8  6E30               	movwf	motor_RFID@substate^0,c
  2945   0003BA  EF78  F005         	goto	l493
  2946   0003BE                     l4382:
  2947                           
  2948                           ;TAD_RFID.c: 405:                     backBitsCalc = lastBitsVal ? (fifoLevel - 1) * 8 +
      +                           lastBitsVal : fifoLevel * 8;
  2949   0003BE  5026               	movf	motor_RFID@lastBitsVal^0,w,c
  2950   0003C0  A4D8               	btfss	status,2,c
  2951   0003C2  EFE5  F001         	goto	u3771
  2952   0003C6  EFE7  F001         	goto	u3770
  2953   0003CA                     u3771:
  2954   0003CA  EFEF  F001         	goto	l4386
  2955   0003CE                     u3770:
  2956   0003CE  5025               	movf	motor_RFID@fifoLevel^0,w,c
  2957   0003D0  0D08               	mullw	8
  2958   0003D2  CFF3 F06A          	movff	prodl,_motor_RFID$587
  2959   0003D6  CFF4 F06B          	movff	prodh,_motor_RFID$587+1
  2960   0003DA  EF05  F002         	goto	l4388
  2961   0003DE                     l4386:
  2962   0003DE  5026               	movf	motor_RFID@lastBitsVal^0,w,c
  2963   0003E0  C025  F062         	movff	motor_RFID@fifoLevel,??_motor_RFID
  2964   0003E4  6A63               	clrf	(??_motor_RFID+1)^0,c
  2965   0003E6  90D8               	bcf	status,0,c
  2966   0003E8  3662               	rlcf	??_motor_RFID^0,f,c
  2967   0003EA  3663               	rlcf	(??_motor_RFID+1)^0,f,c
  2968   0003EC  90D8               	bcf	status,0,c
  2969   0003EE  3662               	rlcf	??_motor_RFID^0,f,c
  2970   0003F0  3663               	rlcf	(??_motor_RFID+1)^0,f,c
  2971   0003F2  90D8               	bcf	status,0,c
  2972   0003F4  3662               	rlcf	??_motor_RFID^0,f,c
  2973   0003F6  3663               	rlcf	(??_motor_RFID+1)^0,f,c
  2974   0003F8  2662               	addwf	??_motor_RFID^0,f,c
  2975   0003FA  0E00               	movlw	0
  2976   0003FC  2263               	addwfc	(??_motor_RFID+1)^0,f,c
  2977   0003FE  0EF8               	movlw	248
  2978   000400  2462               	addwf	??_motor_RFID^0,w,c
  2979   000402  6E6A               	movwf	_motor_RFID$587^0,c
  2980   000404  0EFF               	movlw	255
  2981   000406  2063               	addwfc	(??_motor_RFID+1)^0,w,c
  2982   000408  6E6B               	movwf	(_motor_RFID$587+1)^0,c
  2983   00040A                     l4388:
  2984   00040A  C06A  F06C         	movff	_motor_RFID$587,motor_RFID@backBitsCalc
  2985                           
  2986                           ;TAD_RFID.c: 406:                     if (backBitsCalc == 0x10) {
  2987   00040E  0E10               	movlw	16
  2988   000410  186C               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2989   000412  A4D8               	btfss	status,2,c
  2990   000414  EF0E  F002         	goto	u3781
  2991   000418  EF10  F002         	goto	u3780
  2992   00041C                     u3781:
  2993   00041C  EFA0  F001         	goto	l386
  2994   000420                     u3780:
  2995   000420                     
  2996                           ;TAD_RFID.c: 407:                         state = 1;
  2997   000420  0E01               	movlw	1
  2998   000422  6E31               	movwf	motor_RFID@state^0,c
  2999   000424  EF4D  F000         	goto	l4238
  3000   000428                     l4396:
  3001   000428  5030               	movf	motor_RFID@substate^0,w,c
  3002                           
  3003                           ; Switch size 1, requested type "simple"
  3004                           ; Number of cases is 18, Range of values is 0 to 17
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte           55    28 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009   00042A  0A00               	xorlw	0	; case 0
  3010   00042C  B4D8               	btfsc	status,2,c
  3011   00042E  EF17  F000         	goto	l4220
  3012   000432  0A01               	xorlw	1	; case 1
  3013   000434  B4D8               	btfsc	status,2,c
  3014   000436  EF2B  F000         	goto	l4226
  3015   00043A  0A03               	xorlw	3	; case 2
  3016   00043C  B4D8               	btfsc	status,2,c
  3017   00043E  EF41  F000         	goto	l4234
  3018   000442  0A01               	xorlw	1	; case 3
  3019   000444  B4D8               	btfsc	status,2,c
  3020   000446  EF5F  F000         	goto	l4246
  3021   00044A  0A07               	xorlw	7	; case 4
  3022   00044C  B4D8               	btfsc	status,2,c
  3023   00044E  EF72  F000         	goto	l4252
  3024   000452  0A01               	xorlw	1	; case 5
  3025   000454  B4D8               	btfsc	status,2,c
  3026   000456  EF8F  F000         	goto	l4264
  3027   00045A  0A03               	xorlw	3	; case 6
  3028   00045C  B4D8               	btfsc	status,2,c
  3029   00045E  EFA2  F000         	goto	l4270
  3030   000462  0A01               	xorlw	1	; case 7
  3031   000464  B4D8               	btfsc	status,2,c
  3032   000466  EFB4  F000         	goto	l4276
  3033   00046A  0A0F               	xorlw	15	; case 8
  3034   00046C  B4D8               	btfsc	status,2,c
  3035   00046E  EFC6  F000         	goto	l4282
  3036   000472  0A01               	xorlw	1	; case 9
  3037   000474  B4D8               	btfsc	status,2,c
  3038   000476  EFD8  F000         	goto	l4288
  3039   00047A  0A03               	xorlw	3	; case 10
  3040   00047C  B4D8               	btfsc	status,2,c
  3041   00047E  EFF5  F000         	goto	l4300
  3042   000482  0A01               	xorlw	1	; case 11
  3043   000484  B4D8               	btfsc	status,2,c
  3044   000486  EF09  F001         	goto	l4308
  3045   00048A  0A07               	xorlw	7	; case 12
  3046   00048C  B4D8               	btfsc	status,2,c
  3047   00048E  EF3A  F001         	goto	l4324
  3048   000492  0A01               	xorlw	1	; case 13
  3049   000494  B4D8               	btfsc	status,2,c
  3050   000496  EF5D  F001         	goto	l4336
  3051   00049A  0A03               	xorlw	3	; case 14
  3052   00049C  B4D8               	btfsc	status,2,c
  3053   00049E  EF70  F001         	goto	l4342
  3054   0004A2  0A01               	xorlw	1	; case 15
  3055   0004A4  B4D8               	btfsc	status,2,c
  3056   0004A6  EFA4  F001         	goto	l4358
  3057   0004AA  0A1F               	xorlw	31	; case 16
  3058   0004AC  B4D8               	btfsc	status,2,c
  3059   0004AE  EFC1  F001         	goto	l4370
  3060   0004B2  0A01               	xorlw	1	; case 17
  3061   0004B4  B4D8               	btfsc	status,2,c
  3062   0004B6  EFDF  F001         	goto	l4382
  3063   0004BA  EF78  F005         	goto	l493
  3064   0004BE                     l342:
  3065                           
  3066                           ;TAD_RFID.c: 414:             break;
  3067   0004BE  EF78  F005         	goto	l493
  3068   0004C2                     l4398:
  3069                           
  3070                           ;TAD_RFID.c: 419:                     flag = motor_Write(0x0D, 0x00);
  3071   0004C2  0E00               	movlw	0
  3072   0004C4  6E4F               	movwf	motor_Write@value^0,c
  3073   0004C6  0E0D               	movlw	13
  3074   0004C8  EC12  F009         	call	_motor_Write
  3075   0004CC  6E6D               	movwf	motor_RFID@flag^0,c
  3076   0004CE                     
  3077                           ;TAD_RFID.c: 420:                     if (flag != 0){
  3078   0004CE  506D               	movf	motor_RFID@flag^0,w,c
  3079   0004D0  B4D8               	btfsc	status,2,c
  3080   0004D2  EF6D  F002         	goto	u3791
  3081   0004D6  EF6F  F002         	goto	u3790
  3082   0004DA                     u3791:
  3083   0004DA  EF78  F005         	goto	l493
  3084   0004DE                     u3790:
  3085   0004DE                     
  3086                           ;TAD_RFID.c: 421:                         UID[0] = 0x93;
  3087   0004DE  0E93               	movlw	147
  3088   0004E0  6E01               	movwf	motor_RFID@UID^0,c
  3089                           
  3090                           ;TAD_RFID.c: 422:                         UID[1] = 0x20;
  3091   0004E2  0E20               	movlw	32
  3092   0004E4  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3093                           
  3094                           ;TAD_RFID.c: 423:                         substate = 1;
  3095   0004E6  0E01               	movlw	1
  3096   0004E8  6E30               	movwf	motor_RFID@substate^0,c
  3097   0004EA  EF78  F005         	goto	l493
  3098   0004EE                     l4404:
  3099                           
  3100                           ;TAD_RFID.c: 427:                     flag = motor_Read(0x08);
  3101   0004EE  0E08               	movlw	8
  3102   0004F0  EC79  F007         	call	_motor_Read
  3103   0004F4  6E6D               	movwf	motor_RFID@flag^0,c
  3104   0004F6                     
  3105                           ;TAD_RFID.c: 428:                     if (flag == 0xFF) {
  3106   0004F6  286D               	incf	motor_RFID@flag^0,w,c
  3107   0004F8  A4D8               	btfss	status,2,c
  3108   0004FA  EF81  F002         	goto	u3801
  3109   0004FE  EF83  F002         	goto	u3800
  3110   000502                     u3801:
  3111   000502  EF85  F002         	goto	l4410
  3112   000506                     u3800:
  3113   000506  EFA0  F001         	goto	l386
  3114   00050A                     l4410:
  3115   00050A  0EFE               	movlw	254
  3116   00050C  186D               	xorwf	motor_RFID@flag^0,w,c
  3117   00050E  B4D8               	btfsc	status,2,c
  3118   000510  EF8C  F002         	goto	u3811
  3119   000514  EF8E  F002         	goto	u3810
  3120   000518                     u3811:
  3121   000518  EF78  F005         	goto	l493
  3122   00051C                     u3810:
  3123   00051C                     
  3124                           ;TAD_RFID.c: 431:                         tempRegValue = flag;
  3125   00051C  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3126   000520  EF3D  F000         	goto	l4232
  3127   000524                     l4416:
  3128                           
  3129                           ;TAD_RFID.c: 436:                     flag = motor_Write(0x08, tempRegValue & ~0x08);
  3130   000524  5027               	movf	motor_RFID@tempRegValue^0,w,c
  3131   000526  0BF7               	andlw	247
  3132   000528  6E4F               	movwf	motor_Write@value^0,c
  3133   00052A  0E08               	movlw	8
  3134   00052C  EC12  F009         	call	_motor_Write
  3135   000530  6E6D               	movwf	motor_RFID@flag^0,c
  3136   000532                     
  3137                           ;TAD_RFID.c: 437:                     if (flag != 0) substate = 3;
  3138   000532  506D               	movf	motor_RFID@flag^0,w,c
  3139   000534  B4D8               	btfsc	status,2,c
  3140   000536  EF9F  F002         	goto	u3821
  3141   00053A  EFA1  F002         	goto	u3820
  3142   00053E                     u3821:
  3143   00053E  EF78  F005         	goto	l493
  3144   000542                     u3820:
  3145   000542  EF5B  F000         	goto	l4244
  3146   000546                     l4422:
  3147                           
  3148                           ;TAD_RFID.c: 440:                     irqEn = 0x77;
  3149   000546  0E77               	movlw	119
  3150   000548  6E2F               	movwf	motor_RFID@irqEn^0,c
  3151                           
  3152                           ;TAD_RFID.c: 441:                     waitIRq = 0x30;
  3153   00054A  0E30               	movlw	48
  3154   00054C  6E2E               	movwf	motor_RFID@waitIRq^0,c
  3155   00054E                     
  3156                           ;TAD_RFID.c: 442:                     flag = motor_Write(0x02, irqEn | 0x80);
  3157   00054E  0EF7               	movlw	247
  3158   000550  6E4F               	movwf	motor_Write@value^0,c
  3159   000552  0E02               	movlw	2
  3160   000554  EC12  F009         	call	_motor_Write
  3161   000558  6E6D               	movwf	motor_RFID@flag^0,c
  3162   00055A                     
  3163                           ;TAD_RFID.c: 443:                     if (flag != 0) substate = 4;
  3164   00055A  506D               	movf	motor_RFID@flag^0,w,c
  3165   00055C  B4D8               	btfsc	status,2,c
  3166   00055E  EFB3  F002         	goto	u3831
  3167   000562  EFB5  F002         	goto	u3830
  3168   000566                     u3831:
  3169   000566  EF78  F005         	goto	l493
  3170   00056A                     u3830:
  3171   00056A  EF6E  F000         	goto	l4250
  3172   00056E                     l4430:
  3173                           
  3174                           ;TAD_RFID.c: 446:                     flag = motor_Read(0x04);
  3175   00056E  0E04               	movlw	4
  3176   000570  EC79  F007         	call	_motor_Read
  3177   000574  6E6D               	movwf	motor_RFID@flag^0,c
  3178   000576                     
  3179                           ;TAD_RFID.c: 447:                     if (flag == 0xFF) {
  3180   000576  286D               	incf	motor_RFID@flag^0,w,c
  3181   000578  A4D8               	btfss	status,2,c
  3182   00057A  EFC1  F002         	goto	u3841
  3183   00057E  EFC3  F002         	goto	u3840
  3184   000582                     u3841:
  3185   000582  EFC5  F002         	goto	l4436
  3186   000586                     u3840:
  3187   000586  EFA0  F001         	goto	l386
  3188   00058A                     l4436:
  3189   00058A  0EFE               	movlw	254
  3190   00058C  186D               	xorwf	motor_RFID@flag^0,w,c
  3191   00058E  B4D8               	btfsc	status,2,c
  3192   000590  EFCC  F002         	goto	u3851
  3193   000594  EFCE  F002         	goto	u3850
  3194   000598                     u3851:
  3195   000598  EF78  F005         	goto	l493
  3196   00059C                     u3850:
  3197   00059C  EF89  F000         	goto	l4260
  3198   0005A0                     l4442:
  3199                           
  3200                           ;TAD_RFID.c: 455:                     flag = motor_Write(0x04, tempRegValue & ~0x80);
  3201   0005A0  5027               	movf	motor_RFID@tempRegValue^0,w,c
  3202   0005A2  0B7F               	andlw	127
  3203   0005A4  6E4F               	movwf	motor_Write@value^0,c
  3204   0005A6  0E04               	movlw	4
  3205   0005A8  EC12  F009         	call	_motor_Write
  3206   0005AC  6E6D               	movwf	motor_RFID@flag^0,c
  3207   0005AE                     
  3208                           ;TAD_RFID.c: 456:                     if (flag != 0) substate = 6;
  3209   0005AE  506D               	movf	motor_RFID@flag^0,w,c
  3210   0005B0  B4D8               	btfsc	status,2,c
  3211   0005B2  EFDD  F002         	goto	u3861
  3212   0005B6  EFDF  F002         	goto	u3860
  3213   0005BA                     u3861:
  3214   0005BA  EF78  F005         	goto	l493
  3215   0005BE                     u3860:
  3216   0005BE  EF9E  F000         	goto	l4268
  3217   0005C2                     l4448:
  3218                           
  3219                           ;TAD_RFID.c: 459:                     flag = motor_Read(0x0A);
  3220   0005C2  0E0A               	movlw	10
  3221   0005C4  EC79  F007         	call	_motor_Read
  3222   0005C8  6E6D               	movwf	motor_RFID@flag^0,c
  3223   0005CA                     
  3224                           ;TAD_RFID.c: 460:                     if (flag == 0xFF) {
  3225   0005CA  286D               	incf	motor_RFID@flag^0,w,c
  3226   0005CC  A4D8               	btfss	status,2,c
  3227   0005CE  EFEB  F002         	goto	u3871
  3228   0005D2  EFED  F002         	goto	u3870
  3229   0005D6                     u3871:
  3230   0005D6  EFEF  F002         	goto	l4454
  3231   0005DA                     u3870:
  3232   0005DA  EFA0  F001         	goto	l386
  3233   0005DE                     l4454:
  3234   0005DE  0EFE               	movlw	254
  3235   0005E0  186D               	xorwf	motor_RFID@flag^0,w,c
  3236   0005E2  B4D8               	btfsc	status,2,c
  3237   0005E4  EFF6  F002         	goto	u3881
  3238   0005E8  EFF8  F002         	goto	u3880
  3239   0005EC                     u3881:
  3240   0005EC  EF78  F005         	goto	l493
  3241   0005F0                     u3880:
  3242   0005F0                     
  3243                           ;TAD_RFID.c: 463:                         tempRegValue = flag;
  3244   0005F0  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3245   0005F4  EFB0  F000         	goto	l4274
  3246   0005F8                     l4460:
  3247                           
  3248                           ;TAD_RFID.c: 468:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  3249   0005F8  5027               	movf	motor_RFID@tempRegValue^0,w,c
  3250   0005FA  0980               	iorlw	128
  3251   0005FC  6E4F               	movwf	motor_Write@value^0,c
  3252   0005FE  0E0A               	movlw	10
  3253   000600  EC12  F009         	call	_motor_Write
  3254   000604  6E6D               	movwf	motor_RFID@flag^0,c
  3255   000606                     
  3256                           ;TAD_RFID.c: 469:                     if (flag != 0) substate = 8;
  3257   000606  506D               	movf	motor_RFID@flag^0,w,c
  3258   000608  B4D8               	btfsc	status,2,c
  3259   00060A  EF09  F003         	goto	u3891
  3260   00060E  EF0B  F003         	goto	u3890
  3261   000612                     u3891:
  3262   000612  EF78  F005         	goto	l493
  3263   000616                     u3890:
  3264   000616  EFC2  F000         	goto	l4280
  3265   00061A                     l4466:
  3266                           
  3267                           ;TAD_RFID.c: 472:                     flag = motor_Write(0x01, 0x00);
  3268   00061A  0E00               	movlw	0
  3269   00061C  6E4F               	movwf	motor_Write@value^0,c
  3270   00061E  0E01               	movlw	1
  3271   000620  EC12  F009         	call	_motor_Write
  3272   000624  6E6D               	movwf	motor_RFID@flag^0,c
  3273   000626                     
  3274                           ;TAD_RFID.c: 473:                     if (flag != 0) substate = 9;
  3275   000626  506D               	movf	motor_RFID@flag^0,w,c
  3276   000628  B4D8               	btfsc	status,2,c
  3277   00062A  EF19  F003         	goto	u3901
  3278   00062E  EF1B  F003         	goto	u3900
  3279   000632                     u3901:
  3280   000632  EF78  F005         	goto	l493
  3281   000636                     u3900:
  3282   000636  EFD4  F000         	goto	l4286
  3283   00063A                     l4472:
  3284                           
  3285                           ;TAD_RFID.c: 476:                     flag = motor_Write(0x09, UID[0]);
  3286   00063A  C001  F04F         	movff	motor_RFID@UID,motor_Write@value
  3287   00063E  0E09               	movlw	9
  3288   000640  EC12  F009         	call	_motor_Write
  3289   000644  6E6D               	movwf	motor_RFID@flag^0,c
  3290   000646                     
  3291                           ;TAD_RFID.c: 477:                     if (flag != 0) substate = 10;
  3292   000646  506D               	movf	motor_RFID@flag^0,w,c
  3293   000648  B4D8               	btfsc	status,2,c
  3294   00064A  EF29  F003         	goto	u3911
  3295   00064E  EF2B  F003         	goto	u3910
  3296   000652                     u3911:
  3297   000652  EF78  F005         	goto	l493
  3298   000656                     u3910:
  3299   000656  EFF1  F000         	goto	l4298
  3300   00065A                     l4478:
  3301                           
  3302                           ;TAD_RFID.c: 480:                     flag = motor_Write(0x09, UID[1]);
  3303   00065A  C002  F04F         	movff	motor_RFID@UID+1,motor_Write@value
  3304   00065E  0E09               	movlw	9
  3305   000660  EC12  F009         	call	_motor_Write
  3306   000664  6E6D               	movwf	motor_RFID@flag^0,c
  3307   000666                     
  3308                           ;TAD_RFID.c: 481:                     if (flag != 0) substate = 11;
  3309   000666  506D               	movf	motor_RFID@flag^0,w,c
  3310   000668  B4D8               	btfsc	status,2,c
  3311   00066A  EF39  F003         	goto	u3921
  3312   00066E  EF3B  F003         	goto	u3920
  3313   000672                     u3921:
  3314   000672  EF78  F005         	goto	l493
  3315   000676                     u3920:
  3316   000676  EF05  F001         	goto	l4306
  3317   00067A                     l4484:
  3318                           
  3319                           ;TAD_RFID.c: 484:                     flag = motor_Write(0x01, 0x0C);
  3320   00067A  0E0C               	movlw	12
  3321   00067C  6E4F               	movwf	motor_Write@value^0,c
  3322   00067E  0E01               	movlw	1
  3323   000680  EC12  F009         	call	_motor_Write
  3324   000684  6E6D               	movwf	motor_RFID@flag^0,c
  3325   000686                     
  3326                           ;TAD_RFID.c: 485:                     if (flag != 0) substate = 12;
  3327   000686  506D               	movf	motor_RFID@flag^0,w,c
  3328   000688  B4D8               	btfsc	status,2,c
  3329   00068A  EF49  F003         	goto	u3931
  3330   00068E  EF4B  F003         	goto	u3930
  3331   000692                     u3931:
  3332   000692  EF78  F005         	goto	l493
  3333   000696                     u3930:
  3334   000696  EF36  F001         	goto	l4322
  3335   00069A                     l4490:
  3336                           
  3337                           ;TAD_RFID.c: 488:                     flag = motor_Read(0x0D);
  3338   00069A  0E0D               	movlw	13
  3339   00069C  EC79  F007         	call	_motor_Read
  3340   0006A0  6E6D               	movwf	motor_RFID@flag^0,c
  3341   0006A2                     
  3342                           ;TAD_RFID.c: 489:                     if (flag == 0xFF) {
  3343   0006A2  286D               	incf	motor_RFID@flag^0,w,c
  3344   0006A4  A4D8               	btfss	status,2,c
  3345   0006A6  EF57  F003         	goto	u3941
  3346   0006AA  EF59  F003         	goto	u3940
  3347   0006AE                     u3941:
  3348   0006AE  EF5B  F003         	goto	l4496
  3349   0006B2                     u3940:
  3350   0006B2  EFA0  F001         	goto	l386
  3351   0006B6                     l4496:
  3352   0006B6  0EFE               	movlw	254
  3353   0006B8  186D               	xorwf	motor_RFID@flag^0,w,c
  3354   0006BA  B4D8               	btfsc	status,2,c
  3355   0006BC  EF62  F003         	goto	u3951
  3356   0006C0  EF64  F003         	goto	u3950
  3357   0006C4                     u3951:
  3358   0006C4  EF78  F005         	goto	l493
  3359   0006C8                     u3950:
  3360   0006C8                     
  3361                           ;TAD_RFID.c: 492:                         tempRegValue = flag;
  3362   0006C8  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3363   0006CC  EF59  F001         	goto	l4334
  3364   0006D0                     l4502:
  3365                           
  3366                           ;TAD_RFID.c: 497:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  3367   0006D0  5027               	movf	motor_RFID@tempRegValue^0,w,c
  3368   0006D2  0980               	iorlw	128
  3369   0006D4  6E4F               	movwf	motor_Write@value^0,c
  3370   0006D6  0E0D               	movlw	13
  3371   0006D8  EC12  F009         	call	_motor_Write
  3372   0006DC  6E6D               	movwf	motor_RFID@flag^0,c
  3373   0006DE                     
  3374                           ;TAD_RFID.c: 498:                     if (flag != 0){
  3375   0006DE  506D               	movf	motor_RFID@flag^0,w,c
  3376   0006E0  B4D8               	btfsc	status,2,c
  3377   0006E2  EF75  F003         	goto	u3961
  3378   0006E6  EF77  F003         	goto	u3960
  3379   0006EA                     u3961:
  3380   0006EA  EF78  F005         	goto	l493
  3381   0006EE                     u3960:
  3382   0006EE                     
  3383                           ;TAD_RFID.c: 499:                         i = 0xFF;
  3384   0006EE  682C               	setf	motor_RFID@i^0,c
  3385   0006F0  EF6C  F001         	goto	l4340
  3386   0006F4                     l4510:
  3387                           
  3388                           ;TAD_RFID.c: 504:                     flag = motor_Read(0x04);
  3389   0006F4  0E04               	movlw	4
  3390   0006F6  EC79  F007         	call	_motor_Read
  3391   0006FA  6E6D               	movwf	motor_RFID@flag^0,c
  3392   0006FC                     
  3393                           ;TAD_RFID.c: 505:                     if (flag == 0xFF) {
  3394   0006FC  286D               	incf	motor_RFID@flag^0,w,c
  3395   0006FE  A4D8               	btfss	status,2,c
  3396   000700  EF84  F003         	goto	u3971
  3397   000704  EF86  F003         	goto	u3970
  3398   000708                     u3971:
  3399   000708  EF88  F003         	goto	l4516
  3400   00070C                     u3970:
  3401   00070C  EFA0  F001         	goto	l386
  3402   000710                     l4516:
  3403   000710  0EFE               	movlw	254
  3404   000712  186D               	xorwf	motor_RFID@flag^0,w,c
  3405   000714  B4D8               	btfsc	status,2,c
  3406   000716  EF8F  F003         	goto	u3981
  3407   00071A  EF91  F003         	goto	u3980
  3408   00071E                     u3981:
  3409   00071E  EF78  F005         	goto	l493
  3410   000722                     u3980:
  3411   000722                     
  3412                           ;TAD_RFID.c: 508:                         n = flag;
  3413   000722  C06D  F02D         	movff	motor_RFID@flag,motor_RFID@n
  3414                           
  3415                           ;TAD_RFID.c: 509:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  3416   000726  B02D               	btfsc	motor_RFID@n^0,0,c
  3417   000728  EF98  F003         	goto	u3991
  3418   00072C  EF9A  F003         	goto	u3990
  3419   000730                     u3991:
  3420   000730  EF9C  F001         	goto	l4356
  3421   000734                     u3990:
  3422   000734  502D               	movf	motor_RFID@n^0,w,c
  3423   000736  142E               	andwf	motor_RFID@waitIRq^0,w,c
  3424   000738  0900               	iorlw	0
  3425   00073A  A4D8               	btfss	status,2,c
  3426   00073C  EFA2  F003         	goto	u4001
  3427   000740  EFA4  F003         	goto	u4000
  3428   000744                     u4001:
  3429   000744  EF9C  F001         	goto	l4356
  3430   000748                     u4000:
  3431   000748  2E2C               	decfsz	motor_RFID@i^0,f,c
  3432   00074A  EF78  F005         	goto	l493
  3433   00074E  EF9C  F001         	goto	l4356
  3434   000752                     l4526:
  3435                           
  3436                           ;TAD_RFID.c: 515:                     flag = motor_Read(0x0D);
  3437   000752  0E0D               	movlw	13
  3438   000754  EC79  F007         	call	_motor_Read
  3439   000758  6E6D               	movwf	motor_RFID@flag^0,c
  3440   00075A                     
  3441                           ;TAD_RFID.c: 516:                     if (flag == 0xFF) {
  3442   00075A  286D               	incf	motor_RFID@flag^0,w,c
  3443   00075C  A4D8               	btfss	status,2,c
  3444   00075E  EFB3  F003         	goto	u4011
  3445   000762  EFB5  F003         	goto	u4010
  3446   000766                     u4011:
  3447   000766  EFB7  F003         	goto	l4532
  3448   00076A                     u4010:
  3449   00076A  EFA0  F001         	goto	l386
  3450   00076E                     l4532:
  3451   00076E  0EFE               	movlw	254
  3452   000770  186D               	xorwf	motor_RFID@flag^0,w,c
  3453   000772  B4D8               	btfsc	status,2,c
  3454   000774  EFBE  F003         	goto	u4021
  3455   000778  EFC0  F003         	goto	u4020
  3456   00077C                     u4021:
  3457   00077C  EF78  F005         	goto	l493
  3458   000780                     u4020:
  3459   000780                     
  3460                           ;TAD_RFID.c: 519:                         tempRegValue = flag;
  3461   000780  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3462   000784  EFBD  F001         	goto	l4368
  3463   000788                     l4538:
  3464                           
  3465                           ;TAD_RFID.c: 524:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  3466   000788  5027               	movf	motor_RFID@tempRegValue^0,w,c
  3467   00078A  0B7F               	andlw	127
  3468   00078C  6E4F               	movwf	motor_Write@value^0,c
  3469   00078E  0E0D               	movlw	13
  3470   000790  EC12  F009         	call	_motor_Write
  3471   000794  6E6D               	movwf	motor_RFID@flag^0,c
  3472   000796                     
  3473                           ;TAD_RFID.c: 525:                     if (flag != 0) substate = 17;
  3474   000796  506D               	movf	motor_RFID@flag^0,w,c
  3475   000798  B4D8               	btfsc	status,2,c
  3476   00079A  EFD1  F003         	goto	u4031
  3477   00079E  EFD3  F003         	goto	u4030
  3478   0007A2                     u4031:
  3479   0007A2  EF78  F005         	goto	l493
  3480   0007A6                     u4030:
  3481   0007A6  EFDB  F001         	goto	l4380
  3482   0007AA                     l4544:
  3483                           
  3484                           ;TAD_RFID.c: 528:                     flag = motor_Read(0x06);
  3485   0007AA  0E06               	movlw	6
  3486   0007AC  EC79  F007         	call	_motor_Read
  3487   0007B0  6E6D               	movwf	motor_RFID@flag^0,c
  3488   0007B2                     
  3489                           ;TAD_RFID.c: 529:                     if (flag == 0xFF) {
  3490   0007B2  286D               	incf	motor_RFID@flag^0,w,c
  3491   0007B4  A4D8               	btfss	status,2,c
  3492   0007B6  EFDF  F003         	goto	u4041
  3493   0007BA  EFE1  F003         	goto	u4040
  3494   0007BE                     u4041:
  3495   0007BE  EFE3  F003         	goto	l4550
  3496   0007C2                     u4040:
  3497   0007C2  EFA0  F001         	goto	l386
  3498   0007C6                     l4550:
  3499   0007C6  0EFE               	movlw	254
  3500   0007C8  186D               	xorwf	motor_RFID@flag^0,w,c
  3501   0007CA  B4D8               	btfsc	status,2,c
  3502   0007CC  EFEA  F003         	goto	u4051
  3503   0007D0  EFEC  F003         	goto	u4050
  3504   0007D4                     u4051:
  3505   0007D4  EF78  F005         	goto	l493
  3506   0007D8                     u4050:
  3507   0007D8                     
  3508                           ;TAD_RFID.c: 532:                         tempRegValue = flag;
  3509   0007D8  C06D  F027         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3510   0007DC                     
  3511                           ;TAD_RFID.c: 533:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  3512   0007DC  502C               	movf	motor_RFID@i^0,w,c
  3513   0007DE  B4D8               	btfsc	status,2,c
  3514   0007E0  EFF4  F003         	goto	u4061
  3515   0007E4  EFF6  F003         	goto	u4060
  3516   0007E8                     u4061:
  3517   0007E8  EFA0  F001         	goto	l386
  3518   0007EC                     u4060:
  3519   0007EC  C027  F062         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3520   0007F0  0E1B               	movlw	27
  3521   0007F2  1662               	andwf	??_motor_RFID^0,f,c
  3522   0007F4  A4D8               	btfss	status,2,c
  3523   0007F6  EFFF  F003         	goto	u4071
  3524   0007FA  EF01  F004         	goto	u4070
  3525   0007FE                     u4071:
  3526   0007FE  EFA0  F001         	goto	l386
  3527   000802                     u4070:
  3528   000802                     
  3529                           ;TAD_RFID.c: 534:                             substate = 18;
  3530   000802  0E12               	movlw	18
  3531   000804  6E30               	movwf	motor_RFID@substate^0,c
  3532                           
  3533                           ;TAD_RFID.c: 535:                         } else {
  3534   000806  EF78  F005         	goto	l493
  3535   00080A                     l4560:
  3536                           
  3537                           ;TAD_RFID.c: 542:                     flag = motor_Read(0x09);
  3538   00080A  0E09               	movlw	9
  3539   00080C  EC79  F007         	call	_motor_Read
  3540   000810  6E6D               	movwf	motor_RFID@flag^0,c
  3541   000812                     
  3542                           ;TAD_RFID.c: 543:                     if (flag == 0xFF) {
  3543   000812  286D               	incf	motor_RFID@flag^0,w,c
  3544   000814  A4D8               	btfss	status,2,c
  3545   000816  EF0F  F004         	goto	u4081
  3546   00081A  EF11  F004         	goto	u4080
  3547   00081E                     u4081:
  3548   00081E  EF13  F004         	goto	l4566
  3549   000822                     u4080:
  3550   000822  EFA0  F001         	goto	l386
  3551   000826                     l4566:
  3552   000826  0EFE               	movlw	254
  3553   000828  186D               	xorwf	motor_RFID@flag^0,w,c
  3554   00082A  B4D8               	btfsc	status,2,c
  3555   00082C  EF1A  F004         	goto	u4091
  3556   000830  EF1C  F004         	goto	u4090
  3557   000834                     u4091:
  3558   000834  EF78  F005         	goto	l493
  3559   000838                     u4090:
  3560   000838                     
  3561                           ;TAD_RFID.c: 546:                         UID[0] = flag;
  3562   000838  C06D  F001         	movff	motor_RFID@flag,motor_RFID@UID
  3563   00083C                     
  3564                           ;TAD_RFID.c: 547:                         substate = 19;
  3565   00083C  0E13               	movlw	19
  3566   00083E  6E30               	movwf	motor_RFID@substate^0,c
  3567   000840  EF78  F005         	goto	l493
  3568   000844                     l4572:
  3569                           
  3570                           ;TAD_RFID.c: 551:                     flag = motor_Read(0x09);
  3571   000844  0E09               	movlw	9
  3572   000846  EC79  F007         	call	_motor_Read
  3573   00084A  6E6D               	movwf	motor_RFID@flag^0,c
  3574   00084C                     
  3575                           ;TAD_RFID.c: 552:                     if (flag == 0xFF) {
  3576   00084C  286D               	incf	motor_RFID@flag^0,w,c
  3577   00084E  A4D8               	btfss	status,2,c
  3578   000850  EF2C  F004         	goto	u4101
  3579   000854  EF2E  F004         	goto	u4100
  3580   000858                     u4101:
  3581   000858  EF30  F004         	goto	l4578
  3582   00085C                     u4100:
  3583   00085C  EFA0  F001         	goto	l386
  3584   000860                     l4578:
  3585   000860  0EFE               	movlw	254
  3586   000862  186D               	xorwf	motor_RFID@flag^0,w,c
  3587   000864  B4D8               	btfsc	status,2,c
  3588   000866  EF37  F004         	goto	u4111
  3589   00086A  EF39  F004         	goto	u4110
  3590   00086E                     u4111:
  3591   00086E  EF78  F005         	goto	l493
  3592   000872                     u4110:
  3593   000872                     
  3594                           ;TAD_RFID.c: 555:                         UID[1] = flag;
  3595   000872  C06D  F002         	movff	motor_RFID@flag,motor_RFID@UID+1
  3596   000876                     
  3597                           ;TAD_RFID.c: 556:                         substate = 20;
  3598   000876  0E14               	movlw	20
  3599   000878  6E30               	movwf	motor_RFID@substate^0,c
  3600   00087A  EF78  F005         	goto	l493
  3601   00087E                     l4584:
  3602                           
  3603                           ;TAD_RFID.c: 560:                     flag = motor_Read(0x09);
  3604   00087E  0E09               	movlw	9
  3605   000880  EC79  F007         	call	_motor_Read
  3606   000884  6E6D               	movwf	motor_RFID@flag^0,c
  3607   000886                     
  3608                           ;TAD_RFID.c: 561:                     if (flag == 0xFF) {
  3609   000886  286D               	incf	motor_RFID@flag^0,w,c
  3610   000888  A4D8               	btfss	status,2,c
  3611   00088A  EF49  F004         	goto	u4121
  3612   00088E  EF4B  F004         	goto	u4120
  3613   000892                     u4121:
  3614   000892  EF4D  F004         	goto	l4590
  3615   000896                     u4120:
  3616   000896  EFA0  F001         	goto	l386
  3617   00089A                     l4590:
  3618   00089A  0EFE               	movlw	254
  3619   00089C  186D               	xorwf	motor_RFID@flag^0,w,c
  3620   00089E  B4D8               	btfsc	status,2,c
  3621   0008A0  EF54  F004         	goto	u4131
  3622   0008A4  EF56  F004         	goto	u4130
  3623   0008A8                     u4131:
  3624   0008A8  EF78  F005         	goto	l493
  3625   0008AC                     u4130:
  3626   0008AC                     
  3627                           ;TAD_RFID.c: 564:                         UID[2] = flag;
  3628   0008AC  C06D  F003         	movff	motor_RFID@flag,motor_RFID@UID+2
  3629   0008B0                     
  3630                           ;TAD_RFID.c: 565:                         substate = 21;
  3631   0008B0  0E15               	movlw	21
  3632   0008B2  6E30               	movwf	motor_RFID@substate^0,c
  3633   0008B4  EF78  F005         	goto	l493
  3634   0008B8                     l4596:
  3635                           
  3636                           ;TAD_RFID.c: 569:                     flag = motor_Read(0x09);
  3637   0008B8  0E09               	movlw	9
  3638   0008BA  EC79  F007         	call	_motor_Read
  3639   0008BE  6E6D               	movwf	motor_RFID@flag^0,c
  3640   0008C0                     
  3641                           ;TAD_RFID.c: 570:                     if (flag == 0xFF) {
  3642   0008C0  286D               	incf	motor_RFID@flag^0,w,c
  3643   0008C2  A4D8               	btfss	status,2,c
  3644   0008C4  EF66  F004         	goto	u4141
  3645   0008C8  EF68  F004         	goto	u4140
  3646   0008CC                     u4141:
  3647   0008CC  EF6A  F004         	goto	l4602
  3648   0008D0                     u4140:
  3649   0008D0  EFA0  F001         	goto	l386
  3650   0008D4                     l4602:
  3651   0008D4  0EFE               	movlw	254
  3652   0008D6  186D               	xorwf	motor_RFID@flag^0,w,c
  3653   0008D8  B4D8               	btfsc	status,2,c
  3654   0008DA  EF71  F004         	goto	u4151
  3655   0008DE  EF73  F004         	goto	u4150
  3656   0008E2                     u4151:
  3657   0008E2  EF78  F005         	goto	l493
  3658   0008E6                     u4150:
  3659   0008E6                     
  3660                           ;TAD_RFID.c: 573:                         UID[3] = flag;
  3661   0008E6  C06D  F004         	movff	motor_RFID@flag,motor_RFID@UID+3
  3662   0008EA                     
  3663                           ;TAD_RFID.c: 574:                         substate = 22;
  3664   0008EA  0E16               	movlw	22
  3665   0008EC  6E30               	movwf	motor_RFID@substate^0,c
  3666   0008EE  EF78  F005         	goto	l493
  3667   0008F2                     l4608:
  3668                           
  3669                           ;TAD_RFID.c: 579:                     flag = motor_Read(0x09);
  3670   0008F2  0E09               	movlw	9
  3671   0008F4  EC79  F007         	call	_motor_Read
  3672   0008F8  6E6D               	movwf	motor_RFID@flag^0,c
  3673   0008FA                     
  3674                           ;TAD_RFID.c: 580:                     if (flag == 0xFF) {
  3675   0008FA  286D               	incf	motor_RFID@flag^0,w,c
  3676   0008FC  A4D8               	btfss	status,2,c
  3677   0008FE  EF83  F004         	goto	u4161
  3678   000902  EF85  F004         	goto	u4160
  3679   000906                     u4161:
  3680   000906  EF87  F004         	goto	l4614
  3681   00090A                     u4160:
  3682   00090A  EFA0  F001         	goto	l386
  3683   00090E                     l4614:
  3684   00090E  0EFE               	movlw	254
  3685   000910  186D               	xorwf	motor_RFID@flag^0,w,c
  3686   000912  B4D8               	btfsc	status,2,c
  3687   000914  EF8E  F004         	goto	u4171
  3688   000918  EF90  F004         	goto	u4170
  3689   00091C                     u4171:
  3690   00091C  EF78  F005         	goto	l493
  3691   000920                     u4170:
  3692   000920                     
  3693                           ;TAD_RFID.c: 583:                         UID[4] = flag;
  3694   000920  C06D  F005         	movff	motor_RFID@flag,motor_RFID@UID+4
  3695                           
  3696                           ;TAD_RFID.c: 584:                         UID[5] = 0;
  3697   000924  6A06               	clrf	(motor_RFID@UID+5)^0,c
  3698   000926                     
  3699                           ;TAD_RFID.c: 585:                         substate = 23;
  3700   000926  0E17               	movlw	23
  3701   000928  6E30               	movwf	motor_RFID@substate^0,c
  3702   00092A  EF78  F005         	goto	l493
  3703   00092E                     l4620:
  3704                           
  3705                           ;TAD_RFID.c: 590:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  3706   00092E  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3707   000930  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  3708   000932  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  3709   000934  1801               	xorwf	motor_RFID@UID^0,w,c
  3710   000936  6E29               	movwf	motor_RFID@checksum^0,c
  3711   000938                     
  3712                           ;TAD_RFID.c: 591:                     allZero = 1;
  3713   000938  0E01               	movlw	1
  3714   00093A  6E28               	movwf	motor_RFID@allZero^0,c
  3715   00093C                     
  3716                           ;TAD_RFID.c: 592:                     substate = 24;
  3717   00093C  0E18               	movlw	24
  3718   00093E  6E30               	movwf	motor_RFID@substate^0,c
  3719                           
  3720                           ;TAD_RFID.c: 593:                     break;
  3721   000940  EF78  F005         	goto	l493
  3722   000944                     l4626:
  3723                           
  3724                           ;TAD_RFID.c: 597:                     allZero = ((UID[0] | UID[1] | UID[2] | UID[3]) == 
      +                          0);
  3725   000944  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3726   000946  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  3727   000948  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  3728   00094A  1001               	iorwf	motor_RFID@UID^0,w,c
  3729   00094C  0900               	iorlw	0
  3730   00094E  B4D8               	btfsc	status,2,c
  3731   000950  EFAC  F004         	goto	u4181
  3732   000954  EFAF  F004         	goto	u4180
  3733   000958                     u4181:
  3734   000958  0E01               	movlw	1
  3735   00095A  EFB0  F004         	goto	u4190
  3736   00095E                     u4180:
  3737   00095E  0E00               	movlw	0
  3738   000960                     u4190:
  3739   000960  6E28               	movwf	motor_RFID@allZero^0,c
  3740   000962                     
  3741                           ;TAD_RFID.c: 598:                     substate = 26;
  3742   000962  0E1A               	movlw	26
  3743   000964  6E30               	movwf	motor_RFID@substate^0,c
  3744                           
  3745                           ;TAD_RFID.c: 599:                     break;
  3746   000966  EF78  F005         	goto	l493
  3747   00096A                     l4630:
  3748                           
  3749                           ;TAD_RFID.c: 602:                     if (checksum != UID[4] || allZero) {
  3750   00096A  5029               	movf	motor_RFID@checksum^0,w,c
  3751   00096C  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  3752   00096E  A4D8               	btfss	status,2,c
  3753   000970  EFBC  F004         	goto	u4201
  3754   000974  EFBE  F004         	goto	u4200
  3755   000978                     u4201:
  3756   000978  EFA0  F001         	goto	l386
  3757   00097C                     u4200:
  3758   00097C  5028               	movf	motor_RFID@allZero^0,w,c
  3759   00097E  B4D8               	btfsc	status,2,c
  3760   000980  EFC4  F004         	goto	u4211
  3761   000984  EFC6  F004         	goto	u4210
  3762   000988                     u4211:
  3763   000988  EFC8  F004         	goto	l4634
  3764   00098C                     u4210:
  3765   00098C  EFA0  F001         	goto	l386
  3766   000990                     l4634:
  3767                           
  3768                           ;TAD_RFID.c: 605:                         substate = 27;
  3769   000990  0E1B               	movlw	27
  3770   000992  6E30               	movwf	motor_RFID@substate^0,c
  3771   000994  EF78  F005         	goto	l493
  3772   000998                     l4636:
  3773                           
  3774                           ;TAD_RFID.c: 610:                     {;TAD_RFID.c: 611:                         char di
      +                          fferentUID = 1;
  3775   000998  0E01               	movlw	1
  3776   00099A  6E64               	movwf	motor_RFID@differentUID^0,c
  3777   00099C                     
  3778                           ;TAD_RFID.c: 612:                         unsigned char currentUser[5];;TAD_RFID.c: 613:
      +                                                   getActualUID(currentUser);
  3779   00099C  0E65               	movlw	low motor_RFID@currentUser
  3780   00099E  6E4D               	movwf	getActualUID@UID^0,c
  3781   0009A0  ECD6  F00A         	call	_getActualUID	;wreg free
  3782   0009A4                     
  3783                           ;TAD_RFID.c: 615:                         if(currentUser[0] != UID[0]) {
  3784   0009A4  5001               	movf	motor_RFID@UID^0,w,c
  3785   0009A6  1865               	xorwf	motor_RFID@currentUser^0,w,c
  3786   0009A8  B4D8               	btfsc	status,2,c
  3787   0009AA  EFD9  F004         	goto	u4221
  3788   0009AE  EFDB  F004         	goto	u4220
  3789   0009B2                     u4221:
  3790   0009B2  EFE6  F004         	goto	l4644
  3791   0009B6                     u4220:
  3792   0009B6                     
  3793                           ;TAD_RFID.c: 616:                             setCurrentUser(UID[0], UID[1], UID[2], UID
      +                          [3], UID[4]);
  3794   0009B6  C002  F05D         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3795   0009BA  C003  F05E         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3796   0009BE  C004  F05F         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3797   0009C2  C005  F060         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3798   0009C6  5001               	movf	motor_RFID@UID^0,w,c
  3799   0009C8  ECFE  F00C         	call	_setCurrentUser
  3800   0009CC                     l4644:
  3801                           
  3802                           ;TAD_RFID.c: 618:                         substate = 28;
  3803   0009CC  0E1C               	movlw	28
  3804   0009CE  6E30               	movwf	motor_RFID@substate^0,c
  3805                           
  3806                           ;TAD_RFID.c: 619:                     };TAD_RFID.c: 620:                     break;
  3807   0009D0  EF78  F005         	goto	l493
  3808   0009D4                     l4646:
  3809                           
  3810                           ;TAD_RFID.c: 623:                     flag = motor_Write(0x0D, 0x00);
  3811   0009D4  0E00               	movlw	0
  3812   0009D6  6E4F               	movwf	motor_Write@value^0,c
  3813   0009D8  0E0D               	movlw	13
  3814   0009DA  EC12  F009         	call	_motor_Write
  3815   0009DE  6E6D               	movwf	motor_RFID@flag^0,c
  3816   0009E0                     
  3817                           ;TAD_RFID.c: 624:                     if (flag != 0) {
  3818   0009E0  506D               	movf	motor_RFID@flag^0,w,c
  3819   0009E2  B4D8               	btfsc	status,2,c
  3820   0009E4  EFF6  F004         	goto	u4231
  3821   0009E8  EFF8  F004         	goto	u4230
  3822   0009EC                     u4231:
  3823   0009EC  EF78  F005         	goto	l493
  3824   0009F0                     u4230:
  3825   0009F0  EFA0  F001         	goto	l386
  3826   0009F4                     l4654:
  3827   0009F4  5030               	movf	motor_RFID@substate^0,w,c
  3828                           
  3829                           ; Switch size 1, requested type "simple"
  3830                           ; Number of cases is 28, Range of values is 0 to 28
  3831                           ; switch strategies available:
  3832                           ; Name         Instructions Cycles
  3833                           ; simple_byte           85    43 (average)
  3834                           ;	Chosen strategy is simple_byte
  3835   0009F6  0A00               	xorlw	0	; case 0
  3836   0009F8  B4D8               	btfsc	status,2,c
  3837   0009FA  EF61  F002         	goto	l4398
  3838   0009FE  0A01               	xorlw	1	; case 1
  3839   000A00  B4D8               	btfsc	status,2,c
  3840   000A02  EF77  F002         	goto	l4404
  3841   000A06  0A03               	xorlw	3	; case 2
  3842   000A08  B4D8               	btfsc	status,2,c
  3843   000A0A  EF92  F002         	goto	l4416
  3844   000A0E  0A01               	xorlw	1	; case 3
  3845   000A10  B4D8               	btfsc	status,2,c
  3846   000A12  EFA3  F002         	goto	l4422
  3847   000A16  0A07               	xorlw	7	; case 4
  3848   000A18  B4D8               	btfsc	status,2,c
  3849   000A1A  EFB7  F002         	goto	l4430
  3850   000A1E  0A01               	xorlw	1	; case 5
  3851   000A20  B4D8               	btfsc	status,2,c
  3852   000A22  EFD0  F002         	goto	l4442
  3853   000A26  0A03               	xorlw	3	; case 6
  3854   000A28  B4D8               	btfsc	status,2,c
  3855   000A2A  EFE1  F002         	goto	l4448
  3856   000A2E  0A01               	xorlw	1	; case 7
  3857   000A30  B4D8               	btfsc	status,2,c
  3858   000A32  EFFC  F002         	goto	l4460
  3859   000A36  0A0F               	xorlw	15	; case 8
  3860   000A38  B4D8               	btfsc	status,2,c
  3861   000A3A  EF0D  F003         	goto	l4466
  3862   000A3E  0A01               	xorlw	1	; case 9
  3863   000A40  B4D8               	btfsc	status,2,c
  3864   000A42  EF1D  F003         	goto	l4472
  3865   000A46  0A03               	xorlw	3	; case 10
  3866   000A48  B4D8               	btfsc	status,2,c
  3867   000A4A  EF2D  F003         	goto	l4478
  3868   000A4E  0A01               	xorlw	1	; case 11
  3869   000A50  B4D8               	btfsc	status,2,c
  3870   000A52  EF3D  F003         	goto	l4484
  3871   000A56  0A07               	xorlw	7	; case 12
  3872   000A58  B4D8               	btfsc	status,2,c
  3873   000A5A  EF4D  F003         	goto	l4490
  3874   000A5E  0A01               	xorlw	1	; case 13
  3875   000A60  B4D8               	btfsc	status,2,c
  3876   000A62  EF68  F003         	goto	l4502
  3877   000A66  0A03               	xorlw	3	; case 14
  3878   000A68  B4D8               	btfsc	status,2,c
  3879   000A6A  EF7A  F003         	goto	l4510
  3880   000A6E  0A01               	xorlw	1	; case 15
  3881   000A70  B4D8               	btfsc	status,2,c
  3882   000A72  EFA9  F003         	goto	l4526
  3883   000A76  0A1F               	xorlw	31	; case 16
  3884   000A78  B4D8               	btfsc	status,2,c
  3885   000A7A  EFC4  F003         	goto	l4538
  3886   000A7E  0A01               	xorlw	1	; case 17
  3887   000A80  B4D8               	btfsc	status,2,c
  3888   000A82  EFD5  F003         	goto	l4544
  3889   000A86  0A03               	xorlw	3	; case 18
  3890   000A88  B4D8               	btfsc	status,2,c
  3891   000A8A  EF05  F004         	goto	l4560
  3892   000A8E  0A01               	xorlw	1	; case 19
  3893   000A90  B4D8               	btfsc	status,2,c
  3894   000A92  EF22  F004         	goto	l4572
  3895   000A96  0A07               	xorlw	7	; case 20
  3896   000A98  B4D8               	btfsc	status,2,c
  3897   000A9A  EF3F  F004         	goto	l4584
  3898   000A9E  0A01               	xorlw	1	; case 21
  3899   000AA0  B4D8               	btfsc	status,2,c
  3900   000AA2  EF5C  F004         	goto	l4596
  3901   000AA6  0A03               	xorlw	3	; case 22
  3902   000AA8  B4D8               	btfsc	status,2,c
  3903   000AAA  EF79  F004         	goto	l4608
  3904   000AAE  0A01               	xorlw	1	; case 23
  3905   000AB0  B4D8               	btfsc	status,2,c
  3906   000AB2  EF97  F004         	goto	l4620
  3907   000AB6  0A0F               	xorlw	15	; case 24
  3908   000AB8  B4D8               	btfsc	status,2,c
  3909   000ABA  EFA2  F004         	goto	l4626
  3910   000ABE  0A02               	xorlw	2	; case 26
  3911   000AC0  B4D8               	btfsc	status,2,c
  3912   000AC2  EFB5  F004         	goto	l4630
  3913   000AC6  0A01               	xorlw	1	; case 27
  3914   000AC8  B4D8               	btfsc	status,2,c
  3915   000ACA  EFCC  F004         	goto	l4636
  3916   000ACE  0A07               	xorlw	7	; case 28
  3917   000AD0  B4D8               	btfsc	status,2,c
  3918   000AD2  EFEA  F004         	goto	l4646
  3919   000AD6  EF78  F005         	goto	l493
  3920   000ADA                     l4658:
  3921   000ADA  5031               	movf	motor_RFID@state^0,w,c
  3922                           
  3923                           ; Switch size 1, requested type "simple"
  3924                           ; Number of cases is 2, Range of values is 0 to 1
  3925                           ; switch strategies available:
  3926                           ; Name         Instructions Cycles
  3927                           ; simple_byte            7     4 (average)
  3928                           ;	Chosen strategy is simple_byte
  3929   000ADC  0A00               	xorlw	0	; case 0
  3930   000ADE  B4D8               	btfsc	status,2,c
  3931   000AE0  EF14  F002         	goto	l4396
  3932   000AE4  0A01               	xorlw	1	; case 1
  3933   000AE6  B4D8               	btfsc	status,2,c
  3934   000AE8  EFFA  F004         	goto	l4654
  3935   000AEC  EF78  F005         	goto	l493
  3936   000AF0                     l493:
  3937   000AF0  0012               	return		;funcret
  3938   000AF2                     __end_of_motor_RFID:
  3939                           	callstack 0
  3940                           
  3941 ;; *************** function _setCurrentUser *****************
  3942 ;; Defined at:
  3943 ;;		line 81 in file "TAD_DATOS.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  UID0            1    wreg     unsigned char 
  3946 ;;  UID1            1   17[COMRAM] unsigned char 
  3947 ;;  UID2            1   18[COMRAM] unsigned char 
  3948 ;;  UID3            1   19[COMRAM] unsigned char 
  3949 ;;  UID4            1   20[COMRAM] unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  UID0            1   21[COMRAM] unsigned char 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      void 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1
  3961 ;;      Params:         4       0       0
  3962 ;;      Locals:         1       0       0
  3963 ;;      Temps:          0       0       0
  3964 ;;      Totals:         5       0       0
  3965 ;;Total ram usage:        5 bytes
  3966 ;; Hardware stack levels used: 1
  3967 ;; Hardware stack levels required when called: 7
  3968 ;; This function calls:
  3969 ;;		_Terminal_SendString
  3970 ;;		_printLedConfig
  3971 ;;		_printfUID
  3972 ;; This function is called by:
  3973 ;;		_motor_RFID
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text2
  3978   0019FC                     __ptext2:
  3979                           	callstack 0
  3980   0019FC                     _setCurrentUser:
  3981                           	callstack 22
  3982                           
  3983                           ;incstack = 0
  3984                           ;setCurrentUser@UID0 stored from wreg
  3985   0019FC  6E61               	movwf	setCurrentUser@UID0^0,c
  3986   0019FE                     
  3987                           ;TAD_DATOS.c: 82:  currentUser[0] = UID0;
  3988   0019FE  C061  F044         	movff	setCurrentUser@UID0,_currentUser
  3989   001A02                     
  3990                           ;TAD_DATOS.c: 83:  currentUser[1] = UID1;
  3991   001A02  C05D  F045         	movff	setCurrentUser@UID1,_currentUser+1
  3992   001A06                     
  3993                           ;TAD_DATOS.c: 84:  currentUser[2] = UID2;
  3994   001A06  C05E  F046         	movff	setCurrentUser@UID2,_currentUser+2
  3995   001A0A                     
  3996                           ;TAD_DATOS.c: 85:  currentUser[3] = UID3;
  3997   001A0A  C05F  F047         	movff	setCurrentUser@UID3,_currentUser+3
  3998   001A0E                     
  3999                           ;TAD_DATOS.c: 86:  currentUser[4] = UID4;
  4000   001A0E  C060  F048         	movff	setCurrentUser@UID4,_currentUser+4
  4001   001A12                     
  4002                           ;TAD_DATOS.c: 87:  new_user = 1;
  4003   001A12  0E01               	movlw	1
  4004   001A14  6E1A               	movwf	_new_user^0,c
  4005   001A16                     
  4006                           ;TAD_DATOS.c: 88:  Terminal_SendString("Targeta detectada!\r\n\t");
  4007   001A16  0E8C               	movlw	low STR_37
  4008   001A18  6E51               	movwf	Terminal_SendString@str^0,c
  4009   001A1A  0E1F               	movlw	high STR_37
  4010   001A1C  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  4011   001A1E  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  4012   001A22                     
  4013                           ;TAD_DATOS.c: 89:  printfUID(currentUser);
  4014   001A22  0E44               	movlw	low _currentUser
  4015   001A24  6E53               	movwf	printfUID@currentUser^0,c
  4016   001A26  EC9A  F008         	call	_printfUID	;wreg free
  4017   001A2A                     
  4018                           ;TAD_DATOS.c: 90:  Terminal_SendString("\t");
  4019   001A2A  0EA0               	movlw	low (STR_37+20)
  4020   001A2C  6E51               	movwf	Terminal_SendString@str^0,c
  4021   001A2E  0E1F               	movlw	high (STR_37+20)
  4022   001A30  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  4023   001A32  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  4024   001A36                     
  4025                           ;TAD_DATOS.c: 91:  printLedConfig(configurations[index]);
  4026   001A36  500D               	movf	_index^0,w,c
  4027   001A38  0D06               	mullw	6
  4028   001A3A  50F3               	movf	243,w,c
  4029   001A3C  0FC0               	addlw	low _configurations
  4030   001A3E  6E53               	movwf	printLedConfig@leds^0,c
  4031   001A40  EC86  F009         	call	_printLedConfig	;wreg free
  4032   001A44  0012               	return		;funcret
  4033   001A46                     __end_of_setCurrentUser:
  4034                           	callstack 0
  4035                           
  4036 ;; *************** function _printLedConfig *****************
  4037 ;; Defined at:
  4038 ;;		line 121 in file "TAD_TERMINAL.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  leds            1    7[COMRAM] PTR unsigned char 
  4041 ;;		 -> configurations(24), 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  val             1   10[COMRAM] unsigned char 
  4044 ;;  i               2   11[COMRAM] int 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1
  4054 ;;      Params:         1       0       0
  4055 ;;      Locals:         5       0       0
  4056 ;;      Temps:          0       0       0
  4057 ;;      Totals:         6       0       0
  4058 ;;Total ram usage:        6 bytes
  4059 ;; Hardware stack levels used: 1
  4060 ;; Hardware stack levels required when called: 6
  4061 ;; This function calls:
  4062 ;;		_Terminal_SendChar
  4063 ;;		_Terminal_SendString
  4064 ;; This function is called by:
  4065 ;;		_setCurrentUser
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text3
  4070   00130C                     __ptext3:
  4071                           	callstack 0
  4072   00130C                     _printLedConfig:
  4073                           	callstack 22
  4074   00130C                     
  4075                           ;TAD_TERMINAL.c: 122:  for (int i = 0; i < 6; i++) {
  4076   00130C  0E00               	movlw	0
  4077   00130E  6E58               	movwf	(printLedConfig@i+1)^0,c
  4078   001310  0E00               	movlw	0
  4079   001312  6E57               	movwf	printLedConfig@i^0,c
  4080   001314                     l3618:
  4081                           
  4082                           ;TAD_TERMINAL.c: 124:   Terminal_SendChar('L');
  4083   001314  0E4C               	movlw	76
  4084   001316  EC64  F00E         	call	_Terminal_SendChar
  4085                           
  4086                           ;TAD_TERMINAL.c: 125:   Terminal_SendChar('0' + i);
  4087   00131A  5057               	movf	printLedConfig@i^0,w,c
  4088   00131C  0F30               	addlw	48
  4089   00131E  EC64  F00E         	call	_Terminal_SendChar
  4090   001322                     
  4091                           ;TAD_TERMINAL.c: 126:   Terminal_SendString(": ");
  4092   001322  0EE9               	movlw	low (STR_8+6)
  4093   001324  6E51               	movwf	Terminal_SendString@str^0,c
  4094   001326  0E1F               	movlw	high (STR_8+6)
  4095   001328  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  4096   00132A  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  4097   00132E                     
  4098                           ;TAD_TERMINAL.c: 129:   unsigned char val = leds[i];
  4099   00132E  5053               	movf	printLedConfig@leds^0,w,c
  4100   001330  2457               	addwf	printLedConfig@i^0,w,c
  4101   001332  6ED9               	movwf	fsr2l,c
  4102   001334  6ADA               	clrf	fsr2h,c
  4103   001336  50DF               	movf	indf2,w,c
  4104   001338  6E56               	movwf	printLedConfig@val^0,c
  4105   00133A                     
  4106                           ;TAD_TERMINAL.c: 130:   Terminal_SendChar(val < 10 ? '0' + val : 'A' + val - 10);
  4107   00133A  0E09               	movlw	9
  4108   00133C  6456               	cpfsgt	printLedConfig@val^0,c
  4109   00133E  EFA3  F009         	goto	u2911
  4110   001342  EFA5  F009         	goto	u2910
  4111   001346                     u2911:
  4112   001346  EFAD  F009         	goto	l3628
  4113   00134A                     u2910:
  4114   00134A  0E37               	movlw	55
  4115   00134C  2456               	addwf	printLedConfig@val^0,w,c
  4116   00134E  6E54               	movwf	_printLedConfig$885^0,c
  4117   001350  6A55               	clrf	(_printLedConfig$885+1)^0,c
  4118   001352  0E00               	movlw	0
  4119   001354  2255               	addwfc	(_printLedConfig$885+1)^0,f,c
  4120   001356  EFB3  F009         	goto	l3630
  4121   00135A                     l3628:
  4122   00135A  0E30               	movlw	48
  4123   00135C  2456               	addwf	printLedConfig@val^0,w,c
  4124   00135E  6E54               	movwf	_printLedConfig$885^0,c
  4125   001360  6A55               	clrf	(_printLedConfig$885+1)^0,c
  4126   001362  0E00               	movlw	0
  4127   001364  2255               	addwfc	(_printLedConfig$885+1)^0,f,c
  4128   001366                     l3630:
  4129   001366  5054               	movf	_printLedConfig$885^0,w,c
  4130   001368  EC64  F00E         	call	_Terminal_SendChar
  4131   00136C                     
  4132                           ;TAD_TERMINAL.c: 133:   if (i < 6 - 1) Terminal_SendString(" - ");
  4133   00136C  BE58               	btfsc	(printLedConfig@i+1)^0,7,c
  4134   00136E  EFC4  F009         	goto	u2920
  4135   001372  5058               	movf	(printLedConfig@i+1)^0,w,c
  4136   001374  E107               	bnz	u2921
  4137   001376  0E05               	movlw	5
  4138   001378  5C57               	subwf	printLedConfig@i^0,w,c
  4139   00137A  B0D8               	btfsc	status,0,c
  4140   00137C  EFC2  F009         	goto	u2921
  4141   001380  EFC4  F009         	goto	u2920
  4142   001384                     u2921:
  4143   001384  EFCA  F009         	goto	l3636
  4144   001388                     u2920:
  4145   001388  0EF8               	movlw	low STR_13
  4146   00138A  6E51               	movwf	Terminal_SendString@str^0,c
  4147   00138C  0E1F               	movlw	high STR_13
  4148   00138E  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  4149   001390  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  4150   001394                     l3636:
  4151                           
  4152                           ;TAD_TERMINAL.c: 134:  }
  4153   001394  4A57               	infsnz	printLedConfig@i^0,f,c
  4154   001396  2A58               	incf	(printLedConfig@i+1)^0,f,c
  4155   001398  BE58               	btfsc	(printLedConfig@i+1)^0,7,c
  4156   00139A  EFD8  F009         	goto	u2931
  4157   00139E  5058               	movf	(printLedConfig@i+1)^0,w,c
  4158   0013A0  E109               	bnz	u2930
  4159   0013A2  0E06               	movlw	6
  4160   0013A4  5C57               	subwf	printLedConfig@i^0,w,c
  4161   0013A6  A0D8               	btfss	status,0,c
  4162   0013A8  EFD8  F009         	goto	u2931
  4163   0013AC  EFDA  F009         	goto	u2930
  4164   0013B0                     u2931:
  4165   0013B0  EF8A  F009         	goto	l3618
  4166   0013B4                     u2930:
  4167   0013B4                     
  4168                           ;TAD_TERMINAL.c: 135:  Terminal_SendString("\r\n");
  4169   0013B4  0EC4               	movlw	low (STR_1+15)
  4170   0013B6  6E51               	movwf	Terminal_SendString@str^0,c
  4171   0013B8  0E1F               	movlw	high (STR_1+15)
  4172   0013BA  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  4173   0013BC  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  4174   0013C0  0012               	return		;funcret
  4175   0013C2                     __end_of_printLedConfig:
  4176                           	callstack 0
  4177                           
  4178 ;; *************** function _motor_Write *****************
  4179 ;; Defined at:
  4180 ;;		line 146 in file "TAD_RFID.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  addr            1    wreg     unsigned char 
  4183 ;;  value           1    3[COMRAM] unsigned char 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  addr            1    5[COMRAM] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      unsigned char 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1
  4195 ;;      Params:         1       0       0
  4196 ;;      Locals:         1       0       0
  4197 ;;      Temps:          1       0       0
  4198 ;;      Totals:         3       0       0
  4199 ;;Total ram usage:        3 bytes
  4200 ;; Hardware stack levels used: 1
  4201 ;; Hardware stack levels required when called: 4
  4202 ;; This function calls:
  4203 ;;		_delay_us
  4204 ;; This function is called by:
  4205 ;;		_motor_RFID
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text4
  4210   001224                     __ptext4:
  4211                           	callstack 0
  4212   001224                     _motor_Write:
  4213                           	callstack 25
  4214                           
  4215                           ;incstack = 0
  4216                           ;motor_Write@addr stored from wreg
  4217   001224  6E51               	movwf	motor_Write@addr^0,c
  4218   001226                     
  4219                           ;TAD_RFID.c: 147:     static char bit_count = 0;;TAD_RFID.c: 148:     static unsigned ch
      +                          ar ucAddr;;TAD_RFID.c: 149:     static unsigned char ucValue;;TAD_RFID.c: 151:     switc
      +                          h (state_write) {
  4220   001226  EF75  F009         	goto	l3702
  4221   00122A                     l268:
  4222                           
  4223                           ;TAD_RFID.c: 153:             LATCbits.LATC2 = 0;
  4224   00122A  948B               	bcf	139,2,c	;volatile
  4225                           
  4226                           ;TAD_RFID.c: 154:             LATCbits.LATC3 = 0;
  4227   00122C  968B               	bcf	139,3,c	;volatile
  4228   00122E                     
  4229                           ;TAD_RFID.c: 155:             ucAddr = ((addr << 1) & 0x7E);
  4230   00122E  5051               	movf	motor_Write@addr^0,w,c
  4231   001230  2451               	addwf	motor_Write@addr^0,w,c
  4232   001232  0B7E               	andlw	126
  4233   001234  6E36               	movwf	motor_Write@ucAddr^0,c
  4234   001236                     
  4235                           ;TAD_RFID.c: 156:             ucValue = value;
  4236   001236  C04F  F035         	movff	motor_Write@value,motor_Write@ucValue
  4237   00123A                     
  4238                           ;TAD_RFID.c: 157:             bit_count = 0;
  4239   00123A  6A37               	clrf	motor_Write@bit_count^0,c
  4240   00123C                     
  4241                           ;TAD_RFID.c: 158:             state_write = 1;
  4242   00123C  0E01               	movlw	1
  4243   00123E  6E38               	movwf	_state_write^0,c
  4244                           
  4245                           ;TAD_RFID.c: 159:             break;
  4246   001240  EF84  F009         	goto	l3704
  4247   001244                     l3670:
  4248                           
  4249                           ;TAD_RFID.c: 162:             LATCbits.LATC1 = ((ucAddr & 0x80) != 0);
  4250   001244  BE36               	btfsc	motor_Write@ucAddr^0,7,c
  4251   001246  EF27  F009         	goto	u2961
  4252   00124A  EF2B  F009         	goto	u2960
  4253   00124E                     u2961:
  4254   00124E  6A50               	clrf	??_motor_Write^0,c
  4255   001250  2A50               	incf	??_motor_Write^0,f,c
  4256   001252  EF2C  F009         	goto	u2978
  4257   001256                     u2960:
  4258   001256  6A50               	clrf	??_motor_Write^0,c
  4259   001258                     u2978:
  4260   001258  4650               	rlncf	??_motor_Write^0,f,c
  4261   00125A  508B               	movf	139,w,c	;volatile
  4262   00125C  1850               	xorwf	??_motor_Write^0,w,c
  4263   00125E  0BFD               	andlw	-3
  4264   001260  1850               	xorwf	??_motor_Write^0,w,c
  4265   001262  6E8B               	movwf	139,c	;volatile
  4266   001264                     
  4267                           ;TAD_RFID.c: 163:             LATCbits.LATC2 = 1;
  4268   001264  848B               	bsf	139,2,c	;volatile
  4269                           
  4270                           ;TAD_RFID.c: 164:             ucAddr <<= 1;
  4271   001266  90D8               	bcf	status,0,c
  4272   001268  3636               	rlcf	motor_Write@ucAddr^0,f,c
  4273   00126A                     
  4274                           ;TAD_RFID.c: 165:             delay_us(5);
  4275   00126A  0E05               	movlw	5
  4276   00126C  EC2F  F00E         	call	_delay_us
  4277   001270                     
  4278                           ;TAD_RFID.c: 166:             LATCbits.LATC2 = 0;
  4279   001270  948B               	bcf	139,2,c	;volatile
  4280   001272                     
  4281                           ;TAD_RFID.c: 167:             delay_us(5);
  4282   001272  0E05               	movlw	5
  4283   001274  EC2F  F00E         	call	_delay_us
  4284                           
  4285                           ;TAD_RFID.c: 168:             if (++bit_count == 8) {
  4286   001278  2A37               	incf	motor_Write@bit_count^0,f,c
  4287   00127A  0E08               	movlw	8
  4288   00127C  1837               	xorwf	motor_Write@bit_count^0,w,c
  4289   00127E  A4D8               	btfss	status,2,c
  4290   001280  EF44  F009         	goto	u2981
  4291   001284  EF46  F009         	goto	u2980
  4292   001288                     u2981:
  4293   001288  EF84  F009         	goto	l3704
  4294   00128C                     u2980:
  4295   00128C                     
  4296                           ;TAD_RFID.c: 169:                 bit_count = 0;
  4297   00128C  6A37               	clrf	motor_Write@bit_count^0,c
  4298   00128E                     
  4299                           ;TAD_RFID.c: 170:                 state_write = 2;
  4300   00128E  0E02               	movlw	2
  4301   001290  6E38               	movwf	_state_write^0,c
  4302   001292  EF84  F009         	goto	l3704
  4303   001296                     l3684:
  4304                           
  4305                           ;TAD_RFID.c: 175:             LATCbits.LATC1 = ((ucValue & 0x80) != 0);
  4306   001296  BE35               	btfsc	motor_Write@ucValue^0,7,c
  4307   001298  EF50  F009         	goto	u2991
  4308   00129C  EF54  F009         	goto	u2990
  4309   0012A0                     u2991:
  4310   0012A0  6A50               	clrf	??_motor_Write^0,c
  4311   0012A2  2A50               	incf	??_motor_Write^0,f,c
  4312   0012A4  EF55  F009         	goto	u3008
  4313   0012A8                     u2990:
  4314   0012A8  6A50               	clrf	??_motor_Write^0,c
  4315   0012AA                     u3008:
  4316   0012AA  4650               	rlncf	??_motor_Write^0,f,c
  4317   0012AC  508B               	movf	139,w,c	;volatile
  4318   0012AE  1850               	xorwf	??_motor_Write^0,w,c
  4319   0012B0  0BFD               	andlw	-3
  4320   0012B2  1850               	xorwf	??_motor_Write^0,w,c
  4321   0012B4  6E8B               	movwf	139,c	;volatile
  4322   0012B6                     
  4323                           ;TAD_RFID.c: 176:             LATCbits.LATC2 = 1;
  4324   0012B6  848B               	bsf	139,2,c	;volatile
  4325                           
  4326                           ;TAD_RFID.c: 177:             ucValue <<= 1;
  4327   0012B8  90D8               	bcf	status,0,c
  4328   0012BA  3635               	rlcf	motor_Write@ucValue^0,f,c
  4329   0012BC                     
  4330                           ;TAD_RFID.c: 178:             delay_us(5);
  4331   0012BC  0E05               	movlw	5
  4332   0012BE  EC2F  F00E         	call	_delay_us
  4333   0012C2                     
  4334                           ;TAD_RFID.c: 179:             LATCbits.LATC2 = 0;
  4335   0012C2  948B               	bcf	139,2,c	;volatile
  4336   0012C4                     
  4337                           ;TAD_RFID.c: 180:             delay_us(5);
  4338   0012C4  0E05               	movlw	5
  4339   0012C6  EC2F  F00E         	call	_delay_us
  4340                           
  4341                           ;TAD_RFID.c: 181:             if (++bit_count == 8) {
  4342   0012CA  2A37               	incf	motor_Write@bit_count^0,f,c
  4343   0012CC  0E08               	movlw	8
  4344   0012CE  1837               	xorwf	motor_Write@bit_count^0,w,c
  4345   0012D0  A4D8               	btfss	status,2,c
  4346   0012D2  EF6D  F009         	goto	u3011
  4347   0012D6  EF6F  F009         	goto	u3010
  4348   0012DA                     u3011:
  4349   0012DA  EF84  F009         	goto	l3704
  4350   0012DE                     u3010:
  4351   0012DE                     
  4352                           ;TAD_RFID.c: 182:                 LATCbits.LATC3 = 1;
  4353   0012DE  868B               	bsf	139,3,c	;volatile
  4354                           
  4355                           ;TAD_RFID.c: 183:                 LATCbits.LATC2 = 1;
  4356   0012E0  848B               	bsf	139,2,c	;volatile
  4357                           
  4358                           ;TAD_RFID.c: 184:                 state_write = 0;
  4359   0012E2  6A38               	clrf	_state_write^0,c
  4360   0012E4                     
  4361                           ;TAD_RFID.c: 185:                 return 1;
  4362   0012E4  0E01               	movlw	1
  4363   0012E6  EF85  F009         	goto	l274
  4364   0012EA                     l3702:
  4365   0012EA  5038               	movf	_state_write^0,w,c
  4366                           
  4367                           ; Switch size 1, requested type "simple"
  4368                           ; Number of cases is 3, Range of values is 0 to 2
  4369                           ; switch strategies available:
  4370                           ; Name         Instructions Cycles
  4371                           ; simple_byte           10     6 (average)
  4372                           ;	Chosen strategy is simple_byte
  4373   0012EC  0A00               	xorlw	0	; case 0
  4374   0012EE  B4D8               	btfsc	status,2,c
  4375   0012F0  EF15  F009         	goto	l268
  4376   0012F4  0A01               	xorlw	1	; case 1
  4377   0012F6  B4D8               	btfsc	status,2,c
  4378   0012F8  EF22  F009         	goto	l3670
  4379   0012FC  0A03               	xorlw	3	; case 2
  4380   0012FE  B4D8               	btfsc	status,2,c
  4381   001300  EF4B  F009         	goto	l3684
  4382   001304  EF84  F009         	goto	l3704
  4383   001308                     l3704:
  4384                           
  4385                           ;TAD_RFID.c: 189:     return 0;
  4386   001308  0E00               	movlw	0
  4387   00130A                     l274:
  4388   00130A  0012               	return		;funcret
  4389   00130C                     __end_of_motor_Write:
  4390                           	callstack 0
  4391                           
  4392 ;; *************** function _motor_Read *****************
  4393 ;; Defined at:
  4394 ;;		line 192 in file "TAD_RFID.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  addr            1    wreg     unsigned char 
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  addr            1    4[COMRAM] unsigned char 
  4399 ;;  MAX_TIMEOUT     2    0        const unsigned int 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      unsigned char 
  4402 ;; Registers used:
  4403 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1
  4409 ;;      Params:         0       0       0
  4410 ;;      Locals:         3       0       0
  4411 ;;      Temps:          1       0       0
  4412 ;;      Totals:         4       0       0
  4413 ;;Total ram usage:        4 bytes
  4414 ;; Hardware stack levels used: 1
  4415 ;; Hardware stack levels required when called: 4
  4416 ;; This function calls:
  4417 ;;		_delay_us
  4418 ;; This function is called by:
  4419 ;;		_motor_RFID
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text5
  4424   000EF2                     __ptext5:
  4425                           	callstack 0
  4426   000EF2                     _motor_Read:
  4427                           	callstack 25
  4428                           
  4429                           ;incstack = 0
  4430                           ;motor_Read@addr stored from wreg
  4431   000EF2  6E50               	movwf	motor_Read@addr^0,c
  4432   000EF4                     
  4433                           ;TAD_RFID.c: 199:     if (++timeout_counter > MAX_TIMEOUT) {
  4434   000EF4  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  4435   000EF6  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  4436   000EF8  0EE9               	movlw	233
  4437   000EFA  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  4438   000EFC  0E03               	movlw	3
  4439   000EFE  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  4440   000F00  A0D8               	btfss	status,0,c
  4441   000F02  EF85  F007         	goto	u3021
  4442   000F06  EF87  F007         	goto	u3020
  4443   000F0A                     u3021:
  4444   000F0A  EF0E  F008         	goto	l3786
  4445   000F0E                     u3020:
  4446   000F0E                     
  4447                           ;TAD_RFID.c: 200:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  4448   000F0E  848B               	bsf	139,2,c	;volatile
  4449   000F10  868B               	bsf	139,3,c	;volatile
  4450                           
  4451                           ;TAD_RFID.c: 201:         state_read = 0;
  4452   000F12  6A39               	clrf	_state_read^0,c
  4453   000F14                     
  4454                           ;TAD_RFID.c: 202:         timeout_counter = 0;
  4455   000F14  0E00               	movlw	0
  4456   000F16  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  4457   000F18  0E00               	movlw	0
  4458   000F1A  6E13               	movwf	motor_Read@timeout_counter^0,c
  4459   000F1C                     
  4460                           ;TAD_RFID.c: 203:         return 0xFF;
  4461   000F1C  0EFF               	movlw	255
  4462   000F1E  EF1D  F008         	goto	l286
  4463   000F22                     l3720:
  4464                           
  4465                           ;TAD_RFID.c: 208:             timeout_counter = 0;
  4466   000F22  0E00               	movlw	0
  4467   000F24  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  4468   000F26  0E00               	movlw	0
  4469   000F28  6E13               	movwf	motor_Read@timeout_counter^0,c
  4470   000F2A                     
  4471                           ;TAD_RFID.c: 209:             LATCbits.LATC2 = 0;
  4472   000F2A  948B               	bcf	139,2,c	;volatile
  4473   000F2C                     
  4474                           ;TAD_RFID.c: 210:             LATCbits.LATC3 = 0;
  4475   000F2C  968B               	bcf	139,3,c	;volatile
  4476   000F2E                     
  4477                           ;TAD_RFID.c: 211:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  4478   000F2E  5050               	movf	motor_Read@addr^0,w,c
  4479   000F30  2450               	addwf	motor_Read@addr^0,w,c
  4480   000F32  0B7E               	andlw	126
  4481   000F34  0980               	iorlw	128
  4482   000F36  6E33               	movwf	motor_Read@ucAddr^0,c
  4483   000F38                     
  4484                           ;TAD_RFID.c: 212:             ucResult = 0;
  4485   000F38  6A32               	clrf	motor_Read@ucResult^0,c
  4486   000F3A                     
  4487                           ;TAD_RFID.c: 213:             bit_count = 0;
  4488   000F3A  6A34               	clrf	motor_Read@bit_count^0,c
  4489   000F3C                     
  4490                           ;TAD_RFID.c: 214:             state_read = 1;
  4491   000F3C  0E01               	movlw	1
  4492   000F3E  6E39               	movwf	_state_read^0,c
  4493   000F40                     l3734:
  4494                           
  4495                           ;TAD_RFID.c: 215:             return 0xFE;
  4496   000F40  0EFE               	movlw	254
  4497   000F42  EF1D  F008         	goto	l286
  4498   000F46                     l3738:
  4499                           
  4500                           ;TAD_RFID.c: 218:             LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4501   000F46  BE33               	btfsc	motor_Read@ucAddr^0,7,c
  4502   000F48  EFA8  F007         	goto	u3031
  4503   000F4C  EFAC  F007         	goto	u3030
  4504   000F50                     u3031:
  4505   000F50  6A4F               	clrf	??_motor_Read^0,c
  4506   000F52  2A4F               	incf	??_motor_Read^0,f,c
  4507   000F54  EFAD  F007         	goto	u3048
  4508   000F58                     u3030:
  4509   000F58  6A4F               	clrf	??_motor_Read^0,c
  4510   000F5A                     u3048:
  4511   000F5A  464F               	rlncf	??_motor_Read^0,f,c
  4512   000F5C  508B               	movf	139,w,c	;volatile
  4513   000F5E  184F               	xorwf	??_motor_Read^0,w,c
  4514   000F60  0BFD               	andlw	-3
  4515   000F62  184F               	xorwf	??_motor_Read^0,w,c
  4516   000F64  6E8B               	movwf	139,c	;volatile
  4517   000F66                     
  4518                           ;TAD_RFID.c: 219:             LATCbits.LATC2 = 1;
  4519   000F66  848B               	bsf	139,2,c	;volatile
  4520   000F68                     
  4521                           ;TAD_RFID.c: 220:             delay_us(5);
  4522   000F68  0E05               	movlw	5
  4523   000F6A  EC2F  F00E         	call	_delay_us
  4524   000F6E                     
  4525                           ;TAD_RFID.c: 221:             ucAddr <<= 1;
  4526   000F6E  90D8               	bcf	status,0,c
  4527   000F70  3633               	rlcf	motor_Read@ucAddr^0,f,c
  4528   000F72                     
  4529                           ;TAD_RFID.c: 222:             LATCbits.LATC2 = 0;
  4530   000F72  948B               	bcf	139,2,c	;volatile
  4531                           
  4532                           ;TAD_RFID.c: 223:             delay_us(5);
  4533   000F74  0E05               	movlw	5
  4534   000F76  EC2F  F00E         	call	_delay_us
  4535   000F7A                     
  4536                           ;TAD_RFID.c: 225:             if (++bit_count >= 8) {
  4537   000F7A  2A34               	incf	motor_Read@bit_count^0,f,c
  4538   000F7C  0E07               	movlw	7
  4539   000F7E  6434               	cpfsgt	motor_Read@bit_count^0,c
  4540   000F80  EFC4  F007         	goto	u3051
  4541   000F84  EFC6  F007         	goto	u3050
  4542   000F88                     u3051:
  4543   000F88  EFA0  F007         	goto	l3734
  4544   000F8C                     u3050:
  4545   000F8C                     
  4546                           ;TAD_RFID.c: 226:                 bit_count = 0;
  4547   000F8C  6A34               	clrf	motor_Read@bit_count^0,c
  4548   000F8E                     
  4549                           ;TAD_RFID.c: 227:                 state_read = 2;
  4550   000F8E  0E02               	movlw	2
  4551   000F90  6E39               	movwf	_state_read^0,c
  4552   000F92  EFA0  F007         	goto	l3734
  4553   000F96                     l291:
  4554                           
  4555                           ;TAD_RFID.c: 232:             LATCbits.LATC2 = 1;
  4556   000F96  848B               	bsf	139,2,c	;volatile
  4557   000F98                     
  4558                           ;TAD_RFID.c: 233:             delay_us(5);
  4559   000F98  0E05               	movlw	5
  4560   000F9A  EC2F  F00E         	call	_delay_us
  4561   000F9E                     
  4562                           ;TAD_RFID.c: 234:             ucResult = (ucResult << 1) | PORTCbits.RC0;
  4563   000F9E  B082               	btfsc	130,0,c	;volatile
  4564   000FA0  EFD4  F007         	goto	u3061
  4565   000FA4  EFD8  F007         	goto	u3060
  4566   000FA8                     u3061:
  4567   000FA8  6A4F               	clrf	??_motor_Read^0,c
  4568   000FAA  2A4F               	incf	??_motor_Read^0,f,c
  4569   000FAC  EFD9  F007         	goto	u3068
  4570   000FB0                     u3060:
  4571   000FB0  6A4F               	clrf	??_motor_Read^0,c
  4572   000FB2                     u3068:
  4573   000FB2  5032               	movf	motor_Read@ucResult^0,w,c
  4574   000FB4  2432               	addwf	motor_Read@ucResult^0,w,c
  4575   000FB6  104F               	iorwf	??_motor_Read^0,w,c
  4576   000FB8  6E32               	movwf	motor_Read@ucResult^0,c
  4577   000FBA                     
  4578                           ;TAD_RFID.c: 235:             LATCbits.LATC2 = 0;
  4579   000FBA  948B               	bcf	139,2,c	;volatile
  4580   000FBC                     
  4581                           ;TAD_RFID.c: 236:             delay_us(5);
  4582   000FBC  0E05               	movlw	5
  4583   000FBE  EC2F  F00E         	call	_delay_us
  4584                           
  4585                           ;TAD_RFID.c: 238:             if (++bit_count >= 8) {
  4586   000FC2  2A34               	incf	motor_Read@bit_count^0,f,c
  4587   000FC4  0E07               	movlw	7
  4588   000FC6  6434               	cpfsgt	motor_Read@bit_count^0,c
  4589   000FC8  EFE8  F007         	goto	u3071
  4590   000FCC  EFEA  F007         	goto	u3070
  4591   000FD0                     u3071:
  4592   000FD0  EFA0  F007         	goto	l3734
  4593   000FD4                     u3070:
  4594   000FD4                     
  4595                           ;TAD_RFID.c: 239:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  4596   000FD4  848B               	bsf	139,2,c	;volatile
  4597   000FD6  868B               	bsf	139,3,c	;volatile
  4598                           
  4599                           ;TAD_RFID.c: 240:                 state_read = 0;
  4600   000FD8  6A39               	clrf	_state_read^0,c
  4601   000FDA                     
  4602                           ;TAD_RFID.c: 241:                 timeout_counter = 0;
  4603   000FDA  0E00               	movlw	0
  4604   000FDC  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  4605   000FDE  0E00               	movlw	0
  4606   000FE0  6E13               	movwf	motor_Read@timeout_counter^0,c
  4607   000FE2                     
  4608                           ;TAD_RFID.c: 242:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  4609   000FE2  0EFE               	movlw	254
  4610   000FE4  1832               	xorwf	motor_Read@ucResult^0,w,c
  4611   000FE6  B4D8               	btfsc	status,2,c
  4612   000FE8  EFF8  F007         	goto	u3081
  4613   000FEC  EFFA  F007         	goto	u3080
  4614   000FF0                     u3081:
  4615   000FF0  EF07  F008         	goto	l3776
  4616   000FF4                     u3080:
  4617   000FF4  2832               	incf	motor_Read@ucResult^0,w,c
  4618   000FF6  B4D8               	btfsc	status,2,c
  4619   000FF8  EF00  F008         	goto	u3091
  4620   000FFC  EF02  F008         	goto	u3090
  4621   001000                     u3091:
  4622   001000  EF07  F008         	goto	l3776
  4623   001004                     u3090:
  4624   001004  C032  F051         	movff	motor_Read@ucResult,_motor_Read$559
  4625   001008  6A52               	clrf	(_motor_Read$559+1)^0,c
  4626   00100A  EF0B  F008         	goto	l296
  4627   00100E                     l3776:
  4628   00100E  0E00               	movlw	0
  4629   001010  6E52               	movwf	(_motor_Read$559+1)^0,c
  4630   001012  0EFD               	movlw	253
  4631   001014  6E51               	movwf	_motor_Read$559^0,c
  4632   001016                     l296:
  4633   001016  5051               	movf	_motor_Read$559^0,w,c
  4634   001018  EF1D  F008         	goto	l286
  4635   00101C                     l3786:
  4636   00101C  5039               	movf	_state_read^0,w,c
  4637                           
  4638                           ; Switch size 1, requested type "simple"
  4639                           ; Number of cases is 3, Range of values is 0 to 2
  4640                           ; switch strategies available:
  4641                           ; Name         Instructions Cycles
  4642                           ; simple_byte           10     6 (average)
  4643                           ;	Chosen strategy is simple_byte
  4644   00101E  0A00               	xorlw	0	; case 0
  4645   001020  B4D8               	btfsc	status,2,c
  4646   001022  EF91  F007         	goto	l3720
  4647   001026  0A01               	xorlw	1	; case 1
  4648   001028  B4D8               	btfsc	status,2,c
  4649   00102A  EFA3  F007         	goto	l3738
  4650   00102E  0A03               	xorlw	3	; case 2
  4651   001030  B4D8               	btfsc	status,2,c
  4652   001032  EFCB  F007         	goto	l291
  4653   001036  EFA0  F007         	goto	l3734
  4654   00103A                     l286:
  4655   00103A  0012               	return		;funcret
  4656   00103C                     __end_of_motor_Read:
  4657                           	callstack 0
  4658                           
  4659 ;; *************** function _motorTerminal *****************
  4660 ;; Defined at:
  4661 ;;		line 138 in file "TAD_TERMINAL.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  currentUser     5   22[COMRAM] unsigned char [5]
  4666 ;;  currentUser     5   17[COMRAM] unsigned char [5]
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1
  4676 ;;      Params:         0       0       0
  4677 ;;      Locals:        10       0       0
  4678 ;;      Temps:          0       0       0
  4679 ;;      Totals:        10       0       0
  4680 ;;Total ram usage:       10 bytes
  4681 ;; Hardware stack levels used: 1
  4682 ;; Hardware stack levels required when called: 7
  4683 ;; This function calls:
  4684 ;;		_Terminal_RXAvailable
  4685 ;;		_Terminal_ReceiveChar
  4686 ;;		_Terminal_SendChar
  4687 ;;		_getActualUID
  4688 ;;		_motor_SendString
  4689 ;;		_motor_StartSendString
  4690 ;;		_printfUID
  4691 ;;		_saveHourToData
  4692 ;;		_showAllConfigurations
  4693 ;; This function is called by:
  4694 ;;		_main
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text6
  4699   000AF2                     __ptext6:
  4700                           	callstack 0
  4701   000AF2                     _motorTerminal:
  4702                           	callstack 23
  4703   000AF2                     
  4704                           ;TAD_TERMINAL.c: 139:  static char state = 0;;TAD_TERMINAL.c: 140:  static char sending_
      +                          string = 0;;TAD_TERMINAL.c: 143:  if (sending_string) {
  4705   000AF2  501D               	movf	motorTerminal@sending_string^0,w,c
  4706   000AF4  B4D8               	btfsc	status,2,c
  4707   000AF6  EF7F  F005         	goto	u3241
  4708   000AFA  EF81  F005         	goto	u3240
  4709   000AFE                     u3241:
  4710   000AFE  EF39  F007         	goto	l4216
  4711   000B02                     u3240:
  4712   000B02                     
  4713                           ;TAD_TERMINAL.c: 144:   if (motor_SendString() == 1) {
  4714   000B02  ECF1  F00B         	call	_motor_SendString	;wreg free
  4715   000B06  06E8               	decf	wreg,f,c
  4716   000B08  A4D8               	btfss	status,2,c
  4717   000B0A  EF89  F005         	goto	u3251
  4718   000B0E  EF8B  F005         	goto	u3250
  4719   000B12                     u3251:
  4720   000B12  EF78  F007         	goto	l709
  4721   000B16                     u3250:
  4722   000B16                     
  4723                           ;TAD_TERMINAL.c: 145:    sending_string = 0;
  4724   000B16  6A1D               	clrf	motorTerminal@sending_string^0,c
  4725                           
  4726                           ;TAD_TERMINAL.c: 146:   } else {
  4727   000B18  EF39  F007         	goto	l4216
  4728   000B1C                     l4042:
  4729                           
  4730                           ;TAD_TERMINAL.c: 153:    if (Terminal_ReceiveChar() == 0x1B) {
  4731   000B1C  ECE8  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4732   000B20  0A1B               	xorlw	27
  4733   000B22  A4D8               	btfss	status,2,c
  4734   000B24  EF96  F005         	goto	u3261
  4735   000B28  EF98  F005         	goto	u3260
  4736   000B2C                     u3261:
  4737   000B2C  EFA2  F005         	goto	l4050
  4738   000B30                     u3260:
  4739   000B30                     
  4740                           ;TAD_TERMINAL.c: 154:     motor_StartSendString("---------------\r\n");
  4741   000B30  0EB5               	movlw	low STR_1
  4742   000B32  6E51               	movwf	motor_StartSendString@str^0,c
  4743   000B34  0E1F               	movlw	high STR_1
  4744   000B36  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4745   000B38  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4746   000B3C                     
  4747                           ;TAD_TERMINAL.c: 155:     sending_string = 1;
  4748   000B3C  0E01               	movlw	1
  4749   000B3E  6E1D               	movwf	motorTerminal@sending_string^0,c
  4750   000B40                     
  4751                           ;TAD_TERMINAL.c: 156:     state = 10;
  4752   000B40  0E0A               	movlw	10
  4753   000B42  6E1E               	movwf	motorTerminal@state^0,c
  4754   000B44                     l4050:
  4755                           
  4756                           ;TAD_TERMINAL.c: 159:    if (hashtag_pressed == 1){
  4757   000B44  041F               	decf	_hashtag_pressed^0,w,c
  4758   000B46  A4D8               	btfss	status,2,c
  4759   000B48  EFA8  F005         	goto	u3271
  4760   000B4C  EFAA  F005         	goto	u3270
  4761   000B50                     u3271:
  4762   000B50  EF78  F007         	goto	l709
  4763   000B54                     u3270:
  4764   000B54                     
  4765                           ;TAD_TERMINAL.c: 160:     motor_StartSendString("---------------\r\n");
  4766   000B54  0EB5               	movlw	low STR_1
  4767   000B56  6E51               	movwf	motor_StartSendString@str^0,c
  4768   000B58  0E1F               	movlw	high STR_1
  4769   000B5A  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4770   000B5C  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4771   000B60                     
  4772                           ;TAD_TERMINAL.c: 161:     sending_string = 1;
  4773   000B60  0E01               	movlw	1
  4774   000B62  6E1D               	movwf	motorTerminal@sending_string^0,c
  4775   000B64                     
  4776                           ;TAD_TERMINAL.c: 162:     state = 10;
  4777   000B64  0E0A               	movlw	10
  4778   000B66  6E1E               	movwf	motorTerminal@state^0,c
  4779   000B68                     
  4780                           ;TAD_TERMINAL.c: 163:     hashtag_pressed = 0;
  4781   000B68  6A1F               	clrf	_hashtag_pressed^0,c
  4782   000B6A  EF78  F007         	goto	l709
  4783   000B6E                     l4060:
  4784                           
  4785                           ;TAD_TERMINAL.c: 168:    if (!sending_string) {
  4786   000B6E  501D               	movf	motorTerminal@sending_string^0,w,c
  4787   000B70  A4D8               	btfss	status,2,c
  4788   000B72  EFBD  F005         	goto	u3281
  4789   000B76  EFBF  F005         	goto	u3280
  4790   000B7A                     u3281:
  4791   000B7A  EF78  F007         	goto	l709
  4792   000B7E                     u3280:
  4793   000B7E                     
  4794                           ;TAD_TERMINAL.c: 169:     motor_StartSendString("MenÃº principal\r\n");
  4795   000B7E  0EC7               	movlw	low STR_2
  4796   000B80  6E51               	movwf	motor_StartSendString@str^0,c
  4797   000B82  0E1F               	movlw	high STR_2
  4798   000B84  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4799   000B86  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4800   000B8A                     
  4801                           ;TAD_TERMINAL.c: 170:     sending_string = 1;
  4802   000B8A  0E01               	movlw	1
  4803   000B8C  6E1D               	movwf	motorTerminal@sending_string^0,c
  4804   000B8E                     
  4805                           ;TAD_TERMINAL.c: 171:     state = 11;
  4806   000B8E  0E0B               	movlw	11
  4807   000B90  6E1E               	movwf	motorTerminal@state^0,c
  4808   000B92  EF78  F007         	goto	l709
  4809   000B96                     l4068:
  4810                           
  4811                           ;TAD_TERMINAL.c: 176:    if (!sending_string) {
  4812   000B96  501D               	movf	motorTerminal@sending_string^0,w,c
  4813   000B98  A4D8               	btfss	status,2,c
  4814   000B9A  EFD1  F005         	goto	u3291
  4815   000B9E  EFD3  F005         	goto	u3290
  4816   000BA2                     u3291:
  4817   000BA2  EF78  F007         	goto	l709
  4818   000BA6                     u3290:
  4819   000BA6                     
  4820                           ;TAD_TERMINAL.c: 177:     motor_StartSendString("---------------\r\n");
  4821   000BA6  0EB5               	movlw	low STR_1
  4822   000BA8  6E51               	movwf	motor_StartSendString@str^0,c
  4823   000BAA  0E1F               	movlw	high STR_1
  4824   000BAC  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4825   000BAE  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4826   000BB2                     
  4827                           ;TAD_TERMINAL.c: 178:     sending_string = 1;
  4828   000BB2  0E01               	movlw	1
  4829   000BB4  6E1D               	movwf	motorTerminal@sending_string^0,c
  4830   000BB6                     
  4831                           ;TAD_TERMINAL.c: 179:     state = 12;
  4832   000BB6  0E0C               	movlw	12
  4833   000BB8  6E1E               	movwf	motorTerminal@state^0,c
  4834   000BBA  EF78  F007         	goto	l709
  4835   000BBE                     l4076:
  4836                           
  4837                           ;TAD_TERMINAL.c: 184:    if (!sending_string) {
  4838   000BBE  501D               	movf	motorTerminal@sending_string^0,w,c
  4839   000BC0  A4D8               	btfss	status,2,c
  4840   000BC2  EFE5  F005         	goto	u3301
  4841   000BC6  EFE7  F005         	goto	u3300
  4842   000BCA                     u3301:
  4843   000BCA  EF78  F007         	goto	l709
  4844   000BCE                     u3300:
  4845   000BCE                     
  4846                           ;TAD_TERMINAL.c: 185:     motor_StartSendString("Tria una opciÃ³:\r\n");
  4847   000BCE  0EA2               	movlw	low STR_4
  4848   000BD0  6E51               	movwf	motor_StartSendString@str^0,c
  4849   000BD2  0E1F               	movlw	high STR_4
  4850   000BD4  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4851   000BD6  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4852   000BDA                     
  4853                           ;TAD_TERMINAL.c: 186:     sending_string = 1;
  4854   000BDA  0E01               	movlw	1
  4855   000BDC  6E1D               	movwf	motorTerminal@sending_string^0,c
  4856   000BDE                     
  4857                           ;TAD_TERMINAL.c: 187:     state = 13;
  4858   000BDE  0E0D               	movlw	13
  4859   000BE0  6E1E               	movwf	motorTerminal@state^0,c
  4860   000BE2  EF78  F007         	goto	l709
  4861   000BE6                     l4084:
  4862                           
  4863                           ;TAD_TERMINAL.c: 192:    if (!sending_string) {
  4864   000BE6  501D               	movf	motorTerminal@sending_string^0,w,c
  4865   000BE8  A4D8               	btfss	status,2,c
  4866   000BEA  EFF9  F005         	goto	u3311
  4867   000BEE  EFFB  F005         	goto	u3310
  4868   000BF2                     u3311:
  4869   000BF2  EF78  F007         	goto	l709
  4870   000BF6                     u3310:
  4871   000BF6                     
  4872                           ;TAD_TERMINAL.c: 193:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n");
  4873   000BF6  0E71               	movlw	low STR_5
  4874   000BF8  6E51               	movwf	motor_StartSendString@str^0,c
  4875   000BFA  0E1F               	movlw	high STR_5
  4876   000BFC  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4877   000BFE  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4878   000C02                     
  4879                           ;TAD_TERMINAL.c: 194:     sending_string = 1;
  4880   000C02  0E01               	movlw	1
  4881   000C04  6E1D               	movwf	motorTerminal@sending_string^0,c
  4882   000C06                     
  4883                           ;TAD_TERMINAL.c: 195:     state = 14;
  4884   000C06  0E0E               	movlw	14
  4885   000C08  6E1E               	movwf	motorTerminal@state^0,c
  4886   000C0A  EF78  F007         	goto	l709
  4887   000C0E                     l4092:
  4888                           
  4889                           ;TAD_TERMINAL.c: 200:    if (!sending_string) {
  4890   000C0E  501D               	movf	motorTerminal@sending_string^0,w,c
  4891   000C10  A4D8               	btfss	status,2,c
  4892   000C12  EF0D  F006         	goto	u3321
  4893   000C16  EF0F  F006         	goto	u3320
  4894   000C1A                     u3321:
  4895   000C1A  EF78  F007         	goto	l709
  4896   000C1E                     u3320:
  4897   000C1E                     
  4898                           ;TAD_TERMINAL.c: 201:     motor_StartSendString("\t2. Mostrar configuracions\r\n");
  4899   000C1E  0E54               	movlw	low STR_6
  4900   000C20  6E51               	movwf	motor_StartSendString@str^0,c
  4901   000C22  0E1F               	movlw	high STR_6
  4902   000C24  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4903   000C26  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4904   000C2A                     
  4905                           ;TAD_TERMINAL.c: 202:     sending_string = 1;
  4906   000C2A  0E01               	movlw	1
  4907   000C2C  6E1D               	movwf	motorTerminal@sending_string^0,c
  4908   000C2E                     
  4909                           ;TAD_TERMINAL.c: 203:     state = 15;
  4910   000C2E  0E0F               	movlw	15
  4911   000C30  6E1E               	movwf	motorTerminal@state^0,c
  4912   000C32  EF78  F007         	goto	l709
  4913   000C36                     l4100:
  4914                           
  4915                           ;TAD_TERMINAL.c: 208:    if (!sending_string) {
  4916   000C36  501D               	movf	motorTerminal@sending_string^0,w,c
  4917   000C38  A4D8               	btfss	status,2,c
  4918   000C3A  EF21  F006         	goto	u3331
  4919   000C3E  EF23  F006         	goto	u3330
  4920   000C42                     u3331:
  4921   000C42  EF78  F007         	goto	l709
  4922   000C46                     u3330:
  4923   000C46                     
  4924                           ;TAD_TERMINAL.c: 209:     motor_StartSendString("\t3. Modificar hora del sistema\r\n");
  4925   000C46  0EF1               	movlw	low STR_7
  4926   000C48  6E51               	movwf	motor_StartSendString@str^0,c
  4927   000C4A  0E1E               	movlw	high STR_7
  4928   000C4C  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4929   000C4E  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4930   000C52                     
  4931                           ;TAD_TERMINAL.c: 210:     sending_string = 1;
  4932   000C52  0E01               	movlw	1
  4933   000C54  6E1D               	movwf	motorTerminal@sending_string^0,c
  4934   000C56                     
  4935                           ;TAD_TERMINAL.c: 211:     state = 16;
  4936   000C56  0E10               	movlw	16
  4937   000C58  6E1E               	movwf	motorTerminal@state^0,c
  4938   000C5A  EF78  F007         	goto	l709
  4939   000C5E                     l4108:
  4940                           
  4941                           ;TAD_TERMINAL.c: 216:    if (!sending_string) {
  4942   000C5E  501D               	movf	motorTerminal@sending_string^0,w,c
  4943   000C60  A4D8               	btfss	status,2,c
  4944   000C62  EF35  F006         	goto	u3341
  4945   000C66  EF37  F006         	goto	u3340
  4946   000C6A                     u3341:
  4947   000C6A  EF78  F007         	goto	l709
  4948   000C6E                     u3340:
  4949   000C6E                     
  4950                           ;TAD_TERMINAL.c: 217:     motor_StartSendString("OpciÃ³: ");
  4951   000C6E  0EE3               	movlw	low STR_8
  4952   000C70  6E51               	movwf	motor_StartSendString@str^0,c
  4953   000C72  0E1F               	movlw	high STR_8
  4954   000C74  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4955   000C76  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4956   000C7A                     
  4957                           ;TAD_TERMINAL.c: 218:     sending_string = 1;
  4958   000C7A  0E01               	movlw	1
  4959   000C7C  6E1D               	movwf	motorTerminal@sending_string^0,c
  4960   000C7E                     
  4961                           ;TAD_TERMINAL.c: 219:     state = 1;
  4962   000C7E  0E01               	movlw	1
  4963   000C80  6E1E               	movwf	motorTerminal@state^0,c
  4964   000C82  EF78  F007         	goto	l709
  4965   000C86                     l4116:
  4966                           
  4967                           ;TAD_TERMINAL.c: 224:    if(Terminal_RXAvailable() == 1){
  4968   000C86  ECA3  F00E         	call	_Terminal_RXAvailable	;wreg free
  4969   000C8A  06E8               	decf	wreg,f,c
  4970   000C8C  A4D8               	btfss	status,2,c
  4971   000C8E  EF4B  F006         	goto	u3351
  4972   000C92  EF4D  F006         	goto	u3350
  4973   000C96                     u3351:
  4974   000C96  EF78  F007         	goto	l709
  4975   000C9A                     u3350:
  4976   000C9A                     
  4977                           ;TAD_TERMINAL.c: 225:     if (Terminal_ReceiveChar() == '1') {
  4978   000C9A  ECE8  F00E         	call	_Terminal_ReceiveChar	;wreg free
  4979   000C9E  0A31               	xorlw	49
  4980   000CA0  A4D8               	btfss	status,2,c
  4981   000CA2  EF55  F006         	goto	u3361
  4982   000CA6  EF57  F006         	goto	u3360
  4983   000CAA                     u3361:
  4984   000CAA  EF63  F006         	goto	l4126
  4985   000CAE                     u3360:
  4986   000CAE                     
  4987                           ;TAD_TERMINAL.c: 226:      motor_StartSendString("\r\n");
  4988   000CAE  0EC4               	movlw	low (STR_1+15)
  4989   000CB0  6E51               	movwf	motor_StartSendString@str^0,c
  4990   000CB2  0E1F               	movlw	high (STR_1+15)
  4991   000CB4  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  4992   000CB6  EC53  F00E         	call	_motor_StartSendString	;wreg free
  4993   000CBA                     
  4994                           ;TAD_TERMINAL.c: 227:      sending_string = 1;
  4995   000CBA  0E01               	movlw	1
  4996   000CBC  6E1D               	movwf	motorTerminal@sending_string^0,c
  4997   000CBE                     
  4998                           ;TAD_TERMINAL.c: 228:      state = 20;
  4999   000CBE  0E14               	movlw	20
  5000   000CC0  6E1E               	movwf	motorTerminal@state^0,c
  5001                           
  5002                           ;TAD_TERMINAL.c: 229:     }
  5003   000CC2  EF78  F007         	goto	l709
  5004   000CC6                     l4126:
  5005   000CC6  ECE8  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5006   000CCA  0A32               	xorlw	50
  5007   000CCC  A4D8               	btfss	status,2,c
  5008   000CCE  EF6B  F006         	goto	u3371
  5009   000CD2  EF6D  F006         	goto	u3370
  5010   000CD6                     u3371:
  5011   000CD6  EF79  F006         	goto	l4134
  5012   000CDA                     u3370:
  5013   000CDA                     
  5014                           ;TAD_TERMINAL.c: 231:      motor_StartSendString("\r\n");
  5015   000CDA  0EC4               	movlw	low (STR_1+15)
  5016   000CDC  6E51               	movwf	motor_StartSendString@str^0,c
  5017   000CDE  0E1F               	movlw	high (STR_1+15)
  5018   000CE0  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5019   000CE2  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5020   000CE6                     
  5021                           ;TAD_TERMINAL.c: 232:      sending_string = 1;
  5022   000CE6  0E01               	movlw	1
  5023   000CE8  6E1D               	movwf	motorTerminal@sending_string^0,c
  5024   000CEA                     
  5025                           ;TAD_TERMINAL.c: 233:      state = 30;
  5026   000CEA  0E1E               	movlw	30
  5027   000CEC  6E1E               	movwf	motorTerminal@state^0,c
  5028                           
  5029                           ;TAD_TERMINAL.c: 234:     }
  5030   000CEE  EF78  F007         	goto	l709
  5031   000CF2                     l4134:
  5032   000CF2  ECE8  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5033   000CF6  0A33               	xorlw	51
  5034   000CF8  A4D8               	btfss	status,2,c
  5035   000CFA  EF81  F006         	goto	u3381
  5036   000CFE  EF83  F006         	goto	u3380
  5037   000D02                     u3381:
  5038   000D02  EF8F  F006         	goto	l4142
  5039   000D06                     u3380:
  5040   000D06                     
  5041                           ;TAD_TERMINAL.c: 236:      motor_StartSendString("\r\n");
  5042   000D06  0EC4               	movlw	low (STR_1+15)
  5043   000D08  6E51               	movwf	motor_StartSendString@str^0,c
  5044   000D0A  0E1F               	movlw	high (STR_1+15)
  5045   000D0C  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5046   000D0E  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5047   000D12                     
  5048                           ;TAD_TERMINAL.c: 237:      sending_string = 1;
  5049   000D12  0E01               	movlw	1
  5050   000D14  6E1D               	movwf	motorTerminal@sending_string^0,c
  5051   000D16                     
  5052                           ;TAD_TERMINAL.c: 238:      state = 40;
  5053   000D16  0E28               	movlw	40
  5054   000D18  6E1E               	movwf	motorTerminal@state^0,c
  5055                           
  5056                           ;TAD_TERMINAL.c: 239:     }
  5057   000D1A  EF78  F007         	goto	l709
  5058   000D1E                     l4142:
  5059                           
  5060                           ;TAD_TERMINAL.c: 241:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5061   000D1E  0ED0               	movlw	low STR_27
  5062   000D20  6E51               	movwf	motor_StartSendString@str^0,c
  5063   000D22  0E1E               	movlw	high STR_27
  5064   000D24  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5065   000D26  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5066   000D2A                     l4144:
  5067                           
  5068                           ;TAD_TERMINAL.c: 242:      sending_string = 1;
  5069   000D2A  0E01               	movlw	1
  5070   000D2C  6E1D               	movwf	motorTerminal@sending_string^0,c
  5071   000D2E                     l4146:
  5072                           
  5073                           ;TAD_TERMINAL.c: 243:      state = 0;
  5074   000D2E  6A1E               	clrf	motorTerminal@state^0,c
  5075   000D30  EF78  F007         	goto	l709
  5076   000D34                     l4148:
  5077                           
  5078                           ;TAD_TERMINAL.c: 249:    if (!sending_string) {
  5079   000D34  501D               	movf	motorTerminal@sending_string^0,w,c
  5080   000D36  A4D8               	btfss	status,2,c
  5081   000D38  EFA0  F006         	goto	u3391
  5082   000D3C  EFA2  F006         	goto	u3390
  5083   000D40                     u3391:
  5084   000D40  EF78  F007         	goto	l709
  5085   000D44                     u3390:
  5086   000D44                     
  5087                           ;TAD_TERMINAL.c: 250:     unsigned char currentUser[5];;TAD_TERMINAL.c: 251:     getActu
      +                          alUID(currentUser);
  5088   000D44  0E5D               	movlw	low motorTerminal@currentUser
  5089   000D46  6E4D               	movwf	getActualUID@UID^0,c
  5090   000D48  ECD6  F00A         	call	_getActualUID	;wreg free
  5091   000D4C                     
  5092                           ;TAD_TERMINAL.c: 253:     if (currentUser[0] != 0) {
  5093   000D4C  505D               	movf	motorTerminal@currentUser^0,w,c
  5094   000D4E  B4D8               	btfsc	status,2,c
  5095   000D50  EFAC  F006         	goto	u3401
  5096   000D54  EFAE  F006         	goto	u3400
  5097   000D58                     u3401:
  5098   000D58  EFBA  F006         	goto	l4160
  5099   000D5C                     u3400:
  5100   000D5C                     
  5101                           ;TAD_TERMINAL.c: 254:      motor_StartSendString("UID: ");
  5102   000D5C  0EF2               	movlw	low STR_9
  5103   000D5E  6E51               	movwf	motor_StartSendString@str^0,c
  5104   000D60  0E1F               	movlw	high STR_9
  5105   000D62  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5106   000D64  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5107   000D68                     
  5108                           ;TAD_TERMINAL.c: 255:      sending_string = 1;
  5109   000D68  0E01               	movlw	1
  5110   000D6A  6E1D               	movwf	motorTerminal@sending_string^0,c
  5111   000D6C                     
  5112                           ;TAD_TERMINAL.c: 256:      state = 21;
  5113   000D6C  0E15               	movlw	21
  5114   000D6E  6E1E               	movwf	motorTerminal@state^0,c
  5115                           
  5116                           ;TAD_TERMINAL.c: 257:     } else {
  5117   000D70  EF78  F007         	goto	l709
  5118   000D74                     l4160:
  5119                           
  5120                           ;TAD_TERMINAL.c: 258:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5121   000D74  0EAF               	movlw	low STR_29
  5122   000D76  6E51               	movwf	motor_StartSendString@str^0,c
  5123   000D78  0E1E               	movlw	high STR_29
  5124   000D7A  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5125   000D7C  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5126   000D80                     
  5127                           ;TAD_TERMINAL.c: 259:      sending_string = 1;
  5128   000D80  0E01               	movlw	1
  5129   000D82  6E1D               	movwf	motorTerminal@sending_string^0,c
  5130   000D84                     l4164:
  5131                           
  5132                           ;TAD_TERMINAL.c: 260:      state = 25;
  5133   000D84  0E19               	movlw	25
  5134   000D86  6E1E               	movwf	motorTerminal@state^0,c
  5135   000D88  EF78  F007         	goto	l709
  5136   000D8C                     l4166:
  5137                           
  5138                           ;TAD_TERMINAL.c: 266:    if (!sending_string) {
  5139   000D8C  501D               	movf	motorTerminal@sending_string^0,w,c
  5140   000D8E  A4D8               	btfss	status,2,c
  5141   000D90  EFCC  F006         	goto	u3411
  5142   000D94  EFCE  F006         	goto	u3410
  5143   000D98                     u3411:
  5144   000D98  EF78  F007         	goto	l709
  5145   000D9C                     u3410:
  5146   000D9C                     
  5147                           ;TAD_TERMINAL.c: 267:     unsigned char currentUser[5];;TAD_TERMINAL.c: 268:     getActu
      +                          alUID(currentUser);
  5148   000D9C  0E62               	movlw	low motorTerminal@currentUser_910
  5149   000D9E  6E4D               	movwf	getActualUID@UID^0,c
  5150   000DA0  ECD6  F00A         	call	_getActualUID	;wreg free
  5151   000DA4                     
  5152                           ;TAD_TERMINAL.c: 269:     printfUID(currentUser);
  5153   000DA4  0E62               	movlw	low motorTerminal@currentUser_910
  5154   000DA6  6E53               	movwf	printfUID@currentUser^0,c
  5155   000DA8  EC9A  F008         	call	_printfUID	;wreg free
  5156   000DAC  EFC2  F006         	goto	l4164
  5157   000DB0                     l4174:
  5158                           
  5159                           ;TAD_TERMINAL.c: 275:    if (!sending_string) {
  5160   000DB0  501D               	movf	motorTerminal@sending_string^0,w,c
  5161   000DB2  A4D8               	btfss	status,2,c
  5162   000DB4  EFDE  F006         	goto	u3421
  5163   000DB8  EFE0  F006         	goto	u3420
  5164   000DBC                     u3421:
  5165   000DBC  EF78  F007         	goto	l709
  5166   000DC0                     u3420:
  5167   000DC0                     
  5168                           ;TAD_TERMINAL.c: 276:     motor_StartSendString("\r\n");
  5169   000DC0  0EC4               	movlw	low (STR_1+15)
  5170   000DC2  6E51               	movwf	motor_StartSendString@str^0,c
  5171   000DC4  0E1F               	movlw	high (STR_1+15)
  5172   000DC6  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5173   000DC8  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5174   000DCC  EF95  F006         	goto	l4144
  5175   000DD0                     l4182:
  5176                           
  5177                           ;TAD_TERMINAL.c: 283:    if (!sending_string) {
  5178   000DD0  501D               	movf	motorTerminal@sending_string^0,w,c
  5179   000DD2  A4D8               	btfss	status,2,c
  5180   000DD4  EFEE  F006         	goto	u3431
  5181   000DD8  EFF0  F006         	goto	u3430
  5182   000DDC                     u3431:
  5183   000DDC  EF78  F007         	goto	l709
  5184   000DE0                     u3430:
  5185   000DE0                     
  5186                           ;TAD_TERMINAL.c: 284:     showAllConfigurations();
  5187   000DE0  EC86  F00A         	call	_showAllConfigurations	;wreg free
  5188   000DE4  EF97  F006         	goto	l4146
  5189   000DE8                     l4188:
  5190                           
  5191                           ;TAD_TERMINAL.c: 290:    if (!sending_string) {
  5192   000DE8  501D               	movf	motorTerminal@sending_string^0,w,c
  5193   000DEA  A4D8               	btfss	status,2,c
  5194   000DEC  EFFA  F006         	goto	u3441
  5195   000DF0  EFFC  F006         	goto	u3440
  5196   000DF4                     u3441:
  5197   000DF4  EF78  F007         	goto	l709
  5198   000DF8                     u3440:
  5199   000DF8                     
  5200                           ;TAD_TERMINAL.c: 291:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5201   000DF8  0E33               	movlw	low STR_31
  5202   000DFA  6E51               	movwf	motor_StartSendString@str^0,c
  5203   000DFC  0E1F               	movlw	high STR_31
  5204   000DFE  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5205   000E00  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5206   000E04                     
  5207                           ;TAD_TERMINAL.c: 292:     sending_string = 1;
  5208   000E04  0E01               	movlw	1
  5209   000E06  6E1D               	movwf	motorTerminal@sending_string^0,c
  5210   000E08                     
  5211                           ;TAD_TERMINAL.c: 293:     state = 2;
  5212   000E08  0E02               	movlw	2
  5213   000E0A  6E1E               	movwf	motorTerminal@state^0,c
  5214   000E0C  EF78  F007         	goto	l709
  5215   000E10                     l4196:
  5216                           
  5217                           ;TAD_TERMINAL.c: 298:    if(Terminal_RXAvailable() == 1){
  5218   000E10  ECA3  F00E         	call	_Terminal_RXAvailable	;wreg free
  5219   000E14  06E8               	decf	wreg,f,c
  5220   000E16  A4D8               	btfss	status,2,c
  5221   000E18  EF10  F007         	goto	u3451
  5222   000E1C  EF12  F007         	goto	u3450
  5223   000E20                     u3451:
  5224   000E20  EF78  F007         	goto	l709
  5225   000E24                     u3450:
  5226   000E24                     
  5227                           ;TAD_TERMINAL.c: 299:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 300:   
      +                            static char index = 0;;TAD_TERMINAL.c: 301:     hour[index] = Terminal_ReceiveChar();
  5228   000E24  501C               	movf	motorTerminal@index^0,w,c
  5229   000E26  0F72               	addlw	low motorTerminal@hour
  5230   000E28  6ED9               	movwf	fsr2l,c
  5231   000E2A  6ADA               	clrf	fsr2h,c
  5232   000E2C  ECE8  F00E         	call	_Terminal_ReceiveChar	;wreg free
  5233   000E30  6EDF               	movwf	indf2,c
  5234                           
  5235                           ;TAD_TERMINAL.c: 302:     Terminal_SendChar(hour[index]);
  5236   000E32  501C               	movf	motorTerminal@index^0,w,c
  5237   000E34  0F72               	addlw	low motorTerminal@hour
  5238   000E36  6ED9               	movwf	fsr2l,c
  5239   000E38  6ADA               	clrf	fsr2h,c
  5240   000E3A  50DF               	movf	indf2,w,c
  5241   000E3C  EC64  F00E         	call	_Terminal_SendChar
  5242   000E40                     
  5243                           ;TAD_TERMINAL.c: 303:     index++;
  5244   000E40  2A1C               	incf	motorTerminal@index^0,f,c
  5245   000E42                     
  5246                           ;TAD_TERMINAL.c: 304:     if(index == 4){
  5247   000E42  0E04               	movlw	4
  5248   000E44  181C               	xorwf	motorTerminal@index^0,w,c
  5249   000E46  A4D8               	btfss	status,2,c
  5250   000E48  EF28  F007         	goto	u3461
  5251   000E4C  EF2A  F007         	goto	u3460
  5252   000E50                     u3461:
  5253   000E50  EF78  F007         	goto	l709
  5254   000E54                     u3460:
  5255   000E54                     
  5256                           ;TAD_TERMINAL.c: 305:      saveHourToData(hour);
  5257   000E54  0E72               	movlw	low motorTerminal@hour
  5258   000E56  6E4D               	movwf	saveHourToData@hour^0,c
  5259   000E58  EC82  F00D         	call	_saveHourToData	;wreg free
  5260   000E5C                     
  5261                           ;TAD_TERMINAL.c: 306:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5262   000E5C  0E12               	movlw	low STR_32
  5263   000E5E  6E51               	movwf	motor_StartSendString@str^0,c
  5264   000E60  0E1F               	movlw	high STR_32
  5265   000E62  6E52               	movwf	(motor_StartSendString@str+1)^0,c
  5266   000E64  EC53  F00E         	call	_motor_StartSendString	;wreg free
  5267   000E68                     
  5268                           ;TAD_TERMINAL.c: 307:      sending_string = 1;
  5269   000E68  0E01               	movlw	1
  5270   000E6A  6E1D               	movwf	motorTerminal@sending_string^0,c
  5271   000E6C                     
  5272                           ;TAD_TERMINAL.c: 308:      index = 0;
  5273   000E6C  6A1C               	clrf	motorTerminal@index^0,c
  5274   000E6E  EF97  F006         	goto	l4146
  5275   000E72                     l4216:
  5276   000E72  501E               	movf	motorTerminal@state^0,w,c
  5277                           
  5278                           ; Switch size 1, requested type "simple"
  5279                           ; Number of cases is 15, Range of values is 0 to 40
  5280                           ; switch strategies available:
  5281                           ; Name         Instructions Cycles
  5282                           ; simple_byte           46    24 (average)
  5283                           ;	Chosen strategy is simple_byte
  5284   000E74  0A00               	xorlw	0	; case 0
  5285   000E76  B4D8               	btfsc	status,2,c
  5286   000E78  EF8E  F005         	goto	l4042
  5287   000E7C  0A01               	xorlw	1	; case 1
  5288   000E7E  B4D8               	btfsc	status,2,c
  5289   000E80  EF43  F006         	goto	l4116
  5290   000E84  0A03               	xorlw	3	; case 2
  5291   000E86  B4D8               	btfsc	status,2,c
  5292   000E88  EF08  F007         	goto	l4196
  5293   000E8C  0A08               	xorlw	8	; case 10
  5294   000E8E  B4D8               	btfsc	status,2,c
  5295   000E90  EFB7  F005         	goto	l4060
  5296   000E94  0A01               	xorlw	1	; case 11
  5297   000E96  B4D8               	btfsc	status,2,c
  5298   000E98  EFCB  F005         	goto	l4068
  5299   000E9C  0A07               	xorlw	7	; case 12
  5300   000E9E  B4D8               	btfsc	status,2,c
  5301   000EA0  EFDF  F005         	goto	l4076
  5302   000EA4  0A01               	xorlw	1	; case 13
  5303   000EA6  B4D8               	btfsc	status,2,c
  5304   000EA8  EFF3  F005         	goto	l4084
  5305   000EAC  0A03               	xorlw	3	; case 14
  5306   000EAE  B4D8               	btfsc	status,2,c
  5307   000EB0  EF07  F006         	goto	l4092
  5308   000EB4  0A01               	xorlw	1	; case 15
  5309   000EB6  B4D8               	btfsc	status,2,c
  5310   000EB8  EF1B  F006         	goto	l4100
  5311   000EBC  0A1F               	xorlw	31	; case 16
  5312   000EBE  B4D8               	btfsc	status,2,c
  5313   000EC0  EF2F  F006         	goto	l4108
  5314   000EC4  0A04               	xorlw	4	; case 20
  5315   000EC6  B4D8               	btfsc	status,2,c
  5316   000EC8  EF9A  F006         	goto	l4148
  5317   000ECC  0A01               	xorlw	1	; case 21
  5318   000ECE  B4D8               	btfsc	status,2,c
  5319   000ED0  EFC6  F006         	goto	l4166
  5320   000ED4  0A0C               	xorlw	12	; case 25
  5321   000ED6  B4D8               	btfsc	status,2,c
  5322   000ED8  EFD8  F006         	goto	l4174
  5323   000EDC  0A07               	xorlw	7	; case 30
  5324   000EDE  B4D8               	btfsc	status,2,c
  5325   000EE0  EFE8  F006         	goto	l4182
  5326   000EE4  0A36               	xorlw	54	; case 40
  5327   000EE6  B4D8               	btfsc	status,2,c
  5328   000EE8  EFF4  F006         	goto	l4188
  5329   000EEC  EF78  F007         	goto	l709
  5330   000EF0                     l709:
  5331   000EF0  0012               	return		;funcret
  5332   000EF2                     __end_of_motorTerminal:
  5333                           	callstack 0
  5334                           
  5335 ;; *************** function _showAllConfigurations *****************
  5336 ;; Defined at:
  5337 ;;		line 54 in file "TAD_DATOS.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  j               2    7[COMRAM] int 
  5342 ;;  i               2    9[COMRAM] int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1
  5352 ;;      Params:         0       0       0
  5353 ;;      Locals:         4       0       0
  5354 ;;      Temps:          0       0       0
  5355 ;;      Totals:         4       0       0
  5356 ;;Total ram usage:        4 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; Hardware stack levels required when called: 6
  5359 ;; This function calls:
  5360 ;;		_Terminal_SendChar
  5361 ;;		_Terminal_SendString
  5362 ;; This function is called by:
  5363 ;;		_motorTerminal
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text7
  5368   00150C                     __ptext7:
  5369                           	callstack 0
  5370   00150C                     _showAllConfigurations:
  5371                           	callstack 23
  5372   00150C                     
  5373                           ;TAD_DATOS.c: 55:     for (int i = 0; i < 4; i++) {
  5374   00150C  0E00               	movlw	0
  5375   00150E  6E56               	movwf	(showAllConfigurations@i+1)^0,c
  5376   001510  0E00               	movlw	0
  5377   001512  6E55               	movwf	showAllConfigurations@i^0,c
  5378   001514                     l3916:
  5379                           
  5380                           ;TAD_DATOS.c: 56:         Terminal_SendString("User ");
  5381   001514  0EEC               	movlw	low STR_33
  5382   001516  6E51               	movwf	Terminal_SendString@str^0,c
  5383   001518  0E1F               	movlw	high STR_33
  5384   00151A  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5385   00151C  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5386   001520                     
  5387                           ;TAD_DATOS.c: 57:         Terminal_SendChar('1' + i);
  5388   001520  5055               	movf	showAllConfigurations@i^0,w,c
  5389   001522  0F31               	addlw	49
  5390   001524  EC64  F00E         	call	_Terminal_SendChar
  5391   001528                     
  5392                           ;TAD_DATOS.c: 58:         Terminal_SendString(" Config: ");
  5393   001528  0ED9               	movlw	low STR_34
  5394   00152A  6E51               	movwf	Terminal_SendString@str^0,c
  5395   00152C  0E1F               	movlw	high STR_34
  5396   00152E  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5397   001530  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5398   001534                     
  5399                           ;TAD_DATOS.c: 60:         for (int j = 0; j < 6; j++) {
  5400   001534  0E00               	movlw	0
  5401   001536  6E54               	movwf	(showAllConfigurations@j+1)^0,c
  5402   001538  0E00               	movlw	0
  5403   00153A  6E53               	movwf	showAllConfigurations@j^0,c
  5404   00153C                     l3928:
  5405                           
  5406                           ;TAD_DATOS.c: 62:             Terminal_SendChar('0' + configurations[i][j]);
  5407   00153C  5055               	movf	showAllConfigurations@i^0,w,c
  5408   00153E  0D06               	mullw	6
  5409   001540  50F3               	movf	243,w,c
  5410   001542  0FC0               	addlw	low _configurations
  5411   001544  2453               	addwf	showAllConfigurations@j^0,w,c
  5412   001546  6ED9               	movwf	fsr2l,c
  5413   001548  6ADA               	clrf	fsr2h,c
  5414   00154A  50DF               	movf	indf2,w,c
  5415   00154C  0F30               	addlw	48
  5416   00154E  EC64  F00E         	call	_Terminal_SendChar
  5417   001552                     
  5418                           ;TAD_DATOS.c: 63:             Terminal_SendString(" ");
  5419   001552  0EFA               	movlw	low (STR_13+2)
  5420   001554  6E51               	movwf	Terminal_SendString@str^0,c
  5421   001556  0E1F               	movlw	high (STR_13+2)
  5422   001558  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5423   00155A  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5424   00155E                     
  5425                           ;TAD_DATOS.c: 64:         }
  5426   00155E  4A53               	infsnz	showAllConfigurations@j^0,f,c
  5427   001560  2A54               	incf	(showAllConfigurations@j+1)^0,f,c
  5428   001562  BE54               	btfsc	(showAllConfigurations@j+1)^0,7,c
  5429   001564  EFBD  F00A         	goto	u3201
  5430   001568  5054               	movf	(showAllConfigurations@j+1)^0,w,c
  5431   00156A  E109               	bnz	u3200
  5432   00156C  0E06               	movlw	6
  5433   00156E  5C53               	subwf	showAllConfigurations@j^0,w,c
  5434   001570  A0D8               	btfss	status,0,c
  5435   001572  EFBD  F00A         	goto	u3201
  5436   001576  EFBF  F00A         	goto	u3200
  5437   00157A                     u3201:
  5438   00157A  EF9E  F00A         	goto	l3928
  5439   00157E                     u3200:
  5440   00157E                     
  5441                           ;TAD_DATOS.c: 65:         Terminal_SendString("\r\n");
  5442   00157E  0EC4               	movlw	low (STR_1+15)
  5443   001580  6E51               	movwf	Terminal_SendString@str^0,c
  5444   001582  0E1F               	movlw	high (STR_1+15)
  5445   001584  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5446   001586  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5447   00158A                     
  5448                           ;TAD_DATOS.c: 66:     }
  5449   00158A  4A55               	infsnz	showAllConfigurations@i^0,f,c
  5450   00158C  2A56               	incf	(showAllConfigurations@i+1)^0,f,c
  5451   00158E  BE56               	btfsc	(showAllConfigurations@i+1)^0,7,c
  5452   001590  EFD3  F00A         	goto	u3211
  5453   001594  5056               	movf	(showAllConfigurations@i+1)^0,w,c
  5454   001596  E109               	bnz	u3210
  5455   001598  0E04               	movlw	4
  5456   00159A  5C55               	subwf	showAllConfigurations@i^0,w,c
  5457   00159C  A0D8               	btfss	status,0,c
  5458   00159E  EFD3  F00A         	goto	u3211
  5459   0015A2  EFD5  F00A         	goto	u3210
  5460   0015A6                     u3211:
  5461   0015A6  EF8A  F00A         	goto	l3916
  5462   0015AA                     u3210:
  5463   0015AA  0012               	return		;funcret
  5464   0015AC                     __end_of_showAllConfigurations:
  5465                           	callstack 0
  5466                           
  5467 ;; *************** function _saveHourToData *****************
  5468 ;; Defined at:
  5469 ;;		line 74 in file "TAD_DATOS.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5472 ;;		 -> motorTerminal@hour(4), 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1
  5484 ;;      Params:         1       0       0
  5485 ;;      Locals:         0       0       0
  5486 ;;      Temps:          0       0       0
  5487 ;;      Totals:         1       0       0
  5488 ;;Total ram usage:        1 bytes
  5489 ;; Hardware stack levels used: 1
  5490 ;; Hardware stack levels required when called: 3
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_motorTerminal
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text8
  5499   001B04                     __ptext8:
  5500                           	callstack 0
  5501   001B04                     _saveHourToData:
  5502                           	callstack 26
  5503   001B04                     
  5504                           ;TAD_DATOS.c: 75:     currentTime[0] = hour[0];
  5505   001B04  504D               	movf	saveHourToData@hour^0,w,c
  5506   001B06  6ED9               	movwf	fsr2l,c
  5507   001B08  6ADA               	clrf	fsr2h,c
  5508   001B0A  50DF               	movf	indf2,w,c
  5509   001B0C  6E6E               	movwf	_currentTime^0,c
  5510   001B0E                     
  5511                           ;TAD_DATOS.c: 76:     currentTime[1] = hour[1];
  5512   001B0E  504D               	movf	saveHourToData@hour^0,w,c
  5513   001B10  6ED9               	movwf	fsr2l,c
  5514   001B12  6ADA               	clrf	fsr2h,c
  5515   001B14  0E01               	movlw	1
  5516   001B16  26D9               	addwf	fsr2l,f,c
  5517   001B18  50DF               	movf	indf2,w,c
  5518   001B1A  6E6F               	movwf	(_currentTime+1)^0,c
  5519   001B1C                     
  5520                           ;TAD_DATOS.c: 77:     currentTime[2] = hour[2];
  5521   001B1C  504D               	movf	saveHourToData@hour^0,w,c
  5522   001B1E  6ED9               	movwf	fsr2l,c
  5523   001B20  6ADA               	clrf	fsr2h,c
  5524   001B22  0E02               	movlw	2
  5525   001B24  26D9               	addwf	fsr2l,f,c
  5526   001B26  50DF               	movf	indf2,w,c
  5527   001B28  6E70               	movwf	(_currentTime+2)^0,c
  5528   001B2A                     
  5529                           ;TAD_DATOS.c: 78:     currentTime[3] = hour[3];
  5530   001B2A  504D               	movf	saveHourToData@hour^0,w,c
  5531   001B2C  6ED9               	movwf	fsr2l,c
  5532   001B2E  6ADA               	clrf	fsr2h,c
  5533   001B30  0E03               	movlw	3
  5534   001B32  26D9               	addwf	fsr2l,f,c
  5535   001B34  50DF               	movf	indf2,w,c
  5536   001B36  6E71               	movwf	(_currentTime+3)^0,c
  5537   001B38  0012               	return		;funcret
  5538   001B3A                     __end_of_saveHourToData:
  5539                           	callstack 0
  5540                           
  5541 ;; *************** function _printfUID *****************
  5542 ;; Defined at:
  5543 ;;		line 104 in file "TAD_TERMINAL.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5546 ;;		 -> currentUser(5), motorTerminal@currentUser_910(5), 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  low             1   14[COMRAM] unsigned char 
  5549 ;;  high            1   13[COMRAM] unsigned char 
  5550 ;;  i               2   15[COMRAM] int 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      void 
  5553 ;; Registers used:
  5554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1
  5560 ;;      Params:         1       0       0
  5561 ;;      Locals:         8       0       0
  5562 ;;      Temps:          1       0       0
  5563 ;;      Totals:        10       0       0
  5564 ;;Total ram usage:       10 bytes
  5565 ;; Hardware stack levels used: 1
  5566 ;; Hardware stack levels required when called: 6
  5567 ;; This function calls:
  5568 ;;		_Terminal_SendChar
  5569 ;;		_Terminal_SendString
  5570 ;; This function is called by:
  5571 ;;		_motorTerminal
  5572 ;;		_setCurrentUser
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text9
  5577   001134                     __ptext9:
  5578                           	callstack 0
  5579   001134                     _printfUID:
  5580                           	callstack 22
  5581   001134                     
  5582                           ;TAD_TERMINAL.c: 105:  Terminal_SendString("UID: ");
  5583   001134  0EF2               	movlw	low STR_9
  5584   001136  6E51               	movwf	Terminal_SendString@str^0,c
  5585   001138  0E1F               	movlw	high STR_9
  5586   00113A  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5587   00113C  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5588   001140                     
  5589                           ;TAD_TERMINAL.c: 106:  for (int i = 0; i < 5; i++) {
  5590   001140  0E00               	movlw	0
  5591   001142  6E5C               	movwf	(printfUID@i+1)^0,c
  5592   001144  0E00               	movlw	0
  5593   001146  6E5B               	movwf	printfUID@i^0,c
  5594   001148                     l3582:
  5595                           
  5596                           ;TAD_TERMINAL.c: 108:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  5597   001148  5053               	movf	printfUID@currentUser^0,w,c
  5598   00114A  245B               	addwf	printfUID@i^0,w,c
  5599   00114C  6ED9               	movwf	fsr2l,c
  5600   00114E  6ADA               	clrf	fsr2h,c
  5601   001150  50DF               	movf	indf2,w,c
  5602   001152  6E54               	movwf	??_printfUID^0,c
  5603   001154  3854               	swapf	??_printfUID^0,w,c
  5604   001156  0B0F               	andlw	15
  5605   001158  0B0F               	andlw	15
  5606   00115A  6E59               	movwf	printfUID@high^0,c
  5607   00115C                     
  5608                           ;TAD_TERMINAL.c: 109:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  5609   00115C  0E09               	movlw	9
  5610   00115E  6459               	cpfsgt	printfUID@high^0,c
  5611   001160  EFB4  F008         	goto	u2871
  5612   001164  EFB6  F008         	goto	u2870
  5613   001168                     u2871:
  5614   001168  EFBE  F008         	goto	l3588
  5615   00116C                     u2870:
  5616   00116C  0E37               	movlw	55
  5617   00116E  2459               	addwf	printfUID@high^0,w,c
  5618   001170  6E55               	movwf	_printfUID$875^0,c
  5619   001172  6A56               	clrf	(_printfUID$875+1)^0,c
  5620   001174  0E00               	movlw	0
  5621   001176  2256               	addwfc	(_printfUID$875+1)^0,f,c
  5622   001178  EFC4  F008         	goto	l3590
  5623   00117C                     l3588:
  5624   00117C  0E30               	movlw	48
  5625   00117E  2459               	addwf	printfUID@high^0,w,c
  5626   001180  6E55               	movwf	_printfUID$875^0,c
  5627   001182  6A56               	clrf	(_printfUID$875+1)^0,c
  5628   001184  0E00               	movlw	0
  5629   001186  2256               	addwfc	(_printfUID$875+1)^0,f,c
  5630   001188                     l3590:
  5631   001188  5055               	movf	_printfUID$875^0,w,c
  5632   00118A  EC64  F00E         	call	_Terminal_SendChar
  5633   00118E                     
  5634                           ;TAD_TERMINAL.c: 112:   unsigned char low = currentUser[i] & 0x0F;
  5635   00118E  5053               	movf	printfUID@currentUser^0,w,c
  5636   001190  245B               	addwf	printfUID@i^0,w,c
  5637   001192  6ED9               	movwf	fsr2l,c
  5638   001194  6ADA               	clrf	fsr2h,c
  5639   001196  50DF               	movf	indf2,w,c
  5640   001198  0B0F               	andlw	15
  5641   00119A  6E5A               	movwf	printfUID@low^0,c
  5642   00119C                     
  5643                           ;TAD_TERMINAL.c: 113:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  5644   00119C  0E09               	movlw	9
  5645   00119E  645A               	cpfsgt	printfUID@low^0,c
  5646   0011A0  EFD4  F008         	goto	u2881
  5647   0011A4  EFD6  F008         	goto	u2880
  5648   0011A8                     u2881:
  5649   0011A8  EFDE  F008         	goto	l3598
  5650   0011AC                     u2880:
  5651   0011AC  0E37               	movlw	55
  5652   0011AE  245A               	addwf	printfUID@low^0,w,c
  5653   0011B0  6E57               	movwf	_printfUID$877^0,c
  5654   0011B2  6A58               	clrf	(_printfUID$877+1)^0,c
  5655   0011B4  0E00               	movlw	0
  5656   0011B6  2258               	addwfc	(_printfUID$877+1)^0,f,c
  5657   0011B8  EFE4  F008         	goto	l3600
  5658   0011BC                     l3598:
  5659   0011BC  0E30               	movlw	48
  5660   0011BE  245A               	addwf	printfUID@low^0,w,c
  5661   0011C0  6E57               	movwf	_printfUID$877^0,c
  5662   0011C2  6A58               	clrf	(_printfUID$877+1)^0,c
  5663   0011C4  0E00               	movlw	0
  5664   0011C6  2258               	addwfc	(_printfUID$877+1)^0,f,c
  5665   0011C8                     l3600:
  5666   0011C8  5057               	movf	_printfUID$877^0,w,c
  5667   0011CA  EC64  F00E         	call	_Terminal_SendChar
  5668   0011CE                     
  5669                           ;TAD_TERMINAL.c: 116:   if (i < 4) Terminal_SendString("-");
  5670   0011CE  BE5C               	btfsc	(printfUID@i+1)^0,7,c
  5671   0011D0  EFF5  F008         	goto	u2890
  5672   0011D4  505C               	movf	(printfUID@i+1)^0,w,c
  5673   0011D6  E107               	bnz	u2891
  5674   0011D8  0E04               	movlw	4
  5675   0011DA  5C5B               	subwf	printfUID@i^0,w,c
  5676   0011DC  B0D8               	btfsc	status,0,c
  5677   0011DE  EFF3  F008         	goto	u2891
  5678   0011E2  EFF5  F008         	goto	u2890
  5679   0011E6                     u2891:
  5680   0011E6  EFFB  F008         	goto	l3606
  5681   0011EA                     u2890:
  5682   0011EA  0EFC               	movlw	low STR_10
  5683   0011EC  6E51               	movwf	Terminal_SendString@str^0,c
  5684   0011EE  0E1F               	movlw	high STR_10
  5685   0011F0  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5686   0011F2  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5687   0011F6                     l3606:
  5688                           
  5689                           ;TAD_TERMINAL.c: 117:  }
  5690   0011F6  4A5B               	infsnz	printfUID@i^0,f,c
  5691   0011F8  2A5C               	incf	(printfUID@i+1)^0,f,c
  5692   0011FA  BE5C               	btfsc	(printfUID@i+1)^0,7,c
  5693   0011FC  EF09  F009         	goto	u2901
  5694   001200  505C               	movf	(printfUID@i+1)^0,w,c
  5695   001202  E109               	bnz	u2900
  5696   001204  0E05               	movlw	5
  5697   001206  5C5B               	subwf	printfUID@i^0,w,c
  5698   001208  A0D8               	btfss	status,0,c
  5699   00120A  EF09  F009         	goto	u2901
  5700   00120E  EF0B  F009         	goto	u2900
  5701   001212                     u2901:
  5702   001212  EFA4  F008         	goto	l3582
  5703   001216                     u2900:
  5704   001216                     
  5705                           ;TAD_TERMINAL.c: 118:  Terminal_SendString("\r\n");
  5706   001216  0EC4               	movlw	low (STR_1+15)
  5707   001218  6E51               	movwf	Terminal_SendString@str^0,c
  5708   00121A  0E1F               	movlw	high (STR_1+15)
  5709   00121C  6E52               	movwf	(Terminal_SendString@str+1)^0,c
  5710   00121E  EC9D  F00D         	call	_Terminal_SendString	;wreg free
  5711   001222  0012               	return		;funcret
  5712   001224                     __end_of_printfUID:
  5713                           	callstack 0
  5714                           
  5715 ;; *************** function _Terminal_SendString *****************
  5716 ;; Defined at:
  5717 ;;		line 53 in file "TAD_TERMINAL.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5720 ;;		 -> STR_38(2), STR_37(22), STR_36(3), STR_35(2), 
  5721 ;;		 -> STR_34(10), STR_33(6), STR_14(3), STR_13(4), 
  5722 ;;		 -> STR_12(3), STR_11(3), STR_10(2), STR_9(6), 
  5723 ;;		 -> STR_8(9), STR_7(33), STR_6(29), STR_5(27), 
  5724 ;;		 -> STR_4(19), STR_3(18), STR_2(18), STR_1(18), 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1
  5736 ;;      Params:         2       0       0
  5737 ;;      Locals:         0       0       0
  5738 ;;      Temps:          0       0       0
  5739 ;;      Totals:         2       0       0
  5740 ;;Total ram usage:        2 bytes
  5741 ;; Hardware stack levels used: 1
  5742 ;; Hardware stack levels required when called: 5
  5743 ;; This function calls:
  5744 ;;		_Terminal_SendChar
  5745 ;; This function is called by:
  5746 ;;		_printfUID
  5747 ;;		_printLedConfig
  5748 ;;		_showAllConfigurations
  5749 ;;		_setCurrentUser
  5750 ;;		_showMenu
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text10
  5755   001B3A                     __ptext10:
  5756                           	callstack 0
  5757   001B3A                     _Terminal_SendString:
  5758                           	callstack 22
  5759   001B3A                     
  5760                           ;TAD_TERMINAL.c: 54:  while (*str) {
  5761   001B3A  EFA9  F00D         	goto	l3510
  5762   001B3E                     l3506:
  5763                           
  5764                           ;TAD_TERMINAL.c: 55:   Terminal_SendChar(*str++);
  5765   001B3E  C051  FFF6         	movff	Terminal_SendString@str,tblptrl
  5766   001B42  C052  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5767   001B46                     	if	0	;tblptru may be non-zero
  5768   001B46                     	endif
  5769   001B46                     	if	0	;tblptru may be non-zero
  5770   001B46                     	endif
  5771   001B46  0008               	tblrd		*
  5772   001B48  50F5               	movf	tablat,w,c
  5773   001B4A  EC64  F00E         	call	_Terminal_SendChar
  5774   001B4E  4A51               	infsnz	Terminal_SendString@str^0,f,c
  5775   001B50  2A52               	incf	(Terminal_SendString@str+1)^0,f,c
  5776   001B52                     l3510:
  5777                           
  5778                           ;TAD_TERMINAL.c: 54:  while (*str) {
  5779   001B52  C051  FFF6         	movff	Terminal_SendString@str,tblptrl
  5780   001B56  C052  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5781   001B5A                     	if	0	;tblptru may be non-zero
  5782   001B5A                     	endif
  5783   001B5A                     	if	0	;tblptru may be non-zero
  5784   001B5A                     	endif
  5785   001B5A  0008               	tblrd		*
  5786   001B5C  50F5               	movf	tablat,w,c
  5787   001B5E  0900               	iorlw	0
  5788   001B60  A4D8               	btfss	status,2,c
  5789   001B62  EFB5  F00D         	goto	u2661
  5790   001B66  EFB7  F00D         	goto	u2660
  5791   001B6A                     u2661:
  5792   001B6A  EF9F  F00D         	goto	l3506
  5793   001B6E                     u2660:
  5794   001B6E  0012               	return		;funcret
  5795   001B70                     __end_of_Terminal_SendString:
  5796                           	callstack 0
  5797                           
  5798 ;; *************** function _Terminal_SendChar *****************
  5799 ;; Defined at:
  5800 ;;		line 30 in file "TAD_TERMINAL.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  c               1    wreg     unsigned char 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  c               1    4[COMRAM] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1
  5814 ;;      Params:         0       0       0
  5815 ;;      Locals:         1       0       0
  5816 ;;      Temps:          0       0       0
  5817 ;;      Totals:         1       0       0
  5818 ;;Total ram usage:        1 bytes
  5819 ;; Hardware stack levels used: 1
  5820 ;; Hardware stack levels required when called: 4
  5821 ;; This function calls:
  5822 ;;		_Terminal_TXAvailable
  5823 ;; This function is called by:
  5824 ;;		_Terminal_SendString
  5825 ;;		_printfUID
  5826 ;;		_printLedConfig
  5827 ;;		_motorTerminal
  5828 ;;		_showAllConfigurations
  5829 ;;		_motor_datos
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text11
  5834   001CC8                     __ptext11:
  5835                           	callstack 0
  5836   001CC8                     _Terminal_SendChar:
  5837                           	callstack 22
  5838                           
  5839                           ;incstack = 0
  5840                           ;Terminal_SendChar@c stored from wreg
  5841   001CC8  6E50               	movwf	Terminal_SendChar@c^0,c
  5842   001CCA                     l3470:
  5843   001CCA  EC73  F00E         	call	_Terminal_TXAvailable	;wreg free
  5844   001CCE  504D               	movf	?_Terminal_TXAvailable^0,w,c
  5845   001CD0  104E               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5846   001CD2  B4D8               	btfsc	status,2,c
  5847   001CD4  EF6E  F00E         	goto	u2631
  5848   001CD8  EF70  F00E         	goto	u2630
  5849   001CDC                     u2631:
  5850   001CDC  EF65  F00E         	goto	l3470
  5851   001CE0                     u2630:
  5852   001CE0                     
  5853                           ;TAD_TERMINAL.c: 32:  TXREG = c;
  5854   001CE0  C050  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5855   001CE4  0012               	return		;funcret
  5856   001CE6                     __end_of_Terminal_SendChar:
  5857                           	callstack 0
  5858                           
  5859 ;; *************** function _motor_StartSendString *****************
  5860 ;; Defined at:
  5861 ;;		line 82 in file "TAD_TERMINAL.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5864 ;;		 -> STR_32(33), STR_31(33), STR_30(3), STR_29(33), 
  5865 ;;		 -> STR_28(6), STR_27(33), STR_26(3), STR_25(3), 
  5866 ;;		 -> STR_24(3), STR_23(9), STR_22(33), STR_21(29), 
  5867 ;;		 -> STR_20(27), STR_19(19), STR_18(18), STR_17(18), 
  5868 ;;		 -> STR_16(18), STR_15(18), 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1
  5880 ;;      Params:         2       0       0
  5881 ;;      Locals:         0       0       0
  5882 ;;      Temps:          0       0       0
  5883 ;;      Totals:         2       0       0
  5884 ;;Total ram usage:        2 bytes
  5885 ;; Hardware stack levels used: 1
  5886 ;; Hardware stack levels required when called: 6
  5887 ;; This function calls:
  5888 ;;		_motor_SendString
  5889 ;; This function is called by:
  5890 ;;		_motorTerminal
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text12
  5895   001CA6                     __ptext12:
  5896                           	callstack 0
  5897   001CA6                     _motor_StartSendString:
  5898                           	callstack 23
  5899   001CA6                     
  5900                           ;TAD_TERMINAL.c: 83:     if (motor_SendString() == 1) {
  5901   001CA6  ECF1  F00B         	call	_motor_SendString	;wreg free
  5902   001CAA  06E8               	decf	wreg,f,c
  5903   001CAC  A4D8               	btfss	status,2,c
  5904   001CAE  EF5B  F00E         	goto	u3191
  5905   001CB2  EF5D  F00E         	goto	u3190
  5906   001CB6                     u3191:
  5907   001CB6  EF63  F00E         	goto	l669
  5908   001CBA                     u3190:
  5909   001CBA                     
  5910                           ;TAD_TERMINAL.c: 84:         str_ptr = str;
  5911   001CBA  C051  F00F         	movff	motor_StartSendString@str,_str_ptr
  5912   001CBE  C052  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  5913   001CC2                     
  5914                           ;TAD_TERMINAL.c: 85:         state_str = 1;
  5915   001CC2  0E01               	movlw	1
  5916   001CC4  6E20               	movwf	_state_str^0,c
  5917   001CC6                     l669:
  5918   001CC6  0012               	return		;funcret
  5919   001CC8                     __end_of_motor_StartSendString:
  5920                           	callstack 0
  5921                           
  5922 ;; *************** function _motor_SendString *****************
  5923 ;; Defined at:
  5924 ;;		line 60 in file "TAD_TERMINAL.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;		None
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;		None
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  1    wreg      unsigned char 
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1
  5938 ;;      Params:         0       0       0
  5939 ;;      Locals:         0       0       0
  5940 ;;      Temps:          0       0       0
  5941 ;;      Totals:         0       0       0
  5942 ;;Total ram usage:        0 bytes
  5943 ;; Hardware stack levels used: 1
  5944 ;; Hardware stack levels required when called: 5
  5945 ;; This function calls:
  5946 ;;		_motor_SendChar
  5947 ;; This function is called by:
  5948 ;;		_motor_StartSendString
  5949 ;;		_motorTerminal
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text13
  5954   0017E2                     __ptext13:
  5955                           	callstack 0
  5956   0017E2                     _motor_SendString:
  5957                           	callstack 23
  5958   0017E2                     
  5959                           ;TAD_TERMINAL.c: 61:     switch(state_str) {
  5960   0017E2  EF1C  F00C         	goto	l3568
  5961   0017E6                     l3546:
  5962                           
  5963                           ;TAD_TERMINAL.c: 63:             return 1;
  5964   0017E6  0E01               	movlw	1
  5965   0017E8  EF27  F00C         	goto	l661
  5966   0017EC                     l3550:
  5967                           
  5968                           ;TAD_TERMINAL.c: 66:             if (*str_ptr == 0) {
  5969   0017EC  C00F  FFF6         	movff	_str_ptr,tblptrl
  5970   0017F0  C010  FFF7         	movff	_str_ptr+1,tblptrh
  5971   0017F4                     	if	0	;tblptru may be non-zero
  5972   0017F4                     	endif
  5973   0017F4                     	if	0	;tblptru may be non-zero
  5974   0017F4                     	endif
  5975   0017F4  0008               	tblrd		*
  5976   0017F6  50F5               	movf	tablat,w,c
  5977   0017F8  0900               	iorlw	0
  5978   0017FA  A4D8               	btfss	status,2,c
  5979   0017FC  EF02  F00C         	goto	u2851
  5980   001800  EF04  F00C         	goto	u2850
  5981   001804                     u2851:
  5982   001804  EF07  F00C         	goto	l3558
  5983   001808                     u2850:
  5984   001808                     
  5985                           ;TAD_TERMINAL.c: 67:                 state_str = 0;
  5986   001808  6A20               	clrf	_state_str^0,c
  5987   00180A  EFF3  F00B         	goto	l3546
  5988   00180E                     l3558:
  5989                           
  5990                           ;TAD_TERMINAL.c: 72:             if (motor_SendChar(*str_ptr)) {
  5991   00180E  C00F  FFF6         	movff	_str_ptr,tblptrl
  5992   001812  C010  FFF7         	movff	_str_ptr+1,tblptrh
  5993   001816                     	if	0	;tblptru may be non-zero
  5994   001816                     	endif
  5995   001816                     	if	0	;tblptru may be non-zero
  5996   001816                     	endif
  5997   001816  0008               	tblrd		*
  5998   001818  50F5               	movf	tablat,w,c
  5999   00181A  EC1C  F00E         	call	_motor_SendChar
  6000   00181E  0900               	iorlw	0
  6001   001820  B4D8               	btfsc	status,2,c
  6002   001822  EF15  F00C         	goto	u2861
  6003   001826  EF17  F00C         	goto	u2860
  6004   00182A                     u2861:
  6005   00182A  EF19  F00C         	goto	l3562
  6006   00182E                     u2860:
  6007   00182E                     
  6008                           ;TAD_TERMINAL.c: 73:                 str_ptr++;
  6009   00182E  4A0F               	infsnz	_str_ptr^0,f,c
  6010   001830  2A10               	incf	(_str_ptr+1)^0,f,c
  6011   001832                     l3562:
  6012                           
  6013                           ;TAD_TERMINAL.c: 75:             return 0;
  6014   001832  0E00               	movlw	0
  6015   001834  EF27  F00C         	goto	l661
  6016   001838                     l3568:
  6017   001838  5020               	movf	_state_str^0,w,c
  6018                           
  6019                           ; Switch size 1, requested type "simple"
  6020                           ; Number of cases is 2, Range of values is 0 to 1
  6021                           ; switch strategies available:
  6022                           ; Name         Instructions Cycles
  6023                           ; simple_byte            7     4 (average)
  6024                           ;	Chosen strategy is simple_byte
  6025   00183A  0A00               	xorlw	0	; case 0
  6026   00183C  B4D8               	btfsc	status,2,c
  6027   00183E  EFF3  F00B         	goto	l3546
  6028   001842  0A01               	xorlw	1	; case 1
  6029   001844  B4D8               	btfsc	status,2,c
  6030   001846  EFF6  F00B         	goto	l3550
  6031   00184A  EF19  F00C         	goto	l3562
  6032   00184E                     l661:
  6033   00184E  0012               	return		;funcret
  6034   001850                     __end_of_motor_SendString:
  6035                           	callstack 0
  6036                           
  6037 ;; *************** function _motor_SendChar *****************
  6038 ;; Defined at:
  6039 ;;		line 36 in file "TAD_TERMINAL.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  c               1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  c               1    4[COMRAM] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      unsigned char 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1
  6053 ;;      Params:         0       0       0
  6054 ;;      Locals:         1       0       0
  6055 ;;      Temps:          0       0       0
  6056 ;;      Totals:         1       0       0
  6057 ;;Total ram usage:        1 bytes
  6058 ;; Hardware stack levels used: 1
  6059 ;; Hardware stack levels required when called: 4
  6060 ;; This function calls:
  6061 ;;		_Terminal_TXAvailable
  6062 ;; This function is called by:
  6063 ;;		_motor_SendString
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text14
  6068   001C38                     __ptext14:
  6069                           	callstack 0
  6070   001C38                     _motor_SendChar:
  6071                           	callstack 23
  6072                           
  6073                           ;incstack = 0
  6074                           ;motor_SendChar@c stored from wreg
  6075   001C38  6E50               	movwf	motor_SendChar@c^0,c
  6076   001C3A                     
  6077                           ;TAD_TERMINAL.c: 38:     if (Terminal_TXAvailable() == 0) {
  6078   001C3A  EC73  F00E         	call	_Terminal_TXAvailable	;wreg free
  6079   001C3E  504D               	movf	?_Terminal_TXAvailable^0,w,c
  6080   001C40  104E               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6081   001C42  A4D8               	btfss	status,2,c
  6082   001C44  EF26  F00E         	goto	u2651
  6083   001C48  EF28  F00E         	goto	u2650
  6084   001C4C                     u2651:
  6085   001C4C  EF2B  F00E         	goto	l646
  6086   001C50                     u2650:
  6087   001C50                     
  6088                           ;TAD_TERMINAL.c: 39:         return 0;
  6089   001C50  0E00               	movlw	0
  6090   001C52  EF2E  F00E         	goto	l647
  6091   001C56                     l646:
  6092                           
  6093                           ;TAD_TERMINAL.c: 43:     TXREG = c;
  6094   001C56  C050  FFAD         	movff	motor_SendChar@c,4013	;volatile
  6095   001C5A                     
  6096                           ;TAD_TERMINAL.c: 44:     return 1;
  6097   001C5A  0E01               	movlw	1
  6098   001C5C                     l647:
  6099   001C5C  0012               	return		;funcret
  6100   001C5E                     __end_of_motor_SendChar:
  6101                           	callstack 0
  6102                           
  6103 ;; *************** function _Terminal_TXAvailable *****************
  6104 ;; Defined at:
  6105 ;;		line 20 in file "TAD_TERMINAL.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  2    1[COMRAM] int 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1
  6119 ;;      Params:         2       0       0
  6120 ;;      Locals:         0       0       0
  6121 ;;      Temps:          1       0       0
  6122 ;;      Totals:         3       0       0
  6123 ;;Total ram usage:        3 bytes
  6124 ;; Hardware stack levels used: 1
  6125 ;; Hardware stack levels required when called: 3
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_Terminal_SendChar
  6130 ;;		_motor_SendChar
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text15
  6135   001CE6                     __ptext15:
  6136                           	callstack 0
  6137   001CE6                     _Terminal_TXAvailable:
  6138                           	callstack 22
  6139   001CE6                     
  6140                           ;TAD_TERMINAL.c: 21:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  6141   001CE6  B89E               	btfsc	158,4,c	;volatile
  6142   001CE8  EF78  F00E         	goto	u2511
  6143   001CEC  EF7C  F00E         	goto	u2510
  6144   001CF0                     u2511:
  6145   001CF0  6A4F               	clrf	??_Terminal_TXAvailable^0,c
  6146   001CF2  2A4F               	incf	??_Terminal_TXAvailable^0,f,c
  6147   001CF4  EF7D  F00E         	goto	u2518
  6148   001CF8                     u2510:
  6149   001CF8  6A4F               	clrf	??_Terminal_TXAvailable^0,c
  6150   001CFA                     u2518:
  6151   001CFA  504F               	movf	??_Terminal_TXAvailable^0,w,c
  6152   001CFC  6E4D               	movwf	?_Terminal_TXAvailable^0,c
  6153   001CFE  6A4E               	clrf	(?_Terminal_TXAvailable+1)^0,c
  6154   001D00  0012               	return		;funcret
  6155   001D02                     __end_of_Terminal_TXAvailable:
  6156                           	callstack 0
  6157                           
  6158 ;; *************** function _getActualUID *****************
  6159 ;; Defined at:
  6160 ;;		line 35 in file "TAD_DATOS.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6163 ;;		 -> motorTerminal@currentUser_910(5), motorTerminal@currentUser(5), NULL(0), motor_RFID@currentUser(5), 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1
  6175 ;;      Params:         1       0       0
  6176 ;;      Locals:         0       0       0
  6177 ;;      Temps:          0       0       0
  6178 ;;      Totals:         1       0       0
  6179 ;;Total ram usage:        1 bytes
  6180 ;; Hardware stack levels used: 1
  6181 ;; Hardware stack levels required when called: 3
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_motor_RFID
  6186 ;;		_motorTerminal
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text16
  6191   0015AC                     __ptext16:
  6192                           	callstack 0
  6193   0015AC                     _getActualUID:
  6194                           	callstack 26
  6195   0015AC                     
  6196                           ;TAD_DATOS.c: 36:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  6197   0015AC  5044               	movf	_currentUser^0,w,c
  6198   0015AE  A4D8               	btfss	status,2,c
  6199   0015B0  EFDC  F00A         	goto	u3101
  6200   0015B4  EFDE  F00A         	goto	u3100
  6201   0015B8                     u3101:
  6202   0015B8  EF00  F00B         	goto	l3804
  6203   0015BC                     u3100:
  6204   0015BC  5045               	movf	(_currentUser+1)^0,w,c
  6205   0015BE  A4D8               	btfss	status,2,c
  6206   0015C0  EFE4  F00A         	goto	u3111
  6207   0015C4  EFE6  F00A         	goto	u3110
  6208   0015C8                     u3111:
  6209   0015C8  EF00  F00B         	goto	l3804
  6210   0015CC                     u3110:
  6211   0015CC  5046               	movf	(_currentUser+2)^0,w,c
  6212   0015CE  A4D8               	btfss	status,2,c
  6213   0015D0  EFEC  F00A         	goto	u3121
  6214   0015D4  EFEE  F00A         	goto	u3120
  6215   0015D8                     u3121:
  6216   0015D8  EF00  F00B         	goto	l3804
  6217   0015DC                     u3120:
  6218   0015DC  5047               	movf	(_currentUser+3)^0,w,c
  6219   0015DE  A4D8               	btfss	status,2,c
  6220   0015E0  EFF4  F00A         	goto	u3131
  6221   0015E4  EFF6  F00A         	goto	u3130
  6222   0015E8                     u3131:
  6223   0015E8  EF00  F00B         	goto	l3804
  6224   0015EC                     u3130:
  6225   0015EC  5048               	movf	(_currentUser+4)^0,w,c
  6226   0015EE  A4D8               	btfss	status,2,c
  6227   0015F0  EFFC  F00A         	goto	u3141
  6228   0015F4  EFFE  F00A         	goto	u3140
  6229   0015F8                     u3141:
  6230   0015F8  EF00  F00B         	goto	l3804
  6231   0015FC                     u3140:
  6232   0015FC                     
  6233                           ;TAD_DATOS.c: 38:  }
  6234   0015FC  EF21  F00B         	goto	l789
  6235   001600                     l3804:
  6236                           
  6237                           ;TAD_DATOS.c: 40:   UID[0] = currentUser[0];
  6238   001600  504D               	movf	getActualUID@UID^0,w,c
  6239   001602  6ED9               	movwf	fsr2l,c
  6240   001604  6ADA               	clrf	fsr2h,c
  6241   001606  C044  FFDF         	movff	_currentUser,indf2
  6242   00160A                     
  6243                           ;TAD_DATOS.c: 41:   UID[1] = currentUser[1];
  6244   00160A  504D               	movf	getActualUID@UID^0,w,c
  6245   00160C  6ED9               	movwf	fsr2l,c
  6246   00160E  6ADA               	clrf	fsr2h,c
  6247   001610  0E01               	movlw	1
  6248   001612  26D9               	addwf	fsr2l,f,c
  6249   001614  C045  FFDF         	movff	_currentUser+1,indf2
  6250   001618                     
  6251                           ;TAD_DATOS.c: 42:   UID[2] = currentUser[2];
  6252   001618  504D               	movf	getActualUID@UID^0,w,c
  6253   00161A  6ED9               	movwf	fsr2l,c
  6254   00161C  6ADA               	clrf	fsr2h,c
  6255   00161E  0E02               	movlw	2
  6256   001620  26D9               	addwf	fsr2l,f,c
  6257   001622  C046  FFDF         	movff	_currentUser+2,indf2
  6258   001626                     
  6259                           ;TAD_DATOS.c: 43:   UID[3] = currentUser[3];
  6260   001626  504D               	movf	getActualUID@UID^0,w,c
  6261   001628  6ED9               	movwf	fsr2l,c
  6262   00162A  6ADA               	clrf	fsr2h,c
  6263   00162C  0E03               	movlw	3
  6264   00162E  26D9               	addwf	fsr2l,f,c
  6265   001630  C047  FFDF         	movff	_currentUser+3,indf2
  6266   001634                     
  6267                           ;TAD_DATOS.c: 44:   UID[4] = currentUser[4];
  6268   001634  504D               	movf	getActualUID@UID^0,w,c
  6269   001636  6ED9               	movwf	fsr2l,c
  6270   001638  6ADA               	clrf	fsr2h,c
  6271   00163A  0E04               	movlw	4
  6272   00163C  26D9               	addwf	fsr2l,f,c
  6273   00163E  C048  FFDF         	movff	_currentUser+4,indf2
  6274   001642                     l789:
  6275   001642  0012               	return		;funcret
  6276   001644                     __end_of_getActualUID:
  6277                           	callstack 0
  6278                           
  6279 ;; *************** function _Terminal_ReceiveChar *****************
  6280 ;; Defined at:
  6281 ;;		line 48 in file "TAD_TERMINAL.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      unsigned char 
  6288 ;; Registers used:
  6289 ;;		wreg, status,2
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1
  6295 ;;      Params:         0       0       0
  6296 ;;      Locals:         0       0       0
  6297 ;;      Temps:          0       0       0
  6298 ;;      Totals:         0       0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used: 1
  6301 ;; Hardware stack levels required when called: 3
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_motorTerminal
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text17
  6310   001DD0                     __ptext17:
  6311                           	callstack 0
  6312   001DD0                     _Terminal_ReceiveChar:
  6313                           	callstack 26
  6314   001DD0                     
  6315                           ;TAD_TERMINAL.c: 49:  return RCREG;
  6316   001DD0  50AE               	movf	174,w,c	;volatile
  6317   001DD2  0012               	return		;funcret
  6318   001DD4                     __end_of_Terminal_ReceiveChar:
  6319                           	callstack 0
  6320                           
  6321 ;; *************** function _Terminal_RXAvailable *****************
  6322 ;; Defined at:
  6323 ;;		line 25 in file "TAD_TERMINAL.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;		None
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      unsigned char 
  6330 ;; Registers used:
  6331 ;;		wreg
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1
  6337 ;;      Params:         0       0       0
  6338 ;;      Locals:         0       0       0
  6339 ;;      Temps:          0       0       0
  6340 ;;      Totals:         0       0       0
  6341 ;;Total ram usage:        0 bytes
  6342 ;; Hardware stack levels used: 1
  6343 ;; Hardware stack levels required when called: 3
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_motorTerminal
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text18
  6352   001D46                     __ptext18:
  6353                           	callstack 0
  6354   001D46                     _Terminal_RXAvailable:
  6355                           	callstack 26
  6356   001D46                     
  6357                           ;TAD_TERMINAL.c: 26:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  6358   001D46  BA9E               	btfsc	158,5,c	;volatile
  6359   001D48  EFA8  F00E         	goto	u781
  6360   001D4C  EFAB  F00E         	goto	u780
  6361   001D50                     u781:
  6362   001D50  0E01               	movlw	1
  6363   001D52  EFAC  F00E         	goto	u786
  6364   001D56                     u780:
  6365   001D56  0E00               	movlw	0
  6366   001D58                     u786:
  6367   001D58  0012               	return		;funcret
  6368   001D5A                     __end_of_Terminal_RXAvailable:
  6369                           	callstack 0
  6370                           
  6371 ;; *************** function _initTeclado *****************
  6372 ;; Defined at:
  6373 ;;		line 13 in file "TAD_TECLADO.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1
  6387 ;;      Params:         0       0       0
  6388 ;;      Locals:         0       0       0
  6389 ;;      Temps:          0       0       0
  6390 ;;      Totals:         0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used: 1
  6393 ;; Hardware stack levels required when called: 4
  6394 ;; This function calls:
  6395 ;;		_TI_NewTimer
  6396 ;;		_initPortsTeclado
  6397 ;; This function is called by:
  6398 ;;		_main
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text19
  6403   001D1A                     __ptext19:
  6404                           	callstack 0
  6405   001D1A                     _initTeclado:
  6406                           	callstack 26
  6407   001D1A                     
  6408                           ;TAD_TECLADO.c: 14:  initPortsTeclado();
  6409   001D1A  ECE0  F00E         	call	_initPortsTeclado	;wreg free
  6410   001D1E                     
  6411                           ;TAD_TECLADO.c: 15:     Filas = 0x00;
  6412   001D1E  6A3D               	clrf	_Filas^0,c
  6413   001D20                     
  6414                           ;TAD_TECLADO.c: 16:     Columnas = 0x00;
  6415   001D20  6A3C               	clrf	_Columnas^0,c
  6416   001D22                     
  6417                           ;TAD_TECLADO.c: 17:     tecla = 0;
  6418   001D22  6A3B               	clrf	_tecla^0,c
  6419   001D24                     
  6420                           ;TAD_TECLADO.c: 18:  state = 0;
  6421   001D24  6A3A               	clrf	_state^0,c
  6422   001D26                     
  6423                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  6424   001D26  0E4B               	movlw	low _timer
  6425   001D28  6E4D               	movwf	TI_NewTimer@TimerHandle^0,c
  6426   001D2A  EC87  F00C         	call	_TI_NewTimer	;wreg free
  6427   001D2E  0012               	return		;funcret
  6428   001D30                     __end_of_initTeclado:
  6429                           	callstack 0
  6430                           
  6431 ;; *************** function _initPortsTeclado *****************
  6432 ;; Defined at:
  6433 ;;		line 22 in file "TAD_TECLADO.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1
  6447 ;;      Params:         0       0       0
  6448 ;;      Locals:         0       0       0
  6449 ;;      Temps:          0       0       0
  6450 ;;      Totals:         0       0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used: 1
  6453 ;; Hardware stack levels required when called: 3
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_initTeclado
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text20
  6462   001DC0                     __ptext20:
  6463                           	callstack 0
  6464   001DC0                     _initPortsTeclado:
  6465                           	callstack 26
  6466   001DC0                     
  6467                           ;TAD_TECLADO.c: 25:  TRISD = 0x0F;
  6468   001DC0  0E0F               	movlw	15
  6469   001DC2  6E95               	movwf	149,c	;volatile
  6470   001DC4                     
  6471                           ;TAD_TECLADO.c: 26:  LATD = 0x00;
  6472   001DC4  6A8C               	clrf	140,c	;volatile
  6473   001DC6  0012               	return		;funcret
  6474   001DC8                     __end_of_initPortsTeclado:
  6475                           	callstack 0
  6476                           
  6477 ;; *************** function _initRFID *****************
  6478 ;; Defined at:
  6479 ;;		line 250 in file "TAD_RFID.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      void 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1
  6493 ;;      Params:         0       0       0
  6494 ;;      Locals:         0       0       0
  6495 ;;      Temps:          0       0       0
  6496 ;;      Totals:         0       0       0
  6497 ;;Total ram usage:        0 bytes
  6498 ;; Hardware stack levels used: 1
  6499 ;; Hardware stack levels required when called: 8
  6500 ;; This function calls:
  6501 ;;		_InitPortDirections
  6502 ;;		_MFRC522_Init
  6503 ;; This function is called by:
  6504 ;;		_main
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text21
  6509   001DA4                     __ptext21:
  6510                           	callstack 0
  6511   001DA4                     _initRFID:
  6512                           	callstack 22
  6513   001DA4                     
  6514                           ;TAD_RFID.c: 251:     InitPortDirections();
  6515   001DA4  ECC6  F00E         	call	_InitPortDirections	;wreg free
  6516   001DA8                     
  6517                           ;TAD_RFID.c: 252:     MFRC522_Init();
  6518   001DA8  ECB2  F00C         	call	_MFRC522_Init	;wreg free
  6519   001DAC  0012               	return		;funcret
  6520   001DAE                     __end_of_initRFID:
  6521                           	callstack 0
  6522                           
  6523 ;; *************** function _MFRC522_Init *****************
  6524 ;; Defined at:
  6525 ;;		line 131 in file "TAD_RFID.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1
  6539 ;;      Params:         0       0       0
  6540 ;;      Locals:         0       0       0
  6541 ;;      Temps:          0       0       0
  6542 ;;      Totals:         0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used: 1
  6545 ;; Hardware stack levels required when called: 7
  6546 ;; This function calls:
  6547 ;;		_MFRC522_AntennaControl
  6548 ;;		_MFRC522_Reset
  6549 ;;		_MFRC522_Wr
  6550 ;; This function is called by:
  6551 ;;		_initRFID
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text22
  6556   001964                     __ptext22:
  6557                           	callstack 0
  6558   001964                     _MFRC522_Init:
  6559                           	callstack 22
  6560   001964                     
  6561                           ;TAD_RFID.c: 132:     LATCbits.LATC3 = 1;
  6562   001964  868B               	bsf	139,3,c	;volatile
  6563                           
  6564                           ;TAD_RFID.c: 133:     LATCbits.LATC4 = 1;
  6565   001966  888B               	bsf	139,4,c	;volatile
  6566   001968                     
  6567                           ;TAD_RFID.c: 135:     MFRC522_Reset();
  6568   001968  EC05  F00E         	call	_MFRC522_Reset	;wreg free
  6569                           
  6570                           ;TAD_RFID.c: 136:     MFRC522_Wr(0x2A, 0x8D);
  6571   00196C  0E8D               	movlw	141
  6572   00196E  6E4F               	movwf	MFRC522_Wr@value^0,c
  6573   001970  0E2A               	movlw	42
  6574   001972  ECE1  F009         	call	_MFRC522_Wr
  6575                           
  6576                           ;TAD_RFID.c: 137:     MFRC522_Wr(0x2B, 0x3E);
  6577   001976  0E3E               	movlw	62
  6578   001978  6E4F               	movwf	MFRC522_Wr@value^0,c
  6579   00197A  0E2B               	movlw	43
  6580   00197C  ECE1  F009         	call	_MFRC522_Wr
  6581                           
  6582                           ;TAD_RFID.c: 138:     MFRC522_Wr(0x2D, 30);
  6583   001980  0E1E               	movlw	30
  6584   001982  6E4F               	movwf	MFRC522_Wr@value^0,c
  6585   001984  0E2D               	movlw	45
  6586   001986  ECE1  F009         	call	_MFRC522_Wr
  6587                           
  6588                           ;TAD_RFID.c: 139:     MFRC522_Wr(0x2C, 0);
  6589   00198A  0E00               	movlw	0
  6590   00198C  6E4F               	movwf	MFRC522_Wr@value^0,c
  6591   00198E  0E2C               	movlw	44
  6592   001990  ECE1  F009         	call	_MFRC522_Wr
  6593                           
  6594                           ;TAD_RFID.c: 140:     MFRC522_Wr(0x15, 0x40);
  6595   001994  0E40               	movlw	64
  6596   001996  6E4F               	movwf	MFRC522_Wr@value^0,c
  6597   001998  0E15               	movlw	21
  6598   00199A  ECE1  F009         	call	_MFRC522_Wr
  6599                           
  6600                           ;TAD_RFID.c: 141:     MFRC522_Wr(0x11, 0x3D);
  6601   00199E  0E3D               	movlw	61
  6602   0019A0  6E4F               	movwf	MFRC522_Wr@value^0,c
  6603   0019A2  0E11               	movlw	17
  6604   0019A4  ECE1  F009         	call	_MFRC522_Wr
  6605                           
  6606                           ;TAD_RFID.c: 143:     MFRC522_AntennaControl(1);
  6607   0019A8  0E01               	movlw	1
  6608   0019AA  ECB8  F00D         	call	_MFRC522_AntennaControl
  6609   0019AE  0012               	return		;funcret
  6610   0019B0                     __end_of_MFRC522_Init:
  6611                           	callstack 0
  6612                           
  6613 ;; *************** function _MFRC522_Reset *****************
  6614 ;; Defined at:
  6615 ;;		line 106 in file "TAD_RFID.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      void 
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1
  6629 ;;      Params:         0       0       0
  6630 ;;      Locals:         0       0       0
  6631 ;;      Temps:          0       0       0
  6632 ;;      Totals:         0       0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used: 1
  6635 ;; Hardware stack levels required when called: 5
  6636 ;; This function calls:
  6637 ;;		_MFRC522_Wr
  6638 ;;		_delay_us
  6639 ;;		_resetMotorStates
  6640 ;; This function is called by:
  6641 ;;		_MFRC522_Init
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text23
  6646   001C0A                     __ptext23:
  6647                           	callstack 0
  6648   001C0A                     _MFRC522_Reset:
  6649                           	callstack 23
  6650   001C0A                     
  6651                           ;TAD_RFID.c: 107:     resetMotorStates();
  6652   001C0A  ECD7  F00E         	call	_resetMotorStates	;wreg free
  6653   001C0E                     
  6654                           ;TAD_RFID.c: 109:     LATCbits.LATC4 = 1;
  6655   001C0E  888B               	bsf	139,4,c	;volatile
  6656   001C10                     
  6657                           ;TAD_RFID.c: 110:     delay_us(1);
  6658   001C10  0E01               	movlw	1
  6659   001C12  EC2F  F00E         	call	_delay_us
  6660   001C16                     
  6661                           ;TAD_RFID.c: 111:     LATCbits.LATC4 = 0;
  6662   001C16  988B               	bcf	139,4,c	;volatile
  6663   001C18                     
  6664                           ;TAD_RFID.c: 112:     delay_us(1);
  6665   001C18  0E01               	movlw	1
  6666   001C1A  EC2F  F00E         	call	_delay_us
  6667   001C1E                     
  6668                           ;TAD_RFID.c: 113:     LATCbits.LATC4 = 1;
  6669   001C1E  888B               	bsf	139,4,c	;volatile
  6670   001C20                     
  6671                           ;TAD_RFID.c: 114:     delay_us(1);
  6672   001C20  0E01               	movlw	1
  6673   001C22  EC2F  F00E         	call	_delay_us
  6674   001C26                     
  6675                           ;TAD_RFID.c: 115:     MFRC522_Wr(0x01, 0x0F);
  6676   001C26  0E0F               	movlw	15
  6677   001C28  6E4F               	movwf	MFRC522_Wr@value^0,c
  6678   001C2A  0E01               	movlw	1
  6679   001C2C  ECE1  F009         	call	_MFRC522_Wr
  6680   001C30                     
  6681                           ;TAD_RFID.c: 116:     delay_us(1);
  6682   001C30  0E01               	movlw	1
  6683   001C32  EC2F  F00E         	call	_delay_us
  6684   001C36  0012               	return		;funcret
  6685   001C38                     __end_of_MFRC522_Reset:
  6686                           	callstack 0
  6687                           
  6688 ;; *************** function _resetMotorStates *****************
  6689 ;; Defined at:
  6690 ;;		line 101 in file "TAD_RFID.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		None
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1
  6704 ;;      Params:         0       0       0
  6705 ;;      Locals:         0       0       0
  6706 ;;      Temps:          0       0       0
  6707 ;;      Totals:         0       0       0
  6708 ;;Total ram usage:        0 bytes
  6709 ;; Hardware stack levels used: 1
  6710 ;; Hardware stack levels required when called: 3
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_MFRC522_Reset
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text24
  6719   001DAE                     __ptext24:
  6720                           	callstack 0
  6721   001DAE                     _resetMotorStates:
  6722                           	callstack 24
  6723   001DAE                     
  6724                           ;TAD_RFID.c: 102:     state_read = state_write = 0;
  6725   001DAE  6A38               	clrf	_state_write^0,c
  6726   001DB0  6A39               	clrf	_state_read^0,c
  6727                           
  6728                           ;TAD_RFID.c: 103:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6729   001DB2  848B               	bsf	139,2,c	;volatile
  6730   001DB4  868B               	bsf	139,3,c	;volatile
  6731   001DB6  0012               	return		;funcret
  6732   001DB8                     __end_of_resetMotorStates:
  6733                           	callstack 0
  6734                           
  6735 ;; *************** function _MFRC522_AntennaControl *****************
  6736 ;; Defined at:
  6737 ;;		line 120 in file "TAD_RFID.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  on              1    wreg     unsigned char 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  on              1   15[COMRAM] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1
  6751 ;;      Params:         0       0       0
  6752 ;;      Locals:         1       0       0
  6753 ;;      Temps:          0       0       0
  6754 ;;      Totals:         1       0       0
  6755 ;;Total ram usage:        1 bytes
  6756 ;; Hardware stack levels used: 1
  6757 ;; Hardware stack levels required when called: 6
  6758 ;; This function calls:
  6759 ;;		_MFRC522_Bit_Mask
  6760 ;; This function is called by:
  6761 ;;		_MFRC522_Init
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text25
  6766   001B70                     __ptext25:
  6767                           	callstack 0
  6768   001B70                     _MFRC522_AntennaControl:
  6769                           	callstack 22
  6770                           
  6771                           ;incstack = 0
  6772                           ;MFRC522_AntennaControl@on stored from wreg
  6773   001B70  6E5B               	movwf	MFRC522_AntennaControl@on^0,c
  6774   001B72                     
  6775                           ;TAD_RFID.c: 121:     if(on)
  6776   001B72  505B               	movf	MFRC522_AntennaControl@on^0,w,c
  6777   001B74  B4D8               	btfsc	status,2,c
  6778   001B76  EFBF  F00D         	goto	u2671
  6779   001B7A  EFC1  F00D         	goto	u2670
  6780   001B7E                     u2671:
  6781   001B7E  EFCA  F00D         	goto	l3534
  6782   001B82                     u2670:
  6783   001B82                     
  6784                           ;TAD_RFID.c: 122:         MFRC522_Bit_Mask(0x14, 0x03, 1);
  6785   001B82  0E03               	movlw	3
  6786   001B84  6E54               	movwf	MFRC522_Bit_Mask@mask^0,c
  6787   001B86  0E01               	movlw	1
  6788   001B88  6E55               	movwf	MFRC522_Bit_Mask@op^0,c
  6789   001B8A  0E14               	movlw	20
  6790   001B8C  EC23  F00D         	call	_MFRC522_Bit_Mask
  6791   001B90  EFD1  F00D         	goto	l255
  6792   001B94                     l3534:
  6793                           
  6794                           ;TAD_RFID.c: 124:         MFRC522_Bit_Mask(0x14, 0x03, 0);
  6795   001B94  0E03               	movlw	3
  6796   001B96  6E54               	movwf	MFRC522_Bit_Mask@mask^0,c
  6797   001B98  0E00               	movlw	0
  6798   001B9A  6E55               	movwf	MFRC522_Bit_Mask@op^0,c
  6799   001B9C  0E14               	movlw	20
  6800   001B9E  EC23  F00D         	call	_MFRC522_Bit_Mask
  6801   001BA2                     l255:
  6802   001BA2  0012               	return		;funcret
  6803   001BA4                     __end_of_MFRC522_AntennaControl:
  6804                           	callstack 0
  6805                           
  6806 ;; *************** function _MFRC522_Bit_Mask *****************
  6807 ;; Defined at:
  6808 ;;		line 92 in file "TAD_RFID.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  addr            1    wreg     unsigned char 
  6811 ;;  mask            1    8[COMRAM] unsigned char 
  6812 ;;  op              1    9[COMRAM] unsigned char 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  addr            1   13[COMRAM] unsigned char 
  6815 ;;  temp            1   14[COMRAM] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1
  6825 ;;      Params:         2       0       0
  6826 ;;      Locals:         4       0       0
  6827 ;;      Temps:          1       0       0
  6828 ;;      Totals:         7       0       0
  6829 ;;Total ram usage:        7 bytes
  6830 ;; Hardware stack levels used: 1
  6831 ;; Hardware stack levels required when called: 5
  6832 ;; This function calls:
  6833 ;;		_MFRC522_Rd
  6834 ;;		_MFRC522_Wr
  6835 ;; This function is called by:
  6836 ;;		_MFRC522_AntennaControl
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text26
  6841   001A46                     __ptext26:
  6842                           	callstack 0
  6843   001A46                     _MFRC522_Bit_Mask:
  6844                           	callstack 22
  6845                           
  6846                           ;incstack = 0
  6847                           ;MFRC522_Bit_Mask@addr stored from wreg
  6848   001A46  6E59               	movwf	MFRC522_Bit_Mask@addr^0,c
  6849   001A48                     
  6850                           ;TAD_RFID.c: 93:     char temp = MFRC522_Rd(addr);
  6851   001A48  5059               	movf	MFRC522_Bit_Mask@addr^0,w,c
  6852   001A4A  EC35  F00A         	call	_MFRC522_Rd
  6853   001A4E  6E5A               	movwf	MFRC522_Bit_Mask@temp^0,c
  6854   001A50                     
  6855                           ;TAD_RFID.c: 94:     MFRC522_Wr(addr, op ? (temp | mask) : (temp & ~mask));
  6856   001A50  5055               	movf	MFRC522_Bit_Mask@op^0,w,c
  6857   001A52  A4D8               	btfss	status,2,c
  6858   001A54  EF2E  F00D         	goto	u2641
  6859   001A58  EF30  F00D         	goto	u2640
  6860   001A5C                     u2641:
  6861   001A5C  EF39  F00D         	goto	l3490
  6862   001A60                     u2640:
  6863   001A60  5054               	movf	MFRC522_Bit_Mask@mask^0,w,c
  6864   001A62  0AFF               	xorlw	255
  6865   001A64  145A               	andwf	MFRC522_Bit_Mask@temp^0,w,c
  6866   001A66  6E56               	movwf	??_MFRC522_Bit_Mask^0,c
  6867   001A68  5056               	movf	??_MFRC522_Bit_Mask^0,w,c
  6868   001A6A  6E57               	movwf	_MFRC522_Bit_Mask$536^0,c
  6869   001A6C  6A58               	clrf	(_MFRC522_Bit_Mask$536+1)^0,c
  6870   001A6E  EF3F  F00D         	goto	l3492
  6871   001A72                     l3490:
  6872   001A72  505A               	movf	MFRC522_Bit_Mask@temp^0,w,c
  6873   001A74  1054               	iorwf	MFRC522_Bit_Mask@mask^0,w,c
  6874   001A76  6E56               	movwf	??_MFRC522_Bit_Mask^0,c
  6875   001A78  5056               	movf	??_MFRC522_Bit_Mask^0,w,c
  6876   001A7A  6E57               	movwf	_MFRC522_Bit_Mask$536^0,c
  6877   001A7C  6A58               	clrf	(_MFRC522_Bit_Mask$536+1)^0,c
  6878   001A7E                     l3492:
  6879   001A7E  C057  F04F         	movff	_MFRC522_Bit_Mask$536,MFRC522_Wr@value
  6880   001A82  5059               	movf	MFRC522_Bit_Mask@addr^0,w,c
  6881   001A84  ECE1  F009         	call	_MFRC522_Wr
  6882   001A88  0012               	return		;funcret
  6883   001A8A                     __end_of_MFRC522_Bit_Mask:
  6884                           	callstack 0
  6885                           
  6886 ;; *************** function _MFRC522_Wr *****************
  6887 ;; Defined at:
  6888 ;;		line 72 in file "TAD_RFID.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  Address         1    wreg     unsigned char 
  6891 ;;  value           1    3[COMRAM] unsigned char 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  Address         1    5[COMRAM] unsigned char 
  6894 ;;  i               1    7[COMRAM] unsigned char 
  6895 ;;  ucAddr          1    6[COMRAM] unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  1    wreg      void 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1
  6905 ;;      Params:         1       0       0
  6906 ;;      Locals:         3       0       0
  6907 ;;      Temps:          1       0       0
  6908 ;;      Totals:         5       0       0
  6909 ;;Total ram usage:        5 bytes
  6910 ;; Hardware stack levels used: 1
  6911 ;; Hardware stack levels required when called: 4
  6912 ;; This function calls:
  6913 ;;		_delay_us
  6914 ;; This function is called by:
  6915 ;;		_MFRC522_Bit_Mask
  6916 ;;		_MFRC522_Reset
  6917 ;;		_MFRC522_Init
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text27
  6922   0013C2                     __ptext27:
  6923                           	callstack 0
  6924   0013C2                     _MFRC522_Wr:
  6925                           	callstack 24
  6926                           
  6927                           ;incstack = 0
  6928                           ;MFRC522_Wr@Address stored from wreg
  6929   0013C2  6E51               	movwf	MFRC522_Wr@Address^0,c
  6930   0013C4                     
  6931                           ;TAD_RFID.c: 73:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  6932   0013C4  5051               	movf	MFRC522_Wr@Address^0,w,c
  6933   0013C6  2451               	addwf	MFRC522_Wr@Address^0,w,c
  6934   0013C8  0B7E               	andlw	126
  6935   0013CA  6E52               	movwf	MFRC522_Wr@ucAddr^0,c
  6936   0013CC                     
  6937                           ;TAD_RFID.c: 75:     LATCbits.LATC2 = 0;
  6938   0013CC  948B               	bcf	139,2,c	;volatile
  6939   0013CE                     
  6940                           ;TAD_RFID.c: 76:     LATCbits.LATC3 = 0;
  6941   0013CE  968B               	bcf	139,3,c	;volatile
  6942   0013D0                     
  6943                           ;TAD_RFID.c: 79:     for (i = 8; i > 0; i--) {
  6944   0013D0  0E08               	movlw	8
  6945   0013D2  6E53               	movwf	MFRC522_Wr@i^0,c
  6946   0013D4                     l3436:
  6947   0013D4  BE52               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  6948   0013D6  EFEF  F009         	goto	u2571
  6949   0013DA  EFF3  F009         	goto	u2570
  6950   0013DE                     u2571:
  6951   0013DE  6A50               	clrf	??_MFRC522_Wr^0,c
  6952   0013E0  2A50               	incf	??_MFRC522_Wr^0,f,c
  6953   0013E2  EFF4  F009         	goto	u2588
  6954   0013E6                     u2570:
  6955   0013E6  6A50               	clrf	??_MFRC522_Wr^0,c
  6956   0013E8                     u2588:
  6957   0013E8  4650               	rlncf	??_MFRC522_Wr^0,f,c
  6958   0013EA  508B               	movf	139,w,c	;volatile
  6959   0013EC  1850               	xorwf	??_MFRC522_Wr^0,w,c
  6960   0013EE  0BFD               	andlw	-3
  6961   0013F0  1850               	xorwf	??_MFRC522_Wr^0,w,c
  6962   0013F2  6E8B               	movwf	139,c	;volatile
  6963   0013F4  848B               	bsf	139,2,c	;volatile
  6964   0013F6  90D8               	bcf	status,0,c
  6965   0013F8  3652               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  6966   0013FA  0E05               	movlw	5
  6967   0013FC  EC2F  F00E         	call	_delay_us
  6968   001400  948B               	bcf	139,2,c	;volatile
  6969   001402  0E05               	movlw	5
  6970   001404  EC2F  F00E         	call	_delay_us
  6971   001408                     
  6972                           ;TAD_RFID.c: 81:     }
  6973   001408  0653               	decf	MFRC522_Wr@i^0,f,c
  6974   00140A  5053               	movf	MFRC522_Wr@i^0,w,c
  6975   00140C  A4D8               	btfss	status,2,c
  6976   00140E  EF0B  F00A         	goto	u2591
  6977   001412  EF0D  F00A         	goto	u2590
  6978   001416                     u2591:
  6979   001416  EFEA  F009         	goto	l3436
  6980   00141A                     u2590:
  6981   00141A                     
  6982                           ;TAD_RFID.c: 83:     for (i = 8; i > 0; i--) {
  6983   00141A  0E08               	movlw	8
  6984   00141C  6E53               	movwf	MFRC522_Wr@i^0,c
  6985   00141E                     l3454:
  6986   00141E  BE4F               	btfsc	MFRC522_Wr@value^0,7,c
  6987   001420  EF14  F00A         	goto	u2601
  6988   001424  EF18  F00A         	goto	u2600
  6989   001428                     u2601:
  6990   001428  6A50               	clrf	??_MFRC522_Wr^0,c
  6991   00142A  2A50               	incf	??_MFRC522_Wr^0,f,c
  6992   00142C  EF19  F00A         	goto	u2618
  6993   001430                     u2600:
  6994   001430  6A50               	clrf	??_MFRC522_Wr^0,c
  6995   001432                     u2618:
  6996   001432  4650               	rlncf	??_MFRC522_Wr^0,f,c
  6997   001434  508B               	movf	139,w,c	;volatile
  6998   001436  1850               	xorwf	??_MFRC522_Wr^0,w,c
  6999   001438  0BFD               	andlw	-3
  7000   00143A  1850               	xorwf	??_MFRC522_Wr^0,w,c
  7001   00143C  6E8B               	movwf	139,c	;volatile
  7002   00143E  848B               	bsf	139,2,c	;volatile
  7003   001440  90D8               	bcf	status,0,c
  7004   001442  364F               	rlcf	MFRC522_Wr@value^0,f,c
  7005   001444  0E05               	movlw	5
  7006   001446  EC2F  F00E         	call	_delay_us
  7007   00144A  948B               	bcf	139,2,c	;volatile
  7008   00144C  0E05               	movlw	5
  7009   00144E  EC2F  F00E         	call	_delay_us
  7010   001452                     
  7011                           ;TAD_RFID.c: 85:     }
  7012   001452  0653               	decf	MFRC522_Wr@i^0,f,c
  7013   001454  5053               	movf	MFRC522_Wr@i^0,w,c
  7014   001456  A4D8               	btfss	status,2,c
  7015   001458  EF30  F00A         	goto	u2621
  7016   00145C  EF32  F00A         	goto	u2620
  7017   001460                     u2621:
  7018   001460  EF0F  F00A         	goto	l3454
  7019   001464                     u2620:
  7020   001464                     
  7021                           ;TAD_RFID.c: 87:     LATCbits.LATC3 = 1;
  7022   001464  868B               	bsf	139,3,c	;volatile
  7023                           
  7024                           ;TAD_RFID.c: 88:     LATCbits.LATC2 = 1;
  7025   001466  848B               	bsf	139,2,c	;volatile
  7026   001468  0012               	return		;funcret
  7027   00146A                     __end_of_MFRC522_Wr:
  7028                           	callstack 0
  7029                           
  7030 ;; *************** function _MFRC522_Rd *****************
  7031 ;; Defined at:
  7032 ;;		line 46 in file "TAD_RFID.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  Address         1    wreg     unsigned char 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  Address         1    4[COMRAM] unsigned char 
  7037 ;;  i               1    7[COMRAM] unsigned char 
  7038 ;;  ucResult        1    6[COMRAM] unsigned char 
  7039 ;;  ucAddr          1    5[COMRAM] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      unsigned char 
  7042 ;; Registers used:
  7043 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1
  7049 ;;      Params:         0       0       0
  7050 ;;      Locals:         4       0       0
  7051 ;;      Temps:          1       0       0
  7052 ;;      Totals:         5       0       0
  7053 ;;Total ram usage:        5 bytes
  7054 ;; Hardware stack levels used: 1
  7055 ;; Hardware stack levels required when called: 4
  7056 ;; This function calls:
  7057 ;;		_delay_us
  7058 ;; This function is called by:
  7059 ;;		_MFRC522_Bit_Mask
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text28
  7064   00146A                     __ptext28:
  7065                           	callstack 0
  7066   00146A                     _MFRC522_Rd:
  7067                           	callstack 22
  7068                           
  7069                           ;incstack = 0
  7070                           ;MFRC522_Rd@Address stored from wreg
  7071   00146A  6E50               	movwf	MFRC522_Rd@Address^0,c
  7072   00146C                     
  7073                           ;TAD_RFID.c: 47:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  7074   00146C  5050               	movf	MFRC522_Rd@Address^0,w,c
  7075   00146E  2450               	addwf	MFRC522_Rd@Address^0,w,c
  7076   001470  0B7E               	andlw	126
  7077   001472  0980               	iorlw	128
  7078   001474  6E51               	movwf	MFRC522_Rd@ucAddr^0,c
  7079   001476                     
  7080                           ;TAD_RFID.c: 48:     unsigned char ucResult = 0;
  7081   001476  6A52               	clrf	MFRC522_Rd@ucResult^0,c
  7082   001478                     
  7083                           ;TAD_RFID.c: 50:     LATCbits.LATC2 = 0;
  7084   001478  948B               	bcf	139,2,c	;volatile
  7085   00147A                     
  7086                           ;TAD_RFID.c: 51:     LATCbits.LATC3 = 0;
  7087   00147A  968B               	bcf	139,3,c	;volatile
  7088   00147C                     
  7089                           ;TAD_RFID.c: 54:     for (i = 8; i > 0; i--) {
  7090   00147C  0E08               	movlw	8
  7091   00147E  6E53               	movwf	MFRC522_Rd@i^0,c
  7092   001480                     l3390:
  7093   001480  BE51               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  7094   001482  EF45  F00A         	goto	u2521
  7095   001486  EF49  F00A         	goto	u2520
  7096   00148A                     u2521:
  7097   00148A  6A4F               	clrf	??_MFRC522_Rd^0,c
  7098   00148C  2A4F               	incf	??_MFRC522_Rd^0,f,c
  7099   00148E  EF4A  F00A         	goto	u2538
  7100   001492                     u2520:
  7101   001492  6A4F               	clrf	??_MFRC522_Rd^0,c
  7102   001494                     u2538:
  7103   001494  464F               	rlncf	??_MFRC522_Rd^0,f,c
  7104   001496  508B               	movf	139,w,c	;volatile
  7105   001498  184F               	xorwf	??_MFRC522_Rd^0,w,c
  7106   00149A  0BFD               	andlw	-3
  7107   00149C  184F               	xorwf	??_MFRC522_Rd^0,w,c
  7108   00149E  6E8B               	movwf	139,c	;volatile
  7109   0014A0  848B               	bsf	139,2,c	;volatile
  7110   0014A2  90D8               	bcf	status,0,c
  7111   0014A4  3651               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  7112   0014A6  0E05               	movlw	5
  7113   0014A8  EC2F  F00E         	call	_delay_us
  7114   0014AC  948B               	bcf	139,2,c	;volatile
  7115   0014AE  0E05               	movlw	5
  7116   0014B0  EC2F  F00E         	call	_delay_us
  7117   0014B4                     
  7118                           ;TAD_RFID.c: 56:     }
  7119   0014B4  0653               	decf	MFRC522_Rd@i^0,f,c
  7120   0014B6  5053               	movf	MFRC522_Rd@i^0,w,c
  7121   0014B8  A4D8               	btfss	status,2,c
  7122   0014BA  EF61  F00A         	goto	u2541
  7123   0014BE  EF63  F00A         	goto	u2540
  7124   0014C2                     u2541:
  7125   0014C2  EF40  F00A         	goto	l3390
  7126   0014C6                     u2540:
  7127   0014C6                     
  7128                           ;TAD_RFID.c: 58:     for (i = 8; i > 0; i--) {
  7129   0014C6  0E08               	movlw	8
  7130   0014C8  6E53               	movwf	MFRC522_Rd@i^0,c
  7131   0014CA                     l224:
  7132                           
  7133                           ;TAD_RFID.c: 59:         LATCbits.LATC2 = 1;
  7134   0014CA  848B               	bsf	139,2,c	;volatile
  7135   0014CC                     
  7136                           ;TAD_RFID.c: 60:         delay_us(5);
  7137   0014CC  0E05               	movlw	5
  7138   0014CE  EC2F  F00E         	call	_delay_us
  7139   0014D2                     
  7140                           ;TAD_RFID.c: 61:         ucResult <<= 1;
  7141   0014D2  90D8               	bcf	status,0,c
  7142   0014D4  3652               	rlcf	MFRC522_Rd@ucResult^0,f,c
  7143   0014D6                     
  7144                           ;TAD_RFID.c: 62:         ucResult|= PORTCbits.RC0;
  7145   0014D6  B082               	btfsc	130,0,c	;volatile
  7146   0014D8  EF70  F00A         	goto	u2551
  7147   0014DC  EF73  F00A         	goto	u2550
  7148   0014E0                     u2551:
  7149   0014E0  0E01               	movlw	1
  7150   0014E2  EF74  F00A         	goto	u2556
  7151   0014E6                     u2550:
  7152   0014E6  0E00               	movlw	0
  7153   0014E8                     u2556:
  7154   0014E8  1252               	iorwf	MFRC522_Rd@ucResult^0,f,c
  7155   0014EA                     
  7156                           ;TAD_RFID.c: 63:         LATCbits.LATC2 = 0;
  7157   0014EA  948B               	bcf	139,2,c	;volatile
  7158                           
  7159                           ;TAD_RFID.c: 64:         delay_us(5);
  7160   0014EC  0E05               	movlw	5
  7161   0014EE  EC2F  F00E         	call	_delay_us
  7162   0014F2                     
  7163                           ;TAD_RFID.c: 65:     }
  7164   0014F2  0653               	decf	MFRC522_Rd@i^0,f,c
  7165   0014F4  5053               	movf	MFRC522_Rd@i^0,w,c
  7166   0014F6  A4D8               	btfss	status,2,c
  7167   0014F8  EF80  F00A         	goto	u2561
  7168   0014FC  EF82  F00A         	goto	u2560
  7169   001500                     u2561:
  7170   001500  EF65  F00A         	goto	l224
  7171   001504                     u2560:
  7172   001504                     
  7173                           ;TAD_RFID.c: 67:     LATCbits.LATC3 = 1;
  7174   001504  868B               	bsf	139,3,c	;volatile
  7175                           
  7176                           ;TAD_RFID.c: 68:     LATCbits.LATC2 = 1;
  7177   001506  848B               	bsf	139,2,c	;volatile
  7178   001508                     
  7179                           ;TAD_RFID.c: 69:     return ucResult;
  7180   001508  5052               	movf	MFRC522_Rd@ucResult^0,w,c
  7181   00150A  0012               	return		;funcret
  7182   00150C                     __end_of_MFRC522_Rd:
  7183                           	callstack 0
  7184                           
  7185 ;; *************** function _delay_us *****************
  7186 ;; Defined at:
  7187 ;;		line 31 in file "TAD_RFID.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  howMany         1    wreg     unsigned char 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  howMany         1    1[COMRAM] unsigned char 
  7192 ;;  x               1    2[COMRAM] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0, prodl, prodh
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1
  7202 ;;      Params:         0       0       0
  7203 ;;      Locals:         2       0       0
  7204 ;;      Temps:          0       0       0
  7205 ;;      Totals:         2       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used: 1
  7208 ;; Hardware stack levels required when called: 3
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_MFRC522_Rd
  7213 ;;		_MFRC522_Wr
  7214 ;;		_MFRC522_Reset
  7215 ;;		_motor_Write
  7216 ;;		_motor_Read
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text29
  7221   001C5E                     __ptext29:
  7222                           	callstack 0
  7223   001C5E                     _delay_us:
  7224                           	callstack 25
  7225                           
  7226                           ;incstack = 0
  7227                           ;delay_us@howMany stored from wreg
  7228   001C5E  6E4D               	movwf	delay_us@howMany^0,c
  7229   001C60                     
  7230                           ;TAD_RFID.c: 32:     char x = howMany * 8;
  7231   001C60  504D               	movf	delay_us@howMany^0,w,c
  7232   001C62  0D08               	mullw	8
  7233   001C64  CFF3 F04E          	movff	prodl,delay_us@x
  7234                           
  7235                           ;TAD_RFID.c: 33:     while(x--) __nop();
  7236   001C68  EF37  F00E         	goto	l3370
  7237   001C6C                     l215:
  7238   001C6C  0000               	nop	
  7239   001C6E                     l3370:
  7240   001C6E  064E               	decf	delay_us@x^0,f,c
  7241   001C70  284E               	incf	delay_us@x^0,w,c
  7242   001C72  A4D8               	btfss	status,2,c
  7243   001C74  EF3E  F00E         	goto	u2501
  7244   001C78  EF40  F00E         	goto	u2500
  7245   001C7C                     u2501:
  7246   001C7C  EF36  F00E         	goto	l215
  7247   001C80                     u2500:
  7248   001C80  0012               	return		;funcret
  7249   001C82                     __end_of_delay_us:
  7250                           	callstack 0
  7251                           
  7252 ;; *************** function _InitPortDirections *****************
  7253 ;; Defined at:
  7254 ;;		line 22 in file "TAD_RFID.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;		None
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;		None
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      void 
  7261 ;; Registers used:
  7262 ;;		None
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMRAM   BANK0   BANK1
  7268 ;;      Params:         0       0       0
  7269 ;;      Locals:         0       0       0
  7270 ;;      Temps:          0       0       0
  7271 ;;      Totals:         0       0       0
  7272 ;;Total ram usage:        0 bytes
  7273 ;; Hardware stack levels used: 1
  7274 ;; Hardware stack levels required when called: 3
  7275 ;; This function calls:
  7276 ;;		Nothing
  7277 ;; This function is called by:
  7278 ;;		_initRFID
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text30
  7283   001D8C                     __ptext30:
  7284                           	callstack 0
  7285   001D8C                     _InitPortDirections:
  7286                           	callstack 26
  7287   001D8C                     
  7288                           ;TAD_RFID.c: 23:     TRISCbits.TRISC0 = 1;
  7289   001D8C  8094               	bsf	148,0,c	;volatile
  7290                           
  7291                           ;TAD_RFID.c: 24:     TRISCbits.TRISC1 = 0;
  7292   001D8E  9294               	bcf	148,1,c	;volatile
  7293                           
  7294                           ;TAD_RFID.c: 25:     TRISCbits.TRISC2 = 0;
  7295   001D90  9494               	bcf	148,2,c	;volatile
  7296                           
  7297                           ;TAD_RFID.c: 26:     TRISCbits.TRISC3 = 0;
  7298   001D92  9694               	bcf	148,3,c	;volatile
  7299                           
  7300                           ;TAD_RFID.c: 27:     TRISCbits.TRISC4 = 0;
  7301   001D94  9894               	bcf	148,4,c	;volatile
  7302   001D96  0012               	return		;funcret
  7303   001D98                     __end_of_InitPortDirections:
  7304                           	callstack 0
  7305                           
  7306 ;; *************** function _initPorts *****************
  7307 ;; Defined at:
  7308 ;;		line 63 in file "main.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;		None
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1
  7322 ;;      Params:         0       0       0
  7323 ;;      Locals:         0       0       0
  7324 ;;      Temps:          0       0       0
  7325 ;;      Totals:         0       0       0
  7326 ;;Total ram usage:        0 bytes
  7327 ;; Hardware stack levels used: 1
  7328 ;; Hardware stack levels required when called: 3
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_main
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text31
  7337   001DC8                     __ptext31:
  7338                           	callstack 0
  7339   001DC8                     _initPorts:
  7340                           	callstack 27
  7341   001DC8  0E0F               	movlw	15
  7342   001DCA  6EC1               	movwf	193,c	;volatile
  7343   001DCC  9496               	bcf	150,2,c	;volatile
  7344   001DCE  0012               	return		;funcret
  7345   001DD0                     __end_of_initPorts:
  7346                           	callstack 0
  7347                           
  7348 ;; *************** function _initLeds *****************
  7349 ;; Defined at:
  7350 ;;		line 9 in file "TAD_LEDS.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;		None
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;		None
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      void 
  7357 ;; Registers used:
  7358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMRAM   BANK0   BANK1
  7364 ;;      Params:         0       0       0
  7365 ;;      Locals:         0       0       0
  7366 ;;      Temps:          0       0       0
  7367 ;;      Totals:         0       0       0
  7368 ;;Total ram usage:        0 bytes
  7369 ;; Hardware stack levels used: 1
  7370 ;; Hardware stack levels required when called: 4
  7371 ;; This function calls:
  7372 ;;		_TI_NewTimer
  7373 ;; This function is called by:
  7374 ;;		_main
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text32
  7379   001D7E                     __ptext32:
  7380                           	callstack 0
  7381   001D7E                     _initLeds:
  7382                           	callstack 26
  7383   001D7E                     
  7384                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  7385   001D7E  6A92               	clrf	146,c	;volatile
  7386                           
  7387                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  7388   001D80  6A96               	clrf	150,c	;volatile
  7389   001D82                     
  7390                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  7391   001D82  0E49               	movlw	low _timer@TAD_LEDS$F1021
  7392   001D84  6E4D               	movwf	TI_NewTimer@TimerHandle^0,c
  7393   001D86  EC87  F00C         	call	_TI_NewTimer	;wreg free
  7394   001D8A  0012               	return		;funcret
  7395   001D8C                     __end_of_initLeds:
  7396                           	callstack 0
  7397                           
  7398 ;; *************** function _initData *****************
  7399 ;; Defined at:
  7400 ;;		line 26 in file "TAD_DATOS.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		None
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1
  7414 ;;      Params:         0       0       0
  7415 ;;      Locals:         0       0       0
  7416 ;;      Temps:          0       0       0
  7417 ;;      Totals:         0       0       0
  7418 ;;Total ram usage:        0 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; Hardware stack levels required when called: 3
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_main
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text33
  7429   001D98                     __ptext33:
  7430                           	callstack 0
  7431   001D98                     _initData:
  7432                           	callstack 27
  7433   001D98                     
  7434                           ;TAD_DATOS.c: 27:  currentUser[0] = 0x00;
  7435   001D98  6A44               	clrf	_currentUser^0,c
  7436                           
  7437                           ;TAD_DATOS.c: 28:  currentUser[1] = 0x00;
  7438   001D9A  6A45               	clrf	(_currentUser+1)^0,c
  7439                           
  7440                           ;TAD_DATOS.c: 29:  currentUser[2] = 0x00;
  7441   001D9C  6A46               	clrf	(_currentUser+2)^0,c
  7442                           
  7443                           ;TAD_DATOS.c: 30:  currentUser[3] = 0x00;
  7444   001D9E  6A47               	clrf	(_currentUser+3)^0,c
  7445                           
  7446                           ;TAD_DATOS.c: 31:  currentUser[4] = 0x00;
  7447   001DA0  6A48               	clrf	(_currentUser+4)^0,c
  7448   001DA2  0012               	return		;funcret
  7449   001DA4                     __end_of_initData:
  7450                           	callstack 0
  7451                           
  7452 ;; *************** function _Terminal_Init *****************
  7453 ;; Defined at:
  7454 ;;		line 11 in file "TAD_TERMINAL.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;		None
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;		None
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1
  7468 ;;      Params:         0       0       0
  7469 ;;      Locals:         0       0       0
  7470 ;;      Temps:          0       0       0
  7471 ;;      Totals:         0       0       0
  7472 ;;Total ram usage:        0 bytes
  7473 ;; Hardware stack levels used: 1
  7474 ;; Hardware stack levels required when called: 3
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_main
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text34
  7483   001D6E                     __ptext34:
  7484                           	callstack 0
  7485   001D6E                     _Terminal_Init:
  7486                           	callstack 27
  7487   001D6E                     
  7488                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  7489   001D6E  0E24               	movlw	36
  7490   001D70  6EAC               	movwf	172,c	;volatile
  7491                           
  7492                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  7493   001D72  0E90               	movlw	144
  7494   001D74  6EAB               	movwf	171,c	;volatile
  7495   001D76                     
  7496                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  7497   001D76  68AF               	setf	175,c	;volatile
  7498   001D78                     
  7499                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  7500   001D78  6AB8               	clrf	184,c	;volatile
  7501   001D7A                     
  7502                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  7503   001D7A  6A1F               	clrf	_hashtag_pressed^0,c
  7504   001D7C  0012               	return		;funcret
  7505   001D7E                     __end_of_Terminal_Init:
  7506                           	callstack 0
  7507                           
  7508 ;; *************** function _TI_Init *****************
  7509 ;; Defined at:
  7510 ;;		line 32 in file "TAD_TIMER.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  counter         1    1[COMRAM] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1
  7524 ;;      Params:         0       0       0
  7525 ;;      Locals:         1       0       0
  7526 ;;      Temps:          0       0       0
  7527 ;;      Totals:         1       0       0
  7528 ;;Total ram usage:        1 bytes
  7529 ;; Hardware stack levels used: 1
  7530 ;; Hardware stack levels required when called: 3
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_main
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text35
  7539   001BA4                     __ptext35:
  7540                           	callstack 0
  7541   001BA4                     _TI_Init:
  7542                           	callstack 27
  7543   001BA4                     
  7544                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7545   001BA4  6A4D               	clrf	TI_Init@counter^0,c
  7546   001BA6                     l3956:
  7547                           
  7548                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7549   001BA6  504D               	movf	TI_Init@counter^0,w,c
  7550   001BA8  0D05               	mullw	5
  7551   001BAA  50F3               	movf	243,w,c
  7552   001BAC  0FDC               	addlw	low (_Timers+4)
  7553   001BAE  6ED9               	movwf	fsr2l,c
  7554   001BB0  6ADA               	clrf	fsr2h,c
  7555   001BB2  6ADF               	clrf	indf2,c
  7556   001BB4                     
  7557                           ;TAD_TIMER.c: 35:  }
  7558   001BB4  2A4D               	incf	TI_Init@counter^0,f,c
  7559   001BB6  0E03               	movlw	3
  7560   001BB8  644D               	cpfsgt	TI_Init@counter^0,c
  7561   001BBA  EFE1  F00D         	goto	u3221
  7562   001BBE  EFE3  F00D         	goto	u3220
  7563   001BC2                     u3221:
  7564   001BC2  EFD3  F00D         	goto	l3956
  7565   001BC6                     u3220:
  7566   001BC6                     
  7567                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7568   001BC6  0E82               	movlw	130
  7569   001BC8  6ED5               	movwf	213,c	;volatile
  7570                           
  7571                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7572   001BCA  0EF6               	movlw	246
  7573   001BCC  6ED7               	movwf	215,c	;volatile
  7574   001BCE  0E3C               	movlw	60
  7575   001BD0  6ED6               	movwf	214,c	;volatile
  7576   001BD2                     
  7577                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7578   001BD2  94F2               	bcf	242,2,c	;volatile
  7579   001BD4                     
  7580                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7581   001BD4  8AF2               	bsf	242,5,c	;volatile
  7582   001BD6  0012               	return		;funcret
  7583   001BD8                     __end_of_TI_Init:
  7584                           	callstack 0
  7585                           
  7586 ;; *************** function _LcInit *****************
  7587 ;; Defined at:
  7588 ;;		line 68 in file "TAD_DISPLAY.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  rows            1    wreg     unsigned char 
  7591 ;;  columns         1   22[COMRAM] unsigned char 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  rows            1   23[COMRAM] unsigned char 
  7594 ;;  i               2   24[COMRAM] int 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  1    wreg      void 
  7597 ;; Registers used:
  7598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1
  7604 ;;      Params:         1       0       0
  7605 ;;      Locals:         3       0       0
  7606 ;;      Temps:          0       0       0
  7607 ;;      Totals:         4       0       0
  7608 ;;Total ram usage:        4 bytes
  7609 ;; Hardware stack levels used: 1
  7610 ;; Hardware stack levels required when called: 6
  7611 ;; This function calls:
  7612 ;;		_CantaIR
  7613 ;;		_EscriuPrimeraOrdre
  7614 ;;		_Espera
  7615 ;;		_TI_NewTimer
  7616 ;;		_WaitForBusy
  7617 ;; This function is called by:
  7618 ;;		_main
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text36
  7623   00103C                     __ptext36:
  7624                           	callstack 0
  7625   00103C                     _LcInit:
  7626                           	callstack 24
  7627                           
  7628                           ;incstack = 0
  7629                           ;LcInit@rows stored from wreg
  7630   00103C  6E63               	movwf	LcInit@rows^0,c
  7631   00103E                     
  7632                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7633   00103E  0E4A               	movlw	low _Timer
  7634   001040  6E4D               	movwf	TI_NewTimer@TimerHandle^0,c
  7635   001042  EC87  F00C         	call	_TI_NewTimer	;wreg free
  7636   001046                     
  7637                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7638   001046  C063  F024         	movff	LcInit@rows,_Rows
  7639   00104A  C062  F023         	movff	LcInit@columns,_Columns
  7640   00104E                     
  7641                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7642   00104E  6A21               	clrf	_ColumnAct^0,c
  7643   001050  6A22               	clrf	_RowAct^0,c
  7644   001052                     
  7645                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7646   001052  9293               	bcf	147,1,c	;volatile
  7647   001054  9493               	bcf	147,2,c	;volatile
  7648   001056  9693               	bcf	147,3,c	;volatile
  7649   001058                     
  7650                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7651   001058  0E00               	movlw	0
  7652   00105A  6E65               	movwf	(LcInit@i+1)^0,c
  7653   00105C  0E00               	movlw	0
  7654   00105E  6E64               	movwf	LcInit@i^0,c
  7655   001060                     l4004:
  7656                           
  7657                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7658   001060  C04A  F05A         	movff	_Timer,Espera@Timer
  7659   001064  6A5B               	clrf	(Espera@Timer+1)^0,c
  7660   001066  0E00               	movlw	0
  7661   001068  6E5D               	movwf	(Espera@ms+1)^0,c
  7662   00106A  0E64               	movlw	100
  7663   00106C  6E5C               	movwf	Espera@ms^0,c
  7664   00106E  EC45  F00D         	call	_Espera	;wreg free
  7665   001072                     
  7666                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7667   001072  0E03               	movlw	3
  7668   001074  EC22  F00B         	call	_EscriuPrimeraOrdre
  7669   001078                     
  7670                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7671   001078  C04A  F05A         	movff	_Timer,Espera@Timer
  7672   00107C  6A5B               	clrf	(Espera@Timer+1)^0,c
  7673   00107E  0E00               	movlw	0
  7674   001080  6E5D               	movwf	(Espera@ms+1)^0,c
  7675   001082  0E04               	movlw	4
  7676   001084  6E5C               	movwf	Espera@ms^0,c
  7677   001086  EC45  F00D         	call	_Espera	;wreg free
  7678                           
  7679                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7680   00108A  0E03               	movlw	3
  7681   00108C  EC22  F00B         	call	_EscriuPrimeraOrdre
  7682   001090                     
  7683                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7684   001090  C04A  F05A         	movff	_Timer,Espera@Timer
  7685   001094  6A5B               	clrf	(Espera@Timer+1)^0,c
  7686   001096  0E00               	movlw	0
  7687   001098  6E5D               	movwf	(Espera@ms+1)^0,c
  7688   00109A  0E01               	movlw	1
  7689   00109C  6E5C               	movwf	Espera@ms^0,c
  7690   00109E  EC45  F00D         	call	_Espera	;wreg free
  7691   0010A2                     
  7692                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7693   0010A2  0E03               	movlw	3
  7694   0010A4  EC22  F00B         	call	_EscriuPrimeraOrdre
  7695                           
  7696                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7697   0010A8  C04A  F05A         	movff	_Timer,Espera@Timer
  7698   0010AC  6A5B               	clrf	(Espera@Timer+1)^0,c
  7699   0010AE  0E00               	movlw	0
  7700   0010B0  6E5D               	movwf	(Espera@ms+1)^0,c
  7701   0010B2  0E01               	movlw	1
  7702   0010B4  6E5C               	movwf	Espera@ms^0,c
  7703   0010B6  EC45  F00D         	call	_Espera	;wreg free
  7704   0010BA                     
  7705                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7706   0010BA  0E02               	movlw	2
  7707   0010BC  EC22  F00B         	call	_EscriuPrimeraOrdre
  7708   0010C0                     
  7709                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7710   0010C0  C04A  F05A         	movff	_Timer,Espera@Timer
  7711   0010C4  6A5B               	clrf	(Espera@Timer+1)^0,c
  7712   0010C6  0E00               	movlw	0
  7713   0010C8  6E5D               	movwf	(Espera@ms+1)^0,c
  7714   0010CA  0E01               	movlw	1
  7715   0010CC  6E5C               	movwf	Espera@ms^0,c
  7716   0010CE  EC45  F00D         	call	_Espera	;wreg free
  7717                           
  7718                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7719   0010D2  0E28               	movlw	40
  7720   0010D4  ECEC  F00D         	call	_CantaIR
  7721   0010D8                     
  7722                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7723   0010D8  ECAD  F00E         	call	_WaitForBusy	;wreg free
  7724   0010DC  0E08               	movlw	8
  7725   0010DE  ECEC  F00D         	call	_CantaIR
  7726                           
  7727                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7728   0010E2  ECAD  F00E         	call	_WaitForBusy	;wreg free
  7729   0010E6  0E01               	movlw	1
  7730   0010E8  ECEC  F00D         	call	_CantaIR
  7731   0010EC                     
  7732                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7733   0010EC  C04A  F05A         	movff	_Timer,Espera@Timer
  7734   0010F0  6A5B               	clrf	(Espera@Timer+1)^0,c
  7735   0010F2  0E00               	movlw	0
  7736   0010F4  6E5D               	movwf	(Espera@ms+1)^0,c
  7737   0010F6  0E02               	movlw	2
  7738   0010F8  6E5C               	movwf	Espera@ms^0,c
  7739   0010FA  EC45  F00D         	call	_Espera	;wreg free
  7740   0010FE                     
  7741                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7742   0010FE  ECAD  F00E         	call	_WaitForBusy	;wreg free
  7743   001102  0E06               	movlw	6
  7744   001104  ECEC  F00D         	call	_CantaIR
  7745                           
  7746                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7747   001108  ECAD  F00E         	call	_WaitForBusy	;wreg free
  7748   00110C  0E0F               	movlw	15
  7749   00110E  ECEC  F00D         	call	_CantaIR
  7750   001112                     
  7751                           ;TAD_DISPLAY.c: 101:  }
  7752   001112  4A64               	infsnz	LcInit@i^0,f,c
  7753   001114  2A65               	incf	(LcInit@i+1)^0,f,c
  7754   001116  BE65               	btfsc	(LcInit@i+1)^0,7,c
  7755   001118  EF97  F008         	goto	u3231
  7756   00111C  5065               	movf	(LcInit@i+1)^0,w,c
  7757   00111E  E109               	bnz	u3230
  7758   001120  0E02               	movlw	2
  7759   001122  5C64               	subwf	LcInit@i^0,w,c
  7760   001124  A0D8               	btfss	status,0,c
  7761   001126  EF97  F008         	goto	u3231
  7762   00112A  EF99  F008         	goto	u3230
  7763   00112E                     u3231:
  7764   00112E  EF30  F008         	goto	l4004
  7765   001132                     u3230:
  7766   001132  0012               	return		;funcret
  7767   001134                     __end_of_LcInit:
  7768                           	callstack 0
  7769                           
  7770 ;; *************** function _WaitForBusy *****************
  7771 ;; Defined at:
  7772 ;;		line 256 in file "TAD_DISPLAY.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;  Busy            1    0        unsigned char 
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1
  7786 ;;      Params:         0       0       0
  7787 ;;      Locals:         0       0       0
  7788 ;;      Temps:          0       0       0
  7789 ;;      Totals:         0       0       0
  7790 ;;Total ram usage:        0 bytes
  7791 ;; Hardware stack levels used: 1
  7792 ;; Hardware stack levels required when called: 5
  7793 ;; This function calls:
  7794 ;;		_Espera
  7795 ;; This function is called by:
  7796 ;;		_LcInit
  7797 ;;		_LcClear
  7798 ;;		_LcCursorOn
  7799 ;;		_LcCursorOff
  7800 ;;		_LcGotoXY
  7801 ;;		_LcPutChar
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text37
  7806   001D5A                     __ptext37:
  7807                           	callstack 0
  7808   001D5A                     _WaitForBusy:
  7809                           	callstack 24
  7810   001D5A                     
  7811                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  7812   001D5A  C04A  F05A         	movff	_Timer,Espera@Timer
  7813   001D5E  6A5B               	clrf	(Espera@Timer+1)^0,c
  7814   001D60  0E00               	movlw	0
  7815   001D62  6E5D               	movwf	(Espera@ms+1)^0,c
  7816   001D64  0E02               	movlw	2
  7817   001D66  6E5C               	movwf	Espera@ms^0,c
  7818   001D68  EC45  F00D         	call	_Espera	;wreg free
  7819   001D6C  0012               	return		;funcret
  7820   001D6E                     __end_of_WaitForBusy:
  7821                           	callstack 0
  7822                           
  7823 ;; *************** function _Espera *****************
  7824 ;; Defined at:
  7825 ;;		line 205 in file "TAD_DISPLAY.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  Timer           2   14[COMRAM] int 
  7828 ;;  ms              2   16[COMRAM] int 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      void 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1
  7840 ;;      Params:         4       0       0
  7841 ;;      Locals:         0       0       0
  7842 ;;      Temps:          4       0       0
  7843 ;;      Totals:         8       0       0
  7844 ;;Total ram usage:        8 bytes
  7845 ;; Hardware stack levels used: 1
  7846 ;; Hardware stack levels required when called: 4
  7847 ;; This function calls:
  7848 ;;		_TI_GetTics
  7849 ;;		_TI_ResetTics
  7850 ;; This function is called by:
  7851 ;;		_LcInit
  7852 ;;		_WaitForBusy
  7853 ;;		_LcClear
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text38
  7858   001A8A                     __ptext38:
  7859                           	callstack 0
  7860   001A8A                     _Espera:
  7861                           	callstack 24
  7862   001A8A                     
  7863                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  7864   001A8A  505A               	movf	Espera@Timer^0,w,c
  7865   001A8C  EC41  F00E         	call	_TI_ResetTics
  7866   001A90                     l3538:
  7867   001A90  C05C  F05E         	movff	Espera@ms,??_Espera
  7868   001A94  C05D  F05F         	movff	Espera@ms+1,??_Espera+1
  7869   001A98  0E00               	movlw	0
  7870   001A9A  BE5F               	btfsc	(??_Espera+1)^0,7,c
  7871   001A9C  0EFF               	movlw	255
  7872   001A9E  6E60               	movwf	(??_Espera+2)^0,c
  7873   001AA0  6E61               	movwf	(??_Espera+3)^0,c
  7874   001AA2  505A               	movf	Espera@Timer^0,w,c
  7875   001AA4  ECD8  F00C         	call	_TI_GetTics
  7876   001AA8  505E               	movf	??_Espera^0,w,c
  7877   001AAA  5C4D               	subwf	?_TI_GetTics^0,w,c
  7878   001AAC  505F               	movf	(??_Espera+1)^0,w,c
  7879   001AAE  584E               	subwfb	(?_TI_GetTics+1)^0,w,c
  7880   001AB0  5060               	movf	(??_Espera+2)^0,w,c
  7881   001AB2  584F               	subwfb	(?_TI_GetTics+2)^0,w,c
  7882   001AB4  5061               	movf	(??_Espera+3)^0,w,c
  7883   001AB6  5850               	subwfb	(?_TI_GetTics+3)^0,w,c
  7884   001AB8  A0D8               	btfss	status,0,c
  7885   001ABA  EF61  F00D         	goto	u2681
  7886   001ABE  EF63  F00D         	goto	u2680
  7887   001AC2                     u2681:
  7888   001AC2  EF48  F00D         	goto	l3538
  7889   001AC6                     u2680:
  7890   001AC6  0012               	return		;funcret
  7891   001AC8                     __end_of_Espera:
  7892                           	callstack 0
  7893                           
  7894 ;; *************** function _TI_ResetTics *****************
  7895 ;; Defined at:
  7896 ;;		line 53 in file "TAD_TIMER.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  TimerHandle     1    wreg     unsigned char 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1
  7910 ;;      Params:         0       0       0
  7911 ;;      Locals:         1       0       0
  7912 ;;      Temps:          0       0       0
  7913 ;;      Totals:         1       0       0
  7914 ;;Total ram usage:        1 bytes
  7915 ;; Hardware stack levels used: 1
  7916 ;; Hardware stack levels required when called: 3
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_Espera
  7921 ;;		_motorTeclado
  7922 ;;		_motor_LEDs
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text39
  7927   001C82                     __ptext39:
  7928                           	callstack 0
  7929   001C82                     _TI_ResetTics:
  7930                           	callstack 24
  7931                           
  7932                           ;incstack = 0
  7933                           ;TI_ResetTics@TimerHandle stored from wreg
  7934   001C82  6E4D               	movwf	TI_ResetTics@TimerHandle^0,c
  7935   001C84                     
  7936                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  7937   001C84  9EF2               	bcf	242,7,c	;volatile
  7938   001C86  504D               	movf	TI_ResetTics@TimerHandle^0,w,c
  7939   001C88  0D05               	mullw	5
  7940   001C8A  50F3               	movf	243,w,c
  7941   001C8C  0FD8               	addlw	low _Timers
  7942   001C8E  6ED9               	movwf	fsr2l,c
  7943   001C90  6ADA               	clrf	fsr2h,c
  7944   001C92  C007  FFDE         	movff	_Tics,postinc2	;volatile
  7945   001C96  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  7946   001C9A  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  7947   001C9E  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  7948   001CA2  8EF2               	bsf	242,7,c	;volatile
  7949   001CA4  0012               	return		;funcret
  7950   001CA6                     __end_of_TI_ResetTics:
  7951                           	callstack 0
  7952                           
  7953 ;; *************** function _TI_GetTics *****************
  7954 ;; Defined at:
  7955 ;;		line 61 in file "TAD_TIMER.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  TimerHandle     1    wreg     unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  7960 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  4    1[COMRAM] unsigned long 
  7963 ;; Registers used:
  7964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1
  7970 ;;      Params:         4       0       0
  7971 ;;      Locals:         5       0       0
  7972 ;;      Temps:          4       0       0
  7973 ;;      Totals:        13       0       0
  7974 ;;Total ram usage:       13 bytes
  7975 ;; Hardware stack levels used: 1
  7976 ;; Hardware stack levels required when called: 3
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_Espera
  7981 ;;		_motorTeclado
  7982 ;;		_motor_LEDs
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text40
  7987   0019B0                     __ptext40:
  7988                           	callstack 0
  7989   0019B0                     _TI_GetTics:
  7990                           	callstack 24
  7991                           
  7992                           ;incstack = 0
  7993                           ;TI_GetTics@TimerHandle stored from wreg
  7994   0019B0  6E59               	movwf	TI_GetTics@TimerHandle^0,c
  7995   0019B2                     
  7996                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  7997   0019B2  9EF2               	bcf	242,7,c	;volatile
  7998   0019B4  C007  F055         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  7999   0019B8  C008  F056         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8000   0019BC  C009  F057         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8001   0019C0  C00A  F058         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8002   0019C4  8EF2               	bsf	242,7,c	;volatile
  8003   0019C6                     
  8004                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8005   0019C6  5059               	movf	TI_GetTics@TimerHandle^0,w,c
  8006   0019C8  0D05               	mullw	5
  8007   0019CA  50F3               	movf	243,w,c
  8008   0019CC  0FD8               	addlw	low _Timers
  8009   0019CE  6ED9               	movwf	fsr2l,c
  8010   0019D0  6ADA               	clrf	fsr2h,c
  8011   0019D2  CFDE F051          	movff	postinc2,??_TI_GetTics
  8012   0019D6  CFDE F052          	movff	postinc2,??_TI_GetTics+1
  8013   0019DA  CFDE F053          	movff	postinc2,??_TI_GetTics+2
  8014   0019DE  CFDE F054          	movff	postinc2,??_TI_GetTics+3
  8015   0019E2  5051               	movf	??_TI_GetTics^0,w,c
  8016   0019E4  5C55               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8017   0019E6  6E4D               	movwf	?_TI_GetTics^0,c
  8018   0019E8  5052               	movf	(??_TI_GetTics+1)^0,w,c
  8019   0019EA  5856               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8020   0019EC  6E4E               	movwf	(?_TI_GetTics+1)^0,c
  8021   0019EE  5053               	movf	(??_TI_GetTics+2)^0,w,c
  8022   0019F0  5857               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8023   0019F2  6E4F               	movwf	(?_TI_GetTics+2)^0,c
  8024   0019F4  5054               	movf	(??_TI_GetTics+3)^0,w,c
  8025   0019F6  5858               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8026   0019F8  6E50               	movwf	(?_TI_GetTics+3)^0,c
  8027   0019FA  0012               	return		;funcret
  8028   0019FC                     __end_of_TI_GetTics:
  8029                           	callstack 0
  8030                           
  8031 ;; *************** function _TI_NewTimer *****************
  8032 ;; Defined at:
  8033 ;;		line 43 in file "TAD_TIMER.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8036 ;;		 -> timer@TAD_LEDS$F1021(1), Timer(1), timer(1), 
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  Comptador       1    3[COMRAM] unsigned char 
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  1    wreg      unsigned char 
  8041 ;; Registers used:
  8042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMRAM   BANK0   BANK1
  8048 ;;      Params:         1       0       0
  8049 ;;      Locals:         1       0       0
  8050 ;;      Temps:          1       0       0
  8051 ;;      Totals:         3       0       0
  8052 ;;Total ram usage:        3 bytes
  8053 ;; Hardware stack levels used: 1
  8054 ;; Hardware stack levels required when called: 3
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_initTeclado
  8059 ;;		_LcInit
  8060 ;;		_initLeds
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           	psect	text41
  8065   00190E                     __ptext41:
  8066                           	callstack 0
  8067   00190E                     _TI_NewTimer:
  8068                           	callstack 26
  8069   00190E                     
  8070                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8071   00190E  6A4F               	clrf	TI_NewTimer@Comptador^0,c
  8072                           
  8073                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8074   001910  EF96  F00C         	goto	l3648
  8075   001914                     l3644:
  8076                           
  8077                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8078   001914  2A4F               	incf	TI_NewTimer@Comptador^0,f,c
  8079   001916  0E04               	movlw	4
  8080   001918  184F               	xorwf	TI_NewTimer@Comptador^0,w,c
  8081   00191A  A4D8               	btfss	status,2,c
  8082   00191C  EF92  F00C         	goto	u2941
  8083   001920  EF94  F00C         	goto	u2940
  8084   001924                     u2941:
  8085   001924  EF96  F00C         	goto	l3648
  8086   001928                     u2940:
  8087   001928  EFB1  F00C         	goto	l83
  8088   00192C                     l3648:
  8089                           
  8090                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8091   00192C  504F               	movf	TI_NewTimer@Comptador^0,w,c
  8092   00192E  0D05               	mullw	5
  8093   001930  50F3               	movf	243,w,c
  8094   001932  0FDC               	addlw	low (_Timers+4)
  8095   001934  6ED9               	movwf	fsr2l,c
  8096   001936  6ADA               	clrf	fsr2h,c
  8097   001938  04DE               	decf	postinc2,w,c
  8098   00193A  B4D8               	btfsc	status,2,c
  8099   00193C  EFA2  F00C         	goto	u2951
  8100   001940  EFA4  F00C         	goto	u2950
  8101   001944                     u2951:
  8102   001944  EF8A  F00C         	goto	l3644
  8103   001948                     u2950:
  8104   001948                     
  8105                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8106   001948  504F               	movf	TI_NewTimer@Comptador^0,w,c
  8107   00194A  0D05               	mullw	5
  8108   00194C  50F3               	movf	243,w,c
  8109   00194E  0FDC               	addlw	low (_Timers+4)
  8110   001950  6ED9               	movwf	fsr2l,c
  8111   001952  6ADA               	clrf	fsr2h,c
  8112   001954  0E01               	movlw	1
  8113   001956  6EDF               	movwf	indf2,c
  8114   001958                     
  8115                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8116   001958  504D               	movf	TI_NewTimer@TimerHandle^0,w,c
  8117   00195A  6ED9               	movwf	fsr2l,c
  8118   00195C  6ADA               	clrf	fsr2h,c
  8119   00195E  C04F  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8120   001962                     l83:
  8121   001962  0012               	return		;funcret
  8122   001964                     __end_of_TI_NewTimer:
  8123                           	callstack 0
  8124                           
  8125 ;; *************** function _EscriuPrimeraOrdre *****************
  8126 ;; Defined at:
  8127 ;;		line 260 in file "TAD_DISPLAY.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  ordre           1    wreg     unsigned char 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  ordre           1    2[COMRAM] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      void 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2, status,0
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1
  8141 ;;      Params:         0       0       0
  8142 ;;      Locals:         1       0       0
  8143 ;;      Temps:          1       0       0
  8144 ;;      Totals:         2       0       0
  8145 ;;Total ram usage:        2 bytes
  8146 ;; Hardware stack levels used: 1
  8147 ;; Hardware stack levels required when called: 3
  8148 ;; This function calls:
  8149 ;;		Nothing
  8150 ;; This function is called by:
  8151 ;;		_LcInit
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text42
  8156   001644                     __ptext42:
  8157                           	callstack 0
  8158   001644                     _EscriuPrimeraOrdre:
  8159                           	callstack 26
  8160                           
  8161                           ;incstack = 0
  8162                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8163   001644  6E4E               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8164   001646                     
  8165                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8166   001646  9096               	bcf	150,0,c	;volatile
  8167   001648  9296               	bcf	150,1,c	;volatile
  8168   00164A  9A93               	bcf	147,5,c	;volatile
  8169   00164C  9893               	bcf	147,4,c	;volatile
  8170   00164E  968A               	bcf	138,3,c	;volatile
  8171   001650  948A               	bcf	138,2,c	;volatile
  8172                           
  8173                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8174   001652  828A               	bsf	138,1,c	;volatile
  8175   001654  828A               	bsf	138,1,c	;volatile
  8176   001656                     
  8177                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8178   001656  B64E               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8179   001658  EF30  F00B         	goto	u661
  8180   00165C  EF34  F00B         	goto	u660
  8181   001660                     u661:
  8182   001660  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8183   001662  2A4D               	incf	??_EscriuPrimeraOrdre^0,f,c
  8184   001664  EF35  F00B         	goto	u678
  8185   001668                     u660:
  8186   001668  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8187   00166A                     u678:
  8188   00166A  508D               	movf	141,w,c	;volatile
  8189   00166C  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8190   00166E  0BFE               	andlw	-2
  8191   001670  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8192   001672  6E8D               	movwf	141,c	;volatile
  8193                           
  8194                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8195   001674  B44E               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8196   001676  EF3F  F00B         	goto	u681
  8197   00167A  EF43  F00B         	goto	u680
  8198   00167E                     u681:
  8199   00167E  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8200   001680  2A4D               	incf	??_EscriuPrimeraOrdre^0,f,c
  8201   001682  EF44  F00B         	goto	u698
  8202   001686                     u680:
  8203   001686  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8204   001688                     u698:
  8205   001688  464D               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8206   00168A  508D               	movf	141,w,c	;volatile
  8207   00168C  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8208   00168E  0BFD               	andlw	-3
  8209   001690  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8210   001692  6E8D               	movwf	141,c	;volatile
  8211                           
  8212                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8213   001694  B24E               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8214   001696  EF4F  F00B         	goto	u701
  8215   00169A  EF53  F00B         	goto	u700
  8216   00169E                     u701:
  8217   00169E  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8218   0016A0  2A4D               	incf	??_EscriuPrimeraOrdre^0,f,c
  8219   0016A2  EF54  F00B         	goto	u718
  8220   0016A6                     u700:
  8221   0016A6  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8222   0016A8                     u718:
  8223   0016A8  3A4D               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8224   0016AA  464D               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8225   0016AC  508A               	movf	138,w,c	;volatile
  8226   0016AE  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8227   0016B0  0BDF               	andlw	-33
  8228   0016B2  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8229   0016B4  6E8A               	movwf	138,c	;volatile
  8230                           
  8231                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8232   0016B6  B04E               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8233   0016B8  EF60  F00B         	goto	u721
  8234   0016BC  EF64  F00B         	goto	u720
  8235   0016C0                     u721:
  8236   0016C0  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8237   0016C2  2A4D               	incf	??_EscriuPrimeraOrdre^0,f,c
  8238   0016C4  EF65  F00B         	goto	u738
  8239   0016C8                     u720:
  8240   0016C8  6A4D               	clrf	??_EscriuPrimeraOrdre^0,c
  8241   0016CA                     u738:
  8242   0016CA  3A4D               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8243   0016CC  508A               	movf	138,w,c	;volatile
  8244   0016CE  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8245   0016D0  0BEF               	andlw	-17
  8246   0016D2  184D               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8247   0016D4  6E8A               	movwf	138,c	;volatile
  8248   0016D6                     
  8249                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  8250   0016D6  928A               	bcf	138,1,c	;volatile
  8251   0016D8  0012               	return		;funcret
  8252   0016DA                     __end_of_EscriuPrimeraOrdre:
  8253                           	callstack 0
  8254                           
  8255 ;; *************** function _CantaIR *****************
  8256 ;; Defined at:
  8257 ;;		line 224 in file "TAD_DISPLAY.c"
  8258 ;; Parameters:    Size  Location     Type
  8259 ;;  IR              1    wreg     unsigned char 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  IR              1    3[COMRAM] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      void 
  8264 ;; Registers used:
  8265 ;;		wreg, status,2, status,0, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMRAM   BANK0   BANK1
  8271 ;;      Params:         0       0       0
  8272 ;;      Locals:         1       0       0
  8273 ;;      Temps:          0       0       0
  8274 ;;      Totals:         1       0       0
  8275 ;;Total ram usage:        1 bytes
  8276 ;; Hardware stack levels used: 1
  8277 ;; Hardware stack levels required when called: 4
  8278 ;; This function calls:
  8279 ;;		_CantaPartAlta
  8280 ;;		_CantaPartBaixa
  8281 ;; This function is called by:
  8282 ;;		_LcInit
  8283 ;;		_LcClear
  8284 ;;		_LcCursorOn
  8285 ;;		_LcCursorOff
  8286 ;;		_LcGotoXY
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           	psect	text43
  8291   001BD8                     __ptext43:
  8292                           	callstack 0
  8293   001BD8                     _CantaIR:
  8294                           	callstack 25
  8295                           
  8296                           ;incstack = 0
  8297                           ;CantaIR@IR stored from wreg
  8298   001BD8  6E4F               	movwf	CantaIR@IR^0,c
  8299   001BDA                     
  8300                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8301   001BDA  9096               	bcf	150,0,c	;volatile
  8302   001BDC  9296               	bcf	150,1,c	;volatile
  8303   001BDE  9A93               	bcf	147,5,c	;volatile
  8304   001BE0  9893               	bcf	147,4,c	;volatile
  8305                           
  8306                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8307   001BE2  968A               	bcf	138,3,c	;volatile
  8308                           
  8309                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8310   001BE4  948A               	bcf	138,2,c	;volatile
  8311                           
  8312                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8313   001BE6  828A               	bsf	138,1,c	;volatile
  8314   001BE8                     
  8315                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8316   001BE8  504F               	movf	CantaIR@IR^0,w,c
  8317   001BEA  ECAF  F00B         	call	_CantaPartAlta
  8318   001BEE                     
  8319                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8320   001BEE  828A               	bsf	138,1,c	;volatile
  8321   001BF0                     
  8322                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8323   001BF0  928A               	bcf	138,1,c	;volatile
  8324   001BF2                     
  8325                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8326   001BF2  928A               	bcf	138,1,c	;volatile
  8327   001BF4                     
  8328                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8329   001BF4  828A               	bsf	138,1,c	;volatile
  8330                           
  8331                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8332   001BF6  504F               	movf	CantaIR@IR^0,w,c
  8333   001BF8  EC6D  F00B         	call	_CantaPartBaixa
  8334   001BFC                     
  8335                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8336   001BFC  828A               	bsf	138,1,c	;volatile
  8337   001BFE                     
  8338                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8339   001BFE  928A               	bcf	138,1,c	;volatile
  8340   001C00                     
  8341                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8342   001C00  8096               	bsf	150,0,c	;volatile
  8343   001C02  8296               	bsf	150,1,c	;volatile
  8344   001C04  8A93               	bsf	147,5,c	;volatile
  8345   001C06  8893               	bsf	147,4,c	;volatile
  8346   001C08  0012               	return		;funcret
  8347   001C0A                     __end_of_CantaIR:
  8348                           	callstack 0
  8349                           
  8350 ;; *************** function _CantaPartBaixa *****************
  8351 ;; Defined at:
  8352 ;;		line 217 in file "TAD_DISPLAY.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;  c               1    wreg     unsigned char 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  c               1    2[COMRAM] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, status,2, status,0
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1
  8366 ;;      Params:         0       0       0
  8367 ;;      Locals:         1       0       0
  8368 ;;      Temps:          1       0       0
  8369 ;;      Totals:         2       0       0
  8370 ;;Total ram usage:        2 bytes
  8371 ;; Hardware stack levels used: 1
  8372 ;; Hardware stack levels required when called: 3
  8373 ;; This function calls:
  8374 ;;		Nothing
  8375 ;; This function is called by:
  8376 ;;		_CantaIR
  8377 ;;		_CantaData
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text44
  8382   0016DA                     __ptext44:
  8383                           	callstack 0
  8384   0016DA                     _CantaPartBaixa:
  8385                           	callstack 25
  8386                           
  8387                           ;incstack = 0
  8388                           ;CantaPartBaixa@c stored from wreg
  8389   0016DA  6E4E               	movwf	CantaPartBaixa@c^0,c
  8390   0016DC                     
  8391                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  8392   0016DC  B64E               	btfsc	CantaPartBaixa@c^0,3,c
  8393   0016DE  EF73  F00B         	goto	u2771
  8394   0016E2  EF77  F00B         	goto	u2770
  8395   0016E6                     u2771:
  8396   0016E6  6A4D               	clrf	??_CantaPartBaixa^0,c
  8397   0016E8  2A4D               	incf	??_CantaPartBaixa^0,f,c
  8398   0016EA  EF78  F00B         	goto	u2788
  8399   0016EE                     u2770:
  8400   0016EE  6A4D               	clrf	??_CantaPartBaixa^0,c
  8401   0016F0                     u2788:
  8402   0016F0  508D               	movf	141,w,c	;volatile
  8403   0016F2  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8404   0016F4  0BFE               	andlw	-2
  8405   0016F6  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8406   0016F8  6E8D               	movwf	141,c	;volatile
  8407                           
  8408                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  8409   0016FA  B44E               	btfsc	CantaPartBaixa@c^0,2,c
  8410   0016FC  EF82  F00B         	goto	u2791
  8411   001700  EF86  F00B         	goto	u2790
  8412   001704                     u2791:
  8413   001704  6A4D               	clrf	??_CantaPartBaixa^0,c
  8414   001706  2A4D               	incf	??_CantaPartBaixa^0,f,c
  8415   001708  EF87  F00B         	goto	u2808
  8416   00170C                     u2790:
  8417   00170C  6A4D               	clrf	??_CantaPartBaixa^0,c
  8418   00170E                     u2808:
  8419   00170E  464D               	rlncf	??_CantaPartBaixa^0,f,c
  8420   001710  508D               	movf	141,w,c	;volatile
  8421   001712  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8422   001714  0BFD               	andlw	-3
  8423   001716  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8424   001718  6E8D               	movwf	141,c	;volatile
  8425                           
  8426                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  8427   00171A  B24E               	btfsc	CantaPartBaixa@c^0,1,c
  8428   00171C  EF92  F00B         	goto	u2811
  8429   001720  EF96  F00B         	goto	u2810
  8430   001724                     u2811:
  8431   001724  6A4D               	clrf	??_CantaPartBaixa^0,c
  8432   001726  2A4D               	incf	??_CantaPartBaixa^0,f,c
  8433   001728  EF97  F00B         	goto	u2828
  8434   00172C                     u2810:
  8435   00172C  6A4D               	clrf	??_CantaPartBaixa^0,c
  8436   00172E                     u2828:
  8437   00172E  3A4D               	swapf	??_CantaPartBaixa^0,f,c
  8438   001730  464D               	rlncf	??_CantaPartBaixa^0,f,c
  8439   001732  508A               	movf	138,w,c	;volatile
  8440   001734  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8441   001736  0BDF               	andlw	-33
  8442   001738  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8443   00173A  6E8A               	movwf	138,c	;volatile
  8444                           
  8445                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  8446   00173C  B04E               	btfsc	CantaPartBaixa@c^0,0,c
  8447   00173E  EFA3  F00B         	goto	u2831
  8448   001742  EFA7  F00B         	goto	u2830
  8449   001746                     u2831:
  8450   001746  6A4D               	clrf	??_CantaPartBaixa^0,c
  8451   001748  2A4D               	incf	??_CantaPartBaixa^0,f,c
  8452   00174A  EFA8  F00B         	goto	u2848
  8453   00174E                     u2830:
  8454   00174E  6A4D               	clrf	??_CantaPartBaixa^0,c
  8455   001750                     u2848:
  8456   001750  3A4D               	swapf	??_CantaPartBaixa^0,f,c
  8457   001752  508A               	movf	138,w,c	;volatile
  8458   001754  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8459   001756  0BEF               	andlw	-17
  8460   001758  184D               	xorwf	??_CantaPartBaixa^0,w,c
  8461   00175A  6E8A               	movwf	138,c	;volatile
  8462   00175C  0012               	return		;funcret
  8463   00175E                     __end_of_CantaPartBaixa:
  8464                           	callstack 0
  8465                           
  8466 ;; *************** function _CantaPartAlta *****************
  8467 ;; Defined at:
  8468 ;;		line 210 in file "TAD_DISPLAY.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  c               1    wreg     unsigned char 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  c               1    2[COMRAM] unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, status,2, status,0
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMRAM   BANK0   BANK1
  8482 ;;      Params:         0       0       0
  8483 ;;      Locals:         1       0       0
  8484 ;;      Temps:          1       0       0
  8485 ;;      Totals:         2       0       0
  8486 ;;Total ram usage:        2 bytes
  8487 ;; Hardware stack levels used: 1
  8488 ;; Hardware stack levels required when called: 3
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_CantaIR
  8493 ;;		_CantaData
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text45
  8498   00175E                     __ptext45:
  8499                           	callstack 0
  8500   00175E                     _CantaPartAlta:
  8501                           	callstack 25
  8502                           
  8503                           ;incstack = 0
  8504                           ;CantaPartAlta@c stored from wreg
  8505   00175E  6E4E               	movwf	CantaPartAlta@c^0,c
  8506   001760                     
  8507                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8508   001760  BE4E               	btfsc	CantaPartAlta@c^0,7,c
  8509   001762  EFB5  F00B         	goto	u2691
  8510   001766  EFB9  F00B         	goto	u2690
  8511   00176A                     u2691:
  8512   00176A  6A4D               	clrf	??_CantaPartAlta^0,c
  8513   00176C  2A4D               	incf	??_CantaPartAlta^0,f,c
  8514   00176E  EFBA  F00B         	goto	u2708
  8515   001772                     u2690:
  8516   001772  6A4D               	clrf	??_CantaPartAlta^0,c
  8517   001774                     u2708:
  8518   001774  508D               	movf	141,w,c	;volatile
  8519   001776  184D               	xorwf	??_CantaPartAlta^0,w,c
  8520   001778  0BFE               	andlw	-2
  8521   00177A  184D               	xorwf	??_CantaPartAlta^0,w,c
  8522   00177C  6E8D               	movwf	141,c	;volatile
  8523                           
  8524                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8525   00177E  BC4E               	btfsc	CantaPartAlta@c^0,6,c
  8526   001780  EFC4  F00B         	goto	u2711
  8527   001784  EFC8  F00B         	goto	u2710
  8528   001788                     u2711:
  8529   001788  6A4D               	clrf	??_CantaPartAlta^0,c
  8530   00178A  2A4D               	incf	??_CantaPartAlta^0,f,c
  8531   00178C  EFC9  F00B         	goto	u2728
  8532   001790                     u2710:
  8533   001790  6A4D               	clrf	??_CantaPartAlta^0,c
  8534   001792                     u2728:
  8535   001792  464D               	rlncf	??_CantaPartAlta^0,f,c
  8536   001794  508D               	movf	141,w,c	;volatile
  8537   001796  184D               	xorwf	??_CantaPartAlta^0,w,c
  8538   001798  0BFD               	andlw	-3
  8539   00179A  184D               	xorwf	??_CantaPartAlta^0,w,c
  8540   00179C  6E8D               	movwf	141,c	;volatile
  8541                           
  8542                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8543   00179E  BA4E               	btfsc	CantaPartAlta@c^0,5,c
  8544   0017A0  EFD4  F00B         	goto	u2731
  8545   0017A4  EFD8  F00B         	goto	u2730
  8546   0017A8                     u2731:
  8547   0017A8  6A4D               	clrf	??_CantaPartAlta^0,c
  8548   0017AA  2A4D               	incf	??_CantaPartAlta^0,f,c
  8549   0017AC  EFD9  F00B         	goto	u2748
  8550   0017B0                     u2730:
  8551   0017B0  6A4D               	clrf	??_CantaPartAlta^0,c
  8552   0017B2                     u2748:
  8553   0017B2  3A4D               	swapf	??_CantaPartAlta^0,f,c
  8554   0017B4  464D               	rlncf	??_CantaPartAlta^0,f,c
  8555   0017B6  508A               	movf	138,w,c	;volatile
  8556   0017B8  184D               	xorwf	??_CantaPartAlta^0,w,c
  8557   0017BA  0BDF               	andlw	-33
  8558   0017BC  184D               	xorwf	??_CantaPartAlta^0,w,c
  8559   0017BE  6E8A               	movwf	138,c	;volatile
  8560                           
  8561                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8562   0017C0  B84E               	btfsc	CantaPartAlta@c^0,4,c
  8563   0017C2  EFE5  F00B         	goto	u2751
  8564   0017C6  EFE9  F00B         	goto	u2750
  8565   0017CA                     u2751:
  8566   0017CA  6A4D               	clrf	??_CantaPartAlta^0,c
  8567   0017CC  2A4D               	incf	??_CantaPartAlta^0,f,c
  8568   0017CE  EFEA  F00B         	goto	u2768
  8569   0017D2                     u2750:
  8570   0017D2  6A4D               	clrf	??_CantaPartAlta^0,c
  8571   0017D4                     u2768:
  8572   0017D4  3A4D               	swapf	??_CantaPartAlta^0,f,c
  8573   0017D6  508A               	movf	138,w,c	;volatile
  8574   0017D8  184D               	xorwf	??_CantaPartAlta^0,w,c
  8575   0017DA  0BEF               	andlw	-17
  8576   0017DC  184D               	xorwf	??_CantaPartAlta^0,w,c
  8577   0017DE  6E8A               	movwf	138,c	;volatile
  8578   0017E0  0012               	return		;funcret
  8579   0017E2                     __end_of_CantaPartAlta:
  8580                           	callstack 0
  8581                           
  8582 ;; *************** function _LowRSI *****************
  8583 ;; Defined at:
  8584 ;;		line 34 in file "main.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;		None
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;		None
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		None
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1
  8598 ;;      Params:         0       0       0
  8599 ;;      Locals:         0       0       0
  8600 ;;      Temps:          1       0       0
  8601 ;;      Totals:         1       0       0
  8602 ;;Total ram usage:        1 bytes
  8603 ;; Hardware stack levels used: 1
  8604 ;; Hardware stack levels required when called: 2
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		Interrupt level 1
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           	psect	intcodelo
  8613   000018                     __pintcodelo:
  8614                           	callstack 0
  8615   000018                     _LowRSI:
  8616                           	callstack 22
  8617                           
  8618                           ;incstack = 0
  8619   000018  8076               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8620   00001A  CFE0 F04C          	movff	bsr,??_LowRSI
  8621   00001E  C04C  FFE0         	movff	??_LowRSI,bsr
  8622   000022  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8623   000024  0010               	retfie	
  8624   000026                     __end_of_LowRSI:
  8625                           	callstack 0
  8626                           
  8627 ;; *************** function _HighRSI *****************
  8628 ;; Defined at:
  8629 ;;		line 30 in file "main.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;		None
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;		None
  8634 ;; Return value:  Size  Location     Type
  8635 ;;                  1    wreg      void 
  8636 ;; Registers used:
  8637 ;;		wreg, status,2, status,0, cstack
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMRAM   BANK0   BANK1
  8643 ;;      Params:         0       0       0
  8644 ;;      Locals:         0       0       0
  8645 ;;      Temps:          0       0       0
  8646 ;;      Totals:         0       0       0
  8647 ;;Total ram usage:        0 bytes
  8648 ;; Hardware stack levels used: 1
  8649 ;; Hardware stack levels required when called: 1
  8650 ;; This function calls:
  8651 ;;		_RSI_Timer0
  8652 ;; This function is called by:
  8653 ;;		Interrupt level 2
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           	psect	intcode
  8658   000008                     __pintcode:
  8659                           	callstack 0
  8660   000008                     _HighRSI:
  8661                           	callstack 22
  8662                           
  8663                           ;incstack = 0
  8664   000008  8276               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8665   00000A  EF98  F00E         	goto	int_func
  8666                           
  8667                           	psect	intcode_body
  8668   001D30                     __pintcode_body:
  8669                           	callstack 22
  8670   001D30                     int_func:
  8671                           	callstack 22
  8672   001D30                     
  8673                           ;main.c: 32:      motor_RFID();
  8674   001D30  A4F2               	btfss	242,2,c	;volatile
  8675   001D32  EF9D  F00E         	goto	i2u216_41
  8676   001D36  EF9F  F00E         	goto	i2u216_40
  8677   001D3A                     i2u216_41:
  8678   001D3A  EFA1  F00E         	goto	i2l38
  8679   001D3E                     i2u216_40:
  8680   001D3E  EC81  F00E         	call	_RSI_Timer0	;wreg free
  8681   001D42                     i2l38:
  8682   001D42  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8683   001D44  0011               	retfie		f
  8684   001D46                     __end_of_HighRSI:
  8685                           	callstack 0
  8686                           
  8687 ;; *************** function _RSI_Timer0 *****************
  8688 ;; Defined at:
  8689 ;;		line 25 in file "TAD_TIMER.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  1    wreg      void 
  8696 ;; Registers used:
  8697 ;;		wreg, status,2, status,0
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMRAM   BANK0   BANK1
  8703 ;;      Params:         0       0       0
  8704 ;;      Locals:         0       0       0
  8705 ;;      Temps:          0       0       0
  8706 ;;      Totals:         0       0       0
  8707 ;;Total ram usage:        0 bytes
  8708 ;; Hardware stack levels used: 1
  8709 ;; This function calls:
  8710 ;;		Nothing
  8711 ;; This function is called by:
  8712 ;;		_HighRSI
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           	psect	text48
  8717   001D02                     __ptext48:
  8718                           	callstack 0
  8719   001D02                     _RSI_Timer0:
  8720                           	callstack 22
  8721   001D02                     
  8722                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8723   001D02  0EF6               	movlw	246
  8724   001D04  6ED7               	movwf	215,c	;volatile
  8725   001D06  0E3C               	movlw	60
  8726   001D08  6ED6               	movwf	214,c	;volatile
  8727   001D0A                     
  8728                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8729   001D0A  94F2               	bcf	4082,2,c	;volatile
  8730   001D0C                     
  8731                           ;TAD_TIMER.c: 29:     Tics++;
  8732   001D0C  0E01               	movlw	1
  8733   001D0E  2607               	addwf	_Tics^0,f,c	;volatile
  8734   001D10  0E00               	movlw	0
  8735   001D12  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  8736   001D14  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  8737   001D16  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  8738   001D18  0012               	return		;funcret
  8739   001D1A                     __end_of_RSI_Timer0:
  8740                           	callstack 0
  8741                           
  8742                           	psect	rparam
  8743   000001                     ___rparam_used  equ	1
  8744   000000                     ___param_bank   equ	0
  8745   000000                     __Lparam        equ	__Lrparam
  8746   000000                     __Hparam        equ	__Hrparam
  8747                           
  8748                           	psect	temp
  8749   000076                     btemp:
  8750                           	callstack 0
  8751   000076                     	ds	1
  8752   000076                     int$flags       set	btemp
  8753   000077                     wtemp8          set	btemp+1
  8754   000077                     ttemp5          set	btemp+1
  8755   00007A                     ttemp6          set	btemp+4
  8756   00007E                     ttemp7          set	btemp+8
  8757                           
  8758                           	psect	idloc
  8759                           
  8760                           ;Config register IDLOC0 @ 0x200000
  8761                           ;	unspecified, using default values
  8762   200000                     	org	2097152
  8763   200000  FF                 	db	255
  8764                           
  8765                           ;Config register IDLOC1 @ 0x200001
  8766                           ;	unspecified, using default values
  8767   200001                     	org	2097153
  8768   200001  FF                 	db	255
  8769                           
  8770                           ;Config register IDLOC2 @ 0x200002
  8771                           ;	unspecified, using default values
  8772   200002                     	org	2097154
  8773   200002  FF                 	db	255
  8774                           
  8775                           ;Config register IDLOC3 @ 0x200003
  8776                           ;	unspecified, using default values
  8777   200003                     	org	2097155
  8778   200003  FF                 	db	255
  8779                           
  8780                           ;Config register IDLOC4 @ 0x200004
  8781                           ;	unspecified, using default values
  8782   200004                     	org	2097156
  8783   200004  FF                 	db	255
  8784                           
  8785                           ;Config register IDLOC5 @ 0x200005
  8786                           ;	unspecified, using default values
  8787   200005                     	org	2097157
  8788   200005  FF                 	db	255
  8789                           
  8790                           ;Config register IDLOC6 @ 0x200006
  8791                           ;	unspecified, using default values
  8792   200006                     	org	2097158
  8793   200006  FF                 	db	255
  8794                           
  8795                           ;Config register IDLOC7 @ 0x200007
  8796                           ;	unspecified, using default values
  8797   200007                     	org	2097159
  8798   200007  FF                 	db	255
  8799                           
  8800                           	psect	config
  8801                           
  8802                           ; Padding undefined space
  8803   300000                     	org	3145728
  8804   300000  FF                 	db	255
  8805                           
  8806                           ;Config register CONFIG1H @ 0x300001
  8807                           ;	Oscillator
  8808                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8809                           ;	Fail-Safe Clock Monitor Enable bit
  8810                           ;	FCMEN = 0x0, unprogrammed default
  8811                           ;	Internal/External Oscillator Switchover bit
  8812                           ;	IESO = 0x0, unprogrammed default
  8813   300001                     	org	3145729
  8814   300001  06                 	db	6
  8815                           
  8816                           ;Config register CONFIG2L @ 0x300002
  8817                           ;	Power-up Timer Enable bit
  8818                           ;	PWRT = OFF, PWRT disabled
  8819                           ;	Brown-out Reset Enable bits
  8820                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8821                           ;	Brown-out Reset Voltage bits
  8822                           ;	BORV = 0x3, unprogrammed default
  8823   300002                     	org	3145730
  8824   300002  19                 	db	25
  8825                           
  8826                           ;Config register CONFIG2H @ 0x300003
  8827                           ;	Watchdog Timer Enable bit
  8828                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8829                           ;	Watchdog Timer Postscale Select bits
  8830                           ;	WDTPS = 0xF, unprogrammed default
  8831   300003                     	org	3145731
  8832   300003  1E                 	db	30
  8833                           
  8834                           ; Padding undefined space
  8835   300004                     	org	3145732
  8836   300004  FF                 	db	255
  8837                           
  8838                           ;Config register CONFIG3H @ 0x300005
  8839                           ;	CCP2 MUX bit
  8840                           ;	CCP2MX = 0x1, unprogrammed default
  8841                           ;	PORTB A/D Enable bit
  8842                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8843                           ;	Low-Power Timer1 Oscillator Enable bit
  8844                           ;	LPT1OSC = 0x0, unprogrammed default
  8845                           ;	MCLR Pin Enable bit
  8846                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8847   300005                     	org	3145733
  8848   300005  81                 	db	129
  8849                           
  8850                           ;Config register CONFIG4L @ 0x300006
  8851                           ;	Stack Full/Underflow Reset Enable bit
  8852                           ;	STVREN = 0x1, unprogrammed default
  8853                           ;	Single-Supply ICSP Enable bit
  8854                           ;	LVP = OFF, Single-Supply ICSP disabled
  8855                           ;	Boot Block Size Select bits
  8856                           ;	BBSIZ = 0x0, unprogrammed default
  8857                           ;	Extended Instruction Set Enable bit
  8858                           ;	XINST = 0x0, unprogrammed default
  8859                           ;	Background Debugger Enable bit
  8860                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8861   300006                     	org	3145734
  8862   300006  81                 	db	129
  8863                           
  8864                           ; Padding undefined space
  8865   300007                     	org	3145735
  8866   300007  FF                 	db	255
  8867                           
  8868                           ;Config register CONFIG5L @ 0x300008
  8869                           ;	unspecified, using default values
  8870                           ;	Code Protection bit
  8871                           ;	CP0 = 0x1, unprogrammed default
  8872                           ;	Code Protection bit
  8873                           ;	CP1 = 0x1, unprogrammed default
  8874   300008                     	org	3145736
  8875   300008  03                 	db	3
  8876                           
  8877                           ;Config register CONFIG5H @ 0x300009
  8878                           ;	unspecified, using default values
  8879                           ;	Boot Block Code Protection bitProtect Boot
  8880                           ;	CPB = 0x1, unprogrammed default
  8881                           ;	Data EEPROM Code Protection bit
  8882                           ;	CPD = 0x1, unprogrammed default
  8883   300009                     	org	3145737
  8884   300009  C0                 	db	192
  8885                           
  8886                           ;Config register CONFIG6L @ 0x30000A
  8887                           ;	unspecified, using default values
  8888                           ;	Write Protection bit
  8889                           ;	WRT0 = 0x1, unprogrammed default
  8890                           ;	Write Protection bit
  8891                           ;	WRT1 = 0x1, unprogrammed default
  8892   30000A                     	org	3145738
  8893   30000A  03                 	db	3
  8894                           
  8895                           ;Config register CONFIG6H @ 0x30000B
  8896                           ;	unspecified, using default values
  8897                           ;	Configuration Register Write Protection bit
  8898                           ;	WRTC = 0x1, unprogrammed default
  8899                           ;	Boot Block Write Protection bit
  8900                           ;	WRTB = 0x1, unprogrammed default
  8901                           ;	Data EEPROM Write Protection bit
  8902                           ;	WRTD = 0x1, unprogrammed default
  8903   30000B                     	org	3145739
  8904   30000B  E0                 	db	224
  8905                           
  8906                           ;Config register CONFIG7L @ 0x30000C
  8907                           ;	unspecified, using default values
  8908                           ;	Table Read Protection bit
  8909                           ;	EBTR0 = 0x1, unprogrammed default
  8910                           ;	Table Read Protection bit
  8911                           ;	EBTR1 = 0x1, unprogrammed default
  8912   30000C                     	org	3145740
  8913   30000C  03                 	db	3
  8914                           
  8915                           ;Config register CONFIG7H @ 0x30000D
  8916                           ;	unspecified, using default values
  8917                           ;	Boot Block Table Read Protection bit
  8918                           ;	EBTRB = 0x1, unprogrammed default
  8919   30000D                     	org	3145741
  8920   30000D  40                 	db	64
  8921                           tosu	equ	0xFFF
  8922                           tosh	equ	0xFFE
  8923                           tosl	equ	0xFFD
  8924                           stkptr	equ	0xFFC
  8925                           pclatu	equ	0xFFB
  8926                           pclath	equ	0xFFA
  8927                           pcl	equ	0xFF9
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           indf0	equ	0xFEF
  8935                           postinc0	equ	0xFEE
  8936                           postdec0	equ	0xFED
  8937                           preinc0	equ	0xFEC
  8938                           plusw0	equ	0xFEB
  8939                           fsr0h	equ	0xFEA
  8940                           fsr0l	equ	0xFE9
  8941                           wreg	equ	0xFE8
  8942                           indf1	equ	0xFE7
  8943                           postinc1	equ	0xFE6
  8944                           postdec1	equ	0xFE5
  8945                           preinc1	equ	0xFE4
  8946                           plusw1	equ	0xFE3
  8947                           fsr1h	equ	0xFE2
  8948                           fsr1l	equ	0xFE1
  8949                           bsr	equ	0xFE0
  8950                           indf2	equ	0xFDF
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           preinc2	equ	0xFDC
  8954                           plusw2	equ	0xFDB
  8955                           fsr2h	equ	0xFDA
  8956                           fsr2l	equ	0xFD9
  8957                           status	equ	0xFD8

Data Sizes:
    Strings     335
    Constant    12
    Data        96
    BSS         95
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     117
    BANK0           128      0     108
    BANK1           256      0       0

Pointer List with Targets:

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), motorTerminal@currentUser_910(COMRAM[5]), NULL(NULL[0]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_15(CODE[18]), STR_16(CODE[18]), STR_17(CODE[18]), STR_18(CODE[18]), 
		 -> STR_19(CODE[19]), STR_20(CODE[27]), STR_21(CODE[29]), STR_22(CODE[33]), 
		 -> STR_23(CODE[9]), STR_24(CODE[3]), STR_25(CODE[3]), STR_26(CODE[3]), 
		 -> STR_27(CODE[33]), STR_28(CODE[6]), STR_29(CODE[33]), STR_30(CODE[3]), 
		 -> STR_31(CODE[33]), STR_32(CODE[33]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser_910(COMRAM[5]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_15(CODE[18]), STR_16(CODE[18]), STR_17(CODE[18]), STR_18(CODE[18]), 
		 -> STR_19(CODE[19]), STR_20(CODE[27]), STR_21(CODE[29]), STR_22(CODE[33]), 
		 -> STR_23(CODE[9]), STR_24(CODE[3]), STR_25(CODE[3]), STR_26(CODE[3]), 
		 -> STR_27(CODE[33]), STR_28(CODE[6]), STR_29(CODE[33]), STR_30(CODE[3]), 
		 -> STR_31(CODE[33]), STR_32(CODE[33]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_1(CODE[18]), STR_10(CODE[2]), STR_11(CODE[3]), STR_12(CODE[3]), 
		 -> STR_13(CODE[4]), STR_14(CODE[3]), STR_2(CODE[18]), STR_3(CODE[18]), 
		 -> STR_33(CODE[6]), STR_34(CODE[10]), STR_35(CODE[2]), STR_36(CODE[3]), 
		 -> STR_37(CODE[22]), STR_38(CODE[2]), STR_4(CODE[19]), STR_5(CODE[27]), 
		 -> STR_6(CODE[29]), STR_7(CODE[33]), STR_8(CODE[9]), STR_9(CODE[6]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F1021(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motor_Write->_delay_us
    _motor_Read->_delay_us
    _motorTerminal->_printfUID
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _MFRC522_Init->_MFRC522_AntennaControl
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaControl->_MFRC522_Bit_Mask
    _MFRC522_Bit_Mask->_MFRC522_Rd
    _MFRC522_Bit_Mask->_MFRC522_Wr
    _MFRC522_Wr->_delay_us
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6871
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          12    12      0    3319
                                             22 COMRAM    12    12      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1027
                                             17 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       6     5      1     349
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          3     2      1     124
                                              3 COMRAM     3     2      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           6     6      0     128
                                              3 COMRAM     4     4      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                       10    10      0    1184
                                             17 COMRAM    10    10      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     281
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           10     9      1     463
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2      94
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _motor_StartSendString                                2     0      2      69
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (3) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (4) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         1     0      1     114
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1184
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1184
             _MFRC522_AntennaControl
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     280
                         _MFRC522_Wr
                           _delay_us
                   _resetMotorStates
 ---------------------------------------------------------------------------------
 (4) _resetMotorStates                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaControl                               1     1      0     676
                                             15 COMRAM     1     1      0
                   _MFRC522_Bit_Mask
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Bit_Mask                                     7     5      2     647
                                              8 COMRAM     7     5      2
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     228
                                              3 COMRAM     5     4      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     222
                                              3 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaControl
         _MFRC522_Bit_Mask
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _delay_us
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
         _resetMotorStates
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
         _Terminal_SendChar
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
   _motor_RFID
     _getActualUID
     _motor_Read
       _delay_us
     _motor_Write
       _delay_us
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     108     84.4%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     34     117     92.9%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         35      0       0      0.0%
BITBIGSFRllh         5      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     225      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 13 15:49:47 2025

         __end_ofGetTecla@F2759 1EAF           ?_Terminal_ReceiveChar 004C                      _RSI_Timer0 1D02  
                   MFRC522_Rd@i 0053                     MFRC522_Wr@i 0053                              l54 1DCE  
                            l90 19FA                              l83 1962                              l77 1BD6  
                            l87 1CA4                      _TI_GetTics 19B0                              bsr 0FE0  
          ??_InitPortDirections 004D                     _state_write 0038                             l211 1D96  
                           l300 1DAC                             l134 1D2E                             l215 1C6C  
                           l224 14CA                             l217 1C80                             l225 1504  
                           l137 1DC6                             l226 150A                             l234 1464  
                           l250 1C36                             l244 1A88                             l237 1468  
                           l342 04BE                             l255 1BA2                             l247 1DB6  
                           l602 16D8                             l258 19AE                             l274 130A  
                           l291 0F96                             l532 1132                             l268 122A  
                           l286 103A                             l631 1D7C                             l296 1016  
                           l801 15AA                             l650 1DD2                             l634 1D00  
                           l642 1CE0                             l810 1A44                             l386 0340  
                           l643 1CE4                             l637 1D58                             l661 184E  
                           l709 0EF0                             l493 0AF0                             l590 175C  
                           l646 1C56                             l647 1C5C                             l807 1B38  
                           l584 1AC6                             l656 1B6E                             l593 1C08  
                           l587 17E0                             l669 1CC6                             l599 1D6C  
                           l784 1DA2                             l689 1222                             l699 13C0  
                           l789 1642                             l879 1D8A                             u700 16A6  
                           u701 169E                             u720 16C8                             u721 16C0  
                           u660 1668                             u661 1660                             u718 16A8  
                           u680 1686                             u681 167E                             u738 16CA  
                           u780 1D56                             u781 1D50                             u678 166A  
                           u698 1688                             u786 1D58                    printfUID@low 005A  
              ??_CantaPartBaixa 004D                             wreg 0FE8                  ??_MFRC522_Init 005C  
                          l2060 1646                            l2140 1DD0                            l2062 1656  
                          l2230 1D6E                            l2064 16D6                            l2232 1D76  
                          l2240 1DCC                            l2136 1D46                            l4010 1090  
                          l2234 1D78                            l4020 10DC                            l4012 10A2  
                          l4004 1060                            l2236 1D7A                            l4100 0C36  
                          l4030 110C                            l4022 10E6                            l4014 10BA  
                          l4006 1072                            l2238 1DC8                            l4110 0C6E  
                          l4102 0C46                            l4032 1112                            l4024 10EC  
                          l4016 10C0                            l4008 1078                            l3400 14B4  
                          l1712 1DAE                            l4200 0E40                            l4120 0CAE  
                          l4112 0C7A                            l4104 0C52                            l4040 0B16  
                          l4034 1116                            l4026 10FE                            l4018 10D8  
                          l3410 14D2                            l3402 14B6                            l4210 0E6C  
                          l4202 0E42                            l4130 0CE6                            l4122 0CBA  
                          l4114 0C7E                            l4106 0C56                            l4050 0B44  
                          l4042 0B1C                            l4028 1102                            l3420 1508  
                          l3412 14D6                            l3404 14C6                            l3500 1C5A  
                          l4204 0E54                            l4140 0D16                            l4132 0CEA  
                          l4124 0CBE                            l4116 0C86                            l4108 0C5E  
                          l4060 0B6E                            l4052 0B54                            l4044 0B30  
                          l4036 0AF2                            l4300 01EA                            l4220 002E  
                          l2294 1D98                            l3414 14EA                            l3430 13D0  
                          l3510 1B52                            l4206 0E5C                            l4150 0D44  
                          l4142 0D1E                            l4134 0CF2                            l4126 0CC6  
                          l4118 0C9A                            l4070 0BA6                            l4062 0B7E  
                          l4054 0B60                            l4046 0B3C                            l4038 0B02  
                          l4310 021A                            l4302 01F8                            l4230 006A  
                          l4222 003A                            l3416 14F2                            l3408 14CC  
                          l3440 13FA                            l3424 13C4                            l3520 1C18  
                          l3512 1C0A                            l3504 1B3A                            l3600 11C8  
                          l4208 0E68                            l4160 0D74                            l4152 0D4C  
                          l4144 0D2A                            l4136 0D06                            l4128 0CDA  
                          l4080 0BDA                            l4072 0BB2                            l4064 0B8A  
                          l4056 0B64                            l4048 0B40                            l4216 0E72  
                          l4400 04CE                            l4320 0266                            l4304 0208  
                          l4240 00A0                            l4232 007A                            l4224 004A  
                          l3370 1C6E                            l3418 14F4                            l3450 141A  
                          l3442 1400                            l3426 13CC                            l3530 1B72  
                          l3522 1C1E                            l3514 1C0E                            l3506 1B3E  
                          l3610 1216                            l3602 11CE                            l4170 0DA4  
                          l4162 0D80                            l4154 0D5C                            l4146 0D2E  
                          l4138 0D12                            l4090 0C06                            l4082 0BDE  
                          l4074 0BB6                            l4066 0B8E                            l4058 0B68  
                          l4410 050A                            l4402 04DE                            l4330 0290  
                          l4322 026C                            l4314 022E                            l4306 020A  
                          l4250 00DC                            l4242 00B2                            l4234 0082  
                          l4226 0056                            l4218 002A                            l3540 1760  
                          l3380 1478                            l3460 144A                            l3444 1402  
                          l3436 13D4                            l3428 13CE                            l3532 1B82  
                          l3524 1C20                            l3516 1C10                            l3372 1CE6  
                          l3508 1B4E                            l3604 11EA                            l4164 0D84  
                          l4156 0D68                            l4148 0D34                            l4092 0C0E  
                          l4084 0BE6                            l4076 0BBE                            l4068 0B96  
                          l3620 1322                            l3612 130C                            l4412 051C  
                          l4404 04EE                            l4340 02D8                            l4332 02A2  
                          l4324 0274                            l4316 0240                            l4308 0212  
                          l4260 0112                            l4252 00E4                            l4244 00B6  
                          l4236 008A                            l4228 005E                            l3542 16DC  
                          l3390 1480                            l3382 147A                            l3462 144C  
                          l3454 141E                            l3446 1408                            l3438 13F4  
                          l3534 1B94                            l3526 1C26                            l3518 1C16  
                          l3550 17EC                            l3470 1CCA                            l3606 11F6  
                          l4190 0DF8                            l4182 0DD0                            l4174 0DB0  
                          l4166 0D8C                            l4158 0D6C                            l4094 0C1E  
                          l4086 0BF6                            l4078 0BCE                            l3710 0EF4  
                          l3702 12EA                            l3630 1366                            l3622 132E  
                          l4510 06F4                            l4502 06D0                            l4430 056E  
                          l4422 0546                            l4406 04F6                            l4350 030E  
                          l4342 02E0                            l4334 02B2                            l4326 027C  
                          l4318 0252                            l4270 0144                            l4262 0116  
                          l4254 00EC                            l4246 00BE                            l4238 009A  
                          l3480 19C6                            l3472 1C84                            l3536 1A8A  
                          l1880 1D8C                            l3368 1C60                            l3392 14A0  
                          l3384 147C                            l3376 146C                            l3464 1452  
                          l3456 143E                            l3448 140A                            l3528 1C30  
                          l3800 15EC                            l3560 182E                            l3552 1808  
                          l3544 17E2                            l3608 11FA                            l4192 0E04  
                          l4184 0DE0                            l4176 0DC0                            l4168 0D9C  
                          l4096 0C2A                            l4088 0C02                            l3720 0F22  
                          l3712 0F0E                            l3704 1308                            l3640 13B4  
                          l3632 136C                            l3624 133A                            l4520 0734  
                          l4512 06FC                            l4504 06DE                            l4432 0576  
                          l4424 054E                            l4416 0524                            l4360 0350  
                          l4352 0312                            l4344 02E8                            l4336 02BA  
                          l4280 0184                            l4272 0150                            l4264 011E  
                          l4248 00CC                            l3650 1948                            l3642 190E  
                          l3474 1C86                            l3538 1A90                            l3394 14A6  
                          l3378 1476                            l3466 1454                            l3458 1444  
                          l3490 1A72                            l3810 1626                            l3802 15FC  
                          l3562 1832                            l3546 17E6                            l4194 0E08  
                          l4098 0C2E                            l3730 0F3A                            l3722 0F2A  
                          l3714 0F14                            l3634 1388                            l3626 134A  
                          l3618 1314                            l4610 08FA                            l4602 08D4  
                          l4522 0748                            l4506 06EE                            l4450 05CA  
                          l4442 05A0                            l4426 055A                            l4418 0532  
                          l4370 0382                            l4354 0322                            l4338 02C8  
                          l4290 01B8                            l4282 018C                            l4274 0160  
                          l4266 012C                            l4258 0100                     _TI_NewTimer 190E  
                          l3652 1958                            l3644 1914                            l3476 1CA2  
                          l3396 14AC                            l3492 1A7E                            l3484 1A48  
                          l1876 1DC0                            l3812 1634                            l3804 1600  
                          l3468 1CCA                            l4196 0E10                            l4188 0DE8  
                          l3740 0F66                            l3732 0F3C                            l3724 0F2C  
                          l3716 0F1C                            l3708 0EF4                            l3660 1226  
                          l3636 1394                            l3628 135A                            l3820 1A0A  
                          l4620 092E                            l4604 08E6                            l4540 0796  
                          l4532 076E                            l4516 0710                            l4460 05F8  
                          l4444 05AE                            l4436 058A                            l4380 03B6  
                          l4372 038A                            l4364 0364                            l4356 0338  
                          l4348 02FC                            l4284 0198                            l4276 0168  
                          l4268 013C                            l3478 19B2                            l3398 14AE  
                          l3486 1A50                            l1878 1DC4                            l3806 160A  
                          l3494 1C3A                            l3558 180E                            l3590 1188  
                          l3582 1148                            l3574 1134                            l3910 150C  
                          l4198 0E24                            l3750 0F8C                            l3742 0F68  
                          l3734 0F40                            l3726 0F2E                            l3670 1244  
                          l3662 122E                            l3638 1398                            l3830 1A2A  
                          l3822 1A0E                            l3814 19FE                            l4630 096A  
                          l4622 0938                            l4614 090E                            l4606 08EA  
                          l4550 07C6                            l4534 0780                            l4526 0752  
                          l4518 0722                            l4462 0606                            l4454 05DE  
                          l4390 0420                            l4382 03BE                            l4366 0376  
                          l4358 0348                            l4294 01CC                            l4286 01A8  
                          l4278 0174                            l3840 1BF0                            l3648 192C  
                          l3488 1A60                            l3656 1964                            l3808 1618  
                          l3496 1C50                            l3568 1838                            l3904 1CA6  
                          l3592 118E                            l3584 115C                            l3576 1140  
                          l3920 1528                            l3760 0F9E                            l3752 0F8E  
                          l3744 0F6E                            l3728 0F38                            l3680 128C  
                          l3672 1264                            l3664 1236                            l3832 1A36  
                          l3824 1A12                            l3816 1A02                            l4640 09A4  
                          l4632 097C                            l4624 093C                            l4616 0920  
                          l4608 08F2                            l4560 080A                            l4552 07D8  
                          l4544 07AA                            l4528 075A                            l4480 0666  
                          l4472 063A                            l4456 05F0                            l4448 05C2  
                          l4384 03CE                            l4376 039E                            l4368 037A  
                          l4296 01DE                            l4288 01B0                            l4800 1AF0  
                          l3850 1C00                            l3842 1BF2                            l3834 1BDA  
                          l3658 1968                            l3906 1CBA                            l3594 119C  
                          l3586 116C                            l3930 1552                            l3922 1534  
                          l3770 0FE2                            l3762 0FBA                            l3746 0F72  
                          l3738 0F46                            l3690 12C2                            l3682 128E  
                          l3674 126A                            l3666 123A                            l3826 1A16  
                          l3818 1A06                            l4642 09B6                            l4634 0990  
                          l4626 0944                            l4618 0926                            l4570 083C  
                          l4562 0812                            l4554 07DC                            l4546 07B2  
                          l4538 0788                            l4490 069A                            l4474 0646  
                          l4466 061A                            l4386 03DE                            l4378 03B0  
                          l4298 01E2                            l4802 1AF2                            l3844 1BF4  
                          l3836 1BE8                            l3852 1D5A                            l3908 1CC2  
                          l3596 11AC                            l3588 117C                            l3940 158E  
                          l3932 155E                            l3916 1514                            l3772 0FF4  
                          l3764 0FBC                            l3748 0F7A                            l3692 12C4  
                          l3684 1296                            l3676 1270                            l3668 123C  
                          l3828 1A22                            l4644 09CC                            l4636 0998  
                          l4628 0962                            l4580 0872                            l4572 0844  
                          l4556 07EC                            l4492 06A2                            l4484 067A  
                          l4468 0626                            l4396 0428                            l4388 040A  
                          l4804 1AF6                            l3846 1BFC                            l3838 1BEE  
                          l3950 1BA4                            l3598 11BC                            l3942 1B04  
                          l3934 1562                            l3918 1520                            l3774 1004  
                          l3766 0FD4                            l3758 0F98                            l3694 12DE  
                          l3686 12B6                            l3678 1272                            l4654 09F4  
                          l4646 09D4                            l4638 099C                            l4590 089A  
                          l4582 0876                            l4574 084C                            l4566 0826  
                          l4558 0802                            l4486 0686                            l4478 065A  
                          l4398 04C2                            l4806 1AFA                            l3848 1BFE  
                          l3960 1BB6                            l3792 15AC                            l3944 1B0E  
                          l3936 157E                            l3928 153C                            l3776 100E  
                          l3768 0FDA                            l3696 12E4                            l3688 12BC  
                          l4648 09E0                            l4592 08AC                            l4584 087E  
                          l4568 0838                            l4496 06B6                            l3962 1BC6  
                          l3970 1D1E                            l3794 15BC                            l3946 1B1C  
                          l3938 158A                            l3786 101C                            l4594 08B0  
                          l4586 0886                            l4578 0860                            l4498 06C8  
                          l4658 0ADA                            l3964 1BD2                            l3956 1BA6  
                          l3980 1DA4                            l3972 1D20                            l3796 15CC  
                          l3948 1B2A                            l4596 08B8                            l3990 1046  
                          l3966 1BD4                            l3958 1BB4                            l3982 1DA8  
                          l3974 1D22                            l3798 15DC                            l4598 08C0  
                          l4790 1AD8                            l3992 104A                            l3984 1D7E  
                          l3976 1D24                            l3968 1D1A                            l4792 1ADC  
                          l4784 1AC8                            l3994 104E                            l3986 1D82  
                          l3978 1D26                            l4794 1AE0                            l4786 1AD0  
                          l3996 1052                            l3988 103E                            l4796 1AEA  
                          l4788 1AD4                            l3998 1058                            l4798 1AEE  
                          STR_1 1FB5                            STR_2 1FC7                            STR_4 1FA2  
                          STR_5 1F71                            STR_6 1F54                            STR_7 1EF1  
                          STR_8 1FE3                            STR_9 1FF2                            u3010 12DE  
                          u3011 12DA                            u3100 15BC                            u3020 0F0E  
                          u3101 15B8                            u3021 0F0A                            u3110 15CC  
                          u3030 0F58                            u3111 15C8                            u3031 0F50  
                          _LATC 0F8B                            u3120 15DC                            u3200 157E  
                          u3008 12AA                            u4000 0748                            _LATD 0F8C  
                          u3121 15D8                            u3201 157A                            u4001 0744  
                          u3130 15EC                            u3210 15AA                            u3050 0F8C  
                          u4010 076A                            u3131 15E8                            u3211 15A6  
                          u3051 0F88                            u4011 0766                            u3220 1BC6  
                          u2500 1C80                            u3140 15FC                            u3300 0BCE  
                          u3060 0FB0                            u4100 085C                            u4020 0780  
                          u3221 1BC2                            u2501 1C7C                            u3141 15F8  
                          u3301 0BCA                            u3061 0FA8                            u4101 0858  
                          u4021 077C                            u3230 1132                            u2510 1CF8  
                          u3310 0BF6                            u3070 0FD4                            u4110 0872  
                          u4030 07A6                            u3231 112E                            u2511 1CF0  
                          u3311 0BF2                            u3071 0FD0                            u4111 086E  
                          u4031 07A2                            u2520 1492                            u2600 1430  
                          u3400 0D5C                            u3320 0C1E                            u3240 0B02  
                          u3080 0FF4                            u3048 0F5A                            u4200 097C  
                          u4120 0896                            u4040 07C2                            u2521 148A  
                          u2601 1428                            u3401 0D58                            u3321 0C1A  
                          u3241 0AFE                            u3081 0FF0                            u4201 0978  
                          u4121 0892                            u4041 07BE                            u3410 0D9C  
                          u3330 0C46                            u3250 0B16                            u3090 1004  
                          u4210 098C                            u4130 08AC                            u4050 07D8  
                          u3411 0D98                            u3331 0C42                            u3251 0B12  
                          u3091 1000                            u4211 0988                            u4131 08A8  
                          u4051 07D4                            u2540 14C6                            u2620 1464  
                          u3420 0DC0                            u3340 0C6E                            u3260 0B30  
                          u3068 0FB2                            u4220 09B6                            u4140 08D0  
                          u4060 07EC                            u3500 00B2                            u2541 14C2  
                          u2621 1460                            u3421 0DBC                            u3341 0C6A  
                          u3261 0B2C                            u4221 09B2                            u4141 08CC  
                          u4061 07E8                            u3501 00AE                            u2710 1790  
                          u2550 14E6                            u2518 1CFA                            u3190 1CBA  
                          u2630 1CE0                            u3430 0DE0                            u3350 0C9A  
                          u3270 0B54                            u4230 09F0                            u4150 08E6  
                          u4070 0802                            u3510 00DC                            u2711 1788  
                          u2551 14E0                            u3191 1CB6                            u2631 1CDC  
                          u3431 0DDC                            u3351 0C96                            u3271 0B50  
                          u4231 09EC                            u4151 08E2                            u4071 07FE  
                          u3511 00D8                            u2560 1504                            u2640 1A60  
                          u3440 0DF8                            u3360 0CAE                            u3280 0B7E  
                          u4160 090A                            u4080 0822                            u3600 0208  
                          u3520 00FC                            u2561 1500                            u2641 1A5C  
                          u3441 0DF4                            u3361 0CAA                            u3281 0B7A  
                          u4161 0906                            u4081 081E                            u3601 0204  
                          u3521 00F8                            u2730 17B0                            u2810 172C  
                          u2538 1494                            u2618 1432                            u2570 13E6  
                          u2650 1C50                            u3450 0E24                            u3370 0CDA  
                          u3290 0BA6                            u4170 0920                            u4090 0838  
                          u3610 022A                            u3530 0112                            u2731 17A8  
                          u2811 1724                            u2571 13DE                            u2651 1C4C  
                          u3451 0E20                            u3371 0CD6                            u3291 0BA2  
                          u4171 091C                            u4091 0834                            u3611 0226  
                          u3531 010E                            u2708 1774                            u2556 14E8  
                          u2660 1B6E                            u2900 1216                            u3460 0E54  
                          u3380 0D06                            u4180 095E                            u3700 030E  
                          u3620 0240                            u3540 013C                            u2661 1B6A  
                          u2901 1212                            u3461 0E50                            u3381 0D02  
                          u4181 0958                            u3701 030A                            u3621 023C  
                          u3541 0138                            u2750 17D2                            u2830 174E  
                          u2590 141A                            u2670 1B82                            u3390 0D44  
                          u2910 134A                            u4190 0960                            u3710 0322  
                          u3630 0252                            u3550 0160                            u3470 004A  
                          u2751 17CA                            u2831 1746                            u2591 1416  
                          u2671 1B7E                            u3391 0D40                            u2911 1346  
                          u3711 031E                            u3631 024E                            u3551 015C  
                          u3471 0046                            u2728 1792                            u2808 170E  
                          u2680 1AC6                            u2920 1388                            u3800 0506  
                          u3720 0338                            u3640 0266                            u3560 0184  
                          u3480 007A                            u2681 1AC2                            u2921 1384  
                          u3801 0502                            u3721 0334                            u3641 0262  
                          u3561 0180                            u3481 0076                            u2690 1772  
                          u2770 16EE                            u2850 1808                            u2930 13B4  
                          u3810 051C                            u3730 0360                            u3650 028C  
                          u3570 01A8                            u3490 009A                            u2691 176A  
                          u2771 16E6                            u2851 1804                            u2931 13B0  
                          u3811 0518                            u3731 035C                            u3651 0288  
                          u3571 01A4                            u3491 0096                            u2748 17B2  
                          u2828 172E                            u2940 1928                            u2588 13E8  
                          u2860 182E                            u3900 0636                            u3820 0542  
                          u3740 0376                            u3660 02A2                            u3580 01C8  
                          u2941 1924                            u2861 182A                            u3901 0632  
                          u3821 053E                            u3741 0372                            u3661 029E  
                          u3581 01C4                            u2790 170C                            u2950 1948  
                          u2870 116C                            u3910 0656                            u3830 056A  
                          u3750 039A                            u3670 02B2                            u3590 01DE  
                          u2791 1704                            u2951 1944                            u2871 1168  
                          u3911 0652                            u3831 0566                            u3751 0396  
                          u3671 02AE                            u3591 01DA                            u2768 17D4  
                          u2848 1750                            u2880 11AC                            u2960 1256  
                          u3920 0676                            u3840 0586                            u3760 03B0  
                          u3680 02D8                            u2881 11A8                            u2961 124E  
                          u3921 0672                            u3841 0582                            u3761 03AC  
                          u3681 02D4                            u2890 11EA                            u3930 0696  
                          u3850 059C                            u3770 03CE                            u3690 02F8  
                          i1l43 001E                            u2891 11E6                            u3931 0692  
                          u3851 0598                            u3771 03CA                            u3691 02F4  
                          u2788 16F0                            u2980 128C                            u3940 06B2  
                          u3860 05BE                            u3780 0420                            u2981 1288  
                          u3941 06AE                            u3861 05BA                            u3781 041C  
                          u2990 12A8                            u3950 06C8                            u3870 05DA  
                          u3790 04DE                            u2991 12A0                            u3951 06C4  
                          u3871 05D6                            u3791 04DA                            u3960 06EE  
                          u3880 05F0                            u3961 06EA                            u3881 05EC  
                          u2978 1258                            u3970 070C                            u3890 0616  
                          u3971 0708                            u3891 0612                            u3980 0722  
                          u3981 071E                            i2l38 1D42                            u3990 0734  
                          u3991 0730                            i2l72 1D18                            _TMR0 0FD6  
                    _ActualLeds 003E                            _Tics 0007           _showAllConfigurations 150C  
                          _Rows 0024                motor_datos@state 0019                            _main 1AC8  
                 printfUID@high 0059                            fsr2h 0FDA                            indf2 0FDF  
                          fsr1l 0FE1                            fsr2l 0FD9                            btemp 0076  
              _MFRC522_Bit_Mask 1A46                 __end_of_TI_Init 1BD8                            prodh 0FF4  
                          prodl 0FF3                            start 0026                 __end_of_CantaIR 1C0A  
             ?_resetMotorStates 004C                 __end_of_HighRSI 1D46                   LcInit@columns 0062  
            setCurrentUser@UID0 0061              setCurrentUser@UID1 005D              setCurrentUser@UID2 005E  
            setCurrentUser@UID3 005F              setCurrentUser@UID4 0060                    ___param_bank 0000  
            ??_resetMotorStates 004D                 printLedConfig@i 0057                 ??_MFRC522_Reset 0054  
                  ?_initTeclado 004C                     Espera@Timer 005A                           ?_main 004C  
                         STR_10 1FFC                           STR_11 1FC4                           STR_20 1F71  
                         STR_12 1FE9                           STR_21 1F54                           STR_13 1FF8  
                         STR_30 1FC4                           STR_14 1FC4                           STR_22 1EF1  
                         STR_15 1FB5                           STR_23 1FE3                           STR_31 1F33  
                         STR_24 1FC4                           STR_16 1FB5                           STR_32 1F12  
                         STR_25 1FC4                           STR_17 1FC7                           STR_33 1FEC  
                         STR_26 1FC4                           STR_18 1FB5                           STR_34 1FD9  
                         STR_19 1FA2                           STR_35 1FFA                           STR_27 1ED0  
                         STR_36 1FC4                           STR_28 1FF2                           STR_37 1F8C  
                         STR_29 1EAF                           STR_38 1FA0                           _T0CON 0FD5  
            MFRC522_Bit_Mask@op 0055                           _RCREG 0FAE                           _RCSTA 0FAB  
                         _SPBRG 0FAF                           _PORTD 0F83                           _TRISA 0F92  
                         _TRISD 0F95                           _TRISE 0F96                           _TXREG 0FAD  
                         _TXSTA 0FAC            __end_of_getActualUID 1644                           _Filas 003D  
                         _Timer 004A                 motor_RFID@irqEn 002F                           _index 000D  
               motor_RFID@unLen 0011                    _TI_ResetTics 1C82                           _tecla 003B  
               motor_RFID@state 0031                           _timer 004B                           _state 003A  
               setLed@userIndex 0015             motor_Read@bit_count 0034                           tablat 0FF5  
                         ttemp5 0077                           ttemp6 007A                           ttemp7 007E  
                _saveHourToData 1B04                           status 0FD8                           wtemp8 0077  
            Terminal_SendChar@c 0050                ??_printLedConfig 0054         EscriuPrimeraOrdre@ordre 004E  
        ??_Terminal_ReceiveChar 004D                 __initialization 1850                    __end_of_main 1B04  
                _setCurrentUser 19FC                     ?_RSI_Timer0 004C                  TI_Init@counter 004D  
              _initPortsTeclado 1DC0                     ?_TI_GetTics 004D           _motor_StartSendString 1CA6  
                        ??_main 006E                   __activetblptr 0002              MFRC522_Rd@ucResult 0052  
        _MFRC522_AntennaControl 1B70                          _ADCON1 0FC1                 MFRC522_Wr@value 004F  
                     ??_TI_Init 004D          ?_showAllConfigurations 004C          __end_of_saveHourToData 1B3A  
                     ??_CantaIR 004F          Terminal_SendString@str 0051                          i2l3060 1D3E  
                        i2l2190 1D02                          i2l2192 1D0A                          i2l2194 1D0C  
                        i2l3058 1D30                   ??_WaitForBusy 0062                          _TMR0IF 7F92  
                     ??_HighRSI 004C                          _LcInit 103C                __end_of_delay_us 1C82  
                        _Espera 1A8A                          _LowRSI 0018          __end_of_setCurrentUser 1A46  
                        _RowAct 0022                          _Timers 00D8              motor_datos@pointer 0018  
          __end_of_MFRC522_Init 19B0                __end_of_initRFID 1DAE              motorTerminal@index 001C  
              __end_of_initData 1DA4                __end_of_initLeds 1D8C              motorTerminal@state 001E  
                        clear_0 1896                          clear_1 18A2                    ?_motor_Write 004F  
                        isa$std 0001                    __pdataCOMRAM 006E                    __mediumconst 1EA2  
                        tblptrh 0FF7                          tblptrl 0FF6                          tblptru 0FF8  
         __end_of_Terminal_Init 1D7E          motor_RFID@differentUID 0064                 ?_saveHourToData 004D  
                    __accesstop 0080         __end_of__initialization 18A8                 delay_us@howMany 004D  
                 ___rparam_used 0001                    ??_MFRC522_Rd 004F                    ??_MFRC522_Wr 0050  
                 setLed@modeLED 0017                 ?_setCurrentUser 005D                  __pcstackCOMRAM 004C  
           __end_of_WaitForBusy 1D6E                    __pidataBANK0 18B6          ?_motor_StartSendString 0051  
          TI_NewTimer@Comptador 004F                MFRC522_Rd@ucAddr 0051        __end_of_MFRC522_Bit_Mask 1A8A  
              _motor_SendString 17E2               printLedConfig@val 0056              __end_of_MFRC522_Rd 150C  
            __end_of_MFRC522_Wr 146A                    ?_TI_NewTimer 004D                      __pbssBANK0 00D8  
         __end_of_motorTerminal 0EF2                         ?_LcInit 0062                   _CantaPartAlta 175E  
        TI_NewTimer@TimerHandle 004D                         ?_Espera 005A                         ?_LowRSI 004C  
                  _getActualUID 15AC                MFRC522_Wr@ucAddr 0052         TI_ResetTics@TimerHandle 004D  
                       _BAUDCON 0FB8                 motor_SendChar@c 0050            MFRC522_Bit_Mask@addr 0059  
          MFRC522_Bit_Mask@mask 0054                         LcInit@i 0064            MFRC522_Bit_Mask@temp 005A  
                     ?_delay_us 004C                 getActualUID@UID 004D               _Terminal_SendChar 1CC8  
                       _TI_Init 1BA4              ?_Terminal_SendChar 004C        __end_of_initPortsTeclado 1DC8  
                       _CantaIR 1BD8                       ?_initRFID 004C                       ?_initData 004C  
                     ?_initLeds 004C                         _HighRSI 0008                     _WaitForBusy 1D5A  
                ?_CantaPartAlta 004C                         _Columns 0023               motor_RFID@TagType 002A  
           ??_Terminal_SendChar 0050                         __Hparam 0000                         __Lparam 0000  
                  ??_RSI_Timer0 004C                    ??_TI_GetTics 0051               motor_RFID@allZero 0028  
                       __pcinit 1850           __end_of_MFRC522_Reset 1C38                         __ramtop 0200  
             motor_RFID@_status 002B                         __ptext0 1AC8                         __ptext1 002A  
                       __ptext2 19FC                         __ptext3 130C                         __ptext4 1224  
                       __ptext5 0EF2                         __ptext6 0AF2                         __ptext7 150C  
                       __ptext8 1B04                         __ptext9 1134         ?_MFRC522_AntennaControl 004C  
                     CantaIR@IR 004F               __end_of_initPorts 1DD0       __end_of_Terminal_SendChar 1CE6  
             motor_RFID@waitIRq 002E        motorTerminal@currentUser 005D                      ??_delay_us 004D  
       ??_showAllConfigurations 0053                         _pointer 000B                         _str_ptr 000F  
                  _MFRC522_Init 1964                  __pintcode_body 1D30            end_of_initialization 18A8  
                   motor_RFID@i 002C                     motor_RFID@n 002D                      ??_initRFID 005C  
      MFRC522_AntennaControl@on 005B                      ??_initData 004D              __end_of_RSI_Timer0 1D1A  
                    ??_initLeds 0050                   __Lmediumconst 1EA2                         int_func 1D30  
            __end_of_TI_GetTics 19FC              saveHourToData@hour 004D                 motor_Write@addr 0051  
             __end_of_printfUID 1224                      _motor_RFID 002A                         postdec1 0FE5  
                    _motor_Read 0EF2                         postinc0 0FEE                         postinc2 0FDE  
                 GetTecla@F2759 1EA3          showAllConfigurations@i 0055          showAllConfigurations@j 0053  
__end_of_MFRC522_AntennaControl 1BA4                       _PORTCbits 0F82             _Terminal_SendString 1B3A  
         TI_GetTics@TimerHandle 0059                  _motor_RFID$587 006A                ??_saveHourToData 004E  
                     _TRISBbits 0F93                       _TRISCbits 0F94                       _TRISEbits 0F96  
                    _state_read 0039                  setLed@ledIndex 0016                 ??_CantaPartAlta 004D  
              ??_setCurrentUser 0061        motor_StartSendString@str 0051        __end_of_motor_SendString 1850  
          ?_Terminal_SendString 0051                  __end_of_LcInit 1134               MFRC522_Rd@Address 0050  
       ??_motor_StartSendString 0053                  __end_of_Espera 1AC8                  __end_of_LowRSI 0026  
  __end_of_Terminal_RXAvailable 1D5A      __end_of_EscriuPrimeraOrdre 16DA                   __pidataCOMRAM 1DB8  
     motor_Read@timeout_counter 0013                  _motor_Read$559 0051    motorTerminal@currentUser_910 0062  
                motor_RFID@flag 006D                       _ColumnAct 0021                _resetMotorStates 1DAE  
             ?_MFRC522_Bit_Mask 0054             start_initialization 1850              ??_MFRC522_Bit_Mask 0056  
                _motor_SendChar 1C38              motor_Read@ucResult 0032    __end_of_Terminal_TXAvailable 1D02  
         ??_Terminal_SendString 0053                        ??_LcInit 0063              printLedConfig@leds 0053  
                      ??_Espera 005E                        ??_LowRSI 004C                     ?_motor_RFID 004C  
             motorTerminal@hour 0072                     ?_motor_Read 004C                   ??_initTeclado 0050  
                   __pdataBANK0 0080          __end_of_motor_SendChar 1C5E                     __pbssCOMRAM 0001  
             MFRC522_Wr@Address 0051                   ?_TI_ResetTics 004C                motor_Read@ucAddr 0033  
                      ?_TI_Init 004C                        ?_CantaIR 004C               ?_initPortsTeclado 004C  
                _CantaPartBaixa 16DA                        ?_HighRSI 004C                    ?_WaitForBusy 004C  
            ??_initPortsTeclado 004D                  motor_Read@addr 0050             motor_RFID@fifoLevel 0025  
                     __pintcode 0008                   __pmediumconst 1EA2      __end_of_InitPortDirections 1D98  
          _timer@TAD_LEDS$F1021 0049                 CantaPartBaixa@c 004E                     __pintcodelo 0018  
            motor_Write@ucValue 0035                     __smallconst 1EA2             __end_of_initTeclado 1D30  
               ?_motor_SendChar 004C                  ??_TI_ResetTics 004D                       _initPorts 1DC8  
 __end_of_showAllConfigurations 15AC          __end_of_CantaPartBaixa 175E                   _Terminal_Init 1D6E  
          _Terminal_RXAvailable 1D46     motorTerminal@sending_string 001D                        _LATAbits 0F89  
                      _LATBbits 0F8A                        _LATCbits 0F8B                        _LATEbits 0F8D  
                     delay_us@x 004E            motor_Write@bit_count 0037                 _hashtag_pressed 001F  
                      i2u216_40 1D3E                        i2u216_41 1D3A                        _PIR1bits 0F9E  
         motor_RFID@lastBitsVal 0026                       _printfUID 1134                   ??_motor_Write 0050  
          _Terminal_TXAvailable 1CE6                  _printLedConfig 130C                       _state_str 0020  
                    printfUID@i 005B          motor_RFID@tempRegValue 0027                        Espera@ms 005C  
  __end_of_Terminal_ReceiveChar 1DD4                      ?_initPorts 004C                   motor_RFID@UID 0001  
                ?_Terminal_Init 004C                       copy_data0 1864                       copy_data1 1884  
               ?_CantaPartBaixa 004C                        _Columnas 003C           ?_Terminal_RXAvailable 004C  
         motor_RFID@currentUser 0065                   _motorTerminal 0AF2        __end_of_resetMotorStates 1DB8  
             ?_motor_SendString 004C                        __Hrparam 0000                        __Lrparam 0000  
            ??_motor_SendString 0051          __end_of_printLedConfig 13C2   __end_of_motor_StartSendString 1CC8  
                    ?_printfUID 0053                     _initTeclado 1D1A           ?_Terminal_TXAvailable 004D  
            motor_RFID@checksum 0029                     _currentTime 006E                     _currentUser 0044  
           __end_of_motor_Write 130C                        _delay_us 1C5E                        __ptext10 1B3A  
                      __ptext11 1CC8              _EscriuPrimeraOrdre 1644                        __ptext20 1DC0  
                      __ptext12 1CA6                        __ptext21 1DA4                        __ptext13 17E2  
                      __ptext30 1D8C                        __ptext22 1964                        __ptext14 1C38  
                      __ptext31 1DC8                        __ptext23 1C0A                        __ptext15 1CE6  
                      __ptext40 19B0                        __ptext32 1D7E                        __ptext24 1DAE  
                      __ptext16 15AC                        __ptext41 190E                        __ptext33 1D98  
                      __ptext25 1B70                        __ptext17 1DD0                        __ptext42 1644  
                      __ptext34 1D6E                        __ptext26 1A46                        __ptext18 1D46  
                      __ptext43 1BD8                        __ptext35 1BA4                        __ptext27 13C2  
                      __ptext19 1D1A                        __ptext44 16DA                        __ptext36 103C  
                      __ptext28 146A                        __ptext45 175E                        __ptext37 1D5A  
                      __ptext29 1C5E                        __ptext38 1A8A                        __ptext39 1C82  
                      __ptext48 1D02                   ??_TI_NewTimer 004E                  CantaPartAlta@c 004E  
             motor_Write@ucAddr 0036                        _initRFID 1DA4                        _initData 1D98  
                      _initLeds 1D7E             ?_EscriuPrimeraOrdre 004C                  ?_motorTerminal 004C  
         __end_of_CantaPartAlta 17E2                        _new_user 001A                      _MFRC522_Rd 146A  
                    _MFRC522_Wr 13C2                   ?_getActualUID 004D                    ??_motor_RFID 0062  
                      isa$xinst 0000                    ??_motor_Read 004F            __end_of_TI_ResetTics 1CA6  
                      int$flags 0076              motor_RFID@substate 0030                 ?_printLedConfig 0053  
                      _userUIDs 0080                   _printfUID$875 0055                   _printfUID$877 0057  
          _MFRC522_Bit_Mask$536 0057            ??_EscriuPrimeraOrdre 004D                      LcInit@rows 0063  
                 _MFRC522_Reset 1C0A                      _INTCONbits 0FF2                 ??_Terminal_Init 004D  
     TI_GetTics@CopiaTicsActual 0055               _new_configuration 001B                     ??_initPorts 004D  
        ??_Terminal_RXAvailable 004D                  _configurations 00C0     __end_of_Terminal_SendString 1B70  
            __end_of_motor_RFID 0AF2                        intlevel1 0000                        intlevel2 0000  
            __end_of_motor_Read 103C                motor_Write@value 004F             __end_of_TI_NewTimer 1964  
                ??_getActualUID 004E        ??_MFRC522_AntennaControl 005B          ??_Terminal_TXAvailable 004F  
          _Terminal_ReceiveChar 1DD0                     ??_printfUID 0054                ??_motor_SendChar 0050  
                ?_MFRC522_Reset 004C                     _motor_Write 1224          motor_RFID@backBitsCalc 006C  
            _printLedConfig$885 0054              _InitPortDirections 1D8C                   ?_MFRC522_Init 004C  
               ??_motorTerminal 005D             ?_InitPortDirections 004C            printfUID@currentUser 0053  
                   ?_MFRC522_Rd 004C                     ?_MFRC522_Wr 004F  

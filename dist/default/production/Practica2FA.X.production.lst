

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Mar 11 15:59:55 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    72                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74   000000                     
    75                           ; Generated 05/12/2024 GMT
    76                           ; 
    77                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4321 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000FE0                     bsr             equ	4064
   110   000FE9                     fsr0            equ	4073
   111   000FEA                     fsr0h           equ	4074
   112   000FE9                     fsr0l           equ	4073
   113   000FE1                     fsr1            equ	4065
   114   000FE2                     fsr1h           equ	4066
   115   000FE1                     fsr1l           equ	4065
   116   000FD9                     fsr2            equ	4057
   117   000FDA                     fsr2h           equ	4058
   118   000FD9                     fsr2l           equ	4057
   119   000FEF                     indf0           equ	4079
   120   000FE7                     indf1           equ	4071
   121   000FDF                     indf2           equ	4063
   122   000FF2                     intcon          equ	4082
   123   000000                     nvmcon          equ	0
   124   000FF9                     pcl             equ	4089
   125   000FFA                     pclath          equ	4090
   126   000FFB                     pclatu          equ	4091
   127   000FEB                     plusw0          equ	4075
   128   000FE3                     plusw1          equ	4067
   129   000FDB                     plusw2          equ	4059
   130   000FED                     postdec0        equ	4077
   131   000FE5                     postdec1        equ	4069
   132   000FDD                     postdec2        equ	4061
   133   000FEE                     postinc0        equ	4078
   134   000FE6                     postinc1        equ	4070
   135   000FDE                     postinc2        equ	4062
   136   000FEC                     preinc0         equ	4076
   137   000FE4                     preinc1         equ	4068
   138   000FDC                     preinc2         equ	4060
   139   000FF3                     prod            equ	4083
   140   000FF4                     prodh           equ	4084
   141   000FF3                     prodl           equ	4083
   142   000FD8                     status          equ	4056
   143   000FF5                     tablat          equ	4085
   144   000FF6                     tblptr          equ	4086
   145   000FF7                     tblptrh         equ	4087
   146   000FF6                     tblptrl         equ	4086
   147   000FF8                     tblptru         equ	4088
   148   000FFD                     tosl            equ	4093
   149   000FE8                     wreg            equ	4072
   150   000F80                     PORTA           equ	3968	;# 
   151   000F81                     PORTB           equ	3969	;# 
   152   000F82                     PORTC           equ	3970	;# 
   153   000F83                     PORTD           equ	3971	;# 
   154   000F84                     PORTE           equ	3972	;# 
   155   000F89                     LATA            equ	3977	;# 
   156   000F8A                     LATB            equ	3978	;# 
   157   000F8B                     LATC            equ	3979	;# 
   158   000F8C                     LATD            equ	3980	;# 
   159   000F8D                     LATE            equ	3981	;# 
   160   000F92                     TRISA           equ	3986	;# 
   161   000F92                     DDRA            equ	3986	;# 
   162   000F93                     TRISB           equ	3987	;# 
   163   000F93                     DDRB            equ	3987	;# 
   164   000F94                     TRISC           equ	3988	;# 
   165   000F94                     DDRC            equ	3988	;# 
   166   000F95                     TRISD           equ	3989	;# 
   167   000F95                     DDRD            equ	3989	;# 
   168   000F96                     TRISE           equ	3990	;# 
   169   000F96                     DDRE            equ	3990	;# 
   170   000F9B                     OSCTUNE         equ	3995	;# 
   171   000F9D                     PIE1            equ	3997	;# 
   172   000F9E                     PIR1            equ	3998	;# 
   173   000F9F                     IPR1            equ	3999	;# 
   174   000FA0                     PIE2            equ	4000	;# 
   175   000FA1                     PIR2            equ	4001	;# 
   176   000FA2                     IPR2            equ	4002	;# 
   177   000FA6                     EECON1          equ	4006	;# 
   178   000FA7                     EECON2          equ	4007	;# 
   179   000FA8                     EEDATA          equ	4008	;# 
   180   000FA9                     EEADR           equ	4009	;# 
   181   000FAB                     RCSTA           equ	4011	;# 
   182   000FAB                     RCSTA1          equ	4011	;# 
   183   000FAC                     TXSTA           equ	4012	;# 
   184   000FAC                     TXSTA1          equ	4012	;# 
   185   000FAD                     TXREG           equ	4013	;# 
   186   000FAD                     TXREG1          equ	4013	;# 
   187   000FAE                     RCREG           equ	4014	;# 
   188   000FAE                     RCREG1          equ	4014	;# 
   189   000FAF                     SPBRG           equ	4015	;# 
   190   000FAF                     SPBRG1          equ	4015	;# 
   191   000FB0                     SPBRGH          equ	4016	;# 
   192   000FB1                     T3CON           equ	4017	;# 
   193   000FB2                     TMR3            equ	4018	;# 
   194   000FB2                     TMR3L           equ	4018	;# 
   195   000FB3                     TMR3H           equ	4019	;# 
   196   000FB4                     CMCON           equ	4020	;# 
   197   000FB5                     CVRCON          equ	4021	;# 
   198   000FB6                     ECCP1AS         equ	4022	;# 
   199   000FB7                     ECCP1DEL        equ	4023	;# 
   200   000FB7                     PWM1CON         equ	4023	;# 
   201   000FB8                     BAUDCON         equ	4024	;# 
   202   000FB8                     BAUDCTL         equ	4024	;# 
   203   000FBA                     CCP2CON         equ	4026	;# 
   204   000FBB                     CCPR2           equ	4027	;# 
   205   000FBB                     CCPR2L          equ	4027	;# 
   206   000FBC                     CCPR2H          equ	4028	;# 
   207   000FBD                     CCP1CON         equ	4029	;# 
   208   000FBD                     ECCP1CON        equ	4029	;# 
   209   000FBE                     CCPR1           equ	4030	;# 
   210   000FBE                     CCPR1L          equ	4030	;# 
   211   000FBF                     CCPR1H          equ	4031	;# 
   212   000FC0                     ADCON2          equ	4032	;# 
   213   000FC1                     ADCON1          equ	4033	;# 
   214   000FC2                     ADCON0          equ	4034	;# 
   215   000FC3                     ADRES           equ	4035	;# 
   216   000FC3                     ADRESL          equ	4035	;# 
   217   000FC4                     ADRESH          equ	4036	;# 
   218   000FC5                     SSPCON2         equ	4037	;# 
   219   000FC6                     SSPCON1         equ	4038	;# 
   220   000FC7                     SSPSTAT         equ	4039	;# 
   221   000FC8                     SSPADD          equ	4040	;# 
   222   000FC9                     SSPBUF          equ	4041	;# 
   223   000FCA                     T2CON           equ	4042	;# 
   224   000FCB                     PR2             equ	4043	;# 
   225   000FCB                     MEMCON          equ	4043	;# 
   226   000FCC                     TMR2            equ	4044	;# 
   227   000FCD                     T1CON           equ	4045	;# 
   228   000FCE                     TMR1            equ	4046	;# 
   229   000FCE                     TMR1L           equ	4046	;# 
   230   000FCF                     TMR1H           equ	4047	;# 
   231   000FD0                     RCON            equ	4048	;# 
   232   000FD1                     WDTCON          equ	4049	;# 
   233   000FD2                     HLVDCON         equ	4050	;# 
   234   000FD2                     LVDCON          equ	4050	;# 
   235   000FD3                     OSCCON          equ	4051	;# 
   236   000FD5                     T0CON           equ	4053	;# 
   237   000FD6                     TMR0            equ	4054	;# 
   238   000FD6                     TMR0L           equ	4054	;# 
   239   000FD7                     TMR0H           equ	4055	;# 
   240   000FD8                     STATUS          equ	4056	;# 
   241   000FD9                     FSR2            equ	4057	;# 
   242   000FD9                     FSR2L           equ	4057	;# 
   243   000FDA                     FSR2H           equ	4058	;# 
   244   000FDB                     PLUSW2          equ	4059	;# 
   245   000FDC                     PREINC2         equ	4060	;# 
   246   000FDD                     POSTDEC2        equ	4061	;# 
   247   000FDE                     POSTINC2        equ	4062	;# 
   248   000FDF                     INDF2           equ	4063	;# 
   249   000FE0                     BSR             equ	4064	;# 
   250   000FE1                     FSR1            equ	4065	;# 
   251   000FE1                     FSR1L           equ	4065	;# 
   252   000FE2                     FSR1H           equ	4066	;# 
   253   000FE3                     PLUSW1          equ	4067	;# 
   254   000FE4                     PREINC1         equ	4068	;# 
   255   000FE5                     POSTDEC1        equ	4069	;# 
   256   000FE6                     POSTINC1        equ	4070	;# 
   257   000FE7                     INDF1           equ	4071	;# 
   258   000FE8                     WREG            equ	4072	;# 
   259   000FE9                     FSR0            equ	4073	;# 
   260   000FE9                     FSR0L           equ	4073	;# 
   261   000FEA                     FSR0H           equ	4074	;# 
   262   000FEB                     PLUSW0          equ	4075	;# 
   263   000FEC                     PREINC0         equ	4076	;# 
   264   000FED                     POSTDEC0        equ	4077	;# 
   265   000FEE                     POSTINC0        equ	4078	;# 
   266   000FEF                     INDF0           equ	4079	;# 
   267   000FF0                     INTCON3         equ	4080	;# 
   268   000FF1                     INTCON2         equ	4081	;# 
   269   000FF2                     INTCON          equ	4082	;# 
   270   000FF3                     PROD            equ	4083	;# 
   271   000FF3                     PRODL           equ	4083	;# 
   272   000FF4                     PRODH           equ	4084	;# 
   273   000FF5                     TABLAT          equ	4085	;# 
   274   000FF6                     TBLPTR          equ	4086	;# 
   275   000FF6                     TBLPTRL         equ	4086	;# 
   276   000FF7                     TBLPTRH         equ	4087	;# 
   277   000FF8                     TBLPTRU         equ	4088	;# 
   278   000FF9                     PCLAT           equ	4089	;# 
   279   000FF9                     PC              equ	4089	;# 
   280   000FF9                     PCL             equ	4089	;# 
   281   000FFA                     PCLATH          equ	4090	;# 
   282   000FFB                     PCLATU          equ	4091	;# 
   283   000FFC                     STKPTR          equ	4092	;# 
   284   000FFD                     TOS             equ	4093	;# 
   285   000FFD                     TOSL            equ	4093	;# 
   286   000FFE                     TOSH            equ	4094	;# 
   287   000FFF                     TOSU            equ	4095	;# 
   288   000F80                     PORTA           equ	3968	;# 
   289   000F81                     PORTB           equ	3969	;# 
   290   000F82                     PORTC           equ	3970	;# 
   291   000F83                     PORTD           equ	3971	;# 
   292   000F84                     PORTE           equ	3972	;# 
   293   000F89                     LATA            equ	3977	;# 
   294   000F8A                     LATB            equ	3978	;# 
   295   000F8B                     LATC            equ	3979	;# 
   296   000F8C                     LATD            equ	3980	;# 
   297   000F8D                     LATE            equ	3981	;# 
   298   000F92                     TRISA           equ	3986	;# 
   299   000F92                     DDRA            equ	3986	;# 
   300   000F93                     TRISB           equ	3987	;# 
   301   000F93                     DDRB            equ	3987	;# 
   302   000F94                     TRISC           equ	3988	;# 
   303   000F94                     DDRC            equ	3988	;# 
   304   000F95                     TRISD           equ	3989	;# 
   305   000F95                     DDRD            equ	3989	;# 
   306   000F96                     TRISE           equ	3990	;# 
   307   000F96                     DDRE            equ	3990	;# 
   308   000F9B                     OSCTUNE         equ	3995	;# 
   309   000F9D                     PIE1            equ	3997	;# 
   310   000F9E                     PIR1            equ	3998	;# 
   311   000F9F                     IPR1            equ	3999	;# 
   312   000FA0                     PIE2            equ	4000	;# 
   313   000FA1                     PIR2            equ	4001	;# 
   314   000FA2                     IPR2            equ	4002	;# 
   315   000FA6                     EECON1          equ	4006	;# 
   316   000FA7                     EECON2          equ	4007	;# 
   317   000FA8                     EEDATA          equ	4008	;# 
   318   000FA9                     EEADR           equ	4009	;# 
   319   000FAB                     RCSTA           equ	4011	;# 
   320   000FAB                     RCSTA1          equ	4011	;# 
   321   000FAC                     TXSTA           equ	4012	;# 
   322   000FAC                     TXSTA1          equ	4012	;# 
   323   000FAD                     TXREG           equ	4013	;# 
   324   000FAD                     TXREG1          equ	4013	;# 
   325   000FAE                     RCREG           equ	4014	;# 
   326   000FAE                     RCREG1          equ	4014	;# 
   327   000FAF                     SPBRG           equ	4015	;# 
   328   000FAF                     SPBRG1          equ	4015	;# 
   329   000FB0                     SPBRGH          equ	4016	;# 
   330   000FB1                     T3CON           equ	4017	;# 
   331   000FB2                     TMR3            equ	4018	;# 
   332   000FB2                     TMR3L           equ	4018	;# 
   333   000FB3                     TMR3H           equ	4019	;# 
   334   000FB4                     CMCON           equ	4020	;# 
   335   000FB5                     CVRCON          equ	4021	;# 
   336   000FB6                     ECCP1AS         equ	4022	;# 
   337   000FB7                     ECCP1DEL        equ	4023	;# 
   338   000FB7                     PWM1CON         equ	4023	;# 
   339   000FB8                     BAUDCON         equ	4024	;# 
   340   000FB8                     BAUDCTL         equ	4024	;# 
   341   000FBA                     CCP2CON         equ	4026	;# 
   342   000FBB                     CCPR2           equ	4027	;# 
   343   000FBB                     CCPR2L          equ	4027	;# 
   344   000FBC                     CCPR2H          equ	4028	;# 
   345   000FBD                     CCP1CON         equ	4029	;# 
   346   000FBD                     ECCP1CON        equ	4029	;# 
   347   000FBE                     CCPR1           equ	4030	;# 
   348   000FBE                     CCPR1L          equ	4030	;# 
   349   000FBF                     CCPR1H          equ	4031	;# 
   350   000FC0                     ADCON2          equ	4032	;# 
   351   000FC1                     ADCON1          equ	4033	;# 
   352   000FC2                     ADCON0          equ	4034	;# 
   353   000FC3                     ADRES           equ	4035	;# 
   354   000FC3                     ADRESL          equ	4035	;# 
   355   000FC4                     ADRESH          equ	4036	;# 
   356   000FC5                     SSPCON2         equ	4037	;# 
   357   000FC6                     SSPCON1         equ	4038	;# 
   358   000FC7                     SSPSTAT         equ	4039	;# 
   359   000FC8                     SSPADD          equ	4040	;# 
   360   000FC9                     SSPBUF          equ	4041	;# 
   361   000FCA                     T2CON           equ	4042	;# 
   362   000FCB                     PR2             equ	4043	;# 
   363   000FCB                     MEMCON          equ	4043	;# 
   364   000FCC                     TMR2            equ	4044	;# 
   365   000FCD                     T1CON           equ	4045	;# 
   366   000FCE                     TMR1            equ	4046	;# 
   367   000FCE                     TMR1L           equ	4046	;# 
   368   000FCF                     TMR1H           equ	4047	;# 
   369   000FD0                     RCON            equ	4048	;# 
   370   000FD1                     WDTCON          equ	4049	;# 
   371   000FD2                     HLVDCON         equ	4050	;# 
   372   000FD2                     LVDCON          equ	4050	;# 
   373   000FD3                     OSCCON          equ	4051	;# 
   374   000FD5                     T0CON           equ	4053	;# 
   375   000FD6                     TMR0            equ	4054	;# 
   376   000FD6                     TMR0L           equ	4054	;# 
   377   000FD7                     TMR0H           equ	4055	;# 
   378   000FD8                     STATUS          equ	4056	;# 
   379   000FD9                     FSR2            equ	4057	;# 
   380   000FD9                     FSR2L           equ	4057	;# 
   381   000FDA                     FSR2H           equ	4058	;# 
   382   000FDB                     PLUSW2          equ	4059	;# 
   383   000FDC                     PREINC2         equ	4060	;# 
   384   000FDD                     POSTDEC2        equ	4061	;# 
   385   000FDE                     POSTINC2        equ	4062	;# 
   386   000FDF                     INDF2           equ	4063	;# 
   387   000FE0                     BSR             equ	4064	;# 
   388   000FE1                     FSR1            equ	4065	;# 
   389   000FE1                     FSR1L           equ	4065	;# 
   390   000FE2                     FSR1H           equ	4066	;# 
   391   000FE3                     PLUSW1          equ	4067	;# 
   392   000FE4                     PREINC1         equ	4068	;# 
   393   000FE5                     POSTDEC1        equ	4069	;# 
   394   000FE6                     POSTINC1        equ	4070	;# 
   395   000FE7                     INDF1           equ	4071	;# 
   396   000FE8                     WREG            equ	4072	;# 
   397   000FE9                     FSR0            equ	4073	;# 
   398   000FE9                     FSR0L           equ	4073	;# 
   399   000FEA                     FSR0H           equ	4074	;# 
   400   000FEB                     PLUSW0          equ	4075	;# 
   401   000FEC                     PREINC0         equ	4076	;# 
   402   000FED                     POSTDEC0        equ	4077	;# 
   403   000FEE                     POSTINC0        equ	4078	;# 
   404   000FEF                     INDF0           equ	4079	;# 
   405   000FF0                     INTCON3         equ	4080	;# 
   406   000FF1                     INTCON2         equ	4081	;# 
   407   000FF2                     INTCON          equ	4082	;# 
   408   000FF3                     PROD            equ	4083	;# 
   409   000FF3                     PRODL           equ	4083	;# 
   410   000FF4                     PRODH           equ	4084	;# 
   411   000FF5                     TABLAT          equ	4085	;# 
   412   000FF6                     TBLPTR          equ	4086	;# 
   413   000FF6                     TBLPTRL         equ	4086	;# 
   414   000FF7                     TBLPTRH         equ	4087	;# 
   415   000FF8                     TBLPTRU         equ	4088	;# 
   416   000FF9                     PCLAT           equ	4089	;# 
   417   000FF9                     PC              equ	4089	;# 
   418   000FF9                     PCL             equ	4089	;# 
   419   000FFA                     PCLATH          equ	4090	;# 
   420   000FFB                     PCLATU          equ	4091	;# 
   421   000FFC                     STKPTR          equ	4092	;# 
   422   000FFD                     TOS             equ	4093	;# 
   423   000FFD                     TOSL            equ	4093	;# 
   424   000FFE                     TOSH            equ	4094	;# 
   425   000FFF                     TOSU            equ	4095	;# 
   426   000F80                     PORTA           equ	3968	;# 
   427   000F81                     PORTB           equ	3969	;# 
   428   000F82                     PORTC           equ	3970	;# 
   429   000F83                     PORTD           equ	3971	;# 
   430   000F84                     PORTE           equ	3972	;# 
   431   000F89                     LATA            equ	3977	;# 
   432   000F8A                     LATB            equ	3978	;# 
   433   000F8B                     LATC            equ	3979	;# 
   434   000F8C                     LATD            equ	3980	;# 
   435   000F8D                     LATE            equ	3981	;# 
   436   000F92                     TRISA           equ	3986	;# 
   437   000F92                     DDRA            equ	3986	;# 
   438   000F93                     TRISB           equ	3987	;# 
   439   000F93                     DDRB            equ	3987	;# 
   440   000F94                     TRISC           equ	3988	;# 
   441   000F94                     DDRC            equ	3988	;# 
   442   000F95                     TRISD           equ	3989	;# 
   443   000F95                     DDRD            equ	3989	;# 
   444   000F96                     TRISE           equ	3990	;# 
   445   000F96                     DDRE            equ	3990	;# 
   446   000F9B                     OSCTUNE         equ	3995	;# 
   447   000F9D                     PIE1            equ	3997	;# 
   448   000F9E                     PIR1            equ	3998	;# 
   449   000F9F                     IPR1            equ	3999	;# 
   450   000FA0                     PIE2            equ	4000	;# 
   451   000FA1                     PIR2            equ	4001	;# 
   452   000FA2                     IPR2            equ	4002	;# 
   453   000FA6                     EECON1          equ	4006	;# 
   454   000FA7                     EECON2          equ	4007	;# 
   455   000FA8                     EEDATA          equ	4008	;# 
   456   000FA9                     EEADR           equ	4009	;# 
   457   000FAB                     RCSTA           equ	4011	;# 
   458   000FAB                     RCSTA1          equ	4011	;# 
   459   000FAC                     TXSTA           equ	4012	;# 
   460   000FAC                     TXSTA1          equ	4012	;# 
   461   000FAD                     TXREG           equ	4013	;# 
   462   000FAD                     TXREG1          equ	4013	;# 
   463   000FAE                     RCREG           equ	4014	;# 
   464   000FAE                     RCREG1          equ	4014	;# 
   465   000FAF                     SPBRG           equ	4015	;# 
   466   000FAF                     SPBRG1          equ	4015	;# 
   467   000FB0                     SPBRGH          equ	4016	;# 
   468   000FB1                     T3CON           equ	4017	;# 
   469   000FB2                     TMR3            equ	4018	;# 
   470   000FB2                     TMR3L           equ	4018	;# 
   471   000FB3                     TMR3H           equ	4019	;# 
   472   000FB4                     CMCON           equ	4020	;# 
   473   000FB5                     CVRCON          equ	4021	;# 
   474   000FB6                     ECCP1AS         equ	4022	;# 
   475   000FB7                     ECCP1DEL        equ	4023	;# 
   476   000FB7                     PWM1CON         equ	4023	;# 
   477   000FB8                     BAUDCON         equ	4024	;# 
   478   000FB8                     BAUDCTL         equ	4024	;# 
   479   000FBA                     CCP2CON         equ	4026	;# 
   480   000FBB                     CCPR2           equ	4027	;# 
   481   000FBB                     CCPR2L          equ	4027	;# 
   482   000FBC                     CCPR2H          equ	4028	;# 
   483   000FBD                     CCP1CON         equ	4029	;# 
   484   000FBD                     ECCP1CON        equ	4029	;# 
   485   000FBE                     CCPR1           equ	4030	;# 
   486   000FBE                     CCPR1L          equ	4030	;# 
   487   000FBF                     CCPR1H          equ	4031	;# 
   488   000FC0                     ADCON2          equ	4032	;# 
   489   000FC1                     ADCON1          equ	4033	;# 
   490   000FC2                     ADCON0          equ	4034	;# 
   491   000FC3                     ADRES           equ	4035	;# 
   492   000FC3                     ADRESL          equ	4035	;# 
   493   000FC4                     ADRESH          equ	4036	;# 
   494   000FC5                     SSPCON2         equ	4037	;# 
   495   000FC6                     SSPCON1         equ	4038	;# 
   496   000FC7                     SSPSTAT         equ	4039	;# 
   497   000FC8                     SSPADD          equ	4040	;# 
   498   000FC9                     SSPBUF          equ	4041	;# 
   499   000FCA                     T2CON           equ	4042	;# 
   500   000FCB                     PR2             equ	4043	;# 
   501   000FCB                     MEMCON          equ	4043	;# 
   502   000FCC                     TMR2            equ	4044	;# 
   503   000FCD                     T1CON           equ	4045	;# 
   504   000FCE                     TMR1            equ	4046	;# 
   505   000FCE                     TMR1L           equ	4046	;# 
   506   000FCF                     TMR1H           equ	4047	;# 
   507   000FD0                     RCON            equ	4048	;# 
   508   000FD1                     WDTCON          equ	4049	;# 
   509   000FD2                     HLVDCON         equ	4050	;# 
   510   000FD2                     LVDCON          equ	4050	;# 
   511   000FD3                     OSCCON          equ	4051	;# 
   512   000FD5                     T0CON           equ	4053	;# 
   513   000FD6                     TMR0            equ	4054	;# 
   514   000FD6                     TMR0L           equ	4054	;# 
   515   000FD7                     TMR0H           equ	4055	;# 
   516   000FD8                     STATUS          equ	4056	;# 
   517   000FD9                     FSR2            equ	4057	;# 
   518   000FD9                     FSR2L           equ	4057	;# 
   519   000FDA                     FSR2H           equ	4058	;# 
   520   000FDB                     PLUSW2          equ	4059	;# 
   521   000FDC                     PREINC2         equ	4060	;# 
   522   000FDD                     POSTDEC2        equ	4061	;# 
   523   000FDE                     POSTINC2        equ	4062	;# 
   524   000FDF                     INDF2           equ	4063	;# 
   525   000FE0                     BSR             equ	4064	;# 
   526   000FE1                     FSR1            equ	4065	;# 
   527   000FE1                     FSR1L           equ	4065	;# 
   528   000FE2                     FSR1H           equ	4066	;# 
   529   000FE3                     PLUSW1          equ	4067	;# 
   530   000FE4                     PREINC1         equ	4068	;# 
   531   000FE5                     POSTDEC1        equ	4069	;# 
   532   000FE6                     POSTINC1        equ	4070	;# 
   533   000FE7                     INDF1           equ	4071	;# 
   534   000FE8                     WREG            equ	4072	;# 
   535   000FE9                     FSR0            equ	4073	;# 
   536   000FE9                     FSR0L           equ	4073	;# 
   537   000FEA                     FSR0H           equ	4074	;# 
   538   000FEB                     PLUSW0          equ	4075	;# 
   539   000FEC                     PREINC0         equ	4076	;# 
   540   000FED                     POSTDEC0        equ	4077	;# 
   541   000FEE                     POSTINC0        equ	4078	;# 
   542   000FEF                     INDF0           equ	4079	;# 
   543   000FF0                     INTCON3         equ	4080	;# 
   544   000FF1                     INTCON2         equ	4081	;# 
   545   000FF2                     INTCON          equ	4082	;# 
   546   000FF3                     PROD            equ	4083	;# 
   547   000FF3                     PRODL           equ	4083	;# 
   548   000FF4                     PRODH           equ	4084	;# 
   549   000FF5                     TABLAT          equ	4085	;# 
   550   000FF6                     TBLPTR          equ	4086	;# 
   551   000FF6                     TBLPTRL         equ	4086	;# 
   552   000FF7                     TBLPTRH         equ	4087	;# 
   553   000FF8                     TBLPTRU         equ	4088	;# 
   554   000FF9                     PCLAT           equ	4089	;# 
   555   000FF9                     PC              equ	4089	;# 
   556   000FF9                     PCL             equ	4089	;# 
   557   000FFA                     PCLATH          equ	4090	;# 
   558   000FFB                     PCLATU          equ	4091	;# 
   559   000FFC                     STKPTR          equ	4092	;# 
   560   000FFD                     TOS             equ	4093	;# 
   561   000FFD                     TOSL            equ	4093	;# 
   562   000FFE                     TOSH            equ	4094	;# 
   563   000FFF                     TOSU            equ	4095	;# 
   564   000F80                     PORTA           equ	3968	;# 
   565   000F81                     PORTB           equ	3969	;# 
   566   000F82                     PORTC           equ	3970	;# 
   567   000F83                     PORTD           equ	3971	;# 
   568   000F84                     PORTE           equ	3972	;# 
   569   000F89                     LATA            equ	3977	;# 
   570   000F8A                     LATB            equ	3978	;# 
   571   000F8B                     LATC            equ	3979	;# 
   572   000F8C                     LATD            equ	3980	;# 
   573   000F8D                     LATE            equ	3981	;# 
   574   000F92                     TRISA           equ	3986	;# 
   575   000F92                     DDRA            equ	3986	;# 
   576   000F93                     TRISB           equ	3987	;# 
   577   000F93                     DDRB            equ	3987	;# 
   578   000F94                     TRISC           equ	3988	;# 
   579   000F94                     DDRC            equ	3988	;# 
   580   000F95                     TRISD           equ	3989	;# 
   581   000F95                     DDRD            equ	3989	;# 
   582   000F96                     TRISE           equ	3990	;# 
   583   000F96                     DDRE            equ	3990	;# 
   584   000F9B                     OSCTUNE         equ	3995	;# 
   585   000F9D                     PIE1            equ	3997	;# 
   586   000F9E                     PIR1            equ	3998	;# 
   587   000F9F                     IPR1            equ	3999	;# 
   588   000FA0                     PIE2            equ	4000	;# 
   589   000FA1                     PIR2            equ	4001	;# 
   590   000FA2                     IPR2            equ	4002	;# 
   591   000FA6                     EECON1          equ	4006	;# 
   592   000FA7                     EECON2          equ	4007	;# 
   593   000FA8                     EEDATA          equ	4008	;# 
   594   000FA9                     EEADR           equ	4009	;# 
   595   000FAB                     RCSTA           equ	4011	;# 
   596   000FAB                     RCSTA1          equ	4011	;# 
   597   000FAC                     TXSTA           equ	4012	;# 
   598   000FAC                     TXSTA1          equ	4012	;# 
   599   000FAD                     TXREG           equ	4013	;# 
   600   000FAD                     TXREG1          equ	4013	;# 
   601   000FAE                     RCREG           equ	4014	;# 
   602   000FAE                     RCREG1          equ	4014	;# 
   603   000FAF                     SPBRG           equ	4015	;# 
   604   000FAF                     SPBRG1          equ	4015	;# 
   605   000FB0                     SPBRGH          equ	4016	;# 
   606   000FB1                     T3CON           equ	4017	;# 
   607   000FB2                     TMR3            equ	4018	;# 
   608   000FB2                     TMR3L           equ	4018	;# 
   609   000FB3                     TMR3H           equ	4019	;# 
   610   000FB4                     CMCON           equ	4020	;# 
   611   000FB5                     CVRCON          equ	4021	;# 
   612   000FB6                     ECCP1AS         equ	4022	;# 
   613   000FB7                     ECCP1DEL        equ	4023	;# 
   614   000FB7                     PWM1CON         equ	4023	;# 
   615   000FB8                     BAUDCON         equ	4024	;# 
   616   000FB8                     BAUDCTL         equ	4024	;# 
   617   000FBA                     CCP2CON         equ	4026	;# 
   618   000FBB                     CCPR2           equ	4027	;# 
   619   000FBB                     CCPR2L          equ	4027	;# 
   620   000FBC                     CCPR2H          equ	4028	;# 
   621   000FBD                     CCP1CON         equ	4029	;# 
   622   000FBD                     ECCP1CON        equ	4029	;# 
   623   000FBE                     CCPR1           equ	4030	;# 
   624   000FBE                     CCPR1L          equ	4030	;# 
   625   000FBF                     CCPR1H          equ	4031	;# 
   626   000FC0                     ADCON2          equ	4032	;# 
   627   000FC1                     ADCON1          equ	4033	;# 
   628   000FC2                     ADCON0          equ	4034	;# 
   629   000FC3                     ADRES           equ	4035	;# 
   630   000FC3                     ADRESL          equ	4035	;# 
   631   000FC4                     ADRESH          equ	4036	;# 
   632   000FC5                     SSPCON2         equ	4037	;# 
   633   000FC6                     SSPCON1         equ	4038	;# 
   634   000FC7                     SSPSTAT         equ	4039	;# 
   635   000FC8                     SSPADD          equ	4040	;# 
   636   000FC9                     SSPBUF          equ	4041	;# 
   637   000FCA                     T2CON           equ	4042	;# 
   638   000FCB                     PR2             equ	4043	;# 
   639   000FCB                     MEMCON          equ	4043	;# 
   640   000FCC                     TMR2            equ	4044	;# 
   641   000FCD                     T1CON           equ	4045	;# 
   642   000FCE                     TMR1            equ	4046	;# 
   643   000FCE                     TMR1L           equ	4046	;# 
   644   000FCF                     TMR1H           equ	4047	;# 
   645   000FD0                     RCON            equ	4048	;# 
   646   000FD1                     WDTCON          equ	4049	;# 
   647   000FD2                     HLVDCON         equ	4050	;# 
   648   000FD2                     LVDCON          equ	4050	;# 
   649   000FD3                     OSCCON          equ	4051	;# 
   650   000FD5                     T0CON           equ	4053	;# 
   651   000FD6                     TMR0            equ	4054	;# 
   652   000FD6                     TMR0L           equ	4054	;# 
   653   000FD7                     TMR0H           equ	4055	;# 
   654   000FD8                     STATUS          equ	4056	;# 
   655   000FD9                     FSR2            equ	4057	;# 
   656   000FD9                     FSR2L           equ	4057	;# 
   657   000FDA                     FSR2H           equ	4058	;# 
   658   000FDB                     PLUSW2          equ	4059	;# 
   659   000FDC                     PREINC2         equ	4060	;# 
   660   000FDD                     POSTDEC2        equ	4061	;# 
   661   000FDE                     POSTINC2        equ	4062	;# 
   662   000FDF                     INDF2           equ	4063	;# 
   663   000FE0                     BSR             equ	4064	;# 
   664   000FE1                     FSR1            equ	4065	;# 
   665   000FE1                     FSR1L           equ	4065	;# 
   666   000FE2                     FSR1H           equ	4066	;# 
   667   000FE3                     PLUSW1          equ	4067	;# 
   668   000FE4                     PREINC1         equ	4068	;# 
   669   000FE5                     POSTDEC1        equ	4069	;# 
   670   000FE6                     POSTINC1        equ	4070	;# 
   671   000FE7                     INDF1           equ	4071	;# 
   672   000FE8                     WREG            equ	4072	;# 
   673   000FE9                     FSR0            equ	4073	;# 
   674   000FE9                     FSR0L           equ	4073	;# 
   675   000FEA                     FSR0H           equ	4074	;# 
   676   000FEB                     PLUSW0          equ	4075	;# 
   677   000FEC                     PREINC0         equ	4076	;# 
   678   000FED                     POSTDEC0        equ	4077	;# 
   679   000FEE                     POSTINC0        equ	4078	;# 
   680   000FEF                     INDF0           equ	4079	;# 
   681   000FF0                     INTCON3         equ	4080	;# 
   682   000FF1                     INTCON2         equ	4081	;# 
   683   000FF2                     INTCON          equ	4082	;# 
   684   000FF3                     PROD            equ	4083	;# 
   685   000FF3                     PRODL           equ	4083	;# 
   686   000FF4                     PRODH           equ	4084	;# 
   687   000FF5                     TABLAT          equ	4085	;# 
   688   000FF6                     TBLPTR          equ	4086	;# 
   689   000FF6                     TBLPTRL         equ	4086	;# 
   690   000FF7                     TBLPTRH         equ	4087	;# 
   691   000FF8                     TBLPTRU         equ	4088	;# 
   692   000FF9                     PCLAT           equ	4089	;# 
   693   000FF9                     PC              equ	4089	;# 
   694   000FF9                     PCL             equ	4089	;# 
   695   000FFA                     PCLATH          equ	4090	;# 
   696   000FFB                     PCLATU          equ	4091	;# 
   697   000FFC                     STKPTR          equ	4092	;# 
   698   000FFD                     TOS             equ	4093	;# 
   699   000FFD                     TOSL            equ	4093	;# 
   700   000FFE                     TOSH            equ	4094	;# 
   701   000FFF                     TOSU            equ	4095	;# 
   702   000F80                     PORTA           equ	3968	;# 
   703   000F81                     PORTB           equ	3969	;# 
   704   000F82                     PORTC           equ	3970	;# 
   705   000F83                     PORTD           equ	3971	;# 
   706   000F84                     PORTE           equ	3972	;# 
   707   000F89                     LATA            equ	3977	;# 
   708   000F8A                     LATB            equ	3978	;# 
   709   000F8B                     LATC            equ	3979	;# 
   710   000F8C                     LATD            equ	3980	;# 
   711   000F8D                     LATE            equ	3981	;# 
   712   000F92                     TRISA           equ	3986	;# 
   713   000F92                     DDRA            equ	3986	;# 
   714   000F93                     TRISB           equ	3987	;# 
   715   000F93                     DDRB            equ	3987	;# 
   716   000F94                     TRISC           equ	3988	;# 
   717   000F94                     DDRC            equ	3988	;# 
   718   000F95                     TRISD           equ	3989	;# 
   719   000F95                     DDRD            equ	3989	;# 
   720   000F96                     TRISE           equ	3990	;# 
   721   000F96                     DDRE            equ	3990	;# 
   722   000F9B                     OSCTUNE         equ	3995	;# 
   723   000F9D                     PIE1            equ	3997	;# 
   724   000F9E                     PIR1            equ	3998	;# 
   725   000F9F                     IPR1            equ	3999	;# 
   726   000FA0                     PIE2            equ	4000	;# 
   727   000FA1                     PIR2            equ	4001	;# 
   728   000FA2                     IPR2            equ	4002	;# 
   729   000FA6                     EECON1          equ	4006	;# 
   730   000FA7                     EECON2          equ	4007	;# 
   731   000FA8                     EEDATA          equ	4008	;# 
   732   000FA9                     EEADR           equ	4009	;# 
   733   000FAB                     RCSTA           equ	4011	;# 
   734   000FAB                     RCSTA1          equ	4011	;# 
   735   000FAC                     TXSTA           equ	4012	;# 
   736   000FAC                     TXSTA1          equ	4012	;# 
   737   000FAD                     TXREG           equ	4013	;# 
   738   000FAD                     TXREG1          equ	4013	;# 
   739   000FAE                     RCREG           equ	4014	;# 
   740   000FAE                     RCREG1          equ	4014	;# 
   741   000FAF                     SPBRG           equ	4015	;# 
   742   000FAF                     SPBRG1          equ	4015	;# 
   743   000FB0                     SPBRGH          equ	4016	;# 
   744   000FB1                     T3CON           equ	4017	;# 
   745   000FB2                     TMR3            equ	4018	;# 
   746   000FB2                     TMR3L           equ	4018	;# 
   747   000FB3                     TMR3H           equ	4019	;# 
   748   000FB4                     CMCON           equ	4020	;# 
   749   000FB5                     CVRCON          equ	4021	;# 
   750   000FB6                     ECCP1AS         equ	4022	;# 
   751   000FB7                     ECCP1DEL        equ	4023	;# 
   752   000FB7                     PWM1CON         equ	4023	;# 
   753   000FB8                     BAUDCON         equ	4024	;# 
   754   000FB8                     BAUDCTL         equ	4024	;# 
   755   000FBA                     CCP2CON         equ	4026	;# 
   756   000FBB                     CCPR2           equ	4027	;# 
   757   000FBB                     CCPR2L          equ	4027	;# 
   758   000FBC                     CCPR2H          equ	4028	;# 
   759   000FBD                     CCP1CON         equ	4029	;# 
   760   000FBD                     ECCP1CON        equ	4029	;# 
   761   000FBE                     CCPR1           equ	4030	;# 
   762   000FBE                     CCPR1L          equ	4030	;# 
   763   000FBF                     CCPR1H          equ	4031	;# 
   764   000FC0                     ADCON2          equ	4032	;# 
   765   000FC1                     ADCON1          equ	4033	;# 
   766   000FC2                     ADCON0          equ	4034	;# 
   767   000FC3                     ADRES           equ	4035	;# 
   768   000FC3                     ADRESL          equ	4035	;# 
   769   000FC4                     ADRESH          equ	4036	;# 
   770   000FC5                     SSPCON2         equ	4037	;# 
   771   000FC6                     SSPCON1         equ	4038	;# 
   772   000FC7                     SSPSTAT         equ	4039	;# 
   773   000FC8                     SSPADD          equ	4040	;# 
   774   000FC9                     SSPBUF          equ	4041	;# 
   775   000FCA                     T2CON           equ	4042	;# 
   776   000FCB                     PR2             equ	4043	;# 
   777   000FCB                     MEMCON          equ	4043	;# 
   778   000FCC                     TMR2            equ	4044	;# 
   779   000FCD                     T1CON           equ	4045	;# 
   780   000FCE                     TMR1            equ	4046	;# 
   781   000FCE                     TMR1L           equ	4046	;# 
   782   000FCF                     TMR1H           equ	4047	;# 
   783   000FD0                     RCON            equ	4048	;# 
   784   000FD1                     WDTCON          equ	4049	;# 
   785   000FD2                     HLVDCON         equ	4050	;# 
   786   000FD2                     LVDCON          equ	4050	;# 
   787   000FD3                     OSCCON          equ	4051	;# 
   788   000FD5                     T0CON           equ	4053	;# 
   789   000FD6                     TMR0            equ	4054	;# 
   790   000FD6                     TMR0L           equ	4054	;# 
   791   000FD7                     TMR0H           equ	4055	;# 
   792   000FD8                     STATUS          equ	4056	;# 
   793   000FD9                     FSR2            equ	4057	;# 
   794   000FD9                     FSR2L           equ	4057	;# 
   795   000FDA                     FSR2H           equ	4058	;# 
   796   000FDB                     PLUSW2          equ	4059	;# 
   797   000FDC                     PREINC2         equ	4060	;# 
   798   000FDD                     POSTDEC2        equ	4061	;# 
   799   000FDE                     POSTINC2        equ	4062	;# 
   800   000FDF                     INDF2           equ	4063	;# 
   801   000FE0                     BSR             equ	4064	;# 
   802   000FE1                     FSR1            equ	4065	;# 
   803   000FE1                     FSR1L           equ	4065	;# 
   804   000FE2                     FSR1H           equ	4066	;# 
   805   000FE3                     PLUSW1          equ	4067	;# 
   806   000FE4                     PREINC1         equ	4068	;# 
   807   000FE5                     POSTDEC1        equ	4069	;# 
   808   000FE6                     POSTINC1        equ	4070	;# 
   809   000FE7                     INDF1           equ	4071	;# 
   810   000FE8                     WREG            equ	4072	;# 
   811   000FE9                     FSR0            equ	4073	;# 
   812   000FE9                     FSR0L           equ	4073	;# 
   813   000FEA                     FSR0H           equ	4074	;# 
   814   000FEB                     PLUSW0          equ	4075	;# 
   815   000FEC                     PREINC0         equ	4076	;# 
   816   000FED                     POSTDEC0        equ	4077	;# 
   817   000FEE                     POSTINC0        equ	4078	;# 
   818   000FEF                     INDF0           equ	4079	;# 
   819   000FF0                     INTCON3         equ	4080	;# 
   820   000FF1                     INTCON2         equ	4081	;# 
   821   000FF2                     INTCON          equ	4082	;# 
   822   000FF3                     PROD            equ	4083	;# 
   823   000FF3                     PRODL           equ	4083	;# 
   824   000FF4                     PRODH           equ	4084	;# 
   825   000FF5                     TABLAT          equ	4085	;# 
   826   000FF6                     TBLPTR          equ	4086	;# 
   827   000FF6                     TBLPTRL         equ	4086	;# 
   828   000FF7                     TBLPTRH         equ	4087	;# 
   829   000FF8                     TBLPTRU         equ	4088	;# 
   830   000FF9                     PCLAT           equ	4089	;# 
   831   000FF9                     PC              equ	4089	;# 
   832   000FF9                     PCL             equ	4089	;# 
   833   000FFA                     PCLATH          equ	4090	;# 
   834   000FFB                     PCLATU          equ	4091	;# 
   835   000FFC                     STKPTR          equ	4092	;# 
   836   000FFD                     TOS             equ	4093	;# 
   837   000FFD                     TOSL            equ	4093	;# 
   838   000FFE                     TOSH            equ	4094	;# 
   839   000FFF                     TOSU            equ	4095	;# 
   840   000F80                     PORTA           equ	3968	;# 
   841   000F81                     PORTB           equ	3969	;# 
   842   000F82                     PORTC           equ	3970	;# 
   843   000F83                     PORTD           equ	3971	;# 
   844   000F84                     PORTE           equ	3972	;# 
   845   000F89                     LATA            equ	3977	;# 
   846   000F8A                     LATB            equ	3978	;# 
   847   000F8B                     LATC            equ	3979	;# 
   848   000F8C                     LATD            equ	3980	;# 
   849   000F8D                     LATE            equ	3981	;# 
   850   000F92                     TRISA           equ	3986	;# 
   851   000F92                     DDRA            equ	3986	;# 
   852   000F93                     TRISB           equ	3987	;# 
   853   000F93                     DDRB            equ	3987	;# 
   854   000F94                     TRISC           equ	3988	;# 
   855   000F94                     DDRC            equ	3988	;# 
   856   000F95                     TRISD           equ	3989	;# 
   857   000F95                     DDRD            equ	3989	;# 
   858   000F96                     TRISE           equ	3990	;# 
   859   000F96                     DDRE            equ	3990	;# 
   860   000F9B                     OSCTUNE         equ	3995	;# 
   861   000F9D                     PIE1            equ	3997	;# 
   862   000F9E                     PIR1            equ	3998	;# 
   863   000F9F                     IPR1            equ	3999	;# 
   864   000FA0                     PIE2            equ	4000	;# 
   865   000FA1                     PIR2            equ	4001	;# 
   866   000FA2                     IPR2            equ	4002	;# 
   867   000FA6                     EECON1          equ	4006	;# 
   868   000FA7                     EECON2          equ	4007	;# 
   869   000FA8                     EEDATA          equ	4008	;# 
   870   000FA9                     EEADR           equ	4009	;# 
   871   000FAB                     RCSTA           equ	4011	;# 
   872   000FAB                     RCSTA1          equ	4011	;# 
   873   000FAC                     TXSTA           equ	4012	;# 
   874   000FAC                     TXSTA1          equ	4012	;# 
   875   000FAD                     TXREG           equ	4013	;# 
   876   000FAD                     TXREG1          equ	4013	;# 
   877   000FAE                     RCREG           equ	4014	;# 
   878   000FAE                     RCREG1          equ	4014	;# 
   879   000FAF                     SPBRG           equ	4015	;# 
   880   000FAF                     SPBRG1          equ	4015	;# 
   881   000FB0                     SPBRGH          equ	4016	;# 
   882   000FB1                     T3CON           equ	4017	;# 
   883   000FB2                     TMR3            equ	4018	;# 
   884   000FB2                     TMR3L           equ	4018	;# 
   885   000FB3                     TMR3H           equ	4019	;# 
   886   000FB4                     CMCON           equ	4020	;# 
   887   000FB5                     CVRCON          equ	4021	;# 
   888   000FB6                     ECCP1AS         equ	4022	;# 
   889   000FB7                     ECCP1DEL        equ	4023	;# 
   890   000FB7                     PWM1CON         equ	4023	;# 
   891   000FB8                     BAUDCON         equ	4024	;# 
   892   000FB8                     BAUDCTL         equ	4024	;# 
   893   000FBA                     CCP2CON         equ	4026	;# 
   894   000FBB                     CCPR2           equ	4027	;# 
   895   000FBB                     CCPR2L          equ	4027	;# 
   896   000FBC                     CCPR2H          equ	4028	;# 
   897   000FBD                     CCP1CON         equ	4029	;# 
   898   000FBD                     ECCP1CON        equ	4029	;# 
   899   000FBE                     CCPR1           equ	4030	;# 
   900   000FBE                     CCPR1L          equ	4030	;# 
   901   000FBF                     CCPR1H          equ	4031	;# 
   902   000FC0                     ADCON2          equ	4032	;# 
   903   000FC1                     ADCON1          equ	4033	;# 
   904   000FC2                     ADCON0          equ	4034	;# 
   905   000FC3                     ADRES           equ	4035	;# 
   906   000FC3                     ADRESL          equ	4035	;# 
   907   000FC4                     ADRESH          equ	4036	;# 
   908   000FC5                     SSPCON2         equ	4037	;# 
   909   000FC6                     SSPCON1         equ	4038	;# 
   910   000FC7                     SSPSTAT         equ	4039	;# 
   911   000FC8                     SSPADD          equ	4040	;# 
   912   000FC9                     SSPBUF          equ	4041	;# 
   913   000FCA                     T2CON           equ	4042	;# 
   914   000FCB                     PR2             equ	4043	;# 
   915   000FCB                     MEMCON          equ	4043	;# 
   916   000FCC                     TMR2            equ	4044	;# 
   917   000FCD                     T1CON           equ	4045	;# 
   918   000FCE                     TMR1            equ	4046	;# 
   919   000FCE                     TMR1L           equ	4046	;# 
   920   000FCF                     TMR1H           equ	4047	;# 
   921   000FD0                     RCON            equ	4048	;# 
   922   000FD1                     WDTCON          equ	4049	;# 
   923   000FD2                     HLVDCON         equ	4050	;# 
   924   000FD2                     LVDCON          equ	4050	;# 
   925   000FD3                     OSCCON          equ	4051	;# 
   926   000FD5                     T0CON           equ	4053	;# 
   927   000FD6                     TMR0            equ	4054	;# 
   928   000FD6                     TMR0L           equ	4054	;# 
   929   000FD7                     TMR0H           equ	4055	;# 
   930   000FD8                     STATUS          equ	4056	;# 
   931   000FD9                     FSR2            equ	4057	;# 
   932   000FD9                     FSR2L           equ	4057	;# 
   933   000FDA                     FSR2H           equ	4058	;# 
   934   000FDB                     PLUSW2          equ	4059	;# 
   935   000FDC                     PREINC2         equ	4060	;# 
   936   000FDD                     POSTDEC2        equ	4061	;# 
   937   000FDE                     POSTINC2        equ	4062	;# 
   938   000FDF                     INDF2           equ	4063	;# 
   939   000FE0                     BSR             equ	4064	;# 
   940   000FE1                     FSR1            equ	4065	;# 
   941   000FE1                     FSR1L           equ	4065	;# 
   942   000FE2                     FSR1H           equ	4066	;# 
   943   000FE3                     PLUSW1          equ	4067	;# 
   944   000FE4                     PREINC1         equ	4068	;# 
   945   000FE5                     POSTDEC1        equ	4069	;# 
   946   000FE6                     POSTINC1        equ	4070	;# 
   947   000FE7                     INDF1           equ	4071	;# 
   948   000FE8                     WREG            equ	4072	;# 
   949   000FE9                     FSR0            equ	4073	;# 
   950   000FE9                     FSR0L           equ	4073	;# 
   951   000FEA                     FSR0H           equ	4074	;# 
   952   000FEB                     PLUSW0          equ	4075	;# 
   953   000FEC                     PREINC0         equ	4076	;# 
   954   000FED                     POSTDEC0        equ	4077	;# 
   955   000FEE                     POSTINC0        equ	4078	;# 
   956   000FEF                     INDF0           equ	4079	;# 
   957   000FF0                     INTCON3         equ	4080	;# 
   958   000FF1                     INTCON2         equ	4081	;# 
   959   000FF2                     INTCON          equ	4082	;# 
   960   000FF3                     PROD            equ	4083	;# 
   961   000FF3                     PRODL           equ	4083	;# 
   962   000FF4                     PRODH           equ	4084	;# 
   963   000FF5                     TABLAT          equ	4085	;# 
   964   000FF6                     TBLPTR          equ	4086	;# 
   965   000FF6                     TBLPTRL         equ	4086	;# 
   966   000FF7                     TBLPTRH         equ	4087	;# 
   967   000FF8                     TBLPTRU         equ	4088	;# 
   968   000FF9                     PCLAT           equ	4089	;# 
   969   000FF9                     PC              equ	4089	;# 
   970   000FF9                     PCL             equ	4089	;# 
   971   000FFA                     PCLATH          equ	4090	;# 
   972   000FFB                     PCLATU          equ	4091	;# 
   973   000FFC                     STKPTR          equ	4092	;# 
   974   000FFD                     TOS             equ	4093	;# 
   975   000FFD                     TOSL            equ	4093	;# 
   976   000FFE                     TOSH            equ	4094	;# 
   977   000FFF                     TOSU            equ	4095	;# 
   978   000F80                     PORTA           equ	3968	;# 
   979   000F81                     PORTB           equ	3969	;# 
   980   000F82                     PORTC           equ	3970	;# 
   981   000F83                     PORTD           equ	3971	;# 
   982   000F84                     PORTE           equ	3972	;# 
   983   000F89                     LATA            equ	3977	;# 
   984   000F8A                     LATB            equ	3978	;# 
   985   000F8B                     LATC            equ	3979	;# 
   986   000F8C                     LATD            equ	3980	;# 
   987   000F8D                     LATE            equ	3981	;# 
   988   000F92                     TRISA           equ	3986	;# 
   989   000F92                     DDRA            equ	3986	;# 
   990   000F93                     TRISB           equ	3987	;# 
   991   000F93                     DDRB            equ	3987	;# 
   992   000F94                     TRISC           equ	3988	;# 
   993   000F94                     DDRC            equ	3988	;# 
   994   000F95                     TRISD           equ	3989	;# 
   995   000F95                     DDRD            equ	3989	;# 
   996   000F96                     TRISE           equ	3990	;# 
   997   000F96                     DDRE            equ	3990	;# 
   998   000F9B                     OSCTUNE         equ	3995	;# 
   999   000F9D                     PIE1            equ	3997	;# 
  1000   000F9E                     PIR1            equ	3998	;# 
  1001   000F9F                     IPR1            equ	3999	;# 
  1002   000FA0                     PIE2            equ	4000	;# 
  1003   000FA1                     PIR2            equ	4001	;# 
  1004   000FA2                     IPR2            equ	4002	;# 
  1005   000FA6                     EECON1          equ	4006	;# 
  1006   000FA7                     EECON2          equ	4007	;# 
  1007   000FA8                     EEDATA          equ	4008	;# 
  1008   000FA9                     EEADR           equ	4009	;# 
  1009   000FAB                     RCSTA           equ	4011	;# 
  1010   000FAB                     RCSTA1          equ	4011	;# 
  1011   000FAC                     TXSTA           equ	4012	;# 
  1012   000FAC                     TXSTA1          equ	4012	;# 
  1013   000FAD                     TXREG           equ	4013	;# 
  1014   000FAD                     TXREG1          equ	4013	;# 
  1015   000FAE                     RCREG           equ	4014	;# 
  1016   000FAE                     RCREG1          equ	4014	;# 
  1017   000FAF                     SPBRG           equ	4015	;# 
  1018   000FAF                     SPBRG1          equ	4015	;# 
  1019   000FB0                     SPBRGH          equ	4016	;# 
  1020   000FB1                     T3CON           equ	4017	;# 
  1021   000FB2                     TMR3            equ	4018	;# 
  1022   000FB2                     TMR3L           equ	4018	;# 
  1023   000FB3                     TMR3H           equ	4019	;# 
  1024   000FB4                     CMCON           equ	4020	;# 
  1025   000FB5                     CVRCON          equ	4021	;# 
  1026   000FB6                     ECCP1AS         equ	4022	;# 
  1027   000FB7                     ECCP1DEL        equ	4023	;# 
  1028   000FB7                     PWM1CON         equ	4023	;# 
  1029   000FB8                     BAUDCON         equ	4024	;# 
  1030   000FB8                     BAUDCTL         equ	4024	;# 
  1031   000FBA                     CCP2CON         equ	4026	;# 
  1032   000FBB                     CCPR2           equ	4027	;# 
  1033   000FBB                     CCPR2L          equ	4027	;# 
  1034   000FBC                     CCPR2H          equ	4028	;# 
  1035   000FBD                     CCP1CON         equ	4029	;# 
  1036   000FBD                     ECCP1CON        equ	4029	;# 
  1037   000FBE                     CCPR1           equ	4030	;# 
  1038   000FBE                     CCPR1L          equ	4030	;# 
  1039   000FBF                     CCPR1H          equ	4031	;# 
  1040   000FC0                     ADCON2          equ	4032	;# 
  1041   000FC1                     ADCON1          equ	4033	;# 
  1042   000FC2                     ADCON0          equ	4034	;# 
  1043   000FC3                     ADRES           equ	4035	;# 
  1044   000FC3                     ADRESL          equ	4035	;# 
  1045   000FC4                     ADRESH          equ	4036	;# 
  1046   000FC5                     SSPCON2         equ	4037	;# 
  1047   000FC6                     SSPCON1         equ	4038	;# 
  1048   000FC7                     SSPSTAT         equ	4039	;# 
  1049   000FC8                     SSPADD          equ	4040	;# 
  1050   000FC9                     SSPBUF          equ	4041	;# 
  1051   000FCA                     T2CON           equ	4042	;# 
  1052   000FCB                     PR2             equ	4043	;# 
  1053   000FCB                     MEMCON          equ	4043	;# 
  1054   000FCC                     TMR2            equ	4044	;# 
  1055   000FCD                     T1CON           equ	4045	;# 
  1056   000FCE                     TMR1            equ	4046	;# 
  1057   000FCE                     TMR1L           equ	4046	;# 
  1058   000FCF                     TMR1H           equ	4047	;# 
  1059   000FD0                     RCON            equ	4048	;# 
  1060   000FD1                     WDTCON          equ	4049	;# 
  1061   000FD2                     HLVDCON         equ	4050	;# 
  1062   000FD2                     LVDCON          equ	4050	;# 
  1063   000FD3                     OSCCON          equ	4051	;# 
  1064   000FD5                     T0CON           equ	4053	;# 
  1065   000FD6                     TMR0            equ	4054	;# 
  1066   000FD6                     TMR0L           equ	4054	;# 
  1067   000FD7                     TMR0H           equ	4055	;# 
  1068   000FD8                     STATUS          equ	4056	;# 
  1069   000FD9                     FSR2            equ	4057	;# 
  1070   000FD9                     FSR2L           equ	4057	;# 
  1071   000FDA                     FSR2H           equ	4058	;# 
  1072   000FDB                     PLUSW2          equ	4059	;# 
  1073   000FDC                     PREINC2         equ	4060	;# 
  1074   000FDD                     POSTDEC2        equ	4061	;# 
  1075   000FDE                     POSTINC2        equ	4062	;# 
  1076   000FDF                     INDF2           equ	4063	;# 
  1077   000FE0                     BSR             equ	4064	;# 
  1078   000FE1                     FSR1            equ	4065	;# 
  1079   000FE1                     FSR1L           equ	4065	;# 
  1080   000FE2                     FSR1H           equ	4066	;# 
  1081   000FE3                     PLUSW1          equ	4067	;# 
  1082   000FE4                     PREINC1         equ	4068	;# 
  1083   000FE5                     POSTDEC1        equ	4069	;# 
  1084   000FE6                     POSTINC1        equ	4070	;# 
  1085   000FE7                     INDF1           equ	4071	;# 
  1086   000FE8                     WREG            equ	4072	;# 
  1087   000FE9                     FSR0            equ	4073	;# 
  1088   000FE9                     FSR0L           equ	4073	;# 
  1089   000FEA                     FSR0H           equ	4074	;# 
  1090   000FEB                     PLUSW0          equ	4075	;# 
  1091   000FEC                     PREINC0         equ	4076	;# 
  1092   000FED                     POSTDEC0        equ	4077	;# 
  1093   000FEE                     POSTINC0        equ	4078	;# 
  1094   000FEF                     INDF0           equ	4079	;# 
  1095   000FF0                     INTCON3         equ	4080	;# 
  1096   000FF1                     INTCON2         equ	4081	;# 
  1097   000FF2                     INTCON          equ	4082	;# 
  1098   000FF3                     PROD            equ	4083	;# 
  1099   000FF3                     PRODL           equ	4083	;# 
  1100   000FF4                     PRODH           equ	4084	;# 
  1101   000FF5                     TABLAT          equ	4085	;# 
  1102   000FF6                     TBLPTR          equ	4086	;# 
  1103   000FF6                     TBLPTRL         equ	4086	;# 
  1104   000FF7                     TBLPTRH         equ	4087	;# 
  1105   000FF8                     TBLPTRU         equ	4088	;# 
  1106   000FF9                     PCLAT           equ	4089	;# 
  1107   000FF9                     PC              equ	4089	;# 
  1108   000FF9                     PCL             equ	4089	;# 
  1109   000FFA                     PCLATH          equ	4090	;# 
  1110   000FFB                     PCLATU          equ	4091	;# 
  1111   000FFC                     STKPTR          equ	4092	;# 
  1112   000FFD                     TOS             equ	4093	;# 
  1113   000FFD                     TOSL            equ	4093	;# 
  1114   000FFE                     TOSH            equ	4094	;# 
  1115   000FFF                     TOSU            equ	4095	;# 
  1116   000F80                     PORTA           equ	3968	;# 
  1117   000F81                     PORTB           equ	3969	;# 
  1118   000F82                     PORTC           equ	3970	;# 
  1119   000F83                     PORTD           equ	3971	;# 
  1120   000F84                     PORTE           equ	3972	;# 
  1121   000F89                     LATA            equ	3977	;# 
  1122   000F8A                     LATB            equ	3978	;# 
  1123   000F8B                     LATC            equ	3979	;# 
  1124   000F8C                     LATD            equ	3980	;# 
  1125   000F8D                     LATE            equ	3981	;# 
  1126   000F92                     TRISA           equ	3986	;# 
  1127   000F92                     DDRA            equ	3986	;# 
  1128   000F93                     TRISB           equ	3987	;# 
  1129   000F93                     DDRB            equ	3987	;# 
  1130   000F94                     TRISC           equ	3988	;# 
  1131   000F94                     DDRC            equ	3988	;# 
  1132   000F95                     TRISD           equ	3989	;# 
  1133   000F95                     DDRD            equ	3989	;# 
  1134   000F96                     TRISE           equ	3990	;# 
  1135   000F96                     DDRE            equ	3990	;# 
  1136   000F9B                     OSCTUNE         equ	3995	;# 
  1137   000F9D                     PIE1            equ	3997	;# 
  1138   000F9E                     PIR1            equ	3998	;# 
  1139   000F9F                     IPR1            equ	3999	;# 
  1140   000FA0                     PIE2            equ	4000	;# 
  1141   000FA1                     PIR2            equ	4001	;# 
  1142   000FA2                     IPR2            equ	4002	;# 
  1143   000FA6                     EECON1          equ	4006	;# 
  1144   000FA7                     EECON2          equ	4007	;# 
  1145   000FA8                     EEDATA          equ	4008	;# 
  1146   000FA9                     EEADR           equ	4009	;# 
  1147   000FAB                     RCSTA           equ	4011	;# 
  1148   000FAB                     RCSTA1          equ	4011	;# 
  1149   000FAC                     TXSTA           equ	4012	;# 
  1150   000FAC                     TXSTA1          equ	4012	;# 
  1151   000FAD                     TXREG           equ	4013	;# 
  1152   000FAD                     TXREG1          equ	4013	;# 
  1153   000FAE                     RCREG           equ	4014	;# 
  1154   000FAE                     RCREG1          equ	4014	;# 
  1155   000FAF                     SPBRG           equ	4015	;# 
  1156   000FAF                     SPBRG1          equ	4015	;# 
  1157   000FB0                     SPBRGH          equ	4016	;# 
  1158   000FB1                     T3CON           equ	4017	;# 
  1159   000FB2                     TMR3            equ	4018	;# 
  1160   000FB2                     TMR3L           equ	4018	;# 
  1161   000FB3                     TMR3H           equ	4019	;# 
  1162   000FB4                     CMCON           equ	4020	;# 
  1163   000FB5                     CVRCON          equ	4021	;# 
  1164   000FB6                     ECCP1AS         equ	4022	;# 
  1165   000FB7                     ECCP1DEL        equ	4023	;# 
  1166   000FB7                     PWM1CON         equ	4023	;# 
  1167   000FB8                     BAUDCON         equ	4024	;# 
  1168   000FB8                     BAUDCTL         equ	4024	;# 
  1169   000FBA                     CCP2CON         equ	4026	;# 
  1170   000FBB                     CCPR2           equ	4027	;# 
  1171   000FBB                     CCPR2L          equ	4027	;# 
  1172   000FBC                     CCPR2H          equ	4028	;# 
  1173   000FBD                     CCP1CON         equ	4029	;# 
  1174   000FBD                     ECCP1CON        equ	4029	;# 
  1175   000FBE                     CCPR1           equ	4030	;# 
  1176   000FBE                     CCPR1L          equ	4030	;# 
  1177   000FBF                     CCPR1H          equ	4031	;# 
  1178   000FC0                     ADCON2          equ	4032	;# 
  1179   000FC1                     ADCON1          equ	4033	;# 
  1180   000FC2                     ADCON0          equ	4034	;# 
  1181   000FC3                     ADRES           equ	4035	;# 
  1182   000FC3                     ADRESL          equ	4035	;# 
  1183   000FC4                     ADRESH          equ	4036	;# 
  1184   000FC5                     SSPCON2         equ	4037	;# 
  1185   000FC6                     SSPCON1         equ	4038	;# 
  1186   000FC7                     SSPSTAT         equ	4039	;# 
  1187   000FC8                     SSPADD          equ	4040	;# 
  1188   000FC9                     SSPBUF          equ	4041	;# 
  1189   000FCA                     T2CON           equ	4042	;# 
  1190   000FCB                     PR2             equ	4043	;# 
  1191   000FCB                     MEMCON          equ	4043	;# 
  1192   000FCC                     TMR2            equ	4044	;# 
  1193   000FCD                     T1CON           equ	4045	;# 
  1194   000FCE                     TMR1            equ	4046	;# 
  1195   000FCE                     TMR1L           equ	4046	;# 
  1196   000FCF                     TMR1H           equ	4047	;# 
  1197   000FD0                     RCON            equ	4048	;# 
  1198   000FD1                     WDTCON          equ	4049	;# 
  1199   000FD2                     HLVDCON         equ	4050	;# 
  1200   000FD2                     LVDCON          equ	4050	;# 
  1201   000FD3                     OSCCON          equ	4051	;# 
  1202   000FD5                     T0CON           equ	4053	;# 
  1203   000FD6                     TMR0            equ	4054	;# 
  1204   000FD6                     TMR0L           equ	4054	;# 
  1205   000FD7                     TMR0H           equ	4055	;# 
  1206   000FD8                     STATUS          equ	4056	;# 
  1207   000FD9                     FSR2            equ	4057	;# 
  1208   000FD9                     FSR2L           equ	4057	;# 
  1209   000FDA                     FSR2H           equ	4058	;# 
  1210   000FDB                     PLUSW2          equ	4059	;# 
  1211   000FDC                     PREINC2         equ	4060	;# 
  1212   000FDD                     POSTDEC2        equ	4061	;# 
  1213   000FDE                     POSTINC2        equ	4062	;# 
  1214   000FDF                     INDF2           equ	4063	;# 
  1215   000FE0                     BSR             equ	4064	;# 
  1216   000FE1                     FSR1            equ	4065	;# 
  1217   000FE1                     FSR1L           equ	4065	;# 
  1218   000FE2                     FSR1H           equ	4066	;# 
  1219   000FE3                     PLUSW1          equ	4067	;# 
  1220   000FE4                     PREINC1         equ	4068	;# 
  1221   000FE5                     POSTDEC1        equ	4069	;# 
  1222   000FE6                     POSTINC1        equ	4070	;# 
  1223   000FE7                     INDF1           equ	4071	;# 
  1224   000FE8                     WREG            equ	4072	;# 
  1225   000FE9                     FSR0            equ	4073	;# 
  1226   000FE9                     FSR0L           equ	4073	;# 
  1227   000FEA                     FSR0H           equ	4074	;# 
  1228   000FEB                     PLUSW0          equ	4075	;# 
  1229   000FEC                     PREINC0         equ	4076	;# 
  1230   000FED                     POSTDEC0        equ	4077	;# 
  1231   000FEE                     POSTINC0        equ	4078	;# 
  1232   000FEF                     INDF0           equ	4079	;# 
  1233   000FF0                     INTCON3         equ	4080	;# 
  1234   000FF1                     INTCON2         equ	4081	;# 
  1235   000FF2                     INTCON          equ	4082	;# 
  1236   000FF3                     PROD            equ	4083	;# 
  1237   000FF3                     PRODL           equ	4083	;# 
  1238   000FF4                     PRODH           equ	4084	;# 
  1239   000FF5                     TABLAT          equ	4085	;# 
  1240   000FF6                     TBLPTR          equ	4086	;# 
  1241   000FF6                     TBLPTRL         equ	4086	;# 
  1242   000FF7                     TBLPTRH         equ	4087	;# 
  1243   000FF8                     TBLPTRU         equ	4088	;# 
  1244   000FF9                     PCLAT           equ	4089	;# 
  1245   000FF9                     PC              equ	4089	;# 
  1246   000FF9                     PCL             equ	4089	;# 
  1247   000FFA                     PCLATH          equ	4090	;# 
  1248   000FFB                     PCLATU          equ	4091	;# 
  1249   000FFC                     STKPTR          equ	4092	;# 
  1250   000FFD                     TOS             equ	4093	;# 
  1251   000FFD                     TOSL            equ	4093	;# 
  1252   000FFE                     TOSH            equ	4094	;# 
  1253   000FFF                     TOSU            equ	4095	;# 
  1254                           
  1255                           	psect	idataCOMRAM
  1256   0014FC                     __pidataCOMRAM:
  1257                           	callstack 0
  1258                           
  1259                           ;initializer for _currentTime
  1260   0014FC  30                 	db	48
  1261   0014FD  30                 	db	48
  1262   0014FE  30                 	db	48
  1263   0014FF  30                 	db	48
  1264                           
  1265                           ;initializer for motorTerminal@hour
  1266   001500  30                 	db	48
  1267   001501  30                 	db	48
  1268   001502  30                 	db	48
  1269   001503  30                 	db	48
  1270                           
  1271                           	psect	idataBANK0
  1272   000FE6                     __pidataBANK0:
  1273                           	callstack 0
  1274                           
  1275                           ;initializer for _userUIDs
  1276   000FE6  65                 	db	101
  1277   000FE7  DC                 	db	220
  1278   000FE8  F9                 	db	249
  1279   000FE9  03                 	db	3
  1280   000FEA  43                 	db	67
  1281   000FEB  00                 	db	0
  1282   000FEC  00                 	db	0
  1283   000FED  00                 	db	0
  1284   000FEE  00                 	db	0
  1285   000FEF  00                 	db	0
  1286   000FF0  00                 	db	0
  1287   000FF1  00                 	db	0
  1288   000FF2  00                 	db	0
  1289   000FF3  00                 	db	0
  1290   000FF4  00                 	db	0
  1291   000FF5  00                 	db	0
  1292   000FF6  DC                 	db	220
  1293   000FF7  0D                 	db	13
  1294   000FF8  F9                 	db	249
  1295   000FF9  03                 	db	3
  1296   000FFA  2B                 	db	43
  1297   000FFB  00                 	db	0
  1298   000FFC  00                 	db	0
  1299   000FFD  00                 	db	0
  1300   000FFE  00                 	db	0
  1301   000FFF  00                 	db	0
  1302   001000  00                 	db	0
  1303   001001  00                 	db	0
  1304   001002  00                 	db	0
  1305   001003  00                 	db	0
  1306   001004  00                 	db	0
  1307   001005  00                 	db	0
  1308   001006  DF                 	db	223
  1309   001007  8B                 	db	139
  1310   001008  DF                 	db	223
  1311   001009  C4                 	db	196
  1312   00100A  4F                 	db	79
  1313   00100B  00                 	db	0
  1314   00100C  00                 	db	0
  1315   00100D  00                 	db	0
  1316   00100E  00                 	db	0
  1317   00100F  00                 	db	0
  1318   001010  00                 	db	0
  1319   001011  00                 	db	0
  1320   001012  00                 	db	0
  1321   001013  00                 	db	0
  1322   001014  00                 	db	0
  1323   001015  00                 	db	0
  1324   001016  21                 	db	33
  1325   001017  32                 	db	50
  1326   001018  A9                 	db	169
  1327   001019  89                 	db	137
  1328   00101A  33                 	db	51
  1329   00101B  00                 	db	0
  1330   00101C  00                 	db	0
  1331   00101D  00                 	db	0
  1332   00101E  00                 	db	0
  1333   00101F  00                 	db	0
  1334   001020  00                 	db	0
  1335   001021  00                 	db	0
  1336   001022  00                 	db	0
  1337   001023  00                 	db	0
  1338   001024  00                 	db	0
  1339   001025  00                 	db	0
  1340                           
  1341                           ;initializer for _configurations
  1342   001026  01                 	db	1
  1343   001027  01                 	db	1
  1344   001028  01                 	db	1
  1345   001029  01                 	db	1
  1346   00102A  01                 	db	1
  1347   00102B  01                 	db	1
  1348   00102C  01                 	db	1
  1349   00102D  01                 	db	1
  1350   00102E  01                 	db	1
  1351   00102F  01                 	db	1
  1352   001030  01                 	db	1
  1353   001031  01                 	db	1
  1354   001032  01                 	db	1
  1355   001033  01                 	db	1
  1356   001034  01                 	db	1
  1357   001035  01                 	db	1
  1358   001036  01                 	db	1
  1359   001037  01                 	db	1
  1360   001038  01                 	db	1
  1361   001039  01                 	db	1
  1362   00103A  01                 	db	1
  1363   00103B  01                 	db	1
  1364   00103C  01                 	db	1
  1365   00103D  01                 	db	1
  1366                           
  1367                           	psect	mediumconst
  1368   001EC4                     __pmediumconst:
  1369                           	callstack 0
  1370   001EC4  00                 	db	0
  1371   001EC5                     GetTecla@F2752:
  1372                           	callstack 0
  1373   001EC5  01                 	db	1
  1374   001EC6  02                 	db	2
  1375   001EC7  03                 	db	3
  1376   001EC8  04                 	db	4
  1377   001EC9  05                 	db	5
  1378   001ECA  06                 	db	6
  1379   001ECB  07                 	db	7
  1380   001ECC  08                 	db	8
  1381   001ECD  09                 	db	9
  1382   001ECE  0A                 	db	10
  1383   001ECF  00                 	db	0
  1384   001ED0  0B                 	db	11
  1385   001ED1                     __end_ofGetTecla@F2752:
  1386                           	callstack 0
  1387   007F92                     _TMR0IF         set	32658
  1388   000FD6                     _TMR0           set	4054
  1389   000F89                     _LATAbits       set	3977
  1390   000F96                     _TRISE          set	3990
  1391   000F92                     _TRISA          set	3986
  1392   000FAE                     _RCREG          set	4014
  1393   000FAD                     _TXREG          set	4013
  1394   000F9E                     _PIR1bits       set	3998
  1395   000FB8                     _BAUDCON        set	4024
  1396   000FAF                     _SPBRG          set	4015
  1397   000FAB                     _RCSTA          set	4011
  1398   000FAC                     _TXSTA          set	4012
  1399   000F81                     _PORTBbits      set	3969
  1400   000F8A                     _LATBbits       set	3978
  1401   000F93                     _TRISBbits      set	3987
  1402   000F82                     _PORTCbits      set	3970
  1403   000F8B                     _LATCbits       set	3979
  1404   000F94                     _TRISCbits      set	3988
  1405   000F8C                     _LATD           set	3980
  1406   000F95                     _TRISD          set	3989
  1407   000F83                     _PORTD          set	3971
  1408   000FD5                     _T0CON          set	4053
  1409   000F8B                     _LATC           set	3979
  1410   000F96                     _TRISEbits      set	3990
  1411   000FC1                     _ADCON1         set	4033
  1412   000F8D                     _LATEbits       set	3981
  1413   000FF2                     _INTCONbits     set	4082
  1414   001ED1                     STR_20:
  1415   001ED1  45                 	db	69	;'E'
  1416   001ED2  52                 	db	82	;'R'
  1417   001ED3  52                 	db	82	;'R'
  1418   001ED4  4F                 	db	79	;'O'
  1419   001ED5  52                 	db	82	;'R'
  1420   001ED6  2E                 	db	46
  1421   001ED7  20                 	db	32
  1422   001ED8  56                 	db	86	;'V'
  1423   001ED9  61                 	db	97	;'a'
  1424   001EDA  6C                 	db	108	;'l'
  1425   001EDB  6F                 	db	111	;'o'
  1426   001EDC  72                 	db	114	;'r'
  1427   001EDD  20                 	db	32
  1428   001EDE  69                 	db	105	;'i'
  1429   001EDF  6E                 	db	110	;'n'
  1430   001EE0  74                 	db	116	;'t'
  1431   001EE1  72                 	db	114	;'r'
  1432   001EE2  6F                 	db	111	;'o'
  1433   001EE3  64                 	db	100	;'d'
  1434   001EE4  75                 	db	117	;'u'
  1435   001EE5  69                 	db	105	;'i'
  1436   001EE6  74                 	db	116	;'t'
  1437   001EE7  20                 	db	32
  1438   001EE8  65                 	db	101	;'e'
  1439   001EE9  72                 	db	114	;'r'
  1440   001EEA  72                 	db	114	;'r'
  1441   001EEB  6F                 	db	111	;'o'
  1442   001EEC  6E                 	db	110	;'n'
  1443   001EED  69                 	db	105	;'i'
  1444   001EEE  2E                 	db	46
  1445   001EEF  0D                 	db	13
  1446   001EF0  0A                 	db	10
  1447   001EF1  00                 	db	0
  1448   001EF2                     STR_7:
  1449   001EF2  09                 	db	9
  1450   001EF3  33                 	db	51	;'3'
  1451   001EF4  2E                 	db	46
  1452   001EF5  20                 	db	32
  1453   001EF6  4D                 	db	77	;'M'
  1454   001EF7  6F                 	db	111	;'o'
  1455   001EF8  64                 	db	100	;'d'
  1456   001EF9  69                 	db	105	;'i'
  1457   001EFA  66                 	db	102	;'f'
  1458   001EFB  69                 	db	105	;'i'
  1459   001EFC  63                 	db	99	;'c'
  1460   001EFD  61                 	db	97	;'a'
  1461   001EFE  72                 	db	114	;'r'
  1462   001EFF  20                 	db	32
  1463   001F00  68                 	db	104	;'h'
  1464   001F01  6F                 	db	111	;'o'
  1465   001F02  72                 	db	114	;'r'
  1466   001F03  61                 	db	97	;'a'
  1467   001F04  20                 	db	32
  1468   001F05  64                 	db	100	;'d'
  1469   001F06  65                 	db	101	;'e'
  1470   001F07  6C                 	db	108	;'l'
  1471   001F08  20                 	db	32
  1472   001F09  73                 	db	115	;'s'
  1473   001F0A  69                 	db	105	;'i'
  1474   001F0B  73                 	db	115	;'s'
  1475   001F0C  74                 	db	116	;'t'
  1476   001F0D  65                 	db	101	;'e'
  1477   001F0E  6D                 	db	109	;'m'
  1478   001F0F  61                 	db	97	;'a'
  1479   001F10  0D                 	db	13
  1480   001F11  0A                 	db	10
  1481   001F12  00                 	db	0
  1482   001F13                     STR_21:
  1483   001F13  0D                 	db	13
  1484   001F14  0A                 	db	10
  1485   001F15  48                 	db	72	;'H'
  1486   001F16  6F                 	db	111	;'o'
  1487   001F17  72                 	db	114	;'r'
  1488   001F18  61                 	db	97	;'a'
  1489   001F19  20                 	db	32
  1490   001F1A  69                 	db	105	;'i'
  1491   001F1B  6E                 	db	110	;'n'
  1492   001F1C  74                 	db	116	;'t'
  1493   001F1D  72                 	db	114	;'r'
  1494   001F1E  6F                 	db	111	;'o'
  1495   001F1F  64                 	db	100	;'d'
  1496   001F20  75                 	db	117	;'u'
  1497   001F21  69                 	db	105	;'i'
  1498   001F22  64                 	db	100	;'d'
  1499   001F23  61                 	db	97	;'a'
  1500   001F24  20                 	db	32
  1501   001F25  63                 	db	99	;'c'
  1502   001F26  6F                 	db	111	;'o'
  1503   001F27  72                 	db	114	;'r'
  1504   001F28  72                 	db	114	;'r'
  1505   001F29  65                 	db	101	;'e'
  1506   001F2A  63                 	db	99	;'c'
  1507   001F2B  74                 	db	116	;'t'
  1508   001F2C  61                 	db	97	;'a'
  1509   001F2D  6D                 	db	109	;'m'
  1510   001F2E  65                 	db	101	;'e'
  1511   001F2F  6E                 	db	110	;'n'
  1512   001F30  74                 	db	116	;'t'
  1513   001F31  0D                 	db	13
  1514   001F32  0A                 	db	10
  1515   001F33  00                 	db	0
  1516   001F34                     STR_19:
  1517   001F34  49                 	db	73	;'I'
  1518   001F35  6E                 	db	110	;'n'
  1519   001F36  74                 	db	116	;'t'
  1520   001F37  72                 	db	114	;'r'
  1521   001F38  6F                 	db	111	;'o'
  1522   001F39  64                 	db	100	;'d'
  1523   001F3A  75                 	db	117	;'u'
  1524   001F3B  63                 	db	99	;'c'
  1525   001F3C  65                 	db	101	;'e'
  1526   001F3D  20                 	db	32
  1527   001F3E  6C                 	db	108	;'l'
  1528   001F3F  61                 	db	97	;'a'
  1529   001F40  20                 	db	32
  1530   001F41  68                 	db	104	;'h'
  1531   001F42  6F                 	db	111	;'o'
  1532   001F43  72                 	db	114	;'r'
  1533   001F44  61                 	db	97	;'a'
  1534   001F45  20                 	db	32
  1535   001F46  61                 	db	97	;'a'
  1536   001F47  63                 	db	99	;'c'
  1537   001F48  74                 	db	116	;'t'
  1538   001F49  75                 	db	117	;'u'
  1539   001F4A  61                 	db	97	;'a'
  1540   001F4B  6C                 	db	108	;'l'
  1541   001F4C  28                 	db	40
  1542   001F4D  48                 	db	72	;'H'
  1543   001F4E  48                 	db	72	;'H'
  1544   001F4F  4D                 	db	77	;'M'
  1545   001F50  4D                 	db	77	;'M'
  1546   001F51  29                 	db	41
  1547   001F52  3A                 	db	58	;':'
  1548   001F53  20                 	db	32
  1549   001F54  00                 	db	0
  1550   001F55                     STR_6:
  1551   001F55  09                 	db	9
  1552   001F56  32                 	db	50	;'2'
  1553   001F57  2E                 	db	46
  1554   001F58  20                 	db	32
  1555   001F59  4D                 	db	77	;'M'
  1556   001F5A  6F                 	db	111	;'o'
  1557   001F5B  73                 	db	115	;'s'
  1558   001F5C  74                 	db	116	;'t'
  1559   001F5D  72                 	db	114	;'r'
  1560   001F5E  61                 	db	97	;'a'
  1561   001F5F  72                 	db	114	;'r'
  1562   001F60  20                 	db	32
  1563   001F61  63                 	db	99	;'c'
  1564   001F62  6F                 	db	111	;'o'
  1565   001F63  6E                 	db	110	;'n'
  1566   001F64  66                 	db	102	;'f'
  1567   001F65  69                 	db	105	;'i'
  1568   001F66  67                 	db	103	;'g'
  1569   001F67  75                 	db	117	;'u'
  1570   001F68  72                 	db	114	;'r'
  1571   001F69  61                 	db	97	;'a'
  1572   001F6A  63                 	db	99	;'c'
  1573   001F6B  69                 	db	105	;'i'
  1574   001F6C  6F                 	db	111	;'o'
  1575   001F6D  6E                 	db	110	;'n'
  1576   001F6E  73                 	db	115	;'s'
  1577   001F6F  0D                 	db	13
  1578   001F70  0A                 	db	10
  1579   001F71  00                 	db	0
  1580   001F72                     STR_5:
  1581   001F72  09                 	db	9
  1582   001F73  31                 	db	49	;'1'
  1583   001F74  2E                 	db	46
  1584   001F75  20                 	db	32
  1585   001F76  51                 	db	81	;'Q'
  1586   001F77  75                 	db	117	;'u'
  1587   001F78  69                 	db	105	;'i'
  1588   001F79  20                 	db	32
  1589   001F7A  68                 	db	104	;'h'
  1590   001F7B  69                 	db	105	;'i'
  1591   001F7C  20                 	db	32
  1592   001F7D  68                 	db	104	;'h'
  1593   001F7E  61                 	db	97	;'a'
  1594   001F7F  20                 	db	32
  1595   001F80  61                 	db	97	;'a'
  1596   001F81  20                 	db	32
  1597   001F82  6C                 	db	108	;'l'
  1598   001F83  61                 	db	97	;'a'
  1599   001F84  20                 	db	32
  1600   001F85  73                 	db	115	;'s'
  1601   001F86  61                 	db	97	;'a'
  1602   001F87  6C                 	db	108	;'l'
  1603   001F88  61                 	db	97	;'a'
  1604   001F89  3F                 	db	63	;'?'
  1605   001F8A  0D                 	db	13
  1606   001F8B  0A                 	db	10
  1607   001F8C  00                 	db	0
  1608   001F8D                     STR_26:
  1609   001F8D  54                 	db	84	;'T'
  1610   001F8E  61                 	db	97	;'a'
  1611   001F8F  72                 	db	114	;'r'
  1612   001F90  67                 	db	103	;'g'
  1613   001F91  65                 	db	101	;'e'
  1614   001F92  74                 	db	116	;'t'
  1615   001F93  61                 	db	97	;'a'
  1616   001F94  20                 	db	32
  1617   001F95  64                 	db	100	;'d'
  1618   001F96  65                 	db	101	;'e'
  1619   001F97  74                 	db	116	;'t'
  1620   001F98  65                 	db	101	;'e'
  1621   001F99  63                 	db	99	;'c'
  1622   001F9A  74                 	db	116	;'t'
  1623   001F9B  61                 	db	97	;'a'
  1624   001F9C  64                 	db	100	;'d'
  1625   001F9D  61                 	db	97	;'a'
  1626   001F9E  21                 	db	33
  1627   001F9F  0D                 	db	13
  1628   001FA0  0A                 	db	10
  1629   001FA1  09                 	db	9
  1630   001FA2  00                 	db	0
  1631   001FA3                     STR_4:
  1632   001FA3  54                 	db	84	;'T'
  1633   001FA4  72                 	db	114	;'r'
  1634   001FA5  69                 	db	105	;'i'
  1635   001FA6  61                 	db	97	;'a'
  1636   001FA7  20                 	db	32
  1637   001FA8  75                 	db	117	;'u'
  1638   001FA9  6E                 	db	110	;'n'
  1639   001FAA  61                 	db	97	;'a'
  1640   001FAB  20                 	db	32
  1641   001FAC  6F                 	db	111	;'o'
  1642   001FAD  70                 	db	112	;'p'
  1643   001FAE  63                 	db	99	;'c'
  1644   001FAF  69                 	db	105	;'i'
  1645   001FB0  C3                 	db	-61
  1646   001FB1  B3                 	db	-77
  1647   001FB2  3A                 	db	58	;':'
  1648   001FB3  0D                 	db	13
  1649   001FB4  0A                 	db	10
  1650   001FB5  00                 	db	0
  1651   001FB6                     STR_1:
  1652   001FB6  2D                 	db	45
  1653   001FB7  2D                 	db	45
  1654   001FB8  2D                 	db	45
  1655   001FB9  2D                 	db	45
  1656   001FBA  2D                 	db	45
  1657   001FBB  2D                 	db	45
  1658   001FBC  2D                 	db	45
  1659   001FBD  2D                 	db	45
  1660   001FBE  2D                 	db	45
  1661   001FBF  2D                 	db	45
  1662   001FC0  2D                 	db	45
  1663   001FC1  2D                 	db	45
  1664   001FC2  2D                 	db	45
  1665   001FC3  2D                 	db	45
  1666   001FC4  2D                 	db	45
  1667   001FC5  0D                 	db	13
  1668   001FC6  0A                 	db	10
  1669   001FC7  00                 	db	0
  1670   001FC8                     STR_2:
  1671   001FC8  4D                 	db	77	;'M'
  1672   001FC9  65                 	db	101	;'e'
  1673   001FCA  6E                 	db	110	;'n'
  1674   001FCB  C3                 	db	-61
  1675   001FCC  BA                 	db	-70
  1676   001FCD  20                 	db	32
  1677   001FCE  70                 	db	112	;'p'
  1678   001FCF  72                 	db	114	;'r'
  1679   001FD0  69                 	db	105	;'i'
  1680   001FD1  6E                 	db	110	;'n'
  1681   001FD2  63                 	db	99	;'c'
  1682   001FD3  69                 	db	105	;'i'
  1683   001FD4  70                 	db	112	;'p'
  1684   001FD5  61                 	db	97	;'a'
  1685   001FD6  6C                 	db	108	;'l'
  1686   001FD7  0D                 	db	13
  1687   001FD8  0A                 	db	10
  1688   001FD9  00                 	db	0
  1689   001FDA                     STR_23:
  1690   001FDA  20                 	db	32
  1691   001FDB  43                 	db	67	;'C'
  1692   001FDC  6F                 	db	111	;'o'
  1693   001FDD  6E                 	db	110	;'n'
  1694   001FDE  66                 	db	102	;'f'
  1695   001FDF  69                 	db	105	;'i'
  1696   001FE0  67                 	db	103	;'g'
  1697   001FE1  3A                 	db	58	;':'
  1698   001FE2  20                 	db	32
  1699   001FE3  00                 	db	0
  1700   001FE4                     STR_8:
  1701   001FE4  4F                 	db	79	;'O'
  1702   001FE5  70                 	db	112	;'p'
  1703   001FE6  63                 	db	99	;'c'
  1704   001FE7  69                 	db	105	;'i'
  1705   001FE8  C3                 	db	-61
  1706   001FE9  B3                 	db	-77
  1707   001FEA  3A                 	db	58	;':'
  1708   001FEB  20                 	db	32
  1709   001FEC  00                 	db	0
  1710   001FED                     STR_22:
  1711   001FED  55                 	db	85	;'U'
  1712   001FEE  73                 	db	115	;'s'
  1713   001FEF  65                 	db	101	;'e'
  1714   001FF0  72                 	db	114	;'r'
  1715   001FF1  20                 	db	32
  1716   001FF2  00                 	db	0
  1717   001FF3                     STR_9:
  1718   001FF3  55                 	db	85	;'U'
  1719   001FF4  49                 	db	73	;'I'
  1720   001FF5  44                 	db	68	;'D'
  1721   001FF6  3A                 	db	58	;':'
  1722   001FF7  20                 	db	32
  1723   001FF8  00                 	db	0
  1724   001FF9                     STR_13:
  1725   001FF9  20                 	db	32
  1726   001FFA  2D                 	db	45
  1727   001FFB  20                 	db	32
  1728   001FFC  00                 	db	0
  1729   001FFD                     STR_10:
  1730   001FFD  2D                 	db	45
  1731   001FFE  00                 	db	0
  1732   001FEA                     STR_12          equ	STR_8+6
  1733   001FFB                     STR_24          equ	STR_13+2
  1734   001FB6                     STR_3           equ	STR_1
  1735   001FC5                     STR_11          equ	STR_1+15
  1736   001FC5                     STR_14          equ	STR_1+15
  1737   001FC5                     STR_15          equ	STR_1+15
  1738   001FC5                     STR_16          equ	STR_1+15
  1739   001FC5                     STR_17          equ	STR_1+15
  1740   001FC5                     STR_18          equ	STR_1+15
  1741   001FC5                     STR_25          equ	STR_1+15
  1742   001FA1                     STR_27          equ	STR_26+20
  1743   001FFF  00                 	db	0	; dummy byte at the end
  1744   001EC4                     __smallconst    set	__pmediumconst
  1745   001EC4                     __mediumconst   set	__pmediumconst
  1746   000002                     __activetblptr  equ	2
  1747                           
  1748                           ; #config settings
  1749                           
  1750                           	psect	cinit
  1751   000F32                     __pcinit:
  1752                           	callstack 0
  1753   000F32                     start_initialization:
  1754                           	callstack 0
  1755   000F32                     __initialization:
  1756                           	callstack 0
  1757                           
  1758                           ; Initialize objects allocated to BANK0 (88 bytes)
  1759                           ; load TBLPTR registers with __pidataBANK0
  1760   000F32  0EE6               	movlw	low __pidataBANK0
  1761   000F34  6EF6               	movwf	tblptrl,c
  1762   000F36  0E0F               	movlw	high __pidataBANK0
  1763   000F38  6EF7               	movwf	tblptrh,c
  1764   000F3A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1765   000F3C  6EF8               	movwf	tblptru,c
  1766   000F3E  EE00  F080         	lfsr	0,__pdataBANK0
  1767   000F42  EE10 F058          	lfsr	1,88
  1768   000F46                     copy_data0:
  1769   000F46  0009               	tblrd		*+
  1770   000F48  CFF5 FFEE          	movff	tablat,postinc0
  1771   000F4C  50E5               	movf	postdec1,w,c
  1772   000F4E  50E1               	movf	fsr1l,w,c
  1773   000F50  E1FA               	bnz	copy_data0
  1774                           
  1775                           ; Initialize objects allocated to COMRAM (8 bytes)
  1776                           ; load TBLPTR registers with __pidataCOMRAM
  1777   000F52  0EFC               	movlw	low __pidataCOMRAM
  1778   000F54  6EF6               	movwf	tblptrl,c
  1779   000F56  0E14               	movlw	high __pidataCOMRAM
  1780   000F58  6EF7               	movwf	tblptrh,c
  1781   000F5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1782   000F5C  6EF8               	movwf	tblptru,c
  1783   000F5E  EE00  F067         	lfsr	0,__pdataCOMRAM
  1784   000F62  EE10 F008          	lfsr	1,8
  1785   000F66                     copy_data1:
  1786   000F66  0009               	tblrd		*+
  1787   000F68  CFF5 FFEE          	movff	tablat,postinc0
  1788   000F6C  50E5               	movf	postdec1,w,c
  1789   000F6E  50E1               	movf	fsr1l,w,c
  1790   000F70  E1FA               	bnz	copy_data1
  1791                           
  1792                           ; Clear objects allocated to COMRAM (78 bytes)
  1793   000F72  EE00  F001         	lfsr	0,__pbssCOMRAM
  1794   000F76  0E4E               	movlw	78
  1795   000F78                     clear_0:
  1796   000F78  6AEE               	clrf	postinc0,c
  1797   000F7A  06E8               	decf	wreg,f,c
  1798   000F7C  E1FD               	bnz	clear_0
  1799   000F7E                     end_of_initialization:
  1800                           	callstack 0
  1801   000F7E                     __end_of__initialization:
  1802                           	callstack 0
  1803   000F7E  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1804   000F80  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1805   000F82  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1806   000F84  6EF8               	movwf	tblptru,c
  1807   000F86  0100               	movlb	0
  1808   000F88  EF19  F009         	goto	_main	;jump to C main() function
  1809                           
  1810                           	psect	bssCOMRAM
  1811   000001                     __pbssCOMRAM:
  1812                           	callstack 0
  1813   000001                     _Timers:
  1814                           	callstack 0
  1815   000001                     	ds	20
  1816   000015                     motor_RFID@UID:
  1817                           	callstack 0
  1818   000015                     	ds	6
  1819   00001B                     _Tics:
  1820                           	callstack 0
  1821   00001B                     	ds	4
  1822   00001F                     _pointer:
  1823                           	callstack 0
  1824   00001F                     	ds	2
  1825   000021                     _index:
  1826                           	callstack 0
  1827   000021                     	ds	2
  1828   000023                     	ds	2
  1829   000025                     setLed@userIndex:
  1830                           	callstack 0
  1831   000025                     	ds	1
  1832   000026                     setLed@ledIndex:
  1833                           	callstack 0
  1834   000026                     	ds	1
  1835   000027                     setLed@modeLED:
  1836                           	callstack 0
  1837   000027                     	ds	1
  1838   000028                     motor_datos@state:
  1839                           	callstack 0
  1840   000028                     	ds	1
  1841   000029                     _new_user:
  1842                           	callstack 0
  1843   000029                     	ds	1
  1844   00002A                     _new_configuration:
  1845                           	callstack 0
  1846   00002A                     	ds	1
  1847   00002B                     motorTerminal@index:
  1848                           	callstack 0
  1849   00002B                     	ds	1
  1850   00002C                     motorTerminal@state:
  1851                           	callstack 0
  1852   00002C                     	ds	1
  1853   00002D                     _hashtag_pressed:
  1854                           	callstack 0
  1855   00002D                     	ds	1
  1856   00002E                     _ColumnAct:
  1857                           	callstack 0
  1858   00002E                     	ds	1
  1859   00002F                     _RowAct:
  1860                           	callstack 0
  1861   00002F                     	ds	1
  1862   000030                     _Columns:
  1863                           	callstack 0
  1864   000030                     	ds	1
  1865   000031                     _Rows:
  1866                           	callstack 0
  1867   000031                     	ds	1
  1868   000032                     motor_RFID@tempRegValue:
  1869                           	callstack 0
  1870   000032                     	ds	1
  1871   000033                     motor_RFID@allZero:
  1872                           	callstack 0
  1873   000033                     	ds	1
  1874   000034                     motor_RFID@checksum:
  1875                           	callstack 0
  1876   000034                     	ds	1
  1877   000035                     motor_RFID@TagType:
  1878                           	callstack 0
  1879   000035                     	ds	1
  1880   000036                     	ds	1
  1881   000037                     motor_RFID@i:
  1882                           	callstack 0
  1883   000037                     	ds	1
  1884   000038                     motor_RFID@n:
  1885                           	callstack 0
  1886   000038                     	ds	1
  1887   000039                     motor_RFID@waitIRq:
  1888                           	callstack 0
  1889   000039                     	ds	1
  1890   00003A                     motor_RFID@irqEn:
  1891                           	callstack 0
  1892   00003A                     	ds	1
  1893   00003B                     motor_RFID@substate:
  1894                           	callstack 0
  1895   00003B                     	ds	1
  1896   00003C                     motor_RFID@state:
  1897                           	callstack 0
  1898   00003C                     	ds	1
  1899   00003D                     _state:
  1900                           	callstack 0
  1901   00003D                     	ds	1
  1902   00003E                     _tecla:
  1903                           	callstack 0
  1904   00003E                     	ds	1
  1905   00003F                     _Columnas:
  1906                           	callstack 0
  1907   00003F                     	ds	1
  1908   000040                     _Filas:
  1909                           	callstack 0
  1910   000040                     	ds	1
  1911   000041                     _ActualLeds:
  1912                           	callstack 0
  1913   000041                     	ds	6
  1914   000047                     _currentUser:
  1915                           	callstack 0
  1916   000047                     	ds	5
  1917   00004C                     _timer@TAD_LEDS$F1049:
  1918                           	callstack 0
  1919   00004C                     	ds	1
  1920   00004D                     _Timer:
  1921                           	callstack 0
  1922   00004D                     	ds	1
  1923   00004E                     _timer:
  1924                           	callstack 0
  1925   00004E                     	ds	1
  1926                           
  1927                           	psect	dataCOMRAM
  1928   000067                     __pdataCOMRAM:
  1929                           	callstack 0
  1930   000067                     _currentTime:
  1931                           	callstack 0
  1932   000067                     	ds	4
  1933   00006B                     motorTerminal@hour:
  1934                           	callstack 0
  1935   00006B                     	ds	4
  1936                           
  1937                           	psect	dataBANK0
  1938   000080                     __pdataBANK0:
  1939                           	callstack 0
  1940   000080                     _userUIDs:
  1941                           	callstack 0
  1942   000080                     	ds	64
  1943   0000C0                     _configurations:
  1944                           	callstack 0
  1945   0000C0                     	ds	24
  1946                           
  1947                           	psect	cstackCOMRAM
  1948   00004F                     __pcstackCOMRAM:
  1949                           	callstack 0
  1950   00004F                     ??_LowRSI:
  1951                           
  1952                           ; 1 bytes @ 0x0
  1953   00004F                     	ds	1
  1954   000050                     ?_Terminal_TXAvailable:
  1955                           	callstack 0
  1956   000050                     ?_TI_GetTics:
  1957                           	callstack 0
  1958   000050                     TI_Init@counter:
  1959                           	callstack 0
  1960   000050                     TI_NewTimer@TimerHandle:
  1961                           	callstack 0
  1962   000050                     TI_ResetTics@TimerHandle:
  1963                           	callstack 0
  1964   000050                     getActualLeds@leds:
  1965                           	callstack 0
  1966   000050                     saveHourToData@hour:
  1967                           	callstack 0
  1968   000050                     setLEDIntensity@ledIndex:
  1969                           	callstack 0
  1970   000050                     setLedActual@ledActual:
  1971                           	callstack 0
  1972   000050                     unsetLedActual@ledActual:
  1973                           	callstack 0
  1974   000050                     ??_GetTecla:
  1975   000050                     ??_delay_us:
  1976   000050                     ??_CantaPartAlta:
  1977   000050                     ??_CantaPartBaixa:
  1978   000050                     
  1979                           ; 1 bytes @ 0x1
  1980   000050                     	ds	1
  1981   000051                     CantaPartAlta@c:
  1982                           	callstack 0
  1983   000051                     CantaPartBaixa@c:
  1984                           	callstack 0
  1985   000051                     setLEDIntensity@intensity:
  1986                           	callstack 0
  1987   000051                     getActualLeds@i:
  1988                           	callstack 0
  1989   000051                     
  1990                           ; 1 bytes @ 0x2
  1991   000051                     	ds	1
  1992   000052                     TI_NewTimer@Comptador:
  1993                           	callstack 0
  1994   000052                     CantaIR@IR:
  1995                           	callstack 0
  1996   000052                     CantaData@Data:
  1997                           	callstack 0
  1998   000052                     setLEDIntensity@userIndex:
  1999                           	callstack 0
  2000   000052                     GetTecla@keymap:
  2001                           	callstack 0
  2002   000052                     ??_Terminal_TXAvailable:
  2003   000052                     
  2004                           ; 1 bytes @ 0x3
  2005   000052                     	ds	1
  2006   000053                     delay_us@howMany:
  2007                           	callstack 0
  2008   000053                     Terminal_SendChar@c:
  2009                           	callstack 0
  2010   000053                     setLed@tecla:
  2011                           	callstack 0
  2012   000053                     
  2013                           ; 1 bytes @ 0x4
  2014   000053                     	ds	1
  2015   000054                     delay_us@x:
  2016                           	callstack 0
  2017   000054                     Terminal_SendString@str:
  2018                           	callstack 0
  2019   000054                     ??_TI_GetTics:
  2020                           
  2021                           ; 1 bytes @ 0x5
  2022   000054                     	ds	1
  2023   000055                     ??_MFRC522_Rd:
  2024                           
  2025                           ; 1 bytes @ 0x6
  2026   000055                     	ds	1
  2027   000056                     MFRC522_Rd@Address:
  2028                           	callstack 0
  2029   000056                     printfUID@currentUser:
  2030                           	callstack 0
  2031   000056                     showAllConfigurations@j:
  2032                           	callstack 0
  2033   000056                     
  2034                           ; 1 bytes @ 0x7
  2035   000056                     	ds	1
  2036   000057                     MFRC522_Rd@ucAddr:
  2037                           	callstack 0
  2038   000057                     ??_printfUID:
  2039                           
  2040                           ; 1 bytes @ 0x8
  2041   000057                     	ds	1
  2042   000058                     MFRC522_Rd@ucResult:
  2043                           	callstack 0
  2044   000058                     _printfUID$918:
  2045                           	callstack 0
  2046   000058                     showAllConfigurations@i:
  2047                           	callstack 0
  2048   000058                     TI_GetTics@CopiaTicsActual:
  2049                           	callstack 0
  2050                           
  2051                           ; 4 bytes @ 0x9
  2052   000058                     	ds	1
  2053   000059                     MFRC522_Rd@i:
  2054                           	callstack 0
  2055                           
  2056                           ; 1 bytes @ 0xA
  2057   000059                     	ds	1
  2058   00005A                     MFRC522_Wr@value:
  2059                           	callstack 0
  2060   00005A                     _printfUID$920:
  2061                           	callstack 0
  2062                           
  2063                           ; 2 bytes @ 0xB
  2064   00005A                     	ds	1
  2065   00005B                     ??_MFRC522_Wr:
  2066                           
  2067                           ; 1 bytes @ 0xC
  2068   00005B                     	ds	1
  2069   00005C                     TI_GetTics@TimerHandle:
  2070                           	callstack 0
  2071   00005C                     MFRC522_Wr@Address:
  2072                           	callstack 0
  2073   00005C                     printfUID@high:
  2074                           	callstack 0
  2075                           
  2076                           ; 1 bytes @ 0xD
  2077   00005C                     	ds	1
  2078   00005D                     MFRC522_Wr@ucAddr:
  2079                           	callstack 0
  2080   00005D                     WaitForBusy@Busy:
  2081                           	callstack 0
  2082   00005D                     printfUID@low:
  2083                           	callstack 0
  2084   00005D                     ??_motor_LEDs:
  2085   00005D                     
  2086                           ; 1 bytes @ 0xE
  2087   00005D                     	ds	1
  2088   00005E                     GetTecla@columna:
  2089                           	callstack 0
  2090   00005E                     MFRC522_Wr@i:
  2091                           	callstack 0
  2092   00005E                     LcGotoXY@Row:
  2093                           	callstack 0
  2094   00005E                     printfUID@i:
  2095                           	callstack 0
  2096                           
  2097                           ; 2 bytes @ 0xF
  2098   00005E                     	ds	1
  2099   00005F                     GetTecla@fila:
  2100                           	callstack 0
  2101   00005F                     MFRC522_Clear_Bit@mask:
  2102                           	callstack 0
  2103   00005F                     MFRC522_Set_Bit@mask:
  2104                           	callstack 0
  2105   00005F                     ??_LcGotoXY:
  2106                           
  2107                           ; 1 bytes @ 0x10
  2108   00005F                     	ds	1
  2109   000060                     MFRC522_Set_Bit@addr:
  2110                           	callstack 0
  2111   000060                     motorTerminal@currentUser:
  2112                           	callstack 0
  2113   000060                     ??_MFRC522_Clear_Bit:
  2114   000060                     
  2115                           ; 1 bytes @ 0x11
  2116   000060                     	ds	1
  2117   000061                     MFRC522_Clear_Bit@addr:
  2118                           	callstack 0
  2119   000061                     _LcGotoXY$797:
  2120                           	callstack 0
  2121   000061                     
  2122                           ; 1 bytes @ 0x12
  2123   000061                     	ds	1
  2124   000062                     motor_LEDs@i:
  2125                           	callstack 0
  2126   000062                     
  2127                           ; 1 bytes @ 0x13
  2128   000062                     	ds	1
  2129   000063                     LcGotoXY@Fisics:
  2130                           	callstack 0
  2131                           
  2132                           ; 2 bytes @ 0x14
  2133   000063                     	ds	2
  2134   000065                     LcGotoXY@Column:
  2135                           	callstack 0
  2136                           
  2137                           ; 1 bytes @ 0x16
  2138   000065                     	ds	1
  2139   000066                     LcPutChar@c:
  2140                           	callstack 0
  2141   000066                     
  2142                           ; 1 bytes @ 0x17
  2143   000066                     	ds	1
  2144   000067                     
  2145                           ; 1 bytes @ 0x18
  2146 ;;
  2147 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2148 ;;
  2149 ;; *************** function _main *****************
  2150 ;; Defined at:
  2151 ;;		line 38 in file "main.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1
  2165 ;;      Params:         0       0       0
  2166 ;;      Locals:         0       0       0
  2167 ;;      Temps:          0       0       0
  2168 ;;      Totals:         0       0       0
  2169 ;;Total ram usage:        0 bytes
  2170 ;; Hardware stack levels required when called: 9
  2171 ;; This function calls:
  2172 ;;		_TI_Init
  2173 ;;		_Terminal_Init
  2174 ;;		_initLeds
  2175 ;;		_initPorts
  2176 ;;		_initRFID
  2177 ;;		_initTeclado
  2178 ;;		_motorTeclado
  2179 ;;		_motorTerminal
  2180 ;;		_motor_LEDs
  2181 ;;		_motor_datos
  2182 ;; This function is called by:
  2183 ;;		Startup code after reset
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text0
  2188   001232                     __ptext0:
  2189                           	callstack 0
  2190   001232                     _main:
  2191                           	callstack 22
  2192   001232                     
  2193                           ;main.c: 39:  TRISEbits.TRISE2 = 0;
  2194   001232  EC85  F009         	call	_TI_Init	;wreg free
  2195                           
  2196                           ;main.c: 40: }
  2197   001236  EC2E  F00A         	call	_initTeclado	;wreg free
  2198   00123A                     
  2199                           ;main.c: 41: 
  2200   00123A  EC79  F00A         	call	_initRFID	;wreg free
  2201   00123E                     
  2202                           ;main.c: 42: 
  2203   00123E  EC58  F00A         	call	_Terminal_Init	;wreg free
  2204   001242                     
  2205                           ;main.c: 43: 
  2206   001242  EC86  F00A         	call	_initPorts	;wreg free
  2207   001246                     
  2208                           ;main.c: 44: void ProcessKey(unsigned char key) {
  2209   001246  EC60  F00A         	call	_initLeds	;wreg free
  2210   00124A                     
  2211                           ;main.c: 47:  LATC = key;
  2212   00124A  8EF2               	bsf	242,7,c	;volatile
  2213   00124C                     
  2214                           ;main.c: 48: }
  2215   00124C  9CF2               	bcf	242,6,c	;volatile
  2216   00124E                     l3453:
  2217   00124E  EC15  F000         	call	_motorTeclado	;wreg free
  2218   001252  ECF4  F001         	call	_motorTerminal	;wreg free
  2219   001256  ECF2  F004         	call	_motor_LEDs	;wreg free
  2220   00125A  ECB2  F002         	call	_motor_datos	;wreg free
  2221   00125E  748D               	btg	141,2,c	;volatile
  2222   001260  EF27  F009         	goto	l3453
  2223   001264  EF13  F000         	goto	start
  2224   001268                     __end_of_main:
  2225                           	callstack 0
  2226                           
  2227 ;; *************** function _motor_datos *****************
  2228 ;; Defined at:
  2229 ;;		line 107 in file "TAD_DATOS.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  temp_config     2    0        PTR unsigned char 
  2234 ;;  temp_user       2    0        PTR unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      void 
  2237 ;; Registers used:
  2238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1
  2244 ;;      Params:         0       0       0
  2245 ;;      Locals:         0       0       0
  2246 ;;      Temps:          0       0       0
  2247 ;;      Totals:         0       0       0
  2248 ;;Total ram usage:        0 bytes
  2249 ;; Hardware stack levels used: 1
  2250 ;; Hardware stack levels required when called: 7
  2251 ;; This function calls:
  2252 ;;		_LcPutChar
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text1
  2259   000564                     __ptext1:
  2260                           	callstack 0
  2261   000564                     _motor_datos:
  2262                           	callstack 23
  2263   000564                     
  2264                           ;TAD_DATOS.c: 108:  static char state = 0;;TAD_DATOS.c: 109:     unsigned char* temp_use
      +                          r;;TAD_DATOS.c: 110:     unsigned char* temp_config;;TAD_DATOS.c: 112:  switch(state) {
  2265   000564  EF2C  F003         	goto	l3407
  2266   000568                     l3363:
  2267                           
  2268                           ;TAD_DATOS.c: 114:    if (new_configuration == 1) {
  2269   000568  042A               	decf	_new_configuration^0,w,c
  2270   00056A  A4D8               	btfss	status,2,c
  2271   00056C  EFBA  F002         	goto	u2641
  2272   000570  EFBC  F002         	goto	u2640
  2273   000574                     u2641:
  2274   000574  EFBF  F002         	goto	l3369
  2275   000578                     u2640:
  2276   000578                     
  2277                           ;TAD_DATOS.c: 115:     new_configuration = 0;
  2278   000578  6A2A               	clrf	_new_configuration^0,c
  2279   00057A                     
  2280                           ;TAD_DATOS.c: 116:     state = 2;
  2281   00057A  0E02               	movlw	2
  2282   00057C  6E28               	movwf	motor_datos@state^0,c
  2283   00057E                     l3369:
  2284                           
  2285                           ;TAD_DATOS.c: 118:             if(new_user == 1) {
  2286   00057E  0429               	decf	_new_user^0,w,c
  2287   000580  A4D8               	btfss	status,2,c
  2288   000582  EFC5  F002         	goto	u2651
  2289   000586  EFC7  F002         	goto	u2650
  2290   00058A                     u2651:
  2291   00058A  EF3F  F003         	goto	l649
  2292   00058E                     u2650:
  2293   00058E                     
  2294                           ;TAD_DATOS.c: 119:                 new_user = 0;
  2295   00058E  6A29               	clrf	_new_user^0,c
  2296   000590                     
  2297                           ;TAD_DATOS.c: 120:     state = 2;
  2298   000590  0E02               	movlw	2
  2299   000592  6E28               	movwf	motor_datos@state^0,c
  2300   000594  EF3F  F003         	goto	l649
  2301   000598                     l3375:
  2302                           
  2303                           ;TAD_DATOS.c: 125:    LcPutChar(' ');
  2304   000598  0E20               	movlw	32
  2305   00059A  EC2C  F004         	call	_LcPutChar
  2306   00059E                     
  2307                           ;TAD_DATOS.c: 126:    pointer = 0;
  2308   00059E  0E00               	movlw	0
  2309   0005A0  6E20               	movwf	(_pointer+1)^0,c
  2310   0005A2  0E00               	movlw	0
  2311   0005A4  6E1F               	movwf	_pointer^0,c
  2312   0005A6                     
  2313                           ;TAD_DATOS.c: 127:    state = 3;
  2314   0005A6  0E03               	movlw	3
  2315   0005A8  6E28               	movwf	motor_datos@state^0,c
  2316                           
  2317                           ;TAD_DATOS.c: 128:   break;
  2318   0005AA  EF3F  F003         	goto	l649
  2319   0005AE                     l3381:
  2320                           
  2321                           ;TAD_DATOS.c: 130:    if (pointer < 5) {
  2322   0005AE  BE20               	btfsc	(_pointer+1)^0,7,c
  2323   0005B0  EFE5  F002         	goto	u2660
  2324   0005B4  5020               	movf	(_pointer+1)^0,w,c
  2325   0005B6  E107               	bnz	u2661
  2326   0005B8  0E05               	movlw	5
  2327   0005BA  5C1F               	subwf	_pointer^0,w,c
  2328   0005BC  B0D8               	btfsc	status,0,c
  2329   0005BE  EFE3  F002         	goto	u2661
  2330   0005C2  EFE5  F002         	goto	u2660
  2331   0005C6                     u2661:
  2332   0005C6  EFF0  F002         	goto	l3387
  2333   0005CA                     u2660:
  2334   0005CA                     
  2335                           ;TAD_DATOS.c: 131:     LcPutChar(currentTime[pointer]);
  2336   0005CA  501F               	movf	_pointer^0,w,c
  2337   0005CC  0F67               	addlw	low _currentTime
  2338   0005CE  6ED9               	movwf	fsr2l,c
  2339   0005D0  6ADA               	clrf	fsr2h,c
  2340   0005D2  50DF               	movf	indf2,w,c
  2341   0005D4  EC2C  F004         	call	_LcPutChar
  2342   0005D8                     l3385:
  2343                           
  2344                           ;TAD_DATOS.c: 132:     pointer++;
  2345   0005D8  4A1F               	infsnz	_pointer^0,f,c
  2346   0005DA  2A20               	incf	(_pointer+1)^0,f,c
  2347                           
  2348                           ;TAD_DATOS.c: 133:    }
  2349   0005DC  EF3F  F003         	goto	l649
  2350   0005E0                     l3387:
  2351   0005E0  0E05               	movlw	5
  2352   0005E2  181F               	xorwf	_pointer^0,w,c
  2353   0005E4  1020               	iorwf	(_pointer+1)^0,w,c
  2354   0005E6  A4D8               	btfss	status,2,c
  2355   0005E8  EFF8  F002         	goto	u2671
  2356   0005EC  EFFA  F002         	goto	u2670
  2357   0005F0                     u2671:
  2358   0005F0  EF3F  F003         	goto	l649
  2359   0005F4                     u2670:
  2360   0005F4                     
  2361                           ;TAD_DATOS.c: 135:     pointer = 0;
  2362   0005F4  0E00               	movlw	0
  2363   0005F6  6E20               	movwf	(_pointer+1)^0,c
  2364   0005F8  0E00               	movlw	0
  2365   0005FA  6E1F               	movwf	_pointer^0,c
  2366   0005FC                     
  2367                           ;TAD_DATOS.c: 136:     LcPutChar(' ');
  2368   0005FC  0E20               	movlw	32
  2369   0005FE  EC2C  F004         	call	_LcPutChar
  2370   000602                     
  2371                           ;TAD_DATOS.c: 137:     state = 4;
  2372   000602  0E04               	movlw	4
  2373   000604  6E28               	movwf	motor_datos@state^0,c
  2374   000606  EF3F  F003         	goto	l649
  2375   00060A                     l3395:
  2376                           
  2377                           ;TAD_DATOS.c: 141:    if (pointer < 6) {
  2378   00060A  BE20               	btfsc	(_pointer+1)^0,7,c
  2379   00060C  EF13  F003         	goto	u2680
  2380   000610  5020               	movf	(_pointer+1)^0,w,c
  2381   000612  E107               	bnz	u2681
  2382   000614  0E06               	movlw	6
  2383   000616  5C1F               	subwf	_pointer^0,w,c
  2384   000618  B0D8               	btfsc	status,0,c
  2385   00061A  EF11  F003         	goto	u2681
  2386   00061E  EF13  F003         	goto	u2680
  2387   000622                     u2681:
  2388   000622  EF25  F003         	goto	l3401
  2389   000626                     u2680:
  2390   000626                     
  2391                           ;TAD_DATOS.c: 142:     LcPutChar((char)(pointer + 1));
  2392   000626  281F               	incf	_pointer^0,w,c
  2393   000628  EC2C  F004         	call	_LcPutChar
  2394                           
  2395                           ;TAD_DATOS.c: 143:     LcPutChar('-');
  2396   00062C  0E2D               	movlw	45
  2397   00062E  EC2C  F004         	call	_LcPutChar
  2398                           
  2399                           ;TAD_DATOS.c: 144:     LcPutChar(configurations[index][pointer]);
  2400   000632  501F               	movf	_pointer^0,w,c
  2401   000634  0FC0               	addlw	low _configurations
  2402   000636  6ED9               	movwf	fsr2l,c
  2403   000638  6ADA               	clrf	fsr2h,c
  2404   00063A  50DF               	movf	indf2,w,c
  2405   00063C  EC2C  F004         	call	_LcPutChar
  2406                           
  2407                           ;TAD_DATOS.c: 145:     LcPutChar(' ');
  2408   000640  0E20               	movlw	32
  2409   000642  EC2C  F004         	call	_LcPutChar
  2410   000646  EFEC  F002         	goto	l3385
  2411   00064A                     l3401:
  2412                           
  2413                           ;TAD_DATOS.c: 148:     pointer = 0;
  2414   00064A  0E00               	movlw	0
  2415   00064C  6E20               	movwf	(_pointer+1)^0,c
  2416   00064E  0E00               	movlw	0
  2417   000650  6E1F               	movwf	_pointer^0,c
  2418   000652                     
  2419                           ;TAD_DATOS.c: 149:     state = 0;
  2420   000652  6A28               	clrf	motor_datos@state^0,c
  2421   000654  EF3F  F003         	goto	l649
  2422   000658                     l3407:
  2423   000658  5028               	movf	motor_datos@state^0,w,c
  2424                           
  2425                           ; Switch size 1, requested type "simple"
  2426                           ; Number of cases is 4, Range of values is 0 to 4
  2427                           ; switch strategies available:
  2428                           ; Name         Instructions Cycles
  2429                           ; simple_byte           13     7 (average)
  2430                           ;	Chosen strategy is simple_byte
  2431   00065A  0A00               	xorlw	0	; case 0
  2432   00065C  B4D8               	btfsc	status,2,c
  2433   00065E  EFB4  F002         	goto	l3363
  2434   000662  0A02               	xorlw	2	; case 2
  2435   000664  B4D8               	btfsc	status,2,c
  2436   000666  EFCC  F002         	goto	l3375
  2437   00066A  0A01               	xorlw	1	; case 3
  2438   00066C  B4D8               	btfsc	status,2,c
  2439   00066E  EFD7  F002         	goto	l3381
  2440   000672  0A07               	xorlw	7	; case 4
  2441   000674  B4D8               	btfsc	status,2,c
  2442   000676  EF05  F003         	goto	l3395
  2443   00067A  EF3F  F003         	goto	l649
  2444   00067E                     l649:
  2445   00067E  0012               	return		;funcret
  2446   000680                     __end_of_motor_datos:
  2447                           	callstack 0
  2448                           
  2449 ;; *************** function _LcPutChar *****************
  2450 ;; Defined at:
  2451 ;;		line 156 in file "TAD_DISPLAY.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  c               1    wreg     unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  c               1   23[COMRAM] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1
  2465 ;;      Params:         0       0       0
  2466 ;;      Locals:         1       0       0
  2467 ;;      Temps:          0       0       0
  2468 ;;      Totals:         1       0       0
  2469 ;;Total ram usage:        1 bytes
  2470 ;; Hardware stack levels used: 1
  2471 ;; Hardware stack levels required when called: 6
  2472 ;; This function calls:
  2473 ;;		_CantaData
  2474 ;;		_LcGotoXY
  2475 ;;		_WaitForBusy
  2476 ;; This function is called by:
  2477 ;;		_motor_datos
  2478 ;;		_LcPutString
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text2
  2483   000858                     __ptext2:
  2484                           	callstack 0
  2485   000858                     _LcPutChar:
  2486                           	callstack 23
  2487                           
  2488                           ;incstack = 0
  2489                           ;LcPutChar@c stored from wreg
  2490   000858  6E66               	movwf	LcPutChar@c^0,c
  2491   00085A                     
  2492                           ;TAD_DISPLAY.c: 166:  WaitForBusy(); CantaData(c);
  2493   00085A  EC69  F007         	call	_WaitForBusy	;wreg free
  2494   00085E  5066               	movf	LcPutChar@c^0,w,c
  2495   000860  ECB8  F009         	call	_CantaData
  2496   000864                     
  2497                           ;TAD_DISPLAY.c: 168:  ++ColumnAct;
  2498   000864  2A2E               	incf	_ColumnAct^0,f,c
  2499   000866                     
  2500                           ;TAD_DISPLAY.c: 169:  if (Rows == 3) {
  2501   000866  0E03               	movlw	3
  2502   000868  1831               	xorwf	_Rows^0,w,c
  2503   00086A  A4D8               	btfss	status,2,c
  2504   00086C  EF3A  F004         	goto	u2201
  2505   000870  EF3C  F004         	goto	u2200
  2506   000874                     u2201:
  2507   000874  EF56  F004         	goto	l3027
  2508   000878                     u2200:
  2509   000878                     
  2510                           ;TAD_DISPLAY.c: 170:   if (ColumnAct >= 20) {
  2511   000878  0E13               	movlw	19
  2512   00087A  642E               	cpfsgt	_ColumnAct^0,c
  2513   00087C  EF42  F004         	goto	u2211
  2514   000880  EF44  F004         	goto	u2210
  2515   000884                     u2211:
  2516   000884  EF8F  F004         	goto	l436
  2517   000888                     u2210:
  2518   000888                     
  2519                           ;TAD_DISPLAY.c: 171:    ColumnAct = 0;
  2520   000888  6A2E               	clrf	_ColumnAct^0,c
  2521   00088A                     
  2522                           ;TAD_DISPLAY.c: 172:    if (++RowAct >= 4) RowAct = 0;
  2523   00088A  2A2F               	incf	_RowAct^0,f,c
  2524   00088C  0E03               	movlw	3
  2525   00088E  642F               	cpfsgt	_RowAct^0,c
  2526   000890  EF4C  F004         	goto	u2221
  2527   000894  EF4E  F004         	goto	u2220
  2528   000898                     u2221:
  2529   000898  EF4F  F004         	goto	l3025
  2530   00089C                     u2220:
  2531   00089C  6A2F               	clrf	_RowAct^0,c
  2532   00089E                     l3025:
  2533                           
  2534                           ;TAD_DISPLAY.c: 173:    LcGotoXY(ColumnAct, RowAct);
  2535   00089E  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  2536   0008A2  502E               	movf	_ColumnAct^0,w,c
  2537   0008A4  ECB8  F003         	call	_LcGotoXY
  2538   0008A8  EF8F  F004         	goto	l436
  2539   0008AC                     l3027:
  2540                           
  2541                           ;TAD_DISPLAY.c: 176:  if (Rows == 2) {
  2542   0008AC  0E02               	movlw	2
  2543   0008AE  1831               	xorwf	_Rows^0,w,c
  2544   0008B0  A4D8               	btfss	status,2,c
  2545   0008B2  EF5D  F004         	goto	u2231
  2546   0008B6  EF5F  F004         	goto	u2230
  2547   0008BA                     u2231:
  2548   0008BA  EF79  F004         	goto	l3039
  2549   0008BE                     u2230:
  2550   0008BE                     
  2551                           ;TAD_DISPLAY.c: 177:   if (ColumnAct >= 40) {
  2552   0008BE  0E27               	movlw	39
  2553   0008C0  642E               	cpfsgt	_ColumnAct^0,c
  2554   0008C2  EF65  F004         	goto	u2241
  2555   0008C6  EF67  F004         	goto	u2240
  2556   0008CA                     u2241:
  2557   0008CA  EF8F  F004         	goto	l436
  2558   0008CE                     u2240:
  2559   0008CE                     
  2560                           ;TAD_DISPLAY.c: 178:    ColumnAct = 0;
  2561   0008CE  6A2E               	clrf	_ColumnAct^0,c
  2562   0008D0                     
  2563                           ;TAD_DISPLAY.c: 179:    if (++RowAct >= 2) RowAct = 0;
  2564   0008D0  2A2F               	incf	_RowAct^0,f,c
  2565   0008D2  0E01               	movlw	1
  2566   0008D4  642F               	cpfsgt	_RowAct^0,c
  2567   0008D6  EF6F  F004         	goto	u2251
  2568   0008DA  EF71  F004         	goto	u2250
  2569   0008DE                     u2251:
  2570   0008DE  EF72  F004         	goto	l3037
  2571   0008E2                     u2250:
  2572   0008E2  6A2F               	clrf	_RowAct^0,c
  2573   0008E4                     l3037:
  2574                           
  2575                           ;TAD_DISPLAY.c: 180:    LcGotoXY(ColumnAct, RowAct);
  2576   0008E4  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  2577   0008E8  502E               	movf	_ColumnAct^0,w,c
  2578   0008EA  ECB8  F003         	call	_LcGotoXY
  2579   0008EE  EF8F  F004         	goto	l436
  2580   0008F2                     l3039:
  2581                           
  2582                           ;TAD_DISPLAY.c: 183:  if (RowAct == 1) {
  2583   0008F2  042F               	decf	_RowAct^0,w,c
  2584   0008F4  A4D8               	btfss	status,2,c
  2585   0008F6  EF7F  F004         	goto	u2261
  2586   0008FA  EF81  F004         	goto	u2260
  2587   0008FE                     u2261:
  2588   0008FE  EF8F  F004         	goto	l436
  2589   000902                     u2260:
  2590   000902                     
  2591                           ;TAD_DISPLAY.c: 184:   if (ColumnAct >= 40) ColumnAct = 0;
  2592   000902  0E27               	movlw	39
  2593   000904  642E               	cpfsgt	_ColumnAct^0,c
  2594   000906  EF87  F004         	goto	u2271
  2595   00090A  EF89  F004         	goto	u2270
  2596   00090E                     u2271:
  2597   00090E  EF8A  F004         	goto	l3045
  2598   000912                     u2270:
  2599   000912  6A2E               	clrf	_ColumnAct^0,c
  2600   000914                     l3045:
  2601                           
  2602                           ;TAD_DISPLAY.c: 185:   LcGotoXY(ColumnAct, RowAct);
  2603   000914  C02F  F05E         	movff	_RowAct,LcGotoXY@Row
  2604   000918  502E               	movf	_ColumnAct^0,w,c
  2605   00091A  ECB8  F003         	call	_LcGotoXY
  2606   00091E                     l436:
  2607   00091E  0012               	return		;funcret
  2608   000920                     __end_of_LcPutChar:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function _LcGotoXY *****************
  2612 ;; Defined at:
  2613 ;;		line 129 in file "TAD_DISPLAY.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  Column          1    wreg     unsigned char 
  2616 ;;  Row             1   15[COMRAM] unsigned char 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  Column          1   22[COMRAM] unsigned char 
  2619 ;;  Fisics          2   20[COMRAM] int 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1
  2629 ;;      Params:         1       0       0
  2630 ;;      Locals:         5       0       0
  2631 ;;      Temps:          2       0       0
  2632 ;;      Totals:         8       0       0
  2633 ;;Total ram usage:        8 bytes
  2634 ;; Hardware stack levels used: 1
  2635 ;; Hardware stack levels required when called: 5
  2636 ;; This function calls:
  2637 ;;		_CantaIR
  2638 ;;		_WaitForBusy
  2639 ;; This function is called by:
  2640 ;;		_LcPutChar
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text3
  2645   000770                     __ptext3:
  2646                           	callstack 0
  2647   000770                     _LcGotoXY:
  2648                           	callstack 23
  2649                           
  2650                           ;incstack = 0
  2651                           ;LcGotoXY@Column stored from wreg
  2652   000770  6E65               	movwf	LcGotoXY@Column^0,c
  2653   000772                     
  2654                           ;TAD_DISPLAY.c: 133:  int Fisics;;TAD_DISPLAY.c: 135:  switch (Rows) {
  2655   000772  EF12  F004         	goto	l2849
  2656   000776                     l2827:
  2657                           
  2658                           ;TAD_DISPLAY.c: 137:    Fisics = Column + (!Row ? 0 : 0x40); break;
  2659   000776  505E               	movf	LcGotoXY@Row^0,w,c
  2660   000778  B4D8               	btfsc	status,2,c
  2661   00077A  EFC1  F003         	goto	u1841
  2662   00077E  EFC3  F003         	goto	u1840
  2663   000782                     u1841:
  2664   000782  EFC9  F003         	goto	l2831
  2665   000786                     u1840:
  2666   000786  0E00               	movlw	0
  2667   000788  6E62               	movwf	(_LcGotoXY$797+1)^0,c
  2668   00078A  0E40               	movlw	64
  2669   00078C  6E61               	movwf	_LcGotoXY$797^0,c
  2670   00078E  EFCD  F003         	goto	l2833
  2671   000792                     l2831:
  2672   000792  0E00               	movlw	0
  2673   000794  6E62               	movwf	(_LcGotoXY$797+1)^0,c
  2674   000796  0E00               	movlw	0
  2675   000798  6E61               	movwf	_LcGotoXY$797^0,c
  2676   00079A                     l2833:
  2677   00079A  5065               	movf	LcGotoXY@Column^0,w,c
  2678   00079C  2461               	addwf	_LcGotoXY$797^0,w,c
  2679   00079E  6E63               	movwf	LcGotoXY@Fisics^0,c
  2680   0007A0  0E00               	movlw	0
  2681   0007A2  2062               	addwfc	(_LcGotoXY$797+1)^0,w,c
  2682   0007A4  6E64               	movwf	(LcGotoXY@Fisics+1)^0,c
  2683   0007A6  EF21  F004         	goto	l2851
  2684   0007AA                     l415:
  2685                           
  2686                           ;TAD_DISPLAY.c: 139:    Fisics = Column;
  2687   0007AA  C065  F063         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2688   0007AE  6A64               	clrf	(LcGotoXY@Fisics+1)^0,c
  2689   0007B0                     
  2690                           ;TAD_DISPLAY.c: 140:    if (Row == 1) Fisics += 0x40; else
  2691   0007B0  045E               	decf	LcGotoXY@Row^0,w,c
  2692   0007B2  A4D8               	btfss	status,2,c
  2693   0007B4  EFDE  F003         	goto	u1851
  2694   0007B8  EFE0  F003         	goto	u1850
  2695   0007BC                     u1851:
  2696   0007BC  EFE6  F003         	goto	l2839
  2697   0007C0                     u1850:
  2698   0007C0  0E40               	movlw	64
  2699   0007C2  2663               	addwf	LcGotoXY@Fisics^0,f,c
  2700   0007C4  0E00               	movlw	0
  2701   0007C6  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2702   0007C8  EF21  F004         	goto	l2851
  2703   0007CC                     l2839:
  2704                           
  2705                           ;TAD_DISPLAY.c: 141:    if (Row == 2) Fisics += Columns; else
  2706   0007CC  0E02               	movlw	2
  2707   0007CE  185E               	xorwf	LcGotoXY@Row^0,w,c
  2708   0007D0  A4D8               	btfss	status,2,c
  2709   0007D2  EFED  F003         	goto	u1861
  2710   0007D6  EFEF  F003         	goto	u1860
  2711   0007DA                     u1861:
  2712   0007DA  EFF5  F003         	goto	l2843
  2713   0007DE                     u1860:
  2714   0007DE  5030               	movf	_Columns^0,w,c
  2715   0007E0  2663               	addwf	LcGotoXY@Fisics^0,f,c
  2716   0007E2  0E00               	movlw	0
  2717   0007E4  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2718   0007E6  EF21  F004         	goto	l2851
  2719   0007EA                     l2843:
  2720                           
  2721                           ;TAD_DISPLAY.c: 142:    if (Row == 3) Fisics += 0x40+Columns;
  2722   0007EA  0E03               	movlw	3
  2723   0007EC  185E               	xorwf	LcGotoXY@Row^0,w,c
  2724   0007EE  A4D8               	btfss	status,2,c
  2725   0007F0  EFFC  F003         	goto	u1871
  2726   0007F4  EFFE  F003         	goto	u1870
  2727   0007F8                     u1871:
  2728   0007F8  EF0B  F004         	goto	l417
  2729   0007FC                     u1870:
  2730   0007FC  5030               	movf	_Columns^0,w,c
  2731   0007FE  6E5F               	movwf	??_LcGotoXY^0,c
  2732   000800  6A60               	clrf	(??_LcGotoXY+1)^0,c
  2733   000802  0E40               	movlw	64
  2734   000804  265F               	addwf	??_LcGotoXY^0,f,c
  2735   000806  0E00               	movlw	0
  2736   000808  2260               	addwfc	(??_LcGotoXY+1)^0,f,c
  2737   00080A  505F               	movf	??_LcGotoXY^0,w,c
  2738   00080C  2663               	addwf	LcGotoXY@Fisics^0,f,c
  2739   00080E  5060               	movf	(??_LcGotoXY+1)^0,w,c
  2740   000810  2264               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2741   000812  EF21  F004         	goto	l2851
  2742   000816                     l417:
  2743                           
  2744                           ;TAD_DISPLAY.c: 143:    break;
  2745   000816  EF21  F004         	goto	l2851
  2746   00081A                     l422:
  2747                           
  2748                           ;TAD_DISPLAY.c: 146:    Fisics = Column; break;
  2749   00081A  C065  F063         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2750   00081E  6A64               	clrf	(LcGotoXY@Fisics+1)^0,c
  2751   000820  EF21  F004         	goto	l2851
  2752   000824                     l2849:
  2753   000824  5031               	movf	_Rows^0,w,c
  2754                           
  2755                           ; Switch size 1, requested type "simple"
  2756                           ; Number of cases is 3, Range of values is 1 to 4
  2757                           ; switch strategies available:
  2758                           ; Name         Instructions Cycles
  2759                           ; simple_byte           10     6 (average)
  2760                           ;	Chosen strategy is simple_byte
  2761   000826  0A01               	xorlw	1	; case 1
  2762   000828  B4D8               	btfsc	status,2,c
  2763   00082A  EF0D  F004         	goto	l422
  2764   00082E  0A03               	xorlw	3	; case 2
  2765   000830  B4D8               	btfsc	status,2,c
  2766   000832  EFBB  F003         	goto	l2827
  2767   000836  0A06               	xorlw	6	; case 4
  2768   000838  B4D8               	btfsc	status,2,c
  2769   00083A  EFD5  F003         	goto	l415
  2770   00083E  EF0D  F004         	goto	l422
  2771   000842                     l2851:
  2772                           
  2773                           ;TAD_DISPLAY.c: 149:  WaitForBusy();
  2774   000842  EC69  F007         	call	_WaitForBusy	;wreg free
  2775   000846                     
  2776                           ;TAD_DISPLAY.c: 150:  CantaIR(0x80 | Fisics);
  2777   000846  5063               	movf	LcGotoXY@Fisics^0,w,c
  2778   000848  0980               	iorlw	128
  2779   00084A  EC9F  F009         	call	_CantaIR
  2780   00084E                     
  2781                           ;TAD_DISPLAY.c: 152:  RowAct = Row;
  2782   00084E  C05E  F02F         	movff	LcGotoXY@Row,_RowAct
  2783   000852                     
  2784                           ;TAD_DISPLAY.c: 153:  ColumnAct = Column;
  2785   000852  C065  F02E         	movff	LcGotoXY@Column,_ColumnAct
  2786   000856  0012               	return		;funcret
  2787   000858                     __end_of_LcGotoXY:
  2788                           	callstack 0
  2789                           
  2790 ;; *************** function _WaitForBusy *****************
  2791 ;; Defined at:
  2792 ;;		line 256 in file "TAD_DISPLAY.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  Busy            1   14[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1
  2806 ;;      Params:         0       0       0
  2807 ;;      Locals:         1       0       0
  2808 ;;      Temps:          0       0       0
  2809 ;;      Totals:         1       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used: 1
  2812 ;; Hardware stack levels required when called: 4
  2813 ;; This function calls:
  2814 ;;		_TI_GetTics
  2815 ;;		_TI_ResetTics
  2816 ;; This function is called by:
  2817 ;;		_LcGotoXY
  2818 ;;		_LcPutChar
  2819 ;;		_LcInit
  2820 ;;		_LcClear
  2821 ;;		_LcCursorOn
  2822 ;;		_LcCursorOff
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text4
  2827   000ED2                     __ptext4:
  2828                           	callstack 0
  2829   000ED2                     _WaitForBusy:
  2830                           	callstack 24
  2831   000ED2                     
  2832                           ;TAD_DISPLAY.c: 257:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  2833   000ED2  8096               	bsf	150,0,c	;volatile
  2834   000ED4  8296               	bsf	150,1,c	;volatile
  2835   000ED6  8A93               	bsf	147,5,c	;volatile
  2836   000ED8  8893               	bsf	147,4,c	;volatile
  2837                           
  2838                           ;TAD_DISPLAY.c: 258:  (LATBbits.LATB3 = 0);
  2839   000EDA  968A               	bcf	138,3,c	;volatile
  2840                           
  2841                           ;TAD_DISPLAY.c: 259:  (LATBbits.LATB2 = 1);
  2842   000EDC  848A               	bsf	138,2,c	;volatile
  2843   000EDE                     
  2844                           ;TAD_DISPLAY.c: 260:  TI_ResetTics(Timer);
  2845   000EDE  504D               	movf	_Timer^0,w,c
  2846   000EE0  ECE6  F009         	call	_TI_ResetTics
  2847   000EE4                     l2785:
  2848                           
  2849                           ;TAD_DISPLAY.c: 262:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  2850   000EE4  828A               	bsf	138,1,c	;volatile
  2851   000EE6  828A               	bsf	138,1,c	;volatile
  2852   000EE8                     
  2853                           ;TAD_DISPLAY.c: 263:   Busy = (PORTBbits.RB7);
  2854   000EE8  0E00               	movlw	0
  2855   000EEA  BE81               	btfsc	129,7,c	;volatile
  2856   000EEC  0E01               	movlw	1
  2857   000EEE  6E5D               	movwf	WaitForBusy@Busy^0,c
  2858   000EF0                     
  2859                           ;TAD_DISPLAY.c: 264:   (LATBbits.LATB1 = 0);
  2860   000EF0  928A               	bcf	138,1,c	;volatile
  2861   000EF2                     
  2862                           ;TAD_DISPLAY.c: 265:   (LATBbits.LATB1 = 0);
  2863   000EF2  928A               	bcf	138,1,c	;volatile
  2864   000EF4                     
  2865                           ;TAD_DISPLAY.c: 266:   (LATBbits.LATB1 = 1);(LATBbits.LATB1 = 1);
  2866   000EF4  828A               	bsf	138,1,c	;volatile
  2867   000EF6  828A               	bsf	138,1,c	;volatile
  2868   000EF8                     
  2869                           ;TAD_DISPLAY.c: 268:   (LATBbits.LATB1 = 0);
  2870   000EF8  928A               	bcf	138,1,c	;volatile
  2871   000EFA                     
  2872                           ;TAD_DISPLAY.c: 269:   (LATBbits.LATB1 = 0);
  2873   000EFA  928A               	bcf	138,1,c	;volatile
  2874   000EFC                     
  2875                           ;TAD_DISPLAY.c: 270:   if (TI_GetTics(Timer) > 10) break;
  2876   000EFC  504D               	movf	_Timer^0,w,c
  2877   000EFE  EC71  F008         	call	_TI_GetTics
  2878   000F02  5053               	movf	(?_TI_GetTics+3)^0,w,c
  2879   000F04  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  2880   000F06  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  2881   000F08  E109               	bnz	u1810
  2882   000F0A  0E0B               	movlw	11
  2883   000F0C  5C50               	subwf	?_TI_GetTics^0,w,c
  2884   000F0E  A0D8               	btfss	status,0,c
  2885   000F10  EF8C  F007         	goto	u1811
  2886   000F14  EF8E  F007         	goto	u1810
  2887   000F18                     u1811:
  2888   000F18  EF90  F007         	goto	l2807
  2889   000F1C                     u1810:
  2890   000F1C  EF98  F007         	goto	l466
  2891   000F20                     l2807:
  2892                           
  2893                           ;TAD_DISPLAY.c: 271:  } while(Busy);
  2894   000F20  505D               	movf	WaitForBusy@Busy^0,w,c
  2895   000F22  A4D8               	btfss	status,2,c
  2896   000F24  EF96  F007         	goto	u1821
  2897   000F28  EF98  F007         	goto	u1820
  2898   000F2C                     u1821:
  2899   000F2C  EF72  F007         	goto	l2785
  2900   000F30                     u1820:
  2901   000F30                     l466:
  2902   000F30  0012               	return		;funcret
  2903   000F32                     __end_of_WaitForBusy:
  2904                           	callstack 0
  2905                           
  2906 ;; *************** function _CantaIR *****************
  2907 ;; Defined at:
  2908 ;;		line 224 in file "TAD_DISPLAY.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  IR              1    wreg     unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  IR              1    3[COMRAM] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2, status,0, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1
  2922 ;;      Params:         0       0       0
  2923 ;;      Locals:         1       0       0
  2924 ;;      Temps:          0       0       0
  2925 ;;      Totals:         1       0       0
  2926 ;;Total ram usage:        1 bytes
  2927 ;; Hardware stack levels used: 1
  2928 ;; Hardware stack levels required when called: 4
  2929 ;; This function calls:
  2930 ;;		_CantaPartAlta
  2931 ;;		_CantaPartBaixa
  2932 ;; This function is called by:
  2933 ;;		_LcGotoXY
  2934 ;;		_LcInit
  2935 ;;		_LcClear
  2936 ;;		_LcCursorOn
  2937 ;;		_LcCursorOff
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text5
  2942   00133E                     __ptext5:
  2943                           	callstack 0
  2944   00133E                     _CantaIR:
  2945                           	callstack 23
  2946                           
  2947                           ;incstack = 0
  2948                           ;CantaIR@IR stored from wreg
  2949   00133E  6E52               	movwf	CantaIR@IR^0,c
  2950   001340                     
  2951                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  2952   001340  9096               	bcf	150,0,c	;volatile
  2953   001342  9296               	bcf	150,1,c	;volatile
  2954   001344  9A93               	bcf	147,5,c	;volatile
  2955   001346  9893               	bcf	147,4,c	;volatile
  2956                           
  2957                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  2958   001348  968A               	bcf	138,3,c	;volatile
  2959                           
  2960                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  2961   00134A  948A               	bcf	138,2,c	;volatile
  2962                           
  2963                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  2964   00134C  828A               	bsf	138,1,c	;volatile
  2965   00134E                     
  2966                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  2967   00134E  5052               	movf	CantaIR@IR^0,w,c
  2968   001350  EC84  F006         	call	_CantaPartAlta
  2969   001354                     
  2970                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  2971   001354  828A               	bsf	138,1,c	;volatile
  2972   001356                     
  2973                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  2974   001356  928A               	bcf	138,1,c	;volatile
  2975   001358                     
  2976                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  2977   001358  928A               	bcf	138,1,c	;volatile
  2978   00135A                     
  2979                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  2980   00135A  828A               	bsf	138,1,c	;volatile
  2981                           
  2982                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  2983   00135C  5052               	movf	CantaIR@IR^0,w,c
  2984   00135E  EC42  F006         	call	_CantaPartBaixa
  2985   001362                     
  2986                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  2987   001362  828A               	bsf	138,1,c	;volatile
  2988   001364                     
  2989                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  2990   001364  928A               	bcf	138,1,c	;volatile
  2991   001366                     
  2992                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  2993   001366  8096               	bsf	150,0,c	;volatile
  2994   001368  8296               	bsf	150,1,c	;volatile
  2995   00136A  8A93               	bsf	147,5,c	;volatile
  2996   00136C  8893               	bsf	147,4,c	;volatile
  2997   00136E  0012               	return		;funcret
  2998   001370                     __end_of_CantaIR:
  2999                           	callstack 0
  3000                           
  3001 ;; *************** function _CantaData *****************
  3002 ;; Defined at:
  3003 ;;		line 240 in file "TAD_DISPLAY.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  Data            1    wreg     unsigned char 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  Data            1    3[COMRAM] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1
  3017 ;;      Params:         0       0       0
  3018 ;;      Locals:         1       0       0
  3019 ;;      Temps:          0       0       0
  3020 ;;      Totals:         1       0       0
  3021 ;;Total ram usage:        1 bytes
  3022 ;; Hardware stack levels used: 1
  3023 ;; Hardware stack levels required when called: 4
  3024 ;; This function calls:
  3025 ;;		_CantaPartAlta
  3026 ;;		_CantaPartBaixa
  3027 ;; This function is called by:
  3028 ;;		_LcPutChar
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text6
  3033   001370                     __ptext6:
  3034                           	callstack 0
  3035   001370                     _CantaData:
  3036                           	callstack 24
  3037                           
  3038                           ;incstack = 0
  3039                           ;CantaData@Data stored from wreg
  3040   001370  6E52               	movwf	CantaData@Data^0,c
  3041   001372                     
  3042                           ;TAD_DISPLAY.c: 241:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  3043   001372  9096               	bcf	150,0,c	;volatile
  3044   001374  9296               	bcf	150,1,c	;volatile
  3045   001376  9A93               	bcf	147,5,c	;volatile
  3046   001378  9893               	bcf	147,4,c	;volatile
  3047                           
  3048                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB3 = 1);
  3049   00137A  868A               	bsf	138,3,c	;volatile
  3050                           
  3051                           ;TAD_DISPLAY.c: 243:  (LATBbits.LATB2 = 0);
  3052   00137C  948A               	bcf	138,2,c	;volatile
  3053                           
  3054                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3055   00137E  828A               	bsf	138,1,c	;volatile
  3056   001380                     
  3057                           ;TAD_DISPLAY.c: 245:  CantaPartAlta(Data);
  3058   001380  5052               	movf	CantaData@Data^0,w,c
  3059   001382  EC84  F006         	call	_CantaPartAlta
  3060   001386                     
  3061                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 1);
  3062   001386  828A               	bsf	138,1,c	;volatile
  3063   001388                     
  3064                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 0);
  3065   001388  928A               	bcf	138,1,c	;volatile
  3066   00138A                     
  3067                           ;TAD_DISPLAY.c: 248:  (LATBbits.LATB1 = 0);
  3068   00138A  928A               	bcf	138,1,c	;volatile
  3069   00138C                     
  3070                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3071   00138C  828A               	bsf	138,1,c	;volatile
  3072                           
  3073                           ;TAD_DISPLAY.c: 250:  CantaPartBaixa(Data);
  3074   00138E  5052               	movf	CantaData@Data^0,w,c
  3075   001390  EC42  F006         	call	_CantaPartBaixa
  3076   001394                     
  3077                           ;TAD_DISPLAY.c: 251:  (LATBbits.LATB1 = 1);
  3078   001394  828A               	bsf	138,1,c	;volatile
  3079   001396                     
  3080                           ;TAD_DISPLAY.c: 252:  (LATBbits.LATB1 = 0);
  3081   001396  928A               	bcf	138,1,c	;volatile
  3082   001398                     
  3083                           ;TAD_DISPLAY.c: 253:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3084   001398  8096               	bsf	150,0,c	;volatile
  3085   00139A  8296               	bsf	150,1,c	;volatile
  3086   00139C  8A93               	bsf	147,5,c	;volatile
  3087   00139E  8893               	bsf	147,4,c	;volatile
  3088   0013A0  0012               	return		;funcret
  3089   0013A2                     __end_of_CantaData:
  3090                           	callstack 0
  3091                           
  3092 ;; *************** function _CantaPartBaixa *****************
  3093 ;; Defined at:
  3094 ;;		line 217 in file "TAD_DISPLAY.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  c               1    wreg     unsigned char 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  c               1    2[COMRAM] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1
  3108 ;;      Params:         0       0       0
  3109 ;;      Locals:         1       0       0
  3110 ;;      Temps:          1       0       0
  3111 ;;      Totals:         2       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used: 1
  3114 ;; Hardware stack levels required when called: 3
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_CantaIR
  3119 ;;		_CantaData
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text7
  3124   000C84                     __ptext7:
  3125                           	callstack 0
  3126   000C84                     _CantaPartBaixa:
  3127                           	callstack 23
  3128                           
  3129                           ;incstack = 0
  3130                           ;CantaPartBaixa@c stored from wreg
  3131   000C84  6E51               	movwf	CantaPartBaixa@c^0,c
  3132   000C86                     
  3133                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  3134   000C86  B651               	btfsc	CantaPartBaixa@c^0,3,c
  3135   000C88  EF48  F006         	goto	u1721
  3136   000C8C  EF4C  F006         	goto	u1720
  3137   000C90                     u1721:
  3138   000C90  6A50               	clrf	??_CantaPartBaixa^0,c
  3139   000C92  2A50               	incf	??_CantaPartBaixa^0,f,c
  3140   000C94  EF4D  F006         	goto	u1738
  3141   000C98                     u1720:
  3142   000C98  6A50               	clrf	??_CantaPartBaixa^0,c
  3143   000C9A                     u1738:
  3144   000C9A  508D               	movf	141,w,c	;volatile
  3145   000C9C  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3146   000C9E  0BFE               	andlw	-2
  3147   000CA0  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3148   000CA2  6E8D               	movwf	141,c	;volatile
  3149                           
  3150                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  3151   000CA4  B451               	btfsc	CantaPartBaixa@c^0,2,c
  3152   000CA6  EF57  F006         	goto	u1741
  3153   000CAA  EF5B  F006         	goto	u1740
  3154   000CAE                     u1741:
  3155   000CAE  6A50               	clrf	??_CantaPartBaixa^0,c
  3156   000CB0  2A50               	incf	??_CantaPartBaixa^0,f,c
  3157   000CB2  EF5C  F006         	goto	u1758
  3158   000CB6                     u1740:
  3159   000CB6  6A50               	clrf	??_CantaPartBaixa^0,c
  3160   000CB8                     u1758:
  3161   000CB8  4650               	rlncf	??_CantaPartBaixa^0,f,c
  3162   000CBA  508D               	movf	141,w,c	;volatile
  3163   000CBC  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3164   000CBE  0BFD               	andlw	-3
  3165   000CC0  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3166   000CC2  6E8D               	movwf	141,c	;volatile
  3167                           
  3168                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  3169   000CC4  B251               	btfsc	CantaPartBaixa@c^0,1,c
  3170   000CC6  EF67  F006         	goto	u1761
  3171   000CCA  EF6B  F006         	goto	u1760
  3172   000CCE                     u1761:
  3173   000CCE  6A50               	clrf	??_CantaPartBaixa^0,c
  3174   000CD0  2A50               	incf	??_CantaPartBaixa^0,f,c
  3175   000CD2  EF6C  F006         	goto	u1778
  3176   000CD6                     u1760:
  3177   000CD6  6A50               	clrf	??_CantaPartBaixa^0,c
  3178   000CD8                     u1778:
  3179   000CD8  3A50               	swapf	??_CantaPartBaixa^0,f,c
  3180   000CDA  4650               	rlncf	??_CantaPartBaixa^0,f,c
  3181   000CDC  508A               	movf	138,w,c	;volatile
  3182   000CDE  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3183   000CE0  0BDF               	andlw	-33
  3184   000CE2  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3185   000CE4  6E8A               	movwf	138,c	;volatile
  3186                           
  3187                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  3188   000CE6  B051               	btfsc	CantaPartBaixa@c^0,0,c
  3189   000CE8  EF78  F006         	goto	u1781
  3190   000CEC  EF7C  F006         	goto	u1780
  3191   000CF0                     u1781:
  3192   000CF0  6A50               	clrf	??_CantaPartBaixa^0,c
  3193   000CF2  2A50               	incf	??_CantaPartBaixa^0,f,c
  3194   000CF4  EF7D  F006         	goto	u1798
  3195   000CF8                     u1780:
  3196   000CF8  6A50               	clrf	??_CantaPartBaixa^0,c
  3197   000CFA                     u1798:
  3198   000CFA  3A50               	swapf	??_CantaPartBaixa^0,f,c
  3199   000CFC  508A               	movf	138,w,c	;volatile
  3200   000CFE  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3201   000D00  0BEF               	andlw	-17
  3202   000D02  1850               	xorwf	??_CantaPartBaixa^0,w,c
  3203   000D04  6E8A               	movwf	138,c	;volatile
  3204   000D06  0012               	return		;funcret
  3205   000D08                     __end_of_CantaPartBaixa:
  3206                           	callstack 0
  3207                           
  3208 ;; *************** function _CantaPartAlta *****************
  3209 ;; Defined at:
  3210 ;;		line 210 in file "TAD_DISPLAY.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  c               1    wreg     unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  c               1    2[COMRAM] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      void 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1
  3224 ;;      Params:         0       0       0
  3225 ;;      Locals:         1       0       0
  3226 ;;      Temps:          1       0       0
  3227 ;;      Totals:         2       0       0
  3228 ;;Total ram usage:        2 bytes
  3229 ;; Hardware stack levels used: 1
  3230 ;; Hardware stack levels required when called: 3
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_CantaIR
  3235 ;;		_CantaData
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text8
  3240   000D08                     __ptext8:
  3241                           	callstack 0
  3242   000D08                     _CantaPartAlta:
  3243                           	callstack 23
  3244                           
  3245                           ;incstack = 0
  3246                           ;CantaPartAlta@c stored from wreg
  3247   000D08  6E51               	movwf	CantaPartAlta@c^0,c
  3248   000D0A                     
  3249                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  3250   000D0A  BE51               	btfsc	CantaPartAlta@c^0,7,c
  3251   000D0C  EF8A  F006         	goto	u1641
  3252   000D10  EF8E  F006         	goto	u1640
  3253   000D14                     u1641:
  3254   000D14  6A50               	clrf	??_CantaPartAlta^0,c
  3255   000D16  2A50               	incf	??_CantaPartAlta^0,f,c
  3256   000D18  EF8F  F006         	goto	u1658
  3257   000D1C                     u1640:
  3258   000D1C  6A50               	clrf	??_CantaPartAlta^0,c
  3259   000D1E                     u1658:
  3260   000D1E  508D               	movf	141,w,c	;volatile
  3261   000D20  1850               	xorwf	??_CantaPartAlta^0,w,c
  3262   000D22  0BFE               	andlw	-2
  3263   000D24  1850               	xorwf	??_CantaPartAlta^0,w,c
  3264   000D26  6E8D               	movwf	141,c	;volatile
  3265                           
  3266                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  3267   000D28  BC51               	btfsc	CantaPartAlta@c^0,6,c
  3268   000D2A  EF99  F006         	goto	u1661
  3269   000D2E  EF9D  F006         	goto	u1660
  3270   000D32                     u1661:
  3271   000D32  6A50               	clrf	??_CantaPartAlta^0,c
  3272   000D34  2A50               	incf	??_CantaPartAlta^0,f,c
  3273   000D36  EF9E  F006         	goto	u1678
  3274   000D3A                     u1660:
  3275   000D3A  6A50               	clrf	??_CantaPartAlta^0,c
  3276   000D3C                     u1678:
  3277   000D3C  4650               	rlncf	??_CantaPartAlta^0,f,c
  3278   000D3E  508D               	movf	141,w,c	;volatile
  3279   000D40  1850               	xorwf	??_CantaPartAlta^0,w,c
  3280   000D42  0BFD               	andlw	-3
  3281   000D44  1850               	xorwf	??_CantaPartAlta^0,w,c
  3282   000D46  6E8D               	movwf	141,c	;volatile
  3283                           
  3284                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  3285   000D48  BA51               	btfsc	CantaPartAlta@c^0,5,c
  3286   000D4A  EFA9  F006         	goto	u1681
  3287   000D4E  EFAD  F006         	goto	u1680
  3288   000D52                     u1681:
  3289   000D52  6A50               	clrf	??_CantaPartAlta^0,c
  3290   000D54  2A50               	incf	??_CantaPartAlta^0,f,c
  3291   000D56  EFAE  F006         	goto	u1698
  3292   000D5A                     u1680:
  3293   000D5A  6A50               	clrf	??_CantaPartAlta^0,c
  3294   000D5C                     u1698:
  3295   000D5C  3A50               	swapf	??_CantaPartAlta^0,f,c
  3296   000D5E  4650               	rlncf	??_CantaPartAlta^0,f,c
  3297   000D60  508A               	movf	138,w,c	;volatile
  3298   000D62  1850               	xorwf	??_CantaPartAlta^0,w,c
  3299   000D64  0BDF               	andlw	-33
  3300   000D66  1850               	xorwf	??_CantaPartAlta^0,w,c
  3301   000D68  6E8A               	movwf	138,c	;volatile
  3302                           
  3303                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  3304   000D6A  B851               	btfsc	CantaPartAlta@c^0,4,c
  3305   000D6C  EFBA  F006         	goto	u1701
  3306   000D70  EFBE  F006         	goto	u1700
  3307   000D74                     u1701:
  3308   000D74  6A50               	clrf	??_CantaPartAlta^0,c
  3309   000D76  2A50               	incf	??_CantaPartAlta^0,f,c
  3310   000D78  EFBF  F006         	goto	u1718
  3311   000D7C                     u1700:
  3312   000D7C  6A50               	clrf	??_CantaPartAlta^0,c
  3313   000D7E                     u1718:
  3314   000D7E  3A50               	swapf	??_CantaPartAlta^0,f,c
  3315   000D80  508A               	movf	138,w,c	;volatile
  3316   000D82  1850               	xorwf	??_CantaPartAlta^0,w,c
  3317   000D84  0BEF               	andlw	-17
  3318   000D86  1850               	xorwf	??_CantaPartAlta^0,w,c
  3319   000D88  6E8A               	movwf	138,c	;volatile
  3320   000D8A  0012               	return		;funcret
  3321   000D8C                     __end_of_CantaPartAlta:
  3322                           	callstack 0
  3323                           
  3324 ;; *************** function _motor_LEDs *****************
  3325 ;; Defined at:
  3326 ;;		line 76 in file "TAD_LEDS.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;		None
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  i               2   19[COMRAM] int 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1
  3340 ;;      Params:         0       0       0
  3341 ;;      Locals:         2       0       0
  3342 ;;      Temps:          5       0       0
  3343 ;;      Totals:         7       0       0
  3344 ;;Total ram usage:        7 bytes
  3345 ;; Hardware stack levels used: 1
  3346 ;; Hardware stack levels required when called: 4
  3347 ;; This function calls:
  3348 ;;		_TI_GetTics
  3349 ;;		_TI_ResetTics
  3350 ;;		_getActualLeds
  3351 ;;		_setLedActual
  3352 ;;		_unsetLedActual
  3353 ;; This function is called by:
  3354 ;;		_main
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text9
  3359   0009E4                     __ptext9:
  3360                           	callstack 0
  3361   0009E4                     _motor_LEDs:
  3362                           	callstack 26
  3363   0009E4                     
  3364                           ;TAD_LEDS.c: 78:     getActualLeds(ActualLeds);
  3365   0009E4  0E41               	movlw	low _ActualLeds
  3366   0009E6  6E50               	movwf	getActualLeds@leds^0,c
  3367   0009E8  ECDD  F008         	call	_getActualLeds	;wreg free
  3368   0009EC                     
  3369                           ;TAD_LEDS.c: 81:     if (TI_GetTics(timer) >= 10) {
  3370   0009EC  504C               	movf	_timer@TAD_LEDS$F1049^0,w,c
  3371   0009EE  EC71  F008         	call	_TI_GetTics
  3372   0009F2  5053               	movf	(?_TI_GetTics+3)^0,w,c
  3373   0009F4  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  3374   0009F6  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  3375   0009F8  E109               	bnz	u2600
  3376   0009FA  0E0A               	movlw	10
  3377   0009FC  5C50               	subwf	?_TI_GetTics^0,w,c
  3378   0009FE  A0D8               	btfss	status,0,c
  3379   000A00  EF04  F005         	goto	u2601
  3380   000A04  EF06  F005         	goto	u2600
  3381   000A08                     u2601:
  3382   000A08  EF0C  F005         	goto	l3345
  3383   000A0C                     u2600:
  3384   000A0C                     
  3385                           ;TAD_LEDS.c: 82:         TI_ResetTics(timer);
  3386   000A0C  504C               	movf	_timer@TAD_LEDS$F1049^0,w,c
  3387   000A0E  ECE6  F009         	call	_TI_ResetTics
  3388   000A12                     
  3389                           ;TAD_LEDS.c: 83:         setLedActual(0xFF);
  3390   000A12  0EFF               	movlw	255
  3391   000A14  ECFF  F006         	call	_setLedActual
  3392   000A18                     l3345:
  3393                           
  3394                           ;TAD_LEDS.c: 89:     for (int i = 0; i < 6; i++) {
  3395   000A18  0E00               	movlw	0
  3396   000A1A  6E63               	movwf	(motor_LEDs@i+1)^0,c
  3397   000A1C  0E00               	movlw	0
  3398   000A1E  6E62               	movwf	motor_LEDs@i^0,c
  3399   000A20                     l3351:
  3400                           
  3401                           ;TAD_LEDS.c: 90:         if (ActualLeds[i] < 0xA && TI_GetTics(timer) >= ActualLeds[i]) 
      +                          {
  3402   000A20  5062               	movf	motor_LEDs@i^0,w,c
  3403   000A22  0F41               	addlw	low _ActualLeds
  3404   000A24  6ED9               	movwf	fsr2l,c
  3405   000A26  6ADA               	clrf	fsr2h,c
  3406   000A28  0E0A               	movlw	10
  3407   000A2A  60DF               	cpfslt	indf2,c
  3408   000A2C  EF1A  F005         	goto	u2611
  3409   000A30  EF1C  F005         	goto	u2610
  3410   000A34                     u2611:
  3411   000A34  EF3C  F005         	goto	l3357
  3412   000A38                     u2610:
  3413   000A38  5062               	movf	motor_LEDs@i^0,w,c
  3414   000A3A  0F41               	addlw	low _ActualLeds
  3415   000A3C  6ED9               	movwf	fsr2l,c
  3416   000A3E  6ADA               	clrf	fsr2h,c
  3417   000A40  50DF               	movf	indf2,w,c
  3418   000A42  6E5D               	movwf	??_motor_LEDs^0,c
  3419   000A44  C05D  F05E         	movff	??_motor_LEDs,??_motor_LEDs+1
  3420   000A48  6A5F               	clrf	(??_motor_LEDs+2)^0,c
  3421   000A4A  6A60               	clrf	(??_motor_LEDs+3)^0,c
  3422   000A4C  6A61               	clrf	(??_motor_LEDs+4)^0,c
  3423   000A4E  504C               	movf	_timer@TAD_LEDS$F1049^0,w,c
  3424   000A50  EC71  F008         	call	_TI_GetTics
  3425   000A54  505E               	movf	(??_motor_LEDs+1)^0,w,c
  3426   000A56  5C50               	subwf	?_TI_GetTics^0,w,c
  3427   000A58  505F               	movf	(??_motor_LEDs+2)^0,w,c
  3428   000A5A  5851               	subwfb	(?_TI_GetTics+1)^0,w,c
  3429   000A5C  5060               	movf	(??_motor_LEDs+3)^0,w,c
  3430   000A5E  5852               	subwfb	(?_TI_GetTics+2)^0,w,c
  3431   000A60  5061               	movf	(??_motor_LEDs+4)^0,w,c
  3432   000A62  5853               	subwfb	(?_TI_GetTics+3)^0,w,c
  3433   000A64  A0D8               	btfss	status,0,c
  3434   000A66  EF37  F005         	goto	u2621
  3435   000A6A  EF39  F005         	goto	u2620
  3436   000A6E                     u2621:
  3437   000A6E  EF3C  F005         	goto	l3357
  3438   000A72                     u2620:
  3439   000A72                     
  3440                           ;TAD_LEDS.c: 91:             unsetLedActual(i);
  3441   000A72  5062               	movf	motor_LEDs@i^0,w,c
  3442   000A74  ECC6  F006         	call	_unsetLedActual
  3443   000A78                     l3357:
  3444                           
  3445                           ;TAD_LEDS.c: 93:     }
  3446   000A78  4A62               	infsnz	motor_LEDs@i^0,f,c
  3447   000A7A  2A63               	incf	(motor_LEDs@i+1)^0,f,c
  3448   000A7C  BE63               	btfsc	(motor_LEDs@i+1)^0,7,c
  3449   000A7E  EF4A  F005         	goto	u2631
  3450   000A82  5063               	movf	(motor_LEDs@i+1)^0,w,c
  3451   000A84  E109               	bnz	u2630
  3452   000A86  0E06               	movlw	6
  3453   000A88  5C62               	subwf	motor_LEDs@i^0,w,c
  3454   000A8A  A0D8               	btfss	status,0,c
  3455   000A8C  EF4A  F005         	goto	u2631
  3456   000A90  EF4C  F005         	goto	u2630
  3457   000A94                     u2631:
  3458   000A94  EF10  F005         	goto	l3351
  3459   000A98                     u2630:
  3460   000A98  0012               	return		;funcret
  3461   000A9A                     __end_of_motor_LEDs:
  3462                           	callstack 0
  3463                           
  3464 ;; *************** function _unsetLedActual *****************
  3465 ;; Defined at:
  3466 ;;		line 46 in file "TAD_LEDS.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  ledActual       1    wreg     unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  ledActual       1    1[COMRAM] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1
  3480 ;;      Params:         0       0       0
  3481 ;;      Locals:         1       0       0
  3482 ;;      Temps:          0       0       0
  3483 ;;      Totals:         1       0       0
  3484 ;;Total ram usage:        1 bytes
  3485 ;; Hardware stack levels used: 1
  3486 ;; Hardware stack levels required when called: 3
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_motor_LEDs
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text10
  3495   000D8C                     __ptext10:
  3496                           	callstack 0
  3497   000D8C                     _unsetLedActual:
  3498                           	callstack 26
  3499                           
  3500                           ;incstack = 0
  3501                           ;unsetLedActual@ledActual stored from wreg
  3502   000D8C  6E50               	movwf	unsetLedActual@ledActual^0,c
  3503   000D8E                     
  3504                           ;TAD_LEDS.c: 47:     switch(ledActual) {
  3505   000D8E  EFE3  F006         	goto	l1971
  3506   000D92                     l702:
  3507                           
  3508                           ;TAD_LEDS.c: 49:             LATAbits.LATA0 = 0;
  3509   000D92  9089               	bcf	137,0,c	;volatile
  3510                           
  3511                           ;TAD_LEDS.c: 50:             break;
  3512   000D94  EFFE  F006         	goto	l710
  3513   000D98                     l704:
  3514                           
  3515                           ;TAD_LEDS.c: 52:             LATAbits.LATA1 = 0;
  3516   000D98  9289               	bcf	137,1,c	;volatile
  3517                           
  3518                           ;TAD_LEDS.c: 53:             break;
  3519   000D9A  EFFE  F006         	goto	l710
  3520   000D9E                     l705:
  3521                           
  3522                           ;TAD_LEDS.c: 55:             LATAbits.LATA2 = 0;
  3523   000D9E  9489               	bcf	137,2,c	;volatile
  3524                           
  3525                           ;TAD_LEDS.c: 56:             break;
  3526   000DA0  EFFE  F006         	goto	l710
  3527   000DA4                     l706:
  3528                           
  3529                           ;TAD_LEDS.c: 58:             LATAbits.LATA3 = 0;
  3530   000DA4  9689               	bcf	137,3,c	;volatile
  3531                           
  3532                           ;TAD_LEDS.c: 59:             break;
  3533   000DA6  EFFE  F006         	goto	l710
  3534   000DAA                     l707:
  3535                           
  3536                           ;TAD_LEDS.c: 61:             LATAbits.LATA4 = 0;
  3537   000DAA  9889               	bcf	137,4,c	;volatile
  3538                           
  3539                           ;TAD_LEDS.c: 62:             break;
  3540   000DAC  EFFE  F006         	goto	l710
  3541   000DB0                     l708:
  3542                           
  3543                           ;TAD_LEDS.c: 64:             LATAbits.LATA5 = 0;
  3544   000DB0  9A89               	bcf	137,5,c	;volatile
  3545                           
  3546                           ;TAD_LEDS.c: 65:             break;
  3547   000DB2  EFFE  F006         	goto	l710
  3548   000DB6                     l709:
  3549                           
  3550                           ;TAD_LEDS.c: 67:             LATAbits.LATA0 = 0;
  3551   000DB6  9089               	bcf	137,0,c	;volatile
  3552                           
  3553                           ;TAD_LEDS.c: 68:             LATAbits.LATA1 = 0;
  3554   000DB8  9289               	bcf	137,1,c	;volatile
  3555                           
  3556                           ;TAD_LEDS.c: 69:             LATAbits.LATA2 = 0;
  3557   000DBA  9489               	bcf	137,2,c	;volatile
  3558                           
  3559                           ;TAD_LEDS.c: 70:             LATAbits.LATA3 = 0;
  3560   000DBC  9689               	bcf	137,3,c	;volatile
  3561                           
  3562                           ;TAD_LEDS.c: 71:             LATAbits.LATA4 = 0;
  3563   000DBE  9889               	bcf	137,4,c	;volatile
  3564                           
  3565                           ;TAD_LEDS.c: 72:             LATAbits.LATA5 = 0;
  3566   000DC0  9A89               	bcf	137,5,c	;volatile
  3567                           
  3568                           ;TAD_LEDS.c: 73:     }
  3569   000DC2  EFFE  F006         	goto	l710
  3570   000DC6                     l1971:
  3571   000DC6  5050               	movf	unsetLedActual@ledActual^0,w,c
  3572                           
  3573                           ; Switch size 1, requested type "simple"
  3574                           ; Number of cases is 6, Range of values is 0 to 5
  3575                           ; switch strategies available:
  3576                           ; Name         Instructions Cycles
  3577                           ; simple_byte           19    10 (average)
  3578                           ;	Chosen strategy is simple_byte
  3579   000DC8  0A00               	xorlw	0	; case 0
  3580   000DCA  B4D8               	btfsc	status,2,c
  3581   000DCC  EFC9  F006         	goto	l702
  3582   000DD0  0A01               	xorlw	1	; case 1
  3583   000DD2  B4D8               	btfsc	status,2,c
  3584   000DD4  EFCC  F006         	goto	l704
  3585   000DD8  0A03               	xorlw	3	; case 2
  3586   000DDA  B4D8               	btfsc	status,2,c
  3587   000DDC  EFCF  F006         	goto	l705
  3588   000DE0  0A01               	xorlw	1	; case 3
  3589   000DE2  B4D8               	btfsc	status,2,c
  3590   000DE4  EFD2  F006         	goto	l706
  3591   000DE8  0A07               	xorlw	7	; case 4
  3592   000DEA  B4D8               	btfsc	status,2,c
  3593   000DEC  EFD5  F006         	goto	l707
  3594   000DF0  0A01               	xorlw	1	; case 5
  3595   000DF2  B4D8               	btfsc	status,2,c
  3596   000DF4  EFD8  F006         	goto	l708
  3597   000DF8  EFDB  F006         	goto	l709
  3598   000DFC                     l710:
  3599   000DFC  0012               	return		;funcret
  3600   000DFE                     __end_of_unsetLedActual:
  3601                           	callstack 0
  3602                           
  3603 ;; *************** function _setLedActual *****************
  3604 ;; Defined at:
  3605 ;;		line 15 in file "TAD_LEDS.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  ledActual       1    wreg     unsigned char 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  ledActual       1    1[COMRAM] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1
  3619 ;;      Params:         0       0       0
  3620 ;;      Locals:         1       0       0
  3621 ;;      Temps:          0       0       0
  3622 ;;      Totals:         1       0       0
  3623 ;;Total ram usage:        1 bytes
  3624 ;; Hardware stack levels used: 1
  3625 ;; Hardware stack levels required when called: 3
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_motor_LEDs
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text11
  3634   000DFE                     __ptext11:
  3635                           	callstack 0
  3636   000DFE                     _setLedActual:
  3637                           	callstack 26
  3638                           
  3639                           ;incstack = 0
  3640                           ;setLedActual@ledActual stored from wreg
  3641   000DFE  6E50               	movwf	setLedActual@ledActual^0,c
  3642   000E00                     
  3643                           ;TAD_LEDS.c: 16:     switch(ledActual) {
  3644   000E00  EF1C  F007         	goto	l1967
  3645   000E04                     l690:
  3646                           
  3647                           ;TAD_LEDS.c: 18:             LATAbits.LATA0 = 1;
  3648   000E04  8089               	bsf	137,0,c	;volatile
  3649                           
  3650                           ;TAD_LEDS.c: 19:             break;
  3651   000E06  EF37  F007         	goto	l698
  3652   000E0A                     l692:
  3653                           
  3654                           ;TAD_LEDS.c: 21:             LATAbits.LATA1 = 1;
  3655   000E0A  8289               	bsf	137,1,c	;volatile
  3656                           
  3657                           ;TAD_LEDS.c: 22:             break;
  3658   000E0C  EF37  F007         	goto	l698
  3659   000E10                     l693:
  3660                           
  3661                           ;TAD_LEDS.c: 24:             LATAbits.LATA2 = 1;
  3662   000E10  8489               	bsf	137,2,c	;volatile
  3663                           
  3664                           ;TAD_LEDS.c: 25:             break;
  3665   000E12  EF37  F007         	goto	l698
  3666   000E16                     l694:
  3667                           
  3668                           ;TAD_LEDS.c: 27:             LATAbits.LATA3 = 1;
  3669   000E16  8689               	bsf	137,3,c	;volatile
  3670                           
  3671                           ;TAD_LEDS.c: 28:             break;
  3672   000E18  EF37  F007         	goto	l698
  3673   000E1C                     l695:
  3674                           
  3675                           ;TAD_LEDS.c: 30:             LATAbits.LATA4 = 1;
  3676   000E1C  8889               	bsf	137,4,c	;volatile
  3677                           
  3678                           ;TAD_LEDS.c: 31:             break;
  3679   000E1E  EF37  F007         	goto	l698
  3680   000E22                     l696:
  3681                           
  3682                           ;TAD_LEDS.c: 33:             LATAbits.LATA5 = 1;
  3683   000E22  8A89               	bsf	137,5,c	;volatile
  3684                           
  3685                           ;TAD_LEDS.c: 34:             break;
  3686   000E24  EF37  F007         	goto	l698
  3687   000E28                     l697:
  3688                           
  3689                           ;TAD_LEDS.c: 36:             LATAbits.LATA0 = 1;
  3690   000E28  8089               	bsf	137,0,c	;volatile
  3691                           
  3692                           ;TAD_LEDS.c: 37:             LATAbits.LATA1 = 1;
  3693   000E2A  8289               	bsf	137,1,c	;volatile
  3694                           
  3695                           ;TAD_LEDS.c: 38:             LATAbits.LATA2 = 1;
  3696   000E2C  8489               	bsf	137,2,c	;volatile
  3697                           
  3698                           ;TAD_LEDS.c: 39:             LATAbits.LATA3 = 1;
  3699   000E2E  8689               	bsf	137,3,c	;volatile
  3700                           
  3701                           ;TAD_LEDS.c: 40:             LATAbits.LATA4 = 1;
  3702   000E30  8889               	bsf	137,4,c	;volatile
  3703                           
  3704                           ;TAD_LEDS.c: 41:             LATAbits.LATA5 = 1;
  3705   000E32  8A89               	bsf	137,5,c	;volatile
  3706                           
  3707                           ;TAD_LEDS.c: 42:             break;
  3708   000E34  EF37  F007         	goto	l698
  3709   000E38                     l1967:
  3710   000E38  5050               	movf	setLedActual@ledActual^0,w,c
  3711                           
  3712                           ; Switch size 1, requested type "simple"
  3713                           ; Number of cases is 6, Range of values is 0 to 5
  3714                           ; switch strategies available:
  3715                           ; Name         Instructions Cycles
  3716                           ; simple_byte           19    10 (average)
  3717                           ;	Chosen strategy is simple_byte
  3718   000E3A  0A00               	xorlw	0	; case 0
  3719   000E3C  B4D8               	btfsc	status,2,c
  3720   000E3E  EF02  F007         	goto	l690
  3721   000E42  0A01               	xorlw	1	; case 1
  3722   000E44  B4D8               	btfsc	status,2,c
  3723   000E46  EF05  F007         	goto	l692
  3724   000E4A  0A03               	xorlw	3	; case 2
  3725   000E4C  B4D8               	btfsc	status,2,c
  3726   000E4E  EF08  F007         	goto	l693
  3727   000E52  0A01               	xorlw	1	; case 3
  3728   000E54  B4D8               	btfsc	status,2,c
  3729   000E56  EF0B  F007         	goto	l694
  3730   000E5A  0A07               	xorlw	7	; case 4
  3731   000E5C  B4D8               	btfsc	status,2,c
  3732   000E5E  EF0E  F007         	goto	l695
  3733   000E62  0A01               	xorlw	1	; case 5
  3734   000E64  B4D8               	btfsc	status,2,c
  3735   000E66  EF11  F007         	goto	l696
  3736   000E6A  EF14  F007         	goto	l697
  3737   000E6E                     l698:
  3738   000E6E  0012               	return		;funcret
  3739   000E70                     __end_of_setLedActual:
  3740                           	callstack 0
  3741                           
  3742 ;; *************** function _getActualLeds *****************
  3743 ;; Defined at:
  3744 ;;		line 37 in file "TAD_DATOS.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  leds            1    1[COMRAM] PTR unsigned char 
  3747 ;;		 -> ActualLeds(6), 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  i               2    2[COMRAM] int 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1
  3759 ;;      Params:         1       0       0
  3760 ;;      Locals:         2       0       0
  3761 ;;      Temps:          0       0       0
  3762 ;;      Totals:         3       0       0
  3763 ;;Total ram usage:        3 bytes
  3764 ;; Hardware stack levels used: 1
  3765 ;; Hardware stack levels required when called: 3
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_motor_LEDs
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text12
  3774   0011BA                     __ptext12:
  3775                           	callstack 0
  3776   0011BA                     _getActualLeds:
  3777                           	callstack 26
  3778   0011BA                     
  3779                           ;TAD_DATOS.c: 38:     for(int i = 0; i < 6; i++) {
  3780   0011BA  0E00               	movlw	0
  3781   0011BC  6E52               	movwf	(getActualLeds@i+1)^0,c
  3782   0011BE  0E00               	movlw	0
  3783   0011C0  6E51               	movwf	getActualLeds@i^0,c
  3784   0011C2                     l3133:
  3785                           
  3786                           ;TAD_DATOS.c: 39:         leds[i] = configurations[index][i];
  3787   0011C2  5051               	movf	getActualLeds@i^0,w,c
  3788   0011C4  0FC0               	addlw	low _configurations
  3789   0011C6  6ED9               	movwf	fsr2l,c
  3790   0011C8  6ADA               	clrf	fsr2h,c
  3791   0011CA  5050               	movf	getActualLeds@leds^0,w,c
  3792   0011CC  2451               	addwf	getActualLeds@i^0,w,c
  3793   0011CE  6EE1               	movwf	fsr1l,c
  3794   0011D0  6AE2               	clrf	fsr1h,c
  3795   0011D2  CFDF FFE7          	movff	indf2,indf1
  3796   0011D6                     
  3797                           ;TAD_DATOS.c: 40:     }
  3798   0011D6  4A51               	infsnz	getActualLeds@i^0,f,c
  3799   0011D8  2A52               	incf	(getActualLeds@i+1)^0,f,c
  3800   0011DA  BE52               	btfsc	(getActualLeds@i+1)^0,7,c
  3801   0011DC  EFF9  F008         	goto	u2341
  3802   0011E0  5052               	movf	(getActualLeds@i+1)^0,w,c
  3803   0011E2  E109               	bnz	u2340
  3804   0011E4  0E06               	movlw	6
  3805   0011E6  5C51               	subwf	getActualLeds@i^0,w,c
  3806   0011E8  A0D8               	btfss	status,0,c
  3807   0011EA  EFF9  F008         	goto	u2341
  3808   0011EE  EFFB  F008         	goto	u2340
  3809   0011F2                     u2341:
  3810   0011F2  EFE1  F008         	goto	l3133
  3811   0011F6                     u2340:
  3812   0011F6  0012               	return		;funcret
  3813   0011F8                     __end_of_getActualLeds:
  3814                           	callstack 0
  3815                           
  3816 ;; *************** function _motorTerminal *****************
  3817 ;; Defined at:
  3818 ;;		line 93 in file "TAD_TERMINAL.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  currentUser     1   17[COMRAM] PTR unsigned char 
  3823 ;;		 -> NULL(0), currentUser(5), 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1
  3833 ;;      Params:         0       0       0
  3834 ;;      Locals:         1       0       0
  3835 ;;      Temps:          0       0       0
  3836 ;;      Totals:         1       0       0
  3837 ;;Total ram usage:        1 bytes
  3838 ;; Hardware stack levels used: 1
  3839 ;; Hardware stack levels required when called: 7
  3840 ;; This function calls:
  3841 ;;		_Terminal_RXAvailable
  3842 ;;		_Terminal_ReceiveChar
  3843 ;;		_Terminal_SendChar
  3844 ;;		_Terminal_SendString
  3845 ;;		_getActualUID
  3846 ;;		_printfUID
  3847 ;;		_saveHourToData
  3848 ;;		_showAllConfigurations
  3849 ;;		_showMenu
  3850 ;; This function is called by:
  3851 ;;		_main
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text13
  3856   0003E8                     __ptext13:
  3857                           	callstack 0
  3858   0003E8                     _motorTerminal:
  3859                           	callstack 23
  3860   0003E8                     
  3861                           ;TAD_TERMINAL.c: 94:  static char state = 0;;TAD_TERMINAL.c: 96:  switch(state) {
  3862   0003E8  EFA2  F002         	goto	l3335
  3863   0003EC                     l3271:
  3864                           
  3865                           ;TAD_TERMINAL.c: 98:    if (Terminal_ReceiveChar() == 0x1B) {
  3866   0003EC  EC90  F00A         	call	_Terminal_ReceiveChar	;wreg free
  3867   0003F0  0A1B               	xorlw	27
  3868   0003F2  A4D8               	btfss	status,2,c
  3869   0003F4  EFFE  F001         	goto	u2521
  3870   0003F8  EF00  F002         	goto	u2520
  3871   0003FC                     u2521:
  3872   0003FC  EF04  F002         	goto	l3277
  3873   000400                     u2520:
  3874   000400                     
  3875                           ;TAD_TERMINAL.c: 99:     showMenu();
  3876   000400  EC38  F007         	call	_showMenu	;wreg free
  3877   000404                     
  3878                           ;TAD_TERMINAL.c: 100:     state = 1;
  3879   000404  0E01               	movlw	1
  3880   000406  6E2C               	movwf	motorTerminal@state^0,c
  3881   000408                     l3277:
  3882                           
  3883                           ;TAD_TERMINAL.c: 103:    if (hashtag_pressed == 1){
  3884   000408  042D               	decf	_hashtag_pressed^0,w,c
  3885   00040A  A4D8               	btfss	status,2,c
  3886   00040C  EF0A  F002         	goto	u2531
  3887   000410  EF0C  F002         	goto	u2530
  3888   000414                     u2531:
  3889   000414  EFB1  F002         	goto	l570
  3890   000418                     u2530:
  3891   000418                     
  3892                           ;TAD_TERMINAL.c: 104:     showMenu();
  3893   000418  EC38  F007         	call	_showMenu	;wreg free
  3894   00041C                     
  3895                           ;TAD_TERMINAL.c: 105:     state = 1;
  3896   00041C  0E01               	movlw	1
  3897   00041E  6E2C               	movwf	motorTerminal@state^0,c
  3898   000420                     
  3899                           ;TAD_TERMINAL.c: 106:     hashtag_pressed = 0;
  3900   000420  6A2D               	clrf	_hashtag_pressed^0,c
  3901   000422  EFB1  F002         	goto	l570
  3902   000426                     l3285:
  3903                           
  3904                           ;TAD_TERMINAL.c: 110:    if(Terminal_RXAvailable() == 1){
  3905   000426  EC44  F00A         	call	_Terminal_RXAvailable	;wreg free
  3906   00042A  06E8               	decf	wreg,f,c
  3907   00042C  A4D8               	btfss	status,2,c
  3908   00042E  EF1B  F002         	goto	u2541
  3909   000432  EF1D  F002         	goto	u2540
  3910   000436                     u2541:
  3911   000436  EFB1  F002         	goto	l570
  3912   00043A                     u2540:
  3913   00043A                     
  3914                           ;TAD_TERMINAL.c: 111:     if (Terminal_ReceiveChar() == '1') {
  3915   00043A  EC90  F00A         	call	_Terminal_ReceiveChar	;wreg free
  3916   00043E  0A31               	xorlw	49
  3917   000440  A4D8               	btfss	status,2,c
  3918   000442  EF25  F002         	goto	u2551
  3919   000446  EF27  F002         	goto	u2550
  3920   00044A                     u2551:
  3921   00044A  EF3D  F002         	goto	l3299
  3922   00044E                     u2550:
  3923   00044E                     
  3924                           ;TAD_TERMINAL.c: 112:      Terminal_SendString("\r\n");
  3925   00044E  0EC5               	movlw	low (STR_1+15)
  3926   000450  6E54               	movwf	Terminal_SendString@str^0,c
  3927   000452  0E1F               	movlw	high (STR_1+15)
  3928   000454  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3929   000456  EC4F  F009         	call	_Terminal_SendString	;wreg free
  3930   00045A                     
  3931                           ;TAD_TERMINAL.c: 113:      unsigned char *currentUser = getActualUID();
  3932   00045A  ECC6  F007         	call	_getActualUID	;wreg free
  3933   00045E  6E60               	movwf	motorTerminal@currentUser^0,c
  3934   000460                     
  3935                           ;TAD_TERMINAL.c: 117:      printfUID(currentUser);
  3936   000460  C060  F056         	movff	motorTerminal@currentUser,printfUID@currentUser
  3937   000464  EC40  F003         	call	_printfUID	;wreg free
  3938   000468                     
  3939                           ;TAD_TERMINAL.c: 119:      Terminal_SendString("\r\n");
  3940   000468  0EC5               	movlw	low (STR_1+15)
  3941   00046A  6E54               	movwf	Terminal_SendString@str^0,c
  3942   00046C  0E1F               	movlw	high (STR_1+15)
  3943   00046E  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3944   000470  EC4F  F009         	call	_Terminal_SendString	;wreg free
  3945   000474                     l3297:
  3946                           
  3947                           ;TAD_TERMINAL.c: 120:      state = 0;
  3948   000474  6A2C               	clrf	motorTerminal@state^0,c
  3949                           
  3950                           ;TAD_TERMINAL.c: 121:     }
  3951   000476  EFB1  F002         	goto	l570
  3952   00047A                     l3299:
  3953   00047A  EC90  F00A         	call	_Terminal_ReceiveChar	;wreg free
  3954   00047E  0A32               	xorlw	50
  3955   000480  A4D8               	btfss	status,2,c
  3956   000482  EF45  F002         	goto	u2561
  3957   000486  EF47  F002         	goto	u2560
  3958   00048A                     u2561:
  3959   00048A  EF51  F002         	goto	l3307
  3960   00048E                     u2560:
  3961   00048E                     
  3962                           ;TAD_TERMINAL.c: 123:      Terminal_SendString("\r\n");
  3963   00048E  0EC5               	movlw	low (STR_1+15)
  3964   000490  6E54               	movwf	Terminal_SendString@str^0,c
  3965   000492  0E1F               	movlw	high (STR_1+15)
  3966   000494  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3967   000496  EC4F  F009         	call	_Terminal_SendString	;wreg free
  3968   00049A                     
  3969                           ;TAD_TERMINAL.c: 124:      showAllConfigurations();
  3970   00049A  ECF2  F005         	call	_showAllConfigurations	;wreg free
  3971   00049E  EF3A  F002         	goto	l3297
  3972   0004A2                     l3307:
  3973   0004A2  EC90  F00A         	call	_Terminal_ReceiveChar	;wreg free
  3974   0004A6  0A33               	xorlw	51
  3975   0004A8  A4D8               	btfss	status,2,c
  3976   0004AA  EF59  F002         	goto	u2571
  3977   0004AE  EF5B  F002         	goto	u2570
  3978   0004B2                     u2571:
  3979   0004B2  EF6B  F002         	goto	l3313
  3980   0004B6                     u2570:
  3981   0004B6                     
  3982                           ;TAD_TERMINAL.c: 128:      Terminal_SendString("\r\n");
  3983   0004B6  0EC5               	movlw	low (STR_1+15)
  3984   0004B8  6E54               	movwf	Terminal_SendString@str^0,c
  3985   0004BA  0E1F               	movlw	high (STR_1+15)
  3986   0004BC  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3987   0004BE  EC4F  F009         	call	_Terminal_SendString	;wreg free
  3988                           
  3989                           ;TAD_TERMINAL.c: 129:      Terminal_SendString("Introduce la hora actual(HHMM): ");
  3990   0004C2  0E34               	movlw	low STR_19
  3991   0004C4  6E54               	movwf	Terminal_SendString@str^0,c
  3992   0004C6  0E1F               	movlw	high STR_19
  3993   0004C8  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  3994   0004CA  EC4F  F009         	call	_Terminal_SendString	;wreg free
  3995   0004CE                     
  3996                           ;TAD_TERMINAL.c: 130:      state = 2;
  3997   0004CE  0E02               	movlw	2
  3998   0004D0  6E2C               	movwf	motorTerminal@state^0,c
  3999                           
  4000                           ;TAD_TERMINAL.c: 131:     }
  4001   0004D2  EFB1  F002         	goto	l570
  4002   0004D6                     l3313:
  4003                           
  4004                           ;TAD_TERMINAL.c: 133:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  4005   0004D6  0ED1               	movlw	low STR_20
  4006   0004D8  6E54               	movwf	Terminal_SendString@str^0,c
  4007   0004DA  0E1E               	movlw	high STR_20
  4008   0004DC  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4009   0004DE  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4010   0004E2  EF3A  F002         	goto	l3297
  4011   0004E6                     l3317:
  4012                           
  4013                           ;TAD_TERMINAL.c: 139:    if(Terminal_RXAvailable() == 1){
  4014   0004E6  EC44  F00A         	call	_Terminal_RXAvailable	;wreg free
  4015   0004EA  06E8               	decf	wreg,f,c
  4016   0004EC  A4D8               	btfss	status,2,c
  4017   0004EE  EF7B  F002         	goto	u2581
  4018   0004F2  EF7D  F002         	goto	u2580
  4019   0004F6                     u2581:
  4020   0004F6  EFB1  F002         	goto	l570
  4021   0004FA                     u2580:
  4022   0004FA                     
  4023                           ;TAD_TERMINAL.c: 140:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 141:   
      +                            static char index = 0;;TAD_TERMINAL.c: 142:     hour[index] = Terminal_ReceiveChar();
  4024   0004FA  502B               	movf	motorTerminal@index^0,w,c
  4025   0004FC  0F6B               	addlw	low motorTerminal@hour
  4026   0004FE  6ED9               	movwf	fsr2l,c
  4027   000500  6ADA               	clrf	fsr2h,c
  4028   000502  EC90  F00A         	call	_Terminal_ReceiveChar	;wreg free
  4029   000506  6EDF               	movwf	indf2,c
  4030                           
  4031                           ;TAD_TERMINAL.c: 143:     Terminal_SendChar(hour[index]);
  4032   000508  502B               	movf	motorTerminal@index^0,w,c
  4033   00050A  0F6B               	addlw	low motorTerminal@hour
  4034   00050C  6ED9               	movwf	fsr2l,c
  4035   00050E  6ADA               	clrf	fsr2h,c
  4036   000510  50DF               	movf	indf2,w,c
  4037   000512  ECF8  F009         	call	_Terminal_SendChar
  4038   000516                     
  4039                           ;TAD_TERMINAL.c: 144:     index++;
  4040   000516  2A2B               	incf	motorTerminal@index^0,f,c
  4041   000518                     
  4042                           ;TAD_TERMINAL.c: 145:     if(index == 4){
  4043   000518  0E04               	movlw	4
  4044   00051A  182B               	xorwf	motorTerminal@index^0,w,c
  4045   00051C  A4D8               	btfss	status,2,c
  4046   00051E  EF93  F002         	goto	u2591
  4047   000522  EF95  F002         	goto	u2590
  4048   000526                     u2591:
  4049   000526  EFB1  F002         	goto	l570
  4050   00052A                     u2590:
  4051   00052A                     
  4052                           ;TAD_TERMINAL.c: 146:      saveHourToData(hour);
  4053   00052A  0E6B               	movlw	low motorTerminal@hour
  4054   00052C  6E50               	movwf	saveHourToData@hour^0,c
  4055   00052E  EC34  F009         	call	_saveHourToData	;wreg free
  4056   000532                     
  4057                           ;TAD_TERMINAL.c: 147:      Terminal_SendString("\r\nHora introduida correctament\r\n");
  4058   000532  0E13               	movlw	low STR_21
  4059   000534  6E54               	movwf	Terminal_SendString@str^0,c
  4060   000536  0E1F               	movlw	high STR_21
  4061   000538  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4062   00053A  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4063   00053E                     
  4064                           ;TAD_TERMINAL.c: 148:      index = 0;
  4065   00053E  6A2B               	clrf	motorTerminal@index^0,c
  4066   000540  EF3A  F002         	goto	l3297
  4067   000544                     l3335:
  4068   000544  502C               	movf	motorTerminal@state^0,w,c
  4069                           
  4070                           ; Switch size 1, requested type "simple"
  4071                           ; Number of cases is 3, Range of values is 0 to 2
  4072                           ; switch strategies available:
  4073                           ; Name         Instructions Cycles
  4074                           ; simple_byte           10     6 (average)
  4075                           ;	Chosen strategy is simple_byte
  4076   000546  0A00               	xorlw	0	; case 0
  4077   000548  B4D8               	btfsc	status,2,c
  4078   00054A  EFF6  F001         	goto	l3271
  4079   00054E  0A01               	xorlw	1	; case 1
  4080   000550  B4D8               	btfsc	status,2,c
  4081   000552  EF13  F002         	goto	l3285
  4082   000556  0A03               	xorlw	3	; case 2
  4083   000558  B4D8               	btfsc	status,2,c
  4084   00055A  EF73  F002         	goto	l3317
  4085   00055E  EFB1  F002         	goto	l570
  4086   000562                     l570:
  4087   000562  0012               	return		;funcret
  4088   000564                     __end_of_motorTerminal:
  4089                           	callstack 0
  4090                           
  4091 ;; *************** function _showMenu *****************
  4092 ;; Defined at:
  4093 ;;		line 44 in file "TAD_TERMINAL.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1
  4107 ;;      Params:         0       0       0
  4108 ;;      Locals:         0       0       0
  4109 ;;      Temps:          0       0       0
  4110 ;;      Totals:         0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used: 1
  4113 ;; Hardware stack levels required when called: 6
  4114 ;; This function calls:
  4115 ;;		_Terminal_SendString
  4116 ;; This function is called by:
  4117 ;;		_motorTerminal
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text14
  4122   000E70                     __ptext14:
  4123                           	callstack 0
  4124   000E70                     _showMenu:
  4125                           	callstack 23
  4126   000E70                     
  4127                           ;TAD_TERMINAL.c: 45:  Terminal_SendString("---------------\r\n");
  4128   000E70  0EB6               	movlw	low STR_1
  4129   000E72  6E54               	movwf	Terminal_SendString@str^0,c
  4130   000E74  0E1F               	movlw	high STR_1
  4131   000E76  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4132   000E78  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4133                           
  4134                           ;TAD_TERMINAL.c: 46:  Terminal_SendString("MenÃº principal\r\n");
  4135   000E7C  0EC8               	movlw	low STR_2
  4136   000E7E  6E54               	movwf	Terminal_SendString@str^0,c
  4137   000E80  0E1F               	movlw	high STR_2
  4138   000E82  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4139   000E84  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4140                           
  4141                           ;TAD_TERMINAL.c: 47:  Terminal_SendString("---------------\r\n");
  4142   000E88  0EB6               	movlw	low STR_1
  4143   000E8A  6E54               	movwf	Terminal_SendString@str^0,c
  4144   000E8C  0E1F               	movlw	high STR_1
  4145   000E8E  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4146   000E90  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4147                           
  4148                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("Tria una opciÃ³:\r\n");
  4149   000E94  0EA3               	movlw	low STR_4
  4150   000E96  6E54               	movwf	Terminal_SendString@str^0,c
  4151   000E98  0E1F               	movlw	high STR_4
  4152   000E9A  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4153   000E9C  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4154                           
  4155                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  4156   000EA0  0E72               	movlw	low STR_5
  4157   000EA2  6E54               	movwf	Terminal_SendString@str^0,c
  4158   000EA4  0E1F               	movlw	high STR_5
  4159   000EA6  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4160   000EA8  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4161                           
  4162                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  4163   000EAC  0E55               	movlw	low STR_6
  4164   000EAE  6E54               	movwf	Terminal_SendString@str^0,c
  4165   000EB0  0E1F               	movlw	high STR_6
  4166   000EB2  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4167   000EB4  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4168                           
  4169                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  4170   000EB8  0EF2               	movlw	low STR_7
  4171   000EBA  6E54               	movwf	Terminal_SendString@str^0,c
  4172   000EBC  0E1E               	movlw	high STR_7
  4173   000EBE  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4174   000EC0  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4175                           
  4176                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("OpciÃ³: ");
  4177   000EC4  0EE4               	movlw	low STR_8
  4178   000EC6  6E54               	movwf	Terminal_SendString@str^0,c
  4179   000EC8  0E1F               	movlw	high STR_8
  4180   000ECA  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4181   000ECC  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4182   000ED0  0012               	return		;funcret
  4183   000ED2                     __end_of_showMenu:
  4184                           	callstack 0
  4185                           
  4186 ;; *************** function _showAllConfigurations *****************
  4187 ;; Defined at:
  4188 ;;		line 43 in file "TAD_DATOS.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  j               2    7[COMRAM] int 
  4193 ;;  i               2    9[COMRAM] int 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1
  4203 ;;      Params:         0       0       0
  4204 ;;      Locals:         4       0       0
  4205 ;;      Temps:          0       0       0
  4206 ;;      Totals:         4       0       0
  4207 ;;Total ram usage:        4 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 6
  4210 ;; This function calls:
  4211 ;;		_Terminal_SendChar
  4212 ;;		_Terminal_SendString
  4213 ;; This function is called by:
  4214 ;;		_motorTerminal
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text15
  4219   000BE4                     __ptext15:
  4220                           	callstack 0
  4221   000BE4                     _showAllConfigurations:
  4222                           	callstack 23
  4223   000BE4                     
  4224                           ;TAD_DATOS.c: 44:     for (int i = 0; i < 4; i++) {
  4225   000BE4  0E00               	movlw	0
  4226   000BE6  6E59               	movwf	(showAllConfigurations@i+1)^0,c
  4227   000BE8  0E00               	movlw	0
  4228   000BEA  6E58               	movwf	showAllConfigurations@i^0,c
  4229   000BEC                     l3093:
  4230                           
  4231                           ;TAD_DATOS.c: 45:         Terminal_SendString("User ");
  4232   000BEC  0EED               	movlw	low STR_22
  4233   000BEE  6E54               	movwf	Terminal_SendString@str^0,c
  4234   000BF0  0E1F               	movlw	high STR_22
  4235   000BF2  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4236   000BF4  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4237   000BF8                     
  4238                           ;TAD_DATOS.c: 46:         Terminal_SendChar('1' + i);
  4239   000BF8  5058               	movf	showAllConfigurations@i^0,w,c
  4240   000BFA  0F31               	addlw	49
  4241   000BFC  ECF8  F009         	call	_Terminal_SendChar
  4242   000C00                     
  4243                           ;TAD_DATOS.c: 47:         Terminal_SendString(" Config: ");
  4244   000C00  0EDA               	movlw	low STR_23
  4245   000C02  6E54               	movwf	Terminal_SendString@str^0,c
  4246   000C04  0E1F               	movlw	high STR_23
  4247   000C06  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4248   000C08  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4249   000C0C                     
  4250                           ;TAD_DATOS.c: 49:         for (int j = 0; j < 6; j++) {
  4251   000C0C  0E00               	movlw	0
  4252   000C0E  6E57               	movwf	(showAllConfigurations@j+1)^0,c
  4253   000C10  0E00               	movlw	0
  4254   000C12  6E56               	movwf	showAllConfigurations@j^0,c
  4255   000C14                     l3105:
  4256                           
  4257                           ;TAD_DATOS.c: 51:             Terminal_SendChar('0' + configurations[i][j]);
  4258   000C14  5058               	movf	showAllConfigurations@i^0,w,c
  4259   000C16  0D06               	mullw	6
  4260   000C18  50F3               	movf	243,w,c
  4261   000C1A  0FC0               	addlw	low _configurations
  4262   000C1C  2456               	addwf	showAllConfigurations@j^0,w,c
  4263   000C1E  6ED9               	movwf	fsr2l,c
  4264   000C20  6ADA               	clrf	fsr2h,c
  4265   000C22  50DF               	movf	indf2,w,c
  4266   000C24  0F30               	addlw	48
  4267   000C26  ECF8  F009         	call	_Terminal_SendChar
  4268   000C2A                     
  4269                           ;TAD_DATOS.c: 52:             Terminal_SendString(" ");
  4270   000C2A  0EFB               	movlw	low (STR_13+2)
  4271   000C2C  6E54               	movwf	Terminal_SendString@str^0,c
  4272   000C2E  0E1F               	movlw	high (STR_13+2)
  4273   000C30  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4274   000C32  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4275   000C36                     
  4276                           ;TAD_DATOS.c: 53:         }
  4277   000C36  4A56               	infsnz	showAllConfigurations@j^0,f,c
  4278   000C38  2A57               	incf	(showAllConfigurations@j+1)^0,f,c
  4279   000C3A  BE57               	btfsc	(showAllConfigurations@j+1)^0,7,c
  4280   000C3C  EF29  F006         	goto	u2321
  4281   000C40  5057               	movf	(showAllConfigurations@j+1)^0,w,c
  4282   000C42  E109               	bnz	u2320
  4283   000C44  0E06               	movlw	6
  4284   000C46  5C56               	subwf	showAllConfigurations@j^0,w,c
  4285   000C48  A0D8               	btfss	status,0,c
  4286   000C4A  EF29  F006         	goto	u2321
  4287   000C4E  EF2B  F006         	goto	u2320
  4288   000C52                     u2321:
  4289   000C52  EF0A  F006         	goto	l3105
  4290   000C56                     u2320:
  4291   000C56                     
  4292                           ;TAD_DATOS.c: 54:         Terminal_SendString("\r\n");
  4293   000C56  0EC5               	movlw	low (STR_1+15)
  4294   000C58  6E54               	movwf	Terminal_SendString@str^0,c
  4295   000C5A  0E1F               	movlw	high (STR_1+15)
  4296   000C5C  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4297   000C5E  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4298   000C62                     
  4299                           ;TAD_DATOS.c: 55:     }
  4300   000C62  4A58               	infsnz	showAllConfigurations@i^0,f,c
  4301   000C64  2A59               	incf	(showAllConfigurations@i+1)^0,f,c
  4302   000C66  BE59               	btfsc	(showAllConfigurations@i+1)^0,7,c
  4303   000C68  EF3F  F006         	goto	u2331
  4304   000C6C  5059               	movf	(showAllConfigurations@i+1)^0,w,c
  4305   000C6E  E109               	bnz	u2330
  4306   000C70  0E04               	movlw	4
  4307   000C72  5C58               	subwf	showAllConfigurations@i^0,w,c
  4308   000C74  A0D8               	btfss	status,0,c
  4309   000C76  EF3F  F006         	goto	u2331
  4310   000C7A  EF41  F006         	goto	u2330
  4311   000C7E                     u2331:
  4312   000C7E  EFF6  F005         	goto	l3093
  4313   000C82                     u2330:
  4314   000C82  0012               	return		;funcret
  4315   000C84                     __end_of_showAllConfigurations:
  4316                           	callstack 0
  4317                           
  4318 ;; *************** function _saveHourToData *****************
  4319 ;; Defined at:
  4320 ;;		line 63 in file "TAD_DATOS.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  hour            1    1[COMRAM] PTR unsigned char 
  4323 ;;		 -> motorTerminal@hour(4), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1
  4335 ;;      Params:         1       0       0
  4336 ;;      Locals:         0       0       0
  4337 ;;      Temps:          0       0       0
  4338 ;;      Totals:         1       0       0
  4339 ;;Total ram usage:        1 bytes
  4340 ;; Hardware stack levels used: 1
  4341 ;; Hardware stack levels required when called: 3
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_motorTerminal
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text16
  4350   001268                     __ptext16:
  4351                           	callstack 0
  4352   001268                     _saveHourToData:
  4353                           	callstack 26
  4354   001268                     
  4355                           ;TAD_DATOS.c: 64:     currentTime[0] = hour[0];
  4356   001268  5050               	movf	saveHourToData@hour^0,w,c
  4357   00126A  6ED9               	movwf	fsr2l,c
  4358   00126C  6ADA               	clrf	fsr2h,c
  4359   00126E  50DF               	movf	indf2,w,c
  4360   001270  6E67               	movwf	_currentTime^0,c
  4361   001272                     
  4362                           ;TAD_DATOS.c: 65:     currentTime[1] = hour[1];
  4363   001272  5050               	movf	saveHourToData@hour^0,w,c
  4364   001274  6ED9               	movwf	fsr2l,c
  4365   001276  6ADA               	clrf	fsr2h,c
  4366   001278  0E01               	movlw	1
  4367   00127A  26D9               	addwf	fsr2l,f,c
  4368   00127C  50DF               	movf	indf2,w,c
  4369   00127E  6E68               	movwf	(_currentTime+1)^0,c
  4370   001280                     
  4371                           ;TAD_DATOS.c: 66:     currentTime[2] = hour[2];
  4372   001280  5050               	movf	saveHourToData@hour^0,w,c
  4373   001282  6ED9               	movwf	fsr2l,c
  4374   001284  6ADA               	clrf	fsr2h,c
  4375   001286  0E02               	movlw	2
  4376   001288  26D9               	addwf	fsr2l,f,c
  4377   00128A  50DF               	movf	indf2,w,c
  4378   00128C  6E69               	movwf	(_currentTime+2)^0,c
  4379   00128E                     
  4380                           ;TAD_DATOS.c: 67:     currentTime[3] = hour[3];
  4381   00128E  5050               	movf	saveHourToData@hour^0,w,c
  4382   001290  6ED9               	movwf	fsr2l,c
  4383   001292  6ADA               	clrf	fsr2h,c
  4384   001294  0E03               	movlw	3
  4385   001296  26D9               	addwf	fsr2l,f,c
  4386   001298  50DF               	movf	indf2,w,c
  4387   00129A  6E6A               	movwf	(_currentTime+3)^0,c
  4388   00129C  0012               	return		;funcret
  4389   00129E                     __end_of_saveHourToData:
  4390                           	callstack 0
  4391                           
  4392 ;; *************** function _printfUID *****************
  4393 ;; Defined at:
  4394 ;;		line 59 in file "TAD_TERMINAL.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  4397 ;;		 -> NULL(0), currentUser(5), 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  low             1   14[COMRAM] unsigned char 
  4400 ;;  high            1   13[COMRAM] unsigned char 
  4401 ;;  i               2   15[COMRAM] int 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMRAM   BANK0   BANK1
  4411 ;;      Params:         1       0       0
  4412 ;;      Locals:         8       0       0
  4413 ;;      Temps:          1       0       0
  4414 ;;      Totals:        10       0       0
  4415 ;;Total ram usage:       10 bytes
  4416 ;; Hardware stack levels used: 1
  4417 ;; Hardware stack levels required when called: 6
  4418 ;; This function calls:
  4419 ;;		_Terminal_SendChar
  4420 ;;		_Terminal_SendString
  4421 ;; This function is called by:
  4422 ;;		_motorTerminal
  4423 ;;		_setCurrentUser
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text17
  4428   000680                     __ptext17:
  4429                           	callstack 0
  4430   000680                     _printfUID:
  4431                           	callstack 23
  4432   000680                     
  4433                           ;TAD_TERMINAL.c: 60:  Terminal_SendString("UID: ");
  4434   000680  0EF3               	movlw	low STR_9
  4435   000682  6E54               	movwf	Terminal_SendString@str^0,c
  4436   000684  0E1F               	movlw	high STR_9
  4437   000686  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4438   000688  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4439   00068C                     
  4440                           ;TAD_TERMINAL.c: 61:  for (int i = 0; i < 5; i++) {
  4441   00068C  0E00               	movlw	0
  4442   00068E  6E5F               	movwf	(printfUID@i+1)^0,c
  4443   000690  0E00               	movlw	0
  4444   000692  6E5E               	movwf	printfUID@i^0,c
  4445   000694                     l3057:
  4446                           
  4447                           ;TAD_TERMINAL.c: 63:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  4448   000694  5056               	movf	printfUID@currentUser^0,w,c
  4449   000696  245E               	addwf	printfUID@i^0,w,c
  4450   000698  6ED9               	movwf	fsr2l,c
  4451   00069A  6ADA               	clrf	fsr2h,c
  4452   00069C  50DF               	movf	indf2,w,c
  4453   00069E  6E57               	movwf	??_printfUID^0,c
  4454   0006A0  3857               	swapf	??_printfUID^0,w,c
  4455   0006A2  0B0F               	andlw	15
  4456   0006A4  0B0F               	andlw	15
  4457   0006A6  6E5C               	movwf	printfUID@high^0,c
  4458   0006A8                     
  4459                           ;TAD_TERMINAL.c: 64:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  4460   0006A8  0E09               	movlw	9
  4461   0006AA  645C               	cpfsgt	printfUID@high^0,c
  4462   0006AC  EF5A  F003         	goto	u2281
  4463   0006B0  EF5C  F003         	goto	u2280
  4464   0006B4                     u2281:
  4465   0006B4  EF64  F003         	goto	l3063
  4466   0006B8                     u2280:
  4467   0006B8  0E37               	movlw	55
  4468   0006BA  245C               	addwf	printfUID@high^0,w,c
  4469   0006BC  6E58               	movwf	_printfUID$918^0,c
  4470   0006BE  6A59               	clrf	(_printfUID$918+1)^0,c
  4471   0006C0  0E00               	movlw	0
  4472   0006C2  2259               	addwfc	(_printfUID$918+1)^0,f,c
  4473   0006C4  EF6A  F003         	goto	l3065
  4474   0006C8                     l3063:
  4475   0006C8  0E30               	movlw	48
  4476   0006CA  245C               	addwf	printfUID@high^0,w,c
  4477   0006CC  6E58               	movwf	_printfUID$918^0,c
  4478   0006CE  6A59               	clrf	(_printfUID$918+1)^0,c
  4479   0006D0  0E00               	movlw	0
  4480   0006D2  2259               	addwfc	(_printfUID$918+1)^0,f,c
  4481   0006D4                     l3065:
  4482   0006D4  5058               	movf	_printfUID$918^0,w,c
  4483   0006D6  ECF8  F009         	call	_Terminal_SendChar
  4484   0006DA                     
  4485                           ;TAD_TERMINAL.c: 67:   unsigned char low = currentUser[i] & 0x0F;
  4486   0006DA  5056               	movf	printfUID@currentUser^0,w,c
  4487   0006DC  245E               	addwf	printfUID@i^0,w,c
  4488   0006DE  6ED9               	movwf	fsr2l,c
  4489   0006E0  6ADA               	clrf	fsr2h,c
  4490   0006E2  50DF               	movf	indf2,w,c
  4491   0006E4  0B0F               	andlw	15
  4492   0006E6  6E5D               	movwf	printfUID@low^0,c
  4493   0006E8                     
  4494                           ;TAD_TERMINAL.c: 68:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  4495   0006E8  0E09               	movlw	9
  4496   0006EA  645D               	cpfsgt	printfUID@low^0,c
  4497   0006EC  EF7A  F003         	goto	u2291
  4498   0006F0  EF7C  F003         	goto	u2290
  4499   0006F4                     u2291:
  4500   0006F4  EF84  F003         	goto	l3073
  4501   0006F8                     u2290:
  4502   0006F8  0E37               	movlw	55
  4503   0006FA  245D               	addwf	printfUID@low^0,w,c
  4504   0006FC  6E5A               	movwf	_printfUID$920^0,c
  4505   0006FE  6A5B               	clrf	(_printfUID$920+1)^0,c
  4506   000700  0E00               	movlw	0
  4507   000702  225B               	addwfc	(_printfUID$920+1)^0,f,c
  4508   000704  EF8A  F003         	goto	l3075
  4509   000708                     l3073:
  4510   000708  0E30               	movlw	48
  4511   00070A  245D               	addwf	printfUID@low^0,w,c
  4512   00070C  6E5A               	movwf	_printfUID$920^0,c
  4513   00070E  6A5B               	clrf	(_printfUID$920+1)^0,c
  4514   000710  0E00               	movlw	0
  4515   000712  225B               	addwfc	(_printfUID$920+1)^0,f,c
  4516   000714                     l3075:
  4517   000714  505A               	movf	_printfUID$920^0,w,c
  4518   000716  ECF8  F009         	call	_Terminal_SendChar
  4519   00071A                     
  4520                           ;TAD_TERMINAL.c: 71:   if (i < 4) Terminal_SendString("-");
  4521   00071A  BE5F               	btfsc	(printfUID@i+1)^0,7,c
  4522   00071C  EF9B  F003         	goto	u2300
  4523   000720  505F               	movf	(printfUID@i+1)^0,w,c
  4524   000722  E107               	bnz	u2301
  4525   000724  0E04               	movlw	4
  4526   000726  5C5E               	subwf	printfUID@i^0,w,c
  4527   000728  B0D8               	btfsc	status,0,c
  4528   00072A  EF99  F003         	goto	u2301
  4529   00072E  EF9B  F003         	goto	u2300
  4530   000732                     u2301:
  4531   000732  EFA1  F003         	goto	l3081
  4532   000736                     u2300:
  4533   000736  0EFD               	movlw	low STR_10
  4534   000738  6E54               	movwf	Terminal_SendString@str^0,c
  4535   00073A  0E1F               	movlw	high STR_10
  4536   00073C  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4537   00073E  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4538   000742                     l3081:
  4539                           
  4540                           ;TAD_TERMINAL.c: 72:  }
  4541   000742  4A5E               	infsnz	printfUID@i^0,f,c
  4542   000744  2A5F               	incf	(printfUID@i+1)^0,f,c
  4543   000746  BE5F               	btfsc	(printfUID@i+1)^0,7,c
  4544   000748  EFAF  F003         	goto	u2311
  4545   00074C  505F               	movf	(printfUID@i+1)^0,w,c
  4546   00074E  E109               	bnz	u2310
  4547   000750  0E05               	movlw	5
  4548   000752  5C5E               	subwf	printfUID@i^0,w,c
  4549   000754  A0D8               	btfss	status,0,c
  4550   000756  EFAF  F003         	goto	u2311
  4551   00075A  EFB1  F003         	goto	u2310
  4552   00075E                     u2311:
  4553   00075E  EF4A  F003         	goto	l3057
  4554   000762                     u2310:
  4555   000762                     
  4556                           ;TAD_TERMINAL.c: 73:  Terminal_SendString("\r\n");
  4557   000762  0EC5               	movlw	low (STR_1+15)
  4558   000764  6E54               	movwf	Terminal_SendString@str^0,c
  4559   000766  0E1F               	movlw	high (STR_1+15)
  4560   000768  6E55               	movwf	(Terminal_SendString@str+1)^0,c
  4561   00076A  EC4F  F009         	call	_Terminal_SendString	;wreg free
  4562   00076E  0012               	return		;funcret
  4563   000770                     __end_of_printfUID:
  4564                           	callstack 0
  4565                           
  4566 ;; *************** function _Terminal_SendString *****************
  4567 ;; Defined at:
  4568 ;;		line 38 in file "TAD_TERMINAL.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  str             2    5[COMRAM] PTR const unsigned char 
  4571 ;;		 -> STR_27(2), STR_26(22), STR_25(3), STR_24(2), 
  4572 ;;		 -> STR_23(10), STR_22(6), STR_21(33), STR_20(33), 
  4573 ;;		 -> STR_19(33), STR_18(3), STR_17(3), STR_16(3), 
  4574 ;;		 -> STR_15(3), STR_14(3), STR_13(4), STR_12(3), 
  4575 ;;		 -> STR_11(3), STR_10(2), STR_9(6), STR_8(9), 
  4576 ;;		 -> STR_7(33), STR_6(29), STR_5(27), STR_4(19), 
  4577 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1
  4589 ;;      Params:         2       0       0
  4590 ;;      Locals:         0       0       0
  4591 ;;      Temps:          0       0       0
  4592 ;;      Totals:         2       0       0
  4593 ;;Total ram usage:        2 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 5
  4596 ;; This function calls:
  4597 ;;		_Terminal_SendChar
  4598 ;; This function is called by:
  4599 ;;		_showMenu
  4600 ;;		_printfUID
  4601 ;;		_motorTerminal
  4602 ;;		_showAllConfigurations
  4603 ;;		_printLedConfig
  4604 ;;		_setCurrentUser
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text18
  4609   00129E                     __ptext18:
  4610                           	callstack 0
  4611   00129E                     _Terminal_SendString:
  4612                           	callstack 23
  4613   00129E                     
  4614                           ;TAD_TERMINAL.c: 39:  while (*str) {
  4615   00129E  EF5B  F009         	goto	l2883
  4616   0012A2                     l2879:
  4617                           
  4618                           ;TAD_TERMINAL.c: 40:   Terminal_SendChar(*str++);
  4619   0012A2  C054  FFF6         	movff	Terminal_SendString@str,tblptrl
  4620   0012A6  C055  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4621   0012AA                     	if	0	;tblptru may be non-zero
  4622   0012AA                     	endif
  4623   0012AA                     	if	0	;tblptru may be non-zero
  4624   0012AA                     	endif
  4625   0012AA  0008               	tblrd		*
  4626   0012AC  50F5               	movf	tablat,w,c
  4627   0012AE  ECF8  F009         	call	_Terminal_SendChar
  4628   0012B2  4A54               	infsnz	Terminal_SendString@str^0,f,c
  4629   0012B4  2A55               	incf	(Terminal_SendString@str+1)^0,f,c
  4630   0012B6                     l2883:
  4631                           
  4632                           ;TAD_TERMINAL.c: 39:  while (*str) {
  4633   0012B6  C054  FFF6         	movff	Terminal_SendString@str,tblptrl
  4634   0012BA  C055  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  4635   0012BE                     	if	0	;tblptru may be non-zero
  4636   0012BE                     	endif
  4637   0012BE                     	if	0	;tblptru may be non-zero
  4638   0012BE                     	endif
  4639   0012BE  0008               	tblrd		*
  4640   0012C0  50F5               	movf	tablat,w,c
  4641   0012C2  0900               	iorlw	0
  4642   0012C4  A4D8               	btfss	status,2,c
  4643   0012C6  EF67  F009         	goto	u1881
  4644   0012CA  EF69  F009         	goto	u1880
  4645   0012CE                     u1881:
  4646   0012CE  EF51  F009         	goto	l2879
  4647   0012D2                     u1880:
  4648   0012D2  0012               	return		;funcret
  4649   0012D4                     __end_of_Terminal_SendString:
  4650                           	callstack 0
  4651                           
  4652 ;; *************** function _Terminal_SendChar *****************
  4653 ;; Defined at:
  4654 ;;		line 27 in file "TAD_TERMINAL.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  c               1    wreg     unsigned char 
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  c               1    4[COMRAM] unsigned char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		wreg, status,2, status,0, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1
  4668 ;;      Params:         0       0       0
  4669 ;;      Locals:         1       0       0
  4670 ;;      Temps:          0       0       0
  4671 ;;      Totals:         1       0       0
  4672 ;;Total ram usage:        1 bytes
  4673 ;; Hardware stack levels used: 1
  4674 ;; Hardware stack levels required when called: 4
  4675 ;; This function calls:
  4676 ;;		_Terminal_TXAvailable
  4677 ;; This function is called by:
  4678 ;;		_Terminal_SendString
  4679 ;;		_printfUID
  4680 ;;		_motorTerminal
  4681 ;;		_showAllConfigurations
  4682 ;;		_printLedConfig
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text19
  4687   0013F0                     __ptext19:
  4688                           	callstack 0
  4689   0013F0                     _Terminal_SendChar:
  4690                           	callstack 23
  4691                           
  4692                           ;incstack = 0
  4693                           ;Terminal_SendChar@c stored from wreg
  4694   0013F0  6E53               	movwf	Terminal_SendChar@c^0,c
  4695   0013F2                     l2811:
  4696   0013F2  EC07  F00A         	call	_Terminal_TXAvailable	;wreg free
  4697   0013F6  5050               	movf	?_Terminal_TXAvailable^0,w,c
  4698   0013F8  1051               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  4699   0013FA  B4D8               	btfsc	status,2,c
  4700   0013FC  EF02  F00A         	goto	u1831
  4701   001400  EF04  F00A         	goto	u1830
  4702   001404                     u1831:
  4703   001404  EFF9  F009         	goto	l2811
  4704   001408                     u1830:
  4705   001408                     
  4706                           ;TAD_TERMINAL.c: 29:  TXREG = c;
  4707   001408  C053  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  4708   00140C  0012               	return		;funcret
  4709   00140E                     __end_of_Terminal_SendChar:
  4710                           	callstack 0
  4711                           
  4712 ;; *************** function _Terminal_TXAvailable *****************
  4713 ;; Defined at:
  4714 ;;		line 17 in file "TAD_TERMINAL.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  2    1[COMRAM] int 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1
  4728 ;;      Params:         2       0       0
  4729 ;;      Locals:         0       0       0
  4730 ;;      Temps:          1       0       0
  4731 ;;      Totals:         3       0       0
  4732 ;;Total ram usage:        3 bytes
  4733 ;; Hardware stack levels used: 1
  4734 ;; Hardware stack levels required when called: 3
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_Terminal_SendChar
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text20
  4743   00140E                     __ptext20:
  4744                           	callstack 0
  4745   00140E                     _Terminal_TXAvailable:
  4746                           	callstack 23
  4747   00140E                     
  4748                           ;TAD_TERMINAL.c: 18:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  4749   00140E  B89E               	btfsc	158,4,c	;volatile
  4750   001410  EF0C  F00A         	goto	u1801
  4751   001414  EF10  F00A         	goto	u1800
  4752   001418                     u1801:
  4753   001418  6A52               	clrf	??_Terminal_TXAvailable^0,c
  4754   00141A  2A52               	incf	??_Terminal_TXAvailable^0,f,c
  4755   00141C  EF11  F00A         	goto	u1808
  4756   001420                     u1800:
  4757   001420  6A52               	clrf	??_Terminal_TXAvailable^0,c
  4758   001422                     u1808:
  4759   001422  5052               	movf	??_Terminal_TXAvailable^0,w,c
  4760   001424  6E50               	movwf	?_Terminal_TXAvailable^0,c
  4761   001426  6A51               	clrf	(?_Terminal_TXAvailable+1)^0,c
  4762   001428  0012               	return		;funcret
  4763   00142A                     __end_of_Terminal_TXAvailable:
  4764                           	callstack 0
  4765                           
  4766 ;; *************** function _getActualUID *****************
  4767 ;; Defined at:
  4768 ;;		line 30 in file "TAD_DATOS.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    1[COMRAM] PTR unsigned char 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1
  4782 ;;      Params:         2       0       0
  4783 ;;      Locals:         0       0       0
  4784 ;;      Temps:          0       0       0
  4785 ;;      Totals:         2       0       0
  4786 ;;Total ram usage:        2 bytes
  4787 ;; Hardware stack levels used: 1
  4788 ;; Hardware stack levels required when called: 3
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_motorTerminal
  4793 ;;		_motor_RFID
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text21
  4798   000F8C                     __ptext21:
  4799                           	callstack 0
  4800   000F8C                     _getActualUID:
  4801                           	callstack 26
  4802   000F8C                     
  4803                           ;TAD_DATOS.c: 31:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  4804   000F8C  5047               	movf	_currentUser^0,w,c
  4805   000F8E  A4D8               	btfss	status,2,c
  4806   000F90  EFCC  F007         	goto	u2151
  4807   000F94  EFCE  F007         	goto	u2150
  4808   000F98                     u2151:
  4809   000F98  EFF1  F007         	goto	l3005
  4810   000F9C                     u2150:
  4811   000F9C  5048               	movf	(_currentUser+1)^0,w,c
  4812   000F9E  A4D8               	btfss	status,2,c
  4813   000FA0  EFD4  F007         	goto	u2161
  4814   000FA4  EFD6  F007         	goto	u2160
  4815   000FA8                     u2161:
  4816   000FA8  EFF1  F007         	goto	l3005
  4817   000FAC                     u2160:
  4818   000FAC  5049               	movf	(_currentUser+2)^0,w,c
  4819   000FAE  A4D8               	btfss	status,2,c
  4820   000FB0  EFDC  F007         	goto	u2171
  4821   000FB4  EFDE  F007         	goto	u2170
  4822   000FB8                     u2171:
  4823   000FB8  EFF1  F007         	goto	l3005
  4824   000FBC                     u2170:
  4825   000FBC  504A               	movf	(_currentUser+3)^0,w,c
  4826   000FBE  A4D8               	btfss	status,2,c
  4827   000FC0  EFE4  F007         	goto	u2181
  4828   000FC4  EFE6  F007         	goto	u2180
  4829   000FC8                     u2181:
  4830   000FC8  EFF1  F007         	goto	l3005
  4831   000FCC                     u2180:
  4832   000FCC  504B               	movf	(_currentUser+4)^0,w,c
  4833   000FCE  A4D8               	btfss	status,2,c
  4834   000FD0  EFEC  F007         	goto	u2191
  4835   000FD4  EFEE  F007         	goto	u2190
  4836   000FD8                     u2191:
  4837   000FD8  EFF1  F007         	goto	l3005
  4838   000FDC                     u2190:
  4839   000FDC                     
  4840                           ;TAD_DATOS.c: 32:   return ((void*)0);
  4841   000FDC  0E00               	movlw	0
  4842   000FDE  EFF2  F007         	goto	l600
  4843   000FE2                     l3005:
  4844                           
  4845                           ;TAD_DATOS.c: 34:     return currentUser;
  4846   000FE2  0E47               	movlw	_currentUser& (0+255)
  4847   000FE4                     l600:
  4848   000FE4  0012               	return		;funcret
  4849   000FE6                     __end_of_getActualUID:
  4850                           	callstack 0
  4851                           
  4852 ;; *************** function _Terminal_ReceiveChar *****************
  4853 ;; Defined at:
  4854 ;;		line 33 in file "TAD_TERMINAL.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      unsigned char 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1
  4868 ;;      Params:         0       0       0
  4869 ;;      Locals:         0       0       0
  4870 ;;      Temps:          0       0       0
  4871 ;;      Totals:         0       0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used: 1
  4874 ;; Hardware stack levels required when called: 3
  4875 ;; This function calls:
  4876 ;;		Nothing
  4877 ;; This function is called by:
  4878 ;;		_motorTerminal
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text22
  4883   001520                     __ptext22:
  4884                           	callstack 0
  4885   001520                     _Terminal_ReceiveChar:
  4886                           	callstack 26
  4887   001520                     
  4888                           ;TAD_TERMINAL.c: 34:  return RCREG;
  4889   001520  50AE               	movf	174,w,c	;volatile
  4890   001522  0012               	return		;funcret
  4891   001524                     __end_of_Terminal_ReceiveChar:
  4892                           	callstack 0
  4893                           
  4894 ;; *************** function _Terminal_RXAvailable *****************
  4895 ;; Defined at:
  4896 ;;		line 22 in file "TAD_TERMINAL.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;		None
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1
  4910 ;;      Params:         0       0       0
  4911 ;;      Locals:         0       0       0
  4912 ;;      Temps:          0       0       0
  4913 ;;      Totals:         0       0       0
  4914 ;;Total ram usage:        0 bytes
  4915 ;; Hardware stack levels used: 1
  4916 ;; Hardware stack levels required when called: 3
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_motorTerminal
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text23
  4925   001488                     __ptext23:
  4926                           	callstack 0
  4927   001488                     _Terminal_RXAvailable:
  4928                           	callstack 26
  4929   001488                     
  4930                           ;TAD_TERMINAL.c: 23:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  4931   001488  BA9E               	btfsc	158,5,c	;volatile
  4932   00148A  EF49  F00A         	goto	u811
  4933   00148E  EF4C  F00A         	goto	u810
  4934   001492                     u811:
  4935   001492  0E01               	movlw	1
  4936   001494  EF4D  F00A         	goto	u816
  4937   001498                     u810:
  4938   001498  0E00               	movlw	0
  4939   00149A                     u816:
  4940   00149A  0012               	return		;funcret
  4941   00149C                     __end_of_Terminal_RXAvailable:
  4942                           	callstack 0
  4943                           
  4944 ;; *************** function _motorTeclado *****************
  4945 ;; Defined at:
  4946 ;;		line 33 in file "TAD_TECLADO.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1
  4960 ;;      Params:         0       0       0
  4961 ;;      Locals:         0       0       0
  4962 ;;      Temps:          0       0       0
  4963 ;;      Totals:         0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used: 1
  4966 ;; Hardware stack levels required when called: 5
  4967 ;; This function calls:
  4968 ;;		_GetTecla
  4969 ;;		_ReadFilas
  4970 ;;		_TI_GetTics
  4971 ;;		_TI_ResetTics
  4972 ;;		_hashtag_pressed3s
  4973 ;;		_setLed
  4974 ;;		_writeColumnas
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text24
  4981   00002A                     __ptext24:
  4982                           	callstack 0
  4983   00002A                     _motorTeclado:
  4984                           	callstack 25
  4985   00002A                     
  4986                           ;TAD_TECLADO.c: 34:  switch(state) {
  4987   00002A  EF14  F001         	goto	l3267
  4988   00002E                     l3161:
  4989                           
  4990                           ;TAD_TECLADO.c: 36:    Filas = ReadFilas();
  4991   00002E  EC8D  F00A         	call	_ReadFilas	;wreg free
  4992   000032  6E40               	movwf	_Filas^0,c
  4993   000034                     
  4994                           ;TAD_TECLADO.c: 37:    if (Filas == 0x0) {
  4995   000034  5040               	movf	_Filas^0,w,c
  4996   000036  A4D8               	btfss	status,2,c
  4997   000038  EF20  F000         	goto	u2351
  4998   00003C  EF22  F000         	goto	u2350
  4999   000040                     u2351:
  5000   000040  EF2A  F000         	goto	l3171
  5001   000044                     u2350:
  5002   000044                     
  5003                           ;TAD_TECLADO.c: 38:     Columnas = (0x01);
  5004   000044  0E01               	movlw	1
  5005   000046  6E3F               	movwf	_Columnas^0,c
  5006   000048                     
  5007                           ;TAD_TECLADO.c: 39:     writeColumnas();
  5008   000048  EC97  F008         	call	_writeColumnas	;wreg free
  5009   00004C                     
  5010                           ;TAD_TECLADO.c: 40:     state = 1;
  5011   00004C  0E01               	movlw	1
  5012   00004E  6E3D               	movwf	_state^0,c
  5013                           
  5014                           ;TAD_TECLADO.c: 41:    }
  5015   000050  EF2F  F001         	goto	l166
  5016   000054                     l3171:
  5017   000054  5040               	movf	_Filas^0,w,c
  5018   000056  B4D8               	btfsc	status,2,c
  5019   000058  EF30  F000         	goto	u2361
  5020   00005C  EF32  F000         	goto	u2360
  5021   000060                     u2361:
  5022   000060  EF2F  F001         	goto	l166
  5023   000064                     u2360:
  5024   000064                     
  5025                           ;TAD_TECLADO.c: 43:     TI_ResetTics(timer);
  5026   000064  504E               	movf	_timer^0,w,c
  5027   000066  ECE6  F009         	call	_TI_ResetTics
  5028   00006A                     l3175:
  5029                           
  5030                           ;TAD_TECLADO.c: 44:     state = 3;
  5031   00006A  0E03               	movlw	3
  5032   00006C  6E3D               	movwf	_state^0,c
  5033   00006E  EF2F  F001         	goto	l166
  5034   000072                     l3177:
  5035                           
  5036                           ;TAD_TECLADO.c: 48:    Filas = ReadFilas();
  5037   000072  EC8D  F00A         	call	_ReadFilas	;wreg free
  5038   000076  6E40               	movwf	_Filas^0,c
  5039   000078                     
  5040                           ;TAD_TECLADO.c: 49:    if (Filas == 0x0) {
  5041   000078  5040               	movf	_Filas^0,w,c
  5042   00007A  A4D8               	btfss	status,2,c
  5043   00007C  EF42  F000         	goto	u2371
  5044   000080  EF44  F000         	goto	u2370
  5045   000084                     u2371:
  5046   000084  EF4C  F000         	goto	l3187
  5047   000088                     u2370:
  5048   000088                     
  5049                           ;TAD_TECLADO.c: 50:     Columnas = (0x02);
  5050   000088  0E02               	movlw	2
  5051   00008A  6E3F               	movwf	_Columnas^0,c
  5052   00008C                     
  5053                           ;TAD_TECLADO.c: 51:     writeColumnas();
  5054   00008C  EC97  F008         	call	_writeColumnas	;wreg free
  5055   000090                     
  5056                           ;TAD_TECLADO.c: 52:     state = 2;
  5057   000090  0E02               	movlw	2
  5058   000092  6E3D               	movwf	_state^0,c
  5059                           
  5060                           ;TAD_TECLADO.c: 53:    }
  5061   000094  EF2F  F001         	goto	l166
  5062   000098                     l3187:
  5063   000098  5040               	movf	_Filas^0,w,c
  5064   00009A  B4D8               	btfsc	status,2,c
  5065   00009C  EF52  F000         	goto	u2381
  5066   0000A0  EF54  F000         	goto	u2380
  5067   0000A4                     u2381:
  5068   0000A4  EF2F  F001         	goto	l166
  5069   0000A8                     u2380:
  5070   0000A8                     
  5071                           ;TAD_TECLADO.c: 55:     TI_ResetTics(timer);
  5072   0000A8  504E               	movf	_timer^0,w,c
  5073   0000AA  ECE6  F009         	call	_TI_ResetTics
  5074   0000AE  EF35  F000         	goto	l3175
  5075   0000B2                     l3193:
  5076                           
  5077                           ;TAD_TECLADO.c: 60:    Filas = ReadFilas();
  5078   0000B2  EC8D  F00A         	call	_ReadFilas	;wreg free
  5079   0000B6  6E40               	movwf	_Filas^0,c
  5080   0000B8                     
  5081                           ;TAD_TECLADO.c: 61:    if (Filas != 0x0) {
  5082   0000B8  5040               	movf	_Filas^0,w,c
  5083   0000BA  B4D8               	btfsc	status,2,c
  5084   0000BC  EF62  F000         	goto	u2391
  5085   0000C0  EF64  F000         	goto	u2390
  5086   0000C4                     u2391:
  5087   0000C4  EF69  F000         	goto	l3201
  5088   0000C8                     u2390:
  5089   0000C8                     
  5090                           ;TAD_TECLADO.c: 62:     TI_ResetTics(timer);
  5091   0000C8  504E               	movf	_timer^0,w,c
  5092   0000CA  ECE6  F009         	call	_TI_ResetTics
  5093   0000CE  EF35  F000         	goto	l3175
  5094   0000D2                     l3201:
  5095   0000D2  5040               	movf	_Filas^0,w,c
  5096   0000D4  A4D8               	btfss	status,2,c
  5097   0000D6  EF6F  F000         	goto	u2401
  5098   0000DA  EF71  F000         	goto	u2400
  5099   0000DE                     u2401:
  5100   0000DE  EF2F  F001         	goto	l166
  5101   0000E2                     u2400:
  5102   0000E2                     l3203:
  5103                           
  5104                           ;TAD_TECLADO.c: 66:     Columnas = (0x04);
  5105   0000E2  0E04               	movlw	4
  5106   0000E4  6E3F               	movwf	_Columnas^0,c
  5107   0000E6                     
  5108                           ;TAD_TECLADO.c: 67:     writeColumnas();
  5109   0000E6  EC97  F008         	call	_writeColumnas	;wreg free
  5110   0000EA                     l3207:
  5111                           
  5112                           ;TAD_TECLADO.c: 68:     state = 0;
  5113   0000EA  6A3D               	clrf	_state^0,c
  5114   0000EC  EF2F  F001         	goto	l166
  5115   0000F0                     l3209:
  5116                           
  5117                           ;TAD_TECLADO.c: 72:    tecla = GetTecla ();
  5118   0000F0  EC90  F004         	call	_GetTecla	;wreg free
  5119   0000F4  6E3E               	movwf	_tecla^0,c
  5120   0000F6                     
  5121                           ;TAD_TECLADO.c: 73:    Filas = ReadFilas();
  5122   0000F6  EC8D  F00A         	call	_ReadFilas	;wreg free
  5123   0000FA  6E40               	movwf	_Filas^0,c
  5124   0000FC                     
  5125                           ;TAD_TECLADO.c: 74:    if (Filas == 0x0) {
  5126   0000FC  5040               	movf	_Filas^0,w,c
  5127   0000FE  A4D8               	btfss	status,2,c
  5128   000100  EF84  F000         	goto	u2411
  5129   000104  EF86  F000         	goto	u2410
  5130   000108                     u2411:
  5131   000108  EF88  F000         	goto	l3221
  5132   00010C                     u2410:
  5133   00010C  EF71  F000         	goto	l3203
  5134   000110                     l3221:
  5135   000110  5040               	movf	_Filas^0,w,c
  5136   000112  B4D8               	btfsc	status,2,c
  5137   000114  EF8E  F000         	goto	u2421
  5138   000118  EF90  F000         	goto	u2420
  5139   00011C                     u2421:
  5140   00011C  EFB0  F000         	goto	l3231
  5141   000120                     u2420:
  5142   000120  504E               	movf	_timer^0,w,c
  5143   000122  EC71  F008         	call	_TI_GetTics
  5144   000126  5053               	movf	(?_TI_GetTics+3)^0,w,c
  5145   000128  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  5146   00012A  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  5147   00012C  E109               	bnz	u2430
  5148   00012E  0E05               	movlw	5
  5149   000130  5C50               	subwf	?_TI_GetTics^0,w,c
  5150   000132  A0D8               	btfss	status,0,c
  5151   000134  EF9E  F000         	goto	u2431
  5152   000138  EFA0  F000         	goto	u2430
  5153   00013C                     u2431:
  5154   00013C  EFB0  F000         	goto	l3231
  5155   000140                     u2430:
  5156   000140  0E0B               	movlw	11
  5157   000142  183E               	xorwf	_tecla^0,w,c
  5158   000144  B4D8               	btfsc	status,2,c
  5159   000146  EFA7  F000         	goto	u2441
  5160   00014A  EFA9  F000         	goto	u2440
  5161   00014E                     u2441:
  5162   00014E  EFB0  F000         	goto	l3231
  5163   000152                     u2440:
  5164   000152                     
  5165                           ;TAD_TECLADO.c: 80:     setLed(tecla);
  5166   000152  503E               	movf	_tecla^0,w,c
  5167   000154  ECFC  F008         	call	_setLed
  5168   000158                     l3229:
  5169                           
  5170                           ;TAD_TECLADO.c: 81:     state = 5;
  5171   000158  0E05               	movlw	5
  5172   00015A  6E3D               	movwf	_state^0,c
  5173                           
  5174                           ;TAD_TECLADO.c: 82:    }
  5175   00015C  EF2F  F001         	goto	l166
  5176   000160                     l3231:
  5177   000160  5040               	movf	_Filas^0,w,c
  5178   000162  B4D8               	btfsc	status,2,c
  5179   000164  EFB6  F000         	goto	u2451
  5180   000168  EFB8  F000         	goto	u2450
  5181   00016C                     u2451:
  5182   00016C  EF2F  F001         	goto	l166
  5183   000170                     u2450:
  5184   000170  504E               	movf	_timer^0,w,c
  5185   000172  EC71  F008         	call	_TI_GetTics
  5186   000176  5053               	movf	(?_TI_GetTics+3)^0,w,c
  5187   000178  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  5188   00017A  1051               	iorwf	(?_TI_GetTics+1)^0,w,c
  5189   00017C  E109               	bnz	u2460
  5190   00017E  0E05               	movlw	5
  5191   000180  5C50               	subwf	?_TI_GetTics^0,w,c
  5192   000182  A0D8               	btfss	status,0,c
  5193   000184  EFC6  F000         	goto	u2461
  5194   000188  EFC8  F000         	goto	u2460
  5195   00018C                     u2461:
  5196   00018C  EF2F  F001         	goto	l166
  5197   000190                     u2460:
  5198   000190  0E0B               	movlw	11
  5199   000192  183E               	xorwf	_tecla^0,w,c
  5200   000194  A4D8               	btfss	status,2,c
  5201   000196  EFCF  F000         	goto	u2471
  5202   00019A  EFD1  F000         	goto	u2470
  5203   00019E                     u2471:
  5204   00019E  EF2F  F001         	goto	l166
  5205   0001A2                     u2470:
  5206   0001A2                     
  5207                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  5208   0001A2  504E               	movf	_timer^0,w,c
  5209   0001A4  ECE6  F009         	call	_TI_ResetTics
  5210   0001A8                     
  5211                           ;TAD_TECLADO.c: 85:     state = 4;
  5212   0001A8  0E04               	movlw	4
  5213   0001AA  6E3D               	movwf	_state^0,c
  5214   0001AC  EF2F  F001         	goto	l166
  5215   0001B0                     l3241:
  5216                           
  5217                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  5218   0001B0  EC8D  F00A         	call	_ReadFilas	;wreg free
  5219   0001B4  6E40               	movwf	_Filas^0,c
  5220   0001B6                     
  5221                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  5222   0001B6  5040               	movf	_Filas^0,w,c
  5223   0001B8  A4D8               	btfss	status,2,c
  5224   0001BA  EFE1  F000         	goto	u2481
  5225   0001BE  EFE3  F000         	goto	u2480
  5226   0001C2                     u2481:
  5227   0001C2  EFE5  F000         	goto	l3247
  5228   0001C6                     u2480:
  5229   0001C6  EF75  F000         	goto	l3207
  5230   0001CA                     l3247:
  5231   0001CA  5040               	movf	_Filas^0,w,c
  5232   0001CC  B4D8               	btfsc	status,2,c
  5233   0001CE  EFEB  F000         	goto	u2491
  5234   0001D2  EFED  F000         	goto	u2490
  5235   0001D6                     u2491:
  5236   0001D6  EF2F  F001         	goto	l166
  5237   0001DA                     u2490:
  5238   0001DA  504E               	movf	_timer^0,w,c
  5239   0001DC  EC71  F008         	call	_TI_GetTics
  5240   0001E0  5053               	movf	(?_TI_GetTics+3)^0,w,c
  5241   0001E2  1052               	iorwf	(?_TI_GetTics+2)^0,w,c
  5242   0001E4  E10B               	bnz	u2500
  5243   0001E6  0EF5               	movlw	245
  5244   0001E8  5C50               	subwf	?_TI_GetTics^0,w,c
  5245   0001EA  0E01               	movlw	1
  5246   0001EC  5851               	subwfb	(?_TI_GetTics+1)^0,w,c
  5247   0001EE  A0D8               	btfss	status,0,c
  5248   0001F0  EFFC  F000         	goto	u2501
  5249   0001F4  EFFE  F000         	goto	u2500
  5250   0001F8                     u2501:
  5251   0001F8  EF2F  F001         	goto	l166
  5252   0001FC                     u2500:
  5253   0001FC                     
  5254                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  5255   0001FC  EC8A  F00A         	call	_hashtag_pressed3s	;wreg free
  5256   000200  EFAC  F000         	goto	l3229
  5257   000204                     l3255:
  5258                           
  5259                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  5260   000204  EC8D  F00A         	call	_ReadFilas	;wreg free
  5261   000208  6E40               	movwf	_Filas^0,c
  5262   00020A                     
  5263                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  5264   00020A  5040               	movf	_Filas^0,w,c
  5265   00020C  A4D8               	btfss	status,2,c
  5266   00020E  EF0B  F001         	goto	u2511
  5267   000212  EF0D  F001         	goto	u2510
  5268   000216                     u2511:
  5269   000216  EF2F  F001         	goto	l166
  5270   00021A                     u2510:
  5271   00021A                     
  5272                           ;TAD_TECLADO.c: 102:     state = 0;
  5273   00021A  6A3D               	clrf	_state^0,c
  5274   00021C                     
  5275                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  5276   00021C  0E04               	movlw	4
  5277   00021E  6E3F               	movwf	_Columnas^0,c
  5278   000220                     
  5279                           ;TAD_TECLADO.c: 104:     writeColumnas();
  5280   000220  EC97  F008         	call	_writeColumnas	;wreg free
  5281   000224  EF2F  F001         	goto	l166
  5282   000228                     l3267:
  5283   000228  503D               	movf	_state^0,w,c
  5284                           
  5285                           ; Switch size 1, requested type "simple"
  5286                           ; Number of cases is 6, Range of values is 0 to 5
  5287                           ; switch strategies available:
  5288                           ; Name         Instructions Cycles
  5289                           ; simple_byte           19    10 (average)
  5290                           ;	Chosen strategy is simple_byte
  5291   00022A  0A00               	xorlw	0	; case 0
  5292   00022C  B4D8               	btfsc	status,2,c
  5293   00022E  EF17  F000         	goto	l3161
  5294   000232  0A01               	xorlw	1	; case 1
  5295   000234  B4D8               	btfsc	status,2,c
  5296   000236  EF39  F000         	goto	l3177
  5297   00023A  0A03               	xorlw	3	; case 2
  5298   00023C  B4D8               	btfsc	status,2,c
  5299   00023E  EF59  F000         	goto	l3193
  5300   000242  0A01               	xorlw	1	; case 3
  5301   000244  B4D8               	btfsc	status,2,c
  5302   000246  EF78  F000         	goto	l3209
  5303   00024A  0A07               	xorlw	7	; case 4
  5304   00024C  B4D8               	btfsc	status,2,c
  5305   00024E  EFD8  F000         	goto	l3241
  5306   000252  0A01               	xorlw	1	; case 5
  5307   000254  B4D8               	btfsc	status,2,c
  5308   000256  EF02  F001         	goto	l3255
  5309   00025A  EF2F  F001         	goto	l166
  5310   00025E                     l166:
  5311   00025E  0012               	return		;funcret
  5312   000260                     __end_of_motorTeclado:
  5313                           	callstack 0
  5314                           
  5315 ;; *************** function _writeColumnas *****************
  5316 ;; Defined at:
  5317 ;;		line 114 in file "TAD_TECLADO.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1
  5331 ;;      Params:         0       0       0
  5332 ;;      Locals:         0       0       0
  5333 ;;      Temps:          0       0       0
  5334 ;;      Totals:         0       0       0
  5335 ;;Total ram usage:        0 bytes
  5336 ;; Hardware stack levels used: 1
  5337 ;; Hardware stack levels required when called: 3
  5338 ;; This function calls:
  5339 ;;		Nothing
  5340 ;; This function is called by:
  5341 ;;		_motorTeclado
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text25
  5346   00112E                     __ptext25:
  5347                           	callstack 0
  5348   00112E                     _writeColumnas:
  5349                           	callstack 26
  5350   00112E                     
  5351                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  5352   00112E  6A8C               	clrf	140,c	;volatile
  5353   001130                     
  5354                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  5355   001130  043F               	decf	_Columnas^0,w,c
  5356   001132  A4D8               	btfss	status,2,c
  5357   001134  EF9E  F008         	goto	u631
  5358   001138  EFA0  F008         	goto	u630
  5359   00113C                     u631:
  5360   00113C  EFA3  F008         	goto	l1739
  5361   001140                     u630:
  5362   001140                     
  5363                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  5364   001140  8A8C               	bsf	140,5,c	;volatile
  5365                           
  5366                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  5367   001142  EFB9  F008         	goto	l174
  5368   001146                     l1739:
  5369   001146  0E02               	movlw	2
  5370   001148  183F               	xorwf	_Columnas^0,w,c
  5371   00114A  A4D8               	btfss	status,2,c
  5372   00114C  EFAA  F008         	goto	u641
  5373   001150  EFAC  F008         	goto	u640
  5374   001154                     u641:
  5375   001154  EFAF  F008         	goto	l1743
  5376   001158                     u640:
  5377   001158                     
  5378                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  5379   001158  8C8C               	bsf	140,6,c	;volatile
  5380                           
  5381                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  5382   00115A  EFB9  F008         	goto	l174
  5383   00115E                     l1743:
  5384   00115E  0E04               	movlw	4
  5385   001160  183F               	xorwf	_Columnas^0,w,c
  5386   001162  A4D8               	btfss	status,2,c
  5387   001164  EFB6  F008         	goto	u651
  5388   001168  EFB8  F008         	goto	u650
  5389   00116C                     u651:
  5390   00116C  EFB9  F008         	goto	l174
  5391   001170                     u650:
  5392   001170                     
  5393                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  5394   001170  888C               	bsf	140,4,c	;volatile
  5395   001172                     l174:
  5396   001172  0012               	return		;funcret
  5397   001174                     __end_of_writeColumnas:
  5398                           	callstack 0
  5399                           
  5400 ;; *************** function _setLed *****************
  5401 ;; Defined at:
  5402 ;;		line 164 in file "TAD_DATOS.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  tecla           1    wreg     unsigned char 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  tecla           1    4[COMRAM] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1
  5416 ;;      Params:         0       0       0
  5417 ;;      Locals:         1       0       0
  5418 ;;      Temps:          0       0       0
  5419 ;;      Totals:         1       0       0
  5420 ;;Total ram usage:        1 bytes
  5421 ;; Hardware stack levels used: 1
  5422 ;; Hardware stack levels required when called: 4
  5423 ;; This function calls:
  5424 ;;		_checkUserUID
  5425 ;;		_setLEDIntensity
  5426 ;; This function is called by:
  5427 ;;		_motorTeclado
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text26
  5432   0011F8                     __ptext26:
  5433                           	callstack 0
  5434   0011F8                     _setLed:
  5435                           	callstack 25
  5436                           
  5437                           ;incstack = 0
  5438                           ;setLed@tecla stored from wreg
  5439   0011F8  6E53               	movwf	setLed@tecla^0,c
  5440   0011FA                     
  5441                           ;TAD_DATOS.c: 165:  static char modeLED = 0;;TAD_DATOS.c: 166:  static char ledIndex = 0
      +                          ;;TAD_DATOS.c: 167:  static char userIndex = 0;;TAD_DATOS.c: 169:  if(modeLED == 0){
  5442   0011FA  5027               	movf	setLed@modeLED^0,w,c
  5443   0011FC  A4D8               	btfss	status,2,c
  5444   0011FE  EF03  F009         	goto	u2141
  5445   001202  EF05  F009         	goto	u2140
  5446   001206                     u2141:
  5447   001206  EF0B  F009         	goto	l2979
  5448   00120A                     u2140:
  5449   00120A                     
  5450                           ;TAD_DATOS.c: 170:   ledIndex = tecla - 1;
  5451   00120A  0453               	decf	setLed@tecla^0,w,c
  5452   00120C  6E26               	movwf	setLed@ledIndex^0,c
  5453   00120E                     
  5454                           ;TAD_DATOS.c: 171:   modeLED = 1;
  5455   00120E  0E01               	movlw	1
  5456   001210  6E27               	movwf	setLed@modeLED^0,c
  5457                           
  5458                           ;TAD_DATOS.c: 172:  } else{
  5459   001212  EF18  F009         	goto	l665
  5460   001216                     l2979:
  5461                           
  5462                           ;TAD_DATOS.c: 173:   userIndex = checkUserUID();
  5463   001216  EC30  F001         	call	_checkUserUID	;wreg free
  5464   00121A  6E25               	movwf	setLed@userIndex^0,c
  5465   00121C                     
  5466                           ;TAD_DATOS.c: 174:   setLEDIntensity(userIndex, ledIndex, tecla);
  5467   00121C  C026  F050         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  5468   001220  C053  F051         	movff	setLed@tecla,setLEDIntensity@intensity
  5469   001224  5025               	movf	setLed@userIndex^0,w,c
  5470   001226  ECBA  F008         	call	_setLEDIntensity
  5471   00122A                     
  5472                           ;TAD_DATOS.c: 175:   new_configuration = 1;
  5473   00122A  0E01               	movlw	1
  5474   00122C  6E2A               	movwf	_new_configuration^0,c
  5475   00122E                     
  5476                           ;TAD_DATOS.c: 176:   modeLED = 0;
  5477   00122E  6A27               	clrf	setLed@modeLED^0,c
  5478   001230                     l665:
  5479   001230  0012               	return		;funcret
  5480   001232                     __end_of_setLed:
  5481                           	callstack 0
  5482                           
  5483 ;; *************** function _setLEDIntensity *****************
  5484 ;; Defined at:
  5485 ;;		line 156 in file "TAD_DATOS.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  userIndex       1    wreg     unsigned char 
  5488 ;;  ledIndex        1    1[COMRAM] unsigned char 
  5489 ;;  intensity       1    2[COMRAM] unsigned char 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  userIndex       1    3[COMRAM] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1
  5501 ;;      Params:         2       0       0
  5502 ;;      Locals:         1       0       0
  5503 ;;      Temps:          0       0       0
  5504 ;;      Totals:         3       0       0
  5505 ;;Total ram usage:        3 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; Hardware stack levels required when called: 3
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_setLed
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text27
  5516   001174                     __ptext27:
  5517                           	callstack 0
  5518   001174                     _setLEDIntensity:
  5519                           	callstack 25
  5520                           
  5521                           ;incstack = 0
  5522                           ;setLEDIntensity@userIndex stored from wreg
  5523   001174  6E52               	movwf	setLEDIntensity@userIndex^0,c
  5524   001176                     
  5525                           ;TAD_DATOS.c: 157:     if (userIndex < 4 && ledIndex < 6) {
  5526   001176  0E04               	movlw	4
  5527   001178  6052               	cpfslt	setLEDIntensity@userIndex^0,c
  5528   00117A  EFC1  F008         	goto	u2091
  5529   00117E  EFC3  F008         	goto	u2090
  5530   001182                     u2091:
  5531   001182  EFDC  F008         	goto	l654
  5532   001186                     u2090:
  5533   001186  0E06               	movlw	6
  5534   001188  6050               	cpfslt	setLEDIntensity@ledIndex^0,c
  5535   00118A  EFC9  F008         	goto	u2101
  5536   00118E  EFCB  F008         	goto	u2100
  5537   001192                     u2101:
  5538   001192  EFDC  F008         	goto	l654
  5539   001196                     u2100:
  5540   001196                     
  5541                           ;TAD_DATOS.c: 158:         if (intensity <= 0xA) {
  5542   001196  0E0B               	movlw	11
  5543   001198  6051               	cpfslt	setLEDIntensity@intensity^0,c
  5544   00119A  EFD1  F008         	goto	u2111
  5545   00119E  EFD3  F008         	goto	u2110
  5546   0011A2                     u2111:
  5547   0011A2  EFDC  F008         	goto	l654
  5548   0011A6                     u2110:
  5549   0011A6                     
  5550                           ;TAD_DATOS.c: 159:             configurations[userIndex][ledIndex] = intensity;
  5551   0011A6  5052               	movf	setLEDIntensity@userIndex^0,w,c
  5552   0011A8  0D06               	mullw	6
  5553   0011AA  50F3               	movf	243,w,c
  5554   0011AC  0FC0               	addlw	low _configurations
  5555   0011AE  2450               	addwf	setLEDIntensity@ledIndex^0,w,c
  5556   0011B0  6ED9               	movwf	fsr2l,c
  5557   0011B2  6ADA               	clrf	fsr2h,c
  5558   0011B4  C051  FFDF         	movff	setLEDIntensity@intensity,indf2
  5559   0011B8                     l654:
  5560   0011B8  0012               	return		;funcret
  5561   0011BA                     __end_of_setLEDIntensity:
  5562                           	callstack 0
  5563                           
  5564 ;; *************** function _checkUserUID *****************
  5565 ;; Defined at:
  5566 ;;		line 83 in file "TAD_DATOS.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      unsigned char 
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, status,0
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1
  5580 ;;      Params:         0       0       0
  5581 ;;      Locals:         0       0       0
  5582 ;;      Temps:          0       0       0
  5583 ;;      Totals:         0       0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used: 1
  5586 ;; Hardware stack levels required when called: 3
  5587 ;; This function calls:
  5588 ;;		Nothing
  5589 ;; This function is called by:
  5590 ;;		_setLed
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text28
  5595   000260                     __ptext28:
  5596                           	callstack 0
  5597   000260                     _checkUserUID:
  5598                           	callstack 25
  5599   000260                     
  5600                           ;TAD_DATOS.c: 84:     if (currentUser[0] == userUIDs[0][0] && currentUser[1] == userUIDs
      +                          [0][1] &&
  5601   000260  0100               	movlb	0	; () banked
  5602   000262  5180               	movf	_userUIDs& (0+255),w,b
  5603   000264  1847               	xorwf	_currentUser^0,w,c
  5604   000266  A4D8               	btfss	status,2,c
  5605   000268  EF38  F001         	goto	u1891
  5606   00026C  EF3A  F001         	goto	u1890
  5607   000270                     u1891:
  5608   000270  EF61  F001         	goto	l2901
  5609   000274                     u1890:
  5610   000274                     
  5611                           ; BSR set to: 0
  5612   000274  5181               	movf	(_userUIDs+1)& (0+255),w,b
  5613   000276  1848               	xorwf	(_currentUser+1)^0,w,c
  5614   000278  A4D8               	btfss	status,2,c
  5615   00027A  EF41  F001         	goto	u1901
  5616   00027E  EF43  F001         	goto	u1900
  5617   000282                     u1901:
  5618   000282  EF61  F001         	goto	l2901
  5619   000286                     u1900:
  5620   000286                     
  5621                           ; BSR set to: 0
  5622   000286  5182               	movf	(_userUIDs+2)& (0+255),w,b
  5623   000288  1849               	xorwf	(_currentUser+2)^0,w,c
  5624   00028A  A4D8               	btfss	status,2,c
  5625   00028C  EF4A  F001         	goto	u1911
  5626   000290  EF4C  F001         	goto	u1910
  5627   000294                     u1911:
  5628   000294  EF61  F001         	goto	l2901
  5629   000298                     u1910:
  5630   000298                     
  5631                           ; BSR set to: 0
  5632   000298  5183               	movf	(_userUIDs+3)& (0+255),w,b
  5633   00029A  184A               	xorwf	(_currentUser+3)^0,w,c
  5634   00029C  A4D8               	btfss	status,2,c
  5635   00029E  EF53  F001         	goto	u1921
  5636   0002A2  EF55  F001         	goto	u1920
  5637   0002A6                     u1921:
  5638   0002A6  EF61  F001         	goto	l2901
  5639   0002AA                     u1920:
  5640   0002AA                     
  5641                           ; BSR set to: 0
  5642   0002AA  5184               	movf	(_userUIDs+4)& (0+255),w,b
  5643   0002AC  184B               	xorwf	(_currentUser+4)^0,w,c
  5644   0002AE  A4D8               	btfss	status,2,c
  5645   0002B0  EF5C  F001         	goto	u1931
  5646   0002B4  EF5E  F001         	goto	u1930
  5647   0002B8                     u1931:
  5648   0002B8  EF61  F001         	goto	l2901
  5649   0002BC                     u1930:
  5650   0002BC                     l2895:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;TAD_DATOS.c: 86:         currentUser[4] == userUIDs[0][4]) {;TAD_DATOS.c: 87:         r
      +                          eturn 0;
  5654   0002BC  0E00               	movlw	0
  5655   0002BE  EFF3  F001         	goto	l625
  5656   0002C2                     l2901:
  5657                           
  5658                           ; BSR set to: 0
  5659   0002C2  5047               	movf	_currentUser^0,w,c
  5660   0002C4  1990               	xorwf	(_userUIDs+16)& (0+255),w,b
  5661   0002C6  A4D8               	btfss	status,2,c
  5662   0002C8  EF68  F001         	goto	u1941
  5663   0002CC  EF6A  F001         	goto	u1940
  5664   0002D0                     u1941:
  5665   0002D0  EF91  F001         	goto	l2917
  5666   0002D4                     u1940:
  5667   0002D4                     
  5668                           ; BSR set to: 0
  5669   0002D4  5191               	movf	(_userUIDs+17)& (0+255),w,b
  5670   0002D6  1848               	xorwf	(_currentUser+1)^0,w,c
  5671   0002D8  A4D8               	btfss	status,2,c
  5672   0002DA  EF71  F001         	goto	u1951
  5673   0002DE  EF73  F001         	goto	u1950
  5674   0002E2                     u1951:
  5675   0002E2  EF91  F001         	goto	l2917
  5676   0002E6                     u1950:
  5677   0002E6                     
  5678                           ; BSR set to: 0
  5679   0002E6  5192               	movf	(_userUIDs+18)& (0+255),w,b
  5680   0002E8  1849               	xorwf	(_currentUser+2)^0,w,c
  5681   0002EA  A4D8               	btfss	status,2,c
  5682   0002EC  EF7A  F001         	goto	u1961
  5683   0002F0  EF7C  F001         	goto	u1960
  5684   0002F4                     u1961:
  5685   0002F4  EF91  F001         	goto	l2917
  5686   0002F8                     u1960:
  5687   0002F8                     
  5688                           ; BSR set to: 0
  5689   0002F8  5193               	movf	(_userUIDs+19)& (0+255),w,b
  5690   0002FA  184A               	xorwf	(_currentUser+3)^0,w,c
  5691   0002FC  A4D8               	btfss	status,2,c
  5692   0002FE  EF83  F001         	goto	u1971
  5693   000302  EF85  F001         	goto	u1970
  5694   000306                     u1971:
  5695   000306  EF91  F001         	goto	l2917
  5696   00030A                     u1970:
  5697   00030A                     
  5698                           ; BSR set to: 0
  5699   00030A  5194               	movf	(_userUIDs+20)& (0+255),w,b
  5700   00030C  184B               	xorwf	(_currentUser+4)^0,w,c
  5701   00030E  A4D8               	btfss	status,2,c
  5702   000310  EF8C  F001         	goto	u1981
  5703   000314  EF8E  F001         	goto	u1980
  5704   000318                     u1981:
  5705   000318  EF91  F001         	goto	l2917
  5706   00031C                     u1980:
  5707   00031C                     
  5708                           ; BSR set to: 0
  5709                           ;TAD_DATOS.c: 91:              currentUser[4] == userUIDs[1][4]) {;TAD_DATOS.c: 92:     
      +                              return 1;
  5710   00031C  0E01               	movlw	1
  5711   00031E  EFF3  F001         	goto	l625
  5712   000322                     l2917:
  5713                           
  5714                           ; BSR set to: 0
  5715   000322  5047               	movf	_currentUser^0,w,c
  5716   000324  19A0               	xorwf	(_userUIDs+32)& (0+255),w,b
  5717   000326  A4D8               	btfss	status,2,c
  5718   000328  EF98  F001         	goto	u1991
  5719   00032C  EF9A  F001         	goto	u1990
  5720   000330                     u1991:
  5721   000330  EFC1  F001         	goto	l2933
  5722   000334                     u1990:
  5723   000334                     
  5724                           ; BSR set to: 0
  5725   000334  51A1               	movf	(_userUIDs+33)& (0+255),w,b
  5726   000336  1848               	xorwf	(_currentUser+1)^0,w,c
  5727   000338  A4D8               	btfss	status,2,c
  5728   00033A  EFA1  F001         	goto	u2001
  5729   00033E  EFA3  F001         	goto	u2000
  5730   000342                     u2001:
  5731   000342  EFC1  F001         	goto	l2933
  5732   000346                     u2000:
  5733   000346                     
  5734                           ; BSR set to: 0
  5735   000346  51A2               	movf	(_userUIDs+34)& (0+255),w,b
  5736   000348  1849               	xorwf	(_currentUser+2)^0,w,c
  5737   00034A  A4D8               	btfss	status,2,c
  5738   00034C  EFAA  F001         	goto	u2011
  5739   000350  EFAC  F001         	goto	u2010
  5740   000354                     u2011:
  5741   000354  EFC1  F001         	goto	l2933
  5742   000358                     u2010:
  5743   000358                     
  5744                           ; BSR set to: 0
  5745   000358  51A3               	movf	(_userUIDs+35)& (0+255),w,b
  5746   00035A  184A               	xorwf	(_currentUser+3)^0,w,c
  5747   00035C  A4D8               	btfss	status,2,c
  5748   00035E  EFB3  F001         	goto	u2021
  5749   000362  EFB5  F001         	goto	u2020
  5750   000366                     u2021:
  5751   000366  EFC1  F001         	goto	l2933
  5752   00036A                     u2020:
  5753   00036A                     
  5754                           ; BSR set to: 0
  5755   00036A  51A4               	movf	(_userUIDs+36)& (0+255),w,b
  5756   00036C  184B               	xorwf	(_currentUser+4)^0,w,c
  5757   00036E  A4D8               	btfss	status,2,c
  5758   000370  EFBC  F001         	goto	u2031
  5759   000374  EFBE  F001         	goto	u2030
  5760   000378                     u2031:
  5761   000378  EFC1  F001         	goto	l2933
  5762   00037C                     u2030:
  5763   00037C                     
  5764                           ; BSR set to: 0
  5765                           ;TAD_DATOS.c: 96:              currentUser[4] == userUIDs[2][4]) {;TAD_DATOS.c: 97:     
      +                              return 2;
  5766   00037C  0E02               	movlw	2
  5767   00037E  EFF3  F001         	goto	l625
  5768   000382                     l2933:
  5769                           
  5770                           ; BSR set to: 0
  5771   000382  5047               	movf	_currentUser^0,w,c
  5772   000384  19B0               	xorwf	(_userUIDs+48)& (0+255),w,b
  5773   000386  A4D8               	btfss	status,2,c
  5774   000388  EFC8  F001         	goto	u2041
  5775   00038C  EFCA  F001         	goto	u2040
  5776   000390                     u2041:
  5777   000390  EFF1  F001         	goto	l628
  5778   000394                     u2040:
  5779   000394                     
  5780                           ; BSR set to: 0
  5781   000394  51B1               	movf	(_userUIDs+49)& (0+255),w,b
  5782   000396  1848               	xorwf	(_currentUser+1)^0,w,c
  5783   000398  A4D8               	btfss	status,2,c
  5784   00039A  EFD1  F001         	goto	u2051
  5785   00039E  EFD3  F001         	goto	u2050
  5786   0003A2                     u2051:
  5787   0003A2  EFF1  F001         	goto	l628
  5788   0003A6                     u2050:
  5789   0003A6                     
  5790                           ; BSR set to: 0
  5791   0003A6  51B2               	movf	(_userUIDs+50)& (0+255),w,b
  5792   0003A8  1849               	xorwf	(_currentUser+2)^0,w,c
  5793   0003AA  A4D8               	btfss	status,2,c
  5794   0003AC  EFDA  F001         	goto	u2061
  5795   0003B0  EFDC  F001         	goto	u2060
  5796   0003B4                     u2061:
  5797   0003B4  EFF1  F001         	goto	l628
  5798   0003B8                     u2060:
  5799   0003B8                     
  5800                           ; BSR set to: 0
  5801   0003B8  51B3               	movf	(_userUIDs+51)& (0+255),w,b
  5802   0003BA  184A               	xorwf	(_currentUser+3)^0,w,c
  5803   0003BC  A4D8               	btfss	status,2,c
  5804   0003BE  EFE3  F001         	goto	u2071
  5805   0003C2  EFE5  F001         	goto	u2070
  5806   0003C6                     u2071:
  5807   0003C6  EFF1  F001         	goto	l628
  5808   0003CA                     u2070:
  5809   0003CA                     
  5810                           ; BSR set to: 0
  5811   0003CA  51B4               	movf	(_userUIDs+52)& (0+255),w,b
  5812   0003CC  184B               	xorwf	(_currentUser+4)^0,w,c
  5813   0003CE  A4D8               	btfss	status,2,c
  5814   0003D0  EFEC  F001         	goto	u2081
  5815   0003D4  EFEE  F001         	goto	u2080
  5816   0003D8                     u2081:
  5817   0003D8  EFF1  F001         	goto	l628
  5818   0003DC                     u2080:
  5819   0003DC                     
  5820                           ; BSR set to: 0
  5821                           ;TAD_DATOS.c: 101:              currentUser[4] == userUIDs[3][4]) {;TAD_DATOS.c: 102:   
      +                             return 3;
  5822   0003DC  0E03               	movlw	3
  5823   0003DE  EFF3  F001         	goto	l625
  5824   0003E2                     l628:
  5825                           
  5826                           ; BSR set to: 0
  5827   0003E2  EF5E  F001         	goto	l2895
  5828   0003E6                     l625:
  5829                           
  5830                           ; BSR set to: 0
  5831   0003E6  0012               	return		;funcret
  5832   0003E8                     __end_of_checkUserUID:
  5833                           	callstack 0
  5834                           
  5835 ;; *************** function _hashtag_pressed3s *****************
  5836 ;; Defined at:
  5837 ;;		line 55 in file "TAD_TERMINAL.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;		None
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1
  5851 ;;      Params:         0       0       0
  5852 ;;      Locals:         0       0       0
  5853 ;;      Temps:          0       0       0
  5854 ;;      Totals:         0       0       0
  5855 ;;Total ram usage:        0 bytes
  5856 ;; Hardware stack levels used: 1
  5857 ;; Hardware stack levels required when called: 3
  5858 ;; This function calls:
  5859 ;;		Nothing
  5860 ;; This function is called by:
  5861 ;;		_motorTeclado
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text29
  5866   001514                     __ptext29:
  5867                           	callstack 0
  5868   001514                     _hashtag_pressed3s:
  5869                           	callstack 26
  5870   001514                     
  5871                           ;TAD_TERMINAL.c: 56:  hashtag_pressed = 1;
  5872   001514  0E01               	movlw	1
  5873   001516  6E2D               	movwf	_hashtag_pressed^0,c
  5874   001518  0012               	return		;funcret
  5875   00151A                     __end_of_hashtag_pressed3s:
  5876                           	callstack 0
  5877                           
  5878 ;; *************** function _TI_ResetTics *****************
  5879 ;; Defined at:
  5880 ;;		line 53 in file "TAD_TIMER.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;  TimerHandle     1    wreg     unsigned char 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1
  5894 ;;      Params:         0       0       0
  5895 ;;      Locals:         1       0       0
  5896 ;;      Temps:          0       0       0
  5897 ;;      Totals:         1       0       0
  5898 ;;Total ram usage:        1 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 3
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_motorTeclado
  5905 ;;		_WaitForBusy
  5906 ;;		_motor_LEDs
  5907 ;;		_Espera
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text30
  5912   0013CC                     __ptext30:
  5913                           	callstack 0
  5914   0013CC                     _TI_ResetTics:
  5915                           	callstack 24
  5916                           
  5917                           ;incstack = 0
  5918                           ;TI_ResetTics@TimerHandle stored from wreg
  5919   0013CC  6E50               	movwf	TI_ResetTics@TimerHandle^0,c
  5920   0013CE                     
  5921                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  5922   0013CE  9EF2               	bcf	242,7,c	;volatile
  5923   0013D0  5050               	movf	TI_ResetTics@TimerHandle^0,w,c
  5924   0013D2  0D05               	mullw	5
  5925   0013D4  50F3               	movf	243,w,c
  5926   0013D6  0F01               	addlw	low _Timers
  5927   0013D8  6ED9               	movwf	fsr2l,c
  5928   0013DA  6ADA               	clrf	fsr2h,c
  5929   0013DC  C01B  FFDE         	movff	_Tics,postinc2	;volatile
  5930   0013E0  C01C  FFDE         	movff	_Tics+1,postinc2	;volatile
  5931   0013E4  C01D  FFDE         	movff	_Tics+2,postinc2	;volatile
  5932   0013E8  C01E  FFDE         	movff	_Tics+3,postinc2	;volatile
  5933   0013EC  8EF2               	bsf	242,7,c	;volatile
  5934   0013EE  0012               	return		;funcret
  5935   0013F0                     __end_of_TI_ResetTics:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _TI_GetTics *****************
  5939 ;; Defined at:
  5940 ;;		line 61 in file "TAD_TIMER.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  TimerHandle     1    wreg     unsigned char 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  5945 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  4    1[COMRAM] unsigned long 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1
  5955 ;;      Params:         4       0       0
  5956 ;;      Locals:         5       0       0
  5957 ;;      Temps:          4       0       0
  5958 ;;      Totals:        13       0       0
  5959 ;;Total ram usage:       13 bytes
  5960 ;; Hardware stack levels used: 1
  5961 ;; Hardware stack levels required when called: 3
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_motorTeclado
  5966 ;;		_WaitForBusy
  5967 ;;		_motor_LEDs
  5968 ;;		_Espera
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text31
  5973   0010E2                     __ptext31:
  5974                           	callstack 0
  5975   0010E2                     _TI_GetTics:
  5976                           	callstack 24
  5977                           
  5978                           ;incstack = 0
  5979                           ;TI_GetTics@TimerHandle stored from wreg
  5980   0010E2  6E5C               	movwf	TI_GetTics@TimerHandle^0,c
  5981   0010E4                     
  5982                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  5983   0010E4  9EF2               	bcf	242,7,c	;volatile
  5984   0010E6  C01B  F058         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  5985   0010EA  C01C  F059         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  5986   0010EE  C01D  F05A         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  5987   0010F2  C01E  F05B         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  5988   0010F6  8EF2               	bsf	242,7,c	;volatile
  5989   0010F8                     
  5990                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  5991   0010F8  505C               	movf	TI_GetTics@TimerHandle^0,w,c
  5992   0010FA  0D05               	mullw	5
  5993   0010FC  50F3               	movf	243,w,c
  5994   0010FE  0F01               	addlw	low _Timers
  5995   001100  6ED9               	movwf	fsr2l,c
  5996   001102  6ADA               	clrf	fsr2h,c
  5997   001104  CFDE F054          	movff	postinc2,??_TI_GetTics
  5998   001108  CFDE F055          	movff	postinc2,??_TI_GetTics+1
  5999   00110C  CFDE F056          	movff	postinc2,??_TI_GetTics+2
  6000   001110  CFDE F057          	movff	postinc2,??_TI_GetTics+3
  6001   001114  5054               	movf	??_TI_GetTics^0,w,c
  6002   001116  5C58               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  6003   001118  6E50               	movwf	?_TI_GetTics^0,c
  6004   00111A  5055               	movf	(??_TI_GetTics+1)^0,w,c
  6005   00111C  5859               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  6006   00111E  6E51               	movwf	(?_TI_GetTics+1)^0,c
  6007   001120  5056               	movf	(??_TI_GetTics+2)^0,w,c
  6008   001122  585A               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  6009   001124  6E52               	movwf	(?_TI_GetTics+2)^0,c
  6010   001126  5057               	movf	(??_TI_GetTics+3)^0,w,c
  6011   001128  585B               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  6012   00112A  6E53               	movwf	(?_TI_GetTics+3)^0,c
  6013   00112C  0012               	return		;funcret
  6014   00112E                     __end_of_TI_GetTics:
  6015                           	callstack 0
  6016                           
  6017 ;; *************** function _ReadFilas *****************
  6018 ;; Defined at:
  6019 ;;		line 9 in file "TAD_TECLADO.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;		None
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      unsigned char 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1
  6033 ;;      Params:         0       0       0
  6034 ;;      Locals:         0       0       0
  6035 ;;      Temps:          0       0       0
  6036 ;;      Totals:         0       0       0
  6037 ;;Total ram usage:        0 bytes
  6038 ;; Hardware stack levels used: 1
  6039 ;; Hardware stack levels required when called: 3
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_motorTeclado
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text32
  6048   00151A                     __ptext32:
  6049                           	callstack 0
  6050   00151A                     _ReadFilas:
  6051                           	callstack 26
  6052   00151A                     
  6053                           ;TAD_TECLADO.c: 10:     return (PORTD & 0x0F);
  6054   00151A  5083               	movf	131,w,c	;volatile
  6055   00151C  0B0F               	andlw	15
  6056   00151E  0012               	return		;funcret
  6057   001520                     __end_of_ReadFilas:
  6058                           	callstack 0
  6059                           
  6060 ;; *************** function _GetTecla *****************
  6061 ;; Defined at:
  6062 ;;		line 128 in file "TAD_TECLADO.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  6067 ;;  fila            1   16[COMRAM] unsigned char 
  6068 ;;  columna         1   15[COMRAM] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      unsigned char 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1
  6078 ;;      Params:         0       0       0
  6079 ;;      Locals:        14       0       0
  6080 ;;      Temps:          2       0       0
  6081 ;;      Totals:        16       0       0
  6082 ;;Total ram usage:       16 bytes
  6083 ;; Hardware stack levels used: 1
  6084 ;; Hardware stack levels required when called: 3
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_motorTeclado
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text33
  6093   000920                     __ptext33:
  6094                           	callstack 0
  6095   000920                     _GetTecla:
  6096                           	callstack 26
  6097   000920                     
  6098                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  6099   000920  6A5E               	clrf	GetTecla@columna^0,c
  6100                           
  6101                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  6102   000922  EFA5  F004         	goto	l1761
  6103   000926                     l178:
  6104   000926  6A5F               	clrf	GetTecla@fila^0,c
  6105   000928  EFC3  F004         	goto	l1773
  6106   00092C                     l1749:
  6107   00092C  0E01               	movlw	1
  6108   00092E  6E5F               	movwf	GetTecla@fila^0,c
  6109   000930  EFC3  F004         	goto	l1773
  6110   000934                     l1751:
  6111   000934  0E02               	movlw	2
  6112   000936  6E5F               	movwf	GetTecla@fila^0,c
  6113   000938  EFC3  F004         	goto	l1773
  6114   00093C                     l1753:
  6115   00093C  0E03               	movlw	3
  6116   00093E  6E5F               	movwf	GetTecla@fila^0,c
  6117   000940  EFC3  F004         	goto	l1773
  6118   000944                     l1755:
  6119   000944  0EFF               	movlw	255
  6120   000946  EFF1  F004         	goto	l184
  6121   00094A                     l1761:
  6122   00094A  5040               	movf	_Filas^0,w,c
  6123                           
  6124                           ; Switch size 1, requested type "simple"
  6125                           ; Number of cases is 4, Range of values is 1 to 8
  6126                           ; switch strategies available:
  6127                           ; Name         Instructions Cycles
  6128                           ; simple_byte           13     7 (average)
  6129                           ;	Chosen strategy is simple_byte
  6130   00094C  0A01               	xorlw	1	; case 1
  6131   00094E  B4D8               	btfsc	status,2,c
  6132   000950  EF93  F004         	goto	l178
  6133   000954  0A03               	xorlw	3	; case 2
  6134   000956  B4D8               	btfsc	status,2,c
  6135   000958  EF96  F004         	goto	l1749
  6136   00095C  0A06               	xorlw	6	; case 4
  6137   00095E  B4D8               	btfsc	status,2,c
  6138   000960  EF9A  F004         	goto	l1751
  6139   000964  0A0C               	xorlw	12	; case 8
  6140   000966  B4D8               	btfsc	status,2,c
  6141   000968  EF9E  F004         	goto	l1753
  6142   00096C  EFA2  F004         	goto	l1755
  6143   000970                     l186:
  6144   000970  6A5E               	clrf	GetTecla@columna^0,c
  6145   000972  EFDD  F004         	goto	l1775
  6146   000976                     l1763:
  6147   000976  0E01               	movlw	1
  6148   000978  6E5E               	movwf	GetTecla@columna^0,c
  6149   00097A  EFDD  F004         	goto	l1775
  6150   00097E                     l1765:
  6151   00097E  0E02               	movlw	2
  6152   000980  6E5E               	movwf	GetTecla@columna^0,c
  6153   000982  EFDD  F004         	goto	l1775
  6154   000986                     l1773:
  6155   000986  503F               	movf	_Columnas^0,w,c
  6156   000988  0B07               	andlw	7
  6157   00098A  6E50               	movwf	??_GetTecla^0,c
  6158   00098C  6A51               	clrf	(??_GetTecla+1)^0,c
  6159                           
  6160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6161                           ; Switch size 1, requested type "simple"
  6162                           ; Number of cases is 1, Range of values is 0 to 0
  6163                           ; switch strategies available:
  6164                           ; Name         Instructions Cycles
  6165                           ; simple_byte            4     3 (average)
  6166                           ;	Chosen strategy is simple_byte
  6167   00098E  5051               	movf	(??_GetTecla+1)^0,w,c
  6168   000990  0A00               	xorlw	0	; case 0
  6169   000992  B4D8               	btfsc	status,2,c
  6170   000994  EFCE  F004         	goto	l3833
  6171   000998  EFA2  F004         	goto	l1755
  6172   00099C                     l3833:
  6173                           
  6174                           ; Switch size 1, requested type "simple"
  6175                           ; Number of cases is 3, Range of values is 1 to 4
  6176                           ; switch strategies available:
  6177                           ; Name         Instructions Cycles
  6178                           ; simple_byte           10     6 (average)
  6179                           ;	Chosen strategy is simple_byte
  6180   00099C  5050               	movf	??_GetTecla^0,w,c
  6181   00099E  0A01               	xorlw	1	; case 1
  6182   0009A0  B4D8               	btfsc	status,2,c
  6183   0009A2  EFB8  F004         	goto	l186
  6184   0009A6  0A03               	xorlw	3	; case 2
  6185   0009A8  B4D8               	btfsc	status,2,c
  6186   0009AA  EFBB  F004         	goto	l1763
  6187   0009AE  0A06               	xorlw	6	; case 4
  6188   0009B0  B4D8               	btfsc	status,2,c
  6189   0009B2  EFBF  F004         	goto	l1765
  6190   0009B6  EFA2  F004         	goto	l1755
  6191   0009BA                     l1775:
  6192                           
  6193                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  6194   0009BA  0EC5               	movlw	low GetTecla@F2752
  6195   0009BC  6EF6               	movwf	tblptrl,c
  6196   0009BE                     	if	1	;There is more than 1 active tblptr byte
  6197   0009BE  0E1E               	movlw	high GetTecla@F2752
  6198   0009C0  6EF7               	movwf	tblptrh,c
  6199   0009C2                     	endif
  6200   0009C2                     	if	0	;There are less than 3 active tblptr bytes
  6201   0009C2                     	endif
  6202   0009C2  EE20  F052         	lfsr	2,GetTecla@keymap
  6203   0009C6  0E0B               	movlw	11
  6204   0009C8                     u660:
  6205   0009C8  0009               	tblrd		*+
  6206   0009CA  CFF5 FFDE          	movff	tablat,postinc2
  6207   0009CE  06E8               	decf	wreg,f,c
  6208   0009D0  E2FB               	bc	u660
  6209   0009D2                     
  6210                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  6211   0009D2  505F               	movf	GetTecla@fila^0,w,c
  6212   0009D4  0D03               	mullw	3
  6213   0009D6  50F3               	movf	243,w,c
  6214   0009D8  0F52               	addlw	low GetTecla@keymap
  6215   0009DA  245E               	addwf	GetTecla@columna^0,w,c
  6216   0009DC  6ED9               	movwf	fsr2l,c
  6217   0009DE  6ADA               	clrf	fsr2h,c
  6218   0009E0  50DF               	movf	indf2,w,c
  6219   0009E2                     l184:
  6220   0009E2  0012               	return		;funcret
  6221   0009E4                     __end_of_GetTecla:
  6222                           	callstack 0
  6223                           
  6224 ;; *************** function _initTeclado *****************
  6225 ;; Defined at:
  6226 ;;		line 13 in file "TAD_TECLADO.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      void 
  6233 ;; Registers used:
  6234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1
  6240 ;;      Params:         0       0       0
  6241 ;;      Locals:         0       0       0
  6242 ;;      Temps:          0       0       0
  6243 ;;      Totals:         0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used: 1
  6246 ;; Hardware stack levels required when called: 4
  6247 ;; This function calls:
  6248 ;;		_TI_NewTimer
  6249 ;;		_initPortsTeclado
  6250 ;; This function is called by:
  6251 ;;		_main
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text34
  6256   00145C                     __ptext34:
  6257                           	callstack 0
  6258   00145C                     _initTeclado:
  6259                           	callstack 26
  6260   00145C                     
  6261                           ;TAD_TECLADO.c: 14:  initPortsTeclado();
  6262   00145C  EC82  F00A         	call	_initPortsTeclado	;wreg free
  6263   001460                     
  6264                           ;TAD_TECLADO.c: 15:     Filas = 0x00;
  6265   001460  6A40               	clrf	_Filas^0,c
  6266   001462                     
  6267                           ;TAD_TECLADO.c: 16:     Columnas = 0x00;
  6268   001462  6A3F               	clrf	_Columnas^0,c
  6269   001464                     
  6270                           ;TAD_TECLADO.c: 17:     tecla = 0;
  6271   001464  6A3E               	clrf	_tecla^0,c
  6272   001466                     
  6273                           ;TAD_TECLADO.c: 18:  state = 0;
  6274   001466  6A3D               	clrf	_state^0,c
  6275   001468                     
  6276                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  6277   001468  0E4E               	movlw	low _timer
  6278   00146A  6E50               	movwf	TI_NewTimer@TimerHandle^0,c
  6279   00146C  EC1F  F008         	call	_TI_NewTimer	;wreg free
  6280   001470  0012               	return		;funcret
  6281   001472                     __end_of_initTeclado:
  6282                           	callstack 0
  6283                           
  6284 ;; *************** function _initPortsTeclado *****************
  6285 ;; Defined at:
  6286 ;;		line 22 in file "TAD_TECLADO.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1
  6300 ;;      Params:         0       0       0
  6301 ;;      Locals:         0       0       0
  6302 ;;      Temps:          0       0       0
  6303 ;;      Totals:         0       0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used: 1
  6306 ;; Hardware stack levels required when called: 3
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_initTeclado
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text35
  6315   001504                     __ptext35:
  6316                           	callstack 0
  6317   001504                     _initPortsTeclado:
  6318                           	callstack 26
  6319   001504                     
  6320                           ;TAD_TECLADO.c: 25:  TRISD = 0x0F;
  6321   001504  0E0F               	movlw	15
  6322   001506  6E95               	movwf	149,c	;volatile
  6323   001508                     
  6324                           ;TAD_TECLADO.c: 26:  LATD = 0x00;
  6325   001508  6A8C               	clrf	140,c	;volatile
  6326   00150A  0012               	return		;funcret
  6327   00150C                     __end_of_initPortsTeclado:
  6328                           	callstack 0
  6329                           
  6330 ;; *************** function _initRFID *****************
  6331 ;; Defined at:
  6332 ;;		line 135 in file "TAD_RFID.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;		None
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1
  6346 ;;      Params:         0       0       0
  6347 ;;      Locals:         0       0       0
  6348 ;;      Temps:          0       0       0
  6349 ;;      Totals:         0       0       0
  6350 ;;Total ram usage:        0 bytes
  6351 ;; Hardware stack levels used: 1
  6352 ;; Hardware stack levels required when called: 8
  6353 ;; This function calls:
  6354 ;;		_InitPortDirections
  6355 ;;		_MFRC522_Init
  6356 ;; This function is called by:
  6357 ;;		_main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text36
  6362   0014F2                     __ptext36:
  6363                           	callstack 0
  6364   0014F2                     _initRFID:
  6365                           	callstack 22
  6366   0014F2                     
  6367                           ;TAD_RFID.c: 136:     InitPortDirections();
  6368   0014F2  EC73  F00A         	call	_InitPortDirections	;wreg free
  6369   0014F6                     
  6370                           ;TAD_RFID.c: 137:     MFRC522_Init();
  6371   0014F6  EC4A  F008         	call	_MFRC522_Init	;wreg free
  6372   0014FA  0012               	return		;funcret
  6373   0014FC                     __end_of_initRFID:
  6374                           	callstack 0
  6375                           
  6376 ;; *************** function _MFRC522_Init *****************
  6377 ;; Defined at:
  6378 ;;		line 116 in file "TAD_RFID.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1
  6392 ;;      Params:         0       0       0
  6393 ;;      Locals:         0       0       0
  6394 ;;      Temps:          0       0       0
  6395 ;;      Totals:         0       0       0
  6396 ;;Total ram usage:        0 bytes
  6397 ;; Hardware stack levels used: 1
  6398 ;; Hardware stack levels required when called: 7
  6399 ;; This function calls:
  6400 ;;		_MFRC522_AntennaOff
  6401 ;;		_MFRC522_AntennaOn
  6402 ;;		_MFRC522_Reset
  6403 ;;		_MFRC522_Wr
  6404 ;; This function is called by:
  6405 ;;		_initRFID
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text37
  6410   001094                     __ptext37:
  6411                           	callstack 0
  6412   001094                     _MFRC522_Init:
  6413                           	callstack 22
  6414   001094                     
  6415                           ;TAD_RFID.c: 117:     LATCbits.LATC3 = 1;
  6416   001094  868B               	bsf	139,3,c	;volatile
  6417                           
  6418                           ;TAD_RFID.c: 118:     LATCbits.LATC4 = 1;
  6419   001096  888B               	bsf	139,4,c	;volatile
  6420   001098                     
  6421                           ;TAD_RFID.c: 120:     MFRC522_Reset();
  6422   001098  ECD1  F009         	call	_MFRC522_Reset	;wreg free
  6423                           
  6424                           ;TAD_RFID.c: 121:     MFRC522_Wr(0x2A, 0x8D);
  6425   00109C  0E8D               	movlw	141
  6426   00109E  6E5A               	movwf	MFRC522_Wr@value^0,c
  6427   0010A0  0E2A               	movlw	42
  6428   0010A2  EC4D  F005         	call	_MFRC522_Wr
  6429                           
  6430                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x2B, 0x3E);
  6431   0010A6  0E3E               	movlw	62
  6432   0010A8  6E5A               	movwf	MFRC522_Wr@value^0,c
  6433   0010AA  0E2B               	movlw	43
  6434   0010AC  EC4D  F005         	call	_MFRC522_Wr
  6435                           
  6436                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2D, 30);
  6437   0010B0  0E1E               	movlw	30
  6438   0010B2  6E5A               	movwf	MFRC522_Wr@value^0,c
  6439   0010B4  0E2D               	movlw	45
  6440   0010B6  EC4D  F005         	call	_MFRC522_Wr
  6441                           
  6442                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2C, 0);
  6443   0010BA  0E00               	movlw	0
  6444   0010BC  6E5A               	movwf	MFRC522_Wr@value^0,c
  6445   0010BE  0E2C               	movlw	44
  6446   0010C0  EC4D  F005         	call	_MFRC522_Wr
  6447                           
  6448                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x15, 0x40);
  6449   0010C4  0E40               	movlw	64
  6450   0010C6  6E5A               	movwf	MFRC522_Wr@value^0,c
  6451   0010C8  0E15               	movlw	21
  6452   0010CA  EC4D  F005         	call	_MFRC522_Wr
  6453                           
  6454                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x11, 0x3D);
  6455   0010CE  0E3D               	movlw	61
  6456   0010D0  6E5A               	movwf	MFRC522_Wr@value^0,c
  6457   0010D2  0E11               	movlw	17
  6458   0010D4  EC4D  F005         	call	_MFRC522_Wr
  6459                           
  6460                           ;TAD_RFID.c: 128:     MFRC522_AntennaOff();
  6461   0010D8  EC6D  F00A         	call	_MFRC522_AntennaOff	;wreg free
  6462                           
  6463                           ;TAD_RFID.c: 129:     MFRC522_AntennaOn();
  6464   0010DC  EC67  F00A         	call	_MFRC522_AntennaOn	;wreg free
  6465   0010E0  0012               	return		;funcret
  6466   0010E2                     __end_of_MFRC522_Init:
  6467                           	callstack 0
  6468                           
  6469 ;; *************** function _MFRC522_Reset *****************
  6470 ;; Defined at:
  6471 ;;		line 97 in file "TAD_RFID.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;		None
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1
  6485 ;;      Params:         0       0       0
  6486 ;;      Locals:         0       0       0
  6487 ;;      Temps:          0       0       0
  6488 ;;      Totals:         0       0       0
  6489 ;;Total ram usage:        0 bytes
  6490 ;; Hardware stack levels used: 1
  6491 ;; Hardware stack levels required when called: 5
  6492 ;; This function calls:
  6493 ;;		_MFRC522_Wr
  6494 ;;		_delay_us
  6495 ;; This function is called by:
  6496 ;;		_MFRC522_Init
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text38
  6501   0013A2                     __ptext38:
  6502                           	callstack 0
  6503   0013A2                     _MFRC522_Reset:
  6504                           	callstack 23
  6505   0013A2                     
  6506                           ;TAD_RFID.c: 98:     LATCbits.LATC4 = 1;
  6507   0013A2  888B               	bsf	139,4,c	;volatile
  6508   0013A4                     
  6509                           ;TAD_RFID.c: 99:     delay_us (1);
  6510   0013A4  0E01               	movlw	1
  6511   0013A6  EC6A  F009         	call	_delay_us
  6512   0013AA                     
  6513                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 0;
  6514   0013AA  988B               	bcf	139,4,c	;volatile
  6515                           
  6516                           ;TAD_RFID.c: 101:     delay_us (1);
  6517   0013AC  0E01               	movlw	1
  6518   0013AE  EC6A  F009         	call	_delay_us
  6519   0013B2                     
  6520                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 1;
  6521   0013B2  888B               	bsf	139,4,c	;volatile
  6522                           
  6523                           ;TAD_RFID.c: 103:     delay_us (1);
  6524   0013B4  0E01               	movlw	1
  6525   0013B6  EC6A  F009         	call	_delay_us
  6526                           
  6527                           ;TAD_RFID.c: 104:     MFRC522_Wr(0x01, 0x0F);
  6528   0013BA  0E0F               	movlw	15
  6529   0013BC  6E5A               	movwf	MFRC522_Wr@value^0,c
  6530   0013BE  0E01               	movlw	1
  6531   0013C0  EC4D  F005         	call	_MFRC522_Wr
  6532                           
  6533                           ;TAD_RFID.c: 105:     delay_us (1);
  6534   0013C4  0E01               	movlw	1
  6535   0013C6  EC6A  F009         	call	_delay_us
  6536   0013CA  0012               	return		;funcret
  6537   0013CC                     __end_of_MFRC522_Reset:
  6538                           	callstack 0
  6539                           
  6540 ;; *************** function _MFRC522_AntennaOn *****************
  6541 ;; Defined at:
  6542 ;;		line 108 in file "TAD_RFID.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1
  6556 ;;      Params:         0       0       0
  6557 ;;      Locals:         0       0       0
  6558 ;;      Temps:          0       0       0
  6559 ;;      Totals:         0       0       0
  6560 ;;Total ram usage:        0 bytes
  6561 ;; Hardware stack levels used: 1
  6562 ;; Hardware stack levels required when called: 6
  6563 ;; This function calls:
  6564 ;;		_MFRC522_Set_Bit
  6565 ;; This function is called by:
  6566 ;;		_MFRC522_Init
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text39
  6571   0014CE                     __ptext39:
  6572                           	callstack 0
  6573   0014CE                     _MFRC522_AntennaOn:
  6574                           	callstack 22
  6575   0014CE                     
  6576                           ;TAD_RFID.c: 109:     MFRC522_Set_Bit(0x14, 0x03);
  6577   0014CE  0E03               	movlw	3
  6578   0014D0  6E5F               	movwf	MFRC522_Set_Bit@mask^0,c
  6579   0014D2  0E14               	movlw	20
  6580   0014D4  EC4E  F00A         	call	_MFRC522_Set_Bit
  6581   0014D8  0012               	return		;funcret
  6582   0014DA                     __end_of_MFRC522_AntennaOn:
  6583                           	callstack 0
  6584                           
  6585 ;; *************** function _MFRC522_Set_Bit *****************
  6586 ;; Defined at:
  6587 ;;		line 93 in file "TAD_RFID.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  addr            1    wreg     unsigned char 
  6590 ;;  mask            1   16[COMRAM] unsigned char 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  addr            1   17[COMRAM] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1
  6602 ;;      Params:         1       0       0
  6603 ;;      Locals:         1       0       0
  6604 ;;      Temps:          0       0       0
  6605 ;;      Totals:         2       0       0
  6606 ;;Total ram usage:        2 bytes
  6607 ;; Hardware stack levels used: 1
  6608 ;; Hardware stack levels required when called: 5
  6609 ;; This function calls:
  6610 ;;		_MFRC522_Rd
  6611 ;;		_MFRC522_Wr
  6612 ;; This function is called by:
  6613 ;;		_MFRC522_AntennaOn
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text40
  6618   00149C                     __ptext40:
  6619                           	callstack 0
  6620   00149C                     _MFRC522_Set_Bit:
  6621                           	callstack 22
  6622                           
  6623                           ;incstack = 0
  6624                           ;MFRC522_Set_Bit@addr stored from wreg
  6625   00149C  6E60               	movwf	MFRC522_Set_Bit@addr^0,c
  6626   00149E                     
  6627                           ;TAD_RFID.c: 94:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  6628   00149E  5060               	movf	MFRC522_Set_Bit@addr^0,w,c
  6629   0014A0  ECA1  F005         	call	_MFRC522_Rd
  6630   0014A4  105F               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  6631   0014A6  6E5A               	movwf	MFRC522_Wr@value^0,c
  6632   0014A8  5060               	movf	MFRC522_Set_Bit@addr^0,w,c
  6633   0014AA  EC4D  F005         	call	_MFRC522_Wr
  6634   0014AE  0012               	return		;funcret
  6635   0014B0                     __end_of_MFRC522_Set_Bit:
  6636                           	callstack 0
  6637                           
  6638 ;; *************** function _MFRC522_AntennaOff *****************
  6639 ;; Defined at:
  6640 ;;		line 112 in file "TAD_RFID.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;		None
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;		None
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      void 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1
  6654 ;;      Params:         0       0       0
  6655 ;;      Locals:         0       0       0
  6656 ;;      Temps:          0       0       0
  6657 ;;      Totals:         0       0       0
  6658 ;;Total ram usage:        0 bytes
  6659 ;; Hardware stack levels used: 1
  6660 ;; Hardware stack levels required when called: 6
  6661 ;; This function calls:
  6662 ;;		_MFRC522_Clear_Bit
  6663 ;; This function is called by:
  6664 ;;		_MFRC522_Init
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text41
  6669   0014DA                     __ptext41:
  6670                           	callstack 0
  6671   0014DA                     _MFRC522_AntennaOff:
  6672                           	callstack 22
  6673   0014DA                     
  6674                           ;TAD_RFID.c: 113:     MFRC522_Clear_Bit(0x14, 0x03);
  6675   0014DA  0E03               	movlw	3
  6676   0014DC  6E5F               	movwf	MFRC522_Clear_Bit@mask^0,c
  6677   0014DE  0E14               	movlw	20
  6678   0014E0  EC15  F00A         	call	_MFRC522_Clear_Bit
  6679   0014E4  0012               	return		;funcret
  6680   0014E6                     __end_of_MFRC522_AntennaOff:
  6681                           	callstack 0
  6682                           
  6683 ;; *************** function _MFRC522_Clear_Bit *****************
  6684 ;; Defined at:
  6685 ;;		line 89 in file "TAD_RFID.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  addr            1    wreg     unsigned char 
  6688 ;;  mask            1   16[COMRAM] unsigned char 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  addr            1   18[COMRAM] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1
  6700 ;;      Params:         1       0       0
  6701 ;;      Locals:         1       0       0
  6702 ;;      Temps:          1       0       0
  6703 ;;      Totals:         3       0       0
  6704 ;;Total ram usage:        3 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 5
  6707 ;; This function calls:
  6708 ;;		_MFRC522_Rd
  6709 ;;		_MFRC522_Wr
  6710 ;; This function is called by:
  6711 ;;		_MFRC522_AntennaOff
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text42
  6716   00142A                     __ptext42:
  6717                           	callstack 0
  6718   00142A                     _MFRC522_Clear_Bit:
  6719                           	callstack 22
  6720                           
  6721                           ;incstack = 0
  6722                           ;MFRC522_Clear_Bit@addr stored from wreg
  6723   00142A  6E61               	movwf	MFRC522_Clear_Bit@addr^0,c
  6724   00142C                     
  6725                           ;TAD_RFID.c: 90:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  6726   00142C  505F               	movf	MFRC522_Clear_Bit@mask^0,w,c
  6727   00142E  0AFF               	xorlw	255
  6728   001430  6E60               	movwf	??_MFRC522_Clear_Bit^0,c
  6729   001432  5061               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6730   001434  ECA1  F005         	call	_MFRC522_Rd
  6731   001438  1460               	andwf	??_MFRC522_Clear_Bit^0,w,c
  6732   00143A  6E5A               	movwf	MFRC522_Wr@value^0,c
  6733   00143C  5061               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6734   00143E  EC4D  F005         	call	_MFRC522_Wr
  6735   001442  0012               	return		;funcret
  6736   001444                     __end_of_MFRC522_Clear_Bit:
  6737                           	callstack 0
  6738                           
  6739 ;; *************** function _MFRC522_Wr *****************
  6740 ;; Defined at:
  6741 ;;		line 61 in file "TAD_RFID.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  Address         1    wreg     unsigned char 
  6744 ;;  value           1   11[COMRAM] unsigned char 
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  Address         1   13[COMRAM] unsigned char 
  6747 ;;  i               1   15[COMRAM] unsigned char 
  6748 ;;  ucAddr          1   14[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1
  6758 ;;      Params:         1       0       0
  6759 ;;      Locals:         3       0       0
  6760 ;;      Temps:          1       0       0
  6761 ;;      Totals:         5       0       0
  6762 ;;Total ram usage:        5 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 4
  6765 ;; This function calls:
  6766 ;;		_delay_us
  6767 ;; This function is called by:
  6768 ;;		_MFRC522_Clear_Bit
  6769 ;;		_MFRC522_Set_Bit
  6770 ;;		_MFRC522_Reset
  6771 ;;		_MFRC522_Init
  6772 ;;		_motor_RFID
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text43
  6777   000A9A                     __ptext43:
  6778                           	callstack 0
  6779   000A9A                     _MFRC522_Wr:
  6780                           	callstack 24
  6781                           
  6782                           ;incstack = 0
  6783                           ;MFRC522_Wr@Address stored from wreg
  6784   000A9A  6E5C               	movwf	MFRC522_Wr@Address^0,c
  6785   000A9C                     
  6786                           ;TAD_RFID.c: 62:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  6787   000A9C  505C               	movf	MFRC522_Wr@Address^0,w,c
  6788   000A9E  245C               	addwf	MFRC522_Wr@Address^0,w,c
  6789   000AA0  0B7E               	andlw	126
  6790   000AA2  6E5D               	movwf	MFRC522_Wr@ucAddr^0,c
  6791   000AA4                     
  6792                           ;TAD_RFID.c: 63:     LATCbits.LATC2 = 0;
  6793   000AA4  948B               	bcf	139,2,c	;volatile
  6794   000AA6                     
  6795                           ;TAD_RFID.c: 64:     LATCbits.LATC3 = 0;
  6796   000AA6  968B               	bcf	139,3,c	;volatile
  6797   000AA8                     
  6798                           ;TAD_RFID.c: 65:     for (i = 8; i > 0; i--) {
  6799   000AA8  0E08               	movlw	8
  6800   000AAA  6E5E               	movwf	MFRC522_Wr@i^0,c
  6801   000AAC                     l2719:
  6802                           
  6803                           ;TAD_RFID.c: 66:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6804   000AAC  BE5D               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  6805   000AAE  EF5B  F005         	goto	u1581
  6806   000AB2  EF5F  F005         	goto	u1580
  6807   000AB6                     u1581:
  6808   000AB6  6A5B               	clrf	??_MFRC522_Wr^0,c
  6809   000AB8  2A5B               	incf	??_MFRC522_Wr^0,f,c
  6810   000ABA  EF60  F005         	goto	u1598
  6811   000ABE                     u1580:
  6812   000ABE  6A5B               	clrf	??_MFRC522_Wr^0,c
  6813   000AC0                     u1598:
  6814   000AC0  465B               	rlncf	??_MFRC522_Wr^0,f,c
  6815   000AC2  508B               	movf	139,w,c	;volatile
  6816   000AC4  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6817   000AC6  0BFD               	andlw	-3
  6818   000AC8  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6819   000ACA  6E8B               	movwf	139,c	;volatile
  6820   000ACC                     
  6821                           ;TAD_RFID.c: 67:         LATCbits.LATC2 = 1;
  6822   000ACC  848B               	bsf	139,2,c	;volatile
  6823                           
  6824                           ;TAD_RFID.c: 68:         ucAddr <<= 1;
  6825   000ACE  90D8               	bcf	status,0,c
  6826   000AD0  365D               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  6827   000AD2                     
  6828                           ;TAD_RFID.c: 69:         delay_us(5);
  6829   000AD2  0E05               	movlw	5
  6830   000AD4  EC6A  F009         	call	_delay_us
  6831   000AD8                     
  6832                           ;TAD_RFID.c: 70:         LATCbits.LATC2 = 0;
  6833   000AD8  948B               	bcf	139,2,c	;volatile
  6834   000ADA                     
  6835                           ;TAD_RFID.c: 71:         delay_us(5);
  6836   000ADA  0E05               	movlw	5
  6837   000ADC  EC6A  F009         	call	_delay_us
  6838   000AE0                     
  6839                           ;TAD_RFID.c: 72:     }
  6840   000AE0  065E               	decf	MFRC522_Wr@i^0,f,c
  6841   000AE2  505E               	movf	MFRC522_Wr@i^0,w,c
  6842   000AE4  A4D8               	btfss	status,2,c
  6843   000AE6  EF77  F005         	goto	u1601
  6844   000AEA  EF79  F005         	goto	u1600
  6845   000AEE                     u1601:
  6846   000AEE  EF56  F005         	goto	l2719
  6847   000AF2                     u1600:
  6848   000AF2                     
  6849                           ;TAD_RFID.c: 74:     for (i = 8; i > 0; i--) {
  6850   000AF2  0E08               	movlw	8
  6851   000AF4  6E5E               	movwf	MFRC522_Wr@i^0,c
  6852   000AF6                     l2737:
  6853                           
  6854                           ;TAD_RFID.c: 75:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  6855   000AF6  BE5A               	btfsc	MFRC522_Wr@value^0,7,c
  6856   000AF8  EF80  F005         	goto	u1611
  6857   000AFC  EF84  F005         	goto	u1610
  6858   000B00                     u1611:
  6859   000B00  6A5B               	clrf	??_MFRC522_Wr^0,c
  6860   000B02  2A5B               	incf	??_MFRC522_Wr^0,f,c
  6861   000B04  EF85  F005         	goto	u1628
  6862   000B08                     u1610:
  6863   000B08  6A5B               	clrf	??_MFRC522_Wr^0,c
  6864   000B0A                     u1628:
  6865   000B0A  465B               	rlncf	??_MFRC522_Wr^0,f,c
  6866   000B0C  508B               	movf	139,w,c	;volatile
  6867   000B0E  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6868   000B10  0BFD               	andlw	-3
  6869   000B12  185B               	xorwf	??_MFRC522_Wr^0,w,c
  6870   000B14  6E8B               	movwf	139,c	;volatile
  6871   000B16                     
  6872                           ;TAD_RFID.c: 76:         LATCbits.LATC2 = 1;
  6873   000B16  848B               	bsf	139,2,c	;volatile
  6874                           
  6875                           ;TAD_RFID.c: 77:         value <<= 1;
  6876   000B18  90D8               	bcf	status,0,c
  6877   000B1A  365A               	rlcf	MFRC522_Wr@value^0,f,c
  6878   000B1C                     
  6879                           ;TAD_RFID.c: 78:         delay_us(5);
  6880   000B1C  0E05               	movlw	5
  6881   000B1E  EC6A  F009         	call	_delay_us
  6882   000B22                     
  6883                           ;TAD_RFID.c: 79:         LATCbits.LATC2 = 0;
  6884   000B22  948B               	bcf	139,2,c	;volatile
  6885   000B24                     
  6886                           ;TAD_RFID.c: 80:         delay_us(5);
  6887   000B24  0E05               	movlw	5
  6888   000B26  EC6A  F009         	call	_delay_us
  6889   000B2A                     
  6890                           ;TAD_RFID.c: 81:     }
  6891   000B2A  065E               	decf	MFRC522_Wr@i^0,f,c
  6892   000B2C  505E               	movf	MFRC522_Wr@i^0,w,c
  6893   000B2E  A4D8               	btfss	status,2,c
  6894   000B30  EF9C  F005         	goto	u1631
  6895   000B34  EF9E  F005         	goto	u1630
  6896   000B38                     u1631:
  6897   000B38  EF7B  F005         	goto	l2737
  6898   000B3C                     u1630:
  6899   000B3C                     
  6900                           ;TAD_RFID.c: 83:     LATCbits.LATC3 = 1;
  6901   000B3C  868B               	bsf	139,3,c	;volatile
  6902                           
  6903                           ;TAD_RFID.c: 84:     LATCbits.LATC2 = 1;
  6904   000B3E  848B               	bsf	139,2,c	;volatile
  6905   000B40  0012               	return		;funcret
  6906   000B42                     __end_of_MFRC522_Wr:
  6907                           	callstack 0
  6908                           
  6909 ;; *************** function _MFRC522_Rd *****************
  6910 ;; Defined at:
  6911 ;;		line 30 in file "TAD_RFID.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  Address         1    wreg     unsigned char 
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;  Address         1    7[COMRAM] unsigned char 
  6916 ;;  i               1   10[COMRAM] unsigned char 
  6917 ;;  ucResult        1    9[COMRAM] unsigned char 
  6918 ;;  ucAddr          1    8[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      unsigned char 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1
  6928 ;;      Params:         0       0       0
  6929 ;;      Locals:         4       0       0
  6930 ;;      Temps:          1       0       0
  6931 ;;      Totals:         5       0       0
  6932 ;;Total ram usage:        5 bytes
  6933 ;; Hardware stack levels used: 1
  6934 ;; Hardware stack levels required when called: 4
  6935 ;; This function calls:
  6936 ;;		_delay_us
  6937 ;; This function is called by:
  6938 ;;		_MFRC522_Clear_Bit
  6939 ;;		_MFRC522_Set_Bit
  6940 ;;		_motor_RFID
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text44
  6945   000B42                     __ptext44:
  6946                           	callstack 0
  6947   000B42                     _MFRC522_Rd:
  6948                           	callstack 22
  6949                           
  6950                           ;incstack = 0
  6951                           ;MFRC522_Rd@Address stored from wreg
  6952   000B42  6E56               	movwf	MFRC522_Rd@Address^0,c
  6953   000B44                     
  6954                           ;TAD_RFID.c: 31:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  6955   000B44  5056               	movf	MFRC522_Rd@Address^0,w,c
  6956   000B46  2456               	addwf	MFRC522_Rd@Address^0,w,c
  6957   000B48  0B7E               	andlw	126
  6958   000B4A  0980               	iorlw	128
  6959   000B4C  6E57               	movwf	MFRC522_Rd@ucAddr^0,c
  6960   000B4E                     
  6961                           ;TAD_RFID.c: 32:     unsigned char ucResult = 0;
  6962   000B4E  6A58               	clrf	MFRC522_Rd@ucResult^0,c
  6963   000B50                     
  6964                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 0;
  6965   000B50  948B               	bcf	139,2,c	;volatile
  6966   000B52                     
  6967                           ;TAD_RFID.c: 35:     LATCbits.LATC3 = 0;
  6968   000B52  968B               	bcf	139,3,c	;volatile
  6969   000B54                     
  6970                           ;TAD_RFID.c: 37:     for (i = 8; i > 0; i--) {
  6971   000B54  0E08               	movlw	8
  6972   000B56  6E59               	movwf	MFRC522_Rd@i^0,c
  6973   000B58                     l1425:
  6974                           
  6975                           ;TAD_RFID.c: 38:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6976   000B58  BE57               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  6977   000B5A  EFB1  F005         	goto	u21
  6978   000B5E  EFB5  F005         	goto	u20
  6979   000B62                     u21:
  6980   000B62  6A55               	clrf	??_MFRC522_Rd^0,c
  6981   000B64  2A55               	incf	??_MFRC522_Rd^0,f,c
  6982   000B66  EFB6  F005         	goto	u38
  6983   000B6A                     u20:
  6984   000B6A  6A55               	clrf	??_MFRC522_Rd^0,c
  6985   000B6C                     u38:
  6986   000B6C  4655               	rlncf	??_MFRC522_Rd^0,f,c
  6987   000B6E  508B               	movf	139,w,c	;volatile
  6988   000B70  1855               	xorwf	??_MFRC522_Rd^0,w,c
  6989   000B72  0BFD               	andlw	-3
  6990   000B74  1855               	xorwf	??_MFRC522_Rd^0,w,c
  6991   000B76  6E8B               	movwf	139,c	;volatile
  6992   000B78                     
  6993                           ;TAD_RFID.c: 39:         LATCbits.LATC2 = 1;
  6994   000B78  848B               	bsf	139,2,c	;volatile
  6995   000B7A                     
  6996                           ;TAD_RFID.c: 40:         delay_us(5);
  6997   000B7A  0E05               	movlw	5
  6998   000B7C  EC6A  F009         	call	_delay_us
  6999   000B80                     
  7000                           ;TAD_RFID.c: 41:         ucAddr <<= 1;
  7001   000B80  90D8               	bcf	status,0,c
  7002   000B82  3657               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  7003   000B84                     
  7004                           ;TAD_RFID.c: 42:         LATCbits.LATC2 = 0;
  7005   000B84  948B               	bcf	139,2,c	;volatile
  7006                           
  7007                           ;TAD_RFID.c: 43:         delay_us(5);
  7008   000B86  0E05               	movlw	5
  7009   000B88  EC6A  F009         	call	_delay_us
  7010   000B8C                     
  7011                           ;TAD_RFID.c: 44:     }
  7012   000B8C  0659               	decf	MFRC522_Rd@i^0,f,c
  7013   000B8E  5059               	movf	MFRC522_Rd@i^0,w,c
  7014   000B90  A4D8               	btfss	status,2,c
  7015   000B92  EFCD  F005         	goto	u41
  7016   000B96  EFCF  F005         	goto	u40
  7017   000B9A                     u41:
  7018   000B9A  EFAC  F005         	goto	l1425
  7019   000B9E                     u40:
  7020   000B9E                     
  7021                           ;TAD_RFID.c: 46:     for (i = 8; i > 0; i--) {
  7022   000B9E  0E08               	movlw	8
  7023   000BA0  6E59               	movwf	MFRC522_Rd@i^0,c
  7024   000BA2                     l218:
  7025                           
  7026                           ;TAD_RFID.c: 47:         LATCbits.LATC2 = 1;
  7027   000BA2  848B               	bsf	139,2,c	;volatile
  7028   000BA4                     
  7029                           ;TAD_RFID.c: 48:         delay_us(5);
  7030   000BA4  0E05               	movlw	5
  7031   000BA6  EC6A  F009         	call	_delay_us
  7032   000BAA                     
  7033                           ;TAD_RFID.c: 49:         ucResult <<= 1;
  7034   000BAA  90D8               	bcf	status,0,c
  7035   000BAC  3658               	rlcf	MFRC522_Rd@ucResult^0,f,c
  7036   000BAE                     
  7037                           ;TAD_RFID.c: 50:         ucResult|= PORTCbits.RC0;
  7038   000BAE  B082               	btfsc	130,0,c	;volatile
  7039   000BB0  EFDC  F005         	goto	u51
  7040   000BB4  EFDF  F005         	goto	u50
  7041   000BB8                     u51:
  7042   000BB8  0E01               	movlw	1
  7043   000BBA  EFE0  F005         	goto	u56
  7044   000BBE                     u50:
  7045   000BBE  0E00               	movlw	0
  7046   000BC0                     u56:
  7047   000BC0  1258               	iorwf	MFRC522_Rd@ucResult^0,f,c
  7048   000BC2                     
  7049                           ;TAD_RFID.c: 51:         LATCbits.LATC2 = 0;
  7050   000BC2  948B               	bcf	139,2,c	;volatile
  7051                           
  7052                           ;TAD_RFID.c: 52:         delay_us(5);
  7053   000BC4  0E05               	movlw	5
  7054   000BC6  EC6A  F009         	call	_delay_us
  7055   000BCA                     
  7056                           ;TAD_RFID.c: 53:     }
  7057   000BCA  0659               	decf	MFRC522_Rd@i^0,f,c
  7058   000BCC  5059               	movf	MFRC522_Rd@i^0,w,c
  7059   000BCE  A4D8               	btfss	status,2,c
  7060   000BD0  EFEC  F005         	goto	u61
  7061   000BD4  EFEE  F005         	goto	u60
  7062   000BD8                     u61:
  7063   000BD8  EFD1  F005         	goto	l218
  7064   000BDC                     u60:
  7065   000BDC                     
  7066                           ;TAD_RFID.c: 55:     LATCbits.LATC3 = 1;
  7067   000BDC  868B               	bsf	139,3,c	;volatile
  7068                           
  7069                           ;TAD_RFID.c: 56:     LATCbits.LATC2 = 1;
  7070   000BDE  848B               	bsf	139,2,c	;volatile
  7071   000BE0                     
  7072                           ;TAD_RFID.c: 57:     return ucResult;
  7073   000BE0  5058               	movf	MFRC522_Rd@ucResult^0,w,c
  7074   000BE2  0012               	return		;funcret
  7075   000BE4                     __end_of_MFRC522_Rd:
  7076                           	callstack 0
  7077                           
  7078 ;; *************** function _delay_us *****************
  7079 ;; Defined at:
  7080 ;;		line 25 in file "TAD_RFID.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  howMany         1    wreg     unsigned char 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  howMany         1    4[COMRAM] unsigned char 
  7085 ;;  x               1    5[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, prodl, prodh
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1
  7095 ;;      Params:         0       0       0
  7096 ;;      Locals:         2       0       0
  7097 ;;      Temps:          3       0       0
  7098 ;;      Totals:         5       0       0
  7099 ;;Total ram usage:        5 bytes
  7100 ;; Hardware stack levels used: 1
  7101 ;; Hardware stack levels required when called: 3
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_MFRC522_Rd
  7106 ;;		_MFRC522_Wr
  7107 ;;		_MFRC522_Reset
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text45
  7112   0012D4                     __ptext45:
  7113                           	callstack 0
  7114   0012D4                     _delay_us:
  7115                           	callstack 24
  7116                           
  7117                           ;incstack = 0
  7118                           ;delay_us@howMany stored from wreg
  7119   0012D4  6E53               	movwf	delay_us@howMany^0,c
  7120   0012D6                     
  7121                           ;TAD_RFID.c: 26:     char x;;TAD_RFID.c: 27:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  7122   0012D6  6A54               	clrf	delay_us@x^0,c
  7123   0012D8  EF70  F009         	goto	l1397
  7124   0012DC                     l211:
  7125   0012DC  0000               	nop	
  7126   0012DE  2A54               	incf	delay_us@x^0,f,c
  7127   0012E0                     l1397:
  7128   0012E0  5053               	movf	delay_us@howMany^0,w,c
  7129   0012E2  0D10               	mullw	16
  7130   0012E4  5054               	movf	delay_us@x^0,w,c
  7131   0012E6  6E50               	movwf	??_delay_us^0,c
  7132   0012E8  6A51               	clrf	(??_delay_us+1)^0,c
  7133   0012EA  50F3               	movf	243,w,c
  7134   0012EC  5C50               	subwf	??_delay_us^0,w,c
  7135   0012EE  5051               	movf	(??_delay_us+1)^0,w,c
  7136   0012F0  0A80               	xorlw	128
  7137   0012F2  6E52               	movwf	(??_delay_us+2)^0,c
  7138   0012F4  50F4               	movf	244,w,c
  7139   0012F6  0A80               	xorlw	128
  7140   0012F8  5852               	subwfb	(??_delay_us+2)^0,w,c
  7141   0012FA  A0D8               	btfss	status,0,c
  7142   0012FC  EF82  F009         	goto	u11
  7143   001300  EF84  F009         	goto	u10
  7144   001304                     u11:
  7145   001304  EF6E  F009         	goto	l211
  7146   001308                     u10:
  7147   001308  0012               	return		;funcret
  7148   00130A                     __end_of_delay_us:
  7149                           	callstack 0
  7150                           
  7151 ;; *************** function _InitPortDirections *****************
  7152 ;; Defined at:
  7153 ;;		line 17 in file "TAD_RFID.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		None
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1
  7167 ;;      Params:         0       0       0
  7168 ;;      Locals:         0       0       0
  7169 ;;      Temps:          0       0       0
  7170 ;;      Totals:         0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used: 1
  7173 ;; Hardware stack levels required when called: 3
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_initRFID
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text46
  7182   0014E6                     __ptext46:
  7183                           	callstack 0
  7184   0014E6                     _InitPortDirections:
  7185                           	callstack 26
  7186   0014E6                     
  7187                           ;TAD_RFID.c: 18:     TRISCbits.TRISC0 = 1;
  7188   0014E6  8094               	bsf	148,0,c	;volatile
  7189                           
  7190                           ;TAD_RFID.c: 19:     TRISCbits.TRISC1 = 0;
  7191   0014E8  9294               	bcf	148,1,c	;volatile
  7192                           
  7193                           ;TAD_RFID.c: 20:     TRISCbits.TRISC2 = 0;
  7194   0014EA  9494               	bcf	148,2,c	;volatile
  7195                           
  7196                           ;TAD_RFID.c: 21:     TRISCbits.TRISC3 = 0;
  7197   0014EC  9694               	bcf	148,3,c	;volatile
  7198                           
  7199                           ;TAD_RFID.c: 22:     TRISCbits.TRISC4 = 0;
  7200   0014EE  9894               	bcf	148,4,c	;volatile
  7201   0014F0  0012               	return		;funcret
  7202   0014F2                     __end_of_InitPortDirections:
  7203                           	callstack 0
  7204                           
  7205 ;; *************** function _initPorts *****************
  7206 ;; Defined at:
  7207 ;;		line 60 in file "main.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1
  7221 ;;      Params:         0       0       0
  7222 ;;      Locals:         0       0       0
  7223 ;;      Temps:          0       0       0
  7224 ;;      Totals:         0       0       0
  7225 ;;Total ram usage:        0 bytes
  7226 ;; Hardware stack levels used: 1
  7227 ;; Hardware stack levels required when called: 3
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_main
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text47
  7236   00150C                     __ptext47:
  7237                           	callstack 0
  7238   00150C                     _initPorts:
  7239                           	callstack 27
  7240   00150C  0E0F               	movlw	15
  7241   00150E  6EC1               	movwf	193,c	;volatile
  7242   001510  9496               	bcf	150,2,c	;volatile
  7243   001512  0012               	return		;funcret
  7244   001514                     __end_of_initPorts:
  7245                           	callstack 0
  7246                           
  7247 ;; *************** function _initLeds *****************
  7248 ;; Defined at:
  7249 ;;		line 9 in file "TAD_LEDS.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;		None
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;		None
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1
  7263 ;;      Params:         0       0       0
  7264 ;;      Locals:         0       0       0
  7265 ;;      Temps:          0       0       0
  7266 ;;      Totals:         0       0       0
  7267 ;;Total ram usage:        0 bytes
  7268 ;; Hardware stack levels used: 1
  7269 ;; Hardware stack levels required when called: 4
  7270 ;; This function calls:
  7271 ;;		_TI_NewTimer
  7272 ;; This function is called by:
  7273 ;;		_main
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text48
  7278   0014C0                     __ptext48:
  7279                           	callstack 0
  7280   0014C0                     _initLeds:
  7281                           	callstack 26
  7282   0014C0                     
  7283                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  7284   0014C0  6A92               	clrf	146,c	;volatile
  7285                           
  7286                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  7287   0014C2  6A96               	clrf	150,c	;volatile
  7288   0014C4                     
  7289                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  7290   0014C4  0E4C               	movlw	low _timer@TAD_LEDS$F1049
  7291   0014C6  6E50               	movwf	TI_NewTimer@TimerHandle^0,c
  7292   0014C8  EC1F  F008         	call	_TI_NewTimer	;wreg free
  7293   0014CC  0012               	return		;funcret
  7294   0014CE                     __end_of_initLeds:
  7295                           	callstack 0
  7296                           
  7297 ;; *************** function _TI_NewTimer *****************
  7298 ;; Defined at:
  7299 ;;		line 43 in file "TAD_TIMER.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  7302 ;;		 -> timer@TAD_LEDS$F1049(1), Timer(1), timer(1), 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  Comptador       1    3[COMRAM] unsigned char 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  1    wreg      unsigned char 
  7307 ;; Registers used:
  7308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1
  7314 ;;      Params:         1       0       0
  7315 ;;      Locals:         1       0       0
  7316 ;;      Temps:          1       0       0
  7317 ;;      Totals:         3       0       0
  7318 ;;Total ram usage:        3 bytes
  7319 ;; Hardware stack levels used: 1
  7320 ;; Hardware stack levels required when called: 3
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_initTeclado
  7325 ;;		_initLeds
  7326 ;;		_LcInit
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text49
  7331   00103E                     __ptext49:
  7332                           	callstack 0
  7333   00103E                     _TI_NewTimer:
  7334                           	callstack 26
  7335   00103E                     
  7336                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  7337   00103E  6A52               	clrf	TI_NewTimer@Comptador^0,c
  7338                           
  7339                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7340   001040  EF2E  F008         	goto	l2965
  7341   001044                     l2961:
  7342                           
  7343                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  7344   001044  2A52               	incf	TI_NewTimer@Comptador^0,f,c
  7345   001046  0E04               	movlw	4
  7346   001048  1852               	xorwf	TI_NewTimer@Comptador^0,w,c
  7347   00104A  A4D8               	btfss	status,2,c
  7348   00104C  EF2A  F008         	goto	u2121
  7349   001050  EF2C  F008         	goto	u2120
  7350   001054                     u2121:
  7351   001054  EF2E  F008         	goto	l2965
  7352   001058                     u2120:
  7353   001058  EF49  F008         	goto	l83
  7354   00105C                     l2965:
  7355                           
  7356                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7357   00105C  5052               	movf	TI_NewTimer@Comptador^0,w,c
  7358   00105E  0D05               	mullw	5
  7359   001060  50F3               	movf	243,w,c
  7360   001062  0F05               	addlw	low (_Timers+4)
  7361   001064  6ED9               	movwf	fsr2l,c
  7362   001066  6ADA               	clrf	fsr2h,c
  7363   001068  04DE               	decf	postinc2,w,c
  7364   00106A  B4D8               	btfsc	status,2,c
  7365   00106C  EF3A  F008         	goto	u2131
  7366   001070  EF3C  F008         	goto	u2130
  7367   001074                     u2131:
  7368   001074  EF22  F008         	goto	l2961
  7369   001078                     u2130:
  7370   001078                     
  7371                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  7372   001078  5052               	movf	TI_NewTimer@Comptador^0,w,c
  7373   00107A  0D05               	mullw	5
  7374   00107C  50F3               	movf	243,w,c
  7375   00107E  0F05               	addlw	low (_Timers+4)
  7376   001080  6ED9               	movwf	fsr2l,c
  7377   001082  6ADA               	clrf	fsr2h,c
  7378   001084  0E01               	movlw	1
  7379   001086  6EDF               	movwf	indf2,c
  7380   001088                     
  7381                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  7382   001088  5050               	movf	TI_NewTimer@TimerHandle^0,w,c
  7383   00108A  6ED9               	movwf	fsr2l,c
  7384   00108C  6ADA               	clrf	fsr2h,c
  7385   00108E  C052  FFDF         	movff	TI_NewTimer@Comptador,indf2
  7386   001092                     l83:
  7387   001092  0012               	return		;funcret
  7388   001094                     __end_of_TI_NewTimer:
  7389                           	callstack 0
  7390                           
  7391 ;; *************** function _Terminal_Init *****************
  7392 ;; Defined at:
  7393 ;;		line 8 in file "TAD_TERMINAL.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;		None
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;		None
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      void 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1
  7407 ;;      Params:         0       0       0
  7408 ;;      Locals:         0       0       0
  7409 ;;      Temps:          0       0       0
  7410 ;;      Totals:         0       0       0
  7411 ;;Total ram usage:        0 bytes
  7412 ;; Hardware stack levels used: 1
  7413 ;; Hardware stack levels required when called: 3
  7414 ;; This function calls:
  7415 ;;		Nothing
  7416 ;; This function is called by:
  7417 ;;		_main
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text50
  7422   0014B0                     __ptext50:
  7423                           	callstack 0
  7424   0014B0                     _Terminal_Init:
  7425                           	callstack 27
  7426   0014B0                     
  7427                           ;TAD_TERMINAL.c: 9:  TXSTA = 0x24;
  7428   0014B0  0E24               	movlw	36
  7429   0014B2  6EAC               	movwf	172,c	;volatile
  7430                           
  7431                           ;TAD_TERMINAL.c: 10:  RCSTA = 0x90;
  7432   0014B4  0E90               	movlw	144
  7433   0014B6  6EAB               	movwf	171,c	;volatile
  7434   0014B8                     
  7435                           ;TAD_TERMINAL.c: 11:  SPBRG = 255;
  7436   0014B8  68AF               	setf	175,c	;volatile
  7437   0014BA                     
  7438                           ;TAD_TERMINAL.c: 12:  BAUDCON = 0x00;
  7439   0014BA  6AB8               	clrf	184,c	;volatile
  7440   0014BC                     
  7441                           ;TAD_TERMINAL.c: 13:  hashtag_pressed = 0;
  7442   0014BC  6A2D               	clrf	_hashtag_pressed^0,c
  7443   0014BE  0012               	return		;funcret
  7444   0014C0                     __end_of_Terminal_Init:
  7445                           	callstack 0
  7446                           
  7447 ;; *************** function _TI_Init *****************
  7448 ;; Defined at:
  7449 ;;		line 32 in file "TAD_TIMER.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  counter         1    1[COMRAM] unsigned char 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1
  7463 ;;      Params:         0       0       0
  7464 ;;      Locals:         1       0       0
  7465 ;;      Temps:          0       0       0
  7466 ;;      Totals:         1       0       0
  7467 ;;Total ram usage:        1 bytes
  7468 ;; Hardware stack levels used: 1
  7469 ;; Hardware stack levels required when called: 3
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_main
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text51
  7478   00130A                     __ptext51:
  7479                           	callstack 0
  7480   00130A                     _TI_Init:
  7481                           	callstack 27
  7482   00130A                     
  7483                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7484   00130A  6A50               	clrf	TI_Init@counter^0,c
  7485   00130C                     l1985:
  7486                           
  7487                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7488   00130C  5050               	movf	TI_Init@counter^0,w,c
  7489   00130E  0D05               	mullw	5
  7490   001310  50F3               	movf	243,w,c
  7491   001312  0F05               	addlw	low (_Timers+4)
  7492   001314  6ED9               	movwf	fsr2l,c
  7493   001316  6ADA               	clrf	fsr2h,c
  7494   001318  6ADF               	clrf	indf2,c
  7495   00131A                     
  7496                           ;TAD_TIMER.c: 35:  }
  7497   00131A  2A50               	incf	TI_Init@counter^0,f,c
  7498   00131C  0E03               	movlw	3
  7499   00131E  6450               	cpfsgt	TI_Init@counter^0,c
  7500   001320  EF94  F009         	goto	u891
  7501   001324  EF96  F009         	goto	u890
  7502   001328                     u891:
  7503   001328  EF86  F009         	goto	l1985
  7504   00132C                     u890:
  7505   00132C                     
  7506                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7507   00132C  0E82               	movlw	130
  7508   00132E  6ED5               	movwf	213,c	;volatile
  7509                           
  7510                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7511   001330  0EF6               	movlw	246
  7512   001332  6ED7               	movwf	215,c	;volatile
  7513   001334  0E3C               	movlw	60
  7514   001336  6ED6               	movwf	214,c	;volatile
  7515   001338                     
  7516                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7517   001338  94F2               	bcf	242,2,c	;volatile
  7518   00133A                     
  7519                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7520   00133A  8AF2               	bsf	242,5,c	;volatile
  7521   00133C  0012               	return		;funcret
  7522   00133E                     __end_of_TI_Init:
  7523                           	callstack 0
  7524                           
  7525 ;; *************** function _LowRSI *****************
  7526 ;; Defined at:
  7527 ;;		line 33 in file "main.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		None
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1
  7541 ;;      Params:         0       0       0
  7542 ;;      Locals:         0       0       0
  7543 ;;      Temps:          1       0       0
  7544 ;;      Totals:         1       0       0
  7545 ;;Total ram usage:        1 bytes
  7546 ;; Hardware stack levels used: 1
  7547 ;; Hardware stack levels required when called: 2
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		Interrupt level 1
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	intcodelo
  7556   000018                     __pintcodelo:
  7557                           	callstack 0
  7558   000018                     _LowRSI:
  7559                           	callstack 22
  7560                           
  7561                           ;incstack = 0
  7562   000018  806F               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7563   00001A  CFE0 F04F          	movff	bsr,??_LowRSI
  7564   00001E  C04F  FFE0         	movff	??_LowRSI,bsr
  7565   000022  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7566   000024  0010               	retfie	
  7567   000026                     __end_of_LowRSI:
  7568                           	callstack 0
  7569                           
  7570 ;; *************** function _HighRSI *****************
  7571 ;; Defined at:
  7572 ;;		line 29 in file "main.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1
  7586 ;;      Params:         0       0       0
  7587 ;;      Locals:         0       0       0
  7588 ;;      Temps:          0       0       0
  7589 ;;      Totals:         0       0       0
  7590 ;;Total ram usage:        0 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 1
  7593 ;; This function calls:
  7594 ;;		_RSI_Timer0
  7595 ;; This function is called by:
  7596 ;;		Interrupt level 2
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	intcode
  7601   000008                     __pintcode:
  7602                           	callstack 0
  7603   000008                     _HighRSI:
  7604                           	callstack 22
  7605                           
  7606                           ;incstack = 0
  7607   000008  826F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7608   00000A  EF39  F00A         	goto	int_func
  7609                           
  7610                           	psect	intcode_body
  7611   001472                     __pintcode_body:
  7612                           	callstack 22
  7613   001472                     int_func:
  7614                           	callstack 22
  7615   001472                     
  7616                           ;main.c: 31:   motor_LEDs();
  7617   001472  A4F2               	btfss	242,2,c	;volatile
  7618   001474  EF3E  F00A         	goto	i2u127_41
  7619   001478  EF40  F00A         	goto	i2u127_40
  7620   00147C                     i2u127_41:
  7621   00147C  EF42  F00A         	goto	i2l38
  7622   001480                     i2u127_40:
  7623   001480  EC22  F00A         	call	_RSI_Timer0	;wreg free
  7624   001484                     i2l38:
  7625   001484  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7626   001486  0011               	retfie		f
  7627   001488                     __end_of_HighRSI:
  7628                           	callstack 0
  7629                           
  7630 ;; *************** function _RSI_Timer0 *****************
  7631 ;; Defined at:
  7632 ;;		line 25 in file "TAD_TIMER.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;		None
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;		None
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  1    wreg      void 
  7639 ;; Registers used:
  7640 ;;		wreg, status,2, status,0
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1
  7646 ;;      Params:         0       0       0
  7647 ;;      Locals:         0       0       0
  7648 ;;      Temps:          0       0       0
  7649 ;;      Totals:         0       0       0
  7650 ;;Total ram usage:        0 bytes
  7651 ;; Hardware stack levels used: 1
  7652 ;; This function calls:
  7653 ;;		Nothing
  7654 ;; This function is called by:
  7655 ;;		_HighRSI
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text54
  7660   001444                     __ptext54:
  7661                           	callstack 0
  7662   001444                     _RSI_Timer0:
  7663                           	callstack 22
  7664   001444                     
  7665                           ;TAD_TIMER.c: 27:     TMR0=63036;
  7666   001444  0EF6               	movlw	246
  7667   001446  6ED7               	movwf	215,c	;volatile
  7668   001448  0E3C               	movlw	60
  7669   00144A  6ED6               	movwf	214,c	;volatile
  7670   00144C                     
  7671                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  7672   00144C  94F2               	bcf	4082,2,c	;volatile
  7673   00144E                     
  7674                           ;TAD_TIMER.c: 29:     Tics++;
  7675   00144E  0E01               	movlw	1
  7676   001450  261B               	addwf	_Tics^0,f,c	;volatile
  7677   001452  0E00               	movlw	0
  7678   001454  221C               	addwfc	(_Tics+1)^0,f,c	;volatile
  7679   001456  221D               	addwfc	(_Tics+2)^0,f,c	;volatile
  7680   001458  221E               	addwfc	(_Tics+3)^0,f,c	;volatile
  7681   00145A  0012               	return		;funcret
  7682   00145C                     __end_of_RSI_Timer0:
  7683                           	callstack 0
  7684                           
  7685                           	psect	rparam
  7686   000001                     ___rparam_used  equ	1
  7687   000000                     ___param_bank   equ	0
  7688   000000                     __Lparam        equ	__Lrparam
  7689   000000                     __Hparam        equ	__Hrparam
  7690                           
  7691                           	psect	temp
  7692   00006F                     btemp:
  7693                           	callstack 0
  7694   00006F                     	ds	1
  7695   00006F                     int$flags       set	btemp
  7696   000070                     wtemp8          set	btemp+1
  7697   000070                     ttemp5          set	btemp+1
  7698   000073                     ttemp6          set	btemp+4
  7699   000077                     ttemp7          set	btemp+8
  7700                           
  7701                           	psect	idloc
  7702                           
  7703                           ;Config register IDLOC0 @ 0x200000
  7704                           ;	unspecified, using default values
  7705   200000                     	org	2097152
  7706   200000  FF                 	db	255
  7707                           
  7708                           ;Config register IDLOC1 @ 0x200001
  7709                           ;	unspecified, using default values
  7710   200001                     	org	2097153
  7711   200001  FF                 	db	255
  7712                           
  7713                           ;Config register IDLOC2 @ 0x200002
  7714                           ;	unspecified, using default values
  7715   200002                     	org	2097154
  7716   200002  FF                 	db	255
  7717                           
  7718                           ;Config register IDLOC3 @ 0x200003
  7719                           ;	unspecified, using default values
  7720   200003                     	org	2097155
  7721   200003  FF                 	db	255
  7722                           
  7723                           ;Config register IDLOC4 @ 0x200004
  7724                           ;	unspecified, using default values
  7725   200004                     	org	2097156
  7726   200004  FF                 	db	255
  7727                           
  7728                           ;Config register IDLOC5 @ 0x200005
  7729                           ;	unspecified, using default values
  7730   200005                     	org	2097157
  7731   200005  FF                 	db	255
  7732                           
  7733                           ;Config register IDLOC6 @ 0x200006
  7734                           ;	unspecified, using default values
  7735   200006                     	org	2097158
  7736   200006  FF                 	db	255
  7737                           
  7738                           ;Config register IDLOC7 @ 0x200007
  7739                           ;	unspecified, using default values
  7740   200007                     	org	2097159
  7741   200007  FF                 	db	255
  7742                           
  7743                           	psect	config
  7744                           
  7745                           ; Padding undefined space
  7746   300000                     	org	3145728
  7747   300000  FF                 	db	255
  7748                           
  7749                           ;Config register CONFIG1H @ 0x300001
  7750                           ;	Oscillator
  7751                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  7752                           ;	Fail-Safe Clock Monitor Enable bit
  7753                           ;	FCMEN = 0x0, unprogrammed default
  7754                           ;	Internal/External Oscillator Switchover bit
  7755                           ;	IESO = 0x0, unprogrammed default
  7756   300001                     	org	3145729
  7757   300001  06                 	db	6
  7758                           
  7759                           ;Config register CONFIG2L @ 0x300002
  7760                           ;	Power-up Timer Enable bit
  7761                           ;	PWRT = OFF, PWRT disabled
  7762                           ;	Brown-out Reset Enable bits
  7763                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  7764                           ;	Brown-out Reset Voltage bits
  7765                           ;	BORV = 0x3, unprogrammed default
  7766   300002                     	org	3145730
  7767   300002  19                 	db	25
  7768                           
  7769                           ;Config register CONFIG2H @ 0x300003
  7770                           ;	Watchdog Timer Enable bit
  7771                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7772                           ;	Watchdog Timer Postscale Select bits
  7773                           ;	WDTPS = 0xF, unprogrammed default
  7774   300003                     	org	3145731
  7775   300003  1E                 	db	30
  7776                           
  7777                           ; Padding undefined space
  7778   300004                     	org	3145732
  7779   300004  FF                 	db	255
  7780                           
  7781                           ;Config register CONFIG3H @ 0x300005
  7782                           ;	CCP2 MUX bit
  7783                           ;	CCP2MX = 0x1, unprogrammed default
  7784                           ;	PORTB A/D Enable bit
  7785                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7786                           ;	Low-Power Timer1 Oscillator Enable bit
  7787                           ;	LPT1OSC = 0x0, unprogrammed default
  7788                           ;	MCLR Pin Enable bit
  7789                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  7790   300005                     	org	3145733
  7791   300005  01                 	db	1
  7792                           
  7793                           ;Config register CONFIG4L @ 0x300006
  7794                           ;	Stack Full/Underflow Reset Enable bit
  7795                           ;	STVREN = 0x1, unprogrammed default
  7796                           ;	Single-Supply ICSP Enable bit
  7797                           ;	LVP = OFF, Single-Supply ICSP disabled
  7798                           ;	Boot Block Size Select bits
  7799                           ;	BBSIZ = 0x0, unprogrammed default
  7800                           ;	Extended Instruction Set Enable bit
  7801                           ;	XINST = 0x0, unprogrammed default
  7802                           ;	Background Debugger Enable bit
  7803                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  7804   300006                     	org	3145734
  7805   300006  81                 	db	129
  7806                           
  7807                           ; Padding undefined space
  7808   300007                     	org	3145735
  7809   300007  FF                 	db	255
  7810                           
  7811                           ;Config register CONFIG5L @ 0x300008
  7812                           ;	unspecified, using default values
  7813                           ;	Code Protection bit
  7814                           ;	CP0 = 0x1, unprogrammed default
  7815                           ;	Code Protection bit
  7816                           ;	CP1 = 0x1, unprogrammed default
  7817   300008                     	org	3145736
  7818   300008  03                 	db	3
  7819                           
  7820                           ;Config register CONFIG5H @ 0x300009
  7821                           ;	unspecified, using default values
  7822                           ;	Boot Block Code Protection bitProtect Boot
  7823                           ;	CPB = 0x1, unprogrammed default
  7824                           ;	Data EEPROM Code Protection bit
  7825                           ;	CPD = 0x1, unprogrammed default
  7826   300009                     	org	3145737
  7827   300009  C0                 	db	192
  7828                           
  7829                           ;Config register CONFIG6L @ 0x30000A
  7830                           ;	unspecified, using default values
  7831                           ;	Write Protection bit
  7832                           ;	WRT0 = 0x1, unprogrammed default
  7833                           ;	Write Protection bit
  7834                           ;	WRT1 = 0x1, unprogrammed default
  7835   30000A                     	org	3145738
  7836   30000A  03                 	db	3
  7837                           
  7838                           ;Config register CONFIG6H @ 0x30000B
  7839                           ;	unspecified, using default values
  7840                           ;	Configuration Register Write Protection bit
  7841                           ;	WRTC = 0x1, unprogrammed default
  7842                           ;	Boot Block Write Protection bit
  7843                           ;	WRTB = 0x1, unprogrammed default
  7844                           ;	Data EEPROM Write Protection bit
  7845                           ;	WRTD = 0x1, unprogrammed default
  7846   30000B                     	org	3145739
  7847   30000B  E0                 	db	224
  7848                           
  7849                           ;Config register CONFIG7L @ 0x30000C
  7850                           ;	unspecified, using default values
  7851                           ;	Table Read Protection bit
  7852                           ;	EBTR0 = 0x1, unprogrammed default
  7853                           ;	Table Read Protection bit
  7854                           ;	EBTR1 = 0x1, unprogrammed default
  7855   30000C                     	org	3145740
  7856   30000C  03                 	db	3
  7857                           
  7858                           ;Config register CONFIG7H @ 0x30000D
  7859                           ;	unspecified, using default values
  7860                           ;	Boot Block Table Read Protection bit
  7861                           ;	EBTRB = 0x1, unprogrammed default
  7862   30000D                     	org	3145741
  7863   30000D  40                 	db	64
  7864                           tosu	equ	0xFFF
  7865                           tosh	equ	0xFFE
  7866                           tosl	equ	0xFFD
  7867                           stkptr	equ	0xFFC
  7868                           pclatu	equ	0xFFB
  7869                           pclath	equ	0xFFA
  7870                           pcl	equ	0xFF9
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           indf0	equ	0xFEF
  7878                           postinc0	equ	0xFEE
  7879                           postdec0	equ	0xFED
  7880                           preinc0	equ	0xFEC
  7881                           plusw0	equ	0xFEB
  7882                           fsr0h	equ	0xFEA
  7883                           fsr0l	equ	0xFE9
  7884                           wreg	equ	0xFE8
  7885                           indf1	equ	0xFE7
  7886                           postinc1	equ	0xFE6
  7887                           postdec1	equ	0xFE5
  7888                           preinc1	equ	0xFE4
  7889                           plusw1	equ	0xFE3
  7890                           fsr1h	equ	0xFE2
  7891                           fsr1l	equ	0xFE1
  7892                           bsr	equ	0xFE0
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           preinc2	equ	0xFDC
  7897                           plusw2	equ	0xFDB
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8

Data Sizes:
    Strings     302
    Constant    12
    Data        96
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     24     110
    BANK0           128      0      88
    BANK1           256      0       0

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(COMRAM[6]), 

    motorTerminal@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    sp__getActualUID	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_1(CODE[18]), STR_10(CODE[2]), STR_11(CODE[3]), STR_12(CODE[3]), 
		 -> STR_13(CODE[4]), STR_14(CODE[3]), STR_15(CODE[3]), STR_16(CODE[3]), 
		 -> STR_17(CODE[3]), STR_18(CODE[3]), STR_19(CODE[33]), STR_2(CODE[18]), 
		 -> STR_20(CODE[33]), STR_21(CODE[33]), STR_22(CODE[6]), STR_23(CODE[10]), 
		 -> STR_24(CODE[2]), STR_25(CODE[3]), STR_26(CODE[22]), STR_27(CODE[2]), 
		 -> STR_3(CODE[18]), STR_4(CODE[19]), STR_5(CODE[27]), STR_6(CODE[29]), 
		 -> STR_7(CODE[33]), STR_8(CODE[9]), STR_9(CODE[6]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F1049(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _WaitForBusy->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _showMenu->_Terminal_SendString
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_GetTecla
    _setLed->_setLEDIntensity
    _initTeclado->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4514
                            _TI_Init
                      _Terminal_Init
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          4     4      0    1098
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1098
                                             23 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     675
                                             15 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     104
                                             14 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                           7     7      0     336
                                             14 COMRAM     7     7      0
                         _TI_GetTics
                       _TI_ResetTics
                      _getActualLeds
                       _setLedActual
                     _unsetLedActual
 ---------------------------------------------------------------------------------
 (2) _unsetLedActual                                       1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLedActual                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getActualLeds                                        3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        1     1      0    1101
                                             17 COMRAM     1     1      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                _Terminal_SendString
                       _getActualUID
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0     101
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     288
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _printfUID                                           10     9      1     470
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2     101
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (5) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     332
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                       _checkUserUID
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _checkUserUID                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1374
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1374
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     258
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     444
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     444
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     444
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     444
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     228
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     135
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _checkUserUID
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _Terminal_SendString
       _Terminal_SendChar
     _getActualUID
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
     _showMenu
       _Terminal_SendString
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _getActualLeds
     _setLedActual
     _unsetLedActual
   _motor_datos
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
           _CantaPartAlta
           _CantaPartBaixa
         _WaitForBusy
           _TI_GetTics
           _TI_ResetTics
       _WaitForBusy

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0      88     68.8%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     24     110     87.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     198      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Mar 11 15:59:55 2025

        __end_ofGetTecla@F2752 1ED1          ?_Terminal_ReceiveChar 004F                     _RSI_Timer0 1444  
     setLEDIntensity@intensity 0051                    MFRC522_Rd@i 0059                    MFRC522_Wr@i 005E  
                           l54 1512                             l90 112C                             l83 1092  
                           l77 133C                             l87 13EE                             u10 1308  
                           u11 1304                             u20 0B6A                             u21 0B62  
                           u40 0B9E                             u41 0B9A                             u50 0BBE  
                           u51 0BB8                             u60 0BDC                             u61 0BD8  
                           u38 0B6C                             u56 0BC0           __end_of_checkUserUID 03E8  
                   _TI_GetTics 10E2                             bsr 0FE0           ??_InitPortDirections 0050  
                          l211 12DC                            l131 151E                            l220 0BE2  
                          l213 1308                            l230 1442                            l134 1470  
                          l207 14F0                            l233 14AE                            l137 150A  
                          l218 0BA2                            l226 0B3C                            l242 14E4  
                          l219 0BDC                            l227 0B40                            l236 13CA  
                          l500 149A                            l245 10E0                            l174 1172  
                          l166 025E                            l422 081A                            l239 14D8  
                          l423 0856                            l415 07AA                            l248 14FA  
                          l184 09E2                            l600 0FE4                            l521 1518  
                          l505 1408                            l417 0816                            l186 0970  
                          l178 0926                            l506 140C                            l515 12D2  
                          l451 0D8A                            l612 0C82                            l460 13A0  
                          l436 091E                            l509 1522                            l605 11F6  
                          l518 0ED0                            l710 0DFC                            l702 0D92  
                          l454 0D06                            l535 076E                            l704 0D98  
                          l625 03E6                            l705 0D9E                            l457 136E  
                          l618 129C                            l570 0562                            l706 0DA4  
                          l466 0F30                            l707 0DAA                            l628 03E2  
                          l708 0DB0                            l709 0DB6                            l717 0A98  
                          l494 14BE                            l654 11B8                            l665 1230  
                          l497 1428                            l649 067E                            l690 0E04  
                          l692 0E0A                            l693 0E10                            l686 14CC  
                          l694 0E16                            l695 0E1C                            l696 0E22  
                          l697 0E28                            l698 0E6E                            u630 1140  
                          u631 113C                            u640 1158                            u641 1154  
                          u650 1170                            u810 1498                            u651 116C  
                          u811 1492                            u660 09C8                            u816 149A  
                          u890 132C                            u891 1328                   printfUID@low 005D  
             ??_CantaPartBaixa 0050                            wreg 0FE8                 ??_MFRC522_Init 0062  
                         l2013 14B0                           l2021 150C                           l2015 14B8  
                         l2023 1510                           l2017 14BA                           l3001 0FDC  
                         l2019 14BC                           l1411 0B44                           l3011 085E  
                         l1413 0B4E                           l3005 0FE2                           l3021 088A  
                         l3013 0864                           l1431 0B80                           l1415 0B50  
                         l3111 0C3A                           l3031 08CE                           l3023 089C  
                         l3015 0866                           l1433 0B84                           l1425 0B58  
                         l1417 0B52                           l3201 00D2                           l3121 1272  
                         l3113 0C56                           l3105 0C14                           l3041 0902  
                         l3033 08D0                           l3025 089E                           l3017 0878  
                         l3009 085A                           l1451 0BCA                           l1443 0BA4  
                         l1435 0B8C                           l1427 0B78                           l1419 0B54  
                         l3211 00F6                           l3203 00E2                           l3051 068C  
                         l3123 1280                           l3115 0C62                           l3107 0C2A  
                         l3043 0912                           l3035 08E2                           l3019 0888  
                         l3027 08AC                           l1453 0BCC                           l1445 0BAA  
                         l1437 0B8E                           l1429 0B7A                           l3141 1460  
                         l3221 0110                           l3213 00FC                           l3205 00E6  
                         l3061 06B8                           l3125 128E                           l3117 0C66  
                         l3109 0C36                           l3301 048E                           l3133 11C2  
                         l3045 0914                           l3037 08E4                           l3029 08BE  
                         l1455 0BE0                           l1447 0BAE                           l1439 0B9E  
                         l3151 14F2                           l3143 1462                           l3223 0120  
                         l3231 0160                           l3207 00EA                           l3071 06F8  
                         l3063 06C8                           l3119 1268                           l3047 0E70  
                         l3311 04CE                           l3303 049A                           l3135 11D6  
                         l3127 11BA                           l3039 08F2                           l1801 14E6  
                         l1393 12D6                           l1449 0BC2                           l3153 14F6  
                         l3145 1464                           l3241 01B0                           l3233 0170  
                         l3225 0140                           l3209 00F0                           l3161 002E  
                         l3081 0742                           l3073 0708                           l3065 06D4  
                         l3057 0694                           l3049 0680                           l3321 0516  
                         l3313 04D6                           l3137 11DA                           l3401 064A  
                         l3155 14C0                           l1395 12DE                           l1731 1508  
                         l3147 1466                           l3139 145C                           l3251 01FC  
                         l3243 01B6                           l3235 0190                           l3227 0152  
                         l3171 0054                           l3163 0034                           l3083 0746  
                         l3075 0714                           l3067 06DA                           l3059 06A8  
                         l3323 0518                           l3307 04A2                           l3403 0652  
                         l3157 14C4                           l1397 12E0                           l3149 1468  
                         l1725 151A                           l2701 10E4                           l1741 1158  
                         l1733 112E                           l3261 021C                           l3237 01A2  
                         l3229 0158                           l3181 0088                           l3173 0064  
                         l3165 0044                           l3085 0762                           l3077 071A  
                         l3069 06E8                           l3093 0BEC                           l3325 052A  
                         l3317 04E6                           l3309 04B6                           l3341 0A0C  
                         l2711 0AA6                           l1751 0934                           l2703 10F8  
                         l1743 115E                           l1735 1130                           l3263 0220  
                         l3255 0204                           l3247 01CA                           l3239 01A8  
                         l3183 008C                           l3175 006A                           l3167 0048  
                         l3159 002A                           l3079 0736                           l3095 0BF8  
                         l3087 0BE4                           l3327 0532                           l3319 04FA  
                         l3271 03EC                           l3335 0544                           l3351 0A20  
                         l3343 0A12                           l3407 0658                           l2721 0ACC  
                         l2713 0AA8                           l1729 1504                           l1753 093C  
                         l1761 094A                           l1745 1170                           l1737 1140  
                         l3257 020A                           l3249 01DA                           l3193 00B2  
                         l3185 0090                           l3177 0072                           l3169 004C  
                         l3097 0C00                           l3329 053E                           l3281 041C  
                         l3273 0400                           l3353 0A38                           l3345 0A18  
                         l3337 09E4                           l2801 0EFA                           l3361 0564  
                         l3441 123A                           l2731 0AE2                           l2723 0AD2  
                         l2707 0A9C                           l1763 0976                           l1755 0944  
                         l1747 0920                           l1739 1146                           l3259 021A  
                         l3195 00B8                           l3187 0098                           l3179 0078  
                         l3267 0228                           l2811 13F2                           l3099 0C0C  
                         l3291 045A                           l3283 0420                           l3275 0404  
                         l3355 0A72                           l3339 09EC                           l2803 0EFC  
                         l3371 058E                           l3363 0568                           l3451 124C  
                         l3443 123E                           l2741 0B1C                           l2733 0AF2  
                         l2725 0AD8                           l2709 0AA4                           l2821 14CE  
                         l2813 13A2                           l1765 097E                           l1749 092C  
                         l1773 0986                           l2901 02C2                           l3197 00C8  
                         l3189 00A8                           l3293 0460                           l3285 0426  
                         l3277 0408                           l3269 03E8                           l3357 0A78  
                         l3381 05AE                           l3373 0590                           l3365 0578  
                         l3461 125E                           l3453 124E                           l3445 1242  
                         l2743 0B22                           l2727 0ADA                           l2719 0AAC  
                         l2823 14DA                           l2815 13A4                           l1775 09BA  
                         l2911 031C                           l2903 02D4                           l1863 1488  
                         l3295 0468                           l3287 043A                           l3279 0418  
                         l3359 0A7C                           l2751 0D0A                           l2807 0F20  
                         l2831 0792                           l3391 05FC                           l3383 05CA  
                         l3375 0598                           l3367 057A                           l3455 1252  
                         l3447 1246                           l3439 1232                           l2745 0B24  
                         l2737 0AF6                           l2729 0AE0                           l2761 149E  
                         l2817 13AA                           l1777 09D2                           l2921 0346  
                         l2905 02E6                           l2809 13F2                           l3297 0474  
                         l3289 044E                           l2753 0C86                           l2841 07DE  
                         l2833 079A                           l2825 0772                           l3393 0602  
                         l3385 05D8                           l3377 059E                           l3369 057E  
                         l3457 1256                           l3449 124A                    _TI_NewTimer 103E  
                         l2747 0B2A                           l2739 0B16                           l2819 13B2  
                         l2923 0358                           l2907 02F8                           l1867 1520  
                         l2755 140E                           l3299 047A                           l1963 0E00  
                         l1971 0DC6                           l2771 1358                           l2763 1340  
                         l2843 07EA                           l2835 07B0                           l2851 0842  
                         l2827 0776                           l3395 060A                           l3387 05E0  
                         l3379 05A6                           l3459 125A                           l2749 0B2C  
                         l2941 03CA                           l2925 036A                           l2933 0382  
                         l2909 030A                           l2917 0322                           l2861 1380  
                         l2773 135A                           l2765 134E                           l2781 0ED2  
                         l2853 0846                           l2845 07FC                           l2837 07C0  
                         l2829 0786                           l3397 0626                           l3389 05F4  
                         l1991 132C                           l2759 142C                           l2695 13CE  
                         l1799 1514                           l2943 03DC                           l2935 0394  
                         l2927 037C                           l2919 0334                           l2951 1176  
                         l1967 0E38                           l2871 1394                           l2863 1386  
                         l2775 1362                           l2767 1354                           l2791 0EF0  
                         l2783 0EDE                           l2855 084E                           l2839 07CC  
                         l1993 1338                           l1985 130C                           l2961 1044  
                         l3833 099C                           l2697 13D0                           l2937 03A6  
                         l2953 1186                           l2881 12B2                           l1969 0D8E  
                         l2873 1396                           l2865 1388                           l2777 1364  
                         l2769 1356                           l2793 0EF2                           l2785 0EE4  
                         l2857 0852                           l2849 0824                           l1995 133A  
                         l1987 131A                           l1979 130A                           l2699 13EC  
                         l2939 03B8                           l2891 0298                           l2955 1196  
                         l2883 12B6                           l2875 1398                           l2867 138A  
                         l2859 1372                           l2779 1366                           l2795 0EF4  
                         l2787 0EE6                           l1989 131C                           l2965 105C  
                         l2893 02AA                           l2885 0260                           l2957 11A6  
                         l2981 121C                           l2973 11FA                           l2877 129E  
                         l2869 138C                           l2797 0EF6                           l2789 0EE8  
                         l2967 1078                           l2959 103E                           l2895 02BC  
                         l2887 0274                           l2983 122A                           l2975 120A  
                         l2991 0F8C                           l2879 12A2                           l2799 0EF8  
                         l2969 1088                           l2889 0286                           l2985 122E  
                         l2977 120E                           l2993 0F9C                           l2987 1094  
                         l2979 1216                           l2995 0FAC                           l2989 1098  
                         l2997 0FBC                           l2999 0FCC                           STR_1 1FB6  
                         STR_2 1FC8                           STR_3 1FB6                           STR_4 1FA3  
                         STR_5 1F72                           STR_6 1F55                           STR_7 1EF2  
                         STR_8 1FE4                           STR_9 1FF3                           u2000 0346  
                         u2001 0342                           u2010 0358                           u2011 0354  
                         u2020 036A                           u2100 1196                           u2021 0366  
                         u2101 1192                           u2030 037C                           u2110 11A6  
                         u2031 0378                           u2111 11A2                           u2120 1058  
                         u2040 0394                           u2200 0878                           u2121 1054  
                         u2041 0390                           u2201 0874                           u2130 1078  
                         u2050 03A6                           u2210 0888                           u2131 1074  
                         u2051 03A2                           u2211 0884                           u2060 03B8  
                         u2140 120A                           u2300 0736                           u2220 089C  
                         u2061 03B4                           u2141 1206                           u2301 0732  
                         u2221 0898                           u2070 03CA                           u2150 0F9C  
                         u2310 0762                           u2230 08BE                           u2071 03C6  
                         u2151 0F98                           u2311 075E                           u2231 08BA  
                         _LATC 0F8B                           u1600 0AF2                           u2080 03DC  
                         u2400 00E2                           u2160 0FAC                           u2320 0C56  
                         u2240 08CE                           _LATD 0F8C                           u1601 0AEE  
                         u2081 03D8                           u2401 00DE                           u2161 0FA8  
                         u2321 0C52                           u2241 08CA                           u1610 0B08  
                         u2090 1186                           u2410 010C                           u2170 0FBC  
                         u2330 0C82                           u2250 08E2                           u1611 0B00  
                         u2091 1182                           u2411 0108                           u2171 0FB8  
                         u2331 0C7E                           u2251 08DE                           u2500 01FC  
                         u2420 0120                           u2180 0FCC                           u2340 11F6  
                         u1700 0D7C                           u2260 0902                           u2501 01F8  
                         u2421 011C                           u2181 0FC8                           u2341 11F2  
                         u1701 0D74                           u2261 08FE                           u1630 0B3C  
                         u2510 021A                           u2430 0140                           u2350 0044  
                         u2190 0FDC                           u2270 0912                           u1631 0B38  
                         u2511 0216                           u2431 013C                           u2351 0040  
                         u2191 0FD8                           u2271 090E                           u2440 0152  
                         u2360 0064                           u1800 1420                           u2280 06B8  
                         u2520 0400                           u2600 0A0C                           u1640 0D1C  
                         u1720 0C98                           u2441 014E                           u2361 0060  
                         u1801 1418                           u2281 06B4                           u2521 03FC  
                         u2601 0A08                           u1641 0D14                           u1721 0C90  
                         u2450 0170                           u2370 0088                           u2290 06F8  
                         u2530 0418                           u2610 0A38                           u1810 0F1C  
                         u2451 016C                           u2371 0084                           u2291 06F4  
                         u2531 0414                           u2611 0A34                           u1811 0F18  
                         u1628 0B0A                           u1580 0ABE                           u1900 0286  
                         u2460 0190                           u2380 00A8                           u2540 043A  
                         u2620 0A72                           u1660 0D3A                           u1740 0CB6  
                         u1820 0F30                           u1581 0AB6                           u1901 0282  
                         u2461 018C                           u2381 00A4                           u2541 0436  
                         u2621 0A6E                           u1661 0D32                           u1741 0CAE  
                         u1821 0F2C                           u1910 0298                           u2470 01A2  
                         u2390 00C8                           u1830 1408                           u2550 044E  
                         u2630 0A98                           u1718 0D7E                           u1911 0294  
                         u2471 019E                           u2391 00C4                           u1831 1404  
                         u2551 044A                           u2631 0A94                           u1920 02AA  
                         u2480 01C6                           u1808 1422                           u2560 048E  
                         u1680 0D5A                           u1760 0CD6                           u1840 0786  
                         u2640 0578                           u1921 02A6                           u2481 01C2  
                         u2561 048A                           u1681 0D52                           u1761 0CCE  
                         u1841 0782                           u2641 0574                           u1930 02BC  
                         u2490 01DA                           u2570 04B6                           u1658 0D1E  
                         u1738 0C9A                           u1850 07C0                           u2650 058E  
                         u1931 02B8                           u2491 01D6                           u2571 04B2  
                         u1851 07BC                           u2651 058A                           u1940 02D4  
                         u2580 04FA                           u1780 0CF8                           u1860 07DE  
                         u2660 05CA                           u1941 02D0                           u2581 04F6  
                         u1781 0CF0                           u1861 07DA                           u2661 05C6  
                         u1598 0AC0                           u1950 02E6                           u2590 052A  
                         u1678 0D3C                           u1758 0CB8                           u1870 07FC  
                         u2670 05F4                           u1951 02E2                           u2591 0526  
                         u1871 07F8                           u2671 05F0                           u1960 02F8  
                         u1880 12D2                           u2680 0626                           u1961 02F4  
                         u1881 12CE                           u2681 0622                           u1970 030A  
                         u1890 0274                           u1698 0D5C                           u1778 0CD8  
                         u1971 0306                           u1891 0270                           u1980 031C  
                         u1981 0318                           u1990 0334                           u1798 0CFA  
                         u1991 0330                           i1l43 001E                           i2l38 1484  
                         i2l72 145A                           _TMR0 0FD6       setLEDIntensity@userIndex 0052  
                   _ActualLeds 0041                           _Tics 001B          _showAllConfigurations 0BE4  
                         _Rows 0031               motor_datos@state 0028                           _main 1232  
                printfUID@high 005C                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf1 0FE7                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 006F                __end_of_TI_Init 133E  
                         prodh 0FF4                           prodl 0FF3                           start 0026  
              __end_of_CantaIR 1370                __end_of_HighRSI 1488                   ___param_bank 0000  
              ??_MFRC522_Reset 005F                   ?_initTeclado 004F                          ?_main 004F  
                        STR_10 1FFD                          STR_11 1FC5                          STR_20 1ED1  
                        STR_13 1FF9                          STR_21 1F13                          STR_22 1FED  
                        STR_15 1FC5                          STR_23 1FDA                          STR_16 1FC5  
                        STR_24 1FFB                          STR_25 1FC5                          STR_17 1FC5  
                        STR_18 1FC5                          STR_26 1F8D                          STR_19 1F34  
                        _T0CON 0FD5                          _RCREG 0FAE                          _RCSTA 0FAB  
                        _SPBRG 0FAF                          _PORTD 0F83                          _TRISA 0F92  
                        _TRISD 0F95                          _TRISE 0F96                          _TXREG 0FAD  
                        _TXSTA 0FAC           __end_of_getActualUID 0FE6                          _Filas 0040  
                        _Timer 004D                motor_RFID@irqEn 003A                          _index 0021  
              motor_RFID@unLen 0023                   _TI_ResetTics 13CC                          _tecla 003E  
              motor_RFID@state 003C                          _timer 004E                          _state 003D  
              setLed@userIndex 0025                          tablat 0FF5              _MFRC522_Clear_Bit 142A  
                        ttemp5 0070                          ttemp6 0073                          ttemp7 0077  
               _saveHourToData 1268                          status 0FD8                          wtemp8 0070  
           Terminal_SendChar@c 0053             ?_MFRC522_Clear_Bit 005F               __end_of_LcGotoXY 0858  
             __end_of_GetTecla 09E4              _MFRC522_AntennaOn 14CE         ??_Terminal_ReceiveChar 0050  
              __initialization 0F32                   __end_of_main 1268             ?_MFRC522_AntennaOn 004F  
          ??_MFRC522_Clear_Bit 0060                    ?_RSI_Timer0 004F                 TI_Init@counter 0050  
             _initPortsTeclado 1504                    ?_TI_GetTics 0050                         ??_main 0067  
          ??_MFRC522_AntennaOn 0061                  __activetblptr 0002             MFRC522_Rd@ucResult 0058  
                       _ADCON1 0FC1                MFRC522_Wr@value 005A      __end_of_MFRC522_Clear_Bit 1444  
                    ??_TI_Init 0050         ?_showAllConfigurations 004F         __end_of_saveHourToData 129E  
                    ??_CantaIR 0052         Terminal_SendString@str 0054                         i2l2311 1480  
                       i2l2309 1472                         i2l1973 1444                         i2l1975 144C  
                       i2l1977 144E                 LcGotoXY@Fisics 0063                 LcGotoXY@Column 0065  
                ??_WaitForBusy 005D                         _TMR0IF 7F92                      ??_HighRSI 004F  
    __end_of_MFRC522_AntennaOn 14DA          __end_of_getActualLeds 11F8               __end_of_delay_us 130A  
               getActualLeds@i 0051                         _LowRSI 0018                   _LcGotoXY$797 0061  
                       _RowAct 002F                         _Timers 0001           __end_of_MFRC522_Init 10E2  
             __end_of_initRFID 14FC             motorTerminal@index 002B               __end_of_initLeds 14CE  
           motorTerminal@state 002C                         clear_0 0F78                         _setLed 11F8  
                       isa$std 0001                   ?_motor_datos 004F                   __pdataCOMRAM 0067  
             __end_of_showMenu 0ED2                   __mediumconst 1EC4                _setLEDIntensity 1174  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
            __end_of_CantaData 13A2          __end_of_Terminal_Init 14C0                ?_saveHourToData 0050  
                 _checkUserUID 0260                     __accesstop 0080        __end_of__initialization 0F7E  
            __end_of_LcPutChar 0920                delay_us@howMany 0053                  ___rparam_used 0001  
                 ??_MFRC522_Rd 0055                   ??_MFRC522_Wr 005B             _MFRC522_AntennaOff 14DA  
                setLed@modeLED 0027                 __pcstackCOMRAM 004F            __end_of_WaitForBusy 0F32  
                 __pidataBANK0 0FE6            ?_MFRC522_AntennaOff 004F                  ?_setLedActual 004F  
         TI_NewTimer@Comptador 0052              __end_of_ReadFilas 1520               MFRC522_Rd@ucAddr 0057  
                    ?_LcGotoXY 005E              ??_MFRC522_Set_Bit 0060             __end_of_MFRC522_Rd 0BE4  
           __end_of_MFRC522_Wr 0B42                      ?_GetTecla 004F           ??_MFRC522_AntennaOff 0062  
                 ?_TI_NewTimer 0050                    setLed@tecla 0053          __end_of_motorTerminal 0564  
                _CantaPartAlta 0D08         TI_NewTimer@TimerHandle 0050                        ?_LowRSI 004F  
                 _getActualUID 0F8C               MFRC522_Wr@ucAddr 005D                 _unsetLedActual 0D8C  
      TI_ResetTics@TimerHandle 0050                 ??_setLedActual 0050                  _writeColumnas 112E  
                      _BAUDCON 0FB8                        ?_setLed 004F        __end_of_setLEDIntensity 11BA  
                   ??_LcGotoXY 005F                      ?_delay_us 004F                     ??_GetTecla 0050  
            _Terminal_SendChar 13F0                        _TI_Init 130A             ?_Terminal_SendChar 004F  
     __end_of_initPortsTeclado 150C                        _CantaIR 133E                      ?_initRFID 004F  
                    ?_initLeds 004F                        _HighRSI 0008                    _WaitForBusy 0ED2  
               ?_CantaPartAlta 004F                        _Columns 0030              motor_RFID@TagType 0035  
          ??_Terminal_SendChar 0053                        __Hparam 0000         __end_of_unsetLedActual 0DFE  
                      __Lparam 0000                      ?_showMenu 004F                   ??_RSI_Timer0 004F  
               ?_writeColumnas 004F                   ??_TI_GetTics 0054              motor_RFID@allZero 0033  
                      __pcinit 0F32          __end_of_MFRC522_Reset 13CC                        __ramtop 0200  
            motor_RFID@_status 0036                        __ptext0 1232                        __ptext1 0564  
                      __ptext2 0858                        __ptext3 0770                        __ptext4 0ED2  
                      __ptext5 133E                        __ptext6 1370                        __ptext7 0C84  
                      __ptext8 0D08                        __ptext9 09E4                  ?_motorTeclado 004F  
                    CantaIR@IR 0052              __end_of_initPorts 1514      __end_of_Terminal_SendChar 140E  
            motor_RFID@waitIRq 0039       motorTerminal@currentUser 0060                     ??_delay_us 0050  
      ??_showAllConfigurations 0056                        _pointer 001F                WaitForBusy@Busy 005D  
                 _MFRC522_Init 1094                 __pintcode_body 1472                    motor_LEDs@i 0062  
         end_of_initialization 0F7E                    motor_RFID@i 0037                    motor_RFID@n 0038  
                   ??_initRFID 0062             __end_of_RSI_Timer0 145C                     ??_initLeds 0053  
                __Lmediumconst 1EC4                        int_func 1472             __end_of_TI_GetTics 112E  
           saveHourToData@hour 0050              __end_of_printfUID 0770                ?_unsetLedActual 004F  
                   _motor_LEDs 09E4                     ??_showMenu 0056                        postdec1 0FE5  
                      postinc0 0FEE                        postinc2 0FDE                  GetTecla@F2752 1EC5  
       showAllConfigurations@i 0058         showAllConfigurations@j 0056               ?_setLEDIntensity 0050  
               ??_motorTeclado 0060                      _PORTBbits 0F81                      _PORTCbits 0F82  
          _Terminal_SendString 129E          TI_GetTics@TimerHandle 005C               ??_saveHourToData 0051  
                    _TRISBbits 0F93                      _TRISCbits 0F94                      _TRISEbits 0F96  
         __end_of_setLedActual 0E70                 setLed@ledIndex 0026                ??_CantaPartAlta 0050  
                    _CantaData 1370           ?_Terminal_SendString 0054              MFRC522_Rd@Address 0056  
              ??_writeColumnas 0050                      _LcPutChar 0858                 __end_of_LowRSI 0026  
 __end_of_Terminal_RXAvailable 149C                _MFRC522_Set_Bit 149C                  __pidataCOMRAM 14FC  
                    _ColumnAct 002E                 __end_of_setLed 1232          setLedActual@ledActual 0050  
            getActualLeds@leds 0050            start_initialization 0F32                      _ReadFilas 151A  
 __end_of_Terminal_TXAvailable 142A                     ?_CantaData 004F          ??_Terminal_SendString 0056  
                     ??_LowRSI 004F                     ?_LcPutChar 004F                    ?_motor_LEDs 004F  
            motorTerminal@hour 006B                  ??_initTeclado 0053                    __pdataBANK0 0080  
                     ??_setLed 0053                    __pbssCOMRAM 0001                     ?_ReadFilas 004F  
            MFRC522_Wr@Address 005C                  ?_TI_ResetTics 004F                       ?_TI_Init 004F  
                     ?_CantaIR 004F              ?_initPortsTeclado 004F                 _CantaPartBaixa 0C84  
                     ?_HighRSI 004F                   ?_WaitForBusy 004F           __end_of_motorTeclado 0260  
           ??_initPortsTeclado 0050        __end_of_MFRC522_Set_Bit 14B0                  _getActualLeds 11BA  
          MFRC522_Set_Bit@addr 0060            MFRC522_Set_Bit@mask 005F                      __pintcode 0008  
                __pmediumconst 1EC4     __end_of_InitPortDirections 14F2           _timer@TAD_LEDS$F1049 004C  
              CantaPartBaixa@c 0051                    __pintcodelo 0018                    __smallconst 1EC4  
          __end_of_initTeclado 1472                 ??_TI_ResetTics 0050                      _initPorts 150C  
__end_of_showAllConfigurations 0C84         __end_of_CantaPartBaixa 0D08                  _Terminal_Init 14B0  
         _Terminal_RXAvailable 1488               ??_unsetLedActual 0050                    ??_CantaData 0052  
                     _LATAbits 0F89                       _LATBbits 0F8A                       _LATCbits 0F8B  
                     _LATEbits 0F8D                      delay_us@x 0054                 ?_getActualLeds 0050  
              _hashtag_pressed 002D                       i2u127_40 1480                       i2u127_41 147C  
                     _PIR1bits 0F9E                    ??_LcPutChar 0066                      _printfUID 0680  
         _Terminal_TXAvailable 140E                   GetTecla@fila 005F                   _setLedActual 0DFE  
                ??_motor_datos 0067                     printfUID@i 005E         motor_RFID@tempRegValue 0032  
                     _LcGotoXY 0770                    ??_ReadFilas 0050                       _GetTecla 0920  
 __end_of_Terminal_ReceiveChar 1524                     ?_initPorts 004F                  motor_RFID@UID 0015  
               ?_Terminal_Init 004F                    LcGotoXY@Row 005E                      copy_data0 0F46  
                    copy_data1 0F66                ?_CantaPartBaixa 004F                       _Columnas 003F  
        ?_Terminal_RXAvailable 004F                  ?_checkUserUID 004F                  _motorTerminal 03E8  
             ?_MFRC522_Set_Bit 005F                       __Hrparam 0000          MFRC522_Clear_Bit@addr 0061  
        MFRC522_Clear_Bit@mask 005F                       __Lrparam 0000                     ?_printfUID 0056  
                  _initTeclado 145C          ?_Terminal_TXAvailable 0050             motor_RFID@checksum 0034  
                  _currentTime 0067                    _currentUser 0047                       _delay_us 12D4  
          __end_of_motor_datos 0680                       __ptext10 0D8C                       __ptext11 0DFE  
                     __ptext20 140E                       __ptext12 11BA                       __ptext21 0F8C  
                     __ptext13 03E8                       __ptext30 13CC                       __ptext22 1520  
                     __ptext14 0E70                       __ptext31 10E2                       __ptext23 1488  
                     __ptext15 0BE4                       __ptext40 149C                       __ptext32 151A  
                     __ptext24 002A                       __ptext16 1268                       __ptext41 14DA  
                     __ptext33 0920                       __ptext25 112E                       __ptext17 0680  
                     __ptext50 14B0                       __ptext42 142A                       __ptext34 145C  
                     __ptext26 11F8                       __ptext18 129E                       __ptext51 130A  
                     __ptext43 0A9A                       __ptext35 1504                       __ptext27 1174  
                     __ptext19 13F0                       __ptext44 0B42                       __ptext36 14F2  
                     __ptext28 0260                       __ptext45 12D4                       __ptext37 1094  
                     __ptext29 1514                       __ptext54 1444                       __ptext46 14E6  
                     __ptext38 13A2                       __ptext47 150C                       __ptext39 14CE  
                     __ptext48 14C0                       __ptext49 103E                  ??_TI_NewTimer 0051  
               CantaPartAlta@c 0051                 ??_checkUserUID 0050                       _initRFID 14F2  
                     _initLeds 14C0                ??_getActualLeds 0051                 ?_motorTerminal 004F  
        __end_of_CantaPartAlta 0D8C                  CantaData@Data 0052                       _new_user 0029  
                   _MFRC522_Rd 0B42                     _MFRC522_Wr 0A9A                  ?_getActualUID 0050  
                 ??_motor_LEDs 005D                       isa$xinst 0000                       _showMenu 0E70  
         __end_of_TI_ResetTics 13F0                       int$flags 006F          __end_of_writeColumnas 1174  
           motor_RFID@substate 003B                       _userUIDs 0080                  _printfUID$920 005A  
                _printfUID$918 0058                  _MFRC522_Reset 13A2                   _motorTeclado 002A  
                   _INTCONbits 0FF2                ??_Terminal_Init 0050      TI_GetTics@CopiaTicsActual 0058  
            _new_configuration 002A                    ??_initPorts 0050         ??_Terminal_RXAvailable 0050  
               _configurations 00C0              _hashtag_pressed3s 1514    __end_of_Terminal_SendString 12D4  
           __end_of_motor_LEDs 0A9A                       intlevel1 0000                       intlevel2 0000  
           ?_hashtag_pressed3s 004F        unsetLedActual@ledActual 0050                     LcPutChar@c 0066  
          __end_of_TI_NewTimer 1094                 ??_getActualUID 0052            ??_hashtag_pressed3s 0050  
       ??_Terminal_TXAvailable 0052           _Terminal_ReceiveChar 1520                    ??_printfUID 0057  
               ?_MFRC522_Reset 004F                    _motor_datos 0564      __end_of_hashtag_pressed3s 151A  
           _InitPortDirections 14E6     __end_of_MFRC522_AntennaOff 14E6                  ?_MFRC522_Init 004F  
              ??_motorTerminal 0060            ?_InitPortDirections 004F        setLEDIntensity@ledIndex 0050  
         printfUID@currentUser 0056              ??_setLEDIntensity 0052                GetTecla@columna 005E  
                  ?_MFRC522_Rd 004F                    ?_MFRC522_Wr 005A                 GetTecla@keymap 0052  

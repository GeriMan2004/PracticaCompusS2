

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Feb 24 22:55:18 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29   000000                     
    30                           ; Generated 05/12/2024 GMT
    31                           ; 
    32                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4321 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64   000FE0                     bsr             equ	4064
    65   000FE9                     fsr0            equ	4073
    66   000FEA                     fsr0h           equ	4074
    67   000FE9                     fsr0l           equ	4073
    68   000FE1                     fsr1            equ	4065
    69   000FE2                     fsr1h           equ	4066
    70   000FE1                     fsr1l           equ	4065
    71   000FD9                     fsr2            equ	4057
    72   000FDA                     fsr2h           equ	4058
    73   000FD9                     fsr2l           equ	4057
    74   000FEF                     indf0           equ	4079
    75   000FE7                     indf1           equ	4071
    76   000FDF                     indf2           equ	4063
    77   000FF2                     intcon          equ	4082
    78   000000                     nvmcon          equ	0
    79   000FF9                     pcl             equ	4089
    80   000FFA                     pclath          equ	4090
    81   000FFB                     pclatu          equ	4091
    82   000FEB                     plusw0          equ	4075
    83   000FE3                     plusw1          equ	4067
    84   000FDB                     plusw2          equ	4059
    85   000FED                     postdec0        equ	4077
    86   000FE5                     postdec1        equ	4069
    87   000FDD                     postdec2        equ	4061
    88   000FEE                     postinc0        equ	4078
    89   000FE6                     postinc1        equ	4070
    90   000FDE                     postinc2        equ	4062
    91   000FEC                     preinc0         equ	4076
    92   000FE4                     preinc1         equ	4068
    93   000FDC                     preinc2         equ	4060
    94   000FF3                     prod            equ	4083
    95   000FF4                     prodh           equ	4084
    96   000FF3                     prodl           equ	4083
    97   000FD8                     status          equ	4056
    98   000FF5                     tablat          equ	4085
    99   000FF6                     tblptr          equ	4086
   100   000FF7                     tblptrh         equ	4087
   101   000FF6                     tblptrl         equ	4086
   102   000FF8                     tblptru         equ	4088
   103   000FFD                     tosl            equ	4093
   104   000FE8                     wreg            equ	4072
   105   000F80                     PORTA           equ	3968	;# 
   106   000F81                     PORTB           equ	3969	;# 
   107   000F82                     PORTC           equ	3970	;# 
   108   000F83                     PORTD           equ	3971	;# 
   109   000F84                     PORTE           equ	3972	;# 
   110   000F89                     LATA            equ	3977	;# 
   111   000F8A                     LATB            equ	3978	;# 
   112   000F8B                     LATC            equ	3979	;# 
   113   000F8C                     LATD            equ	3980	;# 
   114   000F8D                     LATE            equ	3981	;# 
   115   000F92                     TRISA           equ	3986	;# 
   116   000F92                     DDRA            equ	3986	;# 
   117   000F93                     TRISB           equ	3987	;# 
   118   000F93                     DDRB            equ	3987	;# 
   119   000F94                     TRISC           equ	3988	;# 
   120   000F94                     DDRC            equ	3988	;# 
   121   000F95                     TRISD           equ	3989	;# 
   122   000F95                     DDRD            equ	3989	;# 
   123   000F96                     TRISE           equ	3990	;# 
   124   000F96                     DDRE            equ	3990	;# 
   125   000F9B                     OSCTUNE         equ	3995	;# 
   126   000F9D                     PIE1            equ	3997	;# 
   127   000F9E                     PIR1            equ	3998	;# 
   128   000F9F                     IPR1            equ	3999	;# 
   129   000FA0                     PIE2            equ	4000	;# 
   130   000FA1                     PIR2            equ	4001	;# 
   131   000FA2                     IPR2            equ	4002	;# 
   132   000FA6                     EECON1          equ	4006	;# 
   133   000FA7                     EECON2          equ	4007	;# 
   134   000FA8                     EEDATA          equ	4008	;# 
   135   000FA9                     EEADR           equ	4009	;# 
   136   000FAB                     RCSTA           equ	4011	;# 
   137   000FAB                     RCSTA1          equ	4011	;# 
   138   000FAC                     TXSTA           equ	4012	;# 
   139   000FAC                     TXSTA1          equ	4012	;# 
   140   000FAD                     TXREG           equ	4013	;# 
   141   000FAD                     TXREG1          equ	4013	;# 
   142   000FAE                     RCREG           equ	4014	;# 
   143   000FAE                     RCREG1          equ	4014	;# 
   144   000FAF                     SPBRG           equ	4015	;# 
   145   000FAF                     SPBRG1          equ	4015	;# 
   146   000FB0                     SPBRGH          equ	4016	;# 
   147   000FB1                     T3CON           equ	4017	;# 
   148   000FB2                     TMR3            equ	4018	;# 
   149   000FB2                     TMR3L           equ	4018	;# 
   150   000FB3                     TMR3H           equ	4019	;# 
   151   000FB4                     CMCON           equ	4020	;# 
   152   000FB5                     CVRCON          equ	4021	;# 
   153   000FB6                     ECCP1AS         equ	4022	;# 
   154   000FB7                     ECCP1DEL        equ	4023	;# 
   155   000FB7                     PWM1CON         equ	4023	;# 
   156   000FB8                     BAUDCON         equ	4024	;# 
   157   000FB8                     BAUDCTL         equ	4024	;# 
   158   000FBA                     CCP2CON         equ	4026	;# 
   159   000FBB                     CCPR2           equ	4027	;# 
   160   000FBB                     CCPR2L          equ	4027	;# 
   161   000FBC                     CCPR2H          equ	4028	;# 
   162   000FBD                     CCP1CON         equ	4029	;# 
   163   000FBD                     ECCP1CON        equ	4029	;# 
   164   000FBE                     CCPR1           equ	4030	;# 
   165   000FBE                     CCPR1L          equ	4030	;# 
   166   000FBF                     CCPR1H          equ	4031	;# 
   167   000FC0                     ADCON2          equ	4032	;# 
   168   000FC1                     ADCON1          equ	4033	;# 
   169   000FC2                     ADCON0          equ	4034	;# 
   170   000FC3                     ADRES           equ	4035	;# 
   171   000FC3                     ADRESL          equ	4035	;# 
   172   000FC4                     ADRESH          equ	4036	;# 
   173   000FC5                     SSPCON2         equ	4037	;# 
   174   000FC6                     SSPCON1         equ	4038	;# 
   175   000FC7                     SSPSTAT         equ	4039	;# 
   176   000FC8                     SSPADD          equ	4040	;# 
   177   000FC9                     SSPBUF          equ	4041	;# 
   178   000FCA                     T2CON           equ	4042	;# 
   179   000FCB                     PR2             equ	4043	;# 
   180   000FCB                     MEMCON          equ	4043	;# 
   181   000FCC                     TMR2            equ	4044	;# 
   182   000FCD                     T1CON           equ	4045	;# 
   183   000FCE                     TMR1            equ	4046	;# 
   184   000FCE                     TMR1L           equ	4046	;# 
   185   000FCF                     TMR1H           equ	4047	;# 
   186   000FD0                     RCON            equ	4048	;# 
   187   000FD1                     WDTCON          equ	4049	;# 
   188   000FD2                     HLVDCON         equ	4050	;# 
   189   000FD2                     LVDCON          equ	4050	;# 
   190   000FD3                     OSCCON          equ	4051	;# 
   191   000FD5                     T0CON           equ	4053	;# 
   192   000FD6                     TMR0            equ	4054	;# 
   193   000FD6                     TMR0L           equ	4054	;# 
   194   000FD7                     TMR0H           equ	4055	;# 
   195   000FD8                     STATUS          equ	4056	;# 
   196   000FD9                     FSR2            equ	4057	;# 
   197   000FD9                     FSR2L           equ	4057	;# 
   198   000FDA                     FSR2H           equ	4058	;# 
   199   000FDB                     PLUSW2          equ	4059	;# 
   200   000FDC                     PREINC2         equ	4060	;# 
   201   000FDD                     POSTDEC2        equ	4061	;# 
   202   000FDE                     POSTINC2        equ	4062	;# 
   203   000FDF                     INDF2           equ	4063	;# 
   204   000FE0                     BSR             equ	4064	;# 
   205   000FE1                     FSR1            equ	4065	;# 
   206   000FE1                     FSR1L           equ	4065	;# 
   207   000FE2                     FSR1H           equ	4066	;# 
   208   000FE3                     PLUSW1          equ	4067	;# 
   209   000FE4                     PREINC1         equ	4068	;# 
   210   000FE5                     POSTDEC1        equ	4069	;# 
   211   000FE6                     POSTINC1        equ	4070	;# 
   212   000FE7                     INDF1           equ	4071	;# 
   213   000FE8                     WREG            equ	4072	;# 
   214   000FE9                     FSR0            equ	4073	;# 
   215   000FE9                     FSR0L           equ	4073	;# 
   216   000FEA                     FSR0H           equ	4074	;# 
   217   000FEB                     PLUSW0          equ	4075	;# 
   218   000FEC                     PREINC0         equ	4076	;# 
   219   000FED                     POSTDEC0        equ	4077	;# 
   220   000FEE                     POSTINC0        equ	4078	;# 
   221   000FEF                     INDF0           equ	4079	;# 
   222   000FF0                     INTCON3         equ	4080	;# 
   223   000FF1                     INTCON2         equ	4081	;# 
   224   000FF2                     INTCON          equ	4082	;# 
   225   000FF3                     PROD            equ	4083	;# 
   226   000FF3                     PRODL           equ	4083	;# 
   227   000FF4                     PRODH           equ	4084	;# 
   228   000FF5                     TABLAT          equ	4085	;# 
   229   000FF6                     TBLPTR          equ	4086	;# 
   230   000FF6                     TBLPTRL         equ	4086	;# 
   231   000FF7                     TBLPTRH         equ	4087	;# 
   232   000FF8                     TBLPTRU         equ	4088	;# 
   233   000FF9                     PCLAT           equ	4089	;# 
   234   000FF9                     PC              equ	4089	;# 
   235   000FF9                     PCL             equ	4089	;# 
   236   000FFA                     PCLATH          equ	4090	;# 
   237   000FFB                     PCLATU          equ	4091	;# 
   238   000FFC                     STKPTR          equ	4092	;# 
   239   000FFD                     TOS             equ	4093	;# 
   240   000FFD                     TOSL            equ	4093	;# 
   241   000FFE                     TOSH            equ	4094	;# 
   242   000FFF                     TOSU            equ	4095	;# 
   243   000F80                     PORTA           equ	3968	;# 
   244   000F81                     PORTB           equ	3969	;# 
   245   000F82                     PORTC           equ	3970	;# 
   246   000F83                     PORTD           equ	3971	;# 
   247   000F84                     PORTE           equ	3972	;# 
   248   000F89                     LATA            equ	3977	;# 
   249   000F8A                     LATB            equ	3978	;# 
   250   000F8B                     LATC            equ	3979	;# 
   251   000F8C                     LATD            equ	3980	;# 
   252   000F8D                     LATE            equ	3981	;# 
   253   000F92                     TRISA           equ	3986	;# 
   254   000F92                     DDRA            equ	3986	;# 
   255   000F93                     TRISB           equ	3987	;# 
   256   000F93                     DDRB            equ	3987	;# 
   257   000F94                     TRISC           equ	3988	;# 
   258   000F94                     DDRC            equ	3988	;# 
   259   000F95                     TRISD           equ	3989	;# 
   260   000F95                     DDRD            equ	3989	;# 
   261   000F96                     TRISE           equ	3990	;# 
   262   000F96                     DDRE            equ	3990	;# 
   263   000F9B                     OSCTUNE         equ	3995	;# 
   264   000F9D                     PIE1            equ	3997	;# 
   265   000F9E                     PIR1            equ	3998	;# 
   266   000F9F                     IPR1            equ	3999	;# 
   267   000FA0                     PIE2            equ	4000	;# 
   268   000FA1                     PIR2            equ	4001	;# 
   269   000FA2                     IPR2            equ	4002	;# 
   270   000FA6                     EECON1          equ	4006	;# 
   271   000FA7                     EECON2          equ	4007	;# 
   272   000FA8                     EEDATA          equ	4008	;# 
   273   000FA9                     EEADR           equ	4009	;# 
   274   000FAB                     RCSTA           equ	4011	;# 
   275   000FAB                     RCSTA1          equ	4011	;# 
   276   000FAC                     TXSTA           equ	4012	;# 
   277   000FAC                     TXSTA1          equ	4012	;# 
   278   000FAD                     TXREG           equ	4013	;# 
   279   000FAD                     TXREG1          equ	4013	;# 
   280   000FAE                     RCREG           equ	4014	;# 
   281   000FAE                     RCREG1          equ	4014	;# 
   282   000FAF                     SPBRG           equ	4015	;# 
   283   000FAF                     SPBRG1          equ	4015	;# 
   284   000FB0                     SPBRGH          equ	4016	;# 
   285   000FB1                     T3CON           equ	4017	;# 
   286   000FB2                     TMR3            equ	4018	;# 
   287   000FB2                     TMR3L           equ	4018	;# 
   288   000FB3                     TMR3H           equ	4019	;# 
   289   000FB4                     CMCON           equ	4020	;# 
   290   000FB5                     CVRCON          equ	4021	;# 
   291   000FB6                     ECCP1AS         equ	4022	;# 
   292   000FB7                     ECCP1DEL        equ	4023	;# 
   293   000FB7                     PWM1CON         equ	4023	;# 
   294   000FB8                     BAUDCON         equ	4024	;# 
   295   000FB8                     BAUDCTL         equ	4024	;# 
   296   000FBA                     CCP2CON         equ	4026	;# 
   297   000FBB                     CCPR2           equ	4027	;# 
   298   000FBB                     CCPR2L          equ	4027	;# 
   299   000FBC                     CCPR2H          equ	4028	;# 
   300   000FBD                     CCP1CON         equ	4029	;# 
   301   000FBD                     ECCP1CON        equ	4029	;# 
   302   000FBE                     CCPR1           equ	4030	;# 
   303   000FBE                     CCPR1L          equ	4030	;# 
   304   000FBF                     CCPR1H          equ	4031	;# 
   305   000FC0                     ADCON2          equ	4032	;# 
   306   000FC1                     ADCON1          equ	4033	;# 
   307   000FC2                     ADCON0          equ	4034	;# 
   308   000FC3                     ADRES           equ	4035	;# 
   309   000FC3                     ADRESL          equ	4035	;# 
   310   000FC4                     ADRESH          equ	4036	;# 
   311   000FC5                     SSPCON2         equ	4037	;# 
   312   000FC6                     SSPCON1         equ	4038	;# 
   313   000FC7                     SSPSTAT         equ	4039	;# 
   314   000FC8                     SSPADD          equ	4040	;# 
   315   000FC9                     SSPBUF          equ	4041	;# 
   316   000FCA                     T2CON           equ	4042	;# 
   317   000FCB                     PR2             equ	4043	;# 
   318   000FCB                     MEMCON          equ	4043	;# 
   319   000FCC                     TMR2            equ	4044	;# 
   320   000FCD                     T1CON           equ	4045	;# 
   321   000FCE                     TMR1            equ	4046	;# 
   322   000FCE                     TMR1L           equ	4046	;# 
   323   000FCF                     TMR1H           equ	4047	;# 
   324   000FD0                     RCON            equ	4048	;# 
   325   000FD1                     WDTCON          equ	4049	;# 
   326   000FD2                     HLVDCON         equ	4050	;# 
   327   000FD2                     LVDCON          equ	4050	;# 
   328   000FD3                     OSCCON          equ	4051	;# 
   329   000FD5                     T0CON           equ	4053	;# 
   330   000FD6                     TMR0            equ	4054	;# 
   331   000FD6                     TMR0L           equ	4054	;# 
   332   000FD7                     TMR0H           equ	4055	;# 
   333   000FD8                     STATUS          equ	4056	;# 
   334   000FD9                     FSR2            equ	4057	;# 
   335   000FD9                     FSR2L           equ	4057	;# 
   336   000FDA                     FSR2H           equ	4058	;# 
   337   000FDB                     PLUSW2          equ	4059	;# 
   338   000FDC                     PREINC2         equ	4060	;# 
   339   000FDD                     POSTDEC2        equ	4061	;# 
   340   000FDE                     POSTINC2        equ	4062	;# 
   341   000FDF                     INDF2           equ	4063	;# 
   342   000FE0                     BSR             equ	4064	;# 
   343   000FE1                     FSR1            equ	4065	;# 
   344   000FE1                     FSR1L           equ	4065	;# 
   345   000FE2                     FSR1H           equ	4066	;# 
   346   000FE3                     PLUSW1          equ	4067	;# 
   347   000FE4                     PREINC1         equ	4068	;# 
   348   000FE5                     POSTDEC1        equ	4069	;# 
   349   000FE6                     POSTINC1        equ	4070	;# 
   350   000FE7                     INDF1           equ	4071	;# 
   351   000FE8                     WREG            equ	4072	;# 
   352   000FE9                     FSR0            equ	4073	;# 
   353   000FE9                     FSR0L           equ	4073	;# 
   354   000FEA                     FSR0H           equ	4074	;# 
   355   000FEB                     PLUSW0          equ	4075	;# 
   356   000FEC                     PREINC0         equ	4076	;# 
   357   000FED                     POSTDEC0        equ	4077	;# 
   358   000FEE                     POSTINC0        equ	4078	;# 
   359   000FEF                     INDF0           equ	4079	;# 
   360   000FF0                     INTCON3         equ	4080	;# 
   361   000FF1                     INTCON2         equ	4081	;# 
   362   000FF2                     INTCON          equ	4082	;# 
   363   000FF3                     PROD            equ	4083	;# 
   364   000FF3                     PRODL           equ	4083	;# 
   365   000FF4                     PRODH           equ	4084	;# 
   366   000FF5                     TABLAT          equ	4085	;# 
   367   000FF6                     TBLPTR          equ	4086	;# 
   368   000FF6                     TBLPTRL         equ	4086	;# 
   369   000FF7                     TBLPTRH         equ	4087	;# 
   370   000FF8                     TBLPTRU         equ	4088	;# 
   371   000FF9                     PCLAT           equ	4089	;# 
   372   000FF9                     PC              equ	4089	;# 
   373   000FF9                     PCL             equ	4089	;# 
   374   000FFA                     PCLATH          equ	4090	;# 
   375   000FFB                     PCLATU          equ	4091	;# 
   376   000FFC                     STKPTR          equ	4092	;# 
   377   000FFD                     TOS             equ	4093	;# 
   378   000FFD                     TOSL            equ	4093	;# 
   379   000FFE                     TOSH            equ	4094	;# 
   380   000FFF                     TOSU            equ	4095	;# 
   381   000F80                     PORTA           equ	3968	;# 
   382   000F81                     PORTB           equ	3969	;# 
   383   000F82                     PORTC           equ	3970	;# 
   384   000F83                     PORTD           equ	3971	;# 
   385   000F84                     PORTE           equ	3972	;# 
   386   000F89                     LATA            equ	3977	;# 
   387   000F8A                     LATB            equ	3978	;# 
   388   000F8B                     LATC            equ	3979	;# 
   389   000F8C                     LATD            equ	3980	;# 
   390   000F8D                     LATE            equ	3981	;# 
   391   000F92                     TRISA           equ	3986	;# 
   392   000F92                     DDRA            equ	3986	;# 
   393   000F93                     TRISB           equ	3987	;# 
   394   000F93                     DDRB            equ	3987	;# 
   395   000F94                     TRISC           equ	3988	;# 
   396   000F94                     DDRC            equ	3988	;# 
   397   000F95                     TRISD           equ	3989	;# 
   398   000F95                     DDRD            equ	3989	;# 
   399   000F96                     TRISE           equ	3990	;# 
   400   000F96                     DDRE            equ	3990	;# 
   401   000F9B                     OSCTUNE         equ	3995	;# 
   402   000F9D                     PIE1            equ	3997	;# 
   403   000F9E                     PIR1            equ	3998	;# 
   404   000F9F                     IPR1            equ	3999	;# 
   405   000FA0                     PIE2            equ	4000	;# 
   406   000FA1                     PIR2            equ	4001	;# 
   407   000FA2                     IPR2            equ	4002	;# 
   408   000FA6                     EECON1          equ	4006	;# 
   409   000FA7                     EECON2          equ	4007	;# 
   410   000FA8                     EEDATA          equ	4008	;# 
   411   000FA9                     EEADR           equ	4009	;# 
   412   000FAB                     RCSTA           equ	4011	;# 
   413   000FAB                     RCSTA1          equ	4011	;# 
   414   000FAC                     TXSTA           equ	4012	;# 
   415   000FAC                     TXSTA1          equ	4012	;# 
   416   000FAD                     TXREG           equ	4013	;# 
   417   000FAD                     TXREG1          equ	4013	;# 
   418   000FAE                     RCREG           equ	4014	;# 
   419   000FAE                     RCREG1          equ	4014	;# 
   420   000FAF                     SPBRG           equ	4015	;# 
   421   000FAF                     SPBRG1          equ	4015	;# 
   422   000FB0                     SPBRGH          equ	4016	;# 
   423   000FB1                     T3CON           equ	4017	;# 
   424   000FB2                     TMR3            equ	4018	;# 
   425   000FB2                     TMR3L           equ	4018	;# 
   426   000FB3                     TMR3H           equ	4019	;# 
   427   000FB4                     CMCON           equ	4020	;# 
   428   000FB5                     CVRCON          equ	4021	;# 
   429   000FB6                     ECCP1AS         equ	4022	;# 
   430   000FB7                     ECCP1DEL        equ	4023	;# 
   431   000FB7                     PWM1CON         equ	4023	;# 
   432   000FB8                     BAUDCON         equ	4024	;# 
   433   000FB8                     BAUDCTL         equ	4024	;# 
   434   000FBA                     CCP2CON         equ	4026	;# 
   435   000FBB                     CCPR2           equ	4027	;# 
   436   000FBB                     CCPR2L          equ	4027	;# 
   437   000FBC                     CCPR2H          equ	4028	;# 
   438   000FBD                     CCP1CON         equ	4029	;# 
   439   000FBD                     ECCP1CON        equ	4029	;# 
   440   000FBE                     CCPR1           equ	4030	;# 
   441   000FBE                     CCPR1L          equ	4030	;# 
   442   000FBF                     CCPR1H          equ	4031	;# 
   443   000FC0                     ADCON2          equ	4032	;# 
   444   000FC1                     ADCON1          equ	4033	;# 
   445   000FC2                     ADCON0          equ	4034	;# 
   446   000FC3                     ADRES           equ	4035	;# 
   447   000FC3                     ADRESL          equ	4035	;# 
   448   000FC4                     ADRESH          equ	4036	;# 
   449   000FC5                     SSPCON2         equ	4037	;# 
   450   000FC6                     SSPCON1         equ	4038	;# 
   451   000FC7                     SSPSTAT         equ	4039	;# 
   452   000FC8                     SSPADD          equ	4040	;# 
   453   000FC9                     SSPBUF          equ	4041	;# 
   454   000FCA                     T2CON           equ	4042	;# 
   455   000FCB                     PR2             equ	4043	;# 
   456   000FCB                     MEMCON          equ	4043	;# 
   457   000FCC                     TMR2            equ	4044	;# 
   458   000FCD                     T1CON           equ	4045	;# 
   459   000FCE                     TMR1            equ	4046	;# 
   460   000FCE                     TMR1L           equ	4046	;# 
   461   000FCF                     TMR1H           equ	4047	;# 
   462   000FD0                     RCON            equ	4048	;# 
   463   000FD1                     WDTCON          equ	4049	;# 
   464   000FD2                     HLVDCON         equ	4050	;# 
   465   000FD2                     LVDCON          equ	4050	;# 
   466   000FD3                     OSCCON          equ	4051	;# 
   467   000FD5                     T0CON           equ	4053	;# 
   468   000FD6                     TMR0            equ	4054	;# 
   469   000FD6                     TMR0L           equ	4054	;# 
   470   000FD7                     TMR0H           equ	4055	;# 
   471   000FD8                     STATUS          equ	4056	;# 
   472   000FD9                     FSR2            equ	4057	;# 
   473   000FD9                     FSR2L           equ	4057	;# 
   474   000FDA                     FSR2H           equ	4058	;# 
   475   000FDB                     PLUSW2          equ	4059	;# 
   476   000FDC                     PREINC2         equ	4060	;# 
   477   000FDD                     POSTDEC2        equ	4061	;# 
   478   000FDE                     POSTINC2        equ	4062	;# 
   479   000FDF                     INDF2           equ	4063	;# 
   480   000FE0                     BSR             equ	4064	;# 
   481   000FE1                     FSR1            equ	4065	;# 
   482   000FE1                     FSR1L           equ	4065	;# 
   483   000FE2                     FSR1H           equ	4066	;# 
   484   000FE3                     PLUSW1          equ	4067	;# 
   485   000FE4                     PREINC1         equ	4068	;# 
   486   000FE5                     POSTDEC1        equ	4069	;# 
   487   000FE6                     POSTINC1        equ	4070	;# 
   488   000FE7                     INDF1           equ	4071	;# 
   489   000FE8                     WREG            equ	4072	;# 
   490   000FE9                     FSR0            equ	4073	;# 
   491   000FE9                     FSR0L           equ	4073	;# 
   492   000FEA                     FSR0H           equ	4074	;# 
   493   000FEB                     PLUSW0          equ	4075	;# 
   494   000FEC                     PREINC0         equ	4076	;# 
   495   000FED                     POSTDEC0        equ	4077	;# 
   496   000FEE                     POSTINC0        equ	4078	;# 
   497   000FEF                     INDF0           equ	4079	;# 
   498   000FF0                     INTCON3         equ	4080	;# 
   499   000FF1                     INTCON2         equ	4081	;# 
   500   000FF2                     INTCON          equ	4082	;# 
   501   000FF3                     PROD            equ	4083	;# 
   502   000FF3                     PRODL           equ	4083	;# 
   503   000FF4                     PRODH           equ	4084	;# 
   504   000FF5                     TABLAT          equ	4085	;# 
   505   000FF6                     TBLPTR          equ	4086	;# 
   506   000FF6                     TBLPTRL         equ	4086	;# 
   507   000FF7                     TBLPTRH         equ	4087	;# 
   508   000FF8                     TBLPTRU         equ	4088	;# 
   509   000FF9                     PCLAT           equ	4089	;# 
   510   000FF9                     PC              equ	4089	;# 
   511   000FF9                     PCL             equ	4089	;# 
   512   000FFA                     PCLATH          equ	4090	;# 
   513   000FFB                     PCLATU          equ	4091	;# 
   514   000FFC                     STKPTR          equ	4092	;# 
   515   000FFD                     TOS             equ	4093	;# 
   516   000FFD                     TOSL            equ	4093	;# 
   517   000FFE                     TOSH            equ	4094	;# 
   518   000FFF                     TOSU            equ	4095	;# 
   519                           
   520                           	psect	smallconst
   521   000200                     __psmallconst:
   522                           	callstack 0
   523   000200  00                 	db	0
   524   000201                     GetTecla@F2725:
   525                           	callstack 0
   526   000201  01                 	db	1
   527   000202  02                 	db	2
   528   000203  03                 	db	3
   529   000204  04                 	db	4
   530   000205  05                 	db	5
   531   000206  06                 	db	6
   532   000207  07                 	db	7
   533   000208  08                 	db	8
   534   000209  09                 	db	9
   535   00020A  0A                 	db	10
   536   00020B  00                 	db	0
   537   00020C  0B                 	db	11
   538   00020D                     __end_ofGetTecla@F2725:
   539                           	callstack 0
   540   007F92                     _TMR0IF         set	32658
   541   000FD6                     _TMR0           set	4054
   542   000F80                     _PORTA          set	3968
   543   000FD5                     _T0CON          set	4053
   544   000F8B                     _LATC           set	3979
   545   000F8C                     _LATD           set	3980
   546   000F95                     _TRISD          set	3989
   547   000F8A                     _LATB           set	3978
   548   000F93                     _TRISB          set	3987
   549   000FF1                     _INTCON2bits    set	4081
   550   000F92                     _TRISA          set	3986
   551   000FC1                     _ADCON1         set	4033
   552   000FF2                     _INTCONbits     set	4082
   553   00020D  00                 	db	0	; dummy byte at the end
   554   000200                     __smallconst    set	__psmallconst
   555   000200                     __mediumconst   set	__psmallconst
   556   000002                     __activetblptr  equ	2
   557                           
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561   000574                     __pcinit:
   562                           	callstack 0
   563   000574                     start_initialization:
   564                           	callstack 0
   565   000574                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Clear objects allocated to COMRAM (32 bytes)
   569   000574  EE00  F001         	lfsr	0,__pbssCOMRAM
   570   000578  0E20               	movlw	32
   571   00057A                     clear_0:
   572   00057A  6AEE               	clrf	postinc0,c
   573   00057C  06E8               	decf	wreg,f,c
   574   00057E  E1FD               	bnz	clear_0
   575   000580                     end_of_initialization:
   576                           	callstack 0
   577   000580                     __end_of__initialization:
   578                           	callstack 0
   579   000580  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   580   000582  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   581   000584  0E00               	movlw	low (__Lmediumconst shr (0+16))
   582   000586  6EF8               	movwf	tblptru,c
   583   000588  0100               	movlb	0
   584   00058A  EFAC  F002         	goto	_main	;jump to C main() function
   585                           
   586                           	psect	bssCOMRAM
   587   000001                     __pbssCOMRAM:
   588                           	callstack 0
   589   000001                     _Timers:
   590                           	callstack 0
   591   000001                     	ds	20
   592   000015                     _Tics:
   593                           	callstack 0
   594   000015                     	ds	4
   595   000019                     _tick_count:
   596                           	callstack 0
   597   000019                     	ds	2
   598   00001B                     _tecla:
   599                           	callstack 0
   600   00001B                     	ds	1
   601   00001C                     _HiHaTecla:
   602                           	callstack 0
   603   00001C                     	ds	1
   604   00001D                     _state:
   605                           	callstack 0
   606   00001D                     	ds	1
   607   00001E                     _Columnas:
   608                           	callstack 0
   609   00001E                     	ds	1
   610   00001F                     _Filas:
   611                           	callstack 0
   612   00001F                     	ds	1
   613   000020                     _timer:
   614                           	callstack 0
   615   000020                     	ds	1
   616                           
   617                           	psect	cstackCOMRAM
   618   000021                     __pcstackCOMRAM:
   619                           	callstack 0
   620   000021                     ??_LowRSI:
   621                           
   622                           ; 1 bytes @ 0x0
   623   000021                     	ds	1
   624   000022                     ?_TI_GetTics:
   625                           	callstack 0
   626   000022                     TI_Init@counter:
   627                           	callstack 0
   628   000022                     TI_NewTimer@TimerHandle:
   629                           	callstack 0
   630   000022                     TI_ResetTics@TimerHandle:
   631                           	callstack 0
   632   000022                     GetTecla@columnas:
   633                           	callstack 0
   634   000022                     ??_StopRequest:
   635   000022                     
   636                           ; 1 bytes @ 0x1
   637   000022                     	ds	1
   638   000023                     StopRequest@key:
   639                           	callstack 0
   640   000023                     ??_GetTecla:
   641   000023                     
   642                           ; 1 bytes @ 0x2
   643   000023                     	ds	1
   644   000024                     TI_NewTimer@Comptador:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0x3
   648   000024                     	ds	1
   649   000025                     GetTecla@keymap:
   650                           	callstack 0
   651   000025                     
   652                           ; 1 bytes @ 0x4
   653   000025                     	ds	1
   654   000026                     ??_TI_GetTics:
   655                           
   656                           ; 1 bytes @ 0x5
   657   000026                     	ds	4
   658   00002A                     TI_GetTics@CopiaTicsActual:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x9
   662   00002A                     	ds	4
   663   00002E                     TI_GetTics@TimerHandle:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0xD
   667   00002E                     	ds	3
   668   000031                     GetTecla@filas:
   669                           	callstack 0
   670                           
   671                           ; 1 bytes @ 0x10
   672   000031                     	ds	1
   673   000032                     GetTecla@columna:
   674                           	callstack 0
   675                           
   676                           ; 1 bytes @ 0x11
   677   000032                     	ds	1
   678   000033                     GetTecla@fila:
   679                           	callstack 0
   680                           
   681                           ; 1 bytes @ 0x12
   682   000033                     	ds	1
   683   000034                     ??_motorTeclado:
   684                           
   685                           ; 1 bytes @ 0x13
   686   000034                     	ds	1
   687   000035                     
   688                           ; 1 bytes @ 0x14
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 38 in file "main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1
   708 ;;      Params:         0       0       0
   709 ;;      Locals:         0       0       0
   710 ;;      Temps:          0       0       0
   711 ;;      Totals:         0       0       0
   712 ;;Total ram usage:        0 bytes
   713 ;; Hardware stack levels required when called: 5
   714 ;; This function calls:
   715 ;;		_InitPorts
   716 ;;		_TI_Init
   717 ;;		_initTeclado
   718 ;;		_motorTeclado
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text0
   725   000558                     __ptext0:
   726                           	callstack 0
   727   000558                     _main:
   728                           	callstack 26
   729   000558                     
   730                           ;main.c: 39:  TRISA |= 0x0F;
   731   000558  ECDE  F002         	call	_InitPorts	;wreg free
   732   00055C                     
   733                           ;main.c: 40: 
   734   00055C  EC80  F002         	call	_TI_Init	;wreg free
   735   000560                     
   736                           ;main.c: 41:  INTCON2bits.RBPU = 0;
   737   000560  ECD3  F002         	call	_initTeclado	;wreg free
   738   000564                     
   739                           ;main.c: 44:  TRISB &= 0xF8;
   740   000564  8EF2               	bsf	242,7,c	;volatile
   741   000566                     
   742                           ;main.c: 45:  LATB |= 0x00;
   743   000566  8CF2               	bsf	242,6,c	;volatile
   744   000568                     l1206:
   745                           
   746                           ;main.c: 48:  TRISD = 0x00;
   747   000568  EC07  F001         	call	_motorTeclado	;wreg free
   748   00056C  EFB4  F002         	goto	l1206
   749   000570  EF13  F000         	goto	start
   750   000574                     __end_of_main:
   751                           	callstack 0
   752                           
   753 ;; *************** function _motorTeclado *****************
   754 ;; Defined at:
   755 ;;		line 26 in file "TAD_TECLADO.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1
   769 ;;      Params:         0       0       0
   770 ;;      Locals:         0       0       0
   771 ;;      Temps:          1       0       0
   772 ;;      Totals:         1       0       0
   773 ;;Total ram usage:        1 bytes
   774 ;; Hardware stack levels used: 1
   775 ;; Hardware stack levels required when called: 4
   776 ;; This function calls:
   777 ;;		_GetTecla
   778 ;;		_ReadFilas
   779 ;;		_StopRequest
   780 ;;		_TI_GetTics
   781 ;;		_TI_ResetTics
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text1
   788   00020E                     __ptext1:
   789                           	callstack 0
   790   00020E                     _motorTeclado:
   791                           	callstack 26
   792   00020E                     
   793                           ;TAD_TECLADO.c: 27:     Filas = ReadFilas();
   794   00020E  ECFE  F002         	call	_ReadFilas	;wreg free
   795   000212  6E1F               	movwf	_Filas^0,c
   796                           
   797                           ;TAD_TECLADO.c: 28:  switch(state) {
   798   000214  EFAB  F001         	goto	l1192
   799   000218                     l1130:
   800                           
   801                           ;TAD_TECLADO.c: 30:    if (Filas == 0x0) {
   802   000218  501F               	movf	_Filas^0,w,c
   803   00021A  A4D8               	btfss	status,2,c
   804   00021C  EF12  F001         	goto	u201
   805   000220  EF14  F001         	goto	u200
   806   000224                     u201:
   807   000224  EF1C  F001         	goto	l1136
   808   000228                     u200:
   809   000228                     
   810                           ;TAD_TECLADO.c: 31:     Columnas = (0x01);
   811   000228  0E01               	movlw	1
   812   00022A  6E1E               	movwf	_Columnas^0,c
   813   00022C                     
   814                           ;TAD_TECLADO.c: 32:                 LATB = Columnas;
   815   00022C  C01E  FF8A         	movff	_Columnas,3978	;volatile
   816                           
   817                           ;TAD_TECLADO.c: 33:     state = 1;
   818   000230  0E01               	movlw	1
   819   000232  6E1D               	movwf	_state^0,c
   820                           
   821                           ;TAD_TECLADO.c: 34:    }
   822   000234  EFC2  F001         	goto	l1194
   823   000238                     l1136:
   824   000238  501F               	movf	_Filas^0,w,c
   825   00023A  B4D8               	btfsc	status,2,c
   826   00023C  EF22  F001         	goto	u211
   827   000240  EF24  F001         	goto	u210
   828   000244                     u211:
   829   000244  EFC2  F001         	goto	l1194
   830   000248                     u210:
   831   000248                     
   832                           ;TAD_TECLADO.c: 36:                 TI_ResetTics(timer);
   833   000248  5020               	movf	_timer^0,w,c
   834   00024A  EC9A  F002         	call	_TI_ResetTics
   835   00024E                     l1140:
   836                           
   837                           ;TAD_TECLADO.c: 37:     state = 4;
   838   00024E  0E04               	movlw	4
   839   000250  6E1D               	movwf	_state^0,c
   840   000252  EFC2  F001         	goto	l1194
   841   000256                     l1142:
   842                           
   843                           ;TAD_TECLADO.c: 41:    if (Filas == 0x0) {
   844   000256  501F               	movf	_Filas^0,w,c
   845   000258  A4D8               	btfss	status,2,c
   846   00025A  EF31  F001         	goto	u221
   847   00025E  EF33  F001         	goto	u220
   848   000262                     u221:
   849   000262  EF3B  F001         	goto	l1148
   850   000266                     u220:
   851   000266                     
   852                           ;TAD_TECLADO.c: 42:     Columnas = (0x02);
   853   000266  0E02               	movlw	2
   854   000268  6E1E               	movwf	_Columnas^0,c
   855   00026A                     
   856                           ;TAD_TECLADO.c: 43:                 LATB = Columnas;
   857   00026A  C01E  FF8A         	movff	_Columnas,3978	;volatile
   858                           
   859                           ;TAD_TECLADO.c: 44:     state = 2;
   860   00026E  0E02               	movlw	2
   861   000270  6E1D               	movwf	_state^0,c
   862                           
   863                           ;TAD_TECLADO.c: 45:    }
   864   000272  EFC2  F001         	goto	l1194
   865   000276                     l1148:
   866   000276  501F               	movf	_Filas^0,w,c
   867   000278  B4D8               	btfsc	status,2,c
   868   00027A  EF41  F001         	goto	u231
   869   00027E  EF43  F001         	goto	u230
   870   000282                     u231:
   871   000282  EFC2  F001         	goto	l1194
   872   000286                     u230:
   873   000286                     
   874                           ;TAD_TECLADO.c: 47:                 TI_ResetTics(timer);
   875   000286  5020               	movf	_timer^0,w,c
   876   000288  EC9A  F002         	call	_TI_ResetTics
   877   00028C  EF27  F001         	goto	l1140
   878   000290                     l1154:
   879                           
   880                           ;TAD_TECLADO.c: 52:    if (Filas == 0x0) {
   881   000290  501F               	movf	_Filas^0,w,c
   882   000292  A4D8               	btfss	status,2,c
   883   000294  EF4E  F001         	goto	u241
   884   000298  EF50  F001         	goto	u240
   885   00029C                     u241:
   886   00029C  EF58  F001         	goto	l1160
   887   0002A0                     u240:
   888   0002A0                     
   889                           ;TAD_TECLADO.c: 53:     Columnas = (0x04);
   890   0002A0  0E04               	movlw	4
   891   0002A2  6E1E               	movwf	_Columnas^0,c
   892   0002A4                     
   893                           ;TAD_TECLADO.c: 54:                 LATB = Columnas;
   894   0002A4  C01E  FF8A         	movff	_Columnas,3978	;volatile
   895                           
   896                           ;TAD_TECLADO.c: 55:     state = 3;
   897   0002A8  0E03               	movlw	3
   898   0002AA  6E1D               	movwf	_state^0,c
   899                           
   900                           ;TAD_TECLADO.c: 56:    }
   901   0002AC  EFC2  F001         	goto	l1194
   902   0002B0                     l1160:
   903   0002B0  501F               	movf	_Filas^0,w,c
   904   0002B2  B4D8               	btfsc	status,2,c
   905   0002B4  EF5E  F001         	goto	u251
   906   0002B8  EF60  F001         	goto	u250
   907   0002BC                     u251:
   908   0002BC  EFC2  F001         	goto	l1194
   909   0002C0                     u250:
   910   0002C0                     
   911                           ;TAD_TECLADO.c: 58:                 TI_ResetTics(timer);
   912   0002C0  5020               	movf	_timer^0,w,c
   913   0002C2  EC9A  F002         	call	_TI_ResetTics
   914   0002C6  EF27  F001         	goto	l1140
   915   0002CA                     l1166:
   916                           
   917                           ;TAD_TECLADO.c: 63:    if (Filas != 0x0) {
   918   0002CA  501F               	movf	_Filas^0,w,c
   919   0002CC  B4D8               	btfsc	status,2,c
   920   0002CE  EF6B  F001         	goto	u261
   921   0002D2  EF6D  F001         	goto	u260
   922   0002D6                     u261:
   923   0002D6  EF72  F001         	goto	l1172
   924   0002DA                     u260:
   925   0002DA                     
   926                           ;TAD_TECLADO.c: 64:                 TI_ResetTics(timer);
   927   0002DA  5020               	movf	_timer^0,w,c
   928   0002DC  EC9A  F002         	call	_TI_ResetTics
   929   0002E0  EF27  F001         	goto	l1140
   930   0002E4                     l1172:
   931   0002E4  501F               	movf	_Filas^0,w,c
   932   0002E6  A4D8               	btfss	status,2,c
   933   0002E8  EF78  F001         	goto	u271
   934   0002EC  EF7A  F001         	goto	u270
   935   0002F0                     u271:
   936   0002F0  EFC2  F001         	goto	l1194
   937   0002F4                     u270:
   938   0002F4                     l1174:
   939                           
   940                           ;TAD_TECLADO.c: 68:     state = 0;
   941   0002F4  6A1D               	clrf	_state^0,c
   942   0002F6  EFC2  F001         	goto	l1194
   943   0002FA                     l1176:
   944                           
   945                           ;TAD_TECLADO.c: 72:    if (Filas == 0x0) {
   946   0002FA  501F               	movf	_Filas^0,w,c
   947   0002FC  A4D8               	btfss	status,2,c
   948   0002FE  EF83  F001         	goto	u281
   949   000302  EF85  F001         	goto	u280
   950   000306                     u281:
   951   000306  EF87  F001         	goto	l1180
   952   00030A                     u280:
   953   00030A  EF7A  F001         	goto	l1174
   954   00030E                     l1180:
   955   00030E  501F               	movf	_Filas^0,w,c
   956   000310  B4D8               	btfsc	status,2,c
   957   000312  EF8D  F001         	goto	u291
   958   000316  EF8F  F001         	goto	u290
   959   00031A                     u291:
   960   00031A  EFC2  F001         	goto	l1194
   961   00031E                     u290:
   962   00031E  5020               	movf	_timer^0,w,c
   963   000320  EC5A  F002         	call	_TI_GetTics
   964   000324  5025               	movf	(?_TI_GetTics+3)^0,w,c
   965   000326  1024               	iorwf	(?_TI_GetTics+2)^0,w,c
   966   000328  E10B               	bnz	u300
   967   00032A  0EF5               	movlw	245
   968   00032C  5C22               	subwf	?_TI_GetTics^0,w,c
   969   00032E  0E01               	movlw	1
   970   000330  5823               	subwfb	(?_TI_GetTics+1)^0,w,c
   971   000332  A0D8               	btfss	status,0,c
   972   000334  EF9E  F001         	goto	u301
   973   000338  EFA0  F001         	goto	u300
   974   00033C                     u301:
   975   00033C  EFC2  F001         	goto	l1194
   976   000340                     u300:
   977   000340                     
   978                           ;TAD_TECLADO.c: 76:     tecla = GetTecla(Filas, Columnas);
   979   000340  C01E  F022         	movff	_Columnas,GetTecla@columnas
   980   000344  501F               	movf	_Filas^0,w,c
   981   000346  ECCC  F001         	call	_GetTecla
   982   00034A  6E1B               	movwf	_tecla^0,c
   983   00034C                     
   984                           ;TAD_TECLADO.c: 77:                 StopRequest(tecla);
   985   00034C  501B               	movf	_tecla^0,w,c
   986   00034E  ECF4  F002         	call	_StopRequest
   987   000352  EF7A  F001         	goto	l1174
   988   000356                     l1192:
   989   000356  501D               	movf	_state^0,w,c
   990                           
   991                           ; Switch size 1, requested type "simple"
   992                           ; Number of cases is 5, Range of values is 0 to 4
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte           16     9 (average)
   996                           ;	Chosen strategy is simple_byte
   997   000358  0A00               	xorlw	0	; case 0
   998   00035A  B4D8               	btfsc	status,2,c
   999   00035C  EF0C  F001         	goto	l1130
  1000   000360  0A01               	xorlw	1	; case 1
  1001   000362  B4D8               	btfsc	status,2,c
  1002   000364  EF2B  F001         	goto	l1142
  1003   000368  0A03               	xorlw	3	; case 2
  1004   00036A  B4D8               	btfsc	status,2,c
  1005   00036C  EF48  F001         	goto	l1154
  1006   000370  0A01               	xorlw	1	; case 3
  1007   000372  B4D8               	btfsc	status,2,c
  1008   000374  EF65  F001         	goto	l1166
  1009   000378  0A07               	xorlw	7	; case 4
  1010   00037A  B4D8               	btfsc	status,2,c
  1011   00037C  EF7D  F001         	goto	l1176
  1012   000380  EFC2  F001         	goto	l1194
  1013   000384                     l1194:
  1014                           
  1015                           ;TAD_TECLADO.c: 82:     LATD = (LATD & 0x0F) | (state << 4);
  1016   000384  C01D  F034         	movff	_state,??_motorTeclado
  1017   000388  3A34               	swapf	??_motorTeclado^0,f,c
  1018   00038A  0EF0               	movlw	240
  1019   00038C  1634               	andwf	??_motorTeclado^0,f,c
  1020   00038E  508C               	movf	140,w,c	;volatile
  1021   000390  0B0F               	andlw	15
  1022   000392  1034               	iorwf	??_motorTeclado^0,w,c
  1023   000394  6E8C               	movwf	140,c	;volatile
  1024   000396  0012               	return		;funcret
  1025   000398                     __end_of_motorTeclado:
  1026                           	callstack 0
  1027                           
  1028 ;; *************** function _TI_ResetTics *****************
  1029 ;; Defined at:
  1030 ;;		line 53 in file "TAD_TIMER.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  TimerHandle     1    wreg     unsigned char 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1
  1044 ;;      Params:         0       0       0
  1045 ;;      Locals:         1       0       0
  1046 ;;      Temps:          0       0       0
  1047 ;;      Totals:         1       0       0
  1048 ;;Total ram usage:        1 bytes
  1049 ;; Hardware stack levels used: 1
  1050 ;; Hardware stack levels required when called: 3
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_motorTeclado
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text2
  1059   000534                     __ptext2:
  1060                           	callstack 0
  1061   000534                     _TI_ResetTics:
  1062                           	callstack 26
  1063                           
  1064                           ;incstack = 0
  1065                           ;TI_ResetTics@TimerHandle stored from wreg
  1066   000534  6E22               	movwf	TI_ResetTics@TimerHandle^0,c
  1067   000536                     
  1068                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  1069   000536  9EF2               	bcf	242,7,c	;volatile
  1070   000538  5022               	movf	TI_ResetTics@TimerHandle^0,w,c
  1071   00053A  0D05               	mullw	5
  1072   00053C  50F3               	movf	243,w,c
  1073   00053E  0F01               	addlw	low _Timers
  1074   000540  6ED9               	movwf	fsr2l,c
  1075   000542  6ADA               	clrf	fsr2h,c
  1076   000544  C015  FFDE         	movff	_Tics,postinc2	;volatile
  1077   000548  C016  FFDE         	movff	_Tics+1,postinc2	;volatile
  1078   00054C  C017  FFDE         	movff	_Tics+2,postinc2	;volatile
  1079   000550  C018  FFDE         	movff	_Tics+3,postinc2	;volatile
  1080   000554  8EF2               	bsf	242,7,c	;volatile
  1081   000556  0012               	return		;funcret
  1082   000558                     __end_of_TI_ResetTics:
  1083                           	callstack 0
  1084                           
  1085 ;; *************** function _TI_GetTics *****************
  1086 ;; Defined at:
  1087 ;;		line 61 in file "TAD_TIMER.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  TimerHandle     1    wreg     unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  1092 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  4    1[COMRAM] unsigned long 
  1095 ;; Registers used:
  1096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1
  1102 ;;      Params:         4       0       0
  1103 ;;      Locals:         5       0       0
  1104 ;;      Temps:          4       0       0
  1105 ;;      Totals:        13       0       0
  1106 ;;Total ram usage:       13 bytes
  1107 ;; Hardware stack levels used: 1
  1108 ;; Hardware stack levels required when called: 3
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_motorTeclado
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text3
  1117   0004B4                     __ptext3:
  1118                           	callstack 0
  1119   0004B4                     _TI_GetTics:
  1120                           	callstack 26
  1121                           
  1122                           ;incstack = 0
  1123                           ;TI_GetTics@TimerHandle stored from wreg
  1124   0004B4  6E2E               	movwf	TI_GetTics@TimerHandle^0,c
  1125   0004B6                     
  1126                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  1127   0004B6  9EF2               	bcf	242,7,c	;volatile
  1128   0004B8  C015  F02A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  1129   0004BC  C016  F02B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  1130   0004C0  C017  F02C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  1131   0004C4  C018  F02D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  1132   0004C8  8EF2               	bsf	242,7,c	;volatile
  1133   0004CA                     
  1134                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  1135   0004CA  502E               	movf	TI_GetTics@TimerHandle^0,w,c
  1136   0004CC  0D05               	mullw	5
  1137   0004CE  50F3               	movf	243,w,c
  1138   0004D0  0F01               	addlw	low _Timers
  1139   0004D2  6ED9               	movwf	fsr2l,c
  1140   0004D4  6ADA               	clrf	fsr2h,c
  1141   0004D6  CFDE F026          	movff	postinc2,??_TI_GetTics
  1142   0004DA  CFDE F027          	movff	postinc2,??_TI_GetTics+1
  1143   0004DE  CFDE F028          	movff	postinc2,??_TI_GetTics+2
  1144   0004E2  CFDE F029          	movff	postinc2,??_TI_GetTics+3
  1145   0004E6  5026               	movf	??_TI_GetTics^0,w,c
  1146   0004E8  5C2A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  1147   0004EA  6E22               	movwf	?_TI_GetTics^0,c
  1148   0004EC  5027               	movf	(??_TI_GetTics+1)^0,w,c
  1149   0004EE  582B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  1150   0004F0  6E23               	movwf	(?_TI_GetTics+1)^0,c
  1151   0004F2  5028               	movf	(??_TI_GetTics+2)^0,w,c
  1152   0004F4  582C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  1153   0004F6  6E24               	movwf	(?_TI_GetTics+2)^0,c
  1154   0004F8  5029               	movf	(??_TI_GetTics+3)^0,w,c
  1155   0004FA  582D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  1156   0004FC  6E25               	movwf	(?_TI_GetTics+3)^0,c
  1157   0004FE  0012               	return		;funcret
  1158   000500                     __end_of_TI_GetTics:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _StopRequest *****************
  1162 ;; Defined at:
  1163 ;;		line 115 in file "TAD_TECLADO.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  key             1    wreg     unsigned char 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  key             1    2[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      void 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1
  1177 ;;      Params:         0       0       0
  1178 ;;      Locals:         1       0       0
  1179 ;;      Temps:          1       0       0
  1180 ;;      Totals:         2       0       0
  1181 ;;Total ram usage:        2 bytes
  1182 ;; Hardware stack levels used: 1
  1183 ;; Hardware stack levels required when called: 3
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_motorTeclado
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text4
  1192   0005E8                     __ptext4:
  1193                           	callstack 0
  1194   0005E8                     _StopRequest:
  1195                           	callstack 26
  1196                           
  1197                           ;incstack = 0
  1198                           ;StopRequest@key stored from wreg
  1199   0005E8  6E23               	movwf	StopRequest@key^0,c
  1200   0005EA                     
  1201                           ;TAD_TECLADO.c: 117:     LATD = (LATD & 0xF0) | (key & 0x0F);
  1202   0005EA  C023  F022         	movff	StopRequest@key,??_StopRequest
  1203   0005EE  0E0F               	movlw	15
  1204   0005F0  1622               	andwf	??_StopRequest^0,f,c
  1205   0005F2  508C               	movf	140,w,c	;volatile
  1206   0005F4  0BF0               	andlw	240
  1207   0005F6  1022               	iorwf	??_StopRequest^0,w,c
  1208   0005F8  6E8C               	movwf	140,c	;volatile
  1209   0005FA  0012               	return		;funcret
  1210   0005FC                     __end_of_StopRequest:
  1211                           	callstack 0
  1212                           
  1213 ;; *************** function _ReadFilas *****************
  1214 ;; Defined at:
  1215 ;;		line 9 in file "TAD_TECLADO.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;		None
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      unsigned char 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1
  1229 ;;      Params:         0       0       0
  1230 ;;      Locals:         0       0       0
  1231 ;;      Temps:          0       0       0
  1232 ;;      Totals:         0       0       0
  1233 ;;Total ram usage:        0 bytes
  1234 ;; Hardware stack levels used: 1
  1235 ;; Hardware stack levels required when called: 3
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_motorTeclado
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text5
  1244   0005FC                     __ptext5:
  1245                           	callstack 0
  1246   0005FC                     _ReadFilas:
  1247                           	callstack 26
  1248   0005FC                     
  1249                           ;TAD_TECLADO.c: 10:     return (PORTA & 0x0F);
  1250   0005FC  5080               	movf	128,w,c	;volatile
  1251   0005FE  0B0F               	andlw	15
  1252   000600  0012               	return		;funcret
  1253   000602                     __end_of_ReadFilas:
  1254                           	callstack 0
  1255                           
  1256 ;; *************** function _GetTecla *****************
  1257 ;; Defined at:
  1258 ;;		line 85 in file "TAD_TECLADO.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  filas           1    wreg     unsigned char 
  1261 ;;  columnas        1    1[COMRAM] unsigned char 
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  filas           1   16[COMRAM] unsigned char 
  1264 ;;  keymap         12    4[COMRAM] const unsigned char [3][
  1265 ;;  fila            1   18[COMRAM] unsigned char 
  1266 ;;  columna         1   17[COMRAM] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      unsigned char 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1
  1276 ;;      Params:         1       0       0
  1277 ;;      Locals:        15       0       0
  1278 ;;      Temps:          2       0       0
  1279 ;;      Totals:        18       0       0
  1280 ;;Total ram usage:       18 bytes
  1281 ;; Hardware stack levels used: 1
  1282 ;; Hardware stack levels required when called: 3
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_motorTeclado
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text6
  1291   000398                     __ptext6:
  1292                           	callstack 0
  1293   000398                     _GetTecla:
  1294                           	callstack 26
  1295                           
  1296                           ;incstack = 0
  1297                           ;GetTecla@filas stored from wreg
  1298   000398  6E31               	movwf	GetTecla@filas^0,c
  1299   00039A                     
  1300                           ;TAD_TECLADO.c: 87:     unsigned char columna = 0;
  1301   00039A  6A32               	clrf	GetTecla@columna^0,c
  1302                           
  1303                           ;TAD_TECLADO.c: 89:     switch(filas) {
  1304   00039C  EFE2  F001         	goto	l1094
  1305   0003A0                     l157:
  1306   0003A0  6A33               	clrf	GetTecla@fila^0,c
  1307   0003A2  EF00  F002         	goto	l1106
  1308   0003A6                     l1082:
  1309   0003A6  0E01               	movlw	1
  1310   0003A8  6E33               	movwf	GetTecla@fila^0,c
  1311   0003AA  EF00  F002         	goto	l1106
  1312   0003AE                     l1084:
  1313   0003AE  0E02               	movlw	2
  1314   0003B0  6E33               	movwf	GetTecla@fila^0,c
  1315   0003B2  EF00  F002         	goto	l1106
  1316   0003B6                     l1086:
  1317   0003B6  0E03               	movlw	3
  1318   0003B8  6E33               	movwf	GetTecla@fila^0,c
  1319   0003BA  EF00  F002         	goto	l1106
  1320   0003BE                     l1088:
  1321   0003BE  0EFF               	movlw	255
  1322   0003C0  EF2E  F002         	goto	l163
  1323   0003C4                     l1094:
  1324   0003C4  5031               	movf	GetTecla@filas^0,w,c
  1325                           
  1326                           ; Switch size 1, requested type "simple"
  1327                           ; Number of cases is 4, Range of values is 1 to 8
  1328                           ; switch strategies available:
  1329                           ; Name         Instructions Cycles
  1330                           ; simple_byte           13     7 (average)
  1331                           ;	Chosen strategy is simple_byte
  1332   0003C6  0A01               	xorlw	1	; case 1
  1333   0003C8  B4D8               	btfsc	status,2,c
  1334   0003CA  EFD0  F001         	goto	l157
  1335   0003CE  0A03               	xorlw	3	; case 2
  1336   0003D0  B4D8               	btfsc	status,2,c
  1337   0003D2  EFD3  F001         	goto	l1082
  1338   0003D6  0A06               	xorlw	6	; case 4
  1339   0003D8  B4D8               	btfsc	status,2,c
  1340   0003DA  EFD7  F001         	goto	l1084
  1341   0003DE  0A0C               	xorlw	12	; case 8
  1342   0003E0  B4D8               	btfsc	status,2,c
  1343   0003E2  EFDB  F001         	goto	l1086
  1344   0003E6  EFDF  F001         	goto	l1088
  1345   0003EA                     l165:
  1346   0003EA  6A32               	clrf	GetTecla@columna^0,c
  1347   0003EC  EF1A  F002         	goto	l1108
  1348   0003F0                     l1096:
  1349   0003F0  0E01               	movlw	1
  1350   0003F2  6E32               	movwf	GetTecla@columna^0,c
  1351   0003F4  EF1A  F002         	goto	l1108
  1352   0003F8                     l1098:
  1353   0003F8  0E02               	movlw	2
  1354   0003FA  6E32               	movwf	GetTecla@columna^0,c
  1355   0003FC  EF1A  F002         	goto	l1108
  1356   000400                     l1106:
  1357   000400  5022               	movf	GetTecla@columnas^0,w,c
  1358   000402  0B07               	andlw	7
  1359   000404  6E23               	movwf	??_GetTecla^0,c
  1360   000406  6A24               	clrf	(??_GetTecla+1)^0,c
  1361                           
  1362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1363                           ; Switch size 1, requested type "simple"
  1364                           ; Number of cases is 1, Range of values is 0 to 0
  1365                           ; switch strategies available:
  1366                           ; Name         Instructions Cycles
  1367                           ; simple_byte            4     3 (average)
  1368                           ;	Chosen strategy is simple_byte
  1369   000408  5024               	movf	(??_GetTecla+1)^0,w,c
  1370   00040A  0A00               	xorlw	0	; case 0
  1371   00040C  B4D8               	btfsc	status,2,c
  1372   00040E  EF0B  F002         	goto	l1212
  1373   000412  EFDF  F001         	goto	l1088
  1374   000416                     l1212:
  1375                           
  1376                           ; Switch size 1, requested type "simple"
  1377                           ; Number of cases is 3, Range of values is 1 to 4
  1378                           ; switch strategies available:
  1379                           ; Name         Instructions Cycles
  1380                           ; simple_byte           10     6 (average)
  1381                           ;	Chosen strategy is simple_byte
  1382   000416  5023               	movf	??_GetTecla^0,w,c
  1383   000418  0A01               	xorlw	1	; case 1
  1384   00041A  B4D8               	btfsc	status,2,c
  1385   00041C  EFF5  F001         	goto	l165
  1386   000420  0A03               	xorlw	3	; case 2
  1387   000422  B4D8               	btfsc	status,2,c
  1388   000424  EFF8  F001         	goto	l1096
  1389   000428  0A06               	xorlw	6	; case 4
  1390   00042A  B4D8               	btfsc	status,2,c
  1391   00042C  EFFC  F001         	goto	l1098
  1392   000430  EFDF  F001         	goto	l1088
  1393   000434                     l1108:
  1394                           
  1395                           ;TAD_TECLADO.c: 105:     const unsigned char keymap[4][3] = {
  1396   000434  0E01               	movlw	low GetTecla@F2725
  1397   000436  6EF6               	movwf	tblptrl,c
  1398   000438                     	if	1	;There is more than 1 active tblptr byte
  1399   000438  0E02               	movlw	high GetTecla@F2725
  1400   00043A  6EF7               	movwf	tblptrh,c
  1401   00043C                     	endif
  1402   00043C                     	if	0	;There are less than 3 active tblptr bytes
  1403   00043C                     	endif
  1404   00043C  EE20  F025         	lfsr	2,GetTecla@keymap
  1405   000440  0E0B               	movlw	11
  1406   000442                     u190:
  1407   000442  0009               	tblrd		*+
  1408   000444  CFF5 FFDE          	movff	tablat,postinc2
  1409   000448  06E8               	decf	wreg,f,c
  1410   00044A  E2FB               	bc	u190
  1411   00044C                     
  1412                           ;TAD_TECLADO.c: 112:     return keymap[fila][columna];
  1413   00044C  5033               	movf	GetTecla@fila^0,w,c
  1414   00044E  0D03               	mullw	3
  1415   000450  50F3               	movf	243,w,c
  1416   000452  0F25               	addlw	low GetTecla@keymap
  1417   000454  2432               	addwf	GetTecla@columna^0,w,c
  1418   000456  6ED9               	movwf	fsr2l,c
  1419   000458  6ADA               	clrf	fsr2h,c
  1420   00045A  50DF               	movf	indf2,w,c
  1421   00045C                     l163:
  1422   00045C  0012               	return		;funcret
  1423   00045E                     __end_of_GetTecla:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _initTeclado *****************
  1427 ;; Defined at:
  1428 ;;		line 13 in file "TAD_TECLADO.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1
  1442 ;;      Params:         0       0       0
  1443 ;;      Locals:         0       0       0
  1444 ;;      Temps:          0       0       0
  1445 ;;      Totals:         0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used: 1
  1448 ;; Hardware stack levels required when called: 4
  1449 ;; This function calls:
  1450 ;;		_TI_NewTimer
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text7
  1457   0005A6                     __ptext7:
  1458                           	callstack 0
  1459   0005A6                     _initTeclado:
  1460                           	callstack 26
  1461   0005A6                     
  1462                           ;TAD_TECLADO.c: 14:     Filas = 0x00;
  1463   0005A6  6A1F               	clrf	_Filas^0,c
  1464                           
  1465                           ;TAD_TECLADO.c: 15:     Columnas = 0x00;
  1466   0005A8  6A1E               	clrf	_Columnas^0,c
  1467   0005AA                     
  1468                           ;TAD_TECLADO.c: 16:     state = 1;
  1469   0005AA  0E01               	movlw	1
  1470   0005AC  6E1D               	movwf	_state^0,c
  1471   0005AE                     
  1472                           ;TAD_TECLADO.c: 17:     HiHaTecla = 0;
  1473   0005AE  6A1C               	clrf	_HiHaTecla^0,c
  1474   0005B0                     
  1475                           ;TAD_TECLADO.c: 18:     tecla = 0;
  1476   0005B0  6A1B               	clrf	_tecla^0,c
  1477   0005B2                     
  1478                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  1479   0005B2  0E20               	movlw	low _timer
  1480   0005B4  6E22               	movwf	TI_NewTimer@TimerHandle^0,c
  1481   0005B6  EC2F  F002         	call	_TI_NewTimer	;wreg free
  1482   0005BA  0012               	return		;funcret
  1483   0005BC                     __end_of_initTeclado:
  1484                           	callstack 0
  1485                           
  1486 ;; *************** function _TI_NewTimer *****************
  1487 ;; Defined at:
  1488 ;;		line 43 in file "TAD_TIMER.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  1491 ;;		 -> timer(1), 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  Comptador       1    3[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      unsigned char 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1
  1503 ;;      Params:         1       0       0
  1504 ;;      Locals:         1       0       0
  1505 ;;      Temps:          1       0       0
  1506 ;;      Totals:         3       0       0
  1507 ;;Total ram usage:        3 bytes
  1508 ;; Hardware stack levels used: 1
  1509 ;; Hardware stack levels required when called: 3
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_initTeclado
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text8
  1518   00045E                     __ptext8:
  1519                           	callstack 0
  1520   00045E                     _TI_NewTimer:
  1521                           	callstack 26
  1522   00045E                     
  1523                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  1524   00045E  6A24               	clrf	TI_NewTimer@Comptador^0,c
  1525                           
  1526                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  1527   000460  EF3E  F002         	goto	l1066
  1528   000464                     l1062:
  1529                           
  1530                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  1531   000464  2A24               	incf	TI_NewTimer@Comptador^0,f,c
  1532   000466  0E04               	movlw	4
  1533   000468  1824               	xorwf	TI_NewTimer@Comptador^0,w,c
  1534   00046A  A4D8               	btfss	status,2,c
  1535   00046C  EF3A  F002         	goto	u171
  1536   000470  EF3C  F002         	goto	u170
  1537   000474                     u171:
  1538   000474  EF3E  F002         	goto	l1066
  1539   000478                     u170:
  1540   000478  EF59  F002         	goto	l81
  1541   00047C                     l1066:
  1542                           
  1543                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  1544   00047C  5024               	movf	TI_NewTimer@Comptador^0,w,c
  1545   00047E  0D05               	mullw	5
  1546   000480  50F3               	movf	243,w,c
  1547   000482  0F05               	addlw	low (_Timers+4)
  1548   000484  6ED9               	movwf	fsr2l,c
  1549   000486  6ADA               	clrf	fsr2h,c
  1550   000488  04DE               	decf	postinc2,w,c
  1551   00048A  B4D8               	btfsc	status,2,c
  1552   00048C  EF4A  F002         	goto	u181
  1553   000490  EF4C  F002         	goto	u180
  1554   000494                     u181:
  1555   000494  EF32  F002         	goto	l1062
  1556   000498                     u180:
  1557   000498                     
  1558                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  1559   000498  5024               	movf	TI_NewTimer@Comptador^0,w,c
  1560   00049A  0D05               	mullw	5
  1561   00049C  50F3               	movf	243,w,c
  1562   00049E  0F05               	addlw	low (_Timers+4)
  1563   0004A0  6ED9               	movwf	fsr2l,c
  1564   0004A2  6ADA               	clrf	fsr2h,c
  1565   0004A4  0E01               	movlw	1
  1566   0004A6  6EDF               	movwf	indf2,c
  1567   0004A8                     
  1568                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  1569   0004A8  5022               	movf	TI_NewTimer@TimerHandle^0,w,c
  1570   0004AA  6ED9               	movwf	fsr2l,c
  1571   0004AC  6ADA               	clrf	fsr2h,c
  1572   0004AE  C024  FFDF         	movff	TI_NewTimer@Comptador,indf2
  1573   0004B2                     l81:
  1574   0004B2  0012               	return		;funcret
  1575   0004B4                     __end_of_TI_NewTimer:
  1576                           	callstack 0
  1577                           
  1578 ;; *************** function _TI_Init *****************
  1579 ;; Defined at:
  1580 ;;		line 32 in file "TAD_TIMER.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  counter         1    1[COMRAM] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1
  1594 ;;      Params:         0       0       0
  1595 ;;      Locals:         1       0       0
  1596 ;;      Temps:          0       0       0
  1597 ;;      Totals:         1       0       0
  1598 ;;Total ram usage:        1 bytes
  1599 ;; Hardware stack levels used: 1
  1600 ;; Hardware stack levels required when called: 3
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text9
  1609   000500                     __ptext9:
  1610                           	callstack 0
  1611   000500                     _TI_Init:
  1612                           	callstack 27
  1613   000500                     
  1614                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  1615   000500  6A22               	clrf	TI_Init@counter^0,c
  1616   000502                     l946:
  1617                           
  1618                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  1619   000502  5022               	movf	TI_Init@counter^0,w,c
  1620   000504  0D05               	mullw	5
  1621   000506  50F3               	movf	243,w,c
  1622   000508  0F05               	addlw	low (_Timers+4)
  1623   00050A  6ED9               	movwf	fsr2l,c
  1624   00050C  6ADA               	clrf	fsr2h,c
  1625   00050E  6ADF               	clrf	indf2,c
  1626   000510                     
  1627                           ;TAD_TIMER.c: 35:  }
  1628   000510  2A22               	incf	TI_Init@counter^0,f,c
  1629   000512  0E03               	movlw	3
  1630   000514  6422               	cpfsgt	TI_Init@counter^0,c
  1631   000516  EF8F  F002         	goto	u41
  1632   00051A  EF91  F002         	goto	u40
  1633   00051E                     u41:
  1634   00051E  EF81  F002         	goto	l946
  1635   000522                     u40:
  1636   000522                     
  1637                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  1638   000522  0E82               	movlw	130
  1639   000524  6ED5               	movwf	213,c	;volatile
  1640                           
  1641                           ;TAD_TIMER.c: 37:     TMR0=64911;
  1642   000526  0EFD               	movlw	253
  1643   000528  6ED7               	movwf	215,c	;volatile
  1644   00052A  0E8F               	movlw	143
  1645   00052C  6ED6               	movwf	214,c	;volatile
  1646   00052E                     
  1647                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  1648   00052E  94F2               	bcf	242,2,c	;volatile
  1649   000530                     
  1650                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  1651   000530  8AF2               	bsf	242,5,c	;volatile
  1652   000532  0012               	return		;funcret
  1653   000534                     __end_of_TI_Init:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _InitPorts *****************
  1657 ;; Defined at:
  1658 ;;		line 53 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1
  1672 ;;      Params:         0       0       0
  1673 ;;      Locals:         0       0       0
  1674 ;;      Temps:          0       0       0
  1675 ;;      Totals:         0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used: 1
  1678 ;; Hardware stack levels required when called: 3
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text10
  1687   0005BC                     __ptext10:
  1688                           	callstack 0
  1689   0005BC                     _InitPorts:
  1690                           	callstack 27
  1691   0005BC                     
  1692                           ;main.c: 55: 
  1693   0005BC  0E0F               	movlw	15
  1694   0005BE  6EC1               	movwf	193,c	;volatile
  1695   0005C0  0E0F               	movlw	15
  1696   0005C2  1292               	iorwf	146,f,c	;volatile
  1697   0005C4  9EF1               	bcf	241,7,c	;volatile
  1698   0005C6  0EF8               	movlw	248
  1699   0005C8  1693               	andwf	147,f,c	;volatile
  1700   0005CA  508A               	movf	138,w,c	;volatile
  1701   0005CC  6A95               	clrf	149,c	;volatile
  1702   0005CE  6A8C               	clrf	140,c	;volatile
  1703   0005D0  0012               	return		;funcret
  1704   0005D2                     __end_of_InitPorts:
  1705                           	callstack 0
  1706                           
  1707 ;; *************** function _LowRSI *****************
  1708 ;; Defined at:
  1709 ;;		line 31 in file "main.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		None
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1
  1723 ;;      Params:         0       0       0
  1724 ;;      Locals:         0       0       0
  1725 ;;      Temps:          1       0       0
  1726 ;;      Totals:         1       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used: 1
  1729 ;; Hardware stack levels required when called: 2
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		Interrupt level 1
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	intcodelo
  1738   000018                     __pintcodelo:
  1739                           	callstack 0
  1740   000018                     _LowRSI:
  1741                           	callstack 26
  1742                           
  1743                           ;incstack = 0
  1744   000018  8035               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1745   00001A  CFE0 F021          	movff	bsr,??_LowRSI
  1746   00001E  C021  FFE0         	movff	??_LowRSI,bsr
  1747   000022  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1748   000024  0010               	retfie	
  1749   000026                     __end_of_LowRSI:
  1750                           	callstack 0
  1751                           
  1752 ;; *************** function _HighRSI *****************
  1753 ;; Defined at:
  1754 ;;		line 27 in file "main.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, status,2, status,0, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1
  1768 ;;      Params:         0       0       0
  1769 ;;      Locals:         0       0       0
  1770 ;;      Temps:          0       0       0
  1771 ;;      Totals:         0       0       0
  1772 ;;Total ram usage:        0 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; Hardware stack levels required when called: 1
  1775 ;; This function calls:
  1776 ;;		_RSI_Timer0
  1777 ;; This function is called by:
  1778 ;;		Interrupt level 2
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	intcode
  1783   000008                     __pintcode:
  1784                           	callstack 0
  1785   000008                     _HighRSI:
  1786                           	callstack 26
  1787                           
  1788                           ;incstack = 0
  1789   000008  8235               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1790   00000A  EFE9  F002         	goto	int_func
  1791                           
  1792                           	psect	intcode_body
  1793   0005D2                     __pintcode_body:
  1794                           	callstack 26
  1795   0005D2                     int_func:
  1796                           	callstack 26
  1797   0005D2                     
  1798                           ;main.c: 29:   motorTeclado();
  1799   0005D2  A4F2               	btfss	242,2,c	;volatile
  1800   0005D4  EFEE  F002         	goto	i2u16_41
  1801   0005D8  EFF0  F002         	goto	i2u16_40
  1802   0005DC                     i2u16_41:
  1803   0005DC  EFF2  F002         	goto	i2l36
  1804   0005E0                     i2u16_40:
  1805   0005E0  ECC7  F002         	call	_RSI_Timer0	;wreg free
  1806   0005E4                     i2l36:
  1807   0005E4  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1808   0005E6  0011               	retfie		f
  1809   0005E8                     __end_of_HighRSI:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _RSI_Timer0 *****************
  1813 ;; Defined at:
  1814 ;;		line 25 in file "TAD_TIMER.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1
  1828 ;;      Params:         0       0       0
  1829 ;;      Locals:         0       0       0
  1830 ;;      Temps:          0       0       0
  1831 ;;      Totals:         0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_HighRSI
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text13
  1842   00058E                     __ptext13:
  1843                           	callstack 0
  1844   00058E                     _RSI_Timer0:
  1845                           	callstack 26
  1846   00058E                     
  1847                           ;TAD_TIMER.c: 27:     TMR0=64911;
  1848   00058E  0EFD               	movlw	253
  1849   000590  6ED7               	movwf	215,c	;volatile
  1850   000592  0E8F               	movlw	143
  1851   000594  6ED6               	movwf	214,c	;volatile
  1852   000596                     
  1853                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  1854   000596  94F2               	bcf	4082,2,c	;volatile
  1855   000598                     
  1856                           ;TAD_TIMER.c: 29:     Tics++;
  1857   000598  0E01               	movlw	1
  1858   00059A  2615               	addwf	_Tics^0,f,c	;volatile
  1859   00059C  0E00               	movlw	0
  1860   00059E  2216               	addwfc	(_Tics+1)^0,f,c	;volatile
  1861   0005A0  2217               	addwfc	(_Tics+2)^0,f,c	;volatile
  1862   0005A2  2218               	addwfc	(_Tics+3)^0,f,c	;volatile
  1863   0005A4  0012               	return		;funcret
  1864   0005A6                     __end_of_RSI_Timer0:
  1865                           	callstack 0
  1866                           
  1867                           	psect	rparam
  1868   000001                     ___rparam_used  equ	1
  1869   000000                     ___param_bank   equ	0
  1870   000000                     __Lparam        equ	__Lrparam
  1871   000000                     __Hparam        equ	__Hrparam
  1872                           
  1873                           	psect	temp
  1874   000035                     btemp:
  1875                           	callstack 0
  1876   000035                     	ds	1
  1877   000035                     int$flags       set	btemp
  1878   000036                     wtemp8          set	btemp+1
  1879   000036                     ttemp5          set	btemp+1
  1880   000039                     ttemp6          set	btemp+4
  1881   00003D                     ttemp7          set	btemp+8
  1882                           
  1883                           	psect	idloc
  1884                           
  1885                           ;Config register IDLOC0 @ 0x200000
  1886                           ;	unspecified, using default values
  1887   200000                     	org	2097152
  1888   200000  FF                 	db	255
  1889                           
  1890                           ;Config register IDLOC1 @ 0x200001
  1891                           ;	unspecified, using default values
  1892   200001                     	org	2097153
  1893   200001  FF                 	db	255
  1894                           
  1895                           ;Config register IDLOC2 @ 0x200002
  1896                           ;	unspecified, using default values
  1897   200002                     	org	2097154
  1898   200002  FF                 	db	255
  1899                           
  1900                           ;Config register IDLOC3 @ 0x200003
  1901                           ;	unspecified, using default values
  1902   200003                     	org	2097155
  1903   200003  FF                 	db	255
  1904                           
  1905                           ;Config register IDLOC4 @ 0x200004
  1906                           ;	unspecified, using default values
  1907   200004                     	org	2097156
  1908   200004  FF                 	db	255
  1909                           
  1910                           ;Config register IDLOC5 @ 0x200005
  1911                           ;	unspecified, using default values
  1912   200005                     	org	2097157
  1913   200005  FF                 	db	255
  1914                           
  1915                           ;Config register IDLOC6 @ 0x200006
  1916                           ;	unspecified, using default values
  1917   200006                     	org	2097158
  1918   200006  FF                 	db	255
  1919                           
  1920                           ;Config register IDLOC7 @ 0x200007
  1921                           ;	unspecified, using default values
  1922   200007                     	org	2097159
  1923   200007  FF                 	db	255
  1924                           
  1925                           	psect	config
  1926                           
  1927                           ; Padding undefined space
  1928   300000                     	org	3145728
  1929   300000  FF                 	db	255
  1930                           
  1931                           ;Config register CONFIG1H @ 0x300001
  1932                           ;	Oscillator
  1933                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1934                           ;	Fail-Safe Clock Monitor Enable bit
  1935                           ;	FCMEN = 0x0, unprogrammed default
  1936                           ;	Internal/External Oscillator Switchover bit
  1937                           ;	IESO = 0x0, unprogrammed default
  1938   300001                     	org	3145729
  1939   300001  06                 	db	6
  1940                           
  1941                           ;Config register CONFIG2L @ 0x300002
  1942                           ;	Power-up Timer Enable bit
  1943                           ;	PWRT = OFF, PWRT disabled
  1944                           ;	Brown-out Reset Enable bits
  1945                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1946                           ;	Brown-out Reset Voltage bits
  1947                           ;	BORV = 0x3, unprogrammed default
  1948   300002                     	org	3145730
  1949   300002  19                 	db	25
  1950                           
  1951                           ;Config register CONFIG2H @ 0x300003
  1952                           ;	Watchdog Timer Enable bit
  1953                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1954                           ;	Watchdog Timer Postscale Select bits
  1955                           ;	WDTPS = 0xF, unprogrammed default
  1956   300003                     	org	3145731
  1957   300003  1E                 	db	30
  1958                           
  1959                           ; Padding undefined space
  1960   300004                     	org	3145732
  1961   300004  FF                 	db	255
  1962                           
  1963                           ;Config register CONFIG3H @ 0x300005
  1964                           ;	CCP2 MUX bit
  1965                           ;	CCP2MX = 0x1, unprogrammed default
  1966                           ;	PORTB A/D Enable bit
  1967                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  1968                           ;	Low-Power Timer1 Oscillator Enable bit
  1969                           ;	LPT1OSC = 0x0, unprogrammed default
  1970                           ;	MCLR Pin Enable bit
  1971                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1972   300005                     	org	3145733
  1973   300005  01                 	db	1
  1974                           
  1975                           ;Config register CONFIG4L @ 0x300006
  1976                           ;	Stack Full/Underflow Reset Enable bit
  1977                           ;	STVREN = 0x1, unprogrammed default
  1978                           ;	Single-Supply ICSP Enable bit
  1979                           ;	LVP = OFF, Single-Supply ICSP disabled
  1980                           ;	Boot Block Size Select bits
  1981                           ;	BBSIZ = 0x0, unprogrammed default
  1982                           ;	Extended Instruction Set Enable bit
  1983                           ;	XINST = 0x0, unprogrammed default
  1984                           ;	Background Debugger Enable bit
  1985                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  1986   300006                     	org	3145734
  1987   300006  81                 	db	129
  1988                           
  1989                           ; Padding undefined space
  1990   300007                     	org	3145735
  1991   300007  FF                 	db	255
  1992                           
  1993                           ;Config register CONFIG5L @ 0x300008
  1994                           ;	unspecified, using default values
  1995                           ;	Code Protection bit
  1996                           ;	CP0 = 0x1, unprogrammed default
  1997                           ;	Code Protection bit
  1998                           ;	CP1 = 0x1, unprogrammed default
  1999   300008                     	org	3145736
  2000   300008  03                 	db	3
  2001                           
  2002                           ;Config register CONFIG5H @ 0x300009
  2003                           ;	unspecified, using default values
  2004                           ;	Boot Block Code Protection bitProtect Boot
  2005                           ;	CPB = 0x1, unprogrammed default
  2006                           ;	Data EEPROM Code Protection bit
  2007                           ;	CPD = 0x1, unprogrammed default
  2008   300009                     	org	3145737
  2009   300009  C0                 	db	192
  2010                           
  2011                           ;Config register CONFIG6L @ 0x30000A
  2012                           ;	unspecified, using default values
  2013                           ;	Write Protection bit
  2014                           ;	WRT0 = 0x1, unprogrammed default
  2015                           ;	Write Protection bit
  2016                           ;	WRT1 = 0x1, unprogrammed default
  2017   30000A                     	org	3145738
  2018   30000A  03                 	db	3
  2019                           
  2020                           ;Config register CONFIG6H @ 0x30000B
  2021                           ;	unspecified, using default values
  2022                           ;	Configuration Register Write Protection bit
  2023                           ;	WRTC = 0x1, unprogrammed default
  2024                           ;	Boot Block Write Protection bit
  2025                           ;	WRTB = 0x1, unprogrammed default
  2026                           ;	Data EEPROM Write Protection bit
  2027                           ;	WRTD = 0x1, unprogrammed default
  2028   30000B                     	org	3145739
  2029   30000B  E0                 	db	224
  2030                           
  2031                           ;Config register CONFIG7L @ 0x30000C
  2032                           ;	unspecified, using default values
  2033                           ;	Table Read Protection bit
  2034                           ;	EBTR0 = 0x1, unprogrammed default
  2035                           ;	Table Read Protection bit
  2036                           ;	EBTR1 = 0x1, unprogrammed default
  2037   30000C                     	org	3145740
  2038   30000C  03                 	db	3
  2039                           
  2040                           ;Config register CONFIG7H @ 0x30000D
  2041                           ;	unspecified, using default values
  2042                           ;	Boot Block Table Read Protection bit
  2043                           ;	EBTRB = 0x1, unprogrammed default
  2044   30000D                     	org	3145741
  2045   30000D  40                 	db	64
  2046                           tosu	equ	0xFFF
  2047                           tosh	equ	0xFFE
  2048                           tosl	equ	0xFFD
  2049                           stkptr	equ	0xFFC
  2050                           pclatu	equ	0xFFB
  2051                           pclath	equ	0xFFA
  2052                           pcl	equ	0xFF9
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           indf0	equ	0xFEF
  2060                           postinc0	equ	0xFEE
  2061                           postdec0	equ	0xFED
  2062                           preinc0	equ	0xFEC
  2063                           plusw0	equ	0xFEB
  2064                           fsr0h	equ	0xFEA
  2065                           fsr0l	equ	0xFE9
  2066                           wreg	equ	0xFE8
  2067                           indf1	equ	0xFE7
  2068                           postinc1	equ	0xFE6
  2069                           postdec1	equ	0xFE5
  2070                           preinc1	equ	0xFE4
  2071                           plusw1	equ	0xFE3
  2072                           fsr1h	equ	0xFE2
  2073                           fsr1l	equ	0xFE1
  2074                           bsr	equ	0xFE0
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           postdec2	equ	0xFDD
  2078                           preinc2	equ	0xFDC
  2079                           plusw2	equ	0xFDB
  2080                           fsr2h	equ	0xFDA
  2081                           fsr2l	equ	0xFD9
  2082                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     20      52
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motorTeclado
    _motorTeclado->_GetTecla
    _initTeclado->_TI_NewTimer

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     369
                          _InitPorts
                            _TI_Init
                        _initTeclado
                       _motorTeclado
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         1     1      0     212
                                             19 COMRAM     1     1      0
                           _GetTecla
                          _ReadFilas
                        _StopRequest
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _StopRequest                                          2     2      0      15
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            18    17      1     130
                                              1 COMRAM    18    17      1
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     112
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     112
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (5) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPorts
   _TI_Init
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _ReadFilas
     _StopRequest
     _TI_GetTics
     _TI_ResetTics

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     20      52     41.3%
BITBIGSFRlh        103      0       0      0.0%
BITBIGSFRh          13      0       0      0.0%
BITBIGSFRll          9      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      52      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Feb 24 22:55:18 2025

    __end_ofGetTecla@F2725 020D                 _RSI_Timer0 058E                         l52 05D0  
                       l81 04B2                         l75 0532                         l85 0556  
                       l88 04FE                         u40 0522                         u41 051E  
               _TI_GetTics 04B4                         bsr 0FE0                        l125 0600  
                      l128 05BA                        l153 0396                        l163 045C  
                      l165 03EA                        l157 03A0                        l174 05FA  
                      l930 05C4                        l932 05C6                        l940 0500  
                      l934 05CA                        l926 05BC                        l950 0512  
                      l918 05EA                        l936 05CC                        l928 05C0  
                      l952 0522                        l864 0536                        l938 05CE  
                      l954 052E                        l946 0502                        l866 0538  
                      l956 0530                        l948 0510                        l876 05FC  
                      l868 0554                        u200 0228                        u201 0224  
                      u210 0248                        u211 0244                        u300 0340  
                      u220 0266                        u301 033C                        u221 0262  
                      u230 0286                        u231 0282                        u240 02A0  
                      u241 029C                        u170 0478                        u250 02C0  
                      u171 0474                        u251 02BC                        u180 0498  
                      u260 02DA                        u181 0494                        u261 02D6  
                      u190 0442                        u270 02F4                        u271 02F0  
                      u280 030A                        u281 0306                        u290 031E  
                      u291 031A                        wreg 0FE8                       l1110 044C  
                     l1120 05AA                       l1200 0560                       l1122 05AE  
                     l1106 0400                       l1130 0218                       l1202 0564  
                     l1060 045E                       l1124 05B0                       l1212 0416  
                     l1108 0434                       l1140 024E                       l1132 0228  
                     l1204 0566                       l1070 04A8                       l1062 0464  
                     l1126 05B2                       l1118 05A6                       l1150 0286  
                     l1142 0256                       l1134 022C                       l1206 0568  
                     l1080 039A                       l1160 02B0                       l1144 0266  
                     l1136 0238                       l1128 020E                       l1066 047C  
                     l1082 03A6                       l1074 04B6                       l1162 02C0  
                     l1154 0290                       l1146 026A                       l1138 0248  
                     l1068 0498                       l1084 03AE                       l1076 04CA  
                     l1180 030E                       l1172 02E4                       l1156 02A0  
                     l1148 0276                       l1086 03B6                       l1094 03C4  
                     l1182 031E                       l1174 02F4                       l1166 02CA  
                     l1158 02A4                       l1096 03F0                       l1088 03BE  
                     l1184 0340                       l1176 02FA                       l1168 02DA  
                     l1192 0356                       l1098 03F8                       l1186 034C  
                     l1194 0384                       l1196 0558                       l1198 055C  
              _TI_NewTimer 045E                       _LATB 0F8A                       _LATC 0F8B  
                     _LATD 0F8C                       i1l41 001E                       i2l36 05E4  
                     i2l70 05A4                       _TMR0 0FD6                       _Tics 0015  
                     _main 0558                       fsr2h 0FDA                       indf2 0FDF  
                     fsr2l 0FD9                       btemp 0035            __end_of_TI_Init 0534  
                     prodl 0FF3                       start 0026            __end_of_HighRSI 05E8  
             ___param_bank 0000               ?_initTeclado 0021                      ?_main 0021  
                    _T0CON 0FD5                      i2l920 058E                      i2l922 0596  
                    i2l924 0598                      _PORTA 0F80                      _TRISA 0F92  
                    _TRISB 0F93                      _TRISD 0F95                      _Filas 001F  
             _TI_ResetTics 0534                      _tecla 001B                      _timer 0020  
                    _state 001D                      tablat 0FF5                      ttemp5 0036  
                    ttemp6 0039                      ttemp7 003D                      status 0FD8  
                    wtemp8 0036           __end_of_GetTecla 045E            __initialization 0574  
             __end_of_main 0574                ?_RSI_Timer0 0021             TI_Init@counter 0022  
              ?_TI_GetTics 0022                     ??_main 0035              __activetblptr 0002  
                   _ADCON1 0FC1                  ??_TI_Init 0022                     i2l1036 05D2  
                   i2l1038 05E0                     _TMR0IF 7F92                  ??_HighRSI 0021  
                   _LowRSI 0018                     _Timers 0001                     clear_0 057A  
                   isa$std 0001               __mediumconst 0200                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8                 __accesstop 0080  
  __end_of__initialization 0580              ___rparam_used 0001             __pcstackCOMRAM 0021  
     TI_NewTimer@Comptador 0024          __end_of_ReadFilas 0602          __end_of_InitPorts 05D2  
                ?_GetTecla 0022              ??_StopRequest 0022               ?_TI_NewTimer 0022  
   TI_NewTimer@TimerHandle 0022                    ?_LowRSI 0021    TI_ResetTics@TimerHandle 0022  
                  i2u16_40 05E0                    i2u16_41 05DC                 ??_GetTecla 0023  
                  _TI_Init 0500                    _HighRSI 0008        __end_of_StopRequest 05FC  
                  __Hparam 0000                    __Lparam 0000               ??_RSI_Timer0 0021  
             __psmallconst 0200               ??_TI_GetTics 0026                    __pcinit 0574  
                  __ramtop 0200                    __ptext0 0558                    __ptext1 020E  
                  __ptext2 0534                    __ptext3 04B4                    __ptext4 05E8  
                  __ptext5 05FC                    __ptext6 0398                    __ptext7 05A6  
                  __ptext8 045E                    __ptext9 0500              ?_motorTeclado 0021  
           __pintcode_body 05D2       end_of_initialization 0580         __end_of_RSI_Timer0 05A6  
            __Lmediumconst 0000                    int_func 05D2         __end_of_TI_GetTics 0500  
               _tick_count 0019                    postinc0 0FEE                    postinc2 0FDE  
            GetTecla@F2725 0201             ??_motorTeclado 0034              GetTecla@filas 0031  
    TI_GetTics@TimerHandle 002E                  _HiHaTecla 001C                _StopRequest 05E8  
           __end_of_LowRSI 0026        start_initialization 0574                  _ReadFilas 05FC  
                _InitPorts 05BC                   ??_LowRSI 0021              ??_initTeclado 0025  
              __pbssCOMRAM 0001                 ?_ReadFilas 0021                 ?_InitPorts 0021  
            ?_TI_ResetTics 0021                   ?_TI_Init 0021                   ?_HighRSI 0021  
     __end_of_motorTeclado 0398                  __pintcode 0008                __pintcodelo 0018  
           StopRequest@key 0023                __smallconst 0200        __end_of_initTeclado 05BC  
           ??_TI_ResetTics 0022               GetTecla@fila 0033                ??_ReadFilas 0022  
              ??_InitPorts 0022                   _GetTecla 0398                _INTCON2bits 0FF1  
             ?_StopRequest 0021                   _Columnas 001E                   __Hrparam 0000  
                 __Lrparam 0000                _initTeclado 05A6                   __ptext10 05BC  
                 __ptext13 058E              ??_TI_NewTimer 0023                   isa$xinst 0000  
     __end_of_TI_ResetTics 0558                   int$flags 0035               _motorTeclado 020E  
               _INTCONbits 0FF2  TI_GetTics@CopiaTicsActual 002A                   intlevel1 0000  
                 intlevel2 0000        __end_of_TI_NewTimer 04B4           GetTecla@columnas 0022  
          GetTecla@columna 0032             GetTecla@keymap 0025  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 13 13:17:29 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Generated 05/12/2024 GMT
    70                           ; 
    71                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4321 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000FE0                     bsr             equ	4064
   104   000FE9                     fsr0            equ	4073
   105   000FEA                     fsr0h           equ	4074
   106   000FE9                     fsr0l           equ	4073
   107   000FE1                     fsr1            equ	4065
   108   000FE2                     fsr1h           equ	4066
   109   000FE1                     fsr1l           equ	4065
   110   000FD9                     fsr2            equ	4057
   111   000FDA                     fsr2h           equ	4058
   112   000FD9                     fsr2l           equ	4057
   113   000FEF                     indf0           equ	4079
   114   000FE7                     indf1           equ	4071
   115   000FDF                     indf2           equ	4063
   116   000FF2                     intcon          equ	4082
   117   000000                     nvmcon          equ	0
   118   000FF9                     pcl             equ	4089
   119   000FFA                     pclath          equ	4090
   120   000FFB                     pclatu          equ	4091
   121   000FEB                     plusw0          equ	4075
   122   000FE3                     plusw1          equ	4067
   123   000FDB                     plusw2          equ	4059
   124   000FED                     postdec0        equ	4077
   125   000FE5                     postdec1        equ	4069
   126   000FDD                     postdec2        equ	4061
   127   000FEE                     postinc0        equ	4078
   128   000FE6                     postinc1        equ	4070
   129   000FDE                     postinc2        equ	4062
   130   000FEC                     preinc0         equ	4076
   131   000FE4                     preinc1         equ	4068
   132   000FDC                     preinc2         equ	4060
   133   000FF3                     prod            equ	4083
   134   000FF4                     prodh           equ	4084
   135   000FF3                     prodl           equ	4083
   136   000FD8                     status          equ	4056
   137   000FF5                     tablat          equ	4085
   138   000FF6                     tblptr          equ	4086
   139   000FF7                     tblptrh         equ	4087
   140   000FF6                     tblptrl         equ	4086
   141   000FF8                     tblptru         equ	4088
   142   000FFD                     tosl            equ	4093
   143   000FE8                     wreg            equ	4072
   144   000F80                     PORTA           equ	3968	;# 
   145   000F81                     PORTB           equ	3969	;# 
   146   000F82                     PORTC           equ	3970	;# 
   147   000F83                     PORTD           equ	3971	;# 
   148   000F84                     PORTE           equ	3972	;# 
   149   000F89                     LATA            equ	3977	;# 
   150   000F8A                     LATB            equ	3978	;# 
   151   000F8B                     LATC            equ	3979	;# 
   152   000F8C                     LATD            equ	3980	;# 
   153   000F8D                     LATE            equ	3981	;# 
   154   000F92                     TRISA           equ	3986	;# 
   155   000F92                     DDRA            equ	3986	;# 
   156   000F93                     TRISB           equ	3987	;# 
   157   000F93                     DDRB            equ	3987	;# 
   158   000F94                     TRISC           equ	3988	;# 
   159   000F94                     DDRC            equ	3988	;# 
   160   000F95                     TRISD           equ	3989	;# 
   161   000F95                     DDRD            equ	3989	;# 
   162   000F96                     TRISE           equ	3990	;# 
   163   000F96                     DDRE            equ	3990	;# 
   164   000F9B                     OSCTUNE         equ	3995	;# 
   165   000F9D                     PIE1            equ	3997	;# 
   166   000F9E                     PIR1            equ	3998	;# 
   167   000F9F                     IPR1            equ	3999	;# 
   168   000FA0                     PIE2            equ	4000	;# 
   169   000FA1                     PIR2            equ	4001	;# 
   170   000FA2                     IPR2            equ	4002	;# 
   171   000FA6                     EECON1          equ	4006	;# 
   172   000FA7                     EECON2          equ	4007	;# 
   173   000FA8                     EEDATA          equ	4008	;# 
   174   000FA9                     EEADR           equ	4009	;# 
   175   000FAB                     RCSTA           equ	4011	;# 
   176   000FAB                     RCSTA1          equ	4011	;# 
   177   000FAC                     TXSTA           equ	4012	;# 
   178   000FAC                     TXSTA1          equ	4012	;# 
   179   000FAD                     TXREG           equ	4013	;# 
   180   000FAD                     TXREG1          equ	4013	;# 
   181   000FAE                     RCREG           equ	4014	;# 
   182   000FAE                     RCREG1          equ	4014	;# 
   183   000FAF                     SPBRG           equ	4015	;# 
   184   000FAF                     SPBRG1          equ	4015	;# 
   185   000FB0                     SPBRGH          equ	4016	;# 
   186   000FB1                     T3CON           equ	4017	;# 
   187   000FB2                     TMR3            equ	4018	;# 
   188   000FB2                     TMR3L           equ	4018	;# 
   189   000FB3                     TMR3H           equ	4019	;# 
   190   000FB4                     CMCON           equ	4020	;# 
   191   000FB5                     CVRCON          equ	4021	;# 
   192   000FB6                     ECCP1AS         equ	4022	;# 
   193   000FB7                     ECCP1DEL        equ	4023	;# 
   194   000FB7                     PWM1CON         equ	4023	;# 
   195   000FB8                     BAUDCON         equ	4024	;# 
   196   000FB8                     BAUDCTL         equ	4024	;# 
   197   000FBA                     CCP2CON         equ	4026	;# 
   198   000FBB                     CCPR2           equ	4027	;# 
   199   000FBB                     CCPR2L          equ	4027	;# 
   200   000FBC                     CCPR2H          equ	4028	;# 
   201   000FBD                     CCP1CON         equ	4029	;# 
   202   000FBD                     ECCP1CON        equ	4029	;# 
   203   000FBE                     CCPR1           equ	4030	;# 
   204   000FBE                     CCPR1L          equ	4030	;# 
   205   000FBF                     CCPR1H          equ	4031	;# 
   206   000FC0                     ADCON2          equ	4032	;# 
   207   000FC1                     ADCON1          equ	4033	;# 
   208   000FC2                     ADCON0          equ	4034	;# 
   209   000FC3                     ADRES           equ	4035	;# 
   210   000FC3                     ADRESL          equ	4035	;# 
   211   000FC4                     ADRESH          equ	4036	;# 
   212   000FC5                     SSPCON2         equ	4037	;# 
   213   000FC6                     SSPCON1         equ	4038	;# 
   214   000FC7                     SSPSTAT         equ	4039	;# 
   215   000FC8                     SSPADD          equ	4040	;# 
   216   000FC9                     SSPBUF          equ	4041	;# 
   217   000FCA                     T2CON           equ	4042	;# 
   218   000FCB                     PR2             equ	4043	;# 
   219   000FCB                     MEMCON          equ	4043	;# 
   220   000FCC                     TMR2            equ	4044	;# 
   221   000FCD                     T1CON           equ	4045	;# 
   222   000FCE                     TMR1            equ	4046	;# 
   223   000FCE                     TMR1L           equ	4046	;# 
   224   000FCF                     TMR1H           equ	4047	;# 
   225   000FD0                     RCON            equ	4048	;# 
   226   000FD1                     WDTCON          equ	4049	;# 
   227   000FD2                     HLVDCON         equ	4050	;# 
   228   000FD2                     LVDCON          equ	4050	;# 
   229   000FD3                     OSCCON          equ	4051	;# 
   230   000FD5                     T0CON           equ	4053	;# 
   231   000FD6                     TMR0            equ	4054	;# 
   232   000FD6                     TMR0L           equ	4054	;# 
   233   000FD7                     TMR0H           equ	4055	;# 
   234   000FD8                     STATUS          equ	4056	;# 
   235   000FD9                     FSR2            equ	4057	;# 
   236   000FD9                     FSR2L           equ	4057	;# 
   237   000FDA                     FSR2H           equ	4058	;# 
   238   000FDB                     PLUSW2          equ	4059	;# 
   239   000FDC                     PREINC2         equ	4060	;# 
   240   000FDD                     POSTDEC2        equ	4061	;# 
   241   000FDE                     POSTINC2        equ	4062	;# 
   242   000FDF                     INDF2           equ	4063	;# 
   243   000FE0                     BSR             equ	4064	;# 
   244   000FE1                     FSR1            equ	4065	;# 
   245   000FE1                     FSR1L           equ	4065	;# 
   246   000FE2                     FSR1H           equ	4066	;# 
   247   000FE3                     PLUSW1          equ	4067	;# 
   248   000FE4                     PREINC1         equ	4068	;# 
   249   000FE5                     POSTDEC1        equ	4069	;# 
   250   000FE6                     POSTINC1        equ	4070	;# 
   251   000FE7                     INDF1           equ	4071	;# 
   252   000FE8                     WREG            equ	4072	;# 
   253   000FE9                     FSR0            equ	4073	;# 
   254   000FE9                     FSR0L           equ	4073	;# 
   255   000FEA                     FSR0H           equ	4074	;# 
   256   000FEB                     PLUSW0          equ	4075	;# 
   257   000FEC                     PREINC0         equ	4076	;# 
   258   000FED                     POSTDEC0        equ	4077	;# 
   259   000FEE                     POSTINC0        equ	4078	;# 
   260   000FEF                     INDF0           equ	4079	;# 
   261   000FF0                     INTCON3         equ	4080	;# 
   262   000FF1                     INTCON2         equ	4081	;# 
   263   000FF2                     INTCON          equ	4082	;# 
   264   000FF3                     PROD            equ	4083	;# 
   265   000FF3                     PRODL           equ	4083	;# 
   266   000FF4                     PRODH           equ	4084	;# 
   267   000FF5                     TABLAT          equ	4085	;# 
   268   000FF6                     TBLPTR          equ	4086	;# 
   269   000FF6                     TBLPTRL         equ	4086	;# 
   270   000FF7                     TBLPTRH         equ	4087	;# 
   271   000FF8                     TBLPTRU         equ	4088	;# 
   272   000FF9                     PCLAT           equ	4089	;# 
   273   000FF9                     PC              equ	4089	;# 
   274   000FF9                     PCL             equ	4089	;# 
   275   000FFA                     PCLATH          equ	4090	;# 
   276   000FFB                     PCLATU          equ	4091	;# 
   277   000FFC                     STKPTR          equ	4092	;# 
   278   000FFD                     TOS             equ	4093	;# 
   279   000FFD                     TOSL            equ	4093	;# 
   280   000FFE                     TOSH            equ	4094	;# 
   281   000FFF                     TOSU            equ	4095	;# 
   282   000F80                     PORTA           equ	3968	;# 
   283   000F81                     PORTB           equ	3969	;# 
   284   000F82                     PORTC           equ	3970	;# 
   285   000F83                     PORTD           equ	3971	;# 
   286   000F84                     PORTE           equ	3972	;# 
   287   000F89                     LATA            equ	3977	;# 
   288   000F8A                     LATB            equ	3978	;# 
   289   000F8B                     LATC            equ	3979	;# 
   290   000F8C                     LATD            equ	3980	;# 
   291   000F8D                     LATE            equ	3981	;# 
   292   000F92                     TRISA           equ	3986	;# 
   293   000F92                     DDRA            equ	3986	;# 
   294   000F93                     TRISB           equ	3987	;# 
   295   000F93                     DDRB            equ	3987	;# 
   296   000F94                     TRISC           equ	3988	;# 
   297   000F94                     DDRC            equ	3988	;# 
   298   000F95                     TRISD           equ	3989	;# 
   299   000F95                     DDRD            equ	3989	;# 
   300   000F96                     TRISE           equ	3990	;# 
   301   000F96                     DDRE            equ	3990	;# 
   302   000F9B                     OSCTUNE         equ	3995	;# 
   303   000F9D                     PIE1            equ	3997	;# 
   304   000F9E                     PIR1            equ	3998	;# 
   305   000F9F                     IPR1            equ	3999	;# 
   306   000FA0                     PIE2            equ	4000	;# 
   307   000FA1                     PIR2            equ	4001	;# 
   308   000FA2                     IPR2            equ	4002	;# 
   309   000FA6                     EECON1          equ	4006	;# 
   310   000FA7                     EECON2          equ	4007	;# 
   311   000FA8                     EEDATA          equ	4008	;# 
   312   000FA9                     EEADR           equ	4009	;# 
   313   000FAB                     RCSTA           equ	4011	;# 
   314   000FAB                     RCSTA1          equ	4011	;# 
   315   000FAC                     TXSTA           equ	4012	;# 
   316   000FAC                     TXSTA1          equ	4012	;# 
   317   000FAD                     TXREG           equ	4013	;# 
   318   000FAD                     TXREG1          equ	4013	;# 
   319   000FAE                     RCREG           equ	4014	;# 
   320   000FAE                     RCREG1          equ	4014	;# 
   321   000FAF                     SPBRG           equ	4015	;# 
   322   000FAF                     SPBRG1          equ	4015	;# 
   323   000FB0                     SPBRGH          equ	4016	;# 
   324   000FB1                     T3CON           equ	4017	;# 
   325   000FB2                     TMR3            equ	4018	;# 
   326   000FB2                     TMR3L           equ	4018	;# 
   327   000FB3                     TMR3H           equ	4019	;# 
   328   000FB4                     CMCON           equ	4020	;# 
   329   000FB5                     CVRCON          equ	4021	;# 
   330   000FB6                     ECCP1AS         equ	4022	;# 
   331   000FB7                     ECCP1DEL        equ	4023	;# 
   332   000FB7                     PWM1CON         equ	4023	;# 
   333   000FB8                     BAUDCON         equ	4024	;# 
   334   000FB8                     BAUDCTL         equ	4024	;# 
   335   000FBA                     CCP2CON         equ	4026	;# 
   336   000FBB                     CCPR2           equ	4027	;# 
   337   000FBB                     CCPR2L          equ	4027	;# 
   338   000FBC                     CCPR2H          equ	4028	;# 
   339   000FBD                     CCP1CON         equ	4029	;# 
   340   000FBD                     ECCP1CON        equ	4029	;# 
   341   000FBE                     CCPR1           equ	4030	;# 
   342   000FBE                     CCPR1L          equ	4030	;# 
   343   000FBF                     CCPR1H          equ	4031	;# 
   344   000FC0                     ADCON2          equ	4032	;# 
   345   000FC1                     ADCON1          equ	4033	;# 
   346   000FC2                     ADCON0          equ	4034	;# 
   347   000FC3                     ADRES           equ	4035	;# 
   348   000FC3                     ADRESL          equ	4035	;# 
   349   000FC4                     ADRESH          equ	4036	;# 
   350   000FC5                     SSPCON2         equ	4037	;# 
   351   000FC6                     SSPCON1         equ	4038	;# 
   352   000FC7                     SSPSTAT         equ	4039	;# 
   353   000FC8                     SSPADD          equ	4040	;# 
   354   000FC9                     SSPBUF          equ	4041	;# 
   355   000FCA                     T2CON           equ	4042	;# 
   356   000FCB                     PR2             equ	4043	;# 
   357   000FCB                     MEMCON          equ	4043	;# 
   358   000FCC                     TMR2            equ	4044	;# 
   359   000FCD                     T1CON           equ	4045	;# 
   360   000FCE                     TMR1            equ	4046	;# 
   361   000FCE                     TMR1L           equ	4046	;# 
   362   000FCF                     TMR1H           equ	4047	;# 
   363   000FD0                     RCON            equ	4048	;# 
   364   000FD1                     WDTCON          equ	4049	;# 
   365   000FD2                     HLVDCON         equ	4050	;# 
   366   000FD2                     LVDCON          equ	4050	;# 
   367   000FD3                     OSCCON          equ	4051	;# 
   368   000FD5                     T0CON           equ	4053	;# 
   369   000FD6                     TMR0            equ	4054	;# 
   370   000FD6                     TMR0L           equ	4054	;# 
   371   000FD7                     TMR0H           equ	4055	;# 
   372   000FD8                     STATUS          equ	4056	;# 
   373   000FD9                     FSR2            equ	4057	;# 
   374   000FD9                     FSR2L           equ	4057	;# 
   375   000FDA                     FSR2H           equ	4058	;# 
   376   000FDB                     PLUSW2          equ	4059	;# 
   377   000FDC                     PREINC2         equ	4060	;# 
   378   000FDD                     POSTDEC2        equ	4061	;# 
   379   000FDE                     POSTINC2        equ	4062	;# 
   380   000FDF                     INDF2           equ	4063	;# 
   381   000FE0                     BSR             equ	4064	;# 
   382   000FE1                     FSR1            equ	4065	;# 
   383   000FE1                     FSR1L           equ	4065	;# 
   384   000FE2                     FSR1H           equ	4066	;# 
   385   000FE3                     PLUSW1          equ	4067	;# 
   386   000FE4                     PREINC1         equ	4068	;# 
   387   000FE5                     POSTDEC1        equ	4069	;# 
   388   000FE6                     POSTINC1        equ	4070	;# 
   389   000FE7                     INDF1           equ	4071	;# 
   390   000FE8                     WREG            equ	4072	;# 
   391   000FE9                     FSR0            equ	4073	;# 
   392   000FE9                     FSR0L           equ	4073	;# 
   393   000FEA                     FSR0H           equ	4074	;# 
   394   000FEB                     PLUSW0          equ	4075	;# 
   395   000FEC                     PREINC0         equ	4076	;# 
   396   000FED                     POSTDEC0        equ	4077	;# 
   397   000FEE                     POSTINC0        equ	4078	;# 
   398   000FEF                     INDF0           equ	4079	;# 
   399   000FF0                     INTCON3         equ	4080	;# 
   400   000FF1                     INTCON2         equ	4081	;# 
   401   000FF2                     INTCON          equ	4082	;# 
   402   000FF3                     PROD            equ	4083	;# 
   403   000FF3                     PRODL           equ	4083	;# 
   404   000FF4                     PRODH           equ	4084	;# 
   405   000FF5                     TABLAT          equ	4085	;# 
   406   000FF6                     TBLPTR          equ	4086	;# 
   407   000FF6                     TBLPTRL         equ	4086	;# 
   408   000FF7                     TBLPTRH         equ	4087	;# 
   409   000FF8                     TBLPTRU         equ	4088	;# 
   410   000FF9                     PCLAT           equ	4089	;# 
   411   000FF9                     PC              equ	4089	;# 
   412   000FF9                     PCL             equ	4089	;# 
   413   000FFA                     PCLATH          equ	4090	;# 
   414   000FFB                     PCLATU          equ	4091	;# 
   415   000FFC                     STKPTR          equ	4092	;# 
   416   000FFD                     TOS             equ	4093	;# 
   417   000FFD                     TOSL            equ	4093	;# 
   418   000FFE                     TOSH            equ	4094	;# 
   419   000FFF                     TOSU            equ	4095	;# 
   420   000F80                     PORTA           equ	3968	;# 
   421   000F81                     PORTB           equ	3969	;# 
   422   000F82                     PORTC           equ	3970	;# 
   423   000F83                     PORTD           equ	3971	;# 
   424   000F84                     PORTE           equ	3972	;# 
   425   000F89                     LATA            equ	3977	;# 
   426   000F8A                     LATB            equ	3978	;# 
   427   000F8B                     LATC            equ	3979	;# 
   428   000F8C                     LATD            equ	3980	;# 
   429   000F8D                     LATE            equ	3981	;# 
   430   000F92                     TRISA           equ	3986	;# 
   431   000F92                     DDRA            equ	3986	;# 
   432   000F93                     TRISB           equ	3987	;# 
   433   000F93                     DDRB            equ	3987	;# 
   434   000F94                     TRISC           equ	3988	;# 
   435   000F94                     DDRC            equ	3988	;# 
   436   000F95                     TRISD           equ	3989	;# 
   437   000F95                     DDRD            equ	3989	;# 
   438   000F96                     TRISE           equ	3990	;# 
   439   000F96                     DDRE            equ	3990	;# 
   440   000F9B                     OSCTUNE         equ	3995	;# 
   441   000F9D                     PIE1            equ	3997	;# 
   442   000F9E                     PIR1            equ	3998	;# 
   443   000F9F                     IPR1            equ	3999	;# 
   444   000FA0                     PIE2            equ	4000	;# 
   445   000FA1                     PIR2            equ	4001	;# 
   446   000FA2                     IPR2            equ	4002	;# 
   447   000FA6                     EECON1          equ	4006	;# 
   448   000FA7                     EECON2          equ	4007	;# 
   449   000FA8                     EEDATA          equ	4008	;# 
   450   000FA9                     EEADR           equ	4009	;# 
   451   000FAB                     RCSTA           equ	4011	;# 
   452   000FAB                     RCSTA1          equ	4011	;# 
   453   000FAC                     TXSTA           equ	4012	;# 
   454   000FAC                     TXSTA1          equ	4012	;# 
   455   000FAD                     TXREG           equ	4013	;# 
   456   000FAD                     TXREG1          equ	4013	;# 
   457   000FAE                     RCREG           equ	4014	;# 
   458   000FAE                     RCREG1          equ	4014	;# 
   459   000FAF                     SPBRG           equ	4015	;# 
   460   000FAF                     SPBRG1          equ	4015	;# 
   461   000FB0                     SPBRGH          equ	4016	;# 
   462   000FB1                     T3CON           equ	4017	;# 
   463   000FB2                     TMR3            equ	4018	;# 
   464   000FB2                     TMR3L           equ	4018	;# 
   465   000FB3                     TMR3H           equ	4019	;# 
   466   000FB4                     CMCON           equ	4020	;# 
   467   000FB5                     CVRCON          equ	4021	;# 
   468   000FB6                     ECCP1AS         equ	4022	;# 
   469   000FB7                     ECCP1DEL        equ	4023	;# 
   470   000FB7                     PWM1CON         equ	4023	;# 
   471   000FB8                     BAUDCON         equ	4024	;# 
   472   000FB8                     BAUDCTL         equ	4024	;# 
   473   000FBA                     CCP2CON         equ	4026	;# 
   474   000FBB                     CCPR2           equ	4027	;# 
   475   000FBB                     CCPR2L          equ	4027	;# 
   476   000FBC                     CCPR2H          equ	4028	;# 
   477   000FBD                     CCP1CON         equ	4029	;# 
   478   000FBD                     ECCP1CON        equ	4029	;# 
   479   000FBE                     CCPR1           equ	4030	;# 
   480   000FBE                     CCPR1L          equ	4030	;# 
   481   000FBF                     CCPR1H          equ	4031	;# 
   482   000FC0                     ADCON2          equ	4032	;# 
   483   000FC1                     ADCON1          equ	4033	;# 
   484   000FC2                     ADCON0          equ	4034	;# 
   485   000FC3                     ADRES           equ	4035	;# 
   486   000FC3                     ADRESL          equ	4035	;# 
   487   000FC4                     ADRESH          equ	4036	;# 
   488   000FC5                     SSPCON2         equ	4037	;# 
   489   000FC6                     SSPCON1         equ	4038	;# 
   490   000FC7                     SSPSTAT         equ	4039	;# 
   491   000FC8                     SSPADD          equ	4040	;# 
   492   000FC9                     SSPBUF          equ	4041	;# 
   493   000FCA                     T2CON           equ	4042	;# 
   494   000FCB                     PR2             equ	4043	;# 
   495   000FCB                     MEMCON          equ	4043	;# 
   496   000FCC                     TMR2            equ	4044	;# 
   497   000FCD                     T1CON           equ	4045	;# 
   498   000FCE                     TMR1            equ	4046	;# 
   499   000FCE                     TMR1L           equ	4046	;# 
   500   000FCF                     TMR1H           equ	4047	;# 
   501   000FD0                     RCON            equ	4048	;# 
   502   000FD1                     WDTCON          equ	4049	;# 
   503   000FD2                     HLVDCON         equ	4050	;# 
   504   000FD2                     LVDCON          equ	4050	;# 
   505   000FD3                     OSCCON          equ	4051	;# 
   506   000FD5                     T0CON           equ	4053	;# 
   507   000FD6                     TMR0            equ	4054	;# 
   508   000FD6                     TMR0L           equ	4054	;# 
   509   000FD7                     TMR0H           equ	4055	;# 
   510   000FD8                     STATUS          equ	4056	;# 
   511   000FD9                     FSR2            equ	4057	;# 
   512   000FD9                     FSR2L           equ	4057	;# 
   513   000FDA                     FSR2H           equ	4058	;# 
   514   000FDB                     PLUSW2          equ	4059	;# 
   515   000FDC                     PREINC2         equ	4060	;# 
   516   000FDD                     POSTDEC2        equ	4061	;# 
   517   000FDE                     POSTINC2        equ	4062	;# 
   518   000FDF                     INDF2           equ	4063	;# 
   519   000FE0                     BSR             equ	4064	;# 
   520   000FE1                     FSR1            equ	4065	;# 
   521   000FE1                     FSR1L           equ	4065	;# 
   522   000FE2                     FSR1H           equ	4066	;# 
   523   000FE3                     PLUSW1          equ	4067	;# 
   524   000FE4                     PREINC1         equ	4068	;# 
   525   000FE5                     POSTDEC1        equ	4069	;# 
   526   000FE6                     POSTINC1        equ	4070	;# 
   527   000FE7                     INDF1           equ	4071	;# 
   528   000FE8                     WREG            equ	4072	;# 
   529   000FE9                     FSR0            equ	4073	;# 
   530   000FE9                     FSR0L           equ	4073	;# 
   531   000FEA                     FSR0H           equ	4074	;# 
   532   000FEB                     PLUSW0          equ	4075	;# 
   533   000FEC                     PREINC0         equ	4076	;# 
   534   000FED                     POSTDEC0        equ	4077	;# 
   535   000FEE                     POSTINC0        equ	4078	;# 
   536   000FEF                     INDF0           equ	4079	;# 
   537   000FF0                     INTCON3         equ	4080	;# 
   538   000FF1                     INTCON2         equ	4081	;# 
   539   000FF2                     INTCON          equ	4082	;# 
   540   000FF3                     PROD            equ	4083	;# 
   541   000FF3                     PRODL           equ	4083	;# 
   542   000FF4                     PRODH           equ	4084	;# 
   543   000FF5                     TABLAT          equ	4085	;# 
   544   000FF6                     TBLPTR          equ	4086	;# 
   545   000FF6                     TBLPTRL         equ	4086	;# 
   546   000FF7                     TBLPTRH         equ	4087	;# 
   547   000FF8                     TBLPTRU         equ	4088	;# 
   548   000FF9                     PCLAT           equ	4089	;# 
   549   000FF9                     PC              equ	4089	;# 
   550   000FF9                     PCL             equ	4089	;# 
   551   000FFA                     PCLATH          equ	4090	;# 
   552   000FFB                     PCLATU          equ	4091	;# 
   553   000FFC                     STKPTR          equ	4092	;# 
   554   000FFD                     TOS             equ	4093	;# 
   555   000FFD                     TOSL            equ	4093	;# 
   556   000FFE                     TOSH            equ	4094	;# 
   557   000FFF                     TOSU            equ	4095	;# 
   558   000F80                     PORTA           equ	3968	;# 
   559   000F81                     PORTB           equ	3969	;# 
   560   000F82                     PORTC           equ	3970	;# 
   561   000F83                     PORTD           equ	3971	;# 
   562   000F84                     PORTE           equ	3972	;# 
   563   000F89                     LATA            equ	3977	;# 
   564   000F8A                     LATB            equ	3978	;# 
   565   000F8B                     LATC            equ	3979	;# 
   566   000F8C                     LATD            equ	3980	;# 
   567   000F8D                     LATE            equ	3981	;# 
   568   000F92                     TRISA           equ	3986	;# 
   569   000F92                     DDRA            equ	3986	;# 
   570   000F93                     TRISB           equ	3987	;# 
   571   000F93                     DDRB            equ	3987	;# 
   572   000F94                     TRISC           equ	3988	;# 
   573   000F94                     DDRC            equ	3988	;# 
   574   000F95                     TRISD           equ	3989	;# 
   575   000F95                     DDRD            equ	3989	;# 
   576   000F96                     TRISE           equ	3990	;# 
   577   000F96                     DDRE            equ	3990	;# 
   578   000F9B                     OSCTUNE         equ	3995	;# 
   579   000F9D                     PIE1            equ	3997	;# 
   580   000F9E                     PIR1            equ	3998	;# 
   581   000F9F                     IPR1            equ	3999	;# 
   582   000FA0                     PIE2            equ	4000	;# 
   583   000FA1                     PIR2            equ	4001	;# 
   584   000FA2                     IPR2            equ	4002	;# 
   585   000FA6                     EECON1          equ	4006	;# 
   586   000FA7                     EECON2          equ	4007	;# 
   587   000FA8                     EEDATA          equ	4008	;# 
   588   000FA9                     EEADR           equ	4009	;# 
   589   000FAB                     RCSTA           equ	4011	;# 
   590   000FAB                     RCSTA1          equ	4011	;# 
   591   000FAC                     TXSTA           equ	4012	;# 
   592   000FAC                     TXSTA1          equ	4012	;# 
   593   000FAD                     TXREG           equ	4013	;# 
   594   000FAD                     TXREG1          equ	4013	;# 
   595   000FAE                     RCREG           equ	4014	;# 
   596   000FAE                     RCREG1          equ	4014	;# 
   597   000FAF                     SPBRG           equ	4015	;# 
   598   000FAF                     SPBRG1          equ	4015	;# 
   599   000FB0                     SPBRGH          equ	4016	;# 
   600   000FB1                     T3CON           equ	4017	;# 
   601   000FB2                     TMR3            equ	4018	;# 
   602   000FB2                     TMR3L           equ	4018	;# 
   603   000FB3                     TMR3H           equ	4019	;# 
   604   000FB4                     CMCON           equ	4020	;# 
   605   000FB5                     CVRCON          equ	4021	;# 
   606   000FB6                     ECCP1AS         equ	4022	;# 
   607   000FB7                     ECCP1DEL        equ	4023	;# 
   608   000FB7                     PWM1CON         equ	4023	;# 
   609   000FB8                     BAUDCON         equ	4024	;# 
   610   000FB8                     BAUDCTL         equ	4024	;# 
   611   000FBA                     CCP2CON         equ	4026	;# 
   612   000FBB                     CCPR2           equ	4027	;# 
   613   000FBB                     CCPR2L          equ	4027	;# 
   614   000FBC                     CCPR2H          equ	4028	;# 
   615   000FBD                     CCP1CON         equ	4029	;# 
   616   000FBD                     ECCP1CON        equ	4029	;# 
   617   000FBE                     CCPR1           equ	4030	;# 
   618   000FBE                     CCPR1L          equ	4030	;# 
   619   000FBF                     CCPR1H          equ	4031	;# 
   620   000FC0                     ADCON2          equ	4032	;# 
   621   000FC1                     ADCON1          equ	4033	;# 
   622   000FC2                     ADCON0          equ	4034	;# 
   623   000FC3                     ADRES           equ	4035	;# 
   624   000FC3                     ADRESL          equ	4035	;# 
   625   000FC4                     ADRESH          equ	4036	;# 
   626   000FC5                     SSPCON2         equ	4037	;# 
   627   000FC6                     SSPCON1         equ	4038	;# 
   628   000FC7                     SSPSTAT         equ	4039	;# 
   629   000FC8                     SSPADD          equ	4040	;# 
   630   000FC9                     SSPBUF          equ	4041	;# 
   631   000FCA                     T2CON           equ	4042	;# 
   632   000FCB                     PR2             equ	4043	;# 
   633   000FCB                     MEMCON          equ	4043	;# 
   634   000FCC                     TMR2            equ	4044	;# 
   635   000FCD                     T1CON           equ	4045	;# 
   636   000FCE                     TMR1            equ	4046	;# 
   637   000FCE                     TMR1L           equ	4046	;# 
   638   000FCF                     TMR1H           equ	4047	;# 
   639   000FD0                     RCON            equ	4048	;# 
   640   000FD1                     WDTCON          equ	4049	;# 
   641   000FD2                     HLVDCON         equ	4050	;# 
   642   000FD2                     LVDCON          equ	4050	;# 
   643   000FD3                     OSCCON          equ	4051	;# 
   644   000FD5                     T0CON           equ	4053	;# 
   645   000FD6                     TMR0            equ	4054	;# 
   646   000FD6                     TMR0L           equ	4054	;# 
   647   000FD7                     TMR0H           equ	4055	;# 
   648   000FD8                     STATUS          equ	4056	;# 
   649   000FD9                     FSR2            equ	4057	;# 
   650   000FD9                     FSR2L           equ	4057	;# 
   651   000FDA                     FSR2H           equ	4058	;# 
   652   000FDB                     PLUSW2          equ	4059	;# 
   653   000FDC                     PREINC2         equ	4060	;# 
   654   000FDD                     POSTDEC2        equ	4061	;# 
   655   000FDE                     POSTINC2        equ	4062	;# 
   656   000FDF                     INDF2           equ	4063	;# 
   657   000FE0                     BSR             equ	4064	;# 
   658   000FE1                     FSR1            equ	4065	;# 
   659   000FE1                     FSR1L           equ	4065	;# 
   660   000FE2                     FSR1H           equ	4066	;# 
   661   000FE3                     PLUSW1          equ	4067	;# 
   662   000FE4                     PREINC1         equ	4068	;# 
   663   000FE5                     POSTDEC1        equ	4069	;# 
   664   000FE6                     POSTINC1        equ	4070	;# 
   665   000FE7                     INDF1           equ	4071	;# 
   666   000FE8                     WREG            equ	4072	;# 
   667   000FE9                     FSR0            equ	4073	;# 
   668   000FE9                     FSR0L           equ	4073	;# 
   669   000FEA                     FSR0H           equ	4074	;# 
   670   000FEB                     PLUSW0          equ	4075	;# 
   671   000FEC                     PREINC0         equ	4076	;# 
   672   000FED                     POSTDEC0        equ	4077	;# 
   673   000FEE                     POSTINC0        equ	4078	;# 
   674   000FEF                     INDF0           equ	4079	;# 
   675   000FF0                     INTCON3         equ	4080	;# 
   676   000FF1                     INTCON2         equ	4081	;# 
   677   000FF2                     INTCON          equ	4082	;# 
   678   000FF3                     PROD            equ	4083	;# 
   679   000FF3                     PRODL           equ	4083	;# 
   680   000FF4                     PRODH           equ	4084	;# 
   681   000FF5                     TABLAT          equ	4085	;# 
   682   000FF6                     TBLPTR          equ	4086	;# 
   683   000FF6                     TBLPTRL         equ	4086	;# 
   684   000FF7                     TBLPTRH         equ	4087	;# 
   685   000FF8                     TBLPTRU         equ	4088	;# 
   686   000FF9                     PCLAT           equ	4089	;# 
   687   000FF9                     PC              equ	4089	;# 
   688   000FF9                     PCL             equ	4089	;# 
   689   000FFA                     PCLATH          equ	4090	;# 
   690   000FFB                     PCLATU          equ	4091	;# 
   691   000FFC                     STKPTR          equ	4092	;# 
   692   000FFD                     TOS             equ	4093	;# 
   693   000FFD                     TOSL            equ	4093	;# 
   694   000FFE                     TOSH            equ	4094	;# 
   695   000FFF                     TOSU            equ	4095	;# 
   696   000F80                     PORTA           equ	3968	;# 
   697   000F81                     PORTB           equ	3969	;# 
   698   000F82                     PORTC           equ	3970	;# 
   699   000F83                     PORTD           equ	3971	;# 
   700   000F84                     PORTE           equ	3972	;# 
   701   000F89                     LATA            equ	3977	;# 
   702   000F8A                     LATB            equ	3978	;# 
   703   000F8B                     LATC            equ	3979	;# 
   704   000F8C                     LATD            equ	3980	;# 
   705   000F8D                     LATE            equ	3981	;# 
   706   000F92                     TRISA           equ	3986	;# 
   707   000F92                     DDRA            equ	3986	;# 
   708   000F93                     TRISB           equ	3987	;# 
   709   000F93                     DDRB            equ	3987	;# 
   710   000F94                     TRISC           equ	3988	;# 
   711   000F94                     DDRC            equ	3988	;# 
   712   000F95                     TRISD           equ	3989	;# 
   713   000F95                     DDRD            equ	3989	;# 
   714   000F96                     TRISE           equ	3990	;# 
   715   000F96                     DDRE            equ	3990	;# 
   716   000F9B                     OSCTUNE         equ	3995	;# 
   717   000F9D                     PIE1            equ	3997	;# 
   718   000F9E                     PIR1            equ	3998	;# 
   719   000F9F                     IPR1            equ	3999	;# 
   720   000FA0                     PIE2            equ	4000	;# 
   721   000FA1                     PIR2            equ	4001	;# 
   722   000FA2                     IPR2            equ	4002	;# 
   723   000FA6                     EECON1          equ	4006	;# 
   724   000FA7                     EECON2          equ	4007	;# 
   725   000FA8                     EEDATA          equ	4008	;# 
   726   000FA9                     EEADR           equ	4009	;# 
   727   000FAB                     RCSTA           equ	4011	;# 
   728   000FAB                     RCSTA1          equ	4011	;# 
   729   000FAC                     TXSTA           equ	4012	;# 
   730   000FAC                     TXSTA1          equ	4012	;# 
   731   000FAD                     TXREG           equ	4013	;# 
   732   000FAD                     TXREG1          equ	4013	;# 
   733   000FAE                     RCREG           equ	4014	;# 
   734   000FAE                     RCREG1          equ	4014	;# 
   735   000FAF                     SPBRG           equ	4015	;# 
   736   000FAF                     SPBRG1          equ	4015	;# 
   737   000FB0                     SPBRGH          equ	4016	;# 
   738   000FB1                     T3CON           equ	4017	;# 
   739   000FB2                     TMR3            equ	4018	;# 
   740   000FB2                     TMR3L           equ	4018	;# 
   741   000FB3                     TMR3H           equ	4019	;# 
   742   000FB4                     CMCON           equ	4020	;# 
   743   000FB5                     CVRCON          equ	4021	;# 
   744   000FB6                     ECCP1AS         equ	4022	;# 
   745   000FB7                     ECCP1DEL        equ	4023	;# 
   746   000FB7                     PWM1CON         equ	4023	;# 
   747   000FB8                     BAUDCON         equ	4024	;# 
   748   000FB8                     BAUDCTL         equ	4024	;# 
   749   000FBA                     CCP2CON         equ	4026	;# 
   750   000FBB                     CCPR2           equ	4027	;# 
   751   000FBB                     CCPR2L          equ	4027	;# 
   752   000FBC                     CCPR2H          equ	4028	;# 
   753   000FBD                     CCP1CON         equ	4029	;# 
   754   000FBD                     ECCP1CON        equ	4029	;# 
   755   000FBE                     CCPR1           equ	4030	;# 
   756   000FBE                     CCPR1L          equ	4030	;# 
   757   000FBF                     CCPR1H          equ	4031	;# 
   758   000FC0                     ADCON2          equ	4032	;# 
   759   000FC1                     ADCON1          equ	4033	;# 
   760   000FC2                     ADCON0          equ	4034	;# 
   761   000FC3                     ADRES           equ	4035	;# 
   762   000FC3                     ADRESL          equ	4035	;# 
   763   000FC4                     ADRESH          equ	4036	;# 
   764   000FC5                     SSPCON2         equ	4037	;# 
   765   000FC6                     SSPCON1         equ	4038	;# 
   766   000FC7                     SSPSTAT         equ	4039	;# 
   767   000FC8                     SSPADD          equ	4040	;# 
   768   000FC9                     SSPBUF          equ	4041	;# 
   769   000FCA                     T2CON           equ	4042	;# 
   770   000FCB                     PR2             equ	4043	;# 
   771   000FCB                     MEMCON          equ	4043	;# 
   772   000FCC                     TMR2            equ	4044	;# 
   773   000FCD                     T1CON           equ	4045	;# 
   774   000FCE                     TMR1            equ	4046	;# 
   775   000FCE                     TMR1L           equ	4046	;# 
   776   000FCF                     TMR1H           equ	4047	;# 
   777   000FD0                     RCON            equ	4048	;# 
   778   000FD1                     WDTCON          equ	4049	;# 
   779   000FD2                     HLVDCON         equ	4050	;# 
   780   000FD2                     LVDCON          equ	4050	;# 
   781   000FD3                     OSCCON          equ	4051	;# 
   782   000FD5                     T0CON           equ	4053	;# 
   783   000FD6                     TMR0            equ	4054	;# 
   784   000FD6                     TMR0L           equ	4054	;# 
   785   000FD7                     TMR0H           equ	4055	;# 
   786   000FD8                     STATUS          equ	4056	;# 
   787   000FD9                     FSR2            equ	4057	;# 
   788   000FD9                     FSR2L           equ	4057	;# 
   789   000FDA                     FSR2H           equ	4058	;# 
   790   000FDB                     PLUSW2          equ	4059	;# 
   791   000FDC                     PREINC2         equ	4060	;# 
   792   000FDD                     POSTDEC2        equ	4061	;# 
   793   000FDE                     POSTINC2        equ	4062	;# 
   794   000FDF                     INDF2           equ	4063	;# 
   795   000FE0                     BSR             equ	4064	;# 
   796   000FE1                     FSR1            equ	4065	;# 
   797   000FE1                     FSR1L           equ	4065	;# 
   798   000FE2                     FSR1H           equ	4066	;# 
   799   000FE3                     PLUSW1          equ	4067	;# 
   800   000FE4                     PREINC1         equ	4068	;# 
   801   000FE5                     POSTDEC1        equ	4069	;# 
   802   000FE6                     POSTINC1        equ	4070	;# 
   803   000FE7                     INDF1           equ	4071	;# 
   804   000FE8                     WREG            equ	4072	;# 
   805   000FE9                     FSR0            equ	4073	;# 
   806   000FE9                     FSR0L           equ	4073	;# 
   807   000FEA                     FSR0H           equ	4074	;# 
   808   000FEB                     PLUSW0          equ	4075	;# 
   809   000FEC                     PREINC0         equ	4076	;# 
   810   000FED                     POSTDEC0        equ	4077	;# 
   811   000FEE                     POSTINC0        equ	4078	;# 
   812   000FEF                     INDF0           equ	4079	;# 
   813   000FF0                     INTCON3         equ	4080	;# 
   814   000FF1                     INTCON2         equ	4081	;# 
   815   000FF2                     INTCON          equ	4082	;# 
   816   000FF3                     PROD            equ	4083	;# 
   817   000FF3                     PRODL           equ	4083	;# 
   818   000FF4                     PRODH           equ	4084	;# 
   819   000FF5                     TABLAT          equ	4085	;# 
   820   000FF6                     TBLPTR          equ	4086	;# 
   821   000FF6                     TBLPTRL         equ	4086	;# 
   822   000FF7                     TBLPTRH         equ	4087	;# 
   823   000FF8                     TBLPTRU         equ	4088	;# 
   824   000FF9                     PCLAT           equ	4089	;# 
   825   000FF9                     PC              equ	4089	;# 
   826   000FF9                     PCL             equ	4089	;# 
   827   000FFA                     PCLATH          equ	4090	;# 
   828   000FFB                     PCLATU          equ	4091	;# 
   829   000FFC                     STKPTR          equ	4092	;# 
   830   000FFD                     TOS             equ	4093	;# 
   831   000FFD                     TOSL            equ	4093	;# 
   832   000FFE                     TOSH            equ	4094	;# 
   833   000FFF                     TOSU            equ	4095	;# 
   834   000F80                     PORTA           equ	3968	;# 
   835   000F81                     PORTB           equ	3969	;# 
   836   000F82                     PORTC           equ	3970	;# 
   837   000F83                     PORTD           equ	3971	;# 
   838   000F84                     PORTE           equ	3972	;# 
   839   000F89                     LATA            equ	3977	;# 
   840   000F8A                     LATB            equ	3978	;# 
   841   000F8B                     LATC            equ	3979	;# 
   842   000F8C                     LATD            equ	3980	;# 
   843   000F8D                     LATE            equ	3981	;# 
   844   000F92                     TRISA           equ	3986	;# 
   845   000F92                     DDRA            equ	3986	;# 
   846   000F93                     TRISB           equ	3987	;# 
   847   000F93                     DDRB            equ	3987	;# 
   848   000F94                     TRISC           equ	3988	;# 
   849   000F94                     DDRC            equ	3988	;# 
   850   000F95                     TRISD           equ	3989	;# 
   851   000F95                     DDRD            equ	3989	;# 
   852   000F96                     TRISE           equ	3990	;# 
   853   000F96                     DDRE            equ	3990	;# 
   854   000F9B                     OSCTUNE         equ	3995	;# 
   855   000F9D                     PIE1            equ	3997	;# 
   856   000F9E                     PIR1            equ	3998	;# 
   857   000F9F                     IPR1            equ	3999	;# 
   858   000FA0                     PIE2            equ	4000	;# 
   859   000FA1                     PIR2            equ	4001	;# 
   860   000FA2                     IPR2            equ	4002	;# 
   861   000FA6                     EECON1          equ	4006	;# 
   862   000FA7                     EECON2          equ	4007	;# 
   863   000FA8                     EEDATA          equ	4008	;# 
   864   000FA9                     EEADR           equ	4009	;# 
   865   000FAB                     RCSTA           equ	4011	;# 
   866   000FAB                     RCSTA1          equ	4011	;# 
   867   000FAC                     TXSTA           equ	4012	;# 
   868   000FAC                     TXSTA1          equ	4012	;# 
   869   000FAD                     TXREG           equ	4013	;# 
   870   000FAD                     TXREG1          equ	4013	;# 
   871   000FAE                     RCREG           equ	4014	;# 
   872   000FAE                     RCREG1          equ	4014	;# 
   873   000FAF                     SPBRG           equ	4015	;# 
   874   000FAF                     SPBRG1          equ	4015	;# 
   875   000FB0                     SPBRGH          equ	4016	;# 
   876   000FB1                     T3CON           equ	4017	;# 
   877   000FB2                     TMR3            equ	4018	;# 
   878   000FB2                     TMR3L           equ	4018	;# 
   879   000FB3                     TMR3H           equ	4019	;# 
   880   000FB4                     CMCON           equ	4020	;# 
   881   000FB5                     CVRCON          equ	4021	;# 
   882   000FB6                     ECCP1AS         equ	4022	;# 
   883   000FB7                     ECCP1DEL        equ	4023	;# 
   884   000FB7                     PWM1CON         equ	4023	;# 
   885   000FB8                     BAUDCON         equ	4024	;# 
   886   000FB8                     BAUDCTL         equ	4024	;# 
   887   000FBA                     CCP2CON         equ	4026	;# 
   888   000FBB                     CCPR2           equ	4027	;# 
   889   000FBB                     CCPR2L          equ	4027	;# 
   890   000FBC                     CCPR2H          equ	4028	;# 
   891   000FBD                     CCP1CON         equ	4029	;# 
   892   000FBD                     ECCP1CON        equ	4029	;# 
   893   000FBE                     CCPR1           equ	4030	;# 
   894   000FBE                     CCPR1L          equ	4030	;# 
   895   000FBF                     CCPR1H          equ	4031	;# 
   896   000FC0                     ADCON2          equ	4032	;# 
   897   000FC1                     ADCON1          equ	4033	;# 
   898   000FC2                     ADCON0          equ	4034	;# 
   899   000FC3                     ADRES           equ	4035	;# 
   900   000FC3                     ADRESL          equ	4035	;# 
   901   000FC4                     ADRESH          equ	4036	;# 
   902   000FC5                     SSPCON2         equ	4037	;# 
   903   000FC6                     SSPCON1         equ	4038	;# 
   904   000FC7                     SSPSTAT         equ	4039	;# 
   905   000FC8                     SSPADD          equ	4040	;# 
   906   000FC9                     SSPBUF          equ	4041	;# 
   907   000FCA                     T2CON           equ	4042	;# 
   908   000FCB                     PR2             equ	4043	;# 
   909   000FCB                     MEMCON          equ	4043	;# 
   910   000FCC                     TMR2            equ	4044	;# 
   911   000FCD                     T1CON           equ	4045	;# 
   912   000FCE                     TMR1            equ	4046	;# 
   913   000FCE                     TMR1L           equ	4046	;# 
   914   000FCF                     TMR1H           equ	4047	;# 
   915   000FD0                     RCON            equ	4048	;# 
   916   000FD1                     WDTCON          equ	4049	;# 
   917   000FD2                     HLVDCON         equ	4050	;# 
   918   000FD2                     LVDCON          equ	4050	;# 
   919   000FD3                     OSCCON          equ	4051	;# 
   920   000FD5                     T0CON           equ	4053	;# 
   921   000FD6                     TMR0            equ	4054	;# 
   922   000FD6                     TMR0L           equ	4054	;# 
   923   000FD7                     TMR0H           equ	4055	;# 
   924   000FD8                     STATUS          equ	4056	;# 
   925   000FD9                     FSR2            equ	4057	;# 
   926   000FD9                     FSR2L           equ	4057	;# 
   927   000FDA                     FSR2H           equ	4058	;# 
   928   000FDB                     PLUSW2          equ	4059	;# 
   929   000FDC                     PREINC2         equ	4060	;# 
   930   000FDD                     POSTDEC2        equ	4061	;# 
   931   000FDE                     POSTINC2        equ	4062	;# 
   932   000FDF                     INDF2           equ	4063	;# 
   933   000FE0                     BSR             equ	4064	;# 
   934   000FE1                     FSR1            equ	4065	;# 
   935   000FE1                     FSR1L           equ	4065	;# 
   936   000FE2                     FSR1H           equ	4066	;# 
   937   000FE3                     PLUSW1          equ	4067	;# 
   938   000FE4                     PREINC1         equ	4068	;# 
   939   000FE5                     POSTDEC1        equ	4069	;# 
   940   000FE6                     POSTINC1        equ	4070	;# 
   941   000FE7                     INDF1           equ	4071	;# 
   942   000FE8                     WREG            equ	4072	;# 
   943   000FE9                     FSR0            equ	4073	;# 
   944   000FE9                     FSR0L           equ	4073	;# 
   945   000FEA                     FSR0H           equ	4074	;# 
   946   000FEB                     PLUSW0          equ	4075	;# 
   947   000FEC                     PREINC0         equ	4076	;# 
   948   000FED                     POSTDEC0        equ	4077	;# 
   949   000FEE                     POSTINC0        equ	4078	;# 
   950   000FEF                     INDF0           equ	4079	;# 
   951   000FF0                     INTCON3         equ	4080	;# 
   952   000FF1                     INTCON2         equ	4081	;# 
   953   000FF2                     INTCON          equ	4082	;# 
   954   000FF3                     PROD            equ	4083	;# 
   955   000FF3                     PRODL           equ	4083	;# 
   956   000FF4                     PRODH           equ	4084	;# 
   957   000FF5                     TABLAT          equ	4085	;# 
   958   000FF6                     TBLPTR          equ	4086	;# 
   959   000FF6                     TBLPTRL         equ	4086	;# 
   960   000FF7                     TBLPTRH         equ	4087	;# 
   961   000FF8                     TBLPTRU         equ	4088	;# 
   962   000FF9                     PCLAT           equ	4089	;# 
   963   000FF9                     PC              equ	4089	;# 
   964   000FF9                     PCL             equ	4089	;# 
   965   000FFA                     PCLATH          equ	4090	;# 
   966   000FFB                     PCLATU          equ	4091	;# 
   967   000FFC                     STKPTR          equ	4092	;# 
   968   000FFD                     TOS             equ	4093	;# 
   969   000FFD                     TOSL            equ	4093	;# 
   970   000FFE                     TOSH            equ	4094	;# 
   971   000FFF                     TOSU            equ	4095	;# 
   972   000F80                     PORTA           equ	3968	;# 
   973   000F81                     PORTB           equ	3969	;# 
   974   000F82                     PORTC           equ	3970	;# 
   975   000F83                     PORTD           equ	3971	;# 
   976   000F84                     PORTE           equ	3972	;# 
   977   000F89                     LATA            equ	3977	;# 
   978   000F8A                     LATB            equ	3978	;# 
   979   000F8B                     LATC            equ	3979	;# 
   980   000F8C                     LATD            equ	3980	;# 
   981   000F8D                     LATE            equ	3981	;# 
   982   000F92                     TRISA           equ	3986	;# 
   983   000F92                     DDRA            equ	3986	;# 
   984   000F93                     TRISB           equ	3987	;# 
   985   000F93                     DDRB            equ	3987	;# 
   986   000F94                     TRISC           equ	3988	;# 
   987   000F94                     DDRC            equ	3988	;# 
   988   000F95                     TRISD           equ	3989	;# 
   989   000F95                     DDRD            equ	3989	;# 
   990   000F96                     TRISE           equ	3990	;# 
   991   000F96                     DDRE            equ	3990	;# 
   992   000F9B                     OSCTUNE         equ	3995	;# 
   993   000F9D                     PIE1            equ	3997	;# 
   994   000F9E                     PIR1            equ	3998	;# 
   995   000F9F                     IPR1            equ	3999	;# 
   996   000FA0                     PIE2            equ	4000	;# 
   997   000FA1                     PIR2            equ	4001	;# 
   998   000FA2                     IPR2            equ	4002	;# 
   999   000FA6                     EECON1          equ	4006	;# 
  1000   000FA7                     EECON2          equ	4007	;# 
  1001   000FA8                     EEDATA          equ	4008	;# 
  1002   000FA9                     EEADR           equ	4009	;# 
  1003   000FAB                     RCSTA           equ	4011	;# 
  1004   000FAB                     RCSTA1          equ	4011	;# 
  1005   000FAC                     TXSTA           equ	4012	;# 
  1006   000FAC                     TXSTA1          equ	4012	;# 
  1007   000FAD                     TXREG           equ	4013	;# 
  1008   000FAD                     TXREG1          equ	4013	;# 
  1009   000FAE                     RCREG           equ	4014	;# 
  1010   000FAE                     RCREG1          equ	4014	;# 
  1011   000FAF                     SPBRG           equ	4015	;# 
  1012   000FAF                     SPBRG1          equ	4015	;# 
  1013   000FB0                     SPBRGH          equ	4016	;# 
  1014   000FB1                     T3CON           equ	4017	;# 
  1015   000FB2                     TMR3            equ	4018	;# 
  1016   000FB2                     TMR3L           equ	4018	;# 
  1017   000FB3                     TMR3H           equ	4019	;# 
  1018   000FB4                     CMCON           equ	4020	;# 
  1019   000FB5                     CVRCON          equ	4021	;# 
  1020   000FB6                     ECCP1AS         equ	4022	;# 
  1021   000FB7                     ECCP1DEL        equ	4023	;# 
  1022   000FB7                     PWM1CON         equ	4023	;# 
  1023   000FB8                     BAUDCON         equ	4024	;# 
  1024   000FB8                     BAUDCTL         equ	4024	;# 
  1025   000FBA                     CCP2CON         equ	4026	;# 
  1026   000FBB                     CCPR2           equ	4027	;# 
  1027   000FBB                     CCPR2L          equ	4027	;# 
  1028   000FBC                     CCPR2H          equ	4028	;# 
  1029   000FBD                     CCP1CON         equ	4029	;# 
  1030   000FBD                     ECCP1CON        equ	4029	;# 
  1031   000FBE                     CCPR1           equ	4030	;# 
  1032   000FBE                     CCPR1L          equ	4030	;# 
  1033   000FBF                     CCPR1H          equ	4031	;# 
  1034   000FC0                     ADCON2          equ	4032	;# 
  1035   000FC1                     ADCON1          equ	4033	;# 
  1036   000FC2                     ADCON0          equ	4034	;# 
  1037   000FC3                     ADRES           equ	4035	;# 
  1038   000FC3                     ADRESL          equ	4035	;# 
  1039   000FC4                     ADRESH          equ	4036	;# 
  1040   000FC5                     SSPCON2         equ	4037	;# 
  1041   000FC6                     SSPCON1         equ	4038	;# 
  1042   000FC7                     SSPSTAT         equ	4039	;# 
  1043   000FC8                     SSPADD          equ	4040	;# 
  1044   000FC9                     SSPBUF          equ	4041	;# 
  1045   000FCA                     T2CON           equ	4042	;# 
  1046   000FCB                     PR2             equ	4043	;# 
  1047   000FCB                     MEMCON          equ	4043	;# 
  1048   000FCC                     TMR2            equ	4044	;# 
  1049   000FCD                     T1CON           equ	4045	;# 
  1050   000FCE                     TMR1            equ	4046	;# 
  1051   000FCE                     TMR1L           equ	4046	;# 
  1052   000FCF                     TMR1H           equ	4047	;# 
  1053   000FD0                     RCON            equ	4048	;# 
  1054   000FD1                     WDTCON          equ	4049	;# 
  1055   000FD2                     HLVDCON         equ	4050	;# 
  1056   000FD2                     LVDCON          equ	4050	;# 
  1057   000FD3                     OSCCON          equ	4051	;# 
  1058   000FD5                     T0CON           equ	4053	;# 
  1059   000FD6                     TMR0            equ	4054	;# 
  1060   000FD6                     TMR0L           equ	4054	;# 
  1061   000FD7                     TMR0H           equ	4055	;# 
  1062   000FD8                     STATUS          equ	4056	;# 
  1063   000FD9                     FSR2            equ	4057	;# 
  1064   000FD9                     FSR2L           equ	4057	;# 
  1065   000FDA                     FSR2H           equ	4058	;# 
  1066   000FDB                     PLUSW2          equ	4059	;# 
  1067   000FDC                     PREINC2         equ	4060	;# 
  1068   000FDD                     POSTDEC2        equ	4061	;# 
  1069   000FDE                     POSTINC2        equ	4062	;# 
  1070   000FDF                     INDF2           equ	4063	;# 
  1071   000FE0                     BSR             equ	4064	;# 
  1072   000FE1                     FSR1            equ	4065	;# 
  1073   000FE1                     FSR1L           equ	4065	;# 
  1074   000FE2                     FSR1H           equ	4066	;# 
  1075   000FE3                     PLUSW1          equ	4067	;# 
  1076   000FE4                     PREINC1         equ	4068	;# 
  1077   000FE5                     POSTDEC1        equ	4069	;# 
  1078   000FE6                     POSTINC1        equ	4070	;# 
  1079   000FE7                     INDF1           equ	4071	;# 
  1080   000FE8                     WREG            equ	4072	;# 
  1081   000FE9                     FSR0            equ	4073	;# 
  1082   000FE9                     FSR0L           equ	4073	;# 
  1083   000FEA                     FSR0H           equ	4074	;# 
  1084   000FEB                     PLUSW0          equ	4075	;# 
  1085   000FEC                     PREINC0         equ	4076	;# 
  1086   000FED                     POSTDEC0        equ	4077	;# 
  1087   000FEE                     POSTINC0        equ	4078	;# 
  1088   000FEF                     INDF0           equ	4079	;# 
  1089   000FF0                     INTCON3         equ	4080	;# 
  1090   000FF1                     INTCON2         equ	4081	;# 
  1091   000FF2                     INTCON          equ	4082	;# 
  1092   000FF3                     PROD            equ	4083	;# 
  1093   000FF3                     PRODL           equ	4083	;# 
  1094   000FF4                     PRODH           equ	4084	;# 
  1095   000FF5                     TABLAT          equ	4085	;# 
  1096   000FF6                     TBLPTR          equ	4086	;# 
  1097   000FF6                     TBLPTRL         equ	4086	;# 
  1098   000FF7                     TBLPTRH         equ	4087	;# 
  1099   000FF8                     TBLPTRU         equ	4088	;# 
  1100   000FF9                     PCLAT           equ	4089	;# 
  1101   000FF9                     PC              equ	4089	;# 
  1102   000FF9                     PCL             equ	4089	;# 
  1103   000FFA                     PCLATH          equ	4090	;# 
  1104   000FFB                     PCLATU          equ	4091	;# 
  1105   000FFC                     STKPTR          equ	4092	;# 
  1106   000FFD                     TOS             equ	4093	;# 
  1107   000FFD                     TOSL            equ	4093	;# 
  1108   000FFE                     TOSH            equ	4094	;# 
  1109   000FFF                     TOSU            equ	4095	;# 
  1110   000F80                     PORTA           equ	3968	;# 
  1111   000F81                     PORTB           equ	3969	;# 
  1112   000F82                     PORTC           equ	3970	;# 
  1113   000F83                     PORTD           equ	3971	;# 
  1114   000F84                     PORTE           equ	3972	;# 
  1115   000F89                     LATA            equ	3977	;# 
  1116   000F8A                     LATB            equ	3978	;# 
  1117   000F8B                     LATC            equ	3979	;# 
  1118   000F8C                     LATD            equ	3980	;# 
  1119   000F8D                     LATE            equ	3981	;# 
  1120   000F92                     TRISA           equ	3986	;# 
  1121   000F92                     DDRA            equ	3986	;# 
  1122   000F93                     TRISB           equ	3987	;# 
  1123   000F93                     DDRB            equ	3987	;# 
  1124   000F94                     TRISC           equ	3988	;# 
  1125   000F94                     DDRC            equ	3988	;# 
  1126   000F95                     TRISD           equ	3989	;# 
  1127   000F95                     DDRD            equ	3989	;# 
  1128   000F96                     TRISE           equ	3990	;# 
  1129   000F96                     DDRE            equ	3990	;# 
  1130   000F9B                     OSCTUNE         equ	3995	;# 
  1131   000F9D                     PIE1            equ	3997	;# 
  1132   000F9E                     PIR1            equ	3998	;# 
  1133   000F9F                     IPR1            equ	3999	;# 
  1134   000FA0                     PIE2            equ	4000	;# 
  1135   000FA1                     PIR2            equ	4001	;# 
  1136   000FA2                     IPR2            equ	4002	;# 
  1137   000FA6                     EECON1          equ	4006	;# 
  1138   000FA7                     EECON2          equ	4007	;# 
  1139   000FA8                     EEDATA          equ	4008	;# 
  1140   000FA9                     EEADR           equ	4009	;# 
  1141   000FAB                     RCSTA           equ	4011	;# 
  1142   000FAB                     RCSTA1          equ	4011	;# 
  1143   000FAC                     TXSTA           equ	4012	;# 
  1144   000FAC                     TXSTA1          equ	4012	;# 
  1145   000FAD                     TXREG           equ	4013	;# 
  1146   000FAD                     TXREG1          equ	4013	;# 
  1147   000FAE                     RCREG           equ	4014	;# 
  1148   000FAE                     RCREG1          equ	4014	;# 
  1149   000FAF                     SPBRG           equ	4015	;# 
  1150   000FAF                     SPBRG1          equ	4015	;# 
  1151   000FB0                     SPBRGH          equ	4016	;# 
  1152   000FB1                     T3CON           equ	4017	;# 
  1153   000FB2                     TMR3            equ	4018	;# 
  1154   000FB2                     TMR3L           equ	4018	;# 
  1155   000FB3                     TMR3H           equ	4019	;# 
  1156   000FB4                     CMCON           equ	4020	;# 
  1157   000FB5                     CVRCON          equ	4021	;# 
  1158   000FB6                     ECCP1AS         equ	4022	;# 
  1159   000FB7                     ECCP1DEL        equ	4023	;# 
  1160   000FB7                     PWM1CON         equ	4023	;# 
  1161   000FB8                     BAUDCON         equ	4024	;# 
  1162   000FB8                     BAUDCTL         equ	4024	;# 
  1163   000FBA                     CCP2CON         equ	4026	;# 
  1164   000FBB                     CCPR2           equ	4027	;# 
  1165   000FBB                     CCPR2L          equ	4027	;# 
  1166   000FBC                     CCPR2H          equ	4028	;# 
  1167   000FBD                     CCP1CON         equ	4029	;# 
  1168   000FBD                     ECCP1CON        equ	4029	;# 
  1169   000FBE                     CCPR1           equ	4030	;# 
  1170   000FBE                     CCPR1L          equ	4030	;# 
  1171   000FBF                     CCPR1H          equ	4031	;# 
  1172   000FC0                     ADCON2          equ	4032	;# 
  1173   000FC1                     ADCON1          equ	4033	;# 
  1174   000FC2                     ADCON0          equ	4034	;# 
  1175   000FC3                     ADRES           equ	4035	;# 
  1176   000FC3                     ADRESL          equ	4035	;# 
  1177   000FC4                     ADRESH          equ	4036	;# 
  1178   000FC5                     SSPCON2         equ	4037	;# 
  1179   000FC6                     SSPCON1         equ	4038	;# 
  1180   000FC7                     SSPSTAT         equ	4039	;# 
  1181   000FC8                     SSPADD          equ	4040	;# 
  1182   000FC9                     SSPBUF          equ	4041	;# 
  1183   000FCA                     T2CON           equ	4042	;# 
  1184   000FCB                     PR2             equ	4043	;# 
  1185   000FCB                     MEMCON          equ	4043	;# 
  1186   000FCC                     TMR2            equ	4044	;# 
  1187   000FCD                     T1CON           equ	4045	;# 
  1188   000FCE                     TMR1            equ	4046	;# 
  1189   000FCE                     TMR1L           equ	4046	;# 
  1190   000FCF                     TMR1H           equ	4047	;# 
  1191   000FD0                     RCON            equ	4048	;# 
  1192   000FD1                     WDTCON          equ	4049	;# 
  1193   000FD2                     HLVDCON         equ	4050	;# 
  1194   000FD2                     LVDCON          equ	4050	;# 
  1195   000FD3                     OSCCON          equ	4051	;# 
  1196   000FD5                     T0CON           equ	4053	;# 
  1197   000FD6                     TMR0            equ	4054	;# 
  1198   000FD6                     TMR0L           equ	4054	;# 
  1199   000FD7                     TMR0H           equ	4055	;# 
  1200   000FD8                     STATUS          equ	4056	;# 
  1201   000FD9                     FSR2            equ	4057	;# 
  1202   000FD9                     FSR2L           equ	4057	;# 
  1203   000FDA                     FSR2H           equ	4058	;# 
  1204   000FDB                     PLUSW2          equ	4059	;# 
  1205   000FDC                     PREINC2         equ	4060	;# 
  1206   000FDD                     POSTDEC2        equ	4061	;# 
  1207   000FDE                     POSTINC2        equ	4062	;# 
  1208   000FDF                     INDF2           equ	4063	;# 
  1209   000FE0                     BSR             equ	4064	;# 
  1210   000FE1                     FSR1            equ	4065	;# 
  1211   000FE1                     FSR1L           equ	4065	;# 
  1212   000FE2                     FSR1H           equ	4066	;# 
  1213   000FE3                     PLUSW1          equ	4067	;# 
  1214   000FE4                     PREINC1         equ	4068	;# 
  1215   000FE5                     POSTDEC1        equ	4069	;# 
  1216   000FE6                     POSTINC1        equ	4070	;# 
  1217   000FE7                     INDF1           equ	4071	;# 
  1218   000FE8                     WREG            equ	4072	;# 
  1219   000FE9                     FSR0            equ	4073	;# 
  1220   000FE9                     FSR0L           equ	4073	;# 
  1221   000FEA                     FSR0H           equ	4074	;# 
  1222   000FEB                     PLUSW0          equ	4075	;# 
  1223   000FEC                     PREINC0         equ	4076	;# 
  1224   000FED                     POSTDEC0        equ	4077	;# 
  1225   000FEE                     POSTINC0        equ	4078	;# 
  1226   000FEF                     INDF0           equ	4079	;# 
  1227   000FF0                     INTCON3         equ	4080	;# 
  1228   000FF1                     INTCON2         equ	4081	;# 
  1229   000FF2                     INTCON          equ	4082	;# 
  1230   000FF3                     PROD            equ	4083	;# 
  1231   000FF3                     PRODL           equ	4083	;# 
  1232   000FF4                     PRODH           equ	4084	;# 
  1233   000FF5                     TABLAT          equ	4085	;# 
  1234   000FF6                     TBLPTR          equ	4086	;# 
  1235   000FF6                     TBLPTRL         equ	4086	;# 
  1236   000FF7                     TBLPTRH         equ	4087	;# 
  1237   000FF8                     TBLPTRU         equ	4088	;# 
  1238   000FF9                     PCLAT           equ	4089	;# 
  1239   000FF9                     PC              equ	4089	;# 
  1240   000FF9                     PCL             equ	4089	;# 
  1241   000FFA                     PCLATH          equ	4090	;# 
  1242   000FFB                     PCLATU          equ	4091	;# 
  1243   000FFC                     STKPTR          equ	4092	;# 
  1244   000FFD                     TOS             equ	4093	;# 
  1245   000FFD                     TOSL            equ	4093	;# 
  1246   000FFE                     TOSH            equ	4094	;# 
  1247   000FFF                     TOSU            equ	4095	;# 
  1248                           
  1249                           	psect	idataCOMRAM
  1250   001ACE                     __pidataCOMRAM:
  1251                           	callstack 0
  1252                           
  1253                           ;initializer for _currentTime
  1254   001ACE  30                 	db	48
  1255   001ACF  30                 	db	48
  1256   001AD0  30                 	db	48
  1257   001AD1  30                 	db	48
  1258                           
  1259                           ;initializer for motorTerminal@hour
  1260   001AD2  30                 	db	48
  1261   001AD3  30                 	db	48
  1262   001AD4  30                 	db	48
  1263   001AD5  30                 	db	48
  1264                           
  1265                           	psect	idataBANK0
  1266   001642                     __pidataBANK0:
  1267                           	callstack 0
  1268                           
  1269                           ;initializer for _userUIDs
  1270   001642  65                 	db	101
  1271   001643  DC                 	db	220
  1272   001644  F9                 	db	249
  1273   001645  03                 	db	3
  1274   001646  43                 	db	67
  1275   001647  00                 	db	0
  1276   001648  00                 	db	0
  1277   001649  00                 	db	0
  1278   00164A  00                 	db	0
  1279   00164B  00                 	db	0
  1280   00164C  00                 	db	0
  1281   00164D  00                 	db	0
  1282   00164E  00                 	db	0
  1283   00164F  00                 	db	0
  1284   001650  00                 	db	0
  1285   001651  00                 	db	0
  1286   001652  DC                 	db	220
  1287   001653  0D                 	db	13
  1288   001654  F9                 	db	249
  1289   001655  03                 	db	3
  1290   001656  2B                 	db	43
  1291   001657  00                 	db	0
  1292   001658  00                 	db	0
  1293   001659  00                 	db	0
  1294   00165A  00                 	db	0
  1295   00165B  00                 	db	0
  1296   00165C  00                 	db	0
  1297   00165D  00                 	db	0
  1298   00165E  00                 	db	0
  1299   00165F  00                 	db	0
  1300   001660  00                 	db	0
  1301   001661  00                 	db	0
  1302   001662  DF                 	db	223
  1303   001663  8B                 	db	139
  1304   001664  DF                 	db	223
  1305   001665  C4                 	db	196
  1306   001666  4F                 	db	79
  1307   001667  00                 	db	0
  1308   001668  00                 	db	0
  1309   001669  00                 	db	0
  1310   00166A  00                 	db	0
  1311   00166B  00                 	db	0
  1312   00166C  00                 	db	0
  1313   00166D  00                 	db	0
  1314   00166E  00                 	db	0
  1315   00166F  00                 	db	0
  1316   001670  00                 	db	0
  1317   001671  00                 	db	0
  1318   001672  21                 	db	33
  1319   001673  32                 	db	50
  1320   001674  A9                 	db	169
  1321   001675  89                 	db	137
  1322   001676  33                 	db	51
  1323   001677  00                 	db	0
  1324   001678  00                 	db	0
  1325   001679  00                 	db	0
  1326   00167A  00                 	db	0
  1327   00167B  00                 	db	0
  1328   00167C  00                 	db	0
  1329   00167D  00                 	db	0
  1330   00167E  00                 	db	0
  1331   00167F  00                 	db	0
  1332   001680  00                 	db	0
  1333   001681  00                 	db	0
  1334                           
  1335                           ;initializer for _configurations
  1336   001682  01                 	db	1
  1337   001683  01                 	db	1
  1338   001684  01                 	db	1
  1339   001685  01                 	db	1
  1340   001686  01                 	db	1
  1341   001687  01                 	db	1
  1342   001688  01                 	db	1
  1343   001689  01                 	db	1
  1344   00168A  01                 	db	1
  1345   00168B  01                 	db	1
  1346   00168C  01                 	db	1
  1347   00168D  01                 	db	1
  1348   00168E  01                 	db	1
  1349   00168F  01                 	db	1
  1350   001690  01                 	db	1
  1351   001691  01                 	db	1
  1352   001692  01                 	db	1
  1353   001693  01                 	db	1
  1354   001694  01                 	db	1
  1355   001695  01                 	db	1
  1356   001696  01                 	db	1
  1357   001697  01                 	db	1
  1358   001698  01                 	db	1
  1359   001699  01                 	db	1
  1360                           
  1361                           	psect	mediumconst
  1362   001EC4                     __pmediumconst:
  1363                           	callstack 0
  1364   001EC4  00                 	db	0
  1365   001EC5                     GetTecla@F2752:
  1366                           	callstack 0
  1367   001EC5  01                 	db	1
  1368   001EC6  02                 	db	2
  1369   001EC7  03                 	db	3
  1370   001EC8  04                 	db	4
  1371   001EC9  05                 	db	5
  1372   001ECA  06                 	db	6
  1373   001ECB  07                 	db	7
  1374   001ECC  08                 	db	8
  1375   001ECD  09                 	db	9
  1376   001ECE  0A                 	db	10
  1377   001ECF  00                 	db	0
  1378   001ED0  0B                 	db	11
  1379   001ED1                     __end_ofGetTecla@F2752:
  1380                           	callstack 0
  1381   007F92                     _TMR0IF         set	32658
  1382   000FD6                     _TMR0           set	4054
  1383   000F89                     _LATAbits       set	3977
  1384   000F96                     _TRISE          set	3990
  1385   000F92                     _TRISA          set	3986
  1386   000FAE                     _RCREG          set	4014
  1387   000FAD                     _TXREG          set	4013
  1388   000F9E                     _PIR1bits       set	3998
  1389   000FB8                     _BAUDCON        set	4024
  1390   000FAF                     _SPBRG          set	4015
  1391   000FAB                     _RCSTA          set	4011
  1392   000FAC                     _TXSTA          set	4012
  1393   000F8A                     _LATBbits       set	3978
  1394   000F93                     _TRISBbits      set	3987
  1395   000F82                     _PORTCbits      set	3970
  1396   000F8B                     _LATCbits       set	3979
  1397   000F94                     _TRISCbits      set	3988
  1398   000F8C                     _LATD           set	3980
  1399   000F95                     _TRISD          set	3989
  1400   000F83                     _PORTD          set	3971
  1401   000FD5                     _T0CON          set	4053
  1402   000F8B                     _LATC           set	3979
  1403   000F96                     _TRISEbits      set	3990
  1404   000FC1                     _ADCON1         set	4033
  1405   000F8D                     _LATEbits       set	3981
  1406   000FF2                     _INTCONbits     set	4082
  1407   001ED1                     STR_20:
  1408   001ED1  45                 	db	69	;'E'
  1409   001ED2  52                 	db	82	;'R'
  1410   001ED3  52                 	db	82	;'R'
  1411   001ED4  4F                 	db	79	;'O'
  1412   001ED5  52                 	db	82	;'R'
  1413   001ED6  2E                 	db	46
  1414   001ED7  20                 	db	32
  1415   001ED8  56                 	db	86	;'V'
  1416   001ED9  61                 	db	97	;'a'
  1417   001EDA  6C                 	db	108	;'l'
  1418   001EDB  6F                 	db	111	;'o'
  1419   001EDC  72                 	db	114	;'r'
  1420   001EDD  20                 	db	32
  1421   001EDE  69                 	db	105	;'i'
  1422   001EDF  6E                 	db	110	;'n'
  1423   001EE0  74                 	db	116	;'t'
  1424   001EE1  72                 	db	114	;'r'
  1425   001EE2  6F                 	db	111	;'o'
  1426   001EE3  64                 	db	100	;'d'
  1427   001EE4  75                 	db	117	;'u'
  1428   001EE5  69                 	db	105	;'i'
  1429   001EE6  74                 	db	116	;'t'
  1430   001EE7  20                 	db	32
  1431   001EE8  65                 	db	101	;'e'
  1432   001EE9  72                 	db	114	;'r'
  1433   001EEA  72                 	db	114	;'r'
  1434   001EEB  6F                 	db	111	;'o'
  1435   001EEC  6E                 	db	110	;'n'
  1436   001EED  69                 	db	105	;'i'
  1437   001EEE  2E                 	db	46
  1438   001EEF  0D                 	db	13
  1439   001EF0  0A                 	db	10
  1440   001EF1  00                 	db	0
  1441   001EF2                     STR_7:
  1442   001EF2  09                 	db	9
  1443   001EF3  33                 	db	51	;'3'
  1444   001EF4  2E                 	db	46
  1445   001EF5  20                 	db	32
  1446   001EF6  4D                 	db	77	;'M'
  1447   001EF7  6F                 	db	111	;'o'
  1448   001EF8  64                 	db	100	;'d'
  1449   001EF9  69                 	db	105	;'i'
  1450   001EFA  66                 	db	102	;'f'
  1451   001EFB  69                 	db	105	;'i'
  1452   001EFC  63                 	db	99	;'c'
  1453   001EFD  61                 	db	97	;'a'
  1454   001EFE  72                 	db	114	;'r'
  1455   001EFF  20                 	db	32
  1456   001F00  68                 	db	104	;'h'
  1457   001F01  6F                 	db	111	;'o'
  1458   001F02  72                 	db	114	;'r'
  1459   001F03  61                 	db	97	;'a'
  1460   001F04  20                 	db	32
  1461   001F05  64                 	db	100	;'d'
  1462   001F06  65                 	db	101	;'e'
  1463   001F07  6C                 	db	108	;'l'
  1464   001F08  20                 	db	32
  1465   001F09  73                 	db	115	;'s'
  1466   001F0A  69                 	db	105	;'i'
  1467   001F0B  73                 	db	115	;'s'
  1468   001F0C  74                 	db	116	;'t'
  1469   001F0D  65                 	db	101	;'e'
  1470   001F0E  6D                 	db	109	;'m'
  1471   001F0F  61                 	db	97	;'a'
  1472   001F10  0D                 	db	13
  1473   001F11  0A                 	db	10
  1474   001F12  00                 	db	0
  1475   001F13                     STR_21:
  1476   001F13  0D                 	db	13
  1477   001F14  0A                 	db	10
  1478   001F15  48                 	db	72	;'H'
  1479   001F16  6F                 	db	111	;'o'
  1480   001F17  72                 	db	114	;'r'
  1481   001F18  61                 	db	97	;'a'
  1482   001F19  20                 	db	32
  1483   001F1A  69                 	db	105	;'i'
  1484   001F1B  6E                 	db	110	;'n'
  1485   001F1C  74                 	db	116	;'t'
  1486   001F1D  72                 	db	114	;'r'
  1487   001F1E  6F                 	db	111	;'o'
  1488   001F1F  64                 	db	100	;'d'
  1489   001F20  75                 	db	117	;'u'
  1490   001F21  69                 	db	105	;'i'
  1491   001F22  64                 	db	100	;'d'
  1492   001F23  61                 	db	97	;'a'
  1493   001F24  20                 	db	32
  1494   001F25  63                 	db	99	;'c'
  1495   001F26  6F                 	db	111	;'o'
  1496   001F27  72                 	db	114	;'r'
  1497   001F28  72                 	db	114	;'r'
  1498   001F29  65                 	db	101	;'e'
  1499   001F2A  63                 	db	99	;'c'
  1500   001F2B  74                 	db	116	;'t'
  1501   001F2C  61                 	db	97	;'a'
  1502   001F2D  6D                 	db	109	;'m'
  1503   001F2E  65                 	db	101	;'e'
  1504   001F2F  6E                 	db	110	;'n'
  1505   001F30  74                 	db	116	;'t'
  1506   001F31  0D                 	db	13
  1507   001F32  0A                 	db	10
  1508   001F33  00                 	db	0
  1509   001F34                     STR_19:
  1510   001F34  49                 	db	73	;'I'
  1511   001F35  6E                 	db	110	;'n'
  1512   001F36  74                 	db	116	;'t'
  1513   001F37  72                 	db	114	;'r'
  1514   001F38  6F                 	db	111	;'o'
  1515   001F39  64                 	db	100	;'d'
  1516   001F3A  75                 	db	117	;'u'
  1517   001F3B  63                 	db	99	;'c'
  1518   001F3C  65                 	db	101	;'e'
  1519   001F3D  20                 	db	32
  1520   001F3E  6C                 	db	108	;'l'
  1521   001F3F  61                 	db	97	;'a'
  1522   001F40  20                 	db	32
  1523   001F41  68                 	db	104	;'h'
  1524   001F42  6F                 	db	111	;'o'
  1525   001F43  72                 	db	114	;'r'
  1526   001F44  61                 	db	97	;'a'
  1527   001F45  20                 	db	32
  1528   001F46  61                 	db	97	;'a'
  1529   001F47  63                 	db	99	;'c'
  1530   001F48  74                 	db	116	;'t'
  1531   001F49  75                 	db	117	;'u'
  1532   001F4A  61                 	db	97	;'a'
  1533   001F4B  6C                 	db	108	;'l'
  1534   001F4C  28                 	db	40
  1535   001F4D  48                 	db	72	;'H'
  1536   001F4E  48                 	db	72	;'H'
  1537   001F4F  4D                 	db	77	;'M'
  1538   001F50  4D                 	db	77	;'M'
  1539   001F51  29                 	db	41
  1540   001F52  3A                 	db	58	;':'
  1541   001F53  20                 	db	32
  1542   001F54  00                 	db	0
  1543   001F55                     STR_6:
  1544   001F55  09                 	db	9
  1545   001F56  32                 	db	50	;'2'
  1546   001F57  2E                 	db	46
  1547   001F58  20                 	db	32
  1548   001F59  4D                 	db	77	;'M'
  1549   001F5A  6F                 	db	111	;'o'
  1550   001F5B  73                 	db	115	;'s'
  1551   001F5C  74                 	db	116	;'t'
  1552   001F5D  72                 	db	114	;'r'
  1553   001F5E  61                 	db	97	;'a'
  1554   001F5F  72                 	db	114	;'r'
  1555   001F60  20                 	db	32
  1556   001F61  63                 	db	99	;'c'
  1557   001F62  6F                 	db	111	;'o'
  1558   001F63  6E                 	db	110	;'n'
  1559   001F64  66                 	db	102	;'f'
  1560   001F65  69                 	db	105	;'i'
  1561   001F66  67                 	db	103	;'g'
  1562   001F67  75                 	db	117	;'u'
  1563   001F68  72                 	db	114	;'r'
  1564   001F69  61                 	db	97	;'a'
  1565   001F6A  63                 	db	99	;'c'
  1566   001F6B  69                 	db	105	;'i'
  1567   001F6C  6F                 	db	111	;'o'
  1568   001F6D  6E                 	db	110	;'n'
  1569   001F6E  73                 	db	115	;'s'
  1570   001F6F  0D                 	db	13
  1571   001F70  0A                 	db	10
  1572   001F71  00                 	db	0
  1573   001F72                     STR_5:
  1574   001F72  09                 	db	9
  1575   001F73  31                 	db	49	;'1'
  1576   001F74  2E                 	db	46
  1577   001F75  20                 	db	32
  1578   001F76  51                 	db	81	;'Q'
  1579   001F77  75                 	db	117	;'u'
  1580   001F78  69                 	db	105	;'i'
  1581   001F79  20                 	db	32
  1582   001F7A  68                 	db	104	;'h'
  1583   001F7B  69                 	db	105	;'i'
  1584   001F7C  20                 	db	32
  1585   001F7D  68                 	db	104	;'h'
  1586   001F7E  61                 	db	97	;'a'
  1587   001F7F  20                 	db	32
  1588   001F80  61                 	db	97	;'a'
  1589   001F81  20                 	db	32
  1590   001F82  6C                 	db	108	;'l'
  1591   001F83  61                 	db	97	;'a'
  1592   001F84  20                 	db	32
  1593   001F85  73                 	db	115	;'s'
  1594   001F86  61                 	db	97	;'a'
  1595   001F87  6C                 	db	108	;'l'
  1596   001F88  61                 	db	97	;'a'
  1597   001F89  3F                 	db	63	;'?'
  1598   001F8A  0D                 	db	13
  1599   001F8B  0A                 	db	10
  1600   001F8C  00                 	db	0
  1601   001F8D                     STR_26:
  1602   001F8D  54                 	db	84	;'T'
  1603   001F8E  61                 	db	97	;'a'
  1604   001F8F  72                 	db	114	;'r'
  1605   001F90  67                 	db	103	;'g'
  1606   001F91  65                 	db	101	;'e'
  1607   001F92  74                 	db	116	;'t'
  1608   001F93  61                 	db	97	;'a'
  1609   001F94  20                 	db	32
  1610   001F95  64                 	db	100	;'d'
  1611   001F96  65                 	db	101	;'e'
  1612   001F97  74                 	db	116	;'t'
  1613   001F98  65                 	db	101	;'e'
  1614   001F99  63                 	db	99	;'c'
  1615   001F9A  74                 	db	116	;'t'
  1616   001F9B  61                 	db	97	;'a'
  1617   001F9C  64                 	db	100	;'d'
  1618   001F9D  61                 	db	97	;'a'
  1619   001F9E  21                 	db	33
  1620   001F9F  0D                 	db	13
  1621   001FA0  0A                 	db	10
  1622   001FA1  09                 	db	9
  1623   001FA2  00                 	db	0
  1624   001FA3                     STR_4:
  1625   001FA3  54                 	db	84	;'T'
  1626   001FA4  72                 	db	114	;'r'
  1627   001FA5  69                 	db	105	;'i'
  1628   001FA6  61                 	db	97	;'a'
  1629   001FA7  20                 	db	32
  1630   001FA8  75                 	db	117	;'u'
  1631   001FA9  6E                 	db	110	;'n'
  1632   001FAA  61                 	db	97	;'a'
  1633   001FAB  20                 	db	32
  1634   001FAC  6F                 	db	111	;'o'
  1635   001FAD  70                 	db	112	;'p'
  1636   001FAE  63                 	db	99	;'c'
  1637   001FAF  69                 	db	105	;'i'
  1638   001FB0  C3                 	db	-61
  1639   001FB1  B3                 	db	-77
  1640   001FB2  3A                 	db	58	;':'
  1641   001FB3  0D                 	db	13
  1642   001FB4  0A                 	db	10
  1643   001FB5  00                 	db	0
  1644   001FB6                     STR_1:
  1645   001FB6  2D                 	db	45
  1646   001FB7  2D                 	db	45
  1647   001FB8  2D                 	db	45
  1648   001FB9  2D                 	db	45
  1649   001FBA  2D                 	db	45
  1650   001FBB  2D                 	db	45
  1651   001FBC  2D                 	db	45
  1652   001FBD  2D                 	db	45
  1653   001FBE  2D                 	db	45
  1654   001FBF  2D                 	db	45
  1655   001FC0  2D                 	db	45
  1656   001FC1  2D                 	db	45
  1657   001FC2  2D                 	db	45
  1658   001FC3  2D                 	db	45
  1659   001FC4  2D                 	db	45
  1660   001FC5  0D                 	db	13
  1661   001FC6  0A                 	db	10
  1662   001FC7  00                 	db	0
  1663   001FC8                     STR_2:
  1664   001FC8  4D                 	db	77	;'M'
  1665   001FC9  65                 	db	101	;'e'
  1666   001FCA  6E                 	db	110	;'n'
  1667   001FCB  C3                 	db	-61
  1668   001FCC  BA                 	db	-70
  1669   001FCD  20                 	db	32
  1670   001FCE  70                 	db	112	;'p'
  1671   001FCF  72                 	db	114	;'r'
  1672   001FD0  69                 	db	105	;'i'
  1673   001FD1  6E                 	db	110	;'n'
  1674   001FD2  63                 	db	99	;'c'
  1675   001FD3  69                 	db	105	;'i'
  1676   001FD4  70                 	db	112	;'p'
  1677   001FD5  61                 	db	97	;'a'
  1678   001FD6  6C                 	db	108	;'l'
  1679   001FD7  0D                 	db	13
  1680   001FD8  0A                 	db	10
  1681   001FD9  00                 	db	0
  1682   001FDA                     STR_23:
  1683   001FDA  20                 	db	32
  1684   001FDB  43                 	db	67	;'C'
  1685   001FDC  6F                 	db	111	;'o'
  1686   001FDD  6E                 	db	110	;'n'
  1687   001FDE  66                 	db	102	;'f'
  1688   001FDF  69                 	db	105	;'i'
  1689   001FE0  67                 	db	103	;'g'
  1690   001FE1  3A                 	db	58	;':'
  1691   001FE2  20                 	db	32
  1692   001FE3  00                 	db	0
  1693   001FE4                     STR_8:
  1694   001FE4  4F                 	db	79	;'O'
  1695   001FE5  70                 	db	112	;'p'
  1696   001FE6  63                 	db	99	;'c'
  1697   001FE7  69                 	db	105	;'i'
  1698   001FE8  C3                 	db	-61
  1699   001FE9  B3                 	db	-77
  1700   001FEA  3A                 	db	58	;':'
  1701   001FEB  20                 	db	32
  1702   001FEC  00                 	db	0
  1703   001FED                     STR_22:
  1704   001FED  55                 	db	85	;'U'
  1705   001FEE  73                 	db	115	;'s'
  1706   001FEF  65                 	db	101	;'e'
  1707   001FF0  72                 	db	114	;'r'
  1708   001FF1  20                 	db	32
  1709   001FF2  00                 	db	0
  1710   001FF3                     STR_9:
  1711   001FF3  55                 	db	85	;'U'
  1712   001FF4  49                 	db	73	;'I'
  1713   001FF5  44                 	db	68	;'D'
  1714   001FF6  3A                 	db	58	;':'
  1715   001FF7  20                 	db	32
  1716   001FF8  00                 	db	0
  1717   001FF9                     STR_13:
  1718   001FF9  20                 	db	32
  1719   001FFA  2D                 	db	45
  1720   001FFB  20                 	db	32
  1721   001FFC  00                 	db	0
  1722   001FFD                     STR_10:
  1723   001FFD  2D                 	db	45
  1724   001FFE  00                 	db	0
  1725   001FEA                     STR_12          equ	STR_8+6
  1726   001FFB                     STR_24          equ	STR_13+2
  1727   001FB6                     STR_3           equ	STR_1
  1728   001FC5                     STR_11          equ	STR_1+15
  1729   001FC5                     STR_14          equ	STR_1+15
  1730   001FC5                     STR_15          equ	STR_1+15
  1731   001FC5                     STR_16          equ	STR_1+15
  1732   001FC5                     STR_17          equ	STR_1+15
  1733   001FC5                     STR_18          equ	STR_1+15
  1734   001FC5                     STR_25          equ	STR_1+15
  1735   001FA1                     STR_27          equ	STR_26+20
  1736   001FFF  00                 	db	0	; dummy byte at the end
  1737   001EC4                     __smallconst    set	__pmediumconst
  1738   001EC4                     __mediumconst   set	__pmediumconst
  1739   000002                     __activetblptr  equ	2
  1740                           
  1741                           ; #config settings
  1742                           
  1743                           	psect	cinit
  1744   001520                     __pcinit:
  1745                           	callstack 0
  1746   001520                     start_initialization:
  1747                           	callstack 0
  1748   001520                     __initialization:
  1749                           	callstack 0
  1750                           
  1751                           ; Initialize objects allocated to BANK0 (88 bytes)
  1752                           ; load TBLPTR registers with __pidataBANK0
  1753   001520  0E42               	movlw	low __pidataBANK0
  1754   001522  6EF6               	movwf	tblptrl,c
  1755   001524  0E16               	movlw	high __pidataBANK0
  1756   001526  6EF7               	movwf	tblptrh,c
  1757   001528  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1758   00152A  6EF8               	movwf	tblptru,c
  1759   00152C  EE00  F080         	lfsr	0,__pdataBANK0
  1760   001530  EE10 F058          	lfsr	1,88
  1761   001534                     copy_data0:
  1762   001534  0009               	tblrd		*+
  1763   001536  CFF5 FFEE          	movff	tablat,postinc0
  1764   00153A  50E5               	movf	postdec1,w,c
  1765   00153C  50E1               	movf	fsr1l,w,c
  1766   00153E  E1FA               	bnz	copy_data0
  1767                           
  1768                           ; Initialize objects allocated to COMRAM (8 bytes)
  1769                           ; load TBLPTR registers with __pidataCOMRAM
  1770   001540  0ECE               	movlw	low __pidataCOMRAM
  1771   001542  6EF6               	movwf	tblptrl,c
  1772   001544  0E1A               	movlw	high __pidataCOMRAM
  1773   001546  6EF7               	movwf	tblptrh,c
  1774   001548  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1775   00154A  6EF8               	movwf	tblptru,c
  1776   00154C  EE00  F066         	lfsr	0,__pdataCOMRAM
  1777   001550  EE10 F008          	lfsr	1,8
  1778   001554                     copy_data1:
  1779   001554  0009               	tblrd		*+
  1780   001556  CFF5 FFEE          	movff	tablat,postinc0
  1781   00155A  50E5               	movf	postdec1,w,c
  1782   00155C  50E1               	movf	fsr1l,w,c
  1783   00155E  E1FA               	bnz	copy_data1
  1784                           
  1785                           ; Clear objects allocated to BANK0 (20 bytes)
  1786   001560  EE00  F0D8         	lfsr	0,__pbssBANK0
  1787   001564  0E14               	movlw	20
  1788   001566                     clear_0:
  1789   001566  6AEE               	clrf	postinc0,c
  1790   001568  06E8               	decf	wreg,f,c
  1791   00156A  E1FD               	bnz	clear_0
  1792                           
  1793                           ; Clear objects allocated to COMRAM (71 bytes)
  1794   00156C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1795   001570  0E47               	movlw	71
  1796   001572                     clear_1:
  1797   001572  6AEE               	clrf	postinc0,c
  1798   001574  06E8               	decf	wreg,f,c
  1799   001576  E1FD               	bnz	clear_1
  1800   001578                     end_of_initialization:
  1801                           	callstack 0
  1802   001578                     __end_of__initialization:
  1803                           	callstack 0
  1804   001578  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1805   00157A  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1806   00157C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1807   00157E  6EF8               	movwf	tblptru,c
  1808   001580  0100               	movlb	0
  1809   001582  EF09  F00C         	goto	_main	;jump to C main() function
  1810                           
  1811                           	psect	bssCOMRAM
  1812   000001                     __pbssCOMRAM:
  1813                           	callstack 0
  1814   000001                     motor_RFID@UID:
  1815                           	callstack 0
  1816   000001                     	ds	6
  1817   000007                     _Tics:
  1818                           	callstack 0
  1819   000007                     	ds	4
  1820   00000B                     _pointer:
  1821                           	callstack 0
  1822   00000B                     	ds	2
  1823   00000D                     _index:
  1824                           	callstack 0
  1825   00000D                     	ds	2
  1826   00000F                     	ds	2
  1827   000011                     motor_Read@timeout_counter:
  1828                           	callstack 0
  1829   000011                     	ds	2
  1830   000013                     setLed@userIndex:
  1831                           	callstack 0
  1832   000013                     	ds	1
  1833   000014                     setLed@ledIndex:
  1834                           	callstack 0
  1835   000014                     	ds	1
  1836   000015                     setLed@modeLED:
  1837                           	callstack 0
  1838   000015                     	ds	1
  1839   000016                     motor_datos@pointer:
  1840                           	callstack 0
  1841   000016                     	ds	1
  1842   000017                     motor_datos@state:
  1843                           	callstack 0
  1844   000017                     	ds	1
  1845   000018                     _new_user:
  1846                           	callstack 0
  1847   000018                     	ds	1
  1848   000019                     _new_configuration:
  1849                           	callstack 0
  1850   000019                     	ds	1
  1851   00001A                     motorTerminal@index:
  1852                           	callstack 0
  1853   00001A                     	ds	1
  1854   00001B                     motorTerminal@state:
  1855                           	callstack 0
  1856   00001B                     	ds	1
  1857   00001C                     _hashtag_pressed:
  1858                           	callstack 0
  1859   00001C                     	ds	1
  1860   00001D                     _ColumnAct:
  1861                           	callstack 0
  1862   00001D                     	ds	1
  1863   00001E                     _RowAct:
  1864                           	callstack 0
  1865   00001E                     	ds	1
  1866   00001F                     _Columns:
  1867                           	callstack 0
  1868   00001F                     	ds	1
  1869   000020                     _Rows:
  1870                           	callstack 0
  1871   000020                     	ds	1
  1872   000021                     motor_RFID@fifoLevel:
  1873                           	callstack 0
  1874   000021                     	ds	1
  1875   000022                     motor_RFID@lastBitsVal:
  1876                           	callstack 0
  1877   000022                     	ds	1
  1878   000023                     motor_RFID@tempRegValue:
  1879                           	callstack 0
  1880   000023                     	ds	1
  1881   000024                     motor_RFID@allZero:
  1882                           	callstack 0
  1883   000024                     	ds	1
  1884   000025                     motor_RFID@checksum:
  1885                           	callstack 0
  1886   000025                     	ds	1
  1887   000026                     motor_RFID@TagType:
  1888                           	callstack 0
  1889   000026                     	ds	1
  1890   000027                     	ds	1
  1891   000028                     motor_RFID@i:
  1892                           	callstack 0
  1893   000028                     	ds	1
  1894   000029                     motor_RFID@n:
  1895                           	callstack 0
  1896   000029                     	ds	1
  1897   00002A                     motor_RFID@waitIRq:
  1898                           	callstack 0
  1899   00002A                     	ds	1
  1900   00002B                     motor_RFID@irqEn:
  1901                           	callstack 0
  1902   00002B                     	ds	1
  1903   00002C                     motor_RFID@substate:
  1904                           	callstack 0
  1905   00002C                     	ds	1
  1906   00002D                     motor_RFID@state:
  1907                           	callstack 0
  1908   00002D                     	ds	1
  1909   00002E                     motor_Read@ucResult:
  1910                           	callstack 0
  1911   00002E                     	ds	1
  1912   00002F                     motor_Read@ucAddr:
  1913                           	callstack 0
  1914   00002F                     	ds	1
  1915   000030                     motor_Read@bit_count:
  1916                           	callstack 0
  1917   000030                     	ds	1
  1918   000031                     motor_Write@ucValue:
  1919                           	callstack 0
  1920   000031                     	ds	1
  1921   000032                     motor_Write@ucAddr:
  1922                           	callstack 0
  1923   000032                     	ds	1
  1924   000033                     motor_Write@bit_count:
  1925                           	callstack 0
  1926   000033                     	ds	1
  1927   000034                     _state_write:
  1928                           	callstack 0
  1929   000034                     	ds	1
  1930   000035                     _state_read:
  1931                           	callstack 0
  1932   000035                     	ds	1
  1933   000036                     _state:
  1934                           	callstack 0
  1935   000036                     	ds	1
  1936   000037                     _tecla:
  1937                           	callstack 0
  1938   000037                     	ds	1
  1939   000038                     _Columnas:
  1940                           	callstack 0
  1941   000038                     	ds	1
  1942   000039                     _Filas:
  1943                           	callstack 0
  1944   000039                     	ds	1
  1945   00003A                     _ActualLeds:
  1946                           	callstack 0
  1947   00003A                     	ds	6
  1948   000040                     _currentUser:
  1949                           	callstack 0
  1950   000040                     	ds	5
  1951   000045                     _timer@TAD_LEDS$F989:
  1952                           	callstack 0
  1953   000045                     	ds	1
  1954   000046                     _Timer:
  1955                           	callstack 0
  1956   000046                     	ds	1
  1957   000047                     _timer:
  1958                           	callstack 0
  1959   000047                     	ds	1
  1960                           
  1961                           	psect	dataCOMRAM
  1962   000066                     __pdataCOMRAM:
  1963                           	callstack 0
  1964   000066                     _currentTime:
  1965                           	callstack 0
  1966   000066                     	ds	4
  1967   00006A                     motorTerminal@hour:
  1968                           	callstack 0
  1969   00006A                     	ds	4
  1970                           
  1971                           	psect	bssBANK0
  1972   0000D8                     __pbssBANK0:
  1973                           	callstack 0
  1974   0000D8                     _Timers:
  1975                           	callstack 0
  1976   0000D8                     	ds	20
  1977                           
  1978                           	psect	dataBANK0
  1979   000080                     __pdataBANK0:
  1980                           	callstack 0
  1981   000080                     _userUIDs:
  1982                           	callstack 0
  1983   000080                     	ds	64
  1984   0000C0                     _configurations:
  1985                           	callstack 0
  1986   0000C0                     	ds	24
  1987                           
  1988                           	psect	cstackCOMRAM
  1989   000048                     __pcstackCOMRAM:
  1990                           	callstack 0
  1991   000048                     ??_LowRSI:
  1992                           
  1993                           ; 1 bytes @ 0x0
  1994   000048                     	ds	1
  1995   000049                     ?_Terminal_TXAvailable:
  1996                           	callstack 0
  1997   000049                     ?_TI_GetTics:
  1998                           	callstack 0
  1999   000049                     TI_Init@counter:
  2000                           	callstack 0
  2001   000049                     TI_NewTimer@TimerHandle:
  2002                           	callstack 0
  2003   000049                     TI_ResetTics@TimerHandle:
  2004                           	callstack 0
  2005   000049                     saveHourToData@hour:
  2006                           	callstack 0
  2007   000049                     ??_EscriuPrimeraOrdre:
  2008   000049                     ??_delay_us:
  2009   000049                     ??_CantaPartAlta:
  2010   000049                     ??_CantaPartBaixa:
  2011   000049                     
  2012                           ; 1 bytes @ 0x1
  2013   000049                     	ds	1
  2014   00004A                     CantaPartAlta@c:
  2015                           	callstack 0
  2016   00004A                     CantaPartBaixa@c:
  2017                           	callstack 0
  2018   00004A                     EscriuPrimeraOrdre@ordre:
  2019                           	callstack 0
  2020   00004A                     
  2021                           ; 1 bytes @ 0x2
  2022   00004A                     	ds	1
  2023   00004B                     TI_NewTimer@Comptador:
  2024                           	callstack 0
  2025   00004B                     CantaIR@IR:
  2026                           	callstack 0
  2027   00004B                     ??_Terminal_TXAvailable:
  2028                           
  2029                           ; 1 bytes @ 0x3
  2030   00004B                     	ds	1
  2031   00004C                     delay_us@howMany:
  2032                           	callstack 0
  2033   00004C                     Terminal_SendChar@c:
  2034                           	callstack 0
  2035   00004C                     
  2036                           ; 1 bytes @ 0x4
  2037   00004C                     	ds	1
  2038   00004D                     delay_us@x:
  2039                           	callstack 0
  2040   00004D                     Terminal_SendString@str:
  2041                           	callstack 0
  2042   00004D                     ??_TI_GetTics:
  2043                           
  2044                           ; 1 bytes @ 0x5
  2045   00004D                     	ds	1
  2046   00004E                     motor_Write@value:
  2047                           	callstack 0
  2048   00004E                     ??_MFRC522_Rd:
  2049   00004E                     ??_motor_Read:
  2050                           
  2051                           ; 1 bytes @ 0x6
  2052   00004E                     	ds	1
  2053   00004F                     MFRC522_Rd@Address:
  2054                           	callstack 0
  2055   00004F                     motor_Read@addr:
  2056                           	callstack 0
  2057   00004F                     printfUID@currentUser:
  2058                           	callstack 0
  2059   00004F                     printLedConfig@leds:
  2060                           	callstack 0
  2061   00004F                     showAllConfigurations@j:
  2062                           	callstack 0
  2063   00004F                     ??_motor_Write:
  2064   00004F                     
  2065                           ; 1 bytes @ 0x7
  2066   00004F                     	ds	1
  2067   000050                     MFRC522_Rd@ucAddr:
  2068                           	callstack 0
  2069   000050                     motor_Write@addr:
  2070                           	callstack 0
  2071   000050                     _printLedConfig$867:
  2072                           	callstack 0
  2073   000050                     ??_printfUID:
  2074   000050                     
  2075                           ; 1 bytes @ 0x8
  2076   000050                     	ds	1
  2077   000051                     MFRC522_Rd@ucResult:
  2078                           	callstack 0
  2079   000051                     _printfUID$857:
  2080                           	callstack 0
  2081   000051                     showAllConfigurations@i:
  2082                           	callstack 0
  2083   000051                     TI_GetTics@CopiaTicsActual:
  2084                           	callstack 0
  2085                           
  2086                           ; 4 bytes @ 0x9
  2087   000051                     	ds	1
  2088   000052                     MFRC522_Rd@i:
  2089                           	callstack 0
  2090   000052                     printLedConfig@val:
  2091                           	callstack 0
  2092                           
  2093                           ; 1 bytes @ 0xA
  2094   000052                     	ds	1
  2095   000053                     MFRC522_Wr@value:
  2096                           	callstack 0
  2097   000053                     _printfUID$859:
  2098                           	callstack 0
  2099   000053                     printLedConfig@i:
  2100                           	callstack 0
  2101                           
  2102                           ; 2 bytes @ 0xB
  2103   000053                     	ds	1
  2104   000054                     ??_MFRC522_Wr:
  2105                           
  2106                           ; 1 bytes @ 0xC
  2107   000054                     	ds	1
  2108   000055                     TI_GetTics@TimerHandle:
  2109                           	callstack 0
  2110   000055                     MFRC522_Wr@Address:
  2111                           	callstack 0
  2112   000055                     printfUID@high:
  2113                           	callstack 0
  2114                           
  2115                           ; 1 bytes @ 0xD
  2116   000055                     	ds	1
  2117   000056                     MFRC522_Wr@ucAddr:
  2118                           	callstack 0
  2119   000056                     printfUID@low:
  2120                           	callstack 0
  2121   000056                     Espera@Timer:
  2122                           	callstack 0
  2123                           
  2124                           ; 2 bytes @ 0xE
  2125   000056                     	ds	1
  2126   000057                     MFRC522_Wr@i:
  2127                           	callstack 0
  2128   000057                     printfUID@i:
  2129                           	callstack 0
  2130                           
  2131                           ; 2 bytes @ 0xF
  2132   000057                     	ds	1
  2133   000058                     MFRC522_Clear_Bit@mask:
  2134                           	callstack 0
  2135   000058                     MFRC522_Set_Bit@mask:
  2136                           	callstack 0
  2137   000058                     Espera@ms:
  2138                           	callstack 0
  2139   000058                     
  2140                           ; 1 bytes @ 0x10
  2141   000058                     	ds	1
  2142   000059                     MFRC522_Set_Bit@addr:
  2143                           	callstack 0
  2144   000059                     motorTerminal@currentUser:
  2145                           	callstack 0
  2146   000059                     setCurrentUser@UID1:
  2147                           	callstack 0
  2148   000059                     ??_MFRC522_Clear_Bit:
  2149   000059                     
  2150                           ; 1 bytes @ 0x11
  2151   000059                     	ds	1
  2152   00005A                     MFRC522_Clear_Bit@addr:
  2153                           	callstack 0
  2154   00005A                     setCurrentUser@UID2:
  2155                           	callstack 0
  2156   00005A                     ??_Espera:
  2157   00005A                     
  2158                           ; 1 bytes @ 0x12
  2159   00005A                     	ds	1
  2160   00005B                     setCurrentUser@UID3:
  2161                           	callstack 0
  2162   00005B                     
  2163                           ; 1 bytes @ 0x13
  2164   00005B                     	ds	1
  2165   00005C                     setCurrentUser@UID4:
  2166                           	callstack 0
  2167                           
  2168                           ; 1 bytes @ 0x14
  2169   00005C                     	ds	1
  2170   00005D                     setCurrentUser@UID0:
  2171                           	callstack 0
  2172   00005D                     
  2173                           ; 1 bytes @ 0x15
  2174   00005D                     	ds	1
  2175   00005E                     LcInit@columns:
  2176                           	callstack 0
  2177   00005E                     ??_motor_RFID:
  2178   00005E                     
  2179                           ; 1 bytes @ 0x16
  2180   00005E                     	ds	1
  2181   00005F                     LcInit@rows:
  2182                           	callstack 0
  2183   00005F                     
  2184                           ; 1 bytes @ 0x17
  2185   00005F                     	ds	1
  2186   000060                     motor_RFID@currentUser:
  2187                           	callstack 0
  2188   000060                     LcInit@i:
  2189                           	callstack 0
  2190                           
  2191                           ; 2 bytes @ 0x18
  2192   000060                     	ds	1
  2193   000061                     motor_RFID@backBitsCalc:
  2194                           	callstack 0
  2195                           
  2196                           ; 1 bytes @ 0x19
  2197   000061                     	ds	1
  2198   000062                     motor_RFID@differentUID:
  2199                           	callstack 0
  2200                           
  2201                           ; 1 bytes @ 0x1A
  2202   000062                     	ds	1
  2203   000063                     motor_RFID@i_581:
  2204                           	callstack 0
  2205                           
  2206                           ; 2 bytes @ 0x1B
  2207   000063                     	ds	2
  2208   000065                     motor_RFID@flag:
  2209                           	callstack 0
  2210                           
  2211                           ; 1 bytes @ 0x1D
  2212   000065                     	ds	1
  2213   000066                     
  2214                           ; 1 bytes @ 0x1E
  2215 ;;
  2216 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2217 ;;
  2218 ;; *************** function _main *****************
  2219 ;; Defined at:
  2220 ;;		line 39 in file "main.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1
  2234 ;;      Params:         0       0       0
  2235 ;;      Locals:         0       0       0
  2236 ;;      Temps:          0       0       0
  2237 ;;      Totals:         0       0       0
  2238 ;;Total ram usage:        0 bytes
  2239 ;; Hardware stack levels required when called: 9
  2240 ;; This function calls:
  2241 ;;		_LcInit
  2242 ;;		_TI_Init
  2243 ;;		_Terminal_Init
  2244 ;;		_initLeds
  2245 ;;		_initPorts
  2246 ;;		_initRFID
  2247 ;;		_initTeclado
  2248 ;;		_motorTerminal
  2249 ;;		_motor_RFID
  2250 ;; This function is called by:
  2251 ;;		Startup code after reset
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text0
  2256   001812                     __ptext0:
  2257                           	callstack 0
  2258   001812                     _main:
  2259                           	callstack 22
  2260   001812                     
  2261                           ;main.c: 40:  TRISEbits.TRISE2 = 0;
  2262   001812  EC76  F00C         	call	_TI_Init	;wreg free
  2263                           
  2264                           ;main.c: 41: }
  2265   001816  EC08  F00D         	call	_initTeclado	;wreg free
  2266   00181A                     
  2267                           ;main.c: 42: 
  2268   00181A  EC5D  F00D         	call	_initRFID	;wreg free
  2269   00181E                     
  2270                           ;main.c: 43: 
  2271   00181E  EC3C  F00D         	call	_Terminal_Init	;wreg free
  2272   001822                     
  2273                           ;main.c: 44: 
  2274   001822  EC6F  F00D         	call	_initPorts	;wreg free
  2275   001826                     
  2276                           ;main.c: 45: void ProcessKey(unsigned char key) {
  2277   001826  EC44  F00D         	call	_initLeds	;wreg free
  2278   00182A                     
  2279                           ;main.c: 46: 
  2280   00182A  0E10               	movlw	16
  2281   00182C  6E5E               	movwf	LcInit@columns^0,c
  2282   00182E  0E02               	movlw	2
  2283   001830  EC09  F007         	call	_LcInit
  2284   001834  8EF2               	bsf	242,7,c	;volatile
  2285   001836  9CF2               	bcf	242,6,c	;volatile
  2286   001838                     l4323:
  2287   001838  ECAE  F005         	call	_motorTerminal	;wreg free
  2288   00183C  EC15  F000         	call	_motor_RFID	;wreg free
  2289   001840  748D               	btg	141,2,c	;volatile
  2290   001842  EF1C  F00C         	goto	l4323
  2291   001846  EF13  F000         	goto	start
  2292   00184A                     __end_of_main:
  2293                           	callstack 0
  2294                           
  2295 ;; *************** function _motor_RFID *****************
  2296 ;; Defined at:
  2297 ;;		line 275 in file "TAD_RFID.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  i               2   27[COMRAM] int 
  2302 ;;  differentUID    1   26[COMRAM] unsigned char 
  2303 ;;  currentUser     1   24[COMRAM] PTR unsigned char 
  2304 ;;		 -> NULL(0), currentUser(5), 
  2305 ;;  flag            1   29[COMRAM] unsigned char 
  2306 ;;  backBitsCalc    1   25[COMRAM] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1
  2316 ;;      Params:         0       0       0
  2317 ;;      Locals:         6       0       0
  2318 ;;      Temps:          2       0       0
  2319 ;;      Totals:         8       0       0
  2320 ;;Total ram usage:        8 bytes
  2321 ;; Hardware stack levels used: 1
  2322 ;; Hardware stack levels required when called: 8
  2323 ;; This function calls:
  2324 ;;		_getActualUID
  2325 ;;		_motor_Read
  2326 ;;		_motor_Write
  2327 ;;		_setCurrentUser
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text1
  2334   00002A                     __ptext1:
  2335                           	callstack 0
  2336   00002A                     _motor_RFID:
  2337                           	callstack 22
  2338   00002A                     
  2339                           ;TAD_RFID.c: 288:     static unsigned char lastBitsVal;;TAD_RFID.c: 289:     static unsi
      +                          gned char fifoLevel;;TAD_RFID.c: 290:     unsigned char backBitsCalc;;TAD_RFID.c: 292:  
      +                             switch(state) {
  2340   00002A  EFA2  F005         	goto	l4181
  2341   00002E                     l3721:
  2342                           
  2343                           ;TAD_RFID.c: 298:                     flag = motor_Write(0x0D, 0x07);
  2344   00002E  0E07               	movlw	7
  2345   000030  6E4E               	movwf	motor_Write@value^0,c
  2346   000032  0E0D               	movlw	13
  2347   000034  ECFD  F007         	call	_motor_Write
  2348   000038  6E65               	movwf	motor_RFID@flag^0,c
  2349   00003A                     
  2350                           ;TAD_RFID.c: 299:                     if (flag != 0){
  2351   00003A  5065               	movf	motor_RFID@flag^0,w,c
  2352   00003C  B4D8               	btfsc	status,2,c
  2353   00003E  EF23  F000         	goto	u2931
  2354   000042  EF25  F000         	goto	u2930
  2355   000046                     u2931:
  2356   000046  EFAD  F005         	goto	l488
  2357   00004A                     u2930:
  2358   00004A                     
  2359                           ;TAD_RFID.c: 300:                     TagType = 0x26;
  2360   00004A  0E26               	movlw	38
  2361   00004C  6E26               	movwf	motor_RFID@TagType^0,c
  2362                           
  2363                           ;TAD_RFID.c: 301:                     substate = 1;
  2364   00004E  0E01               	movlw	1
  2365   000050  6E2C               	movwf	motor_RFID@substate^0,c
  2366   000052  EFAD  F005         	goto	l488
  2367   000056                     l3727:
  2368                           
  2369                           ;TAD_RFID.c: 306:                     irqEn = 0x77;
  2370   000056  0E77               	movlw	119
  2371   000058  6E2B               	movwf	motor_RFID@irqEn^0,c
  2372                           
  2373                           ;TAD_RFID.c: 307:                     waitIRq = 0x30;
  2374   00005A  0E30               	movlw	48
  2375   00005C  6E2A               	movwf	motor_RFID@waitIRq^0,c
  2376   00005E                     
  2377                           ;TAD_RFID.c: 308:                     flag = motor_Write(0x02, irqEn | 0x80);
  2378   00005E  0EF7               	movlw	247
  2379   000060  6E4E               	movwf	motor_Write@value^0,c
  2380   000062  0E02               	movlw	2
  2381   000064  ECFD  F007         	call	_motor_Write
  2382   000068  6E65               	movwf	motor_RFID@flag^0,c
  2383   00006A                     
  2384                           ;TAD_RFID.c: 309:                     if (flag != 0){
  2385   00006A  5065               	movf	motor_RFID@flag^0,w,c
  2386   00006C  B4D8               	btfsc	status,2,c
  2387   00006E  EF3B  F000         	goto	u2941
  2388   000072  EF3D  F000         	goto	u2940
  2389   000076                     u2941:
  2390   000076  EFAD  F005         	goto	l488
  2391   00007A                     u2940:
  2392   00007A                     l3733:
  2393                           
  2394                           ;TAD_RFID.c: 310:                     substate = 2;
  2395   00007A  0E02               	movlw	2
  2396   00007C  6E2C               	movwf	motor_RFID@substate^0,c
  2397   00007E  EFAD  F005         	goto	l488
  2398   000082                     l3735:
  2399                           
  2400                           ;TAD_RFID.c: 315:                     flag = motor_Read(0x04);
  2401   000082  0E04               	movlw	4
  2402   000084  EC6C  F006         	call	_motor_Read
  2403   000088  6E65               	movwf	motor_RFID@flag^0,c
  2404   00008A                     
  2405                           ;TAD_RFID.c: 316:                     if (flag == 0xFF) {
  2406   00008A  2865               	incf	motor_RFID@flag^0,w,c
  2407   00008C  A4D8               	btfss	status,2,c
  2408   00008E  EF4B  F000         	goto	u2951
  2409   000092  EF4D  F000         	goto	u2950
  2410   000096                     u2951:
  2411   000096  EF50  F000         	goto	l3741
  2412   00009A                     u2950:
  2413   00009A                     l3739:
  2414                           
  2415                           ;TAD_RFID.c: 318:                         substate = 0;
  2416   00009A  6A2C               	clrf	motor_RFID@substate^0,c
  2417                           
  2418                           ;TAD_RFID.c: 319:                     } else if (flag != 0xFE) {
  2419   00009C  EFAD  F005         	goto	l488
  2420   0000A0                     l3741:
  2421   0000A0  0EFE               	movlw	254
  2422   0000A2  1865               	xorwf	motor_RFID@flag^0,w,c
  2423   0000A4  B4D8               	btfsc	status,2,c
  2424   0000A6  EF57  F000         	goto	u2961
  2425   0000AA  EF59  F000         	goto	u2960
  2426   0000AE                     u2961:
  2427   0000AE  EF4F  F002         	goto	l329
  2428   0000B2                     u2960:
  2429   0000B2                     
  2430                           ;TAD_RFID.c: 320:                         tempRegValue = flag;
  2431   0000B2  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2432   0000B6                     l3745:
  2433                           
  2434                           ;TAD_RFID.c: 321:                         substate = 3;
  2435   0000B6  0E03               	movlw	3
  2436   0000B8  6E2C               	movwf	motor_RFID@substate^0,c
  2437   0000BA  EFAD  F005         	goto	l488
  2438   0000BE                     l3747:
  2439                           
  2440                           ;TAD_RFID.c: 326:                     flag = motor_Write(0x02, tempRegValue & ~0x80);
  2441   0000BE  5023               	movf	motor_RFID@tempRegValue^0,w,c
  2442   0000C0  0B7F               	andlw	127
  2443   0000C2  6E4E               	movwf	motor_Write@value^0,c
  2444   0000C4  0E02               	movlw	2
  2445   0000C6  ECFD  F007         	call	_motor_Write
  2446   0000CA  6E65               	movwf	motor_RFID@flag^0,c
  2447   0000CC                     
  2448                           ;TAD_RFID.c: 327:                     if (flag != 0){
  2449   0000CC  5065               	movf	motor_RFID@flag^0,w,c
  2450   0000CE  B4D8               	btfsc	status,2,c
  2451   0000D0  EF6C  F000         	goto	u2971
  2452   0000D4  EF6E  F000         	goto	u2970
  2453   0000D8                     u2971:
  2454   0000D8  EFAD  F005         	goto	l488
  2455   0000DC                     u2970:
  2456   0000DC                     l3751:
  2457                           
  2458                           ;TAD_RFID.c: 328:                         substate = 4;
  2459   0000DC  0E04               	movlw	4
  2460   0000DE  6E2C               	movwf	motor_RFID@substate^0,c
  2461   0000E0  EFAD  F005         	goto	l488
  2462   0000E4                     l3753:
  2463                           
  2464                           ;TAD_RFID.c: 333:                     flag = motor_Read(0x0A);
  2465   0000E4  0E0A               	movlw	10
  2466   0000E6  EC6C  F006         	call	_motor_Read
  2467   0000EA  6E65               	movwf	motor_RFID@flag^0,c
  2468   0000EC                     
  2469                           ;TAD_RFID.c: 334:                     if (flag == 0xFF) {
  2470   0000EC  2865               	incf	motor_RFID@flag^0,w,c
  2471   0000EE  A4D8               	btfss	status,2,c
  2472   0000F0  EF7C  F000         	goto	u2981
  2473   0000F4  EF7E  F000         	goto	u2980
  2474   0000F8                     u2981:
  2475   0000F8  EF80  F000         	goto	l3759
  2476   0000FC                     u2980:
  2477   0000FC  EF4D  F000         	goto	l3739
  2478   000100                     l3759:
  2479   000100  0EFE               	movlw	254
  2480   000102  1865               	xorwf	motor_RFID@flag^0,w,c
  2481   000104  B4D8               	btfsc	status,2,c
  2482   000106  EF87  F000         	goto	u2991
  2483   00010A  EF89  F000         	goto	u2990
  2484   00010E                     u2991:
  2485   00010E  EF4F  F002         	goto	l329
  2486   000112                     u2990:
  2487   000112                     l3761:
  2488                           
  2489                           ;TAD_RFID.c: 338:                         tempRegValue = flag;
  2490   000112  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2491   000116                     
  2492                           ;TAD_RFID.c: 339:                         substate = 5;
  2493   000116  0E05               	movlw	5
  2494   000118  6E2C               	movwf	motor_RFID@substate^0,c
  2495   00011A  EFAD  F005         	goto	l488
  2496   00011E                     l3765:
  2497                           
  2498                           ;TAD_RFID.c: 344:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  2499   00011E  5023               	movf	motor_RFID@tempRegValue^0,w,c
  2500   000120  0980               	iorlw	128
  2501   000122  6E4E               	movwf	motor_Write@value^0,c
  2502   000124  0E0A               	movlw	10
  2503   000126  ECFD  F007         	call	_motor_Write
  2504   00012A  6E65               	movwf	motor_RFID@flag^0,c
  2505   00012C                     
  2506                           ;TAD_RFID.c: 345:                     if (flag != 0){
  2507   00012C  5065               	movf	motor_RFID@flag^0,w,c
  2508   00012E  B4D8               	btfsc	status,2,c
  2509   000130  EF9C  F000         	goto	u3001
  2510   000134  EF9E  F000         	goto	u3000
  2511   000138                     u3001:
  2512   000138  EFAD  F005         	goto	l488
  2513   00013C                     u3000:
  2514   00013C                     l3769:
  2515                           
  2516                           ;TAD_RFID.c: 346:                         substate = 6;
  2517   00013C  0E06               	movlw	6
  2518   00013E  6E2C               	movwf	motor_RFID@substate^0,c
  2519   000140  EFAD  F005         	goto	l488
  2520   000144                     l3771:
  2521                           
  2522                           ;TAD_RFID.c: 351:                     flag = motor_Write(0x01, 0x00);
  2523   000144  0E00               	movlw	0
  2524   000146  6E4E               	movwf	motor_Write@value^0,c
  2525   000148  0E01               	movlw	1
  2526   00014A  ECFD  F007         	call	_motor_Write
  2527   00014E  6E65               	movwf	motor_RFID@flag^0,c
  2528   000150                     
  2529                           ;TAD_RFID.c: 352:                     if (flag != 0){
  2530   000150  5065               	movf	motor_RFID@flag^0,w,c
  2531   000152  B4D8               	btfsc	status,2,c
  2532   000154  EFAE  F000         	goto	u3011
  2533   000158  EFB0  F000         	goto	u3010
  2534   00015C                     u3011:
  2535   00015C  EFAD  F005         	goto	l488
  2536   000160                     u3010:
  2537   000160                     l3775:
  2538                           
  2539                           ;TAD_RFID.c: 353:                         substate = 7;
  2540   000160  0E07               	movlw	7
  2541   000162  6E2C               	movwf	motor_RFID@substate^0,c
  2542   000164  EFAD  F005         	goto	l488
  2543   000168                     l3777:
  2544                           
  2545                           ;TAD_RFID.c: 358:                     flag = motor_Write(0x09, TagType);
  2546   000168  C026  F04E         	movff	motor_RFID@TagType,motor_Write@value
  2547   00016C  0E09               	movlw	9
  2548   00016E  ECFD  F007         	call	_motor_Write
  2549   000172  6E65               	movwf	motor_RFID@flag^0,c
  2550   000174                     
  2551                           ;TAD_RFID.c: 359:                     if (flag != 0){
  2552   000174  5065               	movf	motor_RFID@flag^0,w,c
  2553   000176  B4D8               	btfsc	status,2,c
  2554   000178  EFC0  F000         	goto	u3021
  2555   00017C  EFC2  F000         	goto	u3020
  2556   000180                     u3021:
  2557   000180  EFAD  F005         	goto	l488
  2558   000184                     u3020:
  2559   000184                     l3781:
  2560                           
  2561                           ;TAD_RFID.c: 360:                         substate = 8;
  2562   000184  0E08               	movlw	8
  2563   000186  6E2C               	movwf	motor_RFID@substate^0,c
  2564   000188  EFAD  F005         	goto	l488
  2565   00018C                     l3783:
  2566                           
  2567                           ;TAD_RFID.c: 365:                     flag = motor_Write(0x01, 0x0C);
  2568   00018C  0E0C               	movlw	12
  2569   00018E  6E4E               	movwf	motor_Write@value^0,c
  2570   000190  0E01               	movlw	1
  2571   000192  ECFD  F007         	call	_motor_Write
  2572   000196  6E65               	movwf	motor_RFID@flag^0,c
  2573   000198                     
  2574                           ;TAD_RFID.c: 366:                     if (flag != 0){
  2575   000198  5065               	movf	motor_RFID@flag^0,w,c
  2576   00019A  B4D8               	btfsc	status,2,c
  2577   00019C  EFD2  F000         	goto	u3031
  2578   0001A0  EFD4  F000         	goto	u3030
  2579   0001A4                     u3031:
  2580   0001A4  EFAD  F005         	goto	l488
  2581   0001A8                     u3030:
  2582   0001A8                     l3787:
  2583                           
  2584                           ;TAD_RFID.c: 367:                         substate = 9;
  2585   0001A8  0E09               	movlw	9
  2586   0001AA  6E2C               	movwf	motor_RFID@substate^0,c
  2587   0001AC  EFAD  F005         	goto	l488
  2588   0001B0                     l3789:
  2589                           
  2590                           ;TAD_RFID.c: 372:                     flag = motor_Read(0x0D);
  2591   0001B0  0E0D               	movlw	13
  2592   0001B2  EC6C  F006         	call	_motor_Read
  2593   0001B6  6E65               	movwf	motor_RFID@flag^0,c
  2594   0001B8                     
  2595                           ;TAD_RFID.c: 373:                     if (flag == 0xFF) {
  2596   0001B8  2865               	incf	motor_RFID@flag^0,w,c
  2597   0001BA  A4D8               	btfss	status,2,c
  2598   0001BC  EFE2  F000         	goto	u3041
  2599   0001C0  EFE4  F000         	goto	u3040
  2600   0001C4                     u3041:
  2601   0001C4  EFE6  F000         	goto	l3795
  2602   0001C8                     u3040:
  2603   0001C8  EF4D  F000         	goto	l3739
  2604   0001CC                     l3795:
  2605   0001CC  0EFE               	movlw	254
  2606   0001CE  1865               	xorwf	motor_RFID@flag^0,w,c
  2607   0001D0  B4D8               	btfsc	status,2,c
  2608   0001D2  EFED  F000         	goto	u3051
  2609   0001D6  EFEF  F000         	goto	u3050
  2610   0001DA                     u3051:
  2611   0001DA  EF4F  F002         	goto	l329
  2612   0001DE                     u3050:
  2613   0001DE                     
  2614                           ;TAD_RFID.c: 377:                         tempRegValue = flag;
  2615   0001DE  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2616   0001E2                     l3799:
  2617                           
  2618                           ;TAD_RFID.c: 378:                         substate = 10;
  2619   0001E2  0E0A               	movlw	10
  2620   0001E4  6E2C               	movwf	motor_RFID@substate^0,c
  2621   0001E6  EFAD  F005         	goto	l488
  2622   0001EA                     l3801:
  2623                           
  2624                           ;TAD_RFID.c: 383:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  2625   0001EA  5023               	movf	motor_RFID@tempRegValue^0,w,c
  2626   0001EC  0980               	iorlw	128
  2627   0001EE  6E4E               	movwf	motor_Write@value^0,c
  2628   0001F0  0E0D               	movlw	13
  2629   0001F2  ECFD  F007         	call	_motor_Write
  2630   0001F6  6E65               	movwf	motor_RFID@flag^0,c
  2631   0001F8                     
  2632                           ;TAD_RFID.c: 384:                     if (flag != 0){
  2633   0001F8  5065               	movf	motor_RFID@flag^0,w,c
  2634   0001FA  B4D8               	btfsc	status,2,c
  2635   0001FC  EF02  F001         	goto	u3061
  2636   000200  EF04  F001         	goto	u3060
  2637   000204                     u3061:
  2638   000204  EFAD  F005         	goto	l488
  2639   000208                     u3060:
  2640   000208                     
  2641                           ;TAD_RFID.c: 385:                         i = 0xFF;
  2642   000208  6828               	setf	motor_RFID@i^0,c
  2643   00020A                     l3807:
  2644                           
  2645                           ;TAD_RFID.c: 386:                         substate = 11;
  2646   00020A  0E0B               	movlw	11
  2647   00020C  6E2C               	movwf	motor_RFID@substate^0,c
  2648   00020E  EFAD  F005         	goto	l488
  2649   000212                     l3809:
  2650                           
  2651                           ;TAD_RFID.c: 391:                     flag = motor_Read(0x04);
  2652   000212  0E04               	movlw	4
  2653   000214  EC6C  F006         	call	_motor_Read
  2654   000218  6E65               	movwf	motor_RFID@flag^0,c
  2655   00021A                     
  2656                           ;TAD_RFID.c: 392:                     if (flag == 0xFF) {
  2657   00021A  2865               	incf	motor_RFID@flag^0,w,c
  2658   00021C  A4D8               	btfss	status,2,c
  2659   00021E  EF13  F001         	goto	u3071
  2660   000222  EF15  F001         	goto	u3070
  2661   000226                     u3071:
  2662   000226  EF17  F001         	goto	l3815
  2663   00022A                     u3070:
  2664   00022A  EF4D  F000         	goto	l3739
  2665   00022E                     l3815:
  2666   00022E  0EFE               	movlw	254
  2667   000230  1865               	xorwf	motor_RFID@flag^0,w,c
  2668   000232  B4D8               	btfsc	status,2,c
  2669   000234  EF1E  F001         	goto	u3081
  2670   000238  EF20  F001         	goto	u3080
  2671   00023C                     u3081:
  2672   00023C  EFAD  F005         	goto	l488
  2673   000240                     u3080:
  2674   000240                     
  2675                           ;TAD_RFID.c: 396:                         n = flag;
  2676   000240  C065  F029         	movff	motor_RFID@flag,motor_RFID@n
  2677                           
  2678                           ;TAD_RFID.c: 397:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  2679   000244  B029               	btfsc	motor_RFID@n^0,0,c
  2680   000246  EF27  F001         	goto	u3091
  2681   00024A  EF29  F001         	goto	u3090
  2682   00024E                     u3091:
  2683   00024E  EF36  F001         	goto	l3823
  2684   000252                     u3090:
  2685   000252  5029               	movf	motor_RFID@n^0,w,c
  2686   000254  142A               	andwf	motor_RFID@waitIRq^0,w,c
  2687   000256  0900               	iorlw	0
  2688   000258  A4D8               	btfss	status,2,c
  2689   00025A  EF31  F001         	goto	u3101
  2690   00025E  EF33  F001         	goto	u3100
  2691   000262                     u3101:
  2692   000262  EF36  F001         	goto	l3823
  2693   000266                     u3100:
  2694   000266  2E28               	decfsz	motor_RFID@i^0,f,c
  2695   000268  EFAD  F005         	goto	l488
  2696   00026C                     l3823:
  2697                           
  2698                           ;TAD_RFID.c: 398:                             substate = 12;
  2699   00026C  0E0C               	movlw	12
  2700   00026E  6E2C               	movwf	motor_RFID@substate^0,c
  2701   000270  EFAD  F005         	goto	l488
  2702   000274                     l3825:
  2703                           
  2704                           ;TAD_RFID.c: 404:                     flag = motor_Read(0x0D);
  2705   000274  0E0D               	movlw	13
  2706   000276  EC6C  F006         	call	_motor_Read
  2707   00027A  6E65               	movwf	motor_RFID@flag^0,c
  2708   00027C                     
  2709                           ;TAD_RFID.c: 405:                     if (flag == 0xFF) {
  2710   00027C  2865               	incf	motor_RFID@flag^0,w,c
  2711   00027E  A4D8               	btfss	status,2,c
  2712   000280  EF44  F001         	goto	u3111
  2713   000284  EF46  F001         	goto	u3110
  2714   000288                     u3111:
  2715   000288  EF48  F001         	goto	l3831
  2716   00028C                     u3110:
  2717   00028C  EF4D  F000         	goto	l3739
  2718   000290                     l3831:
  2719   000290  0EFE               	movlw	254
  2720   000292  1865               	xorwf	motor_RFID@flag^0,w,c
  2721   000294  B4D8               	btfsc	status,2,c
  2722   000296  EF4F  F001         	goto	u3121
  2723   00029A  EF51  F001         	goto	u3120
  2724   00029E                     u3121:
  2725   00029E  EF4F  F002         	goto	l329
  2726   0002A2                     u3120:
  2727   0002A2  5065               	movf	motor_RFID@flag^0,w,c
  2728   0002A4  B4D8               	btfsc	status,2,c
  2729   0002A6  EF57  F001         	goto	u3131
  2730   0002AA  EF59  F001         	goto	u3130
  2731   0002AE                     u3131:
  2732   0002AE  EF4F  F002         	goto	l329
  2733   0002B2                     u3130:
  2734   0002B2                     l3835:
  2735                           
  2736                           ;TAD_RFID.c: 408:                         substate = 13;
  2737   0002B2  0E0D               	movlw	13
  2738   0002B4  6E2C               	movwf	motor_RFID@substate^0,c
  2739   0002B6  EFAD  F005         	goto	l488
  2740   0002BA                     l3837:
  2741                           
  2742                           ;TAD_RFID.c: 413:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  2743   0002BA  5023               	movf	motor_RFID@tempRegValue^0,w,c
  2744   0002BC  0B7F               	andlw	127
  2745   0002BE  6E4E               	movwf	motor_Write@value^0,c
  2746   0002C0  0E0D               	movlw	13
  2747   0002C2  ECFD  F007         	call	_motor_Write
  2748   0002C6  6E65               	movwf	motor_RFID@flag^0,c
  2749   0002C8                     
  2750                           ;TAD_RFID.c: 414:                     if (flag != 0){
  2751   0002C8  5065               	movf	motor_RFID@flag^0,w,c
  2752   0002CA  B4D8               	btfsc	status,2,c
  2753   0002CC  EF6A  F001         	goto	u3141
  2754   0002D0  EF6C  F001         	goto	u3140
  2755   0002D4                     u3141:
  2756   0002D4  EFAD  F005         	goto	l488
  2757   0002D8                     u3140:
  2758   0002D8                     l3841:
  2759                           
  2760                           ;TAD_RFID.c: 415:                         substate = 14;
  2761   0002D8  0E0E               	movlw	14
  2762   0002DA  6E2C               	movwf	motor_RFID@substate^0,c
  2763   0002DC  EFAD  F005         	goto	l488
  2764   0002E0                     l3843:
  2765                           
  2766                           ;TAD_RFID.c: 420:                     flag = motor_Read(0x06);
  2767   0002E0  0E06               	movlw	6
  2768   0002E2  EC6C  F006         	call	_motor_Read
  2769   0002E6  6E65               	movwf	motor_RFID@flag^0,c
  2770   0002E8                     
  2771                           ;TAD_RFID.c: 421:                     if (flag == 0xFF) {
  2772   0002E8  2865               	incf	motor_RFID@flag^0,w,c
  2773   0002EA  A4D8               	btfss	status,2,c
  2774   0002EC  EF7A  F001         	goto	u3151
  2775   0002F0  EF7C  F001         	goto	u3150
  2776   0002F4                     u3151:
  2777   0002F4  EF7E  F001         	goto	l3849
  2778   0002F8                     u3150:
  2779   0002F8  EF4D  F000         	goto	l3739
  2780   0002FC                     l3849:
  2781   0002FC  0EFE               	movlw	254
  2782   0002FE  1865               	xorwf	motor_RFID@flag^0,w,c
  2783   000300  B4D8               	btfsc	status,2,c
  2784   000302  EF85  F001         	goto	u3161
  2785   000306  EF87  F001         	goto	u3160
  2786   00030A                     u3161:
  2787   00030A  EFAD  F005         	goto	l488
  2788   00030E                     u3160:
  2789   00030E                     
  2790                           ;TAD_RFID.c: 425:                         tempRegValue = flag;
  2791   00030E  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  2792   000312                     
  2793                           ;TAD_RFID.c: 426:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  2794   000312  5028               	movf	motor_RFID@i^0,w,c
  2795   000314  B4D8               	btfsc	status,2,c
  2796   000316  EF8F  F001         	goto	u3171
  2797   00031A  EF91  F001         	goto	u3170
  2798   00031E                     u3171:
  2799   00031E  EFA0  F001         	goto	l373
  2800   000322                     u3170:
  2801   000322  C023  F05E         	movff	motor_RFID@tempRegValue,??_motor_RFID
  2802   000326  0E1B               	movlw	27
  2803   000328  165E               	andwf	??_motor_RFID^0,f,c
  2804   00032A  A4D8               	btfss	status,2,c
  2805   00032C  EF9A  F001         	goto	u3181
  2806   000330  EF9C  F001         	goto	u3180
  2807   000334                     u3181:
  2808   000334  EFA0  F001         	goto	l373
  2809   000338                     u3180:
  2810   000338                     l3857:
  2811                           
  2812                           ;TAD_RFID.c: 427:                             substate = 15;
  2813   000338  0E0F               	movlw	15
  2814   00033A  6E2C               	movwf	motor_RFID@substate^0,c
  2815                           
  2816                           ;TAD_RFID.c: 428:                         } else {
  2817   00033C  EFAD  F005         	goto	l488
  2818   000340                     l373:
  2819                           
  2820                           ;TAD_RFID.c: 429:                             substate = 0;
  2821   000340  6A2C               	clrf	motor_RFID@substate^0,c
  2822                           
  2823                           ;TAD_RFID.c: 430:                             state = 0;
  2824   000342  6A2D               	clrf	motor_RFID@state^0,c
  2825   000344  EFAD  F005         	goto	l488
  2826   000348                     l3859:
  2827                           
  2828                           ;TAD_RFID.c: 437:                     flag = motor_Read(0x0A);
  2829   000348  0E0A               	movlw	10
  2830   00034A  EC6C  F006         	call	_motor_Read
  2831   00034E  6E65               	movwf	motor_RFID@flag^0,c
  2832   000350                     
  2833                           ;TAD_RFID.c: 438:                     if (flag == 0xFF) {
  2834   000350  2865               	incf	motor_RFID@flag^0,w,c
  2835   000352  A4D8               	btfss	status,2,c
  2836   000354  EFAE  F001         	goto	u3191
  2837   000358  EFB0  F001         	goto	u3190
  2838   00035C                     u3191:
  2839   00035C  EFB2  F001         	goto	l3865
  2840   000360                     u3190:
  2841   000360  EF4D  F000         	goto	l3739
  2842   000364                     l3865:
  2843   000364  0EFE               	movlw	254
  2844   000366  1865               	xorwf	motor_RFID@flag^0,w,c
  2845   000368  B4D8               	btfsc	status,2,c
  2846   00036A  EFB9  F001         	goto	u3201
  2847   00036E  EFBB  F001         	goto	u3200
  2848   000372                     u3201:
  2849   000372  EF4F  F002         	goto	l329
  2850   000376                     u3200:
  2851   000376                     
  2852                           ;TAD_RFID.c: 442:                         fifoLevel = flag;
  2853   000376  C065  F021         	movff	motor_RFID@flag,motor_RFID@fifoLevel
  2854   00037A                     l3869:
  2855                           
  2856                           ;TAD_RFID.c: 443:                         substate = 16;
  2857   00037A  0E10               	movlw	16
  2858   00037C  6E2C               	movwf	motor_RFID@substate^0,c
  2859   00037E  EFAD  F005         	goto	l488
  2860   000382                     l3871:
  2861                           
  2862                           ;TAD_RFID.c: 449:                     flag = motor_Read(0x0C);
  2863   000382  0E0C               	movlw	12
  2864   000384  EC6C  F006         	call	_motor_Read
  2865   000388  6E65               	movwf	motor_RFID@flag^0,c
  2866   00038A                     
  2867                           ;TAD_RFID.c: 450:                     if (flag == 0xFF) {
  2868   00038A  2865               	incf	motor_RFID@flag^0,w,c
  2869   00038C  A4D8               	btfss	status,2,c
  2870   00038E  EFCB  F001         	goto	u3211
  2871   000392  EFCD  F001         	goto	u3210
  2872   000396                     u3211:
  2873   000396  EFCF  F001         	goto	l3877
  2874   00039A                     u3210:
  2875   00039A  EF4D  F000         	goto	l3739
  2876   00039E                     l3877:
  2877   00039E  0EFE               	movlw	254
  2878   0003A0  1865               	xorwf	motor_RFID@flag^0,w,c
  2879   0003A2  B4D8               	btfsc	status,2,c
  2880   0003A4  EFD6  F001         	goto	u3221
  2881   0003A8  EFD8  F001         	goto	u3220
  2882   0003AC                     u3221:
  2883   0003AC  EF4F  F002         	goto	l329
  2884   0003B0                     u3220:
  2885   0003B0                     
  2886                           ;TAD_RFID.c: 454:                         lastBitsVal = flag & 0x07;
  2887   0003B0  5065               	movf	motor_RFID@flag^0,w,c
  2888   0003B2  0B07               	andlw	7
  2889   0003B4  6E22               	movwf	motor_RFID@lastBitsVal^0,c
  2890   0003B6                     l3881:
  2891                           
  2892                           ;TAD_RFID.c: 455:                         substate = 17;
  2893   0003B6  0E11               	movlw	17
  2894   0003B8  6E2C               	movwf	motor_RFID@substate^0,c
  2895   0003BA  EFAD  F005         	goto	l488
  2896   0003BE                     l3883:
  2897                           
  2898                           ;TAD_RFID.c: 461:                     if (lastBitsVal)
  2899   0003BE  5022               	movf	motor_RFID@lastBitsVal^0,w,c
  2900   0003C0  B4D8               	btfsc	status,2,c
  2901   0003C2  EFE5  F001         	goto	u3231
  2902   0003C6  EFE7  F001         	goto	u3230
  2903   0003CA                     u3231:
  2904   0003CA  EFEF  F001         	goto	l3887
  2905   0003CE                     u3230:
  2906   0003CE                     
  2907                           ;TAD_RFID.c: 462:                         backBitsCalc = (fifoLevel - 1) * 8 + lastBitsV
      +                          al;
  2908   0003CE  5021               	movf	motor_RFID@fifoLevel^0,w,c
  2909   0003D0  0D08               	mullw	8
  2910   0003D2  50F3               	movf	243,w,c
  2911   0003D4  2422               	addwf	motor_RFID@lastBitsVal^0,w,c
  2912   0003D6  0FF8               	addlw	248
  2913   0003D8  6E61               	movwf	motor_RFID@backBitsCalc^0,c
  2914   0003DA  EFF3  F001         	goto	l3889
  2915   0003DE                     l3887:
  2916                           
  2917                           ;TAD_RFID.c: 464:                         backBitsCalc = fifoLevel * 8;
  2918   0003DE  5021               	movf	motor_RFID@fifoLevel^0,w,c
  2919   0003E0  0D08               	mullw	8
  2920   0003E2  CFF3 F061          	movff	prodl,motor_RFID@backBitsCalc
  2921   0003E6                     l3889:
  2922                           
  2923                           ;TAD_RFID.c: 467:                     if (backBitsCalc == 0x10) {
  2924   0003E6  0E10               	movlw	16
  2925   0003E8  1861               	xorwf	motor_RFID@backBitsCalc^0,w,c
  2926   0003EA  A4D8               	btfss	status,2,c
  2927   0003EC  EFFA  F001         	goto	u3241
  2928   0003F0  EFFC  F001         	goto	u3240
  2929   0003F4                     u3241:
  2930   0003F4  EF00  F002         	goto	l386
  2931   0003F8                     u3240:
  2932   0003F8                     
  2933                           ;TAD_RFID.c: 468:                         state = 1;
  2934   0003F8  0E01               	movlw	1
  2935   0003FA  6E2D               	movwf	motor_RFID@state^0,c
  2936   0003FC  EF4D  F000         	goto	l3739
  2937   000400                     l386:
  2938                           
  2939                           ;TAD_RFID.c: 471:                         state = 0;
  2940   000400  6A2D               	clrf	motor_RFID@state^0,c
  2941                           
  2942                           ;TAD_RFID.c: 472:                         substate = 0;
  2943   000402  6A2C               	clrf	motor_RFID@substate^0,c
  2944   000404  EFAD  F005         	goto	l488
  2945   000408                     l3897:
  2946   000408  502C               	movf	motor_RFID@substate^0,w,c
  2947                           
  2948                           ; Switch size 1, requested type "simple"
  2949                           ; Number of cases is 18, Range of values is 0 to 17
  2950                           ; switch strategies available:
  2951                           ; Name         Instructions Cycles
  2952                           ; simple_byte           55    28 (average)
  2953                           ;	Chosen strategy is simple_byte
  2954   00040A  0A00               	xorlw	0	; case 0
  2955   00040C  B4D8               	btfsc	status,2,c
  2956   00040E  EF17  F000         	goto	l3721
  2957   000412  0A01               	xorlw	1	; case 1
  2958   000414  B4D8               	btfsc	status,2,c
  2959   000416  EF2B  F000         	goto	l3727
  2960   00041A  0A03               	xorlw	3	; case 2
  2961   00041C  B4D8               	btfsc	status,2,c
  2962   00041E  EF41  F000         	goto	l3735
  2963   000422  0A01               	xorlw	1	; case 3
  2964   000424  B4D8               	btfsc	status,2,c
  2965   000426  EF5F  F000         	goto	l3747
  2966   00042A  0A07               	xorlw	7	; case 4
  2967   00042C  B4D8               	btfsc	status,2,c
  2968   00042E  EF72  F000         	goto	l3753
  2969   000432  0A01               	xorlw	1	; case 5
  2970   000434  B4D8               	btfsc	status,2,c
  2971   000436  EF8F  F000         	goto	l3765
  2972   00043A  0A03               	xorlw	3	; case 6
  2973   00043C  B4D8               	btfsc	status,2,c
  2974   00043E  EFA2  F000         	goto	l3771
  2975   000442  0A01               	xorlw	1	; case 7
  2976   000444  B4D8               	btfsc	status,2,c
  2977   000446  EFB4  F000         	goto	l3777
  2978   00044A  0A0F               	xorlw	15	; case 8
  2979   00044C  B4D8               	btfsc	status,2,c
  2980   00044E  EFC6  F000         	goto	l3783
  2981   000452  0A01               	xorlw	1	; case 9
  2982   000454  B4D8               	btfsc	status,2,c
  2983   000456  EFD8  F000         	goto	l3789
  2984   00045A  0A03               	xorlw	3	; case 10
  2985   00045C  B4D8               	btfsc	status,2,c
  2986   00045E  EFF5  F000         	goto	l3801
  2987   000462  0A01               	xorlw	1	; case 11
  2988   000464  B4D8               	btfsc	status,2,c
  2989   000466  EF09  F001         	goto	l3809
  2990   00046A  0A07               	xorlw	7	; case 12
  2991   00046C  B4D8               	btfsc	status,2,c
  2992   00046E  EF3A  F001         	goto	l3825
  2993   000472  0A01               	xorlw	1	; case 13
  2994   000474  B4D8               	btfsc	status,2,c
  2995   000476  EF5D  F001         	goto	l3837
  2996   00047A  0A03               	xorlw	3	; case 14
  2997   00047C  B4D8               	btfsc	status,2,c
  2998   00047E  EF70  F001         	goto	l3843
  2999   000482  0A01               	xorlw	1	; case 15
  3000   000484  B4D8               	btfsc	status,2,c
  3001   000486  EFA4  F001         	goto	l3859
  3002   00048A  0A1F               	xorlw	31	; case 16
  3003   00048C  B4D8               	btfsc	status,2,c
  3004   00048E  EFC1  F001         	goto	l3871
  3005   000492  0A01               	xorlw	1	; case 17
  3006   000494  B4D8               	btfsc	status,2,c
  3007   000496  EFDF  F001         	goto	l3883
  3008   00049A  EFAD  F005         	goto	l488
  3009   00049E                     l329:
  3010                           
  3011                           ;TAD_RFID.c: 476:             break;
  3012   00049E  EFAD  F005         	goto	l488
  3013   0004A2                     l3899:
  3014                           
  3015                           ;TAD_RFID.c: 482:                     flag = motor_Write(0x0D, 0x00);
  3016   0004A2  0E00               	movlw	0
  3017   0004A4  6E4E               	movwf	motor_Write@value^0,c
  3018   0004A6  0E0D               	movlw	13
  3019   0004A8  ECFD  F007         	call	_motor_Write
  3020   0004AC  6E65               	movwf	motor_RFID@flag^0,c
  3021   0004AE                     
  3022                           ;TAD_RFID.c: 483:                     if (flag != 0){
  3023   0004AE  5065               	movf	motor_RFID@flag^0,w,c
  3024   0004B0  B4D8               	btfsc	status,2,c
  3025   0004B2  EF5D  F002         	goto	u3251
  3026   0004B6  EF5F  F002         	goto	u3250
  3027   0004BA                     u3251:
  3028   0004BA  EFAD  F005         	goto	l488
  3029   0004BE                     u3250:
  3030   0004BE                     
  3031                           ;TAD_RFID.c: 484:                     UID[0] = 0x93;
  3032   0004BE  0E93               	movlw	147
  3033   0004C0  6E01               	movwf	motor_RFID@UID^0,c
  3034                           
  3035                           ;TAD_RFID.c: 485:                     UID[1] = 0x20;
  3036   0004C2  0E20               	movlw	32
  3037   0004C4  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3038                           
  3039                           ;TAD_RFID.c: 486:                     substate = 1;
  3040   0004C6  0E01               	movlw	1
  3041   0004C8  6E2C               	movwf	motor_RFID@substate^0,c
  3042   0004CA  EFAD  F005         	goto	l488
  3043   0004CE                     l3905:
  3044                           
  3045                           ;TAD_RFID.c: 491:                     flag = motor_Read(0x08);
  3046   0004CE  0E08               	movlw	8
  3047   0004D0  EC6C  F006         	call	_motor_Read
  3048   0004D4  6E65               	movwf	motor_RFID@flag^0,c
  3049   0004D6                     
  3050                           ;TAD_RFID.c: 492:                     if (flag == 0xFF) {
  3051   0004D6  2865               	incf	motor_RFID@flag^0,w,c
  3052   0004D8  A4D8               	btfss	status,2,c
  3053   0004DA  EF71  F002         	goto	u3261
  3054   0004DE  EF73  F002         	goto	u3260
  3055   0004E2                     u3261:
  3056   0004E2  EF75  F002         	goto	l3911
  3057   0004E6                     u3260:
  3058   0004E6  EF00  F002         	goto	l386
  3059   0004EA                     l3911:
  3060   0004EA  0EFE               	movlw	254
  3061   0004EC  1865               	xorwf	motor_RFID@flag^0,w,c
  3062   0004EE  B4D8               	btfsc	status,2,c
  3063   0004F0  EF7C  F002         	goto	u3271
  3064   0004F4  EF7E  F002         	goto	u3270
  3065   0004F8                     u3271:
  3066   0004F8  EFAD  F005         	goto	l488
  3067   0004FC                     u3270:
  3068   0004FC                     
  3069                           ;TAD_RFID.c: 497:                         tempRegValue = flag;
  3070   0004FC  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3071   000500  EF3D  F000         	goto	l3733
  3072   000504                     l3917:
  3073                           
  3074                           ;TAD_RFID.c: 503:                     flag = motor_Write(0x08, tempRegValue & ~0x08);
  3075   000504  5023               	movf	motor_RFID@tempRegValue^0,w,c
  3076   000506  0BF7               	andlw	247
  3077   000508  6E4E               	movwf	motor_Write@value^0,c
  3078   00050A  0E08               	movlw	8
  3079   00050C  ECFD  F007         	call	_motor_Write
  3080   000510  6E65               	movwf	motor_RFID@flag^0,c
  3081   000512                     
  3082                           ;TAD_RFID.c: 504:                     if (flag != 0){
  3083   000512  5065               	movf	motor_RFID@flag^0,w,c
  3084   000514  B4D8               	btfsc	status,2,c
  3085   000516  EF8F  F002         	goto	u3281
  3086   00051A  EF91  F002         	goto	u3280
  3087   00051E                     u3281:
  3088   00051E  EFAD  F005         	goto	l488
  3089   000522                     u3280:
  3090   000522  EF5B  F000         	goto	l3745
  3091   000526                     l3923:
  3092                           
  3093                           ;TAD_RFID.c: 510:                     irqEn = 0x77;
  3094   000526  0E77               	movlw	119
  3095   000528  6E2B               	movwf	motor_RFID@irqEn^0,c
  3096                           
  3097                           ;TAD_RFID.c: 511:                     waitIRq = 0x30;
  3098   00052A  0E30               	movlw	48
  3099   00052C  6E2A               	movwf	motor_RFID@waitIRq^0,c
  3100   00052E                     
  3101                           ;TAD_RFID.c: 512:                     flag = motor_Write(0x02, irqEn | 0x80);
  3102   00052E  0EF7               	movlw	247
  3103   000530  6E4E               	movwf	motor_Write@value^0,c
  3104   000532  0E02               	movlw	2
  3105   000534  ECFD  F007         	call	_motor_Write
  3106   000538  6E65               	movwf	motor_RFID@flag^0,c
  3107   00053A                     
  3108                           ;TAD_RFID.c: 513:                     if (flag != 0){
  3109   00053A  5065               	movf	motor_RFID@flag^0,w,c
  3110   00053C  B4D8               	btfsc	status,2,c
  3111   00053E  EFA3  F002         	goto	u3291
  3112   000542  EFA5  F002         	goto	u3290
  3113   000546                     u3291:
  3114   000546  EFAD  F005         	goto	l488
  3115   00054A                     u3290:
  3116   00054A  EF6E  F000         	goto	l3751
  3117   00054E                     l3931:
  3118                           
  3119                           ;TAD_RFID.c: 519:                     flag = motor_Read(0x04);
  3120   00054E  0E04               	movlw	4
  3121   000550  EC6C  F006         	call	_motor_Read
  3122   000554  6E65               	movwf	motor_RFID@flag^0,c
  3123   000556                     
  3124                           ;TAD_RFID.c: 520:                     if (flag == 0xFF) {
  3125   000556  2865               	incf	motor_RFID@flag^0,w,c
  3126   000558  A4D8               	btfss	status,2,c
  3127   00055A  EFB1  F002         	goto	u3301
  3128   00055E  EFB3  F002         	goto	u3300
  3129   000562                     u3301:
  3130   000562  EFB5  F002         	goto	l3937
  3131   000566                     u3300:
  3132   000566  EF00  F002         	goto	l386
  3133   00056A                     l3937:
  3134   00056A  0EFE               	movlw	254
  3135   00056C  1865               	xorwf	motor_RFID@flag^0,w,c
  3136   00056E  B4D8               	btfsc	status,2,c
  3137   000570  EFBC  F002         	goto	u3311
  3138   000574  EFBE  F002         	goto	u3310
  3139   000578                     u3311:
  3140   000578  EFAD  F005         	goto	l488
  3141   00057C                     u3310:
  3142   00057C  EF89  F000         	goto	l3761
  3143   000580                     l3943:
  3144                           
  3145                           ;TAD_RFID.c: 531:                     flag = motor_Write(0x04, tempRegValue & ~0x80);
  3146   000580  5023               	movf	motor_RFID@tempRegValue^0,w,c
  3147   000582  0B7F               	andlw	127
  3148   000584  6E4E               	movwf	motor_Write@value^0,c
  3149   000586  0E04               	movlw	4
  3150   000588  ECFD  F007         	call	_motor_Write
  3151   00058C  6E65               	movwf	motor_RFID@flag^0,c
  3152   00058E                     
  3153                           ;TAD_RFID.c: 532:                     if (flag != 0){
  3154   00058E  5065               	movf	motor_RFID@flag^0,w,c
  3155   000590  B4D8               	btfsc	status,2,c
  3156   000592  EFCD  F002         	goto	u3321
  3157   000596  EFCF  F002         	goto	u3320
  3158   00059A                     u3321:
  3159   00059A  EFAD  F005         	goto	l488
  3160   00059E                     u3320:
  3161   00059E  EF9E  F000         	goto	l3769
  3162   0005A2                     l3949:
  3163                           
  3164                           ;TAD_RFID.c: 538:                     flag = motor_Read(0x0A);
  3165   0005A2  0E0A               	movlw	10
  3166   0005A4  EC6C  F006         	call	_motor_Read
  3167   0005A8  6E65               	movwf	motor_RFID@flag^0,c
  3168   0005AA                     
  3169                           ;TAD_RFID.c: 539:                     if (flag == 0xFF) {
  3170   0005AA  2865               	incf	motor_RFID@flag^0,w,c
  3171   0005AC  A4D8               	btfss	status,2,c
  3172   0005AE  EFDB  F002         	goto	u3331
  3173   0005B2  EFDD  F002         	goto	u3330
  3174   0005B6                     u3331:
  3175   0005B6  EFDF  F002         	goto	l3955
  3176   0005BA                     u3330:
  3177   0005BA  EF00  F002         	goto	l386
  3178   0005BE                     l3955:
  3179   0005BE  0EFE               	movlw	254
  3180   0005C0  1865               	xorwf	motor_RFID@flag^0,w,c
  3181   0005C2  B4D8               	btfsc	status,2,c
  3182   0005C4  EFE6  F002         	goto	u3341
  3183   0005C8  EFE8  F002         	goto	u3340
  3184   0005CC                     u3341:
  3185   0005CC  EFAD  F005         	goto	l488
  3186   0005D0                     u3340:
  3187   0005D0                     
  3188                           ;TAD_RFID.c: 544:                         tempRegValue = flag;
  3189   0005D0  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3190   0005D4  EFB0  F000         	goto	l3775
  3191   0005D8                     l3961:
  3192                           
  3193                           ;TAD_RFID.c: 550:                     flag = motor_Write(0x0A, tempRegValue | 0x80);
  3194   0005D8  5023               	movf	motor_RFID@tempRegValue^0,w,c
  3195   0005DA  0980               	iorlw	128
  3196   0005DC  6E4E               	movwf	motor_Write@value^0,c
  3197   0005DE  0E0A               	movlw	10
  3198   0005E0  ECFD  F007         	call	_motor_Write
  3199   0005E4  6E65               	movwf	motor_RFID@flag^0,c
  3200   0005E6                     
  3201                           ;TAD_RFID.c: 551:                     if (flag != 0){
  3202   0005E6  5065               	movf	motor_RFID@flag^0,w,c
  3203   0005E8  B4D8               	btfsc	status,2,c
  3204   0005EA  EFF9  F002         	goto	u3351
  3205   0005EE  EFFB  F002         	goto	u3350
  3206   0005F2                     u3351:
  3207   0005F2  EFAD  F005         	goto	l488
  3208   0005F6                     u3350:
  3209   0005F6  EFC2  F000         	goto	l3781
  3210   0005FA                     l3967:
  3211                           
  3212                           ;TAD_RFID.c: 557:                     flag = motor_Write(0x01, 0x00);
  3213   0005FA  0E00               	movlw	0
  3214   0005FC  6E4E               	movwf	motor_Write@value^0,c
  3215   0005FE  0E01               	movlw	1
  3216   000600  ECFD  F007         	call	_motor_Write
  3217   000604  6E65               	movwf	motor_RFID@flag^0,c
  3218   000606                     
  3219                           ;TAD_RFID.c: 558:                     if (flag != 0){
  3220   000606  5065               	movf	motor_RFID@flag^0,w,c
  3221   000608  B4D8               	btfsc	status,2,c
  3222   00060A  EF09  F003         	goto	u3361
  3223   00060E  EF0B  F003         	goto	u3360
  3224   000612                     u3361:
  3225   000612  EFAD  F005         	goto	l488
  3226   000616                     u3360:
  3227   000616  EFD4  F000         	goto	l3787
  3228   00061A                     l3973:
  3229                           
  3230                           ;TAD_RFID.c: 564:                     flag = motor_Write(0x09, UID[0]);
  3231   00061A  C001  F04E         	movff	motor_RFID@UID,motor_Write@value
  3232   00061E  0E09               	movlw	9
  3233   000620  ECFD  F007         	call	_motor_Write
  3234   000624  6E65               	movwf	motor_RFID@flag^0,c
  3235   000626                     
  3236                           ;TAD_RFID.c: 565:                     if (flag != 0){
  3237   000626  5065               	movf	motor_RFID@flag^0,w,c
  3238   000628  B4D8               	btfsc	status,2,c
  3239   00062A  EF19  F003         	goto	u3371
  3240   00062E  EF1B  F003         	goto	u3370
  3241   000632                     u3371:
  3242   000632  EFAD  F005         	goto	l488
  3243   000636                     u3370:
  3244   000636  EFF1  F000         	goto	l3799
  3245   00063A                     l3979:
  3246                           
  3247                           ;TAD_RFID.c: 570:                     flag = motor_Write(0x09, UID[1]);
  3248   00063A  C002  F04E         	movff	motor_RFID@UID+1,motor_Write@value
  3249   00063E  0E09               	movlw	9
  3250   000640  ECFD  F007         	call	_motor_Write
  3251   000644  6E65               	movwf	motor_RFID@flag^0,c
  3252   000646                     
  3253                           ;TAD_RFID.c: 571:                     if (flag != 0){
  3254   000646  5065               	movf	motor_RFID@flag^0,w,c
  3255   000648  B4D8               	btfsc	status,2,c
  3256   00064A  EF29  F003         	goto	u3381
  3257   00064E  EF2B  F003         	goto	u3380
  3258   000652                     u3381:
  3259   000652  EFAD  F005         	goto	l488
  3260   000656                     u3380:
  3261   000656  EF05  F001         	goto	l3807
  3262   00065A                     l3985:
  3263                           
  3264                           ;TAD_RFID.c: 577:                     flag = motor_Write(0x01, 0x0C);
  3265   00065A  0E0C               	movlw	12
  3266   00065C  6E4E               	movwf	motor_Write@value^0,c
  3267   00065E  0E01               	movlw	1
  3268   000660  ECFD  F007         	call	_motor_Write
  3269   000664  6E65               	movwf	motor_RFID@flag^0,c
  3270   000666                     
  3271                           ;TAD_RFID.c: 578:                     if (flag != 0){
  3272   000666  5065               	movf	motor_RFID@flag^0,w,c
  3273   000668  B4D8               	btfsc	status,2,c
  3274   00066A  EF39  F003         	goto	u3391
  3275   00066E  EF3B  F003         	goto	u3390
  3276   000672                     u3391:
  3277   000672  EFAD  F005         	goto	l488
  3278   000676                     u3390:
  3279   000676  EF36  F001         	goto	l3823
  3280   00067A                     l3991:
  3281                           
  3282                           ;TAD_RFID.c: 584:                     flag = motor_Read(0x0D);
  3283   00067A  0E0D               	movlw	13
  3284   00067C  EC6C  F006         	call	_motor_Read
  3285   000680  6E65               	movwf	motor_RFID@flag^0,c
  3286   000682                     
  3287                           ;TAD_RFID.c: 585:                     if (flag == 0xFF) {
  3288   000682  2865               	incf	motor_RFID@flag^0,w,c
  3289   000684  A4D8               	btfss	status,2,c
  3290   000686  EF47  F003         	goto	u3401
  3291   00068A  EF49  F003         	goto	u3400
  3292   00068E                     u3401:
  3293   00068E  EF4B  F003         	goto	l3997
  3294   000692                     u3400:
  3295   000692  EF00  F002         	goto	l386
  3296   000696                     l3997:
  3297   000696  0EFE               	movlw	254
  3298   000698  1865               	xorwf	motor_RFID@flag^0,w,c
  3299   00069A  B4D8               	btfsc	status,2,c
  3300   00069C  EF52  F003         	goto	u3411
  3301   0006A0  EF54  F003         	goto	u3410
  3302   0006A4                     u3411:
  3303   0006A4  EFAD  F005         	goto	l488
  3304   0006A8                     u3410:
  3305   0006A8                     
  3306                           ;TAD_RFID.c: 590:                         tempRegValue = flag;
  3307   0006A8  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3308   0006AC  EF59  F001         	goto	l3835
  3309   0006B0                     l4003:
  3310                           
  3311                           ;TAD_RFID.c: 596:                     flag = motor_Write(0x0D, tempRegValue | 0x80);
  3312   0006B0  5023               	movf	motor_RFID@tempRegValue^0,w,c
  3313   0006B2  0980               	iorlw	128
  3314   0006B4  6E4E               	movwf	motor_Write@value^0,c
  3315   0006B6  0E0D               	movlw	13
  3316   0006B8  ECFD  F007         	call	_motor_Write
  3317   0006BC  6E65               	movwf	motor_RFID@flag^0,c
  3318   0006BE                     
  3319                           ;TAD_RFID.c: 597:                     if (flag != 0){
  3320   0006BE  5065               	movf	motor_RFID@flag^0,w,c
  3321   0006C0  B4D8               	btfsc	status,2,c
  3322   0006C2  EF65  F003         	goto	u3421
  3323   0006C6  EF67  F003         	goto	u3420
  3324   0006CA                     u3421:
  3325   0006CA  EFAD  F005         	goto	l488
  3326   0006CE                     u3420:
  3327   0006CE                     
  3328                           ;TAD_RFID.c: 598:                     i = 0xFF;
  3329   0006CE  6828               	setf	motor_RFID@i^0,c
  3330   0006D0  EF6C  F001         	goto	l3841
  3331   0006D4                     l4011:
  3332                           
  3333                           ;TAD_RFID.c: 604:                     flag = motor_Read(0x04);
  3334   0006D4  0E04               	movlw	4
  3335   0006D6  EC6C  F006         	call	_motor_Read
  3336   0006DA  6E65               	movwf	motor_RFID@flag^0,c
  3337   0006DC                     
  3338                           ;TAD_RFID.c: 605:                     if (flag == 0xFF) {
  3339   0006DC  2865               	incf	motor_RFID@flag^0,w,c
  3340   0006DE  A4D8               	btfss	status,2,c
  3341   0006E0  EF74  F003         	goto	u3431
  3342   0006E4  EF76  F003         	goto	u3430
  3343   0006E8                     u3431:
  3344   0006E8  EF78  F003         	goto	l4017
  3345   0006EC                     u3430:
  3346   0006EC  EF00  F002         	goto	l386
  3347   0006F0                     l4017:
  3348   0006F0  0EFE               	movlw	254
  3349   0006F2  1865               	xorwf	motor_RFID@flag^0,w,c
  3350   0006F4  B4D8               	btfsc	status,2,c
  3351   0006F6  EF7F  F003         	goto	u3441
  3352   0006FA  EF81  F003         	goto	u3440
  3353   0006FE                     u3441:
  3354   0006FE  EFAD  F005         	goto	l488
  3355   000702                     u3440:
  3356   000702                     
  3357                           ;TAD_RFID.c: 610:                         n = flag;
  3358   000702  C065  F029         	movff	motor_RFID@flag,motor_RFID@n
  3359                           
  3360                           ;TAD_RFID.c: 611:                         if ((n & 0x01) || (n & waitIRq) || (--i == 0))
      +                           {
  3361   000706  B029               	btfsc	motor_RFID@n^0,0,c
  3362   000708  EF88  F003         	goto	u3451
  3363   00070C  EF8A  F003         	goto	u3450
  3364   000710                     u3451:
  3365   000710  EF9C  F001         	goto	l3857
  3366   000714                     u3450:
  3367   000714  5029               	movf	motor_RFID@n^0,w,c
  3368   000716  142A               	andwf	motor_RFID@waitIRq^0,w,c
  3369   000718  0900               	iorlw	0
  3370   00071A  A4D8               	btfss	status,2,c
  3371   00071C  EF92  F003         	goto	u3461
  3372   000720  EF94  F003         	goto	u3460
  3373   000724                     u3461:
  3374   000724  EF9C  F001         	goto	l3857
  3375   000728                     u3460:
  3376   000728  2E28               	decfsz	motor_RFID@i^0,f,c
  3377   00072A  EFAD  F005         	goto	l488
  3378   00072E  EF9C  F001         	goto	l3857
  3379   000732                     l4027:
  3380                           
  3381                           ;TAD_RFID.c: 618:                     flag = motor_Read(0x0D);
  3382   000732  0E0D               	movlw	13
  3383   000734  EC6C  F006         	call	_motor_Read
  3384   000738  6E65               	movwf	motor_RFID@flag^0,c
  3385   00073A                     
  3386                           ;TAD_RFID.c: 619:                     if (flag == 0xFF) {
  3387   00073A  2865               	incf	motor_RFID@flag^0,w,c
  3388   00073C  A4D8               	btfss	status,2,c
  3389   00073E  EFA3  F003         	goto	u3471
  3390   000742  EFA5  F003         	goto	u3470
  3391   000746                     u3471:
  3392   000746  EFA7  F003         	goto	l4033
  3393   00074A                     u3470:
  3394   00074A  EF00  F002         	goto	l386
  3395   00074E                     l4033:
  3396   00074E  0EFE               	movlw	254
  3397   000750  1865               	xorwf	motor_RFID@flag^0,w,c
  3398   000752  B4D8               	btfsc	status,2,c
  3399   000754  EFAE  F003         	goto	u3481
  3400   000758  EFB0  F003         	goto	u3480
  3401   00075C                     u3481:
  3402   00075C  EFAD  F005         	goto	l488
  3403   000760                     u3480:
  3404   000760                     
  3405                           ;TAD_RFID.c: 624:                         tempRegValue = flag;
  3406   000760  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3407   000764  EFBD  F001         	goto	l3869
  3408   000768                     l4039:
  3409                           
  3410                           ;TAD_RFID.c: 630:                     flag = motor_Write(0x0D, tempRegValue & ~0x80);
  3411   000768  5023               	movf	motor_RFID@tempRegValue^0,w,c
  3412   00076A  0B7F               	andlw	127
  3413   00076C  6E4E               	movwf	motor_Write@value^0,c
  3414   00076E  0E0D               	movlw	13
  3415   000770  ECFD  F007         	call	_motor_Write
  3416   000774  6E65               	movwf	motor_RFID@flag^0,c
  3417   000776                     
  3418                           ;TAD_RFID.c: 631:                     if (flag != 0){
  3419   000776  5065               	movf	motor_RFID@flag^0,w,c
  3420   000778  B4D8               	btfsc	status,2,c
  3421   00077A  EFC1  F003         	goto	u3491
  3422   00077E  EFC3  F003         	goto	u3490
  3423   000782                     u3491:
  3424   000782  EFAD  F005         	goto	l488
  3425   000786                     u3490:
  3426   000786  EFDB  F001         	goto	l3881
  3427   00078A                     l4045:
  3428                           
  3429                           ;TAD_RFID.c: 637:                     flag = motor_Read(0x06);
  3430   00078A  0E06               	movlw	6
  3431   00078C  EC6C  F006         	call	_motor_Read
  3432   000790  6E65               	movwf	motor_RFID@flag^0,c
  3433   000792                     
  3434                           ;TAD_RFID.c: 638:                     if (flag == 0xFF) {
  3435   000792  2865               	incf	motor_RFID@flag^0,w,c
  3436   000794  A4D8               	btfss	status,2,c
  3437   000796  EFCF  F003         	goto	u3501
  3438   00079A  EFD1  F003         	goto	u3500
  3439   00079E                     u3501:
  3440   00079E  EFD3  F003         	goto	l4051
  3441   0007A2                     u3500:
  3442   0007A2  EF00  F002         	goto	l386
  3443   0007A6                     l4051:
  3444   0007A6  0EFE               	movlw	254
  3445   0007A8  1865               	xorwf	motor_RFID@flag^0,w,c
  3446   0007AA  B4D8               	btfsc	status,2,c
  3447   0007AC  EFDA  F003         	goto	u3511
  3448   0007B0  EFDC  F003         	goto	u3510
  3449   0007B4                     u3511:
  3450   0007B4  EFAD  F005         	goto	l488
  3451   0007B8                     u3510:
  3452   0007B8                     
  3453                           ;TAD_RFID.c: 643:                         tempRegValue = flag;
  3454   0007B8  C065  F023         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3455   0007BC                     
  3456                           ;TAD_RFID.c: 644:                         if (i != 0 && !(tempRegValue & 0x1B)) {
  3457   0007BC  5028               	movf	motor_RFID@i^0,w,c
  3458   0007BE  B4D8               	btfsc	status,2,c
  3459   0007C0  EFE4  F003         	goto	u3521
  3460   0007C4  EFE6  F003         	goto	u3520
  3461   0007C8                     u3521:
  3462   0007C8  EF00  F002         	goto	l386
  3463   0007CC                     u3520:
  3464   0007CC  C023  F05E         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3465   0007D0  0E1B               	movlw	27
  3466   0007D2  165E               	andwf	??_motor_RFID^0,f,c
  3467   0007D4  A4D8               	btfss	status,2,c
  3468   0007D6  EFEF  F003         	goto	u3531
  3469   0007DA  EFF1  F003         	goto	u3530
  3470   0007DE                     u3531:
  3471   0007DE  EF00  F002         	goto	l386
  3472   0007E2                     u3530:
  3473   0007E2                     
  3474                           ;TAD_RFID.c: 646:                             substate = 18;
  3475   0007E2  0E12               	movlw	18
  3476   0007E4  6E2C               	movwf	motor_RFID@substate^0,c
  3477                           
  3478                           ;TAD_RFID.c: 647:                         } else {
  3479   0007E6  EFAD  F005         	goto	l488
  3480   0007EA                     l4061:
  3481                           
  3482                           ;TAD_RFID.c: 657:                     flag = motor_Read(0x09);
  3483   0007EA  0E09               	movlw	9
  3484   0007EC  EC6C  F006         	call	_motor_Read
  3485   0007F0  6E65               	movwf	motor_RFID@flag^0,c
  3486   0007F2                     
  3487                           ;TAD_RFID.c: 658:                     if (flag == 0xFF) {
  3488   0007F2  2865               	incf	motor_RFID@flag^0,w,c
  3489   0007F4  A4D8               	btfss	status,2,c
  3490   0007F6  EFFF  F003         	goto	u3541
  3491   0007FA  EF01  F004         	goto	u3540
  3492   0007FE                     u3541:
  3493   0007FE  EF03  F004         	goto	l4067
  3494   000802                     u3540:
  3495   000802  EF00  F002         	goto	l386
  3496   000806                     l4067:
  3497   000806  0EFE               	movlw	254
  3498   000808  1865               	xorwf	motor_RFID@flag^0,w,c
  3499   00080A  B4D8               	btfsc	status,2,c
  3500   00080C  EF0A  F004         	goto	u3551
  3501   000810  EF0C  F004         	goto	u3550
  3502   000814                     u3551:
  3503   000814  EFAD  F005         	goto	l488
  3504   000818                     u3550:
  3505   000818                     
  3506                           ;TAD_RFID.c: 663:                         UID[0] = flag;
  3507   000818  C065  F001         	movff	motor_RFID@flag,motor_RFID@UID
  3508   00081C                     
  3509                           ;TAD_RFID.c: 664:                         substate = 19;
  3510   00081C  0E13               	movlw	19
  3511   00081E  6E2C               	movwf	motor_RFID@substate^0,c
  3512   000820  EFAD  F005         	goto	l488
  3513   000824                     l4073:
  3514                           
  3515                           ;TAD_RFID.c: 669:                     flag = motor_Read(0x09);
  3516   000824  0E09               	movlw	9
  3517   000826  EC6C  F006         	call	_motor_Read
  3518   00082A  6E65               	movwf	motor_RFID@flag^0,c
  3519   00082C                     
  3520                           ;TAD_RFID.c: 670:                     if (flag == 0xFF) {
  3521   00082C  2865               	incf	motor_RFID@flag^0,w,c
  3522   00082E  A4D8               	btfss	status,2,c
  3523   000830  EF1C  F004         	goto	u3561
  3524   000834  EF1E  F004         	goto	u3560
  3525   000838                     u3561:
  3526   000838  EF20  F004         	goto	l4079
  3527   00083C                     u3560:
  3528   00083C  EF00  F002         	goto	l386
  3529   000840                     l4079:
  3530   000840  0EFE               	movlw	254
  3531   000842  1865               	xorwf	motor_RFID@flag^0,w,c
  3532   000844  B4D8               	btfsc	status,2,c
  3533   000846  EF27  F004         	goto	u3571
  3534   00084A  EF29  F004         	goto	u3570
  3535   00084E                     u3571:
  3536   00084E  EFAD  F005         	goto	l488
  3537   000852                     u3570:
  3538   000852                     
  3539                           ;TAD_RFID.c: 675:                         UID[1] = flag;
  3540   000852  C065  F002         	movff	motor_RFID@flag,motor_RFID@UID+1
  3541   000856                     
  3542                           ;TAD_RFID.c: 676:                         substate = 20;
  3543   000856  0E14               	movlw	20
  3544   000858  6E2C               	movwf	motor_RFID@substate^0,c
  3545   00085A  EFAD  F005         	goto	l488
  3546   00085E                     l4085:
  3547                           
  3548                           ;TAD_RFID.c: 681:                     flag = motor_Read(0x09);
  3549   00085E  0E09               	movlw	9
  3550   000860  EC6C  F006         	call	_motor_Read
  3551   000864  6E65               	movwf	motor_RFID@flag^0,c
  3552   000866                     
  3553                           ;TAD_RFID.c: 682:                     if (flag == 0xFF) {
  3554   000866  2865               	incf	motor_RFID@flag^0,w,c
  3555   000868  A4D8               	btfss	status,2,c
  3556   00086A  EF39  F004         	goto	u3581
  3557   00086E  EF3B  F004         	goto	u3580
  3558   000872                     u3581:
  3559   000872  EF3D  F004         	goto	l4091
  3560   000876                     u3580:
  3561   000876  EF00  F002         	goto	l386
  3562   00087A                     l4091:
  3563   00087A  0EFE               	movlw	254
  3564   00087C  1865               	xorwf	motor_RFID@flag^0,w,c
  3565   00087E  B4D8               	btfsc	status,2,c
  3566   000880  EF44  F004         	goto	u3591
  3567   000884  EF46  F004         	goto	u3590
  3568   000888                     u3591:
  3569   000888  EFAD  F005         	goto	l488
  3570   00088C                     u3590:
  3571   00088C                     
  3572                           ;TAD_RFID.c: 687:                         UID[2] = flag;
  3573   00088C  C065  F003         	movff	motor_RFID@flag,motor_RFID@UID+2
  3574   000890                     
  3575                           ;TAD_RFID.c: 688:                         substate = 21;
  3576   000890  0E15               	movlw	21
  3577   000892  6E2C               	movwf	motor_RFID@substate^0,c
  3578   000894  EFAD  F005         	goto	l488
  3579   000898                     l4097:
  3580                           
  3581                           ;TAD_RFID.c: 693:                     flag = motor_Read(0x09);
  3582   000898  0E09               	movlw	9
  3583   00089A  EC6C  F006         	call	_motor_Read
  3584   00089E  6E65               	movwf	motor_RFID@flag^0,c
  3585   0008A0                     
  3586                           ;TAD_RFID.c: 694:                     if (flag == 0xFF) {
  3587   0008A0  2865               	incf	motor_RFID@flag^0,w,c
  3588   0008A2  A4D8               	btfss	status,2,c
  3589   0008A4  EF56  F004         	goto	u3601
  3590   0008A8  EF58  F004         	goto	u3600
  3591   0008AC                     u3601:
  3592   0008AC  EF5A  F004         	goto	l4103
  3593   0008B0                     u3600:
  3594   0008B0  EF00  F002         	goto	l386
  3595   0008B4                     l4103:
  3596   0008B4  0EFE               	movlw	254
  3597   0008B6  1865               	xorwf	motor_RFID@flag^0,w,c
  3598   0008B8  B4D8               	btfsc	status,2,c
  3599   0008BA  EF61  F004         	goto	u3611
  3600   0008BE  EF63  F004         	goto	u3610
  3601   0008C2                     u3611:
  3602   0008C2  EFAD  F005         	goto	l488
  3603   0008C6                     u3610:
  3604   0008C6                     
  3605                           ;TAD_RFID.c: 699:                         UID[3] = flag;
  3606   0008C6  C065  F004         	movff	motor_RFID@flag,motor_RFID@UID+3
  3607   0008CA                     
  3608                           ;TAD_RFID.c: 700:                         substate = 22;
  3609   0008CA  0E16               	movlw	22
  3610   0008CC  6E2C               	movwf	motor_RFID@substate^0,c
  3611   0008CE  EFAD  F005         	goto	l488
  3612   0008D2                     l4109:
  3613                           
  3614                           ;TAD_RFID.c: 706:                     flag = motor_Read(0x09);
  3615   0008D2  0E09               	movlw	9
  3616   0008D4  EC6C  F006         	call	_motor_Read
  3617   0008D8  6E65               	movwf	motor_RFID@flag^0,c
  3618   0008DA                     
  3619                           ;TAD_RFID.c: 707:                     if (flag == 0xFF) {
  3620   0008DA  2865               	incf	motor_RFID@flag^0,w,c
  3621   0008DC  A4D8               	btfss	status,2,c
  3622   0008DE  EF73  F004         	goto	u3621
  3623   0008E2  EF75  F004         	goto	u3620
  3624   0008E6                     u3621:
  3625   0008E6  EF77  F004         	goto	l4115
  3626   0008EA                     u3620:
  3627   0008EA  EF00  F002         	goto	l386
  3628   0008EE                     l4115:
  3629   0008EE  0EFE               	movlw	254
  3630   0008F0  1865               	xorwf	motor_RFID@flag^0,w,c
  3631   0008F2  B4D8               	btfsc	status,2,c
  3632   0008F4  EF7E  F004         	goto	u3631
  3633   0008F8  EF80  F004         	goto	u3630
  3634   0008FC                     u3631:
  3635   0008FC  EFAD  F005         	goto	l488
  3636   000900                     u3630:
  3637   000900                     
  3638                           ;TAD_RFID.c: 712:                         UID[4] = flag;
  3639   000900  C065  F005         	movff	motor_RFID@flag,motor_RFID@UID+4
  3640                           
  3641                           ;TAD_RFID.c: 713:                         UID[5] = 0;
  3642   000904  6A06               	clrf	(motor_RFID@UID+5)^0,c
  3643   000906                     
  3644                           ;TAD_RFID.c: 714:                         substate = 23;
  3645   000906  0E17               	movlw	23
  3646   000908  6E2C               	movwf	motor_RFID@substate^0,c
  3647   00090A  EFAD  F005         	goto	l488
  3648   00090E                     l4121:
  3649                           
  3650                           ;TAD_RFID.c: 720:                     checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[3];
  3651   00090E  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3652   000910  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  3653   000912  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  3654   000914  1801               	xorwf	motor_RFID@UID^0,w,c
  3655   000916  6E25               	movwf	motor_RFID@checksum^0,c
  3656   000918                     
  3657                           ;TAD_RFID.c: 722:                     allZero = 1;
  3658   000918  0E01               	movlw	1
  3659   00091A  6E24               	movwf	motor_RFID@allZero^0,c
  3660   00091C                     
  3661                           ;TAD_RFID.c: 723:                     substate = 24;
  3662   00091C  0E18               	movlw	24
  3663   00091E  6E2C               	movwf	motor_RFID@substate^0,c
  3664                           
  3665                           ;TAD_RFID.c: 724:                     break;
  3666   000920  EFAD  F005         	goto	l488
  3667   000924                     l4127:
  3668                           
  3669                           ;TAD_RFID.c: 728:                     if (UID[0] != 0 || UID[1] != 0) {
  3670   000924  5001               	movf	motor_RFID@UID^0,w,c
  3671   000926  A4D8               	btfss	status,2,c
  3672   000928  EF98  F004         	goto	u3641
  3673   00092C  EF9A  F004         	goto	u3640
  3674   000930                     u3641:
  3675   000930  EFA2  F004         	goto	l471
  3676   000934                     u3640:
  3677   000934  5002               	movf	(motor_RFID@UID+1)^0,w,c
  3678   000936  B4D8               	btfsc	status,2,c
  3679   000938  EFA0  F004         	goto	u3651
  3680   00093C  EFA2  F004         	goto	u3650
  3681   000940                     u3651:
  3682   000940  EFA3  F004         	goto	l4131
  3683   000944                     u3650:
  3684   000944                     l471:
  3685                           
  3686                           ;TAD_RFID.c: 729:                         allZero = 0;
  3687   000944  6A24               	clrf	motor_RFID@allZero^0,c
  3688   000946                     l4131:
  3689                           
  3690                           ;TAD_RFID.c: 731:                     substate = 25;
  3691   000946  0E19               	movlw	25
  3692   000948  6E2C               	movwf	motor_RFID@substate^0,c
  3693                           
  3694                           ;TAD_RFID.c: 732:                     break;
  3695   00094A  EFAD  F005         	goto	l488
  3696   00094E                     l4133:
  3697                           
  3698                           ;TAD_RFID.c: 736:                     if (UID[2] != 0 || UID[3] != 0) {
  3699   00094E  5003               	movf	(motor_RFID@UID+2)^0,w,c
  3700   000950  A4D8               	btfss	status,2,c
  3701   000952  EFAD  F004         	goto	u3661
  3702   000956  EFAF  F004         	goto	u3660
  3703   00095A                     u3661:
  3704   00095A  EFB7  F004         	goto	l475
  3705   00095E                     u3660:
  3706   00095E  5004               	movf	(motor_RFID@UID+3)^0,w,c
  3707   000960  B4D8               	btfsc	status,2,c
  3708   000962  EFB5  F004         	goto	u3671
  3709   000966  EFB7  F004         	goto	u3670
  3710   00096A                     u3671:
  3711   00096A  EFB8  F004         	goto	l4137
  3712   00096E                     u3670:
  3713   00096E                     l475:
  3714                           
  3715                           ;TAD_RFID.c: 737:                         allZero = 0;
  3716   00096E  6A24               	clrf	motor_RFID@allZero^0,c
  3717   000970                     l4137:
  3718                           
  3719                           ;TAD_RFID.c: 739:                     substate = 26;
  3720   000970  0E1A               	movlw	26
  3721   000972  6E2C               	movwf	motor_RFID@substate^0,c
  3722                           
  3723                           ;TAD_RFID.c: 740:                     break;
  3724   000974  EFAD  F005         	goto	l488
  3725   000978                     l4139:
  3726                           
  3727                           ;TAD_RFID.c: 744:                     if (checksum != UID[4] || allZero) {
  3728   000978  5025               	movf	motor_RFID@checksum^0,w,c
  3729   00097A  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  3730   00097C  A4D8               	btfss	status,2,c
  3731   00097E  EFC3  F004         	goto	u3681
  3732   000982  EFC5  F004         	goto	u3680
  3733   000986                     u3681:
  3734   000986  EF00  F002         	goto	l386
  3735   00098A                     u3680:
  3736   00098A  5024               	movf	motor_RFID@allZero^0,w,c
  3737   00098C  B4D8               	btfsc	status,2,c
  3738   00098E  EFCB  F004         	goto	u3691
  3739   000992  EFCD  F004         	goto	u3690
  3740   000996                     u3691:
  3741   000996  EFCF  F004         	goto	l4143
  3742   00099A                     u3690:
  3743   00099A  EF00  F002         	goto	l386
  3744   00099E                     l4143:
  3745                           
  3746                           ;TAD_RFID.c: 750:                         substate = 27;
  3747   00099E  0E1B               	movlw	27
  3748   0009A0  6E2C               	movwf	motor_RFID@substate^0,c
  3749   0009A2  EFAD  F005         	goto	l488
  3750   0009A6                     l4145:
  3751                           
  3752                           ;TAD_RFID.c: 755:                     {;TAD_RFID.c: 756:                         char di
      +                          fferentUID = 1;
  3753   0009A6  0E01               	movlw	1
  3754   0009A8  6E62               	movwf	motor_RFID@differentUID^0,c
  3755   0009AA                     
  3756                           ;TAD_RFID.c: 757:                         unsigned char* currentUser = getActualUID();
  3757   0009AA  ECF4  F00A         	call	_getActualUID	;wreg free
  3758   0009AE  6E60               	movwf	motor_RFID@currentUser^0,c
  3759   0009B0                     
  3760                           ;TAD_RFID.c: 758:                         for (int i = 0; i < 5; i++) {
  3761   0009B0  0E00               	movlw	0
  3762   0009B2  6E64               	movwf	(motor_RFID@i_581+1)^0,c
  3763   0009B4  0E00               	movlw	0
  3764   0009B6  6E63               	movwf	motor_RFID@i_581^0,c
  3765   0009B8                     l4151:
  3766   0009B8  BE64               	btfsc	(motor_RFID@i_581+1)^0,7,c
  3767   0009BA  EFE8  F004         	goto	u3701
  3768   0009BE  5064               	movf	(motor_RFID@i_581+1)^0,w,c
  3769   0009C0  E109               	bnz	u3700
  3770   0009C2  0E05               	movlw	5
  3771   0009C4  5C63               	subwf	motor_RFID@i_581^0,w,c
  3772   0009C6  A0D8               	btfss	status,0,c
  3773   0009C8  EFE8  F004         	goto	u3701
  3774   0009CC  EFEA  F004         	goto	u3700
  3775   0009D0                     u3701:
  3776   0009D0  EFEC  F004         	goto	l4155
  3777   0009D4                     u3700:
  3778   0009D4  EF04  F005         	goto	l4163
  3779   0009D8                     l4155:
  3780                           
  3781                           ;TAD_RFID.c: 759:                             if(currentUser[i] != UID[i]) {
  3782   0009D8  5063               	movf	motor_RFID@i_581^0,w,c
  3783   0009DA  0F01               	addlw	low motor_RFID@UID
  3784   0009DC  6ED9               	movwf	fsr2l,c
  3785   0009DE  6ADA               	clrf	fsr2h,c
  3786   0009E0  5060               	movf	motor_RFID@currentUser^0,w,c
  3787   0009E2  2463               	addwf	motor_RFID@i_581^0,w,c
  3788   0009E4  6EE1               	movwf	fsr1l,c
  3789   0009E6  6AE2               	clrf	fsr1h,c
  3790   0009E8  50DE               	movf	postinc2,w,c
  3791   0009EA  18E6               	xorwf	postinc1,w,c
  3792   0009EC  B4D8               	btfsc	status,2,c
  3793   0009EE  EFFB  F004         	goto	u3711
  3794   0009F2  EFFD  F004         	goto	u3710
  3795   0009F6                     u3711:
  3796   0009F6  EF00  F005         	goto	l4159
  3797   0009FA                     u3710:
  3798   0009FA                     
  3799                           ;TAD_RFID.c: 760:                                 differentUID = 0;
  3800   0009FA  6A62               	clrf	motor_RFID@differentUID^0,c
  3801                           
  3802                           ;TAD_RFID.c: 761:                                 break;
  3803   0009FC  EF04  F005         	goto	l4163
  3804   000A00                     l4159:
  3805                           
  3806                           ;TAD_RFID.c: 763:                         }
  3807   000A00  4A63               	infsnz	motor_RFID@i_581^0,f,c
  3808   000A02  2A64               	incf	(motor_RFID@i_581+1)^0,f,c
  3809   000A04  EFDC  F004         	goto	l4151
  3810   000A08                     l4163:
  3811                           
  3812                           ;TAD_RFID.c: 764:                         if(differentUID == 0) {
  3813   000A08  5062               	movf	motor_RFID@differentUID^0,w,c
  3814   000A0A  A4D8               	btfss	status,2,c
  3815   000A0C  EF0A  F005         	goto	u3721
  3816   000A10  EF0C  F005         	goto	u3720
  3817   000A14                     u3721:
  3818   000A14  EF17  F005         	goto	l4167
  3819   000A18                     u3720:
  3820   000A18                     
  3821                           ;TAD_RFID.c: 765:                             setCurrentUser(UID[0], UID[1], UID[2], UID
      +                          [3], UID[4]);
  3822   000A18  C002  F059         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  3823   000A1C  C003  F05A         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  3824   000A20  C004  F05B         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  3825   000A24  C005  F05C         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  3826   000A28  5001               	movf	motor_RFID@UID^0,w,c
  3827   000A2A  ECC5  F00B         	call	_setCurrentUser
  3828   000A2E                     l4167:
  3829                           
  3830                           ;TAD_RFID.c: 767:                         substate = 28;
  3831   000A2E  0E1C               	movlw	28
  3832   000A30  6E2C               	movwf	motor_RFID@substate^0,c
  3833                           
  3834                           ;TAD_RFID.c: 768:                     };TAD_RFID.c: 769:                     break;
  3835   000A32  EFAD  F005         	goto	l488
  3836   000A36                     l4169:
  3837                           
  3838                           ;TAD_RFID.c: 773:                     flag = motor_Write(0x0D, 0x00);
  3839   000A36  0E00               	movlw	0
  3840   000A38  6E4E               	movwf	motor_Write@value^0,c
  3841   000A3A  0E0D               	movlw	13
  3842   000A3C  ECFD  F007         	call	_motor_Write
  3843   000A40  6E65               	movwf	motor_RFID@flag^0,c
  3844   000A42                     
  3845                           ;TAD_RFID.c: 774:                     if (flag != 0){
  3846   000A42  5065               	movf	motor_RFID@flag^0,w,c
  3847   000A44  B4D8               	btfsc	status,2,c
  3848   000A46  EF27  F005         	goto	u3731
  3849   000A4A  EF29  F005         	goto	u3730
  3850   000A4E                     u3731:
  3851   000A4E  EFAD  F005         	goto	l488
  3852   000A52                     u3730:
  3853   000A52  EF00  F002         	goto	l386
  3854   000A56                     l4177:
  3855   000A56  502C               	movf	motor_RFID@substate^0,w,c
  3856                           
  3857                           ; Switch size 1, requested type "simple"
  3858                           ; Number of cases is 29, Range of values is 0 to 28
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte           88    45 (average)
  3862                           ;	Chosen strategy is simple_byte
  3863   000A58  0A00               	xorlw	0	; case 0
  3864   000A5A  B4D8               	btfsc	status,2,c
  3865   000A5C  EF51  F002         	goto	l3899
  3866   000A60  0A01               	xorlw	1	; case 1
  3867   000A62  B4D8               	btfsc	status,2,c
  3868   000A64  EF67  F002         	goto	l3905
  3869   000A68  0A03               	xorlw	3	; case 2
  3870   000A6A  B4D8               	btfsc	status,2,c
  3871   000A6C  EF82  F002         	goto	l3917
  3872   000A70  0A01               	xorlw	1	; case 3
  3873   000A72  B4D8               	btfsc	status,2,c
  3874   000A74  EF93  F002         	goto	l3923
  3875   000A78  0A07               	xorlw	7	; case 4
  3876   000A7A  B4D8               	btfsc	status,2,c
  3877   000A7C  EFA7  F002         	goto	l3931
  3878   000A80  0A01               	xorlw	1	; case 5
  3879   000A82  B4D8               	btfsc	status,2,c
  3880   000A84  EFC0  F002         	goto	l3943
  3881   000A88  0A03               	xorlw	3	; case 6
  3882   000A8A  B4D8               	btfsc	status,2,c
  3883   000A8C  EFD1  F002         	goto	l3949
  3884   000A90  0A01               	xorlw	1	; case 7
  3885   000A92  B4D8               	btfsc	status,2,c
  3886   000A94  EFEC  F002         	goto	l3961
  3887   000A98  0A0F               	xorlw	15	; case 8
  3888   000A9A  B4D8               	btfsc	status,2,c
  3889   000A9C  EFFD  F002         	goto	l3967
  3890   000AA0  0A01               	xorlw	1	; case 9
  3891   000AA2  B4D8               	btfsc	status,2,c
  3892   000AA4  EF0D  F003         	goto	l3973
  3893   000AA8  0A03               	xorlw	3	; case 10
  3894   000AAA  B4D8               	btfsc	status,2,c
  3895   000AAC  EF1D  F003         	goto	l3979
  3896   000AB0  0A01               	xorlw	1	; case 11
  3897   000AB2  B4D8               	btfsc	status,2,c
  3898   000AB4  EF2D  F003         	goto	l3985
  3899   000AB8  0A07               	xorlw	7	; case 12
  3900   000ABA  B4D8               	btfsc	status,2,c
  3901   000ABC  EF3D  F003         	goto	l3991
  3902   000AC0  0A01               	xorlw	1	; case 13
  3903   000AC2  B4D8               	btfsc	status,2,c
  3904   000AC4  EF58  F003         	goto	l4003
  3905   000AC8  0A03               	xorlw	3	; case 14
  3906   000ACA  B4D8               	btfsc	status,2,c
  3907   000ACC  EF6A  F003         	goto	l4011
  3908   000AD0  0A01               	xorlw	1	; case 15
  3909   000AD2  B4D8               	btfsc	status,2,c
  3910   000AD4  EF99  F003         	goto	l4027
  3911   000AD8  0A1F               	xorlw	31	; case 16
  3912   000ADA  B4D8               	btfsc	status,2,c
  3913   000ADC  EFB4  F003         	goto	l4039
  3914   000AE0  0A01               	xorlw	1	; case 17
  3915   000AE2  B4D8               	btfsc	status,2,c
  3916   000AE4  EFC5  F003         	goto	l4045
  3917   000AE8  0A03               	xorlw	3	; case 18
  3918   000AEA  B4D8               	btfsc	status,2,c
  3919   000AEC  EFF5  F003         	goto	l4061
  3920   000AF0  0A01               	xorlw	1	; case 19
  3921   000AF2  B4D8               	btfsc	status,2,c
  3922   000AF4  EF12  F004         	goto	l4073
  3923   000AF8  0A07               	xorlw	7	; case 20
  3924   000AFA  B4D8               	btfsc	status,2,c
  3925   000AFC  EF2F  F004         	goto	l4085
  3926   000B00  0A01               	xorlw	1	; case 21
  3927   000B02  B4D8               	btfsc	status,2,c
  3928   000B04  EF4C  F004         	goto	l4097
  3929   000B08  0A03               	xorlw	3	; case 22
  3930   000B0A  B4D8               	btfsc	status,2,c
  3931   000B0C  EF69  F004         	goto	l4109
  3932   000B10  0A01               	xorlw	1	; case 23
  3933   000B12  B4D8               	btfsc	status,2,c
  3934   000B14  EF87  F004         	goto	l4121
  3935   000B18  0A0F               	xorlw	15	; case 24
  3936   000B1A  B4D8               	btfsc	status,2,c
  3937   000B1C  EF92  F004         	goto	l4127
  3938   000B20  0A01               	xorlw	1	; case 25
  3939   000B22  B4D8               	btfsc	status,2,c
  3940   000B24  EFA7  F004         	goto	l4133
  3941   000B28  0A03               	xorlw	3	; case 26
  3942   000B2A  B4D8               	btfsc	status,2,c
  3943   000B2C  EFBC  F004         	goto	l4139
  3944   000B30  0A01               	xorlw	1	; case 27
  3945   000B32  B4D8               	btfsc	status,2,c
  3946   000B34  EFD3  F004         	goto	l4145
  3947   000B38  0A07               	xorlw	7	; case 28
  3948   000B3A  B4D8               	btfsc	status,2,c
  3949   000B3C  EF1B  F005         	goto	l4169
  3950   000B40  EFAD  F005         	goto	l488
  3951   000B44                     l4181:
  3952   000B44  502D               	movf	motor_RFID@state^0,w,c
  3953                           
  3954                           ; Switch size 1, requested type "simple"
  3955                           ; Number of cases is 2, Range of values is 0 to 1
  3956                           ; switch strategies available:
  3957                           ; Name         Instructions Cycles
  3958                           ; simple_byte            7     4 (average)
  3959                           ;	Chosen strategy is simple_byte
  3960   000B46  0A00               	xorlw	0	; case 0
  3961   000B48  B4D8               	btfsc	status,2,c
  3962   000B4A  EF04  F002         	goto	l3897
  3963   000B4E  0A01               	xorlw	1	; case 1
  3964   000B50  B4D8               	btfsc	status,2,c
  3965   000B52  EF2B  F005         	goto	l4177
  3966   000B56  EFAD  F005         	goto	l488
  3967   000B5A                     l488:
  3968   000B5A  0012               	return		;funcret
  3969   000B5C                     __end_of_motor_RFID:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _setCurrentUser *****************
  3973 ;; Defined at:
  3974 ;;		line 68 in file "TAD_DATOS.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  UID0            1    wreg     unsigned char 
  3977 ;;  UID1            1   17[COMRAM] unsigned char 
  3978 ;;  UID2            1   18[COMRAM] unsigned char 
  3979 ;;  UID3            1   19[COMRAM] unsigned char 
  3980 ;;  UID4            1   20[COMRAM] unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  UID0            1   21[COMRAM] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1
  3992 ;;      Params:         4       0       0
  3993 ;;      Locals:         1       0       0
  3994 ;;      Temps:          0       0       0
  3995 ;;      Totals:         5       0       0
  3996 ;;Total ram usage:        5 bytes
  3997 ;; Hardware stack levels used: 1
  3998 ;; Hardware stack levels required when called: 7
  3999 ;; This function calls:
  4000 ;;		_Terminal_SendString
  4001 ;;		_printLedConfig
  4002 ;;		_printfUID
  4003 ;; This function is called by:
  4004 ;;		_motor_RFID
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text2
  4009   00178A                     __ptext2:
  4010                           	callstack 0
  4011   00178A                     _setCurrentUser:
  4012                           	callstack 22
  4013                           
  4014                           ;incstack = 0
  4015                           ;setCurrentUser@UID0 stored from wreg
  4016   00178A  6E5D               	movwf	setCurrentUser@UID0^0,c
  4017   00178C                     
  4018                           ;TAD_DATOS.c: 69:  currentUser[0] = UID0;
  4019   00178C  C05D  F040         	movff	setCurrentUser@UID0,_currentUser
  4020   001790                     
  4021                           ;TAD_DATOS.c: 70:  currentUser[1] = UID1;
  4022   001790  C059  F041         	movff	setCurrentUser@UID1,_currentUser+1
  4023   001794                     
  4024                           ;TAD_DATOS.c: 71:  currentUser[2] = UID2;
  4025   001794  C05A  F042         	movff	setCurrentUser@UID2,_currentUser+2
  4026   001798                     
  4027                           ;TAD_DATOS.c: 72:  currentUser[3] = UID3;
  4028   001798  C05B  F043         	movff	setCurrentUser@UID3,_currentUser+3
  4029   00179C                     
  4030                           ;TAD_DATOS.c: 73:  currentUser[4] = UID4;
  4031   00179C  C05C  F044         	movff	setCurrentUser@UID4,_currentUser+4
  4032   0017A0                     
  4033                           ;TAD_DATOS.c: 74:  new_user = 1;
  4034   0017A0  0E01               	movlw	1
  4035   0017A2  6E18               	movwf	_new_user^0,c
  4036   0017A4                     
  4037                           ;TAD_DATOS.c: 75:  Terminal_SendString("Targeta detectada!\r\n\t");
  4038   0017A4  0E8D               	movlw	low STR_26
  4039   0017A6  6E4D               	movwf	Terminal_SendString@str^0,c
  4040   0017A8  0E1F               	movlw	high STR_26
  4041   0017AA  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4042   0017AC  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4043   0017B0                     
  4044                           ;TAD_DATOS.c: 76:  printfUID(currentUser);
  4045   0017B0  0E40               	movlw	low _currentUser
  4046   0017B2  6E4F               	movwf	printfUID@currentUser^0,c
  4047   0017B4  EC85  F007         	call	_printfUID	;wreg free
  4048   0017B8                     
  4049                           ;TAD_DATOS.c: 77:  Terminal_SendString("\t");
  4050   0017B8  0EA1               	movlw	low (STR_26+20)
  4051   0017BA  6E4D               	movwf	Terminal_SendString@str^0,c
  4052   0017BC  0E1F               	movlw	high (STR_26+20)
  4053   0017BE  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4054   0017C0  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4055   0017C4                     
  4056                           ;TAD_DATOS.c: 78:  printLedConfig(configurations[index]);
  4057   0017C4  500D               	movf	_index^0,w,c
  4058   0017C6  0D06               	mullw	6
  4059   0017C8  50F3               	movf	243,w,c
  4060   0017CA  0FC0               	addlw	low _configurations
  4061   0017CC  6E4F               	movwf	printLedConfig@leds^0,c
  4062   0017CE  EC71  F008         	call	_printLedConfig	;wreg free
  4063   0017D2  0012               	return		;funcret
  4064   0017D4                     __end_of_setCurrentUser:
  4065                           	callstack 0
  4066                           
  4067 ;; *************** function _printLedConfig *****************
  4068 ;; Defined at:
  4069 ;;		line 77 in file "TAD_TERMINAL.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  leds            1    7[COMRAM] PTR unsigned char 
  4072 ;;		 -> configurations(24), 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  val             1   10[COMRAM] unsigned char 
  4075 ;;  i               2   11[COMRAM] int 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1
  4085 ;;      Params:         1       0       0
  4086 ;;      Locals:         5       0       0
  4087 ;;      Temps:          0       0       0
  4088 ;;      Totals:         6       0       0
  4089 ;;Total ram usage:        6 bytes
  4090 ;; Hardware stack levels used: 1
  4091 ;; Hardware stack levels required when called: 6
  4092 ;; This function calls:
  4093 ;;		_Terminal_SendChar
  4094 ;;		_Terminal_SendString
  4095 ;; This function is called by:
  4096 ;;		_setCurrentUser
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text3
  4101   0010E2                     __ptext3:
  4102                           	callstack 0
  4103   0010E2                     _printLedConfig:
  4104                           	callstack 22
  4105   0010E2                     
  4106                           ;TAD_TERMINAL.c: 78:  for (int i = 0; i < 6; i++) {
  4107   0010E2  0E00               	movlw	0
  4108   0010E4  6E54               	movwf	(printLedConfig@i+1)^0,c
  4109   0010E6  0E00               	movlw	0
  4110   0010E8  6E53               	movwf	printLedConfig@i^0,c
  4111   0010EA                     l3317:
  4112                           
  4113                           ;TAD_TERMINAL.c: 80:   Terminal_SendChar('L');
  4114   0010EA  0E4C               	movlw	76
  4115   0010EC  ECD2  F00C         	call	_Terminal_SendChar
  4116                           
  4117                           ;TAD_TERMINAL.c: 81:   Terminal_SendChar('0' + i);
  4118   0010F0  5053               	movf	printLedConfig@i^0,w,c
  4119   0010F2  0F30               	addlw	48
  4120   0010F4  ECD2  F00C         	call	_Terminal_SendChar
  4121   0010F8                     
  4122                           ;TAD_TERMINAL.c: 82:   Terminal_SendString(": ");
  4123   0010F8  0EEA               	movlw	low (STR_8+6)
  4124   0010FA  6E4D               	movwf	Terminal_SendString@str^0,c
  4125   0010FC  0E1F               	movlw	high (STR_8+6)
  4126   0010FE  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4127   001100  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4128   001104                     
  4129                           ;TAD_TERMINAL.c: 85:   unsigned char val = leds[i];
  4130   001104  504F               	movf	printLedConfig@leds^0,w,c
  4131   001106  2453               	addwf	printLedConfig@i^0,w,c
  4132   001108  6ED9               	movwf	fsr2l,c
  4133   00110A  6ADA               	clrf	fsr2h,c
  4134   00110C  50DF               	movf	indf2,w,c
  4135   00110E  6E52               	movwf	printLedConfig@val^0,c
  4136   001110                     
  4137                           ;TAD_TERMINAL.c: 86:   Terminal_SendChar(val < 10 ? '0' + val : 'A' + val - 10);
  4138   001110  0E09               	movlw	9
  4139   001112  6452               	cpfsgt	printLedConfig@val^0,c
  4140   001114  EF8E  F008         	goto	u2611
  4141   001118  EF90  F008         	goto	u2610
  4142   00111C                     u2611:
  4143   00111C  EF98  F008         	goto	l3327
  4144   001120                     u2610:
  4145   001120  0E37               	movlw	55
  4146   001122  2452               	addwf	printLedConfig@val^0,w,c
  4147   001124  6E50               	movwf	_printLedConfig$867^0,c
  4148   001126  6A51               	clrf	(_printLedConfig$867+1)^0,c
  4149   001128  0E00               	movlw	0
  4150   00112A  2251               	addwfc	(_printLedConfig$867+1)^0,f,c
  4151   00112C  EF9E  F008         	goto	l3329
  4152   001130                     l3327:
  4153   001130  0E30               	movlw	48
  4154   001132  2452               	addwf	printLedConfig@val^0,w,c
  4155   001134  6E50               	movwf	_printLedConfig$867^0,c
  4156   001136  6A51               	clrf	(_printLedConfig$867+1)^0,c
  4157   001138  0E00               	movlw	0
  4158   00113A  2251               	addwfc	(_printLedConfig$867+1)^0,f,c
  4159   00113C                     l3329:
  4160   00113C  5050               	movf	_printLedConfig$867^0,w,c
  4161   00113E  ECD2  F00C         	call	_Terminal_SendChar
  4162   001142                     
  4163                           ;TAD_TERMINAL.c: 89:   if (i < 6 - 1) Terminal_SendString(" - ");
  4164   001142  BE54               	btfsc	(printLedConfig@i+1)^0,7,c
  4165   001144  EFAF  F008         	goto	u2620
  4166   001148  5054               	movf	(printLedConfig@i+1)^0,w,c
  4167   00114A  E107               	bnz	u2621
  4168   00114C  0E05               	movlw	5
  4169   00114E  5C53               	subwf	printLedConfig@i^0,w,c
  4170   001150  B0D8               	btfsc	status,0,c
  4171   001152  EFAD  F008         	goto	u2621
  4172   001156  EFAF  F008         	goto	u2620
  4173   00115A                     u2621:
  4174   00115A  EFB5  F008         	goto	l3335
  4175   00115E                     u2620:
  4176   00115E  0EF9               	movlw	low STR_13
  4177   001160  6E4D               	movwf	Terminal_SendString@str^0,c
  4178   001162  0E1F               	movlw	high STR_13
  4179   001164  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4180   001166  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4181   00116A                     l3335:
  4182                           
  4183                           ;TAD_TERMINAL.c: 90:  }
  4184   00116A  4A53               	infsnz	printLedConfig@i^0,f,c
  4185   00116C  2A54               	incf	(printLedConfig@i+1)^0,f,c
  4186   00116E  BE54               	btfsc	(printLedConfig@i+1)^0,7,c
  4187   001170  EFC3  F008         	goto	u2631
  4188   001174  5054               	movf	(printLedConfig@i+1)^0,w,c
  4189   001176  E109               	bnz	u2630
  4190   001178  0E06               	movlw	6
  4191   00117A  5C53               	subwf	printLedConfig@i^0,w,c
  4192   00117C  A0D8               	btfss	status,0,c
  4193   00117E  EFC3  F008         	goto	u2631
  4194   001182  EFC5  F008         	goto	u2630
  4195   001186                     u2631:
  4196   001186  EF75  F008         	goto	l3317
  4197   00118A                     u2630:
  4198   00118A                     
  4199                           ;TAD_TERMINAL.c: 91:  Terminal_SendString("\r\n");
  4200   00118A  0EC5               	movlw	low (STR_1+15)
  4201   00118C  6E4D               	movwf	Terminal_SendString@str^0,c
  4202   00118E  0E1F               	movlw	high (STR_1+15)
  4203   001190  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4204   001192  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4205   001196  0012               	return		;funcret
  4206   001198                     __end_of_printLedConfig:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _motor_Write *****************
  4210 ;; Defined at:
  4211 ;;		line 150 in file "TAD_RFID.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  addr            1    wreg     unsigned char 
  4214 ;;  value           1    6[COMRAM] unsigned char 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  addr            1    8[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      unsigned char 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1
  4226 ;;      Params:         1       0       0
  4227 ;;      Locals:         1       0       0
  4228 ;;      Temps:          1       0       0
  4229 ;;      Totals:         3       0       0
  4230 ;;Total ram usage:        3 bytes
  4231 ;; Hardware stack levels used: 1
  4232 ;; Hardware stack levels required when called: 4
  4233 ;; This function calls:
  4234 ;;		_delay_us
  4235 ;; This function is called by:
  4236 ;;		_motor_RFID
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text4
  4241   000FFA                     __ptext4:
  4242                           	callstack 0
  4243   000FFA                     _motor_Write:
  4244                           	callstack 25
  4245                           
  4246                           ;incstack = 0
  4247                           ;motor_Write@addr stored from wreg
  4248   000FFA  6E50               	movwf	motor_Write@addr^0,c
  4249   000FFC                     
  4250                           ;TAD_RFID.c: 151:     static char bit_count = 0;;TAD_RFID.c: 152:     static unsigned ch
      +                          ar ucAddr;;TAD_RFID.c: 153:     static unsigned char ucValue;;TAD_RFID.c: 155:     switc
      +                          h (state_write) {
  4251   000FFC  EF60  F008         	goto	l3409
  4252   001000                     l260:
  4253                           
  4254                           ;TAD_RFID.c: 157:             LATCbits.LATC2 = 0;
  4255   001000  948B               	bcf	139,2,c	;volatile
  4256                           
  4257                           ;TAD_RFID.c: 158:             LATCbits.LATC3 = 0;
  4258   001002  968B               	bcf	139,3,c	;volatile
  4259   001004                     
  4260                           ;TAD_RFID.c: 159:             ucAddr = ((addr << 1) & 0x7E);
  4261   001004  5050               	movf	motor_Write@addr^0,w,c
  4262   001006  2450               	addwf	motor_Write@addr^0,w,c
  4263   001008  0B7E               	andlw	126
  4264   00100A  6E32               	movwf	motor_Write@ucAddr^0,c
  4265   00100C                     
  4266                           ;TAD_RFID.c: 160:             ucValue = value;
  4267   00100C  C04E  F031         	movff	motor_Write@value,motor_Write@ucValue
  4268   001010                     
  4269                           ;TAD_RFID.c: 161:             bit_count = 0;
  4270   001010  6A33               	clrf	motor_Write@bit_count^0,c
  4271   001012                     
  4272                           ;TAD_RFID.c: 162:             state_write = 1;
  4273   001012  0E01               	movlw	1
  4274   001014  6E34               	movwf	_state_write^0,c
  4275                           
  4276                           ;TAD_RFID.c: 163:             break;
  4277   001016  EF6F  F008         	goto	l3411
  4278   00101A                     l3369:
  4279                           
  4280                           ;TAD_RFID.c: 166:             LATCbits.LATC1 = ((ucAddr & 0x80) != 0);
  4281   00101A  BE32               	btfsc	motor_Write@ucAddr^0,7,c
  4282   00101C  EF12  F008         	goto	u2661
  4283   001020  EF16  F008         	goto	u2660
  4284   001024                     u2661:
  4285   001024  6A4F               	clrf	??_motor_Write^0,c
  4286   001026  2A4F               	incf	??_motor_Write^0,f,c
  4287   001028  EF17  F008         	goto	u2678
  4288   00102C                     u2660:
  4289   00102C  6A4F               	clrf	??_motor_Write^0,c
  4290   00102E                     u2678:
  4291   00102E  464F               	rlncf	??_motor_Write^0,f,c
  4292   001030  508B               	movf	139,w,c	;volatile
  4293   001032  184F               	xorwf	??_motor_Write^0,w,c
  4294   001034  0BFD               	andlw	-3
  4295   001036  184F               	xorwf	??_motor_Write^0,w,c
  4296   001038  6E8B               	movwf	139,c	;volatile
  4297   00103A                     
  4298                           ;TAD_RFID.c: 167:             LATCbits.LATC2 = 1;
  4299   00103A  848B               	bsf	139,2,c	;volatile
  4300                           
  4301                           ;TAD_RFID.c: 168:             ucAddr <<= 1;
  4302   00103C  90D8               	bcf	status,0,c
  4303   00103E  3632               	rlcf	motor_Write@ucAddr^0,f,c
  4304   001040                     
  4305                           ;TAD_RFID.c: 169:             delay_us(5);
  4306   001040  0E05               	movlw	5
  4307   001042  EC5B  F00C         	call	_delay_us
  4308   001046                     
  4309                           ;TAD_RFID.c: 170:             LATCbits.LATC2 = 0;
  4310   001046  948B               	bcf	139,2,c	;volatile
  4311   001048                     
  4312                           ;TAD_RFID.c: 171:             delay_us(5);
  4313   001048  0E05               	movlw	5
  4314   00104A  EC5B  F00C         	call	_delay_us
  4315   00104E                     
  4316                           ;TAD_RFID.c: 172:             bit_count++;
  4317   00104E  2A33               	incf	motor_Write@bit_count^0,f,c
  4318   001050                     
  4319                           ;TAD_RFID.c: 173:             if (bit_count == 8) {
  4320   001050  0E08               	movlw	8
  4321   001052  1833               	xorwf	motor_Write@bit_count^0,w,c
  4322   001054  A4D8               	btfss	status,2,c
  4323   001056  EF2F  F008         	goto	u2681
  4324   00105A  EF31  F008         	goto	u2680
  4325   00105E                     u2681:
  4326   00105E  EF6F  F008         	goto	l3411
  4327   001062                     u2680:
  4328   001062                     
  4329                           ;TAD_RFID.c: 174:                 bit_count = 0;
  4330   001062  6A33               	clrf	motor_Write@bit_count^0,c
  4331   001064                     
  4332                           ;TAD_RFID.c: 175:                 state_write = 2;
  4333   001064  0E02               	movlw	2
  4334   001066  6E34               	movwf	_state_write^0,c
  4335   001068  EF6F  F008         	goto	l3411
  4336   00106C                     l3387:
  4337                           
  4338                           ;TAD_RFID.c: 180:             LATCbits.LATC1 = ((ucValue & 0x80) != 0);
  4339   00106C  BE31               	btfsc	motor_Write@ucValue^0,7,c
  4340   00106E  EF3B  F008         	goto	u2691
  4341   001072  EF3F  F008         	goto	u2690
  4342   001076                     u2691:
  4343   001076  6A4F               	clrf	??_motor_Write^0,c
  4344   001078  2A4F               	incf	??_motor_Write^0,f,c
  4345   00107A  EF40  F008         	goto	u2708
  4346   00107E                     u2690:
  4347   00107E  6A4F               	clrf	??_motor_Write^0,c
  4348   001080                     u2708:
  4349   001080  464F               	rlncf	??_motor_Write^0,f,c
  4350   001082  508B               	movf	139,w,c	;volatile
  4351   001084  184F               	xorwf	??_motor_Write^0,w,c
  4352   001086  0BFD               	andlw	-3
  4353   001088  184F               	xorwf	??_motor_Write^0,w,c
  4354   00108A  6E8B               	movwf	139,c	;volatile
  4355   00108C                     
  4356                           ;TAD_RFID.c: 181:             LATCbits.LATC2 = 1;
  4357   00108C  848B               	bsf	139,2,c	;volatile
  4358                           
  4359                           ;TAD_RFID.c: 182:             ucValue <<= 1;
  4360   00108E  90D8               	bcf	status,0,c
  4361   001090  3631               	rlcf	motor_Write@ucValue^0,f,c
  4362   001092                     
  4363                           ;TAD_RFID.c: 183:             delay_us(5);
  4364   001092  0E05               	movlw	5
  4365   001094  EC5B  F00C         	call	_delay_us
  4366   001098                     
  4367                           ;TAD_RFID.c: 184:             LATCbits.LATC2 = 0;
  4368   001098  948B               	bcf	139,2,c	;volatile
  4369   00109A                     
  4370                           ;TAD_RFID.c: 185:             delay_us(5);
  4371   00109A  0E05               	movlw	5
  4372   00109C  EC5B  F00C         	call	_delay_us
  4373   0010A0                     
  4374                           ;TAD_RFID.c: 186:             bit_count++;
  4375   0010A0  2A33               	incf	motor_Write@bit_count^0,f,c
  4376   0010A2                     
  4377                           ;TAD_RFID.c: 187:             if (bit_count == 8) {
  4378   0010A2  0E08               	movlw	8
  4379   0010A4  1833               	xorwf	motor_Write@bit_count^0,w,c
  4380   0010A6  A4D8               	btfss	status,2,c
  4381   0010A8  EF58  F008         	goto	u2711
  4382   0010AC  EF5A  F008         	goto	u2710
  4383   0010B0                     u2711:
  4384   0010B0  EF6F  F008         	goto	l3411
  4385   0010B4                     u2710:
  4386   0010B4                     
  4387                           ;TAD_RFID.c: 188:                 LATCbits.LATC3 = 1;
  4388   0010B4  868B               	bsf	139,3,c	;volatile
  4389                           
  4390                           ;TAD_RFID.c: 189:                 LATCbits.LATC2 = 1;
  4391   0010B6  848B               	bsf	139,2,c	;volatile
  4392                           
  4393                           ;TAD_RFID.c: 190:                 state_write = 0;
  4394   0010B8  6A34               	clrf	_state_write^0,c
  4395   0010BA                     
  4396                           ;TAD_RFID.c: 191:                 return 1;
  4397   0010BA  0E01               	movlw	1
  4398   0010BC  EF70  F008         	goto	l266
  4399   0010C0                     l3409:
  4400   0010C0  5034               	movf	_state_write^0,w,c
  4401                           
  4402                           ; Switch size 1, requested type "simple"
  4403                           ; Number of cases is 3, Range of values is 0 to 2
  4404                           ; switch strategies available:
  4405                           ; Name         Instructions Cycles
  4406                           ; simple_byte           10     6 (average)
  4407                           ;	Chosen strategy is simple_byte
  4408   0010C2  0A00               	xorlw	0	; case 0
  4409   0010C4  B4D8               	btfsc	status,2,c
  4410   0010C6  EF00  F008         	goto	l260
  4411   0010CA  0A01               	xorlw	1	; case 1
  4412   0010CC  B4D8               	btfsc	status,2,c
  4413   0010CE  EF0D  F008         	goto	l3369
  4414   0010D2  0A03               	xorlw	3	; case 2
  4415   0010D4  B4D8               	btfsc	status,2,c
  4416   0010D6  EF36  F008         	goto	l3387
  4417   0010DA  EF6F  F008         	goto	l3411
  4418   0010DE                     l3411:
  4419                           
  4420                           ;TAD_RFID.c: 195:     return 0;
  4421   0010DE  0E00               	movlw	0
  4422   0010E0                     l266:
  4423   0010E0  0012               	return		;funcret
  4424   0010E2                     __end_of_motor_Write:
  4425                           	callstack 0
  4426                           
  4427 ;; *************** function _motor_Read *****************
  4428 ;; Defined at:
  4429 ;;		line 199 in file "TAD_RFID.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  addr            1    wreg     unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  addr            1    7[COMRAM] unsigned char 
  4434 ;;  MAX_TIMEOUT     2    0        const unsigned int 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  1    wreg      unsigned char 
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1
  4444 ;;      Params:         0       0       0
  4445 ;;      Locals:         1       0       0
  4446 ;;      Temps:          1       0       0
  4447 ;;      Totals:         2       0       0
  4448 ;;Total ram usage:        2 bytes
  4449 ;; Hardware stack levels used: 1
  4450 ;; Hardware stack levels required when called: 4
  4451 ;; This function calls:
  4452 ;;		_delay_us
  4453 ;; This function is called by:
  4454 ;;		_motor_RFID
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text5
  4459   000CD8                     __ptext5:
  4460                           	callstack 0
  4461   000CD8                     _motor_Read:
  4462                           	callstack 25
  4463                           
  4464                           ;incstack = 0
  4465                           ;motor_Read@addr stored from wreg
  4466   000CD8  6E4F               	movwf	motor_Read@addr^0,c
  4467   000CDA                     
  4468                           ;TAD_RFID.c: 207:     timeout_counter++;
  4469   000CDA  4A11               	infsnz	motor_Read@timeout_counter^0,f,c
  4470   000CDC  2A12               	incf	(motor_Read@timeout_counter+1)^0,f,c
  4471   000CDE                     
  4472                           ;TAD_RFID.c: 210:     if (timeout_counter > MAX_TIMEOUT) {
  4473   000CDE  0EE9               	movlw	233
  4474   000CE0  5C11               	subwf	motor_Read@timeout_counter^0,w,c
  4475   000CE2  0E03               	movlw	3
  4476   000CE4  5812               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  4477   000CE6  A0D8               	btfss	status,0,c
  4478   000CE8  EF78  F006         	goto	u481
  4479   000CEC  EF7A  F006         	goto	u480
  4480   000CF0                     u481:
  4481   000CF0  EFF9  F006         	goto	l1923
  4482   000CF4                     u480:
  4483   000CF4                     
  4484                           ;TAD_RFID.c: 211:         LATCbits.LATC3 = 1;
  4485   000CF4  868B               	bsf	139,3,c	;volatile
  4486                           
  4487                           ;TAD_RFID.c: 212:         LATCbits.LATC2 = 1;
  4488   000CF6  848B               	bsf	139,2,c	;volatile
  4489                           
  4490                           ;TAD_RFID.c: 213:         state_read = 0;
  4491   000CF8  6A35               	clrf	_state_read^0,c
  4492   000CFA                     
  4493                           ;TAD_RFID.c: 214:         timeout_counter = 0;
  4494   000CFA  0E00               	movlw	0
  4495   000CFC  6E12               	movwf	(motor_Read@timeout_counter+1)^0,c
  4496   000CFE  0E00               	movlw	0
  4497   000D00  6E11               	movwf	motor_Read@timeout_counter^0,c
  4498   000D02                     
  4499                           ;TAD_RFID.c: 215:         return 0xFF;
  4500   000D02  0EFF               	movlw	255
  4501   000D04  EF08  F007         	goto	l278
  4502   000D08                     l1849:
  4503                           
  4504                           ;TAD_RFID.c: 220:             timeout_counter = 0;
  4505   000D08  0E00               	movlw	0
  4506   000D0A  6E12               	movwf	(motor_Read@timeout_counter+1)^0,c
  4507   000D0C  0E00               	movlw	0
  4508   000D0E  6E11               	movwf	motor_Read@timeout_counter^0,c
  4509   000D10                     
  4510                           ;TAD_RFID.c: 221:             LATCbits.LATC2 = 0;
  4511   000D10  948B               	bcf	139,2,c	;volatile
  4512   000D12                     
  4513                           ;TAD_RFID.c: 222:             LATCbits.LATC3 = 0;
  4514   000D12  968B               	bcf	139,3,c	;volatile
  4515   000D14                     
  4516                           ;TAD_RFID.c: 223:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  4517   000D14  504F               	movf	motor_Read@addr^0,w,c
  4518   000D16  244F               	addwf	motor_Read@addr^0,w,c
  4519   000D18  0B7E               	andlw	126
  4520   000D1A  0980               	iorlw	128
  4521   000D1C  6E2F               	movwf	motor_Read@ucAddr^0,c
  4522   000D1E                     
  4523                           ;TAD_RFID.c: 224:             ucResult = 0;
  4524   000D1E  6A2E               	clrf	motor_Read@ucResult^0,c
  4525   000D20                     
  4526                           ;TAD_RFID.c: 225:             bit_count = 0;
  4527   000D20  6A30               	clrf	motor_Read@bit_count^0,c
  4528   000D22                     
  4529                           ;TAD_RFID.c: 226:             state_read = 1;
  4530   000D22  0E01               	movlw	1
  4531   000D24  6E35               	movwf	_state_read^0,c
  4532   000D26                     l1863:
  4533                           
  4534                           ;TAD_RFID.c: 227:             return 0xFE;
  4535   000D26  0EFE               	movlw	254
  4536   000D28  EF08  F007         	goto	l278
  4537   000D2C                     l1867:
  4538                           
  4539                           ;TAD_RFID.c: 230:             LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4540   000D2C  BE2F               	btfsc	motor_Read@ucAddr^0,7,c
  4541   000D2E  EF9B  F006         	goto	u491
  4542   000D32  EF9F  F006         	goto	u490
  4543   000D36                     u491:
  4544   000D36  6A4E               	clrf	??_motor_Read^0,c
  4545   000D38  2A4E               	incf	??_motor_Read^0,f,c
  4546   000D3A  EFA0  F006         	goto	u508
  4547   000D3E                     u490:
  4548   000D3E  6A4E               	clrf	??_motor_Read^0,c
  4549   000D40                     u508:
  4550   000D40  464E               	rlncf	??_motor_Read^0,f,c
  4551   000D42  508B               	movf	139,w,c	;volatile
  4552   000D44  184E               	xorwf	??_motor_Read^0,w,c
  4553   000D46  0BFD               	andlw	-3
  4554   000D48  184E               	xorwf	??_motor_Read^0,w,c
  4555   000D4A  6E8B               	movwf	139,c	;volatile
  4556   000D4C                     
  4557                           ;TAD_RFID.c: 231:             LATCbits.LATC2 = 1;
  4558   000D4C  848B               	bsf	139,2,c	;volatile
  4559   000D4E                     
  4560                           ;TAD_RFID.c: 232:             delay_us(5);
  4561   000D4E  0E05               	movlw	5
  4562   000D50  EC5B  F00C         	call	_delay_us
  4563   000D54                     
  4564                           ;TAD_RFID.c: 233:             ucAddr <<= 1;
  4565   000D54  90D8               	bcf	status,0,c
  4566   000D56  362F               	rlcf	motor_Read@ucAddr^0,f,c
  4567   000D58                     
  4568                           ;TAD_RFID.c: 234:             LATCbits.LATC2 = 0;
  4569   000D58  948B               	bcf	139,2,c	;volatile
  4570                           
  4571                           ;TAD_RFID.c: 235:             delay_us(5);
  4572   000D5A  0E05               	movlw	5
  4573   000D5C  EC5B  F00C         	call	_delay_us
  4574   000D60                     
  4575                           ;TAD_RFID.c: 236:             bit_count++;
  4576   000D60  2A30               	incf	motor_Read@bit_count^0,f,c
  4577   000D62                     
  4578                           ;TAD_RFID.c: 238:             if (bit_count >= 8) {
  4579   000D62  0E07               	movlw	7
  4580   000D64  6430               	cpfsgt	motor_Read@bit_count^0,c
  4581   000D66  EFB7  F006         	goto	u511
  4582   000D6A  EFB9  F006         	goto	u510
  4583   000D6E                     u511:
  4584   000D6E  EF93  F006         	goto	l1863
  4585   000D72                     u510:
  4586   000D72                     
  4587                           ;TAD_RFID.c: 239:                 bit_count = 0;
  4588   000D72  6A30               	clrf	motor_Read@bit_count^0,c
  4589   000D74                     
  4590                           ;TAD_RFID.c: 240:                 state_read = 2;
  4591   000D74  0E02               	movlw	2
  4592   000D76  6E35               	movwf	_state_read^0,c
  4593   000D78  EF93  F006         	goto	l1863
  4594   000D7C                     l283:
  4595                           
  4596                           ;TAD_RFID.c: 245:             LATCbits.LATC2 = 1;
  4597   000D7C  848B               	bsf	139,2,c	;volatile
  4598   000D7E                     
  4599                           ;TAD_RFID.c: 246:             delay_us(5);
  4600   000D7E  0E05               	movlw	5
  4601   000D80  EC5B  F00C         	call	_delay_us
  4602   000D84                     
  4603                           ;TAD_RFID.c: 247:             ucResult <<= 1;
  4604   000D84  90D8               	bcf	status,0,c
  4605   000D86  362E               	rlcf	motor_Read@ucResult^0,f,c
  4606   000D88                     
  4607                           ;TAD_RFID.c: 248:             ucResult |= PORTCbits.RC0;
  4608   000D88  B082               	btfsc	130,0,c	;volatile
  4609   000D8A  EFC9  F006         	goto	u521
  4610   000D8E  EFCC  F006         	goto	u520
  4611   000D92                     u521:
  4612   000D92  0E01               	movlw	1
  4613   000D94  EFCD  F006         	goto	u526
  4614   000D98                     u520:
  4615   000D98  0E00               	movlw	0
  4616   000D9A                     u526:
  4617   000D9A  122E               	iorwf	motor_Read@ucResult^0,f,c
  4618   000D9C                     
  4619                           ;TAD_RFID.c: 249:             LATCbits.LATC2 = 0;
  4620   000D9C  948B               	bcf	139,2,c	;volatile
  4621                           
  4622                           ;TAD_RFID.c: 250:             delay_us(5);
  4623   000D9E  0E05               	movlw	5
  4624   000DA0  EC5B  F00C         	call	_delay_us
  4625   000DA4                     
  4626                           ;TAD_RFID.c: 251:             bit_count++;
  4627   000DA4  2A30               	incf	motor_Read@bit_count^0,f,c
  4628   000DA6                     
  4629                           ;TAD_RFID.c: 253:             if (bit_count >= 8) {
  4630   000DA6  0E07               	movlw	7
  4631   000DA8  6430               	cpfsgt	motor_Read@bit_count^0,c
  4632   000DAA  EFD9  F006         	goto	u531
  4633   000DAE  EFDB  F006         	goto	u530
  4634   000DB2                     u531:
  4635   000DB2  EF93  F006         	goto	l1863
  4636   000DB6                     u530:
  4637   000DB6                     
  4638                           ;TAD_RFID.c: 254:                 LATCbits.LATC3 = 1;
  4639   000DB6  868B               	bsf	139,3,c	;volatile
  4640                           
  4641                           ;TAD_RFID.c: 255:                 LATCbits.LATC2 = 1;
  4642   000DB8  848B               	bsf	139,2,c	;volatile
  4643                           
  4644                           ;TAD_RFID.c: 256:                 state_read = 0;
  4645   000DBA  6A35               	clrf	_state_read^0,c
  4646   000DBC                     
  4647                           ;TAD_RFID.c: 257:                 timeout_counter = 0;
  4648   000DBC  0E00               	movlw	0
  4649   000DBE  6E12               	movwf	(motor_Read@timeout_counter+1)^0,c
  4650   000DC0  0E00               	movlw	0
  4651   000DC2  6E11               	movwf	motor_Read@timeout_counter^0,c
  4652   000DC4                     
  4653                           ;TAD_RFID.c: 259:                 if (ucResult == 0xFE || ucResult == 0xFF) {
  4654   000DC4  0EFE               	movlw	254
  4655   000DC6  182E               	xorwf	motor_Read@ucResult^0,w,c
  4656   000DC8  B4D8               	btfsc	status,2,c
  4657   000DCA  EFE9  F006         	goto	u541
  4658   000DCE  EFEB  F006         	goto	u540
  4659   000DD2                     u541:
  4660   000DD2  EFF3  F006         	goto	l1909
  4661   000DD6                     u540:
  4662   000DD6  282E               	incf	motor_Read@ucResult^0,w,c
  4663   000DD8  A4D8               	btfss	status,2,c
  4664   000DDA  EFF1  F006         	goto	u551
  4665   000DDE  EFF3  F006         	goto	u550
  4666   000DE2                     u551:
  4667   000DE2  EFF6  F006         	goto	l1913
  4668   000DE6                     u550:
  4669   000DE6                     l1909:
  4670                           
  4671                           ;TAD_RFID.c: 260:                     return 0xFD;
  4672   000DE6  0EFD               	movlw	253
  4673   000DE8  EF08  F007         	goto	l278
  4674   000DEC                     l1913:
  4675                           
  4676                           ;TAD_RFID.c: 262:                 return ucResult;
  4677   000DEC  502E               	movf	motor_Read@ucResult^0,w,c
  4678   000DEE  EF08  F007         	goto	l278
  4679   000DF2                     l1923:
  4680   000DF2  5035               	movf	_state_read^0,w,c
  4681                           
  4682                           ; Switch size 1, requested type "simple"
  4683                           ; Number of cases is 3, Range of values is 0 to 2
  4684                           ; switch strategies available:
  4685                           ; Name         Instructions Cycles
  4686                           ; simple_byte           10     6 (average)
  4687                           ;	Chosen strategy is simple_byte
  4688   000DF4  0A00               	xorlw	0	; case 0
  4689   000DF6  B4D8               	btfsc	status,2,c
  4690   000DF8  EF84  F006         	goto	l1849
  4691   000DFC  0A01               	xorlw	1	; case 1
  4692   000DFE  B4D8               	btfsc	status,2,c
  4693   000E00  EF96  F006         	goto	l1867
  4694   000E04  0A03               	xorlw	3	; case 2
  4695   000E06  B4D8               	btfsc	status,2,c
  4696   000E08  EFBE  F006         	goto	l283
  4697   000E0C  EF93  F006         	goto	l1863
  4698   000E10                     l278:
  4699   000E10  0012               	return		;funcret
  4700   000E12                     __end_of_motor_Read:
  4701                           	callstack 0
  4702                           
  4703 ;; *************** function _motorTerminal *****************
  4704 ;; Defined at:
  4705 ;;		line 94 in file "TAD_TERMINAL.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;  currentUser     1   17[COMRAM] PTR unsigned char 
  4710 ;;		 -> NULL(0), currentUser(5), 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1
  4720 ;;      Params:         0       0       0
  4721 ;;      Locals:         1       0       0
  4722 ;;      Temps:          0       0       0
  4723 ;;      Totals:         1       0       0
  4724 ;;Total ram usage:        1 bytes
  4725 ;; Hardware stack levels used: 1
  4726 ;; Hardware stack levels required when called: 7
  4727 ;; This function calls:
  4728 ;;		_Terminal_RXAvailable
  4729 ;;		_Terminal_ReceiveChar
  4730 ;;		_Terminal_SendChar
  4731 ;;		_Terminal_SendString
  4732 ;;		_getActualUID
  4733 ;;		_printfUID
  4734 ;;		_saveHourToData
  4735 ;;		_showAllConfigurations
  4736 ;;		_showMenu
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text6
  4743   000B5C                     __ptext6:
  4744                           	callstack 0
  4745   000B5C                     _motorTerminal:
  4746                           	callstack 23
  4747   000B5C                     
  4748                           ;TAD_TERMINAL.c: 95:  static char state = 0;;TAD_TERMINAL.c: 97:  switch(state) {
  4749   000B5C  EF5C  F006         	goto	l3717
  4750   000B60                     l3653:
  4751                           
  4752                           ;TAD_TERMINAL.c: 99:    if (Terminal_ReceiveChar() == 0x1B) {
  4753   000B60  EC73  F00D         	call	_Terminal_ReceiveChar	;wreg free
  4754   000B64  0A1B               	xorlw	27
  4755   000B66  A4D8               	btfss	status,2,c
  4756   000B68  EFB8  F005         	goto	u2851
  4757   000B6C  EFBA  F005         	goto	u2850
  4758   000B70                     u2851:
  4759   000B70  EFBE  F005         	goto	l3659
  4760   000B74                     u2850:
  4761   000B74                     
  4762                           ;TAD_TERMINAL.c: 100:     showMenu();
  4763   000B74  ECC3  F00A         	call	_showMenu	;wreg free
  4764   000B78                     
  4765                           ;TAD_TERMINAL.c: 101:     state = 1;
  4766   000B78  0E01               	movlw	1
  4767   000B7A  6E1B               	movwf	motorTerminal@state^0,c
  4768   000B7C                     l3659:
  4769                           
  4770                           ;TAD_TERMINAL.c: 104:    if (hashtag_pressed == 1){
  4771   000B7C  041C               	decf	_hashtag_pressed^0,w,c
  4772   000B7E  A4D8               	btfss	status,2,c
  4773   000B80  EFC4  F005         	goto	u2861
  4774   000B84  EFC6  F005         	goto	u2860
  4775   000B88                     u2861:
  4776   000B88  EF6B  F006         	goto	l698
  4777   000B8C                     u2860:
  4778   000B8C                     
  4779                           ;TAD_TERMINAL.c: 105:     showMenu();
  4780   000B8C  ECC3  F00A         	call	_showMenu	;wreg free
  4781   000B90                     
  4782                           ;TAD_TERMINAL.c: 106:     state = 1;
  4783   000B90  0E01               	movlw	1
  4784   000B92  6E1B               	movwf	motorTerminal@state^0,c
  4785   000B94                     
  4786                           ;TAD_TERMINAL.c: 107:     hashtag_pressed = 0;
  4787   000B94  6A1C               	clrf	_hashtag_pressed^0,c
  4788   000B96  EF6B  F006         	goto	l698
  4789   000B9A                     l3667:
  4790                           
  4791                           ;TAD_TERMINAL.c: 111:    if(Terminal_RXAvailable() == 1){
  4792   000B9A  EC1E  F00D         	call	_Terminal_RXAvailable	;wreg free
  4793   000B9E  06E8               	decf	wreg,f,c
  4794   000BA0  A4D8               	btfss	status,2,c
  4795   000BA2  EFD5  F005         	goto	u2871
  4796   000BA6  EFD7  F005         	goto	u2870
  4797   000BAA                     u2871:
  4798   000BAA  EF6B  F006         	goto	l698
  4799   000BAE                     u2870:
  4800   000BAE                     
  4801                           ;TAD_TERMINAL.c: 112:     if (Terminal_ReceiveChar() == '1') {
  4802   000BAE  EC73  F00D         	call	_Terminal_ReceiveChar	;wreg free
  4803   000BB2  0A31               	xorlw	49
  4804   000BB4  A4D8               	btfss	status,2,c
  4805   000BB6  EFDF  F005         	goto	u2881
  4806   000BBA  EFE1  F005         	goto	u2880
  4807   000BBE                     u2881:
  4808   000BBE  EFF7  F005         	goto	l3681
  4809   000BC2                     u2880:
  4810   000BC2                     
  4811                           ;TAD_TERMINAL.c: 113:      Terminal_SendString("\r\n");
  4812   000BC2  0EC5               	movlw	low (STR_1+15)
  4813   000BC4  6E4D               	movwf	Terminal_SendString@str^0,c
  4814   000BC6  0E1F               	movlw	high (STR_1+15)
  4815   000BC8  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4816   000BCA  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4817   000BCE                     
  4818                           ;TAD_TERMINAL.c: 114:      unsigned char *currentUser = getActualUID();
  4819   000BCE  ECF4  F00A         	call	_getActualUID	;wreg free
  4820   000BD2  6E59               	movwf	motorTerminal@currentUser^0,c
  4821   000BD4                     
  4822                           ;TAD_TERMINAL.c: 118:      printfUID(currentUser);
  4823   000BD4  C059  F04F         	movff	motorTerminal@currentUser,printfUID@currentUser
  4824   000BD8  EC85  F007         	call	_printfUID	;wreg free
  4825   000BDC                     
  4826                           ;TAD_TERMINAL.c: 120:      Terminal_SendString("\r\n");
  4827   000BDC  0EC5               	movlw	low (STR_1+15)
  4828   000BDE  6E4D               	movwf	Terminal_SendString@str^0,c
  4829   000BE0  0E1F               	movlw	high (STR_1+15)
  4830   000BE2  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4831   000BE4  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4832   000BE8                     l3679:
  4833                           
  4834                           ;TAD_TERMINAL.c: 121:      state = 0;
  4835   000BE8  6A1B               	clrf	motorTerminal@state^0,c
  4836                           
  4837                           ;TAD_TERMINAL.c: 122:     }
  4838   000BEA  EF6B  F006         	goto	l698
  4839   000BEE                     l3681:
  4840   000BEE  EC73  F00D         	call	_Terminal_ReceiveChar	;wreg free
  4841   000BF2  0A32               	xorlw	50
  4842   000BF4  A4D8               	btfss	status,2,c
  4843   000BF6  EFFF  F005         	goto	u2891
  4844   000BFA  EF01  F006         	goto	u2890
  4845   000BFE                     u2891:
  4846   000BFE  EF0B  F006         	goto	l3689
  4847   000C02                     u2890:
  4848   000C02                     
  4849                           ;TAD_TERMINAL.c: 124:      Terminal_SendString("\r\n");
  4850   000C02  0EC5               	movlw	low (STR_1+15)
  4851   000C04  6E4D               	movwf	Terminal_SendString@str^0,c
  4852   000C06  0E1F               	movlw	high (STR_1+15)
  4853   000C08  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4854   000C0A  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4855   000C0E                     
  4856                           ;TAD_TERMINAL.c: 125:      showAllConfigurations();
  4857   000C0E  EC71  F009         	call	_showAllConfigurations	;wreg free
  4858   000C12  EFF4  F005         	goto	l3679
  4859   000C16                     l3689:
  4860   000C16  EC73  F00D         	call	_Terminal_ReceiveChar	;wreg free
  4861   000C1A  0A33               	xorlw	51
  4862   000C1C  A4D8               	btfss	status,2,c
  4863   000C1E  EF13  F006         	goto	u2901
  4864   000C22  EF15  F006         	goto	u2900
  4865   000C26                     u2901:
  4866   000C26  EF25  F006         	goto	l3695
  4867   000C2A                     u2900:
  4868   000C2A                     
  4869                           ;TAD_TERMINAL.c: 129:      Terminal_SendString("\r\n");
  4870   000C2A  0EC5               	movlw	low (STR_1+15)
  4871   000C2C  6E4D               	movwf	Terminal_SendString@str^0,c
  4872   000C2E  0E1F               	movlw	high (STR_1+15)
  4873   000C30  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4874   000C32  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4875                           
  4876                           ;TAD_TERMINAL.c: 130:      Terminal_SendString("Introduce la hora actual(HHMM): ");
  4877   000C36  0E34               	movlw	low STR_19
  4878   000C38  6E4D               	movwf	Terminal_SendString@str^0,c
  4879   000C3A  0E1F               	movlw	high STR_19
  4880   000C3C  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4881   000C3E  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4882   000C42                     
  4883                           ;TAD_TERMINAL.c: 131:      state = 2;
  4884   000C42  0E02               	movlw	2
  4885   000C44  6E1B               	movwf	motorTerminal@state^0,c
  4886                           
  4887                           ;TAD_TERMINAL.c: 132:     }
  4888   000C46  EF6B  F006         	goto	l698
  4889   000C4A                     l3695:
  4890                           
  4891                           ;TAD_TERMINAL.c: 134:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  4892   000C4A  0ED1               	movlw	low STR_20
  4893   000C4C  6E4D               	movwf	Terminal_SendString@str^0,c
  4894   000C4E  0E1E               	movlw	high STR_20
  4895   000C50  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4896   000C52  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4897   000C56  EFF4  F005         	goto	l3679
  4898   000C5A                     l3699:
  4899                           
  4900                           ;TAD_TERMINAL.c: 140:    if(Terminal_RXAvailable() == 1){
  4901   000C5A  EC1E  F00D         	call	_Terminal_RXAvailable	;wreg free
  4902   000C5E  06E8               	decf	wreg,f,c
  4903   000C60  A4D8               	btfss	status,2,c
  4904   000C62  EF35  F006         	goto	u2911
  4905   000C66  EF37  F006         	goto	u2910
  4906   000C6A                     u2911:
  4907   000C6A  EF6B  F006         	goto	l698
  4908   000C6E                     u2910:
  4909   000C6E                     
  4910                           ;TAD_TERMINAL.c: 141:     static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 142:   
      +                            static char index = 0;;TAD_TERMINAL.c: 143:     hour[index] = Terminal_ReceiveChar();
  4911   000C6E  501A               	movf	motorTerminal@index^0,w,c
  4912   000C70  0F6A               	addlw	low motorTerminal@hour
  4913   000C72  6ED9               	movwf	fsr2l,c
  4914   000C74  6ADA               	clrf	fsr2h,c
  4915   000C76  EC73  F00D         	call	_Terminal_ReceiveChar	;wreg free
  4916   000C7A  6EDF               	movwf	indf2,c
  4917                           
  4918                           ;TAD_TERMINAL.c: 144:     Terminal_SendChar(hour[index]);
  4919   000C7C  501A               	movf	motorTerminal@index^0,w,c
  4920   000C7E  0F6A               	addlw	low motorTerminal@hour
  4921   000C80  6ED9               	movwf	fsr2l,c
  4922   000C82  6ADA               	clrf	fsr2h,c
  4923   000C84  50DF               	movf	indf2,w,c
  4924   000C86  ECD2  F00C         	call	_Terminal_SendChar
  4925   000C8A                     
  4926                           ;TAD_TERMINAL.c: 145:     index++;
  4927   000C8A  2A1A               	incf	motorTerminal@index^0,f,c
  4928   000C8C                     
  4929                           ;TAD_TERMINAL.c: 146:     if(index == 4){
  4930   000C8C  0E04               	movlw	4
  4931   000C8E  181A               	xorwf	motorTerminal@index^0,w,c
  4932   000C90  A4D8               	btfss	status,2,c
  4933   000C92  EF4D  F006         	goto	u2921
  4934   000C96  EF4F  F006         	goto	u2920
  4935   000C9A                     u2921:
  4936   000C9A  EF6B  F006         	goto	l698
  4937   000C9E                     u2920:
  4938   000C9E                     
  4939                           ;TAD_TERMINAL.c: 147:      saveHourToData(hour);
  4940   000C9E  0E6A               	movlw	low motorTerminal@hour
  4941   000CA0  6E49               	movwf	saveHourToData@hour^0,c
  4942   000CA2  EC25  F00C         	call	_saveHourToData	;wreg free
  4943   000CA6                     
  4944                           ;TAD_TERMINAL.c: 148:      Terminal_SendString("\r\nHora introduida correctament\r\n");
  4945   000CA6  0E13               	movlw	low STR_21
  4946   000CA8  6E4D               	movwf	Terminal_SendString@str^0,c
  4947   000CAA  0E1F               	movlw	high STR_21
  4948   000CAC  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  4949   000CAE  EC40  F00C         	call	_Terminal_SendString	;wreg free
  4950   000CB2                     
  4951                           ;TAD_TERMINAL.c: 149:      index = 0;
  4952   000CB2  6A1A               	clrf	motorTerminal@index^0,c
  4953   000CB4  EFF4  F005         	goto	l3679
  4954   000CB8                     l3717:
  4955   000CB8  501B               	movf	motorTerminal@state^0,w,c
  4956                           
  4957                           ; Switch size 1, requested type "simple"
  4958                           ; Number of cases is 3, Range of values is 0 to 2
  4959                           ; switch strategies available:
  4960                           ; Name         Instructions Cycles
  4961                           ; simple_byte           10     6 (average)
  4962                           ;	Chosen strategy is simple_byte
  4963   000CBA  0A00               	xorlw	0	; case 0
  4964   000CBC  B4D8               	btfsc	status,2,c
  4965   000CBE  EFB0  F005         	goto	l3653
  4966   000CC2  0A01               	xorlw	1	; case 1
  4967   000CC4  B4D8               	btfsc	status,2,c
  4968   000CC6  EFCD  F005         	goto	l3667
  4969   000CCA  0A03               	xorlw	3	; case 2
  4970   000CCC  B4D8               	btfsc	status,2,c
  4971   000CCE  EF2D  F006         	goto	l3699
  4972   000CD2  EF6B  F006         	goto	l698
  4973   000CD6                     l698:
  4974   000CD6  0012               	return		;funcret
  4975   000CD8                     __end_of_motorTerminal:
  4976                           	callstack 0
  4977                           
  4978 ;; *************** function _showMenu *****************
  4979 ;; Defined at:
  4980 ;;		line 45 in file "TAD_TERMINAL.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1
  4994 ;;      Params:         0       0       0
  4995 ;;      Locals:         0       0       0
  4996 ;;      Temps:          0       0       0
  4997 ;;      Totals:         0       0       0
  4998 ;;Total ram usage:        0 bytes
  4999 ;; Hardware stack levels used: 1
  5000 ;; Hardware stack levels required when called: 6
  5001 ;; This function calls:
  5002 ;;		_Terminal_SendString
  5003 ;; This function is called by:
  5004 ;;		_motorTerminal
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text7
  5009   001586                     __ptext7:
  5010                           	callstack 0
  5011   001586                     _showMenu:
  5012                           	callstack 23
  5013   001586                     
  5014                           ;TAD_TERMINAL.c: 46:  Terminal_SendString("---------------\r\n");
  5015   001586  0EB6               	movlw	low STR_1
  5016   001588  6E4D               	movwf	Terminal_SendString@str^0,c
  5017   00158A  0E1F               	movlw	high STR_1
  5018   00158C  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5019   00158E  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5020                           
  5021                           ;TAD_TERMINAL.c: 47:  Terminal_SendString("MenÃº principal\r\n");
  5022   001592  0EC8               	movlw	low STR_2
  5023   001594  6E4D               	movwf	Terminal_SendString@str^0,c
  5024   001596  0E1F               	movlw	high STR_2
  5025   001598  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5026   00159A  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5027                           
  5028                           ;TAD_TERMINAL.c: 48:  Terminal_SendString("---------------\r\n");
  5029   00159E  0EB6               	movlw	low STR_1
  5030   0015A0  6E4D               	movwf	Terminal_SendString@str^0,c
  5031   0015A2  0E1F               	movlw	high STR_1
  5032   0015A4  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5033   0015A6  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5034                           
  5035                           ;TAD_TERMINAL.c: 49:  Terminal_SendString("Tria una opciÃ³:\r\n");
  5036   0015AA  0EA3               	movlw	low STR_4
  5037   0015AC  6E4D               	movwf	Terminal_SendString@str^0,c
  5038   0015AE  0E1F               	movlw	high STR_4
  5039   0015B0  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5040   0015B2  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5041                           
  5042                           ;TAD_TERMINAL.c: 50:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  5043   0015B6  0E72               	movlw	low STR_5
  5044   0015B8  6E4D               	movwf	Terminal_SendString@str^0,c
  5045   0015BA  0E1F               	movlw	high STR_5
  5046   0015BC  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5047   0015BE  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5048                           
  5049                           ;TAD_TERMINAL.c: 51:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  5050   0015C2  0E55               	movlw	low STR_6
  5051   0015C4  6E4D               	movwf	Terminal_SendString@str^0,c
  5052   0015C6  0E1F               	movlw	high STR_6
  5053   0015C8  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5054   0015CA  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5055                           
  5056                           ;TAD_TERMINAL.c: 52:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  5057   0015CE  0EF2               	movlw	low STR_7
  5058   0015D0  6E4D               	movwf	Terminal_SendString@str^0,c
  5059   0015D2  0E1E               	movlw	high STR_7
  5060   0015D4  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5061   0015D6  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5062                           
  5063                           ;TAD_TERMINAL.c: 53:  Terminal_SendString("OpciÃ³: ");
  5064   0015DA  0EE4               	movlw	low STR_8
  5065   0015DC  6E4D               	movwf	Terminal_SendString@str^0,c
  5066   0015DE  0E1F               	movlw	high STR_8
  5067   0015E0  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5068   0015E2  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5069   0015E6  0012               	return		;funcret
  5070   0015E8                     __end_of_showMenu:
  5071                           	callstack 0
  5072                           
  5073 ;; *************** function _showAllConfigurations *****************
  5074 ;; Defined at:
  5075 ;;		line 41 in file "TAD_DATOS.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  j               2    7[COMRAM] int 
  5080 ;;  i               2    9[COMRAM] int 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1
  5090 ;;      Params:         0       0       0
  5091 ;;      Locals:         4       0       0
  5092 ;;      Temps:          0       0       0
  5093 ;;      Totals:         4       0       0
  5094 ;;Total ram usage:        4 bytes
  5095 ;; Hardware stack levels used: 1
  5096 ;; Hardware stack levels required when called: 6
  5097 ;; This function calls:
  5098 ;;		_Terminal_SendChar
  5099 ;;		_Terminal_SendString
  5100 ;; This function is called by:
  5101 ;;		_motorTerminal
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text8
  5106   0012E2                     __ptext8:
  5107                           	callstack 0
  5108   0012E2                     _showAllConfigurations:
  5109                           	callstack 23
  5110   0012E2                     
  5111                           ;TAD_DATOS.c: 42:     for (int i = 0; i < 4; i++) {
  5112   0012E2  0E00               	movlw	0
  5113   0012E4  6E52               	movwf	(showAllConfigurations@i+1)^0,c
  5114   0012E6  0E00               	movlw	0
  5115   0012E8  6E51               	movwf	showAllConfigurations@i^0,c
  5116   0012EA                     l3531:
  5117                           
  5118                           ;TAD_DATOS.c: 43:         Terminal_SendString("User ");
  5119   0012EA  0EED               	movlw	low STR_22
  5120   0012EC  6E4D               	movwf	Terminal_SendString@str^0,c
  5121   0012EE  0E1F               	movlw	high STR_22
  5122   0012F0  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5123   0012F2  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5124   0012F6                     
  5125                           ;TAD_DATOS.c: 44:         Terminal_SendChar('1' + i);
  5126   0012F6  5051               	movf	showAllConfigurations@i^0,w,c
  5127   0012F8  0F31               	addlw	49
  5128   0012FA  ECD2  F00C         	call	_Terminal_SendChar
  5129   0012FE                     
  5130                           ;TAD_DATOS.c: 45:         Terminal_SendString(" Config: ");
  5131   0012FE  0EDA               	movlw	low STR_23
  5132   001300  6E4D               	movwf	Terminal_SendString@str^0,c
  5133   001302  0E1F               	movlw	high STR_23
  5134   001304  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5135   001306  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5136   00130A                     
  5137                           ;TAD_DATOS.c: 47:         for (int j = 0; j < 6; j++) {
  5138   00130A  0E00               	movlw	0
  5139   00130C  6E50               	movwf	(showAllConfigurations@j+1)^0,c
  5140   00130E  0E00               	movlw	0
  5141   001310  6E4F               	movwf	showAllConfigurations@j^0,c
  5142   001312                     l3543:
  5143                           
  5144                           ;TAD_DATOS.c: 49:             Terminal_SendChar('0' + configurations[i][j]);
  5145   001312  5051               	movf	showAllConfigurations@i^0,w,c
  5146   001314  0D06               	mullw	6
  5147   001316  50F3               	movf	243,w,c
  5148   001318  0FC0               	addlw	low _configurations
  5149   00131A  244F               	addwf	showAllConfigurations@j^0,w,c
  5150   00131C  6ED9               	movwf	fsr2l,c
  5151   00131E  6ADA               	clrf	fsr2h,c
  5152   001320  50DF               	movf	indf2,w,c
  5153   001322  0F30               	addlw	48
  5154   001324  ECD2  F00C         	call	_Terminal_SendChar
  5155   001328                     
  5156                           ;TAD_DATOS.c: 50:             Terminal_SendString(" ");
  5157   001328  0EFB               	movlw	low (STR_13+2)
  5158   00132A  6E4D               	movwf	Terminal_SendString@str^0,c
  5159   00132C  0E1F               	movlw	high (STR_13+2)
  5160   00132E  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5161   001330  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5162   001334                     
  5163                           ;TAD_DATOS.c: 51:         }
  5164   001334  4A4F               	infsnz	showAllConfigurations@j^0,f,c
  5165   001336  2A50               	incf	(showAllConfigurations@j+1)^0,f,c
  5166   001338  BE50               	btfsc	(showAllConfigurations@j+1)^0,7,c
  5167   00133A  EFA8  F009         	goto	u2811
  5168   00133E  5050               	movf	(showAllConfigurations@j+1)^0,w,c
  5169   001340  E109               	bnz	u2810
  5170   001342  0E06               	movlw	6
  5171   001344  5C4F               	subwf	showAllConfigurations@j^0,w,c
  5172   001346  A0D8               	btfss	status,0,c
  5173   001348  EFA8  F009         	goto	u2811
  5174   00134C  EFAA  F009         	goto	u2810
  5175   001350                     u2811:
  5176   001350  EF89  F009         	goto	l3543
  5177   001354                     u2810:
  5178   001354                     
  5179                           ;TAD_DATOS.c: 52:         Terminal_SendString("\r\n");
  5180   001354  0EC5               	movlw	low (STR_1+15)
  5181   001356  6E4D               	movwf	Terminal_SendString@str^0,c
  5182   001358  0E1F               	movlw	high (STR_1+15)
  5183   00135A  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5184   00135C  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5185   001360                     
  5186                           ;TAD_DATOS.c: 53:     }
  5187   001360  4A51               	infsnz	showAllConfigurations@i^0,f,c
  5188   001362  2A52               	incf	(showAllConfigurations@i+1)^0,f,c
  5189   001364  BE52               	btfsc	(showAllConfigurations@i+1)^0,7,c
  5190   001366  EFBE  F009         	goto	u2821
  5191   00136A  5052               	movf	(showAllConfigurations@i+1)^0,w,c
  5192   00136C  E109               	bnz	u2820
  5193   00136E  0E04               	movlw	4
  5194   001370  5C51               	subwf	showAllConfigurations@i^0,w,c
  5195   001372  A0D8               	btfss	status,0,c
  5196   001374  EFBE  F009         	goto	u2821
  5197   001378  EFC0  F009         	goto	u2820
  5198   00137C                     u2821:
  5199   00137C  EF75  F009         	goto	l3531
  5200   001380                     u2820:
  5201   001380  0012               	return		;funcret
  5202   001382                     __end_of_showAllConfigurations:
  5203                           	callstack 0
  5204                           
  5205 ;; *************** function _saveHourToData *****************
  5206 ;; Defined at:
  5207 ;;		line 61 in file "TAD_DATOS.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5210 ;;		 -> motorTerminal@hour(4), 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1
  5222 ;;      Params:         1       0       0
  5223 ;;      Locals:         0       0       0
  5224 ;;      Temps:          0       0       0
  5225 ;;      Totals:         1       0       0
  5226 ;;Total ram usage:        1 bytes
  5227 ;; Hardware stack levels used: 1
  5228 ;; Hardware stack levels required when called: 3
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_motorTerminal
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text9
  5237   00184A                     __ptext9:
  5238                           	callstack 0
  5239   00184A                     _saveHourToData:
  5240                           	callstack 26
  5241   00184A                     
  5242                           ;TAD_DATOS.c: 62:     currentTime[0] = hour[0];
  5243   00184A  5049               	movf	saveHourToData@hour^0,w,c
  5244   00184C  6ED9               	movwf	fsr2l,c
  5245   00184E  6ADA               	clrf	fsr2h,c
  5246   001850  50DF               	movf	indf2,w,c
  5247   001852  6E66               	movwf	_currentTime^0,c
  5248   001854                     
  5249                           ;TAD_DATOS.c: 63:     currentTime[1] = hour[1];
  5250   001854  5049               	movf	saveHourToData@hour^0,w,c
  5251   001856  6ED9               	movwf	fsr2l,c
  5252   001858  6ADA               	clrf	fsr2h,c
  5253   00185A  0E01               	movlw	1
  5254   00185C  26D9               	addwf	fsr2l,f,c
  5255   00185E  50DF               	movf	indf2,w,c
  5256   001860  6E67               	movwf	(_currentTime+1)^0,c
  5257   001862                     
  5258                           ;TAD_DATOS.c: 64:     currentTime[2] = hour[2];
  5259   001862  5049               	movf	saveHourToData@hour^0,w,c
  5260   001864  6ED9               	movwf	fsr2l,c
  5261   001866  6ADA               	clrf	fsr2h,c
  5262   001868  0E02               	movlw	2
  5263   00186A  26D9               	addwf	fsr2l,f,c
  5264   00186C  50DF               	movf	indf2,w,c
  5265   00186E  6E68               	movwf	(_currentTime+2)^0,c
  5266   001870                     
  5267                           ;TAD_DATOS.c: 65:     currentTime[3] = hour[3];
  5268   001870  5049               	movf	saveHourToData@hour^0,w,c
  5269   001872  6ED9               	movwf	fsr2l,c
  5270   001874  6ADA               	clrf	fsr2h,c
  5271   001876  0E03               	movlw	3
  5272   001878  26D9               	addwf	fsr2l,f,c
  5273   00187A  50DF               	movf	indf2,w,c
  5274   00187C  6E69               	movwf	(_currentTime+3)^0,c
  5275   00187E  0012               	return		;funcret
  5276   001880                     __end_of_saveHourToData:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _printfUID *****************
  5280 ;; Defined at:
  5281 ;;		line 60 in file "TAD_TERMINAL.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5284 ;;		 -> NULL(0), currentUser(5), 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  low             1   14[COMRAM] unsigned char 
  5287 ;;  high            1   13[COMRAM] unsigned char 
  5288 ;;  i               2   15[COMRAM] int 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1
  5298 ;;      Params:         1       0       0
  5299 ;;      Locals:         8       0       0
  5300 ;;      Temps:          1       0       0
  5301 ;;      Totals:        10       0       0
  5302 ;;Total ram usage:       10 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 6
  5305 ;; This function calls:
  5306 ;;		_Terminal_SendChar
  5307 ;;		_Terminal_SendString
  5308 ;; This function is called by:
  5309 ;;		_motorTerminal
  5310 ;;		_setCurrentUser
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text10
  5315   000F0A                     __ptext10:
  5316                           	callstack 0
  5317   000F0A                     _printfUID:
  5318                           	callstack 22
  5319   000F0A                     
  5320                           ;TAD_TERMINAL.c: 61:  Terminal_SendString("UID: ");
  5321   000F0A  0EF3               	movlw	low STR_9
  5322   000F0C  6E4D               	movwf	Terminal_SendString@str^0,c
  5323   000F0E  0E1F               	movlw	high STR_9
  5324   000F10  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5325   000F12  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5326   000F16                     
  5327                           ;TAD_TERMINAL.c: 62:  for (int i = 0; i < 5; i++) {
  5328   000F16  0E00               	movlw	0
  5329   000F18  6E58               	movwf	(printfUID@i+1)^0,c
  5330   000F1A  0E00               	movlw	0
  5331   000F1C  6E57               	movwf	printfUID@i^0,c
  5332   000F1E                     l3281:
  5333                           
  5334                           ;TAD_TERMINAL.c: 64:   unsigned char high = (currentUser[i] >> 4) & 0x0F;
  5335   000F1E  504F               	movf	printfUID@currentUser^0,w,c
  5336   000F20  2457               	addwf	printfUID@i^0,w,c
  5337   000F22  6ED9               	movwf	fsr2l,c
  5338   000F24  6ADA               	clrf	fsr2h,c
  5339   000F26  50DF               	movf	indf2,w,c
  5340   000F28  6E50               	movwf	??_printfUID^0,c
  5341   000F2A  3850               	swapf	??_printfUID^0,w,c
  5342   000F2C  0B0F               	andlw	15
  5343   000F2E  0B0F               	andlw	15
  5344   000F30  6E55               	movwf	printfUID@high^0,c
  5345   000F32                     
  5346                           ;TAD_TERMINAL.c: 65:   Terminal_SendChar(high < 10 ? '0' + high : 'A' + high - 10);
  5347   000F32  0E09               	movlw	9
  5348   000F34  6455               	cpfsgt	printfUID@high^0,c
  5349   000F36  EF9F  F007         	goto	u2571
  5350   000F3A  EFA1  F007         	goto	u2570
  5351   000F3E                     u2571:
  5352   000F3E  EFA9  F007         	goto	l3287
  5353   000F42                     u2570:
  5354   000F42  0E37               	movlw	55
  5355   000F44  2455               	addwf	printfUID@high^0,w,c
  5356   000F46  6E51               	movwf	_printfUID$857^0,c
  5357   000F48  6A52               	clrf	(_printfUID$857+1)^0,c
  5358   000F4A  0E00               	movlw	0
  5359   000F4C  2252               	addwfc	(_printfUID$857+1)^0,f,c
  5360   000F4E  EFAF  F007         	goto	l3289
  5361   000F52                     l3287:
  5362   000F52  0E30               	movlw	48
  5363   000F54  2455               	addwf	printfUID@high^0,w,c
  5364   000F56  6E51               	movwf	_printfUID$857^0,c
  5365   000F58  6A52               	clrf	(_printfUID$857+1)^0,c
  5366   000F5A  0E00               	movlw	0
  5367   000F5C  2252               	addwfc	(_printfUID$857+1)^0,f,c
  5368   000F5E                     l3289:
  5369   000F5E  5051               	movf	_printfUID$857^0,w,c
  5370   000F60  ECD2  F00C         	call	_Terminal_SendChar
  5371   000F64                     
  5372                           ;TAD_TERMINAL.c: 68:   unsigned char low = currentUser[i] & 0x0F;
  5373   000F64  504F               	movf	printfUID@currentUser^0,w,c
  5374   000F66  2457               	addwf	printfUID@i^0,w,c
  5375   000F68  6ED9               	movwf	fsr2l,c
  5376   000F6A  6ADA               	clrf	fsr2h,c
  5377   000F6C  50DF               	movf	indf2,w,c
  5378   000F6E  0B0F               	andlw	15
  5379   000F70  6E56               	movwf	printfUID@low^0,c
  5380   000F72                     
  5381                           ;TAD_TERMINAL.c: 69:   Terminal_SendChar(low < 10 ? '0' + low : 'A' + low - 10);
  5382   000F72  0E09               	movlw	9
  5383   000F74  6456               	cpfsgt	printfUID@low^0,c
  5384   000F76  EFBF  F007         	goto	u2581
  5385   000F7A  EFC1  F007         	goto	u2580
  5386   000F7E                     u2581:
  5387   000F7E  EFC9  F007         	goto	l3297
  5388   000F82                     u2580:
  5389   000F82  0E37               	movlw	55
  5390   000F84  2456               	addwf	printfUID@low^0,w,c
  5391   000F86  6E53               	movwf	_printfUID$859^0,c
  5392   000F88  6A54               	clrf	(_printfUID$859+1)^0,c
  5393   000F8A  0E00               	movlw	0
  5394   000F8C  2254               	addwfc	(_printfUID$859+1)^0,f,c
  5395   000F8E  EFCF  F007         	goto	l3299
  5396   000F92                     l3297:
  5397   000F92  0E30               	movlw	48
  5398   000F94  2456               	addwf	printfUID@low^0,w,c
  5399   000F96  6E53               	movwf	_printfUID$859^0,c
  5400   000F98  6A54               	clrf	(_printfUID$859+1)^0,c
  5401   000F9A  0E00               	movlw	0
  5402   000F9C  2254               	addwfc	(_printfUID$859+1)^0,f,c
  5403   000F9E                     l3299:
  5404   000F9E  5053               	movf	_printfUID$859^0,w,c
  5405   000FA0  ECD2  F00C         	call	_Terminal_SendChar
  5406   000FA4                     
  5407                           ;TAD_TERMINAL.c: 72:   if (i < 4) Terminal_SendString("-");
  5408   000FA4  BE58               	btfsc	(printfUID@i+1)^0,7,c
  5409   000FA6  EFE0  F007         	goto	u2590
  5410   000FAA  5058               	movf	(printfUID@i+1)^0,w,c
  5411   000FAC  E107               	bnz	u2591
  5412   000FAE  0E04               	movlw	4
  5413   000FB0  5C57               	subwf	printfUID@i^0,w,c
  5414   000FB2  B0D8               	btfsc	status,0,c
  5415   000FB4  EFDE  F007         	goto	u2591
  5416   000FB8  EFE0  F007         	goto	u2590
  5417   000FBC                     u2591:
  5418   000FBC  EFE6  F007         	goto	l3305
  5419   000FC0                     u2590:
  5420   000FC0  0EFD               	movlw	low STR_10
  5421   000FC2  6E4D               	movwf	Terminal_SendString@str^0,c
  5422   000FC4  0E1F               	movlw	high STR_10
  5423   000FC6  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5424   000FC8  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5425   000FCC                     l3305:
  5426                           
  5427                           ;TAD_TERMINAL.c: 73:  }
  5428   000FCC  4A57               	infsnz	printfUID@i^0,f,c
  5429   000FCE  2A58               	incf	(printfUID@i+1)^0,f,c
  5430   000FD0  BE58               	btfsc	(printfUID@i+1)^0,7,c
  5431   000FD2  EFF4  F007         	goto	u2601
  5432   000FD6  5058               	movf	(printfUID@i+1)^0,w,c
  5433   000FD8  E109               	bnz	u2600
  5434   000FDA  0E05               	movlw	5
  5435   000FDC  5C57               	subwf	printfUID@i^0,w,c
  5436   000FDE  A0D8               	btfss	status,0,c
  5437   000FE0  EFF4  F007         	goto	u2601
  5438   000FE4  EFF6  F007         	goto	u2600
  5439   000FE8                     u2601:
  5440   000FE8  EF8F  F007         	goto	l3281
  5441   000FEC                     u2600:
  5442   000FEC                     
  5443                           ;TAD_TERMINAL.c: 74:  Terminal_SendString("\r\n");
  5444   000FEC  0EC5               	movlw	low (STR_1+15)
  5445   000FEE  6E4D               	movwf	Terminal_SendString@str^0,c
  5446   000FF0  0E1F               	movlw	high (STR_1+15)
  5447   000FF2  6E4E               	movwf	(Terminal_SendString@str+1)^0,c
  5448   000FF4  EC40  F00C         	call	_Terminal_SendString	;wreg free
  5449   000FF8  0012               	return		;funcret
  5450   000FFA                     __end_of_printfUID:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function _Terminal_SendString *****************
  5454 ;; Defined at:
  5455 ;;		line 39 in file "TAD_TERMINAL.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5458 ;;		 -> STR_27(2), STR_26(22), STR_25(3), STR_24(2), 
  5459 ;;		 -> STR_23(10), STR_22(6), STR_21(33), STR_20(33), 
  5460 ;;		 -> STR_19(33), STR_18(3), STR_17(3), STR_16(3), 
  5461 ;;		 -> STR_15(3), STR_14(3), STR_13(4), STR_12(3), 
  5462 ;;		 -> STR_11(3), STR_10(2), STR_9(6), STR_8(9), 
  5463 ;;		 -> STR_7(33), STR_6(29), STR_5(27), STR_4(19), 
  5464 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1
  5476 ;;      Params:         2       0       0
  5477 ;;      Locals:         0       0       0
  5478 ;;      Temps:          0       0       0
  5479 ;;      Totals:         2       0       0
  5480 ;;Total ram usage:        2 bytes
  5481 ;; Hardware stack levels used: 1
  5482 ;; Hardware stack levels required when called: 5
  5483 ;; This function calls:
  5484 ;;		_Terminal_SendChar
  5485 ;; This function is called by:
  5486 ;;		_showMenu
  5487 ;;		_printfUID
  5488 ;;		_printLedConfig
  5489 ;;		_motorTerminal
  5490 ;;		_showAllConfigurations
  5491 ;;		_setCurrentUser
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text11
  5496   001880                     __ptext11:
  5497                           	callstack 0
  5498   001880                     _Terminal_SendString:
  5499                           	callstack 22
  5500   001880                     
  5501                           ;TAD_TERMINAL.c: 40:  while (*str) {
  5502   001880  EF4C  F00C         	goto	l3241
  5503   001884                     l3237:
  5504                           
  5505                           ;TAD_TERMINAL.c: 41:   Terminal_SendChar(*str++);
  5506   001884  C04D  FFF6         	movff	Terminal_SendString@str,tblptrl
  5507   001888  C04E  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5508   00188C                     	if	0	;tblptru may be non-zero
  5509   00188C                     	endif
  5510   00188C                     	if	0	;tblptru may be non-zero
  5511   00188C                     	endif
  5512   00188C  0008               	tblrd		*
  5513   00188E  50F5               	movf	tablat,w,c
  5514   001890  ECD2  F00C         	call	_Terminal_SendChar
  5515   001894  4A4D               	infsnz	Terminal_SendString@str^0,f,c
  5516   001896  2A4E               	incf	(Terminal_SendString@str+1)^0,f,c
  5517   001898                     l3241:
  5518                           
  5519                           ;TAD_TERMINAL.c: 40:  while (*str) {
  5520   001898  C04D  FFF6         	movff	Terminal_SendString@str,tblptrl
  5521   00189C  C04E  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5522   0018A0                     	if	0	;tblptru may be non-zero
  5523   0018A0                     	endif
  5524   0018A0                     	if	0	;tblptru may be non-zero
  5525   0018A0                     	endif
  5526   0018A0  0008               	tblrd		*
  5527   0018A2  50F5               	movf	tablat,w,c
  5528   0018A4  0900               	iorlw	0
  5529   0018A6  A4D8               	btfss	status,2,c
  5530   0018A8  EF58  F00C         	goto	u2391
  5531   0018AC  EF5A  F00C         	goto	u2390
  5532   0018B0                     u2391:
  5533   0018B0  EF42  F00C         	goto	l3237
  5534   0018B4                     u2390:
  5535   0018B4  0012               	return		;funcret
  5536   0018B6                     __end_of_Terminal_SendString:
  5537                           	callstack 0
  5538                           
  5539 ;; *************** function _Terminal_SendChar *****************
  5540 ;; Defined at:
  5541 ;;		line 28 in file "TAD_TERMINAL.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  c               1    wreg     unsigned char 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  c               1    4[COMRAM] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1
  5555 ;;      Params:         0       0       0
  5556 ;;      Locals:         1       0       0
  5557 ;;      Temps:          0       0       0
  5558 ;;      Totals:         1       0       0
  5559 ;;Total ram usage:        1 bytes
  5560 ;; Hardware stack levels used: 1
  5561 ;; Hardware stack levels required when called: 4
  5562 ;; This function calls:
  5563 ;;		_Terminal_TXAvailable
  5564 ;; This function is called by:
  5565 ;;		_Terminal_SendString
  5566 ;;		_printfUID
  5567 ;;		_printLedConfig
  5568 ;;		_motorTerminal
  5569 ;;		_showAllConfigurations
  5570 ;;		_motor_datos
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text12
  5575   0019A4                     __ptext12:
  5576                           	callstack 0
  5577   0019A4                     _Terminal_SendChar:
  5578                           	callstack 22
  5579                           
  5580                           ;incstack = 0
  5581                           ;Terminal_SendChar@c stored from wreg
  5582   0019A4  6E4C               	movwf	Terminal_SendChar@c^0,c
  5583   0019A6                     l3217:
  5584   0019A6  ECE1  F00C         	call	_Terminal_TXAvailable	;wreg free
  5585   0019AA  5049               	movf	?_Terminal_TXAvailable^0,w,c
  5586   0019AC  104A               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5587   0019AE  B4D8               	btfsc	status,2,c
  5588   0019B0  EFDC  F00C         	goto	u2381
  5589   0019B4  EFDE  F00C         	goto	u2380
  5590   0019B8                     u2381:
  5591   0019B8  EFD3  F00C         	goto	l3217
  5592   0019BC                     u2380:
  5593   0019BC                     
  5594                           ;TAD_TERMINAL.c: 30:  TXREG = c;
  5595   0019BC  C04C  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5596   0019C0  0012               	return		;funcret
  5597   0019C2                     __end_of_Terminal_SendChar:
  5598                           	callstack 0
  5599                           
  5600 ;; *************** function _Terminal_TXAvailable *****************
  5601 ;; Defined at:
  5602 ;;		line 18 in file "TAD_TERMINAL.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  2    1[COMRAM] int 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1
  5616 ;;      Params:         2       0       0
  5617 ;;      Locals:         0       0       0
  5618 ;;      Temps:          1       0       0
  5619 ;;      Totals:         3       0       0
  5620 ;;Total ram usage:        3 bytes
  5621 ;; Hardware stack levels used: 1
  5622 ;; Hardware stack levels required when called: 3
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_Terminal_SendChar
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text13
  5631   0019C2                     __ptext13:
  5632                           	callstack 0
  5633   0019C2                     _Terminal_TXAvailable:
  5634                           	callstack 22
  5635   0019C2                     
  5636                           ;TAD_TERMINAL.c: 19:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  5637   0019C2  B89E               	btfsc	158,4,c	;volatile
  5638   0019C4  EFE6  F00C         	goto	u2311
  5639   0019C8  EFEA  F00C         	goto	u2310
  5640   0019CC                     u2311:
  5641   0019CC  6A4B               	clrf	??_Terminal_TXAvailable^0,c
  5642   0019CE  2A4B               	incf	??_Terminal_TXAvailable^0,f,c
  5643   0019D0  EFEB  F00C         	goto	u2318
  5644   0019D4                     u2310:
  5645   0019D4  6A4B               	clrf	??_Terminal_TXAvailable^0,c
  5646   0019D6                     u2318:
  5647   0019D6  504B               	movf	??_Terminal_TXAvailable^0,w,c
  5648   0019D8  6E49               	movwf	?_Terminal_TXAvailable^0,c
  5649   0019DA  6A4A               	clrf	(?_Terminal_TXAvailable+1)^0,c
  5650   0019DC  0012               	return		;funcret
  5651   0019DE                     __end_of_Terminal_TXAvailable:
  5652                           	callstack 0
  5653                           
  5654 ;; *************** function _getActualUID *****************
  5655 ;; Defined at:
  5656 ;;		line 28 in file "TAD_DATOS.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    1[COMRAM] PTR unsigned char 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1
  5670 ;;      Params:         2       0       0
  5671 ;;      Locals:         0       0       0
  5672 ;;      Temps:          0       0       0
  5673 ;;      Totals:         2       0       0
  5674 ;;Total ram usage:        2 bytes
  5675 ;; Hardware stack levels used: 1
  5676 ;; Hardware stack levels required when called: 3
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_motor_RFID
  5681 ;;		_motorTerminal
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text14
  5686   0015E8                     __ptext14:
  5687                           	callstack 0
  5688   0015E8                     _getActualUID:
  5689                           	callstack 26
  5690   0015E8                     
  5691                           ;TAD_DATOS.c: 29:  if(currentUser[0] == 0x00 && currentUser[1] == 0x00 && currentUser[2]
      +                           == 0x00 && currentUser[3] == 0x00 && currentUser[4] == 0x00) {
  5692   0015E8  5040               	movf	_currentUser^0,w,c
  5693   0015EA  A4D8               	btfss	status,2,c
  5694   0015EC  EFFA  F00A         	goto	u2721
  5695   0015F0  EFFC  F00A         	goto	u2720
  5696   0015F4                     u2721:
  5697   0015F4  EF1F  F00B         	goto	l3429
  5698   0015F8                     u2720:
  5699   0015F8  5041               	movf	(_currentUser+1)^0,w,c
  5700   0015FA  A4D8               	btfss	status,2,c
  5701   0015FC  EF02  F00B         	goto	u2731
  5702   001600  EF04  F00B         	goto	u2730
  5703   001604                     u2731:
  5704   001604  EF1F  F00B         	goto	l3429
  5705   001608                     u2730:
  5706   001608  5042               	movf	(_currentUser+2)^0,w,c
  5707   00160A  A4D8               	btfss	status,2,c
  5708   00160C  EF0A  F00B         	goto	u2741
  5709   001610  EF0C  F00B         	goto	u2740
  5710   001614                     u2741:
  5711   001614  EF1F  F00B         	goto	l3429
  5712   001618                     u2740:
  5713   001618  5043               	movf	(_currentUser+3)^0,w,c
  5714   00161A  A4D8               	btfss	status,2,c
  5715   00161C  EF12  F00B         	goto	u2751
  5716   001620  EF14  F00B         	goto	u2750
  5717   001624                     u2751:
  5718   001624  EF1F  F00B         	goto	l3429
  5719   001628                     u2750:
  5720   001628  5044               	movf	(_currentUser+4)^0,w,c
  5721   00162A  A4D8               	btfss	status,2,c
  5722   00162C  EF1A  F00B         	goto	u2761
  5723   001630  EF1C  F00B         	goto	u2760
  5724   001634                     u2761:
  5725   001634  EF1F  F00B         	goto	l3429
  5726   001638                     u2760:
  5727   001638                     
  5728                           ;TAD_DATOS.c: 30:   return ((void*)0);
  5729   001638  0E00               	movlw	0
  5730   00163A  EF20  F00B         	goto	l728
  5731   00163E                     l3429:
  5732                           
  5733                           ;TAD_DATOS.c: 32:     return currentUser;
  5734   00163E  0E40               	movlw	_currentUser& (0+255)
  5735   001640                     l728:
  5736   001640  0012               	return		;funcret
  5737   001642                     __end_of_getActualUID:
  5738                           	callstack 0
  5739                           
  5740 ;; *************** function _Terminal_ReceiveChar *****************
  5741 ;; Defined at:
  5742 ;;		line 34 in file "TAD_TERMINAL.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;		None
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1
  5756 ;;      Params:         0       0       0
  5757 ;;      Locals:         0       0       0
  5758 ;;      Temps:          0       0       0
  5759 ;;      Totals:         0       0       0
  5760 ;;Total ram usage:        0 bytes
  5761 ;; Hardware stack levels used: 1
  5762 ;; Hardware stack levels required when called: 3
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_motorTerminal
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text15
  5771   001AE6                     __ptext15:
  5772                           	callstack 0
  5773   001AE6                     _Terminal_ReceiveChar:
  5774                           	callstack 26
  5775   001AE6                     
  5776                           ;TAD_TERMINAL.c: 35:  return RCREG;
  5777   001AE6  50AE               	movf	174,w,c	;volatile
  5778   001AE8  0012               	return		;funcret
  5779   001AEA                     __end_of_Terminal_ReceiveChar:
  5780                           	callstack 0
  5781                           
  5782 ;; *************** function _Terminal_RXAvailable *****************
  5783 ;; Defined at:
  5784 ;;		line 23 in file "TAD_TERMINAL.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;		None
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;		None
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      unsigned char 
  5791 ;; Registers used:
  5792 ;;		wreg
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1
  5798 ;;      Params:         0       0       0
  5799 ;;      Locals:         0       0       0
  5800 ;;      Temps:          0       0       0
  5801 ;;      Totals:         0       0       0
  5802 ;;Total ram usage:        0 bytes
  5803 ;; Hardware stack levels used: 1
  5804 ;; Hardware stack levels required when called: 3
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_motorTerminal
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text16
  5813   001A3C                     __ptext16:
  5814                           	callstack 0
  5815   001A3C                     _Terminal_RXAvailable:
  5816                           	callstack 26
  5817   001A3C                     
  5818                           ;TAD_TERMINAL.c: 24:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  5819   001A3C  BA9E               	btfsc	158,5,c	;volatile
  5820   001A3E  EF23  F00D         	goto	u731
  5821   001A42  EF26  F00D         	goto	u730
  5822   001A46                     u731:
  5823   001A46  0E01               	movlw	1
  5824   001A48  EF27  F00D         	goto	u736
  5825   001A4C                     u730:
  5826   001A4C  0E00               	movlw	0
  5827   001A4E                     u736:
  5828   001A4E  0012               	return		;funcret
  5829   001A50                     __end_of_Terminal_RXAvailable:
  5830                           	callstack 0
  5831                           
  5832 ;; *************** function _initTeclado *****************
  5833 ;; Defined at:
  5834 ;;		line 13 in file "TAD_TECLADO.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1
  5848 ;;      Params:         0       0       0
  5849 ;;      Locals:         0       0       0
  5850 ;;      Temps:          0       0       0
  5851 ;;      Totals:         0       0       0
  5852 ;;Total ram usage:        0 bytes
  5853 ;; Hardware stack levels used: 1
  5854 ;; Hardware stack levels required when called: 4
  5855 ;; This function calls:
  5856 ;;		_TI_NewTimer
  5857 ;;		_initPortsTeclado
  5858 ;; This function is called by:
  5859 ;;		_main
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text17
  5864   001A10                     __ptext17:
  5865                           	callstack 0
  5866   001A10                     _initTeclado:
  5867                           	callstack 26
  5868   001A10                     
  5869                           ;TAD_TECLADO.c: 14:  initPortsTeclado();
  5870   001A10  EC6B  F00D         	call	_initPortsTeclado	;wreg free
  5871   001A14                     
  5872                           ;TAD_TECLADO.c: 15:     Filas = 0x00;
  5873   001A14  6A39               	clrf	_Filas^0,c
  5874   001A16                     
  5875                           ;TAD_TECLADO.c: 16:     Columnas = 0x00;
  5876   001A16  6A38               	clrf	_Columnas^0,c
  5877   001A18                     
  5878                           ;TAD_TECLADO.c: 17:     tecla = 0;
  5879   001A18  6A37               	clrf	_tecla^0,c
  5880   001A1A                     
  5881                           ;TAD_TECLADO.c: 18:  state = 0;
  5882   001A1A  6A36               	clrf	_state^0,c
  5883   001A1C                     
  5884                           ;TAD_TECLADO.c: 19:     TI_NewTimer(&timer);
  5885   001A1C  0E47               	movlw	low _timer
  5886   001A1E  6E49               	movwf	TI_NewTimer@TimerHandle^0,c
  5887   001A20  EC4D  F00B         	call	_TI_NewTimer	;wreg free
  5888   001A24  0012               	return		;funcret
  5889   001A26                     __end_of_initTeclado:
  5890                           	callstack 0
  5891                           
  5892 ;; *************** function _initPortsTeclado *****************
  5893 ;; Defined at:
  5894 ;;		line 22 in file "TAD_TECLADO.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;		None
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg, status,2
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1
  5908 ;;      Params:         0       0       0
  5909 ;;      Locals:         0       0       0
  5910 ;;      Temps:          0       0       0
  5911 ;;      Totals:         0       0       0
  5912 ;;Total ram usage:        0 bytes
  5913 ;; Hardware stack levels used: 1
  5914 ;; Hardware stack levels required when called: 3
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_initTeclado
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text18
  5923   001AD6                     __ptext18:
  5924                           	callstack 0
  5925   001AD6                     _initPortsTeclado:
  5926                           	callstack 26
  5927   001AD6                     
  5928                           ;TAD_TECLADO.c: 25:  TRISD = 0x0F;
  5929   001AD6  0E0F               	movlw	15
  5930   001AD8  6E95               	movwf	149,c	;volatile
  5931   001ADA                     
  5932                           ;TAD_TECLADO.c: 26:  LATD = 0x00;
  5933   001ADA  6A8C               	clrf	140,c	;volatile
  5934   001ADC  0012               	return		;funcret
  5935   001ADE                     __end_of_initPortsTeclado:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _initRFID *****************
  5939 ;; Defined at:
  5940 ;;		line 270 in file "TAD_RFID.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1
  5954 ;;      Params:         0       0       0
  5955 ;;      Locals:         0       0       0
  5956 ;;      Temps:          0       0       0
  5957 ;;      Totals:         0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 8
  5961 ;; This function calls:
  5962 ;;		_InitPortDirections
  5963 ;;		_MFRC522_Init
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text19
  5970   001ABA                     __ptext19:
  5971                           	callstack 0
  5972   001ABA                     _initRFID:
  5973                           	callstack 22
  5974   001ABA                     
  5975                           ;TAD_RFID.c: 271:     InitPortDirections();
  5976   001ABA  EC57  F00D         	call	_InitPortDirections	;wreg free
  5977   001ABE                     
  5978                           ;TAD_RFID.c: 272:     MFRC522_Init();
  5979   001ABE  EC78  F00B         	call	_MFRC522_Init	;wreg free
  5980   001AC2  0012               	return		;funcret
  5981   001AC4                     __end_of_initRFID:
  5982                           	callstack 0
  5983                           
  5984 ;; *************** function _MFRC522_Init *****************
  5985 ;; Defined at:
  5986 ;;		line 134 in file "TAD_RFID.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1
  6000 ;;      Params:         0       0       0
  6001 ;;      Locals:         0       0       0
  6002 ;;      Temps:          0       0       0
  6003 ;;      Totals:         0       0       0
  6004 ;;Total ram usage:        0 bytes
  6005 ;; Hardware stack levels used: 1
  6006 ;; Hardware stack levels required when called: 7
  6007 ;; This function calls:
  6008 ;;		_MFRC522_AntennaOff
  6009 ;;		_MFRC522_AntennaOn
  6010 ;;		_MFRC522_Reset
  6011 ;;		_MFRC522_Wr
  6012 ;; This function is called by:
  6013 ;;		_initRFID
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           	psect	text20
  6018   0016F0                     __ptext20:
  6019                           	callstack 0
  6020   0016F0                     _MFRC522_Init:
  6021                           	callstack 22
  6022   0016F0                     
  6023                           ;TAD_RFID.c: 135:     LATCbits.LATC3 = 1;
  6024   0016F0  868B               	bsf	139,3,c	;volatile
  6025                           
  6026                           ;TAD_RFID.c: 136:     LATCbits.LATC4 = 1;
  6027   0016F2  888B               	bsf	139,4,c	;volatile
  6028   0016F4                     
  6029                           ;TAD_RFID.c: 138:     MFRC522_Reset();
  6030   0016F4  ECA9  F00C         	call	_MFRC522_Reset	;wreg free
  6031                           
  6032                           ;TAD_RFID.c: 139:     MFRC522_Wr(0x2A, 0x8D);
  6033   0016F8  0E8D               	movlw	141
  6034   0016FA  6E53               	movwf	MFRC522_Wr@value^0,c
  6035   0016FC  0E2A               	movlw	42
  6036   0016FE  ECCC  F008         	call	_MFRC522_Wr
  6037                           
  6038                           ;TAD_RFID.c: 140:     MFRC522_Wr(0x2B, 0x3E);
  6039   001702  0E3E               	movlw	62
  6040   001704  6E53               	movwf	MFRC522_Wr@value^0,c
  6041   001706  0E2B               	movlw	43
  6042   001708  ECCC  F008         	call	_MFRC522_Wr
  6043                           
  6044                           ;TAD_RFID.c: 141:     MFRC522_Wr(0x2D, 30);
  6045   00170C  0E1E               	movlw	30
  6046   00170E  6E53               	movwf	MFRC522_Wr@value^0,c
  6047   001710  0E2D               	movlw	45
  6048   001712  ECCC  F008         	call	_MFRC522_Wr
  6049                           
  6050                           ;TAD_RFID.c: 142:     MFRC522_Wr(0x2C, 0);
  6051   001716  0E00               	movlw	0
  6052   001718  6E53               	movwf	MFRC522_Wr@value^0,c
  6053   00171A  0E2C               	movlw	44
  6054   00171C  ECCC  F008         	call	_MFRC522_Wr
  6055                           
  6056                           ;TAD_RFID.c: 143:     MFRC522_Wr(0x15, 0x40);
  6057   001720  0E40               	movlw	64
  6058   001722  6E53               	movwf	MFRC522_Wr@value^0,c
  6059   001724  0E15               	movlw	21
  6060   001726  ECCC  F008         	call	_MFRC522_Wr
  6061                           
  6062                           ;TAD_RFID.c: 144:     MFRC522_Wr(0x11, 0x3D);
  6063   00172A  0E3D               	movlw	61
  6064   00172C  6E53               	movwf	MFRC522_Wr@value^0,c
  6065   00172E  0E11               	movlw	17
  6066   001730  ECCC  F008         	call	_MFRC522_Wr
  6067                           
  6068                           ;TAD_RFID.c: 146:     MFRC522_AntennaOff();
  6069   001734  EC51  F00D         	call	_MFRC522_AntennaOff	;wreg free
  6070                           
  6071                           ;TAD_RFID.c: 147:     MFRC522_AntennaOn();
  6072   001738  EC4B  F00D         	call	_MFRC522_AntennaOn	;wreg free
  6073   00173C  0012               	return		;funcret
  6074   00173E                     __end_of_MFRC522_Init:
  6075                           	callstack 0
  6076                           
  6077 ;; *************** function _MFRC522_Reset *****************
  6078 ;; Defined at:
  6079 ;;		line 113 in file "TAD_RFID.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1
  6093 ;;      Params:         0       0       0
  6094 ;;      Locals:         0       0       0
  6095 ;;      Temps:          0       0       0
  6096 ;;      Totals:         0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used: 1
  6099 ;; Hardware stack levels required when called: 5
  6100 ;; This function calls:
  6101 ;;		_MFRC522_Wr
  6102 ;;		_delay_us
  6103 ;;		_resetMotorStates
  6104 ;; This function is called by:
  6105 ;;		_MFRC522_Init
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text21
  6110   001952                     __ptext21:
  6111                           	callstack 0
  6112   001952                     _MFRC522_Reset:
  6113                           	callstack 23
  6114   001952                     
  6115                           ;TAD_RFID.c: 114:     resetMotorStates();
  6116   001952  EC62  F00D         	call	_resetMotorStates	;wreg free
  6117   001956                     
  6118                           ;TAD_RFID.c: 116:     LATCbits.LATC4 = 1;
  6119   001956  888B               	bsf	139,4,c	;volatile
  6120   001958                     
  6121                           ;TAD_RFID.c: 117:     delay_us (1);
  6122   001958  0E01               	movlw	1
  6123   00195A  EC5B  F00C         	call	_delay_us
  6124   00195E                     
  6125                           ;TAD_RFID.c: 118:     LATCbits.LATC4 = 0;
  6126   00195E  988B               	bcf	139,4,c	;volatile
  6127   001960                     
  6128                           ;TAD_RFID.c: 119:     delay_us (1);
  6129   001960  0E01               	movlw	1
  6130   001962  EC5B  F00C         	call	_delay_us
  6131   001966                     
  6132                           ;TAD_RFID.c: 120:     LATCbits.LATC4 = 1;
  6133   001966  888B               	bsf	139,4,c	;volatile
  6134   001968                     
  6135                           ;TAD_RFID.c: 121:     delay_us (1);
  6136   001968  0E01               	movlw	1
  6137   00196A  EC5B  F00C         	call	_delay_us
  6138   00196E                     
  6139                           ;TAD_RFID.c: 122:     MFRC522_Wr(0x01, 0x0F);
  6140   00196E  0E0F               	movlw	15
  6141   001970  6E53               	movwf	MFRC522_Wr@value^0,c
  6142   001972  0E01               	movlw	1
  6143   001974  ECCC  F008         	call	_MFRC522_Wr
  6144   001978                     
  6145                           ;TAD_RFID.c: 123:     delay_us (1);
  6146   001978  0E01               	movlw	1
  6147   00197A  EC5B  F00C         	call	_delay_us
  6148   00197E  0012               	return		;funcret
  6149   001980                     __end_of_MFRC522_Reset:
  6150                           	callstack 0
  6151                           
  6152 ;; *************** function _resetMotorStates *****************
  6153 ;; Defined at:
  6154 ;;		line 103 in file "TAD_RFID.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		None
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1
  6168 ;;      Params:         0       0       0
  6169 ;;      Locals:         0       0       0
  6170 ;;      Temps:          0       0       0
  6171 ;;      Totals:         0       0       0
  6172 ;;Total ram usage:        0 bytes
  6173 ;; Hardware stack levels used: 1
  6174 ;; Hardware stack levels required when called: 3
  6175 ;; This function calls:
  6176 ;;		Nothing
  6177 ;; This function is called by:
  6178 ;;		_MFRC522_Reset
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text22
  6183   001AC4                     __ptext22:
  6184                           	callstack 0
  6185   001AC4                     _resetMotorStates:
  6186                           	callstack 24
  6187   001AC4                     
  6188                           ;TAD_RFID.c: 105:     state_read = 0;
  6189   001AC4  6A35               	clrf	_state_read^0,c
  6190                           
  6191                           ;TAD_RFID.c: 106:     state_write = 0;
  6192   001AC6  6A34               	clrf	_state_write^0,c
  6193                           
  6194                           ;TAD_RFID.c: 109:     LATCbits.LATC3 = 1;
  6195   001AC8  868B               	bsf	139,3,c	;volatile
  6196                           
  6197                           ;TAD_RFID.c: 110:     LATCbits.LATC2 = 1;
  6198   001ACA  848B               	bsf	139,2,c	;volatile
  6199   001ACC  0012               	return		;funcret
  6200   001ACE                     __end_of_resetMotorStates:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _MFRC522_AntennaOn *****************
  6204 ;; Defined at:
  6205 ;;		line 126 in file "TAD_RFID.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1
  6219 ;;      Params:         0       0       0
  6220 ;;      Locals:         0       0       0
  6221 ;;      Temps:          0       0       0
  6222 ;;      Totals:         0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used: 1
  6225 ;; Hardware stack levels required when called: 6
  6226 ;; This function calls:
  6227 ;;		_MFRC522_Set_Bit
  6228 ;; This function is called by:
  6229 ;;		_MFRC522_Init
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text23
  6234   001A96                     __ptext23:
  6235                           	callstack 0
  6236   001A96                     _MFRC522_AntennaOn:
  6237                           	callstack 22
  6238   001A96                     
  6239                           ;TAD_RFID.c: 127:     MFRC522_Set_Bit(0x14, 0x03);
  6240   001A96  0E03               	movlw	3
  6241   001A98  6E58               	movwf	MFRC522_Set_Bit@mask^0,c
  6242   001A9A  0E14               	movlw	20
  6243   001A9C  EC28  F00D         	call	_MFRC522_Set_Bit
  6244   001AA0  0012               	return		;funcret
  6245   001AA2                     __end_of_MFRC522_AntennaOn:
  6246                           	callstack 0
  6247                           
  6248 ;; *************** function _MFRC522_Set_Bit *****************
  6249 ;; Defined at:
  6250 ;;		line 99 in file "TAD_RFID.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;  addr            1    wreg     unsigned char 
  6253 ;;  mask            1   16[COMRAM] unsigned char 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  addr            1   17[COMRAM] unsigned char 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1
  6265 ;;      Params:         1       0       0
  6266 ;;      Locals:         1       0       0
  6267 ;;      Temps:          0       0       0
  6268 ;;      Totals:         2       0       0
  6269 ;;Total ram usage:        2 bytes
  6270 ;; Hardware stack levels used: 1
  6271 ;; Hardware stack levels required when called: 5
  6272 ;; This function calls:
  6273 ;;		_MFRC522_Rd
  6274 ;;		_MFRC522_Wr
  6275 ;; This function is called by:
  6276 ;;		_MFRC522_AntennaOn
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text24
  6281   001A50                     __ptext24:
  6282                           	callstack 0
  6283   001A50                     _MFRC522_Set_Bit:
  6284                           	callstack 22
  6285                           
  6286                           ;incstack = 0
  6287                           ;MFRC522_Set_Bit@addr stored from wreg
  6288   001A50  6E59               	movwf	MFRC522_Set_Bit@addr^0,c
  6289   001A52                     
  6290                           ;TAD_RFID.c: 100:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  6291   001A52  5059               	movf	MFRC522_Set_Bit@addr^0,w,c
  6292   001A54  EC20  F009         	call	_MFRC522_Rd
  6293   001A58  1058               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  6294   001A5A  6E53               	movwf	MFRC522_Wr@value^0,c
  6295   001A5C  5059               	movf	MFRC522_Set_Bit@addr^0,w,c
  6296   001A5E  ECCC  F008         	call	_MFRC522_Wr
  6297   001A62  0012               	return		;funcret
  6298   001A64                     __end_of_MFRC522_Set_Bit:
  6299                           	callstack 0
  6300                           
  6301 ;; *************** function _MFRC522_AntennaOff *****************
  6302 ;; Defined at:
  6303 ;;		line 130 in file "TAD_RFID.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1
  6317 ;;      Params:         0       0       0
  6318 ;;      Locals:         0       0       0
  6319 ;;      Temps:          0       0       0
  6320 ;;      Totals:         0       0       0
  6321 ;;Total ram usage:        0 bytes
  6322 ;; Hardware stack levels used: 1
  6323 ;; Hardware stack levels required when called: 6
  6324 ;; This function calls:
  6325 ;;		_MFRC522_Clear_Bit
  6326 ;; This function is called by:
  6327 ;;		_MFRC522_Init
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text25
  6332   001AA2                     __ptext25:
  6333                           	callstack 0
  6334   001AA2                     _MFRC522_AntennaOff:
  6335                           	callstack 22
  6336   001AA2                     
  6337                           ;TAD_RFID.c: 131:     MFRC522_Clear_Bit(0x14, 0x03);
  6338   001AA2  0E03               	movlw	3
  6339   001AA4  6E58               	movwf	MFRC522_Clear_Bit@mask^0,c
  6340   001AA6  0E14               	movlw	20
  6341   001AA8  ECEF  F00C         	call	_MFRC522_Clear_Bit
  6342   001AAC  0012               	return		;funcret
  6343   001AAE                     __end_of_MFRC522_AntennaOff:
  6344                           	callstack 0
  6345                           
  6346 ;; *************** function _MFRC522_Clear_Bit *****************
  6347 ;; Defined at:
  6348 ;;		line 95 in file "TAD_RFID.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;  addr            1    wreg     unsigned char 
  6351 ;;  mask            1   16[COMRAM] unsigned char 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  addr            1   18[COMRAM] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1
  6363 ;;      Params:         1       0       0
  6364 ;;      Locals:         1       0       0
  6365 ;;      Temps:          1       0       0
  6366 ;;      Totals:         3       0       0
  6367 ;;Total ram usage:        3 bytes
  6368 ;; Hardware stack levels used: 1
  6369 ;; Hardware stack levels required when called: 5
  6370 ;; This function calls:
  6371 ;;		_MFRC522_Rd
  6372 ;;		_MFRC522_Wr
  6373 ;; This function is called by:
  6374 ;;		_MFRC522_AntennaOff
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text26
  6379   0019DE                     __ptext26:
  6380                           	callstack 0
  6381   0019DE                     _MFRC522_Clear_Bit:
  6382                           	callstack 22
  6383                           
  6384                           ;incstack = 0
  6385                           ;MFRC522_Clear_Bit@addr stored from wreg
  6386   0019DE  6E5A               	movwf	MFRC522_Clear_Bit@addr^0,c
  6387   0019E0                     
  6388                           ;TAD_RFID.c: 96:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  6389   0019E0  5058               	movf	MFRC522_Clear_Bit@mask^0,w,c
  6390   0019E2  0AFF               	xorlw	255
  6391   0019E4  6E59               	movwf	??_MFRC522_Clear_Bit^0,c
  6392   0019E6  505A               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6393   0019E8  EC20  F009         	call	_MFRC522_Rd
  6394   0019EC  1459               	andwf	??_MFRC522_Clear_Bit^0,w,c
  6395   0019EE  6E53               	movwf	MFRC522_Wr@value^0,c
  6396   0019F0  505A               	movf	MFRC522_Clear_Bit@addr^0,w,c
  6397   0019F2  ECCC  F008         	call	_MFRC522_Wr
  6398   0019F6  0012               	return		;funcret
  6399   0019F8                     __end_of_MFRC522_Clear_Bit:
  6400                           	callstack 0
  6401                           
  6402 ;; *************** function _MFRC522_Wr *****************
  6403 ;; Defined at:
  6404 ;;		line 67 in file "TAD_RFID.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  Address         1    wreg     unsigned char 
  6407 ;;  value           1   11[COMRAM] unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  Address         1   13[COMRAM] unsigned char 
  6410 ;;  i               1   15[COMRAM] unsigned char 
  6411 ;;  ucAddr          1   14[COMRAM] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1
  6421 ;;      Params:         1       0       0
  6422 ;;      Locals:         3       0       0
  6423 ;;      Temps:          1       0       0
  6424 ;;      Totals:         5       0       0
  6425 ;;Total ram usage:        5 bytes
  6426 ;; Hardware stack levels used: 1
  6427 ;; Hardware stack levels required when called: 4
  6428 ;; This function calls:
  6429 ;;		_delay_us
  6430 ;; This function is called by:
  6431 ;;		_MFRC522_Clear_Bit
  6432 ;;		_MFRC522_Set_Bit
  6433 ;;		_MFRC522_Reset
  6434 ;;		_MFRC522_Init
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text27
  6439   001198                     __ptext27:
  6440                           	callstack 0
  6441   001198                     _MFRC522_Wr:
  6442                           	callstack 24
  6443                           
  6444                           ;incstack = 0
  6445                           ;MFRC522_Wr@Address stored from wreg
  6446   001198  6E55               	movwf	MFRC522_Wr@Address^0,c
  6447   00119A                     
  6448                           ;TAD_RFID.c: 68:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  6449   00119A  5055               	movf	MFRC522_Wr@Address^0,w,c
  6450   00119C  2455               	addwf	MFRC522_Wr@Address^0,w,c
  6451   00119E  0B7E               	andlw	126
  6452   0011A0  6E56               	movwf	MFRC522_Wr@ucAddr^0,c
  6453   0011A2                     
  6454                           ;TAD_RFID.c: 69:     LATCbits.LATC2 = 0;
  6455   0011A2  948B               	bcf	139,2,c	;volatile
  6456   0011A4                     
  6457                           ;TAD_RFID.c: 70:     LATCbits.LATC3 = 0;
  6458   0011A4  968B               	bcf	139,3,c	;volatile
  6459   0011A6                     
  6460                           ;TAD_RFID.c: 71:     for (i = 8; i > 0; i--) {
  6461   0011A6  0E08               	movlw	8
  6462   0011A8  6E57               	movwf	MFRC522_Wr@i^0,c
  6463   0011AA                     l3183:
  6464                           
  6465                           ;TAD_RFID.c: 72:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6466   0011AA  BE56               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  6467   0011AC  EFDA  F008         	goto	u2321
  6468   0011B0  EFDE  F008         	goto	u2320
  6469   0011B4                     u2321:
  6470   0011B4  6A54               	clrf	??_MFRC522_Wr^0,c
  6471   0011B6  2A54               	incf	??_MFRC522_Wr^0,f,c
  6472   0011B8  EFDF  F008         	goto	u2338
  6473   0011BC                     u2320:
  6474   0011BC  6A54               	clrf	??_MFRC522_Wr^0,c
  6475   0011BE                     u2338:
  6476   0011BE  4654               	rlncf	??_MFRC522_Wr^0,f,c
  6477   0011C0  508B               	movf	139,w,c	;volatile
  6478   0011C2  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6479   0011C4  0BFD               	andlw	-3
  6480   0011C6  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6481   0011C8  6E8B               	movwf	139,c	;volatile
  6482   0011CA                     
  6483                           ;TAD_RFID.c: 73:         LATCbits.LATC2 = 1;
  6484   0011CA  848B               	bsf	139,2,c	;volatile
  6485                           
  6486                           ;TAD_RFID.c: 74:         ucAddr <<= 1;
  6487   0011CC  90D8               	bcf	status,0,c
  6488   0011CE  3656               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  6489   0011D0                     
  6490                           ;TAD_RFID.c: 75:         delay_us(5);
  6491   0011D0  0E05               	movlw	5
  6492   0011D2  EC5B  F00C         	call	_delay_us
  6493   0011D6                     
  6494                           ;TAD_RFID.c: 76:         LATCbits.LATC2 = 0;
  6495   0011D6  948B               	bcf	139,2,c	;volatile
  6496   0011D8                     
  6497                           ;TAD_RFID.c: 77:         delay_us(5);
  6498   0011D8  0E05               	movlw	5
  6499   0011DA  EC5B  F00C         	call	_delay_us
  6500   0011DE                     
  6501                           ;TAD_RFID.c: 78:     }
  6502   0011DE  0657               	decf	MFRC522_Wr@i^0,f,c
  6503   0011E0  5057               	movf	MFRC522_Wr@i^0,w,c
  6504   0011E2  A4D8               	btfss	status,2,c
  6505   0011E4  EFF6  F008         	goto	u2341
  6506   0011E8  EFF8  F008         	goto	u2340
  6507   0011EC                     u2341:
  6508   0011EC  EFD5  F008         	goto	l3183
  6509   0011F0                     u2340:
  6510   0011F0                     
  6511                           ;TAD_RFID.c: 80:     for (i = 8; i > 0; i--) {
  6512   0011F0  0E08               	movlw	8
  6513   0011F2  6E57               	movwf	MFRC522_Wr@i^0,c
  6514   0011F4                     l3201:
  6515                           
  6516                           ;TAD_RFID.c: 81:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  6517   0011F4  BE53               	btfsc	MFRC522_Wr@value^0,7,c
  6518   0011F6  EFFF  F008         	goto	u2351
  6519   0011FA  EF03  F009         	goto	u2350
  6520   0011FE                     u2351:
  6521   0011FE  6A54               	clrf	??_MFRC522_Wr^0,c
  6522   001200  2A54               	incf	??_MFRC522_Wr^0,f,c
  6523   001202  EF04  F009         	goto	u2368
  6524   001206                     u2350:
  6525   001206  6A54               	clrf	??_MFRC522_Wr^0,c
  6526   001208                     u2368:
  6527   001208  4654               	rlncf	??_MFRC522_Wr^0,f,c
  6528   00120A  508B               	movf	139,w,c	;volatile
  6529   00120C  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6530   00120E  0BFD               	andlw	-3
  6531   001210  1854               	xorwf	??_MFRC522_Wr^0,w,c
  6532   001212  6E8B               	movwf	139,c	;volatile
  6533   001214                     
  6534                           ;TAD_RFID.c: 82:         LATCbits.LATC2 = 1;
  6535   001214  848B               	bsf	139,2,c	;volatile
  6536                           
  6537                           ;TAD_RFID.c: 83:         value <<= 1;
  6538   001216  90D8               	bcf	status,0,c
  6539   001218  3653               	rlcf	MFRC522_Wr@value^0,f,c
  6540   00121A                     
  6541                           ;TAD_RFID.c: 84:         delay_us(5);
  6542   00121A  0E05               	movlw	5
  6543   00121C  EC5B  F00C         	call	_delay_us
  6544   001220                     
  6545                           ;TAD_RFID.c: 85:         LATCbits.LATC2 = 0;
  6546   001220  948B               	bcf	139,2,c	;volatile
  6547   001222                     
  6548                           ;TAD_RFID.c: 86:         delay_us(5);
  6549   001222  0E05               	movlw	5
  6550   001224  EC5B  F00C         	call	_delay_us
  6551   001228                     
  6552                           ;TAD_RFID.c: 87:     }
  6553   001228  0657               	decf	MFRC522_Wr@i^0,f,c
  6554   00122A  5057               	movf	MFRC522_Wr@i^0,w,c
  6555   00122C  A4D8               	btfss	status,2,c
  6556   00122E  EF1B  F009         	goto	u2371
  6557   001232  EF1D  F009         	goto	u2370
  6558   001236                     u2371:
  6559   001236  EFFA  F008         	goto	l3201
  6560   00123A                     u2370:
  6561   00123A                     
  6562                           ;TAD_RFID.c: 89:     LATCbits.LATC3 = 1;
  6563   00123A  868B               	bsf	139,3,c	;volatile
  6564                           
  6565                           ;TAD_RFID.c: 90:     LATCbits.LATC2 = 1;
  6566   00123C  848B               	bsf	139,2,c	;volatile
  6567   00123E  0012               	return		;funcret
  6568   001240                     __end_of_MFRC522_Wr:
  6569                           	callstack 0
  6570                           
  6571 ;; *************** function _MFRC522_Rd *****************
  6572 ;; Defined at:
  6573 ;;		line 36 in file "TAD_RFID.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  Address         1    wreg     unsigned char 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  Address         1    7[COMRAM] unsigned char 
  6578 ;;  i               1   10[COMRAM] unsigned char 
  6579 ;;  ucResult        1    9[COMRAM] unsigned char 
  6580 ;;  ucAddr          1    8[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1
  6590 ;;      Params:         0       0       0
  6591 ;;      Locals:         4       0       0
  6592 ;;      Temps:          1       0       0
  6593 ;;      Totals:         5       0       0
  6594 ;;Total ram usage:        5 bytes
  6595 ;; Hardware stack levels used: 1
  6596 ;; Hardware stack levels required when called: 4
  6597 ;; This function calls:
  6598 ;;		_delay_us
  6599 ;; This function is called by:
  6600 ;;		_MFRC522_Clear_Bit
  6601 ;;		_MFRC522_Set_Bit
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text28
  6606   001240                     __ptext28:
  6607                           	callstack 0
  6608   001240                     _MFRC522_Rd:
  6609                           	callstack 22
  6610                           
  6611                           ;incstack = 0
  6612                           ;MFRC522_Rd@Address stored from wreg
  6613   001240  6E4F               	movwf	MFRC522_Rd@Address^0,c
  6614   001242                     
  6615                           ;TAD_RFID.c: 37:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  6616   001242  504F               	movf	MFRC522_Rd@Address^0,w,c
  6617   001244  244F               	addwf	MFRC522_Rd@Address^0,w,c
  6618   001246  0B7E               	andlw	126
  6619   001248  0980               	iorlw	128
  6620   00124A  6E50               	movwf	MFRC522_Rd@ucAddr^0,c
  6621   00124C                     
  6622                           ;TAD_RFID.c: 38:     unsigned char ucResult = 0;
  6623   00124C  6A51               	clrf	MFRC522_Rd@ucResult^0,c
  6624   00124E                     
  6625                           ;TAD_RFID.c: 40:     LATCbits.LATC2 = 0;
  6626   00124E  948B               	bcf	139,2,c	;volatile
  6627   001250                     
  6628                           ;TAD_RFID.c: 41:     LATCbits.LATC3 = 0;
  6629   001250  968B               	bcf	139,3,c	;volatile
  6630   001252                     
  6631                           ;TAD_RFID.c: 43:     for (i = 8; i > 0; i--) {
  6632   001252  0E08               	movlw	8
  6633   001254  6E52               	movwf	MFRC522_Rd@i^0,c
  6634   001256                     l1549:
  6635                           
  6636                           ;TAD_RFID.c: 44:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  6637   001256  BE50               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  6638   001258  EF30  F009         	goto	u31
  6639   00125C  EF34  F009         	goto	u30
  6640   001260                     u31:
  6641   001260  6A4E               	clrf	??_MFRC522_Rd^0,c
  6642   001262  2A4E               	incf	??_MFRC522_Rd^0,f,c
  6643   001264  EF35  F009         	goto	u48
  6644   001268                     u30:
  6645   001268  6A4E               	clrf	??_MFRC522_Rd^0,c
  6646   00126A                     u48:
  6647   00126A  464E               	rlncf	??_MFRC522_Rd^0,f,c
  6648   00126C  508B               	movf	139,w,c	;volatile
  6649   00126E  184E               	xorwf	??_MFRC522_Rd^0,w,c
  6650   001270  0BFD               	andlw	-3
  6651   001272  184E               	xorwf	??_MFRC522_Rd^0,w,c
  6652   001274  6E8B               	movwf	139,c	;volatile
  6653   001276                     
  6654                           ;TAD_RFID.c: 45:         LATCbits.LATC2 = 1;
  6655   001276  848B               	bsf	139,2,c	;volatile
  6656   001278                     
  6657                           ;TAD_RFID.c: 46:         delay_us(5);
  6658   001278  0E05               	movlw	5
  6659   00127A  EC5B  F00C         	call	_delay_us
  6660   00127E                     
  6661                           ;TAD_RFID.c: 47:         ucAddr <<= 1;
  6662   00127E  90D8               	bcf	status,0,c
  6663   001280  3650               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  6664   001282                     
  6665                           ;TAD_RFID.c: 48:         LATCbits.LATC2 = 0;
  6666   001282  948B               	bcf	139,2,c	;volatile
  6667                           
  6668                           ;TAD_RFID.c: 49:         delay_us(5);
  6669   001284  0E05               	movlw	5
  6670   001286  EC5B  F00C         	call	_delay_us
  6671   00128A                     
  6672                           ;TAD_RFID.c: 50:     }
  6673   00128A  0652               	decf	MFRC522_Rd@i^0,f,c
  6674   00128C  5052               	movf	MFRC522_Rd@i^0,w,c
  6675   00128E  A4D8               	btfss	status,2,c
  6676   001290  EF4C  F009         	goto	u51
  6677   001294  EF4E  F009         	goto	u50
  6678   001298                     u51:
  6679   001298  EF2B  F009         	goto	l1549
  6680   00129C                     u50:
  6681   00129C                     
  6682                           ;TAD_RFID.c: 52:     for (i = 8; i > 0; i--) {
  6683   00129C  0E08               	movlw	8
  6684   00129E  6E52               	movwf	MFRC522_Rd@i^0,c
  6685   0012A0                     l220:
  6686                           
  6687                           ;TAD_RFID.c: 53:         LATCbits.LATC2 = 1;
  6688   0012A0  848B               	bsf	139,2,c	;volatile
  6689   0012A2                     
  6690                           ;TAD_RFID.c: 54:         delay_us(5);
  6691   0012A2  0E05               	movlw	5
  6692   0012A4  EC5B  F00C         	call	_delay_us
  6693   0012A8                     
  6694                           ;TAD_RFID.c: 55:         ucResult <<= 1;
  6695   0012A8  90D8               	bcf	status,0,c
  6696   0012AA  3651               	rlcf	MFRC522_Rd@ucResult^0,f,c
  6697   0012AC                     
  6698                           ;TAD_RFID.c: 56:         ucResult|= PORTCbits.RC0;
  6699   0012AC  B082               	btfsc	130,0,c	;volatile
  6700   0012AE  EF5B  F009         	goto	u61
  6701   0012B2  EF5E  F009         	goto	u60
  6702   0012B6                     u61:
  6703   0012B6  0E01               	movlw	1
  6704   0012B8  EF5F  F009         	goto	u66
  6705   0012BC                     u60:
  6706   0012BC  0E00               	movlw	0
  6707   0012BE                     u66:
  6708   0012BE  1251               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6709   0012C0                     
  6710                           ;TAD_RFID.c: 57:         LATCbits.LATC2 = 0;
  6711   0012C0  948B               	bcf	139,2,c	;volatile
  6712                           
  6713                           ;TAD_RFID.c: 58:         delay_us(5);
  6714   0012C2  0E05               	movlw	5
  6715   0012C4  EC5B  F00C         	call	_delay_us
  6716   0012C8                     
  6717                           ;TAD_RFID.c: 59:     }
  6718   0012C8  0652               	decf	MFRC522_Rd@i^0,f,c
  6719   0012CA  5052               	movf	MFRC522_Rd@i^0,w,c
  6720   0012CC  A4D8               	btfss	status,2,c
  6721   0012CE  EF6B  F009         	goto	u71
  6722   0012D2  EF6D  F009         	goto	u70
  6723   0012D6                     u71:
  6724   0012D6  EF50  F009         	goto	l220
  6725   0012DA                     u70:
  6726   0012DA                     
  6727                           ;TAD_RFID.c: 61:     LATCbits.LATC3 = 1;
  6728   0012DA  868B               	bsf	139,3,c	;volatile
  6729                           
  6730                           ;TAD_RFID.c: 62:     LATCbits.LATC2 = 1;
  6731   0012DC  848B               	bsf	139,2,c	;volatile
  6732   0012DE                     
  6733                           ;TAD_RFID.c: 63:     return ucResult;
  6734   0012DE  5051               	movf	MFRC522_Rd@ucResult^0,w,c
  6735   0012E0  0012               	return		;funcret
  6736   0012E2                     __end_of_MFRC522_Rd:
  6737                           	callstack 0
  6738                           
  6739 ;; *************** function _delay_us *****************
  6740 ;; Defined at:
  6741 ;;		line 31 in file "TAD_RFID.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  howMany         1    wreg     unsigned char 
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;  howMany         1    4[COMRAM] unsigned char 
  6746 ;;  x               1    5[COMRAM] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      void 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2, status,0, prodl, prodh
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1
  6756 ;;      Params:         0       0       0
  6757 ;;      Locals:         2       0       0
  6758 ;;      Temps:          3       0       0
  6759 ;;      Totals:         5       0       0
  6760 ;;Total ram usage:        5 bytes
  6761 ;; Hardware stack levels used: 1
  6762 ;; Hardware stack levels required when called: 3
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		_MFRC522_Rd
  6767 ;;		_MFRC522_Wr
  6768 ;;		_MFRC522_Reset
  6769 ;;		_motor_Write
  6770 ;;		_motor_Read
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text29
  6775   0018B6                     __ptext29:
  6776                           	callstack 0
  6777   0018B6                     _delay_us:
  6778                           	callstack 25
  6779                           
  6780                           ;incstack = 0
  6781                           ;delay_us@howMany stored from wreg
  6782   0018B6  6E4C               	movwf	delay_us@howMany^0,c
  6783   0018B8                     
  6784                           ;TAD_RFID.c: 32:     char x;;TAD_RFID.c: 33:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  6785   0018B8  6A4D               	clrf	delay_us@x^0,c
  6786   0018BA  EF61  F00C         	goto	l1529
  6787   0018BE                     l213:
  6788   0018BE  0000               	nop	
  6789   0018C0  2A4D               	incf	delay_us@x^0,f,c
  6790   0018C2                     l1529:
  6791   0018C2  504C               	movf	delay_us@howMany^0,w,c
  6792   0018C4  0D10               	mullw	16
  6793   0018C6  504D               	movf	delay_us@x^0,w,c
  6794   0018C8  6E49               	movwf	??_delay_us^0,c
  6795   0018CA  6A4A               	clrf	(??_delay_us+1)^0,c
  6796   0018CC  50F3               	movf	243,w,c
  6797   0018CE  5C49               	subwf	??_delay_us^0,w,c
  6798   0018D0  504A               	movf	(??_delay_us+1)^0,w,c
  6799   0018D2  0A80               	xorlw	128
  6800   0018D4  6E4B               	movwf	(??_delay_us+2)^0,c
  6801   0018D6  50F4               	movf	244,w,c
  6802   0018D8  0A80               	xorlw	128
  6803   0018DA  584B               	subwfb	(??_delay_us+2)^0,w,c
  6804   0018DC  A0D8               	btfss	status,0,c
  6805   0018DE  EF73  F00C         	goto	u11
  6806   0018E2  EF75  F00C         	goto	u10
  6807   0018E6                     u11:
  6808   0018E6  EF5F  F00C         	goto	l213
  6809   0018EA                     u10:
  6810   0018EA  0012               	return		;funcret
  6811   0018EC                     __end_of_delay_us:
  6812                           	callstack 0
  6813                           
  6814 ;; *************** function _InitPortDirections *****************
  6815 ;; Defined at:
  6816 ;;		line 23 in file "TAD_RFID.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;		None
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      void 
  6823 ;; Registers used:
  6824 ;;		None
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1
  6830 ;;      Params:         0       0       0
  6831 ;;      Locals:         0       0       0
  6832 ;;      Temps:          0       0       0
  6833 ;;      Totals:         0       0       0
  6834 ;;Total ram usage:        0 bytes
  6835 ;; Hardware stack levels used: 1
  6836 ;; Hardware stack levels required when called: 3
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_initRFID
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text30
  6845   001AAE                     __ptext30:
  6846                           	callstack 0
  6847   001AAE                     _InitPortDirections:
  6848                           	callstack 26
  6849   001AAE                     
  6850                           ;TAD_RFID.c: 24:     TRISCbits.TRISC0 = 1;
  6851   001AAE  8094               	bsf	148,0,c	;volatile
  6852                           
  6853                           ;TAD_RFID.c: 25:     TRISCbits.TRISC1 = 0;
  6854   001AB0  9294               	bcf	148,1,c	;volatile
  6855                           
  6856                           ;TAD_RFID.c: 26:     TRISCbits.TRISC2 = 0;
  6857   001AB2  9494               	bcf	148,2,c	;volatile
  6858                           
  6859                           ;TAD_RFID.c: 27:     TRISCbits.TRISC3 = 0;
  6860   001AB4  9694               	bcf	148,3,c	;volatile
  6861                           
  6862                           ;TAD_RFID.c: 28:     TRISCbits.TRISC4 = 0;
  6863   001AB6  9894               	bcf	148,4,c	;volatile
  6864   001AB8  0012               	return		;funcret
  6865   001ABA                     __end_of_InitPortDirections:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _initPorts *****************
  6869 ;; Defined at:
  6870 ;;		line 62 in file "main.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1
  6884 ;;      Params:         0       0       0
  6885 ;;      Locals:         0       0       0
  6886 ;;      Temps:          0       0       0
  6887 ;;      Totals:         0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used: 1
  6890 ;; Hardware stack levels required when called: 3
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text31
  6899   001ADE                     __ptext31:
  6900                           	callstack 0
  6901   001ADE                     _initPorts:
  6902                           	callstack 27
  6903   001ADE  0E0F               	movlw	15
  6904   001AE0  6EC1               	movwf	193,c	;volatile
  6905   001AE2  9496               	bcf	150,2,c	;volatile
  6906   001AE4  0012               	return		;funcret
  6907   001AE6                     __end_of_initPorts:
  6908                           	callstack 0
  6909                           
  6910 ;; *************** function _initLeds *****************
  6911 ;; Defined at:
  6912 ;;		line 9 in file "TAD_LEDS.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1
  6926 ;;      Params:         0       0       0
  6927 ;;      Locals:         0       0       0
  6928 ;;      Temps:          0       0       0
  6929 ;;      Totals:         0       0       0
  6930 ;;Total ram usage:        0 bytes
  6931 ;; Hardware stack levels used: 1
  6932 ;; Hardware stack levels required when called: 4
  6933 ;; This function calls:
  6934 ;;		_TI_NewTimer
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text32
  6941   001A88                     __ptext32:
  6942                           	callstack 0
  6943   001A88                     _initLeds:
  6944                           	callstack 26
  6945   001A88                     
  6946                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  6947   001A88  6A92               	clrf	146,c	;volatile
  6948                           
  6949                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  6950   001A8A  6A96               	clrf	150,c	;volatile
  6951   001A8C                     
  6952                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  6953   001A8C  0E45               	movlw	low _timer@TAD_LEDS$F989
  6954   001A8E  6E49               	movwf	TI_NewTimer@TimerHandle^0,c
  6955   001A90  EC4D  F00B         	call	_TI_NewTimer	;wreg free
  6956   001A94  0012               	return		;funcret
  6957   001A96                     __end_of_initLeds:
  6958                           	callstack 0
  6959                           
  6960 ;; *************** function _Terminal_Init *****************
  6961 ;; Defined at:
  6962 ;;		line 9 in file "TAD_TERMINAL.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1
  6976 ;;      Params:         0       0       0
  6977 ;;      Locals:         0       0       0
  6978 ;;      Temps:          0       0       0
  6979 ;;      Totals:         0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used: 1
  6982 ;; Hardware stack levels required when called: 3
  6983 ;; This function calls:
  6984 ;;		Nothing
  6985 ;; This function is called by:
  6986 ;;		_main
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text33
  6991   001A78                     __ptext33:
  6992                           	callstack 0
  6993   001A78                     _Terminal_Init:
  6994                           	callstack 27
  6995   001A78                     
  6996                           ;TAD_TERMINAL.c: 10:  TXSTA = 0x24;
  6997   001A78  0E24               	movlw	36
  6998   001A7A  6EAC               	movwf	172,c	;volatile
  6999                           
  7000                           ;TAD_TERMINAL.c: 11:  RCSTA = 0x90;
  7001   001A7C  0E90               	movlw	144
  7002   001A7E  6EAB               	movwf	171,c	;volatile
  7003   001A80                     
  7004                           ;TAD_TERMINAL.c: 12:  SPBRG = 255;
  7005   001A80  68AF               	setf	175,c	;volatile
  7006   001A82                     
  7007                           ;TAD_TERMINAL.c: 13:  BAUDCON = 0x00;
  7008   001A82  6AB8               	clrf	184,c	;volatile
  7009   001A84                     
  7010                           ;TAD_TERMINAL.c: 14:  hashtag_pressed = 0;
  7011   001A84  6A1C               	clrf	_hashtag_pressed^0,c
  7012   001A86  0012               	return		;funcret
  7013   001A88                     __end_of_Terminal_Init:
  7014                           	callstack 0
  7015                           
  7016 ;; *************** function _TI_Init *****************
  7017 ;; Defined at:
  7018 ;;		line 32 in file "TAD_TIMER.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  counter         1    1[COMRAM] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1
  7032 ;;      Params:         0       0       0
  7033 ;;      Locals:         1       0       0
  7034 ;;      Temps:          0       0       0
  7035 ;;      Totals:         1       0       0
  7036 ;;Total ram usage:        1 bytes
  7037 ;; Hardware stack levels used: 1
  7038 ;; Hardware stack levels required when called: 3
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_main
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text34
  7047   0018EC                     __ptext34:
  7048                           	callstack 0
  7049   0018EC                     _TI_Init:
  7050                           	callstack 27
  7051   0018EC                     
  7052                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7053   0018EC  6A49               	clrf	TI_Init@counter^0,c
  7054   0018EE                     l3571:
  7055                           
  7056                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7057   0018EE  5049               	movf	TI_Init@counter^0,w,c
  7058   0018F0  0D05               	mullw	5
  7059   0018F2  50F3               	movf	243,w,c
  7060   0018F4  0FDC               	addlw	low (_Timers+4)
  7061   0018F6  6ED9               	movwf	fsr2l,c
  7062   0018F8  6ADA               	clrf	fsr2h,c
  7063   0018FA  6ADF               	clrf	indf2,c
  7064   0018FC                     
  7065                           ;TAD_TIMER.c: 35:  }
  7066   0018FC  2A49               	incf	TI_Init@counter^0,f,c
  7067   0018FE  0E03               	movlw	3
  7068   001900  6449               	cpfsgt	TI_Init@counter^0,c
  7069   001902  EF85  F00C         	goto	u2831
  7070   001906  EF87  F00C         	goto	u2830
  7071   00190A                     u2831:
  7072   00190A  EF77  F00C         	goto	l3571
  7073   00190E                     u2830:
  7074   00190E                     
  7075                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7076   00190E  0E82               	movlw	130
  7077   001910  6ED5               	movwf	213,c	;volatile
  7078                           
  7079                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7080   001912  0EF6               	movlw	246
  7081   001914  6ED7               	movwf	215,c	;volatile
  7082   001916  0E3C               	movlw	60
  7083   001918  6ED6               	movwf	214,c	;volatile
  7084   00191A                     
  7085                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7086   00191A  94F2               	bcf	242,2,c	;volatile
  7087   00191C                     
  7088                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7089   00191C  8AF2               	bsf	242,5,c	;volatile
  7090   00191E  0012               	return		;funcret
  7091   001920                     __end_of_TI_Init:
  7092                           	callstack 0
  7093                           
  7094 ;; *************** function _LcInit *****************
  7095 ;; Defined at:
  7096 ;;		line 68 in file "TAD_DISPLAY.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  rows            1    wreg     unsigned char 
  7099 ;;  columns         1   22[COMRAM] unsigned char 
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;  rows            1   23[COMRAM] unsigned char 
  7102 ;;  i               2   24[COMRAM] int 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1
  7112 ;;      Params:         1       0       0
  7113 ;;      Locals:         3       0       0
  7114 ;;      Temps:          0       0       0
  7115 ;;      Totals:         4       0       0
  7116 ;;Total ram usage:        4 bytes
  7117 ;; Hardware stack levels used: 1
  7118 ;; Hardware stack levels required when called: 6
  7119 ;; This function calls:
  7120 ;;		_CantaIR
  7121 ;;		_EscriuPrimeraOrdre
  7122 ;;		_Espera
  7123 ;;		_TI_NewTimer
  7124 ;;		_WaitForBusy
  7125 ;; This function is called by:
  7126 ;;		_main
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text35
  7131   000E12                     __ptext35:
  7132                           	callstack 0
  7133   000E12                     _LcInit:
  7134                           	callstack 24
  7135                           
  7136                           ;incstack = 0
  7137                           ;LcInit@rows stored from wreg
  7138   000E12  6E5F               	movwf	LcInit@rows^0,c
  7139   000E14                     
  7140                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7141   000E14  0E46               	movlw	low _Timer
  7142   000E16  6E49               	movwf	TI_NewTimer@TimerHandle^0,c
  7143   000E18  EC4D  F00B         	call	_TI_NewTimer	;wreg free
  7144   000E1C                     
  7145                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7146   000E1C  C05F  F020         	movff	LcInit@rows,_Rows
  7147   000E20  C05E  F01F         	movff	LcInit@columns,_Columns
  7148   000E24                     
  7149                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7150   000E24  6A1D               	clrf	_ColumnAct^0,c
  7151   000E26  6A1E               	clrf	_RowAct^0,c
  7152   000E28                     
  7153                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7154   000E28  9293               	bcf	147,1,c	;volatile
  7155   000E2A  9493               	bcf	147,2,c	;volatile
  7156   000E2C  9693               	bcf	147,3,c	;volatile
  7157   000E2E                     
  7158                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7159   000E2E  0E00               	movlw	0
  7160   000E30  6E61               	movwf	(LcInit@i+1)^0,c
  7161   000E32  0E00               	movlw	0
  7162   000E34  6E60               	movwf	LcInit@i^0,c
  7163   000E36                     l3619:
  7164                           
  7165                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7166   000E36  C046  F056         	movff	_Timer,Espera@Timer
  7167   000E3A  6A57               	clrf	(Espera@Timer+1)^0,c
  7168   000E3C  0E00               	movlw	0
  7169   000E3E  6E59               	movwf	(Espera@ms+1)^0,c
  7170   000E40  0E64               	movlw	100
  7171   000E42  6E58               	movwf	Espera@ms^0,c
  7172   000E44  ECEA  F00B         	call	_Espera	;wreg free
  7173   000E48                     
  7174                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7175   000E48  0E03               	movlw	3
  7176   000E4A  ECC1  F009         	call	_EscriuPrimeraOrdre
  7177   000E4E                     
  7178                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7179   000E4E  C046  F056         	movff	_Timer,Espera@Timer
  7180   000E52  6A57               	clrf	(Espera@Timer+1)^0,c
  7181   000E54  0E00               	movlw	0
  7182   000E56  6E59               	movwf	(Espera@ms+1)^0,c
  7183   000E58  0E04               	movlw	4
  7184   000E5A  6E58               	movwf	Espera@ms^0,c
  7185   000E5C  ECEA  F00B         	call	_Espera	;wreg free
  7186                           
  7187                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7188   000E60  0E03               	movlw	3
  7189   000E62  ECC1  F009         	call	_EscriuPrimeraOrdre
  7190   000E66                     
  7191                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7192   000E66  C046  F056         	movff	_Timer,Espera@Timer
  7193   000E6A  6A57               	clrf	(Espera@Timer+1)^0,c
  7194   000E6C  0E00               	movlw	0
  7195   000E6E  6E59               	movwf	(Espera@ms+1)^0,c
  7196   000E70  0E01               	movlw	1
  7197   000E72  6E58               	movwf	Espera@ms^0,c
  7198   000E74  ECEA  F00B         	call	_Espera	;wreg free
  7199   000E78                     
  7200                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7201   000E78  0E03               	movlw	3
  7202   000E7A  ECC1  F009         	call	_EscriuPrimeraOrdre
  7203                           
  7204                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7205   000E7E  C046  F056         	movff	_Timer,Espera@Timer
  7206   000E82  6A57               	clrf	(Espera@Timer+1)^0,c
  7207   000E84  0E00               	movlw	0
  7208   000E86  6E59               	movwf	(Espera@ms+1)^0,c
  7209   000E88  0E01               	movlw	1
  7210   000E8A  6E58               	movwf	Espera@ms^0,c
  7211   000E8C  ECEA  F00B         	call	_Espera	;wreg free
  7212   000E90                     
  7213                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7214   000E90  0E02               	movlw	2
  7215   000E92  ECC1  F009         	call	_EscriuPrimeraOrdre
  7216   000E96                     
  7217                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7218   000E96  C046  F056         	movff	_Timer,Espera@Timer
  7219   000E9A  6A57               	clrf	(Espera@Timer+1)^0,c
  7220   000E9C  0E00               	movlw	0
  7221   000E9E  6E59               	movwf	(Espera@ms+1)^0,c
  7222   000EA0  0E01               	movlw	1
  7223   000EA2  6E58               	movwf	Espera@ms^0,c
  7224   000EA4  ECEA  F00B         	call	_Espera	;wreg free
  7225                           
  7226                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7227   000EA8  0E28               	movlw	40
  7228   000EAA  EC90  F00C         	call	_CantaIR
  7229   000EAE                     
  7230                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7231   000EAE  EC32  F00D         	call	_WaitForBusy	;wreg free
  7232   000EB2  0E08               	movlw	8
  7233   000EB4  EC90  F00C         	call	_CantaIR
  7234                           
  7235                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7236   000EB8  EC32  F00D         	call	_WaitForBusy	;wreg free
  7237   000EBC  0E01               	movlw	1
  7238   000EBE  EC90  F00C         	call	_CantaIR
  7239   000EC2                     
  7240                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7241   000EC2  C046  F056         	movff	_Timer,Espera@Timer
  7242   000EC6  6A57               	clrf	(Espera@Timer+1)^0,c
  7243   000EC8  0E00               	movlw	0
  7244   000ECA  6E59               	movwf	(Espera@ms+1)^0,c
  7245   000ECC  0E02               	movlw	2
  7246   000ECE  6E58               	movwf	Espera@ms^0,c
  7247   000ED0  ECEA  F00B         	call	_Espera	;wreg free
  7248   000ED4                     
  7249                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7250   000ED4  EC32  F00D         	call	_WaitForBusy	;wreg free
  7251   000ED8  0E06               	movlw	6
  7252   000EDA  EC90  F00C         	call	_CantaIR
  7253                           
  7254                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7255   000EDE  EC32  F00D         	call	_WaitForBusy	;wreg free
  7256   000EE2  0E0F               	movlw	15
  7257   000EE4  EC90  F00C         	call	_CantaIR
  7258   000EE8                     
  7259                           ;TAD_DISPLAY.c: 101:  }
  7260   000EE8  4A60               	infsnz	LcInit@i^0,f,c
  7261   000EEA  2A61               	incf	(LcInit@i+1)^0,f,c
  7262   000EEC  BE61               	btfsc	(LcInit@i+1)^0,7,c
  7263   000EEE  EF82  F007         	goto	u2841
  7264   000EF2  5061               	movf	(LcInit@i+1)^0,w,c
  7265   000EF4  E109               	bnz	u2840
  7266   000EF6  0E02               	movlw	2
  7267   000EF8  5C60               	subwf	LcInit@i^0,w,c
  7268   000EFA  A0D8               	btfss	status,0,c
  7269   000EFC  EF82  F007         	goto	u2841
  7270   000F00  EF84  F007         	goto	u2840
  7271   000F04                     u2841:
  7272   000F04  EF1B  F007         	goto	l3619
  7273   000F08                     u2840:
  7274   000F08  0012               	return		;funcret
  7275   000F0A                     __end_of_LcInit:
  7276                           	callstack 0
  7277                           
  7278 ;; *************** function _WaitForBusy *****************
  7279 ;; Defined at:
  7280 ;;		line 256 in file "TAD_DISPLAY.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  Busy            1    0        unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1
  7294 ;;      Params:         0       0       0
  7295 ;;      Locals:         0       0       0
  7296 ;;      Temps:          0       0       0
  7297 ;;      Totals:         0       0       0
  7298 ;;Total ram usage:        0 bytes
  7299 ;; Hardware stack levels used: 1
  7300 ;; Hardware stack levels required when called: 5
  7301 ;; This function calls:
  7302 ;;		_Espera
  7303 ;; This function is called by:
  7304 ;;		_LcInit
  7305 ;;		_LcClear
  7306 ;;		_LcCursorOn
  7307 ;;		_LcCursorOff
  7308 ;;		_LcGotoXY
  7309 ;;		_LcPutChar
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text36
  7314   001A64                     __ptext36:
  7315                           	callstack 0
  7316   001A64                     _WaitForBusy:
  7317                           	callstack 24
  7318   001A64                     
  7319                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  7320   001A64  C046  F056         	movff	_Timer,Espera@Timer
  7321   001A68  6A57               	clrf	(Espera@Timer+1)^0,c
  7322   001A6A  0E00               	movlw	0
  7323   001A6C  6E59               	movwf	(Espera@ms+1)^0,c
  7324   001A6E  0E02               	movlw	2
  7325   001A70  6E58               	movwf	Espera@ms^0,c
  7326   001A72  ECEA  F00B         	call	_Espera	;wreg free
  7327   001A76  0012               	return		;funcret
  7328   001A78                     __end_of_WaitForBusy:
  7329                           	callstack 0
  7330                           
  7331 ;; *************** function _Espera *****************
  7332 ;; Defined at:
  7333 ;;		line 205 in file "TAD_DISPLAY.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  Timer           2   14[COMRAM] int 
  7336 ;;  ms              2   16[COMRAM] int 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1
  7348 ;;      Params:         4       0       0
  7349 ;;      Locals:         0       0       0
  7350 ;;      Temps:          4       0       0
  7351 ;;      Totals:         8       0       0
  7352 ;;Total ram usage:        8 bytes
  7353 ;; Hardware stack levels used: 1
  7354 ;; Hardware stack levels required when called: 4
  7355 ;; This function calls:
  7356 ;;		_TI_GetTics
  7357 ;;		_TI_ResetTics
  7358 ;; This function is called by:
  7359 ;;		_LcInit
  7360 ;;		_WaitForBusy
  7361 ;;		_LcClear
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           	psect	text37
  7366   0017D4                     __ptext37:
  7367                           	callstack 0
  7368   0017D4                     _Espera:
  7369                           	callstack 24
  7370   0017D4                     
  7371                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  7372   0017D4  5056               	movf	Espera@Timer^0,w,c
  7373   0017D6  ECC0  F00C         	call	_TI_ResetTics
  7374   0017DA                     l3267:
  7375   0017DA  C058  F05A         	movff	Espera@ms,??_Espera
  7376   0017DE  C059  F05B         	movff	Espera@ms+1,??_Espera+1
  7377   0017E2  0E00               	movlw	0
  7378   0017E4  BE5B               	btfsc	(??_Espera+1)^0,7,c
  7379   0017E6  0EFF               	movlw	255
  7380   0017E8  6E5C               	movwf	(??_Espera+2)^0,c
  7381   0017EA  6E5D               	movwf	(??_Espera+3)^0,c
  7382   0017EC  5056               	movf	Espera@Timer^0,w,c
  7383   0017EE  EC9F  F00B         	call	_TI_GetTics
  7384   0017F2  505A               	movf	??_Espera^0,w,c
  7385   0017F4  5C49               	subwf	?_TI_GetTics^0,w,c
  7386   0017F6  505B               	movf	(??_Espera+1)^0,w,c
  7387   0017F8  584A               	subwfb	(?_TI_GetTics+1)^0,w,c
  7388   0017FA  505C               	movf	(??_Espera+2)^0,w,c
  7389   0017FC  584B               	subwfb	(?_TI_GetTics+2)^0,w,c
  7390   0017FE  505D               	movf	(??_Espera+3)^0,w,c
  7391   001800  584C               	subwfb	(?_TI_GetTics+3)^0,w,c
  7392   001802  A0D8               	btfss	status,0,c
  7393   001804  EF06  F00C         	goto	u2401
  7394   001808  EF08  F00C         	goto	u2400
  7395   00180C                     u2401:
  7396   00180C  EFED  F00B         	goto	l3267
  7397   001810                     u2400:
  7398   001810  0012               	return		;funcret
  7399   001812                     __end_of_Espera:
  7400                           	callstack 0
  7401                           
  7402 ;; *************** function _TI_ResetTics *****************
  7403 ;; Defined at:
  7404 ;;		line 53 in file "TAD_TIMER.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  TimerHandle     1    wreg     unsigned char 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  1    wreg      void 
  7411 ;; Registers used:
  7412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1
  7418 ;;      Params:         0       0       0
  7419 ;;      Locals:         1       0       0
  7420 ;;      Temps:          0       0       0
  7421 ;;      Totals:         1       0       0
  7422 ;;Total ram usage:        1 bytes
  7423 ;; Hardware stack levels used: 1
  7424 ;; Hardware stack levels required when called: 3
  7425 ;; This function calls:
  7426 ;;		Nothing
  7427 ;; This function is called by:
  7428 ;;		_Espera
  7429 ;;		_motorTeclado
  7430 ;;		_motor_LEDs
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text38
  7435   001980                     __ptext38:
  7436                           	callstack 0
  7437   001980                     _TI_ResetTics:
  7438                           	callstack 24
  7439                           
  7440                           ;incstack = 0
  7441                           ;TI_ResetTics@TimerHandle stored from wreg
  7442   001980  6E49               	movwf	TI_ResetTics@TimerHandle^0,c
  7443   001982                     
  7444                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  7445   001982  9EF2               	bcf	242,7,c	;volatile
  7446   001984  5049               	movf	TI_ResetTics@TimerHandle^0,w,c
  7447   001986  0D05               	mullw	5
  7448   001988  50F3               	movf	243,w,c
  7449   00198A  0FD8               	addlw	low _Timers
  7450   00198C  6ED9               	movwf	fsr2l,c
  7451   00198E  6ADA               	clrf	fsr2h,c
  7452   001990  C007  FFDE         	movff	_Tics,postinc2	;volatile
  7453   001994  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  7454   001998  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  7455   00199C  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  7456   0019A0  8EF2               	bsf	242,7,c	;volatile
  7457   0019A2  0012               	return		;funcret
  7458   0019A4                     __end_of_TI_ResetTics:
  7459                           	callstack 0
  7460                           
  7461 ;; *************** function _TI_GetTics *****************
  7462 ;; Defined at:
  7463 ;;		line 61 in file "TAD_TIMER.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  TimerHandle     1    wreg     unsigned char 
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  7468 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  4    1[COMRAM] unsigned long 
  7471 ;; Registers used:
  7472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1
  7478 ;;      Params:         4       0       0
  7479 ;;      Locals:         5       0       0
  7480 ;;      Temps:          4       0       0
  7481 ;;      Totals:        13       0       0
  7482 ;;Total ram usage:       13 bytes
  7483 ;; Hardware stack levels used: 1
  7484 ;; Hardware stack levels required when called: 3
  7485 ;; This function calls:
  7486 ;;		Nothing
  7487 ;; This function is called by:
  7488 ;;		_Espera
  7489 ;;		_motorTeclado
  7490 ;;		_motor_LEDs
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	text39
  7495   00173E                     __ptext39:
  7496                           	callstack 0
  7497   00173E                     _TI_GetTics:
  7498                           	callstack 24
  7499                           
  7500                           ;incstack = 0
  7501                           ;TI_GetTics@TimerHandle stored from wreg
  7502   00173E  6E55               	movwf	TI_GetTics@TimerHandle^0,c
  7503   001740                     
  7504                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  7505   001740  9EF2               	bcf	242,7,c	;volatile
  7506   001742  C007  F051         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  7507   001746  C008  F052         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  7508   00174A  C009  F053         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  7509   00174E  C00A  F054         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  7510   001752  8EF2               	bsf	242,7,c	;volatile
  7511   001754                     
  7512                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  7513   001754  5055               	movf	TI_GetTics@TimerHandle^0,w,c
  7514   001756  0D05               	mullw	5
  7515   001758  50F3               	movf	243,w,c
  7516   00175A  0FD8               	addlw	low _Timers
  7517   00175C  6ED9               	movwf	fsr2l,c
  7518   00175E  6ADA               	clrf	fsr2h,c
  7519   001760  CFDE F04D          	movff	postinc2,??_TI_GetTics
  7520   001764  CFDE F04E          	movff	postinc2,??_TI_GetTics+1
  7521   001768  CFDE F04F          	movff	postinc2,??_TI_GetTics+2
  7522   00176C  CFDE F050          	movff	postinc2,??_TI_GetTics+3
  7523   001770  504D               	movf	??_TI_GetTics^0,w,c
  7524   001772  5C51               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  7525   001774  6E49               	movwf	?_TI_GetTics^0,c
  7526   001776  504E               	movf	(??_TI_GetTics+1)^0,w,c
  7527   001778  5852               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  7528   00177A  6E4A               	movwf	(?_TI_GetTics+1)^0,c
  7529   00177C  504F               	movf	(??_TI_GetTics+2)^0,w,c
  7530   00177E  5853               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  7531   001780  6E4B               	movwf	(?_TI_GetTics+2)^0,c
  7532   001782  5050               	movf	(??_TI_GetTics+3)^0,w,c
  7533   001784  5854               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  7534   001786  6E4C               	movwf	(?_TI_GetTics+3)^0,c
  7535   001788  0012               	return		;funcret
  7536   00178A                     __end_of_TI_GetTics:
  7537                           	callstack 0
  7538                           
  7539 ;; *************** function _TI_NewTimer *****************
  7540 ;; Defined at:
  7541 ;;		line 43 in file "TAD_TIMER.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  7544 ;;		 -> timer@TAD_LEDS$F989(1), Timer(1), timer(1), 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  Comptador       1    3[COMRAM] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      unsigned char 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1
  7556 ;;      Params:         1       0       0
  7557 ;;      Locals:         1       0       0
  7558 ;;      Temps:          1       0       0
  7559 ;;      Totals:         3       0       0
  7560 ;;Total ram usage:        3 bytes
  7561 ;; Hardware stack levels used: 1
  7562 ;; Hardware stack levels required when called: 3
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_initTeclado
  7567 ;;		_LcInit
  7568 ;;		_initLeds
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text40
  7573   00169A                     __ptext40:
  7574                           	callstack 0
  7575   00169A                     _TI_NewTimer:
  7576                           	callstack 26
  7577   00169A                     
  7578                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  7579   00169A  6A4B               	clrf	TI_NewTimer@Comptador^0,c
  7580                           
  7581                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7582   00169C  EF5C  F00B         	goto	l3347
  7583   0016A0                     l3343:
  7584                           
  7585                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  7586   0016A0  2A4B               	incf	TI_NewTimer@Comptador^0,f,c
  7587   0016A2  0E04               	movlw	4
  7588   0016A4  184B               	xorwf	TI_NewTimer@Comptador^0,w,c
  7589   0016A6  A4D8               	btfss	status,2,c
  7590   0016A8  EF58  F00B         	goto	u2641
  7591   0016AC  EF5A  F00B         	goto	u2640
  7592   0016B0                     u2641:
  7593   0016B0  EF5C  F00B         	goto	l3347
  7594   0016B4                     u2640:
  7595   0016B4  EF77  F00B         	goto	l81
  7596   0016B8                     l3347:
  7597                           
  7598                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7599   0016B8  504B               	movf	TI_NewTimer@Comptador^0,w,c
  7600   0016BA  0D05               	mullw	5
  7601   0016BC  50F3               	movf	243,w,c
  7602   0016BE  0FDC               	addlw	low (_Timers+4)
  7603   0016C0  6ED9               	movwf	fsr2l,c
  7604   0016C2  6ADA               	clrf	fsr2h,c
  7605   0016C4  04DE               	decf	postinc2,w,c
  7606   0016C6  B4D8               	btfsc	status,2,c
  7607   0016C8  EF68  F00B         	goto	u2651
  7608   0016CC  EF6A  F00B         	goto	u2650
  7609   0016D0                     u2651:
  7610   0016D0  EF50  F00B         	goto	l3343
  7611   0016D4                     u2650:
  7612   0016D4                     
  7613                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  7614   0016D4  504B               	movf	TI_NewTimer@Comptador^0,w,c
  7615   0016D6  0D05               	mullw	5
  7616   0016D8  50F3               	movf	243,w,c
  7617   0016DA  0FDC               	addlw	low (_Timers+4)
  7618   0016DC  6ED9               	movwf	fsr2l,c
  7619   0016DE  6ADA               	clrf	fsr2h,c
  7620   0016E0  0E01               	movlw	1
  7621   0016E2  6EDF               	movwf	indf2,c
  7622   0016E4                     
  7623                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  7624   0016E4  5049               	movf	TI_NewTimer@TimerHandle^0,w,c
  7625   0016E6  6ED9               	movwf	fsr2l,c
  7626   0016E8  6ADA               	clrf	fsr2h,c
  7627   0016EA  C04B  FFDF         	movff	TI_NewTimer@Comptador,indf2
  7628   0016EE                     l81:
  7629   0016EE  0012               	return		;funcret
  7630   0016F0                     __end_of_TI_NewTimer:
  7631                           	callstack 0
  7632                           
  7633 ;; *************** function _EscriuPrimeraOrdre *****************
  7634 ;; Defined at:
  7635 ;;		line 260 in file "TAD_DISPLAY.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  ordre           1    wreg     unsigned char 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  ordre           1    2[COMRAM] unsigned char 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1
  7649 ;;      Params:         0       0       0
  7650 ;;      Locals:         1       0       0
  7651 ;;      Temps:          1       0       0
  7652 ;;      Totals:         2       0       0
  7653 ;;Total ram usage:        2 bytes
  7654 ;; Hardware stack levels used: 1
  7655 ;; Hardware stack levels required when called: 3
  7656 ;; This function calls:
  7657 ;;		Nothing
  7658 ;; This function is called by:
  7659 ;;		_LcInit
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text41
  7664   001382                     __ptext41:
  7665                           	callstack 0
  7666   001382                     _EscriuPrimeraOrdre:
  7667                           	callstack 26
  7668                           
  7669                           ;incstack = 0
  7670                           ;EscriuPrimeraOrdre@ordre stored from wreg
  7671   001382  6E4A               	movwf	EscriuPrimeraOrdre@ordre^0,c
  7672   001384                     
  7673                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  7674   001384  9096               	bcf	150,0,c	;volatile
  7675   001386  9296               	bcf	150,1,c	;volatile
  7676   001388  9A93               	bcf	147,5,c	;volatile
  7677   00138A  9893               	bcf	147,4,c	;volatile
  7678   00138C  968A               	bcf	138,3,c	;volatile
  7679   00138E  948A               	bcf	138,2,c	;volatile
  7680                           
  7681                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  7682   001390  828A               	bsf	138,1,c	;volatile
  7683   001392  828A               	bsf	138,1,c	;volatile
  7684   001394                     
  7685                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  7686   001394  B64A               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  7687   001396  EFCF  F009         	goto	u611
  7688   00139A  EFD3  F009         	goto	u610
  7689   00139E                     u611:
  7690   00139E  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7691   0013A0  2A49               	incf	??_EscriuPrimeraOrdre^0,f,c
  7692   0013A2  EFD4  F009         	goto	u628
  7693   0013A6                     u610:
  7694   0013A6  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7695   0013A8                     u628:
  7696   0013A8  508D               	movf	141,w,c	;volatile
  7697   0013AA  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7698   0013AC  0BFE               	andlw	-2
  7699   0013AE  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7700   0013B0  6E8D               	movwf	141,c	;volatile
  7701                           
  7702                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  7703   0013B2  B44A               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  7704   0013B4  EFDE  F009         	goto	u631
  7705   0013B8  EFE2  F009         	goto	u630
  7706   0013BC                     u631:
  7707   0013BC  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7708   0013BE  2A49               	incf	??_EscriuPrimeraOrdre^0,f,c
  7709   0013C0  EFE3  F009         	goto	u648
  7710   0013C4                     u630:
  7711   0013C4  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7712   0013C6                     u648:
  7713   0013C6  4649               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7714   0013C8  508D               	movf	141,w,c	;volatile
  7715   0013CA  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7716   0013CC  0BFD               	andlw	-3
  7717   0013CE  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7718   0013D0  6E8D               	movwf	141,c	;volatile
  7719                           
  7720                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  7721   0013D2  B24A               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  7722   0013D4  EFEE  F009         	goto	u651
  7723   0013D8  EFF2  F009         	goto	u650
  7724   0013DC                     u651:
  7725   0013DC  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7726   0013DE  2A49               	incf	??_EscriuPrimeraOrdre^0,f,c
  7727   0013E0  EFF3  F009         	goto	u668
  7728   0013E4                     u650:
  7729   0013E4  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7730   0013E6                     u668:
  7731   0013E6  3A49               	swapf	??_EscriuPrimeraOrdre^0,f,c
  7732   0013E8  4649               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7733   0013EA  508A               	movf	138,w,c	;volatile
  7734   0013EC  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7735   0013EE  0BDF               	andlw	-33
  7736   0013F0  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7737   0013F2  6E8A               	movwf	138,c	;volatile
  7738                           
  7739                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  7740   0013F4  B04A               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  7741   0013F6  EFFF  F009         	goto	u671
  7742   0013FA  EF03  F00A         	goto	u670
  7743   0013FE                     u671:
  7744   0013FE  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7745   001400  2A49               	incf	??_EscriuPrimeraOrdre^0,f,c
  7746   001402  EF04  F00A         	goto	u688
  7747   001406                     u670:
  7748   001406  6A49               	clrf	??_EscriuPrimeraOrdre^0,c
  7749   001408                     u688:
  7750   001408  3A49               	swapf	??_EscriuPrimeraOrdre^0,f,c
  7751   00140A  508A               	movf	138,w,c	;volatile
  7752   00140C  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7753   00140E  0BEF               	andlw	-17
  7754   001410  1849               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7755   001412  6E8A               	movwf	138,c	;volatile
  7756   001414                     
  7757                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  7758   001414  928A               	bcf	138,1,c	;volatile
  7759   001416  0012               	return		;funcret
  7760   001418                     __end_of_EscriuPrimeraOrdre:
  7761                           	callstack 0
  7762                           
  7763 ;; *************** function _CantaIR *****************
  7764 ;; Defined at:
  7765 ;;		line 224 in file "TAD_DISPLAY.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  IR              1    wreg     unsigned char 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  IR              1    3[COMRAM] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, status,0, cstack
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1
  7779 ;;      Params:         0       0       0
  7780 ;;      Locals:         1       0       0
  7781 ;;      Temps:          0       0       0
  7782 ;;      Totals:         1       0       0
  7783 ;;Total ram usage:        1 bytes
  7784 ;; Hardware stack levels used: 1
  7785 ;; Hardware stack levels required when called: 4
  7786 ;; This function calls:
  7787 ;;		_CantaPartAlta
  7788 ;;		_CantaPartBaixa
  7789 ;; This function is called by:
  7790 ;;		_LcInit
  7791 ;;		_LcClear
  7792 ;;		_LcCursorOn
  7793 ;;		_LcCursorOff
  7794 ;;		_LcGotoXY
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text42
  7799   001920                     __ptext42:
  7800                           	callstack 0
  7801   001920                     _CantaIR:
  7802                           	callstack 25
  7803                           
  7804                           ;incstack = 0
  7805                           ;CantaIR@IR stored from wreg
  7806   001920  6E4B               	movwf	CantaIR@IR^0,c
  7807   001922                     
  7808                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  7809   001922  9096               	bcf	150,0,c	;volatile
  7810   001924  9296               	bcf	150,1,c	;volatile
  7811   001926  9A93               	bcf	147,5,c	;volatile
  7812   001928  9893               	bcf	147,4,c	;volatile
  7813                           
  7814                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  7815   00192A  968A               	bcf	138,3,c	;volatile
  7816                           
  7817                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  7818   00192C  948A               	bcf	138,2,c	;volatile
  7819                           
  7820                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  7821   00192E  828A               	bsf	138,1,c	;volatile
  7822   001930                     
  7823                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  7824   001930  504B               	movf	CantaIR@IR^0,w,c
  7825   001932  EC4E  F00A         	call	_CantaPartAlta
  7826   001936                     
  7827                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  7828   001936  828A               	bsf	138,1,c	;volatile
  7829   001938                     
  7830                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  7831   001938  928A               	bcf	138,1,c	;volatile
  7832   00193A                     
  7833                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  7834   00193A  928A               	bcf	138,1,c	;volatile
  7835   00193C                     
  7836                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  7837   00193C  828A               	bsf	138,1,c	;volatile
  7838                           
  7839                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  7840   00193E  504B               	movf	CantaIR@IR^0,w,c
  7841   001940  EC0C  F00A         	call	_CantaPartBaixa
  7842   001944                     
  7843                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  7844   001944  828A               	bsf	138,1,c	;volatile
  7845   001946                     
  7846                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  7847   001946  928A               	bcf	138,1,c	;volatile
  7848   001948                     
  7849                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  7850   001948  8096               	bsf	150,0,c	;volatile
  7851   00194A  8296               	bsf	150,1,c	;volatile
  7852   00194C  8A93               	bsf	147,5,c	;volatile
  7853   00194E  8893               	bsf	147,4,c	;volatile
  7854   001950  0012               	return		;funcret
  7855   001952                     __end_of_CantaIR:
  7856                           	callstack 0
  7857                           
  7858 ;; *************** function _CantaPartBaixa *****************
  7859 ;; Defined at:
  7860 ;;		line 217 in file "TAD_DISPLAY.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  c               1    wreg     unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  c               1    2[COMRAM] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1
  7874 ;;      Params:         0       0       0
  7875 ;;      Locals:         1       0       0
  7876 ;;      Temps:          1       0       0
  7877 ;;      Totals:         2       0       0
  7878 ;;Total ram usage:        2 bytes
  7879 ;; Hardware stack levels used: 1
  7880 ;; Hardware stack levels required when called: 3
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_CantaIR
  7885 ;;		_CantaData
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text43
  7890   001418                     __ptext43:
  7891                           	callstack 0
  7892   001418                     _CantaPartBaixa:
  7893                           	callstack 25
  7894                           
  7895                           ;incstack = 0
  7896                           ;CantaPartBaixa@c stored from wreg
  7897   001418  6E4A               	movwf	CantaPartBaixa@c^0,c
  7898   00141A                     
  7899                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  7900   00141A  B64A               	btfsc	CantaPartBaixa@c^0,3,c
  7901   00141C  EF12  F00A         	goto	u2491
  7902   001420  EF16  F00A         	goto	u2490
  7903   001424                     u2491:
  7904   001424  6A49               	clrf	??_CantaPartBaixa^0,c
  7905   001426  2A49               	incf	??_CantaPartBaixa^0,f,c
  7906   001428  EF17  F00A         	goto	u2508
  7907   00142C                     u2490:
  7908   00142C  6A49               	clrf	??_CantaPartBaixa^0,c
  7909   00142E                     u2508:
  7910   00142E  508D               	movf	141,w,c	;volatile
  7911   001430  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7912   001432  0BFE               	andlw	-2
  7913   001434  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7914   001436  6E8D               	movwf	141,c	;volatile
  7915                           
  7916                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  7917   001438  B44A               	btfsc	CantaPartBaixa@c^0,2,c
  7918   00143A  EF21  F00A         	goto	u2511
  7919   00143E  EF25  F00A         	goto	u2510
  7920   001442                     u2511:
  7921   001442  6A49               	clrf	??_CantaPartBaixa^0,c
  7922   001444  2A49               	incf	??_CantaPartBaixa^0,f,c
  7923   001446  EF26  F00A         	goto	u2528
  7924   00144A                     u2510:
  7925   00144A  6A49               	clrf	??_CantaPartBaixa^0,c
  7926   00144C                     u2528:
  7927   00144C  4649               	rlncf	??_CantaPartBaixa^0,f,c
  7928   00144E  508D               	movf	141,w,c	;volatile
  7929   001450  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7930   001452  0BFD               	andlw	-3
  7931   001454  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7932   001456  6E8D               	movwf	141,c	;volatile
  7933                           
  7934                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  7935   001458  B24A               	btfsc	CantaPartBaixa@c^0,1,c
  7936   00145A  EF31  F00A         	goto	u2531
  7937   00145E  EF35  F00A         	goto	u2530
  7938   001462                     u2531:
  7939   001462  6A49               	clrf	??_CantaPartBaixa^0,c
  7940   001464  2A49               	incf	??_CantaPartBaixa^0,f,c
  7941   001466  EF36  F00A         	goto	u2548
  7942   00146A                     u2530:
  7943   00146A  6A49               	clrf	??_CantaPartBaixa^0,c
  7944   00146C                     u2548:
  7945   00146C  3A49               	swapf	??_CantaPartBaixa^0,f,c
  7946   00146E  4649               	rlncf	??_CantaPartBaixa^0,f,c
  7947   001470  508A               	movf	138,w,c	;volatile
  7948   001472  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7949   001474  0BDF               	andlw	-33
  7950   001476  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7951   001478  6E8A               	movwf	138,c	;volatile
  7952                           
  7953                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  7954   00147A  B04A               	btfsc	CantaPartBaixa@c^0,0,c
  7955   00147C  EF42  F00A         	goto	u2551
  7956   001480  EF46  F00A         	goto	u2550
  7957   001484                     u2551:
  7958   001484  6A49               	clrf	??_CantaPartBaixa^0,c
  7959   001486  2A49               	incf	??_CantaPartBaixa^0,f,c
  7960   001488  EF47  F00A         	goto	u2568
  7961   00148C                     u2550:
  7962   00148C  6A49               	clrf	??_CantaPartBaixa^0,c
  7963   00148E                     u2568:
  7964   00148E  3A49               	swapf	??_CantaPartBaixa^0,f,c
  7965   001490  508A               	movf	138,w,c	;volatile
  7966   001492  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7967   001494  0BEF               	andlw	-17
  7968   001496  1849               	xorwf	??_CantaPartBaixa^0,w,c
  7969   001498  6E8A               	movwf	138,c	;volatile
  7970   00149A  0012               	return		;funcret
  7971   00149C                     __end_of_CantaPartBaixa:
  7972                           	callstack 0
  7973                           
  7974 ;; *************** function _CantaPartAlta *****************
  7975 ;; Defined at:
  7976 ;;		line 210 in file "TAD_DISPLAY.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;  c               1    wreg     unsigned char 
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  c               1    2[COMRAM] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      void 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1
  7990 ;;      Params:         0       0       0
  7991 ;;      Locals:         1       0       0
  7992 ;;      Temps:          1       0       0
  7993 ;;      Totals:         2       0       0
  7994 ;;Total ram usage:        2 bytes
  7995 ;; Hardware stack levels used: 1
  7996 ;; Hardware stack levels required when called: 3
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_CantaIR
  8001 ;;		_CantaData
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text44
  8006   00149C                     __ptext44:
  8007                           	callstack 0
  8008   00149C                     _CantaPartAlta:
  8009                           	callstack 25
  8010                           
  8011                           ;incstack = 0
  8012                           ;CantaPartAlta@c stored from wreg
  8013   00149C  6E4A               	movwf	CantaPartAlta@c^0,c
  8014   00149E                     
  8015                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8016   00149E  BE4A               	btfsc	CantaPartAlta@c^0,7,c
  8017   0014A0  EF54  F00A         	goto	u2411
  8018   0014A4  EF58  F00A         	goto	u2410
  8019   0014A8                     u2411:
  8020   0014A8  6A49               	clrf	??_CantaPartAlta^0,c
  8021   0014AA  2A49               	incf	??_CantaPartAlta^0,f,c
  8022   0014AC  EF59  F00A         	goto	u2428
  8023   0014B0                     u2410:
  8024   0014B0  6A49               	clrf	??_CantaPartAlta^0,c
  8025   0014B2                     u2428:
  8026   0014B2  508D               	movf	141,w,c	;volatile
  8027   0014B4  1849               	xorwf	??_CantaPartAlta^0,w,c
  8028   0014B6  0BFE               	andlw	-2
  8029   0014B8  1849               	xorwf	??_CantaPartAlta^0,w,c
  8030   0014BA  6E8D               	movwf	141,c	;volatile
  8031                           
  8032                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8033   0014BC  BC4A               	btfsc	CantaPartAlta@c^0,6,c
  8034   0014BE  EF63  F00A         	goto	u2431
  8035   0014C2  EF67  F00A         	goto	u2430
  8036   0014C6                     u2431:
  8037   0014C6  6A49               	clrf	??_CantaPartAlta^0,c
  8038   0014C8  2A49               	incf	??_CantaPartAlta^0,f,c
  8039   0014CA  EF68  F00A         	goto	u2448
  8040   0014CE                     u2430:
  8041   0014CE  6A49               	clrf	??_CantaPartAlta^0,c
  8042   0014D0                     u2448:
  8043   0014D0  4649               	rlncf	??_CantaPartAlta^0,f,c
  8044   0014D2  508D               	movf	141,w,c	;volatile
  8045   0014D4  1849               	xorwf	??_CantaPartAlta^0,w,c
  8046   0014D6  0BFD               	andlw	-3
  8047   0014D8  1849               	xorwf	??_CantaPartAlta^0,w,c
  8048   0014DA  6E8D               	movwf	141,c	;volatile
  8049                           
  8050                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8051   0014DC  BA4A               	btfsc	CantaPartAlta@c^0,5,c
  8052   0014DE  EF73  F00A         	goto	u2451
  8053   0014E2  EF77  F00A         	goto	u2450
  8054   0014E6                     u2451:
  8055   0014E6  6A49               	clrf	??_CantaPartAlta^0,c
  8056   0014E8  2A49               	incf	??_CantaPartAlta^0,f,c
  8057   0014EA  EF78  F00A         	goto	u2468
  8058   0014EE                     u2450:
  8059   0014EE  6A49               	clrf	??_CantaPartAlta^0,c
  8060   0014F0                     u2468:
  8061   0014F0  3A49               	swapf	??_CantaPartAlta^0,f,c
  8062   0014F2  4649               	rlncf	??_CantaPartAlta^0,f,c
  8063   0014F4  508A               	movf	138,w,c	;volatile
  8064   0014F6  1849               	xorwf	??_CantaPartAlta^0,w,c
  8065   0014F8  0BDF               	andlw	-33
  8066   0014FA  1849               	xorwf	??_CantaPartAlta^0,w,c
  8067   0014FC  6E8A               	movwf	138,c	;volatile
  8068                           
  8069                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8070   0014FE  B84A               	btfsc	CantaPartAlta@c^0,4,c
  8071   001500  EF84  F00A         	goto	u2471
  8072   001504  EF88  F00A         	goto	u2470
  8073   001508                     u2471:
  8074   001508  6A49               	clrf	??_CantaPartAlta^0,c
  8075   00150A  2A49               	incf	??_CantaPartAlta^0,f,c
  8076   00150C  EF89  F00A         	goto	u2488
  8077   001510                     u2470:
  8078   001510  6A49               	clrf	??_CantaPartAlta^0,c
  8079   001512                     u2488:
  8080   001512  3A49               	swapf	??_CantaPartAlta^0,f,c
  8081   001514  508A               	movf	138,w,c	;volatile
  8082   001516  1849               	xorwf	??_CantaPartAlta^0,w,c
  8083   001518  0BEF               	andlw	-17
  8084   00151A  1849               	xorwf	??_CantaPartAlta^0,w,c
  8085   00151C  6E8A               	movwf	138,c	;volatile
  8086   00151E  0012               	return		;funcret
  8087   001520                     __end_of_CantaPartAlta:
  8088                           	callstack 0
  8089                           
  8090 ;; *************** function _LowRSI *****************
  8091 ;; Defined at:
  8092 ;;		line 34 in file "main.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		None
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1
  8106 ;;      Params:         0       0       0
  8107 ;;      Locals:         0       0       0
  8108 ;;      Temps:          1       0       0
  8109 ;;      Totals:         1       0       0
  8110 ;;Total ram usage:        1 bytes
  8111 ;; Hardware stack levels used: 1
  8112 ;; Hardware stack levels required when called: 2
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		Interrupt level 1
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	intcodelo
  8121   000018                     __pintcodelo:
  8122                           	callstack 0
  8123   000018                     _LowRSI:
  8124                           	callstack 22
  8125                           
  8126                           ;incstack = 0
  8127   000018  806E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8128   00001A  CFE0 F048          	movff	bsr,??_LowRSI
  8129   00001E  C048  FFE0         	movff	??_LowRSI,bsr
  8130   000022  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8131   000024  0010               	retfie	
  8132   000026                     __end_of_LowRSI:
  8133                           	callstack 0
  8134                           
  8135 ;; *************** function _HighRSI *****************
  8136 ;; Defined at:
  8137 ;;		line 30 in file "main.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;		None
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      void 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2, status,0, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1
  8151 ;;      Params:         0       0       0
  8152 ;;      Locals:         0       0       0
  8153 ;;      Temps:          0       0       0
  8154 ;;      Totals:         0       0       0
  8155 ;;Total ram usage:        0 bytes
  8156 ;; Hardware stack levels used: 1
  8157 ;; Hardware stack levels required when called: 1
  8158 ;; This function calls:
  8159 ;;		_RSI_Timer0
  8160 ;; This function is called by:
  8161 ;;		Interrupt level 2
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	intcode
  8166   000008                     __pintcode:
  8167                           	callstack 0
  8168   000008                     _HighRSI:
  8169                           	callstack 22
  8170                           
  8171                           ;incstack = 0
  8172   000008  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8173   00000A  EF13  F00D         	goto	int_func
  8174                           
  8175                           	psect	intcode_body
  8176   001A26                     __pintcode_body:
  8177                           	callstack 22
  8178   001A26                     int_func:
  8179                           	callstack 22
  8180   001A26                     
  8181                           ;main.c: 32: 
  8182   001A26  A4F2               	btfss	242,2,c	;volatile
  8183   001A28  EF18  F00D         	goto	i2u199_41
  8184   001A2C  EF1A  F00D         	goto	i2u199_40
  8185   001A30                     i2u199_41:
  8186   001A30  EF1C  F00D         	goto	i2l36
  8187   001A34                     i2u199_40:
  8188   001A34  ECFC  F00C         	call	_RSI_Timer0	;wreg free
  8189   001A38                     i2l36:
  8190   001A38  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8191   001A3A  0011               	retfie		f
  8192   001A3C                     __end_of_HighRSI:
  8193                           	callstack 0
  8194                           
  8195 ;; *************** function _RSI_Timer0 *****************
  8196 ;; Defined at:
  8197 ;;		line 25 in file "TAD_TIMER.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;		None
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;		None
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      void 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1
  8211 ;;      Params:         0       0       0
  8212 ;;      Locals:         0       0       0
  8213 ;;      Temps:          0       0       0
  8214 ;;      Totals:         0       0       0
  8215 ;;Total ram usage:        0 bytes
  8216 ;; Hardware stack levels used: 1
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_HighRSI
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text47
  8225   0019F8                     __ptext47:
  8226                           	callstack 0
  8227   0019F8                     _RSI_Timer0:
  8228                           	callstack 22
  8229   0019F8                     
  8230                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8231   0019F8  0EF6               	movlw	246
  8232   0019FA  6ED7               	movwf	215,c	;volatile
  8233   0019FC  0E3C               	movlw	60
  8234   0019FE  6ED6               	movwf	214,c	;volatile
  8235   001A00                     
  8236                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8237   001A00  94F2               	bcf	4082,2,c	;volatile
  8238   001A02                     
  8239                           ;TAD_TIMER.c: 29:     Tics++;
  8240   001A02  0E01               	movlw	1
  8241   001A04  2607               	addwf	_Tics^0,f,c	;volatile
  8242   001A06  0E00               	movlw	0
  8243   001A08  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  8244   001A0A  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  8245   001A0C  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  8246   001A0E  0012               	return		;funcret
  8247   001A10                     __end_of_RSI_Timer0:
  8248                           	callstack 0
  8249                           
  8250                           	psect	rparam
  8251   000001                     ___rparam_used  equ	1
  8252   000000                     ___param_bank   equ	0
  8253   000000                     __Lparam        equ	__Lrparam
  8254   000000                     __Hparam        equ	__Hrparam
  8255                           
  8256                           	psect	temp
  8257   00006E                     btemp:
  8258                           	callstack 0
  8259   00006E                     	ds	1
  8260   00006E                     int$flags       set	btemp
  8261   00006F                     wtemp8          set	btemp+1
  8262   00006F                     ttemp5          set	btemp+1
  8263   000072                     ttemp6          set	btemp+4
  8264   000076                     ttemp7          set	btemp+8
  8265                           
  8266                           	psect	idloc
  8267                           
  8268                           ;Config register IDLOC0 @ 0x200000
  8269                           ;	unspecified, using default values
  8270   200000                     	org	2097152
  8271   200000  FF                 	db	255
  8272                           
  8273                           ;Config register IDLOC1 @ 0x200001
  8274                           ;	unspecified, using default values
  8275   200001                     	org	2097153
  8276   200001  FF                 	db	255
  8277                           
  8278                           ;Config register IDLOC2 @ 0x200002
  8279                           ;	unspecified, using default values
  8280   200002                     	org	2097154
  8281   200002  FF                 	db	255
  8282                           
  8283                           ;Config register IDLOC3 @ 0x200003
  8284                           ;	unspecified, using default values
  8285   200003                     	org	2097155
  8286   200003  FF                 	db	255
  8287                           
  8288                           ;Config register IDLOC4 @ 0x200004
  8289                           ;	unspecified, using default values
  8290   200004                     	org	2097156
  8291   200004  FF                 	db	255
  8292                           
  8293                           ;Config register IDLOC5 @ 0x200005
  8294                           ;	unspecified, using default values
  8295   200005                     	org	2097157
  8296   200005  FF                 	db	255
  8297                           
  8298                           ;Config register IDLOC6 @ 0x200006
  8299                           ;	unspecified, using default values
  8300   200006                     	org	2097158
  8301   200006  FF                 	db	255
  8302                           
  8303                           ;Config register IDLOC7 @ 0x200007
  8304                           ;	unspecified, using default values
  8305   200007                     	org	2097159
  8306   200007  FF                 	db	255
  8307                           
  8308                           	psect	config
  8309                           
  8310                           ; Padding undefined space
  8311   300000                     	org	3145728
  8312   300000  FF                 	db	255
  8313                           
  8314                           ;Config register CONFIG1H @ 0x300001
  8315                           ;	Oscillator
  8316                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8317                           ;	Fail-Safe Clock Monitor Enable bit
  8318                           ;	FCMEN = 0x0, unprogrammed default
  8319                           ;	Internal/External Oscillator Switchover bit
  8320                           ;	IESO = 0x0, unprogrammed default
  8321   300001                     	org	3145729
  8322   300001  06                 	db	6
  8323                           
  8324                           ;Config register CONFIG2L @ 0x300002
  8325                           ;	Power-up Timer Enable bit
  8326                           ;	PWRT = OFF, PWRT disabled
  8327                           ;	Brown-out Reset Enable bits
  8328                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8329                           ;	Brown-out Reset Voltage bits
  8330                           ;	BORV = 0x3, unprogrammed default
  8331   300002                     	org	3145730
  8332   300002  19                 	db	25
  8333                           
  8334                           ;Config register CONFIG2H @ 0x300003
  8335                           ;	Watchdog Timer Enable bit
  8336                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8337                           ;	Watchdog Timer Postscale Select bits
  8338                           ;	WDTPS = 0xF, unprogrammed default
  8339   300003                     	org	3145731
  8340   300003  1E                 	db	30
  8341                           
  8342                           ; Padding undefined space
  8343   300004                     	org	3145732
  8344   300004  FF                 	db	255
  8345                           
  8346                           ;Config register CONFIG3H @ 0x300005
  8347                           ;	CCP2 MUX bit
  8348                           ;	CCP2MX = 0x1, unprogrammed default
  8349                           ;	PORTB A/D Enable bit
  8350                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8351                           ;	Low-Power Timer1 Oscillator Enable bit
  8352                           ;	LPT1OSC = 0x0, unprogrammed default
  8353                           ;	MCLR Pin Enable bit
  8354                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8355   300005                     	org	3145733
  8356   300005  81                 	db	129
  8357                           
  8358                           ;Config register CONFIG4L @ 0x300006
  8359                           ;	Stack Full/Underflow Reset Enable bit
  8360                           ;	STVREN = 0x1, unprogrammed default
  8361                           ;	Single-Supply ICSP Enable bit
  8362                           ;	LVP = OFF, Single-Supply ICSP disabled
  8363                           ;	Boot Block Size Select bits
  8364                           ;	BBSIZ = 0x0, unprogrammed default
  8365                           ;	Extended Instruction Set Enable bit
  8366                           ;	XINST = 0x0, unprogrammed default
  8367                           ;	Background Debugger Enable bit
  8368                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8369   300006                     	org	3145734
  8370   300006  81                 	db	129
  8371                           
  8372                           ; Padding undefined space
  8373   300007                     	org	3145735
  8374   300007  FF                 	db	255
  8375                           
  8376                           ;Config register CONFIG5L @ 0x300008
  8377                           ;	unspecified, using default values
  8378                           ;	Code Protection bit
  8379                           ;	CP0 = 0x1, unprogrammed default
  8380                           ;	Code Protection bit
  8381                           ;	CP1 = 0x1, unprogrammed default
  8382   300008                     	org	3145736
  8383   300008  03                 	db	3
  8384                           
  8385                           ;Config register CONFIG5H @ 0x300009
  8386                           ;	unspecified, using default values
  8387                           ;	Boot Block Code Protection bitProtect Boot
  8388                           ;	CPB = 0x1, unprogrammed default
  8389                           ;	Data EEPROM Code Protection bit
  8390                           ;	CPD = 0x1, unprogrammed default
  8391   300009                     	org	3145737
  8392   300009  C0                 	db	192
  8393                           
  8394                           ;Config register CONFIG6L @ 0x30000A
  8395                           ;	unspecified, using default values
  8396                           ;	Write Protection bit
  8397                           ;	WRT0 = 0x1, unprogrammed default
  8398                           ;	Write Protection bit
  8399                           ;	WRT1 = 0x1, unprogrammed default
  8400   30000A                     	org	3145738
  8401   30000A  03                 	db	3
  8402                           
  8403                           ;Config register CONFIG6H @ 0x30000B
  8404                           ;	unspecified, using default values
  8405                           ;	Configuration Register Write Protection bit
  8406                           ;	WRTC = 0x1, unprogrammed default
  8407                           ;	Boot Block Write Protection bit
  8408                           ;	WRTB = 0x1, unprogrammed default
  8409                           ;	Data EEPROM Write Protection bit
  8410                           ;	WRTD = 0x1, unprogrammed default
  8411   30000B                     	org	3145739
  8412   30000B  E0                 	db	224
  8413                           
  8414                           ;Config register CONFIG7L @ 0x30000C
  8415                           ;	unspecified, using default values
  8416                           ;	Table Read Protection bit
  8417                           ;	EBTR0 = 0x1, unprogrammed default
  8418                           ;	Table Read Protection bit
  8419                           ;	EBTR1 = 0x1, unprogrammed default
  8420   30000C                     	org	3145740
  8421   30000C  03                 	db	3
  8422                           
  8423                           ;Config register CONFIG7H @ 0x30000D
  8424                           ;	unspecified, using default values
  8425                           ;	Boot Block Table Read Protection bit
  8426                           ;	EBTRB = 0x1, unprogrammed default
  8427   30000D                     	org	3145741
  8428   30000D  40                 	db	64
  8429                           tosu	equ	0xFFF
  8430                           tosh	equ	0xFFE
  8431                           tosl	equ	0xFFD
  8432                           stkptr	equ	0xFFC
  8433                           pclatu	equ	0xFFB
  8434                           pclath	equ	0xFFA
  8435                           pcl	equ	0xFF9
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           indf0	equ	0xFEF
  8443                           postinc0	equ	0xFEE
  8444                           postdec0	equ	0xFED
  8445                           preinc0	equ	0xFEC
  8446                           plusw0	equ	0xFEB
  8447                           fsr0h	equ	0xFEA
  8448                           fsr0l	equ	0xFE9
  8449                           wreg	equ	0xFE8
  8450                           indf1	equ	0xFE7
  8451                           postinc1	equ	0xFE6
  8452                           postdec1	equ	0xFE5
  8453                           preinc1	equ	0xFE4
  8454                           plusw1	equ	0xFE3
  8455                           fsr1h	equ	0xFE2
  8456                           fsr1l	equ	0xFE1
  8457                           bsr	equ	0xFE0
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           preinc2	equ	0xFDC
  8462                           plusw2	equ	0xFDB
  8463                           fsr2h	equ	0xFDA
  8464                           fsr2l	equ	0xFD9
  8465                           status	equ	0xFD8

Data Sizes:
    Strings     302
    Constant    12
    Data        96
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     30     109
    BANK0           128      0     108
    BANK1           256      0       0

Pointer List with Targets:

    motor_RFID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    motorTerminal@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    sp__getActualUID	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_1(CODE[18]), STR_10(CODE[2]), STR_11(CODE[3]), STR_12(CODE[3]), 
		 -> STR_13(CODE[4]), STR_14(CODE[3]), STR_15(CODE[3]), STR_16(CODE[3]), 
		 -> STR_17(CODE[3]), STR_18(CODE[3]), STR_19(CODE[33]), STR_2(CODE[18]), 
		 -> STR_20(CODE[33]), STR_21(CODE[33]), STR_22(CODE[6]), STR_23(CODE[10]), 
		 -> STR_24(CODE[2]), STR_25(CODE[3]), STR_26(CODE[22]), STR_27(CODE[2]), 
		 -> STR_3(CODE[18]), STR_4(CODE[19]), STR_5(CODE[27]), STR_6(CODE[29]), 
		 -> STR_7(CODE[33]), STR_8(CODE[9]), STR_9(CODE[6]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F989(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motor_Write->_delay_us
    _motor_Read->_delay_us
    _motorTerminal->_printfUID
    _showMenu->_Terminal_SendString
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6770
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           8     8      0    3195
                                             22 COMRAM     8     8      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1048
                                             17 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       6     5      1     356
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          3     2      1     102
                                              6 COMRAM     3     2      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0      60
                                              6 COMRAM     2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        1     1      0    1101
                                             17 COMRAM     1     1      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                _Terminal_SendString
                       _getActualUID
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0     101
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                4     4      0     288
                                              7 COMRAM     4     4      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       1     0      1      89
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           10     9      1     470
                                              7 COMRAM    10     9      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2     101
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (2) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1290
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1290
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     237
                         _MFRC522_Wr
                           _delay_us
                   _resetMotorStates
 ---------------------------------------------------------------------------------
 (4) _resetMotorStates                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     423
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      2     1      1     423
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     423
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    3     2      1     423
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     207
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           5     5      0     135
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
         _resetMotorStates
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _Terminal_SendString
       _Terminal_SendChar
     _getActualUID
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _getActualUID
     _motor_Read
       _delay_us
     _motor_Write
       _delay_us
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     108     84.4%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     30     109     86.5%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         35      0       0      0.0%
BITBIGSFRllh         5      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     217      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 13 13:17:29 2025

        __end_ofGetTecla@F2752 1ED1          ?_Terminal_ReceiveChar 0048                     _RSI_Timer0 19F8  
                  MFRC522_Rd@i 0052                    MFRC522_Wr@i 0057                             l52 1AE4  
                           l81 16EE                             l75 191E                             l85 19A2  
                           l88 1788                             u10 18EA                             u11 18E6  
                           u30 1268                             u31 1260                             u50 129C  
                           u51 1298                             u60 12BC                             u61 12B6  
                           u70 12DA                             u71 12D6                             u48 126A  
                           u66 12BE                     _TI_GetTics 173E                             bsr 0FE0  
         ??_InitPortDirections 0049                    _state_write 0034                            l220 12A0  
                          l132 1A24                            l213 18BE                            l221 12DA  
                          l222 12E0                            l215 18EA                            l135 1ADC  
                          l232 19F6                            l209 1AB8                            l241 197E  
                          l250 173C                            l235 1A62                            l228 123A  
                          l244 1AA0                            l260 1000                            l229 123E  
                          l238 1ACC                            l247 1AAC                            l329 049E  
                          l266 10E0                            l291 1AC2                            l283 0D7C  
                          l373 0340                            l622 1A86                            l278 0E10  
                          l527 0F08                            l471 0944                            l625 19DC  
                          l633 19BC                            l634 19C0                            l386 0400  
                          l643 18B4                            l475 096E                            l628 1A4E  
                          l740 1380                            l637 1AE8                            l582 151E  
                          l646 15E6                            l663 0FF8                            l728 1640  
                          l488 0B5A                            l585 149A                            l673 1196  
                          l594 1A76                            l818 1A94                            l746 187E  
                          l579 1810                            l588 1950                            l597 1416  
                          l749 17D2                            l698 0CD6                            u510 0D72  
                          u511 0D6E                            u520 0D98                            u521 0D92  
                          u610 13A6                            u530 0DB6                            u611 139E  
                          u531 0DB2                            u540 0DD6                            u508 0D40  
                          u541 0DD2                            u630 13C4                            u550 0DE6  
                          u526 0D9A                            u631 13BC                            u551 0DE2  
                          u480 0CF4                            u481 0CF0                            u650 13E4  
                          u730 1A4C                            u490 0D3E                            u651 13DC  
                          u731 1A46                            u491 0D36                            u628 13A8  
                          u670 1406                            u671 13FE                            u648 13C6  
                          u736 1A4E                            u668 13E6                            u688 1408  
                 printfUID@low 0056               ??_CantaPartBaixa 0049                            wreg 0FE8  
               ??_MFRC522_Init 005B                           l2043 1A3C                           l2133 1A78  
                         l2141 1ADE                           l2135 1A80                           l2143 1AE2  
                         l2047 1AE6                           l2137 1A82                           l3201 11F4  
                         l2139 1A84                           l3211 1228                           l3203 1214  
                         l4011 06D4                           l4003 06B0                           l3221 1984  
                         l1525 18B8                           l1541 1250                           l3213 122A  
                         l3205 121A                           l3301 0FA4                           l4021 0714  
                         l4013 06DC                           l4005 06BE                           l3223 19A0  
                         l1527 18C0                           l1551 1276                           l1543 1252  
                         l1535 1242                           l3207 1220                           l3231 19E0  
                         l3215 19A6                           l3303 0FC0                           l3311 10E2  
                         l4111 08DA                           l4103 08B4                           l4023 0728  
                         l4007 06CE                           l3225 1740                           l1529 18C2  
                         l1561 128C                           l1553 1278                           l1537 124C  
                         l3209 1222                           l3233 1A52                           l3217 19A6  
                         l3241 1898                           l3305 0FCC                           l3401 10B4  
                         l3321 1104                           l4121 090E                           l4105 08C6  
                         l4041 0776                           l4033 074E                           l4017 06F0  
                         l3227 1754                           l3219 1982                           l1571 12AC  
                         l1563 129C                           l1555 127E                           l1539 124E  
                         l3171 119A                           l3251 1960                           l3243 1952  
                         l3235 1880                           l3307 0FD0                           l3403 10BA  
                         l3411 10DE                           l3331 1142                           l3323 1110  
                         l4131 0946                           l4123 0918                           l4115 08EE  
                         l4107 08CA                           l4051 07A6                           l4035 0760  
                         l4027 0732                           l4019 0702                           l3341 169A  
                         l1573 12C0                           l1557 1282                           l1549 1256  
                         l3173 11A2                           l3261 1A96                           l3253 1966  
                         l3245 1956                           l3421 1618                           l3237 1884  
                         l3309 0FEC                           l1901 0DB6                           l3333 115E  
                         l3325 1120                           l3317 10EA                           l4141 098A  
                         l4133 094E                           l4125 091C                           l4117 0900  
                         l4109 08D2                           l4061 07EA                           l4053 07B8  
                         l4045 078A                           l4029 073A                           l3271 141A  
                         l3351 16E4                           l3343 16A0                           l1575 12C8  
                         l1567 12A2                           l1559 128A                           l3191 11D8  
                         l3183 11AA                           l3175 11A4                           l3263 1AA2  
                         l1647 1AC4                           l3255 1968                           l3247 1958  
                         l3423 1628                           l3415 15E8                           l3167 19C2  
                         l3239 1894                           l1903 0DBC                           l3335 116A  
                         l3327 1130                           l3319 10F8                           l4151 09B8  
                         l4143 099E                           l4135 095E                           l4127 0924  
                         l4119 0906                           l4071 081C                           l4063 07F2  
                         l4055 07BC                           l4047 0792                           l4039 0768  
                         l4311 181E                           l3265 17D4                           l3601 1A8C  
                         l1577 12CA                           l1569 12A8                           l3193 11DE  
                         l3185 11CA                           l3177 11A6                           l3257 196E  
                         l3249 195E                           l3425 1638                           l3417 15F8  
                         l3281 0F1E                           l3273 0F0A                           l1913 0DEC  
                         l1905 0DC4                           l1841 0CF4                           l3361 1004  
                         l3409 10C0                           l3337 116E                           l3329 113C  
                         l3441 179C                           l3433 178C                           l4145 09A6  
                         l4137 0970                           l4129 0934                           l4081 0852  
                         l4073 0824                           l4057 07CC                           l4321 1836  
                         l4313 1822                           l3347 16B8                           l3267 17DA  
                         l3611 0E28                           l3603 0E14                           l1579 12DE  
                         l3195 11E0                           l3187 11D0                           l3259 1978  
                         l3355 16F0                           l1771 1ADA                           l3419 1608  
                         l3291 0F64                           l3283 0F32                           l3275 0F16  
                         l3531 12EA                           l3523 1586                           l1907 0DD6  
                         l1851 0D10                           l1843 0CFA                           l1923 0DF2  
                         l1835 0CDA                           l3371 103A                           l3363 100C  
                         l3339 118A                           l3451 17C4                           l3443 17A0  
                         l3435 1790                           l4171 0A42                           l4163 0A08  
                         l4155 09D8                           l4147 09AA                           l4139 0978  
                         l4091 087A                           l4083 0856                           l4075 082C  
                         l4067 0806                           l4059 07E2                           l4323 1838  
                         l4315 1826                           l4307 1812                           l3269 149E  
                         l3461 193A                           l3453 1922                           l3349 16D4  
                         l3621 0E48                           l3613 0E2E                           l3605 0E1C  
                         l1773 1AAE                           l3197 11F0                           l3189 11D6  
                         l3357 16F4                           l3429 163E                           l3293 0F72  
                         l3285 0F42                           l3533 12F6                           l3525 12E2  
                         l3701 0C6E                           l1909 0DE6                           l1861 0D22  
                         l1853 0D12                           l1845 0D02                           l1837 0CDA  
                         l3381 1050                           l3373 1040                           l3365 1010  
                         l3445 17A4                           l3437 1794                           l4165 0A18  
                         l4157 09FA                           l4149 09B0                           l4093 088C  
                         l4085 085E                           l4069 0818                           l4181 0B44  
                         l4325 183C                           l4317 182A                           l4309 181A  
                         l3463 193C                           l3455 1930                           l3471 1A64  
                         l3631 0E96                           l3623 0E4E                           l3607 0E20  
                         l3295 0F82                           l3287 0F52                           l3551 1354  
                         l3543 1312                           l3535 12FE                           l3711 0CB2  
                         l3703 0C8A                           l1871 0D4E                           l1863 0D26  
                         l1855 0D14                           l1839 0CDE                           l3391 1092  
                         l3383 1062                           l3375 1046                           l3367 1012  
                         l3359 0FFC                           l3447 17B0                           l3439 1798  
                         l4167 0A2E                           l4159 0A00                           l4095 0890  
                         l4087 0866                           l4079 0840                           l4327 1840  
                         l4319 1834                           l3465 1944                           l3457 1936  
                         l3641 0ED4                           l3633 0EAE                           l3625 0E66  
                         l3609 0E24                           l1769 1AD6                           l3297 0F92  
                         l3289 0F5E                           l3561 1862                           l3553 1360  
                         l3545 1328                           l3537 130A                           l3705 0C8C  
                         l1881 0D72                           l1873 0D54                           l1857 0D1E  
                         l1849 0D08                           l3393 1098                           l3385 1064  
                         l3377 1048                           l3369 101A                           l3449 17B8  
                         l4177 0A56                           l4169 0A36                           l4097 0898  
                         l3801 01EA                           l3721 002E                    _TI_NewTimer 169A  
                         l3467 1946                           l3459 1938                           l1971 1414  
                         l3643 0ED8                           l3635 0EB2                           l3627 0E78  
                         l3619 0E36                           l3571 18EE                           l3299 0F9E  
                         l3563 1870                           l3555 1364                           l3547 1334  
                         l3707 0C9E                           l3651 0B5C                           l1891 0D84  
                         l1883 0D74                           l1875 0D58                           l1867 0D2C  
                         l1859 0D20                           l3395 109A                           l3387 106C  
                         l3379 104E                           l4099 08A0                           l3811 021A  
                         l3803 01F8                           l3731 006A                           l3723 003A  
                         l3469 1948                           l3645 0EE2                           l3637 0EBC  
                         l3629 0E90                           l3581 191C                           l3573 18FC  
                         l3565 18EC                           l3557 184A                           l3549 1338  
                         l3709 0CA6                           l3661 0B8C                           l3653 0B60  
                         l3717 0CB8                           l1893 0D88                           l1877 0D60  
                         l1869 0D4C                           l3397 10A0                           l3389 108C  
                         l3901 04AE                           l3821 0266                           l3805 0208  
                         l3741 00A0                           l3733 007A                           l3725 004A  
                         l1967 1384                           l3647 0EE8                           l3639 0EC2  
                         l3575 18FE                           l3591 1A1A                           l3583 1A10  
                         l3559 1854                           l3671 0BC2                           l3663 0B90  
                         l3655 0B74                           l1895 0D9C                           l1879 0D62  
                         l3399 10A2                           l3911 04EA                           l3903 04BE  
                         l3831 0290                           l3823 026C                           l3815 022E  
                         l3807 020A                           l3751 00DC                           l3743 00B2  
                         l3735 0082                           l3727 0056                           l3719 002A  
                         l1969 1394                           l3649 0EEC                           l3577 190E  
                         l3593 1A1C                           l3585 1A14                           l3673 0BCE  
                         l3681 0BEE                           l3665 0B94                           l3657 0B78  
                         l1897 0DA4                           l1889 0D7E                           l3913 04FC  
                         l3905 04CE                           l3841 02D8                           l3833 02A2  
                         l3825 0274                           l3817 0240                           l3809 0212  
                         l3761 0112                           l3753 00E4                           l3745 00B6  
                         l3737 008A                           l3729 005E                           l3579 191A  
                         l3595 1ABA                           l3587 1A16                           l3691 0C2A  
                         l3683 0C02                           l3675 0BD4                           l3667 0B9A  
                         l3659 0B7C                           l1899 0DA6                           l3931 054E  
                         l3923 0526                           l3907 04D6                           l3851 030E  
                         l3843 02E0                           l3835 02B2                           l3827 027C  
                         l3819 0252                           l3771 0144                           l3763 0116  
                         l3755 00EC                           l3747 00BE                           l3739 009A  
                         l3597 1ABE                           l3589 1A18                           l3693 0C42  
                         l3685 0C0E                           l3677 0BDC                           l3669 0BAE  
                         l3933 0556                           l3925 052E                           l3917 0504  
                         l3861 0350                           l3853 0312                           l3845 02E8  
                         l3837 02BA                           l3781 0184                           l3773 0150  
                         l3765 011E                           l3749 00CC                           l3599 1A88  
                         l3695 0C4A                           l3679 0BE8                           l3951 05AA  
                         l3943 0580                           l3927 053A                           l3919 0512  
                         l3871 0382                           l3855 0322                           l3839 02C8  
                         l3791 01B8                           l3783 018C                           l3775 0160  
                         l3767 012C                           l3759 0100                           l3689 0C16  
                         l3961 05D8                           l3945 058E                           l3937 056A  
                         l3881 03B6                           l3873 038A                           l3865 0364  
                         l3857 0338                           l3849 02FC                           l3785 0198  
                         l3777 0168                           l3769 013C                           l3699 0C5A  
                         l3963 05E6                           l3955 05BE                           l3891 03F8  
                         l3883 03BE                           l3867 0376                           l3859 0348  
                         l3795 01CC                           l3787 01A8                           l3779 0174  
                         l3981 0646                           l3973 061A                           l3957 05D0  
                         l3949 05A2                           l3885 03CE                           l3877 039E  
                         l3869 037A                           l3797 01DE                           l3789 01B0  
                         l3991 067A                           l3975 0626                           l3967 05FA  
                         l3887 03DE                           l3879 03B0                           l3799 01E2  
                         l3993 0682                           l3985 065A                           l3969 0606  
                         l3897 0408                           l3889 03E6                           l3987 0666  
                         l3979 063A                           l3899 04A2                           l3997 0696  
                         l3999 06A8                           STR_1 1FB6                           STR_2 1FC8  
                         STR_3 1FB6                           STR_4 1FA3                           STR_5 1F72  
                         STR_6 1F55                           STR_7 1EF2                           STR_8 1FE4  
                         STR_9 1FF3                           u3000 013C                           u3001 0138  
                         u3010 0160                           u3011 015C                           u3100 0266  
                         u3020 0184                           u3101 0262                           u3021 0180  
                         u2310 19D4                           u3110 028C                           u3030 01A8  
                         u2311 19CC                           u3111 0288                           u3031 01A4  
                         _LATC 0F8B                           u2400 1810                           u2320 11BC  
                         u3200 0376                           u3120 02A2                           u3040 01C8  
                         _LATD 0F8C                           u2401 180C                           u2321 11B4  
                         u3201 0372                           u3121 029E                           u3041 01C4  
                         u2410 14B0                           u3210 039A                           u3130 02B2  
                         u3050 01DE                           u2411 14A8                           u3211 0396  
                         u3131 02AE                           u3051 01DA                           u2340 11F0  
                         u3300 0566                           u3220 03B0                           u3140 02D8  
                         u3060 0208                           u2341 11EC                           u3301 0562  
                         u3221 03AC                           u3141 02D4                           u3061 0204  
                         u2430 14CE                           u2510 144A                           u2350 1206  
                         u2318 19D6                           u3310 057C                           u3230 03CE  
                         u3150 02F8                           u3070 022A                           u2431 14C6  
                         u2511 1442                           u2351 11FE                           u3311 0578  
                         u3231 03CA                           u3151 02F4                           u3071 0226  
                         u2600 0FEC                           u3400 0692                           u3320 059E  
                         u3240 03F8                           u3160 030E                           u3080 0240  
                         u2601 0FE8                           u3401 068E                           u3321 059A  
                         u3241 03F4                           u3161 030A                           u3081 023C  
                         u2450 14EE                           u2530 146A                           u2370 123A  
                         u2338 11BE                           u2610 1120                           u3410 06A8  
                         u3330 05BA                           u3250 04BE                           u3170 0322  
                         u3090 0252                           u2451 14E6                           u2531 1462  
                         u2371 1236                           u2611 111C                           u3411 06A4  
                         u3331 05B6                           u3251 04BA                           u3171 031E  
                         u3091 024E                           u2428 14B2                           u2508 142E  
                         u2380 19BC                           u2620 115E                           u3500 07A2  
                         u3420 06CE                           u3340 05D0                           u3260 04E6  
                         u3180 0338                           u2381 19B8                           u2621 115A  
                         u3501 079E                           u3421 06CA                           u3341 05CC  
                         u3261 04E2                           u3181 0334                           u2470 1510  
                         u2550 148C                           u2390 18B4                           u2710 10B4  
                         u2630 118A                           u3510 07B8                           u3430 06EC  
                         u3350 05F6                           u3270 04FC                           u3190 0360  
                         u2471 1508                           u2551 1484                           u2391 18B0  
                         u2711 10B0                           u2631 1186                           u3511 07B4  
                         u3431 06E8                           u3351 05F2                           u3271 04F8  
                         u3191 035C                           u2448 14D0                           u2528 144C  
                         u2640 16B4                           u2368 1208                           u2720 15F8  
                         u3600 08B0                           u3520 07CC                           u3440 0702  
                         u3360 0616                           u3280 0522                           u2641 16B0  
                         u2721 15F4                           u3601 08AC                           u3521 07C8  
                         u3441 06FE                           u3361 0612                           u3281 051E  
                         u2490 142C                           u2650 16D4                           u2730 1608  
                         u2570 0F42                           u2810 1354                           u3610 08C6  
                         u3530 07E2                           u3450 0714                           u3370 0636  
                         u3290 054A                           u2491 1424                           u2651 16D0  
                         u2731 1604                           u2571 0F3E                           u2811 1350  
                         u3611 08C2                           u3531 07DE                           u3451 0710  
                         u3371 0632                           u3291 0546                           u2468 14F0  
                         u2548 146C                           u2740 1618                           u2580 0F82  
                         u2820 1380                           u2900 0C2A                           u2708 1080  
                         u2660 102C                           u3700 09D4                           u3620 08EA  
                         u3540 0802                           u3460 0728                           u3380 0656  
                         u2741 1614                           u2581 0F7E                           u2821 137C  
                         u2901 0C26                           u2661 1024                           u3701 09D0  
                         u3621 08E6                           u3541 07FE                           u3461 0724  
                         u3381 0652                           u2830 190E                           u2750 1628  
                         u2590 0FC0                           u2910 0C6E                           u3710 09FA  
                         u3630 0900                           u3550 0818                           u3470 074A  
                         u3390 0676                           u2831 190A                           u2751 1624  
                         u2591 0FBC                           u2911 0C6A                           u3711 09F6  
                         u3631 08FC                           u3551 0814                           u3471 0746  
                         u3391 0672                           u2488 1512                           u2568 148E  
                         u2840 0F08                           u2760 1638                           u2920 0C9E  
                         u2680 1062                           u3720 0A18                           u3640 0934  
                         u3560 083C                           u3480 0760                           u2841 0F04  
                         u2761 1634                           u2921 0C9A                           u2681 105E  
                         u3721 0A14                           u3641 0930                           u3561 0838  
                         u3481 075C                           u2850 0B74                           u2690 107E  
                         u3730 0A52                           u3650 0944                           u3570 0852  
                         u3490 0786                           u2930 004A                           u2851 0B70  
                         u2691 1076                           u3731 0A4E                           u3651 0940  
                         u3571 084E                           u3491 0782                           u2931 0046  
                         u2860 0B8C                           u3660 095E                           u3580 0876  
                         u2940 007A                           u2861 0B88                           u3661 095A  
                         u3581 0872                           u2941 0076                           u2870 0BAE  
                         u2678 102E                           u3670 096E                           u3590 088C  
                         u2950 009A                           u2871 0BAA                           u3671 096A  
                         u3591 0888                           u2951 0096                           u2880 0BC2  
                         u3680 098A                           u2960 00B2                           i1l41 001E  
                         u2881 0BBE                           u3681 0986                           u2961 00AE  
                         u2890 0C02                           u3690 099A                           u2970 00DC  
                         u2891 0BFE                           u3691 0996                           u2971 00D8  
                         u2980 00FC                           u2981 00F8                           u2990 0112  
                         u2991 010E                           i2l36 1A38                           i2l70 1A0E  
                         _TMR0 0FD6                     _ActualLeds 003A                           _Tics 0007  
        _showAllConfigurations 12E2                           _Rows 0020               motor_datos@state 0017  
                         _main 1812                  printfUID@high 0055                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 006E                __end_of_TI_Init 1920  
                         prodh 0FF4                           prodl 0FF3                           start 0026  
              __end_of_CantaIR 1952              ?_resetMotorStates 0048                __end_of_HighRSI 1A3C  
                LcInit@columns 005E             setCurrentUser@UID0 005D             setCurrentUser@UID1 0059  
           setCurrentUser@UID2 005A             setCurrentUser@UID3 005B             setCurrentUser@UID4 005C  
                 ___param_bank 0000             ??_resetMotorStates 0049                printLedConfig@i 0053  
              ??_MFRC522_Reset 0058                   ?_initTeclado 0048                    Espera@Timer 0056  
                        ?_main 0048                          STR_10 1FFD                          STR_11 1FC5  
                        STR_12 1FEA                          STR_20 1ED1                          STR_13 1FF9  
                        STR_21 1F13                          STR_14 1FC5                          STR_22 1FED  
                        STR_15 1FC5                          STR_23 1FDA                          STR_16 1FC5  
                        STR_24 1FFB                          STR_25 1FC5                          STR_17 1FC5  
                        STR_18 1FC5                          STR_26 1F8D                          STR_27 1FA1  
                        STR_19 1F34                          _T0CON 0FD5                          _RCREG 0FAE  
                        _RCSTA 0FAB                          _SPBRG 0FAF                          _PORTD 0F83  
                        _TRISA 0F92                          _TRISD 0F95                          _TRISE 0F96  
                        _TXREG 0FAD                          _TXSTA 0FAC           __end_of_getActualUID 1642  
                        _Filas 0039                motor_RFID@i_581 0063                          _Timer 0046  
              motor_RFID@irqEn 002B                          _index 000D                motor_RFID@unLen 000F  
                 _TI_ResetTics 1980                          _tecla 0037                motor_RFID@state 002D  
                        _timer 0047                          _state 0036                setLed@userIndex 0013  
          motor_Read@bit_count 0030                          tablat 0FF5              _MFRC522_Clear_Bit 19DE  
                        ttemp5 006F                          ttemp6 0072                          ttemp7 0076  
               _saveHourToData 184A                          status 0FD8                          wtemp8 006F  
           Terminal_SendChar@c 004C             ?_MFRC522_Clear_Bit 0058               ??_printLedConfig 0050  
            _MFRC522_AntennaOn 1A96        EscriuPrimeraOrdre@ordre 004A         ??_Terminal_ReceiveChar 0049  
              __initialization 1520                   __end_of_main 184A             ?_MFRC522_AntennaOn 0048  
          ??_MFRC522_Clear_Bit 0059                 _setCurrentUser 178A                    ?_RSI_Timer0 0048  
               TI_Init@counter 0049               _initPortsTeclado 1AD6                    ?_TI_GetTics 0049  
                       ??_main 0066            ??_MFRC522_AntennaOn 005A                  __activetblptr 0002  
           MFRC522_Rd@ucResult 0051                         _ADCON1 0FC1                MFRC522_Wr@value 0053  
    __end_of_MFRC522_Clear_Bit 19F8                      ??_TI_Init 0049         ?_showAllConfigurations 0048  
       __end_of_saveHourToData 1880                      ??_CantaIR 004B         Terminal_SendString@str 004D  
                       i2l2093 19F8                         i2l2095 1A00                         i2l2097 1A02  
                       i2l2867 1A26                         i2l2869 1A34                  ??_WaitForBusy 005E  
                       _TMR0IF 7F92                      ??_HighRSI 0048      __end_of_MFRC522_AntennaOn 1AA2  
                       _LcInit 0E12               __end_of_delay_us 18EC                         _Espera 17D4  
                       _LowRSI 0018         __end_of_setCurrentUser 17D4                         _RowAct 001E  
                       _Timers 00D8             motor_datos@pointer 0016           __end_of_MFRC522_Init 173E  
             __end_of_initRFID 1AC4             motorTerminal@index 001A               __end_of_initLeds 1A96  
           motorTerminal@state 001B                         clear_0 1566                         clear_1 1572  
                 ?_motor_Write 004E                         isa$std 0001                   __pdataCOMRAM 0066  
             __end_of_showMenu 15E8                   __mediumconst 1EC4                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8          __end_of_Terminal_Init 1A88  
       motor_RFID@differentUID 0062                ?_saveHourToData 0049                     __accesstop 0080  
      __end_of__initialization 1578                delay_us@howMany 004C                  ___rparam_used 0001  
                 ??_MFRC522_Rd 004E                   ??_MFRC522_Wr 0054             _MFRC522_AntennaOff 1AA2  
                setLed@modeLED 0015                ?_setCurrentUser 0059                 __pcstackCOMRAM 0048  
          __end_of_WaitForBusy 1A78                   __pidataBANK0 1642            ?_MFRC522_AntennaOff 0048  
         TI_NewTimer@Comptador 004B               MFRC522_Rd@ucAddr 0050              printLedConfig@val 0052  
            ??_MFRC522_Set_Bit 0059             __end_of_MFRC522_Rd 12E2             __end_of_MFRC522_Wr 1240  
         ??_MFRC522_AntennaOff 005B                   ?_TI_NewTimer 0049                     __pbssBANK0 00D8  
        __end_of_motorTerminal 0CD8                        ?_LcInit 005E                  _CantaPartAlta 149C  
       TI_NewTimer@TimerHandle 0049                        ?_Espera 0056                        ?_LowRSI 0048  
                 _getActualUID 15E8               MFRC522_Wr@ucAddr 0056            _timer@TAD_LEDS$F989 0045  
      TI_ResetTics@TimerHandle 0049                        _BAUDCON 0FB8                        LcInit@i 0060  
                    ?_delay_us 0048              _Terminal_SendChar 19A4                        _TI_Init 18EC  
           ?_Terminal_SendChar 0048       __end_of_initPortsTeclado 1ADE                        _CantaIR 1920  
                    ?_initRFID 0048                      ?_initLeds 0048                        _HighRSI 0008  
                  _WaitForBusy 1A64                 ?_CantaPartAlta 0048                        _Columns 001F  
            motor_RFID@TagType 0026            ??_Terminal_SendChar 004C                        __Hparam 0000  
                      __Lparam 0000                      ?_showMenu 0048                   ??_RSI_Timer0 0048  
                 ??_TI_GetTics 004D              motor_RFID@allZero 0024                        __pcinit 1520  
        __end_of_MFRC522_Reset 1980                        __ramtop 0200              motor_RFID@_status 0027  
                      __ptext0 1812                        __ptext1 002A                        __ptext2 178A  
                      __ptext3 10E2                        __ptext4 0FFA                        __ptext5 0CD8  
                      __ptext6 0B5C                        __ptext7 1586                        __ptext8 12E2  
                      __ptext9 184A                      CantaIR@IR 004B              __end_of_initPorts 1AE6  
    __end_of_Terminal_SendChar 19C2              motor_RFID@waitIRq 002A       motorTerminal@currentUser 0059  
                   ??_delay_us 0049        ??_showAllConfigurations 004F                        _pointer 000B  
                 _MFRC522_Init 16F0                 __pintcode_body 1A26           end_of_initialization 1578  
                  motor_RFID@i 0028                    motor_RFID@n 0029                     ??_initRFID 005B  
           __end_of_RSI_Timer0 1A10                     ??_initLeds 004C                  __Lmediumconst 1EC4  
                      int_func 1A26             __end_of_TI_GetTics 178A             saveHourToData@hour 0049  
              motor_Write@addr 0050              __end_of_printfUID 0FFA                     ??_showMenu 004F  
                   _motor_RFID 002A                        postdec1 0FE5                     _motor_Read 0CD8  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
                GetTecla@F2752 1EC5         showAllConfigurations@i 0051         showAllConfigurations@j 004F  
                    _PORTCbits 0F82            _Terminal_SendString 1880          TI_GetTics@TimerHandle 0055  
             ??_saveHourToData 004A                      _TRISBbits 0F93                      _TRISCbits 0F94  
                    _TRISEbits 0F96                     _state_read 0035                 setLed@ledIndex 0014  
              ??_CantaPartAlta 0049               ??_setCurrentUser 005D           ?_Terminal_SendString 004D  
               __end_of_LcInit 0F0A              MFRC522_Rd@Address 004F                 __end_of_Espera 1812  
               __end_of_LowRSI 0026   __end_of_Terminal_RXAvailable 1A50                _MFRC522_Set_Bit 1A50  
   __end_of_EscriuPrimeraOrdre 1418                  __pidataCOMRAM 1ACE      motor_Read@timeout_counter 0011  
               motor_RFID@flag 0065                      _ColumnAct 001D               _resetMotorStates 1AC4  
          start_initialization 1520             motor_Read@ucResult 002E   __end_of_Terminal_TXAvailable 19DE  
        ??_Terminal_SendString 004F                       ??_LcInit 005F             printLedConfig@leds 004F  
                     ??_Espera 005A                       ??_LowRSI 0048                    ?_motor_RFID 0048  
            motorTerminal@hour 006A                    ?_motor_Read 0048                  ??_initTeclado 004C  
                  __pdataBANK0 0080                    __pbssCOMRAM 0001              MFRC522_Wr@Address 0055  
                ?_TI_ResetTics 0048               motor_Read@ucAddr 002F                       ?_TI_Init 0048  
                     ?_CantaIR 0048              ?_initPortsTeclado 0048                 _CantaPartBaixa 1418  
                     ?_HighRSI 0048                   ?_WaitForBusy 0048             ??_initPortsTeclado 0049  
               motor_Read@addr 004F        __end_of_MFRC522_Set_Bit 1A64            motor_RFID@fifoLevel 0021  
          MFRC522_Set_Bit@addr 0059            MFRC522_Set_Bit@mask 0058                      __pintcode 0008  
                __pmediumconst 1EC4     __end_of_InitPortDirections 1ABA                CantaPartBaixa@c 004A  
                  __pintcodelo 0018             motor_Write@ucValue 0031                    __smallconst 1EC4  
          __end_of_initTeclado 1A26                 ??_TI_ResetTics 0049                      _initPorts 1ADE  
__end_of_showAllConfigurations 1382         __end_of_CantaPartBaixa 149C                  _Terminal_Init 1A78  
         _Terminal_RXAvailable 1A3C                       _LATAbits 0F89                       _LATBbits 0F8A  
                     _LATCbits 0F8B                       _LATEbits 0F8D                      delay_us@x 004D  
         motor_Write@bit_count 0033                _hashtag_pressed 001C                       _PIR1bits 0F9E  
                     i2u199_40 1A34                       i2u199_41 1A30          motor_RFID@lastBitsVal 0022  
                    _printfUID 0F0A                  ??_motor_Write 004F           _Terminal_TXAvailable 19C2  
               _printLedConfig 10E2                     printfUID@i 0057         motor_RFID@tempRegValue 0023  
                     Espera@ms 0058   __end_of_Terminal_ReceiveChar 1AEA                     ?_initPorts 0048  
                motor_RFID@UID 0001                 ?_Terminal_Init 0048                      copy_data0 1534  
                    copy_data1 1554                ?_CantaPartBaixa 0048                       _Columnas 0038  
        ?_Terminal_RXAvailable 0048          motor_RFID@currentUser 0060                  _motorTerminal 0B5C  
     __end_of_resetMotorStates 1ACE               ?_MFRC522_Set_Bit 0058                       __Hrparam 0000  
        MFRC522_Clear_Bit@addr 005A          MFRC522_Clear_Bit@mask 0058                       __Lrparam 0000  
       __end_of_printLedConfig 1198                     ?_printfUID 004F                    _initTeclado 1A10  
        ?_Terminal_TXAvailable 0049             motor_RFID@checksum 0025                    _currentTime 0066  
                  _currentUser 0040            __end_of_motor_Write 10E2                       _delay_us 18B6  
                     __ptext10 0F0A                       __ptext11 1880             _EscriuPrimeraOrdre 1382  
                     __ptext20 16F0                       __ptext12 19A4                       __ptext21 1952  
                     __ptext13 19C2                       __ptext30 1AAE                       __ptext22 1AC4  
                     __ptext14 15E8                       __ptext31 1ADE                       __ptext23 1A96  
                     __ptext15 1AE6                       __ptext40 169A                       __ptext32 1A88  
                     __ptext24 1A50                       __ptext16 1A3C                       __ptext41 1382  
                     __ptext33 1A78                       __ptext25 1AA2                       __ptext17 1A10  
                     __ptext42 1920                       __ptext34 18EC                       __ptext26 19DE  
                     __ptext18 1AD6                       __ptext43 1418                       __ptext35 0E12  
                     __ptext27 1198                       __ptext19 1ABA                       __ptext44 149C  
                     __ptext36 1A64                       __ptext28 1240                       __ptext37 17D4  
                     __ptext29 18B6                       __ptext38 1980                       __ptext47 19F8  
                     __ptext39 173E                  ??_TI_NewTimer 004A                 CantaPartAlta@c 004A  
            motor_Write@ucAddr 0032                       _initRFID 1ABA                       _initLeds 1A88  
          ?_EscriuPrimeraOrdre 0048                 ?_motorTerminal 0048          __end_of_CantaPartAlta 1520  
                     _new_user 0018                     _MFRC522_Rd 1240                     _MFRC522_Wr 1198  
                ?_getActualUID 0049                   ??_motor_RFID 005E                       isa$xinst 0000  
                     _showMenu 1586                   ??_motor_Read 004E           __end_of_TI_ResetTics 19A4  
                     int$flags 006E             motor_RFID@substate 002C                ?_printLedConfig 004F  
                     _userUIDs 0080                  _printfUID$857 0051                  _printfUID$859 0053  
         ??_EscriuPrimeraOrdre 0049                     LcInit@rows 005F                  _MFRC522_Reset 1952  
                   _INTCONbits 0FF2                ??_Terminal_Init 0049      TI_GetTics@CopiaTicsActual 0051  
            _new_configuration 0019                    ??_initPorts 0049         ??_Terminal_RXAvailable 0049  
               _configurations 00C0    __end_of_Terminal_SendString 18B6             __end_of_motor_RFID 0B5C  
                     intlevel1 0000                       intlevel2 0000             __end_of_motor_Read 0E12  
             motor_Write@value 004E            __end_of_TI_NewTimer 16F0                 ??_getActualUID 004B  
       ??_Terminal_TXAvailable 004B           _Terminal_ReceiveChar 1AE6                    ??_printfUID 0050  
               ?_MFRC522_Reset 0048                    _motor_Write 0FFA         motor_RFID@backBitsCalc 0061  
           _printLedConfig$867 0050             _InitPortDirections 1AAE     __end_of_MFRC522_AntennaOff 1AAE  
                ?_MFRC522_Init 0048                ??_motorTerminal 0059            ?_InitPortDirections 0048  
         printfUID@currentUser 004F                    ?_MFRC522_Rd 0048                    ?_MFRC522_Wr 0053  

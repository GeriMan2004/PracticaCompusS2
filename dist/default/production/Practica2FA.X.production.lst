

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 20 18:03:13 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    72                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74   000000                     
    75                           ; Generated 05/12/2024 GMT
    76                           ; 
    77                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4321 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000FE0                     bsr             equ	4064
   110   000FE9                     fsr0            equ	4073
   111   000FEA                     fsr0h           equ	4074
   112   000FE9                     fsr0l           equ	4073
   113   000FE1                     fsr1            equ	4065
   114   000FE2                     fsr1h           equ	4066
   115   000FE1                     fsr1l           equ	4065
   116   000FD9                     fsr2            equ	4057
   117   000FDA                     fsr2h           equ	4058
   118   000FD9                     fsr2l           equ	4057
   119   000FEF                     indf0           equ	4079
   120   000FE7                     indf1           equ	4071
   121   000FDF                     indf2           equ	4063
   122   000FF2                     intcon          equ	4082
   123   000000                     nvmcon          equ	0
   124   000FF9                     pcl             equ	4089
   125   000FFA                     pclath          equ	4090
   126   000FFB                     pclatu          equ	4091
   127   000FEB                     plusw0          equ	4075
   128   000FE3                     plusw1          equ	4067
   129   000FDB                     plusw2          equ	4059
   130   000FED                     postdec0        equ	4077
   131   000FE5                     postdec1        equ	4069
   132   000FDD                     postdec2        equ	4061
   133   000FEE                     postinc0        equ	4078
   134   000FE6                     postinc1        equ	4070
   135   000FDE                     postinc2        equ	4062
   136   000FEC                     preinc0         equ	4076
   137   000FE4                     preinc1         equ	4068
   138   000FDC                     preinc2         equ	4060
   139   000FF3                     prod            equ	4083
   140   000FF4                     prodh           equ	4084
   141   000FF3                     prodl           equ	4083
   142   000FD8                     status          equ	4056
   143   000FF5                     tablat          equ	4085
   144   000FF6                     tblptr          equ	4086
   145   000FF7                     tblptrh         equ	4087
   146   000FF6                     tblptrl         equ	4086
   147   000FF8                     tblptru         equ	4088
   148   000FFD                     tosl            equ	4093
   149   000FE8                     wreg            equ	4072
   150   000F80                     PORTA           equ	3968	;# 
   151   000F81                     PORTB           equ	3969	;# 
   152   000F82                     PORTC           equ	3970	;# 
   153   000F83                     PORTD           equ	3971	;# 
   154   000F84                     PORTE           equ	3972	;# 
   155   000F89                     LATA            equ	3977	;# 
   156   000F8A                     LATB            equ	3978	;# 
   157   000F8B                     LATC            equ	3979	;# 
   158   000F8C                     LATD            equ	3980	;# 
   159   000F8D                     LATE            equ	3981	;# 
   160   000F92                     TRISA           equ	3986	;# 
   161   000F92                     DDRA            equ	3986	;# 
   162   000F93                     TRISB           equ	3987	;# 
   163   000F93                     DDRB            equ	3987	;# 
   164   000F94                     TRISC           equ	3988	;# 
   165   000F94                     DDRC            equ	3988	;# 
   166   000F95                     TRISD           equ	3989	;# 
   167   000F95                     DDRD            equ	3989	;# 
   168   000F96                     TRISE           equ	3990	;# 
   169   000F96                     DDRE            equ	3990	;# 
   170   000F9B                     OSCTUNE         equ	3995	;# 
   171   000F9D                     PIE1            equ	3997	;# 
   172   000F9E                     PIR1            equ	3998	;# 
   173   000F9F                     IPR1            equ	3999	;# 
   174   000FA0                     PIE2            equ	4000	;# 
   175   000FA1                     PIR2            equ	4001	;# 
   176   000FA2                     IPR2            equ	4002	;# 
   177   000FA6                     EECON1          equ	4006	;# 
   178   000FA7                     EECON2          equ	4007	;# 
   179   000FA8                     EEDATA          equ	4008	;# 
   180   000FA9                     EEADR           equ	4009	;# 
   181   000FAB                     RCSTA           equ	4011	;# 
   182   000FAB                     RCSTA1          equ	4011	;# 
   183   000FAC                     TXSTA           equ	4012	;# 
   184   000FAC                     TXSTA1          equ	4012	;# 
   185   000FAD                     TXREG           equ	4013	;# 
   186   000FAD                     TXREG1          equ	4013	;# 
   187   000FAE                     RCREG           equ	4014	;# 
   188   000FAE                     RCREG1          equ	4014	;# 
   189   000FAF                     SPBRG           equ	4015	;# 
   190   000FAF                     SPBRG1          equ	4015	;# 
   191   000FB0                     SPBRGH          equ	4016	;# 
   192   000FB1                     T3CON           equ	4017	;# 
   193   000FB2                     TMR3            equ	4018	;# 
   194   000FB2                     TMR3L           equ	4018	;# 
   195   000FB3                     TMR3H           equ	4019	;# 
   196   000FB4                     CMCON           equ	4020	;# 
   197   000FB5                     CVRCON          equ	4021	;# 
   198   000FB6                     ECCP1AS         equ	4022	;# 
   199   000FB7                     ECCP1DEL        equ	4023	;# 
   200   000FB7                     PWM1CON         equ	4023	;# 
   201   000FB8                     BAUDCON         equ	4024	;# 
   202   000FB8                     BAUDCTL         equ	4024	;# 
   203   000FBA                     CCP2CON         equ	4026	;# 
   204   000FBB                     CCPR2           equ	4027	;# 
   205   000FBB                     CCPR2L          equ	4027	;# 
   206   000FBC                     CCPR2H          equ	4028	;# 
   207   000FBD                     CCP1CON         equ	4029	;# 
   208   000FBD                     ECCP1CON        equ	4029	;# 
   209   000FBE                     CCPR1           equ	4030	;# 
   210   000FBE                     CCPR1L          equ	4030	;# 
   211   000FBF                     CCPR1H          equ	4031	;# 
   212   000FC0                     ADCON2          equ	4032	;# 
   213   000FC1                     ADCON1          equ	4033	;# 
   214   000FC2                     ADCON0          equ	4034	;# 
   215   000FC3                     ADRES           equ	4035	;# 
   216   000FC3                     ADRESL          equ	4035	;# 
   217   000FC4                     ADRESH          equ	4036	;# 
   218   000FC5                     SSPCON2         equ	4037	;# 
   219   000FC6                     SSPCON1         equ	4038	;# 
   220   000FC7                     SSPSTAT         equ	4039	;# 
   221   000FC8                     SSPADD          equ	4040	;# 
   222   000FC9                     SSPBUF          equ	4041	;# 
   223   000FCA                     T2CON           equ	4042	;# 
   224   000FCB                     PR2             equ	4043	;# 
   225   000FCB                     MEMCON          equ	4043	;# 
   226   000FCC                     TMR2            equ	4044	;# 
   227   000FCD                     T1CON           equ	4045	;# 
   228   000FCE                     TMR1            equ	4046	;# 
   229   000FCE                     TMR1L           equ	4046	;# 
   230   000FCF                     TMR1H           equ	4047	;# 
   231   000FD0                     RCON            equ	4048	;# 
   232   000FD1                     WDTCON          equ	4049	;# 
   233   000FD2                     HLVDCON         equ	4050	;# 
   234   000FD2                     LVDCON          equ	4050	;# 
   235   000FD3                     OSCCON          equ	4051	;# 
   236   000FD5                     T0CON           equ	4053	;# 
   237   000FD6                     TMR0            equ	4054	;# 
   238   000FD6                     TMR0L           equ	4054	;# 
   239   000FD7                     TMR0H           equ	4055	;# 
   240   000FD8                     STATUS          equ	4056	;# 
   241   000FD9                     FSR2            equ	4057	;# 
   242   000FD9                     FSR2L           equ	4057	;# 
   243   000FDA                     FSR2H           equ	4058	;# 
   244   000FDB                     PLUSW2          equ	4059	;# 
   245   000FDC                     PREINC2         equ	4060	;# 
   246   000FDD                     POSTDEC2        equ	4061	;# 
   247   000FDE                     POSTINC2        equ	4062	;# 
   248   000FDF                     INDF2           equ	4063	;# 
   249   000FE0                     BSR             equ	4064	;# 
   250   000FE1                     FSR1            equ	4065	;# 
   251   000FE1                     FSR1L           equ	4065	;# 
   252   000FE2                     FSR1H           equ	4066	;# 
   253   000FE3                     PLUSW1          equ	4067	;# 
   254   000FE4                     PREINC1         equ	4068	;# 
   255   000FE5                     POSTDEC1        equ	4069	;# 
   256   000FE6                     POSTINC1        equ	4070	;# 
   257   000FE7                     INDF1           equ	4071	;# 
   258   000FE8                     WREG            equ	4072	;# 
   259   000FE9                     FSR0            equ	4073	;# 
   260   000FE9                     FSR0L           equ	4073	;# 
   261   000FEA                     FSR0H           equ	4074	;# 
   262   000FEB                     PLUSW0          equ	4075	;# 
   263   000FEC                     PREINC0         equ	4076	;# 
   264   000FED                     POSTDEC0        equ	4077	;# 
   265   000FEE                     POSTINC0        equ	4078	;# 
   266   000FEF                     INDF0           equ	4079	;# 
   267   000FF0                     INTCON3         equ	4080	;# 
   268   000FF1                     INTCON2         equ	4081	;# 
   269   000FF2                     INTCON          equ	4082	;# 
   270   000FF3                     PROD            equ	4083	;# 
   271   000FF3                     PRODL           equ	4083	;# 
   272   000FF4                     PRODH           equ	4084	;# 
   273   000FF5                     TABLAT          equ	4085	;# 
   274   000FF6                     TBLPTR          equ	4086	;# 
   275   000FF6                     TBLPTRL         equ	4086	;# 
   276   000FF7                     TBLPTRH         equ	4087	;# 
   277   000FF8                     TBLPTRU         equ	4088	;# 
   278   000FF9                     PCLAT           equ	4089	;# 
   279   000FF9                     PC              equ	4089	;# 
   280   000FF9                     PCL             equ	4089	;# 
   281   000FFA                     PCLATH          equ	4090	;# 
   282   000FFB                     PCLATU          equ	4091	;# 
   283   000FFC                     STKPTR          equ	4092	;# 
   284   000FFD                     TOS             equ	4093	;# 
   285   000FFD                     TOSL            equ	4093	;# 
   286   000FFE                     TOSH            equ	4094	;# 
   287   000FFF                     TOSU            equ	4095	;# 
   288   000F80                     PORTA           equ	3968	;# 
   289   000F81                     PORTB           equ	3969	;# 
   290   000F82                     PORTC           equ	3970	;# 
   291   000F83                     PORTD           equ	3971	;# 
   292   000F84                     PORTE           equ	3972	;# 
   293   000F89                     LATA            equ	3977	;# 
   294   000F8A                     LATB            equ	3978	;# 
   295   000F8B                     LATC            equ	3979	;# 
   296   000F8C                     LATD            equ	3980	;# 
   297   000F8D                     LATE            equ	3981	;# 
   298   000F92                     TRISA           equ	3986	;# 
   299   000F92                     DDRA            equ	3986	;# 
   300   000F93                     TRISB           equ	3987	;# 
   301   000F93                     DDRB            equ	3987	;# 
   302   000F94                     TRISC           equ	3988	;# 
   303   000F94                     DDRC            equ	3988	;# 
   304   000F95                     TRISD           equ	3989	;# 
   305   000F95                     DDRD            equ	3989	;# 
   306   000F96                     TRISE           equ	3990	;# 
   307   000F96                     DDRE            equ	3990	;# 
   308   000F9B                     OSCTUNE         equ	3995	;# 
   309   000F9D                     PIE1            equ	3997	;# 
   310   000F9E                     PIR1            equ	3998	;# 
   311   000F9F                     IPR1            equ	3999	;# 
   312   000FA0                     PIE2            equ	4000	;# 
   313   000FA1                     PIR2            equ	4001	;# 
   314   000FA2                     IPR2            equ	4002	;# 
   315   000FA6                     EECON1          equ	4006	;# 
   316   000FA7                     EECON2          equ	4007	;# 
   317   000FA8                     EEDATA          equ	4008	;# 
   318   000FA9                     EEADR           equ	4009	;# 
   319   000FAB                     RCSTA           equ	4011	;# 
   320   000FAB                     RCSTA1          equ	4011	;# 
   321   000FAC                     TXSTA           equ	4012	;# 
   322   000FAC                     TXSTA1          equ	4012	;# 
   323   000FAD                     TXREG           equ	4013	;# 
   324   000FAD                     TXREG1          equ	4013	;# 
   325   000FAE                     RCREG           equ	4014	;# 
   326   000FAE                     RCREG1          equ	4014	;# 
   327   000FAF                     SPBRG           equ	4015	;# 
   328   000FAF                     SPBRG1          equ	4015	;# 
   329   000FB0                     SPBRGH          equ	4016	;# 
   330   000FB1                     T3CON           equ	4017	;# 
   331   000FB2                     TMR3            equ	4018	;# 
   332   000FB2                     TMR3L           equ	4018	;# 
   333   000FB3                     TMR3H           equ	4019	;# 
   334   000FB4                     CMCON           equ	4020	;# 
   335   000FB5                     CVRCON          equ	4021	;# 
   336   000FB6                     ECCP1AS         equ	4022	;# 
   337   000FB7                     ECCP1DEL        equ	4023	;# 
   338   000FB7                     PWM1CON         equ	4023	;# 
   339   000FB8                     BAUDCON         equ	4024	;# 
   340   000FB8                     BAUDCTL         equ	4024	;# 
   341   000FBA                     CCP2CON         equ	4026	;# 
   342   000FBB                     CCPR2           equ	4027	;# 
   343   000FBB                     CCPR2L          equ	4027	;# 
   344   000FBC                     CCPR2H          equ	4028	;# 
   345   000FBD                     CCP1CON         equ	4029	;# 
   346   000FBD                     ECCP1CON        equ	4029	;# 
   347   000FBE                     CCPR1           equ	4030	;# 
   348   000FBE                     CCPR1L          equ	4030	;# 
   349   000FBF                     CCPR1H          equ	4031	;# 
   350   000FC0                     ADCON2          equ	4032	;# 
   351   000FC1                     ADCON1          equ	4033	;# 
   352   000FC2                     ADCON0          equ	4034	;# 
   353   000FC3                     ADRES           equ	4035	;# 
   354   000FC3                     ADRESL          equ	4035	;# 
   355   000FC4                     ADRESH          equ	4036	;# 
   356   000FC5                     SSPCON2         equ	4037	;# 
   357   000FC6                     SSPCON1         equ	4038	;# 
   358   000FC7                     SSPSTAT         equ	4039	;# 
   359   000FC8                     SSPADD          equ	4040	;# 
   360   000FC9                     SSPBUF          equ	4041	;# 
   361   000FCA                     T2CON           equ	4042	;# 
   362   000FCB                     PR2             equ	4043	;# 
   363   000FCB                     MEMCON          equ	4043	;# 
   364   000FCC                     TMR2            equ	4044	;# 
   365   000FCD                     T1CON           equ	4045	;# 
   366   000FCE                     TMR1            equ	4046	;# 
   367   000FCE                     TMR1L           equ	4046	;# 
   368   000FCF                     TMR1H           equ	4047	;# 
   369   000FD0                     RCON            equ	4048	;# 
   370   000FD1                     WDTCON          equ	4049	;# 
   371   000FD2                     HLVDCON         equ	4050	;# 
   372   000FD2                     LVDCON          equ	4050	;# 
   373   000FD3                     OSCCON          equ	4051	;# 
   374   000FD5                     T0CON           equ	4053	;# 
   375   000FD6                     TMR0            equ	4054	;# 
   376   000FD6                     TMR0L           equ	4054	;# 
   377   000FD7                     TMR0H           equ	4055	;# 
   378   000FD8                     STATUS          equ	4056	;# 
   379   000FD9                     FSR2            equ	4057	;# 
   380   000FD9                     FSR2L           equ	4057	;# 
   381   000FDA                     FSR2H           equ	4058	;# 
   382   000FDB                     PLUSW2          equ	4059	;# 
   383   000FDC                     PREINC2         equ	4060	;# 
   384   000FDD                     POSTDEC2        equ	4061	;# 
   385   000FDE                     POSTINC2        equ	4062	;# 
   386   000FDF                     INDF2           equ	4063	;# 
   387   000FE0                     BSR             equ	4064	;# 
   388   000FE1                     FSR1            equ	4065	;# 
   389   000FE1                     FSR1L           equ	4065	;# 
   390   000FE2                     FSR1H           equ	4066	;# 
   391   000FE3                     PLUSW1          equ	4067	;# 
   392   000FE4                     PREINC1         equ	4068	;# 
   393   000FE5                     POSTDEC1        equ	4069	;# 
   394   000FE6                     POSTINC1        equ	4070	;# 
   395   000FE7                     INDF1           equ	4071	;# 
   396   000FE8                     WREG            equ	4072	;# 
   397   000FE9                     FSR0            equ	4073	;# 
   398   000FE9                     FSR0L           equ	4073	;# 
   399   000FEA                     FSR0H           equ	4074	;# 
   400   000FEB                     PLUSW0          equ	4075	;# 
   401   000FEC                     PREINC0         equ	4076	;# 
   402   000FED                     POSTDEC0        equ	4077	;# 
   403   000FEE                     POSTINC0        equ	4078	;# 
   404   000FEF                     INDF0           equ	4079	;# 
   405   000FF0                     INTCON3         equ	4080	;# 
   406   000FF1                     INTCON2         equ	4081	;# 
   407   000FF2                     INTCON          equ	4082	;# 
   408   000FF3                     PROD            equ	4083	;# 
   409   000FF3                     PRODL           equ	4083	;# 
   410   000FF4                     PRODH           equ	4084	;# 
   411   000FF5                     TABLAT          equ	4085	;# 
   412   000FF6                     TBLPTR          equ	4086	;# 
   413   000FF6                     TBLPTRL         equ	4086	;# 
   414   000FF7                     TBLPTRH         equ	4087	;# 
   415   000FF8                     TBLPTRU         equ	4088	;# 
   416   000FF9                     PCLAT           equ	4089	;# 
   417   000FF9                     PC              equ	4089	;# 
   418   000FF9                     PCL             equ	4089	;# 
   419   000FFA                     PCLATH          equ	4090	;# 
   420   000FFB                     PCLATU          equ	4091	;# 
   421   000FFC                     STKPTR          equ	4092	;# 
   422   000FFD                     TOS             equ	4093	;# 
   423   000FFD                     TOSL            equ	4093	;# 
   424   000FFE                     TOSH            equ	4094	;# 
   425   000FFF                     TOSU            equ	4095	;# 
   426   000F80                     PORTA           equ	3968	;# 
   427   000F81                     PORTB           equ	3969	;# 
   428   000F82                     PORTC           equ	3970	;# 
   429   000F83                     PORTD           equ	3971	;# 
   430   000F84                     PORTE           equ	3972	;# 
   431   000F89                     LATA            equ	3977	;# 
   432   000F8A                     LATB            equ	3978	;# 
   433   000F8B                     LATC            equ	3979	;# 
   434   000F8C                     LATD            equ	3980	;# 
   435   000F8D                     LATE            equ	3981	;# 
   436   000F92                     TRISA           equ	3986	;# 
   437   000F92                     DDRA            equ	3986	;# 
   438   000F93                     TRISB           equ	3987	;# 
   439   000F93                     DDRB            equ	3987	;# 
   440   000F94                     TRISC           equ	3988	;# 
   441   000F94                     DDRC            equ	3988	;# 
   442   000F95                     TRISD           equ	3989	;# 
   443   000F95                     DDRD            equ	3989	;# 
   444   000F96                     TRISE           equ	3990	;# 
   445   000F96                     DDRE            equ	3990	;# 
   446   000F9B                     OSCTUNE         equ	3995	;# 
   447   000F9D                     PIE1            equ	3997	;# 
   448   000F9E                     PIR1            equ	3998	;# 
   449   000F9F                     IPR1            equ	3999	;# 
   450   000FA0                     PIE2            equ	4000	;# 
   451   000FA1                     PIR2            equ	4001	;# 
   452   000FA2                     IPR2            equ	4002	;# 
   453   000FA6                     EECON1          equ	4006	;# 
   454   000FA7                     EECON2          equ	4007	;# 
   455   000FA8                     EEDATA          equ	4008	;# 
   456   000FA9                     EEADR           equ	4009	;# 
   457   000FAB                     RCSTA           equ	4011	;# 
   458   000FAB                     RCSTA1          equ	4011	;# 
   459   000FAC                     TXSTA           equ	4012	;# 
   460   000FAC                     TXSTA1          equ	4012	;# 
   461   000FAD                     TXREG           equ	4013	;# 
   462   000FAD                     TXREG1          equ	4013	;# 
   463   000FAE                     RCREG           equ	4014	;# 
   464   000FAE                     RCREG1          equ	4014	;# 
   465   000FAF                     SPBRG           equ	4015	;# 
   466   000FAF                     SPBRG1          equ	4015	;# 
   467   000FB0                     SPBRGH          equ	4016	;# 
   468   000FB1                     T3CON           equ	4017	;# 
   469   000FB2                     TMR3            equ	4018	;# 
   470   000FB2                     TMR3L           equ	4018	;# 
   471   000FB3                     TMR3H           equ	4019	;# 
   472   000FB4                     CMCON           equ	4020	;# 
   473   000FB5                     CVRCON          equ	4021	;# 
   474   000FB6                     ECCP1AS         equ	4022	;# 
   475   000FB7                     ECCP1DEL        equ	4023	;# 
   476   000FB7                     PWM1CON         equ	4023	;# 
   477   000FB8                     BAUDCON         equ	4024	;# 
   478   000FB8                     BAUDCTL         equ	4024	;# 
   479   000FBA                     CCP2CON         equ	4026	;# 
   480   000FBB                     CCPR2           equ	4027	;# 
   481   000FBB                     CCPR2L          equ	4027	;# 
   482   000FBC                     CCPR2H          equ	4028	;# 
   483   000FBD                     CCP1CON         equ	4029	;# 
   484   000FBD                     ECCP1CON        equ	4029	;# 
   485   000FBE                     CCPR1           equ	4030	;# 
   486   000FBE                     CCPR1L          equ	4030	;# 
   487   000FBF                     CCPR1H          equ	4031	;# 
   488   000FC0                     ADCON2          equ	4032	;# 
   489   000FC1                     ADCON1          equ	4033	;# 
   490   000FC2                     ADCON0          equ	4034	;# 
   491   000FC3                     ADRES           equ	4035	;# 
   492   000FC3                     ADRESL          equ	4035	;# 
   493   000FC4                     ADRESH          equ	4036	;# 
   494   000FC5                     SSPCON2         equ	4037	;# 
   495   000FC6                     SSPCON1         equ	4038	;# 
   496   000FC7                     SSPSTAT         equ	4039	;# 
   497   000FC8                     SSPADD          equ	4040	;# 
   498   000FC9                     SSPBUF          equ	4041	;# 
   499   000FCA                     T2CON           equ	4042	;# 
   500   000FCB                     PR2             equ	4043	;# 
   501   000FCB                     MEMCON          equ	4043	;# 
   502   000FCC                     TMR2            equ	4044	;# 
   503   000FCD                     T1CON           equ	4045	;# 
   504   000FCE                     TMR1            equ	4046	;# 
   505   000FCE                     TMR1L           equ	4046	;# 
   506   000FCF                     TMR1H           equ	4047	;# 
   507   000FD0                     RCON            equ	4048	;# 
   508   000FD1                     WDTCON          equ	4049	;# 
   509   000FD2                     HLVDCON         equ	4050	;# 
   510   000FD2                     LVDCON          equ	4050	;# 
   511   000FD3                     OSCCON          equ	4051	;# 
   512   000FD5                     T0CON           equ	4053	;# 
   513   000FD6                     TMR0            equ	4054	;# 
   514   000FD6                     TMR0L           equ	4054	;# 
   515   000FD7                     TMR0H           equ	4055	;# 
   516   000FD8                     STATUS          equ	4056	;# 
   517   000FD9                     FSR2            equ	4057	;# 
   518   000FD9                     FSR2L           equ	4057	;# 
   519   000FDA                     FSR2H           equ	4058	;# 
   520   000FDB                     PLUSW2          equ	4059	;# 
   521   000FDC                     PREINC2         equ	4060	;# 
   522   000FDD                     POSTDEC2        equ	4061	;# 
   523   000FDE                     POSTINC2        equ	4062	;# 
   524   000FDF                     INDF2           equ	4063	;# 
   525   000FE0                     BSR             equ	4064	;# 
   526   000FE1                     FSR1            equ	4065	;# 
   527   000FE1                     FSR1L           equ	4065	;# 
   528   000FE2                     FSR1H           equ	4066	;# 
   529   000FE3                     PLUSW1          equ	4067	;# 
   530   000FE4                     PREINC1         equ	4068	;# 
   531   000FE5                     POSTDEC1        equ	4069	;# 
   532   000FE6                     POSTINC1        equ	4070	;# 
   533   000FE7                     INDF1           equ	4071	;# 
   534   000FE8                     WREG            equ	4072	;# 
   535   000FE9                     FSR0            equ	4073	;# 
   536   000FE9                     FSR0L           equ	4073	;# 
   537   000FEA                     FSR0H           equ	4074	;# 
   538   000FEB                     PLUSW0          equ	4075	;# 
   539   000FEC                     PREINC0         equ	4076	;# 
   540   000FED                     POSTDEC0        equ	4077	;# 
   541   000FEE                     POSTINC0        equ	4078	;# 
   542   000FEF                     INDF0           equ	4079	;# 
   543   000FF0                     INTCON3         equ	4080	;# 
   544   000FF1                     INTCON2         equ	4081	;# 
   545   000FF2                     INTCON          equ	4082	;# 
   546   000FF3                     PROD            equ	4083	;# 
   547   000FF3                     PRODL           equ	4083	;# 
   548   000FF4                     PRODH           equ	4084	;# 
   549   000FF5                     TABLAT          equ	4085	;# 
   550   000FF6                     TBLPTR          equ	4086	;# 
   551   000FF6                     TBLPTRL         equ	4086	;# 
   552   000FF7                     TBLPTRH         equ	4087	;# 
   553   000FF8                     TBLPTRU         equ	4088	;# 
   554   000FF9                     PCLAT           equ	4089	;# 
   555   000FF9                     PC              equ	4089	;# 
   556   000FF9                     PCL             equ	4089	;# 
   557   000FFA                     PCLATH          equ	4090	;# 
   558   000FFB                     PCLATU          equ	4091	;# 
   559   000FFC                     STKPTR          equ	4092	;# 
   560   000FFD                     TOS             equ	4093	;# 
   561   000FFD                     TOSL            equ	4093	;# 
   562   000FFE                     TOSH            equ	4094	;# 
   563   000FFF                     TOSU            equ	4095	;# 
   564   000F80                     PORTA           equ	3968	;# 
   565   000F81                     PORTB           equ	3969	;# 
   566   000F82                     PORTC           equ	3970	;# 
   567   000F83                     PORTD           equ	3971	;# 
   568   000F84                     PORTE           equ	3972	;# 
   569   000F89                     LATA            equ	3977	;# 
   570   000F8A                     LATB            equ	3978	;# 
   571   000F8B                     LATC            equ	3979	;# 
   572   000F8C                     LATD            equ	3980	;# 
   573   000F8D                     LATE            equ	3981	;# 
   574   000F92                     TRISA           equ	3986	;# 
   575   000F92                     DDRA            equ	3986	;# 
   576   000F93                     TRISB           equ	3987	;# 
   577   000F93                     DDRB            equ	3987	;# 
   578   000F94                     TRISC           equ	3988	;# 
   579   000F94                     DDRC            equ	3988	;# 
   580   000F95                     TRISD           equ	3989	;# 
   581   000F95                     DDRD            equ	3989	;# 
   582   000F96                     TRISE           equ	3990	;# 
   583   000F96                     DDRE            equ	3990	;# 
   584   000F9B                     OSCTUNE         equ	3995	;# 
   585   000F9D                     PIE1            equ	3997	;# 
   586   000F9E                     PIR1            equ	3998	;# 
   587   000F9F                     IPR1            equ	3999	;# 
   588   000FA0                     PIE2            equ	4000	;# 
   589   000FA1                     PIR2            equ	4001	;# 
   590   000FA2                     IPR2            equ	4002	;# 
   591   000FA6                     EECON1          equ	4006	;# 
   592   000FA7                     EECON2          equ	4007	;# 
   593   000FA8                     EEDATA          equ	4008	;# 
   594   000FA9                     EEADR           equ	4009	;# 
   595   000FAB                     RCSTA           equ	4011	;# 
   596   000FAB                     RCSTA1          equ	4011	;# 
   597   000FAC                     TXSTA           equ	4012	;# 
   598   000FAC                     TXSTA1          equ	4012	;# 
   599   000FAD                     TXREG           equ	4013	;# 
   600   000FAD                     TXREG1          equ	4013	;# 
   601   000FAE                     RCREG           equ	4014	;# 
   602   000FAE                     RCREG1          equ	4014	;# 
   603   000FAF                     SPBRG           equ	4015	;# 
   604   000FAF                     SPBRG1          equ	4015	;# 
   605   000FB0                     SPBRGH          equ	4016	;# 
   606   000FB1                     T3CON           equ	4017	;# 
   607   000FB2                     TMR3            equ	4018	;# 
   608   000FB2                     TMR3L           equ	4018	;# 
   609   000FB3                     TMR3H           equ	4019	;# 
   610   000FB4                     CMCON           equ	4020	;# 
   611   000FB5                     CVRCON          equ	4021	;# 
   612   000FB6                     ECCP1AS         equ	4022	;# 
   613   000FB7                     ECCP1DEL        equ	4023	;# 
   614   000FB7                     PWM1CON         equ	4023	;# 
   615   000FB8                     BAUDCON         equ	4024	;# 
   616   000FB8                     BAUDCTL         equ	4024	;# 
   617   000FBA                     CCP2CON         equ	4026	;# 
   618   000FBB                     CCPR2           equ	4027	;# 
   619   000FBB                     CCPR2L          equ	4027	;# 
   620   000FBC                     CCPR2H          equ	4028	;# 
   621   000FBD                     CCP1CON         equ	4029	;# 
   622   000FBD                     ECCP1CON        equ	4029	;# 
   623   000FBE                     CCPR1           equ	4030	;# 
   624   000FBE                     CCPR1L          equ	4030	;# 
   625   000FBF                     CCPR1H          equ	4031	;# 
   626   000FC0                     ADCON2          equ	4032	;# 
   627   000FC1                     ADCON1          equ	4033	;# 
   628   000FC2                     ADCON0          equ	4034	;# 
   629   000FC3                     ADRES           equ	4035	;# 
   630   000FC3                     ADRESL          equ	4035	;# 
   631   000FC4                     ADRESH          equ	4036	;# 
   632   000FC5                     SSPCON2         equ	4037	;# 
   633   000FC6                     SSPCON1         equ	4038	;# 
   634   000FC7                     SSPSTAT         equ	4039	;# 
   635   000FC8                     SSPADD          equ	4040	;# 
   636   000FC9                     SSPBUF          equ	4041	;# 
   637   000FCA                     T2CON           equ	4042	;# 
   638   000FCB                     PR2             equ	4043	;# 
   639   000FCB                     MEMCON          equ	4043	;# 
   640   000FCC                     TMR2            equ	4044	;# 
   641   000FCD                     T1CON           equ	4045	;# 
   642   000FCE                     TMR1            equ	4046	;# 
   643   000FCE                     TMR1L           equ	4046	;# 
   644   000FCF                     TMR1H           equ	4047	;# 
   645   000FD0                     RCON            equ	4048	;# 
   646   000FD1                     WDTCON          equ	4049	;# 
   647   000FD2                     HLVDCON         equ	4050	;# 
   648   000FD2                     LVDCON          equ	4050	;# 
   649   000FD3                     OSCCON          equ	4051	;# 
   650   000FD5                     T0CON           equ	4053	;# 
   651   000FD6                     TMR0            equ	4054	;# 
   652   000FD6                     TMR0L           equ	4054	;# 
   653   000FD7                     TMR0H           equ	4055	;# 
   654   000FD8                     STATUS          equ	4056	;# 
   655   000FD9                     FSR2            equ	4057	;# 
   656   000FD9                     FSR2L           equ	4057	;# 
   657   000FDA                     FSR2H           equ	4058	;# 
   658   000FDB                     PLUSW2          equ	4059	;# 
   659   000FDC                     PREINC2         equ	4060	;# 
   660   000FDD                     POSTDEC2        equ	4061	;# 
   661   000FDE                     POSTINC2        equ	4062	;# 
   662   000FDF                     INDF2           equ	4063	;# 
   663   000FE0                     BSR             equ	4064	;# 
   664   000FE1                     FSR1            equ	4065	;# 
   665   000FE1                     FSR1L           equ	4065	;# 
   666   000FE2                     FSR1H           equ	4066	;# 
   667   000FE3                     PLUSW1          equ	4067	;# 
   668   000FE4                     PREINC1         equ	4068	;# 
   669   000FE5                     POSTDEC1        equ	4069	;# 
   670   000FE6                     POSTINC1        equ	4070	;# 
   671   000FE7                     INDF1           equ	4071	;# 
   672   000FE8                     WREG            equ	4072	;# 
   673   000FE9                     FSR0            equ	4073	;# 
   674   000FE9                     FSR0L           equ	4073	;# 
   675   000FEA                     FSR0H           equ	4074	;# 
   676   000FEB                     PLUSW0          equ	4075	;# 
   677   000FEC                     PREINC0         equ	4076	;# 
   678   000FED                     POSTDEC0        equ	4077	;# 
   679   000FEE                     POSTINC0        equ	4078	;# 
   680   000FEF                     INDF0           equ	4079	;# 
   681   000FF0                     INTCON3         equ	4080	;# 
   682   000FF1                     INTCON2         equ	4081	;# 
   683   000FF2                     INTCON          equ	4082	;# 
   684   000FF3                     PROD            equ	4083	;# 
   685   000FF3                     PRODL           equ	4083	;# 
   686   000FF4                     PRODH           equ	4084	;# 
   687   000FF5                     TABLAT          equ	4085	;# 
   688   000FF6                     TBLPTR          equ	4086	;# 
   689   000FF6                     TBLPTRL         equ	4086	;# 
   690   000FF7                     TBLPTRH         equ	4087	;# 
   691   000FF8                     TBLPTRU         equ	4088	;# 
   692   000FF9                     PCLAT           equ	4089	;# 
   693   000FF9                     PC              equ	4089	;# 
   694   000FF9                     PCL             equ	4089	;# 
   695   000FFA                     PCLATH          equ	4090	;# 
   696   000FFB                     PCLATU          equ	4091	;# 
   697   000FFC                     STKPTR          equ	4092	;# 
   698   000FFD                     TOS             equ	4093	;# 
   699   000FFD                     TOSL            equ	4093	;# 
   700   000FFE                     TOSH            equ	4094	;# 
   701   000FFF                     TOSU            equ	4095	;# 
   702   000F80                     PORTA           equ	3968	;# 
   703   000F81                     PORTB           equ	3969	;# 
   704   000F82                     PORTC           equ	3970	;# 
   705   000F83                     PORTD           equ	3971	;# 
   706   000F84                     PORTE           equ	3972	;# 
   707   000F89                     LATA            equ	3977	;# 
   708   000F8A                     LATB            equ	3978	;# 
   709   000F8B                     LATC            equ	3979	;# 
   710   000F8C                     LATD            equ	3980	;# 
   711   000F8D                     LATE            equ	3981	;# 
   712   000F92                     TRISA           equ	3986	;# 
   713   000F92                     DDRA            equ	3986	;# 
   714   000F93                     TRISB           equ	3987	;# 
   715   000F93                     DDRB            equ	3987	;# 
   716   000F94                     TRISC           equ	3988	;# 
   717   000F94                     DDRC            equ	3988	;# 
   718   000F95                     TRISD           equ	3989	;# 
   719   000F95                     DDRD            equ	3989	;# 
   720   000F96                     TRISE           equ	3990	;# 
   721   000F96                     DDRE            equ	3990	;# 
   722   000F9B                     OSCTUNE         equ	3995	;# 
   723   000F9D                     PIE1            equ	3997	;# 
   724   000F9E                     PIR1            equ	3998	;# 
   725   000F9F                     IPR1            equ	3999	;# 
   726   000FA0                     PIE2            equ	4000	;# 
   727   000FA1                     PIR2            equ	4001	;# 
   728   000FA2                     IPR2            equ	4002	;# 
   729   000FA6                     EECON1          equ	4006	;# 
   730   000FA7                     EECON2          equ	4007	;# 
   731   000FA8                     EEDATA          equ	4008	;# 
   732   000FA9                     EEADR           equ	4009	;# 
   733   000FAB                     RCSTA           equ	4011	;# 
   734   000FAB                     RCSTA1          equ	4011	;# 
   735   000FAC                     TXSTA           equ	4012	;# 
   736   000FAC                     TXSTA1          equ	4012	;# 
   737   000FAD                     TXREG           equ	4013	;# 
   738   000FAD                     TXREG1          equ	4013	;# 
   739   000FAE                     RCREG           equ	4014	;# 
   740   000FAE                     RCREG1          equ	4014	;# 
   741   000FAF                     SPBRG           equ	4015	;# 
   742   000FAF                     SPBRG1          equ	4015	;# 
   743   000FB0                     SPBRGH          equ	4016	;# 
   744   000FB1                     T3CON           equ	4017	;# 
   745   000FB2                     TMR3            equ	4018	;# 
   746   000FB2                     TMR3L           equ	4018	;# 
   747   000FB3                     TMR3H           equ	4019	;# 
   748   000FB4                     CMCON           equ	4020	;# 
   749   000FB5                     CVRCON          equ	4021	;# 
   750   000FB6                     ECCP1AS         equ	4022	;# 
   751   000FB7                     ECCP1DEL        equ	4023	;# 
   752   000FB7                     PWM1CON         equ	4023	;# 
   753   000FB8                     BAUDCON         equ	4024	;# 
   754   000FB8                     BAUDCTL         equ	4024	;# 
   755   000FBA                     CCP2CON         equ	4026	;# 
   756   000FBB                     CCPR2           equ	4027	;# 
   757   000FBB                     CCPR2L          equ	4027	;# 
   758   000FBC                     CCPR2H          equ	4028	;# 
   759   000FBD                     CCP1CON         equ	4029	;# 
   760   000FBD                     ECCP1CON        equ	4029	;# 
   761   000FBE                     CCPR1           equ	4030	;# 
   762   000FBE                     CCPR1L          equ	4030	;# 
   763   000FBF                     CCPR1H          equ	4031	;# 
   764   000FC0                     ADCON2          equ	4032	;# 
   765   000FC1                     ADCON1          equ	4033	;# 
   766   000FC2                     ADCON0          equ	4034	;# 
   767   000FC3                     ADRES           equ	4035	;# 
   768   000FC3                     ADRESL          equ	4035	;# 
   769   000FC4                     ADRESH          equ	4036	;# 
   770   000FC5                     SSPCON2         equ	4037	;# 
   771   000FC6                     SSPCON1         equ	4038	;# 
   772   000FC7                     SSPSTAT         equ	4039	;# 
   773   000FC8                     SSPADD          equ	4040	;# 
   774   000FC9                     SSPBUF          equ	4041	;# 
   775   000FCA                     T2CON           equ	4042	;# 
   776   000FCB                     PR2             equ	4043	;# 
   777   000FCB                     MEMCON          equ	4043	;# 
   778   000FCC                     TMR2            equ	4044	;# 
   779   000FCD                     T1CON           equ	4045	;# 
   780   000FCE                     TMR1            equ	4046	;# 
   781   000FCE                     TMR1L           equ	4046	;# 
   782   000FCF                     TMR1H           equ	4047	;# 
   783   000FD0                     RCON            equ	4048	;# 
   784   000FD1                     WDTCON          equ	4049	;# 
   785   000FD2                     HLVDCON         equ	4050	;# 
   786   000FD2                     LVDCON          equ	4050	;# 
   787   000FD3                     OSCCON          equ	4051	;# 
   788   000FD5                     T0CON           equ	4053	;# 
   789   000FD6                     TMR0            equ	4054	;# 
   790   000FD6                     TMR0L           equ	4054	;# 
   791   000FD7                     TMR0H           equ	4055	;# 
   792   000FD8                     STATUS          equ	4056	;# 
   793   000FD9                     FSR2            equ	4057	;# 
   794   000FD9                     FSR2L           equ	4057	;# 
   795   000FDA                     FSR2H           equ	4058	;# 
   796   000FDB                     PLUSW2          equ	4059	;# 
   797   000FDC                     PREINC2         equ	4060	;# 
   798   000FDD                     POSTDEC2        equ	4061	;# 
   799   000FDE                     POSTINC2        equ	4062	;# 
   800   000FDF                     INDF2           equ	4063	;# 
   801   000FE0                     BSR             equ	4064	;# 
   802   000FE1                     FSR1            equ	4065	;# 
   803   000FE1                     FSR1L           equ	4065	;# 
   804   000FE2                     FSR1H           equ	4066	;# 
   805   000FE3                     PLUSW1          equ	4067	;# 
   806   000FE4                     PREINC1         equ	4068	;# 
   807   000FE5                     POSTDEC1        equ	4069	;# 
   808   000FE6                     POSTINC1        equ	4070	;# 
   809   000FE7                     INDF1           equ	4071	;# 
   810   000FE8                     WREG            equ	4072	;# 
   811   000FE9                     FSR0            equ	4073	;# 
   812   000FE9                     FSR0L           equ	4073	;# 
   813   000FEA                     FSR0H           equ	4074	;# 
   814   000FEB                     PLUSW0          equ	4075	;# 
   815   000FEC                     PREINC0         equ	4076	;# 
   816   000FED                     POSTDEC0        equ	4077	;# 
   817   000FEE                     POSTINC0        equ	4078	;# 
   818   000FEF                     INDF0           equ	4079	;# 
   819   000FF0                     INTCON3         equ	4080	;# 
   820   000FF1                     INTCON2         equ	4081	;# 
   821   000FF2                     INTCON          equ	4082	;# 
   822   000FF3                     PROD            equ	4083	;# 
   823   000FF3                     PRODL           equ	4083	;# 
   824   000FF4                     PRODH           equ	4084	;# 
   825   000FF5                     TABLAT          equ	4085	;# 
   826   000FF6                     TBLPTR          equ	4086	;# 
   827   000FF6                     TBLPTRL         equ	4086	;# 
   828   000FF7                     TBLPTRH         equ	4087	;# 
   829   000FF8                     TBLPTRU         equ	4088	;# 
   830   000FF9                     PCLAT           equ	4089	;# 
   831   000FF9                     PC              equ	4089	;# 
   832   000FF9                     PCL             equ	4089	;# 
   833   000FFA                     PCLATH          equ	4090	;# 
   834   000FFB                     PCLATU          equ	4091	;# 
   835   000FFC                     STKPTR          equ	4092	;# 
   836   000FFD                     TOS             equ	4093	;# 
   837   000FFD                     TOSL            equ	4093	;# 
   838   000FFE                     TOSH            equ	4094	;# 
   839   000FFF                     TOSU            equ	4095	;# 
   840   000F80                     PORTA           equ	3968	;# 
   841   000F81                     PORTB           equ	3969	;# 
   842   000F82                     PORTC           equ	3970	;# 
   843   000F83                     PORTD           equ	3971	;# 
   844   000F84                     PORTE           equ	3972	;# 
   845   000F89                     LATA            equ	3977	;# 
   846   000F8A                     LATB            equ	3978	;# 
   847   000F8B                     LATC            equ	3979	;# 
   848   000F8C                     LATD            equ	3980	;# 
   849   000F8D                     LATE            equ	3981	;# 
   850   000F92                     TRISA           equ	3986	;# 
   851   000F92                     DDRA            equ	3986	;# 
   852   000F93                     TRISB           equ	3987	;# 
   853   000F93                     DDRB            equ	3987	;# 
   854   000F94                     TRISC           equ	3988	;# 
   855   000F94                     DDRC            equ	3988	;# 
   856   000F95                     TRISD           equ	3989	;# 
   857   000F95                     DDRD            equ	3989	;# 
   858   000F96                     TRISE           equ	3990	;# 
   859   000F96                     DDRE            equ	3990	;# 
   860   000F9B                     OSCTUNE         equ	3995	;# 
   861   000F9D                     PIE1            equ	3997	;# 
   862   000F9E                     PIR1            equ	3998	;# 
   863   000F9F                     IPR1            equ	3999	;# 
   864   000FA0                     PIE2            equ	4000	;# 
   865   000FA1                     PIR2            equ	4001	;# 
   866   000FA2                     IPR2            equ	4002	;# 
   867   000FA6                     EECON1          equ	4006	;# 
   868   000FA7                     EECON2          equ	4007	;# 
   869   000FA8                     EEDATA          equ	4008	;# 
   870   000FA9                     EEADR           equ	4009	;# 
   871   000FAB                     RCSTA           equ	4011	;# 
   872   000FAB                     RCSTA1          equ	4011	;# 
   873   000FAC                     TXSTA           equ	4012	;# 
   874   000FAC                     TXSTA1          equ	4012	;# 
   875   000FAD                     TXREG           equ	4013	;# 
   876   000FAD                     TXREG1          equ	4013	;# 
   877   000FAE                     RCREG           equ	4014	;# 
   878   000FAE                     RCREG1          equ	4014	;# 
   879   000FAF                     SPBRG           equ	4015	;# 
   880   000FAF                     SPBRG1          equ	4015	;# 
   881   000FB0                     SPBRGH          equ	4016	;# 
   882   000FB1                     T3CON           equ	4017	;# 
   883   000FB2                     TMR3            equ	4018	;# 
   884   000FB2                     TMR3L           equ	4018	;# 
   885   000FB3                     TMR3H           equ	4019	;# 
   886   000FB4                     CMCON           equ	4020	;# 
   887   000FB5                     CVRCON          equ	4021	;# 
   888   000FB6                     ECCP1AS         equ	4022	;# 
   889   000FB7                     ECCP1DEL        equ	4023	;# 
   890   000FB7                     PWM1CON         equ	4023	;# 
   891   000FB8                     BAUDCON         equ	4024	;# 
   892   000FB8                     BAUDCTL         equ	4024	;# 
   893   000FBA                     CCP2CON         equ	4026	;# 
   894   000FBB                     CCPR2           equ	4027	;# 
   895   000FBB                     CCPR2L          equ	4027	;# 
   896   000FBC                     CCPR2H          equ	4028	;# 
   897   000FBD                     CCP1CON         equ	4029	;# 
   898   000FBD                     ECCP1CON        equ	4029	;# 
   899   000FBE                     CCPR1           equ	4030	;# 
   900   000FBE                     CCPR1L          equ	4030	;# 
   901   000FBF                     CCPR1H          equ	4031	;# 
   902   000FC0                     ADCON2          equ	4032	;# 
   903   000FC1                     ADCON1          equ	4033	;# 
   904   000FC2                     ADCON0          equ	4034	;# 
   905   000FC3                     ADRES           equ	4035	;# 
   906   000FC3                     ADRESL          equ	4035	;# 
   907   000FC4                     ADRESH          equ	4036	;# 
   908   000FC5                     SSPCON2         equ	4037	;# 
   909   000FC6                     SSPCON1         equ	4038	;# 
   910   000FC7                     SSPSTAT         equ	4039	;# 
   911   000FC8                     SSPADD          equ	4040	;# 
   912   000FC9                     SSPBUF          equ	4041	;# 
   913   000FCA                     T2CON           equ	4042	;# 
   914   000FCB                     PR2             equ	4043	;# 
   915   000FCB                     MEMCON          equ	4043	;# 
   916   000FCC                     TMR2            equ	4044	;# 
   917   000FCD                     T1CON           equ	4045	;# 
   918   000FCE                     TMR1            equ	4046	;# 
   919   000FCE                     TMR1L           equ	4046	;# 
   920   000FCF                     TMR1H           equ	4047	;# 
   921   000FD0                     RCON            equ	4048	;# 
   922   000FD1                     WDTCON          equ	4049	;# 
   923   000FD2                     HLVDCON         equ	4050	;# 
   924   000FD2                     LVDCON          equ	4050	;# 
   925   000FD3                     OSCCON          equ	4051	;# 
   926   000FD5                     T0CON           equ	4053	;# 
   927   000FD6                     TMR0            equ	4054	;# 
   928   000FD6                     TMR0L           equ	4054	;# 
   929   000FD7                     TMR0H           equ	4055	;# 
   930   000FD8                     STATUS          equ	4056	;# 
   931   000FD9                     FSR2            equ	4057	;# 
   932   000FD9                     FSR2L           equ	4057	;# 
   933   000FDA                     FSR2H           equ	4058	;# 
   934   000FDB                     PLUSW2          equ	4059	;# 
   935   000FDC                     PREINC2         equ	4060	;# 
   936   000FDD                     POSTDEC2        equ	4061	;# 
   937   000FDE                     POSTINC2        equ	4062	;# 
   938   000FDF                     INDF2           equ	4063	;# 
   939   000FE0                     BSR             equ	4064	;# 
   940   000FE1                     FSR1            equ	4065	;# 
   941   000FE1                     FSR1L           equ	4065	;# 
   942   000FE2                     FSR1H           equ	4066	;# 
   943   000FE3                     PLUSW1          equ	4067	;# 
   944   000FE4                     PREINC1         equ	4068	;# 
   945   000FE5                     POSTDEC1        equ	4069	;# 
   946   000FE6                     POSTINC1        equ	4070	;# 
   947   000FE7                     INDF1           equ	4071	;# 
   948   000FE8                     WREG            equ	4072	;# 
   949   000FE9                     FSR0            equ	4073	;# 
   950   000FE9                     FSR0L           equ	4073	;# 
   951   000FEA                     FSR0H           equ	4074	;# 
   952   000FEB                     PLUSW0          equ	4075	;# 
   953   000FEC                     PREINC0         equ	4076	;# 
   954   000FED                     POSTDEC0        equ	4077	;# 
   955   000FEE                     POSTINC0        equ	4078	;# 
   956   000FEF                     INDF0           equ	4079	;# 
   957   000FF0                     INTCON3         equ	4080	;# 
   958   000FF1                     INTCON2         equ	4081	;# 
   959   000FF2                     INTCON          equ	4082	;# 
   960   000FF3                     PROD            equ	4083	;# 
   961   000FF3                     PRODL           equ	4083	;# 
   962   000FF4                     PRODH           equ	4084	;# 
   963   000FF5                     TABLAT          equ	4085	;# 
   964   000FF6                     TBLPTR          equ	4086	;# 
   965   000FF6                     TBLPTRL         equ	4086	;# 
   966   000FF7                     TBLPTRH         equ	4087	;# 
   967   000FF8                     TBLPTRU         equ	4088	;# 
   968   000FF9                     PCLAT           equ	4089	;# 
   969   000FF9                     PC              equ	4089	;# 
   970   000FF9                     PCL             equ	4089	;# 
   971   000FFA                     PCLATH          equ	4090	;# 
   972   000FFB                     PCLATU          equ	4091	;# 
   973   000FFC                     STKPTR          equ	4092	;# 
   974   000FFD                     TOS             equ	4093	;# 
   975   000FFD                     TOSL            equ	4093	;# 
   976   000FFE                     TOSH            equ	4094	;# 
   977   000FFF                     TOSU            equ	4095	;# 
   978   000F80                     PORTA           equ	3968	;# 
   979   000F81                     PORTB           equ	3969	;# 
   980   000F82                     PORTC           equ	3970	;# 
   981   000F83                     PORTD           equ	3971	;# 
   982   000F84                     PORTE           equ	3972	;# 
   983   000F89                     LATA            equ	3977	;# 
   984   000F8A                     LATB            equ	3978	;# 
   985   000F8B                     LATC            equ	3979	;# 
   986   000F8C                     LATD            equ	3980	;# 
   987   000F8D                     LATE            equ	3981	;# 
   988   000F92                     TRISA           equ	3986	;# 
   989   000F92                     DDRA            equ	3986	;# 
   990   000F93                     TRISB           equ	3987	;# 
   991   000F93                     DDRB            equ	3987	;# 
   992   000F94                     TRISC           equ	3988	;# 
   993   000F94                     DDRC            equ	3988	;# 
   994   000F95                     TRISD           equ	3989	;# 
   995   000F95                     DDRD            equ	3989	;# 
   996   000F96                     TRISE           equ	3990	;# 
   997   000F96                     DDRE            equ	3990	;# 
   998   000F9B                     OSCTUNE         equ	3995	;# 
   999   000F9D                     PIE1            equ	3997	;# 
  1000   000F9E                     PIR1            equ	3998	;# 
  1001   000F9F                     IPR1            equ	3999	;# 
  1002   000FA0                     PIE2            equ	4000	;# 
  1003   000FA1                     PIR2            equ	4001	;# 
  1004   000FA2                     IPR2            equ	4002	;# 
  1005   000FA6                     EECON1          equ	4006	;# 
  1006   000FA7                     EECON2          equ	4007	;# 
  1007   000FA8                     EEDATA          equ	4008	;# 
  1008   000FA9                     EEADR           equ	4009	;# 
  1009   000FAB                     RCSTA           equ	4011	;# 
  1010   000FAB                     RCSTA1          equ	4011	;# 
  1011   000FAC                     TXSTA           equ	4012	;# 
  1012   000FAC                     TXSTA1          equ	4012	;# 
  1013   000FAD                     TXREG           equ	4013	;# 
  1014   000FAD                     TXREG1          equ	4013	;# 
  1015   000FAE                     RCREG           equ	4014	;# 
  1016   000FAE                     RCREG1          equ	4014	;# 
  1017   000FAF                     SPBRG           equ	4015	;# 
  1018   000FAF                     SPBRG1          equ	4015	;# 
  1019   000FB0                     SPBRGH          equ	4016	;# 
  1020   000FB1                     T3CON           equ	4017	;# 
  1021   000FB2                     TMR3            equ	4018	;# 
  1022   000FB2                     TMR3L           equ	4018	;# 
  1023   000FB3                     TMR3H           equ	4019	;# 
  1024   000FB4                     CMCON           equ	4020	;# 
  1025   000FB5                     CVRCON          equ	4021	;# 
  1026   000FB6                     ECCP1AS         equ	4022	;# 
  1027   000FB7                     ECCP1DEL        equ	4023	;# 
  1028   000FB7                     PWM1CON         equ	4023	;# 
  1029   000FB8                     BAUDCON         equ	4024	;# 
  1030   000FB8                     BAUDCTL         equ	4024	;# 
  1031   000FBA                     CCP2CON         equ	4026	;# 
  1032   000FBB                     CCPR2           equ	4027	;# 
  1033   000FBB                     CCPR2L          equ	4027	;# 
  1034   000FBC                     CCPR2H          equ	4028	;# 
  1035   000FBD                     CCP1CON         equ	4029	;# 
  1036   000FBD                     ECCP1CON        equ	4029	;# 
  1037   000FBE                     CCPR1           equ	4030	;# 
  1038   000FBE                     CCPR1L          equ	4030	;# 
  1039   000FBF                     CCPR1H          equ	4031	;# 
  1040   000FC0                     ADCON2          equ	4032	;# 
  1041   000FC1                     ADCON1          equ	4033	;# 
  1042   000FC2                     ADCON0          equ	4034	;# 
  1043   000FC3                     ADRES           equ	4035	;# 
  1044   000FC3                     ADRESL          equ	4035	;# 
  1045   000FC4                     ADRESH          equ	4036	;# 
  1046   000FC5                     SSPCON2         equ	4037	;# 
  1047   000FC6                     SSPCON1         equ	4038	;# 
  1048   000FC7                     SSPSTAT         equ	4039	;# 
  1049   000FC8                     SSPADD          equ	4040	;# 
  1050   000FC9                     SSPBUF          equ	4041	;# 
  1051   000FCA                     T2CON           equ	4042	;# 
  1052   000FCB                     PR2             equ	4043	;# 
  1053   000FCB                     MEMCON          equ	4043	;# 
  1054   000FCC                     TMR2            equ	4044	;# 
  1055   000FCD                     T1CON           equ	4045	;# 
  1056   000FCE                     TMR1            equ	4046	;# 
  1057   000FCE                     TMR1L           equ	4046	;# 
  1058   000FCF                     TMR1H           equ	4047	;# 
  1059   000FD0                     RCON            equ	4048	;# 
  1060   000FD1                     WDTCON          equ	4049	;# 
  1061   000FD2                     HLVDCON         equ	4050	;# 
  1062   000FD2                     LVDCON          equ	4050	;# 
  1063   000FD3                     OSCCON          equ	4051	;# 
  1064   000FD5                     T0CON           equ	4053	;# 
  1065   000FD6                     TMR0            equ	4054	;# 
  1066   000FD6                     TMR0L           equ	4054	;# 
  1067   000FD7                     TMR0H           equ	4055	;# 
  1068   000FD8                     STATUS          equ	4056	;# 
  1069   000FD9                     FSR2            equ	4057	;# 
  1070   000FD9                     FSR2L           equ	4057	;# 
  1071   000FDA                     FSR2H           equ	4058	;# 
  1072   000FDB                     PLUSW2          equ	4059	;# 
  1073   000FDC                     PREINC2         equ	4060	;# 
  1074   000FDD                     POSTDEC2        equ	4061	;# 
  1075   000FDE                     POSTINC2        equ	4062	;# 
  1076   000FDF                     INDF2           equ	4063	;# 
  1077   000FE0                     BSR             equ	4064	;# 
  1078   000FE1                     FSR1            equ	4065	;# 
  1079   000FE1                     FSR1L           equ	4065	;# 
  1080   000FE2                     FSR1H           equ	4066	;# 
  1081   000FE3                     PLUSW1          equ	4067	;# 
  1082   000FE4                     PREINC1         equ	4068	;# 
  1083   000FE5                     POSTDEC1        equ	4069	;# 
  1084   000FE6                     POSTINC1        equ	4070	;# 
  1085   000FE7                     INDF1           equ	4071	;# 
  1086   000FE8                     WREG            equ	4072	;# 
  1087   000FE9                     FSR0            equ	4073	;# 
  1088   000FE9                     FSR0L           equ	4073	;# 
  1089   000FEA                     FSR0H           equ	4074	;# 
  1090   000FEB                     PLUSW0          equ	4075	;# 
  1091   000FEC                     PREINC0         equ	4076	;# 
  1092   000FED                     POSTDEC0        equ	4077	;# 
  1093   000FEE                     POSTINC0        equ	4078	;# 
  1094   000FEF                     INDF0           equ	4079	;# 
  1095   000FF0                     INTCON3         equ	4080	;# 
  1096   000FF1                     INTCON2         equ	4081	;# 
  1097   000FF2                     INTCON          equ	4082	;# 
  1098   000FF3                     PROD            equ	4083	;# 
  1099   000FF3                     PRODL           equ	4083	;# 
  1100   000FF4                     PRODH           equ	4084	;# 
  1101   000FF5                     TABLAT          equ	4085	;# 
  1102   000FF6                     TBLPTR          equ	4086	;# 
  1103   000FF6                     TBLPTRL         equ	4086	;# 
  1104   000FF7                     TBLPTRH         equ	4087	;# 
  1105   000FF8                     TBLPTRU         equ	4088	;# 
  1106   000FF9                     PCLAT           equ	4089	;# 
  1107   000FF9                     PC              equ	4089	;# 
  1108   000FF9                     PCL             equ	4089	;# 
  1109   000FFA                     PCLATH          equ	4090	;# 
  1110   000FFB                     PCLATU          equ	4091	;# 
  1111   000FFC                     STKPTR          equ	4092	;# 
  1112   000FFD                     TOS             equ	4093	;# 
  1113   000FFD                     TOSL            equ	4093	;# 
  1114   000FFE                     TOSH            equ	4094	;# 
  1115   000FFF                     TOSU            equ	4095	;# 
  1116   000F80                     PORTA           equ	3968	;# 
  1117   000F81                     PORTB           equ	3969	;# 
  1118   000F82                     PORTC           equ	3970	;# 
  1119   000F83                     PORTD           equ	3971	;# 
  1120   000F84                     PORTE           equ	3972	;# 
  1121   000F89                     LATA            equ	3977	;# 
  1122   000F8A                     LATB            equ	3978	;# 
  1123   000F8B                     LATC            equ	3979	;# 
  1124   000F8C                     LATD            equ	3980	;# 
  1125   000F8D                     LATE            equ	3981	;# 
  1126   000F92                     TRISA           equ	3986	;# 
  1127   000F92                     DDRA            equ	3986	;# 
  1128   000F93                     TRISB           equ	3987	;# 
  1129   000F93                     DDRB            equ	3987	;# 
  1130   000F94                     TRISC           equ	3988	;# 
  1131   000F94                     DDRC            equ	3988	;# 
  1132   000F95                     TRISD           equ	3989	;# 
  1133   000F95                     DDRD            equ	3989	;# 
  1134   000F96                     TRISE           equ	3990	;# 
  1135   000F96                     DDRE            equ	3990	;# 
  1136   000F9B                     OSCTUNE         equ	3995	;# 
  1137   000F9D                     PIE1            equ	3997	;# 
  1138   000F9E                     PIR1            equ	3998	;# 
  1139   000F9F                     IPR1            equ	3999	;# 
  1140   000FA0                     PIE2            equ	4000	;# 
  1141   000FA1                     PIR2            equ	4001	;# 
  1142   000FA2                     IPR2            equ	4002	;# 
  1143   000FA6                     EECON1          equ	4006	;# 
  1144   000FA7                     EECON2          equ	4007	;# 
  1145   000FA8                     EEDATA          equ	4008	;# 
  1146   000FA9                     EEADR           equ	4009	;# 
  1147   000FAB                     RCSTA           equ	4011	;# 
  1148   000FAB                     RCSTA1          equ	4011	;# 
  1149   000FAC                     TXSTA           equ	4012	;# 
  1150   000FAC                     TXSTA1          equ	4012	;# 
  1151   000FAD                     TXREG           equ	4013	;# 
  1152   000FAD                     TXREG1          equ	4013	;# 
  1153   000FAE                     RCREG           equ	4014	;# 
  1154   000FAE                     RCREG1          equ	4014	;# 
  1155   000FAF                     SPBRG           equ	4015	;# 
  1156   000FAF                     SPBRG1          equ	4015	;# 
  1157   000FB0                     SPBRGH          equ	4016	;# 
  1158   000FB1                     T3CON           equ	4017	;# 
  1159   000FB2                     TMR3            equ	4018	;# 
  1160   000FB2                     TMR3L           equ	4018	;# 
  1161   000FB3                     TMR3H           equ	4019	;# 
  1162   000FB4                     CMCON           equ	4020	;# 
  1163   000FB5                     CVRCON          equ	4021	;# 
  1164   000FB6                     ECCP1AS         equ	4022	;# 
  1165   000FB7                     ECCP1DEL        equ	4023	;# 
  1166   000FB7                     PWM1CON         equ	4023	;# 
  1167   000FB8                     BAUDCON         equ	4024	;# 
  1168   000FB8                     BAUDCTL         equ	4024	;# 
  1169   000FBA                     CCP2CON         equ	4026	;# 
  1170   000FBB                     CCPR2           equ	4027	;# 
  1171   000FBB                     CCPR2L          equ	4027	;# 
  1172   000FBC                     CCPR2H          equ	4028	;# 
  1173   000FBD                     CCP1CON         equ	4029	;# 
  1174   000FBD                     ECCP1CON        equ	4029	;# 
  1175   000FBE                     CCPR1           equ	4030	;# 
  1176   000FBE                     CCPR1L          equ	4030	;# 
  1177   000FBF                     CCPR1H          equ	4031	;# 
  1178   000FC0                     ADCON2          equ	4032	;# 
  1179   000FC1                     ADCON1          equ	4033	;# 
  1180   000FC2                     ADCON0          equ	4034	;# 
  1181   000FC3                     ADRES           equ	4035	;# 
  1182   000FC3                     ADRESL          equ	4035	;# 
  1183   000FC4                     ADRESH          equ	4036	;# 
  1184   000FC5                     SSPCON2         equ	4037	;# 
  1185   000FC6                     SSPCON1         equ	4038	;# 
  1186   000FC7                     SSPSTAT         equ	4039	;# 
  1187   000FC8                     SSPADD          equ	4040	;# 
  1188   000FC9                     SSPBUF          equ	4041	;# 
  1189   000FCA                     T2CON           equ	4042	;# 
  1190   000FCB                     PR2             equ	4043	;# 
  1191   000FCB                     MEMCON          equ	4043	;# 
  1192   000FCC                     TMR2            equ	4044	;# 
  1193   000FCD                     T1CON           equ	4045	;# 
  1194   000FCE                     TMR1            equ	4046	;# 
  1195   000FCE                     TMR1L           equ	4046	;# 
  1196   000FCF                     TMR1H           equ	4047	;# 
  1197   000FD0                     RCON            equ	4048	;# 
  1198   000FD1                     WDTCON          equ	4049	;# 
  1199   000FD2                     HLVDCON         equ	4050	;# 
  1200   000FD2                     LVDCON          equ	4050	;# 
  1201   000FD3                     OSCCON          equ	4051	;# 
  1202   000FD5                     T0CON           equ	4053	;# 
  1203   000FD6                     TMR0            equ	4054	;# 
  1204   000FD6                     TMR0L           equ	4054	;# 
  1205   000FD7                     TMR0H           equ	4055	;# 
  1206   000FD8                     STATUS          equ	4056	;# 
  1207   000FD9                     FSR2            equ	4057	;# 
  1208   000FD9                     FSR2L           equ	4057	;# 
  1209   000FDA                     FSR2H           equ	4058	;# 
  1210   000FDB                     PLUSW2          equ	4059	;# 
  1211   000FDC                     PREINC2         equ	4060	;# 
  1212   000FDD                     POSTDEC2        equ	4061	;# 
  1213   000FDE                     POSTINC2        equ	4062	;# 
  1214   000FDF                     INDF2           equ	4063	;# 
  1215   000FE0                     BSR             equ	4064	;# 
  1216   000FE1                     FSR1            equ	4065	;# 
  1217   000FE1                     FSR1L           equ	4065	;# 
  1218   000FE2                     FSR1H           equ	4066	;# 
  1219   000FE3                     PLUSW1          equ	4067	;# 
  1220   000FE4                     PREINC1         equ	4068	;# 
  1221   000FE5                     POSTDEC1        equ	4069	;# 
  1222   000FE6                     POSTINC1        equ	4070	;# 
  1223   000FE7                     INDF1           equ	4071	;# 
  1224   000FE8                     WREG            equ	4072	;# 
  1225   000FE9                     FSR0            equ	4073	;# 
  1226   000FE9                     FSR0L           equ	4073	;# 
  1227   000FEA                     FSR0H           equ	4074	;# 
  1228   000FEB                     PLUSW0          equ	4075	;# 
  1229   000FEC                     PREINC0         equ	4076	;# 
  1230   000FED                     POSTDEC0        equ	4077	;# 
  1231   000FEE                     POSTINC0        equ	4078	;# 
  1232   000FEF                     INDF0           equ	4079	;# 
  1233   000FF0                     INTCON3         equ	4080	;# 
  1234   000FF1                     INTCON2         equ	4081	;# 
  1235   000FF2                     INTCON          equ	4082	;# 
  1236   000FF3                     PROD            equ	4083	;# 
  1237   000FF3                     PRODL           equ	4083	;# 
  1238   000FF4                     PRODH           equ	4084	;# 
  1239   000FF5                     TABLAT          equ	4085	;# 
  1240   000FF6                     TBLPTR          equ	4086	;# 
  1241   000FF6                     TBLPTRL         equ	4086	;# 
  1242   000FF7                     TBLPTRH         equ	4087	;# 
  1243   000FF8                     TBLPTRU         equ	4088	;# 
  1244   000FF9                     PCLAT           equ	4089	;# 
  1245   000FF9                     PC              equ	4089	;# 
  1246   000FF9                     PCL             equ	4089	;# 
  1247   000FFA                     PCLATH          equ	4090	;# 
  1248   000FFB                     PCLATU          equ	4091	;# 
  1249   000FFC                     STKPTR          equ	4092	;# 
  1250   000FFD                     TOS             equ	4093	;# 
  1251   000FFD                     TOSL            equ	4093	;# 
  1252   000FFE                     TOSH            equ	4094	;# 
  1253   000FFF                     TOSU            equ	4095	;# 
  1254                           
  1255                           	psect	idataCOMRAM
  1256   001E38                     __pidataCOMRAM:
  1257                           	callstack 0
  1258                           
  1259                           ;initializer for _currentTime
  1260   001E38  30                 	db	48
  1261   001E39  30                 	db	48
  1262   001E3A  30                 	db	48
  1263   001E3B  30                 	db	48
  1264                           
  1265                           ;initializer for _colValues
  1266   001E3C  20                 	db	32
  1267   001E3D  40                 	db	64
  1268   001E3E  10                 	db	16
  1269                           
  1270                           ;initializer for motor_Read@MAX_TIMEOUT
  1271   001E3F  03E8               	dw	1000
  1272                           
  1273                           ;initializer for motorTerminal@hour
  1274   001E41  30                 	db	48
  1275   001E42  30                 	db	48
  1276   001E43  30                 	db	48
  1277   001E44  30                 	db	48
  1278                           
  1279                           	psect	idataBANK0
  1280   001946                     __pidataBANK0:
  1281                           	callstack 0
  1282                           
  1283                           ;initializer for _userUIDs
  1284   001946  65                 	db	101
  1285   001947  DC                 	db	220
  1286   001948  F9                 	db	249
  1287   001949  03                 	db	3
  1288   00194A  43                 	db	67
  1289   00194B  00                 	db	0
  1290   00194C  00                 	db	0
  1291   00194D  00                 	db	0
  1292   00194E  00                 	db	0
  1293   00194F  00                 	db	0
  1294   001950  00                 	db	0
  1295   001951  00                 	db	0
  1296   001952  00                 	db	0
  1297   001953  00                 	db	0
  1298   001954  00                 	db	0
  1299   001955  00                 	db	0
  1300   001956  DC                 	db	220
  1301   001957  0D                 	db	13
  1302   001958  F9                 	db	249
  1303   001959  03                 	db	3
  1304   00195A  2B                 	db	43
  1305   00195B  00                 	db	0
  1306   00195C  00                 	db	0
  1307   00195D  00                 	db	0
  1308   00195E  00                 	db	0
  1309   00195F  00                 	db	0
  1310   001960  00                 	db	0
  1311   001961  00                 	db	0
  1312   001962  00                 	db	0
  1313   001963  00                 	db	0
  1314   001964  00                 	db	0
  1315   001965  00                 	db	0
  1316   001966  DF                 	db	223
  1317   001967  8B                 	db	139
  1318   001968  DF                 	db	223
  1319   001969  C4                 	db	196
  1320   00196A  4F                 	db	79
  1321   00196B  00                 	db	0
  1322   00196C  00                 	db	0
  1323   00196D  00                 	db	0
  1324   00196E  00                 	db	0
  1325   00196F  00                 	db	0
  1326   001970  00                 	db	0
  1327   001971  00                 	db	0
  1328   001972  00                 	db	0
  1329   001973  00                 	db	0
  1330   001974  00                 	db	0
  1331   001975  00                 	db	0
  1332   001976  21                 	db	33
  1333   001977  32                 	db	50
  1334   001978  A9                 	db	169
  1335   001979  89                 	db	137
  1336   00197A  33                 	db	51
  1337   00197B  00                 	db	0
  1338   00197C  00                 	db	0
  1339   00197D  00                 	db	0
  1340   00197E  00                 	db	0
  1341   00197F  00                 	db	0
  1342   001980  00                 	db	0
  1343   001981  00                 	db	0
  1344   001982  00                 	db	0
  1345   001983  00                 	db	0
  1346   001984  00                 	db	0
  1347   001985  00                 	db	0
  1348                           
  1349                           ;initializer for controlLED@ledBits
  1350   001986  01                 	db	1
  1351   001987  02                 	db	2
  1352   001988  04                 	db	4
  1353   001989  08                 	db	8
  1354   00198A  10                 	db	16
  1355   00198B  20                 	db	32
  1356                           
  1357                           ;initializer for _configurations
  1358   00198C  01                 	db	1
  1359   00198D  01                 	db	1
  1360   00198E  01                 	db	1
  1361   00198F  01                 	db	1
  1362   001990  01                 	db	1
  1363   001991  01                 	db	1
  1364   001992  01                 	db	1
  1365   001993  01                 	db	1
  1366   001994  01                 	db	1
  1367   001995  01                 	db	1
  1368   001996  01                 	db	1
  1369   001997  01                 	db	1
  1370   001998  01                 	db	1
  1371   001999  01                 	db	1
  1372   00199A  01                 	db	1
  1373   00199B  01                 	db	1
  1374   00199C  01                 	db	1
  1375   00199D  01                 	db	1
  1376   00199E  01                 	db	1
  1377   00199F  01                 	db	1
  1378   0019A0  01                 	db	1
  1379   0019A1  01                 	db	1
  1380   0019A2  01                 	db	1
  1381   0019A3  01                 	db	1
  1382                           
  1383                           	psect	mediumconst
  1384   001E74                     __pmediumconst:
  1385                           	callstack 0
  1386   001E74  00                 	db	0
  1387   001E75                     printLedConfig@hex:
  1388                           	callstack 0
  1389   001E75  30                 	db	48
  1390   001E76  31                 	db	49
  1391   001E77  32                 	db	50
  1392   001E78  33                 	db	51
  1393   001E79  34                 	db	52
  1394   001E7A  35                 	db	53
  1395   001E7B  36                 	db	54
  1396   001E7C  37                 	db	55
  1397   001E7D  38                 	db	56
  1398   001E7E  39                 	db	57
  1399   001E7F  41                 	db	65
  1400   001E80  42                 	db	66
  1401   001E81  43                 	db	67
  1402   001E82  44                 	db	68
  1403   001E83  45                 	db	69
  1404   001E84  46                 	db	70
  1405   001E85  00                 	db	0
  1406   001E86                     __end_ofprintLedConfig@hex:
  1407                           	callstack 0
  1408   001E86                     printfUID@hex:
  1409                           	callstack 0
  1410   001E86  30                 	db	48
  1411   001E87  31                 	db	49
  1412   001E88  32                 	db	50
  1413   001E89  33                 	db	51
  1414   001E8A  34                 	db	52
  1415   001E8B  35                 	db	53
  1416   001E8C  36                 	db	54
  1417   001E8D  37                 	db	55
  1418   001E8E  38                 	db	56
  1419   001E8F  39                 	db	57
  1420   001E90  41                 	db	65
  1421   001E91  42                 	db	66
  1422   001E92  43                 	db	67
  1423   001E93  44                 	db	68
  1424   001E94  45                 	db	69
  1425   001E95  46                 	db	70
  1426   001E96  00                 	db	0
  1427   001E97                     __end_ofprintfUID@hex:
  1428                           	callstack 0
  1429   001E97                     _keymap:
  1430                           	callstack 0
  1431   001E97  01                 	db	1
  1432   001E98  02                 	db	2
  1433   001E99  03                 	db	3
  1434   001E9A  04                 	db	4
  1435   001E9B  05                 	db	5
  1436   001E9C  06                 	db	6
  1437   001E9D  07                 	db	7
  1438   001E9E  08                 	db	8
  1439   001E9F  09                 	db	9
  1440   001EA0  0A                 	db	10
  1441   001EA1  00                 	db	0
  1442   001EA2  0B                 	db	11
  1443   001EA3                     __end_of_keymap:
  1444                           	callstack 0
  1445   001EA3                     showAllConfigurations@configStr:
  1446                           	callstack 0
  1447   001EA3  20                 	db	32
  1448   001EA4  43                 	db	67
  1449   001EA5  6F                 	db	111
  1450   001EA6  6E                 	db	110
  1451   001EA7  66                 	db	102
  1452   001EA8  69                 	db	105
  1453   001EA9  67                 	db	103
  1454   001EAA  3A                 	db	58
  1455   001EAB  20                 	db	32
  1456   001EAC  00                 	db	0
  1457   001EAD                     __end_ofshowAllConfigurations@configStr:
  1458                           	callstack 0
  1459   001EAD                     showAllConfigurations@userStr:
  1460                           	callstack 0
  1461   001EAD  55                 	db	85
  1462   001EAE  73                 	db	115
  1463   001EAF  65                 	db	101
  1464   001EB0  72                 	db	114
  1465   001EB1  20                 	db	32
  1466   001EB2  00                 	db	0
  1467   001EB3                     __end_ofshowAllConfigurations@userStr:
  1468                           	callstack 0
  1469   007F92                     _TMR0IF         set	32658
  1470   000FD6                     _TMR0           set	4054
  1471   000F89                     _LATA           set	3977
  1472   000F96                     _TRISE          set	3990
  1473   000F92                     _TRISA          set	3986
  1474   000FAD                     _TXREG          set	4013
  1475   000FAE                     _RCREG          set	4014
  1476   000F9E                     _PIR1bits       set	3998
  1477   000FB8                     _BAUDCON        set	4024
  1478   000FAF                     _SPBRG          set	4015
  1479   000FAB                     _RCSTA          set	4011
  1480   000FAC                     _TXSTA          set	4012
  1481   000F8A                     _LATBbits       set	3978
  1482   000F93                     _TRISBbits      set	3987
  1483   000F82                     _PORTCbits      set	3970
  1484   000F8B                     _LATCbits       set	3979
  1485   000F94                     _TRISCbits      set	3988
  1486   000F83                     _PORTD          set	3971
  1487   000F8C                     _LATD           set	3980
  1488   000F95                     _TRISD          set	3989
  1489   000FD5                     _T0CON          set	4053
  1490   000F8B                     _LATC           set	3979
  1491   000F96                     _TRISEbits      set	3990
  1492   000FC1                     _ADCON1         set	4033
  1493   000F8D                     _LATEbits       set	3981
  1494   000FF2                     _INTCONbits     set	4082
  1495   001EB3                     STR_9:
  1496   001EB3  09                 	db	9
  1497   001EB4  31                 	db	49	;'1'
  1498   001EB5  2E                 	db	46
  1499   001EB6  20                 	db	32
  1500   001EB7  51                 	db	81	;'Q'
  1501   001EB8  75                 	db	117	;'u'
  1502   001EB9  69                 	db	105	;'i'
  1503   001EBA  20                 	db	32
  1504   001EBB  68                 	db	104	;'h'
  1505   001EBC  69                 	db	105	;'i'
  1506   001EBD  20                 	db	32
  1507   001EBE  68                 	db	104	;'h'
  1508   001EBF  61                 	db	97	;'a'
  1509   001EC0  20                 	db	32
  1510   001EC1  61                 	db	97	;'a'
  1511   001EC2  20                 	db	32
  1512   001EC3  6C                 	db	108	;'l'
  1513   001EC4  61                 	db	97	;'a'
  1514   001EC5  20                 	db	32
  1515   001EC6  73                 	db	115	;'s'
  1516   001EC7  61                 	db	97	;'a'
  1517   001EC8  6C                 	db	108	;'l'
  1518   001EC9  61                 	db	97	;'a'
  1519   001ECA  3F                 	db	63	;'?'
  1520   001ECB  0D                 	db	13
  1521   001ECC  0A                 	db	10
  1522   001ECD  09                 	db	9
  1523   001ECE  32                 	db	50	;'2'
  1524   001ECF  2E                 	db	46
  1525   001ED0  20                 	db	32
  1526   001ED1  4D                 	db	77	;'M'
  1527   001ED2  6F                 	db	111	;'o'
  1528   001ED3  73                 	db	115	;'s'
  1529   001ED4  74                 	db	116	;'t'
  1530   001ED5  72                 	db	114	;'r'
  1531   001ED6  61                 	db	97	;'a'
  1532   001ED7  72                 	db	114	;'r'
  1533   001ED8  20                 	db	32
  1534   001ED9  63                 	db	99	;'c'
  1535   001EDA  6F                 	db	111	;'o'
  1536   001EDB  6E                 	db	110	;'n'
  1537   001EDC  66                 	db	102	;'f'
  1538   001EDD  69                 	db	105	;'i'
  1539   001EDE  67                 	db	103	;'g'
  1540   001EDF  75                 	db	117	;'u'
  1541   001EE0  72                 	db	114	;'r'
  1542   001EE1  61                 	db	97	;'a'
  1543   001EE2  63                 	db	99	;'c'
  1544   001EE3  69                 	db	105	;'i'
  1545   001EE4  6F                 	db	111	;'o'
  1546   001EE5  6E                 	db	110	;'n'
  1547   001EE6  73                 	db	115	;'s'
  1548   001EE7  0D                 	db	13
  1549   001EE8  0A                 	db	10
  1550   001EE9  09                 	db	9
  1551   001EEA  33                 	db	51	;'3'
  1552   001EEB  2E                 	db	46
  1553   001EEC  20                 	db	32
  1554   001EED  4D                 	db	77	;'M'
  1555   001EEE  6F                 	db	111	;'o'
  1556   001EEF  64                 	db	100	;'d'
  1557   001EF0  69                 	db	105	;'i'
  1558   001EF1  66                 	db	102	;'f'
  1559   001EF2  69                 	db	105	;'i'
  1560   001EF3  63                 	db	99	;'c'
  1561   001EF4  61                 	db	97	;'a'
  1562   001EF5  72                 	db	114	;'r'
  1563   001EF6  20                 	db	32
  1564   001EF7  68                 	db	104	;'h'
  1565   001EF8  6F                 	db	111	;'o'
  1566   001EF9  72                 	db	114	;'r'
  1567   001EFA  61                 	db	97	;'a'
  1568   001EFB  20                 	db	32
  1569   001EFC  64                 	db	100	;'d'
  1570   001EFD  65                 	db	101	;'e'
  1571   001EFE  6C                 	db	108	;'l'
  1572   001EFF  20                 	db	32
  1573   001F00  73                 	db	115	;'s'
  1574   001F01  69                 	db	105	;'i'
  1575   001F02  73                 	db	115	;'s'
  1576   001F03  74                 	db	116	;'t'
  1577   001F04  65                 	db	101	;'e'
  1578   001F05  6D                 	db	109	;'m'
  1579   001F06  61                 	db	97	;'a'
  1580   001F07  0D                 	db	13
  1581   001F08  0A                 	db	10
  1582   001F09  4F                 	db	79	;'O'
  1583   001F0A  70                 	db	112	;'p'
  1584   001F0B  63                 	db	99	;'c'
  1585   001F0C  69                 	db	105	;'i'
  1586   001F0D  C3                 	db	-61
  1587   001F0E  B3                 	db	-77
  1588   001F0F  3A                 	db	58	;':'
  1589   001F10  20                 	db	32
  1590   001F11  00                 	db	0
  1591   001F12                     STR_8:
  1592   001F12  4D                 	db	77	;'M'
  1593   001F13  65                 	db	101	;'e'
  1594   001F14  6E                 	db	110	;'n'
  1595   001F15  C3                 	db	-61
  1596   001F16  BA                 	db	-70
  1597   001F17  20                 	db	32
  1598   001F18  70                 	db	112	;'p'
  1599   001F19  72                 	db	114	;'r'
  1600   001F1A  69                 	db	105	;'i'
  1601   001F1B  6E                 	db	110	;'n'
  1602   001F1C  63                 	db	99	;'c'
  1603   001F1D  69                 	db	105	;'i'
  1604   001F1E  70                 	db	112	;'p'
  1605   001F1F  61                 	db	97	;'a'
  1606   001F20  6C                 	db	108	;'l'
  1607   001F21  0D                 	db	13
  1608   001F22  0A                 	db	10
  1609   001F23  2D                 	db	45
  1610   001F24  2D                 	db	45
  1611   001F25  2D                 	db	45
  1612   001F26  2D                 	db	45
  1613   001F27  2D                 	db	45
  1614   001F28  2D                 	db	45
  1615   001F29  2D                 	db	45
  1616   001F2A  2D                 	db	45
  1617   001F2B  2D                 	db	45
  1618   001F2C  2D                 	db	45
  1619   001F2D  2D                 	db	45
  1620   001F2E  2D                 	db	45
  1621   001F2F  2D                 	db	45
  1622   001F30  2D                 	db	45
  1623   001F31  2D                 	db	45
  1624   001F32  0D                 	db	13
  1625   001F33  0A                 	db	10
  1626   001F34  54                 	db	84	;'T'
  1627   001F35  72                 	db	114	;'r'
  1628   001F36  69                 	db	105	;'i'
  1629   001F37  61                 	db	97	;'a'
  1630   001F38  20                 	db	32
  1631   001F39  75                 	db	117	;'u'
  1632   001F3A  6E                 	db	110	;'n'
  1633   001F3B  61                 	db	97	;'a'
  1634   001F3C  20                 	db	32
  1635   001F3D  6F                 	db	111	;'o'
  1636   001F3E  70                 	db	112	;'p'
  1637   001F3F  63                 	db	99	;'c'
  1638   001F40  69                 	db	105	;'i'
  1639   001F41  C3                 	db	-61
  1640   001F42  B3                 	db	-77
  1641   001F43  3A                 	db	58	;':'
  1642   001F44  0D                 	db	13
  1643   001F45  0A                 	db	10
  1644   001F46  00                 	db	0
  1645   001F47                     STR_12:
  1646   001F47  4E                 	db	78	;'N'
  1647   001F48  6F                 	db	111	;'o'
  1648   001F49  20                 	db	32
  1649   001F4A  68                 	db	104	;'h'
  1650   001F4B  69                 	db	105	;'i'
  1651   001F4C  20                 	db	32
  1652   001F4D  68                 	db	104	;'h'
  1653   001F4E  61                 	db	97	;'a'
  1654   001F4F  20                 	db	32
  1655   001F50  63                 	db	99	;'c'
  1656   001F51  61                 	db	97	;'a'
  1657   001F52  70                 	db	112	;'p'
  1658   001F53  20                 	db	32
  1659   001F54  75                 	db	117	;'u'
  1660   001F55  73                 	db	115	;'s'
  1661   001F56  75                 	db	117	;'u'
  1662   001F57  61                 	db	97	;'a'
  1663   001F58  72                 	db	114	;'r'
  1664   001F59  69                 	db	105	;'i'
  1665   001F5A  20                 	db	32
  1666   001F5B  61                 	db	97	;'a'
  1667   001F5C  20                 	db	32
  1668   001F5D  6C                 	db	108	;'l'
  1669   001F5E  61                 	db	97	;'a'
  1670   001F5F  20                 	db	32
  1671   001F60  73                 	db	115	;'s'
  1672   001F61  61                 	db	97	;'a'
  1673   001F62  6C                 	db	108	;'l'
  1674   001F63  61                 	db	97	;'a'
  1675   001F64  2E                 	db	46
  1676   001F65  0D                 	db	13
  1677   001F66  0A                 	db	10
  1678   001F67  00                 	db	0
  1679   001F68                     STR_11:
  1680   001F68  45                 	db	69	;'E'
  1681   001F69  52                 	db	82	;'R'
  1682   001F6A  52                 	db	82	;'R'
  1683   001F6B  4F                 	db	79	;'O'
  1684   001F6C  52                 	db	82	;'R'
  1685   001F6D  2E                 	db	46
  1686   001F6E  20                 	db	32
  1687   001F6F  56                 	db	86	;'V'
  1688   001F70  61                 	db	97	;'a'
  1689   001F71  6C                 	db	108	;'l'
  1690   001F72  6F                 	db	111	;'o'
  1691   001F73  72                 	db	114	;'r'
  1692   001F74  20                 	db	32
  1693   001F75  69                 	db	105	;'i'
  1694   001F76  6E                 	db	110	;'n'
  1695   001F77  74                 	db	116	;'t'
  1696   001F78  72                 	db	114	;'r'
  1697   001F79  6F                 	db	111	;'o'
  1698   001F7A  64                 	db	100	;'d'
  1699   001F7B  75                 	db	117	;'u'
  1700   001F7C  69                 	db	105	;'i'
  1701   001F7D  74                 	db	116	;'t'
  1702   001F7E  20                 	db	32
  1703   001F7F  65                 	db	101	;'e'
  1704   001F80  72                 	db	114	;'r'
  1705   001F81  72                 	db	114	;'r'
  1706   001F82  6F                 	db	111	;'o'
  1707   001F83  6E                 	db	110	;'n'
  1708   001F84  69                 	db	105	;'i'
  1709   001F85  2E                 	db	46
  1710   001F86  0D                 	db	13
  1711   001F87  0A                 	db	10
  1712   001F88  00                 	db	0
  1713   001F89                     STR_15:
  1714   001F89  0D                 	db	13
  1715   001F8A  0A                 	db	10
  1716   001F8B  48                 	db	72	;'H'
  1717   001F8C  6F                 	db	111	;'o'
  1718   001F8D  72                 	db	114	;'r'
  1719   001F8E  61                 	db	97	;'a'
  1720   001F8F  20                 	db	32
  1721   001F90  69                 	db	105	;'i'
  1722   001F91  6E                 	db	110	;'n'
  1723   001F92  74                 	db	116	;'t'
  1724   001F93  72                 	db	114	;'r'
  1725   001F94  6F                 	db	111	;'o'
  1726   001F95  64                 	db	100	;'d'
  1727   001F96  75                 	db	117	;'u'
  1728   001F97  69                 	db	105	;'i'
  1729   001F98  64                 	db	100	;'d'
  1730   001F99  61                 	db	97	;'a'
  1731   001F9A  20                 	db	32
  1732   001F9B  63                 	db	99	;'c'
  1733   001F9C  6F                 	db	111	;'o'
  1734   001F9D  72                 	db	114	;'r'
  1735   001F9E  72                 	db	114	;'r'
  1736   001F9F  65                 	db	101	;'e'
  1737   001FA0  63                 	db	99	;'c'
  1738   001FA1  74                 	db	116	;'t'
  1739   001FA2  61                 	db	97	;'a'
  1740   001FA3  6D                 	db	109	;'m'
  1741   001FA4  65                 	db	101	;'e'
  1742   001FA5  6E                 	db	110	;'n'
  1743   001FA6  74                 	db	116	;'t'
  1744   001FA7  0D                 	db	13
  1745   001FA8  0A                 	db	10
  1746   001FA9  00                 	db	0
  1747   001FAA                     STR_14:
  1748   001FAA  49                 	db	73	;'I'
  1749   001FAB  6E                 	db	110	;'n'
  1750   001FAC  74                 	db	116	;'t'
  1751   001FAD  72                 	db	114	;'r'
  1752   001FAE  6F                 	db	111	;'o'
  1753   001FAF  64                 	db	100	;'d'
  1754   001FB0  75                 	db	117	;'u'
  1755   001FB1  63                 	db	99	;'c'
  1756   001FB2  65                 	db	101	;'e'
  1757   001FB3  20                 	db	32
  1758   001FB4  6C                 	db	108	;'l'
  1759   001FB5  61                 	db	97	;'a'
  1760   001FB6  20                 	db	32
  1761   001FB7  68                 	db	104	;'h'
  1762   001FB8  6F                 	db	111	;'o'
  1763   001FB9  72                 	db	114	;'r'
  1764   001FBA  61                 	db	97	;'a'
  1765   001FBB  20                 	db	32
  1766   001FBC  61                 	db	97	;'a'
  1767   001FBD  63                 	db	99	;'c'
  1768   001FBE  74                 	db	116	;'t'
  1769   001FBF  75                 	db	117	;'u'
  1770   001FC0  61                 	db	97	;'a'
  1771   001FC1  6C                 	db	108	;'l'
  1772   001FC2  28                 	db	40
  1773   001FC3  48                 	db	72	;'H'
  1774   001FC4  48                 	db	72	;'H'
  1775   001FC5  4D                 	db	77	;'M'
  1776   001FC6  4D                 	db	77	;'M'
  1777   001FC7  29                 	db	41
  1778   001FC8  3A                 	db	58	;':'
  1779   001FC9  20                 	db	32
  1780   001FCA  00                 	db	0
  1781   001FCB                     STR_18:
  1782   001FCB  54                 	db	84	;'T'
  1783   001FCC  61                 	db	97	;'a'
  1784   001FCD  72                 	db	114	;'r'
  1785   001FCE  67                 	db	103	;'g'
  1786   001FCF  65                 	db	101	;'e'
  1787   001FD0  74                 	db	116	;'t'
  1788   001FD1  61                 	db	97	;'a'
  1789   001FD2  20                 	db	32
  1790   001FD3  64                 	db	100	;'d'
  1791   001FD4  65                 	db	101	;'e'
  1792   001FD5  74                 	db	116	;'t'
  1793   001FD6  65                 	db	101	;'e'
  1794   001FD7  63                 	db	99	;'c'
  1795   001FD8  74                 	db	116	;'t'
  1796   001FD9  61                 	db	97	;'a'
  1797   001FDA  64                 	db	100	;'d'
  1798   001FDB  61                 	db	97	;'a'
  1799   001FDC  21                 	db	33
  1800   001FDD  0D                 	db	13
  1801   001FDE  0A                 	db	10
  1802   001FDF  09                 	db	9
  1803   001FE0  00                 	db	0
  1804   001FE1                     STR_7:
  1805   001FE1  2D                 	db	45
  1806   001FE2  2D                 	db	45
  1807   001FE3  2D                 	db	45
  1808   001FE4  2D                 	db	45
  1809   001FE5  2D                 	db	45
  1810   001FE6  2D                 	db	45
  1811   001FE7  2D                 	db	45
  1812   001FE8  2D                 	db	45
  1813   001FE9  2D                 	db	45
  1814   001FEA  2D                 	db	45
  1815   001FEB  2D                 	db	45
  1816   001FEC  2D                 	db	45
  1817   001FED  2D                 	db	45
  1818   001FEE  2D                 	db	45
  1819   001FEF  2D                 	db	45
  1820   001FF0  0D                 	db	13
  1821   001FF1  0A                 	db	10
  1822   001FF2  00                 	db	0
  1823   001FF3                     STR_1:
  1824   001FF3  55                 	db	85	;'U'
  1825   001FF4  49                 	db	73	;'I'
  1826   001FF5  44                 	db	68	;'D'
  1827   001FF6  3A                 	db	58	;':'
  1828   001FF7  20                 	db	32
  1829   001FF8  00                 	db	0
  1830   001FF9                     STR_5:
  1831   001FF9  20                 	db	32
  1832   001FFA  2D                 	db	45
  1833   001FFB  20                 	db	32
  1834   001FFC  00                 	db	0
  1835   001FFD                     STR_2:
  1836   001FFD  2D                 	db	45
  1837   001FFE  00                 	db	0
  1838   001F0F                     STR_4           equ	STR_9+92
  1839   001FFB                     STR_16          equ	STR_5+2
  1840   001FF0                     STR_3           equ	STR_7+15
  1841   001FF0                     STR_6           equ	STR_7+15
  1842   001FF0                     STR_10          equ	STR_7+15
  1843   001FF0                     STR_13          equ	STR_7+15
  1844   001FF0                     STR_17          equ	STR_7+15
  1845   001FDF                     STR_19          equ	STR_18+20
  1846   001FFF  00                 	db	0	; dummy byte at the end
  1847   001E74                     __smallconst    set	__pmediumconst
  1848   001E74                     __mediumconst   set	__pmediumconst
  1849   000002                     __activetblptr  equ	2
  1850                           
  1851                           ; #config settings
  1852                           
  1853                           	psect	cinit
  1854   0018E0                     __pcinit:
  1855                           	callstack 0
  1856   0018E0                     start_initialization:
  1857                           	callstack 0
  1858   0018E0                     __initialization:
  1859                           	callstack 0
  1860                           
  1861                           ; Initialize objects allocated to BANK0 (94 bytes)
  1862                           ; load TBLPTR registers with __pidataBANK0
  1863   0018E0  0E46               	movlw	low __pidataBANK0
  1864   0018E2  6EF6               	movwf	tblptrl,c
  1865   0018E4  0E19               	movlw	high __pidataBANK0
  1866   0018E6  6EF7               	movwf	tblptrh,c
  1867   0018E8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1868   0018EA  6EF8               	movwf	tblptru,c
  1869   0018EC  EE00  F080         	lfsr	0,__pdataBANK0
  1870   0018F0  EE10 F05E          	lfsr	1,94
  1871   0018F4                     copy_data0:
  1872   0018F4  0009               	tblrd		*+
  1873   0018F6  CFF5 FFEE          	movff	tablat,postinc0
  1874   0018FA  50E5               	movf	postdec1,w,c
  1875   0018FC  50E1               	movf	fsr1l,w,c
  1876   0018FE  E1FA               	bnz	copy_data0
  1877                           
  1878                           ; Initialize objects allocated to COMRAM (13 bytes)
  1879                           ; load TBLPTR registers with __pidataCOMRAM
  1880   001900  0E38               	movlw	low __pidataCOMRAM
  1881   001902  6EF6               	movwf	tblptrl,c
  1882   001904  0E1E               	movlw	high __pidataCOMRAM
  1883   001906  6EF7               	movwf	tblptrh,c
  1884   001908  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1885   00190A  6EF8               	movwf	tblptru,c
  1886   00190C  EE00  F070         	lfsr	0,__pdataCOMRAM
  1887   001910  EE10 F00D          	lfsr	1,13
  1888   001914                     copy_data1:
  1889   001914  0009               	tblrd		*+
  1890   001916  CFF5 FFEE          	movff	tablat,postinc0
  1891   00191A  50E5               	movf	postdec1,w,c
  1892   00191C  50E1               	movf	fsr1l,w,c
  1893   00191E  E1FA               	bnz	copy_data1
  1894                           
  1895                           ; Clear objects allocated to BANK0 (26 bytes)
  1896   001920  EE00  F0DE         	lfsr	0,__pbssBANK0
  1897   001924  0E1A               	movlw	26
  1898   001926                     clear_0:
  1899   001926  6AEE               	clrf	postinc0,c
  1900   001928  06E8               	decf	wreg,f,c
  1901   00192A  E1FD               	bnz	clear_0
  1902                           
  1903                           ; Clear objects allocated to COMRAM (76 bytes)
  1904   00192C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1905   001930  0E4C               	movlw	76
  1906   001932                     clear_1:
  1907   001932  6AEE               	clrf	postinc0,c
  1908   001934  06E8               	decf	wreg,f,c
  1909   001936  E1FD               	bnz	clear_1
  1910   001938                     end_of_initialization:
  1911                           	callstack 0
  1912   001938                     __end_of__initialization:
  1913                           	callstack 0
  1914   001938  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1915   00193A  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1916   00193C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1917   00193E  6EF8               	movwf	tblptru,c
  1918   001940  0100               	movlb	0
  1919   001942  EF6B  F00D         	goto	_main	;jump to C main() function
  1920                           
  1921                           	psect	bssCOMRAM
  1922   000001                     __pbssCOMRAM:
  1923                           	callstack 0
  1924   000001                     motor_RFID@UID:
  1925                           	callstack 0
  1926   000001                     	ds	6
  1927   000007                     motor_LEDs@lastTics:
  1928                           	callstack 0
  1929   000007                     	ds	4
  1930   00000B                     _Tics:
  1931                           	callstack 0
  1932   00000B                     	ds	4
  1933   00000F                     _index:
  1934                           	callstack 0
  1935   00000F                     	ds	2
  1936   000011                     _str_ptr:
  1937                           	callstack 0
  1938   000011                     	ds	2
  1939   000013                     	ds	2
  1940   000015                     motor_Read@timeout_counter:
  1941                           	callstack 0
  1942   000015                     	ds	2
  1943   000017                     setLed@userIndex:
  1944                           	callstack 0
  1945   000017                     	ds	1
  1946   000018                     setLed@ledIndex:
  1947                           	callstack 0
  1948   000018                     	ds	1
  1949   000019                     setLed@modeLED:
  1950                           	callstack 0
  1951   000019                     	ds	1
  1952   00001A                     motor_datos@lastChar:
  1953                           	callstack 0
  1954   00001A                     	ds	1
  1955   00001B                     motor_datos@pointer:
  1956                           	callstack 0
  1957   00001B                     	ds	1
  1958   00001C                     motor_datos@state:
  1959                           	callstack 0
  1960   00001C                     	ds	1
  1961   00001D                     _new_user:
  1962                           	callstack 0
  1963   00001D                     	ds	1
  1964   00001E                     _new_configuration:
  1965                           	callstack 0
  1966   00001E                     	ds	1
  1967   00001F                     motorTerminal@index:
  1968                           	callstack 0
  1969   00001F                     	ds	1
  1970   000020                     motorTerminal@sending_string:
  1971                           	callstack 0
  1972   000020                     	ds	1
  1973   000021                     motorTerminal@state:
  1974                           	callstack 0
  1975   000021                     	ds	1
  1976   000022                     _hashtag_pressed:
  1977                           	callstack 0
  1978   000022                     	ds	1
  1979   000023                     _state_str:
  1980                           	callstack 0
  1981   000023                     	ds	1
  1982   000024                     _ColumnAct:
  1983                           	callstack 0
  1984   000024                     	ds	1
  1985   000025                     _RowAct:
  1986                           	callstack 0
  1987   000025                     	ds	1
  1988   000026                     _Columns:
  1989                           	callstack 0
  1990   000026                     	ds	1
  1991   000027                     _Rows:
  1992                           	callstack 0
  1993   000027                     	ds	1
  1994   000028                     motor_RFID@value:
  1995                           	callstack 0
  1996   000028                     	ds	1
  1997   000029                     motor_RFID@addr:
  1998                           	callstack 0
  1999   000029                     	ds	1
  2000   00002A                     motor_RFID@operation_pending:
  2001                           	callstack 0
  2002   00002A                     	ds	1
  2003   00002B                     motor_RFID@backBitsCalc:
  2004                           	callstack 0
  2005   00002B                     	ds	1
  2006   00002C                     motor_RFID@fifoLevel:
  2007                           	callstack 0
  2008   00002C                     	ds	1
  2009   00002D                     motor_RFID@lastBitsVal:
  2010                           	callstack 0
  2011   00002D                     	ds	1
  2012   00002E                     motor_RFID@tempRegValue:
  2013                           	callstack 0
  2014   00002E                     	ds	1
  2015   00002F                     motor_RFID@allZero:
  2016                           	callstack 0
  2017   00002F                     	ds	1
  2018   000030                     motor_RFID@checksum:
  2019                           	callstack 0
  2020   000030                     	ds	1
  2021   000031                     motor_RFID@TagType:
  2022                           	callstack 0
  2023   000031                     	ds	1
  2024   000032                     	ds	1
  2025   000033                     motor_RFID@i:
  2026                           	callstack 0
  2027   000033                     	ds	1
  2028   000034                     motor_RFID@n:
  2029                           	callstack 0
  2030   000034                     	ds	1
  2031   000035                     motor_RFID@waitIRq:
  2032                           	callstack 0
  2033   000035                     	ds	1
  2034   000036                     motor_RFID@irqEn:
  2035                           	callstack 0
  2036   000036                     	ds	1
  2037   000037                     motor_RFID@substate:
  2038                           	callstack 0
  2039   000037                     	ds	1
  2040   000038                     motor_RFID@state:
  2041                           	callstack 0
  2042   000038                     	ds	1
  2043   000039                     motor_Read@ucResult:
  2044                           	callstack 0
  2045   000039                     	ds	1
  2046   00003A                     _state:
  2047                           	callstack 0
  2048   00003A                     	ds	1
  2049   00003B                     _tecla:
  2050                           	callstack 0
  2051   00003B                     	ds	1
  2052   00003C                     _Columnas:
  2053                           	callstack 0
  2054   00003C                     	ds	1
  2055   00003D                     _Filas:
  2056                           	callstack 0
  2057   00003D                     	ds	1
  2058   00003E                     _currentUser:
  2059                           	callstack 0
  2060   00003E                     	ds	5
  2061   000043                     _timer@TAD_LEDS$F968:
  2062                           	callstack 0
  2063   000043                     	ds	1
  2064   000044                     _Timer:
  2065                           	callstack 0
  2066   000044                     	ds	1
  2067   000045                     motor_Read@ucAddr:
  2068                           	callstack 0
  2069   000045                     	ds	1
  2070   000046                     motor_Read@bit_count:
  2071                           	callstack 0
  2072   000046                     	ds	1
  2073   000047                     motor_Write@ucValue:
  2074                           	callstack 0
  2075   000047                     	ds	1
  2076   000048                     motor_Write@ucAddr:
  2077                           	callstack 0
  2078   000048                     	ds	1
  2079   000049                     motor_Write@bit_count:
  2080                           	callstack 0
  2081   000049                     	ds	1
  2082   00004A                     _state_write:
  2083                           	callstack 0
  2084   00004A                     	ds	1
  2085   00004B                     _state_read:
  2086                           	callstack 0
  2087   00004B                     	ds	1
  2088   00004C                     _timer:
  2089                           	callstack 0
  2090   00004C                     	ds	1
  2091                           
  2092                           	psect	dataCOMRAM
  2093   000070                     __pdataCOMRAM:
  2094                           	callstack 0
  2095   000070                     _currentTime:
  2096                           	callstack 0
  2097   000070                     	ds	4
  2098   000074                     _colValues:
  2099                           	callstack 0
  2100   000074                     	ds	3
  2101   000077                     	ds	2
  2102   000079                     motorTerminal@hour:
  2103                           	callstack 0
  2104   000079                     	ds	4
  2105                           
  2106                           	psect	bssBANK0
  2107   0000DE                     __pbssBANK0:
  2108                           	callstack 0
  2109   0000DE                     _Timers:
  2110                           	callstack 0
  2111   0000DE                     	ds	20
  2112   0000F2                     _ActualLeds:
  2113                           	callstack 0
  2114   0000F2                     	ds	6
  2115                           
  2116                           	psect	dataBANK0
  2117   000080                     __pdataBANK0:
  2118                           	callstack 0
  2119   000080                     _userUIDs:
  2120                           	callstack 0
  2121   000080                     	ds	64
  2122   0000C0                     controlLED@ledBits:
  2123                           	callstack 0
  2124   0000C0                     	ds	6
  2125   0000C6                     _configurations:
  2126                           	callstack 0
  2127   0000C6                     	ds	24
  2128                           
  2129                           	psect	cstackCOMRAM
  2130   00004D                     __pcstackCOMRAM:
  2131                           	callstack 0
  2132   00004D                     ??_LowRSI:
  2133                           
  2134                           ; 1 bytes @ 0x0
  2135   00004D                     	ds	1
  2136   00004E                     ?_Terminal_TXAvailable:
  2137                           	callstack 0
  2138   00004E                     ?_TI_GetTics:
  2139                           	callstack 0
  2140   00004E                     TI_Init@counter:
  2141                           	callstack 0
  2142   00004E                     TI_NewTimer@TimerHandle:
  2143                           	callstack 0
  2144   00004E                     TI_ResetTics@TimerHandle:
  2145                           	callstack 0
  2146   00004E                     delay_us@howMany:
  2147                           	callstack 0
  2148   00004E                     initData@i:
  2149                           	callstack 0
  2150   00004E                     getActualUID@UID:
  2151                           	callstack 0
  2152   00004E                     saveHourToData@hour:
  2153                           	callstack 0
  2154   00004E                     setLEDIntensity@ledIndex:
  2155                           	callstack 0
  2156   00004E                     ??_EscriuPrimeraOrdre:
  2157   00004E                     ??_GetTecla:
  2158   00004E                     ??_CantaPartAlta:
  2159   00004E                     ??_CantaPartBaixa:
  2160   00004E                     
  2161                           ; 1 bytes @ 0x1
  2162   00004E                     	ds	1
  2163   00004F                     delay_us@x:
  2164                           	callstack 0
  2165   00004F                     CantaPartAlta@c:
  2166                           	callstack 0
  2167   00004F                     CantaPartBaixa@c:
  2168                           	callstack 0
  2169   00004F                     EscriuPrimeraOrdre@ordre:
  2170                           	callstack 0
  2171   00004F                     getActualUID@i:
  2172                           	callstack 0
  2173   00004F                     saveHourToData@i:
  2174                           	callstack 0
  2175   00004F                     setLEDIntensity@intensity:
  2176                           	callstack 0
  2177   00004F                     
  2178                           ; 1 bytes @ 0x2
  2179   00004F                     	ds	1
  2180   000050                     TI_NewTimer@Comptador:
  2181                           	callstack 0
  2182   000050                     GetTecla@columna:
  2183                           	callstack 0
  2184   000050                     processBit@val:
  2185                           	callstack 0
  2186   000050                     CantaIR@IR:
  2187                           	callstack 0
  2188   000050                     CantaData@Data:
  2189                           	callstack 0
  2190   000050                     checkUserUID@match:
  2191                           	callstack 0
  2192   000050                     setLEDIntensity@userIndex:
  2193                           	callstack 0
  2194   000050                     ??_Terminal_TXAvailable:
  2195   000050                     
  2196                           ; 1 bytes @ 0x3
  2197   000050                     	ds	1
  2198   000051                     GetTecla@fila:
  2199                           	callstack 0
  2200   000051                     processBit@bit_count:
  2201                           	callstack 0
  2202   000051                     Terminal_SendChar@c:
  2203                           	callstack 0
  2204   000051                     motor_SendChar@c:
  2205                           	callstack 0
  2206   000051                     checkUserUID@i:
  2207                           	callstack 0
  2208   000051                     
  2209                           ; 1 bytes @ 0x4
  2210   000051                     	ds	1
  2211   000052                     processBit@state:
  2212                           	callstack 0
  2213   000052                     checkUserUID@j:
  2214                           	callstack 0
  2215   000052                     Terminal_SendString@str:
  2216                           	callstack 0
  2217   000052                     motor_StartSendString@str:
  2218                           	callstack 0
  2219   000052                     ??_TI_GetTics:
  2220   000052                     
  2221                           ; 1 bytes @ 0x5
  2222   000052                     	ds	1
  2223   000053                     processBit@next_state:
  2224                           	callstack 0
  2225   000053                     setLed@tecla:
  2226                           	callstack 0
  2227   000053                     
  2228                           ; 1 bytes @ 0x6
  2229   000053                     	ds	1
  2230   000054                     printfUID@currentUser:
  2231                           	callstack 0
  2232   000054                     printLedConfig@leds:
  2233                           	callstack 0
  2234   000054                     showAllConfigurations@j:
  2235                           	callstack 0
  2236   000054                     ??_processBit:
  2237   000054                     
  2238                           ; 1 bytes @ 0x7
  2239   000054                     	ds	1
  2240   000055                     motor_Write@value:
  2241                           	callstack 0
  2242   000055                     showAllConfigurations@i:
  2243                           	callstack 0
  2244   000055                     ??_motor_Read:
  2245   000055                     ??_printfUID:
  2246   000055                     ??_printLedConfig:
  2247                           
  2248                           ; 1 bytes @ 0x8
  2249   000055                     	ds	1
  2250   000056                     motor_Write@addr:
  2251                           	callstack 0
  2252   000056                     motor_Read@addr:
  2253                           	callstack 0
  2254   000056                     TI_GetTics@CopiaTicsActual:
  2255                           	callstack 0
  2256   000056                     
  2257                           ; 1 bytes @ 0x9
  2258   000056                     	ds	1
  2259   000057                     _motor_Read$558:
  2260                           	callstack 0
  2261   000057                     printLedConfig@i:
  2262                           	callstack 0
  2263                           
  2264                           ; 2 bytes @ 0xA
  2265   000057                     	ds	1
  2266   000058                     printfUID@i:
  2267                           	callstack 0
  2268                           
  2269                           ; 2 bytes @ 0xB
  2270   000058                     	ds	1
  2271   000059                     initRFID@regVal:
  2272                           	callstack 0
  2273   000059                     
  2274                           ; 1 bytes @ 0xC
  2275   000059                     	ds	1
  2276   00005A                     TI_GetTics@TimerHandle:
  2277                           	callstack 0
  2278   00005A                     setCurrentUser@UID1:
  2279                           	callstack 0
  2280   00005A                     motorTerminal@currentUser:
  2281                           	callstack 0
  2282   00005A                     
  2283                           ; 1 bytes @ 0xD
  2284   00005A                     	ds	1
  2285   00005B                     setCurrentUser@UID2:
  2286                           	callstack 0
  2287   00005B                     Espera@Timer:
  2288                           	callstack 0
  2289   00005B                     
  2290                           ; 1 bytes @ 0xE
  2291   00005B                     	ds	1
  2292   00005C                     setCurrentUser@UID3:
  2293                           	callstack 0
  2294                           
  2295                           ; 1 bytes @ 0xF
  2296   00005C                     	ds	1
  2297   00005D                     setCurrentUser@UID4:
  2298                           	callstack 0
  2299   00005D                     Espera@ms:
  2300                           	callstack 0
  2301                           
  2302                           ; 2 bytes @ 0x10
  2303   00005D                     	ds	1
  2304   00005E                     setCurrentUser@UID0:
  2305                           	callstack 0
  2306   00005E                     
  2307                           ; 1 bytes @ 0x11
  2308   00005E                     	ds	1
  2309   00005F                     motorTerminal@opcion:
  2310                           	callstack 0
  2311   00005F                     ??_motor_RFID:
  2312   00005F                     ??_Espera:
  2313                           
  2314                           ; 1 bytes @ 0x12
  2315   00005F                     	ds	2
  2316   000061                     motor_RFID@differentUID:
  2317                           	callstack 0
  2318                           
  2319                           ; 1 bytes @ 0x14
  2320   000061                     	ds	1
  2321   000062                     motor_RFID@currentUser:
  2322                           	callstack 0
  2323                           
  2324                           ; 5 bytes @ 0x15
  2325   000062                     	ds	1
  2326   000063                     LcInit@columns:
  2327                           	callstack 0
  2328   000063                     LcGotoXY@Row:
  2329                           	callstack 0
  2330   000063                     
  2331                           ; 1 bytes @ 0x16
  2332   000063                     	ds	1
  2333   000064                     LcInit@rows:
  2334                           	callstack 0
  2335   000064                     ??_LcGotoXY:
  2336                           
  2337                           ; 1 bytes @ 0x17
  2338   000064                     	ds	1
  2339   000065                     LcInit@i:
  2340                           	callstack 0
  2341                           
  2342                           ; 2 bytes @ 0x18
  2343   000065                     	ds	1
  2344   000066                     _LcGotoXY$754:
  2345                           	callstack 0
  2346                           
  2347                           ; 2 bytes @ 0x19
  2348   000066                     	ds	1
  2349   000067                     _motor_RFID$589:
  2350                           	callstack 0
  2351                           
  2352                           ; 2 bytes @ 0x1A
  2353   000067                     	ds	1
  2354   000068                     LcGotoXY@Fisics:
  2355                           	callstack 0
  2356                           
  2357                           ; 2 bytes @ 0x1B
  2358   000068                     	ds	1
  2359   000069                     motor_RFID@flag:
  2360                           	callstack 0
  2361                           
  2362                           ; 1 bytes @ 0x1C
  2363   000069                     	ds	1
  2364   00006A                     LcGotoXY@Column:
  2365                           	callstack 0
  2366                           
  2367                           ; 1 bytes @ 0x1D
  2368   00006A                     	ds	1
  2369   00006B                     LcPutChar@c:
  2370                           	callstack 0
  2371   00006B                     
  2372                           ; 1 bytes @ 0x1E
  2373   00006B                     	ds	1
  2374   00006C                     ??_motor_datos:
  2375                           
  2376                           ; 1 bytes @ 0x1F
  2377   00006C                     	ds	1
  2378   00006D                     _motor_datos$948:
  2379                           	callstack 0
  2380                           
  2381                           ; 2 bytes @ 0x20
  2382   00006D                     	ds	2
  2383   00006F                     motor_datos@i:
  2384                           	callstack 0
  2385                           
  2386                           ; 1 bytes @ 0x22
  2387   00006F                     	ds	1
  2388   000070                     
  2389                           ; 1 bytes @ 0x23
  2390 ;;
  2391 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2392 ;;
  2393 ;; *************** function _main *****************
  2394 ;; Defined at:
  2395 ;;		line 39 in file "main.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1
  2409 ;;      Params:         0       0       0
  2410 ;;      Locals:         0       0       0
  2411 ;;      Temps:          0       0       0
  2412 ;;      Totals:         0       0       0
  2413 ;;Total ram usage:        0 bytes
  2414 ;; Hardware stack levels required when called: 9
  2415 ;; This function calls:
  2416 ;;		_LcInit
  2417 ;;		_TI_Init
  2418 ;;		_Terminal_Init
  2419 ;;		_initData
  2420 ;;		_initLeds
  2421 ;;		_initPorts
  2422 ;;		_initRFID
  2423 ;;		_initTeclado
  2424 ;;		_motorTeclado
  2425 ;;		_motorTerminal
  2426 ;;		_motor_RFID
  2427 ;;		_motor_datos
  2428 ;; This function is called by:
  2429 ;;		Startup code after reset
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text0
  2434   001AD6                     __ptext0:
  2435                           	callstack 0
  2436   001AD6                     _main:
  2437                           	callstack 22
  2438   001AD6                     
  2439                           ;main.c: 40:  ADCON1 = 0x0F;
  2440   001AD6  EC03  F00E         	call	_TI_Init	;wreg free
  2441                           
  2442                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2443   001ADA  ECD6  F00E         	call	_initTeclado	;wreg free
  2444                           
  2445                           ;main.c: 42: }
  2446   001ADE  ECDB  F006         	call	_initRFID	;wreg free
  2447   001AE2                     
  2448                           ;main.c: 43: 
  2449   001AE2  EC0D  F00F         	call	_Terminal_Init	;wreg free
  2450   001AE6                     
  2451                           ;main.c: 44: 
  2452   001AE6  EC2E  F00F         	call	_initPorts	;wreg free
  2453                           
  2454                           ;main.c: 45: 
  2455   001AEA  EC15  F00F         	call	_initLeds	;wreg free
  2456                           
  2457                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2458   001AEE  0E10               	movlw	16
  2459   001AF0  6E63               	movwf	LcInit@columns^0,c
  2460   001AF2  0E02               	movlw	2
  2461   001AF4  ECEF  F007         	call	_LcInit
  2462   001AF8                     
  2463                           ;main.c: 47: 
  2464   001AF8  ECA9  F00E         	call	_initData	;wreg free
  2465   001AFC  8EF2               	bsf	242,7,c	;volatile
  2466   001AFE  9CF2               	bcf	242,6,c	;volatile
  2467   001B00                     l4456:
  2468   001B00  EC7D  F005         	call	_motorTeclado	;wreg free
  2469   001B04  EC3D  F004         	call	_motorTerminal	;wreg free
  2470   001B08  EC15  F000         	call	_motor_RFID	;wreg free
  2471   001B0C  EC3F  F006         	call	_motor_datos	;wreg free
  2472   001B10  748D               	btg	141,2,c	;volatile
  2473   001B12  EF80  F00D         	goto	l4456
  2474   001B16  EF13  F000         	goto	start
  2475   001B1A                     __end_of_main:
  2476                           	callstack 0
  2477                           
  2478 ;; *************** function _motor_datos *****************
  2479 ;; Defined at:
  2480 ;;		line 126 in file "TAD_DATOS.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  i               1   34[COMRAM] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1
  2494 ;;      Params:         0       0       0
  2495 ;;      Locals:         3       0       0
  2496 ;;      Temps:          1       0       0
  2497 ;;      Totals:         4       0       0
  2498 ;;Total ram usage:        4 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; Hardware stack levels required when called: 8
  2501 ;; This function calls:
  2502 ;;		_LcPutChar
  2503 ;;		_checkUserUID
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text1
  2510   000C7E                     __ptext1:
  2511                           	callstack 0
  2512   000C7E                     _motor_datos:
  2513                           	callstack 22
  2514   000C7E                     
  2515                           ;TAD_DATOS.c: 127:     static char state = 0;;TAD_DATOS.c: 128:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 129:     static unsigned char lastChar;;TAD_DATOS.c: 131:     switch(s
      +                          tate) {
  2516   000C7E  EFC7  F006         	goto	l4390
  2517   000C82                     l4342:
  2518                           
  2519                           ;TAD_DATOS.c: 133:             if(new_configuration || new_user) {
  2520   000C82  501E               	movf	_new_configuration^0,w,c
  2521   000C84  A4D8               	btfss	status,2,c
  2522   000C86  EF47  F006         	goto	u3461
  2523   000C8A  EF49  F006         	goto	u3460
  2524   000C8E                     u3461:
  2525   000C8E  EF51  F006         	goto	l806
  2526   000C92                     u3460:
  2527   000C92  501D               	movf	_new_user^0,w,c
  2528   000C94  B4D8               	btfsc	status,2,c
  2529   000C96  EF4F  F006         	goto	u3471
  2530   000C9A  EF51  F006         	goto	u3470
  2531   000C9E                     u3471:
  2532   000C9E  EFDA  F006         	goto	l820
  2533   000CA2                     u3470:
  2534   000CA2                     l806:
  2535                           
  2536                           ;TAD_DATOS.c: 134:                 new_configuration = new_user = 0;
  2537   000CA2  6A1D               	clrf	_new_user^0,c
  2538   000CA4  6A1E               	clrf	_new_configuration^0,c
  2539   000CA6                     
  2540                           ;TAD_DATOS.c: 135:                 index = checkUserUID();
  2541   000CA6  EC36  F00A         	call	_checkUserUID	;wreg free
  2542   000CAA  6E6C               	movwf	??_motor_datos^0,c
  2543   000CAC  506C               	movf	??_motor_datos^0,w,c
  2544   000CAE  6E0F               	movwf	_index^0,c
  2545   000CB0  6A10               	clrf	(_index+1)^0,c
  2546   000CB2                     
  2547                           ;TAD_DATOS.c: 136:                 state = 1;
  2548   000CB2  0E01               	movlw	1
  2549   000CB4  6E1C               	movwf	motor_datos@state^0,c
  2550   000CB6  EFDA  F006         	goto	l820
  2551   000CBA                     l808:
  2552                           
  2553                           ;TAD_DATOS.c: 141:             lastChar = currentUser[4];
  2554   000CBA  C042  F01A         	movff	_currentUser+4,motor_datos@lastChar
  2555   000CBE                     
  2556                           ;TAD_DATOS.c: 142:             LcPutChar((lastChar < 10) ? ('0' + lastChar) : ('A' + (la
      +                          stChar - 10)));
  2557   000CBE  0E09               	movlw	9
  2558   000CC0  641A               	cpfsgt	motor_datos@lastChar^0,c
  2559   000CC2  EF65  F006         	goto	u3481
  2560   000CC6  EF67  F006         	goto	u3480
  2561   000CCA                     u3481:
  2562   000CCA  EF6F  F006         	goto	l4354
  2563   000CCE                     u3480:
  2564   000CCE  0E37               	movlw	55
  2565   000CD0  241A               	addwf	motor_datos@lastChar^0,w,c
  2566   000CD2  6E6D               	movwf	_motor_datos$948^0,c
  2567   000CD4  6A6E               	clrf	(_motor_datos$948+1)^0,c
  2568   000CD6  0E00               	movlw	0
  2569   000CD8  226E               	addwfc	(_motor_datos$948+1)^0,f,c
  2570   000CDA  EF75  F006         	goto	l4356
  2571   000CDE                     l4354:
  2572   000CDE  0E30               	movlw	48
  2573   000CE0  241A               	addwf	motor_datos@lastChar^0,w,c
  2574   000CE2  6E6D               	movwf	_motor_datos$948^0,c
  2575   000CE4  6A6E               	clrf	(_motor_datos$948+1)^0,c
  2576   000CE6  0E00               	movlw	0
  2577   000CE8  226E               	addwfc	(_motor_datos$948+1)^0,f,c
  2578   000CEA                     l4356:
  2579   000CEA  506D               	movf	_motor_datos$948^0,w,c
  2580   000CEC  ECDF  F008         	call	_LcPutChar
  2581   000CF0                     
  2582                           ;TAD_DATOS.c: 143:             LcPutChar(' ');
  2583   000CF0  0E20               	movlw	32
  2584   000CF2  ECDF  F008         	call	_LcPutChar
  2585   000CF6                     
  2586                           ;TAD_DATOS.c: 144:             state = 2;
  2587   000CF6  0E02               	movlw	2
  2588   000CF8  6E1C               	movwf	motor_datos@state^0,c
  2589                           
  2590                           ;TAD_DATOS.c: 145:             break;
  2591   000CFA  EFDA  F006         	goto	l820
  2592   000CFE                     l813:
  2593                           
  2594                           ;TAD_DATOS.c: 148:             for(char i = 0; i < 4; i++) {
  2595   000CFE  6A6F               	clrf	motor_datos@i^0,c
  2596   000D00                     l4366:
  2597                           
  2598                           ;TAD_DATOS.c: 149:                 LcPutChar(currentTime[i]);
  2599   000D00  506F               	movf	motor_datos@i^0,w,c
  2600   000D02  0F70               	addlw	low _currentTime
  2601   000D04  6ED9               	movwf	fsr2l,c
  2602   000D06  6ADA               	clrf	fsr2h,c
  2603   000D08  50DF               	movf	indf2,w,c
  2604   000D0A  ECDF  F008         	call	_LcPutChar
  2605   000D0E                     
  2606                           ;TAD_DATOS.c: 150:                 if(i == 1) LcPutChar(':');
  2607   000D0E  046F               	decf	motor_datos@i^0,w,c
  2608   000D10  A4D8               	btfss	status,2,c
  2609   000D12  EF8D  F006         	goto	u3491
  2610   000D16  EF8F  F006         	goto	u3490
  2611   000D1A                     u3491:
  2612   000D1A  EF92  F006         	goto	l4372
  2613   000D1E                     u3490:
  2614   000D1E  0E3A               	movlw	58
  2615   000D20  ECDF  F008         	call	_LcPutChar
  2616   000D24                     l4372:
  2617                           
  2618                           ;TAD_DATOS.c: 151:             }
  2619   000D24  2A6F               	incf	motor_datos@i^0,f,c
  2620   000D26  0E03               	movlw	3
  2621   000D28  646F               	cpfsgt	motor_datos@i^0,c
  2622   000D2A  EF99  F006         	goto	u3501
  2623   000D2E  EF9B  F006         	goto	u3500
  2624   000D32                     u3501:
  2625   000D32  EF80  F006         	goto	l4366
  2626   000D36                     u3500:
  2627   000D36                     
  2628                           ;TAD_DATOS.c: 152:             LcPutChar(' ');
  2629   000D36  0E20               	movlw	32
  2630   000D38  ECDF  F008         	call	_LcPutChar
  2631   000D3C                     
  2632                           ;TAD_DATOS.c: 153:             pointer = 0;
  2633   000D3C  6A1B               	clrf	motor_datos@pointer^0,c
  2634   000D3E                     
  2635                           ;TAD_DATOS.c: 154:             state = 3;
  2636   000D3E  0E03               	movlw	3
  2637   000D40  6E1C               	movwf	motor_datos@state^0,c
  2638                           
  2639                           ;TAD_DATOS.c: 155:             break;
  2640   000D42  EFDA  F006         	goto	l820
  2641   000D46                     l4382:
  2642                           
  2643                           ;TAD_DATOS.c: 158:             if(pointer < 6) {
  2644   000D46  0E06               	movlw	6
  2645   000D48  601B               	cpfslt	motor_datos@pointer^0,c
  2646   000D4A  EFA9  F006         	goto	u3511
  2647   000D4E  EFAB  F006         	goto	u3510
  2648   000D52                     u3511:
  2649   000D52  EFC3  F006         	goto	l818
  2650   000D56                     u3510:
  2651   000D56                     
  2652                           ;TAD_DATOS.c: 159:                 LcPutChar('1' + pointer);
  2653   000D56  501B               	movf	motor_datos@pointer^0,w,c
  2654   000D58  0F31               	addlw	49
  2655   000D5A  ECDF  F008         	call	_LcPutChar
  2656                           
  2657                           ;TAD_DATOS.c: 160:                 LcPutChar('-');
  2658   000D5E  0E2D               	movlw	45
  2659   000D60  ECDF  F008         	call	_LcPutChar
  2660                           
  2661                           ;TAD_DATOS.c: 161:                 LcPutChar('0' + configurations[index][pointer]);
  2662   000D64  500F               	movf	_index^0,w,c
  2663   000D66  0D06               	mullw	6
  2664   000D68  50F3               	movf	243,w,c
  2665   000D6A  0FC6               	addlw	low _configurations
  2666   000D6C  241B               	addwf	motor_datos@pointer^0,w,c
  2667   000D6E  6ED9               	movwf	fsr2l,c
  2668   000D70  6ADA               	clrf	fsr2h,c
  2669   000D72  50DF               	movf	indf2,w,c
  2670   000D74  0F30               	addlw	48
  2671   000D76  ECDF  F008         	call	_LcPutChar
  2672                           
  2673                           ;TAD_DATOS.c: 162:                 LcPutChar(' ');
  2674   000D7A  0E20               	movlw	32
  2675   000D7C  ECDF  F008         	call	_LcPutChar
  2676   000D80                     
  2677                           ;TAD_DATOS.c: 163:                 pointer++;
  2678   000D80  2A1B               	incf	motor_datos@pointer^0,f,c
  2679                           
  2680                           ;TAD_DATOS.c: 164:             } else {
  2681   000D82  EFDA  F006         	goto	l820
  2682   000D86                     l818:
  2683                           
  2684                           ;TAD_DATOS.c: 165:                 pointer = 0;
  2685   000D86  6A1B               	clrf	motor_datos@pointer^0,c
  2686                           
  2687                           ;TAD_DATOS.c: 166:                 state = 0;
  2688   000D88  6A1C               	clrf	motor_datos@state^0,c
  2689   000D8A  EFDA  F006         	goto	l820
  2690   000D8E                     l4390:
  2691   000D8E  501C               	movf	motor_datos@state^0,w,c
  2692                           
  2693                           ; Switch size 1, requested type "simple"
  2694                           ; Number of cases is 4, Range of values is 0 to 3
  2695                           ; switch strategies available:
  2696                           ; Name         Instructions Cycles
  2697                           ; simple_byte           13     7 (average)
  2698                           ;	Chosen strategy is simple_byte
  2699   000D90  0A00               	xorlw	0	; case 0
  2700   000D92  B4D8               	btfsc	status,2,c
  2701   000D94  EF41  F006         	goto	l4342
  2702   000D98  0A01               	xorlw	1	; case 1
  2703   000D9A  B4D8               	btfsc	status,2,c
  2704   000D9C  EF5D  F006         	goto	l808
  2705   000DA0  0A03               	xorlw	3	; case 2
  2706   000DA2  B4D8               	btfsc	status,2,c
  2707   000DA4  EF7F  F006         	goto	l813
  2708   000DA8  0A01               	xorlw	1	; case 3
  2709   000DAA  B4D8               	btfsc	status,2,c
  2710   000DAC  EFA3  F006         	goto	l4382
  2711   000DB0  EFDA  F006         	goto	l820
  2712   000DB4                     l820:
  2713   000DB4  0012               	return		;funcret
  2714   000DB6                     __end_of_motor_datos:
  2715                           	callstack 0
  2716                           
  2717 ;; *************** function _LcPutChar *****************
  2718 ;; Defined at:
  2719 ;;		line 156 in file "TAD_DISPLAY.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  c               1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  c               1   30[COMRAM] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1
  2733 ;;      Params:         0       0       0
  2734 ;;      Locals:         1       0       0
  2735 ;;      Temps:          0       0       0
  2736 ;;      Totals:         1       0       0
  2737 ;;Total ram usage:        1 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 7
  2740 ;; This function calls:
  2741 ;;		_CantaData
  2742 ;;		_LcGotoXY
  2743 ;;		_WaitForBusy
  2744 ;; This function is called by:
  2745 ;;		_motor_datos
  2746 ;;		_LcPutString
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text2
  2751   0011BE                     __ptext2:
  2752                           	callstack 0
  2753   0011BE                     _LcPutChar:
  2754                           	callstack 22
  2755                           
  2756                           ;incstack = 0
  2757                           ;LcPutChar@c stored from wreg
  2758   0011BE  6E6B               	movwf	LcPutChar@c^0,c
  2759   0011C0                     
  2760                           ;TAD_DISPLAY.c: 166:  WaitForBusy(); CantaData(c);
  2761   0011C0  EC03  F00F         	call	_WaitForBusy	;wreg free
  2762   0011C4  506B               	movf	LcPutChar@c^0,w,c
  2763   0011C6  EC1D  F00E         	call	_CantaData
  2764   0011CA                     
  2765                           ;TAD_DISPLAY.c: 168:  ++ColumnAct;
  2766   0011CA  2A24               	incf	_ColumnAct^0,f,c
  2767   0011CC                     
  2768                           ;TAD_DISPLAY.c: 169:  if (Rows == 3) {
  2769   0011CC  0E03               	movlw	3
  2770   0011CE  1827               	xorwf	_Rows^0,w,c
  2771   0011D0  A4D8               	btfss	status,2,c
  2772   0011D2  EFED  F008         	goto	u2571
  2773   0011D6  EFEF  F008         	goto	u2570
  2774   0011DA                     u2571:
  2775   0011DA  EF09  F009         	goto	l3632
  2776   0011DE                     u2570:
  2777   0011DE                     
  2778                           ;TAD_DISPLAY.c: 170:   if (ColumnAct >= 20) {
  2779   0011DE  0E13               	movlw	19
  2780   0011E0  6424               	cpfsgt	_ColumnAct^0,c
  2781   0011E2  EFF5  F008         	goto	u2581
  2782   0011E6  EFF7  F008         	goto	u2580
  2783   0011EA                     u2581:
  2784   0011EA  EF42  F009         	goto	l561
  2785   0011EE                     u2580:
  2786   0011EE                     
  2787                           ;TAD_DISPLAY.c: 171:    ColumnAct = 0;
  2788   0011EE  6A24               	clrf	_ColumnAct^0,c
  2789   0011F0                     
  2790                           ;TAD_DISPLAY.c: 172:    if (++RowAct >= 4) RowAct = 0;
  2791   0011F0  2A25               	incf	_RowAct^0,f,c
  2792   0011F2  0E03               	movlw	3
  2793   0011F4  6425               	cpfsgt	_RowAct^0,c
  2794   0011F6  EFFF  F008         	goto	u2591
  2795   0011FA  EF01  F009         	goto	u2590
  2796   0011FE                     u2591:
  2797   0011FE  EF02  F009         	goto	l3630
  2798   001202                     u2590:
  2799   001202  6A25               	clrf	_RowAct^0,c
  2800   001204                     l3630:
  2801                           
  2802                           ;TAD_DISPLAY.c: 173:    LcGotoXY(ColumnAct, RowAct);
  2803   001204  C025  F063         	movff	_RowAct,LcGotoXY@Row
  2804   001208  5024               	movf	_ColumnAct^0,w,c
  2805   00120A  EC6B  F008         	call	_LcGotoXY
  2806   00120E  EF42  F009         	goto	l561
  2807   001212                     l3632:
  2808                           
  2809                           ;TAD_DISPLAY.c: 176:  if (Rows == 2) {
  2810   001212  0E02               	movlw	2
  2811   001214  1827               	xorwf	_Rows^0,w,c
  2812   001216  A4D8               	btfss	status,2,c
  2813   001218  EF10  F009         	goto	u2601
  2814   00121C  EF12  F009         	goto	u2600
  2815   001220                     u2601:
  2816   001220  EF2C  F009         	goto	l3644
  2817   001224                     u2600:
  2818   001224                     
  2819                           ;TAD_DISPLAY.c: 177:   if (ColumnAct >= 40) {
  2820   001224  0E27               	movlw	39
  2821   001226  6424               	cpfsgt	_ColumnAct^0,c
  2822   001228  EF18  F009         	goto	u2611
  2823   00122C  EF1A  F009         	goto	u2610
  2824   001230                     u2611:
  2825   001230  EF42  F009         	goto	l561
  2826   001234                     u2610:
  2827   001234                     
  2828                           ;TAD_DISPLAY.c: 178:    ColumnAct = 0;
  2829   001234  6A24               	clrf	_ColumnAct^0,c
  2830   001236                     
  2831                           ;TAD_DISPLAY.c: 179:    if (++RowAct >= 2) RowAct = 0;
  2832   001236  2A25               	incf	_RowAct^0,f,c
  2833   001238  0E01               	movlw	1
  2834   00123A  6425               	cpfsgt	_RowAct^0,c
  2835   00123C  EF22  F009         	goto	u2621
  2836   001240  EF24  F009         	goto	u2620
  2837   001244                     u2621:
  2838   001244  EF25  F009         	goto	l3642
  2839   001248                     u2620:
  2840   001248  6A25               	clrf	_RowAct^0,c
  2841   00124A                     l3642:
  2842                           
  2843                           ;TAD_DISPLAY.c: 180:    LcGotoXY(ColumnAct, RowAct);
  2844   00124A  C025  F063         	movff	_RowAct,LcGotoXY@Row
  2845   00124E  5024               	movf	_ColumnAct^0,w,c
  2846   001250  EC6B  F008         	call	_LcGotoXY
  2847   001254  EF42  F009         	goto	l561
  2848   001258                     l3644:
  2849                           
  2850                           ;TAD_DISPLAY.c: 183:  if (RowAct == 1) {
  2851   001258  0425               	decf	_RowAct^0,w,c
  2852   00125A  A4D8               	btfss	status,2,c
  2853   00125C  EF32  F009         	goto	u2631
  2854   001260  EF34  F009         	goto	u2630
  2855   001264                     u2631:
  2856   001264  EF42  F009         	goto	l561
  2857   001268                     u2630:
  2858   001268                     
  2859                           ;TAD_DISPLAY.c: 184:   if (ColumnAct >= 40) ColumnAct = 0;
  2860   001268  0E27               	movlw	39
  2861   00126A  6424               	cpfsgt	_ColumnAct^0,c
  2862   00126C  EF3A  F009         	goto	u2641
  2863   001270  EF3C  F009         	goto	u2640
  2864   001274                     u2641:
  2865   001274  EF3D  F009         	goto	l3650
  2866   001278                     u2640:
  2867   001278  6A24               	clrf	_ColumnAct^0,c
  2868   00127A                     l3650:
  2869                           
  2870                           ;TAD_DISPLAY.c: 185:   LcGotoXY(ColumnAct, RowAct);
  2871   00127A  C025  F063         	movff	_RowAct,LcGotoXY@Row
  2872   00127E  5024               	movf	_ColumnAct^0,w,c
  2873   001280  EC6B  F008         	call	_LcGotoXY
  2874   001284                     l561:
  2875   001284  0012               	return		;funcret
  2876   001286                     __end_of_LcPutChar:
  2877                           	callstack 0
  2878                           
  2879 ;; *************** function _LcGotoXY *****************
  2880 ;; Defined at:
  2881 ;;		line 129 in file "TAD_DISPLAY.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  Column          1    wreg     unsigned char 
  2884 ;;  Row             1   22[COMRAM] unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  Column          1   29[COMRAM] unsigned char 
  2887 ;;  Fisics          2   27[COMRAM] int 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1
  2897 ;;      Params:         1       0       0
  2898 ;;      Locals:         5       0       0
  2899 ;;      Temps:          2       0       0
  2900 ;;      Totals:         8       0       0
  2901 ;;Total ram usage:        8 bytes
  2902 ;; Hardware stack levels used: 1
  2903 ;; Hardware stack levels required when called: 6
  2904 ;; This function calls:
  2905 ;;		_CantaIR
  2906 ;;		_WaitForBusy
  2907 ;; This function is called by:
  2908 ;;		_LcPutChar
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text3
  2913   0010D6                     __ptext3:
  2914                           	callstack 0
  2915   0010D6                     _LcGotoXY:
  2916                           	callstack 22
  2917                           
  2918                           ;incstack = 0
  2919                           ;LcGotoXY@Column stored from wreg
  2920   0010D6  6E6A               	movwf	LcGotoXY@Column^0,c
  2921   0010D8                     
  2922                           ;TAD_DISPLAY.c: 133:  int Fisics;;TAD_DISPLAY.c: 135:  switch (Rows) {
  2923   0010D8  EFC5  F008         	goto	l3282
  2924   0010DC                     l3260:
  2925                           
  2926                           ;TAD_DISPLAY.c: 137:    Fisics = Column + (!Row ? 0 : 0x40); break;
  2927   0010DC  5063               	movf	LcGotoXY@Row^0,w,c
  2928   0010DE  B4D8               	btfsc	status,2,c
  2929   0010E0  EF74  F008         	goto	u2261
  2930   0010E4  EF76  F008         	goto	u2260
  2931   0010E8                     u2261:
  2932   0010E8  EF7C  F008         	goto	l3264
  2933   0010EC                     u2260:
  2934   0010EC  0E00               	movlw	0
  2935   0010EE  6E67               	movwf	(_LcGotoXY$754+1)^0,c
  2936   0010F0  0E40               	movlw	64
  2937   0010F2  6E66               	movwf	_LcGotoXY$754^0,c
  2938   0010F4  EF80  F008         	goto	l3266
  2939   0010F8                     l3264:
  2940   0010F8  0E00               	movlw	0
  2941   0010FA  6E67               	movwf	(_LcGotoXY$754+1)^0,c
  2942   0010FC  0E00               	movlw	0
  2943   0010FE  6E66               	movwf	_LcGotoXY$754^0,c
  2944   001100                     l3266:
  2945   001100  506A               	movf	LcGotoXY@Column^0,w,c
  2946   001102  2466               	addwf	_LcGotoXY$754^0,w,c
  2947   001104  6E68               	movwf	LcGotoXY@Fisics^0,c
  2948   001106  0E00               	movlw	0
  2949   001108  2067               	addwfc	(_LcGotoXY$754+1)^0,w,c
  2950   00110A  6E69               	movwf	(LcGotoXY@Fisics+1)^0,c
  2951   00110C  EFD4  F008         	goto	l3284
  2952   001110                     l540:
  2953                           
  2954                           ;TAD_DISPLAY.c: 139:    Fisics = Column;
  2955   001110  C06A  F068         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2956   001114  6A69               	clrf	(LcGotoXY@Fisics+1)^0,c
  2957   001116                     
  2958                           ;TAD_DISPLAY.c: 140:    if (Row == 1) Fisics += 0x40; else
  2959   001116  0463               	decf	LcGotoXY@Row^0,w,c
  2960   001118  A4D8               	btfss	status,2,c
  2961   00111A  EF91  F008         	goto	u2271
  2962   00111E  EF93  F008         	goto	u2270
  2963   001122                     u2271:
  2964   001122  EF99  F008         	goto	l3272
  2965   001126                     u2270:
  2966   001126  0E40               	movlw	64
  2967   001128  2668               	addwf	LcGotoXY@Fisics^0,f,c
  2968   00112A  0E00               	movlw	0
  2969   00112C  2269               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2970   00112E  EFD4  F008         	goto	l3284
  2971   001132                     l3272:
  2972                           
  2973                           ;TAD_DISPLAY.c: 141:    if (Row == 2) Fisics += Columns; else
  2974   001132  0E02               	movlw	2
  2975   001134  1863               	xorwf	LcGotoXY@Row^0,w,c
  2976   001136  A4D8               	btfss	status,2,c
  2977   001138  EFA0  F008         	goto	u2281
  2978   00113C  EFA2  F008         	goto	u2280
  2979   001140                     u2281:
  2980   001140  EFA8  F008         	goto	l3276
  2981   001144                     u2280:
  2982   001144  5026               	movf	_Columns^0,w,c
  2983   001146  2668               	addwf	LcGotoXY@Fisics^0,f,c
  2984   001148  0E00               	movlw	0
  2985   00114A  2269               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2986   00114C  EFD4  F008         	goto	l3284
  2987   001150                     l3276:
  2988                           
  2989                           ;TAD_DISPLAY.c: 142:    if (Row == 3) Fisics += 0x40+Columns;
  2990   001150  0E03               	movlw	3
  2991   001152  1863               	xorwf	LcGotoXY@Row^0,w,c
  2992   001154  A4D8               	btfss	status,2,c
  2993   001156  EFAF  F008         	goto	u2291
  2994   00115A  EFB1  F008         	goto	u2290
  2995   00115E                     u2291:
  2996   00115E  EFBE  F008         	goto	l542
  2997   001162                     u2290:
  2998   001162  5026               	movf	_Columns^0,w,c
  2999   001164  6E64               	movwf	??_LcGotoXY^0,c
  3000   001166  6A65               	clrf	(??_LcGotoXY+1)^0,c
  3001   001168  0E40               	movlw	64
  3002   00116A  2664               	addwf	??_LcGotoXY^0,f,c
  3003   00116C  0E00               	movlw	0
  3004   00116E  2265               	addwfc	(??_LcGotoXY+1)^0,f,c
  3005   001170  5064               	movf	??_LcGotoXY^0,w,c
  3006   001172  2668               	addwf	LcGotoXY@Fisics^0,f,c
  3007   001174  5065               	movf	(??_LcGotoXY+1)^0,w,c
  3008   001176  2269               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  3009   001178  EFD4  F008         	goto	l3284
  3010   00117C                     l542:
  3011                           
  3012                           ;TAD_DISPLAY.c: 143:    break;
  3013   00117C  EFD4  F008         	goto	l3284
  3014   001180                     l547:
  3015                           
  3016                           ;TAD_DISPLAY.c: 146:    Fisics = Column; break;
  3017   001180  C06A  F068         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  3018   001184  6A69               	clrf	(LcGotoXY@Fisics+1)^0,c
  3019   001186  EFD4  F008         	goto	l3284
  3020   00118A                     l3282:
  3021   00118A  5027               	movf	_Rows^0,w,c
  3022                           
  3023                           ; Switch size 1, requested type "simple"
  3024                           ; Number of cases is 3, Range of values is 1 to 4
  3025                           ; switch strategies available:
  3026                           ; Name         Instructions Cycles
  3027                           ; simple_byte           10     6 (average)
  3028                           ;	Chosen strategy is simple_byte
  3029   00118C  0A01               	xorlw	1	; case 1
  3030   00118E  B4D8               	btfsc	status,2,c
  3031   001190  EFC0  F008         	goto	l547
  3032   001194  0A03               	xorlw	3	; case 2
  3033   001196  B4D8               	btfsc	status,2,c
  3034   001198  EF6E  F008         	goto	l3260
  3035   00119C  0A06               	xorlw	6	; case 4
  3036   00119E  B4D8               	btfsc	status,2,c
  3037   0011A0  EF88  F008         	goto	l540
  3038   0011A4  EFC0  F008         	goto	l547
  3039   0011A8                     l3284:
  3040                           
  3041                           ;TAD_DISPLAY.c: 149:  WaitForBusy();
  3042   0011A8  EC03  F00F         	call	_WaitForBusy	;wreg free
  3043   0011AC                     
  3044                           ;TAD_DISPLAY.c: 150:  CantaIR(0x80 | Fisics);
  3045   0011AC  5068               	movf	LcGotoXY@Fisics^0,w,c
  3046   0011AE  0980               	iorlw	128
  3047   0011B0  EC36  F00E         	call	_CantaIR
  3048   0011B4                     
  3049                           ;TAD_DISPLAY.c: 152:  RowAct = Row;
  3050   0011B4  C063  F025         	movff	LcGotoXY@Row,_RowAct
  3051   0011B8                     
  3052                           ;TAD_DISPLAY.c: 153:  ColumnAct = Column;
  3053   0011B8  C06A  F024         	movff	LcGotoXY@Column,_ColumnAct
  3054   0011BC  0012               	return		;funcret
  3055   0011BE                     __end_of_LcGotoXY:
  3056                           	callstack 0
  3057                           
  3058 ;; *************** function _CantaData *****************
  3059 ;; Defined at:
  3060 ;;		line 240 in file "TAD_DISPLAY.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  Data            1    wreg     unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  Data            1    3[COMRAM] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1
  3074 ;;      Params:         0       0       0
  3075 ;;      Locals:         1       0       0
  3076 ;;      Temps:          0       0       0
  3077 ;;      Totals:         1       0       0
  3078 ;;Total ram usage:        1 bytes
  3079 ;; Hardware stack levels used: 1
  3080 ;; Hardware stack levels required when called: 4
  3081 ;; This function calls:
  3082 ;;		_CantaPartAlta
  3083 ;;		_CantaPartBaixa
  3084 ;; This function is called by:
  3085 ;;		_LcPutChar
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text4
  3090   001C3A                     __ptext4:
  3091                           	callstack 0
  3092   001C3A                     _CantaData:
  3093                           	callstack 24
  3094                           
  3095                           ;incstack = 0
  3096                           ;CantaData@Data stored from wreg
  3097   001C3A  6E50               	movwf	CantaData@Data^0,c
  3098   001C3C                     
  3099                           ;TAD_DISPLAY.c: 241:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  3100   001C3C  9096               	bcf	150,0,c	;volatile
  3101   001C3E  9296               	bcf	150,1,c	;volatile
  3102   001C40  9A93               	bcf	147,5,c	;volatile
  3103   001C42  9893               	bcf	147,4,c	;volatile
  3104                           
  3105                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB3 = 1);
  3106   001C44  868A               	bsf	138,3,c	;volatile
  3107                           
  3108                           ;TAD_DISPLAY.c: 243:  (LATBbits.LATB2 = 0);
  3109   001C46  948A               	bcf	138,2,c	;volatile
  3110                           
  3111                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3112   001C48  828A               	bsf	138,1,c	;volatile
  3113   001C4A                     
  3114                           ;TAD_DISPLAY.c: 245:  CantaPartAlta(Data);
  3115   001C4A  5050               	movf	CantaData@Data^0,w,c
  3116   001C4C  EC47  F00B         	call	_CantaPartAlta
  3117   001C50                     
  3118                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 1);
  3119   001C50  828A               	bsf	138,1,c	;volatile
  3120   001C52                     
  3121                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 0);
  3122   001C52  928A               	bcf	138,1,c	;volatile
  3123   001C54                     
  3124                           ;TAD_DISPLAY.c: 248:  (LATBbits.LATB1 = 0);
  3125   001C54  928A               	bcf	138,1,c	;volatile
  3126   001C56                     
  3127                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3128   001C56  828A               	bsf	138,1,c	;volatile
  3129                           
  3130                           ;TAD_DISPLAY.c: 250:  CantaPartBaixa(Data);
  3131   001C58  5050               	movf	CantaData@Data^0,w,c
  3132   001C5A  EC05  F00B         	call	_CantaPartBaixa
  3133   001C5E                     
  3134                           ;TAD_DISPLAY.c: 251:  (LATBbits.LATB1 = 1);
  3135   001C5E  828A               	bsf	138,1,c	;volatile
  3136   001C60                     
  3137                           ;TAD_DISPLAY.c: 252:  (LATBbits.LATB1 = 0);
  3138   001C60  928A               	bcf	138,1,c	;volatile
  3139   001C62                     
  3140                           ;TAD_DISPLAY.c: 253:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3141   001C62  8096               	bsf	150,0,c	;volatile
  3142   001C64  8296               	bsf	150,1,c	;volatile
  3143   001C66  8A93               	bsf	147,5,c	;volatile
  3144   001C68  8893               	bsf	147,4,c	;volatile
  3145   001C6A  0012               	return		;funcret
  3146   001C6C                     __end_of_CantaData:
  3147                           	callstack 0
  3148                           
  3149 ;; *************** function _motor_RFID *****************
  3150 ;; Defined at:
  3151 ;;		line 283 in file "TAD_RFID.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  currentUser     5   21[COMRAM] unsigned char [5]
  3156 ;;  differentUID    1   20[COMRAM] unsigned char 
  3157 ;;  flag            1   28[COMRAM] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1
  3167 ;;      Params:         0       0       0
  3168 ;;      Locals:         9       0       0
  3169 ;;      Temps:          2       0       0
  3170 ;;      Totals:        11       0       0
  3171 ;;Total ram usage:       11 bytes
  3172 ;; Hardware stack levels used: 1
  3173 ;; Hardware stack levels required when called: 8
  3174 ;; This function calls:
  3175 ;;		_getActualUID
  3176 ;;		_motor_Read
  3177 ;;		_motor_Write
  3178 ;;		_setCurrentUser
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text5
  3185   00002A                     __ptext5:
  3186                           	callstack 0
  3187   00002A                     _motor_RFID:
  3188                           	callstack 22
  3189   00002A                     
  3190                           ;TAD_RFID.c: 306:     if (operation_pending == 1) {
  3191   00002A  042A               	decf	motor_RFID@operation_pending^0,w,c
  3192   00002C  A4D8               	btfss	status,2,c
  3193   00002E  EF1B  F000         	goto	u3061
  3194   000032  EF1D  F000         	goto	u3060
  3195   000036                     u3061:
  3196   000036  EF2F  F000         	goto	l4020
  3197   00003A                     u3060:
  3198   00003A                     
  3199                           ;TAD_RFID.c: 308:         flag = motor_Read(addr);
  3200   00003A  5029               	movf	motor_RFID@addr^0,w,c
  3201   00003C  EC66  F007         	call	_motor_Read
  3202   000040  6E69               	movwf	motor_RFID@flag^0,c
  3203   000042                     
  3204                           ;TAD_RFID.c: 309:         if (flag != 0xFE) {
  3205   000042  0EFE               	movlw	254
  3206   000044  1869               	xorwf	motor_RFID@flag^0,w,c
  3207   000046  B4D8               	btfsc	status,2,c
  3208   000048  EF28  F000         	goto	u3071
  3209   00004C  EF2A  F000         	goto	u3070
  3210   000050                     u3071:
  3211   000050  EF3C  F004         	goto	l360
  3212   000054                     u3070:
  3213   000054                     
  3214                           ;TAD_RFID.c: 310:             tempRegValue = flag;
  3215   000054  C069  F02E         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3216                           
  3217                           ;TAD_RFID.c: 311:             operation_pending = 0;
  3218   000058  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3219                           
  3220                           ;TAD_RFID.c: 312:         } else {
  3221   00005A  EF3C  F004         	goto	l360
  3222   00005E                     l4020:
  3223   00005E  0E02               	movlw	2
  3224   000060  182A               	xorwf	motor_RFID@operation_pending^0,w,c
  3225   000062  A4D8               	btfss	status,2,c
  3226   000064  EF36  F000         	goto	u3081
  3227   000068  EF38  F000         	goto	u3080
  3228   00006C                     u3081:
  3229   00006C  EF31  F004         	goto	l4338
  3230   000070                     u3080:
  3231   000070                     
  3232                           ;TAD_RFID.c: 317:         flag = motor_Write(addr, value);
  3233   000070  C028  F055         	movff	motor_RFID@value,motor_Write@value
  3234   000074  5029               	movf	motor_RFID@addr^0,w,c
  3235   000076  ECC1  F00A         	call	_motor_Write
  3236   00007A  6E69               	movwf	motor_RFID@flag^0,c
  3237   00007C                     
  3238                           ;TAD_RFID.c: 318:         if (flag != 0) {
  3239   00007C  5069               	movf	motor_RFID@flag^0,w,c
  3240   00007E  B4D8               	btfsc	status,2,c
  3241   000080  EF44  F000         	goto	u3091
  3242   000084  EF46  F000         	goto	u3090
  3243   000088                     u3091:
  3244   000088  EF3C  F004         	goto	l360
  3245   00008C                     u3090:
  3246   00008C                     
  3247                           ;TAD_RFID.c: 319:             operation_pending = 0;
  3248   00008C  6A2A               	clrf	motor_RFID@operation_pending^0,c
  3249                           
  3250                           ;TAD_RFID.c: 320:         } else {
  3251   00008E  EF3C  F004         	goto	l360
  3252   000092                     l4028:
  3253                           
  3254                           ;TAD_RFID.c: 330:                         addr = 0x0D;
  3255   000092  0E0D               	movlw	13
  3256   000094  6E29               	movwf	motor_RFID@addr^0,c
  3257                           
  3258                           ;TAD_RFID.c: 331:                         value = 0x07;
  3259   000096  0E07               	movlw	7
  3260   000098  6E28               	movwf	motor_RFID@value^0,c
  3261                           
  3262                           ;TAD_RFID.c: 332:                         operation_pending = 2;
  3263   00009A  0E02               	movlw	2
  3264   00009C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3265                           
  3266                           ;TAD_RFID.c: 333:                         substate = 1;
  3267   00009E  0E01               	movlw	1
  3268   0000A0  6E37               	movwf	motor_RFID@substate^0,c
  3269                           
  3270                           ;TAD_RFID.c: 334:                         break;
  3271   0000A2  EF3C  F004         	goto	l360
  3272   0000A6                     l4030:
  3273                           
  3274                           ;TAD_RFID.c: 336:                         TagType = 0x26;
  3275   0000A6  0E26               	movlw	38
  3276   0000A8  6E31               	movwf	motor_RFID@TagType^0,c
  3277                           
  3278                           ;TAD_RFID.c: 337:                         irqEn = 0x77;
  3279   0000AA  0E77               	movlw	119
  3280   0000AC  6E36               	movwf	motor_RFID@irqEn^0,c
  3281                           
  3282                           ;TAD_RFID.c: 338:                         waitIRq = 0x30;
  3283   0000AE  0E30               	movlw	48
  3284   0000B0  6E35               	movwf	motor_RFID@waitIRq^0,c
  3285                           
  3286                           ;TAD_RFID.c: 339:                         addr = 0x02;
  3287   0000B2  0E02               	movlw	2
  3288   0000B4  6E29               	movwf	motor_RFID@addr^0,c
  3289   0000B6                     
  3290                           ;TAD_RFID.c: 340:                         value = irqEn | 0x80;
  3291   0000B6  5036               	movf	motor_RFID@irqEn^0,w,c
  3292   0000B8  0980               	iorlw	128
  3293   0000BA  6E28               	movwf	motor_RFID@value^0,c
  3294   0000BC                     
  3295                           ;TAD_RFID.c: 341:                         operation_pending = 2;
  3296   0000BC  0E02               	movlw	2
  3297   0000BE  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3298   0000C0                     
  3299                           ;TAD_RFID.c: 342:                         substate = 2;
  3300   0000C0  0E02               	movlw	2
  3301   0000C2  6E37               	movwf	motor_RFID@substate^0,c
  3302                           
  3303                           ;TAD_RFID.c: 343:                         break;
  3304   0000C4  EF3C  F004         	goto	l360
  3305   0000C8                     l4038:
  3306                           
  3307                           ;TAD_RFID.c: 345:                         addr = 0x04;
  3308   0000C8  0E04               	movlw	4
  3309   0000CA  6E29               	movwf	motor_RFID@addr^0,c
  3310                           
  3311                           ;TAD_RFID.c: 346:                         operation_pending = 1;
  3312   0000CC  0E01               	movlw	1
  3313   0000CE  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3314                           
  3315                           ;TAD_RFID.c: 347:                         substate = 3;
  3316   0000D0  0E03               	movlw	3
  3317   0000D2  6E37               	movwf	motor_RFID@substate^0,c
  3318                           
  3319                           ;TAD_RFID.c: 348:                         break;
  3320   0000D4  EF3C  F004         	goto	l360
  3321   0000D8                     l4040:
  3322                           
  3323                           ;TAD_RFID.c: 350:                         if (tempRegValue == 0xFF) {
  3324   0000D8  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3325   0000DA  A4D8               	btfss	status,2,c
  3326   0000DC  EF72  F000         	goto	u3101
  3327   0000E0  EF74  F000         	goto	u3100
  3328   0000E4                     u3101:
  3329   0000E4  EF77  F000         	goto	l4044
  3330   0000E8                     u3100:
  3331   0000E8                     l4042:
  3332                           
  3333                           ;TAD_RFID.c: 351:                             substate = 0;
  3334   0000E8  6A37               	clrf	motor_RFID@substate^0,c
  3335                           
  3336                           ;TAD_RFID.c: 352:                         } else {
  3337   0000EA  EF3C  F004         	goto	l360
  3338   0000EE                     l4044:
  3339                           
  3340                           ;TAD_RFID.c: 353:                             addr = 0x02;
  3341   0000EE  0E02               	movlw	2
  3342   0000F0  6E29               	movwf	motor_RFID@addr^0,c
  3343   0000F2                     
  3344                           ;TAD_RFID.c: 354:                             value = tempRegValue & ~0x80;
  3345   0000F2  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3346   0000F4  0B7F               	andlw	127
  3347   0000F6  6E28               	movwf	motor_RFID@value^0,c
  3348   0000F8                     l4048:
  3349                           
  3350                           ;TAD_RFID.c: 355:                             operation_pending = 2;
  3351   0000F8  0E02               	movlw	2
  3352   0000FA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3353   0000FC                     
  3354                           ;TAD_RFID.c: 356:                             substate = 4;
  3355   0000FC  0E04               	movlw	4
  3356   0000FE  6E37               	movwf	motor_RFID@substate^0,c
  3357   000100  EF3C  F004         	goto	l360
  3358   000104                     l4052:
  3359                           
  3360                           ;TAD_RFID.c: 360:                         addr = 0x0A;
  3361   000104  0E0A               	movlw	10
  3362   000106  6E29               	movwf	motor_RFID@addr^0,c
  3363                           
  3364                           ;TAD_RFID.c: 361:                         operation_pending = 1;
  3365   000108  0E01               	movlw	1
  3366   00010A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3367                           
  3368                           ;TAD_RFID.c: 362:                         substate = 5;
  3369   00010C  0E05               	movlw	5
  3370   00010E  6E37               	movwf	motor_RFID@substate^0,c
  3371                           
  3372                           ;TAD_RFID.c: 363:                         break;
  3373   000110  EF3C  F004         	goto	l360
  3374   000114                     l4054:
  3375                           
  3376                           ;TAD_RFID.c: 365:                         if (tempRegValue == 0xFF) {
  3377   000114  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3378   000116  A4D8               	btfss	status,2,c
  3379   000118  EF90  F000         	goto	u3111
  3380   00011C  EF92  F000         	goto	u3110
  3381   000120                     u3111:
  3382   000120  EF94  F000         	goto	l4058
  3383   000124                     u3110:
  3384   000124  EF74  F000         	goto	l4042
  3385   000128                     l4058:
  3386                           
  3387                           ;TAD_RFID.c: 368:                             addr = 0x0A;
  3388   000128  0E0A               	movlw	10
  3389   00012A  6E29               	movwf	motor_RFID@addr^0,c
  3390   00012C                     
  3391                           ;TAD_RFID.c: 369:                             value = tempRegValue | 0x80;
  3392   00012C  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3393   00012E  0980               	iorlw	128
  3394   000130  6E28               	movwf	motor_RFID@value^0,c
  3395   000132                     l4062:
  3396                           
  3397                           ;TAD_RFID.c: 370:                             operation_pending = 2;
  3398   000132  0E02               	movlw	2
  3399   000134  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3400   000136                     
  3401                           ;TAD_RFID.c: 371:                             substate = 6;
  3402   000136  0E06               	movlw	6
  3403   000138  6E37               	movwf	motor_RFID@substate^0,c
  3404   00013A  EF3C  F004         	goto	l360
  3405   00013E                     l4066:
  3406                           
  3407                           ;TAD_RFID.c: 375:                         addr = 0x01;
  3408   00013E  0E01               	movlw	1
  3409   000140  6E29               	movwf	motor_RFID@addr^0,c
  3410   000142                     
  3411                           ;TAD_RFID.c: 376:                         value = 0x00;
  3412   000142  6A28               	clrf	motor_RFID@value^0,c
  3413                           
  3414                           ;TAD_RFID.c: 377:                         operation_pending = 2;
  3415   000144  0E02               	movlw	2
  3416   000146  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3417                           
  3418                           ;TAD_RFID.c: 378:                         substate = 7;
  3419   000148  0E07               	movlw	7
  3420   00014A  6E37               	movwf	motor_RFID@substate^0,c
  3421                           
  3422                           ;TAD_RFID.c: 379:                         break;
  3423   00014C  EF3C  F004         	goto	l360
  3424   000150                     l4070:
  3425                           
  3426                           ;TAD_RFID.c: 381:                         addr = 0x09;
  3427   000150  0E09               	movlw	9
  3428   000152  6E29               	movwf	motor_RFID@addr^0,c
  3429   000154                     
  3430                           ;TAD_RFID.c: 382:                         value = TagType;
  3431   000154  C031  F028         	movff	motor_RFID@TagType,motor_RFID@value
  3432                           
  3433                           ;TAD_RFID.c: 383:                         operation_pending = 2;
  3434   000158  0E02               	movlw	2
  3435   00015A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3436                           
  3437                           ;TAD_RFID.c: 384:                         substate = 8;
  3438   00015C  0E08               	movlw	8
  3439   00015E  6E37               	movwf	motor_RFID@substate^0,c
  3440                           
  3441                           ;TAD_RFID.c: 385:                         break;
  3442   000160  EF3C  F004         	goto	l360
  3443   000164                     l4074:
  3444                           
  3445                           ;TAD_RFID.c: 387:                         addr = 0x01;
  3446   000164  0E01               	movlw	1
  3447   000166  6E29               	movwf	motor_RFID@addr^0,c
  3448                           
  3449                           ;TAD_RFID.c: 388:                         value = 0x0C;
  3450   000168  0E0C               	movlw	12
  3451   00016A  6E28               	movwf	motor_RFID@value^0,c
  3452                           
  3453                           ;TAD_RFID.c: 389:                         operation_pending = 2;
  3454   00016C  0E02               	movlw	2
  3455   00016E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3456                           
  3457                           ;TAD_RFID.c: 390:                         substate = 9;
  3458   000170  0E09               	movlw	9
  3459   000172  6E37               	movwf	motor_RFID@substate^0,c
  3460                           
  3461                           ;TAD_RFID.c: 391:                         break;
  3462   000174  EF3C  F004         	goto	l360
  3463   000178                     l4076:
  3464                           
  3465                           ;TAD_RFID.c: 393:                         addr = 0x0D;
  3466   000178  0E0D               	movlw	13
  3467   00017A  6E29               	movwf	motor_RFID@addr^0,c
  3468                           
  3469                           ;TAD_RFID.c: 394:                         operation_pending = 1;
  3470   00017C  0E01               	movlw	1
  3471   00017E  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3472                           
  3473                           ;TAD_RFID.c: 395:                         substate = 10;
  3474   000180  0E0A               	movlw	10
  3475   000182  6E37               	movwf	motor_RFID@substate^0,c
  3476                           
  3477                           ;TAD_RFID.c: 396:                         break;
  3478   000184  EF3C  F004         	goto	l360
  3479   000188                     l4078:
  3480                           
  3481                           ;TAD_RFID.c: 398:                         if (tempRegValue == 0xFF) {
  3482   000188  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3483   00018A  A4D8               	btfss	status,2,c
  3484   00018C  EFCA  F000         	goto	u3121
  3485   000190  EFCC  F000         	goto	u3120
  3486   000194                     u3121:
  3487   000194  EFCE  F000         	goto	l4082
  3488   000198                     u3120:
  3489   000198  EF74  F000         	goto	l4042
  3490   00019C                     l4082:
  3491                           
  3492                           ;TAD_RFID.c: 401:                             addr = 0x0D;
  3493   00019C  0E0D               	movlw	13
  3494   00019E  6E29               	movwf	motor_RFID@addr^0,c
  3495   0001A0                     
  3496                           ;TAD_RFID.c: 402:                             value = tempRegValue | 0x80;
  3497   0001A0  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3498   0001A2  0980               	iorlw	128
  3499   0001A4  6E28               	movwf	motor_RFID@value^0,c
  3500   0001A6                     
  3501                           ;TAD_RFID.c: 403:                             operation_pending = 2;
  3502   0001A6  0E02               	movlw	2
  3503   0001A8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3504   0001AA                     
  3505                           ;TAD_RFID.c: 404:                             substate = 11;
  3506   0001AA  0E0B               	movlw	11
  3507   0001AC  6E37               	movwf	motor_RFID@substate^0,c
  3508   0001AE  EF3C  F004         	goto	l360
  3509   0001B2                     l387:
  3510                           
  3511                           ;TAD_RFID.c: 408:                         i = 0xFF;
  3512   0001B2  6833               	setf	motor_RFID@i^0,c
  3513   0001B4                     
  3514                           ;TAD_RFID.c: 409:                         addr = 0x04;
  3515   0001B4  0E04               	movlw	4
  3516   0001B6  6E29               	movwf	motor_RFID@addr^0,c
  3517                           
  3518                           ;TAD_RFID.c: 410:                         operation_pending = 1;
  3519   0001B8  0E01               	movlw	1
  3520   0001BA  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3521                           
  3522                           ;TAD_RFID.c: 411:                         substate = 12;
  3523   0001BC  0E0C               	movlw	12
  3524   0001BE  6E37               	movwf	motor_RFID@substate^0,c
  3525                           
  3526                           ;TAD_RFID.c: 412:                         break;
  3527   0001C0  EF3C  F004         	goto	l360
  3528   0001C4                     l4092:
  3529                           
  3530                           ;TAD_RFID.c: 414:                         if (tempRegValue == 0xFF) {
  3531   0001C4  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3532   0001C6  A4D8               	btfss	status,2,c
  3533   0001C8  EFE8  F000         	goto	u3131
  3534   0001CC  EFEA  F000         	goto	u3130
  3535   0001D0                     u3131:
  3536   0001D0  EFEC  F000         	goto	l389
  3537   0001D4                     u3130:
  3538   0001D4  EF74  F000         	goto	l4042
  3539   0001D8                     l389:
  3540                           
  3541                           ;TAD_RFID.c: 417:                             n = tempRegValue;
  3542   0001D8  C02E  F034         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3543                           
  3544                           ;TAD_RFID.c: 418:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3545   0001DC  B034               	btfsc	motor_RFID@n^0,0,c
  3546   0001DE  EFF3  F000         	goto	u3141
  3547   0001E2  EFF5  F000         	goto	u3140
  3548   0001E6                     u3141:
  3549   0001E6  EF02  F001         	goto	l4100
  3550   0001EA                     u3140:
  3551   0001EA  5034               	movf	motor_RFID@n^0,w,c
  3552   0001EC  1435               	andwf	motor_RFID@waitIRq^0,w,c
  3553   0001EE  0900               	iorlw	0
  3554   0001F0  A4D8               	btfss	status,2,c
  3555   0001F2  EFFD  F000         	goto	u3151
  3556   0001F6  EFFF  F000         	goto	u3150
  3557   0001FA                     u3151:
  3558   0001FA  EF02  F001         	goto	l4100
  3559   0001FE                     u3150:
  3560   0001FE  2E33               	decfsz	motor_RFID@i^0,f,c
  3561   000200  EF0A  F001         	goto	l4102
  3562   000204                     l4100:
  3563                           
  3564                           ;TAD_RFID.c: 419:                                 addr = 0x0D;
  3565   000204  0E0D               	movlw	13
  3566   000206  6E29               	movwf	motor_RFID@addr^0,c
  3567                           
  3568                           ;TAD_RFID.c: 420:                                 operation_pending = 1;
  3569   000208  0E01               	movlw	1
  3570   00020A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3571                           
  3572                           ;TAD_RFID.c: 421:                                 substate = 13;
  3573   00020C  0E0D               	movlw	13
  3574   00020E  6E37               	movwf	motor_RFID@substate^0,c
  3575                           
  3576                           ;TAD_RFID.c: 422:                             } else {
  3577   000210  EF3C  F004         	goto	l360
  3578   000214                     l4102:
  3579                           
  3580                           ;TAD_RFID.c: 423:                                 addr = 0x04;
  3581   000214  0E04               	movlw	4
  3582   000216  6E29               	movwf	motor_RFID@addr^0,c
  3583                           
  3584                           ;TAD_RFID.c: 424:                                 operation_pending = 1;
  3585   000218  0E01               	movlw	1
  3586   00021A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3587   00021C  EF3C  F004         	goto	l360
  3588   000220                     l4104:
  3589                           
  3590                           ;TAD_RFID.c: 430:                         if (tempRegValue == 0xFF) {
  3591   000220  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3592   000222  A4D8               	btfss	status,2,c
  3593   000224  EF16  F001         	goto	u3161
  3594   000228  EF18  F001         	goto	u3160
  3595   00022C                     u3161:
  3596   00022C  EF1A  F001         	goto	l4108
  3597   000230                     u3160:
  3598   000230  EF74  F000         	goto	l4042
  3599   000234                     l4108:
  3600   000234  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3601   000236  B4D8               	btfsc	status,2,c
  3602   000238  EF20  F001         	goto	u3171
  3603   00023C  EF22  F001         	goto	u3170
  3604   000240                     u3171:
  3605   000240  EF2D  F001         	goto	l4118
  3606   000244                     u3170:
  3607   000244                     
  3608                           ;TAD_RFID.c: 433:                             addr = 0x0D;
  3609   000244  0E0D               	movlw	13
  3610   000246  6E29               	movwf	motor_RFID@addr^0,c
  3611   000248                     
  3612                           ;TAD_RFID.c: 434:                             value = tempRegValue & ~0x80;
  3613   000248  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3614   00024A  0B7F               	andlw	127
  3615   00024C  6E28               	movwf	motor_RFID@value^0,c
  3616   00024E                     l4114:
  3617                           
  3618                           ;TAD_RFID.c: 435:                             operation_pending = 2;
  3619   00024E  0E02               	movlw	2
  3620   000250  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3621   000252                     
  3622                           ;TAD_RFID.c: 436:                             substate = 14;
  3623   000252  0E0E               	movlw	14
  3624   000254  6E37               	movwf	motor_RFID@substate^0,c
  3625                           
  3626                           ;TAD_RFID.c: 437:                         } else {
  3627   000256  EF3C  F004         	goto	l360
  3628   00025A                     l4118:
  3629                           
  3630                           ;TAD_RFID.c: 438:                             addr = 0x0D;
  3631   00025A  0E0D               	movlw	13
  3632   00025C  6E29               	movwf	motor_RFID@addr^0,c
  3633                           
  3634                           ;TAD_RFID.c: 439:                             operation_pending = 1;
  3635   00025E  0E01               	movlw	1
  3636   000260  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3637   000262  EF3C  F004         	goto	l360
  3638   000266                     l4120:
  3639                           
  3640                           ;TAD_RFID.c: 444:                         addr = 0x06;
  3641   000266  0E06               	movlw	6
  3642   000268  6E29               	movwf	motor_RFID@addr^0,c
  3643                           
  3644                           ;TAD_RFID.c: 445:                         operation_pending = 1;
  3645   00026A  0E01               	movlw	1
  3646   00026C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3647                           
  3648                           ;TAD_RFID.c: 446:                         substate = 15;
  3649   00026E  0E0F               	movlw	15
  3650   000270  6E37               	movwf	motor_RFID@substate^0,c
  3651                           
  3652                           ;TAD_RFID.c: 447:                         break;
  3653   000272  EF3C  F004         	goto	l360
  3654   000276                     l4122:
  3655                           
  3656                           ;TAD_RFID.c: 449:                         if (tempRegValue == 0xFF) {
  3657   000276  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3658   000278  A4D8               	btfss	status,2,c
  3659   00027A  EF41  F001         	goto	u3181
  3660   00027E  EF43  F001         	goto	u3180
  3661   000282                     u3181:
  3662   000282  EF45  F001         	goto	l4126
  3663   000286                     u3180:
  3664   000286  EF74  F000         	goto	l4042
  3665   00028A                     l4126:
  3666   00028A  5033               	movf	motor_RFID@i^0,w,c
  3667   00028C  B4D8               	btfsc	status,2,c
  3668   00028E  EF4B  F001         	goto	u3191
  3669   000292  EF4D  F001         	goto	u3190
  3670   000296                     u3191:
  3671   000296  EF60  F001         	goto	l404
  3672   00029A                     u3190:
  3673   00029A  C02E  F05F         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3674   00029E  0E1B               	movlw	27
  3675   0002A0  165F               	andwf	??_motor_RFID^0,f,c
  3676   0002A2  A4D8               	btfss	status,2,c
  3677   0002A4  EF56  F001         	goto	u3201
  3678   0002A8  EF58  F001         	goto	u3200
  3679   0002AC                     u3201:
  3680   0002AC  EF60  F001         	goto	l404
  3681   0002B0                     u3200:
  3682   0002B0                     
  3683                           ;TAD_RFID.c: 452:                             addr = 0x0A;
  3684   0002B0  0E0A               	movlw	10
  3685   0002B2  6E29               	movwf	motor_RFID@addr^0,c
  3686                           
  3687                           ;TAD_RFID.c: 453:                             operation_pending = 1;
  3688   0002B4  0E01               	movlw	1
  3689   0002B6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3690                           
  3691                           ;TAD_RFID.c: 454:                             substate = 16;
  3692   0002B8  0E10               	movlw	16
  3693   0002BA  6E37               	movwf	motor_RFID@substate^0,c
  3694                           
  3695                           ;TAD_RFID.c: 455:                         } else {
  3696   0002BC  EF3C  F004         	goto	l360
  3697   0002C0                     l404:
  3698                           
  3699                           ;TAD_RFID.c: 456:                             state = substate = 0;
  3700   0002C0  6A37               	clrf	motor_RFID@substate^0,c
  3701   0002C2  6A38               	clrf	motor_RFID@state^0,c
  3702   0002C4  EF3C  F004         	goto	l360
  3703   0002C8                     l4132:
  3704                           
  3705                           ;TAD_RFID.c: 460:                         if (tempRegValue == 0xFF) {
  3706   0002C8  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3707   0002CA  A4D8               	btfss	status,2,c
  3708   0002CC  EF6A  F001         	goto	u3211
  3709   0002D0  EF6C  F001         	goto	u3210
  3710   0002D4                     u3211:
  3711   0002D4  EF6E  F001         	goto	l407
  3712   0002D8                     u3210:
  3713   0002D8  EF74  F000         	goto	l4042
  3714   0002DC                     l407:
  3715                           
  3716                           ;TAD_RFID.c: 463:                             fifoLevel = tempRegValue;
  3717   0002DC  C02E  F02C         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3718   0002E0                     
  3719                           ;TAD_RFID.c: 464:                             addr = 0x0C;
  3720   0002E0  0E0C               	movlw	12
  3721   0002E2  6E29               	movwf	motor_RFID@addr^0,c
  3722                           
  3723                           ;TAD_RFID.c: 465:                             operation_pending = 1;
  3724   0002E4  0E01               	movlw	1
  3725   0002E6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3726                           
  3727                           ;TAD_RFID.c: 466:                             substate = 17;
  3728   0002E8  0E11               	movlw	17
  3729   0002EA  6E37               	movwf	motor_RFID@substate^0,c
  3730   0002EC  EF3C  F004         	goto	l360
  3731   0002F0                     l4138:
  3732                           
  3733                           ;TAD_RFID.c: 470:                         if (tempRegValue == 0xFF) {
  3734   0002F0  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3735   0002F2  A4D8               	btfss	status,2,c
  3736   0002F4  EF7E  F001         	goto	u3221
  3737   0002F8  EF80  F001         	goto	u3220
  3738   0002FC                     u3221:
  3739   0002FC  EF82  F001         	goto	l4142
  3740   000300                     u3220:
  3741   000300  EF74  F000         	goto	l4042
  3742   000304                     l4142:
  3743                           
  3744                           ;TAD_RFID.c: 473:                             lastBitsVal = tempRegValue & 0x07;
  3745   000304  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3746   000306  0B07               	andlw	7
  3747   000308  6E2D               	movwf	motor_RFID@lastBitsVal^0,c
  3748   00030A                     
  3749                           ;TAD_RFID.c: 474:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3750   00030A  502D               	movf	motor_RFID@lastBitsVal^0,w,c
  3751   00030C  A4D8               	btfss	status,2,c
  3752   00030E  EF8B  F001         	goto	u3231
  3753   000312  EF8D  F001         	goto	u3230
  3754   000316                     u3231:
  3755   000316  EF95  F001         	goto	l4148
  3756   00031A                     u3230:
  3757   00031A  502C               	movf	motor_RFID@fifoLevel^0,w,c
  3758   00031C  0D08               	mullw	8
  3759   00031E  CFF3 F067          	movff	prodl,_motor_RFID$589
  3760   000322  CFF4 F068          	movff	prodh,_motor_RFID$589+1
  3761   000326  EFAB  F001         	goto	l4150
  3762   00032A                     l4148:
  3763   00032A  502D               	movf	motor_RFID@lastBitsVal^0,w,c
  3764   00032C  C02C  F05F         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3765   000330  6A60               	clrf	(??_motor_RFID+1)^0,c
  3766   000332  90D8               	bcf	status,0,c
  3767   000334  365F               	rlcf	??_motor_RFID^0,f,c
  3768   000336  3660               	rlcf	(??_motor_RFID+1)^0,f,c
  3769   000338  90D8               	bcf	status,0,c
  3770   00033A  365F               	rlcf	??_motor_RFID^0,f,c
  3771   00033C  3660               	rlcf	(??_motor_RFID+1)^0,f,c
  3772   00033E  90D8               	bcf	status,0,c
  3773   000340  365F               	rlcf	??_motor_RFID^0,f,c
  3774   000342  3660               	rlcf	(??_motor_RFID+1)^0,f,c
  3775   000344  265F               	addwf	??_motor_RFID^0,f,c
  3776   000346  0E00               	movlw	0
  3777   000348  2260               	addwfc	(??_motor_RFID+1)^0,f,c
  3778   00034A  0EF8               	movlw	248
  3779   00034C  245F               	addwf	??_motor_RFID^0,w,c
  3780   00034E  6E67               	movwf	_motor_RFID$589^0,c
  3781   000350  0EFF               	movlw	255
  3782   000352  2060               	addwfc	(??_motor_RFID+1)^0,w,c
  3783   000354  6E68               	movwf	(_motor_RFID$589+1)^0,c
  3784   000356                     l4150:
  3785   000356  C067  F02B         	movff	_motor_RFID$589,motor_RFID@backBitsCalc
  3786                           
  3787                           ;TAD_RFID.c: 475:                             if (backBitsCalc == 0x10) {
  3788   00035A  0E10               	movlw	16
  3789   00035C  182B               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3790   00035E  A4D8               	btfss	status,2,c
  3791   000360  EFB4  F001         	goto	u3241
  3792   000364  EFB6  F001         	goto	u3240
  3793   000368                     u3241:
  3794   000368  EF60  F001         	goto	l404
  3795   00036C                     u3240:
  3796   00036C                     
  3797                           ;TAD_RFID.c: 476:                                 state = 1;
  3798   00036C  0E01               	movlw	1
  3799   00036E  6E38               	movwf	motor_RFID@state^0,c
  3800   000370  EF74  F000         	goto	l4042
  3801   000374                     l4158:
  3802   000374  5037               	movf	motor_RFID@substate^0,w,c
  3803                           
  3804                           ; Switch size 1, requested type "simple"
  3805                           ; Number of cases is 18, Range of values is 0 to 17
  3806                           ; switch strategies available:
  3807                           ; Name         Instructions Cycles
  3808                           ; simple_byte           55    28 (average)
  3809                           ;	Chosen strategy is simple_byte
  3810   000376  0A00               	xorlw	0	; case 0
  3811   000378  B4D8               	btfsc	status,2,c
  3812   00037A  EF49  F000         	goto	l4028
  3813   00037E  0A01               	xorlw	1	; case 1
  3814   000380  B4D8               	btfsc	status,2,c
  3815   000382  EF53  F000         	goto	l4030
  3816   000386  0A03               	xorlw	3	; case 2
  3817   000388  B4D8               	btfsc	status,2,c
  3818   00038A  EF64  F000         	goto	l4038
  3819   00038E  0A01               	xorlw	1	; case 3
  3820   000390  B4D8               	btfsc	status,2,c
  3821   000392  EF6C  F000         	goto	l4040
  3822   000396  0A07               	xorlw	7	; case 4
  3823   000398  B4D8               	btfsc	status,2,c
  3824   00039A  EF82  F000         	goto	l4052
  3825   00039E  0A01               	xorlw	1	; case 5
  3826   0003A0  B4D8               	btfsc	status,2,c
  3827   0003A2  EF8A  F000         	goto	l4054
  3828   0003A6  0A03               	xorlw	3	; case 6
  3829   0003A8  B4D8               	btfsc	status,2,c
  3830   0003AA  EF9F  F000         	goto	l4066
  3831   0003AE  0A01               	xorlw	1	; case 7
  3832   0003B0  B4D8               	btfsc	status,2,c
  3833   0003B2  EFA8  F000         	goto	l4070
  3834   0003B6  0A0F               	xorlw	15	; case 8
  3835   0003B8  B4D8               	btfsc	status,2,c
  3836   0003BA  EFB2  F000         	goto	l4074
  3837   0003BE  0A01               	xorlw	1	; case 9
  3838   0003C0  B4D8               	btfsc	status,2,c
  3839   0003C2  EFBC  F000         	goto	l4076
  3840   0003C6  0A03               	xorlw	3	; case 10
  3841   0003C8  B4D8               	btfsc	status,2,c
  3842   0003CA  EFC4  F000         	goto	l4078
  3843   0003CE  0A01               	xorlw	1	; case 11
  3844   0003D0  B4D8               	btfsc	status,2,c
  3845   0003D2  EFD9  F000         	goto	l387
  3846   0003D6  0A07               	xorlw	7	; case 12
  3847   0003D8  B4D8               	btfsc	status,2,c
  3848   0003DA  EFE2  F000         	goto	l4092
  3849   0003DE  0A01               	xorlw	1	; case 13
  3850   0003E0  B4D8               	btfsc	status,2,c
  3851   0003E2  EF10  F001         	goto	l4104
  3852   0003E6  0A03               	xorlw	3	; case 14
  3853   0003E8  B4D8               	btfsc	status,2,c
  3854   0003EA  EF33  F001         	goto	l4120
  3855   0003EE  0A01               	xorlw	1	; case 15
  3856   0003F0  B4D8               	btfsc	status,2,c
  3857   0003F2  EF3B  F001         	goto	l4122
  3858   0003F6  0A1F               	xorlw	31	; case 16
  3859   0003F8  B4D8               	btfsc	status,2,c
  3860   0003FA  EF64  F001         	goto	l4132
  3861   0003FE  0A01               	xorlw	1	; case 17
  3862   000400  B4D8               	btfsc	status,2,c
  3863   000402  EF78  F001         	goto	l4138
  3864   000406  EF3C  F004         	goto	l360
  3865   00040A                     l4160:
  3866                           
  3867                           ;TAD_RFID.c: 489:                         addr = 0x0D;
  3868   00040A  0E0D               	movlw	13
  3869   00040C  6E29               	movwf	motor_RFID@addr^0,c
  3870   00040E                     
  3871                           ;TAD_RFID.c: 490:                         value = 0x00;
  3872   00040E  6A28               	clrf	motor_RFID@value^0,c
  3873                           
  3874                           ;TAD_RFID.c: 491:                         operation_pending = 2;
  3875   000410  0E02               	movlw	2
  3876   000412  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3877                           
  3878                           ;TAD_RFID.c: 492:                         substate = 1;
  3879   000414  0E01               	movlw	1
  3880   000416  6E37               	movwf	motor_RFID@substate^0,c
  3881                           
  3882                           ;TAD_RFID.c: 493:                         break;
  3883   000418  EF3C  F004         	goto	l360
  3884   00041C                     l4164:
  3885                           
  3886                           ;TAD_RFID.c: 495:                         UID[0] = 0x93;
  3887   00041C  0E93               	movlw	147
  3888   00041E  6E01               	movwf	motor_RFID@UID^0,c
  3889                           
  3890                           ;TAD_RFID.c: 496:                         UID[1] = 0x20;
  3891   000420  0E20               	movlw	32
  3892   000422  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3893                           
  3894                           ;TAD_RFID.c: 497:                         addr = 0x08;
  3895   000424  0E08               	movlw	8
  3896   000426  6E29               	movwf	motor_RFID@addr^0,c
  3897                           
  3898                           ;TAD_RFID.c: 498:                         operation_pending = 1;
  3899   000428  0E01               	movlw	1
  3900   00042A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3901                           
  3902                           ;TAD_RFID.c: 499:                         substate = 2;
  3903   00042C  0E02               	movlw	2
  3904   00042E  6E37               	movwf	motor_RFID@substate^0,c
  3905                           
  3906                           ;TAD_RFID.c: 500:                         break;
  3907   000430  EF3C  F004         	goto	l360
  3908   000434                     l4166:
  3909                           
  3910                           ;TAD_RFID.c: 502:                         if (tempRegValue == 0xFF) {
  3911   000434  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3912   000436  A4D8               	btfss	status,2,c
  3913   000438  EF20  F002         	goto	u3251
  3914   00043C  EF22  F002         	goto	u3250
  3915   000440                     u3251:
  3916   000440  EF24  F002         	goto	l4170
  3917   000444                     u3250:
  3918   000444  EF60  F001         	goto	l404
  3919   000448                     l4170:
  3920                           
  3921                           ;TAD_RFID.c: 505:                             addr = 0x08;
  3922   000448  0E08               	movlw	8
  3923   00044A  6E29               	movwf	motor_RFID@addr^0,c
  3924   00044C                     
  3925                           ;TAD_RFID.c: 506:                             value = tempRegValue & ~0x08;
  3926   00044C  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3927   00044E  0BF7               	andlw	247
  3928   000450  6E28               	movwf	motor_RFID@value^0,c
  3929   000452                     
  3930                           ;TAD_RFID.c: 507:                             operation_pending = 2;
  3931   000452  0E02               	movlw	2
  3932   000454  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3933   000456                     
  3934                           ;TAD_RFID.c: 508:                             substate = 3;
  3935   000456  0E03               	movlw	3
  3936   000458  6E37               	movwf	motor_RFID@substate^0,c
  3937   00045A  EF3C  F004         	goto	l360
  3938   00045E                     l4178:
  3939                           
  3940                           ;TAD_RFID.c: 512:                         irqEn = 0x77;
  3941   00045E  0E77               	movlw	119
  3942   000460  6E36               	movwf	motor_RFID@irqEn^0,c
  3943                           
  3944                           ;TAD_RFID.c: 513:                         waitIRq = 0x30;
  3945   000462  0E30               	movlw	48
  3946   000464  6E35               	movwf	motor_RFID@waitIRq^0,c
  3947                           
  3948                           ;TAD_RFID.c: 514:                         addr = 0x02;
  3949   000466  0E02               	movlw	2
  3950   000468  6E29               	movwf	motor_RFID@addr^0,c
  3951   00046A                     
  3952                           ;TAD_RFID.c: 515:                         value = irqEn | 0x80;
  3953   00046A  5036               	movf	motor_RFID@irqEn^0,w,c
  3954   00046C  0980               	iorlw	128
  3955   00046E  6E28               	movwf	motor_RFID@value^0,c
  3956   000470  EF7C  F000         	goto	l4048
  3957   000474                     l4186:
  3958                           
  3959                           ;TAD_RFID.c: 520:                         addr = 0x04;
  3960   000474  0E04               	movlw	4
  3961   000476  6E29               	movwf	motor_RFID@addr^0,c
  3962                           
  3963                           ;TAD_RFID.c: 521:                         operation_pending = 1;
  3964   000478  0E01               	movlw	1
  3965   00047A  6E2A               	movwf	motor_RFID@operation_pending^0,c
  3966                           
  3967                           ;TAD_RFID.c: 522:                         substate = 5;
  3968   00047C  0E05               	movlw	5
  3969   00047E  6E37               	movwf	motor_RFID@substate^0,c
  3970                           
  3971                           ;TAD_RFID.c: 523:                         break;
  3972   000480  EF3C  F004         	goto	l360
  3973   000484                     l4188:
  3974                           
  3975                           ;TAD_RFID.c: 525:                         if (tempRegValue == 0xFF) {
  3976   000484  282E               	incf	motor_RFID@tempRegValue^0,w,c
  3977   000486  A4D8               	btfss	status,2,c
  3978   000488  EF48  F002         	goto	u3261
  3979   00048C  EF4A  F002         	goto	u3260
  3980   000490                     u3261:
  3981   000490  EF4C  F002         	goto	l4192
  3982   000494                     u3260:
  3983   000494  EF60  F001         	goto	l404
  3984   000498                     l4192:
  3985                           
  3986                           ;TAD_RFID.c: 528:                             addr = 0x04;
  3987   000498  0E04               	movlw	4
  3988   00049A  6E29               	movwf	motor_RFID@addr^0,c
  3989   00049C                     
  3990                           ;TAD_RFID.c: 529:                             value = tempRegValue & ~0x80;
  3991   00049C  502E               	movf	motor_RFID@tempRegValue^0,w,c
  3992   00049E  0B7F               	andlw	127
  3993   0004A0  6E28               	movwf	motor_RFID@value^0,c
  3994   0004A2  EF99  F000         	goto	l4062
  3995   0004A6                     l4200:
  3996                           
  3997                           ;TAD_RFID.c: 535:                         addr = 0x0A;
  3998   0004A6  0E0A               	movlw	10
  3999   0004A8  6E29               	movwf	motor_RFID@addr^0,c
  4000                           
  4001                           ;TAD_RFID.c: 536:                         operation_pending = 1;
  4002   0004AA  0E01               	movlw	1
  4003   0004AC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4004                           
  4005                           ;TAD_RFID.c: 537:                         substate = 7;
  4006   0004AE  0E07               	movlw	7
  4007   0004B0  6E37               	movwf	motor_RFID@substate^0,c
  4008                           
  4009                           ;TAD_RFID.c: 538:                         break;
  4010   0004B2  EF3C  F004         	goto	l360
  4011   0004B6                     l4202:
  4012                           
  4013                           ;TAD_RFID.c: 540:                         if (tempRegValue == 0xFF) {
  4014   0004B6  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4015   0004B8  A4D8               	btfss	status,2,c
  4016   0004BA  EF61  F002         	goto	u3271
  4017   0004BE  EF63  F002         	goto	u3270
  4018   0004C2                     u3271:
  4019   0004C2  EF65  F002         	goto	l4206
  4020   0004C6                     u3270:
  4021   0004C6  EF60  F001         	goto	l404
  4022   0004CA                     l4206:
  4023                           
  4024                           ;TAD_RFID.c: 543:                             addr = 0x0A;
  4025   0004CA  0E0A               	movlw	10
  4026   0004CC  6E29               	movwf	motor_RFID@addr^0,c
  4027   0004CE                     
  4028                           ;TAD_RFID.c: 544:                             value = tempRegValue | 0x80;
  4029   0004CE  502E               	movf	motor_RFID@tempRegValue^0,w,c
  4030   0004D0  0980               	iorlw	128
  4031   0004D2  6E28               	movwf	motor_RFID@value^0,c
  4032   0004D4                     
  4033                           ;TAD_RFID.c: 545:                             operation_pending = 2;
  4034   0004D4  0E02               	movlw	2
  4035   0004D6  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4036   0004D8                     
  4037                           ;TAD_RFID.c: 546:                             substate = 8;
  4038   0004D8  0E08               	movlw	8
  4039   0004DA  6E37               	movwf	motor_RFID@substate^0,c
  4040   0004DC  EF3C  F004         	goto	l360
  4041   0004E0                     l4214:
  4042                           
  4043                           ;TAD_RFID.c: 550:                         addr = 0x01;
  4044   0004E0  0E01               	movlw	1
  4045   0004E2  6E29               	movwf	motor_RFID@addr^0,c
  4046   0004E4                     
  4047                           ;TAD_RFID.c: 551:                         value = 0x00;
  4048   0004E4  6A28               	clrf	motor_RFID@value^0,c
  4049                           
  4050                           ;TAD_RFID.c: 552:                         operation_pending = 2;
  4051   0004E6  0E02               	movlw	2
  4052   0004E8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4053                           
  4054                           ;TAD_RFID.c: 553:                         substate = 9;
  4055   0004EA  0E09               	movlw	9
  4056   0004EC  6E37               	movwf	motor_RFID@substate^0,c
  4057                           
  4058                           ;TAD_RFID.c: 554:                         break;
  4059   0004EE  EF3C  F004         	goto	l360
  4060   0004F2                     l4218:
  4061                           
  4062                           ;TAD_RFID.c: 556:                         addr = 0x09;
  4063   0004F2  0E09               	movlw	9
  4064   0004F4  6E29               	movwf	motor_RFID@addr^0,c
  4065   0004F6                     
  4066                           ;TAD_RFID.c: 557:                         value = UID[0];
  4067   0004F6  C001  F028         	movff	motor_RFID@UID,motor_RFID@value
  4068                           
  4069                           ;TAD_RFID.c: 558:                         operation_pending = 2;
  4070   0004FA  0E02               	movlw	2
  4071   0004FC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4072                           
  4073                           ;TAD_RFID.c: 559:                         substate = 10;
  4074   0004FE  0E0A               	movlw	10
  4075   000500  6E37               	movwf	motor_RFID@substate^0,c
  4076                           
  4077                           ;TAD_RFID.c: 560:                         break;
  4078   000502  EF3C  F004         	goto	l360
  4079   000506                     l4222:
  4080                           
  4081                           ;TAD_RFID.c: 562:                         addr = 0x09;
  4082   000506  0E09               	movlw	9
  4083   000508  6E29               	movwf	motor_RFID@addr^0,c
  4084   00050A                     
  4085                           ;TAD_RFID.c: 563:                         value = UID[1];
  4086   00050A  C002  F028         	movff	motor_RFID@UID+1,motor_RFID@value
  4087                           
  4088                           ;TAD_RFID.c: 564:                         operation_pending = 2;
  4089   00050E  0E02               	movlw	2
  4090   000510  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4091                           
  4092                           ;TAD_RFID.c: 565:                         substate = 11;
  4093   000512  0E0B               	movlw	11
  4094   000514  6E37               	movwf	motor_RFID@substate^0,c
  4095                           
  4096                           ;TAD_RFID.c: 566:                         break;
  4097   000516  EF3C  F004         	goto	l360
  4098   00051A                     l4226:
  4099                           
  4100                           ;TAD_RFID.c: 568:                         addr = 0x01;
  4101   00051A  0E01               	movlw	1
  4102   00051C  6E29               	movwf	motor_RFID@addr^0,c
  4103                           
  4104                           ;TAD_RFID.c: 569:                         value = 0x0C;
  4105   00051E  0E0C               	movlw	12
  4106   000520  6E28               	movwf	motor_RFID@value^0,c
  4107                           
  4108                           ;TAD_RFID.c: 570:                         operation_pending = 2;
  4109   000522  0E02               	movlw	2
  4110   000524  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4111                           
  4112                           ;TAD_RFID.c: 571:                         substate = 12;
  4113   000526  0E0C               	movlw	12
  4114   000528  6E37               	movwf	motor_RFID@substate^0,c
  4115                           
  4116                           ;TAD_RFID.c: 572:                         break;
  4117   00052A  EF3C  F004         	goto	l360
  4118   00052E                     l4230:
  4119                           
  4120                           ;TAD_RFID.c: 579:                         if (tempRegValue == 0xFF) {
  4121   00052E  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4122   000530  A4D8               	btfss	status,2,c
  4123   000532  EF9D  F002         	goto	u3281
  4124   000536  EF9F  F002         	goto	u3280
  4125   00053A                     u3281:
  4126   00053A  EFA1  F002         	goto	l4234
  4127   00053E                     u3280:
  4128   00053E  EF60  F001         	goto	l404
  4129   000542                     l4234:
  4130                           
  4131                           ;TAD_RFID.c: 582:                             addr = 0x0D;
  4132   000542  0E0D               	movlw	13
  4133   000544  6E29               	movwf	motor_RFID@addr^0,c
  4134   000546                     
  4135                           ;TAD_RFID.c: 583:                             value = tempRegValue | 0x80;
  4136   000546  502E               	movf	motor_RFID@tempRegValue^0,w,c
  4137   000548  0980               	iorlw	128
  4138   00054A  6E28               	movwf	motor_RFID@value^0,c
  4139   00054C  EF27  F001         	goto	l4114
  4140   000550                     l444:
  4141                           
  4142                           ;TAD_RFID.c: 589:                         i = 0xFF;
  4143   000550  6833               	setf	motor_RFID@i^0,c
  4144   000552                     
  4145                           ;TAD_RFID.c: 590:                         addr = 0x04;
  4146   000552  0E04               	movlw	4
  4147   000554  6E29               	movwf	motor_RFID@addr^0,c
  4148                           
  4149                           ;TAD_RFID.c: 591:                         operation_pending = 1;
  4150   000556  0E01               	movlw	1
  4151   000558  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4152                           
  4153                           ;TAD_RFID.c: 592:                         substate = 15;
  4154   00055A  0E0F               	movlw	15
  4155   00055C  6E37               	movwf	motor_RFID@substate^0,c
  4156                           
  4157                           ;TAD_RFID.c: 593:                         break;
  4158   00055E  EF3C  F004         	goto	l360
  4159   000562                     l4244:
  4160                           
  4161                           ;TAD_RFID.c: 595:                         if (tempRegValue == 0xFF) {
  4162   000562  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4163   000564  A4D8               	btfss	status,2,c
  4164   000566  EFB7  F002         	goto	u3291
  4165   00056A  EFB9  F002         	goto	u3290
  4166   00056E                     u3291:
  4167   00056E  EFBB  F002         	goto	l446
  4168   000572                     u3290:
  4169   000572  EF60  F001         	goto	l404
  4170   000576                     l446:
  4171                           
  4172                           ;TAD_RFID.c: 598:                             n = tempRegValue;
  4173   000576  C02E  F034         	movff	motor_RFID@tempRegValue,motor_RFID@n
  4174                           
  4175                           ;TAD_RFID.c: 599:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  4176   00057A  B034               	btfsc	motor_RFID@n^0,0,c
  4177   00057C  EFC2  F002         	goto	u3301
  4178   000580  EFC4  F002         	goto	u3300
  4179   000584                     u3301:
  4180   000584  EFD1  F002         	goto	l4252
  4181   000588                     u3300:
  4182   000588  5034               	movf	motor_RFID@n^0,w,c
  4183   00058A  1435               	andwf	motor_RFID@waitIRq^0,w,c
  4184   00058C  0900               	iorlw	0
  4185   00058E  A4D8               	btfss	status,2,c
  4186   000590  EFCC  F002         	goto	u3311
  4187   000594  EFCE  F002         	goto	u3310
  4188   000598                     u3311:
  4189   000598  EFD1  F002         	goto	l4252
  4190   00059C                     u3310:
  4191   00059C  2E33               	decfsz	motor_RFID@i^0,f,c
  4192   00059E  EF0A  F001         	goto	l4102
  4193   0005A2                     l4252:
  4194                           
  4195                           ;TAD_RFID.c: 600:                                 addr = 0x0D;
  4196   0005A2  0E0D               	movlw	13
  4197   0005A4  6E29               	movwf	motor_RFID@addr^0,c
  4198                           
  4199                           ;TAD_RFID.c: 601:                                 operation_pending = 1;
  4200   0005A6  0E01               	movlw	1
  4201   0005A8  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4202                           
  4203                           ;TAD_RFID.c: 602:                                 substate = 16;
  4204   0005AA  0E10               	movlw	16
  4205   0005AC  6E37               	movwf	motor_RFID@substate^0,c
  4206                           
  4207                           ;TAD_RFID.c: 603:                             } else {
  4208   0005AE  EF3C  F004         	goto	l360
  4209   0005B2                     l4256:
  4210                           
  4211                           ;TAD_RFID.c: 611:                         if (tempRegValue == 0xFF) {
  4212   0005B2  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4213   0005B4  A4D8               	btfss	status,2,c
  4214   0005B6  EFDF  F002         	goto	u3321
  4215   0005BA  EFE1  F002         	goto	u3320
  4216   0005BE                     u3321:
  4217   0005BE  EFE3  F002         	goto	l4260
  4218   0005C2                     u3320:
  4219   0005C2  EF60  F001         	goto	l404
  4220   0005C6                     l4260:
  4221                           
  4222                           ;TAD_RFID.c: 614:                             addr = 0x0D;
  4223   0005C6  0E0D               	movlw	13
  4224   0005C8  6E29               	movwf	motor_RFID@addr^0,c
  4225   0005CA                     
  4226                           ;TAD_RFID.c: 615:                             value = tempRegValue & ~0x80;
  4227   0005CA  502E               	movf	motor_RFID@tempRegValue^0,w,c
  4228   0005CC  0B7F               	andlw	127
  4229   0005CE  6E28               	movwf	motor_RFID@value^0,c
  4230   0005D0                     
  4231                           ;TAD_RFID.c: 616:                             operation_pending = 2;
  4232   0005D0  0E02               	movlw	2
  4233   0005D2  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4234   0005D4                     
  4235                           ;TAD_RFID.c: 617:                             substate = 17;
  4236   0005D4  0E11               	movlw	17
  4237   0005D6  6E37               	movwf	motor_RFID@substate^0,c
  4238   0005D8  EF3C  F004         	goto	l360
  4239   0005DC                     l4268:
  4240                           
  4241                           ;TAD_RFID.c: 621:                         addr = 0x06;
  4242   0005DC  0E06               	movlw	6
  4243   0005DE  6E29               	movwf	motor_RFID@addr^0,c
  4244                           
  4245                           ;TAD_RFID.c: 622:                         operation_pending = 1;
  4246   0005E0  0E01               	movlw	1
  4247   0005E2  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4248                           
  4249                           ;TAD_RFID.c: 623:                         substate = 18;
  4250   0005E4  0E12               	movlw	18
  4251   0005E6  6E37               	movwf	motor_RFID@substate^0,c
  4252                           
  4253                           ;TAD_RFID.c: 624:                         break;
  4254   0005E8  EF3C  F004         	goto	l360
  4255   0005EC                     l4270:
  4256                           
  4257                           ;TAD_RFID.c: 626:                         if (tempRegValue == 0xFF) {
  4258   0005EC  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4259   0005EE  A4D8               	btfss	status,2,c
  4260   0005F0  EFFC  F002         	goto	u3331
  4261   0005F4  EFFE  F002         	goto	u3330
  4262   0005F8                     u3331:
  4263   0005F8  EF00  F003         	goto	l4274
  4264   0005FC                     u3330:
  4265   0005FC  EF60  F001         	goto	l404
  4266   000600                     l4274:
  4267   000600  5033               	movf	motor_RFID@i^0,w,c
  4268   000602  B4D8               	btfsc	status,2,c
  4269   000604  EF06  F003         	goto	u3341
  4270   000608  EF08  F003         	goto	u3340
  4271   00060C                     u3341:
  4272   00060C  EF60  F001         	goto	l404
  4273   000610                     u3340:
  4274   000610  C02E  F05F         	movff	motor_RFID@tempRegValue,??_motor_RFID
  4275   000614  0E1B               	movlw	27
  4276   000616  165F               	andwf	??_motor_RFID^0,f,c
  4277   000618  A4D8               	btfss	status,2,c
  4278   00061A  EF11  F003         	goto	u3351
  4279   00061E  EF13  F003         	goto	u3350
  4280   000622                     u3351:
  4281   000622  EF60  F001         	goto	l404
  4282   000626                     u3350:
  4283   000626                     
  4284                           ;TAD_RFID.c: 629:                             addr = 0x09;
  4285   000626  0E09               	movlw	9
  4286   000628  6E29               	movwf	motor_RFID@addr^0,c
  4287                           
  4288                           ;TAD_RFID.c: 630:                             operation_pending = 1;
  4289   00062A  0E01               	movlw	1
  4290   00062C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4291                           
  4292                           ;TAD_RFID.c: 631:                             substate = 19;
  4293   00062E  0E13               	movlw	19
  4294   000630  6E37               	movwf	motor_RFID@substate^0,c
  4295                           
  4296                           ;TAD_RFID.c: 632:                         } else {
  4297   000632  EF3C  F004         	goto	l360
  4298   000636                     l4280:
  4299                           
  4300                           ;TAD_RFID.c: 637:                         if (tempRegValue == 0xFF) {
  4301   000636  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4302   000638  A4D8               	btfss	status,2,c
  4303   00063A  EF21  F003         	goto	u3361
  4304   00063E  EF23  F003         	goto	u3360
  4305   000642                     u3361:
  4306   000642  EF25  F003         	goto	l462
  4307   000646                     u3360:
  4308   000646  EF60  F001         	goto	l404
  4309   00064A                     l462:
  4310                           
  4311                           ;TAD_RFID.c: 640:                             UID[0] = tempRegValue;
  4312   00064A  C02E  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  4313   00064E                     
  4314                           ;TAD_RFID.c: 641:                             addr = 0x09;
  4315   00064E  0E09               	movlw	9
  4316   000650  6E29               	movwf	motor_RFID@addr^0,c
  4317                           
  4318                           ;TAD_RFID.c: 642:                             operation_pending = 1;
  4319   000652  0E01               	movlw	1
  4320   000654  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4321                           
  4322                           ;TAD_RFID.c: 643:                             substate = 20;
  4323   000656  0E14               	movlw	20
  4324   000658  6E37               	movwf	motor_RFID@substate^0,c
  4325   00065A  EF3C  F004         	goto	l360
  4326   00065E                     l4286:
  4327                           
  4328                           ;TAD_RFID.c: 647:                         if (tempRegValue == 0xFF) {
  4329   00065E  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4330   000660  A4D8               	btfss	status,2,c
  4331   000662  EF35  F003         	goto	u3371
  4332   000666  EF37  F003         	goto	u3370
  4333   00066A                     u3371:
  4334   00066A  EF39  F003         	goto	l465
  4335   00066E                     u3370:
  4336   00066E  EF60  F001         	goto	l404
  4337   000672                     l465:
  4338                           
  4339                           ;TAD_RFID.c: 650:                             UID[1] = tempRegValue;
  4340   000672  C02E  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4341   000676                     
  4342                           ;TAD_RFID.c: 651:                             addr = 0x09;
  4343   000676  0E09               	movlw	9
  4344   000678  6E29               	movwf	motor_RFID@addr^0,c
  4345                           
  4346                           ;TAD_RFID.c: 652:                             operation_pending = 1;
  4347   00067A  0E01               	movlw	1
  4348   00067C  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4349                           
  4350                           ;TAD_RFID.c: 653:                             substate = 21;
  4351   00067E  0E15               	movlw	21
  4352   000680  6E37               	movwf	motor_RFID@substate^0,c
  4353   000682  EF3C  F004         	goto	l360
  4354   000686                     l4292:
  4355                           
  4356                           ;TAD_RFID.c: 657:                         if (tempRegValue == 0xFF) {
  4357   000686  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4358   000688  A4D8               	btfss	status,2,c
  4359   00068A  EF49  F003         	goto	u3381
  4360   00068E  EF4B  F003         	goto	u3380
  4361   000692                     u3381:
  4362   000692  EF4D  F003         	goto	l468
  4363   000696                     u3380:
  4364   000696  EF60  F001         	goto	l404
  4365   00069A                     l468:
  4366                           
  4367                           ;TAD_RFID.c: 660:                             UID[2] = tempRegValue;
  4368   00069A  C02E  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4369   00069E                     
  4370                           ;TAD_RFID.c: 661:                             addr = 0x09;
  4371   00069E  0E09               	movlw	9
  4372   0006A0  6E29               	movwf	motor_RFID@addr^0,c
  4373                           
  4374                           ;TAD_RFID.c: 662:                             operation_pending = 1;
  4375   0006A2  0E01               	movlw	1
  4376   0006A4  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4377                           
  4378                           ;TAD_RFID.c: 663:                             substate = 22;
  4379   0006A6  0E16               	movlw	22
  4380   0006A8  6E37               	movwf	motor_RFID@substate^0,c
  4381   0006AA  EF3C  F004         	goto	l360
  4382   0006AE                     l4298:
  4383                           
  4384                           ;TAD_RFID.c: 667:                         if (tempRegValue == 0xFF) {
  4385   0006AE  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4386   0006B0  A4D8               	btfss	status,2,c
  4387   0006B2  EF5D  F003         	goto	u3391
  4388   0006B6  EF5F  F003         	goto	u3390
  4389   0006BA                     u3391:
  4390   0006BA  EF61  F003         	goto	l471
  4391   0006BE                     u3390:
  4392   0006BE  EF60  F001         	goto	l404
  4393   0006C2                     l471:
  4394                           
  4395                           ;TAD_RFID.c: 670:                             UID[3] = tempRegValue;
  4396   0006C2  C02E  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4397   0006C6                     
  4398                           ;TAD_RFID.c: 671:                             addr = 0x09;
  4399   0006C6  0E09               	movlw	9
  4400   0006C8  6E29               	movwf	motor_RFID@addr^0,c
  4401                           
  4402                           ;TAD_RFID.c: 672:                             operation_pending = 1;
  4403   0006CA  0E01               	movlw	1
  4404   0006CC  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4405                           
  4406                           ;TAD_RFID.c: 673:                             substate = 23;
  4407   0006CE  0E17               	movlw	23
  4408   0006D0  6E37               	movwf	motor_RFID@substate^0,c
  4409   0006D2  EF3C  F004         	goto	l360
  4410   0006D6                     l4304:
  4411                           
  4412                           ;TAD_RFID.c: 677:                         if (tempRegValue == 0xFF) {
  4413   0006D6  282E               	incf	motor_RFID@tempRegValue^0,w,c
  4414   0006D8  A4D8               	btfss	status,2,c
  4415   0006DA  EF71  F003         	goto	u3401
  4416   0006DE  EF73  F003         	goto	u3400
  4417   0006E2                     u3401:
  4418   0006E2  EF75  F003         	goto	l474
  4419   0006E6                     u3400:
  4420   0006E6  EF60  F001         	goto	l404
  4421   0006EA                     l474:
  4422                           
  4423                           ;TAD_RFID.c: 680:                             UID[4] = tempRegValue;
  4424   0006EA  C02E  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4425                           
  4426                           ;TAD_RFID.c: 681:                             UID[5] = 0;
  4427   0006EE  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4428   0006F0                     
  4429                           ;TAD_RFID.c: 682:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4430   0006F0  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4431   0006F2  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4432   0006F4  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4433   0006F6  1801               	xorwf	motor_RFID@UID^0,w,c
  4434   0006F8  6E30               	movwf	motor_RFID@checksum^0,c
  4435                           
  4436                           ;TAD_RFID.c: 683:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4437   0006FA  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4438   0006FC  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4439   0006FE  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4440   000700  1001               	iorwf	motor_RFID@UID^0,w,c
  4441   000702  0900               	iorlw	0
  4442   000704  B4D8               	btfsc	status,2,c
  4443   000706  EF87  F003         	goto	u3411
  4444   00070A  EF8A  F003         	goto	u3410
  4445   00070E                     u3411:
  4446   00070E  0E01               	movlw	1
  4447   000710  EF8B  F003         	goto	u3420
  4448   000714                     u3410:
  4449   000714  0E00               	movlw	0
  4450   000716                     u3420:
  4451   000716  6E2F               	movwf	motor_RFID@allZero^0,c
  4452   000718                     
  4453                           ;TAD_RFID.c: 684:                             substate = 24;
  4454   000718  0E18               	movlw	24
  4455   00071A  6E37               	movwf	motor_RFID@substate^0,c
  4456   00071C  EF3C  F004         	goto	l360
  4457   000720                     l4312:
  4458                           
  4459                           ;TAD_RFID.c: 688:                         if (checksum != UID[4] || allZero) {
  4460   000720  5030               	movf	motor_RFID@checksum^0,w,c
  4461   000722  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4462   000724  A4D8               	btfss	status,2,c
  4463   000726  EF97  F003         	goto	u3431
  4464   00072A  EF99  F003         	goto	u3430
  4465   00072E                     u3431:
  4466   00072E  EF60  F001         	goto	l404
  4467   000732                     u3430:
  4468   000732  502F               	movf	motor_RFID@allZero^0,w,c
  4469   000734  B4D8               	btfsc	status,2,c
  4470   000736  EF9F  F003         	goto	u3441
  4471   00073A  EFA1  F003         	goto	u3440
  4472   00073E                     u3441:
  4473   00073E  EFA3  F003         	goto	l4316
  4474   000742                     u3440:
  4475   000742  EF60  F001         	goto	l404
  4476   000746                     l4316:
  4477                           
  4478                           ;TAD_RFID.c: 691:                             char differentUID = 1;
  4479   000746  0E01               	movlw	1
  4480   000748  6E61               	movwf	motor_RFID@differentUID^0,c
  4481   00074A                     
  4482                           ;TAD_RFID.c: 692:                             unsigned char currentUser[5];;TAD_RFID.c: 
      +                          693:                             getActualUID(currentUser);
  4483   00074A  0E62               	movlw	low motor_RFID@currentUser
  4484   00074C  6E4E               	movwf	getActualUID@UID^0,c
  4485   00074E  EC7C  F00A         	call	_getActualUID	;wreg free
  4486   000752                     
  4487                           ;TAD_RFID.c: 695:                             if(currentUser[0] != UID[0]) {
  4488   000752  5001               	movf	motor_RFID@UID^0,w,c
  4489   000754  1862               	xorwf	motor_RFID@currentUser^0,w,c
  4490   000756  B4D8               	btfsc	status,2,c
  4491   000758  EFB0  F003         	goto	u3451
  4492   00075C  EFB2  F003         	goto	u3450
  4493   000760                     u3451:
  4494   000760  EFBD  F003         	goto	l4324
  4495   000764                     u3450:
  4496   000764                     
  4497                           ;TAD_RFID.c: 696:                                 setCurrentUser(UID[0], UID[1], UID[2],
      +                           UID[3], UID[4]);
  4498   000764  C002  F05A         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  4499   000768  C003  F05B         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  4500   00076C  C004  F05C         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  4501   000770  C005  F05D         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  4502   000774  5001               	movf	motor_RFID@UID^0,w,c
  4503   000776  EC23  F00D         	call	_setCurrentUser
  4504   00077A                     l4324:
  4505                           
  4506                           ;TAD_RFID.c: 698:                             addr = 0x0D;
  4507   00077A  0E0D               	movlw	13
  4508   00077C  6E29               	movwf	motor_RFID@addr^0,c
  4509   00077E                     
  4510                           ;TAD_RFID.c: 699:                             value = 0x00;
  4511   00077E  6A28               	clrf	motor_RFID@value^0,c
  4512   000780                     
  4513                           ;TAD_RFID.c: 700:                             operation_pending = 2;
  4514   000780  0E02               	movlw	2
  4515   000782  6E2A               	movwf	motor_RFID@operation_pending^0,c
  4516   000784                     
  4517                           ;TAD_RFID.c: 701:                             substate = 25;
  4518   000784  0E19               	movlw	25
  4519   000786  6E37               	movwf	motor_RFID@substate^0,c
  4520   000788  EF3C  F004         	goto	l360
  4521   00078C                     l4334:
  4522   00078C  5037               	movf	motor_RFID@substate^0,w,c
  4523                           
  4524                           ; Switch size 1, requested type "simple"
  4525                           ; Number of cases is 26, Range of values is 0 to 25
  4526                           ; switch strategies available:
  4527                           ; Name         Instructions Cycles
  4528                           ; simple_byte           79    40 (average)
  4529                           ;	Chosen strategy is simple_byte
  4530   00078E  0A00               	xorlw	0	; case 0
  4531   000790  B4D8               	btfsc	status,2,c
  4532   000792  EF05  F002         	goto	l4160
  4533   000796  0A01               	xorlw	1	; case 1
  4534   000798  B4D8               	btfsc	status,2,c
  4535   00079A  EF0E  F002         	goto	l4164
  4536   00079E  0A03               	xorlw	3	; case 2
  4537   0007A0  B4D8               	btfsc	status,2,c
  4538   0007A2  EF1A  F002         	goto	l4166
  4539   0007A6  0A01               	xorlw	1	; case 3
  4540   0007A8  B4D8               	btfsc	status,2,c
  4541   0007AA  EF2F  F002         	goto	l4178
  4542   0007AE  0A07               	xorlw	7	; case 4
  4543   0007B0  B4D8               	btfsc	status,2,c
  4544   0007B2  EF3A  F002         	goto	l4186
  4545   0007B6  0A01               	xorlw	1	; case 5
  4546   0007B8  B4D8               	btfsc	status,2,c
  4547   0007BA  EF42  F002         	goto	l4188
  4548   0007BE  0A03               	xorlw	3	; case 6
  4549   0007C0  B4D8               	btfsc	status,2,c
  4550   0007C2  EF53  F002         	goto	l4200
  4551   0007C6  0A01               	xorlw	1	; case 7
  4552   0007C8  B4D8               	btfsc	status,2,c
  4553   0007CA  EF5B  F002         	goto	l4202
  4554   0007CE  0A0F               	xorlw	15	; case 8
  4555   0007D0  B4D8               	btfsc	status,2,c
  4556   0007D2  EF70  F002         	goto	l4214
  4557   0007D6  0A01               	xorlw	1	; case 9
  4558   0007D8  B4D8               	btfsc	status,2,c
  4559   0007DA  EF79  F002         	goto	l4218
  4560   0007DE  0A03               	xorlw	3	; case 10
  4561   0007E0  B4D8               	btfsc	status,2,c
  4562   0007E2  EF83  F002         	goto	l4222
  4563   0007E6  0A01               	xorlw	1	; case 11
  4564   0007E8  B4D8               	btfsc	status,2,c
  4565   0007EA  EF8D  F002         	goto	l4226
  4566   0007EE  0A07               	xorlw	7	; case 12
  4567   0007F0  B4D8               	btfsc	status,2,c
  4568   0007F2  EF02  F001         	goto	l4100
  4569   0007F6  0A01               	xorlw	1	; case 13
  4570   0007F8  B4D8               	btfsc	status,2,c
  4571   0007FA  EF97  F002         	goto	l4230
  4572   0007FE  0A03               	xorlw	3	; case 14
  4573   000800  B4D8               	btfsc	status,2,c
  4574   000802  EFA8  F002         	goto	l444
  4575   000806  0A01               	xorlw	1	; case 15
  4576   000808  B4D8               	btfsc	status,2,c
  4577   00080A  EFB1  F002         	goto	l4244
  4578   00080E  0A1F               	xorlw	31	; case 16
  4579   000810  B4D8               	btfsc	status,2,c
  4580   000812  EFD9  F002         	goto	l4256
  4581   000816  0A01               	xorlw	1	; case 17
  4582   000818  B4D8               	btfsc	status,2,c
  4583   00081A  EFEE  F002         	goto	l4268
  4584   00081E  0A03               	xorlw	3	; case 18
  4585   000820  B4D8               	btfsc	status,2,c
  4586   000822  EFF6  F002         	goto	l4270
  4587   000826  0A01               	xorlw	1	; case 19
  4588   000828  B4D8               	btfsc	status,2,c
  4589   00082A  EF1B  F003         	goto	l4280
  4590   00082E  0A07               	xorlw	7	; case 20
  4591   000830  B4D8               	btfsc	status,2,c
  4592   000832  EF2F  F003         	goto	l4286
  4593   000836  0A01               	xorlw	1	; case 21
  4594   000838  B4D8               	btfsc	status,2,c
  4595   00083A  EF43  F003         	goto	l4292
  4596   00083E  0A03               	xorlw	3	; case 22
  4597   000840  B4D8               	btfsc	status,2,c
  4598   000842  EF57  F003         	goto	l4298
  4599   000846  0A01               	xorlw	1	; case 23
  4600   000848  B4D8               	btfsc	status,2,c
  4601   00084A  EF6B  F003         	goto	l4304
  4602   00084E  0A0F               	xorlw	15	; case 24
  4603   000850  B4D8               	btfsc	status,2,c
  4604   000852  EF90  F003         	goto	l4312
  4605   000856  0A01               	xorlw	1	; case 25
  4606   000858  B4D8               	btfsc	status,2,c
  4607   00085A  EF60  F001         	goto	l404
  4608   00085E  EF3C  F004         	goto	l360
  4609   000862                     l4338:
  4610   000862  5038               	movf	motor_RFID@state^0,w,c
  4611                           
  4612                           ; Switch size 1, requested type "simple"
  4613                           ; Number of cases is 2, Range of values is 0 to 1
  4614                           ; switch strategies available:
  4615                           ; Name         Instructions Cycles
  4616                           ; simple_byte            7     4 (average)
  4617                           ;	Chosen strategy is simple_byte
  4618   000864  0A00               	xorlw	0	; case 0
  4619   000866  B4D8               	btfsc	status,2,c
  4620   000868  EFBA  F001         	goto	l4158
  4621   00086C  0A01               	xorlw	1	; case 1
  4622   00086E  B4D8               	btfsc	status,2,c
  4623   000870  EFC6  F003         	goto	l4334
  4624   000874  EF3C  F004         	goto	l360
  4625   000878                     l360:
  4626   000878  0012               	return		;funcret
  4627   00087A                     __end_of_motor_RFID:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function _setCurrentUser *****************
  4631 ;; Defined at:
  4632 ;;		line 92 in file "TAD_DATOS.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  UID0            1    wreg     unsigned char 
  4635 ;;  UID1            1   13[COMRAM] unsigned char 
  4636 ;;  UID2            1   14[COMRAM] unsigned char 
  4637 ;;  UID3            1   15[COMRAM] unsigned char 
  4638 ;;  UID4            1   16[COMRAM] unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  UID0            1   17[COMRAM] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1
  4650 ;;      Params:         4       0       0
  4651 ;;      Locals:         1       0       0
  4652 ;;      Temps:          0       0       0
  4653 ;;      Totals:         5       0       0
  4654 ;;Total ram usage:        5 bytes
  4655 ;; Hardware stack levels used: 1
  4656 ;; Hardware stack levels required when called: 7
  4657 ;; This function calls:
  4658 ;;		_Terminal_SendString
  4659 ;;		_printLedConfig
  4660 ;;		_printfUID
  4661 ;; This function is called by:
  4662 ;;		_motor_RFID
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text6
  4667   001A46                     __ptext6:
  4668                           	callstack 0
  4669   001A46                     _setCurrentUser:
  4670                           	callstack 22
  4671                           
  4672                           ;incstack = 0
  4673                           ;setCurrentUser@UID0 stored from wreg
  4674   001A46  6E5E               	movwf	setCurrentUser@UID0^0,c
  4675   001A48                     
  4676                           ;TAD_DATOS.c: 93:     currentUser[0] = UID0;
  4677   001A48  C05E  F03E         	movff	setCurrentUser@UID0,_currentUser
  4678   001A4C                     
  4679                           ;TAD_DATOS.c: 94:     currentUser[1] = UID1;
  4680   001A4C  C05A  F03F         	movff	setCurrentUser@UID1,_currentUser+1
  4681   001A50                     
  4682                           ;TAD_DATOS.c: 95:     currentUser[2] = UID2;
  4683   001A50  C05B  F040         	movff	setCurrentUser@UID2,_currentUser+2
  4684   001A54                     
  4685                           ;TAD_DATOS.c: 96:     currentUser[3] = UID3;
  4686   001A54  C05C  F041         	movff	setCurrentUser@UID3,_currentUser+3
  4687   001A58                     
  4688                           ;TAD_DATOS.c: 97:     currentUser[4] = UID4;
  4689   001A58  C05D  F042         	movff	setCurrentUser@UID4,_currentUser+4
  4690   001A5C                     
  4691                           ;TAD_DATOS.c: 98:     new_user = 1;
  4692   001A5C  0E01               	movlw	1
  4693   001A5E  6E1D               	movwf	_new_user^0,c
  4694   001A60                     
  4695                           ;TAD_DATOS.c: 100:     Terminal_SendString("Targeta detectada!\r\n\t");
  4696   001A60  0ECB               	movlw	low STR_18
  4697   001A62  6E52               	movwf	Terminal_SendString@str^0,c
  4698   001A64  0E1F               	movlw	high STR_18
  4699   001A66  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  4700   001A68  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  4701   001A6C                     
  4702                           ;TAD_DATOS.c: 101:     printfUID(currentUser);
  4703   001A6C  0E3E               	movlw	low _currentUser
  4704   001A6E  6E54               	movwf	printfUID@currentUser^0,c
  4705   001A70  EC43  F009         	call	_printfUID	;wreg free
  4706   001A74                     
  4707                           ;TAD_DATOS.c: 102:     Terminal_SendString("\t");
  4708   001A74  0EDF               	movlw	low (STR_18+20)
  4709   001A76  6E52               	movwf	Terminal_SendString@str^0,c
  4710   001A78  0E1F               	movlw	high (STR_18+20)
  4711   001A7A  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  4712   001A7C  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  4713   001A80                     
  4714                           ;TAD_DATOS.c: 103:     printLedConfig(configurations[index]);
  4715   001A80  500F               	movf	_index^0,w,c
  4716   001A82  0D06               	mullw	6
  4717   001A84  50F3               	movf	243,w,c
  4718   001A86  0FC6               	addlw	low _configurations
  4719   001A88  6E54               	movwf	printLedConfig@leds^0,c
  4720   001A8A  EC9E  F009         	call	_printLedConfig	;wreg free
  4721   001A8E  0012               	return		;funcret
  4722   001A90                     __end_of_setCurrentUser:
  4723                           	callstack 0
  4724                           
  4725 ;; *************** function _printLedConfig *****************
  4726 ;; Defined at:
  4727 ;;		line 80 in file "TAD_TERMINAL.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  leds            1    7[COMRAM] PTR unsigned char 
  4730 ;;		 -> configurations(24), 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  i               2   10[COMRAM] int 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1
  4742 ;;      Params:         1       0       0
  4743 ;;      Locals:         2       0       0
  4744 ;;      Temps:          2       0       0
  4745 ;;      Totals:         5       0       0
  4746 ;;Total ram usage:        5 bytes
  4747 ;; Hardware stack levels used: 1
  4748 ;; Hardware stack levels required when called: 6
  4749 ;; This function calls:
  4750 ;;		_Terminal_SendChar
  4751 ;;		_Terminal_SendString
  4752 ;; This function is called by:
  4753 ;;		_setCurrentUser
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text7
  4758   00133C                     __ptext7:
  4759                           	callstack 0
  4760   00133C                     _printLedConfig:
  4761                           	callstack 22
  4762   00133C                     
  4763                           ;TAD_TERMINAL.c: 81:  static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 82: 
      +                           for (int i = 0; i < 6; i++) {
  4764   00133C  0E00               	movlw	0
  4765   00133E  6E58               	movwf	(printLedConfig@i+1)^0,c
  4766   001340  0E00               	movlw	0
  4767   001342  6E57               	movwf	printLedConfig@i^0,c
  4768   001344                     l3366:
  4769                           
  4770                           ;TAD_TERMINAL.c: 83:   Terminal_SendChar('L');
  4771   001344  0E4C               	movlw	76
  4772   001346  ECB9  F00E         	call	_Terminal_SendChar
  4773                           
  4774                           ;TAD_TERMINAL.c: 84:   Terminal_SendChar('0' + i);
  4775   00134A  5057               	movf	printLedConfig@i^0,w,c
  4776   00134C  0F30               	addlw	48
  4777   00134E  ECB9  F00E         	call	_Terminal_SendChar
  4778   001352                     
  4779                           ;TAD_TERMINAL.c: 85:   Terminal_SendString(": ");
  4780   001352  0E0F               	movlw	low (STR_9+92)
  4781   001354  6E52               	movwf	Terminal_SendString@str^0,c
  4782   001356  0E1F               	movlw	high (STR_9+92)
  4783   001358  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  4784   00135A  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  4785   00135E                     
  4786                           ;TAD_TERMINAL.c: 86:   Terminal_SendChar(hex[leds[i]]);
  4787   00135E  5054               	movf	printLedConfig@leds^0,w,c
  4788   001360  2457               	addwf	printLedConfig@i^0,w,c
  4789   001362  6ED9               	movwf	fsr2l,c
  4790   001364  6ADA               	clrf	fsr2h,c
  4791   001366  50DF               	movf	indf2,w,c
  4792   001368  6E55               	movwf	??_printLedConfig^0,c
  4793   00136A  6A56               	clrf	(??_printLedConfig+1)^0,c
  4794   00136C  0E75               	movlw	low printLedConfig@hex
  4795   00136E  2455               	addwf	??_printLedConfig^0,w,c
  4796   001370  6EF6               	movwf	tblptrl,c
  4797   001372  0E1E               	movlw	high printLedConfig@hex
  4798   001374  2056               	addwfc	(??_printLedConfig+1)^0,w,c
  4799   001376  6EF7               	movwf	tblptrh,c
  4800   001378                     	if	0	;There are less than 3 active tblptr bytes
  4801   001378                     	endif
  4802   001378  0008               	tblrd		*
  4803   00137A  50F5               	movf	tablat,w,c
  4804   00137C  ECB9  F00E         	call	_Terminal_SendChar
  4805   001380                     
  4806                           ;TAD_TERMINAL.c: 87:   if (i < 5) Terminal_SendString(" - ");
  4807   001380  BE58               	btfsc	(printLedConfig@i+1)^0,7,c
  4808   001382  EFCE  F009         	goto	u2340
  4809   001386  5058               	movf	(printLedConfig@i+1)^0,w,c
  4810   001388  E107               	bnz	u2341
  4811   00138A  0E05               	movlw	5
  4812   00138C  5C57               	subwf	printLedConfig@i^0,w,c
  4813   00138E  B0D8               	btfsc	status,0,c
  4814   001390  EFCC  F009         	goto	u2341
  4815   001394  EFCE  F009         	goto	u2340
  4816   001398                     u2341:
  4817   001398  EFD4  F009         	goto	l3376
  4818   00139C                     u2340:
  4819   00139C  0EF9               	movlw	low STR_5
  4820   00139E  6E52               	movwf	Terminal_SendString@str^0,c
  4821   0013A0  0E1F               	movlw	high STR_5
  4822   0013A2  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  4823   0013A4  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  4824   0013A8                     l3376:
  4825                           
  4826                           ;TAD_TERMINAL.c: 88:  }
  4827   0013A8  4A57               	infsnz	printLedConfig@i^0,f,c
  4828   0013AA  2A58               	incf	(printLedConfig@i+1)^0,f,c
  4829   0013AC  BE58               	btfsc	(printLedConfig@i+1)^0,7,c
  4830   0013AE  EFE2  F009         	goto	u2351
  4831   0013B2  5058               	movf	(printLedConfig@i+1)^0,w,c
  4832   0013B4  E109               	bnz	u2350
  4833   0013B6  0E06               	movlw	6
  4834   0013B8  5C57               	subwf	printLedConfig@i^0,w,c
  4835   0013BA  A0D8               	btfss	status,0,c
  4836   0013BC  EFE2  F009         	goto	u2351
  4837   0013C0  EFE4  F009         	goto	u2350
  4838   0013C4                     u2351:
  4839   0013C4  EFA2  F009         	goto	l3366
  4840   0013C8                     u2350:
  4841   0013C8                     
  4842                           ;TAD_TERMINAL.c: 89:  Terminal_SendString("\r\n");
  4843   0013C8  0EF0               	movlw	low (STR_7+15)
  4844   0013CA  6E52               	movwf	Terminal_SendString@str^0,c
  4845   0013CC  0E1F               	movlw	high (STR_7+15)
  4846   0013CE  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  4847   0013D0  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  4848   0013D4  0012               	return		;funcret
  4849   0013D6                     __end_of_printLedConfig:
  4850                           	callstack 0
  4851                           
  4852 ;; *************** function _motorTerminal *****************
  4853 ;; Defined at:
  4854 ;;		line 93 in file "TAD_TERMINAL.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  currentUser     5   13[COMRAM] unsigned char [5]
  4859 ;;  opcion          1   18[COMRAM] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1
  4869 ;;      Params:         0       0       0
  4870 ;;      Locals:         6       0       0
  4871 ;;      Temps:          0       0       0
  4872 ;;      Totals:         6       0       0
  4873 ;;Total ram usage:        6 bytes
  4874 ;; Hardware stack levels used: 1
  4875 ;; Hardware stack levels required when called: 7
  4876 ;; This function calls:
  4877 ;;		_Terminal_RXAvailable
  4878 ;;		_Terminal_ReceiveChar
  4879 ;;		_Terminal_SendChar
  4880 ;;		_getActualUID
  4881 ;;		_motor_SendString
  4882 ;;		_motor_StartSendString
  4883 ;;		_printfUID
  4884 ;;		_saveHourToData
  4885 ;;		_showAllConfigurations
  4886 ;; This function is called by:
  4887 ;;		_main
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text8
  4892   00087A                     __ptext8:
  4893                           	callstack 0
  4894   00087A                     _motorTerminal:
  4895                           	callstack 23
  4896   00087A                     
  4897                           ;TAD_TERMINAL.c: 94:  static char state = 0;;TAD_TERMINAL.c: 95:  static char sending_st
      +                          ring = 0;;TAD_TERMINAL.c: 96:  static unsigned char hour[4] = "0000";;TAD_TERMINAL.c: 97
      +                          :  static char index = 0;;TAD_TERMINAL.c: 99:  if (sending_string) {
  4898   00087A  5020               	movf	motorTerminal@sending_string^0,w,c
  4899   00087C  B4D8               	btfsc	status,2,c
  4900   00087E  EF43  F004         	goto	u2901
  4901   000882  EF45  F004         	goto	u2900
  4902   000886                     u2901:
  4903   000886  EF55  F005         	goto	l4008
  4904   00088A                     u2900:
  4905   00088A                     
  4906                           ;TAD_TERMINAL.c: 100:   if (motor_SendString() == 1) {
  4907   00088A  EC02  F00C         	call	_motor_SendString	;wreg free
  4908   00088E  06E8               	decf	wreg,f,c
  4909   000890  A4D8               	btfss	status,2,c
  4910   000892  EF4D  F004         	goto	u2911
  4911   000896  EF4F  F004         	goto	u2910
  4912   00089A                     u2911:
  4913   00089A  EF7C  F005         	goto	l691
  4914   00089E                     u2910:
  4915   00089E                     
  4916                           ;TAD_TERMINAL.c: 101:    sending_string = 0;
  4917   00089E  6A20               	clrf	motorTerminal@sending_string^0,c
  4918                           
  4919                           ;TAD_TERMINAL.c: 102:   } else {
  4920   0008A0  EF55  F005         	goto	l4008
  4921   0008A4                     l3906:
  4922                           
  4923                           ;TAD_TERMINAL.c: 109:    if (Terminal_ReceiveChar() == 0x1B || hashtag_pressed) {
  4924   0008A4  EC35  F00F         	call	_Terminal_ReceiveChar	;wreg free
  4925   0008A8  0A1B               	xorlw	27
  4926   0008AA  B4D8               	btfsc	status,2,c
  4927   0008AC  EF5A  F004         	goto	u2921
  4928   0008B0  EF5C  F004         	goto	u2920
  4929   0008B4                     u2921:
  4930   0008B4  EF64  F004         	goto	l3910
  4931   0008B8                     u2920:
  4932   0008B8  5022               	movf	_hashtag_pressed^0,w,c
  4933   0008BA  B4D8               	btfsc	status,2,c
  4934   0008BC  EF62  F004         	goto	u2931
  4935   0008C0  EF64  F004         	goto	u2930
  4936   0008C4                     u2931:
  4937   0008C4  EF7C  F005         	goto	l691
  4938   0008C8                     u2930:
  4939   0008C8                     l3910:
  4940                           
  4941                           ;TAD_TERMINAL.c: 110:     motor_StartSendString("---------------\r\n");
  4942   0008C8  0EE1               	movlw	low STR_7
  4943   0008CA  6E52               	movwf	motor_StartSendString@str^0,c
  4944   0008CC  0E1F               	movlw	high STR_7
  4945   0008CE  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  4946   0008D0  EC98  F00E         	call	_motor_StartSendString	;wreg free
  4947   0008D4                     
  4948                           ;TAD_TERMINAL.c: 111:     sending_string = 1;
  4949   0008D4  0E01               	movlw	1
  4950   0008D6  6E20               	movwf	motorTerminal@sending_string^0,c
  4951   0008D8                     
  4952                           ;TAD_TERMINAL.c: 112:     state = 10;
  4953   0008D8  0E0A               	movlw	10
  4954   0008DA  6E21               	movwf	motorTerminal@state^0,c
  4955   0008DC                     
  4956                           ;TAD_TERMINAL.c: 113:     hashtag_pressed = 0;
  4957   0008DC  6A22               	clrf	_hashtag_pressed^0,c
  4958   0008DE  EF7C  F005         	goto	l691
  4959   0008E2                     l3918:
  4960                           
  4961                           ;TAD_TERMINAL.c: 118:    if (!sending_string) {
  4962   0008E2  5020               	movf	motorTerminal@sending_string^0,w,c
  4963   0008E4  A4D8               	btfss	status,2,c
  4964   0008E6  EF77  F004         	goto	u2941
  4965   0008EA  EF79  F004         	goto	u2940
  4966   0008EE                     u2941:
  4967   0008EE  EF7C  F005         	goto	l691
  4968   0008F2                     u2940:
  4969   0008F2                     
  4970                           ;TAD_TERMINAL.c: 119:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  4971   0008F2  0E12               	movlw	low STR_8
  4972   0008F4  6E52               	movwf	motor_StartSendString@str^0,c
  4973   0008F6  0E1F               	movlw	high STR_8
  4974   0008F8  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  4975   0008FA  EC98  F00E         	call	_motor_StartSendString	;wreg free
  4976   0008FE                     
  4977                           ;TAD_TERMINAL.c: 120:     sending_string = 1;
  4978   0008FE  0E01               	movlw	1
  4979   000900  6E20               	movwf	motorTerminal@sending_string^0,c
  4980   000902                     
  4981                           ;TAD_TERMINAL.c: 121:     state = 13;
  4982   000902  0E0D               	movlw	13
  4983   000904  6E21               	movwf	motorTerminal@state^0,c
  4984   000906  EF7C  F005         	goto	l691
  4985   00090A                     l3926:
  4986                           
  4987                           ;TAD_TERMINAL.c: 126:    if (!sending_string) {
  4988   00090A  5020               	movf	motorTerminal@sending_string^0,w,c
  4989   00090C  A4D8               	btfss	status,2,c
  4990   00090E  EF8B  F004         	goto	u2951
  4991   000912  EF8D  F004         	goto	u2950
  4992   000916                     u2951:
  4993   000916  EF7C  F005         	goto	l691
  4994   00091A                     u2950:
  4995   00091A                     
  4996                           ;TAD_TERMINAL.c: 127:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  4997   00091A  0EB3               	movlw	low STR_9
  4998   00091C  6E52               	movwf	motor_StartSendString@str^0,c
  4999   00091E  0E1E               	movlw	high STR_9
  5000   000920  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5001   000922  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5002   000926                     
  5003                           ;TAD_TERMINAL.c: 128:     sending_string = 1;
  5004   000926  0E01               	movlw	1
  5005   000928  6E20               	movwf	motorTerminal@sending_string^0,c
  5006   00092A                     
  5007                           ;TAD_TERMINAL.c: 129:     state = 1;
  5008   00092A  0E01               	movlw	1
  5009   00092C  6E21               	movwf	motorTerminal@state^0,c
  5010   00092E  EF7C  F005         	goto	l691
  5011   000932                     l3934:
  5012                           
  5013                           ;TAD_TERMINAL.c: 134:    if(Terminal_RXAvailable()) {
  5014   000932  ECF9  F00E         	call	_Terminal_RXAvailable	;wreg free
  5015   000936  0900               	iorlw	0
  5016   000938  B4D8               	btfsc	status,2,c
  5017   00093A  EFA1  F004         	goto	u2961
  5018   00093E  EFA3  F004         	goto	u2960
  5019   000942                     u2961:
  5020   000942  EF7C  F005         	goto	l691
  5021   000946                     u2960:
  5022   000946                     
  5023                           ;TAD_TERMINAL.c: 135:     char opcion = Terminal_ReceiveChar();
  5024   000946  EC35  F00F         	call	_Terminal_ReceiveChar	;wreg free
  5025   00094A  6E5F               	movwf	motorTerminal@opcion^0,c
  5026   00094C                     
  5027                           ;TAD_TERMINAL.c: 136:     if (opcion >= '1' && opcion <= '3') {
  5028   00094C  0E30               	movlw	48
  5029   00094E  645F               	cpfsgt	motorTerminal@opcion^0,c
  5030   000950  EFAC  F004         	goto	u2971
  5031   000954  EFAE  F004         	goto	u2970
  5032   000958                     u2971:
  5033   000958  EFC5  F004         	goto	l3948
  5034   00095C                     u2970:
  5035   00095C  0E34               	movlw	52
  5036   00095E  605F               	cpfslt	motorTerminal@opcion^0,c
  5037   000960  EFB4  F004         	goto	u2981
  5038   000964  EFB6  F004         	goto	u2980
  5039   000968                     u2981:
  5040   000968  EFC5  F004         	goto	l3948
  5041   00096C                     u2980:
  5042   00096C                     
  5043                           ;TAD_TERMINAL.c: 137:      motor_StartSendString("\r\n");
  5044   00096C  0EF0               	movlw	low (STR_7+15)
  5045   00096E  6E52               	movwf	motor_StartSendString@str^0,c
  5046   000970  0E1F               	movlw	high (STR_7+15)
  5047   000972  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5048   000974  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5049   000978                     
  5050                           ;TAD_TERMINAL.c: 138:      sending_string = 1;
  5051   000978  0E01               	movlw	1
  5052   00097A  6E20               	movwf	motorTerminal@sending_string^0,c
  5053   00097C                     
  5054                           ;TAD_TERMINAL.c: 139:      state = (opcion - '1') * 10 + 20;
  5055   00097C  505F               	movf	motorTerminal@opcion^0,w,c
  5056   00097E  0D0A               	mullw	10
  5057   000980  50F3               	movf	243,w,c
  5058   000982  0F2A               	addlw	42
  5059   000984  6E21               	movwf	motorTerminal@state^0,c
  5060                           
  5061                           ;TAD_TERMINAL.c: 140:     } else {
  5062   000986  EF7C  F005         	goto	l691
  5063   00098A                     l3948:
  5064                           
  5065                           ;TAD_TERMINAL.c: 141:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5066   00098A  0E68               	movlw	low STR_11
  5067   00098C  6E52               	movwf	motor_StartSendString@str^0,c
  5068   00098E  0E1F               	movlw	high STR_11
  5069   000990  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5070   000992  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5071   000996                     l3950:
  5072                           
  5073                           ;TAD_TERMINAL.c: 142:      sending_string = 1;
  5074   000996  0E01               	movlw	1
  5075   000998  6E20               	movwf	motorTerminal@sending_string^0,c
  5076   00099A                     l3952:
  5077                           
  5078                           ;TAD_TERMINAL.c: 143:      state = 0;
  5079   00099A  6A21               	clrf	motorTerminal@state^0,c
  5080   00099C  EF7C  F005         	goto	l691
  5081   0009A0                     l3954:
  5082                           
  5083                           ;TAD_TERMINAL.c: 149:    if (!sending_string) {
  5084   0009A0  5020               	movf	motorTerminal@sending_string^0,w,c
  5085   0009A2  A4D8               	btfss	status,2,c
  5086   0009A4  EFD6  F004         	goto	u2991
  5087   0009A8  EFD8  F004         	goto	u2990
  5088   0009AC                     u2991:
  5089   0009AC  EF7C  F005         	goto	l691
  5090   0009B0                     u2990:
  5091   0009B0                     
  5092                           ;TAD_TERMINAL.c: 150:     unsigned char currentUser[5];;TAD_TERMINAL.c: 151:     getActu
      +                          alUID(currentUser);
  5093   0009B0  0E5A               	movlw	low motorTerminal@currentUser
  5094   0009B2  6E4E               	movwf	getActualUID@UID^0,c
  5095   0009B4  EC7C  F00A         	call	_getActualUID	;wreg free
  5096   0009B8                     
  5097                           ;TAD_TERMINAL.c: 152:     if (currentUser[0]) {
  5098   0009B8  505A               	movf	motorTerminal@currentUser^0,w,c
  5099   0009BA  B4D8               	btfsc	status,2,c
  5100   0009BC  EFE2  F004         	goto	u3001
  5101   0009C0  EFE4  F004         	goto	u3000
  5102   0009C4                     u3001:
  5103   0009C4  EFEA  F004         	goto	l3962
  5104   0009C8                     u3000:
  5105   0009C8                     
  5106                           ;TAD_TERMINAL.c: 153:      printfUID(currentUser);
  5107   0009C8  0E5A               	movlw	low motorTerminal@currentUser
  5108   0009CA  6E54               	movwf	printfUID@currentUser^0,c
  5109   0009CC  EC43  F009         	call	_printfUID	;wreg free
  5110                           
  5111                           ;TAD_TERMINAL.c: 154:     } else {
  5112   0009D0  EFF2  F004         	goto	l3966
  5113   0009D4                     l3962:
  5114                           
  5115                           ;TAD_TERMINAL.c: 155:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5116   0009D4  0E47               	movlw	low STR_12
  5117   0009D6  6E52               	movwf	motor_StartSendString@str^0,c
  5118   0009D8  0E1F               	movlw	high STR_12
  5119   0009DA  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5120   0009DC  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5121   0009E0                     
  5122                           ;TAD_TERMINAL.c: 156:      sending_string = 1;
  5123   0009E0  0E01               	movlw	1
  5124   0009E2  6E20               	movwf	motorTerminal@sending_string^0,c
  5125   0009E4                     l3966:
  5126                           
  5127                           ;TAD_TERMINAL.c: 158:     state = 25;
  5128   0009E4  0E19               	movlw	25
  5129   0009E6  6E21               	movwf	motorTerminal@state^0,c
  5130   0009E8  EF7C  F005         	goto	l691
  5131   0009EC                     l3968:
  5132                           
  5133                           ;TAD_TERMINAL.c: 163:    if (!sending_string) {
  5134   0009EC  5020               	movf	motorTerminal@sending_string^0,w,c
  5135   0009EE  A4D8               	btfss	status,2,c
  5136   0009F0  EFFC  F004         	goto	u3011
  5137   0009F4  EFFE  F004         	goto	u3010
  5138   0009F8                     u3011:
  5139   0009F8  EF7C  F005         	goto	l691
  5140   0009FC                     u3010:
  5141   0009FC                     
  5142                           ;TAD_TERMINAL.c: 164:     motor_StartSendString("\r\n");
  5143   0009FC  0EF0               	movlw	low (STR_7+15)
  5144   0009FE  6E52               	movwf	motor_StartSendString@str^0,c
  5145   000A00  0E1F               	movlw	high (STR_7+15)
  5146   000A02  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5147   000A04  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5148   000A08  EFCB  F004         	goto	l3950
  5149   000A0C                     l3976:
  5150                           
  5151                           ;TAD_TERMINAL.c: 171:    if (!sending_string) {
  5152   000A0C  5020               	movf	motorTerminal@sending_string^0,w,c
  5153   000A0E  A4D8               	btfss	status,2,c
  5154   000A10  EF0C  F005         	goto	u3021
  5155   000A14  EF0E  F005         	goto	u3020
  5156   000A18                     u3021:
  5157   000A18  EF7C  F005         	goto	l691
  5158   000A1C                     u3020:
  5159   000A1C                     
  5160                           ;TAD_TERMINAL.c: 172:     showAllConfigurations();
  5161   000A1C  ECC6  F00B         	call	_showAllConfigurations	;wreg free
  5162   000A20  EFCD  F004         	goto	l3952
  5163   000A24                     l3982:
  5164                           
  5165                           ;TAD_TERMINAL.c: 178:    if (!sending_string) {
  5166   000A24  5020               	movf	motorTerminal@sending_string^0,w,c
  5167   000A26  A4D8               	btfss	status,2,c
  5168   000A28  EF18  F005         	goto	u3031
  5169   000A2C  EF1A  F005         	goto	u3030
  5170   000A30                     u3031:
  5171   000A30  EF7C  F005         	goto	l691
  5172   000A34                     u3030:
  5173   000A34                     
  5174                           ;TAD_TERMINAL.c: 179:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5175   000A34  0EAA               	movlw	low STR_14
  5176   000A36  6E52               	movwf	motor_StartSendString@str^0,c
  5177   000A38  0E1F               	movlw	high STR_14
  5178   000A3A  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5179   000A3C  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5180   000A40                     
  5181                           ;TAD_TERMINAL.c: 180:     sending_string = 1;
  5182   000A40  0E01               	movlw	1
  5183   000A42  6E20               	movwf	motorTerminal@sending_string^0,c
  5184   000A44                     
  5185                           ;TAD_TERMINAL.c: 181:     state = 2;
  5186   000A44  0E02               	movlw	2
  5187   000A46  6E21               	movwf	motorTerminal@state^0,c
  5188   000A48                     
  5189                           ;TAD_TERMINAL.c: 182:     index = 0;
  5190   000A48  6A1F               	clrf	motorTerminal@index^0,c
  5191   000A4A  EF7C  F005         	goto	l691
  5192   000A4E                     l3992:
  5193                           
  5194                           ;TAD_TERMINAL.c: 187:    if(Terminal_RXAvailable()) {
  5195   000A4E  ECF9  F00E         	call	_Terminal_RXAvailable	;wreg free
  5196   000A52  0900               	iorlw	0
  5197   000A54  B4D8               	btfsc	status,2,c
  5198   000A56  EF2F  F005         	goto	u3041
  5199   000A5A  EF31  F005         	goto	u3040
  5200   000A5E                     u3041:
  5201   000A5E  EF7C  F005         	goto	l691
  5202   000A62                     u3040:
  5203   000A62                     
  5204                           ;TAD_TERMINAL.c: 188:     hour[index] = Terminal_ReceiveChar();
  5205   000A62  501F               	movf	motorTerminal@index^0,w,c
  5206   000A64  0F79               	addlw	low motorTerminal@hour
  5207   000A66  6ED9               	movwf	fsr2l,c
  5208   000A68  6ADA               	clrf	fsr2h,c
  5209   000A6A  EC35  F00F         	call	_Terminal_ReceiveChar	;wreg free
  5210   000A6E  6EDF               	movwf	indf2,c
  5211                           
  5212                           ;TAD_TERMINAL.c: 189:     Terminal_SendChar(hour[index]);
  5213   000A70  501F               	movf	motorTerminal@index^0,w,c
  5214   000A72  0F79               	addlw	low motorTerminal@hour
  5215   000A74  6ED9               	movwf	fsr2l,c
  5216   000A76  6ADA               	clrf	fsr2h,c
  5217   000A78  50DF               	movf	indf2,w,c
  5218   000A7A  ECB9  F00E         	call	_Terminal_SendChar
  5219   000A7E                     
  5220                           ;TAD_TERMINAL.c: 190:     if(++index == 4) {
  5221   000A7E  2A1F               	incf	motorTerminal@index^0,f,c
  5222   000A80  0E04               	movlw	4
  5223   000A82  181F               	xorwf	motorTerminal@index^0,w,c
  5224   000A84  A4D8               	btfss	status,2,c
  5225   000A86  EF47  F005         	goto	u3051
  5226   000A8A  EF49  F005         	goto	u3050
  5227   000A8E                     u3051:
  5228   000A8E  EF7C  F005         	goto	l691
  5229   000A92                     u3050:
  5230   000A92                     
  5231                           ;TAD_TERMINAL.c: 191:      saveHourToData(hour);
  5232   000A92  0E79               	movlw	low motorTerminal@hour
  5233   000A94  6E4E               	movwf	saveHourToData@hour^0,c
  5234   000A96  EC8D  F00D         	call	_saveHourToData	;wreg free
  5235   000A9A                     
  5236                           ;TAD_TERMINAL.c: 192:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5237   000A9A  0E89               	movlw	low STR_15
  5238   000A9C  6E52               	movwf	motor_StartSendString@str^0,c
  5239   000A9E  0E1F               	movlw	high STR_15
  5240   000AA0  6E53               	movwf	(motor_StartSendString@str+1)^0,c
  5241   000AA2  EC98  F00E         	call	_motor_StartSendString	;wreg free
  5242   000AA6  EFCB  F004         	goto	l3950
  5243   000AAA                     l4008:
  5244   000AAA  5021               	movf	motorTerminal@state^0,w,c
  5245                           
  5246                           ; Switch size 1, requested type "simple"
  5247                           ; Number of cases is 9, Range of values is 0 to 40
  5248                           ; switch strategies available:
  5249                           ; Name         Instructions Cycles
  5250                           ; simple_byte           28    15 (average)
  5251                           ;	Chosen strategy is simple_byte
  5252   000AAC  0A00               	xorlw	0	; case 0
  5253   000AAE  B4D8               	btfsc	status,2,c
  5254   000AB0  EF52  F004         	goto	l3906
  5255   000AB4  0A01               	xorlw	1	; case 1
  5256   000AB6  B4D8               	btfsc	status,2,c
  5257   000AB8  EF99  F004         	goto	l3934
  5258   000ABC  0A03               	xorlw	3	; case 2
  5259   000ABE  B4D8               	btfsc	status,2,c
  5260   000AC0  EF27  F005         	goto	l3992
  5261   000AC4  0A08               	xorlw	8	; case 10
  5262   000AC6  B4D8               	btfsc	status,2,c
  5263   000AC8  EF71  F004         	goto	l3918
  5264   000ACC  0A07               	xorlw	7	; case 13
  5265   000ACE  B4D8               	btfsc	status,2,c
  5266   000AD0  EF85  F004         	goto	l3926
  5267   000AD4  0A19               	xorlw	25	; case 20
  5268   000AD6  B4D8               	btfsc	status,2,c
  5269   000AD8  EFD0  F004         	goto	l3954
  5270   000ADC  0A0D               	xorlw	13	; case 25
  5271   000ADE  B4D8               	btfsc	status,2,c
  5272   000AE0  EFF6  F004         	goto	l3968
  5273   000AE4  0A07               	xorlw	7	; case 30
  5274   000AE6  B4D8               	btfsc	status,2,c
  5275   000AE8  EF06  F005         	goto	l3976
  5276   000AEC  0A36               	xorlw	54	; case 40
  5277   000AEE  B4D8               	btfsc	status,2,c
  5278   000AF0  EF12  F005         	goto	l3982
  5279   000AF4  EF7C  F005         	goto	l691
  5280   000AF8                     l691:
  5281   000AF8  0012               	return		;funcret
  5282   000AFA                     __end_of_motorTerminal:
  5283                           	callstack 0
  5284                           
  5285 ;; *************** function _showAllConfigurations *****************
  5286 ;; Defined at:
  5287 ;;		line 64 in file "TAD_DATOS.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  j               1    7[COMRAM] unsigned char 
  5292 ;;  i               1    8[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1
  5302 ;;      Params:         0       0       0
  5303 ;;      Locals:         2       0       0
  5304 ;;      Temps:          0       0       0
  5305 ;;      Totals:         2       0       0
  5306 ;;Total ram usage:        2 bytes
  5307 ;; Hardware stack levels used: 1
  5308 ;; Hardware stack levels required when called: 6
  5309 ;; This function calls:
  5310 ;;		_Terminal_SendChar
  5311 ;;		_Terminal_SendString
  5312 ;; This function is called by:
  5313 ;;		_motorTerminal
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text9
  5318   00178C                     __ptext9:
  5319                           	callstack 0
  5320   00178C                     _showAllConfigurations:
  5321                           	callstack 23
  5322   00178C                     
  5323                           ;TAD_DATOS.c: 65:     static const char userStr[] = "User ";;TAD_DATOS.c: 66:     static
      +                           const char configStr[] = " Config: ";;TAD_DATOS.c: 68:     for(char i = 0; i < 4; i++) 
      +                          {
  5324   00178C  6A55               	clrf	showAllConfigurations@i^0,c
  5325   00178E                     l3664:
  5326                           
  5327                           ;TAD_DATOS.c: 69:         Terminal_SendString(userStr);
  5328   00178E  0EAD               	movlw	low showAllConfigurations@userStr
  5329   001790  6E52               	movwf	Terminal_SendString@str^0,c
  5330   001792  0E1E               	movlw	high showAllConfigurations@userStr
  5331   001794  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5332   001796  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5333   00179A                     
  5334                           ;TAD_DATOS.c: 70:         Terminal_SendChar('1' + i);
  5335   00179A  5055               	movf	showAllConfigurations@i^0,w,c
  5336   00179C  0F31               	addlw	49
  5337   00179E  ECB9  F00E         	call	_Terminal_SendChar
  5338   0017A2                     
  5339                           ;TAD_DATOS.c: 71:         Terminal_SendString(configStr);
  5340   0017A2  0EA3               	movlw	low showAllConfigurations@configStr
  5341   0017A4  6E52               	movwf	Terminal_SendString@str^0,c
  5342   0017A6  0E1E               	movlw	high showAllConfigurations@configStr
  5343   0017A8  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5344   0017AA  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5345   0017AE                     
  5346                           ;TAD_DATOS.c: 73:         for(char j = 0; j < 6; j++) {
  5347   0017AE  6A54               	clrf	showAllConfigurations@j^0,c
  5348   0017B0                     l3676:
  5349                           
  5350                           ;TAD_DATOS.c: 74:             Terminal_SendChar('0' + configurations[i][j]);
  5351   0017B0  5055               	movf	showAllConfigurations@i^0,w,c
  5352   0017B2  0D06               	mullw	6
  5353   0017B4  50F3               	movf	243,w,c
  5354   0017B6  0FC6               	addlw	low _configurations
  5355   0017B8  2454               	addwf	showAllConfigurations@j^0,w,c
  5356   0017BA  6ED9               	movwf	fsr2l,c
  5357   0017BC  6ADA               	clrf	fsr2h,c
  5358   0017BE  50DF               	movf	indf2,w,c
  5359   0017C0  0F30               	addlw	48
  5360   0017C2  ECB9  F00E         	call	_Terminal_SendChar
  5361   0017C6                     
  5362                           ;TAD_DATOS.c: 75:             Terminal_SendString(" ");
  5363   0017C6  0EFB               	movlw	low (STR_5+2)
  5364   0017C8  6E52               	movwf	Terminal_SendString@str^0,c
  5365   0017CA  0E1F               	movlw	high (STR_5+2)
  5366   0017CC  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5367   0017CE  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5368   0017D2                     
  5369                           ;TAD_DATOS.c: 76:         }
  5370   0017D2  2A54               	incf	showAllConfigurations@j^0,f,c
  5371   0017D4  0E05               	movlw	5
  5372   0017D6  6454               	cpfsgt	showAllConfigurations@j^0,c
  5373   0017D8  EFF0  F00B         	goto	u2661
  5374   0017DC  EFF2  F00B         	goto	u2660
  5375   0017E0                     u2661:
  5376   0017E0  EFD8  F00B         	goto	l3676
  5377   0017E4                     u2660:
  5378   0017E4                     
  5379                           ;TAD_DATOS.c: 77:         Terminal_SendString("\r\n");
  5380   0017E4  0EF0               	movlw	low (STR_7+15)
  5381   0017E6  6E52               	movwf	Terminal_SendString@str^0,c
  5382   0017E8  0E1F               	movlw	high (STR_7+15)
  5383   0017EA  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5384   0017EC  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5385   0017F0                     
  5386                           ;TAD_DATOS.c: 78:     }
  5387   0017F0  2A55               	incf	showAllConfigurations@i^0,f,c
  5388   0017F2  0E03               	movlw	3
  5389   0017F4  6455               	cpfsgt	showAllConfigurations@i^0,c
  5390   0017F6  EFFF  F00B         	goto	u2671
  5391   0017FA  EF01  F00C         	goto	u2670
  5392   0017FE                     u2671:
  5393   0017FE  EFC7  F00B         	goto	l3664
  5394   001802                     u2670:
  5395   001802  0012               	return		;funcret
  5396   001804                     __end_of_showAllConfigurations:
  5397                           	callstack 0
  5398                           
  5399 ;; *************** function _saveHourToData *****************
  5400 ;; Defined at:
  5401 ;;		line 86 in file "TAD_DATOS.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5404 ;;		 -> motorTerminal@hour(4), 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  i               1    2[COMRAM] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1
  5416 ;;      Params:         1       0       0
  5417 ;;      Locals:         1       0       0
  5418 ;;      Temps:          0       0       0
  5419 ;;      Totals:         2       0       0
  5420 ;;Total ram usage:        2 bytes
  5421 ;; Hardware stack levels used: 1
  5422 ;; Hardware stack levels required when called: 3
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_motorTerminal
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text10
  5431   001B1A                     __ptext10:
  5432                           	callstack 0
  5433   001B1A                     _saveHourToData:
  5434                           	callstack 26
  5435   001B1A                     
  5436                           ;TAD_DATOS.c: 87:     if(!hour) return;
  5437   001B1A  504E               	movf	saveHourToData@hour^0,w,c
  5438   001B1C  A4D8               	btfss	status,2,c
  5439   001B1E  EF93  F00D         	goto	u2681
  5440   001B22  EF95  F00D         	goto	u2680
  5441   001B26                     u2681:
  5442   001B26  EF97  F00D         	goto	l777
  5443   001B2A                     u2680:
  5444   001B2A  EFAB  F00D         	goto	l778
  5445   001B2E                     l777:
  5446                           
  5447                           ;TAD_DATOS.c: 88:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5448   001B2E  6A4F               	clrf	saveHourToData@i^0,c
  5449   001B30                     l3698:
  5450   001B30  504E               	movf	saveHourToData@hour^0,w,c
  5451   001B32  244F               	addwf	saveHourToData@i^0,w,c
  5452   001B34  6ED9               	movwf	fsr2l,c
  5453   001B36  6ADA               	clrf	fsr2h,c
  5454   001B38  504F               	movf	saveHourToData@i^0,w,c
  5455   001B3A  0F70               	addlw	low _currentTime
  5456   001B3C  6EE1               	movwf	fsr1l,c
  5457   001B3E  6AE2               	clrf	fsr1h,c
  5458   001B40  CFDF FFE7          	movff	indf2,indf1
  5459   001B44  2A4F               	incf	saveHourToData@i^0,f,c
  5460   001B46  0E03               	movlw	3
  5461   001B48  644F               	cpfsgt	saveHourToData@i^0,c
  5462   001B4A  EFA9  F00D         	goto	u2691
  5463   001B4E  EFAB  F00D         	goto	u2690
  5464   001B52                     u2691:
  5465   001B52  EF98  F00D         	goto	l3698
  5466   001B56                     u2690:
  5467   001B56                     l778:
  5468   001B56  0012               	return		;funcret
  5469   001B58                     __end_of_saveHourToData:
  5470                           	callstack 0
  5471                           
  5472 ;; *************** function _printfUID *****************
  5473 ;; Defined at:
  5474 ;;		line 68 in file "TAD_TERMINAL.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5477 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  i               2   11[COMRAM] int 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1
  5489 ;;      Params:         1       0       0
  5490 ;;      Locals:         2       0       0
  5491 ;;      Temps:          3       0       0
  5492 ;;      Totals:         6       0       0
  5493 ;;Total ram usage:        6 bytes
  5494 ;; Hardware stack levels used: 1
  5495 ;; Hardware stack levels required when called: 6
  5496 ;; This function calls:
  5497 ;;		_Terminal_SendChar
  5498 ;;		_Terminal_SendString
  5499 ;; This function is called by:
  5500 ;;		_motorTerminal
  5501 ;;		_setCurrentUser
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text11
  5506   001286                     __ptext11:
  5507                           	callstack 0
  5508   001286                     _printfUID:
  5509                           	callstack 22
  5510   001286                     
  5511                           ;TAD_TERMINAL.c: 69:  static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 70: 
      +                           Terminal_SendString("UID: ");
  5512   001286  0EF3               	movlw	low STR_1
  5513   001288  6E52               	movwf	Terminal_SendString@str^0,c
  5514   00128A  0E1F               	movlw	high STR_1
  5515   00128C  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5516   00128E  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5517   001292                     
  5518                           ;TAD_TERMINAL.c: 71:  for (int i = 0; i < 5; i++) {
  5519   001292  0E00               	movlw	0
  5520   001294  6E59               	movwf	(printfUID@i+1)^0,c
  5521   001296  0E00               	movlw	0
  5522   001298  6E58               	movwf	printfUID@i^0,c
  5523   00129A                     l3348:
  5524                           
  5525                           ;TAD_TERMINAL.c: 72:   Terminal_SendChar(hex[currentUser[i] >> 4]);
  5526   00129A  5054               	movf	printfUID@currentUser^0,w,c
  5527   00129C  2458               	addwf	printfUID@i^0,w,c
  5528   00129E  6ED9               	movwf	fsr2l,c
  5529   0012A0  6ADA               	clrf	fsr2h,c
  5530   0012A2  50DF               	movf	indf2,w,c
  5531   0012A4  6E55               	movwf	??_printfUID^0,c
  5532   0012A6  3855               	swapf	??_printfUID^0,w,c
  5533   0012A8  0B0F               	andlw	15
  5534   0012AA  6E56               	movwf	(??_printfUID+1)^0,c
  5535   0012AC  6A57               	clrf	(??_printfUID+2)^0,c
  5536   0012AE  0E86               	movlw	low printfUID@hex
  5537   0012B0  2456               	addwf	(??_printfUID+1)^0,w,c
  5538   0012B2  6EF6               	movwf	tblptrl,c
  5539   0012B4  0E1E               	movlw	high printfUID@hex
  5540   0012B6  2057               	addwfc	(??_printfUID+2)^0,w,c
  5541   0012B8  6EF7               	movwf	tblptrh,c
  5542   0012BA                     	if	0	;There are less than 3 active tblptr bytes
  5543   0012BA                     	endif
  5544   0012BA  0008               	tblrd		*
  5545   0012BC  50F5               	movf	tablat,w,c
  5546   0012BE  ECB9  F00E         	call	_Terminal_SendChar
  5547                           
  5548                           ;TAD_TERMINAL.c: 73:   Terminal_SendChar(hex[currentUser[i] & 0x0F]);
  5549   0012C2  5054               	movf	printfUID@currentUser^0,w,c
  5550   0012C4  2458               	addwf	printfUID@i^0,w,c
  5551   0012C6  6ED9               	movwf	fsr2l,c
  5552   0012C8  6ADA               	clrf	fsr2h,c
  5553   0012CA  50DF               	movf	indf2,w,c
  5554   0012CC  0B0F               	andlw	15
  5555   0012CE  6E55               	movwf	??_printfUID^0,c
  5556   0012D0  6A56               	clrf	(??_printfUID+1)^0,c
  5557   0012D2  0E86               	movlw	low printfUID@hex
  5558   0012D4  2455               	addwf	??_printfUID^0,w,c
  5559   0012D6  6EF6               	movwf	tblptrl,c
  5560   0012D8  0E1E               	movlw	high printfUID@hex
  5561   0012DA  2056               	addwfc	(??_printfUID+1)^0,w,c
  5562   0012DC  6EF7               	movwf	tblptrh,c
  5563   0012DE                     	if	0	;There are less than 3 active tblptr bytes
  5564   0012DE                     	endif
  5565   0012DE  0008               	tblrd		*
  5566   0012E0  50F5               	movf	tablat,w,c
  5567   0012E2  ECB9  F00E         	call	_Terminal_SendChar
  5568   0012E6                     
  5569                           ;TAD_TERMINAL.c: 74:   if (i < 4) Terminal_SendString("-");
  5570   0012E6  BE59               	btfsc	(printfUID@i+1)^0,7,c
  5571   0012E8  EF81  F009         	goto	u2320
  5572   0012EC  5059               	movf	(printfUID@i+1)^0,w,c
  5573   0012EE  E107               	bnz	u2321
  5574   0012F0  0E04               	movlw	4
  5575   0012F2  5C58               	subwf	printfUID@i^0,w,c
  5576   0012F4  B0D8               	btfsc	status,0,c
  5577   0012F6  EF7F  F009         	goto	u2321
  5578   0012FA  EF81  F009         	goto	u2320
  5579   0012FE                     u2321:
  5580   0012FE  EF87  F009         	goto	l3354
  5581   001302                     u2320:
  5582   001302  0EFD               	movlw	low STR_2
  5583   001304  6E52               	movwf	Terminal_SendString@str^0,c
  5584   001306  0E1F               	movlw	high STR_2
  5585   001308  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5586   00130A  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5587   00130E                     l3354:
  5588                           
  5589                           ;TAD_TERMINAL.c: 75:  }
  5590   00130E  4A58               	infsnz	printfUID@i^0,f,c
  5591   001310  2A59               	incf	(printfUID@i+1)^0,f,c
  5592   001312  BE59               	btfsc	(printfUID@i+1)^0,7,c
  5593   001314  EF95  F009         	goto	u2331
  5594   001318  5059               	movf	(printfUID@i+1)^0,w,c
  5595   00131A  E109               	bnz	u2330
  5596   00131C  0E05               	movlw	5
  5597   00131E  5C58               	subwf	printfUID@i^0,w,c
  5598   001320  A0D8               	btfss	status,0,c
  5599   001322  EF95  F009         	goto	u2331
  5600   001326  EF97  F009         	goto	u2330
  5601   00132A                     u2331:
  5602   00132A  EF4D  F009         	goto	l3348
  5603   00132E                     u2330:
  5604   00132E                     
  5605                           ;TAD_TERMINAL.c: 76:  Terminal_SendString("\r\n");
  5606   00132E  0EF0               	movlw	low (STR_7+15)
  5607   001330  6E52               	movwf	Terminal_SendString@str^0,c
  5608   001332  0E1F               	movlw	high (STR_7+15)
  5609   001334  6E53               	movwf	(Terminal_SendString@str+1)^0,c
  5610   001336  ECE8  F00D         	call	_Terminal_SendString	;wreg free
  5611   00133A  0012               	return		;funcret
  5612   00133C                     __end_of_printfUID:
  5613                           	callstack 0
  5614                           
  5615 ;; *************** function _Terminal_SendString *****************
  5616 ;; Defined at:
  5617 ;;		line 30 in file "TAD_TERMINAL.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5620 ;;		 -> STR_19(2), STR_18(22), STR_17(3), STR_16(2), 
  5621 ;;		 -> showAllConfigurations@configStr(10), showAllConfigurations@userStr(6), STR_6(3), STR_5(4), 
  5622 ;;		 -> STR_4(3), STR_3(3), STR_2(2), STR_1(6), 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1
  5634 ;;      Params:         2       0       0
  5635 ;;      Locals:         0       0       0
  5636 ;;      Temps:          0       0       0
  5637 ;;      Totals:         2       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used: 1
  5640 ;; Hardware stack levels required when called: 5
  5641 ;; This function calls:
  5642 ;;		_Terminal_SendChar
  5643 ;; This function is called by:
  5644 ;;		_printfUID
  5645 ;;		_printLedConfig
  5646 ;;		_showAllConfigurations
  5647 ;;		_setCurrentUser
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text12
  5652   001BD0                     __ptext12:
  5653                           	callstack 0
  5654   001BD0                     _Terminal_SendString:
  5655                           	callstack 22
  5656   001BD0                     
  5657                           ;TAD_TERMINAL.c: 31:  while (*str) {
  5658   001BD0  EFF4  F00D         	goto	l3142
  5659   001BD4                     l3138:
  5660                           
  5661                           ;TAD_TERMINAL.c: 32:   Terminal_SendChar(*str++);
  5662   001BD4  C052  FFF6         	movff	Terminal_SendString@str,tblptrl
  5663   001BD8  C053  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5664   001BDC                     	if	0	;tblptru may be non-zero
  5665   001BDC                     	endif
  5666   001BDC                     	if	0	;tblptru may be non-zero
  5667   001BDC                     	endif
  5668   001BDC  0008               	tblrd		*
  5669   001BDE  50F5               	movf	tablat,w,c
  5670   001BE0  ECB9  F00E         	call	_Terminal_SendChar
  5671   001BE4  4A52               	infsnz	Terminal_SendString@str^0,f,c
  5672   001BE6  2A53               	incf	(Terminal_SendString@str+1)^0,f,c
  5673   001BE8                     l3142:
  5674                           
  5675                           ;TAD_TERMINAL.c: 31:  while (*str) {
  5676   001BE8  C052  FFF6         	movff	Terminal_SendString@str,tblptrl
  5677   001BEC  C053  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  5678   001BF0                     	if	0	;tblptru may be non-zero
  5679   001BF0                     	endif
  5680   001BF0                     	if	0	;tblptru may be non-zero
  5681   001BF0                     	endif
  5682   001BF0  0008               	tblrd		*
  5683   001BF2  50F5               	movf	tablat,w,c
  5684   001BF4  0900               	iorlw	0
  5685   001BF6  A4D8               	btfss	status,2,c
  5686   001BF8  EF00  F00E         	goto	u2101
  5687   001BFC  EF02  F00E         	goto	u2100
  5688   001C00                     u2101:
  5689   001C00  EFEA  F00D         	goto	l3138
  5690   001C04                     u2100:
  5691   001C04  0012               	return		;funcret
  5692   001C06                     __end_of_Terminal_SendString:
  5693                           	callstack 0
  5694                           
  5695 ;; *************** function _Terminal_SendChar *****************
  5696 ;; Defined at:
  5697 ;;		line 25 in file "TAD_TERMINAL.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  c               1    wreg     unsigned char 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  c               1    4[COMRAM] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      void 
  5704 ;; Registers used:
  5705 ;;		wreg, status,2, status,0, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1
  5711 ;;      Params:         0       0       0
  5712 ;;      Locals:         1       0       0
  5713 ;;      Temps:          0       0       0
  5714 ;;      Totals:         1       0       0
  5715 ;;Total ram usage:        1 bytes
  5716 ;; Hardware stack levels used: 1
  5717 ;; Hardware stack levels required when called: 4
  5718 ;; This function calls:
  5719 ;;		_Terminal_TXAvailable
  5720 ;; This function is called by:
  5721 ;;		_Terminal_SendString
  5722 ;;		_printfUID
  5723 ;;		_printLedConfig
  5724 ;;		_motorTerminal
  5725 ;;		_showAllConfigurations
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text13
  5730   001D72                     __ptext13:
  5731                           	callstack 0
  5732   001D72                     _Terminal_SendChar:
  5733                           	callstack 22
  5734                           
  5735                           ;incstack = 0
  5736                           ;Terminal_SendChar@c stored from wreg
  5737   001D72  6E51               	movwf	Terminal_SendChar@c^0,c
  5738   001D74                     l3110:
  5739   001D74  ECC8  F00E         	call	_Terminal_TXAvailable	;wreg free
  5740   001D78  504E               	movf	?_Terminal_TXAvailable^0,w,c
  5741   001D7A  104F               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5742   001D7C  B4D8               	btfsc	status,2,c
  5743   001D7E  EFC3  F00E         	goto	u2081
  5744   001D82  EFC5  F00E         	goto	u2080
  5745   001D86                     u2081:
  5746   001D86  EFBA  F00E         	goto	l3110
  5747   001D8A                     u2080:
  5748   001D8A                     
  5749                           ;TAD_TERMINAL.c: 27:  TXREG = c;
  5750   001D8A  C051  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5751   001D8E  0012               	return		;funcret
  5752   001D90                     __end_of_Terminal_SendChar:
  5753                           	callstack 0
  5754                           
  5755 ;; *************** function _motor_StartSendString *****************
  5756 ;; Defined at:
  5757 ;;		line 58 in file "TAD_TERMINAL.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5760 ;;		 -> STR_15(33), STR_14(33), STR_13(3), STR_12(33), 
  5761 ;;		 -> STR_11(33), STR_10(3), STR_9(95), STR_8(53), 
  5762 ;;		 -> STR_7(18), 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      void 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1
  5774 ;;      Params:         2       0       0
  5775 ;;      Locals:         0       0       0
  5776 ;;      Temps:          0       0       0
  5777 ;;      Totals:         2       0       0
  5778 ;;Total ram usage:        2 bytes
  5779 ;; Hardware stack levels used: 1
  5780 ;; Hardware stack levels required when called: 6
  5781 ;; This function calls:
  5782 ;;		_motor_SendString
  5783 ;; This function is called by:
  5784 ;;		_motorTerminal
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text14
  5789   001D30                     __ptext14:
  5790                           	callstack 0
  5791   001D30                     _motor_StartSendString:
  5792                           	callstack 23
  5793   001D30                     
  5794                           ;TAD_TERMINAL.c: 59:  if (motor_SendString() == 1) {
  5795   001D30  EC02  F00C         	call	_motor_SendString	;wreg free
  5796   001D34  06E8               	decf	wreg,f,c
  5797   001D36  A4D8               	btfss	status,2,c
  5798   001D38  EFA0  F00E         	goto	u2651
  5799   001D3C  EFA2  F00E         	goto	u2650
  5800   001D40                     u2651:
  5801   001D40  EFA8  F00E         	goto	l658
  5802   001D44                     u2650:
  5803   001D44                     
  5804                           ;TAD_TERMINAL.c: 60:   str_ptr = str;
  5805   001D44  C052  F011         	movff	motor_StartSendString@str,_str_ptr
  5806   001D48  C053  F012         	movff	motor_StartSendString@str+1,_str_ptr+1
  5807   001D4C                     
  5808                           ;TAD_TERMINAL.c: 61:   state_str = 1;
  5809   001D4C  0E01               	movlw	1
  5810   001D4E  6E23               	movwf	_state_str^0,c
  5811   001D50                     l658:
  5812   001D50  0012               	return		;funcret
  5813   001D52                     __end_of_motor_StartSendString:
  5814                           	callstack 0
  5815                           
  5816 ;; *************** function _motor_SendString *****************
  5817 ;; Defined at:
  5818 ;;		line 44 in file "TAD_TERMINAL.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      unsigned char 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1
  5832 ;;      Params:         0       0       0
  5833 ;;      Locals:         0       0       0
  5834 ;;      Temps:          0       0       0
  5835 ;;      Totals:         0       0       0
  5836 ;;Total ram usage:        0 bytes
  5837 ;; Hardware stack levels used: 1
  5838 ;; Hardware stack levels required when called: 5
  5839 ;; This function calls:
  5840 ;;		_motor_SendChar
  5841 ;; This function is called by:
  5842 ;;		_motor_StartSendString
  5843 ;;		_motorTerminal
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text15
  5848   001804                     __ptext15:
  5849                           	callstack 0
  5850   001804                     _motor_SendString:
  5851                           	callstack 23
  5852   001804                     
  5853                           ;TAD_TERMINAL.c: 45:  switch(state_str) {
  5854   001804  EF2D  F00C         	goto	l3334
  5855   001808                     l3312:
  5856   001808  0E01               	movlw	1
  5857   00180A  EF38  F00C         	goto	l650
  5858   00180E                     l3316:
  5859                           
  5860                           ;TAD_TERMINAL.c: 48:    if (!*str_ptr) {
  5861   00180E  C011  FFF6         	movff	_str_ptr,tblptrl
  5862   001812  C012  FFF7         	movff	_str_ptr+1,tblptrh
  5863   001816                     	if	0	;tblptru may be non-zero
  5864   001816                     	endif
  5865   001816                     	if	0	;tblptru may be non-zero
  5866   001816                     	endif
  5867   001816  0008               	tblrd		*
  5868   001818  50F5               	movf	tablat,w,c
  5869   00181A  0900               	iorlw	0
  5870   00181C  A4D8               	btfss	status,2,c
  5871   00181E  EF13  F00C         	goto	u2301
  5872   001822  EF15  F00C         	goto	u2300
  5873   001826                     u2301:
  5874   001826  EF18  F00C         	goto	l3324
  5875   00182A                     u2300:
  5876   00182A                     
  5877                           ;TAD_TERMINAL.c: 49:     state_str = 0;
  5878   00182A  6A23               	clrf	_state_str^0,c
  5879   00182C  EF04  F00C         	goto	l3312
  5880   001830                     l3324:
  5881                           
  5882                           ;TAD_TERMINAL.c: 52:    if (motor_SendChar(*str_ptr)) str_ptr++;
  5883   001830  C011  FFF6         	movff	_str_ptr,tblptrl
  5884   001834  C012  FFF7         	movff	_str_ptr+1,tblptrh
  5885   001838                     	if	0	;tblptru may be non-zero
  5886   001838                     	endif
  5887   001838                     	if	0	;tblptru may be non-zero
  5888   001838                     	endif
  5889   001838  0008               	tblrd		*
  5890   00183A  50F5               	movf	tablat,w,c
  5891   00183C  EC4F  F00E         	call	_motor_SendChar
  5892   001840  0900               	iorlw	0
  5893   001842  B4D8               	btfsc	status,2,c
  5894   001844  EF26  F00C         	goto	u2311
  5895   001848  EF28  F00C         	goto	u2310
  5896   00184C                     u2311:
  5897   00184C  EF2A  F00C         	goto	l3328
  5898   001850                     u2310:
  5899   001850  4A11               	infsnz	_str_ptr^0,f,c
  5900   001852  2A12               	incf	(_str_ptr+1)^0,f,c
  5901   001854                     l3328:
  5902                           
  5903                           ;TAD_TERMINAL.c: 53:    return 0;
  5904   001854  0E00               	movlw	0
  5905   001856  EF38  F00C         	goto	l650
  5906   00185A                     l3334:
  5907   00185A  5023               	movf	_state_str^0,w,c
  5908                           
  5909                           ; Switch size 1, requested type "simple"
  5910                           ; Number of cases is 2, Range of values is 0 to 1
  5911                           ; switch strategies available:
  5912                           ; Name         Instructions Cycles
  5913                           ; simple_byte            7     4 (average)
  5914                           ;	Chosen strategy is simple_byte
  5915   00185C  0A00               	xorlw	0	; case 0
  5916   00185E  B4D8               	btfsc	status,2,c
  5917   001860  EF04  F00C         	goto	l3312
  5918   001864  0A01               	xorlw	1	; case 1
  5919   001866  B4D8               	btfsc	status,2,c
  5920   001868  EF07  F00C         	goto	l3316
  5921   00186C  EF2A  F00C         	goto	l3328
  5922   001870                     l650:
  5923   001870  0012               	return		;funcret
  5924   001872                     __end_of_motor_SendString:
  5925                           	callstack 0
  5926                           
  5927 ;; *************** function _motor_SendChar *****************
  5928 ;; Defined at:
  5929 ;;		line 37 in file "TAD_TERMINAL.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  c               1    wreg     unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  c               1    4[COMRAM] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      unsigned char 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1
  5943 ;;      Params:         0       0       0
  5944 ;;      Locals:         1       0       0
  5945 ;;      Temps:          0       0       0
  5946 ;;      Totals:         1       0       0
  5947 ;;Total ram usage:        1 bytes
  5948 ;; Hardware stack levels used: 1
  5949 ;; Hardware stack levels required when called: 4
  5950 ;; This function calls:
  5951 ;;		_Terminal_TXAvailable
  5952 ;; This function is called by:
  5953 ;;		_motor_SendString
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text16
  5958   001C9E                     __ptext16:
  5959                           	callstack 0
  5960   001C9E                     _motor_SendChar:
  5961                           	callstack 23
  5962                           
  5963                           ;incstack = 0
  5964                           ;motor_SendChar@c stored from wreg
  5965   001C9E  6E51               	movwf	motor_SendChar@c^0,c
  5966   001CA0                     
  5967                           ;TAD_TERMINAL.c: 38:  if (!Terminal_TXAvailable()) return 0;
  5968   001CA0  ECC8  F00E         	call	_Terminal_TXAvailable	;wreg free
  5969   001CA4  504E               	movf	?_Terminal_TXAvailable^0,w,c
  5970   001CA6  104F               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5971   001CA8  A4D8               	btfss	status,2,c
  5972   001CAA  EF59  F00E         	goto	u2111
  5973   001CAE  EF5B  F00E         	goto	u2110
  5974   001CB2                     u2111:
  5975   001CB2  EF5E  F00E         	goto	l644
  5976   001CB6                     u2110:
  5977   001CB6  0E00               	movlw	0
  5978   001CB8  EF61  F00E         	goto	l645
  5979   001CBC                     l644:
  5980                           
  5981                           ;TAD_TERMINAL.c: 39:  TXREG = c;
  5982   001CBC  C051  FFAD         	movff	motor_SendChar@c,4013	;volatile
  5983   001CC0                     
  5984                           ;TAD_TERMINAL.c: 40:  return 1;
  5985   001CC0  0E01               	movlw	1
  5986   001CC2                     l645:
  5987   001CC2  0012               	return		;funcret
  5988   001CC4                     __end_of_motor_SendChar:
  5989                           	callstack 0
  5990                           
  5991 ;; *************** function _Terminal_TXAvailable *****************
  5992 ;; Defined at:
  5993 ;;		line 20 in file "TAD_TERMINAL.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  2    1[COMRAM] int 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1
  6007 ;;      Params:         2       0       0
  6008 ;;      Locals:         0       0       0
  6009 ;;      Temps:          1       0       0
  6010 ;;      Totals:         3       0       0
  6011 ;;Total ram usage:        3 bytes
  6012 ;; Hardware stack levels used: 1
  6013 ;; Hardware stack levels required when called: 3
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_Terminal_SendChar
  6018 ;;		_motor_SendChar
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text17
  6023   001D90                     __ptext17:
  6024                           	callstack 0
  6025   001D90                     _Terminal_TXAvailable:
  6026                           	callstack 22
  6027   001D90  B89E               	btfsc	158,4,c	;volatile
  6028   001D92  EFCD  F00E         	goto	u1901
  6029   001D96  EFD1  F00E         	goto	u1900
  6030   001D9A                     u1901:
  6031   001D9A  6A50               	clrf	??_Terminal_TXAvailable^0,c
  6032   001D9C  2A50               	incf	??_Terminal_TXAvailable^0,f,c
  6033   001D9E  EFD2  F00E         	goto	u1908
  6034   001DA2                     u1900:
  6035   001DA2  6A50               	clrf	??_Terminal_TXAvailable^0,c
  6036   001DA4                     u1908:
  6037   001DA4  5050               	movf	??_Terminal_TXAvailable^0,w,c
  6038   001DA6  6E4E               	movwf	?_Terminal_TXAvailable^0,c
  6039   001DA8  6A4F               	clrf	(?_Terminal_TXAvailable+1)^0,c
  6040   001DAA  0012               	return		;funcret
  6041   001DAC                     __end_of_Terminal_TXAvailable:
  6042                           	callstack 0
  6043                           
  6044 ;; *************** function _getActualUID *****************
  6045 ;; Defined at:
  6046 ;;		line 34 in file "TAD_DATOS.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6049 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  i               1    2[COMRAM] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  1    wreg      void 
  6054 ;; Registers used:
  6055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1
  6061 ;;      Params:         1       0       0
  6062 ;;      Locals:         1       0       0
  6063 ;;      Temps:          0       0       0
  6064 ;;      Totals:         2       0       0
  6065 ;;Total ram usage:        2 bytes
  6066 ;; Hardware stack levels used: 1
  6067 ;; Hardware stack levels required when called: 3
  6068 ;; This function calls:
  6069 ;;		Nothing
  6070 ;; This function is called by:
  6071 ;;		_motor_RFID
  6072 ;;		_motorTerminal
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text18
  6077   0014F8                     __ptext18:
  6078                           	callstack 0
  6079   0014F8                     _getActualUID:
  6080                           	callstack 26
  6081   0014F8                     
  6082                           ;TAD_DATOS.c: 35:     if(!UID) return;
  6083   0014F8  504E               	movf	getActualUID@UID^0,w,c
  6084   0014FA  A4D8               	btfss	status,2,c
  6085   0014FC  EF82  F00A         	goto	u2541
  6086   001500  EF84  F00A         	goto	u2540
  6087   001504                     u2541:
  6088   001504  EF86  F00A         	goto	l3570
  6089   001508                     u2540:
  6090   001508  EFC0  F00A         	goto	l751
  6091   00150C                     l3570:
  6092                           
  6093                           ;TAD_DATOS.c: 38:     if(!currentUser[0]) {
  6094   00150C  503E               	movf	_currentUser^0,w,c
  6095   00150E  A4D8               	btfss	status,2,c
  6096   001510  EF8C  F00A         	goto	u2551
  6097   001514  EF8E  F00A         	goto	u2550
  6098   001518                     u2551:
  6099   001518  EFAC  F00A         	goto	l752
  6100   00151C                     u2550:
  6101   00151C                     
  6102                           ;TAD_DATOS.c: 39:         UID[0] = 0x00;
  6103   00151C  504E               	movf	getActualUID@UID^0,w,c
  6104   00151E  6ED9               	movwf	fsr2l,c
  6105   001520  6ADA               	clrf	fsr2h,c
  6106   001522  6ADF               	clrf	indf2,c
  6107   001524                     
  6108                           ;TAD_DATOS.c: 40:         UID[1] = 0x00;
  6109   001524  504E               	movf	getActualUID@UID^0,w,c
  6110   001526  6ED9               	movwf	fsr2l,c
  6111   001528  6ADA               	clrf	fsr2h,c
  6112   00152A  0E01               	movlw	1
  6113   00152C  26D9               	addwf	fsr2l,f,c
  6114   00152E  6ADF               	clrf	indf2,c
  6115   001530                     
  6116                           ;TAD_DATOS.c: 41:         UID[2] = 0x00;
  6117   001530  504E               	movf	getActualUID@UID^0,w,c
  6118   001532  6ED9               	movwf	fsr2l,c
  6119   001534  6ADA               	clrf	fsr2h,c
  6120   001536  0E02               	movlw	2
  6121   001538  26D9               	addwf	fsr2l,f,c
  6122   00153A  6ADF               	clrf	indf2,c
  6123   00153C                     
  6124                           ;TAD_DATOS.c: 42:         UID[3] = 0x00;
  6125   00153C  504E               	movf	getActualUID@UID^0,w,c
  6126   00153E  6ED9               	movwf	fsr2l,c
  6127   001540  6ADA               	clrf	fsr2h,c
  6128   001542  0E03               	movlw	3
  6129   001544  26D9               	addwf	fsr2l,f,c
  6130   001546  6ADF               	clrf	indf2,c
  6131   001548                     
  6132                           ;TAD_DATOS.c: 43:         UID[4] = 0x00;
  6133   001548  504E               	movf	getActualUID@UID^0,w,c
  6134   00154A  6ED9               	movwf	fsr2l,c
  6135   00154C  6ADA               	clrf	fsr2h,c
  6136   00154E  0E04               	movlw	4
  6137   001550  26D9               	addwf	fsr2l,f,c
  6138   001552  6ADF               	clrf	indf2,c
  6139   001554  EFC0  F00A         	goto	l751
  6140   001558                     l752:
  6141                           
  6142                           ;TAD_DATOS.c: 48:     for(char i = 0; i < 5; i++) {
  6143   001558  6A4F               	clrf	getActualUID@i^0,c
  6144   00155A                     l3588:
  6145                           
  6146                           ;TAD_DATOS.c: 49:         UID[i] = currentUser[i];
  6147   00155A  504F               	movf	getActualUID@i^0,w,c
  6148   00155C  0F3E               	addlw	low _currentUser
  6149   00155E  6ED9               	movwf	fsr2l,c
  6150   001560  6ADA               	clrf	fsr2h,c
  6151   001562  504E               	movf	getActualUID@UID^0,w,c
  6152   001564  244F               	addwf	getActualUID@i^0,w,c
  6153   001566  6EE1               	movwf	fsr1l,c
  6154   001568  6AE2               	clrf	fsr1h,c
  6155   00156A  CFDF FFE7          	movff	indf2,indf1
  6156   00156E                     
  6157                           ;TAD_DATOS.c: 50:     }
  6158   00156E  2A4F               	incf	getActualUID@i^0,f,c
  6159   001570  0E04               	movlw	4
  6160   001572  644F               	cpfsgt	getActualUID@i^0,c
  6161   001574  EFBE  F00A         	goto	u2561
  6162   001578  EFC0  F00A         	goto	u2560
  6163   00157C                     u2561:
  6164   00157C  EFAD  F00A         	goto	l3588
  6165   001580                     u2560:
  6166   001580                     l751:
  6167   001580  0012               	return		;funcret
  6168   001582                     __end_of_getActualUID:
  6169                           	callstack 0
  6170                           
  6171 ;; *************** function _Terminal_ReceiveChar *****************
  6172 ;; Defined at:
  6173 ;;		line 22 in file "TAD_TERMINAL.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      unsigned char 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1
  6187 ;;      Params:         0       0       0
  6188 ;;      Locals:         0       0       0
  6189 ;;      Temps:          0       0       0
  6190 ;;      Totals:         0       0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used: 1
  6193 ;; Hardware stack levels required when called: 3
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_motorTerminal
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text19
  6202   001E6A                     __ptext19:
  6203                           	callstack 0
  6204   001E6A                     _Terminal_ReceiveChar:
  6205                           	callstack 26
  6206   001E6A  50AE               	movf	174,w,c	;volatile
  6207   001E6C  0012               	return		;funcret
  6208   001E6E                     __end_of_Terminal_ReceiveChar:
  6209                           	callstack 0
  6210                           
  6211 ;; *************** function _Terminal_RXAvailable *****************
  6212 ;; Defined at:
  6213 ;;		line 21 in file "TAD_TERMINAL.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      unsigned char 
  6220 ;; Registers used:
  6221 ;;		wreg
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1
  6227 ;;      Params:         0       0       0
  6228 ;;      Locals:         0       0       0
  6229 ;;      Temps:          0       0       0
  6230 ;;      Totals:         0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used: 1
  6233 ;; Hardware stack levels required when called: 3
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_motorTerminal
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text20
  6242   001DF2                     __ptext20:
  6243                           	callstack 0
  6244   001DF2                     _Terminal_RXAvailable:
  6245                           	callstack 26
  6246   001DF2  BA9E               	btfsc	158,5,c	;volatile
  6247   001DF4  EFFE  F00E         	goto	u851
  6248   001DF8  EF01  F00F         	goto	u850
  6249   001DFC                     u851:
  6250   001DFC  0E01               	movlw	1
  6251   001DFE  EF02  F00F         	goto	u856
  6252   001E02                     u850:
  6253   001E02  0E00               	movlw	0
  6254   001E04                     u856:
  6255   001E04  0012               	return		;funcret
  6256   001E06                     __end_of_Terminal_RXAvailable:
  6257                           	callstack 0
  6258                           
  6259 ;; *************** function _motorTeclado *****************
  6260 ;; Defined at:
  6261 ;;		line 72 in file "TAD_TECLADO.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1
  6275 ;;      Params:         0       0       0
  6276 ;;      Locals:         0       0       0
  6277 ;;      Temps:          0       0       0
  6278 ;;      Totals:         0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 5
  6282 ;; This function calls:
  6283 ;;		_GetTecla
  6284 ;;		_TI_GetTics
  6285 ;;		_TI_ResetTics
  6286 ;;		_hashtag_pressed3s
  6287 ;;		_setLed
  6288 ;;		_writeColumnas
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text21
  6295   000AFA                     __ptext21:
  6296                           	callstack 0
  6297   000AFA                     _motorTeclado:
  6298                           	callstack 25
  6299   000AFA                     
  6300                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  6301   000AFA  5083               	movf	131,w,c	;volatile
  6302   000AFC  0B0F               	andlw	15
  6303   000AFE  6E3D               	movwf	_Filas^0,c
  6304                           
  6305                           ;TAD_TECLADO.c: 76:     switch(state) {
  6306   000B00  EF23  F006         	goto	l3898
  6307   000B04                     l3822:
  6308                           
  6309                           ;TAD_TECLADO.c: 78:             if (Filas) {
  6310   000B04  503D               	movf	_Filas^0,w,c
  6311   000B06  B4D8               	btfsc	status,2,c
  6312   000B08  EF88  F005         	goto	u2811
  6313   000B0C  EF8A  F005         	goto	u2810
  6314   000B10                     u2811:
  6315   000B10  EF91  F005         	goto	l153
  6316   000B14                     u2810:
  6317   000B14                     
  6318                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer);
  6319   000B14  504C               	movf	_timer^0,w,c
  6320   000B16  EC86  F00E         	call	_TI_ResetTics
  6321   000B1A                     l3826:
  6322                           
  6323                           ;TAD_TECLADO.c: 80:                 state = 3;
  6324   000B1A  0E03               	movlw	3
  6325   000B1C  6E3A               	movwf	_state^0,c
  6326                           
  6327                           ;TAD_TECLADO.c: 81:             } else {
  6328   000B1E  EF3E  F006         	goto	l174
  6329   000B22                     l153:
  6330                           
  6331                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  6332   000B22  6A3C               	clrf	_Columnas^0,c
  6333   000B24                     
  6334                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  6335   000B24  EC62  F00E         	call	_writeColumnas	;wreg free
  6336   000B28                     
  6337                           ;TAD_TECLADO.c: 84:                 state = 1;
  6338   000B28  0E01               	movlw	1
  6339   000B2A  6E3A               	movwf	_state^0,c
  6340   000B2C  EF3E  F006         	goto	l174
  6341   000B30                     l3832:
  6342                           
  6343                           ;TAD_TECLADO.c: 89:             if (Filas) {
  6344   000B30  503D               	movf	_Filas^0,w,c
  6345   000B32  B4D8               	btfsc	status,2,c
  6346   000B34  EF9E  F005         	goto	u2821
  6347   000B38  EFA0  F005         	goto	u2820
  6348   000B3C                     u2821:
  6349   000B3C  EFA5  F005         	goto	l3838
  6350   000B40                     u2820:
  6351   000B40                     
  6352                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer);
  6353   000B40  504C               	movf	_timer^0,w,c
  6354   000B42  EC86  F00E         	call	_TI_ResetTics
  6355   000B46  EF8D  F005         	goto	l3826
  6356   000B4A                     l3838:
  6357                           
  6358                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  6359   000B4A  0E01               	movlw	1
  6360   000B4C  6E3C               	movwf	_Columnas^0,c
  6361   000B4E                     
  6362                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  6363   000B4E  EC62  F00E         	call	_writeColumnas	;wreg free
  6364   000B52                     
  6365                           ;TAD_TECLADO.c: 95:                 state = 2;
  6366   000B52  0E02               	movlw	2
  6367   000B54  6E3A               	movwf	_state^0,c
  6368   000B56  EF3E  F006         	goto	l174
  6369   000B5A                     l3844:
  6370                           
  6371                           ;TAD_TECLADO.c: 100:             if (Filas) {
  6372   000B5A  503D               	movf	_Filas^0,w,c
  6373   000B5C  B4D8               	btfsc	status,2,c
  6374   000B5E  EFB3  F005         	goto	u2831
  6375   000B62  EFB5  F005         	goto	u2830
  6376   000B66                     u2831:
  6377   000B66  EFBA  F005         	goto	l3850
  6378   000B6A                     u2830:
  6379   000B6A                     
  6380                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer);
  6381   000B6A  504C               	movf	_timer^0,w,c
  6382   000B6C  EC86  F00E         	call	_TI_ResetTics
  6383   000B70  EF8D  F005         	goto	l3826
  6384   000B74                     l3850:
  6385                           
  6386                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6387   000B74  0E02               	movlw	2
  6388   000B76  6E3C               	movwf	_Columnas^0,c
  6389   000B78                     
  6390                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6391   000B78  EC62  F00E         	call	_writeColumnas	;wreg free
  6392   000B7C                     l3854:
  6393                           
  6394                           ;TAD_TECLADO.c: 106:                 state = 0;
  6395   000B7C  6A3A               	clrf	_state^0,c
  6396   000B7E  EF3E  F006         	goto	l174
  6397   000B82                     l3856:
  6398                           
  6399                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6400   000B82  EC89  F00B         	call	_GetTecla	;wreg free
  6401   000B86  6E3B               	movwf	_tecla^0,c
  6402   000B88                     
  6403                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6404   000B88  503D               	movf	_Filas^0,w,c
  6405   000B8A  A4D8               	btfss	status,2,c
  6406   000B8C  EFCA  F005         	goto	u2841
  6407   000B90  EFCC  F005         	goto	u2840
  6408   000B94                     u2841:
  6409   000B94  EFCE  F005         	goto	l3866
  6410   000B98                     u2840:
  6411   000B98  EFBA  F005         	goto	l3850
  6412   000B9C                     l3866:
  6413   000B9C  504C               	movf	_timer^0,w,c
  6414   000B9E  ECFD  F00C         	call	_TI_GetTics
  6415   000BA2  5051               	movf	(?_TI_GetTics+3)^0,w,c
  6416   000BA4  1050               	iorwf	(?_TI_GetTics+2)^0,w,c
  6417   000BA6  104F               	iorwf	(?_TI_GetTics+1)^0,w,c
  6418   000BA8  E109               	bnz	u2850
  6419   000BAA  0E05               	movlw	5
  6420   000BAC  5C4E               	subwf	?_TI_GetTics^0,w,c
  6421   000BAE  A0D8               	btfss	status,0,c
  6422   000BB0  EFDC  F005         	goto	u2851
  6423   000BB4  EFDE  F005         	goto	u2850
  6424   000BB8                     u2851:
  6425   000BB8  EF3E  F006         	goto	l174
  6426   000BBC                     u2850:
  6427   000BBC                     
  6428                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6429   000BBC  0E0B               	movlw	11
  6430   000BBE  183B               	xorwf	_tecla^0,w,c
  6431   000BC0  B4D8               	btfsc	status,2,c
  6432   000BC2  EFE5  F005         	goto	u2861
  6433   000BC6  EFE7  F005         	goto	u2860
  6434   000BCA                     u2861:
  6435   000BCA  EFEE  F005         	goto	l3874
  6436   000BCE                     u2860:
  6437   000BCE                     
  6438                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  6439   000BCE  503B               	movf	_tecla^0,w,c
  6440   000BD0  ECCB  F00D         	call	_setLed
  6441   000BD4                     l3872:
  6442                           
  6443                           ;TAD_TECLADO.c: 119:                     state = 5;
  6444   000BD4  0E05               	movlw	5
  6445   000BD6  6E3A               	movwf	_state^0,c
  6446                           
  6447                           ;TAD_TECLADO.c: 120:                 } else {
  6448   000BD8  EF3E  F006         	goto	l174
  6449   000BDC                     l3874:
  6450                           
  6451                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer);
  6452   000BDC  504C               	movf	_timer^0,w,c
  6453   000BDE  EC86  F00E         	call	_TI_ResetTics
  6454   000BE2                     
  6455                           ;TAD_TECLADO.c: 122:                     state = 4;
  6456   000BE2  0E04               	movlw	4
  6457   000BE4  6E3A               	movwf	_state^0,c
  6458   000BE6  EF3E  F006         	goto	l174
  6459   000BEA                     l3878:
  6460                           
  6461                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  6462   000BEA  503D               	movf	_Filas^0,w,c
  6463   000BEC  A4D8               	btfss	status,2,c
  6464   000BEE  EFFB  F005         	goto	u2871
  6465   000BF2  EFFD  F005         	goto	u2870
  6466   000BF6                     u2871:
  6467   000BF6  EFFF  F005         	goto	l3882
  6468   000BFA                     u2870:
  6469   000BFA  EFBE  F005         	goto	l3854
  6470   000BFE                     l3882:
  6471   000BFE  504C               	movf	_timer^0,w,c
  6472   000C00  ECFD  F00C         	call	_TI_GetTics
  6473   000C04  5051               	movf	(?_TI_GetTics+3)^0,w,c
  6474   000C06  1050               	iorwf	(?_TI_GetTics+2)^0,w,c
  6475   000C08  E10B               	bnz	u2880
  6476   000C0A  0EDD               	movlw	221
  6477   000C0C  5C4E               	subwf	?_TI_GetTics^0,w,c
  6478   000C0E  0E05               	movlw	5
  6479   000C10  584F               	subwfb	(?_TI_GetTics+1)^0,w,c
  6480   000C12  A0D8               	btfss	status,0,c
  6481   000C14  EF0E  F006         	goto	u2881
  6482   000C18  EF10  F006         	goto	u2880
  6483   000C1C                     u2881:
  6484   000C1C  EF3E  F006         	goto	l174
  6485   000C20                     u2880:
  6486   000C20                     
  6487                           ;TAD_TECLADO.c: 131:                 hashtag_pressed3s();
  6488   000C20  EC32  F00F         	call	_hashtag_pressed3s	;wreg free
  6489   000C24  EFEA  F005         	goto	l3872
  6490   000C28                     l3888:
  6491                           
  6492                           ;TAD_TECLADO.c: 137:             if (!Filas) {
  6493   000C28  503D               	movf	_Filas^0,w,c
  6494   000C2A  A4D8               	btfss	status,2,c
  6495   000C2C  EF1A  F006         	goto	u2891
  6496   000C30  EF1C  F006         	goto	u2890
  6497   000C34                     u2891:
  6498   000C34  EF3E  F006         	goto	l174
  6499   000C38                     u2890:
  6500   000C38                     
  6501                           ;TAD_TECLADO.c: 138:                 state = 0;
  6502   000C38  6A3A               	clrf	_state^0,c
  6503   000C3A                     
  6504                           ;TAD_TECLADO.c: 139:                 Columnas = 2;
  6505   000C3A  0E02               	movlw	2
  6506   000C3C  6E3C               	movwf	_Columnas^0,c
  6507   000C3E                     
  6508                           ;TAD_TECLADO.c: 140:                 writeColumnas();
  6509   000C3E  EC62  F00E         	call	_writeColumnas	;wreg free
  6510   000C42  EF3E  F006         	goto	l174
  6511   000C46                     l3898:
  6512   000C46  503A               	movf	_state^0,w,c
  6513                           
  6514                           ; Switch size 1, requested type "simple"
  6515                           ; Number of cases is 6, Range of values is 0 to 5
  6516                           ; switch strategies available:
  6517                           ; Name         Instructions Cycles
  6518                           ; simple_byte           19    10 (average)
  6519                           ;	Chosen strategy is simple_byte
  6520   000C48  0A00               	xorlw	0	; case 0
  6521   000C4A  B4D8               	btfsc	status,2,c
  6522   000C4C  EF82  F005         	goto	l3822
  6523   000C50  0A01               	xorlw	1	; case 1
  6524   000C52  B4D8               	btfsc	status,2,c
  6525   000C54  EF98  F005         	goto	l3832
  6526   000C58  0A03               	xorlw	3	; case 2
  6527   000C5A  B4D8               	btfsc	status,2,c
  6528   000C5C  EFAD  F005         	goto	l3844
  6529   000C60  0A01               	xorlw	1	; case 3
  6530   000C62  B4D8               	btfsc	status,2,c
  6531   000C64  EFC1  F005         	goto	l3856
  6532   000C68  0A07               	xorlw	7	; case 4
  6533   000C6A  B4D8               	btfsc	status,2,c
  6534   000C6C  EFF5  F005         	goto	l3878
  6535   000C70  0A01               	xorlw	1	; case 5
  6536   000C72  B4D8               	btfsc	status,2,c
  6537   000C74  EF14  F006         	goto	l3888
  6538   000C78  EF3E  F006         	goto	l174
  6539   000C7C                     l174:
  6540   000C7C  0012               	return		;funcret
  6541   000C7E                     __end_of_motorTeclado:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function _writeColumnas *****************
  6545 ;; Defined at:
  6546 ;;		line 43 in file "TAD_TECLADO.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      void 
  6553 ;; Registers used:
  6554 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1
  6560 ;;      Params:         0       0       0
  6561 ;;      Locals:         0       0       0
  6562 ;;      Temps:          0       0       0
  6563 ;;      Totals:         0       0       0
  6564 ;;Total ram usage:        0 bytes
  6565 ;; Hardware stack levels used: 1
  6566 ;; Hardware stack levels required when called: 3
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_motorTeclado
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text22
  6575   001CC4                     __ptext22:
  6576                           	callstack 0
  6577   001CC4                     _writeColumnas:
  6578                           	callstack 26
  6579   001CC4                     
  6580                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  6581   001CC4  0E03               	movlw	3
  6582   001CC6  603C               	cpfslt	_Columnas^0,c
  6583   001CC8  EF68  F00E         	goto	u571
  6584   001CCC  EF6A  F00E         	goto	u570
  6585   001CD0                     u571:
  6586   001CD0  EF72  F00E         	goto	l136
  6587   001CD4                     u570:
  6588   001CD4                     
  6589                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  6590   001CD4  503C               	movf	_Columnas^0,w,c
  6591   001CD6  0F74               	addlw	low _colValues
  6592   001CD8  6ED9               	movwf	fsr2l,c
  6593   001CDA  6ADA               	clrf	fsr2h,c
  6594   001CDC  50DF               	movf	indf2,w,c
  6595   001CDE  6E8C               	movwf	140,c	;volatile
  6596                           
  6597                           ;TAD_TECLADO.c: 46:     } else {
  6598   001CE0  EF73  F00E         	goto	l138
  6599   001CE4                     l136:
  6600                           
  6601                           ;TAD_TECLADO.c: 47:         LATD = 0;
  6602   001CE4  6A8C               	clrf	140,c	;volatile
  6603   001CE6                     l138:
  6604   001CE6  0012               	return		;funcret
  6605   001CE8                     __end_of_writeColumnas:
  6606                           	callstack 0
  6607                           
  6608 ;; *************** function _setLed *****************
  6609 ;; Defined at:
  6610 ;;		line 180 in file "TAD_DATOS.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  tecla           1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  tecla           1    6[COMRAM] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1
  6624 ;;      Params:         0       0       0
  6625 ;;      Locals:         1       0       0
  6626 ;;      Temps:          0       0       0
  6627 ;;      Totals:         1       0       0
  6628 ;;Total ram usage:        1 bytes
  6629 ;; Hardware stack levels used: 1
  6630 ;; Hardware stack levels required when called: 4
  6631 ;; This function calls:
  6632 ;;		_checkUserUID
  6633 ;;		_setLEDIntensity
  6634 ;; This function is called by:
  6635 ;;		_motorTeclado
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text23
  6640   001B96                     __ptext23:
  6641                           	callstack 0
  6642   001B96                     _setLed:
  6643                           	callstack 25
  6644                           
  6645                           ;incstack = 0
  6646                           ;setLed@tecla stored from wreg
  6647   001B96  6E53               	movwf	setLed@tecla^0,c
  6648   001B98                     
  6649                           ;TAD_DATOS.c: 181:     static char modeLED = 0;;TAD_DATOS.c: 182:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 183:     static char userIndex = 0;;TAD_DATOS.c: 185:     if(!modeL
      +                          ED) {
  6650   001B98  5019               	movf	setLed@modeLED^0,w,c
  6651   001B9A  A4D8               	btfss	status,2,c
  6652   001B9C  EFD2  F00D         	goto	u2461
  6653   001BA0  EFD4  F00D         	goto	u2460
  6654   001BA4                     u2461:
  6655   001BA4  EFDA  F00D         	goto	l3450
  6656   001BA8                     u2460:
  6657   001BA8                     
  6658                           ;TAD_DATOS.c: 186:         ledIndex = tecla - 1;
  6659   001BA8  0453               	decf	setLed@tecla^0,w,c
  6660   001BAA  6E18               	movwf	setLed@ledIndex^0,c
  6661   001BAC                     
  6662                           ;TAD_DATOS.c: 187:         modeLED = 1;
  6663   001BAC  0E01               	movlw	1
  6664   001BAE  6E19               	movwf	setLed@modeLED^0,c
  6665                           
  6666                           ;TAD_DATOS.c: 188:     } else {
  6667   001BB0  EFE7  F00D         	goto	l835
  6668   001BB4                     l3450:
  6669                           
  6670                           ;TAD_DATOS.c: 189:         userIndex = checkUserUID();
  6671   001BB4  EC36  F00A         	call	_checkUserUID	;wreg free
  6672   001BB8  6E17               	movwf	setLed@userIndex^0,c
  6673   001BBA                     
  6674                           ;TAD_DATOS.c: 190:         setLEDIntensity(userIndex, ledIndex, tecla);
  6675   001BBA  C018  F04E         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  6676   001BBE  C053  F04F         	movff	setLed@tecla,setLEDIntensity@intensity
  6677   001BC2  5017               	movf	setLed@userIndex^0,w,c
  6678   001BC4  EC48  F00D         	call	_setLEDIntensity
  6679   001BC8                     
  6680                           ;TAD_DATOS.c: 191:         new_configuration = 1;
  6681   001BC8  0E01               	movlw	1
  6682   001BCA  6E1E               	movwf	_new_configuration^0,c
  6683   001BCC                     
  6684                           ;TAD_DATOS.c: 192:         modeLED = 0;
  6685   001BCC  6A19               	clrf	setLed@modeLED^0,c
  6686   001BCE                     l835:
  6687   001BCE  0012               	return		;funcret
  6688   001BD0                     __end_of_setLed:
  6689                           	callstack 0
  6690                           
  6691 ;; *************** function _setLEDIntensity *****************
  6692 ;; Defined at:
  6693 ;;		line 173 in file "TAD_DATOS.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  userIndex       1    wreg     unsigned char 
  6696 ;;  ledIndex        1    1[COMRAM] unsigned char 
  6697 ;;  intensity       1    2[COMRAM] unsigned char 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  userIndex       1    3[COMRAM] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1
  6709 ;;      Params:         2       0       0
  6710 ;;      Locals:         1       0       0
  6711 ;;      Temps:          0       0       0
  6712 ;;      Totals:         3       0       0
  6713 ;;Total ram usage:        3 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 3
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_setLed
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text24
  6724   001A90                     __ptext24:
  6725                           	callstack 0
  6726   001A90                     _setLEDIntensity:
  6727                           	callstack 25
  6728                           
  6729                           ;incstack = 0
  6730                           ;setLEDIntensity@userIndex stored from wreg
  6731   001A90  6E50               	movwf	setLEDIntensity@userIndex^0,c
  6732   001A92                     
  6733                           ;TAD_DATOS.c: 174:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  6734   001A92  0E04               	movlw	4
  6735   001A94  6050               	cpfslt	setLEDIntensity@userIndex^0,c
  6736   001A96  EF4F  F00D         	goto	u2411
  6737   001A9A  EF51  F00D         	goto	u2410
  6738   001A9E                     u2411:
  6739   001A9E  EF6A  F00D         	goto	l824
  6740   001AA2                     u2410:
  6741   001AA2  0E06               	movlw	6
  6742   001AA4  604E               	cpfslt	setLEDIntensity@ledIndex^0,c
  6743   001AA6  EF57  F00D         	goto	u2421
  6744   001AAA  EF59  F00D         	goto	u2420
  6745   001AAE                     u2421:
  6746   001AAE  EF6A  F00D         	goto	l824
  6747   001AB2                     u2420:
  6748   001AB2  0E0B               	movlw	11
  6749   001AB4  604F               	cpfslt	setLEDIntensity@intensity^0,c
  6750   001AB6  EF5F  F00D         	goto	u2431
  6751   001ABA  EF61  F00D         	goto	u2430
  6752   001ABE                     u2431:
  6753   001ABE  EF6A  F00D         	goto	l824
  6754   001AC2                     u2430:
  6755   001AC2                     
  6756                           ;TAD_DATOS.c: 175:         configurations[userIndex][ledIndex] = intensity;
  6757   001AC2  5050               	movf	setLEDIntensity@userIndex^0,w,c
  6758   001AC4  0D06               	mullw	6
  6759   001AC6  50F3               	movf	243,w,c
  6760   001AC8  0FC6               	addlw	low _configurations
  6761   001ACA  244E               	addwf	setLEDIntensity@ledIndex^0,w,c
  6762   001ACC  6ED9               	movwf	fsr2l,c
  6763   001ACE  6ADA               	clrf	fsr2h,c
  6764   001AD0  C04F  FFDF         	movff	setLEDIntensity@intensity,indf2
  6765   001AD4                     l824:
  6766   001AD4  0012               	return		;funcret
  6767   001AD6                     __end_of_setLEDIntensity:
  6768                           	callstack 0
  6769                           
  6770 ;; *************** function _checkUserUID *****************
  6771 ;; Defined at:
  6772 ;;		line 107 in file "TAD_DATOS.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  j               1    5[COMRAM] unsigned char 
  6777 ;;  match           1    3[COMRAM] unsigned char 
  6778 ;;  i               1    4[COMRAM] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      unsigned char 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1
  6788 ;;      Params:         0       0       0
  6789 ;;      Locals:         3       0       0
  6790 ;;      Temps:          2       0       0
  6791 ;;      Totals:         5       0       0
  6792 ;;Total ram usage:        5 bytes
  6793 ;; Hardware stack levels used: 1
  6794 ;; Hardware stack levels required when called: 3
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_motor_datos
  6799 ;;		_setLed
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text25
  6804   00146C                     __ptext25:
  6805                           	callstack 0
  6806   00146C                     _checkUserUID:
  6807                           	callstack 26
  6808   00146C                     
  6809                           ;TAD_DATOS.c: 109:     if(!currentUser[0]) return 0;
  6810   00146C  503E               	movf	_currentUser^0,w,c
  6811   00146E  A4D8               	btfss	status,2,c
  6812   001470  EF3C  F00A         	goto	u2361
  6813   001474  EF3E  F00A         	goto	u2360
  6814   001478                     u2361:
  6815   001478  EF41  F00A         	goto	l786
  6816   00147C                     u2360:
  6817   00147C                     l3384:
  6818   00147C  0E00               	movlw	0
  6819   00147E  EF7B  F00A         	goto	l787
  6820   001482                     l786:
  6821                           
  6822                           ;TAD_DATOS.c: 112:     for(char i = 0; i < 4; i++) {
  6823   001482  6A51               	clrf	checkUserUID@i^0,c
  6824   001484                     l3392:
  6825                           
  6826                           ;TAD_DATOS.c: 113:         char match = 1;
  6827   001484  0E01               	movlw	1
  6828   001486  6E50               	movwf	checkUserUID@match^0,c
  6829   001488                     
  6830                           ;TAD_DATOS.c: 114:         for(char j = 0; j < 5; j++) {
  6831   001488  6A52               	clrf	checkUserUID@j^0,c
  6832   00148A                     l3400:
  6833                           
  6834                           ;TAD_DATOS.c: 115:             if(currentUser[j] != userUIDs[i][j]) {
  6835   00148A  5051               	movf	checkUserUID@i^0,w,c
  6836   00148C  0D10               	mullw	16
  6837   00148E  50F3               	movf	243,w,c
  6838   001490  0F80               	addlw	low _userUIDs
  6839   001492  2452               	addwf	checkUserUID@j^0,w,c
  6840   001494  6ED9               	movwf	fsr2l,c
  6841   001496  6ADA               	clrf	fsr2h,c
  6842   001498  5052               	movf	checkUserUID@j^0,w,c
  6843   00149A  0F3E               	addlw	low _currentUser
  6844   00149C  6EE1               	movwf	fsr1l,c
  6845   00149E  6AE2               	clrf	fsr1h,c
  6846   0014A0  50DE               	movf	postinc2,w,c
  6847   0014A2  18E6               	xorwf	postinc1,w,c
  6848   0014A4  B4D8               	btfsc	status,2,c
  6849   0014A6  EF57  F00A         	goto	u2371
  6850   0014AA  EF59  F00A         	goto	u2370
  6851   0014AE                     u2371:
  6852   0014AE  EF5C  F00A         	goto	l3404
  6853   0014B2                     u2370:
  6854   0014B2                     
  6855                           ;TAD_DATOS.c: 116:                 match = 0;
  6856   0014B2  6A50               	clrf	checkUserUID@match^0,c
  6857                           
  6858                           ;TAD_DATOS.c: 117:                 break;
  6859   0014B4  EF65  F00A         	goto	l3408
  6860   0014B8                     l3404:
  6861                           
  6862                           ;TAD_DATOS.c: 119:         }
  6863   0014B8  2A52               	incf	checkUserUID@j^0,f,c
  6864   0014BA  0E04               	movlw	4
  6865   0014BC  6452               	cpfsgt	checkUserUID@j^0,c
  6866   0014BE  EF63  F00A         	goto	u2381
  6867   0014C2  EF65  F00A         	goto	u2380
  6868   0014C6                     u2381:
  6869   0014C6  EF45  F00A         	goto	l3400
  6870   0014CA                     u2380:
  6871   0014CA                     l3408:
  6872                           
  6873                           ;TAD_DATOS.c: 120:         if(match) return i;
  6874   0014CA  5050               	movf	checkUserUID@match^0,w,c
  6875   0014CC  B4D8               	btfsc	status,2,c
  6876   0014CE  EF6B  F00A         	goto	u2391
  6877   0014D2  EF6D  F00A         	goto	u2390
  6878   0014D6                     u2391:
  6879   0014D6  EF70  F00A         	goto	l3414
  6880   0014DA                     u2390:
  6881   0014DA  5051               	movf	checkUserUID@i^0,w,c
  6882   0014DC  EF7B  F00A         	goto	l787
  6883   0014E0                     l3414:
  6884                           
  6885                           ;TAD_DATOS.c: 121:     }
  6886   0014E0  2A51               	incf	checkUserUID@i^0,f,c
  6887   0014E2  0E03               	movlw	3
  6888   0014E4  6451               	cpfsgt	checkUserUID@i^0,c
  6889   0014E6  EF77  F00A         	goto	u2401
  6890   0014EA  EF79  F00A         	goto	u2400
  6891   0014EE                     u2401:
  6892   0014EE  EF42  F00A         	goto	l3392
  6893   0014F2                     u2400:
  6894   0014F2  EF3E  F00A         	goto	l3384
  6895   0014F6                     l787:
  6896   0014F6  0012               	return		;funcret
  6897   0014F8                     __end_of_checkUserUID:
  6898                           	callstack 0
  6899                           
  6900 ;; *************** function _hashtag_pressed3s *****************
  6901 ;; Defined at:
  6902 ;;		line 65 in file "TAD_TERMINAL.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1
  6916 ;;      Params:         0       0       0
  6917 ;;      Locals:         0       0       0
  6918 ;;      Temps:          0       0       0
  6919 ;;      Totals:         0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used: 1
  6922 ;; Hardware stack levels required when called: 3
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_motorTeclado
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text26
  6931   001E64                     __ptext26:
  6932                           	callstack 0
  6933   001E64                     _hashtag_pressed3s:
  6934                           	callstack 26
  6935   001E64  0E01               	movlw	1
  6936   001E66  6E22               	movwf	_hashtag_pressed^0,c
  6937   001E68  0012               	return		;funcret
  6938   001E6A                     __end_of_hashtag_pressed3s:
  6939                           	callstack 0
  6940                           
  6941 ;; *************** function _GetTecla *****************
  6942 ;; Defined at:
  6943 ;;		line 52 in file "TAD_TECLADO.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  fila            1    4[COMRAM] unsigned char 
  6948 ;;  columna         1    3[COMRAM] unsigned char 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      unsigned char 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1
  6958 ;;      Params:         0       0       0
  6959 ;;      Locals:         2       0       0
  6960 ;;      Temps:          2       0       0
  6961 ;;      Totals:         4       0       0
  6962 ;;Total ram usage:        4 bytes
  6963 ;; Hardware stack levels used: 1
  6964 ;; Hardware stack levels required when called: 3
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_motorTeclado
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text27
  6973   001712                     __ptext27:
  6974                           	callstack 0
  6975   001712                     _GetTecla:
  6976                           	callstack 26
  6977   001712  6A50               	clrf	GetTecla@columna^0,c
  6978                           
  6979                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  6980   001714  EF9E  F00B         	goto	l1934
  6981   001718                     l142:
  6982   001718  6A51               	clrf	GetTecla@fila^0,c
  6983   00171A  EFB1  F00B         	goto	l143
  6984   00171E                     l1922:
  6985   00171E  0E01               	movlw	1
  6986   001720  6E51               	movwf	GetTecla@fila^0,c
  6987   001722  EFB1  F00B         	goto	l143
  6988   001726                     l1924:
  6989   001726  0E02               	movlw	2
  6990   001728  6E51               	movwf	GetTecla@fila^0,c
  6991   00172A  EFB1  F00B         	goto	l143
  6992   00172E                     l1926:
  6993   00172E  0E03               	movlw	3
  6994   001730  6E51               	movwf	GetTecla@fila^0,c
  6995   001732  EFB1  F00B         	goto	l143
  6996   001736                     l1928:
  6997   001736  0EFF               	movlw	255
  6998   001738  EFC5  F00B         	goto	l148
  6999   00173C                     l1934:
  7000   00173C  503D               	movf	_Filas^0,w,c
  7001                           
  7002                           ; Switch size 1, requested type "simple"
  7003                           ; Number of cases is 4, Range of values is 1 to 8
  7004                           ; switch strategies available:
  7005                           ; Name         Instructions Cycles
  7006                           ; simple_byte           13     7 (average)
  7007                           ;	Chosen strategy is simple_byte
  7008   00173E  0A01               	xorlw	1	; case 1
  7009   001740  B4D8               	btfsc	status,2,c
  7010   001742  EF8C  F00B         	goto	l142
  7011   001746  0A03               	xorlw	3	; case 2
  7012   001748  B4D8               	btfsc	status,2,c
  7013   00174A  EF8F  F00B         	goto	l1922
  7014   00174E  0A06               	xorlw	6	; case 4
  7015   001750  B4D8               	btfsc	status,2,c
  7016   001752  EF93  F00B         	goto	l1924
  7017   001756  0A0C               	xorlw	12	; case 8
  7018   001758  B4D8               	btfsc	status,2,c
  7019   00175A  EF97  F00B         	goto	l1926
  7020   00175E  EF9B  F00B         	goto	l1928
  7021   001762                     l143:
  7022                           
  7023                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  7024   001762  C03C  F050         	movff	_Columnas,GetTecla@columna
  7025   001766                     
  7026                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  7027   001766  5051               	movf	GetTecla@fila^0,w,c
  7028   001768  0D03               	mullw	3
  7029   00176A  0E97               	movlw	low _keymap
  7030   00176C  24F3               	addwf	243,w,c
  7031   00176E  6E4E               	movwf	??_GetTecla^0,c
  7032   001770  0E1E               	movlw	high _keymap
  7033   001772  20F4               	addwfc	prodh,w,c
  7034   001774  6E4F               	movwf	(??_GetTecla+1)^0,c
  7035   001776  5050               	movf	GetTecla@columna^0,w,c
  7036   001778  264E               	addwf	??_GetTecla^0,f,c
  7037   00177A  0E00               	movlw	0
  7038   00177C  224F               	addwfc	(??_GetTecla+1)^0,f,c
  7039   00177E  C04E  FFF6         	movff	??_GetTecla,tblptrl
  7040   001782  C04F  FFF7         	movff	??_GetTecla+1,tblptrh
  7041   001786                     	if	0	;tblptru may be non-zero
  7042   001786                     	endif
  7043   001786                     	if	0	;tblptru may be non-zero
  7044   001786                     	endif
  7045   001786  0008               	tblrd		*
  7046   001788  50F5               	movf	tablat,w,c
  7047   00178A                     l148:
  7048   00178A  0012               	return		;funcret
  7049   00178C                     __end_of_GetTecla:
  7050                           	callstack 0
  7051                           
  7052 ;; *************** function _initTeclado *****************
  7053 ;; Defined at:
  7054 ;;		line 30 in file "TAD_TECLADO.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;		None
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1
  7068 ;;      Params:         0       0       0
  7069 ;;      Locals:         0       0       0
  7070 ;;      Temps:          0       0       0
  7071 ;;      Totals:         0       0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used: 1
  7074 ;; Hardware stack levels required when called: 4
  7075 ;; This function calls:
  7076 ;;		_TI_NewTimer
  7077 ;; This function is called by:
  7078 ;;		_main
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text28
  7083   001DAC                     __ptext28:
  7084                           	callstack 0
  7085   001DAC                     _initTeclado:
  7086                           	callstack 26
  7087   001DAC                     
  7088                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  7089   001DAC  0E0F               	movlw	15
  7090   001DAE  6E95               	movwf	149,c	;volatile
  7091   001DB0                     
  7092                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  7093   001DB0  6A8C               	clrf	140,c	;volatile
  7094   001DB2                     
  7095                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  7096   001DB2  6A3A               	clrf	_state^0,c
  7097   001DB4  6A3B               	clrf	_tecla^0,c
  7098   001DB6  6A3C               	clrf	_Columnas^0,c
  7099   001DB8  6A3D               	clrf	_Filas^0,c
  7100   001DBA                     
  7101                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer);
  7102   001DBA  0E4C               	movlw	low _timer
  7103   001DBC  6E4E               	movwf	TI_NewTimer@TimerHandle^0,c
  7104   001DBE  ECD2  F00C         	call	_TI_NewTimer	;wreg free
  7105   001DC2  0012               	return		;funcret
  7106   001DC4                     __end_of_initTeclado:
  7107                           	callstack 0
  7108                           
  7109 ;; *************** function _initRFID *****************
  7110 ;; Defined at:
  7111 ;;		line 241 in file "TAD_RFID.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;  regVal          1   12[COMRAM] unsigned char 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1
  7125 ;;      Params:         0       0       0
  7126 ;;      Locals:         1       0       0
  7127 ;;      Temps:          0       0       0
  7128 ;;      Totals:         1       0       0
  7129 ;;Total ram usage:        1 bytes
  7130 ;; Hardware stack levels used: 1
  7131 ;; Hardware stack levels required when called: 6
  7132 ;; This function calls:
  7133 ;;		_InitPortDirections
  7134 ;;		_delay_us
  7135 ;;		_motor_Read
  7136 ;;		_motor_Write
  7137 ;;		_resetMotorStates
  7138 ;; This function is called by:
  7139 ;;		_main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text29
  7144   000DB6                     __ptext29:
  7145                           	callstack 0
  7146   000DB6                     _initRFID:
  7147                           	callstack 24
  7148   000DB6                     
  7149                           ;TAD_RFID.c: 243:     InitPortDirections();
  7150   000DB6  EC23  F00F         	call	_InitPortDirections	;wreg free
  7151                           
  7152                           ;TAD_RFID.c: 246:     resetMotorStates();
  7153   000DBA  EC29  F00F         	call	_resetMotorStates	;wreg free
  7154   000DBE                     
  7155                           ;TAD_RFID.c: 247:     LATCbits.LATC4 = 1;
  7156   000DBE  888B               	bsf	139,4,c	;volatile
  7157   000DC0                     
  7158                           ;TAD_RFID.c: 248:     delay_us(1);
  7159   000DC0  0E01               	movlw	1
  7160   000DC2  EC74  F00E         	call	_delay_us
  7161   000DC6                     
  7162                           ;TAD_RFID.c: 249:     LATCbits.LATC4 = 0;
  7163   000DC6  988B               	bcf	139,4,c	;volatile
  7164   000DC8                     
  7165                           ;TAD_RFID.c: 250:     delay_us(1);
  7166   000DC8  0E01               	movlw	1
  7167   000DCA  EC74  F00E         	call	_delay_us
  7168   000DCE                     
  7169                           ;TAD_RFID.c: 251:     LATCbits.LATC4 = 1;
  7170   000DCE  888B               	bsf	139,4,c	;volatile
  7171   000DD0                     
  7172                           ;TAD_RFID.c: 252:     delay_us(1);
  7173   000DD0  0E01               	movlw	1
  7174   000DD2  EC74  F00E         	call	_delay_us
  7175   000DD6                     l3744:
  7176   000DD6  0E0F               	movlw	15
  7177   000DD8  6E55               	movwf	motor_Write@value^0,c
  7178   000DDA  0E01               	movlw	1
  7179   000DDC  ECC1  F00A         	call	_motor_Write
  7180   000DE0  0900               	iorlw	0
  7181   000DE2  B4D8               	btfsc	status,2,c
  7182   000DE4  EFF6  F006         	goto	u2711
  7183   000DE8  EFF8  F006         	goto	u2710
  7184   000DEC                     u2711:
  7185   000DEC  EFEB  F006         	goto	l3744
  7186   000DF0                     u2710:
  7187   000DF0                     
  7188                           ;TAD_RFID.c: 256:     delay_us(1);
  7189   000DF0  0E01               	movlw	1
  7190   000DF2  EC74  F00E         	call	_delay_us
  7191   000DF6                     l3748:
  7192   000DF6  0E8D               	movlw	141
  7193   000DF8  6E55               	movwf	motor_Write@value^0,c
  7194   000DFA  0E2A               	movlw	42
  7195   000DFC  ECC1  F00A         	call	_motor_Write
  7196   000E00  0900               	iorlw	0
  7197   000E02  B4D8               	btfsc	status,2,c
  7198   000E04  EF06  F007         	goto	u2721
  7199   000E08  EF08  F007         	goto	u2720
  7200   000E0C                     u2721:
  7201   000E0C  EFFB  F006         	goto	l3748
  7202   000E10                     u2720:
  7203   000E10                     l3750:
  7204   000E10  0E3E               	movlw	62
  7205   000E12  6E55               	movwf	motor_Write@value^0,c
  7206   000E14  0E2B               	movlw	43
  7207   000E16  ECC1  F00A         	call	_motor_Write
  7208   000E1A  0900               	iorlw	0
  7209   000E1C  B4D8               	btfsc	status,2,c
  7210   000E1E  EF13  F007         	goto	u2731
  7211   000E22  EF15  F007         	goto	u2730
  7212   000E26                     u2731:
  7213   000E26  EF08  F007         	goto	l3750
  7214   000E2A                     u2730:
  7215   000E2A                     l3752:
  7216   000E2A  0E1E               	movlw	30
  7217   000E2C  6E55               	movwf	motor_Write@value^0,c
  7218   000E2E  0E2D               	movlw	45
  7219   000E30  ECC1  F00A         	call	_motor_Write
  7220   000E34  0900               	iorlw	0
  7221   000E36  B4D8               	btfsc	status,2,c
  7222   000E38  EF20  F007         	goto	u2741
  7223   000E3C  EF22  F007         	goto	u2740
  7224   000E40                     u2741:
  7225   000E40  EF15  F007         	goto	l3752
  7226   000E44                     u2740:
  7227   000E44                     l3754:
  7228   000E44  0E00               	movlw	0
  7229   000E46  6E55               	movwf	motor_Write@value^0,c
  7230   000E48  0E2C               	movlw	44
  7231   000E4A  ECC1  F00A         	call	_motor_Write
  7232   000E4E  0900               	iorlw	0
  7233   000E50  B4D8               	btfsc	status,2,c
  7234   000E52  EF2D  F007         	goto	u2751
  7235   000E56  EF2F  F007         	goto	u2750
  7236   000E5A                     u2751:
  7237   000E5A  EF22  F007         	goto	l3754
  7238   000E5E                     u2750:
  7239   000E5E                     l3756:
  7240   000E5E  0E40               	movlw	64
  7241   000E60  6E55               	movwf	motor_Write@value^0,c
  7242   000E62  0E15               	movlw	21
  7243   000E64  ECC1  F00A         	call	_motor_Write
  7244   000E68  0900               	iorlw	0
  7245   000E6A  B4D8               	btfsc	status,2,c
  7246   000E6C  EF3A  F007         	goto	u2761
  7247   000E70  EF3C  F007         	goto	u2760
  7248   000E74                     u2761:
  7249   000E74  EF2F  F007         	goto	l3756
  7250   000E78                     u2760:
  7251   000E78                     l3758:
  7252   000E78  0E3D               	movlw	61
  7253   000E7A  6E55               	movwf	motor_Write@value^0,c
  7254   000E7C  0E11               	movlw	17
  7255   000E7E  ECC1  F00A         	call	_motor_Write
  7256   000E82  0900               	iorlw	0
  7257   000E84  B4D8               	btfsc	status,2,c
  7258   000E86  EF47  F007         	goto	u2771
  7259   000E8A  EF49  F007         	goto	u2770
  7260   000E8E                     u2771:
  7261   000E8E  EF3C  F007         	goto	l3758
  7262   000E92                     u2770:
  7263   000E92                     l3760:
  7264                           
  7265                           ;TAD_RFID.c: 269:         regVal = motor_Read(0x14);
  7266   000E92  0E14               	movlw	20
  7267   000E94  EC66  F007         	call	_motor_Read
  7268   000E98  6E59               	movwf	initRFID@regVal^0,c
  7269   000E9A                     
  7270                           ;TAD_RFID.c: 270:     } while (regVal == 0xFE);
  7271   000E9A  0EFE               	movlw	254
  7272   000E9C  1859               	xorwf	initRFID@regVal^0,w,c
  7273   000E9E  B4D8               	btfsc	status,2,c
  7274   000EA0  EF54  F007         	goto	u2781
  7275   000EA4  EF56  F007         	goto	u2780
  7276   000EA8                     u2781:
  7277   000EA8  EF49  F007         	goto	l3760
  7278   000EAC                     u2780:
  7279   000EAC                     
  7280                           ;TAD_RFID.c: 271:     regVal |= 0x03;
  7281   000EAC  0E03               	movlw	3
  7282   000EAE  1259               	iorwf	initRFID@regVal^0,f,c
  7283   000EB0                     l3766:
  7284   000EB0  C059  F055         	movff	initRFID@regVal,motor_Write@value
  7285   000EB4  0E14               	movlw	20
  7286   000EB6  ECC1  F00A         	call	_motor_Write
  7287   000EBA  0900               	iorlw	0
  7288   000EBC  B4D8               	btfsc	status,2,c
  7289   000EBE  EF63  F007         	goto	u2791
  7290   000EC2  EF65  F007         	goto	u2790
  7291   000EC6                     u2791:
  7292   000EC6  EF58  F007         	goto	l3766
  7293   000ECA                     u2790:
  7294   000ECA  0012               	return		;funcret
  7295   000ECC                     __end_of_initRFID:
  7296                           	callstack 0
  7297                           
  7298 ;; *************** function _resetMotorStates *****************
  7299 ;; Defined at:
  7300 ;;		line 101 in file "TAD_RFID.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;		None
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  1    wreg      void 
  7307 ;; Registers used:
  7308 ;;		None
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1
  7314 ;;      Params:         0       0       0
  7315 ;;      Locals:         0       0       0
  7316 ;;      Temps:          0       0       0
  7317 ;;      Totals:         0       0       0
  7318 ;;Total ram usage:        0 bytes
  7319 ;; Hardware stack levels used: 1
  7320 ;; Hardware stack levels required when called: 3
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_initRFID
  7325 ;;		_MFRC522_Reset
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           	psect	text30
  7330   001E52                     __ptext30:
  7331                           	callstack 0
  7332   001E52                     _resetMotorStates:
  7333                           	callstack 26
  7334   001E52                     
  7335                           ;TAD_RFID.c: 102:     state_read = state_write = 0;
  7336   001E52  6A4A               	clrf	_state_write^0,c
  7337   001E54  6A4B               	clrf	_state_read^0,c
  7338                           
  7339                           ;TAD_RFID.c: 103:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7340   001E56  848B               	bsf	139,2,c	;volatile
  7341   001E58  868B               	bsf	139,3,c	;volatile
  7342   001E5A  0012               	return		;funcret
  7343   001E5C                     __end_of_resetMotorStates:
  7344                           	callstack 0
  7345                           
  7346 ;; *************** function _motor_Write *****************
  7347 ;; Defined at:
  7348 ;;		line 161 in file "TAD_RFID.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  addr            1    wreg     unsigned char 
  7351 ;;  value           1    8[COMRAM] unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  addr            1    9[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1
  7363 ;;      Params:         1       0       0
  7364 ;;      Locals:         1       0       0
  7365 ;;      Temps:          0       0       0
  7366 ;;      Totals:         2       0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used: 1
  7369 ;; Hardware stack levels required when called: 5
  7370 ;; This function calls:
  7371 ;;		_processBit
  7372 ;; This function is called by:
  7373 ;;		_initRFID
  7374 ;;		_motor_RFID
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text31
  7379   001582                     __ptext31:
  7380                           	callstack 0
  7381   001582                     _motor_Write:
  7382                           	callstack 24
  7383                           
  7384                           ;incstack = 0
  7385                           ;motor_Write@addr stored from wreg
  7386   001582  6E56               	movwf	motor_Write@addr^0,c
  7387   001584                     
  7388                           ;TAD_RFID.c: 162:     static char bit_count = 0;;TAD_RFID.c: 163:     static unsigned ch
      +                          ar ucAddr;;TAD_RFID.c: 164:     static unsigned char ucValue;;TAD_RFID.c: 166:     switc
      +                          h (state_write) {
  7389   001584  EFF4  F00A         	goto	l3492
  7390   001588                     l254:
  7391                           
  7392                           ;TAD_RFID.c: 168:             LATCbits.LATC2 = 0;
  7393   001588  948B               	bcf	139,2,c	;volatile
  7394                           
  7395                           ;TAD_RFID.c: 169:             LATCbits.LATC3 = 0;
  7396   00158A  968B               	bcf	139,3,c	;volatile
  7397   00158C                     
  7398                           ;TAD_RFID.c: 170:             ucAddr = ((addr << 1) & 0x7E);
  7399   00158C  5056               	movf	motor_Write@addr^0,w,c
  7400   00158E  2456               	addwf	motor_Write@addr^0,w,c
  7401   001590  0B7E               	andlw	126
  7402   001592  6E48               	movwf	motor_Write@ucAddr^0,c
  7403   001594                     
  7404                           ;TAD_RFID.c: 171:             ucValue = value;
  7405   001594  C055  F047         	movff	motor_Write@value,motor_Write@ucValue
  7406   001598                     
  7407                           ;TAD_RFID.c: 172:             bit_count = 0;
  7408   001598  6A49               	clrf	motor_Write@bit_count^0,c
  7409   00159A                     
  7410                           ;TAD_RFID.c: 173:             state_write = 1;
  7411   00159A  0E01               	movlw	1
  7412   00159C  6E4A               	movwf	_state_write^0,c
  7413                           
  7414                           ;TAD_RFID.c: 174:             break;
  7415   00159E  EF03  F00B         	goto	l3494
  7416   0015A2                     l3478:
  7417                           
  7418                           ;TAD_RFID.c: 177:             processBit(&ucAddr, &bit_count, &state_write, 2);
  7419   0015A2  0E48               	movlw	low motor_Write@ucAddr
  7420   0015A4  6E50               	movwf	processBit@val^0,c
  7421   0015A6  0E49               	movlw	low motor_Write@bit_count
  7422   0015A8  6E51               	movwf	processBit@bit_count^0,c
  7423   0015AA  0E4A               	movlw	low _state_write
  7424   0015AC  6E52               	movwf	processBit@state^0,c
  7425   0015AE  0E02               	movlw	2
  7426   0015B0  6E53               	movwf	processBit@next_state^0,c
  7427   0015B2  EC39  F00C         	call	_processBit	;wreg free
  7428                           
  7429                           ;TAD_RFID.c: 178:             break;
  7430   0015B6  EF03  F00B         	goto	l3494
  7431   0015BA                     l3480:
  7432                           
  7433                           ;TAD_RFID.c: 181:             processBit(&ucValue, &bit_count, &state_write, 0);
  7434   0015BA  0E47               	movlw	low motor_Write@ucValue
  7435   0015BC  6E50               	movwf	processBit@val^0,c
  7436   0015BE  0E49               	movlw	low motor_Write@bit_count
  7437   0015C0  6E51               	movwf	processBit@bit_count^0,c
  7438   0015C2  0E4A               	movlw	low _state_write
  7439   0015C4  6E52               	movwf	processBit@state^0,c
  7440   0015C6  0E00               	movlw	0
  7441   0015C8  6E53               	movwf	processBit@next_state^0,c
  7442   0015CA  EC39  F00C         	call	_processBit	;wreg free
  7443   0015CE                     
  7444                           ;TAD_RFID.c: 182:             if (state_write == 0) {
  7445   0015CE  504A               	movf	_state_write^0,w,c
  7446   0015D0  A4D8               	btfss	status,2,c
  7447   0015D2  EFED  F00A         	goto	u2481
  7448   0015D6  EFEF  F00A         	goto	u2480
  7449   0015DA                     u2481:
  7450   0015DA  EF03  F00B         	goto	l3494
  7451   0015DE                     u2480:
  7452   0015DE                     
  7453                           ;TAD_RFID.c: 183:                 LATCbits.LATC3 = 1;
  7454   0015DE  868B               	bsf	139,3,c	;volatile
  7455                           
  7456                           ;TAD_RFID.c: 184:                 LATCbits.LATC2 = 1;
  7457   0015E0  848B               	bsf	139,2,c	;volatile
  7458   0015E2                     
  7459                           ;TAD_RFID.c: 185:                 return 1;
  7460   0015E2  0E01               	movlw	1
  7461   0015E4  EF04  F00B         	goto	l259
  7462   0015E8                     l3492:
  7463   0015E8  504A               	movf	_state_write^0,w,c
  7464                           
  7465                           ; Switch size 1, requested type "simple"
  7466                           ; Number of cases is 3, Range of values is 0 to 2
  7467                           ; switch strategies available:
  7468                           ; Name         Instructions Cycles
  7469                           ; simple_byte           10     6 (average)
  7470                           ;	Chosen strategy is simple_byte
  7471   0015EA  0A00               	xorlw	0	; case 0
  7472   0015EC  B4D8               	btfsc	status,2,c
  7473   0015EE  EFC4  F00A         	goto	l254
  7474   0015F2  0A01               	xorlw	1	; case 1
  7475   0015F4  B4D8               	btfsc	status,2,c
  7476   0015F6  EFD1  F00A         	goto	l3478
  7477   0015FA  0A03               	xorlw	3	; case 2
  7478   0015FC  B4D8               	btfsc	status,2,c
  7479   0015FE  EFDD  F00A         	goto	l3480
  7480   001602  EF03  F00B         	goto	l3494
  7481   001606                     l3494:
  7482                           
  7483                           ;TAD_RFID.c: 189:     return 0;
  7484   001606  0E00               	movlw	0
  7485   001608                     l259:
  7486   001608  0012               	return		;funcret
  7487   00160A                     __end_of_motor_Write:
  7488                           	callstack 0
  7489                           
  7490 ;; *************** function _motor_Read *****************
  7491 ;; Defined at:
  7492 ;;		line 193 in file "TAD_RFID.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  addr            1    wreg     unsigned char 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  addr            1    9[COMRAM] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      unsigned char 
  7499 ;; Registers used:
  7500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1
  7506 ;;      Params:         0       0       0
  7507 ;;      Locals:         3       0       0
  7508 ;;      Temps:          1       0       0
  7509 ;;      Totals:         4       0       0
  7510 ;;Total ram usage:        4 bytes
  7511 ;; Hardware stack levels used: 1
  7512 ;; Hardware stack levels required when called: 5
  7513 ;; This function calls:
  7514 ;;		_delay_us
  7515 ;;		_processBit
  7516 ;; This function is called by:
  7517 ;;		_initRFID
  7518 ;;		_motor_RFID
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	text32
  7523   000ECC                     __ptext32:
  7524                           	callstack 0
  7525   000ECC                     _motor_Read:
  7526                           	callstack 24
  7527                           
  7528                           ;incstack = 0
  7529                           ;motor_Read@addr stored from wreg
  7530   000ECC  6E56               	movwf	motor_Read@addr^0,c
  7531   000ECE                     
  7532                           ;TAD_RFID.c: 194:     static char bit_count = 0;;TAD_RFID.c: 195:     static unsigned ch
      +                          ar ucAddr;;TAD_RFID.c: 196:     static unsigned char ucResult;;TAD_RFID.c: 197:     stat
      +                          ic unsigned int timeout_counter = 0;;TAD_RFID.c: 198:     static unsigned int MAX_TIMEOU
      +                          T = 1000;;TAD_RFID.c: 200:     if (++timeout_counter > MAX_TIMEOUT) {
  7533   000ECE  4A15               	infsnz	motor_Read@timeout_counter^0,f,c
  7534   000ED0  2A16               	incf	(motor_Read@timeout_counter+1)^0,f,c
  7535   000ED2  0EE9               	movlw	233
  7536   000ED4  5C15               	subwf	motor_Read@timeout_counter^0,w,c
  7537   000ED6  0E03               	movlw	3
  7538   000ED8  5816               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  7539   000EDA  A0D8               	btfss	status,0,c
  7540   000EDC  EF72  F007         	goto	u2491
  7541   000EE0  EF74  F007         	goto	u2490
  7542   000EE4                     u2491:
  7543   000EE4  EFDF  F007         	goto	l3560
  7544   000EE8                     u2490:
  7545   000EE8                     
  7546                           ;TAD_RFID.c: 201:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7547   000EE8  848B               	bsf	139,2,c	;volatile
  7548   000EEA  868B               	bsf	139,3,c	;volatile
  7549                           
  7550                           ;TAD_RFID.c: 202:         state_read = 0;
  7551   000EEC  6A4B               	clrf	_state_read^0,c
  7552   000EEE                     
  7553                           ;TAD_RFID.c: 203:         timeout_counter = 0;
  7554   000EEE  0E00               	movlw	0
  7555   000EF0  6E16               	movwf	(motor_Read@timeout_counter+1)^0,c
  7556   000EF2  0E00               	movlw	0
  7557   000EF4  6E15               	movwf	motor_Read@timeout_counter^0,c
  7558   000EF6                     
  7559                           ;TAD_RFID.c: 204:         return 0xFF;
  7560   000EF6  0EFF               	movlw	255
  7561   000EF8  EFEE  F007         	goto	l273
  7562   000EFC                     l3508:
  7563                           
  7564                           ;TAD_RFID.c: 209:             timeout_counter = 0;
  7565   000EFC  0E00               	movlw	0
  7566   000EFE  6E16               	movwf	(motor_Read@timeout_counter+1)^0,c
  7567   000F00  0E00               	movlw	0
  7568   000F02  6E15               	movwf	motor_Read@timeout_counter^0,c
  7569   000F04                     
  7570                           ;TAD_RFID.c: 210:             LATCbits.LATC2 = 0;
  7571   000F04  948B               	bcf	139,2,c	;volatile
  7572   000F06                     
  7573                           ;TAD_RFID.c: 211:             LATCbits.LATC3 = 0;
  7574   000F06  968B               	bcf	139,3,c	;volatile
  7575   000F08                     
  7576                           ;TAD_RFID.c: 212:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  7577   000F08  5056               	movf	motor_Read@addr^0,w,c
  7578   000F0A  2456               	addwf	motor_Read@addr^0,w,c
  7579   000F0C  0B7E               	andlw	126
  7580   000F0E  0980               	iorlw	128
  7581   000F10  6E45               	movwf	motor_Read@ucAddr^0,c
  7582   000F12                     
  7583                           ;TAD_RFID.c: 213:             ucResult = 0;
  7584   000F12  6A39               	clrf	motor_Read@ucResult^0,c
  7585   000F14                     
  7586                           ;TAD_RFID.c: 214:             bit_count = 0;
  7587   000F14  6A46               	clrf	motor_Read@bit_count^0,c
  7588   000F16                     
  7589                           ;TAD_RFID.c: 215:             state_read = 1;
  7590   000F16  0E01               	movlw	1
  7591   000F18  6E4B               	movwf	_state_read^0,c
  7592   000F1A                     l3522:
  7593                           
  7594                           ;TAD_RFID.c: 216:             return 0xFE;
  7595   000F1A  0EFE               	movlw	254
  7596   000F1C  EFEE  F007         	goto	l273
  7597   000F20                     l3526:
  7598                           
  7599                           ;TAD_RFID.c: 219:             processBit(&ucAddr, &bit_count, &state_read, 2);
  7600   000F20  0E45               	movlw	low motor_Read@ucAddr
  7601   000F22  6E50               	movwf	processBit@val^0,c
  7602   000F24  0E46               	movlw	low motor_Read@bit_count
  7603   000F26  6E51               	movwf	processBit@bit_count^0,c
  7604   000F28  0E4B               	movlw	low _state_read
  7605   000F2A  6E52               	movwf	processBit@state^0,c
  7606   000F2C  0E02               	movlw	2
  7607   000F2E  6E53               	movwf	processBit@next_state^0,c
  7608   000F30  EC39  F00C         	call	_processBit	;wreg free
  7609   000F34  EF8D  F007         	goto	l3522
  7610   000F38                     l277:
  7611                           
  7612                           ;TAD_RFID.c: 223:             LATCbits.LATC2 = 1;
  7613   000F38  848B               	bsf	139,2,c	;volatile
  7614   000F3A                     
  7615                           ;TAD_RFID.c: 224:             delay_us(5);
  7616   000F3A  0E05               	movlw	5
  7617   000F3C  EC74  F00E         	call	_delay_us
  7618   000F40                     
  7619                           ;TAD_RFID.c: 225:             ucResult = (ucResult << 1) | PORTCbits.RC0;
  7620   000F40  B082               	btfsc	130,0,c	;volatile
  7621   000F42  EFA5  F007         	goto	u2501
  7622   000F46  EFA9  F007         	goto	u2500
  7623   000F4A                     u2501:
  7624   000F4A  6A55               	clrf	??_motor_Read^0,c
  7625   000F4C  2A55               	incf	??_motor_Read^0,f,c
  7626   000F4E  EFAA  F007         	goto	u2508
  7627   000F52                     u2500:
  7628   000F52  6A55               	clrf	??_motor_Read^0,c
  7629   000F54                     u2508:
  7630   000F54  5039               	movf	motor_Read@ucResult^0,w,c
  7631   000F56  2439               	addwf	motor_Read@ucResult^0,w,c
  7632   000F58  1055               	iorwf	??_motor_Read^0,w,c
  7633   000F5A  6E39               	movwf	motor_Read@ucResult^0,c
  7634   000F5C                     
  7635                           ;TAD_RFID.c: 226:             LATCbits.LATC2 = 0;
  7636   000F5C  948B               	bcf	139,2,c	;volatile
  7637   000F5E                     
  7638                           ;TAD_RFID.c: 227:             delay_us(5);
  7639   000F5E  0E05               	movlw	5
  7640   000F60  EC74  F00E         	call	_delay_us
  7641                           
  7642                           ;TAD_RFID.c: 229:             if (++bit_count >= 8) {
  7643   000F64  2A46               	incf	motor_Read@bit_count^0,f,c
  7644   000F66  0E07               	movlw	7
  7645   000F68  6446               	cpfsgt	motor_Read@bit_count^0,c
  7646   000F6A  EFB9  F007         	goto	u2511
  7647   000F6E  EFBB  F007         	goto	u2510
  7648   000F72                     u2511:
  7649   000F72  EF8D  F007         	goto	l3522
  7650   000F76                     u2510:
  7651   000F76                     
  7652                           ;TAD_RFID.c: 230:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7653   000F76  848B               	bsf	139,2,c	;volatile
  7654   000F78  868B               	bsf	139,3,c	;volatile
  7655                           
  7656                           ;TAD_RFID.c: 231:                 state_read = 0;
  7657   000F7A  6A4B               	clrf	_state_read^0,c
  7658   000F7C                     
  7659                           ;TAD_RFID.c: 232:                 timeout_counter = 0;
  7660   000F7C  0E00               	movlw	0
  7661   000F7E  6E16               	movwf	(motor_Read@timeout_counter+1)^0,c
  7662   000F80  0E00               	movlw	0
  7663   000F82  6E15               	movwf	motor_Read@timeout_counter^0,c
  7664   000F84                     
  7665                           ;TAD_RFID.c: 233:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  7666   000F84  0EFE               	movlw	254
  7667   000F86  1839               	xorwf	motor_Read@ucResult^0,w,c
  7668   000F88  B4D8               	btfsc	status,2,c
  7669   000F8A  EFC9  F007         	goto	u2521
  7670   000F8E  EFCB  F007         	goto	u2520
  7671   000F92                     u2521:
  7672   000F92  EFD8  F007         	goto	l3550
  7673   000F96                     u2520:
  7674   000F96  2839               	incf	motor_Read@ucResult^0,w,c
  7675   000F98  B4D8               	btfsc	status,2,c
  7676   000F9A  EFD1  F007         	goto	u2531
  7677   000F9E  EFD3  F007         	goto	u2530
  7678   000FA2                     u2531:
  7679   000FA2  EFD8  F007         	goto	l3550
  7680   000FA6                     u2530:
  7681   000FA6  C039  F057         	movff	motor_Read@ucResult,_motor_Read$558
  7682   000FAA  6A58               	clrf	(_motor_Read$558+1)^0,c
  7683   000FAC  EFDC  F007         	goto	l282
  7684   000FB0                     l3550:
  7685   000FB0  0E00               	movlw	0
  7686   000FB2  6E58               	movwf	(_motor_Read$558+1)^0,c
  7687   000FB4  0EFD               	movlw	253
  7688   000FB6  6E57               	movwf	_motor_Read$558^0,c
  7689   000FB8                     l282:
  7690   000FB8  5057               	movf	_motor_Read$558^0,w,c
  7691   000FBA  EFEE  F007         	goto	l273
  7692   000FBE                     l3560:
  7693   000FBE  504B               	movf	_state_read^0,w,c
  7694                           
  7695                           ; Switch size 1, requested type "simple"
  7696                           ; Number of cases is 3, Range of values is 0 to 2
  7697                           ; switch strategies available:
  7698                           ; Name         Instructions Cycles
  7699                           ; simple_byte           10     6 (average)
  7700                           ;	Chosen strategy is simple_byte
  7701   000FC0  0A00               	xorlw	0	; case 0
  7702   000FC2  B4D8               	btfsc	status,2,c
  7703   000FC4  EF7E  F007         	goto	l3508
  7704   000FC8  0A01               	xorlw	1	; case 1
  7705   000FCA  B4D8               	btfsc	status,2,c
  7706   000FCC  EF90  F007         	goto	l3526
  7707   000FD0  0A03               	xorlw	3	; case 2
  7708   000FD2  B4D8               	btfsc	status,2,c
  7709   000FD4  EF9C  F007         	goto	l277
  7710   000FD8  EF8D  F007         	goto	l3522
  7711   000FDC                     l273:
  7712   000FDC  0012               	return		;funcret
  7713   000FDE                     __end_of_motor_Read:
  7714                           	callstack 0
  7715                           
  7716 ;; *************** function _processBit *****************
  7717 ;; Defined at:
  7718 ;;		line 147 in file "TAD_RFID.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  val             1    3[COMRAM] PTR unsigned char 
  7721 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  7722 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  7723 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  7724 ;;  state           1    5[COMRAM] PTR unsigned char 
  7725 ;;		 -> state_write(1), state_read(1), 
  7726 ;;  next_state      1    6[COMRAM] unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;		None
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1
  7738 ;;      Params:         4       0       0
  7739 ;;      Locals:         0       0       0
  7740 ;;      Temps:          1       0       0
  7741 ;;      Totals:         5       0       0
  7742 ;;Total ram usage:        5 bytes
  7743 ;; Hardware stack levels used: 1
  7744 ;; Hardware stack levels required when called: 4
  7745 ;; This function calls:
  7746 ;;		_delay_us
  7747 ;; This function is called by:
  7748 ;;		_motor_Write
  7749 ;;		_motor_Read
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text33
  7754   001872                     __ptext33:
  7755                           	callstack 0
  7756   001872                     _processBit:
  7757                           	callstack 24
  7758   001872                     
  7759                           ;TAD_RFID.c: 148:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  7760   001872  5050               	movf	processBit@val^0,w,c
  7761   001874  6ED9               	movwf	fsr2l,c
  7762   001876  6ADA               	clrf	fsr2h,c
  7763   001878  BEDF               	btfsc	indf2,7,c
  7764   00187A  EF41  F00C         	goto	u2231
  7765   00187E  EF45  F00C         	goto	u2230
  7766   001882                     u2231:
  7767   001882  6A54               	clrf	??_processBit^0,c
  7768   001884  2A54               	incf	??_processBit^0,f,c
  7769   001886  EF46  F00C         	goto	u2248
  7770   00188A                     u2230:
  7771   00188A  6A54               	clrf	??_processBit^0,c
  7772   00188C                     u2248:
  7773   00188C  4654               	rlncf	??_processBit^0,f,c
  7774   00188E  508B               	movf	139,w,c	;volatile
  7775   001890  1854               	xorwf	??_processBit^0,w,c
  7776   001892  0BFD               	andlw	-3
  7777   001894  1854               	xorwf	??_processBit^0,w,c
  7778   001896  6E8B               	movwf	139,c	;volatile
  7779   001898                     
  7780                           ;TAD_RFID.c: 149:     LATCbits.LATC2 = 1;
  7781   001898  848B               	bsf	139,2,c	;volatile
  7782                           
  7783                           ;TAD_RFID.c: 150:     *val <<= 1;
  7784   00189A  5050               	movf	processBit@val^0,w,c
  7785   00189C  6ED9               	movwf	fsr2l,c
  7786   00189E  6ADA               	clrf	fsr2h,c
  7787   0018A0  90D8               	bcf	status,0,c
  7788   0018A2  36DF               	rlcf	indf2,f,c
  7789   0018A4                     
  7790                           ;TAD_RFID.c: 151:     delay_us(5);
  7791   0018A4  0E05               	movlw	5
  7792   0018A6  EC74  F00E         	call	_delay_us
  7793   0018AA                     
  7794                           ;TAD_RFID.c: 152:     LATCbits.LATC2 = 0;
  7795   0018AA  948B               	bcf	139,2,c	;volatile
  7796   0018AC                     
  7797                           ;TAD_RFID.c: 153:     delay_us(5);
  7798   0018AC  0E05               	movlw	5
  7799   0018AE  EC74  F00E         	call	_delay_us
  7800                           
  7801                           ;TAD_RFID.c: 154:     if (++(*bit_count) == 8) {
  7802   0018B2  5051               	movf	processBit@bit_count^0,w,c
  7803   0018B4  6ED9               	movwf	fsr2l,c
  7804   0018B6  6ADA               	clrf	fsr2h,c
  7805   0018B8  2ADF               	incf	indf2,f,c
  7806   0018BA  0E08               	movlw	8
  7807   0018BC  18DE               	xorwf	postinc2,w,c
  7808   0018BE  A4D8               	btfss	status,2,c
  7809   0018C0  EF64  F00C         	goto	u2251
  7810   0018C4  EF66  F00C         	goto	u2250
  7811   0018C8                     u2251:
  7812   0018C8  EF6F  F00C         	goto	l244
  7813   0018CC                     u2250:
  7814   0018CC                     
  7815                           ;TAD_RFID.c: 155:         *bit_count = 0;
  7816   0018CC  5051               	movf	processBit@bit_count^0,w,c
  7817   0018CE  6ED9               	movwf	fsr2l,c
  7818   0018D0  6ADA               	clrf	fsr2h,c
  7819   0018D2  6ADF               	clrf	indf2,c
  7820                           
  7821                           ;TAD_RFID.c: 156:         *state = next_state;
  7822   0018D4  5052               	movf	processBit@state^0,w,c
  7823   0018D6  6ED9               	movwf	fsr2l,c
  7824   0018D8  6ADA               	clrf	fsr2h,c
  7825   0018DA  C053  FFDF         	movff	processBit@next_state,indf2
  7826   0018DE                     l244:
  7827   0018DE  0012               	return		;funcret
  7828   0018E0                     __end_of_processBit:
  7829                           	callstack 0
  7830                           
  7831 ;; *************** function _delay_us *****************
  7832 ;; Defined at:
  7833 ;;		line 31 in file "TAD_RFID.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  howMany         1    wreg     unsigned char 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  howMany         1    1[COMRAM] unsigned char 
  7838 ;;  x               1    2[COMRAM] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0, prodl, prodh
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1
  7848 ;;      Params:         0       0       0
  7849 ;;      Locals:         2       0       0
  7850 ;;      Temps:          0       0       0
  7851 ;;      Totals:         2       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used: 1
  7854 ;; Hardware stack levels required when called: 3
  7855 ;; This function calls:
  7856 ;;		Nothing
  7857 ;; This function is called by:
  7858 ;;		_processBit
  7859 ;;		_motor_Read
  7860 ;;		_initRFID
  7861 ;;		_MFRC522_Rd
  7862 ;;		_MFRC522_Wr
  7863 ;;		_MFRC522_Reset
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text34
  7868   001CE8                     __ptext34:
  7869                           	callstack 0
  7870   001CE8                     _delay_us:
  7871                           	callstack 24
  7872                           
  7873                           ;incstack = 0
  7874                           ;delay_us@howMany stored from wreg
  7875   001CE8  6E4E               	movwf	delay_us@howMany^0,c
  7876   001CEA                     
  7877                           ;TAD_RFID.c: 32:     char x = howMany * 8;
  7878   001CEA  504E               	movf	delay_us@howMany^0,w,c
  7879   001CEC  0D08               	mullw	8
  7880   001CEE  CFF3 F04F          	movff	prodl,delay_us@x
  7881                           
  7882                           ;TAD_RFID.c: 33:     while(x--) __nop();
  7883   001CF2  EF7C  F00E         	goto	l3114
  7884   001CF6                     l197:
  7885   001CF6  0000               	nop	
  7886   001CF8                     l3114:
  7887   001CF8  064F               	decf	delay_us@x^0,f,c
  7888   001CFA  284F               	incf	delay_us@x^0,w,c
  7889   001CFC  A4D8               	btfss	status,2,c
  7890   001CFE  EF83  F00E         	goto	u2091
  7891   001D02  EF85  F00E         	goto	u2090
  7892   001D06                     u2091:
  7893   001D06  EF7B  F00E         	goto	l197
  7894   001D0A                     u2090:
  7895   001D0A  0012               	return		;funcret
  7896   001D0C                     __end_of_delay_us:
  7897                           	callstack 0
  7898                           
  7899 ;; *************** function _InitPortDirections *****************
  7900 ;; Defined at:
  7901 ;;		line 22 in file "TAD_RFID.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		None
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1
  7915 ;;      Params:         0       0       0
  7916 ;;      Locals:         0       0       0
  7917 ;;      Temps:          0       0       0
  7918 ;;      Totals:         0       0       0
  7919 ;;Total ram usage:        0 bytes
  7920 ;; Hardware stack levels used: 1
  7921 ;; Hardware stack levels required when called: 3
  7922 ;; This function calls:
  7923 ;;		Nothing
  7924 ;; This function is called by:
  7925 ;;		_initRFID
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text35
  7930   001E46                     __ptext35:
  7931                           	callstack 0
  7932   001E46                     _InitPortDirections:
  7933                           	callstack 26
  7934   001E46                     
  7935                           ;TAD_RFID.c: 23:     TRISCbits.TRISC0 = 1;
  7936   001E46  8094               	bsf	148,0,c	;volatile
  7937                           
  7938                           ;TAD_RFID.c: 24:     TRISCbits.TRISC1 = 0;
  7939   001E48  9294               	bcf	148,1,c	;volatile
  7940                           
  7941                           ;TAD_RFID.c: 25:     TRISCbits.TRISC2 = 0;
  7942   001E4A  9494               	bcf	148,2,c	;volatile
  7943                           
  7944                           ;TAD_RFID.c: 26:     TRISCbits.TRISC3 = 0;
  7945   001E4C  9694               	bcf	148,3,c	;volatile
  7946                           
  7947                           ;TAD_RFID.c: 27:     TRISCbits.TRISC4 = 0;
  7948   001E4E  9894               	bcf	148,4,c	;volatile
  7949   001E50  0012               	return		;funcret
  7950   001E52                     __end_of_InitPortDirections:
  7951                           	callstack 0
  7952                           
  7953 ;; *************** function _initPorts *****************
  7954 ;; Defined at:
  7955 ;;		line 63 in file "main.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1
  7969 ;;      Params:         0       0       0
  7970 ;;      Locals:         0       0       0
  7971 ;;      Temps:          0       0       0
  7972 ;;      Totals:         0       0       0
  7973 ;;Total ram usage:        0 bytes
  7974 ;; Hardware stack levels used: 1
  7975 ;; Hardware stack levels required when called: 3
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_main
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text36
  7984   001E5C                     __ptext36:
  7985                           	callstack 0
  7986   001E5C                     _initPorts:
  7987                           	callstack 27
  7988   001E5C  0E0F               	movlw	15
  7989   001E5E  6EC1               	movwf	193,c	;volatile
  7990   001E60  9496               	bcf	150,2,c	;volatile
  7991   001E62  0012               	return		;funcret
  7992   001E64                     __end_of_initPorts:
  7993                           	callstack 0
  7994                           
  7995 ;; *************** function _initLeds *****************
  7996 ;; Defined at:
  7997 ;;		line 9 in file "TAD_LEDS.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;		None
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;		None
  8002 ;; Return value:  Size  Location     Type
  8003 ;;                  1    wreg      void 
  8004 ;; Registers used:
  8005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8006 ;; Tracked objects:
  8007 ;;		On entry : 0/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMRAM   BANK0   BANK1
  8011 ;;      Params:         0       0       0
  8012 ;;      Locals:         0       0       0
  8013 ;;      Temps:          0       0       0
  8014 ;;      Totals:         0       0       0
  8015 ;;Total ram usage:        0 bytes
  8016 ;; Hardware stack levels used: 1
  8017 ;; Hardware stack levels required when called: 4
  8018 ;; This function calls:
  8019 ;;		_TI_NewTimer
  8020 ;; This function is called by:
  8021 ;;		_main
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text37
  8026   001E2A                     __ptext37:
  8027                           	callstack 0
  8028   001E2A                     _initLeds:
  8029                           	callstack 26
  8030   001E2A                     
  8031                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  8032   001E2A  6A92               	clrf	146,c	;volatile
  8033                           
  8034                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  8035   001E2C  6A96               	clrf	150,c	;volatile
  8036   001E2E                     
  8037                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  8038   001E2E  0E43               	movlw	low _timer@TAD_LEDS$F968
  8039   001E30  6E4E               	movwf	TI_NewTimer@TimerHandle^0,c
  8040   001E32  ECD2  F00C         	call	_TI_NewTimer	;wreg free
  8041   001E36  0012               	return		;funcret
  8042   001E38                     __end_of_initLeds:
  8043                           	callstack 0
  8044                           
  8045 ;; *************** function _initData *****************
  8046 ;; Defined at:
  8047 ;;		line 29 in file "TAD_DATOS.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  i               1    1[COMRAM] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1
  8061 ;;      Params:         0       0       0
  8062 ;;      Locals:         1       0       0
  8063 ;;      Temps:          0       0       0
  8064 ;;      Totals:         1       0       0
  8065 ;;Total ram usage:        1 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 3
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_main
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text38
  8076   001D52                     __ptext38:
  8077                           	callstack 0
  8078   001D52                     _initData:
  8079                           	callstack 27
  8080   001D52                     
  8081                           ;TAD_DATOS.c: 30:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  8082   001D52  6A4E               	clrf	initData@i^0,c
  8083   001D54                     l2360:
  8084   001D54  504E               	movf	initData@i^0,w,c
  8085   001D56  0F3E               	addlw	low _currentUser
  8086   001D58  6ED9               	movwf	fsr2l,c
  8087   001D5A  6ADA               	clrf	fsr2h,c
  8088   001D5C  6ADF               	clrf	indf2,c
  8089   001D5E  2A4E               	incf	initData@i^0,f,c
  8090   001D60  0E04               	movlw	4
  8091   001D62  644E               	cpfsgt	initData@i^0,c
  8092   001D64  EFB6  F00E         	goto	u1021
  8093   001D68  EFB8  F00E         	goto	u1020
  8094   001D6C                     u1021:
  8095   001D6C  EFAA  F00E         	goto	l2360
  8096   001D70                     u1020:
  8097   001D70  0012               	return		;funcret
  8098   001D72                     __end_of_initData:
  8099                           	callstack 0
  8100                           
  8101 ;; *************** function _Terminal_Init *****************
  8102 ;; Defined at:
  8103 ;;		line 11 in file "TAD_TERMINAL.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1
  8117 ;;      Params:         0       0       0
  8118 ;;      Locals:         0       0       0
  8119 ;;      Temps:          0       0       0
  8120 ;;      Totals:         0       0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used: 1
  8123 ;; Hardware stack levels required when called: 3
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_main
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text39
  8132   001E1A                     __ptext39:
  8133                           	callstack 0
  8134   001E1A                     _Terminal_Init:
  8135                           	callstack 27
  8136   001E1A                     
  8137                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  8138   001E1A  0E24               	movlw	36
  8139   001E1C  6EAC               	movwf	172,c	;volatile
  8140                           
  8141                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  8142   001E1E  0E90               	movlw	144
  8143   001E20  6EAB               	movwf	171,c	;volatile
  8144   001E22                     
  8145                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  8146   001E22  68AF               	setf	175,c	;volatile
  8147   001E24                     
  8148                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  8149   001E24  6AB8               	clrf	184,c	;volatile
  8150   001E26                     
  8151                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  8152   001E26  6A22               	clrf	_hashtag_pressed^0,c
  8153   001E28  0012               	return		;funcret
  8154   001E2A                     __end_of_Terminal_Init:
  8155                           	callstack 0
  8156                           
  8157 ;; *************** function _TI_Init *****************
  8158 ;; Defined at:
  8159 ;;		line 32 in file "TAD_TIMER.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  counter         1    1[COMRAM] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1
  8173 ;;      Params:         0       0       0
  8174 ;;      Locals:         1       0       0
  8175 ;;      Temps:          0       0       0
  8176 ;;      Totals:         1       0       0
  8177 ;;Total ram usage:        1 bytes
  8178 ;; Hardware stack levels used: 1
  8179 ;; Hardware stack levels required when called: 3
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_main
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           	psect	text40
  8188   001C06                     __ptext40:
  8189                           	callstack 0
  8190   001C06                     _TI_Init:
  8191                           	callstack 27
  8192   001C06                     
  8193                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  8194   001C06  6A4E               	clrf	TI_Init@counter^0,c
  8195   001C08                     l3710:
  8196                           
  8197                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  8198   001C08  504E               	movf	TI_Init@counter^0,w,c
  8199   001C0A  0D05               	mullw	5
  8200   001C0C  50F3               	movf	243,w,c
  8201   001C0E  0FE2               	addlw	low (_Timers+4)
  8202   001C10  6ED9               	movwf	fsr2l,c
  8203   001C12  6ADA               	clrf	fsr2h,c
  8204   001C14  6ADF               	clrf	indf2,c
  8205   001C16                     
  8206                           ;TAD_TIMER.c: 35:  }
  8207   001C16  2A4E               	incf	TI_Init@counter^0,f,c
  8208   001C18  0E03               	movlw	3
  8209   001C1A  644E               	cpfsgt	TI_Init@counter^0,c
  8210   001C1C  EF12  F00E         	goto	u2701
  8211   001C20  EF14  F00E         	goto	u2700
  8212   001C24                     u2701:
  8213   001C24  EF04  F00E         	goto	l3710
  8214   001C28                     u2700:
  8215   001C28                     
  8216                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  8217   001C28  0E82               	movlw	130
  8218   001C2A  6ED5               	movwf	213,c	;volatile
  8219                           
  8220                           ;TAD_TIMER.c: 37:     TMR0=63036;
  8221   001C2C  0EF6               	movlw	246
  8222   001C2E  6ED7               	movwf	215,c	;volatile
  8223   001C30  0E3C               	movlw	60
  8224   001C32  6ED6               	movwf	214,c	;volatile
  8225   001C34                     
  8226                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  8227   001C34  94F2               	bcf	242,2,c	;volatile
  8228   001C36                     
  8229                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  8230   001C36  8AF2               	bsf	242,5,c	;volatile
  8231   001C38  0012               	return		;funcret
  8232   001C3A                     __end_of_TI_Init:
  8233                           	callstack 0
  8234                           
  8235 ;; *************** function _LcInit *****************
  8236 ;; Defined at:
  8237 ;;		line 68 in file "TAD_DISPLAY.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;  rows            1    wreg     unsigned char 
  8240 ;;  columns         1   22[COMRAM] unsigned char 
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  rows            1   23[COMRAM] unsigned char 
  8243 ;;  i               2   24[COMRAM] int 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  1    wreg      void 
  8246 ;; Registers used:
  8247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1
  8253 ;;      Params:         1       0       0
  8254 ;;      Locals:         3       0       0
  8255 ;;      Temps:          0       0       0
  8256 ;;      Totals:         4       0       0
  8257 ;;Total ram usage:        4 bytes
  8258 ;; Hardware stack levels used: 1
  8259 ;; Hardware stack levels required when called: 6
  8260 ;; This function calls:
  8261 ;;		_CantaIR
  8262 ;;		_EscriuPrimeraOrdre
  8263 ;;		_Espera
  8264 ;;		_TI_NewTimer
  8265 ;;		_WaitForBusy
  8266 ;; This function is called by:
  8267 ;;		_main
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text41
  8272   000FDE                     __ptext41:
  8273                           	callstack 0
  8274   000FDE                     _LcInit:
  8275                           	callstack 24
  8276                           
  8277                           ;incstack = 0
  8278                           ;LcInit@rows stored from wreg
  8279   000FDE  6E64               	movwf	LcInit@rows^0,c
  8280   000FE0                     
  8281                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  8282   000FE0  0E44               	movlw	low _Timer
  8283   000FE2  6E4E               	movwf	TI_NewTimer@TimerHandle^0,c
  8284   000FE4  ECD2  F00C         	call	_TI_NewTimer	;wreg free
  8285   000FE8                     
  8286                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  8287   000FE8  C064  F027         	movff	LcInit@rows,_Rows
  8288   000FEC  C063  F026         	movff	LcInit@columns,_Columns
  8289   000FF0                     
  8290                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  8291   000FF0  6A24               	clrf	_ColumnAct^0,c
  8292   000FF2  6A25               	clrf	_RowAct^0,c
  8293   000FF4                     
  8294                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  8295   000FF4  9293               	bcf	147,1,c	;volatile
  8296   000FF6  9493               	bcf	147,2,c	;volatile
  8297   000FF8  9693               	bcf	147,3,c	;volatile
  8298   000FFA                     
  8299                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  8300   000FFA  0E00               	movlw	0
  8301   000FFC  6E66               	movwf	(LcInit@i+1)^0,c
  8302   000FFE  0E00               	movlw	0
  8303   001000  6E65               	movwf	LcInit@i^0,c
  8304   001002                     l3788:
  8305                           
  8306                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  8307   001002  C044  F05B         	movff	_Timer,Espera@Timer
  8308   001006  6A5C               	clrf	(Espera@Timer+1)^0,c
  8309   001008  0E00               	movlw	0
  8310   00100A  6E5E               	movwf	(Espera@ms+1)^0,c
  8311   00100C  0E64               	movlw	100
  8312   00100E  6E5D               	movwf	Espera@ms^0,c
  8313   001010  ECAC  F00D         	call	_Espera	;wreg free
  8314   001014                     
  8315                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  8316   001014  0E03               	movlw	3
  8317   001016  ECEB  F009         	call	_EscriuPrimeraOrdre
  8318   00101A                     
  8319                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  8320   00101A  C044  F05B         	movff	_Timer,Espera@Timer
  8321   00101E  6A5C               	clrf	(Espera@Timer+1)^0,c
  8322   001020  0E00               	movlw	0
  8323   001022  6E5E               	movwf	(Espera@ms+1)^0,c
  8324   001024  0E04               	movlw	4
  8325   001026  6E5D               	movwf	Espera@ms^0,c
  8326   001028  ECAC  F00D         	call	_Espera	;wreg free
  8327                           
  8328                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  8329   00102C  0E03               	movlw	3
  8330   00102E  ECEB  F009         	call	_EscriuPrimeraOrdre
  8331   001032                     
  8332                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  8333   001032  C044  F05B         	movff	_Timer,Espera@Timer
  8334   001036  6A5C               	clrf	(Espera@Timer+1)^0,c
  8335   001038  0E00               	movlw	0
  8336   00103A  6E5E               	movwf	(Espera@ms+1)^0,c
  8337   00103C  0E01               	movlw	1
  8338   00103E  6E5D               	movwf	Espera@ms^0,c
  8339   001040  ECAC  F00D         	call	_Espera	;wreg free
  8340   001044                     
  8341                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  8342   001044  0E03               	movlw	3
  8343   001046  ECEB  F009         	call	_EscriuPrimeraOrdre
  8344                           
  8345                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  8346   00104A  C044  F05B         	movff	_Timer,Espera@Timer
  8347   00104E  6A5C               	clrf	(Espera@Timer+1)^0,c
  8348   001050  0E00               	movlw	0
  8349   001052  6E5E               	movwf	(Espera@ms+1)^0,c
  8350   001054  0E01               	movlw	1
  8351   001056  6E5D               	movwf	Espera@ms^0,c
  8352   001058  ECAC  F00D         	call	_Espera	;wreg free
  8353   00105C                     
  8354                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  8355   00105C  0E02               	movlw	2
  8356   00105E  ECEB  F009         	call	_EscriuPrimeraOrdre
  8357   001062                     
  8358                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  8359   001062  C044  F05B         	movff	_Timer,Espera@Timer
  8360   001066  6A5C               	clrf	(Espera@Timer+1)^0,c
  8361   001068  0E00               	movlw	0
  8362   00106A  6E5E               	movwf	(Espera@ms+1)^0,c
  8363   00106C  0E01               	movlw	1
  8364   00106E  6E5D               	movwf	Espera@ms^0,c
  8365   001070  ECAC  F00D         	call	_Espera	;wreg free
  8366                           
  8367                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  8368   001074  0E28               	movlw	40
  8369   001076  EC36  F00E         	call	_CantaIR
  8370   00107A                     
  8371                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  8372   00107A  EC03  F00F         	call	_WaitForBusy	;wreg free
  8373   00107E  0E08               	movlw	8
  8374   001080  EC36  F00E         	call	_CantaIR
  8375                           
  8376                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  8377   001084  EC03  F00F         	call	_WaitForBusy	;wreg free
  8378   001088  0E01               	movlw	1
  8379   00108A  EC36  F00E         	call	_CantaIR
  8380   00108E                     
  8381                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  8382   00108E  C044  F05B         	movff	_Timer,Espera@Timer
  8383   001092  6A5C               	clrf	(Espera@Timer+1)^0,c
  8384   001094  0E00               	movlw	0
  8385   001096  6E5E               	movwf	(Espera@ms+1)^0,c
  8386   001098  0E02               	movlw	2
  8387   00109A  6E5D               	movwf	Espera@ms^0,c
  8388   00109C  ECAC  F00D         	call	_Espera	;wreg free
  8389   0010A0                     
  8390                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8391   0010A0  EC03  F00F         	call	_WaitForBusy	;wreg free
  8392   0010A4  0E06               	movlw	6
  8393   0010A6  EC36  F00E         	call	_CantaIR
  8394                           
  8395                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8396   0010AA  EC03  F00F         	call	_WaitForBusy	;wreg free
  8397   0010AE  0E0F               	movlw	15
  8398   0010B0  EC36  F00E         	call	_CantaIR
  8399   0010B4                     
  8400                           ;TAD_DISPLAY.c: 101:  }
  8401   0010B4  4A65               	infsnz	LcInit@i^0,f,c
  8402   0010B6  2A66               	incf	(LcInit@i+1)^0,f,c
  8403   0010B8  BE66               	btfsc	(LcInit@i+1)^0,7,c
  8404   0010BA  EF68  F008         	goto	u2801
  8405   0010BE  5066               	movf	(LcInit@i+1)^0,w,c
  8406   0010C0  E109               	bnz	u2800
  8407   0010C2  0E02               	movlw	2
  8408   0010C4  5C65               	subwf	LcInit@i^0,w,c
  8409   0010C6  A0D8               	btfss	status,0,c
  8410   0010C8  EF68  F008         	goto	u2801
  8411   0010CC  EF6A  F008         	goto	u2800
  8412   0010D0                     u2801:
  8413   0010D0  EF01  F008         	goto	l3788
  8414   0010D4                     u2800:
  8415   0010D4  0012               	return		;funcret
  8416   0010D6                     __end_of_LcInit:
  8417                           	callstack 0
  8418                           
  8419 ;; *************** function _WaitForBusy *****************
  8420 ;; Defined at:
  8421 ;;		line 256 in file "TAD_DISPLAY.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  Busy            1    0        unsigned char 
  8426 ;; Return value:  Size  Location     Type
  8427 ;;                  1    wreg      void 
  8428 ;; Registers used:
  8429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMRAM   BANK0   BANK1
  8435 ;;      Params:         0       0       0
  8436 ;;      Locals:         0       0       0
  8437 ;;      Temps:          0       0       0
  8438 ;;      Totals:         0       0       0
  8439 ;;Total ram usage:        0 bytes
  8440 ;; Hardware stack levels used: 1
  8441 ;; Hardware stack levels required when called: 5
  8442 ;; This function calls:
  8443 ;;		_Espera
  8444 ;; This function is called by:
  8445 ;;		_LcInit
  8446 ;;		_LcGotoXY
  8447 ;;		_LcPutChar
  8448 ;;		_LcClear
  8449 ;;		_LcCursorOn
  8450 ;;		_LcCursorOff
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text42
  8455   001E06                     __ptext42:
  8456                           	callstack 0
  8457   001E06                     _WaitForBusy:
  8458                           	callstack 23
  8459   001E06                     
  8460                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  8461   001E06  C044  F05B         	movff	_Timer,Espera@Timer
  8462   001E0A  6A5C               	clrf	(Espera@Timer+1)^0,c
  8463   001E0C  0E00               	movlw	0
  8464   001E0E  6E5E               	movwf	(Espera@ms+1)^0,c
  8465   001E10  0E02               	movlw	2
  8466   001E12  6E5D               	movwf	Espera@ms^0,c
  8467   001E14  ECAC  F00D         	call	_Espera	;wreg free
  8468   001E18  0012               	return		;funcret
  8469   001E1A                     __end_of_WaitForBusy:
  8470                           	callstack 0
  8471                           
  8472 ;; *************** function _Espera *****************
  8473 ;; Defined at:
  8474 ;;		line 205 in file "TAD_DISPLAY.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  Timer           2   14[COMRAM] int 
  8477 ;;  ms              2   16[COMRAM] int 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1
  8489 ;;      Params:         4       0       0
  8490 ;;      Locals:         0       0       0
  8491 ;;      Temps:          4       0       0
  8492 ;;      Totals:         8       0       0
  8493 ;;Total ram usage:        8 bytes
  8494 ;; Hardware stack levels used: 1
  8495 ;; Hardware stack levels required when called: 4
  8496 ;; This function calls:
  8497 ;;		_TI_GetTics
  8498 ;;		_TI_ResetTics
  8499 ;; This function is called by:
  8500 ;;		_LcInit
  8501 ;;		_WaitForBusy
  8502 ;;		_LcClear
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text43
  8507   001B58                     __ptext43:
  8508                           	callstack 0
  8509   001B58                     _Espera:
  8510                           	callstack 23
  8511   001B58                     
  8512                           ;TAD_DISPLAY.c: 206:  TI_ResetTics(Timer);
  8513   001B58  505B               	movf	Espera@Timer^0,w,c
  8514   001B5A  EC86  F00E         	call	_TI_ResetTics
  8515   001B5E                     l3102:
  8516   001B5E  C05D  F05F         	movff	Espera@ms,??_Espera
  8517   001B62  C05E  F060         	movff	Espera@ms+1,??_Espera+1
  8518   001B66  0E00               	movlw	0
  8519   001B68  BE60               	btfsc	(??_Espera+1)^0,7,c
  8520   001B6A  0EFF               	movlw	255
  8521   001B6C  6E61               	movwf	(??_Espera+2)^0,c
  8522   001B6E  6E62               	movwf	(??_Espera+3)^0,c
  8523   001B70  505B               	movf	Espera@Timer^0,w,c
  8524   001B72  ECFD  F00C         	call	_TI_GetTics
  8525   001B76  505F               	movf	??_Espera^0,w,c
  8526   001B78  5C4E               	subwf	?_TI_GetTics^0,w,c
  8527   001B7A  5060               	movf	(??_Espera+1)^0,w,c
  8528   001B7C  584F               	subwfb	(?_TI_GetTics+1)^0,w,c
  8529   001B7E  5061               	movf	(??_Espera+2)^0,w,c
  8530   001B80  5850               	subwfb	(?_TI_GetTics+2)^0,w,c
  8531   001B82  5062               	movf	(??_Espera+3)^0,w,c
  8532   001B84  5851               	subwfb	(?_TI_GetTics+3)^0,w,c
  8533   001B86  A0D8               	btfss	status,0,c
  8534   001B88  EFC8  F00D         	goto	u1911
  8535   001B8C  EFCA  F00D         	goto	u1910
  8536   001B90                     u1911:
  8537   001B90  EFAF  F00D         	goto	l3102
  8538   001B94                     u1910:
  8539   001B94  0012               	return		;funcret
  8540   001B96                     __end_of_Espera:
  8541                           	callstack 0
  8542                           
  8543 ;; *************** function _TI_ResetTics *****************
  8544 ;; Defined at:
  8545 ;;		line 53 in file "TAD_TIMER.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  TimerHandle     1    wreg     unsigned char 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  1    wreg      void 
  8552 ;; Registers used:
  8553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMRAM   BANK0   BANK1
  8559 ;;      Params:         0       0       0
  8560 ;;      Locals:         1       0       0
  8561 ;;      Temps:          0       0       0
  8562 ;;      Totals:         1       0       0
  8563 ;;Total ram usage:        1 bytes
  8564 ;; Hardware stack levels used: 1
  8565 ;; Hardware stack levels required when called: 3
  8566 ;; This function calls:
  8567 ;;		Nothing
  8568 ;; This function is called by:
  8569 ;;		_motorTeclado
  8570 ;;		_Espera
  8571 ;;		_motor_LEDs
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text44
  8576   001D0C                     __ptext44:
  8577                           	callstack 0
  8578   001D0C                     _TI_ResetTics:
  8579                           	callstack 23
  8580                           
  8581                           ;incstack = 0
  8582                           ;TI_ResetTics@TimerHandle stored from wreg
  8583   001D0C  6E4E               	movwf	TI_ResetTics@TimerHandle^0,c
  8584   001D0E                     
  8585                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8586   001D0E  9EF2               	bcf	242,7,c	;volatile
  8587   001D10  504E               	movf	TI_ResetTics@TimerHandle^0,w,c
  8588   001D12  0D05               	mullw	5
  8589   001D14  50F3               	movf	243,w,c
  8590   001D16  0FDE               	addlw	low _Timers
  8591   001D18  6ED9               	movwf	fsr2l,c
  8592   001D1A  6ADA               	clrf	fsr2h,c
  8593   001D1C  C00B  FFDE         	movff	_Tics,postinc2	;volatile
  8594   001D20  C00C  FFDE         	movff	_Tics+1,postinc2	;volatile
  8595   001D24  C00D  FFDE         	movff	_Tics+2,postinc2	;volatile
  8596   001D28  C00E  FFDE         	movff	_Tics+3,postinc2	;volatile
  8597   001D2C  8EF2               	bsf	242,7,c	;volatile
  8598   001D2E  0012               	return		;funcret
  8599   001D30                     __end_of_TI_ResetTics:
  8600                           	callstack 0
  8601                           
  8602 ;; *************** function _TI_GetTics *****************
  8603 ;; Defined at:
  8604 ;;		line 61 in file "TAD_TIMER.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  TimerHandle     1    wreg     unsigned char 
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  8609 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  4    1[COMRAM] unsigned long 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1
  8619 ;;      Params:         4       0       0
  8620 ;;      Locals:         5       0       0
  8621 ;;      Temps:          4       0       0
  8622 ;;      Totals:        13       0       0
  8623 ;;Total ram usage:       13 bytes
  8624 ;; Hardware stack levels used: 1
  8625 ;; Hardware stack levels required when called: 3
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_motorTeclado
  8630 ;;		_Espera
  8631 ;;		_motor_LEDs
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text45
  8636   0019FA                     __ptext45:
  8637                           	callstack 0
  8638   0019FA                     _TI_GetTics:
  8639                           	callstack 23
  8640                           
  8641                           ;incstack = 0
  8642                           ;TI_GetTics@TimerHandle stored from wreg
  8643   0019FA  6E5A               	movwf	TI_GetTics@TimerHandle^0,c
  8644   0019FC                     
  8645                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8646   0019FC  9EF2               	bcf	242,7,c	;volatile
  8647   0019FE  C00B  F056         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8648   001A02  C00C  F057         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8649   001A06  C00D  F058         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8650   001A0A  C00E  F059         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8651   001A0E  8EF2               	bsf	242,7,c	;volatile
  8652   001A10                     
  8653                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8654   001A10  505A               	movf	TI_GetTics@TimerHandle^0,w,c
  8655   001A12  0D05               	mullw	5
  8656   001A14  50F3               	movf	243,w,c
  8657   001A16  0FDE               	addlw	low _Timers
  8658   001A18  6ED9               	movwf	fsr2l,c
  8659   001A1A  6ADA               	clrf	fsr2h,c
  8660   001A1C  CFDE F052          	movff	postinc2,??_TI_GetTics
  8661   001A20  CFDE F053          	movff	postinc2,??_TI_GetTics+1
  8662   001A24  CFDE F054          	movff	postinc2,??_TI_GetTics+2
  8663   001A28  CFDE F055          	movff	postinc2,??_TI_GetTics+3
  8664   001A2C  5052               	movf	??_TI_GetTics^0,w,c
  8665   001A2E  5C56               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8666   001A30  6E4E               	movwf	?_TI_GetTics^0,c
  8667   001A32  5053               	movf	(??_TI_GetTics+1)^0,w,c
  8668   001A34  5857               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8669   001A36  6E4F               	movwf	(?_TI_GetTics+1)^0,c
  8670   001A38  5054               	movf	(??_TI_GetTics+2)^0,w,c
  8671   001A3A  5858               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8672   001A3C  6E50               	movwf	(?_TI_GetTics+2)^0,c
  8673   001A3E  5055               	movf	(??_TI_GetTics+3)^0,w,c
  8674   001A40  5859               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8675   001A42  6E51               	movwf	(?_TI_GetTics+3)^0,c
  8676   001A44  0012               	return		;funcret
  8677   001A46                     __end_of_TI_GetTics:
  8678                           	callstack 0
  8679                           
  8680 ;; *************** function _TI_NewTimer *****************
  8681 ;; Defined at:
  8682 ;;		line 43 in file "TAD_TIMER.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8685 ;;		 -> timer@TAD_LEDS$F968(1), Timer(1), timer(1), 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  Comptador       1    3[COMRAM] unsigned char 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      unsigned char 
  8690 ;; Registers used:
  8691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1
  8697 ;;      Params:         1       0       0
  8698 ;;      Locals:         1       0       0
  8699 ;;      Temps:          1       0       0
  8700 ;;      Totals:         3       0       0
  8701 ;;Total ram usage:        3 bytes
  8702 ;; Hardware stack levels used: 1
  8703 ;; Hardware stack levels required when called: 3
  8704 ;; This function calls:
  8705 ;;		Nothing
  8706 ;; This function is called by:
  8707 ;;		_initTeclado
  8708 ;;		_LcInit
  8709 ;;		_initLeds
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text46
  8714   0019A4                     __ptext46:
  8715                           	callstack 0
  8716   0019A4                     _TI_NewTimer:
  8717                           	callstack 26
  8718   0019A4                     
  8719                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8720   0019A4  6A50               	clrf	TI_NewTimer@Comptador^0,c
  8721                           
  8722                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8723   0019A6  EFE1  F00C         	goto	l3436
  8724   0019AA                     l3432:
  8725                           
  8726                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8727   0019AA  2A50               	incf	TI_NewTimer@Comptador^0,f,c
  8728   0019AC  0E04               	movlw	4
  8729   0019AE  1850               	xorwf	TI_NewTimer@Comptador^0,w,c
  8730   0019B0  A4D8               	btfss	status,2,c
  8731   0019B2  EFDD  F00C         	goto	u2441
  8732   0019B6  EFDF  F00C         	goto	u2440
  8733   0019BA                     u2441:
  8734   0019BA  EFE1  F00C         	goto	l3436
  8735   0019BE                     u2440:
  8736   0019BE  EFFC  F00C         	goto	l87
  8737   0019C2                     l3436:
  8738                           
  8739                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8740   0019C2  5050               	movf	TI_NewTimer@Comptador^0,w,c
  8741   0019C4  0D05               	mullw	5
  8742   0019C6  50F3               	movf	243,w,c
  8743   0019C8  0FE2               	addlw	low (_Timers+4)
  8744   0019CA  6ED9               	movwf	fsr2l,c
  8745   0019CC  6ADA               	clrf	fsr2h,c
  8746   0019CE  04DE               	decf	postinc2,w,c
  8747   0019D0  B4D8               	btfsc	status,2,c
  8748   0019D2  EFED  F00C         	goto	u2451
  8749   0019D6  EFEF  F00C         	goto	u2450
  8750   0019DA                     u2451:
  8751   0019DA  EFD5  F00C         	goto	l3432
  8752   0019DE                     u2450:
  8753   0019DE                     
  8754                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8755   0019DE  5050               	movf	TI_NewTimer@Comptador^0,w,c
  8756   0019E0  0D05               	mullw	5
  8757   0019E2  50F3               	movf	243,w,c
  8758   0019E4  0FE2               	addlw	low (_Timers+4)
  8759   0019E6  6ED9               	movwf	fsr2l,c
  8760   0019E8  6ADA               	clrf	fsr2h,c
  8761   0019EA  0E01               	movlw	1
  8762   0019EC  6EDF               	movwf	indf2,c
  8763   0019EE                     
  8764                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8765   0019EE  504E               	movf	TI_NewTimer@TimerHandle^0,w,c
  8766   0019F0  6ED9               	movwf	fsr2l,c
  8767   0019F2  6ADA               	clrf	fsr2h,c
  8768   0019F4  C050  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8769   0019F8                     l87:
  8770   0019F8  0012               	return		;funcret
  8771   0019FA                     __end_of_TI_NewTimer:
  8772                           	callstack 0
  8773                           
  8774 ;; *************** function _EscriuPrimeraOrdre *****************
  8775 ;; Defined at:
  8776 ;;		line 260 in file "TAD_DISPLAY.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  ordre           1    wreg     unsigned char 
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;  ordre           1    2[COMRAM] unsigned char 
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1
  8790 ;;      Params:         0       0       0
  8791 ;;      Locals:         1       0       0
  8792 ;;      Temps:          1       0       0
  8793 ;;      Totals:         2       0       0
  8794 ;;Total ram usage:        2 bytes
  8795 ;; Hardware stack levels used: 1
  8796 ;; Hardware stack levels required when called: 3
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_LcInit
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           	psect	text47
  8805   0013D6                     __ptext47:
  8806                           	callstack 0
  8807   0013D6                     _EscriuPrimeraOrdre:
  8808                           	callstack 26
  8809                           
  8810                           ;incstack = 0
  8811                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8812   0013D6  6E4F               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8813   0013D8                     
  8814                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  8815   0013D8  9096               	bcf	150,0,c	;volatile
  8816   0013DA  9296               	bcf	150,1,c	;volatile
  8817   0013DC  9A93               	bcf	147,5,c	;volatile
  8818   0013DE  9893               	bcf	147,4,c	;volatile
  8819   0013E0  968A               	bcf	138,3,c	;volatile
  8820   0013E2  948A               	bcf	138,2,c	;volatile
  8821                           
  8822                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  8823   0013E4  828A               	bsf	138,1,c	;volatile
  8824   0013E6  828A               	bsf	138,1,c	;volatile
  8825   0013E8                     
  8826                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  8827   0013E8  B64F               	btfsc	EscriuPrimeraOrdre@ordre^0,3,c
  8828   0013EA  EFF9  F009         	goto	u691
  8829   0013EE  EFFD  F009         	goto	u690
  8830   0013F2                     u691:
  8831   0013F2  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8832   0013F4  2A4E               	incf	??_EscriuPrimeraOrdre^0,f,c
  8833   0013F6  EFFE  F009         	goto	u708
  8834   0013FA                     u690:
  8835   0013FA  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8836   0013FC                     u708:
  8837   0013FC  508D               	movf	141,w,c	;volatile
  8838   0013FE  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8839   001400  0BFE               	andlw	-2
  8840   001402  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8841   001404  6E8D               	movwf	141,c	;volatile
  8842                           
  8843                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  8844   001406  B44F               	btfsc	EscriuPrimeraOrdre@ordre^0,2,c
  8845   001408  EF08  F00A         	goto	u711
  8846   00140C  EF0C  F00A         	goto	u710
  8847   001410                     u711:
  8848   001410  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8849   001412  2A4E               	incf	??_EscriuPrimeraOrdre^0,f,c
  8850   001414  EF0D  F00A         	goto	u728
  8851   001418                     u710:
  8852   001418  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8853   00141A                     u728:
  8854   00141A  464E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8855   00141C  508D               	movf	141,w,c	;volatile
  8856   00141E  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8857   001420  0BFD               	andlw	-3
  8858   001422  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8859   001424  6E8D               	movwf	141,c	;volatile
  8860                           
  8861                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  8862   001426  B24F               	btfsc	EscriuPrimeraOrdre@ordre^0,1,c
  8863   001428  EF18  F00A         	goto	u731
  8864   00142C  EF1C  F00A         	goto	u730
  8865   001430                     u731:
  8866   001430  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8867   001432  2A4E               	incf	??_EscriuPrimeraOrdre^0,f,c
  8868   001434  EF1D  F00A         	goto	u748
  8869   001438                     u730:
  8870   001438  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8871   00143A                     u748:
  8872   00143A  3A4E               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8873   00143C  464E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8874   00143E  508A               	movf	138,w,c	;volatile
  8875   001440  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8876   001442  0BDF               	andlw	-33
  8877   001444  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8878   001446  6E8A               	movwf	138,c	;volatile
  8879                           
  8880                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  8881   001448  B04F               	btfsc	EscriuPrimeraOrdre@ordre^0,0,c
  8882   00144A  EF29  F00A         	goto	u751
  8883   00144E  EF2D  F00A         	goto	u750
  8884   001452                     u751:
  8885   001452  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8886   001454  2A4E               	incf	??_EscriuPrimeraOrdre^0,f,c
  8887   001456  EF2E  F00A         	goto	u768
  8888   00145A                     u750:
  8889   00145A  6A4E               	clrf	??_EscriuPrimeraOrdre^0,c
  8890   00145C                     u768:
  8891   00145C  3A4E               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8892   00145E  508A               	movf	138,w,c	;volatile
  8893   001460  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8894   001462  0BEF               	andlw	-17
  8895   001464  184E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8896   001466  6E8A               	movwf	138,c	;volatile
  8897   001468                     
  8898                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  8899   001468  928A               	bcf	138,1,c	;volatile
  8900   00146A  0012               	return		;funcret
  8901   00146C                     __end_of_EscriuPrimeraOrdre:
  8902                           	callstack 0
  8903                           
  8904 ;; *************** function _CantaIR *****************
  8905 ;; Defined at:
  8906 ;;		line 224 in file "TAD_DISPLAY.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  IR              1    wreg     unsigned char 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  IR              1    3[COMRAM] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1
  8920 ;;      Params:         0       0       0
  8921 ;;      Locals:         1       0       0
  8922 ;;      Temps:          0       0       0
  8923 ;;      Totals:         1       0       0
  8924 ;;Total ram usage:        1 bytes
  8925 ;; Hardware stack levels used: 1
  8926 ;; Hardware stack levels required when called: 4
  8927 ;; This function calls:
  8928 ;;		_CantaPartAlta
  8929 ;;		_CantaPartBaixa
  8930 ;; This function is called by:
  8931 ;;		_LcInit
  8932 ;;		_LcGotoXY
  8933 ;;		_LcClear
  8934 ;;		_LcCursorOn
  8935 ;;		_LcCursorOff
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text48
  8940   001C6C                     __ptext48:
  8941                           	callstack 0
  8942   001C6C                     _CantaIR:
  8943                           	callstack 23
  8944                           
  8945                           ;incstack = 0
  8946                           ;CantaIR@IR stored from wreg
  8947   001C6C  6E50               	movwf	CantaIR@IR^0,c
  8948   001C6E                     
  8949                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  8950   001C6E  9096               	bcf	150,0,c	;volatile
  8951   001C70  9296               	bcf	150,1,c	;volatile
  8952   001C72  9A93               	bcf	147,5,c	;volatile
  8953   001C74  9893               	bcf	147,4,c	;volatile
  8954                           
  8955                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  8956   001C76  968A               	bcf	138,3,c	;volatile
  8957                           
  8958                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  8959   001C78  948A               	bcf	138,2,c	;volatile
  8960                           
  8961                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  8962   001C7A  828A               	bsf	138,1,c	;volatile
  8963   001C7C                     
  8964                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  8965   001C7C  5050               	movf	CantaIR@IR^0,w,c
  8966   001C7E  EC47  F00B         	call	_CantaPartAlta
  8967   001C82                     
  8968                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  8969   001C82  828A               	bsf	138,1,c	;volatile
  8970   001C84                     
  8971                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  8972   001C84  928A               	bcf	138,1,c	;volatile
  8973   001C86                     
  8974                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  8975   001C86  928A               	bcf	138,1,c	;volatile
  8976   001C88                     
  8977                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  8978   001C88  828A               	bsf	138,1,c	;volatile
  8979                           
  8980                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  8981   001C8A  5050               	movf	CantaIR@IR^0,w,c
  8982   001C8C  EC05  F00B         	call	_CantaPartBaixa
  8983   001C90                     
  8984                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  8985   001C90  828A               	bsf	138,1,c	;volatile
  8986   001C92                     
  8987                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  8988   001C92  928A               	bcf	138,1,c	;volatile
  8989   001C94                     
  8990                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  8991   001C94  8096               	bsf	150,0,c	;volatile
  8992   001C96  8296               	bsf	150,1,c	;volatile
  8993   001C98  8A93               	bsf	147,5,c	;volatile
  8994   001C9A  8893               	bsf	147,4,c	;volatile
  8995   001C9C  0012               	return		;funcret
  8996   001C9E                     __end_of_CantaIR:
  8997                           	callstack 0
  8998                           
  8999 ;; *************** function _CantaPartBaixa *****************
  9000 ;; Defined at:
  9001 ;;		line 217 in file "TAD_DISPLAY.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  c               1    wreg     unsigned char 
  9004 ;; Auto vars:     Size  Location     Type
  9005 ;;  c               1    2[COMRAM] unsigned char 
  9006 ;; Return value:  Size  Location     Type
  9007 ;;                  1    wreg      void 
  9008 ;; Registers used:
  9009 ;;		wreg, status,2, status,0
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMRAM   BANK0   BANK1
  9015 ;;      Params:         0       0       0
  9016 ;;      Locals:         1       0       0
  9017 ;;      Temps:          1       0       0
  9018 ;;      Totals:         2       0       0
  9019 ;;Total ram usage:        2 bytes
  9020 ;; Hardware stack levels used: 1
  9021 ;; Hardware stack levels required when called: 3
  9022 ;; This function calls:
  9023 ;;		Nothing
  9024 ;; This function is called by:
  9025 ;;		_CantaIR
  9026 ;;		_CantaData
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text49
  9031   00160A                     __ptext49:
  9032                           	callstack 0
  9033   00160A                     _CantaPartBaixa:
  9034                           	callstack 23
  9035                           
  9036                           ;incstack = 0
  9037                           ;CantaPartBaixa@c stored from wreg
  9038   00160A  6E4F               	movwf	CantaPartBaixa@c^0,c
  9039   00160C                     
  9040                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  9041   00160C  B64F               	btfsc	CantaPartBaixa@c^0,3,c
  9042   00160E  EF0B  F00B         	goto	u2001
  9043   001612  EF0F  F00B         	goto	u2000
  9044   001616                     u2001:
  9045   001616  6A4E               	clrf	??_CantaPartBaixa^0,c
  9046   001618  2A4E               	incf	??_CantaPartBaixa^0,f,c
  9047   00161A  EF10  F00B         	goto	u2018
  9048   00161E                     u2000:
  9049   00161E  6A4E               	clrf	??_CantaPartBaixa^0,c
  9050   001620                     u2018:
  9051   001620  508D               	movf	141,w,c	;volatile
  9052   001622  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9053   001624  0BFE               	andlw	-2
  9054   001626  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9055   001628  6E8D               	movwf	141,c	;volatile
  9056                           
  9057                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9058   00162A  B44F               	btfsc	CantaPartBaixa@c^0,2,c
  9059   00162C  EF1A  F00B         	goto	u2021
  9060   001630  EF1E  F00B         	goto	u2020
  9061   001634                     u2021:
  9062   001634  6A4E               	clrf	??_CantaPartBaixa^0,c
  9063   001636  2A4E               	incf	??_CantaPartBaixa^0,f,c
  9064   001638  EF1F  F00B         	goto	u2038
  9065   00163C                     u2020:
  9066   00163C  6A4E               	clrf	??_CantaPartBaixa^0,c
  9067   00163E                     u2038:
  9068   00163E  464E               	rlncf	??_CantaPartBaixa^0,f,c
  9069   001640  508D               	movf	141,w,c	;volatile
  9070   001642  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9071   001644  0BFD               	andlw	-3
  9072   001646  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9073   001648  6E8D               	movwf	141,c	;volatile
  9074                           
  9075                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  9076   00164A  B24F               	btfsc	CantaPartBaixa@c^0,1,c
  9077   00164C  EF2A  F00B         	goto	u2041
  9078   001650  EF2E  F00B         	goto	u2040
  9079   001654                     u2041:
  9080   001654  6A4E               	clrf	??_CantaPartBaixa^0,c
  9081   001656  2A4E               	incf	??_CantaPartBaixa^0,f,c
  9082   001658  EF2F  F00B         	goto	u2058
  9083   00165C                     u2040:
  9084   00165C  6A4E               	clrf	??_CantaPartBaixa^0,c
  9085   00165E                     u2058:
  9086   00165E  3A4E               	swapf	??_CantaPartBaixa^0,f,c
  9087   001660  464E               	rlncf	??_CantaPartBaixa^0,f,c
  9088   001662  508A               	movf	138,w,c	;volatile
  9089   001664  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9090   001666  0BDF               	andlw	-33
  9091   001668  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9092   00166A  6E8A               	movwf	138,c	;volatile
  9093                           
  9094                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  9095   00166C  B04F               	btfsc	CantaPartBaixa@c^0,0,c
  9096   00166E  EF3B  F00B         	goto	u2061
  9097   001672  EF3F  F00B         	goto	u2060
  9098   001676                     u2061:
  9099   001676  6A4E               	clrf	??_CantaPartBaixa^0,c
  9100   001678  2A4E               	incf	??_CantaPartBaixa^0,f,c
  9101   00167A  EF40  F00B         	goto	u2078
  9102   00167E                     u2060:
  9103   00167E  6A4E               	clrf	??_CantaPartBaixa^0,c
  9104   001680                     u2078:
  9105   001680  3A4E               	swapf	??_CantaPartBaixa^0,f,c
  9106   001682  508A               	movf	138,w,c	;volatile
  9107   001684  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9108   001686  0BEF               	andlw	-17
  9109   001688  184E               	xorwf	??_CantaPartBaixa^0,w,c
  9110   00168A  6E8A               	movwf	138,c	;volatile
  9111   00168C  0012               	return		;funcret
  9112   00168E                     __end_of_CantaPartBaixa:
  9113                           	callstack 0
  9114                           
  9115 ;; *************** function _CantaPartAlta *****************
  9116 ;; Defined at:
  9117 ;;		line 210 in file "TAD_DISPLAY.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  c               1    wreg     unsigned char 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;  c               1    2[COMRAM] unsigned char 
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  1    wreg      void 
  9124 ;; Registers used:
  9125 ;;		wreg, status,2, status,0
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1
  9131 ;;      Params:         0       0       0
  9132 ;;      Locals:         1       0       0
  9133 ;;      Temps:          1       0       0
  9134 ;;      Totals:         2       0       0
  9135 ;;Total ram usage:        2 bytes
  9136 ;; Hardware stack levels used: 1
  9137 ;; Hardware stack levels required when called: 3
  9138 ;; This function calls:
  9139 ;;		Nothing
  9140 ;; This function is called by:
  9141 ;;		_CantaIR
  9142 ;;		_CantaData
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text50
  9147   00168E                     __ptext50:
  9148                           	callstack 0
  9149   00168E                     _CantaPartAlta:
  9150                           	callstack 23
  9151                           
  9152                           ;incstack = 0
  9153                           ;CantaPartAlta@c stored from wreg
  9154   00168E  6E4F               	movwf	CantaPartAlta@c^0,c
  9155   001690                     
  9156                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  9157   001690  BE4F               	btfsc	CantaPartAlta@c^0,7,c
  9158   001692  EF4D  F00B         	goto	u1921
  9159   001696  EF51  F00B         	goto	u1920
  9160   00169A                     u1921:
  9161   00169A  6A4E               	clrf	??_CantaPartAlta^0,c
  9162   00169C  2A4E               	incf	??_CantaPartAlta^0,f,c
  9163   00169E  EF52  F00B         	goto	u1938
  9164   0016A2                     u1920:
  9165   0016A2  6A4E               	clrf	??_CantaPartAlta^0,c
  9166   0016A4                     u1938:
  9167   0016A4  508D               	movf	141,w,c	;volatile
  9168   0016A6  184E               	xorwf	??_CantaPartAlta^0,w,c
  9169   0016A8  0BFE               	andlw	-2
  9170   0016AA  184E               	xorwf	??_CantaPartAlta^0,w,c
  9171   0016AC  6E8D               	movwf	141,c	;volatile
  9172                           
  9173                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9174   0016AE  BC4F               	btfsc	CantaPartAlta@c^0,6,c
  9175   0016B0  EF5C  F00B         	goto	u1941
  9176   0016B4  EF60  F00B         	goto	u1940
  9177   0016B8                     u1941:
  9178   0016B8  6A4E               	clrf	??_CantaPartAlta^0,c
  9179   0016BA  2A4E               	incf	??_CantaPartAlta^0,f,c
  9180   0016BC  EF61  F00B         	goto	u1958
  9181   0016C0                     u1940:
  9182   0016C0  6A4E               	clrf	??_CantaPartAlta^0,c
  9183   0016C2                     u1958:
  9184   0016C2  464E               	rlncf	??_CantaPartAlta^0,f,c
  9185   0016C4  508D               	movf	141,w,c	;volatile
  9186   0016C6  184E               	xorwf	??_CantaPartAlta^0,w,c
  9187   0016C8  0BFD               	andlw	-3
  9188   0016CA  184E               	xorwf	??_CantaPartAlta^0,w,c
  9189   0016CC  6E8D               	movwf	141,c	;volatile
  9190                           
  9191                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  9192   0016CE  BA4F               	btfsc	CantaPartAlta@c^0,5,c
  9193   0016D0  EF6C  F00B         	goto	u1961
  9194   0016D4  EF70  F00B         	goto	u1960
  9195   0016D8                     u1961:
  9196   0016D8  6A4E               	clrf	??_CantaPartAlta^0,c
  9197   0016DA  2A4E               	incf	??_CantaPartAlta^0,f,c
  9198   0016DC  EF71  F00B         	goto	u1978
  9199   0016E0                     u1960:
  9200   0016E0  6A4E               	clrf	??_CantaPartAlta^0,c
  9201   0016E2                     u1978:
  9202   0016E2  3A4E               	swapf	??_CantaPartAlta^0,f,c
  9203   0016E4  464E               	rlncf	??_CantaPartAlta^0,f,c
  9204   0016E6  508A               	movf	138,w,c	;volatile
  9205   0016E8  184E               	xorwf	??_CantaPartAlta^0,w,c
  9206   0016EA  0BDF               	andlw	-33
  9207   0016EC  184E               	xorwf	??_CantaPartAlta^0,w,c
  9208   0016EE  6E8A               	movwf	138,c	;volatile
  9209                           
  9210                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  9211   0016F0  B84F               	btfsc	CantaPartAlta@c^0,4,c
  9212   0016F2  EF7D  F00B         	goto	u1981
  9213   0016F6  EF81  F00B         	goto	u1980
  9214   0016FA                     u1981:
  9215   0016FA  6A4E               	clrf	??_CantaPartAlta^0,c
  9216   0016FC  2A4E               	incf	??_CantaPartAlta^0,f,c
  9217   0016FE  EF82  F00B         	goto	u1998
  9218   001702                     u1980:
  9219   001702  6A4E               	clrf	??_CantaPartAlta^0,c
  9220   001704                     u1998:
  9221   001704  3A4E               	swapf	??_CantaPartAlta^0,f,c
  9222   001706  508A               	movf	138,w,c	;volatile
  9223   001708  184E               	xorwf	??_CantaPartAlta^0,w,c
  9224   00170A  0BEF               	andlw	-17
  9225   00170C  184E               	xorwf	??_CantaPartAlta^0,w,c
  9226   00170E  6E8A               	movwf	138,c	;volatile
  9227   001710  0012               	return		;funcret
  9228   001712                     __end_of_CantaPartAlta:
  9229                           	callstack 0
  9230                           
  9231 ;; *************** function _LowRSI *****************
  9232 ;; Defined at:
  9233 ;;		line 34 in file "main.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		None
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1
  9247 ;;      Params:         0       0       0
  9248 ;;      Locals:         0       0       0
  9249 ;;      Temps:          1       0       0
  9250 ;;      Totals:         1       0       0
  9251 ;;Total ram usage:        1 bytes
  9252 ;; Hardware stack levels used: 1
  9253 ;; Hardware stack levels required when called: 2
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		Interrupt level 1
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	intcodelo
  9262   000018                     __pintcodelo:
  9263                           	callstack 0
  9264   000018                     _LowRSI:
  9265                           	callstack 22
  9266                           
  9267                           ;incstack = 0
  9268   000018  807D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  9269   00001A  CFE0 F04D          	movff	bsr,??_LowRSI
  9270   00001E  C04D  FFE0         	movff	??_LowRSI,bsr
  9271   000022  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  9272   000024  0010               	retfie	
  9273   000026                     __end_of_LowRSI:
  9274                           	callstack 0
  9275                           
  9276 ;; *************** function _HighRSI *****************
  9277 ;; Defined at:
  9278 ;;		line 30 in file "main.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;		None
  9281 ;; Auto vars:     Size  Location     Type
  9282 ;;		None
  9283 ;; Return value:  Size  Location     Type
  9284 ;;                  1    wreg      void 
  9285 ;; Registers used:
  9286 ;;		wreg, status,2, status,0, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMRAM   BANK0   BANK1
  9292 ;;      Params:         0       0       0
  9293 ;;      Locals:         0       0       0
  9294 ;;      Temps:          0       0       0
  9295 ;;      Totals:         0       0       0
  9296 ;;Total ram usage:        0 bytes
  9297 ;; Hardware stack levels used: 1
  9298 ;; Hardware stack levels required when called: 1
  9299 ;; This function calls:
  9300 ;;		_RSI_Timer0
  9301 ;; This function is called by:
  9302 ;;		Interrupt level 2
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           	psect	intcode
  9307   000008                     __pintcode:
  9308                           	callstack 0
  9309   000008                     _HighRSI:
  9310                           	callstack 22
  9311                           
  9312                           ;incstack = 0
  9313   000008  827D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  9314   00000A  EFEE  F00E         	goto	int_func
  9315                           
  9316                           	psect	intcode_body
  9317   001DDC                     __pintcode_body:
  9318                           	callstack 22
  9319   001DDC                     int_func:
  9320                           	callstack 22
  9321   001DDC                     
  9322                           ;main.c: 32:      motor_RFID();
  9323   001DDC  A4F2               	btfss	242,2,c	;volatile
  9324   001DDE  EFF3  F00E         	goto	i2u181_41
  9325   001DE2  EFF5  F00E         	goto	i2u181_40
  9326   001DE6                     i2u181_41:
  9327   001DE6  EFF7  F00E         	goto	i2l42
  9328   001DEA                     i2u181_40:
  9329   001DEA  ECE2  F00E         	call	_RSI_Timer0	;wreg free
  9330   001DEE                     i2l42:
  9331   001DEE  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  9332   001DF0  0011               	retfie		f
  9333   001DF2                     __end_of_HighRSI:
  9334                           	callstack 0
  9335                           
  9336 ;; *************** function _RSI_Timer0 *****************
  9337 ;; Defined at:
  9338 ;;		line 25 in file "TAD_TIMER.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1
  9352 ;;      Params:         0       0       0
  9353 ;;      Locals:         0       0       0
  9354 ;;      Temps:          0       0       0
  9355 ;;      Totals:         0       0       0
  9356 ;;Total ram usage:        0 bytes
  9357 ;; Hardware stack levels used: 1
  9358 ;; This function calls:
  9359 ;;		Nothing
  9360 ;; This function is called by:
  9361 ;;		_HighRSI
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           	psect	text53
  9366   001DC4                     __ptext53:
  9367                           	callstack 0
  9368   001DC4                     _RSI_Timer0:
  9369                           	callstack 22
  9370   001DC4                     
  9371                           ;TAD_TIMER.c: 27:     TMR0=63036;
  9372   001DC4  0EF6               	movlw	246
  9373   001DC6  6ED7               	movwf	215,c	;volatile
  9374   001DC8  0E3C               	movlw	60
  9375   001DCA  6ED6               	movwf	214,c	;volatile
  9376   001DCC                     
  9377                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  9378   001DCC  94F2               	bcf	4082,2,c	;volatile
  9379   001DCE                     
  9380                           ;TAD_TIMER.c: 29:     Tics++;
  9381   001DCE  0E01               	movlw	1
  9382   001DD0  260B               	addwf	_Tics^0,f,c	;volatile
  9383   001DD2  0E00               	movlw	0
  9384   001DD4  220C               	addwfc	(_Tics+1)^0,f,c	;volatile
  9385   001DD6  220D               	addwfc	(_Tics+2)^0,f,c	;volatile
  9386   001DD8  220E               	addwfc	(_Tics+3)^0,f,c	;volatile
  9387   001DDA  0012               	return		;funcret
  9388   001DDC                     __end_of_RSI_Timer0:
  9389                           	callstack 0
  9390                           
  9391                           	psect	rparam
  9392   000001                     ___rparam_used  equ	1
  9393   000000                     ___param_bank   equ	0
  9394   000000                     __Lparam        equ	__Lrparam
  9395   000000                     __Hparam        equ	__Hrparam
  9396                           
  9397                           	psect	temp
  9398   00007D                     btemp:
  9399                           	callstack 0
  9400   00007D                     	ds	1
  9401   00007D                     int$flags       set	btemp
  9402   00007E                     wtemp8          set	btemp+1
  9403   00007E                     ttemp5          set	btemp+1
  9404   000081                     ttemp6          set	btemp+4
  9405   000085                     ttemp7          set	btemp+8
  9406                           
  9407                           	psect	idloc
  9408                           
  9409                           ;Config register IDLOC0 @ 0x200000
  9410                           ;	unspecified, using default values
  9411   200000                     	org	2097152
  9412   200000  FF                 	db	255
  9413                           
  9414                           ;Config register IDLOC1 @ 0x200001
  9415                           ;	unspecified, using default values
  9416   200001                     	org	2097153
  9417   200001  FF                 	db	255
  9418                           
  9419                           ;Config register IDLOC2 @ 0x200002
  9420                           ;	unspecified, using default values
  9421   200002                     	org	2097154
  9422   200002  FF                 	db	255
  9423                           
  9424                           ;Config register IDLOC3 @ 0x200003
  9425                           ;	unspecified, using default values
  9426   200003                     	org	2097155
  9427   200003  FF                 	db	255
  9428                           
  9429                           ;Config register IDLOC4 @ 0x200004
  9430                           ;	unspecified, using default values
  9431   200004                     	org	2097156
  9432   200004  FF                 	db	255
  9433                           
  9434                           ;Config register IDLOC5 @ 0x200005
  9435                           ;	unspecified, using default values
  9436   200005                     	org	2097157
  9437   200005  FF                 	db	255
  9438                           
  9439                           ;Config register IDLOC6 @ 0x200006
  9440                           ;	unspecified, using default values
  9441   200006                     	org	2097158
  9442   200006  FF                 	db	255
  9443                           
  9444                           ;Config register IDLOC7 @ 0x200007
  9445                           ;	unspecified, using default values
  9446   200007                     	org	2097159
  9447   200007  FF                 	db	255
  9448                           
  9449                           	psect	config
  9450                           
  9451                           ; Padding undefined space
  9452   300000                     	org	3145728
  9453   300000  FF                 	db	255
  9454                           
  9455                           ;Config register CONFIG1H @ 0x300001
  9456                           ;	Oscillator
  9457                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9458                           ;	Fail-Safe Clock Monitor Enable bit
  9459                           ;	FCMEN = 0x0, unprogrammed default
  9460                           ;	Internal/External Oscillator Switchover bit
  9461                           ;	IESO = 0x0, unprogrammed default
  9462   300001                     	org	3145729
  9463   300001  06                 	db	6
  9464                           
  9465                           ;Config register CONFIG2L @ 0x300002
  9466                           ;	Power-up Timer Enable bit
  9467                           ;	PWRT = OFF, PWRT disabled
  9468                           ;	Brown-out Reset Enable bits
  9469                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9470                           ;	Brown-out Reset Voltage bits
  9471                           ;	BORV = 0x3, unprogrammed default
  9472   300002                     	org	3145730
  9473   300002  19                 	db	25
  9474                           
  9475                           ;Config register CONFIG2H @ 0x300003
  9476                           ;	Watchdog Timer Enable bit
  9477                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9478                           ;	Watchdog Timer Postscale Select bits
  9479                           ;	WDTPS = 0xF, unprogrammed default
  9480   300003                     	org	3145731
  9481   300003  1E                 	db	30
  9482                           
  9483                           ; Padding undefined space
  9484   300004                     	org	3145732
  9485   300004  FF                 	db	255
  9486                           
  9487                           ;Config register CONFIG3H @ 0x300005
  9488                           ;	CCP2 MUX bit
  9489                           ;	CCP2MX = 0x1, unprogrammed default
  9490                           ;	PORTB A/D Enable bit
  9491                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9492                           ;	Low-Power Timer1 Oscillator Enable bit
  9493                           ;	LPT1OSC = 0x0, unprogrammed default
  9494                           ;	MCLR Pin Enable bit
  9495                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9496   300005                     	org	3145733
  9497   300005  81                 	db	129
  9498                           
  9499                           ;Config register CONFIG4L @ 0x300006
  9500                           ;	Stack Full/Underflow Reset Enable bit
  9501                           ;	STVREN = 0x1, unprogrammed default
  9502                           ;	Single-Supply ICSP Enable bit
  9503                           ;	LVP = OFF, Single-Supply ICSP disabled
  9504                           ;	Boot Block Size Select bits
  9505                           ;	BBSIZ = 0x0, unprogrammed default
  9506                           ;	Extended Instruction Set Enable bit
  9507                           ;	XINST = 0x0, unprogrammed default
  9508                           ;	Background Debugger Enable bit
  9509                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9510   300006                     	org	3145734
  9511   300006  81                 	db	129
  9512                           
  9513                           ; Padding undefined space
  9514   300007                     	org	3145735
  9515   300007  FF                 	db	255
  9516                           
  9517                           ;Config register CONFIG5L @ 0x300008
  9518                           ;	unspecified, using default values
  9519                           ;	Code Protection bit
  9520                           ;	CP0 = 0x1, unprogrammed default
  9521                           ;	Code Protection bit
  9522                           ;	CP1 = 0x1, unprogrammed default
  9523   300008                     	org	3145736
  9524   300008  03                 	db	3
  9525                           
  9526                           ;Config register CONFIG5H @ 0x300009
  9527                           ;	unspecified, using default values
  9528                           ;	Boot Block Code Protection bitProtect Boot
  9529                           ;	CPB = 0x1, unprogrammed default
  9530                           ;	Data EEPROM Code Protection bit
  9531                           ;	CPD = 0x1, unprogrammed default
  9532   300009                     	org	3145737
  9533   300009  C0                 	db	192
  9534                           
  9535                           ;Config register CONFIG6L @ 0x30000A
  9536                           ;	unspecified, using default values
  9537                           ;	Write Protection bit
  9538                           ;	WRT0 = 0x1, unprogrammed default
  9539                           ;	Write Protection bit
  9540                           ;	WRT1 = 0x1, unprogrammed default
  9541   30000A                     	org	3145738
  9542   30000A  03                 	db	3
  9543                           
  9544                           ;Config register CONFIG6H @ 0x30000B
  9545                           ;	unspecified, using default values
  9546                           ;	Configuration Register Write Protection bit
  9547                           ;	WRTC = 0x1, unprogrammed default
  9548                           ;	Boot Block Write Protection bit
  9549                           ;	WRTB = 0x1, unprogrammed default
  9550                           ;	Data EEPROM Write Protection bit
  9551                           ;	WRTD = 0x1, unprogrammed default
  9552   30000B                     	org	3145739
  9553   30000B  E0                 	db	224
  9554                           
  9555                           ;Config register CONFIG7L @ 0x30000C
  9556                           ;	unspecified, using default values
  9557                           ;	Table Read Protection bit
  9558                           ;	EBTR0 = 0x1, unprogrammed default
  9559                           ;	Table Read Protection bit
  9560                           ;	EBTR1 = 0x1, unprogrammed default
  9561   30000C                     	org	3145740
  9562   30000C  03                 	db	3
  9563                           
  9564                           ;Config register CONFIG7H @ 0x30000D
  9565                           ;	unspecified, using default values
  9566                           ;	Boot Block Table Read Protection bit
  9567                           ;	EBTRB = 0x1, unprogrammed default
  9568   30000D                     	org	3145741
  9569   30000D  40                 	db	64
  9570                           tosu	equ	0xFFF
  9571                           tosh	equ	0xFFE
  9572                           tosl	equ	0xFFD
  9573                           stkptr	equ	0xFFC
  9574                           pclatu	equ	0xFFB
  9575                           pclath	equ	0xFFA
  9576                           pcl	equ	0xFF9
  9577                           tblptru	equ	0xFF8
  9578                           tblptrh	equ	0xFF7
  9579                           tblptrl	equ	0xFF6
  9580                           tablat	equ	0xFF5
  9581                           prodh	equ	0xFF4
  9582                           prodl	equ	0xFF3
  9583                           indf0	equ	0xFEF
  9584                           postinc0	equ	0xFEE
  9585                           postdec0	equ	0xFED
  9586                           preinc0	equ	0xFEC
  9587                           plusw0	equ	0xFEB
  9588                           fsr0h	equ	0xFEA
  9589                           fsr0l	equ	0xFE9
  9590                           wreg	equ	0xFE8
  9591                           indf1	equ	0xFE7
  9592                           postinc1	equ	0xFE6
  9593                           postdec1	equ	0xFE5
  9594                           preinc1	equ	0xFE4
  9595                           plusw1	equ	0xFE3
  9596                           fsr1h	equ	0xFE2
  9597                           fsr1l	equ	0xFE1
  9598                           bsr	equ	0xFE0
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           preinc2	equ	0xFDC
  9603                           plusw2	equ	0xFDB
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8

Data Sizes:
    Strings     332
    Constant    62
    Data        107
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     35     124
    BANK0           128      0     120
    BANK1           256      0       0

Pointer List with Targets:

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[3]), STR_11(CODE[33]), STR_12(CODE[33]), STR_13(CODE[3]), 
		 -> STR_14(CODE[33]), STR_15(CODE[33]), STR_7(CODE[18]), STR_8(CODE[53]), 
		 -> STR_9(CODE[95]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    printLedConfig@leds	PTR unsigned char  size(1) Largest target is 24
		 -> configurations(BANK0[24]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[3]), STR_11(CODE[33]), STR_12(CODE[33]), STR_13(CODE[3]), 
		 -> STR_14(CODE[33]), STR_15(CODE[33]), STR_7(CODE[18]), STR_8(CODE[53]), 
		 -> STR_9(CODE[95]), NULL(NULL[0]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 22
		 -> showAllConfigurations@configStr(CODE[10]), showAllConfigurations@userStr(CODE[6]), STR_1(CODE[6]), STR_16(CODE[2]), 
		 -> STR_17(CODE[3]), STR_18(CODE[22]), STR_19(CODE[2]), STR_2(CODE[2]), 
		 -> STR_3(CODE[3]), STR_4(CODE[3]), STR_5(CODE[4]), STR_6(CODE[3]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_LEDS$F968(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_datos
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _printLedConfig->_Terminal_SendString
    _motorTerminal->_printfUID
    _showAllConfigurations->_Terminal_SendString
    _printfUID->_Terminal_SendString
    _Terminal_SendString->_Terminal_SendChar
    _Terminal_SendChar->_Terminal_TXAvailable
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_checkUserUID
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6814
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          4     4      0    1534
                                             31 COMRAM     4     4      0
                          _LcPutChar
                       _checkUserUID
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1216
                                             30 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     734
                                             22 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          11    11      0    1683
                                             18 COMRAM    11    11      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4     730
                                             13 COMRAM     5     1      4
                _Terminal_SendString
                     _printLedConfig
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _printLedConfig                                       5     4      1     250
                                              7 COMRAM     5     4      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        6     6      0    1192
                                             13 COMRAM     6     6      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
              _showAllConfigurations
 ---------------------------------------------------------------------------------
 (2) _showAllConfigurations                                2     2      0     273
                                              7 COMRAM     2     2      0
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                            6     5      1     273
                                              7 COMRAM     6     5      1
                  _Terminal_SendChar
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendString                                  2     0      2      86
                                              5 COMRAM     2     0      2
                  _Terminal_SendChar
 ---------------------------------------------------------------------------------
 (5) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _motor_StartSendString                                2     0      2      60
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (3) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (4) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (6) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         2     1      1     246
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     521
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     410
                                              6 COMRAM     1     1      0
                       _checkUserUID
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _checkUserUID                                         5     5      0     204
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     655
                                             12 COMRAM     1     1      0
                 _InitPortDirections
                           _delay_us
                         _motor_Read
                        _motor_Write
                   _resetMotorStates
 ---------------------------------------------------------------------------------
 (2) _resetMotorStates                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     888
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     163
                             _Espera
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4     163
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (5) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _InitPortDirections
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
     _resetMotorStates
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _checkUserUID
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _Terminal_SendChar
       _Terminal_SendString
         _Terminal_SendChar
     _saveHourToData
     _showAllConfigurations
       _Terminal_SendChar
       _Terminal_SendString
   _motor_RFID
     _getActualUID
     _motor_Read
     _motor_Write
     _setCurrentUser
       _Terminal_SendString
       _printLedConfig
         _Terminal_SendChar
         _Terminal_SendString
       _printfUID
   _motor_datos
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _WaitForBusy
     _checkUserUID

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     120     93.8%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     35     124     98.4%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     244      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 20 18:03:13 2025

                 ?_Terminal_ReceiveChar 004D                              _RSI_Timer0 1DC4  
              setLEDIntensity@intensity 004F                                      l81 1C38  
                                    l58 1E62                                      l91 1D2E  
                                    l94 1A44                                      l87 19F8  
                  __end_of_checkUserUID 14F8                              _TI_GetTics 19FA  
                                    bsr 0FE0                    ??_InitPortDirections 004E  
                           _state_write 004A                                     l133 1DC2  
                                   l142 1718                                     l143 1762  
                                   l312 0ECA                                     l136 1CE4  
                                   l153 0B22                                     l138 1CE6  
                                   l244 18DE                                     l148 178A  
                                   l404 02C0                                     l229 1E5A  
                                   l254 1588                                     l174 0C7C  
                                   l407 02DC                                     l360 0878  
                                   l521 10D4                                     l193 1E50  
                                   l273 0FDC                                     l282 0FB8  
                                   l259 1608                                     l620 1E28  
                                   l444 0550                                     l540 1110  
                                   l197 1CF6                                     l277 0F38  
                                   l462 064A                                     l446 0576  
                                   l542 117C                                     l199 1D0A  
                                   l623 1DAA                                     l471 06C2  
                                   l641 1C04                                     l465 0672  
                                   l561 1284                                     l626 1E04  
                                   l650 1870                                     l634 1D8A  
                                   l474 06EA                                     l635 1D8E  
                                   l387 01B2                                     l547 1180  
                                   l644 1CBC                                     l468 069A  
                                   l548 11BC                                     l820 0DB4  
                                   l573 1B94                                     l661 1E68  
                                   l629 1E6C                                     l645 1CC2  
                                   l389 01D8                                     l813 0CFE  
                                   l582 1C9C                                     l806 0CA2  
                                   l591 146A                                     l751 1580  
                                   l576 1710                                     l824 1AD4  
                                   l752 1558                                     l808 0CBA  
                                   l585 1C6A                                     l658 1D50  
                                   l818 0D86                                     l579 168C  
                                   l747 1D70                                     l835 1BCE  
                                   l771 1802                                     l691 0AF8  
                                   l588 1E18                                     l669 133A  
                                   l677 13D4                                     l783 1A8E  
                                   l856 1E36                                     l777 1B2E  
                                   l786 1482                                     l778 1B56  
                                   l787 14F6                                     u710 1418  
                                   u711 1410                                     u730 1438  
                                   u570 1CD4                                     u731 1430  
                                   u571 1CD0                                     u708 13FC  
                                   u750 145A                                     u751 1452  
                                   u728 141A                                     u690 13FA  
                                   u850 1E02                                     u691 13F2  
                                   u851 1DFC                                     u748 143A  
                                   u768 145C                                     u856 1E04  
                          printfUID@hex 1E86                        ??_CantaPartBaixa 004E  
                                   prod 0FF3                                     wreg 0FE8  
                                  l2120 1468                                    l2116 13D8  
                                  l3100 1B58                                    l2300 1E60  
                                  l2118 13E8                                    l3102 1B5E  
                                  l3110 1D74                                    l3104 1690  
                                  l3120 1C82                                    l3112 1CEA  
                                  l2160 1DF2                                    l4000 0A9A  
                                  l3106 160C                                    l3130 1C92  
                                  l3122 1C84                                    l3114 1CF8  
                                  l4010 002A                                    l3132 1C94  
                                  l3124 1C86                                    l3116 1C6E  
                                  l2164 1E6A                                    l3108 1D74  
                                  l3140 1BE4                                    l4100 0204  
                                  l4020 005E                                    l4012 002A  
                                  l3300 1C54                                    l3126 1C88  
                                  l3118 1C7C                                    l3134 1E06  
                                  l3150 1CC0                                    l3310 1804  
                                  l3142 1BE8                                    l4110 0244  
                                  l4102 0214                                    l4030 00A6  
                                  l4022 0070                                    l4014 003A  
                                  l3302 1C56                                    l3128 1C90  
                                  l2360 1D54                                    l3400 148A  
                                  l3144 1CA0                                    l3312 1808  
                                  l3136 1BD0                                    l4008 0AAA  
                                  l4200 04A6                                    l4120 0266  
                                  l4112 0248                                    l4104 0220  
                                  l4040 00D8                                    l4032 00B6  
                                  l4024 007C                                    l4016 0042  
                                  l3304 1C5E                                    l3090 19FC  
                                  l2290 1E1A                                    l2362 1D5E  
                                  l2354 1D52                                    l3250 18A4  
                                  l3410 14DA                                    l3402 14B2  
                                  l3146 1CB6                                    l3138 1BD4  
                                  l4210 04D4                                    l4202 04B6  
                                  l4130 02B0                                    l4122 0276  
                                  l4114 024E                                    l4050 00FC  
                                  l4042 00E8                                    l4034 00BC  
                                  l4026 008C                                    l4018 0054  
                                  l3306 1C60                                    l3092 1A10  
                                  l3084 1D0E                                    l2292 1E22  
                                  l2364 1D60                                    l3252 18AA  
                                  l3500 0EE8                                    l3404 14B8  
                                  l3324 1830                                    l3316 180E  
                                  l3340 1286                                    l4220 04F6  
                                  l4212 04D8                                    l4132 02C8  
                                  l4116 0252                                    l4108 0234  
                                  l4060 012C                                    l4052 0104  
                                  l4044 00EE                                    l4036 00C0  
                                  l4028 0092                                    l3308 1C62  
                                  l3260 10DC                                    l3430 19A4  
                                  l3086 1D10                                    l2294 1E24  
                                  l3254 18AC                                    l3246 1872  
                                  l3510 0F04                                    l3502 0EEE  
                                  l3414 14E0                                    l3406 14BA  
                                  l3422 1A92                                    l3326 1850  
                                  l3318 182A                                    l3334 185A  
                                  l3350 12E6                                    l3342 1292  
                                  l4310 0718                                    l4302 06C6  
                                  l4230 052E                                    l4222 0506  
                                  l4214 04E0                                    l4206 04CA  
                                  l4150 0356                                    l4142 0304  
                                  l4126 028A                                    l4118 025A  
                                  l4070 0150                                    l4062 0132  
                                  l4054 0114                                    l4046 00F2  
                                  l4038 00C8                                    l3270 1126  
                                  l3262 10EC                                    l3440 19EE  
                                  l3432 19AA                                    l3088 1D2C  
                                  l2296 1E26                                    l3256 18CC  
                                  l3248 1898                                    l3520 0F16  
                                  l3512 0F06                                    l3504 0EF6  
                                  l1920 1712                                    l3416 14E2  
                                  l3408 14CA                                    l3424 1AA2  
                                  l3096 1D90                                    l3328 1854  
                                  l3352 1302                                    l3360 133C  
                                  l3600 1A54                                    l4320 0752  
                                  l4312 0720                                    l4304 06D6  
                                  l4224 050A                                    l4216 04E4  
                                  l4208 04CE                                    l4160 040A  
                                  l4152 036C                                    l4144 030A  
                                  l4136 02E0                                    l4128 029A  
                                  l4072 0154                                    l4064 0136  
                                  l4048 00F8                                    l3272 1132  
                                  l3264 10F8                                    l2298 1E5C  
                                  l3522 0F1A                                    l3514 0F08  
                                  l1922 171E                                    l3426 1AB2  
                                  l3450 1BB4                                    l3354 130E  
                                  l3370 135E                                    l3610 1A74  
                                  l3602 1A58                                    l4330 0784  
                                  l4322 0764                                    l4314 0732  
                                  l4250 059C                                    l4242 0552  
                                  l4234 0542                                    l4226 051A  
                                  l4218 04F2                                    l4170 0448  
                                  l4162 040E                                    l4146 031A  
                                  l4138 02F0                                    l4090 01B4  
                                  l4082 019C                                    l4074 0164  
                                  l4066 013E                                    l4058 0128  
                                  l3290 11B8                                    l3274 1144  
                                  l3266 1100                                    l3282 118A  
                                  l3258 10D8                                    l3436 19C2  
                                  l3540 0F76                                    l3532 0F3A  
                                  l3516 0F12                                    l3508 0EFC  
                                  l1924 1726                                    l3428 1AC2  
                                  l3452 1BBA                                    l3444 1B98  
                                  l1916 1CC4                                    l3356 1312  
                                  l3348 129A                                    l3700 1B44  
                                  l3380 13C8                                    l3372 1380  
                                  l3612 1A80                                    l3604 1A5C  
                                  l4324 077A                                    l4316 0746  
                                  l4308 06F0                                    l4260 05C6  
                                  l4252 05A2                                    l4244 0562  
                                  l4236 0546                                    l4180 046A  
                                  l4172 044C                                    l4164 041C  
                                  l4148 032A                                    l4092 01C4  
                                  l4084 01A0                                    l4076 0178  
                                  l4068 0142                                    l3292 1C3C  
                                  l3276 1150                                    l3268 1116  
                                  l3284 11A8                                    l3620 11CC  
                                  l4340 0C7E                                    l3438 19DE  
                                  l3710 1C08                                    l3550 0FB0  
                                  l3542 0F7C                                    l3534 0F40  
                                  l3526 0F20                                    l3518 0F14  
                                  l3470 158C                                    l1926 172E  
                                  l1934 173C                                    l3382 146C  
                                  l3454 1BC8                                    l3446 1BA8  
                                  l1918 1CD4                                    l3358 132E  
                                  l3702 1B46                                    l3374 139C  
                                  l3366 1344                                    l3606 1A60  
                                  l4334 078C                                    l4326 077E  
                                  l4318 074A                                    l4270 05EC  
                                  l4262 05CA                                    l4174 0452  
                                  l4166 0434                                    l4158 0374  
                                  l4086 01A6                                    l4078 0188  
                                  l3294 1C4A                                    l3286 11AC  
                                  l3278 1162                                    l3630 1204  
                                  l3622 11DE                                    l3614 11C0  
                                  l4350 0CBE                                    l4342 0C82  
                                  l3800 1062                                    l3720 1C36  
                                  l3712 1C16                                    l3704 1C06  
                                  l3544 0F84                                    l3536 0F5C  
                                  l3560 0FBE                                    l3480 15BA  
                                  l3472 1594                                    l1936 1766  
                                  l1928 1736                                    l3392 1484  
                                  l3384 147C                                    l3456 1BCC  
                                  l3448 1BAC                                    l3376 13A8  
                                  l3368 1352                                    l3608 1A6C  
                                  l4328 0780                                    l4280 0636  
                                  l4264 05D0                                    l4256 05B2  
                                  l4248 0588                                    l4192 0498  
                                  l4176 0456                                    l4096 01EA  
                                  l4088 01AA                                    l3296 1C50  
                                  l3288 11B4                                    l3640 1248  
                                  l3624 11EE                                    l3632 1212  
                                  l3616 11C4                                    l4360 0CF6  
                                  l4352 0CCE                                    l4344 0C92  
                                  l3810 10A0                                    l3802 107A  
                                  l3714 1C18                                    l3546 0F96  
                                  l3538 0F5E                                    l3482 15CE  
                                  l3474 1598                                    l3730 0DB6  
                                  l3722 1DAC                                    l1954 1E64  
                                  l3394 1488                                    l3570 150C  
                                  l3378 13AC                                    l4290 0676  
                                  l4274 0600                                    l4266 05D4  
                                  l4194 049C                                    l4186 0474  
                                  l4178 045E                                    l4098 01FE  
                                  l4338 0862                                    l3298 1C52  
                                  l3650 127A                                    l3642 124A  
                                  l3634 1224                                    l3626 11F0  
                                  l3618 11CA                                    l4370 0D1E  
                                  l4354 0CDE                                    l4346 0CA6  
                                  l4450 1AF8                             _TI_NewTimer 19A4  
                                  l3812 10A4                                    l3804 107E  
                                  l3716 1C28                                    l1956 1E46  
                                  l3548 0FA6                                    l3484 15DE  
                                  l3476 159A                                    l3492 15E8  
                                  l3468 1584                                    l3740 0DCE  
                                  l3732 0DBE                                    l3724 1DB0  
                                  l3820 0AFA                                    l3580 1548  
                                  l3572 151C                                    l3652 1D30  
                                  l3900 087A                                    l4292 0686  
                                  l4284 064E                                    l4276 0610  
                                  l4268 05DC                                    l4188 0484  
                                  l3636 1234                                    l3644 1258  
                                  l3628 1202                                    l4380 0D3E  
                                  l4372 0D24                                    l4356 0CEA  
                                  l4348 0CB2                                    l4460 1B08  
                                  l4452 1AFC                                    l4444 1AD6  
                                  l3814 10AE                                    l3806 1088  
                                  l3718 1C34                                    l3486 15E2  
                                  l3478 15A2                                    l3494 1606  
                                  l3750 0E10                                    l3742 0DD0  
                                  l3734 0DC0                                    l3726 1DB2  
                                  l3830 0B28                                    l3822 0B04  
                                  l3590 156E                                    l3574 1524  
                                  l3566 14F8                                    l3654 1D44  
                                  l3670 17AE                                    l3910 08C8  
                                  l3902 088A                                    l4286 065E  
                                  l4278 0626                                    l3646 1268  
                                  l3638 1236                                    l4382 0D46  
                                  l4374 0D26                                    l4366 0D00  
                                  l4358 0CF0                                    l4390 0D8E  
                                  l4462 1B0C                                    l4454 1AFE  
                                  l4446 1AE2                                    l3816 10B4  
                                  l3808 108E                                    l1968 1E52  
                                  l3760 0E92                                    l3752 0E2A  
                                  l3744 0DD6                                    l3736 0DC6  
                                  l3728 1DBA                                    l3840 0B4E  
                                  l3832 0B30                                    l3824 0B14  
                                  l3592 1570                                    l3576 1530  
                                  l3656 1D4C                                    l3680 17D2  
                                  l3664 178E                                    l3920 08F2  
                                  l3912 08D4                                    l3904 089E  
                                  l4296 069E                                    l3648 1278  
                                  l4384 0D56                                    l4376 0D36  
                                  l4368 0D0E                                    l4464 1B10  
                                  l4456 1B00                                    l4448 1AE6  
                                  l3818 10B8                                    l3770 1E2E  
                                  l3498 0ECE                                    l3762 0E9A  
                                  l3754 0E44                                    l3746 0DF0  
                                  l3738 0DC8                                    l3850 0B74  
                                  l3842 0B52                                    l3834 0B40  
                                  l3826 0B1A                                    l3578 153C  
                                  l3690 1B1A                                    l3682 17D4  
                                  l3666 179A                                    l3658 178C  
                                  l3930 0926                                    l3922 08FE  
                                  l3914 08D8                                    l3906 08A4  
                                  l3594 1A48                                    l4298 06AE  
                                  l4386 0D80                                    l4378 0D3C  
                                  l4458 1B04                                    l3780 0FF4  
                                  l3772 0FE0                                    l3764 0EAC  
                                  l3756 0E5E                                    l3748 0DF6  
                                  l3852 0B78                                    l3844 0B5A  
                                  l3828 0B24                                    l3588 155A  
                                  l3684 17E4                                    l3676 17B0  
                                  l3668 17A2                                    l3940 095C  
                                  l3932 092A                                    l3924 0902  
                                  l3916 08DC                                    l3908 08B8  
                                  l3596 1A4C                                    l3790 1014  
                                  l3782 0FFA                                    l3774 0FE8  
                                  l3766 0EB0                                    l3758 0E78  
                                  l3870 0BCE                                    l3854 0B7C  
                                  l3846 0B6A                                    l3838 0B4A  
                                  l3686 17F0                                    l3678 17C6  
                                  l3950 0996                                    l3942 096C  
                                  l3934 0932                                    l3926 090A  
                                  l3918 08E2                                    l3598 1A50  
                                  l3792 101A                                    l3776 0FEC  
                                  l3768 1E2A                                    l3872 0BD4  
                                  l3856 0B82                                    l3688 17F2  
                                  l3960 09C8                                    l3952 099A  
                                  l3944 0978                                    l3936 0946  
                                  l3928 091A                                    l3794 1032  
                                  l3778 0FF0                                    l3890 0C38  
                                  l3882 0BFE                                    l3874 0BDC  
                                  l3866 0B9C                                    l3858 0B88  
                                  l3698 1B30                                    l3970 09FC  
                                  l3962 09D4                                    l3954 09A0  
                                  l3946 097C                                    l3938 094C  
                                  l3796 1044                                    l3788 1002  
                                  l3892 0C3A                                    l3884 0C20  
                                  l3876 0BE2                                    l3868 0BBC  
                                  l3964 09E0                                    l3956 09B0  
                                  l3948 098A                                    l3798 105C  
                                  l3894 0C3E                                    l3878 0BEA  
                                  l3990 0A48                                    l3982 0A24  
                                  l3966 09E4                                    l3958 09B8  
                                  l3888 0C28                                    l3992 0A4E  
                                  l3984 0A34                                    l3976 0A0C  
                                  l3968 09EC                                    l3898 0C46  
                                  l3994 0A62                                    l3986 0A40  
                                  l3978 0A1C                                    l3996 0A7E  
                                  l3988 0A44                                    l3998 0A92  
                                  STR_1 1FF3                                    STR_2 1FFD  
                                  STR_3 1FF0                                    STR_4 1F0F  
                                  STR_5 1FF9                                    STR_6 1FF0  
                                  STR_7 1FE1                                    STR_8 1F12  
                                  STR_9 1EB3                                    u1020 1D70  
                                  u1021 1D6C                                    u2000 161E  
                                  u2001 1616                                    u2020 163C  
                                  u2100 1C04                                    u2021 1634  
                                  u2101 1C00                                    u2110 1CB6  
                                  u2111 1CB2                                    u2040 165C  
                                  u3000 09C8                                    u2041 1654  
                                  u3001 09C4                                    u2018 1620  
                                  u3010 09FC                                    u3011 09F8  
                                  u2060 167E                                    u2300 182A  
                                  u3020 0A1C                                    u3100 00E8  
                                  u2061 1676                                    u2301 1826  
                                  u3021 0A18                                    u3101 00E4  
                                  _LATA 0F89                                    u2038 163E  
                                  u2230 188A                                    u2310 1850  
                                  u3030 0A34                                    u3110 0124  
                                  u2231 1882                                    u2311 184C  
                                  u3031 0A30                                    u3111 0120  
                                  _LATC 0F8B                                    u2400 14F2  
                                  u2080 1D8A                                    u2320 1302  
                                  u3040 0A62                                    u3200 02B0  
                                  u3120 0198                                    _LATD 0F8C  
                                  u2401 14EE                                    u2081 1D86  
                                  u2321 12FE                                    u3041 0A5E  
                                  u3201 02AC                                    u3121 0194  
                                  u2058 165E                                    u2090 1D0A  
                                  u2250 18CC                                    u2410 1AA2  
                                  u2330 132E                                    u3050 0A92  
                                  u3210 02D8                                    u3130 01D4  
                                  u2091 1D06                                    u2251 18C8  
                                  u2411 1A9E                                    u2331 132A  
                                  u3051 0A8E                                    u3211 02D4  
                                  u3131 01D0                                    u2500 0F52  
                                  u2420 1AB2                                    u2340 139C  
                                  u3300 0588                                    u3220 0300  
                                  u3140 01EA                                    u3060 003A  
                                  u2260 10EC                                    u2501 0F4A  
                                  u2421 1AAE                                    u2341 1398  
                                  u3301 0584                                    u3221 02FC  
                                  u3141 01E6                                    u3061 0036  
                                  u2261 10E8                                    u2078 1680  
                                  u2510 0F76                                    u2430 1AC2  
                                  u2350 13C8                                    u3310 059C  
                                  u3230 031A                                    u3150 01FE  
                                  u3070 0054                                    u2270 1126  
                                  u2511 0F72                                    u2431 1ABE  
                                  u2351 13C4                                    u3311 0598  
                                  u3231 0316                                    u3151 01FA  
                                  u3071 0050                                    u2271 1122  
                                  u2440 19BE                                    u2248 188C  
                                  u2520 0F96                                    u2360 147C  
                                  u3400 06E6                                    u3320 05C2  
                                  u3240 036C                                    u3160 0230  
                                  u3080 0070                                    u2280 1144  
                                  u2600 1224                                    u2441 19BA  
                                  u2521 0F92                                    u2361 1478  
                                  u3401 06E2                                    u3321 05BE  
                                  u3241 0368                                    u3161 022C  
                                  u3081 006C                                    u2281 1140  
                                  u2601 1220                                    u2450 19DE  
                                  u2530 0FA6                                    u2370 14B2  
                                  u3410 0714                                    u3330 05FC  
                                  u3250 0444                                    u3170 0244  
                                  u3090 008C                                    u2290 1162  
                                  u2610 1234                                    u2451 19DA  
                                  u2531 0FA2                                    u2371 14AE  
                                  u3411 070E                                    u3331 05F8  
                                  u3251 0440                                    u3171 0240  
                                  u3091 0088                                    u2291 115E  
                                  u2611 1230                                    u2700 1C28  
                                  u2508 0F54                                    u2380 14CA  
                                  u2460 1BA8                                    u2540 1508  
                                  u1900 1DA2                                    u3420 0716  
                                  u3340 0610                                    u3260 0494  
                                  u3180 0286                                    u2620 1248  
                                  u3500 0D36                                    u2701 1C24  
                                  u2381 14C6                                    u2461 1BA4  
                                  u2541 1504                                    u1901 1D9A  
                                  u3341 060C                                    u3261 0490  
                                  u3181 0282                                    u2621 1244  
                                  u3501 0D32                                    u1910 1B94  
                                  u2710 0DF0                                    u2390 14DA  
                                  u2550 151C                                    u3430 0732  
                                  u3350 0626                                    u3270 04C6  
                                  u3190 029A                                    u2630 1268  
                                  u3510 0D56                                    u1911 1B90  
                                  u2711 0DEC                                    u2391 14D6  
                                  u2551 1518                                    u3431 072E  
                                  u3351 0622                                    u3271 04C2  
                                  u3191 0296                                    u2631 1264  
                                  u3511 0D52                                    u1920 16A2  
                                  u2800 10D4                                    u2480 15DE  
                                  u2720 0E10                                    u2560 1580  
                                  u3440 0742                                    u3360 0646  
                                  u3280 053E                                    u2640 1278  
                                  u1921 169A                                    u2801 10D0  
                                  u2481 15DA                                    u2721 0E0C  
                                  u2561 157C                                    u3441 073E  
                                  u3361 0642                                    u3281 053A  
                                  u2641 1274                                    u2490 0EE8  
                                  u2730 0E2A                                    u2810 0B14  
                                  u2650 1D44                                    u3450 0764  
                                  u3370 066E                                    u3290 0572  
                                  u2570 11DE                                    u2491 0EE4  
                                  u2731 0E26                                    u2811 0B10  
                                  u2651 1D40                                    u3451 0760  
                                  u3371 066A                                    u3291 056E  
                                  u2571 11DA                                    u1940 16C0  
                                  u2740 0E44                                    u2820 0B40  
                                  u1908 1DA4                                    u2660 17E4  
                                  u2900 088A                                    u3380 0696  
                                  u2580 11EE                                    u3460 0C92  
                                  u1941 16B8                                    u2741 0E40  
                                  u2821 0B3C                                    u2661 17E0  
                                  u2901 0886                                    u3381 0692  
                                  u2581 11EA                                    u3461 0C8E  
                                  u2750 0E5E                                    u2830 0B6A  
                                  u2670 1802                                    u2910 089E  
                                  u3390 06BE                                    u2590 1202  
                                  u3470 0CA2                                    u2751 0E5A  
                                  u2831 0B66                                    u2671 17FE  
                                  u2911 089A                                    u3391 06BA  
                                  u2591 11FE                                    u3471 0C9E  
                                  u1960 16E0                                    u2760 0E78  
                                  u2840 0B98                                    u2680 1B2A  
                                  u2920 08B8                                    u3480 0CCE  
                                  u1961 16D8                                    u2761 0E74  
                                  u2841 0B94                                    u2681 1B26  
                                  u2921 08B4                                    u3481 0CCA  
                                  u1938 16A4                                    u2770 0E92  
                                  u2850 0BBC                                    u2690 1B56  
                                  u2930 08C8                                    u3490 0D1E  
                                  u2771 0E8E                                    u2851 0BB8  
                                  u2691 1B52                                    u2931 08C4  
                                  u3491 0D1A                                    u1980 1702  
                                  u2780 0EAC                                    u2860 0BCE  
                                  u2940 08F2                                    u1981 16FA  
                                  u2781 0EA8                                    u2861 0BCA  
                                  u2941 08EE                                    u1958 16C2  
                                  u2790 0ECA                                    u2870 0BFA  
                                  u2950 091A                                    u2791 0EC6  
                                  u2871 0BF6                                    u2951 0916  
                                  u2880 0C20                                    u2960 0946  
                                  u2881 0C1C                                    u2961 0942  
                                  u1978 16E2                                    u2890 0C38  
                                  u2970 095C                                    u2891 0C34  
                                  u2971 0958                                    u2980 096C  
                                  u2981 0968                                    u1998 1704  
                                  u2990 09B0                                    i1l47 001E  
                                  u2991 09AC                                    i2l42 1DEE  
                                  i2l76 1DDA                                    _TMR0 0FD6  
              setLEDIntensity@userIndex 0050                              _ActualLeds 00F2  
                                  _Tics 000B                   _showAllConfigurations 178C  
                                  _Rows 0027                        motor_datos@state 001C  
                                  _main 1AD6                                    fsr1h 0FE2  
                                  fsr2h 0FDA                                    indf1 0FE7  
                                  indf2 0FDF                                    fsr1l 0FE1  
                                  fsr2l 0FD9                                    btemp 007D  
                       __end_of_TI_Init 1C3A                                    prodh 0FF4  
                                  prodl 0FF3                                    start 0026  
                       __end_of_CantaIR 1C9E                       ?_resetMotorStates 004D  
                       __end_of_HighRSI 1DF2                           LcInit@columns 0063  
                    setCurrentUser@UID0 005E                      setCurrentUser@UID1 005A  
                    setCurrentUser@UID2 005B                      setCurrentUser@UID3 005C  
                    setCurrentUser@UID4 005D                            ___param_bank 0000  
                    ??_resetMotorStates 004E                         printLedConfig@i 0057  
                          ?_initTeclado 004D                           processBit@val 0050  
                           Espera@Timer 005B                                   ?_main 004D  
                                 STR_10 1FF0                                   STR_11 1F68  
                                 STR_12 1F47                                   STR_13 1FF0  
                                 STR_14 1FAA                                   STR_15 1F89  
                                 STR_16 1FFB                                   STR_17 1FF0  
                                 STR_18 1FCB                                   STR_19 1FDF  
                                 _T0CON 0FD5                                   _RCREG 0FAE  
                                 _RCSTA 0FAB                                   _SPBRG 0FAF  
                                 _PORTD 0F83                                   _TRISA 0F92  
                                 _TRISD 0F95                                   _TRISE 0F96  
                                 _TXREG 0FAD                                   _TXSTA 0FAC  
                  __end_of_getActualUID 1582                                   _Filas 003D  
                                 _Timer 0044                         motor_RFID@irqEn 0036  
                                 _index 000F                         motor_RFID@unLen 0013  
                          _TI_ResetTics 1D0C                                   _tecla 003B  
                       motor_RFID@value 0028                         motor_RFID@state 0038  
                                 _timer 004C                                   _state 003A  
                       setLed@userIndex 0017                     motor_Read@bit_count 0046  
                                 tablat 0FF5                                   ttemp5 007E  
                                 ttemp6 0081                                   ttemp7 0085  
                        _saveHourToData 1B1A                                   status 0FD8  
                                 wtemp8 007E                      Terminal_SendChar@c 0051  
                      __end_of_LcGotoXY 11BE                        ??_printLedConfig 0055  
                      __end_of_GetTecla 178C                 EscriuPrimeraOrdre@ordre 004F  
                ??_Terminal_ReceiveChar 004E                         __initialization 18E0  
                          __end_of_main 1B1A                          _setCurrentUser 1A46  
                           ?_RSI_Timer0 004D                          TI_Init@counter 004E  
                           ?_TI_GetTics 004E                   _motor_StartSendString 1D30  
                                ??_main 0070                           __activetblptr 0002  
                                _ADCON1 0FC1                               ??_TI_Init 004E  
                ?_showAllConfigurations 004D                  __end_of_saveHourToData 1B58  
                             ??_CantaIR 0050                  Terminal_SendString@str 0052  
                                i2l2220 1DC4                                  i2l2222 1DCC  
                                i2l2224 1DCE                                  i2l2990 1DDC  
                                i2l2992 1DEA                          LcGotoXY@Fisics 0068  
                        LcGotoXY@Column 006A                           ??_WaitForBusy 0063  
                                _TMR0IF 7F92                               ??_HighRSI 004D  
                     checkUserUID@match 0050                                  _LcInit 0FDE  
                      __end_of_delay_us 1D0C                                  _Espera 1B58  
                                _LowRSI 0018                  __end_of_setCurrentUser 1A90  
                          _LcGotoXY$754 0066                                  _RowAct 0025  
                                _Timers 00DE                      motor_datos@pointer 001B  
                      __end_of_initRFID 0ECC                      motorTerminal@index 001F  
                      __end_of_initData 1D72                        __end_of_initLeds 1E38  
                       _motor_datos$948 006D                      motorTerminal@state 0021  
                                _keymap 1E97                                  clear_0 1926  
                                clear_1 1932                                  _setLed 1B96  
                          ?_motor_Write 0055                                  isa$std 0001  
                          ?_motor_datos 004D                            __pdataCOMRAM 0070  
                          __mediumconst 1E74                         _setLEDIntensity 1A90  
                                tblptrh 0FF7                                  tblptrl 0FF6  
                                tblptru 0FF8                       __end_of_CantaData 1C6C  
                 __end_of_Terminal_Init 1E2A                  motor_RFID@differentUID 0061  
                       ?_saveHourToData 004E                            _checkUserUID 146C  
                            __accesstop 0080                 __end_of__initialization 1938  
                     __end_of_LcPutChar 1286                         delay_us@howMany 004E  
                         ___rparam_used 0001                           checkUserUID@i 0051  
                         checkUserUID@j 0052                           setLed@modeLED 0019  
                       ?_setCurrentUser 005A                          __pcstackCOMRAM 004D  
                   __end_of_WaitForBusy 1E1A                            __pidataBANK0 1946  
                ?_motor_StartSendString 0052                    TI_NewTimer@Comptador 0050  
           motor_RFID@operation_pending 002A                        _motor_SendString 1804  
                   processBit@bit_count 0051                       printLedConfig@hex 1E75  
                             ?_LcGotoXY 0063                               ?_GetTecla 004D  
                          ?_TI_NewTimer 004E                              __pbssBANK0 00DE  
                           setLed@tecla 0053                   __end_of_motorTerminal 0AFA  
                               ?_LcInit 0063                           _CantaPartAlta 168E  
                TI_NewTimer@TimerHandle 004E                                 ?_Espera 005B  
                               ?_LowRSI 004D                            _getActualUID 14F8  
                       processBit@state 0052                     _timer@TAD_LEDS$F968 0043  
               TI_ResetTics@TimerHandle 004E                           _writeColumnas 1CC4  
                               _BAUDCON 0FB8                                 ?_setLed 004D  
               __end_of_setLEDIntensity 1AD6               __end_ofprintLedConfig@hex 1E86  
                       motor_SendChar@c 0051                                 LcInit@i 0065  
                            ??_LcGotoXY 0064                               ?_delay_us 004D  
                       getActualUID@UID 004E                              ??_GetTecla 004E  
                     _Terminal_SendChar 1D72                                 _TI_Init 1C06  
                    ?_Terminal_SendChar 004D                                 _CantaIR 1C6C  
                             ?_initRFID 004D                               ?_initData 004D  
                             ?_initLeds 004D                                 _HighRSI 0008  
                           _WaitForBusy 1E06                          ?_CantaPartAlta 004D  
                               _Columns 0026                     motor_datos@lastChar 001A  
                     motor_RFID@TagType 0031                     ??_Terminal_SendChar 0051  
                               __Hparam 0000                                 __Lparam 0000  
                          ??_RSI_Timer0 004D                          ?_writeColumnas 004D  
                          ??_TI_GetTics 0052                       motor_RFID@allZero 002F  
                               __pcinit 18E0                                 __ramtop 0200  
                     motor_RFID@_status 0032                                 __ptext0 1AD6  
                               __ptext1 0C7E                                 __ptext2 11BE  
                               __ptext3 10D6                                 __ptext4 1C3A  
                               __ptext5 002A                                 __ptext6 1A46  
                               __ptext7 133C                                 __ptext8 087A  
                               __ptext9 178C                           ?_motorTeclado 004D  
                   motorTerminal@opcion 005F                               CantaIR@IR 0050  
                     __end_of_initPorts 1E64               __end_of_Terminal_SendChar 1D90  
                     motor_RFID@waitIRq 0035                motorTerminal@currentUser 005A  
                            ??_delay_us 004E                 ??_showAllConfigurations 0054  
                               _str_ptr 0011                          __pintcode_body 1DDC  
                  end_of_initialization 1938                             motor_RFID@i 0033  
                           motor_RFID@n 0034                              ??_initRFID 0059  
                            ??_initData 004E                      __end_of_RSI_Timer0 1DDC  
                            ??_initLeds 0051                           __Lmediumconst 1E74  
                               int_func 1DDC                      __end_of_TI_GetTics 1A46  
                    saveHourToData@hour 004E    __end_ofshowAllConfigurations@userStr 1EB3  
          showAllConfigurations@userStr 1EAD                         motor_Write@addr 0056  
                     __end_of_printfUID 133C                              _motor_RFID 002A  
                               postdec1 0FE5                              _motor_Read 0ECC  
                               postinc0 0FEE                                 postinc1 0FE6  
                               postinc2 0FDE                  showAllConfigurations@i 0055  
                showAllConfigurations@j 0054                        ?_setLEDIntensity 004E  
                        ??_motorTeclado 005B                               _PORTCbits 0F82  
                            _processBit 1872                     _Terminal_SendString 1BD0  
                 TI_GetTics@TimerHandle 005A                          _motor_RFID$589 0067  
                      ??_saveHourToData 004F                               _TRISBbits 0F93  
                             _TRISCbits 0F94                               _TRISEbits 0F96  
                            _state_read 004B                          setLed@ledIndex 0018  
                       ??_CantaPartAlta 004E  __end_ofshowAllConfigurations@configStr 1EAD  
        showAllConfigurations@configStr 1EA3                        ??_setCurrentUser 005E  
                             _CantaData 1C3A                motor_StartSendString@str 0052  
              __end_of_motor_SendString 1872                    ?_Terminal_SendString 0052  
                        __end_of_LcInit 10D6                 ??_motor_StartSendString 0054  
                       ??_writeColumnas 004E                               _LcPutChar 11BE  
                        __end_of_Espera 1B96                          __end_of_LowRSI 0026  
          __end_of_Terminal_RXAvailable 1E06              __end_of_EscriuPrimeraOrdre 146C  
                         __pidataCOMRAM 1E38               motor_Read@timeout_counter 0015  
                        _motor_Read$558 0057                          motor_RFID@addr 0029  
                        motor_RFID@flag 0069                               _ColumnAct 0024  
                        __end_of_keymap 1EA3                          __end_of_setLed 1BD0  
                       saveHourToData@i 004F                        _resetMotorStates 1E52  
                   start_initialization 18E0                          _motor_SendChar 1C9E  
                    motor_Read@ucResult 0039            __end_of_Terminal_TXAvailable 1DAC  
                 motor_Read@MAX_TIMEOUT 0077                              ?_CantaData 004D  
                 ??_Terminal_SendString 0054                                ??_LcInit 0064  
                    printLedConfig@leds 0054                           getActualUID@i 004F  
                              ??_Espera 005F                                ??_LowRSI 004D  
                            ?_LcPutChar 004D                             ?_motor_RFID 004D  
                     motorTerminal@hour 0079                             ?_motor_Read 004D  
                         ??_initTeclado 0051                             __pdataBANK0 0080  
                              ??_setLed 0053                             ?_processBit 0050  
                __end_of_motor_SendChar 1CC4                             __pbssCOMRAM 0001  
                         ?_TI_ResetTics 004D                        motor_Read@ucAddr 0045  
                              ?_TI_Init 004D                                ?_CantaIR 004D  
                        _CantaPartBaixa 160A                                ?_HighRSI 004D  
                          ?_WaitForBusy 004D                    __end_of_motorTeclado 0C7E  
                        motor_Read@addr 0056                     motor_RFID@fifoLevel 002C  
                             __pintcode 0008                           __pmediumconst 1E74  
                             _colValues 0074              __end_of_InitPortDirections 1E52  
                       CantaPartBaixa@c 004F                             __pintcodelo 0018  
                    motor_Write@ucValue 0047                             __smallconst 1E74  
                   __end_of_initTeclado 1DC4                         ?_motor_SendChar 004D  
                        ??_TI_ResetTics 004E                    processBit@next_state 0053  
                             _initPorts 1E5C           __end_of_showAllConfigurations 1804  
                __end_of_CantaPartBaixa 168E                           _Terminal_Init 1E1A  
                  _Terminal_RXAvailable 1DF2             motorTerminal@sending_string 0020  
                    motor_LEDs@lastTics 0007                             ??_CantaData 0050  
                              _LATBbits 0F8A                                _LATCbits 0F8B  
                              _LATEbits 0F8D                               delay_us@x 004F  
                  motor_Write@bit_count 0049                         _hashtag_pressed 0022  
                              i2u181_40 1DEA                                i2u181_41 1DE6  
                              _PIR1bits 0F9E                             ??_LcPutChar 006B  
                 motor_RFID@lastBitsVal 002D                               _printfUID 1286  
                         ??_motor_Write 0056                    _Terminal_TXAvailable 1D90  
                          GetTecla@fila 0051                          _printLedConfig 133C  
                         ??_motor_datos 006C                               _state_str 0023  
                            printfUID@i 0058                  motor_RFID@tempRegValue 002E  
                              Espera@ms 005D                                _LcGotoXY 10D6  
                              _GetTecla 1712            __end_of_Terminal_ReceiveChar 1E6E  
                            ?_initPorts 004D                           motor_RFID@UID 0001  
                        ?_Terminal_Init 004D                             LcGotoXY@Row 0063  
                             copy_data0 18F4                               copy_data1 1914  
                       ?_CantaPartBaixa 004D                                _Columnas 003C  
                 ?_Terminal_RXAvailable 004D                           ?_checkUserUID 004D  
                 motor_RFID@currentUser 0062                               initData@i 004E  
                         _motorTerminal 087A                __end_of_resetMotorStates 1E5C  
                  __end_ofprintfUID@hex 1E97                       ?_motor_SendString 004D  
                              __Hrparam 0000                                __Lrparam 0000  
                    ??_motor_SendString 0052                  __end_of_printLedConfig 13D6  
         __end_of_motor_StartSendString 1D52                              ?_printfUID 0054  
                           _initTeclado 1DAC                   ?_Terminal_TXAvailable 004E  
                    motor_RFID@checksum 0030                             _currentTime 0070  
                           _currentUser 003E                     __end_of_motor_Write 160A  
                              _delay_us 1CE8                     __end_of_motor_datos 0DB6  
                              __ptext10 1B1A                                __ptext11 1286  
                    _EscriuPrimeraOrdre 13D6                                __ptext20 1DF2  
                              __ptext12 1BD0                                __ptext21 0AFA  
                              __ptext13 1D72                                __ptext30 1E52  
                              __ptext22 1CC4                                __ptext14 1D30  
                              __ptext31 1582                                __ptext23 1B96  
                              __ptext15 1804                                __ptext40 1C06  
                              __ptext32 0ECC                                __ptext24 1A90  
                              __ptext16 1C9E                                __ptext41 0FDE  
                              __ptext33 1872                                __ptext25 146C  
                              __ptext17 1D90                                __ptext50 168E  
                              __ptext42 1E06                                __ptext34 1CE8  
                              __ptext26 1E64                                __ptext18 14F8  
                              __ptext43 1B58                                __ptext35 1E46  
                              __ptext27 1712                                __ptext19 1E6A  
                              __ptext44 1D0C                                __ptext36 1E5C  
                              __ptext28 1DAC                                __ptext53 1DC4  
                              __ptext45 19FA                                __ptext37 1E2A  
                              __ptext29 0DB6                                __ptext46 19A4  
                              __ptext38 1D52                                __ptext47 13D6  
                              __ptext39 1E1A                                __ptext48 1C6C  
                              __ptext49 160A                           ??_TI_NewTimer 004F  
                        CantaPartAlta@c 004F                       motor_Write@ucAddr 0048  
                        ??_checkUserUID 004E                                _initRFID 0DB6  
                              _initData 1D52                                _initLeds 1E2A  
                   ?_EscriuPrimeraOrdre 004D                          ?_motorTerminal 004D  
                 __end_of_CantaPartAlta 1712                           CantaData@Data 0050  
                              _new_user 001D                           ?_getActualUID 004E  
                          ??_motor_RFID 005F                                isa$xinst 0000  
                          ??_motor_Read 0055                    __end_of_TI_ResetTics 1D30  
                              int$flags 007D                   __end_of_writeColumnas 1CE8  
                    motor_RFID@substate 0037                         ?_printLedConfig 0054  
                              _userUIDs 0080                       controlLED@ledBits 00C0  
                  ??_EscriuPrimeraOrdre 004E                              LcInit@rows 0064  
                          ??_processBit 0054                            _motorTeclado 0AFA  
                            _INTCONbits 0FF2                         ??_Terminal_Init 004E  
             TI_GetTics@CopiaTicsActual 0056                       _new_configuration 001E  
                           ??_initPorts 004E                  ??_Terminal_RXAvailable 004E  
                        _configurations 00C6                       _hashtag_pressed3s 1E64  
           __end_of_Terminal_SendString 1C06                      __end_of_motor_RFID 087A  
                              intlevel1 0000                                intlevel2 0000  
                    __end_of_motor_Read 0FDE                      ?_hashtag_pressed3s 004D  
                            LcPutChar@c 006B                        motor_Write@value 0055  
                   __end_of_TI_NewTimer 19FA                          ??_getActualUID 004F  
                    __end_of_processBit 18E0                     ??_hashtag_pressed3s 004E  
                ??_Terminal_TXAvailable 0050                            motor_datos@i 006F  
                  _Terminal_ReceiveChar 1E6A                             ??_printfUID 0055  
                      ??_motor_SendChar 0051                             _motor_Write 1582  
                           _motor_datos 0C7E                  motor_RFID@backBitsCalc 002B  
             __end_of_hashtag_pressed3s 1E6A                      _InitPortDirections 1E46  
                       ??_motorTerminal 005A                     ?_InitPortDirections 004D  
               setLEDIntensity@ledIndex 004E                    printfUID@currentUser 0054  
                        initRFID@regVal 0059                       ??_setLEDIntensity 0050  
                       GetTecla@columna 0050  



Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Mar 06 01:45:08 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    52   000000                     
    53                           ; Generated 05/12/2024 GMT
    54                           ; 
    55                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4321 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87   000FE0                     bsr             equ	4064
    88   000FE9                     fsr0            equ	4073
    89   000FEA                     fsr0h           equ	4074
    90   000FE9                     fsr0l           equ	4073
    91   000FE1                     fsr1            equ	4065
    92   000FE2                     fsr1h           equ	4066
    93   000FE1                     fsr1l           equ	4065
    94   000FD9                     fsr2            equ	4057
    95   000FDA                     fsr2h           equ	4058
    96   000FD9                     fsr2l           equ	4057
    97   000FEF                     indf0           equ	4079
    98   000FE7                     indf1           equ	4071
    99   000FDF                     indf2           equ	4063
   100   000FF2                     intcon          equ	4082
   101   000000                     nvmcon          equ	0
   102   000FF9                     pcl             equ	4089
   103   000FFA                     pclath          equ	4090
   104   000FFB                     pclatu          equ	4091
   105   000FEB                     plusw0          equ	4075
   106   000FE3                     plusw1          equ	4067
   107   000FDB                     plusw2          equ	4059
   108   000FED                     postdec0        equ	4077
   109   000FE5                     postdec1        equ	4069
   110   000FDD                     postdec2        equ	4061
   111   000FEE                     postinc0        equ	4078
   112   000FE6                     postinc1        equ	4070
   113   000FDE                     postinc2        equ	4062
   114   000FEC                     preinc0         equ	4076
   115   000FE4                     preinc1         equ	4068
   116   000FDC                     preinc2         equ	4060
   117   000FF3                     prod            equ	4083
   118   000FF4                     prodh           equ	4084
   119   000FF3                     prodl           equ	4083
   120   000FD8                     status          equ	4056
   121   000FF5                     tablat          equ	4085
   122   000FF6                     tblptr          equ	4086
   123   000FF7                     tblptrh         equ	4087
   124   000FF6                     tblptrl         equ	4086
   125   000FF8                     tblptru         equ	4088
   126   000FFD                     tosl            equ	4093
   127   000FE8                     wreg            equ	4072
   128   000F80                     PORTA           equ	3968	;# 
   129   000F81                     PORTB           equ	3969	;# 
   130   000F82                     PORTC           equ	3970	;# 
   131   000F83                     PORTD           equ	3971	;# 
   132   000F84                     PORTE           equ	3972	;# 
   133   000F89                     LATA            equ	3977	;# 
   134   000F8A                     LATB            equ	3978	;# 
   135   000F8B                     LATC            equ	3979	;# 
   136   000F8C                     LATD            equ	3980	;# 
   137   000F8D                     LATE            equ	3981	;# 
   138   000F92                     TRISA           equ	3986	;# 
   139   000F92                     DDRA            equ	3986	;# 
   140   000F93                     TRISB           equ	3987	;# 
   141   000F93                     DDRB            equ	3987	;# 
   142   000F94                     TRISC           equ	3988	;# 
   143   000F94                     DDRC            equ	3988	;# 
   144   000F95                     TRISD           equ	3989	;# 
   145   000F95                     DDRD            equ	3989	;# 
   146   000F96                     TRISE           equ	3990	;# 
   147   000F96                     DDRE            equ	3990	;# 
   148   000F9B                     OSCTUNE         equ	3995	;# 
   149   000F9D                     PIE1            equ	3997	;# 
   150   000F9E                     PIR1            equ	3998	;# 
   151   000F9F                     IPR1            equ	3999	;# 
   152   000FA0                     PIE2            equ	4000	;# 
   153   000FA1                     PIR2            equ	4001	;# 
   154   000FA2                     IPR2            equ	4002	;# 
   155   000FA6                     EECON1          equ	4006	;# 
   156   000FA7                     EECON2          equ	4007	;# 
   157   000FA8                     EEDATA          equ	4008	;# 
   158   000FA9                     EEADR           equ	4009	;# 
   159   000FAB                     RCSTA           equ	4011	;# 
   160   000FAB                     RCSTA1          equ	4011	;# 
   161   000FAC                     TXSTA           equ	4012	;# 
   162   000FAC                     TXSTA1          equ	4012	;# 
   163   000FAD                     TXREG           equ	4013	;# 
   164   000FAD                     TXREG1          equ	4013	;# 
   165   000FAE                     RCREG           equ	4014	;# 
   166   000FAE                     RCREG1          equ	4014	;# 
   167   000FAF                     SPBRG           equ	4015	;# 
   168   000FAF                     SPBRG1          equ	4015	;# 
   169   000FB0                     SPBRGH          equ	4016	;# 
   170   000FB1                     T3CON           equ	4017	;# 
   171   000FB2                     TMR3            equ	4018	;# 
   172   000FB2                     TMR3L           equ	4018	;# 
   173   000FB3                     TMR3H           equ	4019	;# 
   174   000FB4                     CMCON           equ	4020	;# 
   175   000FB5                     CVRCON          equ	4021	;# 
   176   000FB6                     ECCP1AS         equ	4022	;# 
   177   000FB7                     ECCP1DEL        equ	4023	;# 
   178   000FB7                     PWM1CON         equ	4023	;# 
   179   000FB8                     BAUDCON         equ	4024	;# 
   180   000FB8                     BAUDCTL         equ	4024	;# 
   181   000FBA                     CCP2CON         equ	4026	;# 
   182   000FBB                     CCPR2           equ	4027	;# 
   183   000FBB                     CCPR2L          equ	4027	;# 
   184   000FBC                     CCPR2H          equ	4028	;# 
   185   000FBD                     CCP1CON         equ	4029	;# 
   186   000FBD                     ECCP1CON        equ	4029	;# 
   187   000FBE                     CCPR1           equ	4030	;# 
   188   000FBE                     CCPR1L          equ	4030	;# 
   189   000FBF                     CCPR1H          equ	4031	;# 
   190   000FC0                     ADCON2          equ	4032	;# 
   191   000FC1                     ADCON1          equ	4033	;# 
   192   000FC2                     ADCON0          equ	4034	;# 
   193   000FC3                     ADRES           equ	4035	;# 
   194   000FC3                     ADRESL          equ	4035	;# 
   195   000FC4                     ADRESH          equ	4036	;# 
   196   000FC5                     SSPCON2         equ	4037	;# 
   197   000FC6                     SSPCON1         equ	4038	;# 
   198   000FC7                     SSPSTAT         equ	4039	;# 
   199   000FC8                     SSPADD          equ	4040	;# 
   200   000FC9                     SSPBUF          equ	4041	;# 
   201   000FCA                     T2CON           equ	4042	;# 
   202   000FCB                     PR2             equ	4043	;# 
   203   000FCB                     MEMCON          equ	4043	;# 
   204   000FCC                     TMR2            equ	4044	;# 
   205   000FCD                     T1CON           equ	4045	;# 
   206   000FCE                     TMR1            equ	4046	;# 
   207   000FCE                     TMR1L           equ	4046	;# 
   208   000FCF                     TMR1H           equ	4047	;# 
   209   000FD0                     RCON            equ	4048	;# 
   210   000FD1                     WDTCON          equ	4049	;# 
   211   000FD2                     HLVDCON         equ	4050	;# 
   212   000FD2                     LVDCON          equ	4050	;# 
   213   000FD3                     OSCCON          equ	4051	;# 
   214   000FD5                     T0CON           equ	4053	;# 
   215   000FD6                     TMR0            equ	4054	;# 
   216   000FD6                     TMR0L           equ	4054	;# 
   217   000FD7                     TMR0H           equ	4055	;# 
   218   000FD8                     STATUS          equ	4056	;# 
   219   000FD9                     FSR2            equ	4057	;# 
   220   000FD9                     FSR2L           equ	4057	;# 
   221   000FDA                     FSR2H           equ	4058	;# 
   222   000FDB                     PLUSW2          equ	4059	;# 
   223   000FDC                     PREINC2         equ	4060	;# 
   224   000FDD                     POSTDEC2        equ	4061	;# 
   225   000FDE                     POSTINC2        equ	4062	;# 
   226   000FDF                     INDF2           equ	4063	;# 
   227   000FE0                     BSR             equ	4064	;# 
   228   000FE1                     FSR1            equ	4065	;# 
   229   000FE1                     FSR1L           equ	4065	;# 
   230   000FE2                     FSR1H           equ	4066	;# 
   231   000FE3                     PLUSW1          equ	4067	;# 
   232   000FE4                     PREINC1         equ	4068	;# 
   233   000FE5                     POSTDEC1        equ	4069	;# 
   234   000FE6                     POSTINC1        equ	4070	;# 
   235   000FE7                     INDF1           equ	4071	;# 
   236   000FE8                     WREG            equ	4072	;# 
   237   000FE9                     FSR0            equ	4073	;# 
   238   000FE9                     FSR0L           equ	4073	;# 
   239   000FEA                     FSR0H           equ	4074	;# 
   240   000FEB                     PLUSW0          equ	4075	;# 
   241   000FEC                     PREINC0         equ	4076	;# 
   242   000FED                     POSTDEC0        equ	4077	;# 
   243   000FEE                     POSTINC0        equ	4078	;# 
   244   000FEF                     INDF0           equ	4079	;# 
   245   000FF0                     INTCON3         equ	4080	;# 
   246   000FF1                     INTCON2         equ	4081	;# 
   247   000FF2                     INTCON          equ	4082	;# 
   248   000FF3                     PROD            equ	4083	;# 
   249   000FF3                     PRODL           equ	4083	;# 
   250   000FF4                     PRODH           equ	4084	;# 
   251   000FF5                     TABLAT          equ	4085	;# 
   252   000FF6                     TBLPTR          equ	4086	;# 
   253   000FF6                     TBLPTRL         equ	4086	;# 
   254   000FF7                     TBLPTRH         equ	4087	;# 
   255   000FF8                     TBLPTRU         equ	4088	;# 
   256   000FF9                     PCLAT           equ	4089	;# 
   257   000FF9                     PC              equ	4089	;# 
   258   000FF9                     PCL             equ	4089	;# 
   259   000FFA                     PCLATH          equ	4090	;# 
   260   000FFB                     PCLATU          equ	4091	;# 
   261   000FFC                     STKPTR          equ	4092	;# 
   262   000FFD                     TOS             equ	4093	;# 
   263   000FFD                     TOSL            equ	4093	;# 
   264   000FFE                     TOSH            equ	4094	;# 
   265   000FFF                     TOSU            equ	4095	;# 
   266   000F80                     PORTA           equ	3968	;# 
   267   000F81                     PORTB           equ	3969	;# 
   268   000F82                     PORTC           equ	3970	;# 
   269   000F83                     PORTD           equ	3971	;# 
   270   000F84                     PORTE           equ	3972	;# 
   271   000F89                     LATA            equ	3977	;# 
   272   000F8A                     LATB            equ	3978	;# 
   273   000F8B                     LATC            equ	3979	;# 
   274   000F8C                     LATD            equ	3980	;# 
   275   000F8D                     LATE            equ	3981	;# 
   276   000F92                     TRISA           equ	3986	;# 
   277   000F92                     DDRA            equ	3986	;# 
   278   000F93                     TRISB           equ	3987	;# 
   279   000F93                     DDRB            equ	3987	;# 
   280   000F94                     TRISC           equ	3988	;# 
   281   000F94                     DDRC            equ	3988	;# 
   282   000F95                     TRISD           equ	3989	;# 
   283   000F95                     DDRD            equ	3989	;# 
   284   000F96                     TRISE           equ	3990	;# 
   285   000F96                     DDRE            equ	3990	;# 
   286   000F9B                     OSCTUNE         equ	3995	;# 
   287   000F9D                     PIE1            equ	3997	;# 
   288   000F9E                     PIR1            equ	3998	;# 
   289   000F9F                     IPR1            equ	3999	;# 
   290   000FA0                     PIE2            equ	4000	;# 
   291   000FA1                     PIR2            equ	4001	;# 
   292   000FA2                     IPR2            equ	4002	;# 
   293   000FA6                     EECON1          equ	4006	;# 
   294   000FA7                     EECON2          equ	4007	;# 
   295   000FA8                     EEDATA          equ	4008	;# 
   296   000FA9                     EEADR           equ	4009	;# 
   297   000FAB                     RCSTA           equ	4011	;# 
   298   000FAB                     RCSTA1          equ	4011	;# 
   299   000FAC                     TXSTA           equ	4012	;# 
   300   000FAC                     TXSTA1          equ	4012	;# 
   301   000FAD                     TXREG           equ	4013	;# 
   302   000FAD                     TXREG1          equ	4013	;# 
   303   000FAE                     RCREG           equ	4014	;# 
   304   000FAE                     RCREG1          equ	4014	;# 
   305   000FAF                     SPBRG           equ	4015	;# 
   306   000FAF                     SPBRG1          equ	4015	;# 
   307   000FB0                     SPBRGH          equ	4016	;# 
   308   000FB1                     T3CON           equ	4017	;# 
   309   000FB2                     TMR3            equ	4018	;# 
   310   000FB2                     TMR3L           equ	4018	;# 
   311   000FB3                     TMR3H           equ	4019	;# 
   312   000FB4                     CMCON           equ	4020	;# 
   313   000FB5                     CVRCON          equ	4021	;# 
   314   000FB6                     ECCP1AS         equ	4022	;# 
   315   000FB7                     ECCP1DEL        equ	4023	;# 
   316   000FB7                     PWM1CON         equ	4023	;# 
   317   000FB8                     BAUDCON         equ	4024	;# 
   318   000FB8                     BAUDCTL         equ	4024	;# 
   319   000FBA                     CCP2CON         equ	4026	;# 
   320   000FBB                     CCPR2           equ	4027	;# 
   321   000FBB                     CCPR2L          equ	4027	;# 
   322   000FBC                     CCPR2H          equ	4028	;# 
   323   000FBD                     CCP1CON         equ	4029	;# 
   324   000FBD                     ECCP1CON        equ	4029	;# 
   325   000FBE                     CCPR1           equ	4030	;# 
   326   000FBE                     CCPR1L          equ	4030	;# 
   327   000FBF                     CCPR1H          equ	4031	;# 
   328   000FC0                     ADCON2          equ	4032	;# 
   329   000FC1                     ADCON1          equ	4033	;# 
   330   000FC2                     ADCON0          equ	4034	;# 
   331   000FC3                     ADRES           equ	4035	;# 
   332   000FC3                     ADRESL          equ	4035	;# 
   333   000FC4                     ADRESH          equ	4036	;# 
   334   000FC5                     SSPCON2         equ	4037	;# 
   335   000FC6                     SSPCON1         equ	4038	;# 
   336   000FC7                     SSPSTAT         equ	4039	;# 
   337   000FC8                     SSPADD          equ	4040	;# 
   338   000FC9                     SSPBUF          equ	4041	;# 
   339   000FCA                     T2CON           equ	4042	;# 
   340   000FCB                     PR2             equ	4043	;# 
   341   000FCB                     MEMCON          equ	4043	;# 
   342   000FCC                     TMR2            equ	4044	;# 
   343   000FCD                     T1CON           equ	4045	;# 
   344   000FCE                     TMR1            equ	4046	;# 
   345   000FCE                     TMR1L           equ	4046	;# 
   346   000FCF                     TMR1H           equ	4047	;# 
   347   000FD0                     RCON            equ	4048	;# 
   348   000FD1                     WDTCON          equ	4049	;# 
   349   000FD2                     HLVDCON         equ	4050	;# 
   350   000FD2                     LVDCON          equ	4050	;# 
   351   000FD3                     OSCCON          equ	4051	;# 
   352   000FD5                     T0CON           equ	4053	;# 
   353   000FD6                     TMR0            equ	4054	;# 
   354   000FD6                     TMR0L           equ	4054	;# 
   355   000FD7                     TMR0H           equ	4055	;# 
   356   000FD8                     STATUS          equ	4056	;# 
   357   000FD9                     FSR2            equ	4057	;# 
   358   000FD9                     FSR2L           equ	4057	;# 
   359   000FDA                     FSR2H           equ	4058	;# 
   360   000FDB                     PLUSW2          equ	4059	;# 
   361   000FDC                     PREINC2         equ	4060	;# 
   362   000FDD                     POSTDEC2        equ	4061	;# 
   363   000FDE                     POSTINC2        equ	4062	;# 
   364   000FDF                     INDF2           equ	4063	;# 
   365   000FE0                     BSR             equ	4064	;# 
   366   000FE1                     FSR1            equ	4065	;# 
   367   000FE1                     FSR1L           equ	4065	;# 
   368   000FE2                     FSR1H           equ	4066	;# 
   369   000FE3                     PLUSW1          equ	4067	;# 
   370   000FE4                     PREINC1         equ	4068	;# 
   371   000FE5                     POSTDEC1        equ	4069	;# 
   372   000FE6                     POSTINC1        equ	4070	;# 
   373   000FE7                     INDF1           equ	4071	;# 
   374   000FE8                     WREG            equ	4072	;# 
   375   000FE9                     FSR0            equ	4073	;# 
   376   000FE9                     FSR0L           equ	4073	;# 
   377   000FEA                     FSR0H           equ	4074	;# 
   378   000FEB                     PLUSW0          equ	4075	;# 
   379   000FEC                     PREINC0         equ	4076	;# 
   380   000FED                     POSTDEC0        equ	4077	;# 
   381   000FEE                     POSTINC0        equ	4078	;# 
   382   000FEF                     INDF0           equ	4079	;# 
   383   000FF0                     INTCON3         equ	4080	;# 
   384   000FF1                     INTCON2         equ	4081	;# 
   385   000FF2                     INTCON          equ	4082	;# 
   386   000FF3                     PROD            equ	4083	;# 
   387   000FF3                     PRODL           equ	4083	;# 
   388   000FF4                     PRODH           equ	4084	;# 
   389   000FF5                     TABLAT          equ	4085	;# 
   390   000FF6                     TBLPTR          equ	4086	;# 
   391   000FF6                     TBLPTRL         equ	4086	;# 
   392   000FF7                     TBLPTRH         equ	4087	;# 
   393   000FF8                     TBLPTRU         equ	4088	;# 
   394   000FF9                     PCLAT           equ	4089	;# 
   395   000FF9                     PC              equ	4089	;# 
   396   000FF9                     PCL             equ	4089	;# 
   397   000FFA                     PCLATH          equ	4090	;# 
   398   000FFB                     PCLATU          equ	4091	;# 
   399   000FFC                     STKPTR          equ	4092	;# 
   400   000FFD                     TOS             equ	4093	;# 
   401   000FFD                     TOSL            equ	4093	;# 
   402   000FFE                     TOSH            equ	4094	;# 
   403   000FFF                     TOSU            equ	4095	;# 
   404   000F80                     PORTA           equ	3968	;# 
   405   000F81                     PORTB           equ	3969	;# 
   406   000F82                     PORTC           equ	3970	;# 
   407   000F83                     PORTD           equ	3971	;# 
   408   000F84                     PORTE           equ	3972	;# 
   409   000F89                     LATA            equ	3977	;# 
   410   000F8A                     LATB            equ	3978	;# 
   411   000F8B                     LATC            equ	3979	;# 
   412   000F8C                     LATD            equ	3980	;# 
   413   000F8D                     LATE            equ	3981	;# 
   414   000F92                     TRISA           equ	3986	;# 
   415   000F92                     DDRA            equ	3986	;# 
   416   000F93                     TRISB           equ	3987	;# 
   417   000F93                     DDRB            equ	3987	;# 
   418   000F94                     TRISC           equ	3988	;# 
   419   000F94                     DDRC            equ	3988	;# 
   420   000F95                     TRISD           equ	3989	;# 
   421   000F95                     DDRD            equ	3989	;# 
   422   000F96                     TRISE           equ	3990	;# 
   423   000F96                     DDRE            equ	3990	;# 
   424   000F9B                     OSCTUNE         equ	3995	;# 
   425   000F9D                     PIE1            equ	3997	;# 
   426   000F9E                     PIR1            equ	3998	;# 
   427   000F9F                     IPR1            equ	3999	;# 
   428   000FA0                     PIE2            equ	4000	;# 
   429   000FA1                     PIR2            equ	4001	;# 
   430   000FA2                     IPR2            equ	4002	;# 
   431   000FA6                     EECON1          equ	4006	;# 
   432   000FA7                     EECON2          equ	4007	;# 
   433   000FA8                     EEDATA          equ	4008	;# 
   434   000FA9                     EEADR           equ	4009	;# 
   435   000FAB                     RCSTA           equ	4011	;# 
   436   000FAB                     RCSTA1          equ	4011	;# 
   437   000FAC                     TXSTA           equ	4012	;# 
   438   000FAC                     TXSTA1          equ	4012	;# 
   439   000FAD                     TXREG           equ	4013	;# 
   440   000FAD                     TXREG1          equ	4013	;# 
   441   000FAE                     RCREG           equ	4014	;# 
   442   000FAE                     RCREG1          equ	4014	;# 
   443   000FAF                     SPBRG           equ	4015	;# 
   444   000FAF                     SPBRG1          equ	4015	;# 
   445   000FB0                     SPBRGH          equ	4016	;# 
   446   000FB1                     T3CON           equ	4017	;# 
   447   000FB2                     TMR3            equ	4018	;# 
   448   000FB2                     TMR3L           equ	4018	;# 
   449   000FB3                     TMR3H           equ	4019	;# 
   450   000FB4                     CMCON           equ	4020	;# 
   451   000FB5                     CVRCON          equ	4021	;# 
   452   000FB6                     ECCP1AS         equ	4022	;# 
   453   000FB7                     ECCP1DEL        equ	4023	;# 
   454   000FB7                     PWM1CON         equ	4023	;# 
   455   000FB8                     BAUDCON         equ	4024	;# 
   456   000FB8                     BAUDCTL         equ	4024	;# 
   457   000FBA                     CCP2CON         equ	4026	;# 
   458   000FBB                     CCPR2           equ	4027	;# 
   459   000FBB                     CCPR2L          equ	4027	;# 
   460   000FBC                     CCPR2H          equ	4028	;# 
   461   000FBD                     CCP1CON         equ	4029	;# 
   462   000FBD                     ECCP1CON        equ	4029	;# 
   463   000FBE                     CCPR1           equ	4030	;# 
   464   000FBE                     CCPR1L          equ	4030	;# 
   465   000FBF                     CCPR1H          equ	4031	;# 
   466   000FC0                     ADCON2          equ	4032	;# 
   467   000FC1                     ADCON1          equ	4033	;# 
   468   000FC2                     ADCON0          equ	4034	;# 
   469   000FC3                     ADRES           equ	4035	;# 
   470   000FC3                     ADRESL          equ	4035	;# 
   471   000FC4                     ADRESH          equ	4036	;# 
   472   000FC5                     SSPCON2         equ	4037	;# 
   473   000FC6                     SSPCON1         equ	4038	;# 
   474   000FC7                     SSPSTAT         equ	4039	;# 
   475   000FC8                     SSPADD          equ	4040	;# 
   476   000FC9                     SSPBUF          equ	4041	;# 
   477   000FCA                     T2CON           equ	4042	;# 
   478   000FCB                     PR2             equ	4043	;# 
   479   000FCB                     MEMCON          equ	4043	;# 
   480   000FCC                     TMR2            equ	4044	;# 
   481   000FCD                     T1CON           equ	4045	;# 
   482   000FCE                     TMR1            equ	4046	;# 
   483   000FCE                     TMR1L           equ	4046	;# 
   484   000FCF                     TMR1H           equ	4047	;# 
   485   000FD0                     RCON            equ	4048	;# 
   486   000FD1                     WDTCON          equ	4049	;# 
   487   000FD2                     HLVDCON         equ	4050	;# 
   488   000FD2                     LVDCON          equ	4050	;# 
   489   000FD3                     OSCCON          equ	4051	;# 
   490   000FD5                     T0CON           equ	4053	;# 
   491   000FD6                     TMR0            equ	4054	;# 
   492   000FD6                     TMR0L           equ	4054	;# 
   493   000FD7                     TMR0H           equ	4055	;# 
   494   000FD8                     STATUS          equ	4056	;# 
   495   000FD9                     FSR2            equ	4057	;# 
   496   000FD9                     FSR2L           equ	4057	;# 
   497   000FDA                     FSR2H           equ	4058	;# 
   498   000FDB                     PLUSW2          equ	4059	;# 
   499   000FDC                     PREINC2         equ	4060	;# 
   500   000FDD                     POSTDEC2        equ	4061	;# 
   501   000FDE                     POSTINC2        equ	4062	;# 
   502   000FDF                     INDF2           equ	4063	;# 
   503   000FE0                     BSR             equ	4064	;# 
   504   000FE1                     FSR1            equ	4065	;# 
   505   000FE1                     FSR1L           equ	4065	;# 
   506   000FE2                     FSR1H           equ	4066	;# 
   507   000FE3                     PLUSW1          equ	4067	;# 
   508   000FE4                     PREINC1         equ	4068	;# 
   509   000FE5                     POSTDEC1        equ	4069	;# 
   510   000FE6                     POSTINC1        equ	4070	;# 
   511   000FE7                     INDF1           equ	4071	;# 
   512   000FE8                     WREG            equ	4072	;# 
   513   000FE9                     FSR0            equ	4073	;# 
   514   000FE9                     FSR0L           equ	4073	;# 
   515   000FEA                     FSR0H           equ	4074	;# 
   516   000FEB                     PLUSW0          equ	4075	;# 
   517   000FEC                     PREINC0         equ	4076	;# 
   518   000FED                     POSTDEC0        equ	4077	;# 
   519   000FEE                     POSTINC0        equ	4078	;# 
   520   000FEF                     INDF0           equ	4079	;# 
   521   000FF0                     INTCON3         equ	4080	;# 
   522   000FF1                     INTCON2         equ	4081	;# 
   523   000FF2                     INTCON          equ	4082	;# 
   524   000FF3                     PROD            equ	4083	;# 
   525   000FF3                     PRODL           equ	4083	;# 
   526   000FF4                     PRODH           equ	4084	;# 
   527   000FF5                     TABLAT          equ	4085	;# 
   528   000FF6                     TBLPTR          equ	4086	;# 
   529   000FF6                     TBLPTRL         equ	4086	;# 
   530   000FF7                     TBLPTRH         equ	4087	;# 
   531   000FF8                     TBLPTRU         equ	4088	;# 
   532   000FF9                     PCLAT           equ	4089	;# 
   533   000FF9                     PC              equ	4089	;# 
   534   000FF9                     PCL             equ	4089	;# 
   535   000FFA                     PCLATH          equ	4090	;# 
   536   000FFB                     PCLATU          equ	4091	;# 
   537   000FFC                     STKPTR          equ	4092	;# 
   538   000FFD                     TOS             equ	4093	;# 
   539   000FFD                     TOSL            equ	4093	;# 
   540   000FFE                     TOSH            equ	4094	;# 
   541   000FFF                     TOSU            equ	4095	;# 
   542   000F80                     PORTA           equ	3968	;# 
   543   000F81                     PORTB           equ	3969	;# 
   544   000F82                     PORTC           equ	3970	;# 
   545   000F83                     PORTD           equ	3971	;# 
   546   000F84                     PORTE           equ	3972	;# 
   547   000F89                     LATA            equ	3977	;# 
   548   000F8A                     LATB            equ	3978	;# 
   549   000F8B                     LATC            equ	3979	;# 
   550   000F8C                     LATD            equ	3980	;# 
   551   000F8D                     LATE            equ	3981	;# 
   552   000F92                     TRISA           equ	3986	;# 
   553   000F92                     DDRA            equ	3986	;# 
   554   000F93                     TRISB           equ	3987	;# 
   555   000F93                     DDRB            equ	3987	;# 
   556   000F94                     TRISC           equ	3988	;# 
   557   000F94                     DDRC            equ	3988	;# 
   558   000F95                     TRISD           equ	3989	;# 
   559   000F95                     DDRD            equ	3989	;# 
   560   000F96                     TRISE           equ	3990	;# 
   561   000F96                     DDRE            equ	3990	;# 
   562   000F9B                     OSCTUNE         equ	3995	;# 
   563   000F9D                     PIE1            equ	3997	;# 
   564   000F9E                     PIR1            equ	3998	;# 
   565   000F9F                     IPR1            equ	3999	;# 
   566   000FA0                     PIE2            equ	4000	;# 
   567   000FA1                     PIR2            equ	4001	;# 
   568   000FA2                     IPR2            equ	4002	;# 
   569   000FA6                     EECON1          equ	4006	;# 
   570   000FA7                     EECON2          equ	4007	;# 
   571   000FA8                     EEDATA          equ	4008	;# 
   572   000FA9                     EEADR           equ	4009	;# 
   573   000FAB                     RCSTA           equ	4011	;# 
   574   000FAB                     RCSTA1          equ	4011	;# 
   575   000FAC                     TXSTA           equ	4012	;# 
   576   000FAC                     TXSTA1          equ	4012	;# 
   577   000FAD                     TXREG           equ	4013	;# 
   578   000FAD                     TXREG1          equ	4013	;# 
   579   000FAE                     RCREG           equ	4014	;# 
   580   000FAE                     RCREG1          equ	4014	;# 
   581   000FAF                     SPBRG           equ	4015	;# 
   582   000FAF                     SPBRG1          equ	4015	;# 
   583   000FB0                     SPBRGH          equ	4016	;# 
   584   000FB1                     T3CON           equ	4017	;# 
   585   000FB2                     TMR3            equ	4018	;# 
   586   000FB2                     TMR3L           equ	4018	;# 
   587   000FB3                     TMR3H           equ	4019	;# 
   588   000FB4                     CMCON           equ	4020	;# 
   589   000FB5                     CVRCON          equ	4021	;# 
   590   000FB6                     ECCP1AS         equ	4022	;# 
   591   000FB7                     ECCP1DEL        equ	4023	;# 
   592   000FB7                     PWM1CON         equ	4023	;# 
   593   000FB8                     BAUDCON         equ	4024	;# 
   594   000FB8                     BAUDCTL         equ	4024	;# 
   595   000FBA                     CCP2CON         equ	4026	;# 
   596   000FBB                     CCPR2           equ	4027	;# 
   597   000FBB                     CCPR2L          equ	4027	;# 
   598   000FBC                     CCPR2H          equ	4028	;# 
   599   000FBD                     CCP1CON         equ	4029	;# 
   600   000FBD                     ECCP1CON        equ	4029	;# 
   601   000FBE                     CCPR1           equ	4030	;# 
   602   000FBE                     CCPR1L          equ	4030	;# 
   603   000FBF                     CCPR1H          equ	4031	;# 
   604   000FC0                     ADCON2          equ	4032	;# 
   605   000FC1                     ADCON1          equ	4033	;# 
   606   000FC2                     ADCON0          equ	4034	;# 
   607   000FC3                     ADRES           equ	4035	;# 
   608   000FC3                     ADRESL          equ	4035	;# 
   609   000FC4                     ADRESH          equ	4036	;# 
   610   000FC5                     SSPCON2         equ	4037	;# 
   611   000FC6                     SSPCON1         equ	4038	;# 
   612   000FC7                     SSPSTAT         equ	4039	;# 
   613   000FC8                     SSPADD          equ	4040	;# 
   614   000FC9                     SSPBUF          equ	4041	;# 
   615   000FCA                     T2CON           equ	4042	;# 
   616   000FCB                     PR2             equ	4043	;# 
   617   000FCB                     MEMCON          equ	4043	;# 
   618   000FCC                     TMR2            equ	4044	;# 
   619   000FCD                     T1CON           equ	4045	;# 
   620   000FCE                     TMR1            equ	4046	;# 
   621   000FCE                     TMR1L           equ	4046	;# 
   622   000FCF                     TMR1H           equ	4047	;# 
   623   000FD0                     RCON            equ	4048	;# 
   624   000FD1                     WDTCON          equ	4049	;# 
   625   000FD2                     HLVDCON         equ	4050	;# 
   626   000FD2                     LVDCON          equ	4050	;# 
   627   000FD3                     OSCCON          equ	4051	;# 
   628   000FD5                     T0CON           equ	4053	;# 
   629   000FD6                     TMR0            equ	4054	;# 
   630   000FD6                     TMR0L           equ	4054	;# 
   631   000FD7                     TMR0H           equ	4055	;# 
   632   000FD8                     STATUS          equ	4056	;# 
   633   000FD9                     FSR2            equ	4057	;# 
   634   000FD9                     FSR2L           equ	4057	;# 
   635   000FDA                     FSR2H           equ	4058	;# 
   636   000FDB                     PLUSW2          equ	4059	;# 
   637   000FDC                     PREINC2         equ	4060	;# 
   638   000FDD                     POSTDEC2        equ	4061	;# 
   639   000FDE                     POSTINC2        equ	4062	;# 
   640   000FDF                     INDF2           equ	4063	;# 
   641   000FE0                     BSR             equ	4064	;# 
   642   000FE1                     FSR1            equ	4065	;# 
   643   000FE1                     FSR1L           equ	4065	;# 
   644   000FE2                     FSR1H           equ	4066	;# 
   645   000FE3                     PLUSW1          equ	4067	;# 
   646   000FE4                     PREINC1         equ	4068	;# 
   647   000FE5                     POSTDEC1        equ	4069	;# 
   648   000FE6                     POSTINC1        equ	4070	;# 
   649   000FE7                     INDF1           equ	4071	;# 
   650   000FE8                     WREG            equ	4072	;# 
   651   000FE9                     FSR0            equ	4073	;# 
   652   000FE9                     FSR0L           equ	4073	;# 
   653   000FEA                     FSR0H           equ	4074	;# 
   654   000FEB                     PLUSW0          equ	4075	;# 
   655   000FEC                     PREINC0         equ	4076	;# 
   656   000FED                     POSTDEC0        equ	4077	;# 
   657   000FEE                     POSTINC0        equ	4078	;# 
   658   000FEF                     INDF0           equ	4079	;# 
   659   000FF0                     INTCON3         equ	4080	;# 
   660   000FF1                     INTCON2         equ	4081	;# 
   661   000FF2                     INTCON          equ	4082	;# 
   662   000FF3                     PROD            equ	4083	;# 
   663   000FF3                     PRODL           equ	4083	;# 
   664   000FF4                     PRODH           equ	4084	;# 
   665   000FF5                     TABLAT          equ	4085	;# 
   666   000FF6                     TBLPTR          equ	4086	;# 
   667   000FF6                     TBLPTRL         equ	4086	;# 
   668   000FF7                     TBLPTRH         equ	4087	;# 
   669   000FF8                     TBLPTRU         equ	4088	;# 
   670   000FF9                     PCLAT           equ	4089	;# 
   671   000FF9                     PC              equ	4089	;# 
   672   000FF9                     PCL             equ	4089	;# 
   673   000FFA                     PCLATH          equ	4090	;# 
   674   000FFB                     PCLATU          equ	4091	;# 
   675   000FFC                     STKPTR          equ	4092	;# 
   676   000FFD                     TOS             equ	4093	;# 
   677   000FFD                     TOSL            equ	4093	;# 
   678   000FFE                     TOSH            equ	4094	;# 
   679   000FFF                     TOSU            equ	4095	;# 
   680   000F80                     PORTA           equ	3968	;# 
   681   000F81                     PORTB           equ	3969	;# 
   682   000F82                     PORTC           equ	3970	;# 
   683   000F83                     PORTD           equ	3971	;# 
   684   000F84                     PORTE           equ	3972	;# 
   685   000F89                     LATA            equ	3977	;# 
   686   000F8A                     LATB            equ	3978	;# 
   687   000F8B                     LATC            equ	3979	;# 
   688   000F8C                     LATD            equ	3980	;# 
   689   000F8D                     LATE            equ	3981	;# 
   690   000F92                     TRISA           equ	3986	;# 
   691   000F92                     DDRA            equ	3986	;# 
   692   000F93                     TRISB           equ	3987	;# 
   693   000F93                     DDRB            equ	3987	;# 
   694   000F94                     TRISC           equ	3988	;# 
   695   000F94                     DDRC            equ	3988	;# 
   696   000F95                     TRISD           equ	3989	;# 
   697   000F95                     DDRD            equ	3989	;# 
   698   000F96                     TRISE           equ	3990	;# 
   699   000F96                     DDRE            equ	3990	;# 
   700   000F9B                     OSCTUNE         equ	3995	;# 
   701   000F9D                     PIE1            equ	3997	;# 
   702   000F9E                     PIR1            equ	3998	;# 
   703   000F9F                     IPR1            equ	3999	;# 
   704   000FA0                     PIE2            equ	4000	;# 
   705   000FA1                     PIR2            equ	4001	;# 
   706   000FA2                     IPR2            equ	4002	;# 
   707   000FA6                     EECON1          equ	4006	;# 
   708   000FA7                     EECON2          equ	4007	;# 
   709   000FA8                     EEDATA          equ	4008	;# 
   710   000FA9                     EEADR           equ	4009	;# 
   711   000FAB                     RCSTA           equ	4011	;# 
   712   000FAB                     RCSTA1          equ	4011	;# 
   713   000FAC                     TXSTA           equ	4012	;# 
   714   000FAC                     TXSTA1          equ	4012	;# 
   715   000FAD                     TXREG           equ	4013	;# 
   716   000FAD                     TXREG1          equ	4013	;# 
   717   000FAE                     RCREG           equ	4014	;# 
   718   000FAE                     RCREG1          equ	4014	;# 
   719   000FAF                     SPBRG           equ	4015	;# 
   720   000FAF                     SPBRG1          equ	4015	;# 
   721   000FB0                     SPBRGH          equ	4016	;# 
   722   000FB1                     T3CON           equ	4017	;# 
   723   000FB2                     TMR3            equ	4018	;# 
   724   000FB2                     TMR3L           equ	4018	;# 
   725   000FB3                     TMR3H           equ	4019	;# 
   726   000FB4                     CMCON           equ	4020	;# 
   727   000FB5                     CVRCON          equ	4021	;# 
   728   000FB6                     ECCP1AS         equ	4022	;# 
   729   000FB7                     ECCP1DEL        equ	4023	;# 
   730   000FB7                     PWM1CON         equ	4023	;# 
   731   000FB8                     BAUDCON         equ	4024	;# 
   732   000FB8                     BAUDCTL         equ	4024	;# 
   733   000FBA                     CCP2CON         equ	4026	;# 
   734   000FBB                     CCPR2           equ	4027	;# 
   735   000FBB                     CCPR2L          equ	4027	;# 
   736   000FBC                     CCPR2H          equ	4028	;# 
   737   000FBD                     CCP1CON         equ	4029	;# 
   738   000FBD                     ECCP1CON        equ	4029	;# 
   739   000FBE                     CCPR1           equ	4030	;# 
   740   000FBE                     CCPR1L          equ	4030	;# 
   741   000FBF                     CCPR1H          equ	4031	;# 
   742   000FC0                     ADCON2          equ	4032	;# 
   743   000FC1                     ADCON1          equ	4033	;# 
   744   000FC2                     ADCON0          equ	4034	;# 
   745   000FC3                     ADRES           equ	4035	;# 
   746   000FC3                     ADRESL          equ	4035	;# 
   747   000FC4                     ADRESH          equ	4036	;# 
   748   000FC5                     SSPCON2         equ	4037	;# 
   749   000FC6                     SSPCON1         equ	4038	;# 
   750   000FC7                     SSPSTAT         equ	4039	;# 
   751   000FC8                     SSPADD          equ	4040	;# 
   752   000FC9                     SSPBUF          equ	4041	;# 
   753   000FCA                     T2CON           equ	4042	;# 
   754   000FCB                     PR2             equ	4043	;# 
   755   000FCB                     MEMCON          equ	4043	;# 
   756   000FCC                     TMR2            equ	4044	;# 
   757   000FCD                     T1CON           equ	4045	;# 
   758   000FCE                     TMR1            equ	4046	;# 
   759   000FCE                     TMR1L           equ	4046	;# 
   760   000FCF                     TMR1H           equ	4047	;# 
   761   000FD0                     RCON            equ	4048	;# 
   762   000FD1                     WDTCON          equ	4049	;# 
   763   000FD2                     HLVDCON         equ	4050	;# 
   764   000FD2                     LVDCON          equ	4050	;# 
   765   000FD3                     OSCCON          equ	4051	;# 
   766   000FD5                     T0CON           equ	4053	;# 
   767   000FD6                     TMR0            equ	4054	;# 
   768   000FD6                     TMR0L           equ	4054	;# 
   769   000FD7                     TMR0H           equ	4055	;# 
   770   000FD8                     STATUS          equ	4056	;# 
   771   000FD9                     FSR2            equ	4057	;# 
   772   000FD9                     FSR2L           equ	4057	;# 
   773   000FDA                     FSR2H           equ	4058	;# 
   774   000FDB                     PLUSW2          equ	4059	;# 
   775   000FDC                     PREINC2         equ	4060	;# 
   776   000FDD                     POSTDEC2        equ	4061	;# 
   777   000FDE                     POSTINC2        equ	4062	;# 
   778   000FDF                     INDF2           equ	4063	;# 
   779   000FE0                     BSR             equ	4064	;# 
   780   000FE1                     FSR1            equ	4065	;# 
   781   000FE1                     FSR1L           equ	4065	;# 
   782   000FE2                     FSR1H           equ	4066	;# 
   783   000FE3                     PLUSW1          equ	4067	;# 
   784   000FE4                     PREINC1         equ	4068	;# 
   785   000FE5                     POSTDEC1        equ	4069	;# 
   786   000FE6                     POSTINC1        equ	4070	;# 
   787   000FE7                     INDF1           equ	4071	;# 
   788   000FE8                     WREG            equ	4072	;# 
   789   000FE9                     FSR0            equ	4073	;# 
   790   000FE9                     FSR0L           equ	4073	;# 
   791   000FEA                     FSR0H           equ	4074	;# 
   792   000FEB                     PLUSW0          equ	4075	;# 
   793   000FEC                     PREINC0         equ	4076	;# 
   794   000FED                     POSTDEC0        equ	4077	;# 
   795   000FEE                     POSTINC0        equ	4078	;# 
   796   000FEF                     INDF0           equ	4079	;# 
   797   000FF0                     INTCON3         equ	4080	;# 
   798   000FF1                     INTCON2         equ	4081	;# 
   799   000FF2                     INTCON          equ	4082	;# 
   800   000FF3                     PROD            equ	4083	;# 
   801   000FF3                     PRODL           equ	4083	;# 
   802   000FF4                     PRODH           equ	4084	;# 
   803   000FF5                     TABLAT          equ	4085	;# 
   804   000FF6                     TBLPTR          equ	4086	;# 
   805   000FF6                     TBLPTRL         equ	4086	;# 
   806   000FF7                     TBLPTRH         equ	4087	;# 
   807   000FF8                     TBLPTRU         equ	4088	;# 
   808   000FF9                     PCLAT           equ	4089	;# 
   809   000FF9                     PC              equ	4089	;# 
   810   000FF9                     PCL             equ	4089	;# 
   811   000FFA                     PCLATH          equ	4090	;# 
   812   000FFB                     PCLATU          equ	4091	;# 
   813   000FFC                     STKPTR          equ	4092	;# 
   814   000FFD                     TOS             equ	4093	;# 
   815   000FFD                     TOSL            equ	4093	;# 
   816   000FFE                     TOSH            equ	4094	;# 
   817   000FFF                     TOSU            equ	4095	;# 
   818   000F80                     PORTA           equ	3968	;# 
   819   000F81                     PORTB           equ	3969	;# 
   820   000F82                     PORTC           equ	3970	;# 
   821   000F83                     PORTD           equ	3971	;# 
   822   000F84                     PORTE           equ	3972	;# 
   823   000F89                     LATA            equ	3977	;# 
   824   000F8A                     LATB            equ	3978	;# 
   825   000F8B                     LATC            equ	3979	;# 
   826   000F8C                     LATD            equ	3980	;# 
   827   000F8D                     LATE            equ	3981	;# 
   828   000F92                     TRISA           equ	3986	;# 
   829   000F92                     DDRA            equ	3986	;# 
   830   000F93                     TRISB           equ	3987	;# 
   831   000F93                     DDRB            equ	3987	;# 
   832   000F94                     TRISC           equ	3988	;# 
   833   000F94                     DDRC            equ	3988	;# 
   834   000F95                     TRISD           equ	3989	;# 
   835   000F95                     DDRD            equ	3989	;# 
   836   000F96                     TRISE           equ	3990	;# 
   837   000F96                     DDRE            equ	3990	;# 
   838   000F9B                     OSCTUNE         equ	3995	;# 
   839   000F9D                     PIE1            equ	3997	;# 
   840   000F9E                     PIR1            equ	3998	;# 
   841   000F9F                     IPR1            equ	3999	;# 
   842   000FA0                     PIE2            equ	4000	;# 
   843   000FA1                     PIR2            equ	4001	;# 
   844   000FA2                     IPR2            equ	4002	;# 
   845   000FA6                     EECON1          equ	4006	;# 
   846   000FA7                     EECON2          equ	4007	;# 
   847   000FA8                     EEDATA          equ	4008	;# 
   848   000FA9                     EEADR           equ	4009	;# 
   849   000FAB                     RCSTA           equ	4011	;# 
   850   000FAB                     RCSTA1          equ	4011	;# 
   851   000FAC                     TXSTA           equ	4012	;# 
   852   000FAC                     TXSTA1          equ	4012	;# 
   853   000FAD                     TXREG           equ	4013	;# 
   854   000FAD                     TXREG1          equ	4013	;# 
   855   000FAE                     RCREG           equ	4014	;# 
   856   000FAE                     RCREG1          equ	4014	;# 
   857   000FAF                     SPBRG           equ	4015	;# 
   858   000FAF                     SPBRG1          equ	4015	;# 
   859   000FB0                     SPBRGH          equ	4016	;# 
   860   000FB1                     T3CON           equ	4017	;# 
   861   000FB2                     TMR3            equ	4018	;# 
   862   000FB2                     TMR3L           equ	4018	;# 
   863   000FB3                     TMR3H           equ	4019	;# 
   864   000FB4                     CMCON           equ	4020	;# 
   865   000FB5                     CVRCON          equ	4021	;# 
   866   000FB6                     ECCP1AS         equ	4022	;# 
   867   000FB7                     ECCP1DEL        equ	4023	;# 
   868   000FB7                     PWM1CON         equ	4023	;# 
   869   000FB8                     BAUDCON         equ	4024	;# 
   870   000FB8                     BAUDCTL         equ	4024	;# 
   871   000FBA                     CCP2CON         equ	4026	;# 
   872   000FBB                     CCPR2           equ	4027	;# 
   873   000FBB                     CCPR2L          equ	4027	;# 
   874   000FBC                     CCPR2H          equ	4028	;# 
   875   000FBD                     CCP1CON         equ	4029	;# 
   876   000FBD                     ECCP1CON        equ	4029	;# 
   877   000FBE                     CCPR1           equ	4030	;# 
   878   000FBE                     CCPR1L          equ	4030	;# 
   879   000FBF                     CCPR1H          equ	4031	;# 
   880   000FC0                     ADCON2          equ	4032	;# 
   881   000FC1                     ADCON1          equ	4033	;# 
   882   000FC2                     ADCON0          equ	4034	;# 
   883   000FC3                     ADRES           equ	4035	;# 
   884   000FC3                     ADRESL          equ	4035	;# 
   885   000FC4                     ADRESH          equ	4036	;# 
   886   000FC5                     SSPCON2         equ	4037	;# 
   887   000FC6                     SSPCON1         equ	4038	;# 
   888   000FC7                     SSPSTAT         equ	4039	;# 
   889   000FC8                     SSPADD          equ	4040	;# 
   890   000FC9                     SSPBUF          equ	4041	;# 
   891   000FCA                     T2CON           equ	4042	;# 
   892   000FCB                     PR2             equ	4043	;# 
   893   000FCB                     MEMCON          equ	4043	;# 
   894   000FCC                     TMR2            equ	4044	;# 
   895   000FCD                     T1CON           equ	4045	;# 
   896   000FCE                     TMR1            equ	4046	;# 
   897   000FCE                     TMR1L           equ	4046	;# 
   898   000FCF                     TMR1H           equ	4047	;# 
   899   000FD0                     RCON            equ	4048	;# 
   900   000FD1                     WDTCON          equ	4049	;# 
   901   000FD2                     HLVDCON         equ	4050	;# 
   902   000FD2                     LVDCON          equ	4050	;# 
   903   000FD3                     OSCCON          equ	4051	;# 
   904   000FD5                     T0CON           equ	4053	;# 
   905   000FD6                     TMR0            equ	4054	;# 
   906   000FD6                     TMR0L           equ	4054	;# 
   907   000FD7                     TMR0H           equ	4055	;# 
   908   000FD8                     STATUS          equ	4056	;# 
   909   000FD9                     FSR2            equ	4057	;# 
   910   000FD9                     FSR2L           equ	4057	;# 
   911   000FDA                     FSR2H           equ	4058	;# 
   912   000FDB                     PLUSW2          equ	4059	;# 
   913   000FDC                     PREINC2         equ	4060	;# 
   914   000FDD                     POSTDEC2        equ	4061	;# 
   915   000FDE                     POSTINC2        equ	4062	;# 
   916   000FDF                     INDF2           equ	4063	;# 
   917   000FE0                     BSR             equ	4064	;# 
   918   000FE1                     FSR1            equ	4065	;# 
   919   000FE1                     FSR1L           equ	4065	;# 
   920   000FE2                     FSR1H           equ	4066	;# 
   921   000FE3                     PLUSW1          equ	4067	;# 
   922   000FE4                     PREINC1         equ	4068	;# 
   923   000FE5                     POSTDEC1        equ	4069	;# 
   924   000FE6                     POSTINC1        equ	4070	;# 
   925   000FE7                     INDF1           equ	4071	;# 
   926   000FE8                     WREG            equ	4072	;# 
   927   000FE9                     FSR0            equ	4073	;# 
   928   000FE9                     FSR0L           equ	4073	;# 
   929   000FEA                     FSR0H           equ	4074	;# 
   930   000FEB                     PLUSW0          equ	4075	;# 
   931   000FEC                     PREINC0         equ	4076	;# 
   932   000FED                     POSTDEC0        equ	4077	;# 
   933   000FEE                     POSTINC0        equ	4078	;# 
   934   000FEF                     INDF0           equ	4079	;# 
   935   000FF0                     INTCON3         equ	4080	;# 
   936   000FF1                     INTCON2         equ	4081	;# 
   937   000FF2                     INTCON          equ	4082	;# 
   938   000FF3                     PROD            equ	4083	;# 
   939   000FF3                     PRODL           equ	4083	;# 
   940   000FF4                     PRODH           equ	4084	;# 
   941   000FF5                     TABLAT          equ	4085	;# 
   942   000FF6                     TBLPTR          equ	4086	;# 
   943   000FF6                     TBLPTRL         equ	4086	;# 
   944   000FF7                     TBLPTRH         equ	4087	;# 
   945   000FF8                     TBLPTRU         equ	4088	;# 
   946   000FF9                     PCLAT           equ	4089	;# 
   947   000FF9                     PC              equ	4089	;# 
   948   000FF9                     PCL             equ	4089	;# 
   949   000FFA                     PCLATH          equ	4090	;# 
   950   000FFB                     PCLATU          equ	4091	;# 
   951   000FFC                     STKPTR          equ	4092	;# 
   952   000FFD                     TOS             equ	4093	;# 
   953   000FFD                     TOSL            equ	4093	;# 
   954   000FFE                     TOSH            equ	4094	;# 
   955   000FFF                     TOSU            equ	4095	;# 
   956                           
   957                           	psect	smallconst
   958   000200                     __psmallconst:
   959                           	callstack 0
   960   000200  00                 	db	0
   961   000201                     GetTecla@F3223:
   962                           	callstack 0
   963   000201  01                 	db	1
   964   000202  02                 	db	2
   965   000203  03                 	db	3
   966   000204  04                 	db	4
   967   000205  05                 	db	5
   968   000206  06                 	db	6
   969   000207  07                 	db	7
   970   000208  08                 	db	8
   971   000209  09                 	db	9
   972   00020A  0A                 	db	10
   973   00020B  00                 	db	0
   974   00020C  0B                 	db	11
   975   00020D                     __end_ofGetTecla@F3223:
   976                           	callstack 0
   977   007F92                     _TMR0IF         set	32658
   978   000FD6                     _TMR0           set	4054
   979   000FAE                     _RCREG          set	4014
   980   000FAD                     _TXREG          set	4013
   981   000F9E                     _PIR1bits       set	3998
   982   000FB8                     _BAUDCON        set	4024
   983   000FAF                     _SPBRG          set	4015
   984   000FAB                     _RCSTA          set	4011
   985   000FAC                     _TXSTA          set	4012
   986   000F81                     _PORTBbits      set	3969
   987   000F8A                     _LATBbits       set	3978
   988   000F93                     _TRISBbits      set	3987
   989   000F82                     _PORTCbits      set	3970
   990   000F8B                     _LATCbits       set	3979
   991   000F94                     _TRISCbits      set	3988
   992   000F8C                     _LATD           set	3980
   993   000F95                     _TRISD          set	3989
   994   000F83                     _PORTD          set	3971
   995   000FD5                     _T0CON          set	4053
   996   000F8B                     _LATC           set	3979
   997   000F92                     _TRISA          set	3986
   998   000FC1                     _ADCON1         set	4033
   999   000F89                     _LATA           set	3977
  1000   000FF2                     _INTCONbits     set	4082
  1001   00020D                     STR_14:
  1002   00020D  45                 	db	69	;'E'
  1003   00020E  52                 	db	82	;'R'
  1004   00020F  52                 	db	82	;'R'
  1005   000210  4F                 	db	79	;'O'
  1006   000211  52                 	db	82	;'R'
  1007   000212  2E                 	db	46
  1008   000213  20                 	db	32
  1009   000214  56                 	db	86	;'V'
  1010   000215  61                 	db	97	;'a'
  1011   000216  6C                 	db	108	;'l'
  1012   000217  6F                 	db	111	;'o'
  1013   000218  72                 	db	114	;'r'
  1014   000219  20                 	db	32
  1015   00021A  69                 	db	105	;'i'
  1016   00021B  6E                 	db	110	;'n'
  1017   00021C  74                 	db	116	;'t'
  1018   00021D  72                 	db	114	;'r'
  1019   00021E  6F                 	db	111	;'o'
  1020   00021F  64                 	db	100	;'d'
  1021   000220  75                 	db	117	;'u'
  1022   000221  69                 	db	105	;'i'
  1023   000222  74                 	db	116	;'t'
  1024   000223  20                 	db	32
  1025   000224  65                 	db	101	;'e'
  1026   000225  72                 	db	114	;'r'
  1027   000226  72                 	db	114	;'r'
  1028   000227  6F                 	db	111	;'o'
  1029   000228  6E                 	db	110	;'n'
  1030   000229  69                 	db	105	;'i'
  1031   00022A  2E                 	db	46
  1032   00022B  0D                 	db	13
  1033   00022C  0A                 	db	10
  1034   00022D  00                 	db	0
  1035   00022E                     STR_9:
  1036   00022E  09                 	db	9
  1037   00022F  33                 	db	51	;'3'
  1038   000230  2E                 	db	46
  1039   000231  20                 	db	32
  1040   000232  4D                 	db	77	;'M'
  1041   000233  6F                 	db	111	;'o'
  1042   000234  64                 	db	100	;'d'
  1043   000235  69                 	db	105	;'i'
  1044   000236  66                 	db	102	;'f'
  1045   000237  69                 	db	105	;'i'
  1046   000238  63                 	db	99	;'c'
  1047   000239  61                 	db	97	;'a'
  1048   00023A  72                 	db	114	;'r'
  1049   00023B  20                 	db	32
  1050   00023C  68                 	db	104	;'h'
  1051   00023D  6F                 	db	111	;'o'
  1052   00023E  72                 	db	114	;'r'
  1053   00023F  61                 	db	97	;'a'
  1054   000240  20                 	db	32
  1055   000241  64                 	db	100	;'d'
  1056   000242  65                 	db	101	;'e'
  1057   000243  6C                 	db	108	;'l'
  1058   000244  20                 	db	32
  1059   000245  73                 	db	115	;'s'
  1060   000246  69                 	db	105	;'i'
  1061   000247  73                 	db	115	;'s'
  1062   000248  74                 	db	116	;'t'
  1063   000249  65                 	db	101	;'e'
  1064   00024A  6D                 	db	109	;'m'
  1065   00024B  61                 	db	97	;'a'
  1066   00024C  0D                 	db	13
  1067   00024D  0A                 	db	10
  1068   00024E  00                 	db	0
  1069   00024F                     STR_8:
  1070   00024F  09                 	db	9
  1071   000250  32                 	db	50	;'2'
  1072   000251  2E                 	db	46
  1073   000252  20                 	db	32
  1074   000253  4D                 	db	77	;'M'
  1075   000254  6F                 	db	111	;'o'
  1076   000255  73                 	db	115	;'s'
  1077   000256  74                 	db	116	;'t'
  1078   000257  72                 	db	114	;'r'
  1079   000258  61                 	db	97	;'a'
  1080   000259  72                 	db	114	;'r'
  1081   00025A  20                 	db	32
  1082   00025B  63                 	db	99	;'c'
  1083   00025C  6F                 	db	111	;'o'
  1084   00025D  6E                 	db	110	;'n'
  1085   00025E  66                 	db	102	;'f'
  1086   00025F  69                 	db	105	;'i'
  1087   000260  67                 	db	103	;'g'
  1088   000261  75                 	db	117	;'u'
  1089   000262  72                 	db	114	;'r'
  1090   000263  61                 	db	97	;'a'
  1091   000264  63                 	db	99	;'c'
  1092   000265  69                 	db	105	;'i'
  1093   000266  6F                 	db	111	;'o'
  1094   000267  6E                 	db	110	;'n'
  1095   000268  73                 	db	115	;'s'
  1096   000269  0D                 	db	13
  1097   00026A  0A                 	db	10
  1098   00026B  00                 	db	0
  1099   00026C                     STR_7:
  1100   00026C  09                 	db	9
  1101   00026D  31                 	db	49	;'1'
  1102   00026E  2E                 	db	46
  1103   00026F  20                 	db	32
  1104   000270  51                 	db	81	;'Q'
  1105   000271  75                 	db	117	;'u'
  1106   000272  69                 	db	105	;'i'
  1107   000273  20                 	db	32
  1108   000274  68                 	db	104	;'h'
  1109   000275  69                 	db	105	;'i'
  1110   000276  20                 	db	32
  1111   000277  68                 	db	104	;'h'
  1112   000278  61                 	db	97	;'a'
  1113   000279  20                 	db	32
  1114   00027A  61                 	db	97	;'a'
  1115   00027B  20                 	db	32
  1116   00027C  6C                 	db	108	;'l'
  1117   00027D  61                 	db	97	;'a'
  1118   00027E  20                 	db	32
  1119   00027F  73                 	db	115	;'s'
  1120   000280  61                 	db	97	;'a'
  1121   000281  6C                 	db	108	;'l'
  1122   000282  61                 	db	97	;'a'
  1123   000283  3F                 	db	63	;'?'
  1124   000284  0D                 	db	13
  1125   000285  0A                 	db	10
  1126   000286  00                 	db	0
  1127   000287                     STR_6:
  1128   000287  54                 	db	84	;'T'
  1129   000288  72                 	db	114	;'r'
  1130   000289  69                 	db	105	;'i'
  1131   00028A  61                 	db	97	;'a'
  1132   00028B  20                 	db	32
  1133   00028C  75                 	db	117	;'u'
  1134   00028D  6E                 	db	110	;'n'
  1135   00028E  61                 	db	97	;'a'
  1136   00028F  20                 	db	32
  1137   000290  6F                 	db	111	;'o'
  1138   000291  70                 	db	112	;'p'
  1139   000292  63                 	db	99	;'c'
  1140   000293  69                 	db	105	;'i'
  1141   000294  C3                 	db	-61
  1142   000295  B3                 	db	-77
  1143   000296  3A                 	db	58	;':'
  1144   000297  0D                 	db	13
  1145   000298  0A                 	db	10
  1146   000299  00                 	db	0
  1147   00029A                     STR_3:
  1148   00029A  2D                 	db	45
  1149   00029B  2D                 	db	45
  1150   00029C  2D                 	db	45
  1151   00029D  2D                 	db	45
  1152   00029E  2D                 	db	45
  1153   00029F  2D                 	db	45
  1154   0002A0  2D                 	db	45
  1155   0002A1  2D                 	db	45
  1156   0002A2  2D                 	db	45
  1157   0002A3  2D                 	db	45
  1158   0002A4  2D                 	db	45
  1159   0002A5  2D                 	db	45
  1160   0002A6  2D                 	db	45
  1161   0002A7  2D                 	db	45
  1162   0002A8  2D                 	db	45
  1163   0002A9  0D                 	db	13
  1164   0002AA  0A                 	db	10
  1165   0002AB  00                 	db	0
  1166   0002AC                     STR_4:
  1167   0002AC  4D                 	db	77	;'M'
  1168   0002AD  65                 	db	101	;'e'
  1169   0002AE  6E                 	db	110	;'n'
  1170   0002AF  C3                 	db	-61
  1171   0002B0  BA                 	db	-70
  1172   0002B1  20                 	db	32
  1173   0002B2  70                 	db	112	;'p'
  1174   0002B3  72                 	db	114	;'r'
  1175   0002B4  69                 	db	105	;'i'
  1176   0002B5  6E                 	db	110	;'n'
  1177   0002B6  63                 	db	99	;'c'
  1178   0002B7  69                 	db	105	;'i'
  1179   0002B8  70                 	db	112	;'p'
  1180   0002B9  61                 	db	97	;'a'
  1181   0002BA  6C                 	db	108	;'l'
  1182   0002BB  0D                 	db	13
  1183   0002BC  0A                 	db	10
  1184   0002BD  00                 	db	0
  1185   0002BE                     STR_11:
  1186   0002BE  48                 	db	72	;'H'
  1187   0002BF  61                 	db	97	;'a'
  1188   0002C0  73                 	db	115	;'s'
  1189   0002C1  20                 	db	32
  1190   0002C2  70                 	db	112	;'p'
  1191   0002C3  75                 	db	117	;'u'
  1192   0002C4  6C                 	db	108	;'l'
  1193   0002C5  73                 	db	115	;'s'
  1194   0002C6  61                 	db	97	;'a'
  1195   0002C7  64                 	db	100	;'d'
  1196   0002C8  6F                 	db	111	;'o'
  1197   0002C9  20                 	db	32
  1198   0002CA  31                 	db	49	;'1'
  1199   0002CB  00                 	db	0
  1200   0002CC                     STR_12:
  1201   0002CC  48                 	db	72	;'H'
  1202   0002CD  61                 	db	97	;'a'
  1203   0002CE  73                 	db	115	;'s'
  1204   0002CF  20                 	db	32
  1205   0002D0  70                 	db	112	;'p'
  1206   0002D1  75                 	db	117	;'u'
  1207   0002D2  6C                 	db	108	;'l'
  1208   0002D3  73                 	db	115	;'s'
  1209   0002D4  61                 	db	97	;'a'
  1210   0002D5  64                 	db	100	;'d'
  1211   0002D6  6F                 	db	111	;'o'
  1212   0002D7  20                 	db	32
  1213   0002D8  32                 	db	50	;'2'
  1214   0002D9  00                 	db	0
  1215   0002DA                     STR_13:
  1216   0002DA  48                 	db	72	;'H'
  1217   0002DB  61                 	db	97	;'a'
  1218   0002DC  73                 	db	115	;'s'
  1219   0002DD  20                 	db	32
  1220   0002DE  70                 	db	112	;'p'
  1221   0002DF  75                 	db	117	;'u'
  1222   0002E0  6C                 	db	108	;'l'
  1223   0002E1  73                 	db	115	;'s'
  1224   0002E2  61                 	db	97	;'a'
  1225   0002E3  64                 	db	100	;'d'
  1226   0002E4  6F                 	db	111	;'o'
  1227   0002E5  20                 	db	32
  1228   0002E6  33                 	db	51	;'3'
  1229   0002E7  00                 	db	0
  1230   0002E8                     STR_10:
  1231   0002E8  4F                 	db	79	;'O'
  1232   0002E9  70                 	db	112	;'p'
  1233   0002EA  63                 	db	99	;'c'
  1234   0002EB  69                 	db	105	;'i'
  1235   0002EC  C3                 	db	-61
  1236   0002ED  B3                 	db	-77
  1237   0002EE  3A                 	db	58	;':'
  1238   0002EF  20                 	db	32
  1239   0002F0  00                 	db	0
  1240   0002F1                     STR_1:
  1241   0002F1  55                 	db	85	;'U'
  1242   0002F2  49                 	db	73	;'I'
  1243   0002F3  44                 	db	68	;'D'
  1244   0002F4  3A                 	db	58	;':'
  1245   0002F5  20                 	db	32
  1246   0002F6  00                 	db	0
  1247   00029A                     STR_5           equ	STR_3
  1248   0002A9                     STR_2           equ	STR_3+15
  1249   0002F7  00                 	db	0	; dummy byte at the end
  1250   000200                     __smallconst    set	__psmallconst
  1251   000200                     __mediumconst   set	__psmallconst
  1252   000002                     __activetblptr  equ	2
  1253                           
  1254                           ; #config settings
  1255                           
  1256                           	psect	cinit
  1257   00106A                     __pcinit:
  1258                           	callstack 0
  1259   00106A                     start_initialization:
  1260                           	callstack 0
  1261   00106A                     __initialization:
  1262                           	callstack 0
  1263                           
  1264                           ; Clear objects allocated to COMRAM (52 bytes)
  1265   00106A  EE00  F001         	lfsr	0,__pbssCOMRAM
  1266   00106E  0E34               	movlw	52
  1267   001070                     clear_0:
  1268   001070  6AEE               	clrf	postinc0,c
  1269   001072  06E8               	decf	wreg,f,c
  1270   001074  E1FD               	bnz	clear_0
  1271   001076                     end_of_initialization:
  1272                           	callstack 0
  1273   001076                     __end_of__initialization:
  1274                           	callstack 0
  1275   001076  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1276   001078  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1277   00107A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1278   00107C  6EF8               	movwf	tblptru,c
  1279   00107E  0100               	movlb	0
  1280   001080  EFE8  F007         	goto	_main	;jump to C main() function
  1281                           
  1282                           	psect	bssCOMRAM
  1283   000001                     __pbssCOMRAM:
  1284                           	callstack 0
  1285   000001                     _Timers:
  1286                           	callstack 0
  1287   000001                     	ds	20
  1288   000015                     _Tics:
  1289                           	callstack 0
  1290   000015                     	ds	4
  1291   000019                     	ds	2
  1292   00001B                     motorTerminal@state:
  1293                           	callstack 0
  1294   00001B                     	ds	1
  1295   00001C                     _hashtag_pressed:
  1296                           	callstack 0
  1297   00001C                     	ds	1
  1298   00001D                     _ColumnAct:
  1299                           	callstack 0
  1300   00001D                     	ds	1
  1301   00001E                     _RowAct:
  1302                           	callstack 0
  1303   00001E                     	ds	1
  1304   00001F                     _Columns:
  1305                           	callstack 0
  1306   00001F                     	ds	1
  1307   000020                     _Rows:
  1308                           	callstack 0
  1309   000020                     	ds	1
  1310   000021                     motor_RFID@TagType:
  1311                           	callstack 0
  1312   000021                     	ds	1
  1313   000022                     	ds	1
  1314   000023                     motor_RFID@i:
  1315                           	callstack 0
  1316   000023                     	ds	1
  1317   000024                     motor_RFID@n:
  1318                           	callstack 0
  1319   000024                     	ds	1
  1320   000025                     motor_RFID@waitIRq:
  1321                           	callstack 0
  1322   000025                     	ds	1
  1323   000026                     motor_RFID@irqEn:
  1324                           	callstack 0
  1325   000026                     	ds	1
  1326   000027                     motor_RFID@substate:
  1327                           	callstack 0
  1328   000027                     	ds	1
  1329   000028                     motor_RFID@state:
  1330                           	callstack 0
  1331   000028                     	ds	1
  1332   000029                     _state:
  1333                           	callstack 0
  1334   000029                     	ds	1
  1335   00002A                     _tecla:
  1336                           	callstack 0
  1337   00002A                     	ds	1
  1338   00002B                     _Columnas:
  1339                           	callstack 0
  1340   00002B                     	ds	1
  1341   00002C                     _Filas:
  1342                           	callstack 0
  1343   00002C                     	ds	1
  1344   00002D                     motor_RFID@UID:
  1345                           	callstack 0
  1346   00002D                     	ds	6
  1347   000033                     _Timer:
  1348                           	callstack 0
  1349   000033                     	ds	1
  1350   000034                     _timer:
  1351                           	callstack 0
  1352   000034                     	ds	1
  1353                           
  1354                           	psect	cstackCOMRAM
  1355   000035                     __pcstackCOMRAM:
  1356                           	callstack 0
  1357   000035                     ??_LowRSI:
  1358                           
  1359                           ; 1 bytes @ 0x0
  1360   000035                     	ds	1
  1361   000036                     ?_Terminal_TXAvailable:
  1362                           	callstack 0
  1363   000036                     ?_TI_GetTics:
  1364                           	callstack 0
  1365   000036                     TI_Init@counter:
  1366                           	callstack 0
  1367   000036                     TI_NewTimer@TimerHandle:
  1368                           	callstack 0
  1369   000036                     TI_ResetTics@TimerHandle:
  1370                           	callstack 0
  1371   000036                     Terminal_SendChar@c:
  1372                           	callstack 0
  1373   000036                     ??_GetTecla:
  1374   000036                     ??_delay_us:
  1375   000036                     
  1376                           ; 1 bytes @ 0x1
  1377   000036                     	ds	1
  1378   000037                     
  1379                           ; 1 bytes @ 0x2
  1380   000037                     	ds	1
  1381   000038                     TI_NewTimer@Comptador:
  1382                           	callstack 0
  1383   000038                     GetTecla@keymap:
  1384                           	callstack 0
  1385   000038                     ??_Terminal_TXAvailable:
  1386                           
  1387                           ; 1 bytes @ 0x3
  1388   000038                     	ds	1
  1389   000039                     delay_us@howMany:
  1390                           	callstack 0
  1391   000039                     Terminal_SendString@str:
  1392                           	callstack 0
  1393   000039                     
  1394                           ; 1 bytes @ 0x4
  1395   000039                     	ds	1
  1396   00003A                     delay_us@x:
  1397                           	callstack 0
  1398   00003A                     ??_TI_GetTics:
  1399                           
  1400                           ; 1 bytes @ 0x5
  1401   00003A                     	ds	1
  1402   00003B                     displayUID@uid:
  1403                           	callstack 0
  1404   00003B                     ??_MFRC522_Rd:
  1405   00003B                     
  1406                           ; 1 bytes @ 0x6
  1407   00003B                     	ds	1
  1408   00003C                     MFRC522_Rd@Address:
  1409                           	callstack 0
  1410   00003C                     ??_displayUID:
  1411                           
  1412                           ; 1 bytes @ 0x7
  1413   00003C                     	ds	1
  1414   00003D                     MFRC522_Rd@ucAddr:
  1415                           	callstack 0
  1416   00003D                     displayUID@hexString:
  1417                           	callstack 0
  1418                           
  1419                           ; 11 bytes @ 0x8
  1420   00003D                     	ds	1
  1421   00003E                     MFRC522_Rd@ucResult:
  1422                           	callstack 0
  1423   00003E                     TI_GetTics@CopiaTicsActual:
  1424                           	callstack 0
  1425                           
  1426                           ; 4 bytes @ 0x9
  1427   00003E                     	ds	1
  1428   00003F                     MFRC522_Rd@i:
  1429                           	callstack 0
  1430                           
  1431                           ; 1 bytes @ 0xA
  1432   00003F                     	ds	1
  1433   000040                     MFRC522_Wr@value:
  1434                           	callstack 0
  1435                           
  1436                           ; 1 bytes @ 0xB
  1437   000040                     	ds	1
  1438   000041                     ??_MFRC522_Wr:
  1439                           
  1440                           ; 1 bytes @ 0xC
  1441   000041                     	ds	1
  1442   000042                     TI_GetTics@TimerHandle:
  1443                           	callstack 0
  1444   000042                     MFRC522_Wr@Address:
  1445                           	callstack 0
  1446                           
  1447                           ; 1 bytes @ 0xD
  1448   000042                     	ds	1
  1449   000043                     MFRC522_Wr@ucAddr:
  1450                           	callstack 0
  1451                           
  1452                           ; 1 bytes @ 0xE
  1453   000043                     	ds	1
  1454   000044                     GetTecla@columna:
  1455                           	callstack 0
  1456   000044                     MFRC522_Wr@i:
  1457                           	callstack 0
  1458                           
  1459                           ; 1 bytes @ 0xF
  1460   000044                     	ds	1
  1461   000045                     GetTecla@fila:
  1462                           	callstack 0
  1463   000045                     MFRC522_Clear_Bit@mask:
  1464                           	callstack 0
  1465   000045                     MFRC522_Set_Bit@mask:
  1466                           	callstack 0
  1467   000045                     
  1468                           ; 1 bytes @ 0x10
  1469   000045                     	ds	1
  1470   000046                     MFRC522_Set_Bit@addr:
  1471                           	callstack 0
  1472   000046                     ??_MFRC522_Clear_Bit:
  1473   000046                     
  1474                           ; 1 bytes @ 0x11
  1475   000046                     	ds	1
  1476   000047                     MFRC522_Clear_Bit@addr:
  1477                           	callstack 0
  1478   000047                     
  1479                           ; 1 bytes @ 0x12
  1480   000047                     	ds	1
  1481   000048                     _displayUID$822:
  1482                           	callstack 0
  1483   000048                     
  1484                           ; 1 bytes @ 0x13
  1485   000048                     	ds	2
  1486   00004A                     _displayUID$823:
  1487                           	callstack 0
  1488                           
  1489                           ; 2 bytes @ 0x15
  1490   00004A                     	ds	2
  1491   00004C                     displayUID@i:
  1492                           	callstack 0
  1493                           
  1494                           ; 2 bytes @ 0x17
  1495   00004C                     	ds	2
  1496   00004E                     displayUID@nibble:
  1497                           	callstack 0
  1498                           
  1499                           ; 1 bytes @ 0x19
  1500   00004E                     	ds	1
  1501   00004F                     ??_motor_RFID:
  1502                           
  1503                           ; 1 bytes @ 0x1A
  1504   00004F                     	ds	2
  1505   000051                     motor_RFID@backBitsCalc:
  1506                           	callstack 0
  1507                           
  1508                           ; 2 bytes @ 0x1C
  1509   000051                     	ds	2
  1510   000053                     motor_RFID@fifoLevel:
  1511                           	callstack 0
  1512                           
  1513                           ; 1 bytes @ 0x1E
  1514   000053                     	ds	1
  1515   000054                     motor_RFID@lastBitsVal:
  1516                           	callstack 0
  1517                           
  1518                           ; 1 bytes @ 0x1F
  1519   000054                     	ds	1
  1520   000055                     
  1521                           ; 1 bytes @ 0x20
  1522 ;;
  1523 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1524 ;;
  1525 ;; *************** function _main *****************
  1526 ;; Defined at:
  1527 ;;		line 36 in file "main.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1
  1541 ;;      Params:         0       0       0
  1542 ;;      Locals:         0       0       0
  1543 ;;      Temps:          0       0       0
  1544 ;;      Totals:         0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels required when called: 9
  1547 ;; This function calls:
  1548 ;;		_TI_Init
  1549 ;;		_Terminal_Init
  1550 ;;		_initPorts
  1551 ;;		_initRFID
  1552 ;;		_initTeclado
  1553 ;;		_motorTeclado
  1554 ;;		_motorTerminal
  1555 ;;		_motor_RFID
  1556 ;; This function is called by:
  1557 ;;		Startup code after reset
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text0
  1562   000FD0                     __ptext0:
  1563                           	callstack 0
  1564   000FD0                     _main:
  1565                           	callstack 22
  1566   000FD0                     
  1567                           ;main.c: 37:  ADCON1 = 0xFF;
  1568   000FD0  ECCE  F007         	call	_TI_Init	;wreg free
  1569                           
  1570                           ;main.c: 38:  TRISA = 0x00;
  1571   000FD4  EC5B  F008         	call	_initTeclado	;wreg free
  1572   000FD8                     
  1573                           ;main.c: 39: }
  1574   000FD8  EC9F  F008         	call	_initRFID	;wreg free
  1575   000FDC                     
  1576                           ;main.c: 40: 
  1577   000FDC  EC85  F008         	call	_Terminal_Init	;wreg free
  1578   000FE0                     
  1579                           ;main.c: 41: 
  1580   000FE0  ECB2  F008         	call	_initPorts	;wreg free
  1581   000FE4                     
  1582                           ;main.c: 44: 
  1583   000FE4  8EF2               	bsf	242,7,c	;volatile
  1584   000FE6                     
  1585                           ;main.c: 45: 
  1586   000FE6  8CF2               	bsf	242,6,c	;volatile
  1587   000FE8                     l3089:
  1588   000FE8  6A89               	clrf	137,c	;volatile
  1589   000FEA  EC84  F003         	call	_motorTeclado	;wreg free
  1590   000FEE  EC9C  F004         	call	_motorTerminal	;wreg free
  1591   000FF2  EC7C  F001         	call	_motor_RFID	;wreg free
  1592   000FF6  6889               	setf	137,c	;volatile
  1593   000FF8  EFF4  F007         	goto	l3089
  1594   000FFC  EF13  F000         	goto	start
  1595   001000                     __end_of_main:
  1596                           	callstack 0
  1597                           
  1598 ;; *************** function _motor_RFID *****************
  1599 ;; Defined at:
  1600 ;;		line 316 in file "TAD_RFID.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  fifoLevel       1    0        unsigned char 
  1605 ;;  backBitsCalc    2   28[COMRAM] unsigned int 
  1606 ;;  lastBitsVal     1   31[COMRAM] unsigned char 
  1607 ;;  fifoLevel       1   30[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1
  1617 ;;      Params:         0       0       0
  1618 ;;      Locals:         4       0       0
  1619 ;;      Temps:          2       0       0
  1620 ;;      Totals:         6       0       0
  1621 ;;Total ram usage:        6 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; Hardware stack levels required when called: 6
  1624 ;; This function calls:
  1625 ;;		_MFRC522_Clear_Bit
  1626 ;;		_MFRC522_Rd
  1627 ;;		_MFRC522_Set_Bit
  1628 ;;		_MFRC522_Wr
  1629 ;;		_displayUID
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text1
  1636   0002F8                     __ptext1:
  1637                           	callstack 0
  1638   0002F8                     _motor_RFID:
  1639                           	callstack 24
  1640   0002F8                     
  1641                           ;TAD_RFID.c: 317:     static char state = 0;;TAD_RFID.c: 318:     static char substate =
      +                           0;;TAD_RFID.c: 319:     static char irqEn, waitIRq, n;;TAD_RFID.c: 320:     static unsi
      +                          gned char i;;TAD_RFID.c: 321:     static char _status;;TAD_RFID.c: 322:     static unsig
      +                          ned unLen;;TAD_RFID.c: 323:     static char TagType;;TAD_RFID.c: 324:     static unsigne
      +                          d char UID[6];;TAD_RFID.c: 326:     switch(state) {
  1642   0002F8  EF74  F003         	goto	l3013
  1643   0002FC                     l2835:
  1644                           
  1645                           ;TAD_RFID.c: 332:                     MFRC522_Wr(0x0D, 0x07);
  1646   0002FC  0E07               	movlw	7
  1647   0002FE  6E40               	movwf	MFRC522_Wr@value^0,c
  1648   000300  0E0D               	movlw	13
  1649   000302  ECF8  F005         	call	_MFRC522_Wr
  1650   000306                     
  1651                           ;TAD_RFID.c: 333:                     TagType = 0x26;
  1652   000306  0E26               	movlw	38
  1653   000308  6E21               	movwf	motor_RFID@TagType^0,c
  1654   00030A                     l2839:
  1655                           
  1656                           ;TAD_RFID.c: 334:                     substate = 1;
  1657   00030A  0E01               	movlw	1
  1658   00030C  6E27               	movwf	motor_RFID@substate^0,c
  1659                           
  1660                           ;TAD_RFID.c: 335:                     break;
  1661   00030E  EF83  F003         	goto	l389
  1662   000312                     l2841:
  1663                           
  1664                           ;TAD_RFID.c: 338:                     irqEn = 0x77;
  1665   000312  0E77               	movlw	119
  1666   000314  6E26               	movwf	motor_RFID@irqEn^0,c
  1667                           
  1668                           ;TAD_RFID.c: 339:                     waitIRq = 0x30;
  1669   000316  0E30               	movlw	48
  1670   000318  6E25               	movwf	motor_RFID@waitIRq^0,c
  1671   00031A                     
  1672                           ;TAD_RFID.c: 340:                     MFRC522_Wr(0x02, irqEn | 0x80);
  1673   00031A  0EF7               	movlw	247
  1674   00031C  6E40               	movwf	MFRC522_Wr@value^0,c
  1675   00031E  0E02               	movlw	2
  1676   000320  ECF8  F005         	call	_MFRC522_Wr
  1677   000324                     l2845:
  1678                           
  1679                           ;TAD_RFID.c: 341:                     substate = 2;
  1680   000324  0E02               	movlw	2
  1681   000326  6E27               	movwf	motor_RFID@substate^0,c
  1682                           
  1683                           ;TAD_RFID.c: 342:                     break;
  1684   000328  EF83  F003         	goto	l389
  1685   00032C                     l2847:
  1686                           
  1687                           ;TAD_RFID.c: 345:                     MFRC522_Clear_Bit(0x04, 0x80);
  1688   00032C  0E80               	movlw	128
  1689   00032E  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  1690   000330  0E04               	movlw	4
  1691   000332  EC42  F008         	call	_MFRC522_Clear_Bit
  1692   000336                     l2849:
  1693                           
  1694                           ;TAD_RFID.c: 346:                     substate = 3;
  1695   000336  0E03               	movlw	3
  1696   000338  6E27               	movwf	motor_RFID@substate^0,c
  1697                           
  1698                           ;TAD_RFID.c: 347:                     break;
  1699   00033A  EF83  F003         	goto	l389
  1700   00033E                     l2851:
  1701                           
  1702                           ;TAD_RFID.c: 350:                     MFRC522_Set_Bit(0x0A, 0x80);
  1703   00033E  0E80               	movlw	128
  1704   000340  6E45               	movwf	MFRC522_Set_Bit@mask^0,c
  1705   000342  0E0A               	movlw	10
  1706   000344  EC7B  F008         	call	_MFRC522_Set_Bit
  1707   000348                     l2853:
  1708                           
  1709                           ;TAD_RFID.c: 351:                     substate = 4;
  1710   000348  0E04               	movlw	4
  1711   00034A  6E27               	movwf	motor_RFID@substate^0,c
  1712                           
  1713                           ;TAD_RFID.c: 352:                     break;
  1714   00034C  EF83  F003         	goto	l389
  1715   000350                     l2855:
  1716                           
  1717                           ;TAD_RFID.c: 355:                     MFRC522_Wr(0x01, 0x00);
  1718   000350  0E00               	movlw	0
  1719   000352  6E40               	movwf	MFRC522_Wr@value^0,c
  1720   000354  0E01               	movlw	1
  1721   000356  ECF8  F005         	call	_MFRC522_Wr
  1722   00035A                     l2857:
  1723                           
  1724                           ;TAD_RFID.c: 356:                     substate = 5;
  1725   00035A  0E05               	movlw	5
  1726   00035C  6E27               	movwf	motor_RFID@substate^0,c
  1727                           
  1728                           ;TAD_RFID.c: 357:                     break;
  1729   00035E  EF83  F003         	goto	l389
  1730   000362                     l2859:
  1731                           
  1732                           ;TAD_RFID.c: 360:                     MFRC522_Wr(0x09, TagType);
  1733   000362  C021  F040         	movff	motor_RFID@TagType,MFRC522_Wr@value
  1734   000366  0E09               	movlw	9
  1735   000368  ECF8  F005         	call	_MFRC522_Wr
  1736   00036C                     l2861:
  1737                           
  1738                           ;TAD_RFID.c: 361:                     substate = 6;
  1739   00036C  0E06               	movlw	6
  1740   00036E  6E27               	movwf	motor_RFID@substate^0,c
  1741                           
  1742                           ;TAD_RFID.c: 362:                     break;
  1743   000370  EF83  F003         	goto	l389
  1744   000374                     l2863:
  1745                           
  1746                           ;TAD_RFID.c: 365:                     MFRC522_Wr(0x01, 0x0C);
  1747   000374  0E0C               	movlw	12
  1748   000376  6E40               	movwf	MFRC522_Wr@value^0,c
  1749   000378  0E01               	movlw	1
  1750   00037A  ECF8  F005         	call	_MFRC522_Wr
  1751   00037E                     l2865:
  1752                           
  1753                           ;TAD_RFID.c: 366:                     substate = 7;
  1754   00037E  0E07               	movlw	7
  1755   000380  6E27               	movwf	motor_RFID@substate^0,c
  1756                           
  1757                           ;TAD_RFID.c: 367:                     break;
  1758   000382  EF83  F003         	goto	l389
  1759   000386                     l2867:
  1760                           
  1761                           ;TAD_RFID.c: 370:                     MFRC522_Set_Bit(0x0D, 0x80);
  1762   000386  0E80               	movlw	128
  1763   000388  6E45               	movwf	MFRC522_Set_Bit@mask^0,c
  1764   00038A  0E0D               	movlw	13
  1765   00038C  EC7B  F008         	call	_MFRC522_Set_Bit
  1766   000390                     
  1767                           ;TAD_RFID.c: 371:                     i = 0xFF;
  1768   000390  6823               	setf	motor_RFID@i^0,c
  1769   000392                     l2871:
  1770                           
  1771                           ;TAD_RFID.c: 372:                     substate = 8;
  1772   000392  0E08               	movlw	8
  1773   000394  6E27               	movwf	motor_RFID@substate^0,c
  1774                           
  1775                           ;TAD_RFID.c: 373:                     break;
  1776   000396  EF83  F003         	goto	l389
  1777   00039A                     l2873:
  1778                           
  1779                           ;TAD_RFID.c: 376:                     n = MFRC522_Rd(0x04);
  1780   00039A  0E04               	movlw	4
  1781   00039C  EC4C  F006         	call	_MFRC522_Rd
  1782   0003A0  6E24               	movwf	motor_RFID@n^0,c
  1783   0003A2                     
  1784                           ;TAD_RFID.c: 377:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  1785   0003A2  B024               	btfsc	motor_RFID@n^0,0,c
  1786   0003A4  EFD6  F001         	goto	u1991
  1787   0003A8  EFD8  F001         	goto	u1990
  1788   0003AC                     u1991:
  1789   0003AC  EFE5  F001         	goto	l2881
  1790   0003B0                     u1990:
  1791   0003B0  5024               	movf	motor_RFID@n^0,w,c
  1792   0003B2  1425               	andwf	motor_RFID@waitIRq^0,w,c
  1793   0003B4  0900               	iorlw	0
  1794   0003B6  A4D8               	btfss	status,2,c
  1795   0003B8  EFE0  F001         	goto	u2001
  1796   0003BC  EFE2  F001         	goto	u2000
  1797   0003C0                     u2001:
  1798   0003C0  EFE5  F001         	goto	l2881
  1799   0003C4                     u2000:
  1800   0003C4  2E23               	decfsz	motor_RFID@i^0,f,c
  1801   0003C6  EF83  F003         	goto	l389
  1802   0003CA                     l2881:
  1803                           
  1804                           ;TAD_RFID.c: 378:                         substate = 9;
  1805   0003CA  0E09               	movlw	9
  1806   0003CC  6E27               	movwf	motor_RFID@substate^0,c
  1807   0003CE  EF83  F003         	goto	l389
  1808   0003D2                     l2883:
  1809                           
  1810                           ;TAD_RFID.c: 383:                     MFRC522_Clear_Bit(0x0D, 0x80);
  1811   0003D2  0E80               	movlw	128
  1812   0003D4  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  1813   0003D6  0E0D               	movlw	13
  1814   0003D8  EC42  F008         	call	_MFRC522_Clear_Bit
  1815   0003DC                     l2885:
  1816                           
  1817                           ;TAD_RFID.c: 384:                     substate = 10;
  1818   0003DC  0E0A               	movlw	10
  1819   0003DE  6E27               	movwf	motor_RFID@substate^0,c
  1820                           
  1821                           ;TAD_RFID.c: 385:                     break;
  1822   0003E0  EF83  F003         	goto	l389
  1823   0003E4                     l2887:
  1824                           
  1825                           ;TAD_RFID.c: 388:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  1826   0003E4  5023               	movf	motor_RFID@i^0,w,c
  1827   0003E6  B4D8               	btfsc	status,2,c
  1828   0003E8  EFF8  F001         	goto	u2011
  1829   0003EC  EFFA  F001         	goto	u2010
  1830   0003F0                     u2011:
  1831   0003F0  EF44  F002         	goto	l2903
  1832   0003F4                     u2010:
  1833   0003F4  0E06               	movlw	6
  1834   0003F6  EC4C  F006         	call	_MFRC522_Rd
  1835   0003FA  6E4F               	movwf	??_motor_RFID^0,c
  1836   0003FC  0E1B               	movlw	27
  1837   0003FE  164F               	andwf	??_motor_RFID^0,f,c
  1838   000400  A4D8               	btfss	status,2,c
  1839   000402  EF05  F002         	goto	u2021
  1840   000406  EF07  F002         	goto	u2020
  1841   00040A                     u2021:
  1842   00040A  EF44  F002         	goto	l2903
  1843   00040E                     u2020:
  1844   00040E                     
  1845                           ;TAD_RFID.c: 389:                         unsigned char fifoLevel = MFRC522_Rd(0x0A);
  1846   00040E  0E0A               	movlw	10
  1847   000410  EC4C  F006         	call	_MFRC522_Rd
  1848   000414  6E53               	movwf	motor_RFID@fifoLevel^0,c
  1849                           
  1850                           ;TAD_RFID.c: 390:                         unsigned char lastBitsVal = MFRC522_Rd(0x0C) &
      +                           0x07;
  1851   000416  0E0C               	movlw	12
  1852   000418  EC4C  F006         	call	_MFRC522_Rd
  1853   00041C  0B07               	andlw	7
  1854   00041E  6E54               	movwf	motor_RFID@lastBitsVal^0,c
  1855   000420                     
  1856                           ;TAD_RFID.c: 391:                         unsigned backBitsCalc;;TAD_RFID.c: 392:       
      +                                            if (lastBitsVal)
  1857   000420  5054               	movf	motor_RFID@lastBitsVal^0,w,c
  1858   000422  B4D8               	btfsc	status,2,c
  1859   000424  EF16  F002         	goto	u2031
  1860   000428  EF18  F002         	goto	u2030
  1861   00042C                     u2031:
  1862   00042C  EF30  F002         	goto	l2897
  1863   000430                     u2030:
  1864   000430                     
  1865                           ;TAD_RFID.c: 393:                             backBitsCalc = (fifoLevel - 1) * 8 + lastB
      +                          itsVal;
  1866   000430  5054               	movf	motor_RFID@lastBitsVal^0,w,c
  1867   000432  C053  F04F         	movff	motor_RFID@fifoLevel,??_motor_RFID
  1868   000436  6A50               	clrf	(??_motor_RFID+1)^0,c
  1869   000438  90D8               	bcf	status,0,c
  1870   00043A  364F               	rlcf	??_motor_RFID^0,f,c
  1871   00043C  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  1872   00043E  90D8               	bcf	status,0,c
  1873   000440  364F               	rlcf	??_motor_RFID^0,f,c
  1874   000442  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  1875   000444  90D8               	bcf	status,0,c
  1876   000446  364F               	rlcf	??_motor_RFID^0,f,c
  1877   000448  3650               	rlcf	(??_motor_RFID+1)^0,f,c
  1878   00044A  264F               	addwf	??_motor_RFID^0,f,c
  1879   00044C  0E00               	movlw	0
  1880   00044E  2250               	addwfc	(??_motor_RFID+1)^0,f,c
  1881   000450  0EF8               	movlw	248
  1882   000452  244F               	addwf	??_motor_RFID^0,w,c
  1883   000454  6E51               	movwf	motor_RFID@backBitsCalc^0,c
  1884   000456  0EFF               	movlw	255
  1885   000458  2050               	addwfc	(??_motor_RFID+1)^0,w,c
  1886   00045A  6E52               	movwf	(motor_RFID@backBitsCalc+1)^0,c
  1887   00045C  EF36  F002         	goto	l2899
  1888   000460                     l2897:
  1889                           
  1890                           ;TAD_RFID.c: 395:                             backBitsCalc = fifoLevel * 8;
  1891   000460  5053               	movf	motor_RFID@fifoLevel^0,w,c
  1892   000462  0D08               	mullw	8
  1893   000464  CFF3 F051          	movff	prodl,motor_RFID@backBitsCalc
  1894   000468  CFF4 F052          	movff	prodh,motor_RFID@backBitsCalc+1
  1895   00046C                     l2899:
  1896                           
  1897                           ;TAD_RFID.c: 397:                         if (backBitsCalc == 0x10) {
  1898   00046C  0E10               	movlw	16
  1899   00046E  1851               	xorwf	motor_RFID@backBitsCalc^0,w,c
  1900   000470  1052               	iorwf	(motor_RFID@backBitsCalc+1)^0,w,c
  1901   000472  A4D8               	btfss	status,2,c
  1902   000474  EF3E  F002         	goto	u2041
  1903   000478  EF40  F002         	goto	u2040
  1904   00047C                     u2041:
  1905   00047C  EF44  F002         	goto	l2903
  1906   000480                     u2040:
  1907   000480                     l2901:
  1908                           
  1909                           ;TAD_RFID.c: 398:                             substate = 11;
  1910   000480  0E0B               	movlw	11
  1911   000482  6E27               	movwf	motor_RFID@substate^0,c
  1912                           
  1913                           ;TAD_RFID.c: 399:                         } else {
  1914   000484  EF83  F003         	goto	l389
  1915   000488                     l2903:
  1916                           
  1917                           ;TAD_RFID.c: 400:                             substate = 12;
  1918   000488  0E0C               	movlw	12
  1919   00048A  6E27               	movwf	motor_RFID@substate^0,c
  1920   00048C  EF83  F003         	goto	l389
  1921   000490                     l2907:
  1922                           
  1923                           ;TAD_RFID.c: 408:                     state = 1;
  1924   000490  0E01               	movlw	1
  1925   000492  6E28               	movwf	motor_RFID@state^0,c
  1926   000494                     l2909:
  1927                           
  1928                           ;TAD_RFID.c: 409:                     substate = 0;
  1929   000494  6A27               	clrf	motor_RFID@substate^0,c
  1930                           
  1931                           ;TAD_RFID.c: 410:                     break;
  1932   000496  EF83  F003         	goto	l389
  1933   00049A                     l360:
  1934                           
  1935                           ;TAD_RFID.c: 413:                     state = 0;
  1936   00049A  6A28               	clrf	motor_RFID@state^0,c
  1937                           
  1938                           ;TAD_RFID.c: 414:                     substate = 0;
  1939   00049C  6A27               	clrf	motor_RFID@substate^0,c
  1940                           
  1941                           ;TAD_RFID.c: 415:                     break;
  1942   00049E  EF83  F003         	goto	l389
  1943   0004A2                     l2913:
  1944   0004A2  5027               	movf	motor_RFID@substate^0,w,c
  1945                           
  1946                           ; Switch size 1, requested type "simple"
  1947                           ; Number of cases is 13, Range of values is 0 to 12
  1948                           ; switch strategies available:
  1949                           ; Name         Instructions Cycles
  1950                           ; simple_byte           40    21 (average)
  1951                           ;	Chosen strategy is simple_byte
  1952   0004A4  0A00               	xorlw	0	; case 0
  1953   0004A6  B4D8               	btfsc	status,2,c
  1954   0004A8  EF7E  F001         	goto	l2835
  1955   0004AC  0A01               	xorlw	1	; case 1
  1956   0004AE  B4D8               	btfsc	status,2,c
  1957   0004B0  EF89  F001         	goto	l2841
  1958   0004B4  0A03               	xorlw	3	; case 2
  1959   0004B6  B4D8               	btfsc	status,2,c
  1960   0004B8  EF96  F001         	goto	l2847
  1961   0004BC  0A01               	xorlw	1	; case 3
  1962   0004BE  B4D8               	btfsc	status,2,c
  1963   0004C0  EF9F  F001         	goto	l2851
  1964   0004C4  0A07               	xorlw	7	; case 4
  1965   0004C6  B4D8               	btfsc	status,2,c
  1966   0004C8  EFA8  F001         	goto	l2855
  1967   0004CC  0A01               	xorlw	1	; case 5
  1968   0004CE  B4D8               	btfsc	status,2,c
  1969   0004D0  EFB1  F001         	goto	l2859
  1970   0004D4  0A03               	xorlw	3	; case 6
  1971   0004D6  B4D8               	btfsc	status,2,c
  1972   0004D8  EFBA  F001         	goto	l2863
  1973   0004DC  0A01               	xorlw	1	; case 7
  1974   0004DE  B4D8               	btfsc	status,2,c
  1975   0004E0  EFC3  F001         	goto	l2867
  1976   0004E4  0A0F               	xorlw	15	; case 8
  1977   0004E6  B4D8               	btfsc	status,2,c
  1978   0004E8  EFCD  F001         	goto	l2873
  1979   0004EC  0A01               	xorlw	1	; case 9
  1980   0004EE  B4D8               	btfsc	status,2,c
  1981   0004F0  EFE9  F001         	goto	l2883
  1982   0004F4  0A03               	xorlw	3	; case 10
  1983   0004F6  B4D8               	btfsc	status,2,c
  1984   0004F8  EFF2  F001         	goto	l2887
  1985   0004FC  0A01               	xorlw	1	; case 11
  1986   0004FE  B4D8               	btfsc	status,2,c
  1987   000500  EF48  F002         	goto	l2907
  1988   000504  0A07               	xorlw	7	; case 12
  1989   000506  B4D8               	btfsc	status,2,c
  1990   000508  EF4D  F002         	goto	l360
  1991   00050C  EF83  F003         	goto	l389
  1992   000510                     l2915:
  1993                           
  1994                           ;TAD_RFID.c: 423:                     MFRC522_Wr(0x0D, 0x00);
  1995   000510  0E00               	movlw	0
  1996   000512  6E40               	movwf	MFRC522_Wr@value^0,c
  1997   000514  0E0D               	movlw	13
  1998   000516  ECF8  F005         	call	_MFRC522_Wr
  1999   00051A                     
  2000                           ;TAD_RFID.c: 424:                     UID[0] = 0x93;
  2001   00051A  0E93               	movlw	147
  2002   00051C  6E2D               	movwf	motor_RFID@UID^0,c
  2003   00051E                     
  2004                           ;TAD_RFID.c: 425:                     UID[1] = 0x20;
  2005   00051E  0E20               	movlw	32
  2006   000520  6E2E               	movwf	(motor_RFID@UID+1)^0,c
  2007   000522  EF85  F001         	goto	l2839
  2008   000526                     l2923:
  2009                           
  2010                           ;TAD_RFID.c: 430:                     MFRC522_Clear_Bit(0x08, 0x08);
  2011   000526  0E08               	movlw	8
  2012   000528  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  2013   00052A  0E08               	movlw	8
  2014   00052C  EC42  F008         	call	_MFRC522_Clear_Bit
  2015   000530  EF92  F001         	goto	l2845
  2016   000534                     l2927:
  2017                           
  2018                           ;TAD_RFID.c: 435:                     irqEn = 0x77;
  2019   000534  0E77               	movlw	119
  2020   000536  6E26               	movwf	motor_RFID@irqEn^0,c
  2021                           
  2022                           ;TAD_RFID.c: 436:                     waitIRq = 0x30;
  2023   000538  0E30               	movlw	48
  2024   00053A  6E25               	movwf	motor_RFID@waitIRq^0,c
  2025   00053C                     
  2026                           ;TAD_RFID.c: 437:                     MFRC522_Wr(0x02, irqEn | 0x80);
  2027   00053C  0EF7               	movlw	247
  2028   00053E  6E40               	movwf	MFRC522_Wr@value^0,c
  2029   000540  0E02               	movlw	2
  2030   000542  ECF8  F005         	call	_MFRC522_Wr
  2031   000546  EF9B  F001         	goto	l2849
  2032   00054A                     l2933:
  2033                           
  2034                           ;TAD_RFID.c: 442:                     MFRC522_Clear_Bit(0x04, 0x80);
  2035   00054A  0E80               	movlw	128
  2036   00054C  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  2037   00054E  0E04               	movlw	4
  2038   000550  EC42  F008         	call	_MFRC522_Clear_Bit
  2039   000554  EFA4  F001         	goto	l2853
  2040   000558                     l2937:
  2041                           
  2042                           ;TAD_RFID.c: 447:                     MFRC522_Set_Bit(0x0A, 0x80);
  2043   000558  0E80               	movlw	128
  2044   00055A  6E45               	movwf	MFRC522_Set_Bit@mask^0,c
  2045   00055C  0E0A               	movlw	10
  2046   00055E  EC7B  F008         	call	_MFRC522_Set_Bit
  2047   000562  EFAD  F001         	goto	l2857
  2048   000566                     l2941:
  2049                           
  2050                           ;TAD_RFID.c: 452:                     MFRC522_Wr(0x01, 0x00);
  2051   000566  0E00               	movlw	0
  2052   000568  6E40               	movwf	MFRC522_Wr@value^0,c
  2053   00056A  0E01               	movlw	1
  2054   00056C  ECF8  F005         	call	_MFRC522_Wr
  2055   000570  EFB6  F001         	goto	l2861
  2056   000574                     l2945:
  2057                           
  2058                           ;TAD_RFID.c: 457:                     MFRC522_Wr(0x09, UID[0]);
  2059   000574  C02D  F040         	movff	motor_RFID@UID,MFRC522_Wr@value
  2060   000578  0E09               	movlw	9
  2061   00057A  ECF8  F005         	call	_MFRC522_Wr
  2062                           
  2063                           ;TAD_RFID.c: 458:                     MFRC522_Wr(0x09, UID[1]);
  2064   00057E  C02E  F040         	movff	motor_RFID@UID+1,MFRC522_Wr@value
  2065   000582  0E09               	movlw	9
  2066   000584  ECF8  F005         	call	_MFRC522_Wr
  2067   000588  EFBF  F001         	goto	l2865
  2068   00058C                     l2949:
  2069                           
  2070                           ;TAD_RFID.c: 463:                     MFRC522_Wr(0x01, 0x0C);
  2071   00058C  0E0C               	movlw	12
  2072   00058E  6E40               	movwf	MFRC522_Wr@value^0,c
  2073   000590  0E01               	movlw	1
  2074   000592  ECF8  F005         	call	_MFRC522_Wr
  2075   000596  EFC9  F001         	goto	l2871
  2076   00059A                     l2953:
  2077                           
  2078                           ;TAD_RFID.c: 468:                     MFRC522_Set_Bit(0x0D, 0x80);
  2079   00059A  0E80               	movlw	128
  2080   00059C  6E45               	movwf	MFRC522_Set_Bit@mask^0,c
  2081   00059E  0E0D               	movlw	13
  2082   0005A0  EC7B  F008         	call	_MFRC522_Set_Bit
  2083   0005A4                     
  2084                           ;TAD_RFID.c: 469:                     i = 0xFF;
  2085   0005A4  6823               	setf	motor_RFID@i^0,c
  2086   0005A6  EFE5  F001         	goto	l2881
  2087   0005AA                     l2959:
  2088                           
  2089                           ;TAD_RFID.c: 474:                     n = MFRC522_Rd(0x04);
  2090   0005AA  0E04               	movlw	4
  2091   0005AC  EC4C  F006         	call	_MFRC522_Rd
  2092   0005B0  6E24               	movwf	motor_RFID@n^0,c
  2093   0005B2                     
  2094                           ;TAD_RFID.c: 475:                     if ((n & 0x01) || (n & waitIRq) || (--i == 0)) {
  2095   0005B2  B024               	btfsc	motor_RFID@n^0,0,c
  2096   0005B4  EFDE  F002         	goto	u2051
  2097   0005B8  EFE0  F002         	goto	u2050
  2098   0005BC                     u2051:
  2099   0005BC  EFEE  F001         	goto	l2885
  2100   0005C0                     u2050:
  2101   0005C0  5024               	movf	motor_RFID@n^0,w,c
  2102   0005C2  1425               	andwf	motor_RFID@waitIRq^0,w,c
  2103   0005C4  0900               	iorlw	0
  2104   0005C6  A4D8               	btfss	status,2,c
  2105   0005C8  EFE8  F002         	goto	u2061
  2106   0005CC  EFEA  F002         	goto	u2060
  2107   0005D0                     u2061:
  2108   0005D0  EFEE  F001         	goto	l2885
  2109   0005D4                     u2060:
  2110   0005D4  2E23               	decfsz	motor_RFID@i^0,f,c
  2111   0005D6  EF83  F003         	goto	l389
  2112   0005DA  EFEE  F001         	goto	l2885
  2113   0005DE                     l2969:
  2114                           
  2115                           ;TAD_RFID.c: 481:                     MFRC522_Clear_Bit(0x0D, 0x80);
  2116   0005DE  0E80               	movlw	128
  2117   0005E0  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  2118   0005E2  0E0D               	movlw	13
  2119   0005E4  EC42  F008         	call	_MFRC522_Clear_Bit
  2120   0005E8  EF40  F002         	goto	l2901
  2121   0005EC                     l2973:
  2122                           
  2123                           ;TAD_RFID.c: 486:                     if (i != 0 && !(MFRC522_Rd(0x06) & 0x1B)) {
  2124   0005EC  5023               	movf	motor_RFID@i^0,w,c
  2125   0005EE  B4D8               	btfsc	status,2,c
  2126   0005F0  EFFC  F002         	goto	u2071
  2127   0005F4  EFFE  F002         	goto	u2070
  2128   0005F8                     u2071:
  2129   0005F8  EF44  F002         	goto	l2903
  2130   0005FC                     u2070:
  2131   0005FC  0E06               	movlw	6
  2132   0005FE  EC4C  F006         	call	_MFRC522_Rd
  2133   000602  6E4F               	movwf	??_motor_RFID^0,c
  2134   000604  0E1B               	movlw	27
  2135   000606  164F               	andwf	??_motor_RFID^0,f,c
  2136   000608  A4D8               	btfss	status,2,c
  2137   00060A  EF09  F003         	goto	u2081
  2138   00060E  EF0B  F003         	goto	u2080
  2139   000612                     u2081:
  2140   000612  EF44  F002         	goto	l2903
  2141   000616                     u2080:
  2142   000616  0E0A               	movlw	10
  2143   000618  EC4C  F006         	call	_MFRC522_Rd
  2144   00061C                     
  2145                           ;TAD_RFID.c: 488:                         for (i = 0; i < 4; i++) {
  2146   00061C  6A23               	clrf	motor_RFID@i^0,c
  2147   00061E                     l2985:
  2148                           
  2149                           ;TAD_RFID.c: 489:                             UID[i] = MFRC522_Rd(0x09);
  2150   00061E  5023               	movf	motor_RFID@i^0,w,c
  2151   000620  0F2D               	addlw	low motor_RFID@UID
  2152   000622  6ED9               	movwf	fsr2l,c
  2153   000624  6ADA               	clrf	fsr2h,c
  2154   000626  0E09               	movlw	9
  2155   000628  EC4C  F006         	call	_MFRC522_Rd
  2156   00062C  6EDF               	movwf	indf2,c
  2157   00062E                     
  2158                           ;TAD_RFID.c: 490:                         }
  2159   00062E  2A23               	incf	motor_RFID@i^0,f,c
  2160   000630  0E03               	movlw	3
  2161   000632  6423               	cpfsgt	motor_RFID@i^0,c
  2162   000634  EF1E  F003         	goto	u2091
  2163   000638  EF20  F003         	goto	u2090
  2164   00063C                     u2091:
  2165   00063C  EF0F  F003         	goto	l2985
  2166   000640                     u2090:
  2167   000640                     
  2168                           ;TAD_RFID.c: 491:                         UID[4] = 0;
  2169   000640  6A31               	clrf	(motor_RFID@UID+4)^0,c
  2170   000642  EF44  F002         	goto	l2903
  2171   000646                     l2993:
  2172                           
  2173                           ;TAD_RFID.c: 497:                     displayUID(UID);
  2174   000646  0E2D               	movlw	low motor_RFID@UID
  2175   000648  6E3B               	movwf	displayUID@uid^0,c
  2176   00064A  EC1A  F005         	call	_displayUID	;wreg free
  2177   00064E                     
  2178                           ;TAD_RFID.c: 498:                     state = 2;
  2179   00064E  0E02               	movlw	2
  2180   000650  6E28               	movwf	motor_RFID@state^0,c
  2181   000652  EF4A  F002         	goto	l2909
  2182   000656                     l3001:
  2183   000656  5027               	movf	motor_RFID@substate^0,w,c
  2184                           
  2185                           ; Switch size 1, requested type "simple"
  2186                           ; Number of cases is 13, Range of values is 0 to 12
  2187                           ; switch strategies available:
  2188                           ; Name         Instructions Cycles
  2189                           ; simple_byte           40    21 (average)
  2190                           ;	Chosen strategy is simple_byte
  2191   000658  0A00               	xorlw	0	; case 0
  2192   00065A  B4D8               	btfsc	status,2,c
  2193   00065C  EF88  F002         	goto	l2915
  2194   000660  0A01               	xorlw	1	; case 1
  2195   000662  B4D8               	btfsc	status,2,c
  2196   000664  EF93  F002         	goto	l2923
  2197   000668  0A03               	xorlw	3	; case 2
  2198   00066A  B4D8               	btfsc	status,2,c
  2199   00066C  EF9A  F002         	goto	l2927
  2200   000670  0A01               	xorlw	1	; case 3
  2201   000672  B4D8               	btfsc	status,2,c
  2202   000674  EFA5  F002         	goto	l2933
  2203   000678  0A07               	xorlw	7	; case 4
  2204   00067A  B4D8               	btfsc	status,2,c
  2205   00067C  EFAC  F002         	goto	l2937
  2206   000680  0A01               	xorlw	1	; case 5
  2207   000682  B4D8               	btfsc	status,2,c
  2208   000684  EFB3  F002         	goto	l2941
  2209   000688  0A03               	xorlw	3	; case 6
  2210   00068A  B4D8               	btfsc	status,2,c
  2211   00068C  EFBA  F002         	goto	l2945
  2212   000690  0A01               	xorlw	1	; case 7
  2213   000692  B4D8               	btfsc	status,2,c
  2214   000694  EFC6  F002         	goto	l2949
  2215   000698  0A0F               	xorlw	15	; case 8
  2216   00069A  B4D8               	btfsc	status,2,c
  2217   00069C  EFCD  F002         	goto	l2953
  2218   0006A0  0A01               	xorlw	1	; case 9
  2219   0006A2  B4D8               	btfsc	status,2,c
  2220   0006A4  EFD5  F002         	goto	l2959
  2221   0006A8  0A03               	xorlw	3	; case 10
  2222   0006AA  B4D8               	btfsc	status,2,c
  2223   0006AC  EFEF  F002         	goto	l2969
  2224   0006B0  0A01               	xorlw	1	; case 11
  2225   0006B2  B4D8               	btfsc	status,2,c
  2226   0006B4  EFF6  F002         	goto	l2973
  2227   0006B8  0A07               	xorlw	7	; case 12
  2228   0006BA  B4D8               	btfsc	status,2,c
  2229   0006BC  EF23  F003         	goto	l2993
  2230   0006C0  EF83  F003         	goto	l389
  2231   0006C4                     l3003:
  2232                           
  2233                           ;TAD_RFID.c: 508:                     MFRC522_Wr(0x01, 0x50);
  2234   0006C4  0E50               	movlw	80
  2235   0006C6  6E40               	movwf	MFRC522_Wr@value^0,c
  2236   0006C8  0E01               	movlw	1
  2237   0006CA  ECF8  F005         	call	_MFRC522_Wr
  2238   0006CE  EF85  F001         	goto	l2839
  2239   0006D2                     l3009:
  2240   0006D2  5027               	movf	motor_RFID@substate^0,w,c
  2241                           
  2242                           ; Switch size 1, requested type "simple"
  2243                           ; Number of cases is 2, Range of values is 0 to 1
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte            7     4 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248   0006D4  0A00               	xorlw	0	; case 0
  2249   0006D6  B4D8               	btfsc	status,2,c
  2250   0006D8  EF62  F003         	goto	l3003
  2251   0006DC  0A01               	xorlw	1	; case 1
  2252   0006DE  B4D8               	btfsc	status,2,c
  2253   0006E0  EF4D  F002         	goto	l360
  2254   0006E4  EF83  F003         	goto	l389
  2255   0006E8                     l3013:
  2256   0006E8  5028               	movf	motor_RFID@state^0,w,c
  2257                           
  2258                           ; Switch size 1, requested type "simple"
  2259                           ; Number of cases is 3, Range of values is 0 to 2
  2260                           ; switch strategies available:
  2261                           ; Name         Instructions Cycles
  2262                           ; simple_byte           10     6 (average)
  2263                           ;	Chosen strategy is simple_byte
  2264   0006EA  0A00               	xorlw	0	; case 0
  2265   0006EC  B4D8               	btfsc	status,2,c
  2266   0006EE  EF51  F002         	goto	l2913
  2267   0006F2  0A01               	xorlw	1	; case 1
  2268   0006F4  B4D8               	btfsc	status,2,c
  2269   0006F6  EF2B  F003         	goto	l3001
  2270   0006FA  0A03               	xorlw	3	; case 2
  2271   0006FC  B4D8               	btfsc	status,2,c
  2272   0006FE  EF69  F003         	goto	l3009
  2273   000702  EF83  F003         	goto	l389
  2274   000706                     l389:
  2275   000706  0012               	return		;funcret
  2276   000708                     __end_of_motor_RFID:
  2277                           	callstack 0
  2278                           
  2279 ;; *************** function _displayUID *****************
  2280 ;; Defined at:
  2281 ;;		line 10 in file "TAD_TERMINAL.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  uid             1    6[COMRAM] PTR unsigned char 
  2284 ;;		 -> motor_RFID@UID(6), ReadRFID_NoCooperatiu@UID(6), 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  nibble          1   25[COMRAM] unsigned char 
  2287 ;;  i               2   23[COMRAM] int 
  2288 ;;  hexString      11    8[COMRAM] unsigned char [11]
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1
  2298 ;;      Params:         1       0       0
  2299 ;;      Locals:        18       0       0
  2300 ;;      Temps:          1       0       0
  2301 ;;      Totals:        20       0       0
  2302 ;;Total ram usage:       20 bytes
  2303 ;; Hardware stack levels used: 1
  2304 ;; Hardware stack levels required when called: 5
  2305 ;; This function calls:
  2306 ;;		_Terminal_SendString
  2307 ;; This function is called by:
  2308 ;;		_motor_RFID
  2309 ;;		_ReadRFID_NoCooperatiu
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text2
  2314   000A34                     __ptext2:
  2315                           	callstack 0
  2316   000A34                     _displayUID:
  2317                           	callstack 24
  2318   000A34                     
  2319                           ;TAD_TERMINAL.c: 11:     char hexString[11];;TAD_TERMINAL.c: 12:     for (int i = 0; i <
      +                           5; i++) {
  2320   000A34  0E00               	movlw	0
  2321   000A36  6E4D               	movwf	(displayUID@i+1)^0,c
  2322   000A38  0E00               	movlw	0
  2323   000A3A  6E4C               	movwf	displayUID@i^0,c
  2324   000A3C                     l2615:
  2325                           
  2326                           ;TAD_TERMINAL.c: 13:         unsigned char nibble = (uid[i] >> 4) & 0x0F;
  2327   000A3C  503B               	movf	displayUID@uid^0,w,c
  2328   000A3E  244C               	addwf	displayUID@i^0,w,c
  2329   000A40  6ED9               	movwf	fsr2l,c
  2330   000A42  6ADA               	clrf	fsr2h,c
  2331   000A44  50DF               	movf	indf2,w,c
  2332   000A46  6E3C               	movwf	??_displayUID^0,c
  2333   000A48  383C               	swapf	??_displayUID^0,w,c
  2334   000A4A  0B0F               	andlw	15
  2335   000A4C  0B0F               	andlw	15
  2336   000A4E  6E4E               	movwf	displayUID@nibble^0,c
  2337   000A50                     
  2338                           ;TAD_TERMINAL.c: 14:         hexString[i*2] = (nibble < 10) ? nibble + '0' : nibble - 10
      +                           + 'A';
  2339   000A50  0E09               	movlw	9
  2340   000A52  644E               	cpfsgt	displayUID@nibble^0,c
  2341   000A54  EF2E  F005         	goto	u1691
  2342   000A58  EF30  F005         	goto	u1690
  2343   000A5C                     u1691:
  2344   000A5C  EF38  F005         	goto	l2621
  2345   000A60                     u1690:
  2346   000A60  0E37               	movlw	55
  2347   000A62  244E               	addwf	displayUID@nibble^0,w,c
  2348   000A64  6E48               	movwf	_displayUID$822^0,c
  2349   000A66  6A49               	clrf	(_displayUID$822+1)^0,c
  2350   000A68  0E00               	movlw	0
  2351   000A6A  2249               	addwfc	(_displayUID$822+1)^0,f,c
  2352   000A6C  EF3E  F005         	goto	l2623
  2353   000A70                     l2621:
  2354   000A70  0E30               	movlw	48
  2355   000A72  244E               	addwf	displayUID@nibble^0,w,c
  2356   000A74  6E48               	movwf	_displayUID$822^0,c
  2357   000A76  6A49               	clrf	(_displayUID$822+1)^0,c
  2358   000A78  0E00               	movlw	0
  2359   000A7A  2249               	addwfc	(_displayUID$822+1)^0,f,c
  2360   000A7C                     l2623:
  2361   000A7C  504C               	movf	displayUID@i^0,w,c
  2362   000A7E  0D02               	mullw	2
  2363   000A80  50F3               	movf	243,w,c
  2364   000A82  0F3D               	addlw	low displayUID@hexString
  2365   000A84  6ED9               	movwf	fsr2l,c
  2366   000A86  6ADA               	clrf	fsr2h,c
  2367   000A88  C048  FFDF         	movff	_displayUID$822,indf2
  2368   000A8C                     
  2369                           ;TAD_TERMINAL.c: 15:         nibble = uid[i] & 0x0F;
  2370   000A8C  503B               	movf	displayUID@uid^0,w,c
  2371   000A8E  244C               	addwf	displayUID@i^0,w,c
  2372   000A90  6ED9               	movwf	fsr2l,c
  2373   000A92  6ADA               	clrf	fsr2h,c
  2374   000A94  50DF               	movf	indf2,w,c
  2375   000A96  0B0F               	andlw	15
  2376   000A98  6E4E               	movwf	displayUID@nibble^0,c
  2377   000A9A                     
  2378                           ;TAD_TERMINAL.c: 16:         hexString[i*2 + 1] = (nibble < 10) ? nibble + '0' : nibble 
      +                          - 10 + 'A';
  2379   000A9A  0E09               	movlw	9
  2380   000A9C  644E               	cpfsgt	displayUID@nibble^0,c
  2381   000A9E  EF53  F005         	goto	u1701
  2382   000AA2  EF55  F005         	goto	u1700
  2383   000AA6                     u1701:
  2384   000AA6  EF5D  F005         	goto	l2631
  2385   000AAA                     u1700:
  2386   000AAA  0E37               	movlw	55
  2387   000AAC  244E               	addwf	displayUID@nibble^0,w,c
  2388   000AAE  6E4A               	movwf	_displayUID$823^0,c
  2389   000AB0  6A4B               	clrf	(_displayUID$823+1)^0,c
  2390   000AB2  0E00               	movlw	0
  2391   000AB4  224B               	addwfc	(_displayUID$823+1)^0,f,c
  2392   000AB6  EF63  F005         	goto	l2633
  2393   000ABA                     l2631:
  2394   000ABA  0E30               	movlw	48
  2395   000ABC  244E               	addwf	displayUID@nibble^0,w,c
  2396   000ABE  6E4A               	movwf	_displayUID$823^0,c
  2397   000AC0  6A4B               	clrf	(_displayUID$823+1)^0,c
  2398   000AC2  0E00               	movlw	0
  2399   000AC4  224B               	addwfc	(_displayUID$823+1)^0,f,c
  2400   000AC6                     l2633:
  2401   000AC6  504C               	movf	displayUID@i^0,w,c
  2402   000AC8  0D02               	mullw	2
  2403   000ACA  CFF3 F03C          	movff	prodl,??_displayUID
  2404   000ACE  0E01               	movlw	1
  2405   000AD0  263C               	addwf	??_displayUID^0,f,c
  2406   000AD2  503C               	movf	??_displayUID^0,w,c
  2407   000AD4  0F3D               	addlw	low displayUID@hexString
  2408   000AD6  6ED9               	movwf	fsr2l,c
  2409   000AD8  6ADA               	clrf	fsr2h,c
  2410   000ADA  C04A  FFDF         	movff	_displayUID$823,indf2
  2411   000ADE                     
  2412                           ;TAD_TERMINAL.c: 17:     }
  2413   000ADE  4A4C               	infsnz	displayUID@i^0,f,c
  2414   000AE0  2A4D               	incf	(displayUID@i+1)^0,f,c
  2415   000AE2  BE4D               	btfsc	(displayUID@i+1)^0,7,c
  2416   000AE4  EF7D  F005         	goto	u1711
  2417   000AE8  504D               	movf	(displayUID@i+1)^0,w,c
  2418   000AEA  E109               	bnz	u1710
  2419   000AEC  0E05               	movlw	5
  2420   000AEE  5C4C               	subwf	displayUID@i^0,w,c
  2421   000AF0  A0D8               	btfss	status,0,c
  2422   000AF2  EF7D  F005         	goto	u1711
  2423   000AF6  EF7F  F005         	goto	u1710
  2424   000AFA                     u1711:
  2425   000AFA  EF1E  F005         	goto	l2615
  2426   000AFE                     u1710:
  2427   000AFE                     
  2428                           ;TAD_TERMINAL.c: 18:     hexString[10] = '\0';
  2429   000AFE  6A47               	clrf	(displayUID@hexString+10)^0,c
  2430   000B00                     
  2431                           ;TAD_TERMINAL.c: 20:     Terminal_SendString("UID: ");
  2432   000B00  0EF1               	movlw	low STR_1
  2433   000B02  6E39               	movwf	Terminal_SendString@str^0,c
  2434   000B04  5039               	movf	Terminal_SendString@str^0,w,c
  2435   000B06  A4D8               	btfss	status,2,c
  2436   000B08  0E02               	movlw	high __smallconst
  2437   000B0A  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2438   000B0C  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2439                           
  2440                           ;TAD_TERMINAL.c: 21:     Terminal_SendString(hexString);
  2441   000B10  0E3D               	movlw	low displayUID@hexString
  2442   000B12  6E39               	movwf	Terminal_SendString@str^0,c
  2443   000B14  6A3A               	clrf	(Terminal_SendString@str+1)^0,c
  2444   000B16  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2445                           
  2446                           ;TAD_TERMINAL.c: 22:     Terminal_SendString("\r\n");
  2447   000B1A  0EA9               	movlw	low (STR_3+15)
  2448   000B1C  6E39               	movwf	Terminal_SendString@str^0,c
  2449   000B1E  5039               	movf	Terminal_SendString@str^0,w,c
  2450   000B20  A4D8               	btfss	status,2,c
  2451   000B22  0E02               	movlw	high __smallconst
  2452   000B24  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2453   000B26  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2454   000B2A  0012               	return		;funcret
  2455   000B2C                     __end_of_displayUID:
  2456                           	callstack 0
  2457                           
  2458 ;; *************** function _motorTerminal *****************
  2459 ;; Defined at:
  2460 ;;		line 78 in file "TAD_TERMINAL.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1
  2474 ;;      Params:         0       0       0
  2475 ;;      Locals:         0       0       0
  2476 ;;      Temps:          0       0       0
  2477 ;;      Totals:         0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used: 1
  2480 ;; Hardware stack levels required when called: 6
  2481 ;; This function calls:
  2482 ;;		_Terminal_RXAvailable
  2483 ;;		_Terminal_ReceiveChar
  2484 ;;		_Terminal_SendString
  2485 ;;		_initTeclado
  2486 ;;		_showMenu
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text3
  2493   000938                     __ptext3:
  2494                           	callstack 0
  2495   000938                     _motorTerminal:
  2496                           	callstack 24
  2497   000938                     
  2498                           ;TAD_TERMINAL.c: 79:  static char state = 0;;TAD_TERMINAL.c: 81:  switch(state) {
  2499   000938  EF0E  F005         	goto	l2831
  2500   00093C                     l2789:
  2501                           
  2502                           ;TAD_TERMINAL.c: 83:    if (Terminal_ReceiveChar() == 0x1B) {
  2503   00093C  ECB5  F008         	call	_Terminal_ReceiveChar	;wreg free
  2504   000940  0A1B               	xorlw	27
  2505   000942  A4D8               	btfss	status,2,c
  2506   000944  EFA6  F004         	goto	u1931
  2507   000948  EFA8  F004         	goto	u1930
  2508   00094C                     u1931:
  2509   00094C  EFAC  F004         	goto	l2795
  2510   000950                     u1930:
  2511   000950                     
  2512                           ;TAD_TERMINAL.c: 84:     showMenu();
  2513   000950  EC9D  F006         	call	_showMenu	;wreg free
  2514   000954                     
  2515                           ;TAD_TERMINAL.c: 85:     state = 1;
  2516   000954  0E01               	movlw	1
  2517   000956  6E1B               	movwf	motorTerminal@state^0,c
  2518   000958                     l2795:
  2519                           
  2520                           ;TAD_TERMINAL.c: 87:    if (hashtag_pressed == 1){
  2521   000958  041C               	decf	_hashtag_pressed^0,w,c
  2522   00095A  A4D8               	btfss	status,2,c
  2523   00095C  EFB2  F004         	goto	u1941
  2524   000960  EFB4  F004         	goto	u1940
  2525   000964                     u1941:
  2526   000964  EF19  F005         	goto	l583
  2527   000968                     u1940:
  2528   000968                     
  2529                           ;TAD_TERMINAL.c: 88:     showMenu();
  2530   000968  EC9D  F006         	call	_showMenu	;wreg free
  2531   00096C                     
  2532                           ;TAD_TERMINAL.c: 89:     state = 1;
  2533   00096C  0E01               	movlw	1
  2534   00096E  6E1B               	movwf	motorTerminal@state^0,c
  2535   000970                     
  2536                           ;TAD_TERMINAL.c: 90:     hashtag_pressed = 0;
  2537   000970  6A1C               	clrf	_hashtag_pressed^0,c
  2538   000972  EF19  F005         	goto	l583
  2539   000976                     l2803:
  2540                           
  2541                           ;TAD_TERMINAL.c: 94:    if(Terminal_RXAvailable() == 1){
  2542   000976  EC71  F008         	call	_Terminal_RXAvailable	;wreg free
  2543   00097A  06E8               	decf	wreg,f,c
  2544   00097C  A4D8               	btfss	status,2,c
  2545   00097E  EFC3  F004         	goto	u1951
  2546   000982  EFC5  F004         	goto	u1950
  2547   000986                     u1951:
  2548   000986  EF19  F005         	goto	l583
  2549   00098A                     u1950:
  2550   00098A                     
  2551                           ;TAD_TERMINAL.c: 95:     initTeclado();
  2552   00098A  EC5B  F008         	call	_initTeclado	;wreg free
  2553   00098E                     
  2554                           ;TAD_TERMINAL.c: 96:     if (Terminal_ReceiveChar() == '1') {
  2555   00098E  ECB5  F008         	call	_Terminal_ReceiveChar	;wreg free
  2556   000992  0A31               	xorlw	49
  2557   000994  A4D8               	btfss	status,2,c
  2558   000996  EFCF  F004         	goto	u1961
  2559   00099A  EFD1  F004         	goto	u1960
  2560   00099E                     u1961:
  2561   00099E  EFDC  F004         	goto	l2813
  2562   0009A2                     u1960:
  2563   0009A2                     
  2564                           ;TAD_TERMINAL.c: 97:      Terminal_SendString("Has pulsado 1");
  2565   0009A2  0EBE               	movlw	low STR_11
  2566   0009A4  6E39               	movwf	Terminal_SendString@str^0,c
  2567   0009A6  5039               	movf	Terminal_SendString@str^0,w,c
  2568   0009A8  A4D8               	btfss	status,2,c
  2569   0009AA  0E02               	movlw	high __smallconst
  2570   0009AC  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2571   0009AE  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2572   0009B2                     l2811:
  2573                           
  2574                           ;TAD_TERMINAL.c: 99:      state = 0;
  2575   0009B2  6A1B               	clrf	motorTerminal@state^0,c
  2576                           
  2577                           ;TAD_TERMINAL.c: 100:     }
  2578   0009B4  EF19  F005         	goto	l583
  2579   0009B8                     l2813:
  2580   0009B8  ECB5  F008         	call	_Terminal_ReceiveChar	;wreg free
  2581   0009BC  0A32               	xorlw	50
  2582   0009BE  A4D8               	btfss	status,2,c
  2583   0009C0  EFE4  F004         	goto	u1971
  2584   0009C4  EFE6  F004         	goto	u1970
  2585   0009C8                     u1971:
  2586   0009C8  EFF0  F004         	goto	l2819
  2587   0009CC                     u1970:
  2588   0009CC                     
  2589                           ;TAD_TERMINAL.c: 102:      Terminal_SendString("Has pulsado 2");
  2590   0009CC  0ECC               	movlw	low STR_12
  2591   0009CE  6E39               	movwf	Terminal_SendString@str^0,c
  2592   0009D0  5039               	movf	Terminal_SendString@str^0,w,c
  2593   0009D2  A4D8               	btfss	status,2,c
  2594   0009D4  0E02               	movlw	high __smallconst
  2595   0009D6  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2596   0009D8  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2597   0009DC  EFD9  F004         	goto	l2811
  2598   0009E0                     l2819:
  2599   0009E0  ECB5  F008         	call	_Terminal_ReceiveChar	;wreg free
  2600   0009E4  0A33               	xorlw	51
  2601   0009E6  A4D8               	btfss	status,2,c
  2602   0009E8  EFF8  F004         	goto	u1981
  2603   0009EC  EFFA  F004         	goto	u1980
  2604   0009F0                     u1981:
  2605   0009F0  EF04  F005         	goto	l2825
  2606   0009F4                     u1980:
  2607   0009F4                     
  2608                           ;TAD_TERMINAL.c: 107:      Terminal_SendString("Has pulsado 3");
  2609   0009F4  0EDA               	movlw	low STR_13
  2610   0009F6  6E39               	movwf	Terminal_SendString@str^0,c
  2611   0009F8  5039               	movf	Terminal_SendString@str^0,w,c
  2612   0009FA  A4D8               	btfss	status,2,c
  2613   0009FC  0E02               	movlw	high __smallconst
  2614   0009FE  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2615   000A00  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2616   000A04  EFD9  F004         	goto	l2811
  2617   000A08                     l2825:
  2618                           
  2619                           ;TAD_TERMINAL.c: 112:      Terminal_SendString("ERROR. Valor introduit erroni.\r\n");
  2620   000A08  0E0D               	movlw	low STR_14
  2621   000A0A  6E39               	movwf	Terminal_SendString@str^0,c
  2622   000A0C  5039               	movf	Terminal_SendString@str^0,w,c
  2623   000A0E  A4D8               	btfss	status,2,c
  2624   000A10  0E02               	movlw	high __smallconst
  2625   000A12  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2626   000A14  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2627   000A18  EFD9  F004         	goto	l2811
  2628   000A1C                     l2831:
  2629   000A1C  501B               	movf	motorTerminal@state^0,w,c
  2630                           
  2631                           ; Switch size 1, requested type "simple"
  2632                           ; Number of cases is 2, Range of values is 0 to 1
  2633                           ; switch strategies available:
  2634                           ; Name         Instructions Cycles
  2635                           ; simple_byte            7     4 (average)
  2636                           ;	Chosen strategy is simple_byte
  2637   000A1E  0A00               	xorlw	0	; case 0
  2638   000A20  B4D8               	btfsc	status,2,c
  2639   000A22  EF9E  F004         	goto	l2789
  2640   000A26  0A01               	xorlw	1	; case 1
  2641   000A28  B4D8               	btfsc	status,2,c
  2642   000A2A  EFBB  F004         	goto	l2803
  2643   000A2E  EF19  F005         	goto	l583
  2644   000A32                     l583:
  2645   000A32  0012               	return		;funcret
  2646   000A34                     __end_of_motorTerminal:
  2647                           	callstack 0
  2648                           
  2649 ;; *************** function _showMenu *****************
  2650 ;; Defined at:
  2651 ;;		line 62 in file "TAD_TERMINAL.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1
  2665 ;;      Params:         0       0       0
  2666 ;;      Locals:         0       0       0
  2667 ;;      Temps:          0       0       0
  2668 ;;      Totals:         0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used: 1
  2671 ;; Hardware stack levels required when called: 5
  2672 ;; This function calls:
  2673 ;;		_Terminal_SendString
  2674 ;; This function is called by:
  2675 ;;		_motorTerminal
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text4
  2680   000D3A                     __ptext4:
  2681                           	callstack 0
  2682   000D3A                     _showMenu:
  2683                           	callstack 24
  2684   000D3A                     
  2685                           ;TAD_TERMINAL.c: 63:  Terminal_SendString("---------------\r\n");
  2686   000D3A  0E9A               	movlw	low STR_3
  2687   000D3C  6E39               	movwf	Terminal_SendString@str^0,c
  2688   000D3E  5039               	movf	Terminal_SendString@str^0,w,c
  2689   000D40  A4D8               	btfss	status,2,c
  2690   000D42  0E02               	movlw	high __smallconst
  2691   000D44  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2692   000D46  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2693                           
  2694                           ;TAD_TERMINAL.c: 64:  Terminal_SendString("MenÃº principal\r\n");
  2695   000D4A  0EAC               	movlw	low STR_4
  2696   000D4C  6E39               	movwf	Terminal_SendString@str^0,c
  2697   000D4E  5039               	movf	Terminal_SendString@str^0,w,c
  2698   000D50  A4D8               	btfss	status,2,c
  2699   000D52  0E02               	movlw	high __smallconst
  2700   000D54  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2701   000D56  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2702                           
  2703                           ;TAD_TERMINAL.c: 65:  Terminal_SendString("---------------\r\n");
  2704   000D5A  0E9A               	movlw	low STR_3
  2705   000D5C  6E39               	movwf	Terminal_SendString@str^0,c
  2706   000D5E  5039               	movf	Terminal_SendString@str^0,w,c
  2707   000D60  A4D8               	btfss	status,2,c
  2708   000D62  0E02               	movlw	high __smallconst
  2709   000D64  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2710   000D66  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2711                           
  2712                           ;TAD_TERMINAL.c: 66:  Terminal_SendString("Tria una opciÃ³:\r\n");
  2713   000D6A  0E87               	movlw	low STR_6
  2714   000D6C  6E39               	movwf	Terminal_SendString@str^0,c
  2715   000D6E  5039               	movf	Terminal_SendString@str^0,w,c
  2716   000D70  A4D8               	btfss	status,2,c
  2717   000D72  0E02               	movlw	high __smallconst
  2718   000D74  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2719   000D76  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2720                           
  2721                           ;TAD_TERMINAL.c: 67:  Terminal_SendString("\t1. Qui hi ha a la sala?\r\n");
  2722   000D7A  0E6C               	movlw	low STR_7
  2723   000D7C  6E39               	movwf	Terminal_SendString@str^0,c
  2724   000D7E  5039               	movf	Terminal_SendString@str^0,w,c
  2725   000D80  A4D8               	btfss	status,2,c
  2726   000D82  0E02               	movlw	high __smallconst
  2727   000D84  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2728   000D86  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2729                           
  2730                           ;TAD_TERMINAL.c: 68:  Terminal_SendString("\t2. Mostrar configuracions\r\n");
  2731   000D8A  0E4F               	movlw	low STR_8
  2732   000D8C  6E39               	movwf	Terminal_SendString@str^0,c
  2733   000D8E  5039               	movf	Terminal_SendString@str^0,w,c
  2734   000D90  A4D8               	btfss	status,2,c
  2735   000D92  0E02               	movlw	high __smallconst
  2736   000D94  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2737   000D96  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2738                           
  2739                           ;TAD_TERMINAL.c: 69:  Terminal_SendString("\t3. Modificar hora del sistema\r\n");
  2740   000D9A  0E2E               	movlw	low STR_9
  2741   000D9C  6E39               	movwf	Terminal_SendString@str^0,c
  2742   000D9E  5039               	movf	Terminal_SendString@str^0,w,c
  2743   000DA0  A4D8               	btfss	status,2,c
  2744   000DA2  0E02               	movlw	high __smallconst
  2745   000DA4  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2746   000DA6  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2747                           
  2748                           ;TAD_TERMINAL.c: 70:  Terminal_SendString("OpciÃ³: ");
  2749   000DAA  0EE8               	movlw	low STR_10
  2750   000DAC  6E39               	movwf	Terminal_SendString@str^0,c
  2751   000DAE  5039               	movf	Terminal_SendString@str^0,w,c
  2752   000DB0  A4D8               	btfss	status,2,c
  2753   000DB2  0E02               	movlw	high __smallconst
  2754   000DB4  6E3A               	movwf	(Terminal_SendString@str+1)^0,c
  2755   000DB6  ECDE  F006         	call	_Terminal_SendString	;wreg free
  2756   000DBA  0012               	return		;funcret
  2757   000DBC                     __end_of_showMenu:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _Terminal_SendString *****************
  2761 ;; Defined at:
  2762 ;;		line 55 in file "TAD_TERMINAL.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  str             2    4[COMRAM] PTR const unsigned char 
  2765 ;;		 -> STR_14(33), STR_13(14), STR_12(14), STR_11(14), 
  2766 ;;		 -> STR_10(9), STR_9(33), STR_8(29), STR_7(27), 
  2767 ;;		 -> STR_6(19), STR_5(18), STR_4(18), STR_3(18), 
  2768 ;;		 -> STR_2(3), STR_1(6), displayUID@hexString(11), 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1
  2780 ;;      Params:         2       0       0
  2781 ;;      Locals:         0       0       0
  2782 ;;      Temps:          0       0       0
  2783 ;;      Totals:         2       0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used: 1
  2786 ;; Hardware stack levels required when called: 4
  2787 ;; This function calls:
  2788 ;;		_Terminal_SendChar
  2789 ;;		_Terminal_TXAvailable
  2790 ;; This function is called by:
  2791 ;;		_displayUID
  2792 ;;		_showMenu
  2793 ;;		_motorTerminal
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text5
  2798   000DBC                     __ptext5:
  2799                           	callstack 0
  2800   000DBC                     _Terminal_SendString:
  2801                           	callstack 24
  2802   000DBC                     
  2803                           ;TAD_TERMINAL.c: 56:  while (*str) {
  2804   000DBC  EFFF  F006         	goto	l2517
  2805   000DC0                     l2511:
  2806   000DC0  EC27  F008         	call	_Terminal_TXAvailable	;wreg free
  2807   000DC4  5036               	movf	?_Terminal_TXAvailable^0,w,c
  2808   000DC6  1037               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  2809   000DC8  B4D8               	btfsc	status,2,c
  2810   000DCA  EFE9  F006         	goto	u1571
  2811   000DCE  EFEB  F006         	goto	u1570
  2812   000DD2                     u1571:
  2813   000DD2  EFE0  F006         	goto	l2511
  2814   000DD6                     u1570:
  2815   000DD6                     
  2816                           ;TAD_TERMINAL.c: 58:   Terminal_SendChar(*str++);
  2817   000DD6  C039  FFF6         	movff	Terminal_SendString@str,tblptrl
  2818   000DDA  C03A  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  2819   000DDE  6AF8               	clrf	tblptru,c
  2820   000DE0  0E01               	movlw	(high __ramtop+-1)
  2821   000DE2  64F7               	cpfsgt	tblptrh,c
  2822   000DE4  D003               	bra	u1587
  2823   000DE6  0008               	tblrd		*
  2824   000DE8  50F5               	movf	tablat,w,c
  2825   000DEA  D005               	bra	u1580
  2826   000DEC                     u1587:
  2827   000DEC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2828   000DF0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2829   000DF4  50EF               	movf	indf0,w,c
  2830   000DF6                     u1580:
  2831   000DF6  ECA4  F008         	call	_Terminal_SendChar
  2832   000DFA  4A39               	infsnz	Terminal_SendString@str^0,f,c
  2833   000DFC  2A3A               	incf	(Terminal_SendString@str+1)^0,f,c
  2834   000DFE                     l2517:
  2835                           
  2836                           ;TAD_TERMINAL.c: 56:  while (*str) {
  2837   000DFE  C039  FFF6         	movff	Terminal_SendString@str,tblptrl
  2838   000E02  C03A  FFF7         	movff	Terminal_SendString@str+1,tblptrh
  2839   000E06  6AF8               	clrf	tblptru,c
  2840   000E08  0E01               	movlw	(high __ramtop+-1)
  2841   000E0A  64F7               	cpfsgt	tblptrh,c
  2842   000E0C  D003               	bra	u1597
  2843   000E0E  0008               	tblrd		*
  2844   000E10  50F5               	movf	tablat,w,c
  2845   000E12  D005               	bra	u1590
  2846   000E14                     u1597:
  2847   000E14  CFF6 FFE9          	movff	tblptrl,fsr0l
  2848   000E18  CFF7 FFEA          	movff	tblptrh,fsr0h
  2849   000E1C  50EF               	movf	indf0,w,c
  2850   000E1E                     u1590:
  2851   000E1E  0900               	iorlw	0
  2852   000E20  A4D8               	btfss	status,2,c
  2853   000E22  EF15  F007         	goto	u1601
  2854   000E26  EF17  F007         	goto	u1600
  2855   000E2A                     u1601:
  2856   000E2A  EFE0  F006         	goto	l2511
  2857   000E2E                     u1600:
  2858   000E2E  0012               	return		;funcret
  2859   000E30                     __end_of_Terminal_SendString:
  2860                           	callstack 0
  2861                           
  2862 ;; *************** function _Terminal_TXAvailable *****************
  2863 ;; Defined at:
  2864 ;;		line 35 in file "TAD_TERMINAL.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  2    1[COMRAM] int 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1
  2878 ;;      Params:         2       0       0
  2879 ;;      Locals:         0       0       0
  2880 ;;      Temps:          1       0       0
  2881 ;;      Totals:         3       0       0
  2882 ;;Total ram usage:        3 bytes
  2883 ;; Hardware stack levels used: 1
  2884 ;; Hardware stack levels required when called: 3
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_Terminal_SendString
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text6
  2893   00104E                     __ptext6:
  2894                           	callstack 0
  2895   00104E                     _Terminal_TXAvailable:
  2896                           	callstack 24
  2897   00104E                     
  2898                           ;TAD_TERMINAL.c: 36:  return (PIR1bits.TXIF == 1) ? 1 : 0;
  2899   00104E  B89E               	btfsc	158,4,c	;volatile
  2900   001050  EF2C  F008         	goto	u1411
  2901   001054  EF30  F008         	goto	u1410
  2902   001058                     u1411:
  2903   001058  6A38               	clrf	??_Terminal_TXAvailable^0,c
  2904   00105A  2A38               	incf	??_Terminal_TXAvailable^0,f,c
  2905   00105C  EF31  F008         	goto	u1418
  2906   001060                     u1410:
  2907   001060  6A38               	clrf	??_Terminal_TXAvailable^0,c
  2908   001062                     u1418:
  2909   001062  5038               	movf	??_Terminal_TXAvailable^0,w,c
  2910   001064  6E36               	movwf	?_Terminal_TXAvailable^0,c
  2911   001066  6A37               	clrf	(?_Terminal_TXAvailable+1)^0,c
  2912   001068  0012               	return		;funcret
  2913   00106A                     __end_of_Terminal_TXAvailable:
  2914                           	callstack 0
  2915                           
  2916 ;; *************** function _Terminal_SendChar *****************
  2917 ;; Defined at:
  2918 ;;		line 45 in file "TAD_TERMINAL.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  c               1    wreg     unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  c               1    1[COMRAM] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1
  2932 ;;      Params:         0       0       0
  2933 ;;      Locals:         1       0       0
  2934 ;;      Temps:          0       0       0
  2935 ;;      Totals:         1       0       0
  2936 ;;Total ram usage:        1 bytes
  2937 ;; Hardware stack levels used: 1
  2938 ;; Hardware stack levels required when called: 3
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_Terminal_SendString
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text7
  2947   001148                     __ptext7:
  2948                           	callstack 0
  2949   001148                     _Terminal_SendChar:
  2950                           	callstack 24
  2951                           
  2952                           ;incstack = 0
  2953                           ;Terminal_SendChar@c stored from wreg
  2954   001148  6E36               	movwf	Terminal_SendChar@c^0,c
  2955   00114A                     
  2956                           ;TAD_TERMINAL.c: 46:  TXREG = c;
  2957   00114A  C036  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  2958   00114E  0012               	return		;funcret
  2959   001150                     __end_of_Terminal_SendChar:
  2960                           	callstack 0
  2961                           
  2962 ;; *************** function _initTeclado *****************
  2963 ;; Defined at:
  2964 ;;		line 14 in file "TAD_TECLADO.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1
  2978 ;;      Params:         0       0       0
  2979 ;;      Locals:         0       0       0
  2980 ;;      Temps:          0       0       0
  2981 ;;      Totals:         0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used: 1
  2984 ;; Hardware stack levels required when called: 4
  2985 ;; This function calls:
  2986 ;;		_TI_NewTimer
  2987 ;;		_initPortsTeclado
  2988 ;; This function is called by:
  2989 ;;		_main
  2990 ;;		_motorTerminal
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text8
  2995   0010B6                     __ptext8:
  2996                           	callstack 0
  2997   0010B6                     _initTeclado:
  2998                           	callstack 25
  2999   0010B6                     
  3000                           ;TAD_TECLADO.c: 15:  initPortsTeclado();
  3001   0010B6  ECA8  F008         	call	_initPortsTeclado	;wreg free
  3002   0010BA                     
  3003                           ;TAD_TECLADO.c: 16:     Filas = 0x00;
  3004   0010BA  6A2C               	clrf	_Filas^0,c
  3005   0010BC                     
  3006                           ;TAD_TECLADO.c: 17:     Columnas = 0x00;
  3007   0010BC  6A2B               	clrf	_Columnas^0,c
  3008   0010BE                     
  3009                           ;TAD_TECLADO.c: 18:     tecla = 0;
  3010   0010BE  6A2A               	clrf	_tecla^0,c
  3011   0010C0                     
  3012                           ;TAD_TECLADO.c: 19:  state = 0;
  3013   0010C0  6A29               	clrf	_state^0,c
  3014   0010C2                     
  3015                           ;TAD_TECLADO.c: 20:     TI_NewTimer(&timer);
  3016   0010C2  0E34               	movlw	low _timer
  3017   0010C4  6E36               	movwf	TI_NewTimer@TimerHandle^0,c
  3018   0010C6  EC18  F007         	call	_TI_NewTimer	;wreg free
  3019   0010CA  0012               	return		;funcret
  3020   0010CC                     __end_of_initTeclado:
  3021                           	callstack 0
  3022                           
  3023 ;; *************** function _initPortsTeclado *****************
  3024 ;; Defined at:
  3025 ;;		line 23 in file "TAD_TECLADO.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1
  3039 ;;      Params:         0       0       0
  3040 ;;      Locals:         0       0       0
  3041 ;;      Temps:          0       0       0
  3042 ;;      Totals:         0       0       0
  3043 ;;Total ram usage:        0 bytes
  3044 ;; Hardware stack levels used: 1
  3045 ;; Hardware stack levels required when called: 3
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_initTeclado
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text9
  3054   001150                     __ptext9:
  3055                           	callstack 0
  3056   001150                     _initPortsTeclado:
  3057                           	callstack 25
  3058   001150                     
  3059                           ;TAD_TECLADO.c: 26:  TRISD = 0x0F;
  3060   001150  0E0F               	movlw	15
  3061   001152  6E95               	movwf	149,c	;volatile
  3062   001154                     
  3063                           ;TAD_TECLADO.c: 27:  LATD = 0x00;
  3064   001154  6A8C               	clrf	140,c	;volatile
  3065   001156  0012               	return		;funcret
  3066   001158                     __end_of_initPortsTeclado:
  3067                           	callstack 0
  3068                           
  3069 ;; *************** function _TI_NewTimer *****************
  3070 ;; Defined at:
  3071 ;;		line 43 in file "TAD_TIMER.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  3074 ;;		 -> Timer(1), timer(1), 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  Comptador       1    3[COMRAM] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      unsigned char 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1
  3086 ;;      Params:         1       0       0
  3087 ;;      Locals:         1       0       0
  3088 ;;      Temps:          1       0       0
  3089 ;;      Totals:         3       0       0
  3090 ;;Total ram usage:        3 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 3
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_initTeclado
  3097 ;;		_LcInit
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text10
  3102   000E30                     __ptext10:
  3103                           	callstack 0
  3104   000E30                     _TI_NewTimer:
  3105                           	callstack 25
  3106   000E30                     
  3107                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  3108   000E30  6A38               	clrf	TI_NewTimer@Comptador^0,c
  3109                           
  3110                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  3111   000E32  EF27  F007         	goto	l2405
  3112   000E36                     l2401:
  3113                           
  3114                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  3115   000E36  2A38               	incf	TI_NewTimer@Comptador^0,f,c
  3116   000E38  0E04               	movlw	4
  3117   000E3A  1838               	xorwf	TI_NewTimer@Comptador^0,w,c
  3118   000E3C  A4D8               	btfss	status,2,c
  3119   000E3E  EF23  F007         	goto	u1421
  3120   000E42  EF25  F007         	goto	u1420
  3121   000E46                     u1421:
  3122   000E46  EF27  F007         	goto	l2405
  3123   000E4A                     u1420:
  3124   000E4A  EF42  F007         	goto	l79
  3125   000E4E                     l2405:
  3126                           
  3127                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  3128   000E4E  5038               	movf	TI_NewTimer@Comptador^0,w,c
  3129   000E50  0D05               	mullw	5
  3130   000E52  50F3               	movf	243,w,c
  3131   000E54  0F05               	addlw	low (_Timers+4)
  3132   000E56  6ED9               	movwf	fsr2l,c
  3133   000E58  6ADA               	clrf	fsr2h,c
  3134   000E5A  04DE               	decf	postinc2,w,c
  3135   000E5C  B4D8               	btfsc	status,2,c
  3136   000E5E  EF33  F007         	goto	u1431
  3137   000E62  EF35  F007         	goto	u1430
  3138   000E66                     u1431:
  3139   000E66  EF1B  F007         	goto	l2401
  3140   000E6A                     u1430:
  3141   000E6A                     
  3142                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  3143   000E6A  5038               	movf	TI_NewTimer@Comptador^0,w,c
  3144   000E6C  0D05               	mullw	5
  3145   000E6E  50F3               	movf	243,w,c
  3146   000E70  0F05               	addlw	low (_Timers+4)
  3147   000E72  6ED9               	movwf	fsr2l,c
  3148   000E74  6ADA               	clrf	fsr2h,c
  3149   000E76  0E01               	movlw	1
  3150   000E78  6EDF               	movwf	indf2,c
  3151   000E7A                     
  3152                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  3153   000E7A  5036               	movf	TI_NewTimer@TimerHandle^0,w,c
  3154   000E7C  6ED9               	movwf	fsr2l,c
  3155   000E7E  6ADA               	clrf	fsr2h,c
  3156   000E80  C038  FFDF         	movff	TI_NewTimer@Comptador,indf2
  3157   000E84                     l79:
  3158   000E84  0012               	return		;funcret
  3159   000E86                     __end_of_TI_NewTimer:
  3160                           	callstack 0
  3161                           
  3162 ;; *************** function _Terminal_ReceiveChar *****************
  3163 ;; Defined at:
  3164 ;;		line 50 in file "TAD_TERMINAL.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      unsigned char 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1
  3178 ;;      Params:         0       0       0
  3179 ;;      Locals:         0       0       0
  3180 ;;      Temps:          0       0       0
  3181 ;;      Totals:         0       0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 3
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_motorTerminal
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text11
  3193   00116A                     __ptext11:
  3194                           	callstack 0
  3195   00116A                     _Terminal_ReceiveChar:
  3196                           	callstack 26
  3197   00116A                     
  3198                           ;TAD_TERMINAL.c: 51:  return RCREG;
  3199   00116A  50AE               	movf	174,w,c	;volatile
  3200   00116C  0012               	return		;funcret
  3201   00116E                     __end_of_Terminal_ReceiveChar:
  3202                           	callstack 0
  3203                           
  3204 ;; *************** function _Terminal_RXAvailable *****************
  3205 ;; Defined at:
  3206 ;;		line 40 in file "TAD_TERMINAL.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      unsigned char 
  3213 ;; Registers used:
  3214 ;;		wreg
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1
  3220 ;;      Params:         0       0       0
  3221 ;;      Locals:         0       0       0
  3222 ;;      Temps:          0       0       0
  3223 ;;      Totals:         0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 3
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_motorTerminal
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text12
  3235   0010E2                     __ptext12:
  3236                           	callstack 0
  3237   0010E2                     _Terminal_RXAvailable:
  3238                           	callstack 26
  3239   0010E2                     
  3240                           ;TAD_TERMINAL.c: 41:  return (PIR1bits.RCIF == 1) ? 1 : 0;
  3241   0010E2  BA9E               	btfsc	158,5,c	;volatile
  3242   0010E4  EF76  F008         	goto	u521
  3243   0010E8  EF79  F008         	goto	u520
  3244   0010EC                     u521:
  3245   0010EC  0E01               	movlw	1
  3246   0010EE  EF7A  F008         	goto	u526
  3247   0010F2                     u520:
  3248   0010F2  0E00               	movlw	0
  3249   0010F4                     u526:
  3250   0010F4  0012               	return		;funcret
  3251   0010F6                     __end_of_Terminal_RXAvailable:
  3252                           	callstack 0
  3253                           
  3254 ;; *************** function _motorTeclado *****************
  3255 ;; Defined at:
  3256 ;;		line 34 in file "TAD_TECLADO.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1
  3270 ;;      Params:         0       0       0
  3271 ;;      Locals:         0       0       0
  3272 ;;      Temps:          0       0       0
  3273 ;;      Totals:         0       0       0
  3274 ;;Total ram usage:        0 bytes
  3275 ;; Hardware stack levels used: 1
  3276 ;; Hardware stack levels required when called: 4
  3277 ;; This function calls:
  3278 ;;		_GetTecla
  3279 ;;		_ReadFilas
  3280 ;;		_TI_GetTics
  3281 ;;		_TI_ResetTics
  3282 ;;		_hashtag_pressed3s
  3283 ;;		_writeColumnas
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text13
  3290   000708                     __ptext13:
  3291                           	callstack 0
  3292   000708                     _motorTeclado:
  3293                           	callstack 26
  3294   000708                     
  3295                           ;TAD_TECLADO.c: 35:  switch(state) {
  3296   000708  EF80  F004         	goto	l2785
  3297   00070C                     l2681:
  3298                           
  3299                           ;TAD_TECLADO.c: 37:    Filas = ReadFilas();
  3300   00070C  ECAF  F008         	call	_ReadFilas	;wreg free
  3301   000710  6E2C               	movwf	_Filas^0,c
  3302   000712                     
  3303                           ;TAD_TECLADO.c: 38:    if (Filas == 0x0) {
  3304   000712  502C               	movf	_Filas^0,w,c
  3305   000714  A4D8               	btfss	status,2,c
  3306   000716  EF8F  F003         	goto	u1761
  3307   00071A  EF91  F003         	goto	u1760
  3308   00071E                     u1761:
  3309   00071E  EF99  F003         	goto	l2691
  3310   000722                     u1760:
  3311   000722                     
  3312                           ;TAD_TECLADO.c: 39:     Columnas = (0x01);
  3313   000722  0E01               	movlw	1
  3314   000724  6E2B               	movwf	_Columnas^0,c
  3315   000726                     
  3316                           ;TAD_TECLADO.c: 40:     writeColumnas();
  3317   000726  EC90  F007         	call	_writeColumnas	;wreg free
  3318   00072A                     
  3319                           ;TAD_TECLADO.c: 41:     state = 1;
  3320   00072A  0E01               	movlw	1
  3321   00072C  6E29               	movwf	_state^0,c
  3322                           
  3323                           ;TAD_TECLADO.c: 42:    }
  3324   00072E  EF9B  F004         	goto	l160
  3325   000732                     l2691:
  3326   000732  502C               	movf	_Filas^0,w,c
  3327   000734  B4D8               	btfsc	status,2,c
  3328   000736  EF9F  F003         	goto	u1771
  3329   00073A  EFA1  F003         	goto	u1770
  3330   00073E                     u1771:
  3331   00073E  EF9B  F004         	goto	l160
  3332   000742                     u1770:
  3333   000742                     
  3334                           ;TAD_TECLADO.c: 44:     TI_ResetTics(timer);
  3335   000742  5034               	movf	_timer^0,w,c
  3336   000744  EC15  F008         	call	_TI_ResetTics
  3337   000748                     l2695:
  3338                           
  3339                           ;TAD_TECLADO.c: 45:     state = 3;
  3340   000748  0E03               	movlw	3
  3341   00074A  6E29               	movwf	_state^0,c
  3342   00074C  EF9B  F004         	goto	l160
  3343   000750                     l2697:
  3344                           
  3345                           ;TAD_TECLADO.c: 49:    Filas = ReadFilas();
  3346   000750  ECAF  F008         	call	_ReadFilas	;wreg free
  3347   000754  6E2C               	movwf	_Filas^0,c
  3348   000756                     
  3349                           ;TAD_TECLADO.c: 50:    if (Filas == 0x0) {
  3350   000756  502C               	movf	_Filas^0,w,c
  3351   000758  A4D8               	btfss	status,2,c
  3352   00075A  EFB1  F003         	goto	u1781
  3353   00075E  EFB3  F003         	goto	u1780
  3354   000762                     u1781:
  3355   000762  EFBB  F003         	goto	l2707
  3356   000766                     u1780:
  3357   000766                     
  3358                           ;TAD_TECLADO.c: 51:     Columnas = (0x02);
  3359   000766  0E02               	movlw	2
  3360   000768  6E2B               	movwf	_Columnas^0,c
  3361   00076A                     
  3362                           ;TAD_TECLADO.c: 52:     writeColumnas();
  3363   00076A  EC90  F007         	call	_writeColumnas	;wreg free
  3364   00076E                     
  3365                           ;TAD_TECLADO.c: 53:     state = 2;
  3366   00076E  0E02               	movlw	2
  3367   000770  6E29               	movwf	_state^0,c
  3368                           
  3369                           ;TAD_TECLADO.c: 54:    }
  3370   000772  EF9B  F004         	goto	l160
  3371   000776                     l2707:
  3372   000776  502C               	movf	_Filas^0,w,c
  3373   000778  B4D8               	btfsc	status,2,c
  3374   00077A  EFC1  F003         	goto	u1791
  3375   00077E  EFC3  F003         	goto	u1790
  3376   000782                     u1791:
  3377   000782  EF9B  F004         	goto	l160
  3378   000786                     u1790:
  3379   000786                     
  3380                           ;TAD_TECLADO.c: 56:     TI_ResetTics(timer);
  3381   000786  5034               	movf	_timer^0,w,c
  3382   000788  EC15  F008         	call	_TI_ResetTics
  3383   00078C  EFA4  F003         	goto	l2695
  3384   000790                     l2713:
  3385                           
  3386                           ;TAD_TECLADO.c: 61:    Filas = ReadFilas();
  3387   000790  ECAF  F008         	call	_ReadFilas	;wreg free
  3388   000794  6E2C               	movwf	_Filas^0,c
  3389   000796                     
  3390                           ;TAD_TECLADO.c: 62:    if (Filas != 0x0) {
  3391   000796  502C               	movf	_Filas^0,w,c
  3392   000798  B4D8               	btfsc	status,2,c
  3393   00079A  EFD1  F003         	goto	u1801
  3394   00079E  EFD3  F003         	goto	u1800
  3395   0007A2                     u1801:
  3396   0007A2  EFD8  F003         	goto	l2721
  3397   0007A6                     u1800:
  3398   0007A6                     
  3399                           ;TAD_TECLADO.c: 63:     TI_ResetTics(timer);
  3400   0007A6  5034               	movf	_timer^0,w,c
  3401   0007A8  EC15  F008         	call	_TI_ResetTics
  3402   0007AC  EFA4  F003         	goto	l2695
  3403   0007B0                     l2721:
  3404   0007B0  502C               	movf	_Filas^0,w,c
  3405   0007B2  A4D8               	btfss	status,2,c
  3406   0007B4  EFDE  F003         	goto	u1811
  3407   0007B8  EFE0  F003         	goto	u1810
  3408   0007BC                     u1811:
  3409   0007BC  EF9B  F004         	goto	l160
  3410   0007C0                     u1810:
  3411   0007C0                     l2723:
  3412                           
  3413                           ;TAD_TECLADO.c: 67:     Columnas = (0x04);
  3414   0007C0  0E04               	movlw	4
  3415   0007C2  6E2B               	movwf	_Columnas^0,c
  3416   0007C4                     
  3417                           ;TAD_TECLADO.c: 68:     writeColumnas();
  3418   0007C4  EC90  F007         	call	_writeColumnas	;wreg free
  3419   0007C8                     l2727:
  3420                           
  3421                           ;TAD_TECLADO.c: 69:     state = 0;
  3422   0007C8  6A29               	clrf	_state^0,c
  3423   0007CA  EF9B  F004         	goto	l160
  3424   0007CE                     l2729:
  3425                           
  3426                           ;TAD_TECLADO.c: 73:    tecla = GetTecla ();
  3427   0007CE  EC96  F005         	call	_GetTecla	;wreg free
  3428   0007D2  6E2A               	movwf	_tecla^0,c
  3429   0007D4                     
  3430                           ;TAD_TECLADO.c: 74:    Filas = ReadFilas();
  3431   0007D4  ECAF  F008         	call	_ReadFilas	;wreg free
  3432   0007D8  6E2C               	movwf	_Filas^0,c
  3433   0007DA                     
  3434                           ;TAD_TECLADO.c: 75:    if (Filas == 0x0) {
  3435   0007DA  502C               	movf	_Filas^0,w,c
  3436   0007DC  A4D8               	btfss	status,2,c
  3437   0007DE  EFF3  F003         	goto	u1821
  3438   0007E2  EFF5  F003         	goto	u1820
  3439   0007E6                     u1821:
  3440   0007E6  EFF7  F003         	goto	l2741
  3441   0007EA                     u1820:
  3442   0007EA  EFE0  F003         	goto	l2723
  3443   0007EE                     l2741:
  3444   0007EE  502C               	movf	_Filas^0,w,c
  3445   0007F0  B4D8               	btfsc	status,2,c
  3446   0007F2  EFFD  F003         	goto	u1831
  3447   0007F6  EFFF  F003         	goto	u1830
  3448   0007FA                     u1831:
  3449   0007FA  EF1C  F004         	goto	l2749
  3450   0007FE                     u1830:
  3451   0007FE  5034               	movf	_timer^0,w,c
  3452   000800  EC6A  F007         	call	_TI_GetTics
  3453   000804  5039               	movf	(?_TI_GetTics+3)^0,w,c
  3454   000806  1038               	iorwf	(?_TI_GetTics+2)^0,w,c
  3455   000808  1037               	iorwf	(?_TI_GetTics+1)^0,w,c
  3456   00080A  E109               	bnz	u1840
  3457   00080C  0E09               	movlw	9
  3458   00080E  5C36               	subwf	?_TI_GetTics^0,w,c
  3459   000810  A0D8               	btfss	status,0,c
  3460   000812  EF0D  F004         	goto	u1841
  3461   000816  EF0F  F004         	goto	u1840
  3462   00081A                     u1841:
  3463   00081A  EF1C  F004         	goto	l2749
  3464   00081E                     u1840:
  3465   00081E  0E0B               	movlw	11
  3466   000820  182A               	xorwf	_tecla^0,w,c
  3467   000822  B4D8               	btfsc	status,2,c
  3468   000824  EF16  F004         	goto	u1851
  3469   000828  EF18  F004         	goto	u1850
  3470   00082C                     u1851:
  3471   00082C  EF1C  F004         	goto	l2749
  3472   000830                     u1850:
  3473   000830                     l2747:
  3474                           
  3475                           ;TAD_TECLADO.c: 81:     state = 5;
  3476   000830  0E05               	movlw	5
  3477   000832  6E29               	movwf	_state^0,c
  3478                           
  3479                           ;TAD_TECLADO.c: 82:    }
  3480   000834  EF9B  F004         	goto	l160
  3481   000838                     l2749:
  3482   000838  502C               	movf	_Filas^0,w,c
  3483   00083A  B4D8               	btfsc	status,2,c
  3484   00083C  EF22  F004         	goto	u1861
  3485   000840  EF24  F004         	goto	u1860
  3486   000844                     u1861:
  3487   000844  EF9B  F004         	goto	l160
  3488   000848                     u1860:
  3489   000848  5034               	movf	_timer^0,w,c
  3490   00084A  EC6A  F007         	call	_TI_GetTics
  3491   00084E  5039               	movf	(?_TI_GetTics+3)^0,w,c
  3492   000850  1038               	iorwf	(?_TI_GetTics+2)^0,w,c
  3493   000852  1037               	iorwf	(?_TI_GetTics+1)^0,w,c
  3494   000854  E109               	bnz	u1870
  3495   000856  0E09               	movlw	9
  3496   000858  5C36               	subwf	?_TI_GetTics^0,w,c
  3497   00085A  A0D8               	btfss	status,0,c
  3498   00085C  EF32  F004         	goto	u1871
  3499   000860  EF34  F004         	goto	u1870
  3500   000864                     u1871:
  3501   000864  EF9B  F004         	goto	l160
  3502   000868                     u1870:
  3503   000868  0E0B               	movlw	11
  3504   00086A  182A               	xorwf	_tecla^0,w,c
  3505   00086C  A4D8               	btfss	status,2,c
  3506   00086E  EF3B  F004         	goto	u1881
  3507   000872  EF3D  F004         	goto	u1880
  3508   000876                     u1881:
  3509   000876  EF9B  F004         	goto	l160
  3510   00087A                     u1880:
  3511   00087A                     
  3512                           ;TAD_TECLADO.c: 84:     TI_ResetTics(timer);
  3513   00087A  5034               	movf	_timer^0,w,c
  3514   00087C  EC15  F008         	call	_TI_ResetTics
  3515   000880                     
  3516                           ;TAD_TECLADO.c: 85:     state = 4;
  3517   000880  0E04               	movlw	4
  3518   000882  6E29               	movwf	_state^0,c
  3519   000884  EF9B  F004         	goto	l160
  3520   000888                     l2759:
  3521                           
  3522                           ;TAD_TECLADO.c: 89:    Filas = ReadFilas();
  3523   000888  ECAF  F008         	call	_ReadFilas	;wreg free
  3524   00088C  6E2C               	movwf	_Filas^0,c
  3525   00088E                     
  3526                           ;TAD_TECLADO.c: 90:    if (Filas == 0x0) {
  3527   00088E  502C               	movf	_Filas^0,w,c
  3528   000890  A4D8               	btfss	status,2,c
  3529   000892  EF4D  F004         	goto	u1891
  3530   000896  EF4F  F004         	goto	u1890
  3531   00089A                     u1891:
  3532   00089A  EF51  F004         	goto	l2765
  3533   00089E                     u1890:
  3534   00089E  EFE4  F003         	goto	l2727
  3535   0008A2                     l2765:
  3536   0008A2  502C               	movf	_Filas^0,w,c
  3537   0008A4  B4D8               	btfsc	status,2,c
  3538   0008A6  EF57  F004         	goto	u1901
  3539   0008AA  EF59  F004         	goto	u1900
  3540   0008AE                     u1901:
  3541   0008AE  EF9B  F004         	goto	l160
  3542   0008B2                     u1900:
  3543   0008B2  5034               	movf	_timer^0,w,c
  3544   0008B4  EC6A  F007         	call	_TI_GetTics
  3545   0008B8  5039               	movf	(?_TI_GetTics+3)^0,w,c
  3546   0008BA  1038               	iorwf	(?_TI_GetTics+2)^0,w,c
  3547   0008BC  E10B               	bnz	u1910
  3548   0008BE  0EDD               	movlw	221
  3549   0008C0  5C36               	subwf	?_TI_GetTics^0,w,c
  3550   0008C2  0E05               	movlw	5
  3551   0008C4  5837               	subwfb	(?_TI_GetTics+1)^0,w,c
  3552   0008C6  A0D8               	btfss	status,0,c
  3553   0008C8  EF68  F004         	goto	u1911
  3554   0008CC  EF6A  F004         	goto	u1910
  3555   0008D0                     u1911:
  3556   0008D0  EF9B  F004         	goto	l160
  3557   0008D4                     u1910:
  3558   0008D4                     
  3559                           ;TAD_TECLADO.c: 94:     hashtag_pressed3s();
  3560   0008D4  ECAC  F008         	call	_hashtag_pressed3s	;wreg free
  3561   0008D8  EF18  F004         	goto	l2747
  3562   0008DC                     l2773:
  3563                           
  3564                           ;TAD_TECLADO.c: 100:    Filas = ReadFilas();
  3565   0008DC  ECAF  F008         	call	_ReadFilas	;wreg free
  3566   0008E0  6E2C               	movwf	_Filas^0,c
  3567   0008E2                     
  3568                           ;TAD_TECLADO.c: 101:    if (Filas == 0x0) {
  3569   0008E2  502C               	movf	_Filas^0,w,c
  3570   0008E4  A4D8               	btfss	status,2,c
  3571   0008E6  EF77  F004         	goto	u1921
  3572   0008EA  EF79  F004         	goto	u1920
  3573   0008EE                     u1921:
  3574   0008EE  EF9B  F004         	goto	l160
  3575   0008F2                     u1920:
  3576   0008F2                     
  3577                           ;TAD_TECLADO.c: 102:     state = 0;
  3578   0008F2  6A29               	clrf	_state^0,c
  3579   0008F4                     
  3580                           ;TAD_TECLADO.c: 103:     Columnas = (0x04);
  3581   0008F4  0E04               	movlw	4
  3582   0008F6  6E2B               	movwf	_Columnas^0,c
  3583   0008F8                     
  3584                           ;TAD_TECLADO.c: 104:     writeColumnas();
  3585   0008F8  EC90  F007         	call	_writeColumnas	;wreg free
  3586   0008FC  EF9B  F004         	goto	l160
  3587   000900                     l2785:
  3588   000900  5029               	movf	_state^0,w,c
  3589                           
  3590                           ; Switch size 1, requested type "simple"
  3591                           ; Number of cases is 6, Range of values is 0 to 5
  3592                           ; switch strategies available:
  3593                           ; Name         Instructions Cycles
  3594                           ; simple_byte           19    10 (average)
  3595                           ;	Chosen strategy is simple_byte
  3596   000902  0A00               	xorlw	0	; case 0
  3597   000904  B4D8               	btfsc	status,2,c
  3598   000906  EF86  F003         	goto	l2681
  3599   00090A  0A01               	xorlw	1	; case 1
  3600   00090C  B4D8               	btfsc	status,2,c
  3601   00090E  EFA8  F003         	goto	l2697
  3602   000912  0A03               	xorlw	3	; case 2
  3603   000914  B4D8               	btfsc	status,2,c
  3604   000916  EFC8  F003         	goto	l2713
  3605   00091A  0A01               	xorlw	1	; case 3
  3606   00091C  B4D8               	btfsc	status,2,c
  3607   00091E  EFE7  F003         	goto	l2729
  3608   000922  0A07               	xorlw	7	; case 4
  3609   000924  B4D8               	btfsc	status,2,c
  3610   000926  EF44  F004         	goto	l2759
  3611   00092A  0A01               	xorlw	1	; case 5
  3612   00092C  B4D8               	btfsc	status,2,c
  3613   00092E  EF6E  F004         	goto	l2773
  3614   000932  EF9B  F004         	goto	l160
  3615   000936                     l160:
  3616   000936  0012               	return		;funcret
  3617   000938                     __end_of_motorTeclado:
  3618                           	callstack 0
  3619                           
  3620 ;; *************** function _writeColumnas *****************
  3621 ;; Defined at:
  3622 ;;		line 114 in file "TAD_TECLADO.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1
  3636 ;;      Params:         0       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          0       0       0
  3639 ;;      Totals:         0       0       0
  3640 ;;Total ram usage:        0 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 3
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_motorTeclado
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text14
  3651   000F20                     __ptext14:
  3652                           	callstack 0
  3653   000F20                     _writeColumnas:
  3654                           	callstack 26
  3655   000F20                     
  3656                           ;TAD_TECLADO.c: 115:     LATD = (0x00);
  3657   000F20  6A8C               	clrf	140,c	;volatile
  3658   000F22                     
  3659                           ;TAD_TECLADO.c: 116:     if (Columnas == 0x01) {
  3660   000F22  042B               	decf	_Columnas^0,w,c
  3661   000F24  A4D8               	btfss	status,2,c
  3662   000F26  EF97  F007         	goto	u331
  3663   000F2A  EF99  F007         	goto	u330
  3664   000F2E                     u331:
  3665   000F2E  EF9C  F007         	goto	l1525
  3666   000F32                     u330:
  3667   000F32                     
  3668                           ;TAD_TECLADO.c: 118:         LATD |= (1 << 5);
  3669   000F32  8A8C               	bsf	140,5,c	;volatile
  3670                           
  3671                           ;TAD_TECLADO.c: 119:     } else if (Columnas == 0x02) {
  3672   000F34  EFB2  F007         	goto	l168
  3673   000F38                     l1525:
  3674   000F38  0E02               	movlw	2
  3675   000F3A  182B               	xorwf	_Columnas^0,w,c
  3676   000F3C  A4D8               	btfss	status,2,c
  3677   000F3E  EFA3  F007         	goto	u341
  3678   000F42  EFA5  F007         	goto	u340
  3679   000F46                     u341:
  3680   000F46  EFA8  F007         	goto	l1529
  3681   000F4A                     u340:
  3682   000F4A                     
  3683                           ;TAD_TECLADO.c: 121:         LATD |= (1 << 6);
  3684   000F4A  8C8C               	bsf	140,6,c	;volatile
  3685                           
  3686                           ;TAD_TECLADO.c: 122:     } else if (Columnas == 0x04) {
  3687   000F4C  EFB2  F007         	goto	l168
  3688   000F50                     l1529:
  3689   000F50  0E04               	movlw	4
  3690   000F52  182B               	xorwf	_Columnas^0,w,c
  3691   000F54  A4D8               	btfss	status,2,c
  3692   000F56  EFAF  F007         	goto	u351
  3693   000F5A  EFB1  F007         	goto	u350
  3694   000F5E                     u351:
  3695   000F5E  EFB2  F007         	goto	l168
  3696   000F62                     u350:
  3697   000F62                     
  3698                           ;TAD_TECLADO.c: 124:         LATD |= (1 << 4);
  3699   000F62  888C               	bsf	140,4,c	;volatile
  3700   000F64                     l168:
  3701   000F64  0012               	return		;funcret
  3702   000F66                     __end_of_writeColumnas:
  3703                           	callstack 0
  3704                           
  3705 ;; *************** function _hashtag_pressed3s *****************
  3706 ;; Defined at:
  3707 ;;		line 73 in file "TAD_TERMINAL.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1
  3721 ;;      Params:         0       0       0
  3722 ;;      Locals:         0       0       0
  3723 ;;      Temps:          0       0       0
  3724 ;;      Totals:         0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used: 1
  3727 ;; Hardware stack levels required when called: 3
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_motorTeclado
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text15
  3736   001158                     __ptext15:
  3737                           	callstack 0
  3738   001158                     _hashtag_pressed3s:
  3739                           	callstack 26
  3740   001158                     
  3741                           ;TAD_TERMINAL.c: 74:  hashtag_pressed = 1;
  3742   001158  0E01               	movlw	1
  3743   00115A  6E1C               	movwf	_hashtag_pressed^0,c
  3744   00115C  0012               	return		;funcret
  3745   00115E                     __end_of_hashtag_pressed3s:
  3746                           	callstack 0
  3747                           
  3748 ;; *************** function _TI_ResetTics *****************
  3749 ;; Defined at:
  3750 ;;		line 53 in file "TAD_TIMER.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  TimerHandle     1    wreg     unsigned char 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1
  3764 ;;      Params:         0       0       0
  3765 ;;      Locals:         1       0       0
  3766 ;;      Temps:          0       0       0
  3767 ;;      Totals:         1       0       0
  3768 ;;Total ram usage:        1 bytes
  3769 ;; Hardware stack levels used: 1
  3770 ;; Hardware stack levels required when called: 3
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_motorTeclado
  3775 ;;		_Espera
  3776 ;;		_WaitForBusy
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text16
  3781   00102A                     __ptext16:
  3782                           	callstack 0
  3783   00102A                     _TI_ResetTics:
  3784                           	callstack 26
  3785                           
  3786                           ;incstack = 0
  3787                           ;TI_ResetTics@TimerHandle stored from wreg
  3788   00102A  6E36               	movwf	TI_ResetTics@TimerHandle^0,c
  3789   00102C                     
  3790                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  3791   00102C  9EF2               	bcf	242,7,c	;volatile
  3792   00102E  5036               	movf	TI_ResetTics@TimerHandle^0,w,c
  3793   001030  0D05               	mullw	5
  3794   001032  50F3               	movf	243,w,c
  3795   001034  0F01               	addlw	low _Timers
  3796   001036  6ED9               	movwf	fsr2l,c
  3797   001038  6ADA               	clrf	fsr2h,c
  3798   00103A  C015  FFDE         	movff	_Tics,postinc2	;volatile
  3799   00103E  C016  FFDE         	movff	_Tics+1,postinc2	;volatile
  3800   001042  C017  FFDE         	movff	_Tics+2,postinc2	;volatile
  3801   001046  C018  FFDE         	movff	_Tics+3,postinc2	;volatile
  3802   00104A  8EF2               	bsf	242,7,c	;volatile
  3803   00104C  0012               	return		;funcret
  3804   00104E                     __end_of_TI_ResetTics:
  3805                           	callstack 0
  3806                           
  3807 ;; *************** function _TI_GetTics *****************
  3808 ;; Defined at:
  3809 ;;		line 61 in file "TAD_TIMER.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  TimerHandle     1    wreg     unsigned char 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  3814 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  4    1[COMRAM] unsigned long 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1
  3824 ;;      Params:         4       0       0
  3825 ;;      Locals:         5       0       0
  3826 ;;      Temps:          4       0       0
  3827 ;;      Totals:        13       0       0
  3828 ;;Total ram usage:       13 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 3
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_motorTeclado
  3835 ;;		_Espera
  3836 ;;		_WaitForBusy
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text17
  3841   000ED4                     __ptext17:
  3842                           	callstack 0
  3843   000ED4                     _TI_GetTics:
  3844                           	callstack 26
  3845                           
  3846                           ;incstack = 0
  3847                           ;TI_GetTics@TimerHandle stored from wreg
  3848   000ED4  6E42               	movwf	TI_GetTics@TimerHandle^0,c
  3849   000ED6                     
  3850                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  3851   000ED6  9EF2               	bcf	242,7,c	;volatile
  3852   000ED8  C015  F03E         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  3853   000EDC  C016  F03F         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  3854   000EE0  C017  F040         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  3855   000EE4  C018  F041         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  3856   000EE8  8EF2               	bsf	242,7,c	;volatile
  3857   000EEA                     
  3858                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  3859   000EEA  5042               	movf	TI_GetTics@TimerHandle^0,w,c
  3860   000EEC  0D05               	mullw	5
  3861   000EEE  50F3               	movf	243,w,c
  3862   000EF0  0F01               	addlw	low _Timers
  3863   000EF2  6ED9               	movwf	fsr2l,c
  3864   000EF4  6ADA               	clrf	fsr2h,c
  3865   000EF6  CFDE F03A          	movff	postinc2,??_TI_GetTics
  3866   000EFA  CFDE F03B          	movff	postinc2,??_TI_GetTics+1
  3867   000EFE  CFDE F03C          	movff	postinc2,??_TI_GetTics+2
  3868   000F02  CFDE F03D          	movff	postinc2,??_TI_GetTics+3
  3869   000F06  503A               	movf	??_TI_GetTics^0,w,c
  3870   000F08  5C3E               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  3871   000F0A  6E36               	movwf	?_TI_GetTics^0,c
  3872   000F0C  503B               	movf	(??_TI_GetTics+1)^0,w,c
  3873   000F0E  583F               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  3874   000F10  6E37               	movwf	(?_TI_GetTics+1)^0,c
  3875   000F12  503C               	movf	(??_TI_GetTics+2)^0,w,c
  3876   000F14  5840               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  3877   000F16  6E38               	movwf	(?_TI_GetTics+2)^0,c
  3878   000F18  503D               	movf	(??_TI_GetTics+3)^0,w,c
  3879   000F1A  5841               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  3880   000F1C  6E39               	movwf	(?_TI_GetTics+3)^0,c
  3881   000F1E  0012               	return		;funcret
  3882   000F20                     __end_of_TI_GetTics:
  3883                           	callstack 0
  3884                           
  3885 ;; *************** function _ReadFilas *****************
  3886 ;; Defined at:
  3887 ;;		line 10 in file "TAD_TECLADO.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      unsigned char 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1
  3901 ;;      Params:         0       0       0
  3902 ;;      Locals:         0       0       0
  3903 ;;      Temps:          0       0       0
  3904 ;;      Totals:         0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used: 1
  3907 ;; Hardware stack levels required when called: 3
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_motorTeclado
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text18
  3916   00115E                     __ptext18:
  3917                           	callstack 0
  3918   00115E                     _ReadFilas:
  3919                           	callstack 26
  3920   00115E                     
  3921                           ;TAD_TECLADO.c: 11:     return (PORTD & 0x0F);
  3922   00115E  5083               	movf	131,w,c	;volatile
  3923   001160  0B0F               	andlw	15
  3924   001162  0012               	return		;funcret
  3925   001164                     __end_of_ReadFilas:
  3926                           	callstack 0
  3927                           
  3928 ;; *************** function _GetTecla *****************
  3929 ;; Defined at:
  3930 ;;		line 128 in file "TAD_TECLADO.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  keymap         12    3[COMRAM] const unsigned char [3][
  3935 ;;  fila            1   16[COMRAM] unsigned char 
  3936 ;;  columna         1   15[COMRAM] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      unsigned char 
  3939 ;; Registers used:
  3940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1
  3946 ;;      Params:         0       0       0
  3947 ;;      Locals:        14       0       0
  3948 ;;      Temps:          2       0       0
  3949 ;;      Totals:        16       0       0
  3950 ;;Total ram usage:       16 bytes
  3951 ;; Hardware stack levels used: 1
  3952 ;; Hardware stack levels required when called: 3
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_motorTeclado
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text19
  3961   000B2C                     __ptext19:
  3962                           	callstack 0
  3963   000B2C                     _GetTecla:
  3964                           	callstack 26
  3965   000B2C                     
  3966                           ;TAD_TECLADO.c: 130:     unsigned char columna = 0;
  3967   000B2C  6A44               	clrf	GetTecla@columna^0,c
  3968                           
  3969                           ;TAD_TECLADO.c: 132:     switch(Filas) {
  3970   000B2E  EFAB  F005         	goto	l1547
  3971   000B32                     l172:
  3972   000B32  6A45               	clrf	GetTecla@fila^0,c
  3973   000B34  EFC9  F005         	goto	l1559
  3974   000B38                     l1535:
  3975   000B38  0E01               	movlw	1
  3976   000B3A  6E45               	movwf	GetTecla@fila^0,c
  3977   000B3C  EFC9  F005         	goto	l1559
  3978   000B40                     l1537:
  3979   000B40  0E02               	movlw	2
  3980   000B42  6E45               	movwf	GetTecla@fila^0,c
  3981   000B44  EFC9  F005         	goto	l1559
  3982   000B48                     l1539:
  3983   000B48  0E03               	movlw	3
  3984   000B4A  6E45               	movwf	GetTecla@fila^0,c
  3985   000B4C  EFC9  F005         	goto	l1559
  3986   000B50                     l1541:
  3987   000B50  0EFF               	movlw	255
  3988   000B52  EFF7  F005         	goto	l178
  3989   000B56                     l1547:
  3990   000B56  502C               	movf	_Filas^0,w,c
  3991                           
  3992                           ; Switch size 1, requested type "simple"
  3993                           ; Number of cases is 4, Range of values is 1 to 8
  3994                           ; switch strategies available:
  3995                           ; Name         Instructions Cycles
  3996                           ; simple_byte           13     7 (average)
  3997                           ;	Chosen strategy is simple_byte
  3998   000B58  0A01               	xorlw	1	; case 1
  3999   000B5A  B4D8               	btfsc	status,2,c
  4000   000B5C  EF99  F005         	goto	l172
  4001   000B60  0A03               	xorlw	3	; case 2
  4002   000B62  B4D8               	btfsc	status,2,c
  4003   000B64  EF9C  F005         	goto	l1535
  4004   000B68  0A06               	xorlw	6	; case 4
  4005   000B6A  B4D8               	btfsc	status,2,c
  4006   000B6C  EFA0  F005         	goto	l1537
  4007   000B70  0A0C               	xorlw	12	; case 8
  4008   000B72  B4D8               	btfsc	status,2,c
  4009   000B74  EFA4  F005         	goto	l1539
  4010   000B78  EFA8  F005         	goto	l1541
  4011   000B7C                     l180:
  4012   000B7C  6A44               	clrf	GetTecla@columna^0,c
  4013   000B7E  EFE3  F005         	goto	l1561
  4014   000B82                     l1549:
  4015   000B82  0E01               	movlw	1
  4016   000B84  6E44               	movwf	GetTecla@columna^0,c
  4017   000B86  EFE3  F005         	goto	l1561
  4018   000B8A                     l1551:
  4019   000B8A  0E02               	movlw	2
  4020   000B8C  6E44               	movwf	GetTecla@columna^0,c
  4021   000B8E  EFE3  F005         	goto	l1561
  4022   000B92                     l1559:
  4023   000B92  502B               	movf	_Columnas^0,w,c
  4024   000B94  0B07               	andlw	7
  4025   000B96  6E36               	movwf	??_GetTecla^0,c
  4026   000B98  6A37               	clrf	(??_GetTecla+1)^0,c
  4027                           
  4028                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4029                           ; Switch size 1, requested type "simple"
  4030                           ; Number of cases is 1, Range of values is 0 to 0
  4031                           ; switch strategies available:
  4032                           ; Name         Instructions Cycles
  4033                           ; simple_byte            4     3 (average)
  4034                           ;	Chosen strategy is simple_byte
  4035   000B9A  5037               	movf	(??_GetTecla+1)^0,w,c
  4036   000B9C  0A00               	xorlw	0	; case 0
  4037   000B9E  B4D8               	btfsc	status,2,c
  4038   000BA0  EFD4  F005         	goto	l3241
  4039   000BA4  EFA8  F005         	goto	l1541
  4040   000BA8                     l3241:
  4041                           
  4042                           ; Switch size 1, requested type "simple"
  4043                           ; Number of cases is 3, Range of values is 1 to 4
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte           10     6 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048   000BA8  5036               	movf	??_GetTecla^0,w,c
  4049   000BAA  0A01               	xorlw	1	; case 1
  4050   000BAC  B4D8               	btfsc	status,2,c
  4051   000BAE  EFBE  F005         	goto	l180
  4052   000BB2  0A03               	xorlw	3	; case 2
  4053   000BB4  B4D8               	btfsc	status,2,c
  4054   000BB6  EFC1  F005         	goto	l1549
  4055   000BBA  0A06               	xorlw	6	; case 4
  4056   000BBC  B4D8               	btfsc	status,2,c
  4057   000BBE  EFC5  F005         	goto	l1551
  4058   000BC2  EFA8  F005         	goto	l1541
  4059   000BC6                     l1561:
  4060                           
  4061                           ;TAD_TECLADO.c: 148:     const unsigned char keymap[4][3] = {
  4062   000BC6  0E01               	movlw	low GetTecla@F3223
  4063   000BC8  6EF6               	movwf	tblptrl,c
  4064   000BCA                     	if	1	;There is more than 1 active tblptr byte
  4065   000BCA  0E02               	movlw	high GetTecla@F3223
  4066   000BCC  6EF7               	movwf	tblptrh,c
  4067   000BCE                     	endif
  4068   000BCE                     	if	0	;There are less than 3 active tblptr bytes
  4069   000BCE                     	endif
  4070   000BCE  EE20  F038         	lfsr	2,GetTecla@keymap
  4071   000BD2  0E0B               	movlw	11
  4072   000BD4                     u360:
  4073   000BD4  0009               	tblrd		*+
  4074   000BD6  CFF5 FFDE          	movff	tablat,postinc2
  4075   000BDA  06E8               	decf	wreg,f,c
  4076   000BDC  E2FB               	bc	u360
  4077   000BDE                     
  4078                           ;TAD_TECLADO.c: 155:     return keymap[fila][columna];
  4079   000BDE  5045               	movf	GetTecla@fila^0,w,c
  4080   000BE0  0D03               	mullw	3
  4081   000BE2  50F3               	movf	243,w,c
  4082   000BE4  0F38               	addlw	low GetTecla@keymap
  4083   000BE6  2444               	addwf	GetTecla@columna^0,w,c
  4084   000BE8  6ED9               	movwf	fsr2l,c
  4085   000BEA  6ADA               	clrf	fsr2h,c
  4086   000BEC  50DF               	movf	indf2,w,c
  4087   000BEE                     l178:
  4088   000BEE  0012               	return		;funcret
  4089   000BF0                     __end_of_GetTecla:
  4090                           	callstack 0
  4091                           
  4092 ;; *************** function _initRFID *****************
  4093 ;; Defined at:
  4094 ;;		line 297 in file "TAD_RFID.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1
  4108 ;;      Params:         0       0       0
  4109 ;;      Locals:         0       0       0
  4110 ;;      Temps:          0       0       0
  4111 ;;      Totals:         0       0       0
  4112 ;;Total ram usage:        0 bytes
  4113 ;; Hardware stack levels used: 1
  4114 ;; Hardware stack levels required when called: 8
  4115 ;; This function calls:
  4116 ;;		_InitPortDirections
  4117 ;;		_MFRC522_Init
  4118 ;; This function is called by:
  4119 ;;		_main
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text20
  4124   00113E                     __ptext20:
  4125                           	callstack 0
  4126   00113E                     _initRFID:
  4127                           	callstack 22
  4128   00113E                     
  4129                           ;TAD_RFID.c: 298:     InitPortDirections();
  4130   00113E  EC99  F008         	call	_InitPortDirections	;wreg free
  4131   001142                     
  4132                           ;TAD_RFID.c: 299:     MFRC522_Init();
  4133   001142  EC43  F007         	call	_MFRC522_Init	;wreg free
  4134   001146  0012               	return		;funcret
  4135   001148                     __end_of_initRFID:
  4136                           	callstack 0
  4137                           
  4138 ;; *************** function _MFRC522_Init *****************
  4139 ;; Defined at:
  4140 ;;		line 118 in file "TAD_RFID.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1
  4154 ;;      Params:         0       0       0
  4155 ;;      Locals:         0       0       0
  4156 ;;      Temps:          0       0       0
  4157 ;;      Totals:         0       0       0
  4158 ;;Total ram usage:        0 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 7
  4161 ;; This function calls:
  4162 ;;		_MFRC522_AntennaOff
  4163 ;;		_MFRC522_AntennaOn
  4164 ;;		_MFRC522_Reset
  4165 ;;		_MFRC522_Wr
  4166 ;; This function is called by:
  4167 ;;		_initRFID
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text21
  4172   000E86                     __ptext21:
  4173                           	callstack 0
  4174   000E86                     _MFRC522_Init:
  4175                           	callstack 22
  4176   000E86                     
  4177                           ;TAD_RFID.c: 119:     LATCbits.LATC3 = 1;
  4178   000E86  868B               	bsf	139,3,c	;volatile
  4179                           
  4180                           ;TAD_RFID.c: 120:     LATCbits.LATC4 = 1;
  4181   000E88  888B               	bsf	139,4,c	;volatile
  4182   000E8A                     
  4183                           ;TAD_RFID.c: 122:     MFRC522_Reset();
  4184   000E8A  EC00  F008         	call	_MFRC522_Reset	;wreg free
  4185                           
  4186                           ;TAD_RFID.c: 123:     MFRC522_Wr(0x2A, 0x8D);
  4187   000E8E  0E8D               	movlw	141
  4188   000E90  6E40               	movwf	MFRC522_Wr@value^0,c
  4189   000E92  0E2A               	movlw	42
  4190   000E94  ECF8  F005         	call	_MFRC522_Wr
  4191                           
  4192                           ;TAD_RFID.c: 124:     MFRC522_Wr(0x2B, 0x3E);
  4193   000E98  0E3E               	movlw	62
  4194   000E9A  6E40               	movwf	MFRC522_Wr@value^0,c
  4195   000E9C  0E2B               	movlw	43
  4196   000E9E  ECF8  F005         	call	_MFRC522_Wr
  4197                           
  4198                           ;TAD_RFID.c: 125:     MFRC522_Wr(0x2D, 30);
  4199   000EA2  0E1E               	movlw	30
  4200   000EA4  6E40               	movwf	MFRC522_Wr@value^0,c
  4201   000EA6  0E2D               	movlw	45
  4202   000EA8  ECF8  F005         	call	_MFRC522_Wr
  4203                           
  4204                           ;TAD_RFID.c: 126:     MFRC522_Wr(0x2C, 0);
  4205   000EAC  0E00               	movlw	0
  4206   000EAE  6E40               	movwf	MFRC522_Wr@value^0,c
  4207   000EB0  0E2C               	movlw	44
  4208   000EB2  ECF8  F005         	call	_MFRC522_Wr
  4209                           
  4210                           ;TAD_RFID.c: 127:     MFRC522_Wr(0x15, 0x40);
  4211   000EB6  0E40               	movlw	64
  4212   000EB8  6E40               	movwf	MFRC522_Wr@value^0,c
  4213   000EBA  0E15               	movlw	21
  4214   000EBC  ECF8  F005         	call	_MFRC522_Wr
  4215                           
  4216                           ;TAD_RFID.c: 128:     MFRC522_Wr(0x11, 0x3D);
  4217   000EC0  0E3D               	movlw	61
  4218   000EC2  6E40               	movwf	MFRC522_Wr@value^0,c
  4219   000EC4  0E11               	movlw	17
  4220   000EC6  ECF8  F005         	call	_MFRC522_Wr
  4221                           
  4222                           ;TAD_RFID.c: 130:     MFRC522_AntennaOff();
  4223   000ECA  EC93  F008         	call	_MFRC522_AntennaOff	;wreg free
  4224                           
  4225                           ;TAD_RFID.c: 131:     MFRC522_AntennaOn();
  4226   000ECE  EC8D  F008         	call	_MFRC522_AntennaOn	;wreg free
  4227   000ED2  0012               	return		;funcret
  4228   000ED4                     __end_of_MFRC522_Init:
  4229                           	callstack 0
  4230                           
  4231 ;; *************** function _MFRC522_Reset *****************
  4232 ;; Defined at:
  4233 ;;		line 99 in file "TAD_RFID.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1
  4247 ;;      Params:         0       0       0
  4248 ;;      Locals:         0       0       0
  4249 ;;      Temps:          0       0       0
  4250 ;;      Totals:         0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used: 1
  4253 ;; Hardware stack levels required when called: 5
  4254 ;; This function calls:
  4255 ;;		_MFRC522_Wr
  4256 ;;		_delay_us
  4257 ;; This function is called by:
  4258 ;;		_MFRC522_Init
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text22
  4263   001000                     __ptext22:
  4264                           	callstack 0
  4265   001000                     _MFRC522_Reset:
  4266                           	callstack 23
  4267   001000                     
  4268                           ;TAD_RFID.c: 100:     LATCbits.LATC4 = 1;
  4269   001000  888B               	bsf	139,4,c	;volatile
  4270   001002                     
  4271                           ;TAD_RFID.c: 101:     delay_us (1);
  4272   001002  0E01               	movlw	1
  4273   001004  ECB3  F007         	call	_delay_us
  4274   001008                     
  4275                           ;TAD_RFID.c: 102:     LATCbits.LATC4 = 0;
  4276   001008  988B               	bcf	139,4,c	;volatile
  4277                           
  4278                           ;TAD_RFID.c: 103:     delay_us (1);
  4279   00100A  0E01               	movlw	1
  4280   00100C  ECB3  F007         	call	_delay_us
  4281   001010                     
  4282                           ;TAD_RFID.c: 104:     LATCbits.LATC4 = 1;
  4283   001010  888B               	bsf	139,4,c	;volatile
  4284                           
  4285                           ;TAD_RFID.c: 105:     delay_us (1);
  4286   001012  0E01               	movlw	1
  4287   001014  ECB3  F007         	call	_delay_us
  4288                           
  4289                           ;TAD_RFID.c: 106:     MFRC522_Wr(0x01, 0x0F);
  4290   001018  0E0F               	movlw	15
  4291   00101A  6E40               	movwf	MFRC522_Wr@value^0,c
  4292   00101C  0E01               	movlw	1
  4293   00101E  ECF8  F005         	call	_MFRC522_Wr
  4294                           
  4295                           ;TAD_RFID.c: 107:     delay_us (1);
  4296   001022  0E01               	movlw	1
  4297   001024  ECB3  F007         	call	_delay_us
  4298   001028  0012               	return		;funcret
  4299   00102A                     __end_of_MFRC522_Reset:
  4300                           	callstack 0
  4301                           
  4302 ;; *************** function _MFRC522_AntennaOn *****************
  4303 ;; Defined at:
  4304 ;;		line 110 in file "TAD_RFID.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1
  4318 ;;      Params:         0       0       0
  4319 ;;      Locals:         0       0       0
  4320 ;;      Temps:          0       0       0
  4321 ;;      Totals:         0       0       0
  4322 ;;Total ram usage:        0 bytes
  4323 ;; Hardware stack levels used: 1
  4324 ;; Hardware stack levels required when called: 6
  4325 ;; This function calls:
  4326 ;;		_MFRC522_Set_Bit
  4327 ;; This function is called by:
  4328 ;;		_MFRC522_Init
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text23
  4333   00111A                     __ptext23:
  4334                           	callstack 0
  4335   00111A                     _MFRC522_AntennaOn:
  4336                           	callstack 22
  4337   00111A                     
  4338                           ;TAD_RFID.c: 111:     MFRC522_Set_Bit(0x14, 0x03);
  4339   00111A  0E03               	movlw	3
  4340   00111C  6E45               	movwf	MFRC522_Set_Bit@mask^0,c
  4341   00111E  0E14               	movlw	20
  4342   001120  EC7B  F008         	call	_MFRC522_Set_Bit
  4343   001124  0012               	return		;funcret
  4344   001126                     __end_of_MFRC522_AntennaOn:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _MFRC522_Set_Bit *****************
  4348 ;; Defined at:
  4349 ;;		line 95 in file "TAD_RFID.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  addr            1    wreg     unsigned char 
  4352 ;;  mask            1   16[COMRAM] unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  addr            1   17[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1
  4364 ;;      Params:         1       0       0
  4365 ;;      Locals:         1       0       0
  4366 ;;      Temps:          0       0       0
  4367 ;;      Totals:         2       0       0
  4368 ;;Total ram usage:        2 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; Hardware stack levels required when called: 5
  4371 ;; This function calls:
  4372 ;;		_MFRC522_Rd
  4373 ;;		_MFRC522_Wr
  4374 ;; This function is called by:
  4375 ;;		_MFRC522_AntennaOn
  4376 ;;		_motor_RFID
  4377 ;;		_MFRC522_ToCard
  4378 ;;		_MFRC522_CRC
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text24
  4383   0010F6                     __ptext24:
  4384                           	callstack 0
  4385   0010F6                     _MFRC522_Set_Bit:
  4386                           	callstack 24
  4387                           
  4388                           ;incstack = 0
  4389                           ;MFRC522_Set_Bit@addr stored from wreg
  4390   0010F6  6E46               	movwf	MFRC522_Set_Bit@addr^0,c
  4391   0010F8                     
  4392                           ;TAD_RFID.c: 96:     MFRC522_Wr(addr, MFRC522_Rd(addr) | mask);
  4393   0010F8  5046               	movf	MFRC522_Set_Bit@addr^0,w,c
  4394   0010FA  EC4C  F006         	call	_MFRC522_Rd
  4395   0010FE  1045               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  4396   001100  6E40               	movwf	MFRC522_Wr@value^0,c
  4397   001102  5046               	movf	MFRC522_Set_Bit@addr^0,w,c
  4398   001104  ECF8  F005         	call	_MFRC522_Wr
  4399   001108  0012               	return		;funcret
  4400   00110A                     __end_of_MFRC522_Set_Bit:
  4401                           	callstack 0
  4402                           
  4403 ;; *************** function _MFRC522_AntennaOff *****************
  4404 ;; Defined at:
  4405 ;;		line 114 in file "TAD_RFID.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1
  4419 ;;      Params:         0       0       0
  4420 ;;      Locals:         0       0       0
  4421 ;;      Temps:          0       0       0
  4422 ;;      Totals:         0       0       0
  4423 ;;Total ram usage:        0 bytes
  4424 ;; Hardware stack levels used: 1
  4425 ;; Hardware stack levels required when called: 6
  4426 ;; This function calls:
  4427 ;;		_MFRC522_Clear_Bit
  4428 ;; This function is called by:
  4429 ;;		_MFRC522_Init
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text25
  4434   001126                     __ptext25:
  4435                           	callstack 0
  4436   001126                     _MFRC522_AntennaOff:
  4437                           	callstack 22
  4438   001126                     
  4439                           ;TAD_RFID.c: 115:     MFRC522_Clear_Bit(0x14, 0x03);
  4440   001126  0E03               	movlw	3
  4441   001128  6E45               	movwf	MFRC522_Clear_Bit@mask^0,c
  4442   00112A  0E14               	movlw	20
  4443   00112C  EC42  F008         	call	_MFRC522_Clear_Bit
  4444   001130  0012               	return		;funcret
  4445   001132                     __end_of_MFRC522_AntennaOff:
  4446                           	callstack 0
  4447                           
  4448 ;; *************** function _MFRC522_Clear_Bit *****************
  4449 ;; Defined at:
  4450 ;;		line 91 in file "TAD_RFID.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  addr            1    wreg     unsigned char 
  4453 ;;  mask            1   16[COMRAM] unsigned char 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  addr            1   18[COMRAM] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1
  4465 ;;      Params:         1       0       0
  4466 ;;      Locals:         1       0       0
  4467 ;;      Temps:          1       0       0
  4468 ;;      Totals:         3       0       0
  4469 ;;Total ram usage:        3 bytes
  4470 ;; Hardware stack levels used: 1
  4471 ;; Hardware stack levels required when called: 5
  4472 ;; This function calls:
  4473 ;;		_MFRC522_Rd
  4474 ;;		_MFRC522_Wr
  4475 ;; This function is called by:
  4476 ;;		_MFRC522_AntennaOff
  4477 ;;		_motor_RFID
  4478 ;;		_MFRC522_ToCard
  4479 ;;		_MFRC522_CRC
  4480 ;;		_MFRC522_Halt
  4481 ;;		_MFRC522_AntiColl
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text26
  4486   001084                     __ptext26:
  4487                           	callstack 0
  4488   001084                     _MFRC522_Clear_Bit:
  4489                           	callstack 24
  4490                           
  4491                           ;incstack = 0
  4492                           ;MFRC522_Clear_Bit@addr stored from wreg
  4493   001084  6E47               	movwf	MFRC522_Clear_Bit@addr^0,c
  4494   001086                     
  4495                           ;TAD_RFID.c: 92:     MFRC522_Wr(addr, MFRC522_Rd(addr) & ~mask);
  4496   001086  5045               	movf	MFRC522_Clear_Bit@mask^0,w,c
  4497   001088  0AFF               	xorlw	255
  4498   00108A  6E46               	movwf	??_MFRC522_Clear_Bit^0,c
  4499   00108C  5047               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4500   00108E  EC4C  F006         	call	_MFRC522_Rd
  4501   001092  1446               	andwf	??_MFRC522_Clear_Bit^0,w,c
  4502   001094  6E40               	movwf	MFRC522_Wr@value^0,c
  4503   001096  5047               	movf	MFRC522_Clear_Bit@addr^0,w,c
  4504   001098  ECF8  F005         	call	_MFRC522_Wr
  4505   00109C  0012               	return		;funcret
  4506   00109E                     __end_of_MFRC522_Clear_Bit:
  4507                           	callstack 0
  4508                           
  4509 ;; *************** function _MFRC522_Wr *****************
  4510 ;; Defined at:
  4511 ;;		line 63 in file "TAD_RFID.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  Address         1    wreg     unsigned char 
  4514 ;;  value           1   11[COMRAM] unsigned char 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  Address         1   13[COMRAM] unsigned char 
  4517 ;;  i               1   15[COMRAM] unsigned char 
  4518 ;;  ucAddr          1   14[COMRAM] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1
  4528 ;;      Params:         1       0       0
  4529 ;;      Locals:         3       0       0
  4530 ;;      Temps:          1       0       0
  4531 ;;      Totals:         5       0       0
  4532 ;;Total ram usage:        5 bytes
  4533 ;; Hardware stack levels used: 1
  4534 ;; Hardware stack levels required when called: 4
  4535 ;; This function calls:
  4536 ;;		_delay_us
  4537 ;; This function is called by:
  4538 ;;		_MFRC522_Clear_Bit
  4539 ;;		_MFRC522_Set_Bit
  4540 ;;		_MFRC522_Reset
  4541 ;;		_MFRC522_Init
  4542 ;;		_motor_RFID
  4543 ;;		_MFRC522_ToCard
  4544 ;;		_MFRC522_Request
  4545 ;;		_MFRC522_CRC
  4546 ;;		_MFRC522_AntiColl
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text27
  4551   000BF0                     __ptext27:
  4552                           	callstack 0
  4553   000BF0                     _MFRC522_Wr:
  4554                           	callstack 25
  4555                           
  4556                           ;incstack = 0
  4557                           ;MFRC522_Wr@Address stored from wreg
  4558   000BF0  6E42               	movwf	MFRC522_Wr@Address^0,c
  4559   000BF2                     
  4560                           ;TAD_RFID.c: 64:     unsigned char i, ucAddr = ((Address << 1) & 0x7E);
  4561   000BF2  5042               	movf	MFRC522_Wr@Address^0,w,c
  4562   000BF4  2442               	addwf	MFRC522_Wr@Address^0,w,c
  4563   000BF6  0B7E               	andlw	126
  4564   000BF8  6E43               	movwf	MFRC522_Wr@ucAddr^0,c
  4565   000BFA                     
  4566                           ;TAD_RFID.c: 65:     LATCbits.LATC2 = 0;
  4567   000BFA  948B               	bcf	139,2,c	;volatile
  4568   000BFC                     
  4569                           ;TAD_RFID.c: 66:     LATCbits.LATC3 = 0;
  4570   000BFC  968B               	bcf	139,3,c	;volatile
  4571   000BFE                     
  4572                           ;TAD_RFID.c: 67:     for (i = 8; i > 0; i--) {
  4573   000BFE  0E08               	movlw	8
  4574   000C00  6E44               	movwf	MFRC522_Wr@i^0,c
  4575   000C02                     l2357:
  4576                           
  4577                           ;TAD_RFID.c: 68:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4578   000C02  BE43               	btfsc	MFRC522_Wr@ucAddr^0,7,c
  4579   000C04  EF06  F006         	goto	u1351
  4580   000C08  EF0A  F006         	goto	u1350
  4581   000C0C                     u1351:
  4582   000C0C  6A41               	clrf	??_MFRC522_Wr^0,c
  4583   000C0E  2A41               	incf	??_MFRC522_Wr^0,f,c
  4584   000C10  EF0B  F006         	goto	u1368
  4585   000C14                     u1350:
  4586   000C14  6A41               	clrf	??_MFRC522_Wr^0,c
  4587   000C16                     u1368:
  4588   000C16  4641               	rlncf	??_MFRC522_Wr^0,f,c
  4589   000C18  508B               	movf	139,w,c	;volatile
  4590   000C1A  1841               	xorwf	??_MFRC522_Wr^0,w,c
  4591   000C1C  0BFD               	andlw	-3
  4592   000C1E  1841               	xorwf	??_MFRC522_Wr^0,w,c
  4593   000C20  6E8B               	movwf	139,c	;volatile
  4594   000C22                     
  4595                           ;TAD_RFID.c: 69:         LATCbits.LATC2 = 1;
  4596   000C22  848B               	bsf	139,2,c	;volatile
  4597                           
  4598                           ;TAD_RFID.c: 70:         ucAddr <<= 1;
  4599   000C24  90D8               	bcf	status,0,c
  4600   000C26  3643               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  4601   000C28                     
  4602                           ;TAD_RFID.c: 71:         delay_us(5);
  4603   000C28  0E05               	movlw	5
  4604   000C2A  ECB3  F007         	call	_delay_us
  4605   000C2E                     
  4606                           ;TAD_RFID.c: 72:         LATCbits.LATC2 = 0;
  4607   000C2E  948B               	bcf	139,2,c	;volatile
  4608   000C30                     
  4609                           ;TAD_RFID.c: 73:         delay_us(5);
  4610   000C30  0E05               	movlw	5
  4611   000C32  ECB3  F007         	call	_delay_us
  4612   000C36                     
  4613                           ;TAD_RFID.c: 74:     }
  4614   000C36  0644               	decf	MFRC522_Wr@i^0,f,c
  4615   000C38  5044               	movf	MFRC522_Wr@i^0,w,c
  4616   000C3A  A4D8               	btfss	status,2,c
  4617   000C3C  EF22  F006         	goto	u1371
  4618   000C40  EF24  F006         	goto	u1370
  4619   000C44                     u1371:
  4620   000C44  EF01  F006         	goto	l2357
  4621   000C48                     u1370:
  4622   000C48                     
  4623                           ;TAD_RFID.c: 76:     for (i = 8; i > 0; i--) {
  4624   000C48  0E08               	movlw	8
  4625   000C4A  6E44               	movwf	MFRC522_Wr@i^0,c
  4626   000C4C                     l2375:
  4627                           
  4628                           ;TAD_RFID.c: 77:         LATCbits.LATC1 = ((value & 0x80) == 0x80);
  4629   000C4C  BE40               	btfsc	MFRC522_Wr@value^0,7,c
  4630   000C4E  EF2B  F006         	goto	u1381
  4631   000C52  EF2F  F006         	goto	u1380
  4632   000C56                     u1381:
  4633   000C56  6A41               	clrf	??_MFRC522_Wr^0,c
  4634   000C58  2A41               	incf	??_MFRC522_Wr^0,f,c
  4635   000C5A  EF30  F006         	goto	u1398
  4636   000C5E                     u1380:
  4637   000C5E  6A41               	clrf	??_MFRC522_Wr^0,c
  4638   000C60                     u1398:
  4639   000C60  4641               	rlncf	??_MFRC522_Wr^0,f,c
  4640   000C62  508B               	movf	139,w,c	;volatile
  4641   000C64  1841               	xorwf	??_MFRC522_Wr^0,w,c
  4642   000C66  0BFD               	andlw	-3
  4643   000C68  1841               	xorwf	??_MFRC522_Wr^0,w,c
  4644   000C6A  6E8B               	movwf	139,c	;volatile
  4645   000C6C                     
  4646                           ;TAD_RFID.c: 78:         LATCbits.LATC2 = 1;
  4647   000C6C  848B               	bsf	139,2,c	;volatile
  4648                           
  4649                           ;TAD_RFID.c: 79:         value <<= 1;
  4650   000C6E  90D8               	bcf	status,0,c
  4651   000C70  3640               	rlcf	MFRC522_Wr@value^0,f,c
  4652   000C72                     
  4653                           ;TAD_RFID.c: 80:         delay_us(5);
  4654   000C72  0E05               	movlw	5
  4655   000C74  ECB3  F007         	call	_delay_us
  4656   000C78                     
  4657                           ;TAD_RFID.c: 81:         LATCbits.LATC2 = 0;
  4658   000C78  948B               	bcf	139,2,c	;volatile
  4659   000C7A                     
  4660                           ;TAD_RFID.c: 82:         delay_us(5);
  4661   000C7A  0E05               	movlw	5
  4662   000C7C  ECB3  F007         	call	_delay_us
  4663   000C80                     
  4664                           ;TAD_RFID.c: 83:     }
  4665   000C80  0644               	decf	MFRC522_Wr@i^0,f,c
  4666   000C82  5044               	movf	MFRC522_Wr@i^0,w,c
  4667   000C84  A4D8               	btfss	status,2,c
  4668   000C86  EF47  F006         	goto	u1401
  4669   000C8A  EF49  F006         	goto	u1400
  4670   000C8E                     u1401:
  4671   000C8E  EF26  F006         	goto	l2375
  4672   000C92                     u1400:
  4673   000C92                     
  4674                           ;TAD_RFID.c: 85:     LATCbits.LATC3 = 1;
  4675   000C92  868B               	bsf	139,3,c	;volatile
  4676                           
  4677                           ;TAD_RFID.c: 86:     LATCbits.LATC2 = 1;
  4678   000C94  848B               	bsf	139,2,c	;volatile
  4679   000C96  0012               	return		;funcret
  4680   000C98                     __end_of_MFRC522_Wr:
  4681                           	callstack 0
  4682                           
  4683 ;; *************** function _MFRC522_Rd *****************
  4684 ;; Defined at:
  4685 ;;		line 32 in file "TAD_RFID.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  Address         1    wreg     unsigned char 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  Address         1    7[COMRAM] unsigned char 
  4690 ;;  i               1   10[COMRAM] unsigned char 
  4691 ;;  ucResult        1    9[COMRAM] unsigned char 
  4692 ;;  ucAddr          1    8[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      unsigned char 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1
  4702 ;;      Params:         0       0       0
  4703 ;;      Locals:         4       0       0
  4704 ;;      Temps:          1       0       0
  4705 ;;      Totals:         5       0       0
  4706 ;;Total ram usage:        5 bytes
  4707 ;; Hardware stack levels used: 1
  4708 ;; Hardware stack levels required when called: 4
  4709 ;; This function calls:
  4710 ;;		_delay_us
  4711 ;; This function is called by:
  4712 ;;		_MFRC522_Clear_Bit
  4713 ;;		_MFRC522_Set_Bit
  4714 ;;		_motor_RFID
  4715 ;;		_MFRC522_ToCard
  4716 ;;		_MFRC522_CRC
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text28
  4721   000C98                     __ptext28:
  4722                           	callstack 0
  4723   000C98                     _MFRC522_Rd:
  4724                           	callstack 24
  4725                           
  4726                           ;incstack = 0
  4727                           ;MFRC522_Rd@Address stored from wreg
  4728   000C98  6E3C               	movwf	MFRC522_Rd@Address^0,c
  4729   000C9A                     
  4730                           ;TAD_RFID.c: 33:     unsigned char i, ucAddr = ((Address<<1) & 0x7E) | 0x80;
  4731   000C9A  503C               	movf	MFRC522_Rd@Address^0,w,c
  4732   000C9C  243C               	addwf	MFRC522_Rd@Address^0,w,c
  4733   000C9E  0B7E               	andlw	126
  4734   000CA0  0980               	iorlw	128
  4735   000CA2  6E3D               	movwf	MFRC522_Rd@ucAddr^0,c
  4736   000CA4                     
  4737                           ;TAD_RFID.c: 34:     unsigned char ucResult = 0;
  4738   000CA4  6A3E               	clrf	MFRC522_Rd@ucResult^0,c
  4739   000CA6                     
  4740                           ;TAD_RFID.c: 36:     LATCbits.LATC2 = 0;
  4741   000CA6  948B               	bcf	139,2,c	;volatile
  4742   000CA8                     
  4743                           ;TAD_RFID.c: 37:     LATCbits.LATC3 = 0;
  4744   000CA8  968B               	bcf	139,3,c	;volatile
  4745   000CAA                     
  4746                           ;TAD_RFID.c: 39:     for (i = 8; i > 0; i--) {
  4747   000CAA  0E08               	movlw	8
  4748   000CAC  6E3F               	movwf	MFRC522_Rd@i^0,c
  4749   000CAE                     l1279:
  4750                           
  4751                           ;TAD_RFID.c: 40:         LATCbits.LATC1 = ((ucAddr & 0x80) == 0x80);
  4752   000CAE  BE3D               	btfsc	MFRC522_Rd@ucAddr^0,7,c
  4753   000CB0  EF5C  F006         	goto	u21
  4754   000CB4  EF60  F006         	goto	u20
  4755   000CB8                     u21:
  4756   000CB8  6A3B               	clrf	??_MFRC522_Rd^0,c
  4757   000CBA  2A3B               	incf	??_MFRC522_Rd^0,f,c
  4758   000CBC  EF61  F006         	goto	u38
  4759   000CC0                     u20:
  4760   000CC0  6A3B               	clrf	??_MFRC522_Rd^0,c
  4761   000CC2                     u38:
  4762   000CC2  463B               	rlncf	??_MFRC522_Rd^0,f,c
  4763   000CC4  508B               	movf	139,w,c	;volatile
  4764   000CC6  183B               	xorwf	??_MFRC522_Rd^0,w,c
  4765   000CC8  0BFD               	andlw	-3
  4766   000CCA  183B               	xorwf	??_MFRC522_Rd^0,w,c
  4767   000CCC  6E8B               	movwf	139,c	;volatile
  4768   000CCE                     
  4769                           ;TAD_RFID.c: 41:         LATCbits.LATC2 = 1;
  4770   000CCE  848B               	bsf	139,2,c	;volatile
  4771   000CD0                     
  4772                           ;TAD_RFID.c: 42:         delay_us(5);
  4773   000CD0  0E05               	movlw	5
  4774   000CD2  ECB3  F007         	call	_delay_us
  4775   000CD6                     
  4776                           ;TAD_RFID.c: 43:         ucAddr <<= 1;
  4777   000CD6  90D8               	bcf	status,0,c
  4778   000CD8  363D               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  4779   000CDA                     
  4780                           ;TAD_RFID.c: 44:         LATCbits.LATC2 = 0;
  4781   000CDA  948B               	bcf	139,2,c	;volatile
  4782                           
  4783                           ;TAD_RFID.c: 45:         delay_us(5);
  4784   000CDC  0E05               	movlw	5
  4785   000CDE  ECB3  F007         	call	_delay_us
  4786   000CE2                     
  4787                           ;TAD_RFID.c: 46:     }
  4788   000CE2  063F               	decf	MFRC522_Rd@i^0,f,c
  4789   000CE4  503F               	movf	MFRC522_Rd@i^0,w,c
  4790   000CE6  A4D8               	btfss	status,2,c
  4791   000CE8  EF78  F006         	goto	u41
  4792   000CEC  EF7A  F006         	goto	u40
  4793   000CF0                     u41:
  4794   000CF0  EF57  F006         	goto	l1279
  4795   000CF4                     u40:
  4796   000CF4                     
  4797                           ;TAD_RFID.c: 48:     for (i = 8; i > 0; i--) {
  4798   000CF4  0E08               	movlw	8
  4799   000CF6  6E3F               	movwf	MFRC522_Rd@i^0,c
  4800   000CF8                     l210:
  4801                           
  4802                           ;TAD_RFID.c: 49:         LATCbits.LATC2 = 1;
  4803   000CF8  848B               	bsf	139,2,c	;volatile
  4804   000CFA                     
  4805                           ;TAD_RFID.c: 50:         delay_us(5);
  4806   000CFA  0E05               	movlw	5
  4807   000CFC  ECB3  F007         	call	_delay_us
  4808   000D00                     
  4809                           ;TAD_RFID.c: 51:         ucResult <<= 1;
  4810   000D00  90D8               	bcf	status,0,c
  4811   000D02  363E               	rlcf	MFRC522_Rd@ucResult^0,f,c
  4812   000D04                     
  4813                           ;TAD_RFID.c: 52:         ucResult|= PORTCbits.RC0;
  4814   000D04  B082               	btfsc	130,0,c	;volatile
  4815   000D06  EF87  F006         	goto	u51
  4816   000D0A  EF8A  F006         	goto	u50
  4817   000D0E                     u51:
  4818   000D0E  0E01               	movlw	1
  4819   000D10  EF8B  F006         	goto	u56
  4820   000D14                     u50:
  4821   000D14  0E00               	movlw	0
  4822   000D16                     u56:
  4823   000D16  123E               	iorwf	MFRC522_Rd@ucResult^0,f,c
  4824   000D18                     
  4825                           ;TAD_RFID.c: 53:         LATCbits.LATC2 = 0;
  4826   000D18  948B               	bcf	139,2,c	;volatile
  4827                           
  4828                           ;TAD_RFID.c: 54:         delay_us(5);
  4829   000D1A  0E05               	movlw	5
  4830   000D1C  ECB3  F007         	call	_delay_us
  4831   000D20                     
  4832                           ;TAD_RFID.c: 55:     }
  4833   000D20  063F               	decf	MFRC522_Rd@i^0,f,c
  4834   000D22  503F               	movf	MFRC522_Rd@i^0,w,c
  4835   000D24  A4D8               	btfss	status,2,c
  4836   000D26  EF97  F006         	goto	u61
  4837   000D2A  EF99  F006         	goto	u60
  4838   000D2E                     u61:
  4839   000D2E  EF7C  F006         	goto	l210
  4840   000D32                     u60:
  4841   000D32                     
  4842                           ;TAD_RFID.c: 57:     LATCbits.LATC3 = 1;
  4843   000D32  868B               	bsf	139,3,c	;volatile
  4844                           
  4845                           ;TAD_RFID.c: 58:     LATCbits.LATC2 = 1;
  4846   000D34  848B               	bsf	139,2,c	;volatile
  4847   000D36                     
  4848                           ;TAD_RFID.c: 59:     return ucResult;
  4849   000D36  503E               	movf	MFRC522_Rd@ucResult^0,w,c
  4850   000D38  0012               	return		;funcret
  4851   000D3A                     __end_of_MFRC522_Rd:
  4852                           	callstack 0
  4853                           
  4854 ;; *************** function _delay_us *****************
  4855 ;; Defined at:
  4856 ;;		line 27 in file "TAD_RFID.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  howMany         1    wreg     unsigned char 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  howMany         1    4[COMRAM] unsigned char 
  4861 ;;  x               1    5[COMRAM] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, prodl, prodh
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1
  4871 ;;      Params:         0       0       0
  4872 ;;      Locals:         2       0       0
  4873 ;;      Temps:          3       0       0
  4874 ;;      Totals:         5       0       0
  4875 ;;Total ram usage:        5 bytes
  4876 ;; Hardware stack levels used: 1
  4877 ;; Hardware stack levels required when called: 3
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_MFRC522_Rd
  4882 ;;		_MFRC522_Wr
  4883 ;;		_MFRC522_Reset
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text29
  4888   000F66                     __ptext29:
  4889                           	callstack 0
  4890   000F66                     _delay_us:
  4891                           	callstack 25
  4892                           
  4893                           ;incstack = 0
  4894                           ;delay_us@howMany stored from wreg
  4895   000F66  6E39               	movwf	delay_us@howMany^0,c
  4896   000F68                     
  4897                           ;TAD_RFID.c: 28:     char x;;TAD_RFID.c: 29:     for (x = 0; x < howMany * 16; x++) __no
      +                          p();
  4898   000F68  6A3A               	clrf	delay_us@x^0,c
  4899   000F6A  EFB9  F007         	goto	l1263
  4900   000F6E                     l203:
  4901   000F6E  0000               	nop	
  4902   000F70  2A3A               	incf	delay_us@x^0,f,c
  4903   000F72                     l1263:
  4904   000F72  5039               	movf	delay_us@howMany^0,w,c
  4905   000F74  0D10               	mullw	16
  4906   000F76  503A               	movf	delay_us@x^0,w,c
  4907   000F78  6E36               	movwf	??_delay_us^0,c
  4908   000F7A  6A37               	clrf	(??_delay_us+1)^0,c
  4909   000F7C  50F3               	movf	243,w,c
  4910   000F7E  5C36               	subwf	??_delay_us^0,w,c
  4911   000F80  5037               	movf	(??_delay_us+1)^0,w,c
  4912   000F82  0A80               	xorlw	128
  4913   000F84  6E38               	movwf	(??_delay_us+2)^0,c
  4914   000F86  50F4               	movf	244,w,c
  4915   000F88  0A80               	xorlw	128
  4916   000F8A  5838               	subwfb	(??_delay_us+2)^0,w,c
  4917   000F8C  A0D8               	btfss	status,0,c
  4918   000F8E  EFCB  F007         	goto	u11
  4919   000F92  EFCD  F007         	goto	u10
  4920   000F96                     u11:
  4921   000F96  EFB7  F007         	goto	l203
  4922   000F9A                     u10:
  4923   000F9A  0012               	return		;funcret
  4924   000F9C                     __end_of_delay_us:
  4925                           	callstack 0
  4926                           
  4927 ;; *************** function _InitPortDirections *****************
  4928 ;; Defined at:
  4929 ;;		line 19 in file "TAD_RFID.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		None
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1
  4943 ;;      Params:         0       0       0
  4944 ;;      Locals:         0       0       0
  4945 ;;      Temps:          0       0       0
  4946 ;;      Totals:         0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used: 1
  4949 ;; Hardware stack levels required when called: 3
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_initRFID
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text30
  4958   001132                     __ptext30:
  4959                           	callstack 0
  4960   001132                     _InitPortDirections:
  4961                           	callstack 26
  4962   001132                     
  4963                           ;TAD_RFID.c: 20:     TRISCbits.TRISC0 = 1;
  4964   001132  8094               	bsf	148,0,c	;volatile
  4965                           
  4966                           ;TAD_RFID.c: 21:     TRISCbits.TRISC1 = 0;
  4967   001134  9294               	bcf	148,1,c	;volatile
  4968                           
  4969                           ;TAD_RFID.c: 22:     TRISCbits.TRISC2 = 0;
  4970   001136  9494               	bcf	148,2,c	;volatile
  4971                           
  4972                           ;TAD_RFID.c: 23:     TRISCbits.TRISC3 = 0;
  4973   001138  9694               	bcf	148,3,c	;volatile
  4974                           
  4975                           ;TAD_RFID.c: 24:     TRISCbits.TRISC4 = 0;
  4976   00113A  9894               	bcf	148,4,c	;volatile
  4977   00113C  0012               	return		;funcret
  4978   00113E                     __end_of_InitPortDirections:
  4979                           	callstack 0
  4980                           
  4981 ;; *************** function _initPorts *****************
  4982 ;; Defined at:
  4983 ;;		line 57 in file "main.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		None
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1
  4997 ;;      Params:         0       0       0
  4998 ;;      Locals:         0       0       0
  4999 ;;      Temps:          0       0       0
  5000 ;;      Totals:         0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used: 1
  5003 ;; Hardware stack levels required when called: 3
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_main
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text31
  5012   001164                     __ptext31:
  5013                           	callstack 0
  5014   001164                     _initPorts:
  5015                           	callstack 27
  5016   001164  68C1               	setf	193,c	;volatile
  5017   001166  6A92               	clrf	146,c	;volatile
  5018   001168  0012               	return		;funcret
  5019   00116A                     __end_of_initPorts:
  5020                           	callstack 0
  5021                           
  5022 ;; *************** function _Terminal_Init *****************
  5023 ;; Defined at:
  5024 ;;		line 26 in file "TAD_TERMINAL.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  1    wreg      void 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1
  5038 ;;      Params:         0       0       0
  5039 ;;      Locals:         0       0       0
  5040 ;;      Temps:          0       0       0
  5041 ;;      Totals:         0       0       0
  5042 ;;Total ram usage:        0 bytes
  5043 ;; Hardware stack levels used: 1
  5044 ;; Hardware stack levels required when called: 3
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_main
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text32
  5053   00110A                     __ptext32:
  5054                           	callstack 0
  5055   00110A                     _Terminal_Init:
  5056                           	callstack 27
  5057   00110A                     
  5058                           ;TAD_TERMINAL.c: 27:  TXSTA = 0x24;
  5059   00110A  0E24               	movlw	36
  5060   00110C  6EAC               	movwf	172,c	;volatile
  5061                           
  5062                           ;TAD_TERMINAL.c: 28:  RCSTA = 0x90;
  5063   00110E  0E90               	movlw	144
  5064   001110  6EAB               	movwf	171,c	;volatile
  5065   001112                     
  5066                           ;TAD_TERMINAL.c: 29:  SPBRG = 255;
  5067   001112  68AF               	setf	175,c	;volatile
  5068   001114                     
  5069                           ;TAD_TERMINAL.c: 30:  BAUDCON = 0x00;
  5070   001114  6AB8               	clrf	184,c	;volatile
  5071   001116                     
  5072                           ;TAD_TERMINAL.c: 31:  hashtag_pressed = 0;
  5073   001116  6A1C               	clrf	_hashtag_pressed^0,c
  5074   001118  0012               	return		;funcret
  5075   00111A                     __end_of_Terminal_Init:
  5076                           	callstack 0
  5077                           
  5078 ;; *************** function _TI_Init *****************
  5079 ;; Defined at:
  5080 ;;		line 32 in file "TAD_TIMER.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  counter         1    1[COMRAM] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1
  5094 ;;      Params:         0       0       0
  5095 ;;      Locals:         1       0       0
  5096 ;;      Temps:          0       0       0
  5097 ;;      Totals:         1       0       0
  5098 ;;Total ram usage:        1 bytes
  5099 ;; Hardware stack levels used: 1
  5100 ;; Hardware stack levels required when called: 3
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_main
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text33
  5109   000F9C                     __ptext33:
  5110                           	callstack 0
  5111   000F9C                     _TI_Init:
  5112                           	callstack 27
  5113   000F9C                     
  5114                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  5115   000F9C  6A36               	clrf	TI_Init@counter^0,c
  5116   000F9E                     l1731:
  5117                           
  5118                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  5119   000F9E  5036               	movf	TI_Init@counter^0,w,c
  5120   000FA0  0D05               	mullw	5
  5121   000FA2  50F3               	movf	243,w,c
  5122   000FA4  0F05               	addlw	low (_Timers+4)
  5123   000FA6  6ED9               	movwf	fsr2l,c
  5124   000FA8  6ADA               	clrf	fsr2h,c
  5125   000FAA  6ADF               	clrf	indf2,c
  5126   000FAC                     
  5127                           ;TAD_TIMER.c: 35:  }
  5128   000FAC  2A36               	incf	TI_Init@counter^0,f,c
  5129   000FAE  0E03               	movlw	3
  5130   000FB0  6436               	cpfsgt	TI_Init@counter^0,c
  5131   000FB2  EFDD  F007         	goto	u531
  5132   000FB6  EFDF  F007         	goto	u530
  5133   000FBA                     u531:
  5134   000FBA  EFCF  F007         	goto	l1731
  5135   000FBE                     u530:
  5136   000FBE                     
  5137                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  5138   000FBE  0E82               	movlw	130
  5139   000FC0  6ED5               	movwf	213,c	;volatile
  5140                           
  5141                           ;TAD_TIMER.c: 37:     TMR0=63036;
  5142   000FC2  0EF6               	movlw	246
  5143   000FC4  6ED7               	movwf	215,c	;volatile
  5144   000FC6  0E3C               	movlw	60
  5145   000FC8  6ED6               	movwf	214,c	;volatile
  5146   000FCA                     
  5147                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  5148   000FCA  94F2               	bcf	242,2,c	;volatile
  5149   000FCC                     
  5150                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  5151   000FCC  8AF2               	bsf	242,5,c	;volatile
  5152   000FCE  0012               	return		;funcret
  5153   000FD0                     __end_of_TI_Init:
  5154                           	callstack 0
  5155                           
  5156 ;; *************** function _LowRSI *****************
  5157 ;; Defined at:
  5158 ;;		line 31 in file "main.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;		None
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;		None
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      void 
  5165 ;; Registers used:
  5166 ;;		None
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1
  5172 ;;      Params:         0       0       0
  5173 ;;      Locals:         0       0       0
  5174 ;;      Temps:          1       0       0
  5175 ;;      Totals:         1       0       0
  5176 ;;Total ram usage:        1 bytes
  5177 ;; Hardware stack levels used: 1
  5178 ;; Hardware stack levels required when called: 2
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		Interrupt level 1
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	intcodelo
  5187   000018                     __pintcodelo:
  5188                           	callstack 0
  5189   000018                     _LowRSI:
  5190                           	callstack 22
  5191                           
  5192                           ;incstack = 0
  5193   000018  8055               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  5194   00001A  CFE0 F035          	movff	bsr,??_LowRSI
  5195   00001E  C035  FFE0         	movff	??_LowRSI,bsr
  5196   000022  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  5197   000024  0010               	retfie	
  5198   000026                     __end_of_LowRSI:
  5199                           	callstack 0
  5200                           
  5201 ;; *************** function _HighRSI *****************
  5202 ;; Defined at:
  5203 ;;		line 27 in file "main.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;		None
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;		None
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2, status,0, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1
  5217 ;;      Params:         0       0       0
  5218 ;;      Locals:         0       0       0
  5219 ;;      Temps:          0       0       0
  5220 ;;      Totals:         0       0       0
  5221 ;;Total ram usage:        0 bytes
  5222 ;; Hardware stack levels used: 1
  5223 ;; Hardware stack levels required when called: 1
  5224 ;; This function calls:
  5225 ;;		_RSI_Timer0
  5226 ;; This function is called by:
  5227 ;;		Interrupt level 2
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	intcode
  5232   000008                     __pintcode:
  5233                           	callstack 0
  5234   000008                     _HighRSI:
  5235                           	callstack 22
  5236                           
  5237                           ;incstack = 0
  5238   000008  8255               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5239   00000A  EF66  F008         	goto	int_func
  5240                           
  5241                           	psect	intcode_body
  5242   0010CC                     __pintcode_body:
  5243                           	callstack 22
  5244   0010CC                     int_func:
  5245                           	callstack 22
  5246   0010CC                     
  5247                           ;main.c: 29:      motorTerminal();
  5248   0010CC  A4F2               	btfss	242,2,c	;volatile
  5249   0010CE  EF6B  F008         	goto	i2u116_41
  5250   0010D2  EF6D  F008         	goto	i2u116_40
  5251   0010D6                     i2u116_41:
  5252   0010D6  EF6F  F008         	goto	i2l34
  5253   0010DA                     i2u116_40:
  5254   0010DA  EC4F  F008         	call	_RSI_Timer0	;wreg free
  5255   0010DE                     i2l34:
  5256   0010DE  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5257   0010E0  0011               	retfie		f
  5258   0010E2                     __end_of_HighRSI:
  5259                           	callstack 0
  5260                           
  5261 ;; *************** function _RSI_Timer0 *****************
  5262 ;; Defined at:
  5263 ;;		line 25 in file "TAD_TIMER.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;		None
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, status,2, status,0
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1
  5277 ;;      Params:         0       0       0
  5278 ;;      Locals:         0       0       0
  5279 ;;      Temps:          0       0       0
  5280 ;;      Totals:         0       0       0
  5281 ;;Total ram usage:        0 bytes
  5282 ;; Hardware stack levels used: 1
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_HighRSI
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text36
  5291   00109E                     __ptext36:
  5292                           	callstack 0
  5293   00109E                     _RSI_Timer0:
  5294                           	callstack 22
  5295   00109E                     
  5296                           ;TAD_TIMER.c: 27:     TMR0=63036;
  5297   00109E  0EF6               	movlw	246
  5298   0010A0  6ED7               	movwf	215,c	;volatile
  5299   0010A2  0E3C               	movlw	60
  5300   0010A4  6ED6               	movwf	214,c	;volatile
  5301   0010A6                     
  5302                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  5303   0010A6  94F2               	bcf	4082,2,c	;volatile
  5304   0010A8                     
  5305                           ;TAD_TIMER.c: 29:     Tics++;
  5306   0010A8  0E01               	movlw	1
  5307   0010AA  2615               	addwf	_Tics^0,f,c	;volatile
  5308   0010AC  0E00               	movlw	0
  5309   0010AE  2216               	addwfc	(_Tics+1)^0,f,c	;volatile
  5310   0010B0  2217               	addwfc	(_Tics+2)^0,f,c	;volatile
  5311   0010B2  2218               	addwfc	(_Tics+3)^0,f,c	;volatile
  5312   0010B4  0012               	return		;funcret
  5313   0010B6                     __end_of_RSI_Timer0:
  5314                           	callstack 0
  5315                           
  5316                           	psect	rparam
  5317   000001                     ___rparam_used  equ	1
  5318   000000                     ___param_bank   equ	0
  5319   000000                     __Lparam        equ	__Lrparam
  5320   000000                     __Hparam        equ	__Hrparam
  5321                           
  5322                           	psect	temp
  5323   000055                     btemp:
  5324                           	callstack 0
  5325   000055                     	ds	1
  5326   000055                     int$flags       set	btemp
  5327   000056                     wtemp8          set	btemp+1
  5328   000056                     ttemp5          set	btemp+1
  5329   000059                     ttemp6          set	btemp+4
  5330   00005D                     ttemp7          set	btemp+8
  5331                           
  5332                           	psect	idloc
  5333                           
  5334                           ;Config register IDLOC0 @ 0x200000
  5335                           ;	unspecified, using default values
  5336   200000                     	org	2097152
  5337   200000  FF                 	db	255
  5338                           
  5339                           ;Config register IDLOC1 @ 0x200001
  5340                           ;	unspecified, using default values
  5341   200001                     	org	2097153
  5342   200001  FF                 	db	255
  5343                           
  5344                           ;Config register IDLOC2 @ 0x200002
  5345                           ;	unspecified, using default values
  5346   200002                     	org	2097154
  5347   200002  FF                 	db	255
  5348                           
  5349                           ;Config register IDLOC3 @ 0x200003
  5350                           ;	unspecified, using default values
  5351   200003                     	org	2097155
  5352   200003  FF                 	db	255
  5353                           
  5354                           ;Config register IDLOC4 @ 0x200004
  5355                           ;	unspecified, using default values
  5356   200004                     	org	2097156
  5357   200004  FF                 	db	255
  5358                           
  5359                           ;Config register IDLOC5 @ 0x200005
  5360                           ;	unspecified, using default values
  5361   200005                     	org	2097157
  5362   200005  FF                 	db	255
  5363                           
  5364                           ;Config register IDLOC6 @ 0x200006
  5365                           ;	unspecified, using default values
  5366   200006                     	org	2097158
  5367   200006  FF                 	db	255
  5368                           
  5369                           ;Config register IDLOC7 @ 0x200007
  5370                           ;	unspecified, using default values
  5371   200007                     	org	2097159
  5372   200007  FF                 	db	255
  5373                           
  5374                           	psect	config
  5375                           
  5376                           ; Padding undefined space
  5377   300000                     	org	3145728
  5378   300000  FF                 	db	255
  5379                           
  5380                           ;Config register CONFIG1H @ 0x300001
  5381                           ;	Oscillator
  5382                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  5383                           ;	Fail-Safe Clock Monitor Enable bit
  5384                           ;	FCMEN = 0x0, unprogrammed default
  5385                           ;	Internal/External Oscillator Switchover bit
  5386                           ;	IESO = 0x0, unprogrammed default
  5387   300001                     	org	3145729
  5388   300001  06                 	db	6
  5389                           
  5390                           ;Config register CONFIG2L @ 0x300002
  5391                           ;	Power-up Timer Enable bit
  5392                           ;	PWRT = OFF, PWRT disabled
  5393                           ;	Brown-out Reset Enable bits
  5394                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  5395                           ;	Brown-out Reset Voltage bits
  5396                           ;	BORV = 0x3, unprogrammed default
  5397   300002                     	org	3145730
  5398   300002  19                 	db	25
  5399                           
  5400                           ;Config register CONFIG2H @ 0x300003
  5401                           ;	Watchdog Timer Enable bit
  5402                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5403                           ;	Watchdog Timer Postscale Select bits
  5404                           ;	WDTPS = 0xF, unprogrammed default
  5405   300003                     	org	3145731
  5406   300003  1E                 	db	30
  5407                           
  5408                           ; Padding undefined space
  5409   300004                     	org	3145732
  5410   300004  FF                 	db	255
  5411                           
  5412                           ;Config register CONFIG3H @ 0x300005
  5413                           ;	CCP2 MUX bit
  5414                           ;	CCP2MX = 0x1, unprogrammed default
  5415                           ;	PORTB A/D Enable bit
  5416                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  5417                           ;	Low-Power Timer1 Oscillator Enable bit
  5418                           ;	LPT1OSC = 0x0, unprogrammed default
  5419                           ;	MCLR Pin Enable bit
  5420                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  5421   300005                     	org	3145733
  5422   300005  01                 	db	1
  5423                           
  5424                           ;Config register CONFIG4L @ 0x300006
  5425                           ;	Stack Full/Underflow Reset Enable bit
  5426                           ;	STVREN = 0x1, unprogrammed default
  5427                           ;	Single-Supply ICSP Enable bit
  5428                           ;	LVP = OFF, Single-Supply ICSP disabled
  5429                           ;	Boot Block Size Select bits
  5430                           ;	BBSIZ = 0x0, unprogrammed default
  5431                           ;	Extended Instruction Set Enable bit
  5432                           ;	XINST = 0x0, unprogrammed default
  5433                           ;	Background Debugger Enable bit
  5434                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5435   300006                     	org	3145734
  5436   300006  81                 	db	129
  5437                           
  5438                           ; Padding undefined space
  5439   300007                     	org	3145735
  5440   300007  FF                 	db	255
  5441                           
  5442                           ;Config register CONFIG5L @ 0x300008
  5443                           ;	unspecified, using default values
  5444                           ;	Code Protection bit
  5445                           ;	CP0 = 0x1, unprogrammed default
  5446                           ;	Code Protection bit
  5447                           ;	CP1 = 0x1, unprogrammed default
  5448   300008                     	org	3145736
  5449   300008  03                 	db	3
  5450                           
  5451                           ;Config register CONFIG5H @ 0x300009
  5452                           ;	unspecified, using default values
  5453                           ;	Boot Block Code Protection bitProtect Boot
  5454                           ;	CPB = 0x1, unprogrammed default
  5455                           ;	Data EEPROM Code Protection bit
  5456                           ;	CPD = 0x1, unprogrammed default
  5457   300009                     	org	3145737
  5458   300009  C0                 	db	192
  5459                           
  5460                           ;Config register CONFIG6L @ 0x30000A
  5461                           ;	unspecified, using default values
  5462                           ;	Write Protection bit
  5463                           ;	WRT0 = 0x1, unprogrammed default
  5464                           ;	Write Protection bit
  5465                           ;	WRT1 = 0x1, unprogrammed default
  5466   30000A                     	org	3145738
  5467   30000A  03                 	db	3
  5468                           
  5469                           ;Config register CONFIG6H @ 0x30000B
  5470                           ;	unspecified, using default values
  5471                           ;	Configuration Register Write Protection bit
  5472                           ;	WRTC = 0x1, unprogrammed default
  5473                           ;	Boot Block Write Protection bit
  5474                           ;	WRTB = 0x1, unprogrammed default
  5475                           ;	Data EEPROM Write Protection bit
  5476                           ;	WRTD = 0x1, unprogrammed default
  5477   30000B                     	org	3145739
  5478   30000B  E0                 	db	224
  5479                           
  5480                           ;Config register CONFIG7L @ 0x30000C
  5481                           ;	unspecified, using default values
  5482                           ;	Table Read Protection bit
  5483                           ;	EBTR0 = 0x1, unprogrammed default
  5484                           ;	Table Read Protection bit
  5485                           ;	EBTR1 = 0x1, unprogrammed default
  5486   30000C                     	org	3145740
  5487   30000C  03                 	db	3
  5488                           
  5489                           ;Config register CONFIG7H @ 0x30000D
  5490                           ;	unspecified, using default values
  5491                           ;	Boot Block Table Read Protection bit
  5492                           ;	EBTRB = 0x1, unprogrammed default
  5493   30000D                     	org	3145741
  5494   30000D  40                 	db	64
  5495                           tosu	equ	0xFFF
  5496                           tosh	equ	0xFFE
  5497                           tosl	equ	0xFFD
  5498                           stkptr	equ	0xFFC
  5499                           pclatu	equ	0xFFB
  5500                           pclath	equ	0xFFA
  5501                           pcl	equ	0xFF9
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           indf0	equ	0xFEF
  5509                           postinc0	equ	0xFEE
  5510                           postdec0	equ	0xFED
  5511                           preinc0	equ	0xFEC
  5512                           plusw0	equ	0xFEB
  5513                           fsr0h	equ	0xFEA
  5514                           fsr0l	equ	0xFE9
  5515                           wreg	equ	0xFE8
  5516                           indf1	equ	0xFE7
  5517                           postinc1	equ	0xFE6
  5518                           postdec1	equ	0xFE5
  5519                           preinc1	equ	0xFE4
  5520                           plusw1	equ	0xFE3
  5521                           fsr1h	equ	0xFE2
  5522                           fsr1l	equ	0xFE1
  5523                           bsr	equ	0xFE0
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           preinc2	equ	0xFDC
  5528                           plusw2	equ	0xFDB
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8

Data Sizes:
    Strings     234
    Constant    12
    Data        0
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32      84
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    displayUID@uid	PTR unsigned char  size(1) Largest target is 6
		 -> motor_RFID@UID(COMRAM[6]), ReadRFID_NoCooperatiu@UID(COMRAM[6]), 

    Terminal_SendString@str	PTR const unsigned char  size(2) Largest target is 33
		 -> displayUID@hexString(COMRAM[11]), STR_1(CODE[6]), STR_10(CODE[9]), STR_11(CODE[14]), 
		 -> STR_12(CODE[14]), STR_13(CODE[14]), STR_14(CODE[33]), STR_2(CODE[3]), 
		 -> STR_3(CODE[18]), STR_4(CODE[18]), STR_5(CODE[18]), STR_6(CODE[19]), 
		 -> STR_7(CODE[27]), STR_8(CODE[29]), STR_9(CODE[33]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_RFID
    _motor_RFID->_displayUID
    _displayUID->_Terminal_SendString
    _motorTerminal->_Terminal_SendString
    _showMenu->_Terminal_SendString
    _Terminal_SendString->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _motorTeclado->_GetTecla
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_delay_us

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3877
                            _TI_Init
                      _Terminal_Init
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_RFID
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           7     7      0    1928
                                             26 COMRAM     6     6      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
                         _displayUID
 ---------------------------------------------------------------------------------
 (2) _displayUID                                          20    19      1     547
                                              6 COMRAM    20    19      1
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        0     0      0     291
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                _Terminal_SendString
                        _initTeclado
                           _showMenu
 ---------------------------------------------------------------------------------
 (2) _showMenu                                             0     0      0      89
                _Terminal_SendString
 ---------------------------------------------------------------------------------
 (3) _Terminal_SendString                                  2     0      2      89
                                              4 COMRAM     2     0      2
                  _Terminal_SendChar
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _Terminal_SendChar                                    1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initTeclado                                          0     0      0     113
                        _TI_NewTimer
                   _initPortsTeclado
 ---------------------------------------------------------------------------------
 (3) _initPortsTeclado                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TI_NewTimer                                          3     2      1     113
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     112
                           _GetTecla
                          _ReadFilas
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _ReadFilas                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                            16    16      0      45
                                              1 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0    1388
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1388
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     257
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    0     0      0     450
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Set_Bit                                      2     1      1     450
                                             16 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     454
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     454
                                             16 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           5     4      1     227
                                             11 COMRAM     5     4      1
                         _MFRC522_Rd (ARG)
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           5     5      0     135
                                              6 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      30
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _Terminal_Init
   _initPorts
   _initRFID
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _delay_us
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
             _delay_us (ARG)
       _MFRC522_AntennaOn
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _initTeclado
     _TI_NewTimer
     _initPortsTeclado
   _motorTeclado
     _GetTecla
     _ReadFilas
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendString
       _Terminal_SendChar
       _Terminal_TXAvailable
     _initTeclado
     _showMenu
       _Terminal_SendString
   _motor_RFID
     _MFRC522_Clear_Bit
     _MFRC522_Rd
     _MFRC522_Set_Bit
     _MFRC522_Wr
     _displayUID
       _Terminal_SendString

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     32      84     66.7%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      84      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Mar 06 01:45:08 2025

       __end_ofGetTecla@F3223 020D         ?_Terminal_ReceiveChar 0035                    _RSI_Timer0 109E  
                 MFRC522_Rd@i 003F                   MFRC522_Wr@i 0044                            l50 1168  
                          l73 0FCE                            l83 104C                            l86 0F1E  
                          l79 0E84                            u10 0F9A                            u11 0F96  
                          u20 0CC0                            u21 0CB8                            u40 0CF4  
                          u41 0CF0                            u50 0D14                            u51 0D0E  
                          u60 0D32                            u61 0D2E                            u38 0CC2  
                          u56 0D16                    _TI_GetTics 0ED4                            bsr 0FE0  
        ??_InitPortDirections 0036                           l210 0CF8                           l203 0F6E  
                         l211 0D32                           l131 1156                           l212 0D38  
                         l205 0F9A                           l125 1162                           l222 109C  
                         l231 1124                           l160 0936                           l128 10CA  
                         l225 1108                           l218 0C92                           l234 1130  
                         l219 0C96                           l307 1146                           l228 1028  
                         l180 0B7C                           l172 0B32                           l237 0ED2  
                         l168 0F64                           l360 049A                           l178 0BEE  
                         l541 1068                           l550 116C                           l526 0AFE  
                         l382 0640                           l199 113C                           l535 0B2A  
                         l544 10F4                           l538 1118                           l562 0DBA  
                         l547 114E                           l565 115C                           l389 0706  
                         l559 0E2E                           l583 0A32                           u330 0F32  
                         u331 0F2E                           u340 0F4A                           u341 0F46  
                         u350 0F62                           u351 0F5E                           u360 0BD4  
                         u520 10F2                           u521 10EC                           u530 0FBE  
                         u531 0FBA                           u526 10F4                           wreg 0FE8  
              ??_MFRC522_Init 0048                          l1301 0D04                          l1303 0D18  
                        l1305 0D20                          l3001 0656                          l1307 0D22  
                        l3003 06C4                          l1261 0F70                          l1309 0D36  
                        l3013 06E8                          l1263 0F72                          l1271 0CA8  
                        l1503 102C                          l1281 0CCE                          l1273 0CAA  
                        l1265 0C9A                          l1505 102E                          l1521 0F22  
                        l2401 0E36                          l3009 06D2                          l1259 0F68  
                        l1291 0CE4                          l1283 0CD0                          l1267 0CA4  
                        l1515 115E                          l1507 104A                          l1531 0F62  
                        l1523 0F32                          l1293 0CF4                          l1285 0CD6  
                        l1269 0CA6                          l2421 111A                          l2413 1000  
                        l1541 0B50                          l1533 0B2C                          l1525 0F38  
                        l2405 0E4E                          l1381 1150                          l1287 0CDA  
                        l1279 0CAE                          l2351 0BFE                          l2423 1126  
                        l2415 1002                          l1551 0B8A                          l1535 0B38  
                        l1527 0F4A                          l1519 0F20                          l2407 0E6A  
                        l1383 1154                          l2511 0DC0                          l1297 0CFA  
                        l1289 0CE2                          l2361 0C28                          l2345 0BF2  
                        l2417 1008                          l3241 0BA8                          l1561 0BC6  
                        l1537 0B40                          l1529 0F50                          l1713 116A  
                        l2409 0E7A                          l2521 10BA                          l2513 0DD6  
                        l3081 0FDC                          l1731 0F9E                          l1299 0D00  
                        l2371 0C48                          l2363 0C2E                          l2347 0BFA  
                        l2419 1010                          l1563 0BDE                          l1539 0B48  
                        l1547 0B56                          l2531 0ED6                          l1571 1158  
                        l2523 10BC                          l2515 0DFA                          l3091 0FEA  
                        l3083 0FE0                          l1741 0FCC                          l1733 0FAC  
                        l1725 0F9C                          l1573 1132                          l2381 0C78  
                        l2365 0C30                          l2357 0C02                          l2349 0BFC  
                        l1549 0B82                          l2533 0EEA                          l2701 0766  
                        l1709 10E2                          l2525 10BE                          l2517 0DFE  
                        l2509 0DBC                          l2621 0A70                          l3093 0FEE  
                        l3085 0FE4                          l3077 0FD0                          l1735 0FAE  
                        l1751 1114                          l2383 0C7A                          l2375 0C4C  
                        l2367 0C36                          l2359 0C22                          l2391 10F8  
                        l1559 0B92                          l2703 076A                          l2527 10C0  
                        l2519 10B6                          l2631 0ABA                          l2623 0A7C  
                        l2615 0A3C                          l3095 0FF2                          l3087 0FE6  
                        l3079 0FD8                          l1737 0FBE                          l1753 1116  
                        l2385 0C80                          l2377 0C6C                          l2369 0C38  
                        l2537 0E86                          l2721 07B0                          l2713 0790  
                        l2705 076E                          l2529 10C2                          l2393 104E  
                        l2801 0970                          l2633 0AC6                          l2625 0A8C  
                        l2617 0A50                          l2609 0A34                          l3097 0FF6  
                        l3089 0FE8                          l1739 0FCA                          l1747 110A  
                        l1755 1164                          l2387 0C82                          l2379 0C72  
                        l2539 0E8A                          l2731 07D4                          l2723 07C0  
                        l2715 0796                          l2707 0776                          l2811 09B2  
                        l2803 0976                          l2635 0ADE                          l2627 0A9A  
                        l2619 0A60                          l1749 1112                          l2389 1086  
                        l2741 07EE                          l2733 07DA                          l2725 07C4  
                        l2717 07A6                          l2709 0786                          l2397 114A  
                        l2821 09F4                          l2813 09B8                          l2805 098A  
                        l2637 0AE2                          l2629 0AAA                          l2901 0480  
                        l2751 0848                          l2743 07FE                          l2727 07C8  
                        l2399 0E30                          l2815 09CC                          l2807 098E  
                        l2831 0A1C                          l2639 0B00                          l2903 0488  
                        l2761 088E                          l2753 0868                          l2745 081E  
                        l2729 07CE                          l2681 070C                          l2673 0D3A  
                        l2825 0A08                          l2809 09A2                          l2913 04A2  
                        l2841 0312                          l2833 02F8                   _TI_NewTimer 0E30  
                        l2675 113E                          l2755 087A                          l2747 0830  
                        l2691 0732                          l2683 0712                          l2819 09E0  
                        l2923 0526                          l2915 0510                          l2907 0490  
                        l2851 033E                          l2843 031A                          l2835 02FC  
                        l2677 1142                          l2781 08F8                          l2773 08DC  
                        l2765 08A2                          l2757 0880                          l2749 0838  
                        l2693 0742                          l2685 0722                          l2941 0566  
                        l2933 054A                          l2917 051A                          l2909 0494  
                        l2861 036C                          l2853 0348                          l2845 0324  
                        l2837 0306                          l2775 08E2                          l2767 08B2  
                        l2759 0888                          l2695 0748                          l2687 0726  
                        l2679 0708                          l2791 0950                          l2927 0534  
                        l2919 051E                          l2871 0392                          l2863 0374  
                        l2855 0350                          l2847 032C                          l2839 030A  
                        l2777 08F2                          l2769 08D4                          l2697 0750  
                        l2689 072A                          l2785 0900                          l2793 0954  
                        l2961 05B2                          l2953 059A                          l2945 0574  
                        l2937 0558                          l2929 053C                          l2881 03CA  
                        l2873 039A                          l2865 037E                          l2857 035A  
                        l2849 0336                          l2779 08F4                          l2699 0756  
                        l2795 0958                          l2787 0938                          l2963 05C0  
                        l2955 05A4                          l2891 040E                          l2883 03D2  
                        l2875 03A2                          l2867 0386                          l2859 0362  
                        l2797 0968                          l2789 093C                          l2973 05EC  
                        l2965 05D4                          l2949 058C                          l2893 0420  
                        l2885 03DC                          l2877 03B0                          l2869 0390  
                        l2799 096C                          l2975 05FC                          l2959 05AA  
                        l2895 0430                          l2887 03E4                          l2879 03C4  
                        l2993 0646                          l2985 061E                          l2977 0616  
                        l2969 05DE                          l2897 0460                          l2889 03F4  
                        l2995 064E                          l2987 062E                          l2979 061C  
                        l2899 046C                          l2989 0630                          STR_1 02F1  
                        STR_2 02A9                          STR_3 029A                          STR_4 02AC  
                        STR_5 029A                          STR_6 0287                          STR_7 026C  
                        STR_8 024F                          STR_9 022E                          u2000 03C4  
                        u2001 03C0                          u2010 03F4                          u2011 03F0  
                        u2020 040E                          u2021 040A                          u2030 0430  
                        u2031 042C                          u1400 0C92                          u2040 0480  
                        u1401 0C8E                          u2041 047C                          u1410 1060  
                        u2050 05C0                          u1411 1058                          u2051 05BC  
                        u1420 0E4A                          u2060 05D4                          u1421 0E46  
                        u2061 05D0                          _LATA 0F89                          u1350 0C14  
                        u1430 0E6A                          u2070 05FC                          u1351 0C0C  
                        u1431 0E66                          u2071 05F8                          _LATC 0F8B  
                        u1600 0E2E                          u2080 0616                          _LATD 0F8C  
                        u1601 0E2A                          u2081 0612                          u1370 0C48  
                        u1418 1062                          u2090 0640                          u1371 0C44  
                        u2091 063C                          u1380 0C5E                          u1700 0AAA  
                        u1381 0C56                          u1701 0AA6                          u1710 0AFE  
                        u1711 0AFA                          u1368 0C16                          u1800 07A6  
                        u1801 07A2                          u1810 07C0                          u1570 0DD6  
                        u1811 07BC                          u1571 0DD2                          u1900 08B2  
                        u1820 07EA                          u1580 0DF6                          u1901 08AE  
                        u1821 07E6                          u1398 0C60                          u1910 08D4  
                        u1830 07FE                          u1590 0E1E                          u1911 08D0  
                        u1831 07FA                          u1920 08F2                          u1840 081E  
                        u1760 0722                          u1921 08EE                          u1841 081A  
                        u1761 071E                          u1850 0830                          u1770 0742  
                        u1930 0950                          u1690 0A60                          u1851 082C  
                        u1771 073E                          u1587 0DEC                          u1931 094C  
                        u1691 0A5C                          u1860 0848                          u1780 0766  
                        u1940 0968                          u1861 0844                          u1781 0762  
                        u1597 0E14                          u1941 0964                          u1870 0868  
                        u1790 0786                          u1950 098A                          u1871 0864  
                        u1791 0782                          u1951 0986                          u1880 087A  
                        u1960 09A2                          u1881 0876                          u1961 099E  
                        u1890 089E                          u1970 09CC                          u1891 089A  
                        u1971 09C8                          u1980 09F4                          u1981 09F0  
                        u1990 03B0                          u1991 03AC                          i1l39 001E  
                        i2l34 10DE                          i2l68 10B4                          _TMR0 0FD6  
                 displayUID@i 004C                          _Tics 0015                          _Rows 0020  
                        _main 0FD0                          fsr0h 0FEA                          indf0 0FEF  
                        fsr2h 0FDA                          fsr0l 0FE9                          indf2 0FDF  
                        fsr2l 0FD9                          btemp 0055               __end_of_TI_Init 0FD0  
                        prodh 0FF4                          prodl 0FF3                          start 0026  
             __end_of_HighRSI 10E2                  ___param_bank 0000               ??_MFRC522_Reset 0045  
                ?_initTeclado 0035                         ?_main 0035                         STR_10 02E8  
                       STR_11 02BE                         STR_12 02CC                         STR_13 02DA  
                       STR_14 020D                         _T0CON 0FD5                         _RCREG 0FAE  
                       _RCSTA 0FAB                         _SPBRG 0FAF                         _PORTD 0F83  
                       _TRISA 0F92                         _TRISD 0F95                         _TXREG 0FAD  
                       _TXSTA 0FAC                         _Filas 002C                         _Timer 0033  
             motor_RFID@irqEn 0026               motor_RFID@unLen 0019                  _TI_ResetTics 102A  
                       _tecla 002A               motor_RFID@state 0028                         _timer 0034  
                       _state 0029                         tablat 0FF5             _MFRC522_Clear_Bit 1084  
                       ttemp5 0056                         ttemp6 0059                         ttemp7 005D  
                       status 0FD8                         wtemp8 0056            Terminal_SendChar@c 0036  
          ?_MFRC522_Clear_Bit 0045              __end_of_GetTecla 0BF0             _MFRC522_AntennaOn 111A  
      ??_Terminal_ReceiveChar 0036               __initialization 106A                  __end_of_main 1000  
          ?_MFRC522_AntennaOn 0035           ??_MFRC522_Clear_Bit 0046                   ?_RSI_Timer0 0035  
              TI_Init@counter 0036              _initPortsTeclado 1150                   ?_TI_GetTics 0036  
                      ??_main 0055           ??_MFRC522_AntennaOn 0047                 __activetblptr 0002  
          MFRC522_Rd@ucResult 003E                        _ADCON1 0FC1               MFRC522_Wr@value 0040  
   __end_of_MFRC522_Clear_Bit 109E                     ??_TI_Init 0036           displayUID@hexString 003D  
      Terminal_SendString@str 0039                        i2l2157 10CC                        i2l2159 10DA  
                      i2l1721 10A6                        i2l1723 10A8                        i2l1719 109E  
                      _TMR0IF 7F92                     ??_HighRSI 0035     __end_of_MFRC522_AntennaOn 1126  
               displayUID@uid 003B              __end_of_delay_us 0F9C                        _LowRSI 0018  
                      _RowAct 001E                        _Timers 0001          __end_of_MFRC522_Init 0ED4  
            __end_of_initRFID 1148            motorTerminal@state 001B                        clear_0 1070  
                      isa$std 0001              __end_of_showMenu 0DBC                  __mediumconst 0200  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
       __end_of_Terminal_Init 111A                    __accesstop 0080       __end_of__initialization 1076  
             delay_us@howMany 0039                 ___rparam_used 0001                  ??_MFRC522_Rd 003B  
                ??_MFRC522_Wr 0041            _MFRC522_AntennaOff 1126                __pcstackCOMRAM 0035  
         ?_MFRC522_AntennaOff 0035          TI_NewTimer@Comptador 0038             __end_of_ReadFilas 1164  
            MFRC522_Rd@ucAddr 003D             ??_MFRC522_Set_Bit 0046            __end_of_MFRC522_Rd 0D3A  
          __end_of_MFRC522_Wr 0C98                     ?_GetTecla 0035          ??_MFRC522_AntennaOff 0048  
                ?_TI_NewTimer 0036         __end_of_motorTerminal 0A34        TI_NewTimer@TimerHandle 0036  
                     ?_LowRSI 0035              MFRC522_Wr@ucAddr 0043       TI_ResetTics@TimerHandle 0036  
               _writeColumnas 0F20                       _BAUDCON 0FB8                     ?_delay_us 0035  
                  ??_GetTecla 0036             _Terminal_SendChar 1148                    _displayUID 0A34  
                     _TI_Init 0F9C            ?_Terminal_SendChar 0035      __end_of_initPortsTeclado 1158  
                   ?_initRFID 0035                       _HighRSI 0008                       _Columns 001F  
           motor_RFID@TagType 0021           ??_Terminal_SendChar 0036                       __Hparam 0000  
                     __Lparam 0000                     ?_showMenu 0035                  ??_RSI_Timer0 0035  
              ?_writeColumnas 0035                  __psmallconst 0200                  ??_TI_GetTics 003A  
                     __pcinit 106A         __end_of_MFRC522_Reset 102A                       __ramtop 0200  
           motor_RFID@_status 0022                       __ptext0 0FD0                       __ptext1 02F8  
                     __ptext2 0A34                       __ptext3 0938                       __ptext4 0D3A  
                     __ptext5 0DBC                       __ptext6 104E                       __ptext7 1148  
                     __ptext8 10B6                       __ptext9 1150                 ?_motorTeclado 0035  
           __end_of_initPorts 116A     __end_of_Terminal_SendChar 1150             motor_RFID@waitIRq 0025  
                  ??_delay_us 0036                  _MFRC522_Init 0E86                __pintcode_body 10CC  
        end_of_initialization 1076                   motor_RFID@i 0023                   motor_RFID@n 0024  
                  ??_initRFID 0048            __end_of_RSI_Timer0 10B6                 __Lmediumconst 0000  
                     int_func 10CC            __end_of_TI_GetTics 0F20                    ??_showMenu 003B  
                  _motor_RFID 02F8                       postinc0 0FEE                       postinc2 0FDE  
               GetTecla@F3223 0201                ??_motorTeclado 0046                     _PORTBbits 0F81  
                   _PORTCbits 0F82           _Terminal_SendString 0DBC         TI_GetTics@TimerHandle 0042  
                   _TRISBbits 0F93                     _TRISCbits 0F94                   ?_displayUID 003B  
            displayUID@nibble 004E          ?_Terminal_SendString 0039             MFRC522_Rd@Address 003C  
             ??_writeColumnas 0036                __end_of_LowRSI 0026  __end_of_Terminal_RXAvailable 10F6  
             _MFRC522_Set_Bit 10F6                     _ColumnAct 001D           start_initialization 106A  
                   _ReadFilas 115E  __end_of_Terminal_TXAvailable 106A         ??_Terminal_SendString 003B  
                    ??_LowRSI 0035                   ?_motor_RFID 0035                 ??_initTeclado 0039  
                 __pbssCOMRAM 0001                    ?_ReadFilas 0035             MFRC522_Wr@Address 0042  
               ?_TI_ResetTics 0035                      ?_TI_Init 0035             ?_initPortsTeclado 0035  
                    ?_HighRSI 0035          __end_of_motorTeclado 0938            ??_initPortsTeclado 0036  
     __end_of_MFRC522_Set_Bit 110A           motor_RFID@fifoLevel 0053           MFRC522_Set_Bit@addr 0046  
         MFRC522_Set_Bit@mask 0045                     __pintcode 0008    __end_of_InitPortDirections 113E  
                 __pintcodelo 0018                   __smallconst 0200           __end_of_initTeclado 10CC  
              ??_TI_ResetTics 0036                     _initPorts 1164                 _Terminal_Init 110A  
        _Terminal_RXAvailable 10E2                      _LATBbits 0F8A                      _LATCbits 0F8B  
                   delay_us@x 003A               _hashtag_pressed 001C                      i2u116_40 10DA  
                    i2u116_41 10D6                      _PIR1bits 0F9E         motor_RFID@lastBitsVal 0054  
        _Terminal_TXAvailable 104E                  GetTecla@fila 0045                   ??_ReadFilas 0036  
                ??_displayUID 003C                      _GetTecla 0B2C  __end_of_Terminal_ReceiveChar 116E  
                  ?_initPorts 0035                 motor_RFID@UID 002D                ?_Terminal_Init 0035  
                    _Columnas 002B         ?_Terminal_RXAvailable 0035                 _motorTerminal 0938  
            ?_MFRC522_Set_Bit 0045                      __Hrparam 0000         MFRC522_Clear_Bit@addr 0047  
       MFRC522_Clear_Bit@mask 0045                      __Lrparam 0000                   _initTeclado 10B6  
          __end_of_displayUID 0B2C         ?_Terminal_TXAvailable 0036                      _delay_us 0F66  
                    __ptext10 0E30                      __ptext11 116A                      __ptext20 113E  
                    __ptext12 10E2                      __ptext21 0E86                      __ptext13 0708  
                    __ptext30 1132                      __ptext22 1000                      __ptext14 0F20  
                    __ptext31 1164                      __ptext23 111A                      __ptext15 1158  
                    __ptext32 110A                      __ptext24 10F6                      __ptext16 102A  
                    __ptext33 0F9C                      __ptext25 1126                      __ptext17 0ED4  
                    __ptext26 1084                      __ptext18 115E                      __ptext27 0BF0  
                    __ptext19 0B2C                      __ptext36 109E                      __ptext28 0C98  
                    __ptext29 0F66                 ??_TI_NewTimer 0037                      _initRFID 113E  
              ?_motorTerminal 0035                    _MFRC522_Rd 0C98                    _MFRC522_Wr 0BF0  
                ??_motor_RFID 004F                      isa$xinst 0000                      _showMenu 0D3A  
        __end_of_TI_ResetTics 104E                      int$flags 0055         __end_of_writeColumnas 0F66  
          motor_RFID@substate 0027                 _MFRC522_Reset 1000                  _motorTeclado 0708  
                  _INTCONbits 0FF2               ??_Terminal_Init 0036     TI_GetTics@CopiaTicsActual 003E  
                 ??_initPorts 0036        ??_Terminal_RXAvailable 0036             _hashtag_pressed3s 1158  
 __end_of_Terminal_SendString 0E30                _displayUID$822 0048            __end_of_motor_RFID 0708  
              _displayUID$823 004A                      intlevel1 0000                      intlevel2 0000  
          ?_hashtag_pressed3s 0035           __end_of_TI_NewTimer 0E86           ??_hashtag_pressed3s 0036  
      ??_Terminal_TXAvailable 0038          _Terminal_ReceiveChar 116A                ?_MFRC522_Reset 0035  
      motor_RFID@backBitsCalc 0051     __end_of_hashtag_pressed3s 115E            _InitPortDirections 1132  
  __end_of_MFRC522_AntennaOff 1132                 ?_MFRC522_Init 0035               ??_motorTerminal 003B  
         ?_InitPortDirections 0035               GetTecla@columna 0044                   ?_MFRC522_Rd 0035  
                 ?_MFRC522_Wr 0040                GetTecla@keymap 0038  

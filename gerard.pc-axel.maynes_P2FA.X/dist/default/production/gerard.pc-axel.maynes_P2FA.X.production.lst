

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Mar 28 02:53:15 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,space=0,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    64                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    66   000000                     
    67                           ; Generated 05/12/2024 GMT
    68                           ; 
    69                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4321 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000FE0                     bsr             equ	4064
   102   000FE9                     fsr0            equ	4073
   103   000FEA                     fsr0h           equ	4074
   104   000FE9                     fsr0l           equ	4073
   105   000FE1                     fsr1            equ	4065
   106   000FE2                     fsr1h           equ	4066
   107   000FE1                     fsr1l           equ	4065
   108   000FD9                     fsr2            equ	4057
   109   000FDA                     fsr2h           equ	4058
   110   000FD9                     fsr2l           equ	4057
   111   000FEF                     indf0           equ	4079
   112   000FE7                     indf1           equ	4071
   113   000FDF                     indf2           equ	4063
   114   000FF2                     intcon          equ	4082
   115   000000                     nvmcon          equ	0
   116   000FF9                     pcl             equ	4089
   117   000FFA                     pclath          equ	4090
   118   000FFB                     pclatu          equ	4091
   119   000FEB                     plusw0          equ	4075
   120   000FE3                     plusw1          equ	4067
   121   000FDB                     plusw2          equ	4059
   122   000FED                     postdec0        equ	4077
   123   000FE5                     postdec1        equ	4069
   124   000FDD                     postdec2        equ	4061
   125   000FEE                     postinc0        equ	4078
   126   000FE6                     postinc1        equ	4070
   127   000FDE                     postinc2        equ	4062
   128   000FEC                     preinc0         equ	4076
   129   000FE4                     preinc1         equ	4068
   130   000FDC                     preinc2         equ	4060
   131   000FF3                     prod            equ	4083
   132   000FF4                     prodh           equ	4084
   133   000FF3                     prodl           equ	4083
   134   000FD8                     status          equ	4056
   135   000FF5                     tablat          equ	4085
   136   000FF6                     tblptr          equ	4086
   137   000FF7                     tblptrh         equ	4087
   138   000FF6                     tblptrl         equ	4086
   139   000FF8                     tblptru         equ	4088
   140   000FFD                     tosl            equ	4093
   141   000FE8                     wreg            equ	4072
   142   000F80                     PORTA           equ	3968	;# 
   143   000F81                     PORTB           equ	3969	;# 
   144   000F82                     PORTC           equ	3970	;# 
   145   000F83                     PORTD           equ	3971	;# 
   146   000F84                     PORTE           equ	3972	;# 
   147   000F89                     LATA            equ	3977	;# 
   148   000F8A                     LATB            equ	3978	;# 
   149   000F8B                     LATC            equ	3979	;# 
   150   000F8C                     LATD            equ	3980	;# 
   151   000F8D                     LATE            equ	3981	;# 
   152   000F92                     TRISA           equ	3986	;# 
   153   000F92                     DDRA            equ	3986	;# 
   154   000F93                     TRISB           equ	3987	;# 
   155   000F93                     DDRB            equ	3987	;# 
   156   000F94                     TRISC           equ	3988	;# 
   157   000F94                     DDRC            equ	3988	;# 
   158   000F95                     TRISD           equ	3989	;# 
   159   000F95                     DDRD            equ	3989	;# 
   160   000F96                     TRISE           equ	3990	;# 
   161   000F96                     DDRE            equ	3990	;# 
   162   000F9B                     OSCTUNE         equ	3995	;# 
   163   000F9D                     PIE1            equ	3997	;# 
   164   000F9E                     PIR1            equ	3998	;# 
   165   000F9F                     IPR1            equ	3999	;# 
   166   000FA0                     PIE2            equ	4000	;# 
   167   000FA1                     PIR2            equ	4001	;# 
   168   000FA2                     IPR2            equ	4002	;# 
   169   000FA6                     EECON1          equ	4006	;# 
   170   000FA7                     EECON2          equ	4007	;# 
   171   000FA8                     EEDATA          equ	4008	;# 
   172   000FA9                     EEADR           equ	4009	;# 
   173   000FAB                     RCSTA           equ	4011	;# 
   174   000FAB                     RCSTA1          equ	4011	;# 
   175   000FAC                     TXSTA           equ	4012	;# 
   176   000FAC                     TXSTA1          equ	4012	;# 
   177   000FAD                     TXREG           equ	4013	;# 
   178   000FAD                     TXREG1          equ	4013	;# 
   179   000FAE                     RCREG           equ	4014	;# 
   180   000FAE                     RCREG1          equ	4014	;# 
   181   000FAF                     SPBRG           equ	4015	;# 
   182   000FAF                     SPBRG1          equ	4015	;# 
   183   000FB0                     SPBRGH          equ	4016	;# 
   184   000FB1                     T3CON           equ	4017	;# 
   185   000FB2                     TMR3            equ	4018	;# 
   186   000FB2                     TMR3L           equ	4018	;# 
   187   000FB3                     TMR3H           equ	4019	;# 
   188   000FB4                     CMCON           equ	4020	;# 
   189   000FB5                     CVRCON          equ	4021	;# 
   190   000FB6                     ECCP1AS         equ	4022	;# 
   191   000FB7                     ECCP1DEL        equ	4023	;# 
   192   000FB7                     PWM1CON         equ	4023	;# 
   193   000FB8                     BAUDCON         equ	4024	;# 
   194   000FB8                     BAUDCTL         equ	4024	;# 
   195   000FBA                     CCP2CON         equ	4026	;# 
   196   000FBB                     CCPR2           equ	4027	;# 
   197   000FBB                     CCPR2L          equ	4027	;# 
   198   000FBC                     CCPR2H          equ	4028	;# 
   199   000FBD                     CCP1CON         equ	4029	;# 
   200   000FBD                     ECCP1CON        equ	4029	;# 
   201   000FBE                     CCPR1           equ	4030	;# 
   202   000FBE                     CCPR1L          equ	4030	;# 
   203   000FBF                     CCPR1H          equ	4031	;# 
   204   000FC0                     ADCON2          equ	4032	;# 
   205   000FC1                     ADCON1          equ	4033	;# 
   206   000FC2                     ADCON0          equ	4034	;# 
   207   000FC3                     ADRES           equ	4035	;# 
   208   000FC3                     ADRESL          equ	4035	;# 
   209   000FC4                     ADRESH          equ	4036	;# 
   210   000FC5                     SSPCON2         equ	4037	;# 
   211   000FC6                     SSPCON1         equ	4038	;# 
   212   000FC7                     SSPSTAT         equ	4039	;# 
   213   000FC8                     SSPADD          equ	4040	;# 
   214   000FC9                     SSPBUF          equ	4041	;# 
   215   000FCA                     T2CON           equ	4042	;# 
   216   000FCB                     PR2             equ	4043	;# 
   217   000FCB                     MEMCON          equ	4043	;# 
   218   000FCC                     TMR2            equ	4044	;# 
   219   000FCD                     T1CON           equ	4045	;# 
   220   000FCE                     TMR1            equ	4046	;# 
   221   000FCE                     TMR1L           equ	4046	;# 
   222   000FCF                     TMR1H           equ	4047	;# 
   223   000FD0                     RCON            equ	4048	;# 
   224   000FD1                     WDTCON          equ	4049	;# 
   225   000FD2                     HLVDCON         equ	4050	;# 
   226   000FD2                     LVDCON          equ	4050	;# 
   227   000FD3                     OSCCON          equ	4051	;# 
   228   000FD5                     T0CON           equ	4053	;# 
   229   000FD6                     TMR0            equ	4054	;# 
   230   000FD6                     TMR0L           equ	4054	;# 
   231   000FD7                     TMR0H           equ	4055	;# 
   232   000FD8                     STATUS          equ	4056	;# 
   233   000FD9                     FSR2            equ	4057	;# 
   234   000FD9                     FSR2L           equ	4057	;# 
   235   000FDA                     FSR2H           equ	4058	;# 
   236   000FDB                     PLUSW2          equ	4059	;# 
   237   000FDC                     PREINC2         equ	4060	;# 
   238   000FDD                     POSTDEC2        equ	4061	;# 
   239   000FDE                     POSTINC2        equ	4062	;# 
   240   000FDF                     INDF2           equ	4063	;# 
   241   000FE0                     BSR             equ	4064	;# 
   242   000FE1                     FSR1            equ	4065	;# 
   243   000FE1                     FSR1L           equ	4065	;# 
   244   000FE2                     FSR1H           equ	4066	;# 
   245   000FE3                     PLUSW1          equ	4067	;# 
   246   000FE4                     PREINC1         equ	4068	;# 
   247   000FE5                     POSTDEC1        equ	4069	;# 
   248   000FE6                     POSTINC1        equ	4070	;# 
   249   000FE7                     INDF1           equ	4071	;# 
   250   000FE8                     WREG            equ	4072	;# 
   251   000FE9                     FSR0            equ	4073	;# 
   252   000FE9                     FSR0L           equ	4073	;# 
   253   000FEA                     FSR0H           equ	4074	;# 
   254   000FEB                     PLUSW0          equ	4075	;# 
   255   000FEC                     PREINC0         equ	4076	;# 
   256   000FED                     POSTDEC0        equ	4077	;# 
   257   000FEE                     POSTINC0        equ	4078	;# 
   258   000FEF                     INDF0           equ	4079	;# 
   259   000FF0                     INTCON3         equ	4080	;# 
   260   000FF1                     INTCON2         equ	4081	;# 
   261   000FF2                     INTCON          equ	4082	;# 
   262   000FF3                     PROD            equ	4083	;# 
   263   000FF3                     PRODL           equ	4083	;# 
   264   000FF4                     PRODH           equ	4084	;# 
   265   000FF5                     TABLAT          equ	4085	;# 
   266   000FF6                     TBLPTR          equ	4086	;# 
   267   000FF6                     TBLPTRL         equ	4086	;# 
   268   000FF7                     TBLPTRH         equ	4087	;# 
   269   000FF8                     TBLPTRU         equ	4088	;# 
   270   000FF9                     PCLAT           equ	4089	;# 
   271   000FF9                     PC              equ	4089	;# 
   272   000FF9                     PCL             equ	4089	;# 
   273   000FFA                     PCLATH          equ	4090	;# 
   274   000FFB                     PCLATU          equ	4091	;# 
   275   000FFC                     STKPTR          equ	4092	;# 
   276   000FFD                     TOS             equ	4093	;# 
   277   000FFD                     TOSL            equ	4093	;# 
   278   000FFE                     TOSH            equ	4094	;# 
   279   000FFF                     TOSU            equ	4095	;# 
   280   000F80                     PORTA           equ	3968	;# 
   281   000F81                     PORTB           equ	3969	;# 
   282   000F82                     PORTC           equ	3970	;# 
   283   000F83                     PORTD           equ	3971	;# 
   284   000F84                     PORTE           equ	3972	;# 
   285   000F89                     LATA            equ	3977	;# 
   286   000F8A                     LATB            equ	3978	;# 
   287   000F8B                     LATC            equ	3979	;# 
   288   000F8C                     LATD            equ	3980	;# 
   289   000F8D                     LATE            equ	3981	;# 
   290   000F92                     TRISA           equ	3986	;# 
   291   000F92                     DDRA            equ	3986	;# 
   292   000F93                     TRISB           equ	3987	;# 
   293   000F93                     DDRB            equ	3987	;# 
   294   000F94                     TRISC           equ	3988	;# 
   295   000F94                     DDRC            equ	3988	;# 
   296   000F95                     TRISD           equ	3989	;# 
   297   000F95                     DDRD            equ	3989	;# 
   298   000F96                     TRISE           equ	3990	;# 
   299   000F96                     DDRE            equ	3990	;# 
   300   000F9B                     OSCTUNE         equ	3995	;# 
   301   000F9D                     PIE1            equ	3997	;# 
   302   000F9E                     PIR1            equ	3998	;# 
   303   000F9F                     IPR1            equ	3999	;# 
   304   000FA0                     PIE2            equ	4000	;# 
   305   000FA1                     PIR2            equ	4001	;# 
   306   000FA2                     IPR2            equ	4002	;# 
   307   000FA6                     EECON1          equ	4006	;# 
   308   000FA7                     EECON2          equ	4007	;# 
   309   000FA8                     EEDATA          equ	4008	;# 
   310   000FA9                     EEADR           equ	4009	;# 
   311   000FAB                     RCSTA           equ	4011	;# 
   312   000FAB                     RCSTA1          equ	4011	;# 
   313   000FAC                     TXSTA           equ	4012	;# 
   314   000FAC                     TXSTA1          equ	4012	;# 
   315   000FAD                     TXREG           equ	4013	;# 
   316   000FAD                     TXREG1          equ	4013	;# 
   317   000FAE                     RCREG           equ	4014	;# 
   318   000FAE                     RCREG1          equ	4014	;# 
   319   000FAF                     SPBRG           equ	4015	;# 
   320   000FAF                     SPBRG1          equ	4015	;# 
   321   000FB0                     SPBRGH          equ	4016	;# 
   322   000FB1                     T3CON           equ	4017	;# 
   323   000FB2                     TMR3            equ	4018	;# 
   324   000FB2                     TMR3L           equ	4018	;# 
   325   000FB3                     TMR3H           equ	4019	;# 
   326   000FB4                     CMCON           equ	4020	;# 
   327   000FB5                     CVRCON          equ	4021	;# 
   328   000FB6                     ECCP1AS         equ	4022	;# 
   329   000FB7                     ECCP1DEL        equ	4023	;# 
   330   000FB7                     PWM1CON         equ	4023	;# 
   331   000FB8                     BAUDCON         equ	4024	;# 
   332   000FB8                     BAUDCTL         equ	4024	;# 
   333   000FBA                     CCP2CON         equ	4026	;# 
   334   000FBB                     CCPR2           equ	4027	;# 
   335   000FBB                     CCPR2L          equ	4027	;# 
   336   000FBC                     CCPR2H          equ	4028	;# 
   337   000FBD                     CCP1CON         equ	4029	;# 
   338   000FBD                     ECCP1CON        equ	4029	;# 
   339   000FBE                     CCPR1           equ	4030	;# 
   340   000FBE                     CCPR1L          equ	4030	;# 
   341   000FBF                     CCPR1H          equ	4031	;# 
   342   000FC0                     ADCON2          equ	4032	;# 
   343   000FC1                     ADCON1          equ	4033	;# 
   344   000FC2                     ADCON0          equ	4034	;# 
   345   000FC3                     ADRES           equ	4035	;# 
   346   000FC3                     ADRESL          equ	4035	;# 
   347   000FC4                     ADRESH          equ	4036	;# 
   348   000FC5                     SSPCON2         equ	4037	;# 
   349   000FC6                     SSPCON1         equ	4038	;# 
   350   000FC7                     SSPSTAT         equ	4039	;# 
   351   000FC8                     SSPADD          equ	4040	;# 
   352   000FC9                     SSPBUF          equ	4041	;# 
   353   000FCA                     T2CON           equ	4042	;# 
   354   000FCB                     PR2             equ	4043	;# 
   355   000FCB                     MEMCON          equ	4043	;# 
   356   000FCC                     TMR2            equ	4044	;# 
   357   000FCD                     T1CON           equ	4045	;# 
   358   000FCE                     TMR1            equ	4046	;# 
   359   000FCE                     TMR1L           equ	4046	;# 
   360   000FCF                     TMR1H           equ	4047	;# 
   361   000FD0                     RCON            equ	4048	;# 
   362   000FD1                     WDTCON          equ	4049	;# 
   363   000FD2                     HLVDCON         equ	4050	;# 
   364   000FD2                     LVDCON          equ	4050	;# 
   365   000FD3                     OSCCON          equ	4051	;# 
   366   000FD5                     T0CON           equ	4053	;# 
   367   000FD6                     TMR0            equ	4054	;# 
   368   000FD6                     TMR0L           equ	4054	;# 
   369   000FD7                     TMR0H           equ	4055	;# 
   370   000FD8                     STATUS          equ	4056	;# 
   371   000FD9                     FSR2            equ	4057	;# 
   372   000FD9                     FSR2L           equ	4057	;# 
   373   000FDA                     FSR2H           equ	4058	;# 
   374   000FDB                     PLUSW2          equ	4059	;# 
   375   000FDC                     PREINC2         equ	4060	;# 
   376   000FDD                     POSTDEC2        equ	4061	;# 
   377   000FDE                     POSTINC2        equ	4062	;# 
   378   000FDF                     INDF2           equ	4063	;# 
   379   000FE0                     BSR             equ	4064	;# 
   380   000FE1                     FSR1            equ	4065	;# 
   381   000FE1                     FSR1L           equ	4065	;# 
   382   000FE2                     FSR1H           equ	4066	;# 
   383   000FE3                     PLUSW1          equ	4067	;# 
   384   000FE4                     PREINC1         equ	4068	;# 
   385   000FE5                     POSTDEC1        equ	4069	;# 
   386   000FE6                     POSTINC1        equ	4070	;# 
   387   000FE7                     INDF1           equ	4071	;# 
   388   000FE8                     WREG            equ	4072	;# 
   389   000FE9                     FSR0            equ	4073	;# 
   390   000FE9                     FSR0L           equ	4073	;# 
   391   000FEA                     FSR0H           equ	4074	;# 
   392   000FEB                     PLUSW0          equ	4075	;# 
   393   000FEC                     PREINC0         equ	4076	;# 
   394   000FED                     POSTDEC0        equ	4077	;# 
   395   000FEE                     POSTINC0        equ	4078	;# 
   396   000FEF                     INDF0           equ	4079	;# 
   397   000FF0                     INTCON3         equ	4080	;# 
   398   000FF1                     INTCON2         equ	4081	;# 
   399   000FF2                     INTCON          equ	4082	;# 
   400   000FF3                     PROD            equ	4083	;# 
   401   000FF3                     PRODL           equ	4083	;# 
   402   000FF4                     PRODH           equ	4084	;# 
   403   000FF5                     TABLAT          equ	4085	;# 
   404   000FF6                     TBLPTR          equ	4086	;# 
   405   000FF6                     TBLPTRL         equ	4086	;# 
   406   000FF7                     TBLPTRH         equ	4087	;# 
   407   000FF8                     TBLPTRU         equ	4088	;# 
   408   000FF9                     PCLAT           equ	4089	;# 
   409   000FF9                     PC              equ	4089	;# 
   410   000FF9                     PCL             equ	4089	;# 
   411   000FFA                     PCLATH          equ	4090	;# 
   412   000FFB                     PCLATU          equ	4091	;# 
   413   000FFC                     STKPTR          equ	4092	;# 
   414   000FFD                     TOS             equ	4093	;# 
   415   000FFD                     TOSL            equ	4093	;# 
   416   000FFE                     TOSH            equ	4094	;# 
   417   000FFF                     TOSU            equ	4095	;# 
   418   000F80                     PORTA           equ	3968	;# 
   419   000F81                     PORTB           equ	3969	;# 
   420   000F82                     PORTC           equ	3970	;# 
   421   000F83                     PORTD           equ	3971	;# 
   422   000F84                     PORTE           equ	3972	;# 
   423   000F89                     LATA            equ	3977	;# 
   424   000F8A                     LATB            equ	3978	;# 
   425   000F8B                     LATC            equ	3979	;# 
   426   000F8C                     LATD            equ	3980	;# 
   427   000F8D                     LATE            equ	3981	;# 
   428   000F92                     TRISA           equ	3986	;# 
   429   000F92                     DDRA            equ	3986	;# 
   430   000F93                     TRISB           equ	3987	;# 
   431   000F93                     DDRB            equ	3987	;# 
   432   000F94                     TRISC           equ	3988	;# 
   433   000F94                     DDRC            equ	3988	;# 
   434   000F95                     TRISD           equ	3989	;# 
   435   000F95                     DDRD            equ	3989	;# 
   436   000F96                     TRISE           equ	3990	;# 
   437   000F96                     DDRE            equ	3990	;# 
   438   000F9B                     OSCTUNE         equ	3995	;# 
   439   000F9D                     PIE1            equ	3997	;# 
   440   000F9E                     PIR1            equ	3998	;# 
   441   000F9F                     IPR1            equ	3999	;# 
   442   000FA0                     PIE2            equ	4000	;# 
   443   000FA1                     PIR2            equ	4001	;# 
   444   000FA2                     IPR2            equ	4002	;# 
   445   000FA6                     EECON1          equ	4006	;# 
   446   000FA7                     EECON2          equ	4007	;# 
   447   000FA8                     EEDATA          equ	4008	;# 
   448   000FA9                     EEADR           equ	4009	;# 
   449   000FAB                     RCSTA           equ	4011	;# 
   450   000FAB                     RCSTA1          equ	4011	;# 
   451   000FAC                     TXSTA           equ	4012	;# 
   452   000FAC                     TXSTA1          equ	4012	;# 
   453   000FAD                     TXREG           equ	4013	;# 
   454   000FAD                     TXREG1          equ	4013	;# 
   455   000FAE                     RCREG           equ	4014	;# 
   456   000FAE                     RCREG1          equ	4014	;# 
   457   000FAF                     SPBRG           equ	4015	;# 
   458   000FAF                     SPBRG1          equ	4015	;# 
   459   000FB0                     SPBRGH          equ	4016	;# 
   460   000FB1                     T3CON           equ	4017	;# 
   461   000FB2                     TMR3            equ	4018	;# 
   462   000FB2                     TMR3L           equ	4018	;# 
   463   000FB3                     TMR3H           equ	4019	;# 
   464   000FB4                     CMCON           equ	4020	;# 
   465   000FB5                     CVRCON          equ	4021	;# 
   466   000FB6                     ECCP1AS         equ	4022	;# 
   467   000FB7                     ECCP1DEL        equ	4023	;# 
   468   000FB7                     PWM1CON         equ	4023	;# 
   469   000FB8                     BAUDCON         equ	4024	;# 
   470   000FB8                     BAUDCTL         equ	4024	;# 
   471   000FBA                     CCP2CON         equ	4026	;# 
   472   000FBB                     CCPR2           equ	4027	;# 
   473   000FBB                     CCPR2L          equ	4027	;# 
   474   000FBC                     CCPR2H          equ	4028	;# 
   475   000FBD                     CCP1CON         equ	4029	;# 
   476   000FBD                     ECCP1CON        equ	4029	;# 
   477   000FBE                     CCPR1           equ	4030	;# 
   478   000FBE                     CCPR1L          equ	4030	;# 
   479   000FBF                     CCPR1H          equ	4031	;# 
   480   000FC0                     ADCON2          equ	4032	;# 
   481   000FC1                     ADCON1          equ	4033	;# 
   482   000FC2                     ADCON0          equ	4034	;# 
   483   000FC3                     ADRES           equ	4035	;# 
   484   000FC3                     ADRESL          equ	4035	;# 
   485   000FC4                     ADRESH          equ	4036	;# 
   486   000FC5                     SSPCON2         equ	4037	;# 
   487   000FC6                     SSPCON1         equ	4038	;# 
   488   000FC7                     SSPSTAT         equ	4039	;# 
   489   000FC8                     SSPADD          equ	4040	;# 
   490   000FC9                     SSPBUF          equ	4041	;# 
   491   000FCA                     T2CON           equ	4042	;# 
   492   000FCB                     PR2             equ	4043	;# 
   493   000FCB                     MEMCON          equ	4043	;# 
   494   000FCC                     TMR2            equ	4044	;# 
   495   000FCD                     T1CON           equ	4045	;# 
   496   000FCE                     TMR1            equ	4046	;# 
   497   000FCE                     TMR1L           equ	4046	;# 
   498   000FCF                     TMR1H           equ	4047	;# 
   499   000FD0                     RCON            equ	4048	;# 
   500   000FD1                     WDTCON          equ	4049	;# 
   501   000FD2                     HLVDCON         equ	4050	;# 
   502   000FD2                     LVDCON          equ	4050	;# 
   503   000FD3                     OSCCON          equ	4051	;# 
   504   000FD5                     T0CON           equ	4053	;# 
   505   000FD6                     TMR0            equ	4054	;# 
   506   000FD6                     TMR0L           equ	4054	;# 
   507   000FD7                     TMR0H           equ	4055	;# 
   508   000FD8                     STATUS          equ	4056	;# 
   509   000FD9                     FSR2            equ	4057	;# 
   510   000FD9                     FSR2L           equ	4057	;# 
   511   000FDA                     FSR2H           equ	4058	;# 
   512   000FDB                     PLUSW2          equ	4059	;# 
   513   000FDC                     PREINC2         equ	4060	;# 
   514   000FDD                     POSTDEC2        equ	4061	;# 
   515   000FDE                     POSTINC2        equ	4062	;# 
   516   000FDF                     INDF2           equ	4063	;# 
   517   000FE0                     BSR             equ	4064	;# 
   518   000FE1                     FSR1            equ	4065	;# 
   519   000FE1                     FSR1L           equ	4065	;# 
   520   000FE2                     FSR1H           equ	4066	;# 
   521   000FE3                     PLUSW1          equ	4067	;# 
   522   000FE4                     PREINC1         equ	4068	;# 
   523   000FE5                     POSTDEC1        equ	4069	;# 
   524   000FE6                     POSTINC1        equ	4070	;# 
   525   000FE7                     INDF1           equ	4071	;# 
   526   000FE8                     WREG            equ	4072	;# 
   527   000FE9                     FSR0            equ	4073	;# 
   528   000FE9                     FSR0L           equ	4073	;# 
   529   000FEA                     FSR0H           equ	4074	;# 
   530   000FEB                     PLUSW0          equ	4075	;# 
   531   000FEC                     PREINC0         equ	4076	;# 
   532   000FED                     POSTDEC0        equ	4077	;# 
   533   000FEE                     POSTINC0        equ	4078	;# 
   534   000FEF                     INDF0           equ	4079	;# 
   535   000FF0                     INTCON3         equ	4080	;# 
   536   000FF1                     INTCON2         equ	4081	;# 
   537   000FF2                     INTCON          equ	4082	;# 
   538   000FF3                     PROD            equ	4083	;# 
   539   000FF3                     PRODL           equ	4083	;# 
   540   000FF4                     PRODH           equ	4084	;# 
   541   000FF5                     TABLAT          equ	4085	;# 
   542   000FF6                     TBLPTR          equ	4086	;# 
   543   000FF6                     TBLPTRL         equ	4086	;# 
   544   000FF7                     TBLPTRH         equ	4087	;# 
   545   000FF8                     TBLPTRU         equ	4088	;# 
   546   000FF9                     PCLAT           equ	4089	;# 
   547   000FF9                     PC              equ	4089	;# 
   548   000FF9                     PCL             equ	4089	;# 
   549   000FFA                     PCLATH          equ	4090	;# 
   550   000FFB                     PCLATU          equ	4091	;# 
   551   000FFC                     STKPTR          equ	4092	;# 
   552   000FFD                     TOS             equ	4093	;# 
   553   000FFD                     TOSL            equ	4093	;# 
   554   000FFE                     TOSH            equ	4094	;# 
   555   000FFF                     TOSU            equ	4095	;# 
   556   000F80                     PORTA           equ	3968	;# 
   557   000F81                     PORTB           equ	3969	;# 
   558   000F82                     PORTC           equ	3970	;# 
   559   000F83                     PORTD           equ	3971	;# 
   560   000F84                     PORTE           equ	3972	;# 
   561   000F89                     LATA            equ	3977	;# 
   562   000F8A                     LATB            equ	3978	;# 
   563   000F8B                     LATC            equ	3979	;# 
   564   000F8C                     LATD            equ	3980	;# 
   565   000F8D                     LATE            equ	3981	;# 
   566   000F92                     TRISA           equ	3986	;# 
   567   000F92                     DDRA            equ	3986	;# 
   568   000F93                     TRISB           equ	3987	;# 
   569   000F93                     DDRB            equ	3987	;# 
   570   000F94                     TRISC           equ	3988	;# 
   571   000F94                     DDRC            equ	3988	;# 
   572   000F95                     TRISD           equ	3989	;# 
   573   000F95                     DDRD            equ	3989	;# 
   574   000F96                     TRISE           equ	3990	;# 
   575   000F96                     DDRE            equ	3990	;# 
   576   000F9B                     OSCTUNE         equ	3995	;# 
   577   000F9D                     PIE1            equ	3997	;# 
   578   000F9E                     PIR1            equ	3998	;# 
   579   000F9F                     IPR1            equ	3999	;# 
   580   000FA0                     PIE2            equ	4000	;# 
   581   000FA1                     PIR2            equ	4001	;# 
   582   000FA2                     IPR2            equ	4002	;# 
   583   000FA6                     EECON1          equ	4006	;# 
   584   000FA7                     EECON2          equ	4007	;# 
   585   000FA8                     EEDATA          equ	4008	;# 
   586   000FA9                     EEADR           equ	4009	;# 
   587   000FAB                     RCSTA           equ	4011	;# 
   588   000FAB                     RCSTA1          equ	4011	;# 
   589   000FAC                     TXSTA           equ	4012	;# 
   590   000FAC                     TXSTA1          equ	4012	;# 
   591   000FAD                     TXREG           equ	4013	;# 
   592   000FAD                     TXREG1          equ	4013	;# 
   593   000FAE                     RCREG           equ	4014	;# 
   594   000FAE                     RCREG1          equ	4014	;# 
   595   000FAF                     SPBRG           equ	4015	;# 
   596   000FAF                     SPBRG1          equ	4015	;# 
   597   000FB0                     SPBRGH          equ	4016	;# 
   598   000FB1                     T3CON           equ	4017	;# 
   599   000FB2                     TMR3            equ	4018	;# 
   600   000FB2                     TMR3L           equ	4018	;# 
   601   000FB3                     TMR3H           equ	4019	;# 
   602   000FB4                     CMCON           equ	4020	;# 
   603   000FB5                     CVRCON          equ	4021	;# 
   604   000FB6                     ECCP1AS         equ	4022	;# 
   605   000FB7                     ECCP1DEL        equ	4023	;# 
   606   000FB7                     PWM1CON         equ	4023	;# 
   607   000FB8                     BAUDCON         equ	4024	;# 
   608   000FB8                     BAUDCTL         equ	4024	;# 
   609   000FBA                     CCP2CON         equ	4026	;# 
   610   000FBB                     CCPR2           equ	4027	;# 
   611   000FBB                     CCPR2L          equ	4027	;# 
   612   000FBC                     CCPR2H          equ	4028	;# 
   613   000FBD                     CCP1CON         equ	4029	;# 
   614   000FBD                     ECCP1CON        equ	4029	;# 
   615   000FBE                     CCPR1           equ	4030	;# 
   616   000FBE                     CCPR1L          equ	4030	;# 
   617   000FBF                     CCPR1H          equ	4031	;# 
   618   000FC0                     ADCON2          equ	4032	;# 
   619   000FC1                     ADCON1          equ	4033	;# 
   620   000FC2                     ADCON0          equ	4034	;# 
   621   000FC3                     ADRES           equ	4035	;# 
   622   000FC3                     ADRESL          equ	4035	;# 
   623   000FC4                     ADRESH          equ	4036	;# 
   624   000FC5                     SSPCON2         equ	4037	;# 
   625   000FC6                     SSPCON1         equ	4038	;# 
   626   000FC7                     SSPSTAT         equ	4039	;# 
   627   000FC8                     SSPADD          equ	4040	;# 
   628   000FC9                     SSPBUF          equ	4041	;# 
   629   000FCA                     T2CON           equ	4042	;# 
   630   000FCB                     PR2             equ	4043	;# 
   631   000FCB                     MEMCON          equ	4043	;# 
   632   000FCC                     TMR2            equ	4044	;# 
   633   000FCD                     T1CON           equ	4045	;# 
   634   000FCE                     TMR1            equ	4046	;# 
   635   000FCE                     TMR1L           equ	4046	;# 
   636   000FCF                     TMR1H           equ	4047	;# 
   637   000FD0                     RCON            equ	4048	;# 
   638   000FD1                     WDTCON          equ	4049	;# 
   639   000FD2                     HLVDCON         equ	4050	;# 
   640   000FD2                     LVDCON          equ	4050	;# 
   641   000FD3                     OSCCON          equ	4051	;# 
   642   000FD5                     T0CON           equ	4053	;# 
   643   000FD6                     TMR0            equ	4054	;# 
   644   000FD6                     TMR0L           equ	4054	;# 
   645   000FD7                     TMR0H           equ	4055	;# 
   646   000FD8                     STATUS          equ	4056	;# 
   647   000FD9                     FSR2            equ	4057	;# 
   648   000FD9                     FSR2L           equ	4057	;# 
   649   000FDA                     FSR2H           equ	4058	;# 
   650   000FDB                     PLUSW2          equ	4059	;# 
   651   000FDC                     PREINC2         equ	4060	;# 
   652   000FDD                     POSTDEC2        equ	4061	;# 
   653   000FDE                     POSTINC2        equ	4062	;# 
   654   000FDF                     INDF2           equ	4063	;# 
   655   000FE0                     BSR             equ	4064	;# 
   656   000FE1                     FSR1            equ	4065	;# 
   657   000FE1                     FSR1L           equ	4065	;# 
   658   000FE2                     FSR1H           equ	4066	;# 
   659   000FE3                     PLUSW1          equ	4067	;# 
   660   000FE4                     PREINC1         equ	4068	;# 
   661   000FE5                     POSTDEC1        equ	4069	;# 
   662   000FE6                     POSTINC1        equ	4070	;# 
   663   000FE7                     INDF1           equ	4071	;# 
   664   000FE8                     WREG            equ	4072	;# 
   665   000FE9                     FSR0            equ	4073	;# 
   666   000FE9                     FSR0L           equ	4073	;# 
   667   000FEA                     FSR0H           equ	4074	;# 
   668   000FEB                     PLUSW0          equ	4075	;# 
   669   000FEC                     PREINC0         equ	4076	;# 
   670   000FED                     POSTDEC0        equ	4077	;# 
   671   000FEE                     POSTINC0        equ	4078	;# 
   672   000FEF                     INDF0           equ	4079	;# 
   673   000FF0                     INTCON3         equ	4080	;# 
   674   000FF1                     INTCON2         equ	4081	;# 
   675   000FF2                     INTCON          equ	4082	;# 
   676   000FF3                     PROD            equ	4083	;# 
   677   000FF3                     PRODL           equ	4083	;# 
   678   000FF4                     PRODH           equ	4084	;# 
   679   000FF5                     TABLAT          equ	4085	;# 
   680   000FF6                     TBLPTR          equ	4086	;# 
   681   000FF6                     TBLPTRL         equ	4086	;# 
   682   000FF7                     TBLPTRH         equ	4087	;# 
   683   000FF8                     TBLPTRU         equ	4088	;# 
   684   000FF9                     PCLAT           equ	4089	;# 
   685   000FF9                     PC              equ	4089	;# 
   686   000FF9                     PCL             equ	4089	;# 
   687   000FFA                     PCLATH          equ	4090	;# 
   688   000FFB                     PCLATU          equ	4091	;# 
   689   000FFC                     STKPTR          equ	4092	;# 
   690   000FFD                     TOS             equ	4093	;# 
   691   000FFD                     TOSL            equ	4093	;# 
   692   000FFE                     TOSH            equ	4094	;# 
   693   000FFF                     TOSU            equ	4095	;# 
   694   000F80                     PORTA           equ	3968	;# 
   695   000F81                     PORTB           equ	3969	;# 
   696   000F82                     PORTC           equ	3970	;# 
   697   000F83                     PORTD           equ	3971	;# 
   698   000F84                     PORTE           equ	3972	;# 
   699   000F89                     LATA            equ	3977	;# 
   700   000F8A                     LATB            equ	3978	;# 
   701   000F8B                     LATC            equ	3979	;# 
   702   000F8C                     LATD            equ	3980	;# 
   703   000F8D                     LATE            equ	3981	;# 
   704   000F92                     TRISA           equ	3986	;# 
   705   000F92                     DDRA            equ	3986	;# 
   706   000F93                     TRISB           equ	3987	;# 
   707   000F93                     DDRB            equ	3987	;# 
   708   000F94                     TRISC           equ	3988	;# 
   709   000F94                     DDRC            equ	3988	;# 
   710   000F95                     TRISD           equ	3989	;# 
   711   000F95                     DDRD            equ	3989	;# 
   712   000F96                     TRISE           equ	3990	;# 
   713   000F96                     DDRE            equ	3990	;# 
   714   000F9B                     OSCTUNE         equ	3995	;# 
   715   000F9D                     PIE1            equ	3997	;# 
   716   000F9E                     PIR1            equ	3998	;# 
   717   000F9F                     IPR1            equ	3999	;# 
   718   000FA0                     PIE2            equ	4000	;# 
   719   000FA1                     PIR2            equ	4001	;# 
   720   000FA2                     IPR2            equ	4002	;# 
   721   000FA6                     EECON1          equ	4006	;# 
   722   000FA7                     EECON2          equ	4007	;# 
   723   000FA8                     EEDATA          equ	4008	;# 
   724   000FA9                     EEADR           equ	4009	;# 
   725   000FAB                     RCSTA           equ	4011	;# 
   726   000FAB                     RCSTA1          equ	4011	;# 
   727   000FAC                     TXSTA           equ	4012	;# 
   728   000FAC                     TXSTA1          equ	4012	;# 
   729   000FAD                     TXREG           equ	4013	;# 
   730   000FAD                     TXREG1          equ	4013	;# 
   731   000FAE                     RCREG           equ	4014	;# 
   732   000FAE                     RCREG1          equ	4014	;# 
   733   000FAF                     SPBRG           equ	4015	;# 
   734   000FAF                     SPBRG1          equ	4015	;# 
   735   000FB0                     SPBRGH          equ	4016	;# 
   736   000FB1                     T3CON           equ	4017	;# 
   737   000FB2                     TMR3            equ	4018	;# 
   738   000FB2                     TMR3L           equ	4018	;# 
   739   000FB3                     TMR3H           equ	4019	;# 
   740   000FB4                     CMCON           equ	4020	;# 
   741   000FB5                     CVRCON          equ	4021	;# 
   742   000FB6                     ECCP1AS         equ	4022	;# 
   743   000FB7                     ECCP1DEL        equ	4023	;# 
   744   000FB7                     PWM1CON         equ	4023	;# 
   745   000FB8                     BAUDCON         equ	4024	;# 
   746   000FB8                     BAUDCTL         equ	4024	;# 
   747   000FBA                     CCP2CON         equ	4026	;# 
   748   000FBB                     CCPR2           equ	4027	;# 
   749   000FBB                     CCPR2L          equ	4027	;# 
   750   000FBC                     CCPR2H          equ	4028	;# 
   751   000FBD                     CCP1CON         equ	4029	;# 
   752   000FBD                     ECCP1CON        equ	4029	;# 
   753   000FBE                     CCPR1           equ	4030	;# 
   754   000FBE                     CCPR1L          equ	4030	;# 
   755   000FBF                     CCPR1H          equ	4031	;# 
   756   000FC0                     ADCON2          equ	4032	;# 
   757   000FC1                     ADCON1          equ	4033	;# 
   758   000FC2                     ADCON0          equ	4034	;# 
   759   000FC3                     ADRES           equ	4035	;# 
   760   000FC3                     ADRESL          equ	4035	;# 
   761   000FC4                     ADRESH          equ	4036	;# 
   762   000FC5                     SSPCON2         equ	4037	;# 
   763   000FC6                     SSPCON1         equ	4038	;# 
   764   000FC7                     SSPSTAT         equ	4039	;# 
   765   000FC8                     SSPADD          equ	4040	;# 
   766   000FC9                     SSPBUF          equ	4041	;# 
   767   000FCA                     T2CON           equ	4042	;# 
   768   000FCB                     PR2             equ	4043	;# 
   769   000FCB                     MEMCON          equ	4043	;# 
   770   000FCC                     TMR2            equ	4044	;# 
   771   000FCD                     T1CON           equ	4045	;# 
   772   000FCE                     TMR1            equ	4046	;# 
   773   000FCE                     TMR1L           equ	4046	;# 
   774   000FCF                     TMR1H           equ	4047	;# 
   775   000FD0                     RCON            equ	4048	;# 
   776   000FD1                     WDTCON          equ	4049	;# 
   777   000FD2                     HLVDCON         equ	4050	;# 
   778   000FD2                     LVDCON          equ	4050	;# 
   779   000FD3                     OSCCON          equ	4051	;# 
   780   000FD5                     T0CON           equ	4053	;# 
   781   000FD6                     TMR0            equ	4054	;# 
   782   000FD6                     TMR0L           equ	4054	;# 
   783   000FD7                     TMR0H           equ	4055	;# 
   784   000FD8                     STATUS          equ	4056	;# 
   785   000FD9                     FSR2            equ	4057	;# 
   786   000FD9                     FSR2L           equ	4057	;# 
   787   000FDA                     FSR2H           equ	4058	;# 
   788   000FDB                     PLUSW2          equ	4059	;# 
   789   000FDC                     PREINC2         equ	4060	;# 
   790   000FDD                     POSTDEC2        equ	4061	;# 
   791   000FDE                     POSTINC2        equ	4062	;# 
   792   000FDF                     INDF2           equ	4063	;# 
   793   000FE0                     BSR             equ	4064	;# 
   794   000FE1                     FSR1            equ	4065	;# 
   795   000FE1                     FSR1L           equ	4065	;# 
   796   000FE2                     FSR1H           equ	4066	;# 
   797   000FE3                     PLUSW1          equ	4067	;# 
   798   000FE4                     PREINC1         equ	4068	;# 
   799   000FE5                     POSTDEC1        equ	4069	;# 
   800   000FE6                     POSTINC1        equ	4070	;# 
   801   000FE7                     INDF1           equ	4071	;# 
   802   000FE8                     WREG            equ	4072	;# 
   803   000FE9                     FSR0            equ	4073	;# 
   804   000FE9                     FSR0L           equ	4073	;# 
   805   000FEA                     FSR0H           equ	4074	;# 
   806   000FEB                     PLUSW0          equ	4075	;# 
   807   000FEC                     PREINC0         equ	4076	;# 
   808   000FED                     POSTDEC0        equ	4077	;# 
   809   000FEE                     POSTINC0        equ	4078	;# 
   810   000FEF                     INDF0           equ	4079	;# 
   811   000FF0                     INTCON3         equ	4080	;# 
   812   000FF1                     INTCON2         equ	4081	;# 
   813   000FF2                     INTCON          equ	4082	;# 
   814   000FF3                     PROD            equ	4083	;# 
   815   000FF3                     PRODL           equ	4083	;# 
   816   000FF4                     PRODH           equ	4084	;# 
   817   000FF5                     TABLAT          equ	4085	;# 
   818   000FF6                     TBLPTR          equ	4086	;# 
   819   000FF6                     TBLPTRL         equ	4086	;# 
   820   000FF7                     TBLPTRH         equ	4087	;# 
   821   000FF8                     TBLPTRU         equ	4088	;# 
   822   000FF9                     PCLAT           equ	4089	;# 
   823   000FF9                     PC              equ	4089	;# 
   824   000FF9                     PCL             equ	4089	;# 
   825   000FFA                     PCLATH          equ	4090	;# 
   826   000FFB                     PCLATU          equ	4091	;# 
   827   000FFC                     STKPTR          equ	4092	;# 
   828   000FFD                     TOS             equ	4093	;# 
   829   000FFD                     TOSL            equ	4093	;# 
   830   000FFE                     TOSH            equ	4094	;# 
   831   000FFF                     TOSU            equ	4095	;# 
   832   000F80                     PORTA           equ	3968	;# 
   833   000F81                     PORTB           equ	3969	;# 
   834   000F82                     PORTC           equ	3970	;# 
   835   000F83                     PORTD           equ	3971	;# 
   836   000F84                     PORTE           equ	3972	;# 
   837   000F89                     LATA            equ	3977	;# 
   838   000F8A                     LATB            equ	3978	;# 
   839   000F8B                     LATC            equ	3979	;# 
   840   000F8C                     LATD            equ	3980	;# 
   841   000F8D                     LATE            equ	3981	;# 
   842   000F92                     TRISA           equ	3986	;# 
   843   000F92                     DDRA            equ	3986	;# 
   844   000F93                     TRISB           equ	3987	;# 
   845   000F93                     DDRB            equ	3987	;# 
   846   000F94                     TRISC           equ	3988	;# 
   847   000F94                     DDRC            equ	3988	;# 
   848   000F95                     TRISD           equ	3989	;# 
   849   000F95                     DDRD            equ	3989	;# 
   850   000F96                     TRISE           equ	3990	;# 
   851   000F96                     DDRE            equ	3990	;# 
   852   000F9B                     OSCTUNE         equ	3995	;# 
   853   000F9D                     PIE1            equ	3997	;# 
   854   000F9E                     PIR1            equ	3998	;# 
   855   000F9F                     IPR1            equ	3999	;# 
   856   000FA0                     PIE2            equ	4000	;# 
   857   000FA1                     PIR2            equ	4001	;# 
   858   000FA2                     IPR2            equ	4002	;# 
   859   000FA6                     EECON1          equ	4006	;# 
   860   000FA7                     EECON2          equ	4007	;# 
   861   000FA8                     EEDATA          equ	4008	;# 
   862   000FA9                     EEADR           equ	4009	;# 
   863   000FAB                     RCSTA           equ	4011	;# 
   864   000FAB                     RCSTA1          equ	4011	;# 
   865   000FAC                     TXSTA           equ	4012	;# 
   866   000FAC                     TXSTA1          equ	4012	;# 
   867   000FAD                     TXREG           equ	4013	;# 
   868   000FAD                     TXREG1          equ	4013	;# 
   869   000FAE                     RCREG           equ	4014	;# 
   870   000FAE                     RCREG1          equ	4014	;# 
   871   000FAF                     SPBRG           equ	4015	;# 
   872   000FAF                     SPBRG1          equ	4015	;# 
   873   000FB0                     SPBRGH          equ	4016	;# 
   874   000FB1                     T3CON           equ	4017	;# 
   875   000FB2                     TMR3            equ	4018	;# 
   876   000FB2                     TMR3L           equ	4018	;# 
   877   000FB3                     TMR3H           equ	4019	;# 
   878   000FB4                     CMCON           equ	4020	;# 
   879   000FB5                     CVRCON          equ	4021	;# 
   880   000FB6                     ECCP1AS         equ	4022	;# 
   881   000FB7                     ECCP1DEL        equ	4023	;# 
   882   000FB7                     PWM1CON         equ	4023	;# 
   883   000FB8                     BAUDCON         equ	4024	;# 
   884   000FB8                     BAUDCTL         equ	4024	;# 
   885   000FBA                     CCP2CON         equ	4026	;# 
   886   000FBB                     CCPR2           equ	4027	;# 
   887   000FBB                     CCPR2L          equ	4027	;# 
   888   000FBC                     CCPR2H          equ	4028	;# 
   889   000FBD                     CCP1CON         equ	4029	;# 
   890   000FBD                     ECCP1CON        equ	4029	;# 
   891   000FBE                     CCPR1           equ	4030	;# 
   892   000FBE                     CCPR1L          equ	4030	;# 
   893   000FBF                     CCPR1H          equ	4031	;# 
   894   000FC0                     ADCON2          equ	4032	;# 
   895   000FC1                     ADCON1          equ	4033	;# 
   896   000FC2                     ADCON0          equ	4034	;# 
   897   000FC3                     ADRES           equ	4035	;# 
   898   000FC3                     ADRESL          equ	4035	;# 
   899   000FC4                     ADRESH          equ	4036	;# 
   900   000FC5                     SSPCON2         equ	4037	;# 
   901   000FC6                     SSPCON1         equ	4038	;# 
   902   000FC7                     SSPSTAT         equ	4039	;# 
   903   000FC8                     SSPADD          equ	4040	;# 
   904   000FC9                     SSPBUF          equ	4041	;# 
   905   000FCA                     T2CON           equ	4042	;# 
   906   000FCB                     PR2             equ	4043	;# 
   907   000FCB                     MEMCON          equ	4043	;# 
   908   000FCC                     TMR2            equ	4044	;# 
   909   000FCD                     T1CON           equ	4045	;# 
   910   000FCE                     TMR1            equ	4046	;# 
   911   000FCE                     TMR1L           equ	4046	;# 
   912   000FCF                     TMR1H           equ	4047	;# 
   913   000FD0                     RCON            equ	4048	;# 
   914   000FD1                     WDTCON          equ	4049	;# 
   915   000FD2                     HLVDCON         equ	4050	;# 
   916   000FD2                     LVDCON          equ	4050	;# 
   917   000FD3                     OSCCON          equ	4051	;# 
   918   000FD5                     T0CON           equ	4053	;# 
   919   000FD6                     TMR0            equ	4054	;# 
   920   000FD6                     TMR0L           equ	4054	;# 
   921   000FD7                     TMR0H           equ	4055	;# 
   922   000FD8                     STATUS          equ	4056	;# 
   923   000FD9                     FSR2            equ	4057	;# 
   924   000FD9                     FSR2L           equ	4057	;# 
   925   000FDA                     FSR2H           equ	4058	;# 
   926   000FDB                     PLUSW2          equ	4059	;# 
   927   000FDC                     PREINC2         equ	4060	;# 
   928   000FDD                     POSTDEC2        equ	4061	;# 
   929   000FDE                     POSTINC2        equ	4062	;# 
   930   000FDF                     INDF2           equ	4063	;# 
   931   000FE0                     BSR             equ	4064	;# 
   932   000FE1                     FSR1            equ	4065	;# 
   933   000FE1                     FSR1L           equ	4065	;# 
   934   000FE2                     FSR1H           equ	4066	;# 
   935   000FE3                     PLUSW1          equ	4067	;# 
   936   000FE4                     PREINC1         equ	4068	;# 
   937   000FE5                     POSTDEC1        equ	4069	;# 
   938   000FE6                     POSTINC1        equ	4070	;# 
   939   000FE7                     INDF1           equ	4071	;# 
   940   000FE8                     WREG            equ	4072	;# 
   941   000FE9                     FSR0            equ	4073	;# 
   942   000FE9                     FSR0L           equ	4073	;# 
   943   000FEA                     FSR0H           equ	4074	;# 
   944   000FEB                     PLUSW0          equ	4075	;# 
   945   000FEC                     PREINC0         equ	4076	;# 
   946   000FED                     POSTDEC0        equ	4077	;# 
   947   000FEE                     POSTINC0        equ	4078	;# 
   948   000FEF                     INDF0           equ	4079	;# 
   949   000FF0                     INTCON3         equ	4080	;# 
   950   000FF1                     INTCON2         equ	4081	;# 
   951   000FF2                     INTCON          equ	4082	;# 
   952   000FF3                     PROD            equ	4083	;# 
   953   000FF3                     PRODL           equ	4083	;# 
   954   000FF4                     PRODH           equ	4084	;# 
   955   000FF5                     TABLAT          equ	4085	;# 
   956   000FF6                     TBLPTR          equ	4086	;# 
   957   000FF6                     TBLPTRL         equ	4086	;# 
   958   000FF7                     TBLPTRH         equ	4087	;# 
   959   000FF8                     TBLPTRU         equ	4088	;# 
   960   000FF9                     PCLAT           equ	4089	;# 
   961   000FF9                     PC              equ	4089	;# 
   962   000FF9                     PCL             equ	4089	;# 
   963   000FFA                     PCLATH          equ	4090	;# 
   964   000FFB                     PCLATU          equ	4091	;# 
   965   000FFC                     STKPTR          equ	4092	;# 
   966   000FFD                     TOS             equ	4093	;# 
   967   000FFD                     TOSL            equ	4093	;# 
   968   000FFE                     TOSH            equ	4094	;# 
   969   000FFF                     TOSU            equ	4095	;# 
   970   000F80                     PORTA           equ	3968	;# 
   971   000F81                     PORTB           equ	3969	;# 
   972   000F82                     PORTC           equ	3970	;# 
   973   000F83                     PORTD           equ	3971	;# 
   974   000F84                     PORTE           equ	3972	;# 
   975   000F89                     LATA            equ	3977	;# 
   976   000F8A                     LATB            equ	3978	;# 
   977   000F8B                     LATC            equ	3979	;# 
   978   000F8C                     LATD            equ	3980	;# 
   979   000F8D                     LATE            equ	3981	;# 
   980   000F92                     TRISA           equ	3986	;# 
   981   000F92                     DDRA            equ	3986	;# 
   982   000F93                     TRISB           equ	3987	;# 
   983   000F93                     DDRB            equ	3987	;# 
   984   000F94                     TRISC           equ	3988	;# 
   985   000F94                     DDRC            equ	3988	;# 
   986   000F95                     TRISD           equ	3989	;# 
   987   000F95                     DDRD            equ	3989	;# 
   988   000F96                     TRISE           equ	3990	;# 
   989   000F96                     DDRE            equ	3990	;# 
   990   000F9B                     OSCTUNE         equ	3995	;# 
   991   000F9D                     PIE1            equ	3997	;# 
   992   000F9E                     PIR1            equ	3998	;# 
   993   000F9F                     IPR1            equ	3999	;# 
   994   000FA0                     PIE2            equ	4000	;# 
   995   000FA1                     PIR2            equ	4001	;# 
   996   000FA2                     IPR2            equ	4002	;# 
   997   000FA6                     EECON1          equ	4006	;# 
   998   000FA7                     EECON2          equ	4007	;# 
   999   000FA8                     EEDATA          equ	4008	;# 
  1000   000FA9                     EEADR           equ	4009	;# 
  1001   000FAB                     RCSTA           equ	4011	;# 
  1002   000FAB                     RCSTA1          equ	4011	;# 
  1003   000FAC                     TXSTA           equ	4012	;# 
  1004   000FAC                     TXSTA1          equ	4012	;# 
  1005   000FAD                     TXREG           equ	4013	;# 
  1006   000FAD                     TXREG1          equ	4013	;# 
  1007   000FAE                     RCREG           equ	4014	;# 
  1008   000FAE                     RCREG1          equ	4014	;# 
  1009   000FAF                     SPBRG           equ	4015	;# 
  1010   000FAF                     SPBRG1          equ	4015	;# 
  1011   000FB0                     SPBRGH          equ	4016	;# 
  1012   000FB1                     T3CON           equ	4017	;# 
  1013   000FB2                     TMR3            equ	4018	;# 
  1014   000FB2                     TMR3L           equ	4018	;# 
  1015   000FB3                     TMR3H           equ	4019	;# 
  1016   000FB4                     CMCON           equ	4020	;# 
  1017   000FB5                     CVRCON          equ	4021	;# 
  1018   000FB6                     ECCP1AS         equ	4022	;# 
  1019   000FB7                     ECCP1DEL        equ	4023	;# 
  1020   000FB7                     PWM1CON         equ	4023	;# 
  1021   000FB8                     BAUDCON         equ	4024	;# 
  1022   000FB8                     BAUDCTL         equ	4024	;# 
  1023   000FBA                     CCP2CON         equ	4026	;# 
  1024   000FBB                     CCPR2           equ	4027	;# 
  1025   000FBB                     CCPR2L          equ	4027	;# 
  1026   000FBC                     CCPR2H          equ	4028	;# 
  1027   000FBD                     CCP1CON         equ	4029	;# 
  1028   000FBD                     ECCP1CON        equ	4029	;# 
  1029   000FBE                     CCPR1           equ	4030	;# 
  1030   000FBE                     CCPR1L          equ	4030	;# 
  1031   000FBF                     CCPR1H          equ	4031	;# 
  1032   000FC0                     ADCON2          equ	4032	;# 
  1033   000FC1                     ADCON1          equ	4033	;# 
  1034   000FC2                     ADCON0          equ	4034	;# 
  1035   000FC3                     ADRES           equ	4035	;# 
  1036   000FC3                     ADRESL          equ	4035	;# 
  1037   000FC4                     ADRESH          equ	4036	;# 
  1038   000FC5                     SSPCON2         equ	4037	;# 
  1039   000FC6                     SSPCON1         equ	4038	;# 
  1040   000FC7                     SSPSTAT         equ	4039	;# 
  1041   000FC8                     SSPADD          equ	4040	;# 
  1042   000FC9                     SSPBUF          equ	4041	;# 
  1043   000FCA                     T2CON           equ	4042	;# 
  1044   000FCB                     PR2             equ	4043	;# 
  1045   000FCB                     MEMCON          equ	4043	;# 
  1046   000FCC                     TMR2            equ	4044	;# 
  1047   000FCD                     T1CON           equ	4045	;# 
  1048   000FCE                     TMR1            equ	4046	;# 
  1049   000FCE                     TMR1L           equ	4046	;# 
  1050   000FCF                     TMR1H           equ	4047	;# 
  1051   000FD0                     RCON            equ	4048	;# 
  1052   000FD1                     WDTCON          equ	4049	;# 
  1053   000FD2                     HLVDCON         equ	4050	;# 
  1054   000FD2                     LVDCON          equ	4050	;# 
  1055   000FD3                     OSCCON          equ	4051	;# 
  1056   000FD5                     T0CON           equ	4053	;# 
  1057   000FD6                     TMR0            equ	4054	;# 
  1058   000FD6                     TMR0L           equ	4054	;# 
  1059   000FD7                     TMR0H           equ	4055	;# 
  1060   000FD8                     STATUS          equ	4056	;# 
  1061   000FD9                     FSR2            equ	4057	;# 
  1062   000FD9                     FSR2L           equ	4057	;# 
  1063   000FDA                     FSR2H           equ	4058	;# 
  1064   000FDB                     PLUSW2          equ	4059	;# 
  1065   000FDC                     PREINC2         equ	4060	;# 
  1066   000FDD                     POSTDEC2        equ	4061	;# 
  1067   000FDE                     POSTINC2        equ	4062	;# 
  1068   000FDF                     INDF2           equ	4063	;# 
  1069   000FE0                     BSR             equ	4064	;# 
  1070   000FE1                     FSR1            equ	4065	;# 
  1071   000FE1                     FSR1L           equ	4065	;# 
  1072   000FE2                     FSR1H           equ	4066	;# 
  1073   000FE3                     PLUSW1          equ	4067	;# 
  1074   000FE4                     PREINC1         equ	4068	;# 
  1075   000FE5                     POSTDEC1        equ	4069	;# 
  1076   000FE6                     POSTINC1        equ	4070	;# 
  1077   000FE7                     INDF1           equ	4071	;# 
  1078   000FE8                     WREG            equ	4072	;# 
  1079   000FE9                     FSR0            equ	4073	;# 
  1080   000FE9                     FSR0L           equ	4073	;# 
  1081   000FEA                     FSR0H           equ	4074	;# 
  1082   000FEB                     PLUSW0          equ	4075	;# 
  1083   000FEC                     PREINC0         equ	4076	;# 
  1084   000FED                     POSTDEC0        equ	4077	;# 
  1085   000FEE                     POSTINC0        equ	4078	;# 
  1086   000FEF                     INDF0           equ	4079	;# 
  1087   000FF0                     INTCON3         equ	4080	;# 
  1088   000FF1                     INTCON2         equ	4081	;# 
  1089   000FF2                     INTCON          equ	4082	;# 
  1090   000FF3                     PROD            equ	4083	;# 
  1091   000FF3                     PRODL           equ	4083	;# 
  1092   000FF4                     PRODH           equ	4084	;# 
  1093   000FF5                     TABLAT          equ	4085	;# 
  1094   000FF6                     TBLPTR          equ	4086	;# 
  1095   000FF6                     TBLPTRL         equ	4086	;# 
  1096   000FF7                     TBLPTRH         equ	4087	;# 
  1097   000FF8                     TBLPTRU         equ	4088	;# 
  1098   000FF9                     PCLAT           equ	4089	;# 
  1099   000FF9                     PC              equ	4089	;# 
  1100   000FF9                     PCL             equ	4089	;# 
  1101   000FFA                     PCLATH          equ	4090	;# 
  1102   000FFB                     PCLATU          equ	4091	;# 
  1103   000FFC                     STKPTR          equ	4092	;# 
  1104   000FFD                     TOS             equ	4093	;# 
  1105   000FFD                     TOSL            equ	4093	;# 
  1106   000FFE                     TOSH            equ	4094	;# 
  1107   000FFF                     TOSU            equ	4095	;# 
  1108   000F80                     PORTA           equ	3968	;# 
  1109   000F81                     PORTB           equ	3969	;# 
  1110   000F82                     PORTC           equ	3970	;# 
  1111   000F83                     PORTD           equ	3971	;# 
  1112   000F84                     PORTE           equ	3972	;# 
  1113   000F89                     LATA            equ	3977	;# 
  1114   000F8A                     LATB            equ	3978	;# 
  1115   000F8B                     LATC            equ	3979	;# 
  1116   000F8C                     LATD            equ	3980	;# 
  1117   000F8D                     LATE            equ	3981	;# 
  1118   000F92                     TRISA           equ	3986	;# 
  1119   000F92                     DDRA            equ	3986	;# 
  1120   000F93                     TRISB           equ	3987	;# 
  1121   000F93                     DDRB            equ	3987	;# 
  1122   000F94                     TRISC           equ	3988	;# 
  1123   000F94                     DDRC            equ	3988	;# 
  1124   000F95                     TRISD           equ	3989	;# 
  1125   000F95                     DDRD            equ	3989	;# 
  1126   000F96                     TRISE           equ	3990	;# 
  1127   000F96                     DDRE            equ	3990	;# 
  1128   000F9B                     OSCTUNE         equ	3995	;# 
  1129   000F9D                     PIE1            equ	3997	;# 
  1130   000F9E                     PIR1            equ	3998	;# 
  1131   000F9F                     IPR1            equ	3999	;# 
  1132   000FA0                     PIE2            equ	4000	;# 
  1133   000FA1                     PIR2            equ	4001	;# 
  1134   000FA2                     IPR2            equ	4002	;# 
  1135   000FA6                     EECON1          equ	4006	;# 
  1136   000FA7                     EECON2          equ	4007	;# 
  1137   000FA8                     EEDATA          equ	4008	;# 
  1138   000FA9                     EEADR           equ	4009	;# 
  1139   000FAB                     RCSTA           equ	4011	;# 
  1140   000FAB                     RCSTA1          equ	4011	;# 
  1141   000FAC                     TXSTA           equ	4012	;# 
  1142   000FAC                     TXSTA1          equ	4012	;# 
  1143   000FAD                     TXREG           equ	4013	;# 
  1144   000FAD                     TXREG1          equ	4013	;# 
  1145   000FAE                     RCREG           equ	4014	;# 
  1146   000FAE                     RCREG1          equ	4014	;# 
  1147   000FAF                     SPBRG           equ	4015	;# 
  1148   000FAF                     SPBRG1          equ	4015	;# 
  1149   000FB0                     SPBRGH          equ	4016	;# 
  1150   000FB1                     T3CON           equ	4017	;# 
  1151   000FB2                     TMR3            equ	4018	;# 
  1152   000FB2                     TMR3L           equ	4018	;# 
  1153   000FB3                     TMR3H           equ	4019	;# 
  1154   000FB4                     CMCON           equ	4020	;# 
  1155   000FB5                     CVRCON          equ	4021	;# 
  1156   000FB6                     ECCP1AS         equ	4022	;# 
  1157   000FB7                     ECCP1DEL        equ	4023	;# 
  1158   000FB7                     PWM1CON         equ	4023	;# 
  1159   000FB8                     BAUDCON         equ	4024	;# 
  1160   000FB8                     BAUDCTL         equ	4024	;# 
  1161   000FBA                     CCP2CON         equ	4026	;# 
  1162   000FBB                     CCPR2           equ	4027	;# 
  1163   000FBB                     CCPR2L          equ	4027	;# 
  1164   000FBC                     CCPR2H          equ	4028	;# 
  1165   000FBD                     CCP1CON         equ	4029	;# 
  1166   000FBD                     ECCP1CON        equ	4029	;# 
  1167   000FBE                     CCPR1           equ	4030	;# 
  1168   000FBE                     CCPR1L          equ	4030	;# 
  1169   000FBF                     CCPR1H          equ	4031	;# 
  1170   000FC0                     ADCON2          equ	4032	;# 
  1171   000FC1                     ADCON1          equ	4033	;# 
  1172   000FC2                     ADCON0          equ	4034	;# 
  1173   000FC3                     ADRES           equ	4035	;# 
  1174   000FC3                     ADRESL          equ	4035	;# 
  1175   000FC4                     ADRESH          equ	4036	;# 
  1176   000FC5                     SSPCON2         equ	4037	;# 
  1177   000FC6                     SSPCON1         equ	4038	;# 
  1178   000FC7                     SSPSTAT         equ	4039	;# 
  1179   000FC8                     SSPADD          equ	4040	;# 
  1180   000FC9                     SSPBUF          equ	4041	;# 
  1181   000FCA                     T2CON           equ	4042	;# 
  1182   000FCB                     PR2             equ	4043	;# 
  1183   000FCB                     MEMCON          equ	4043	;# 
  1184   000FCC                     TMR2            equ	4044	;# 
  1185   000FCD                     T1CON           equ	4045	;# 
  1186   000FCE                     TMR1            equ	4046	;# 
  1187   000FCE                     TMR1L           equ	4046	;# 
  1188   000FCF                     TMR1H           equ	4047	;# 
  1189   000FD0                     RCON            equ	4048	;# 
  1190   000FD1                     WDTCON          equ	4049	;# 
  1191   000FD2                     HLVDCON         equ	4050	;# 
  1192   000FD2                     LVDCON          equ	4050	;# 
  1193   000FD3                     OSCCON          equ	4051	;# 
  1194   000FD5                     T0CON           equ	4053	;# 
  1195   000FD6                     TMR0            equ	4054	;# 
  1196   000FD6                     TMR0L           equ	4054	;# 
  1197   000FD7                     TMR0H           equ	4055	;# 
  1198   000FD8                     STATUS          equ	4056	;# 
  1199   000FD9                     FSR2            equ	4057	;# 
  1200   000FD9                     FSR2L           equ	4057	;# 
  1201   000FDA                     FSR2H           equ	4058	;# 
  1202   000FDB                     PLUSW2          equ	4059	;# 
  1203   000FDC                     PREINC2         equ	4060	;# 
  1204   000FDD                     POSTDEC2        equ	4061	;# 
  1205   000FDE                     POSTINC2        equ	4062	;# 
  1206   000FDF                     INDF2           equ	4063	;# 
  1207   000FE0                     BSR             equ	4064	;# 
  1208   000FE1                     FSR1            equ	4065	;# 
  1209   000FE1                     FSR1L           equ	4065	;# 
  1210   000FE2                     FSR1H           equ	4066	;# 
  1211   000FE3                     PLUSW1          equ	4067	;# 
  1212   000FE4                     PREINC1         equ	4068	;# 
  1213   000FE5                     POSTDEC1        equ	4069	;# 
  1214   000FE6                     POSTINC1        equ	4070	;# 
  1215   000FE7                     INDF1           equ	4071	;# 
  1216   000FE8                     WREG            equ	4072	;# 
  1217   000FE9                     FSR0            equ	4073	;# 
  1218   000FE9                     FSR0L           equ	4073	;# 
  1219   000FEA                     FSR0H           equ	4074	;# 
  1220   000FEB                     PLUSW0          equ	4075	;# 
  1221   000FEC                     PREINC0         equ	4076	;# 
  1222   000FED                     POSTDEC0        equ	4077	;# 
  1223   000FEE                     POSTINC0        equ	4078	;# 
  1224   000FEF                     INDF0           equ	4079	;# 
  1225   000FF0                     INTCON3         equ	4080	;# 
  1226   000FF1                     INTCON2         equ	4081	;# 
  1227   000FF2                     INTCON          equ	4082	;# 
  1228   000FF3                     PROD            equ	4083	;# 
  1229   000FF3                     PRODL           equ	4083	;# 
  1230   000FF4                     PRODH           equ	4084	;# 
  1231   000FF5                     TABLAT          equ	4085	;# 
  1232   000FF6                     TBLPTR          equ	4086	;# 
  1233   000FF6                     TBLPTRL         equ	4086	;# 
  1234   000FF7                     TBLPTRH         equ	4087	;# 
  1235   000FF8                     TBLPTRU         equ	4088	;# 
  1236   000FF9                     PCLAT           equ	4089	;# 
  1237   000FF9                     PC              equ	4089	;# 
  1238   000FF9                     PCL             equ	4089	;# 
  1239   000FFA                     PCLATH          equ	4090	;# 
  1240   000FFB                     PCLATU          equ	4091	;# 
  1241   000FFC                     STKPTR          equ	4092	;# 
  1242   000FFD                     TOS             equ	4093	;# 
  1243   000FFD                     TOSL            equ	4093	;# 
  1244   000FFE                     TOSH            equ	4094	;# 
  1245   000FFF                     TOSU            equ	4095	;# 
  1246                           
  1247                           	psect	idataCOMRAM
  1248   00166A                     __pidataCOMRAM:
  1249                           	callstack 0
  1250                           
  1251                           ;initializer for motor_Read@MAX_TIMEOUT
  1252   00166A  03E8               	dw	1000
  1253                           
  1254                           ;initializer for motorTerminal@hour
  1255   00166C  30                 	db	48
  1256   00166D  30                 	db	48
  1257   00166E  30                 	db	48
  1258   00166F  30                 	db	48
  1259                           
  1260                           	psect	idataBANK0
  1261   00163E                     __pidataBANK0:
  1262                           	callstack 0
  1263                           
  1264                           ;initializer for controlLED@ledBits
  1265   00163E  01                 	db	1
  1266   00163F  02                 	db	2
  1267   001640  04                 	db	4
  1268   001641  08                 	db	8
  1269   001642  10                 	db	16
  1270   001643  20                 	db	32
  1271                           
  1272                           ;initializer for _currentTime
  1273   001644  30                 	db	48
  1274   001645  30                 	db	48
  1275   001646  30                 	db	48
  1276   001647  30                 	db	48
  1277                           
  1278                           ;initializer for _colValues
  1279   001648  20                 	db	32
  1280   001649  40                 	db	64
  1281   00164A  10                 	db	16
  1282                           
  1283                           	psect	idataBANK1
  1284   00133E                     __pidataBANK1:
  1285                           	callstack 0
  1286                           
  1287                           ;initializer for _userUIDs
  1288   00133E  65                 	db	101
  1289   00133F  DC                 	db	220
  1290   001340  F9                 	db	249
  1291   001341  03                 	db	3
  1292   001342  43                 	db	67
  1293   001343  00                 	db	0
  1294   001344  00                 	db	0
  1295   001345  00                 	db	0
  1296   001346  00                 	db	0
  1297   001347  00                 	db	0
  1298   001348  00                 	db	0
  1299   001349  00                 	db	0
  1300   00134A  00                 	db	0
  1301   00134B  00                 	db	0
  1302   00134C  00                 	db	0
  1303   00134D  00                 	db	0
  1304   00134E  DC                 	db	220
  1305   00134F  0D                 	db	13
  1306   001350  F9                 	db	249
  1307   001351  03                 	db	3
  1308   001352  2B                 	db	43
  1309   001353  00                 	db	0
  1310   001354  00                 	db	0
  1311   001355  00                 	db	0
  1312   001356  00                 	db	0
  1313   001357  00                 	db	0
  1314   001358  00                 	db	0
  1315   001359  00                 	db	0
  1316   00135A  00                 	db	0
  1317   00135B  00                 	db	0
  1318   00135C  00                 	db	0
  1319   00135D  00                 	db	0
  1320   00135E  DF                 	db	223
  1321   00135F  8B                 	db	139
  1322   001360  DF                 	db	223
  1323   001361  C4                 	db	196
  1324   001362  4F                 	db	79
  1325   001363  00                 	db	0
  1326   001364  00                 	db	0
  1327   001365  00                 	db	0
  1328   001366  00                 	db	0
  1329   001367  00                 	db	0
  1330   001368  00                 	db	0
  1331   001369  00                 	db	0
  1332   00136A  00                 	db	0
  1333   00136B  00                 	db	0
  1334   00136C  00                 	db	0
  1335   00136D  00                 	db	0
  1336   00136E  21                 	db	33
  1337   00136F  32                 	db	50
  1338   001370  A9                 	db	169
  1339   001371  89                 	db	137
  1340   001372  33                 	db	51
  1341   001373  00                 	db	0
  1342   001374  00                 	db	0
  1343   001375  00                 	db	0
  1344   001376  00                 	db	0
  1345   001377  00                 	db	0
  1346   001378  00                 	db	0
  1347   001379  00                 	db	0
  1348   00137A  00                 	db	0
  1349   00137B  00                 	db	0
  1350   00137C  00                 	db	0
  1351   00137D  00                 	db	0
  1352                           
  1353                           	psect	mediumconst
  1354   001EA8                     __pmediumconst:
  1355                           	callstack 0
  1356   001EA8  00                 	db	0
  1357   001EA9                     printfUID@hex:
  1358                           	callstack 0
  1359   001EA9  30                 	db	48
  1360   001EAA  31                 	db	49
  1361   001EAB  32                 	db	50
  1362   001EAC  33                 	db	51
  1363   001EAD  34                 	db	52
  1364   001EAE  35                 	db	53
  1365   001EAF  36                 	db	54
  1366   001EB0  37                 	db	55
  1367   001EB1  38                 	db	56
  1368   001EB2  39                 	db	57
  1369   001EB3  41                 	db	65
  1370   001EB4  42                 	db	66
  1371   001EB5  43                 	db	67
  1372   001EB6  44                 	db	68
  1373   001EB7  45                 	db	69
  1374   001EB8  46                 	db	70
  1375   001EB9  00                 	db	0
  1376   001EBA                     __end_ofprintfUID@hex:
  1377                           	callstack 0
  1378   001EBA  01                 	db	1
  1379   001EBB  02                 	db	2
  1380   001EBC  03                 	db	3
  1381   001EBD  04                 	db	4
  1382   001EBE  05                 	db	5
  1383   001EBF  06                 	db	6
  1384   001EC0  07                 	db	7
  1385   001EC1  08                 	db	8
  1386   001EC2  09                 	db	9
  1387   001EC3  0A                 	db	10
  1388   001EC4  00                 	db	0
  1389   001EC5  0B                 	db	11
  1390   001EC6                     __end_of_keymap:
  1391                           	callstack 0
  1392   007F92                     _TMR0IF         set	32658
  1393   000FD6                     _TMR0           set	4054
  1394   000FD5                     _T0CON          set	4053
  1395   000FAD                     _TXREG          set	4013
  1396   000FAE                     _RCREG          set	4014
  1397   000F9E                     _PIR1bits       set	3998
  1398   000FB8                     _BAUDCON        set	4024
  1399   000FAF                     _SPBRG          set	4015
  1400   000FAB                     _RCSTA          set	4011
  1401   000FAC                     _TXSTA          set	4012
  1402   000F8C                     _LATD           set	3980
  1403   000F95                     _TRISD          set	3989
  1404   000F94                     _TRISCbits      set	3988
  1405   000F82                     _PORTCbits      set	3970
  1406   000F8B                     _LATCbits       set	3979
  1407   000F89                     _LATA           set	3977
  1408   000F96                     _TRISE          set	3990
  1409   000F92                     _TRISA          set	3986
  1410   000F8A                     _LATBbits       set	3978
  1411   000F93                     _TRISBbits      set	3987
  1412   000F96                     _TRISEbits      set	3990
  1413   000FC1                     _ADCON1         set	4033
  1414   000F8D                     _LATEbits       set	3981
  1415   000FF2                     _INTCONbits     set	4082
  1416   001EC6                     STR_3:
  1417   001EC6  09                 	db	9
  1418   001EC7  31                 	db	49	;'1'
  1419   001EC8  2E                 	db	46
  1420   001EC9  20                 	db	32
  1421   001ECA  51                 	db	81	;'Q'
  1422   001ECB  75                 	db	117	;'u'
  1423   001ECC  69                 	db	105	;'i'
  1424   001ECD  20                 	db	32
  1425   001ECE  68                 	db	104	;'h'
  1426   001ECF  69                 	db	105	;'i'
  1427   001ED0  20                 	db	32
  1428   001ED1  68                 	db	104	;'h'
  1429   001ED2  61                 	db	97	;'a'
  1430   001ED3  20                 	db	32
  1431   001ED4  61                 	db	97	;'a'
  1432   001ED5  20                 	db	32
  1433   001ED6  6C                 	db	108	;'l'
  1434   001ED7  61                 	db	97	;'a'
  1435   001ED8  20                 	db	32
  1436   001ED9  73                 	db	115	;'s'
  1437   001EDA  61                 	db	97	;'a'
  1438   001EDB  6C                 	db	108	;'l'
  1439   001EDC  61                 	db	97	;'a'
  1440   001EDD  3F                 	db	63	;'?'
  1441   001EDE  0D                 	db	13
  1442   001EDF  0A                 	db	10
  1443   001EE0  09                 	db	9
  1444   001EE1  32                 	db	50	;'2'
  1445   001EE2  2E                 	db	46
  1446   001EE3  20                 	db	32
  1447   001EE4  4D                 	db	77	;'M'
  1448   001EE5  6F                 	db	111	;'o'
  1449   001EE6  73                 	db	115	;'s'
  1450   001EE7  74                 	db	116	;'t'
  1451   001EE8  72                 	db	114	;'r'
  1452   001EE9  61                 	db	97	;'a'
  1453   001EEA  72                 	db	114	;'r'
  1454   001EEB  20                 	db	32
  1455   001EEC  63                 	db	99	;'c'
  1456   001EED  6F                 	db	111	;'o'
  1457   001EEE  6E                 	db	110	;'n'
  1458   001EEF  66                 	db	102	;'f'
  1459   001EF0  69                 	db	105	;'i'
  1460   001EF1  67                 	db	103	;'g'
  1461   001EF2  75                 	db	117	;'u'
  1462   001EF3  72                 	db	114	;'r'
  1463   001EF4  61                 	db	97	;'a'
  1464   001EF5  63                 	db	99	;'c'
  1465   001EF6  69                 	db	105	;'i'
  1466   001EF7  6F                 	db	111	;'o'
  1467   001EF8  6E                 	db	110	;'n'
  1468   001EF9  73                 	db	115	;'s'
  1469   001EFA  0D                 	db	13
  1470   001EFB  0A                 	db	10
  1471   001EFC  09                 	db	9
  1472   001EFD  33                 	db	51	;'3'
  1473   001EFE  2E                 	db	46
  1474   001EFF  20                 	db	32
  1475   001F00  4D                 	db	77	;'M'
  1476   001F01  6F                 	db	111	;'o'
  1477   001F02  64                 	db	100	;'d'
  1478   001F03  69                 	db	105	;'i'
  1479   001F04  66                 	db	102	;'f'
  1480   001F05  69                 	db	105	;'i'
  1481   001F06  63                 	db	99	;'c'
  1482   001F07  61                 	db	97	;'a'
  1483   001F08  72                 	db	114	;'r'
  1484   001F09  20                 	db	32
  1485   001F0A  68                 	db	104	;'h'
  1486   001F0B  6F                 	db	111	;'o'
  1487   001F0C  72                 	db	114	;'r'
  1488   001F0D  61                 	db	97	;'a'
  1489   001F0E  20                 	db	32
  1490   001F0F  64                 	db	100	;'d'
  1491   001F10  65                 	db	101	;'e'
  1492   001F11  6C                 	db	108	;'l'
  1493   001F12  20                 	db	32
  1494   001F13  73                 	db	115	;'s'
  1495   001F14  69                 	db	105	;'i'
  1496   001F15  73                 	db	115	;'s'
  1497   001F16  74                 	db	116	;'t'
  1498   001F17  65                 	db	101	;'e'
  1499   001F18  6D                 	db	109	;'m'
  1500   001F19  61                 	db	97	;'a'
  1501   001F1A  0D                 	db	13
  1502   001F1B  0A                 	db	10
  1503   001F1C  4F                 	db	79	;'O'
  1504   001F1D  70                 	db	112	;'p'
  1505   001F1E  63                 	db	99	;'c'
  1506   001F1F  69                 	db	105	;'i'
  1507   001F20  F3                 	db	-13
  1508   001F21  3A                 	db	58	;':'
  1509   001F22  20                 	db	32
  1510   001F23  00                 	db	0
  1511   001F24                     STR_2:
  1512   001F24  4D                 	db	77	;'M'
  1513   001F25  65                 	db	101	;'e'
  1514   001F26  6E                 	db	110	;'n'
  1515   001F27  FA                 	db	-6
  1516   001F28  20                 	db	32
  1517   001F29  70                 	db	112	;'p'
  1518   001F2A  72                 	db	114	;'r'
  1519   001F2B  69                 	db	105	;'i'
  1520   001F2C  6E                 	db	110	;'n'
  1521   001F2D  63                 	db	99	;'c'
  1522   001F2E  69                 	db	105	;'i'
  1523   001F2F  70                 	db	112	;'p'
  1524   001F30  61                 	db	97	;'a'
  1525   001F31  6C                 	db	108	;'l'
  1526   001F32  0D                 	db	13
  1527   001F33  0A                 	db	10
  1528   001F34  2D                 	db	45
  1529   001F35  2D                 	db	45
  1530   001F36  2D                 	db	45
  1531   001F37  2D                 	db	45
  1532   001F38  2D                 	db	45
  1533   001F39  2D                 	db	45
  1534   001F3A  2D                 	db	45
  1535   001F3B  2D                 	db	45
  1536   001F3C  2D                 	db	45
  1537   001F3D  2D                 	db	45
  1538   001F3E  2D                 	db	45
  1539   001F3F  2D                 	db	45
  1540   001F40  2D                 	db	45
  1541   001F41  2D                 	db	45
  1542   001F42  2D                 	db	45
  1543   001F43  0D                 	db	13
  1544   001F44  0A                 	db	10
  1545   001F45  54                 	db	84	;'T'
  1546   001F46  72                 	db	114	;'r'
  1547   001F47  69                 	db	105	;'i'
  1548   001F48  61                 	db	97	;'a'
  1549   001F49  20                 	db	32
  1550   001F4A  75                 	db	117	;'u'
  1551   001F4B  6E                 	db	110	;'n'
  1552   001F4C  61                 	db	97	;'a'
  1553   001F4D  20                 	db	32
  1554   001F4E  6F                 	db	111	;'o'
  1555   001F4F  70                 	db	112	;'p'
  1556   001F50  63                 	db	99	;'c'
  1557   001F51  69                 	db	105	;'i'
  1558   001F52  F3                 	db	-13
  1559   001F53  3A                 	db	58	;':'
  1560   001F54  0D                 	db	13
  1561   001F55  0A                 	db	10
  1562   001F56  00                 	db	0
  1563   001F57                     STR_6:
  1564   001F57  4E                 	db	78	;'N'
  1565   001F58  6F                 	db	111	;'o'
  1566   001F59  20                 	db	32
  1567   001F5A  68                 	db	104	;'h'
  1568   001F5B  69                 	db	105	;'i'
  1569   001F5C  20                 	db	32
  1570   001F5D  68                 	db	104	;'h'
  1571   001F5E  61                 	db	97	;'a'
  1572   001F5F  20                 	db	32
  1573   001F60  63                 	db	99	;'c'
  1574   001F61  61                 	db	97	;'a'
  1575   001F62  70                 	db	112	;'p'
  1576   001F63  20                 	db	32
  1577   001F64  75                 	db	117	;'u'
  1578   001F65  73                 	db	115	;'s'
  1579   001F66  75                 	db	117	;'u'
  1580   001F67  61                 	db	97	;'a'
  1581   001F68  72                 	db	114	;'r'
  1582   001F69  69                 	db	105	;'i'
  1583   001F6A  20                 	db	32
  1584   001F6B  61                 	db	97	;'a'
  1585   001F6C  20                 	db	32
  1586   001F6D  6C                 	db	108	;'l'
  1587   001F6E  61                 	db	97	;'a'
  1588   001F6F  20                 	db	32
  1589   001F70  73                 	db	115	;'s'
  1590   001F71  61                 	db	97	;'a'
  1591   001F72  6C                 	db	108	;'l'
  1592   001F73  61                 	db	97	;'a'
  1593   001F74  2E                 	db	46
  1594   001F75  0D                 	db	13
  1595   001F76  0A                 	db	10
  1596   001F77  00                 	db	0
  1597   001F78                     STR_5:
  1598   001F78  45                 	db	69	;'E'
  1599   001F79  52                 	db	82	;'R'
  1600   001F7A  52                 	db	82	;'R'
  1601   001F7B  4F                 	db	79	;'O'
  1602   001F7C  52                 	db	82	;'R'
  1603   001F7D  2E                 	db	46
  1604   001F7E  20                 	db	32
  1605   001F7F  56                 	db	86	;'V'
  1606   001F80  61                 	db	97	;'a'
  1607   001F81  6C                 	db	108	;'l'
  1608   001F82  6F                 	db	111	;'o'
  1609   001F83  72                 	db	114	;'r'
  1610   001F84  20                 	db	32
  1611   001F85  69                 	db	105	;'i'
  1612   001F86  6E                 	db	110	;'n'
  1613   001F87  74                 	db	116	;'t'
  1614   001F88  72                 	db	114	;'r'
  1615   001F89  6F                 	db	111	;'o'
  1616   001F8A  64                 	db	100	;'d'
  1617   001F8B  75                 	db	117	;'u'
  1618   001F8C  69                 	db	105	;'i'
  1619   001F8D  74                 	db	116	;'t'
  1620   001F8E  20                 	db	32
  1621   001F8F  65                 	db	101	;'e'
  1622   001F90  72                 	db	114	;'r'
  1623   001F91  72                 	db	114	;'r'
  1624   001F92  6F                 	db	111	;'o'
  1625   001F93  6E                 	db	110	;'n'
  1626   001F94  69                 	db	105	;'i'
  1627   001F95  2E                 	db	46
  1628   001F96  0D                 	db	13
  1629   001F97  0A                 	db	10
  1630   001F98  00                 	db	0
  1631   001F99                     STR_10:
  1632   001F99  0D                 	db	13
  1633   001F9A  0A                 	db	10
  1634   001F9B  48                 	db	72	;'H'
  1635   001F9C  6F                 	db	111	;'o'
  1636   001F9D  72                 	db	114	;'r'
  1637   001F9E  61                 	db	97	;'a'
  1638   001F9F  20                 	db	32
  1639   001FA0  69                 	db	105	;'i'
  1640   001FA1  6E                 	db	110	;'n'
  1641   001FA2  74                 	db	116	;'t'
  1642   001FA3  72                 	db	114	;'r'
  1643   001FA4  6F                 	db	111	;'o'
  1644   001FA5  64                 	db	100	;'d'
  1645   001FA6  75                 	db	117	;'u'
  1646   001FA7  69                 	db	105	;'i'
  1647   001FA8  64                 	db	100	;'d'
  1648   001FA9  61                 	db	97	;'a'
  1649   001FAA  20                 	db	32
  1650   001FAB  63                 	db	99	;'c'
  1651   001FAC  6F                 	db	111	;'o'
  1652   001FAD  72                 	db	114	;'r'
  1653   001FAE  72                 	db	114	;'r'
  1654   001FAF  65                 	db	101	;'e'
  1655   001FB0  63                 	db	99	;'c'
  1656   001FB1  74                 	db	116	;'t'
  1657   001FB2  61                 	db	97	;'a'
  1658   001FB3  6D                 	db	109	;'m'
  1659   001FB4  65                 	db	101	;'e'
  1660   001FB5  6E                 	db	110	;'n'
  1661   001FB6  74                 	db	116	;'t'
  1662   001FB7  0D                 	db	13
  1663   001FB8  0A                 	db	10
  1664   001FB9  00                 	db	0
  1665   001FBA                     STR_9:
  1666   001FBA  49                 	db	73	;'I'
  1667   001FBB  6E                 	db	110	;'n'
  1668   001FBC  74                 	db	116	;'t'
  1669   001FBD  72                 	db	114	;'r'
  1670   001FBE  6F                 	db	111	;'o'
  1671   001FBF  64                 	db	100	;'d'
  1672   001FC0  75                 	db	117	;'u'
  1673   001FC1  63                 	db	99	;'c'
  1674   001FC2  65                 	db	101	;'e'
  1675   001FC3  20                 	db	32
  1676   001FC4  6C                 	db	108	;'l'
  1677   001FC5  61                 	db	97	;'a'
  1678   001FC6  20                 	db	32
  1679   001FC7  68                 	db	104	;'h'
  1680   001FC8  6F                 	db	111	;'o'
  1681   001FC9  72                 	db	114	;'r'
  1682   001FCA  61                 	db	97	;'a'
  1683   001FCB  20                 	db	32
  1684   001FCC  61                 	db	97	;'a'
  1685   001FCD  63                 	db	99	;'c'
  1686   001FCE  74                 	db	116	;'t'
  1687   001FCF  75                 	db	117	;'u'
  1688   001FD0  61                 	db	97	;'a'
  1689   001FD1  6C                 	db	108	;'l'
  1690   001FD2  28                 	db	40
  1691   001FD3  48                 	db	72	;'H'
  1692   001FD4  48                 	db	72	;'H'
  1693   001FD5  4D                 	db	77	;'M'
  1694   001FD6  4D                 	db	77	;'M'
  1695   001FD7  29                 	db	41
  1696   001FD8  3A                 	db	58	;':'
  1697   001FD9  20                 	db	32
  1698   001FDA  00                 	db	0
  1699   001FDB                     STR_1:
  1700   001FDB  2D                 	db	45
  1701   001FDC  2D                 	db	45
  1702   001FDD  2D                 	db	45
  1703   001FDE  2D                 	db	45
  1704   001FDF  2D                 	db	45
  1705   001FE0  2D                 	db	45
  1706   001FE1  2D                 	db	45
  1707   001FE2  2D                 	db	45
  1708   001FE3  2D                 	db	45
  1709   001FE4  2D                 	db	45
  1710   001FE5  2D                 	db	45
  1711   001FE6  2D                 	db	45
  1712   001FE7  2D                 	db	45
  1713   001FE8  2D                 	db	45
  1714   001FE9  2D                 	db	45
  1715   001FEA  0D                 	db	13
  1716   001FEB  0A                 	db	10
  1717   001FEC  00                 	db	0
  1718   001FED                     STR_8:
  1719   001FED  43                 	db	67	;'C'
  1720   001FEE  6F                 	db	111	;'o'
  1721   001FEF  6E                 	db	110	;'n'
  1722   001FF0  66                 	db	102	;'f'
  1723   001FF1  69                 	db	105	;'i'
  1724   001FF2  67                 	db	103	;'g'
  1725   001FF3  75                 	db	117	;'u'
  1726   001FF4  72                 	db	114	;'r'
  1727   001FF5  61                 	db	97	;'a'
  1728   001FF6  63                 	db	99	;'c'
  1729   001FF7  69                 	db	105	;'i'
  1730   001FF8  6F                 	db	111	;'o'
  1731   001FF9  6E                 	db	110	;'n'
  1732   001FFA  73                 	db	115	;'s'
  1733   001FFB  3A                 	db	58	;':'
  1734   001FFC  0D                 	db	13
  1735   001FFD  0A                 	db	10
  1736   001FFE  00                 	db	0
  1737   001FEA                     STR_4           equ	STR_1+15
  1738   001FEA                     STR_7           equ	STR_1+15
  1739   001FFF  00                 	db	0	; dummy byte at the end
  1740   001EA8                     __smallconst    set	__pmediumconst
  1741   001EA8                     __mediumconst   set	__pmediumconst
  1742   000002                     __activetblptr  equ	2
  1743                           
  1744                           ; #config settings
  1745                           
  1746                           	psect	cinit
  1747   000E4C                     __pcinit:
  1748                           	callstack 0
  1749   000E4C                     start_initialization:
  1750                           	callstack 0
  1751   000E4C                     __initialization:
  1752                           	callstack 0
  1753                           
  1754                           ; Initialize objects allocated to BANK1 (64 bytes)
  1755                           ; load TBLPTR registers with __pidataBANK1
  1756   000E4C  0E3E               	movlw	low __pidataBANK1
  1757   000E4E  6EF6               	movwf	tblptrl,c
  1758   000E50  0E13               	movlw	high __pidataBANK1
  1759   000E52  6EF7               	movwf	tblptrh,c
  1760   000E54  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1761   000E56  6EF8               	movwf	tblptru,c
  1762   000E58  EE01  F000         	lfsr	0,__pdataBANK1
  1763   000E5C  EE10 F040          	lfsr	1,64
  1764   000E60                     copy_data0:
  1765   000E60  0009               	tblrd		*+
  1766   000E62  CFF5 FFEE          	movff	tablat,postinc0
  1767   000E66  50E5               	movf	postdec1,w,c
  1768   000E68  50E1               	movf	fsr1l,w,c
  1769   000E6A  E1FA               	bnz	copy_data0
  1770                           
  1771                           ; Initialize objects allocated to BANK0 (13 bytes)
  1772                           ; load TBLPTR registers with __pidataBANK0
  1773   000E6C  0E3E               	movlw	low __pidataBANK0
  1774   000E6E  6EF6               	movwf	tblptrl,c
  1775   000E70  0E16               	movlw	high __pidataBANK0
  1776   000E72  6EF7               	movwf	tblptrh,c
  1777   000E74  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1778   000E76  6EF8               	movwf	tblptru,c
  1779   000E78  EE00  F0EE         	lfsr	0,__pdataBANK0
  1780   000E7C  EE10 F00D          	lfsr	1,13
  1781   000E80                     copy_data1:
  1782   000E80  0009               	tblrd		*+
  1783   000E82  CFF5 FFEE          	movff	tablat,postinc0
  1784   000E86  50E5               	movf	postdec1,w,c
  1785   000E88  50E1               	movf	fsr1l,w,c
  1786   000E8A  E1FA               	bnz	copy_data1
  1787                           
  1788                           ; Initialize objects allocated to COMRAM (6 bytes)
  1789                           ; load TBLPTR registers with __pidataCOMRAM
  1790   000E8C  0E6A               	movlw	low __pidataCOMRAM
  1791   000E8E  6EF6               	movwf	tblptrl,c
  1792   000E90  0E16               	movlw	high __pidataCOMRAM
  1793   000E92  6EF7               	movwf	tblptrh,c
  1794   000E94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1795   000E96  6EF8               	movwf	tblptru,c
  1796   000E98  EE00  F078         	lfsr	0,__pdataCOMRAM
  1797   000E9C  EE10 F006          	lfsr	1,6
  1798   000EA0                     copy_data2:
  1799   000EA0  0009               	tblrd		*+
  1800   000EA2  CFF5 FFEE          	movff	tablat,postinc0
  1801   000EA6  50E5               	movf	postdec1,w,c
  1802   000EA8  50E1               	movf	fsr1l,w,c
  1803   000EAA  E1FA               	bnz	copy_data2
  1804                           
  1805                           ; Clear objects allocated to BANK0 (110 bytes)
  1806   000EAC  EE00  F080         	lfsr	0,__pbssBANK0
  1807   000EB0  0E6E               	movlw	110
  1808   000EB2                     clear_0:
  1809   000EB2  6AEE               	clrf	postinc0,c
  1810   000EB4  06E8               	decf	wreg,f,c
  1811   000EB6  E1FD               	bnz	clear_0
  1812                           
  1813                           ; Clear objects allocated to COMRAM (77 bytes)
  1814   000EB8  EE00  F001         	lfsr	0,__pbssCOMRAM
  1815   000EBC  0E4D               	movlw	77
  1816   000EBE                     clear_1:
  1817   000EBE  6AEE               	clrf	postinc0,c
  1818   000EC0  06E8               	decf	wreg,f,c
  1819   000EC2  E1FD               	bnz	clear_1
  1820   000EC4                     end_of_initialization:
  1821                           	callstack 0
  1822   000EC4                     __end_of__initialization:
  1823                           	callstack 0
  1824   000EC4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1825   000EC6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1826   000EC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1827   000ECA  6EF8               	movwf	tblptru,c
  1828   000ECC  0100               	movlb	0
  1829   000ECE  EFFB  F009         	goto	_main	;jump to C main() function
  1830                           
  1831                           	psect	bssCOMRAM
  1832   000001                     __pbssCOMRAM:
  1833                           	callstack 0
  1834   000001                     motor_RFID@UID:
  1835                           	callstack 0
  1836   000001                     	ds	6
  1837   000007                     _Tics:
  1838                           	callstack 0
  1839   000007                     	ds	4
  1840   00000B                     _str_ptr:
  1841                           	callstack 0
  1842   00000B                     	ds	2
  1843   00000D                     	ds	2
  1844   00000F                     motor_Read@timeout_counter:
  1845                           	callstack 0
  1846   00000F                     	ds	2
  1847   000011                     	ds	1
  1848   000012                     	ds	1
  1849   000013                     	ds	1
  1850   000014                     motor_datos@lastChar:
  1851                           	callstack 0
  1852   000014                     	ds	1
  1853   000015                     motor_datos@pointer:
  1854                           	callstack 0
  1855   000015                     	ds	1
  1856   000016                     motor_datos@state:
  1857                           	callstack 0
  1858   000016                     	ds	1
  1859   000017                     _index:
  1860                           	callstack 0
  1861   000017                     	ds	1
  1862   000018                     _new_user:
  1863                           	callstack 0
  1864   000018                     	ds	1
  1865   000019                     _new_configuration:
  1866                           	callstack 0
  1867   000019                     	ds	1
  1868   00001A                     motorTerminal@userNumber:
  1869                           	callstack 0
  1870   00001A                     	ds	1
  1871   00001B                     motorTerminal@index:
  1872                           	callstack 0
  1873   00001B                     	ds	1
  1874   00001C                     motorTerminal@state:
  1875                           	callstack 0
  1876   00001C                     	ds	1
  1877   00001D                     _sending_string:
  1878                           	callstack 0
  1879   00001D                     	ds	1
  1880   00001E                     _hashtag_pressed:
  1881                           	callstack 0
  1882   00001E                     	ds	1
  1883   00001F                     _state_str:
  1884                           	callstack 0
  1885   00001F                     	ds	1
  1886   000020                     _state:
  1887                           	callstack 0
  1888   000020                     	ds	1
  1889   000021                     _tecla:
  1890                           	callstack 0
  1891   000021                     	ds	1
  1892   000022                     _Columnas:
  1893                           	callstack 0
  1894   000022                     	ds	1
  1895   000023                     _Filas:
  1896                           	callstack 0
  1897   000023                     	ds	1
  1898   000024                     motor_RFID@value:
  1899                           	callstack 0
  1900   000024                     	ds	1
  1901   000025                     motor_RFID@addr:
  1902                           	callstack 0
  1903   000025                     	ds	1
  1904   000026                     motor_RFID@operation_pending:
  1905                           	callstack 0
  1906   000026                     	ds	1
  1907   000027                     motor_RFID@backBitsCalc:
  1908                           	callstack 0
  1909   000027                     	ds	1
  1910   000028                     motor_RFID@fifoLevel:
  1911                           	callstack 0
  1912   000028                     	ds	1
  1913   000029                     motor_RFID@lastBitsVal:
  1914                           	callstack 0
  1915   000029                     	ds	1
  1916   00002A                     motor_RFID@tempRegValue:
  1917                           	callstack 0
  1918   00002A                     	ds	1
  1919   00002B                     motor_RFID@allZero:
  1920                           	callstack 0
  1921   00002B                     	ds	1
  1922   00002C                     motor_RFID@checksum:
  1923                           	callstack 0
  1924   00002C                     	ds	1
  1925   00002D                     motor_RFID@TagType:
  1926                           	callstack 0
  1927   00002D                     	ds	1
  1928   00002E                     	ds	1
  1929   00002F                     motor_RFID@i:
  1930                           	callstack 0
  1931   00002F                     	ds	1
  1932   000030                     motor_RFID@n:
  1933                           	callstack 0
  1934   000030                     	ds	1
  1935   000031                     motor_RFID@waitIRq:
  1936                           	callstack 0
  1937   000031                     	ds	1
  1938   000032                     motor_RFID@irqEn:
  1939                           	callstack 0
  1940   000032                     	ds	1
  1941   000033                     motor_RFID@substate:
  1942                           	callstack 0
  1943   000033                     	ds	1
  1944   000034                     motor_RFID@state:
  1945                           	callstack 0
  1946   000034                     	ds	1
  1947   000035                     motor_Read@ucResult:
  1948                           	callstack 0
  1949   000035                     	ds	1
  1950   000036                     _ColumnAct:
  1951                           	callstack 0
  1952   000036                     	ds	1
  1953   000037                     _RowAct:
  1954                           	callstack 0
  1955   000037                     	ds	1
  1956   000038                     _Columns:
  1957                           	callstack 0
  1958   000038                     	ds	1
  1959   000039                     _Rows:
  1960                           	callstack 0
  1961   000039                     	ds	1
  1962   00003A                     _currentUser:
  1963                           	callstack 0
  1964   00003A                     	ds	5
  1965   00003F                     motorTerminal@currentUser:
  1966                           	callstack 0
  1967   00003F                     	ds	5
  1968   000044                     _timer@TAD_TECLADO$F720:
  1969                           	callstack 0
  1970   000044                     	ds	1
  1971   000045                     motor_Read@ucAddr:
  1972                           	callstack 0
  1973   000045                     	ds	1
  1974   000046                     motor_Read@bit_count:
  1975                           	callstack 0
  1976   000046                     	ds	1
  1977   000047                     motor_Write@ucValue:
  1978                           	callstack 0
  1979   000047                     	ds	1
  1980   000048                     motor_Write@ucAddr:
  1981                           	callstack 0
  1982   000048                     	ds	1
  1983   000049                     motor_Write@bit_count:
  1984                           	callstack 0
  1985   000049                     	ds	1
  1986   00004A                     _state_write:
  1987                           	callstack 0
  1988   00004A                     	ds	1
  1989   00004B                     _state_read:
  1990                           	callstack 0
  1991   00004B                     	ds	1
  1992   00004C                     _timer:
  1993                           	callstack 0
  1994   00004C                     	ds	1
  1995   00004D                     _Timer:
  1996                           	callstack 0
  1997   00004D                     	ds	1
  1998                           
  1999                           	psect	dataCOMRAM
  2000   000078                     __pdataCOMRAM:
  2001                           	callstack 0
  2002   000078                     	ds	2
  2003   00007A                     motorTerminal@hour:
  2004                           	callstack 0
  2005   00007A                     	ds	4
  2006                           
  2007                           	psect	bssBANK0
  2008   000080                     __pbssBANK0:
  2009                           	callstack 0
  2010   000080                     _configurations:
  2011                           	callstack 0
  2012   000080                     	ds	24
  2013   000098                     _Timers:
  2014                           	callstack 0
  2015   000098                     	ds	20
  2016   0000AC                     	ds	6
  2017   0000B2                     	ds	4
  2018   0000B6                     printfUID@buffer:
  2019                           	callstack 0
  2020   0000B6                     	ds	50
  2021   0000E8                     _ActualLeds:
  2022                           	callstack 0
  2023   0000E8                     	ds	6
  2024                           
  2025                           	psect	dataBANK0
  2026   0000EE                     __pdataBANK0:
  2027                           	callstack 0
  2028   0000EE                     controlLED@ledBits:
  2029                           	callstack 0
  2030   0000EE                     	ds	6
  2031   0000F4                     _currentTime:
  2032                           	callstack 0
  2033   0000F4                     	ds	4
  2034   0000F8                     	ds	3
  2035                           
  2036                           	psect	dataBANK1
  2037   000100                     __pdataBANK1:
  2038                           	callstack 0
  2039   000100                     _userUIDs:
  2040                           	callstack 0
  2041   000100                     	ds	64
  2042                           
  2043                           	psect	cstackCOMRAM
  2044   00004E                     __pcstackCOMRAM:
  2045                           	callstack 0
  2046   00004E                     ??_LowRSI:
  2047                           
  2048                           ; 1 bytes @ 0x0
  2049   00004E                     	ds	1
  2050   00004F                     ?_Terminal_TXAvailable:
  2051                           	callstack 0
  2052   00004F                     ?_TI_GetTics:
  2053                           	callstack 0
  2054   00004F                     delay_us@howMany:
  2055                           	callstack 0
  2056   00004F                     initData@i:
  2057                           	callstack 0
  2058   00004F                     getActualUID@UID:
  2059                           	callstack 0
  2060   00004F                     getActualLeds@leds:
  2061                           	callstack 0
  2062   00004F                     saveHourToData@hour:
  2063                           	callstack 0
  2064   00004F                     TI_Init@counter:
  2065                           	callstack 0
  2066   00004F                     TI_NewTimer@TimerHandle:
  2067                           	callstack 0
  2068   00004F                     TI_ResetTics@TimerHandle:
  2069                           	callstack 0
  2070   00004F                     ??_EscriuPrimeraOrdre:
  2071   00004F                     ??_CantaPartAlta:
  2072   00004F                     ??_CantaPartBaixa:
  2073   00004F                     ??_checkUserUID:
  2074                           
  2075                           ; 1 bytes @ 0x1
  2076   00004F                     	ds	1
  2077   000050                     CantaPartAlta@c:
  2078                           	callstack 0
  2079   000050                     CantaPartBaixa@c:
  2080                           	callstack 0
  2081   000050                     EscriuPrimeraOrdre@ordre:
  2082                           	callstack 0
  2083   000050                     delay_us@x:
  2084                           	callstack 0
  2085   000050                     initData@j:
  2086                           	callstack 0
  2087   000050                     getActualUID@userIndex:
  2088                           	callstack 0
  2089   000050                     getActualLeds@userIndex:
  2090                           	callstack 0
  2091   000050                     saveHourToData@i:
  2092                           	callstack 0
  2093   000050                     
  2094                           ; 1 bytes @ 0x2
  2095   000050                     	ds	1
  2096   000051                     CantaIR@IR:
  2097                           	callstack 0
  2098   000051                     CantaData@Data:
  2099                           	callstack 0
  2100   000051                     processBit@val:
  2101                           	callstack 0
  2102   000051                     initData@i_853:
  2103                           	callstack 0
  2104   000051                     getActualLeds@i:
  2105                           	callstack 0
  2106   000051                     TI_NewTimer@Comptador:
  2107                           	callstack 0
  2108   000051                     ??_getActualUID:
  2109   000051                     ??_Terminal_TXAvailable:
  2110                           
  2111                           ; 1 bytes @ 0x3
  2112   000051                     	ds	1
  2113   000052                     processBit@bit_count:
  2114                           	callstack 0
  2115   000052                     Terminal_SendChar@c:
  2116                           	callstack 0
  2117   000052                     motor_SendChar@c:
  2118                           	callstack 0
  2119   000052                     getActualLeds@i_865:
  2120                           	callstack 0
  2121   000052                     
  2122                           ; 1 bytes @ 0x4
  2123   000052                     	ds	1
  2124   000053                     processBit@state:
  2125                           	callstack 0
  2126   000053                     getActualUID@i_859:
  2127                           	callstack 0
  2128   000053                     checkUserUID@match:
  2129                           	callstack 0
  2130   000053                     motor_StartSendString@str:
  2131                           	callstack 0
  2132   000053                     ??_TI_GetTics:
  2133   000053                     
  2134                           ; 1 bytes @ 0x5
  2135   000053                     	ds	1
  2136   000054                     processBit@next_state:
  2137                           	callstack 0
  2138   000054                     getActualUID@i:
  2139                           	callstack 0
  2140   000054                     checkUserUID@i:
  2141                           	callstack 0
  2142                           
  2143                           ; 1 bytes @ 0x6
  2144   000054                     	ds	1
  2145   000055                     printfUID@currentUser:
  2146                           	callstack 0
  2147   000055                     getActualUID@i_860:
  2148                           	callstack 0
  2149   000055                     checkUserUID@j:
  2150                           	callstack 0
  2151   000055                     ??_processBit:
  2152   000055                     
  2153                           ; 1 bytes @ 0x7
  2154   000055                     	ds	1
  2155   000056                     motor_Write@value:
  2156                           	callstack 0
  2157   000056                     printfUID@userIndex:
  2158                           	callstack 0
  2159   000056                     ??_motor_Read:
  2160                           
  2161                           ; 1 bytes @ 0x8
  2162   000056                     	ds	1
  2163   000057                     motor_Write@addr:
  2164                           	callstack 0
  2165   000057                     motor_Read@addr:
  2166                           	callstack 0
  2167   000057                     TI_GetTics@CopiaTicsActual:
  2168                           	callstack 0
  2169   000057                     ??_printfUID:
  2170                           
  2171                           ; 1 bytes @ 0x9
  2172   000057                     	ds	1
  2173   000058                     _motor_Read$666:
  2174                           	callstack 0
  2175                           
  2176                           ; 2 bytes @ 0xA
  2177   000058                     	ds	1
  2178   000059                     printfUID@leds:
  2179                           	callstack 0
  2180                           
  2181                           ; 6 bytes @ 0xB
  2182   000059                     	ds	1
  2183   00005A                     initRFID@regVal:
  2184                           	callstack 0
  2185   00005A                     
  2186                           ; 1 bytes @ 0xC
  2187   00005A                     	ds	1
  2188   00005B                     TI_GetTics@TimerHandle:
  2189                           	callstack 0
  2190                           
  2191                           ; 1 bytes @ 0xD
  2192   00005B                     	ds	1
  2193   00005C                     Espera@Timer:
  2194                           	callstack 0
  2195                           
  2196                           ; 2 bytes @ 0xE
  2197   00005C                     	ds	2
  2198   00005E                     Espera@ms:
  2199                           	callstack 0
  2200                           
  2201                           ; 2 bytes @ 0x10
  2202   00005E                     	ds	1
  2203   00005F                     printfUID@val:
  2204                           	callstack 0
  2205                           
  2206                           ; 1 bytes @ 0x11
  2207   00005F                     	ds	1
  2208   000060                     printfUID@i:
  2209                           	callstack 0
  2210   000060                     ??_Espera:
  2211                           
  2212                           ; 1 bytes @ 0x12
  2213   000060                     	ds	1
  2214   000061                     printfUID@ptr:
  2215                           	callstack 0
  2216                           
  2217                           ; 1 bytes @ 0x13
  2218   000061                     	ds	1
  2219   000062                     setCurrentUser@UID1:
  2220                           	callstack 0
  2221   000062                     motorTerminal@buffer:
  2222                           	callstack 0
  2223   000062                     
  2224                           ; 1 bytes @ 0x14
  2225   000062                     	ds	1
  2226   000063                     setCurrentUser@UID2:
  2227                           	callstack 0
  2228                           
  2229                           ; 1 bytes @ 0x15
  2230   000063                     	ds	1
  2231   000064                     LcInit@columns:
  2232                           	callstack 0
  2233   000064                     LcGotoXY@Row:
  2234                           	callstack 0
  2235   000064                     setCurrentUser@UID3:
  2236                           	callstack 0
  2237   000064                     
  2238                           ; 1 bytes @ 0x16
  2239   000064                     	ds	1
  2240   000065                     LcInit@rows:
  2241                           	callstack 0
  2242   000065                     setCurrentUser@UID4:
  2243                           	callstack 0
  2244   000065                     ??_LcGotoXY:
  2245                           
  2246                           ; 1 bytes @ 0x17
  2247   000065                     	ds	1
  2248   000066                     setCurrentUser@UID0:
  2249                           	callstack 0
  2250   000066                     LcInit@i:
  2251                           	callstack 0
  2252   000066                     
  2253                           ; 1 bytes @ 0x18
  2254   000066                     	ds	1
  2255   000067                     _LcGotoXY$396:
  2256                           	callstack 0
  2257   000067                     ??_motor_RFID:
  2258                           
  2259                           ; 1 bytes @ 0x19
  2260   000067                     	ds	2
  2261   000069                     LcGotoXY@Fisics:
  2262                           	callstack 0
  2263   000069                     motor_RFID@currentUser:
  2264                           	callstack 0
  2265                           
  2266                           ; 5 bytes @ 0x1B
  2267   000069                     	ds	2
  2268   00006B                     LcGotoXY@Column:
  2269                           	callstack 0
  2270                           
  2271                           ; 1 bytes @ 0x1D
  2272   00006B                     	ds	1
  2273   00006C                     LcPutChar@c:
  2274                           	callstack 0
  2275   00006C                     
  2276                           ; 1 bytes @ 0x1E
  2277   00006C                     	ds	1
  2278   00006D                     _motor_datos$885:
  2279                           	callstack 0
  2280   00006D                     
  2281                           ; 1 bytes @ 0x1F
  2282   00006D                     	ds	1
  2283   00006E                     motor_RFID@differentUID:
  2284                           	callstack 0
  2285                           
  2286                           ; 1 bytes @ 0x20
  2287   00006E                     	ds	1
  2288   00006F                     motor_datos@i:
  2289                           	callstack 0
  2290   00006F                     _motor_RFID$700:
  2291                           	callstack 0
  2292                           
  2293                           ; 2 bytes @ 0x21
  2294   00006F                     	ds	2
  2295   000071                     motor_RFID@flag:
  2296                           	callstack 0
  2297                           
  2298                           ; 1 bytes @ 0x23
  2299   000071                     	ds	5
  2300   000076                     motorTerminal@opcion:
  2301                           	callstack 0
  2302                           
  2303                           ; 1 bytes @ 0x28
  2304   000076                     	ds	1
  2305   000077                     motorTerminal@ptr:
  2306                           	callstack 0
  2307                           
  2308                           ; 1 bytes @ 0x29
  2309   000077                     	ds	1
  2310   000078                     
  2311                           ; 1 bytes @ 0x2A
  2312 ;;
  2313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2314 ;;
  2315 ;; *************** function _main *****************
  2316 ;; Defined at:
  2317 ;;		line 39 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1
  2331 ;;      Params:         0       0       0
  2332 ;;      Locals:         0       0       0
  2333 ;;      Temps:          0       0       0
  2334 ;;      Totals:         0       0       0
  2335 ;;Total ram usage:        0 bytes
  2336 ;; Hardware stack levels required when called: 10
  2337 ;; This function calls:
  2338 ;;		_LcInit
  2339 ;;		_TI_Init
  2340 ;;		_Terminal_Init
  2341 ;;		_initData
  2342 ;;		_initLeds
  2343 ;;		_initPorts
  2344 ;;		_initRFID
  2345 ;;		_initTeclado
  2346 ;;		_motorTerminal
  2347 ;;		_motor_RFID
  2348 ;;		_motor_datos
  2349 ;; This function is called by:
  2350 ;;		Startup code after reset
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text0
  2355   0013F6                     __ptext0:
  2356                           	callstack 0
  2357   0013F6                     _main:
  2358                           	callstack 21
  2359                           
  2360                           ;main.c: 40:  ADCON1 = 0x0F;
  2361                           
  2362                           ;incstack = 0
  2363   0013F6  EC7B  F00A         	call	_TI_Init	;wreg free
  2364                           
  2365                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2366   0013FA  ECCE  F00A         	call	_initTeclado	;wreg free
  2367                           
  2368                           ;main.c: 42: }
  2369   0013FE  EC75  F006         	call	_initRFID	;wreg free
  2370                           
  2371                           ;main.c: 43: 
  2372   001402  EC10  F00B         	call	_Terminal_Init	;wreg free
  2373                           
  2374                           ;main.c: 44: 
  2375   001406  EC31  F00B         	call	_initPorts	;wreg free
  2376                           
  2377                           ;main.c: 45: 
  2378   00140A  EC18  F00B         	call	_initLeds	;wreg free
  2379                           
  2380                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2381   00140E  0E10               	movlw	16
  2382   001410  6E64               	movwf	LcInit@columns^0,c
  2383   001412  0E02               	movlw	2
  2384   001414  EC31  F005         	call	_LcInit
  2385                           
  2386                           ;main.c: 47: 
  2387   001418  ECBF  F009         	call	_initData	;wreg free
  2388   00141C  8EF2               	bsf	242,7,c	;volatile
  2389   00141E  9CF2               	bcf	242,6,c	;volatile
  2390   001420                     l4159:
  2391   001420  ECED  F002         	call	_motorTerminal	;wreg free
  2392   001424  EC15  F000         	call	_motor_RFID	;wreg free
  2393   001428  EC0F  F006         	call	_motor_datos	;wreg free
  2394   00142C  748D               	btg	141,2,c	;volatile
  2395   00142E  D7F8               	goto	l4159
  2396   001430                     __end_of_main:
  2397                           	callstack 0
  2398                           
  2399 ;; *************** function _motor_datos *****************
  2400 ;; Defined at:
  2401 ;;		line 111 in file "TAD_DATOS.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  i               1   33[COMRAM] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1
  2415 ;;      Params:         0       0       0
  2416 ;;      Locals:         3       0       0
  2417 ;;      Temps:          0       0       0
  2418 ;;      Totals:         3       0       0
  2419 ;;Total ram usage:        3 bytes
  2420 ;; Hardware stack levels used: 1
  2421 ;; Hardware stack levels required when called: 8
  2422 ;; This function calls:
  2423 ;;		_LcPutChar
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text1
  2430   000C1E                     __ptext1:
  2431                           	callstack 0
  2432   000C1E                     _motor_datos:
  2433                           	callstack 22
  2434                           
  2435                           ;TAD_DATOS.c: 112:     static char state = 0;;TAD_DATOS.c: 113:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 114:     static unsigned char lastChar;;TAD_DATOS.c: 116:     switch(s
      +                          tate) {
  2436                           
  2437                           ;incstack = 0
  2438   000C1E  D057               	goto	l4133
  2439   000C20                     l4087:
  2440                           
  2441                           ;TAD_DATOS.c: 118:             if(new_configuration || new_user) {
  2442   000C20  5019               	movf	_new_configuration^0,w,c
  2443   000C22  A4D8               	btfss	status,2,c
  2444   000C24  D003               	goto	u3100
  2445   000C26  5018               	movf	_new_user^0,w,c
  2446   000C28  B4D8               	btfsc	status,2,c
  2447   000C2A  0012               	return	
  2448   000C2C                     u3100:
  2449                           
  2450                           ;TAD_DATOS.c: 119:                 new_configuration = new_user = 0;
  2451   000C2C  6A18               	clrf	_new_user^0,c
  2452   000C2E  6A19               	clrf	_new_configuration^0,c
  2453                           
  2454                           ;TAD_DATOS.c: 120:                 state = 1;
  2455   000C30  0E01               	movlw	1
  2456   000C32  6E16               	movwf	motor_datos@state^0,c
  2457   000C34  0012               	return	
  2458   000C36                     l777:
  2459                           
  2460                           ;TAD_DATOS.c: 125:             lastChar = currentUser[4];
  2461   000C36  C03E  F014         	movff	_currentUser+4,motor_datos@lastChar
  2462                           
  2463                           ;TAD_DATOS.c: 126:             LcPutChar((lastChar < 10) ? ('0' + lastChar) : ('A' + (la
      +                          stChar - 10)));
  2464   000C3A  0E09               	movlw	9
  2465   000C3C  6414               	cpfsgt	motor_datos@lastChar^0,c
  2466   000C3E  D002               	goto	l4097
  2467   000C40  0E37               	movlw	55
  2468   000C42  D001               	goto	L1
  2469   000C44                     l4097:
  2470   000C44  0E30               	movlw	48
  2471   000C46                     L1:
  2472   000C46  2414               	addwf	motor_datos@lastChar^0,w,c
  2473   000C48  6E6D               	movwf	_motor_datos$885^0,c
  2474   000C4A  6A6E               	clrf	(_motor_datos$885+1)^0,c
  2475   000C4C  0E00               	movlw	0
  2476   000C4E  226E               	addwfc	(_motor_datos$885+1)^0,f,c
  2477   000C50  506D               	movf	_motor_datos$885^0,w,c
  2478   000C52  ECE2  F007         	call	_LcPutChar
  2479                           
  2480                           ;TAD_DATOS.c: 127:             LcPutChar(' ');
  2481   000C56  0E20               	movlw	32
  2482   000C58  ECE2  F007         	call	_LcPutChar
  2483                           
  2484                           ;TAD_DATOS.c: 128:             state = 2;
  2485   000C5C  0E02               	movlw	2
  2486   000C5E  6E16               	movwf	motor_datos@state^0,c
  2487                           
  2488                           ;TAD_DATOS.c: 129:             break;
  2489   000C60  0012               	return	
  2490   000C62                     l782:
  2491                           
  2492                           ;TAD_DATOS.c: 132:             for(char i = 0; i < 4; i++) {
  2493   000C62  6A6F               	clrf	motor_datos@i^0,c
  2494   000C64                     l4109:
  2495                           
  2496                           ;TAD_DATOS.c: 133:                 LcPutChar(currentTime[i]);
  2497   000C64  506F               	movf	motor_datos@i^0,w,c
  2498   000C66  0FF4               	addlw	low _currentTime
  2499   000C68  6ED9               	movwf	fsr2l,c
  2500   000C6A  6ADA               	clrf	fsr2h,c
  2501   000C6C  50DF               	movf	indf2,w,c
  2502   000C6E  ECE2  F007         	call	_LcPutChar
  2503                           
  2504                           ;TAD_DATOS.c: 134:                 if(i == 1) LcPutChar(':');
  2505   000C72  046F               	decf	motor_datos@i^0,w,c
  2506   000C74  A4D8               	btfss	status,2,c
  2507   000C76  D003               	goto	l4115
  2508   000C78  0E3A               	movlw	58
  2509   000C7A  ECE2  F007         	call	_LcPutChar
  2510   000C7E                     l4115:
  2511                           
  2512                           ;TAD_DATOS.c: 135:             }
  2513   000C7E  2A6F               	incf	motor_datos@i^0,f,c
  2514   000C80  0E03               	movlw	3
  2515   000C82  646F               	cpfsgt	motor_datos@i^0,c
  2516   000C84  D7EF               	goto	l4109
  2517                           
  2518                           ;TAD_DATOS.c: 136:             LcPutChar(' ');
  2519   000C86  0E20               	movlw	32
  2520   000C88  ECE2  F007         	call	_LcPutChar
  2521                           
  2522                           ;TAD_DATOS.c: 137:             pointer = 0;
  2523   000C8C  6A15               	clrf	motor_datos@pointer^0,c
  2524                           
  2525                           ;TAD_DATOS.c: 138:             state = 3;
  2526   000C8E  0E03               	movlw	3
  2527   000C90  6E16               	movwf	motor_datos@state^0,c
  2528                           
  2529                           ;TAD_DATOS.c: 139:             break;
  2530   000C92  0012               	return	
  2531   000C94                     l4125:
  2532                           
  2533                           ;TAD_DATOS.c: 142:             if(pointer < 6) {
  2534   000C94  0E06               	movlw	6
  2535   000C96  6015               	cpfslt	motor_datos@pointer^0,c
  2536   000C98  D017               	goto	l787
  2537                           
  2538                           ;TAD_DATOS.c: 143:                 LcPutChar('1' + pointer);
  2539   000C9A  5015               	movf	motor_datos@pointer^0,w,c
  2540   000C9C  0F31               	addlw	49
  2541   000C9E  ECE2  F007         	call	_LcPutChar
  2542                           
  2543                           ;TAD_DATOS.c: 144:                 LcPutChar('-');
  2544   000CA2  0E2D               	movlw	45
  2545   000CA4  ECE2  F007         	call	_LcPutChar
  2546                           
  2547                           ;TAD_DATOS.c: 145:                 LcPutChar('0' + configurations[index][pointer]);
  2548   000CA8  5017               	movf	_index^0,w,c
  2549   000CAA  0D06               	mullw	6
  2550   000CAC  50F3               	movf	243,w,c
  2551   000CAE  0F80               	addlw	low _configurations
  2552   000CB0  2415               	addwf	motor_datos@pointer^0,w,c
  2553   000CB2  6ED9               	movwf	fsr2l,c
  2554   000CB4  6ADA               	clrf	fsr2h,c
  2555   000CB6  50DF               	movf	indf2,w,c
  2556   000CB8  0F30               	addlw	48
  2557   000CBA  ECE2  F007         	call	_LcPutChar
  2558                           
  2559                           ;TAD_DATOS.c: 146:                 LcPutChar(' ');
  2560   000CBE  0E20               	movlw	32
  2561   000CC0  ECE2  F007         	call	_LcPutChar
  2562                           
  2563                           ;TAD_DATOS.c: 147:                 pointer++;
  2564   000CC4  2A15               	incf	motor_datos@pointer^0,f,c
  2565                           
  2566                           ;TAD_DATOS.c: 148:             } else {
  2567   000CC6  0012               	return	
  2568   000CC8                     l787:
  2569                           
  2570                           ;TAD_DATOS.c: 149:                 pointer = 0;
  2571   000CC8  6A15               	clrf	motor_datos@pointer^0,c
  2572                           
  2573                           ;TAD_DATOS.c: 150:                 state = 0;
  2574   000CCA  6A16               	clrf	motor_datos@state^0,c
  2575   000CCC  0012               	return	
  2576   000CCE                     l4133:
  2577   000CCE  5016               	movf	motor_datos@state^0,w,c
  2578                           
  2579                           ; Switch size 1, requested type "simple"
  2580                           ; Number of cases is 4, Range of values is 0 to 3
  2581                           ; switch strategies available:
  2582                           ; Name         Instructions Cycles
  2583                           ; simple_byte           13     7 (average)
  2584                           ;	Chosen strategy is simple_byte
  2585   000CD0  0A00               	xorlw	0	; case 0
  2586   000CD2  B4D8               	btfsc	status,2,c
  2587   000CD4  D7A5               	goto	l4087
  2588   000CD6  0A01               	xorlw	1	; case 1
  2589   000CD8  B4D8               	btfsc	status,2,c
  2590   000CDA  D7AD               	goto	l777
  2591   000CDC  0A03               	xorlw	3	; case 2
  2592   000CDE  B4D8               	btfsc	status,2,c
  2593   000CE0  D7C0               	goto	l782
  2594   000CE2  0A01               	xorlw	1	; case 3
  2595   000CE4  A4D8               	btfss	status,2,c
  2596   000CE6  0012               	return	
  2597   000CE8  D7D5               	goto	l4125
  2598   000CEA                     __end_of_motor_datos:
  2599                           	callstack 0
  2600                           
  2601 ;; *************** function _LcPutChar *****************
  2602 ;; Defined at:
  2603 ;;		line 156 in file "TAD_DISPLAY.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  c               1    wreg     unsigned char 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  c               1   30[COMRAM] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1
  2617 ;;      Params:         0       0       0
  2618 ;;      Locals:         1       0       0
  2619 ;;      Temps:          0       0       0
  2620 ;;      Totals:         1       0       0
  2621 ;;Total ram usage:        1 bytes
  2622 ;; Hardware stack levels used: 1
  2623 ;; Hardware stack levels required when called: 7
  2624 ;; This function calls:
  2625 ;;		_CantaData
  2626 ;;		_LcGotoXY
  2627 ;;		_WaitForBusy
  2628 ;; This function is called by:
  2629 ;;		_motor_datos
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text2
  2634   000FC4                     __ptext2:
  2635                           	callstack 0
  2636   000FC4                     _LcPutChar:
  2637                           	callstack 22
  2638                           
  2639                           ;incstack = 0
  2640                           ;LcPutChar@c stored from wreg
  2641   000FC4  6E6C               	movwf	LcPutChar@c^0,c
  2642                           
  2643                           ;TAD_DISPLAY.c: 166:  WaitForBusy(); CantaData(c);
  2644   000FC6  EC06  F00B         	call	_WaitForBusy	;wreg free
  2645   000FCA  506C               	movf	LcPutChar@c^0,w,c
  2646   000FCC  EC32  F00A         	call	_CantaData
  2647                           
  2648                           ;TAD_DISPLAY.c: 168:  ++ColumnAct;
  2649   000FD0  2A36               	incf	_ColumnAct^0,f,c
  2650                           
  2651                           ;TAD_DISPLAY.c: 169:  if (Rows == 3) {
  2652   000FD2  0E03               	movlw	3
  2653   000FD4  1839               	xorwf	_Rows^0,w,c
  2654   000FD6  A4D8               	btfss	status,2,c
  2655   000FD8  D00F               	goto	l3239
  2656                           
  2657                           ;TAD_DISPLAY.c: 170:   if (ColumnAct >= 20) {
  2658   000FDA  0E13               	movlw	19
  2659   000FDC  6436               	cpfsgt	_ColumnAct^0,c
  2660   000FDE  0012               	return	
  2661                           
  2662                           ;TAD_DISPLAY.c: 171:    ColumnAct = 0;
  2663   000FE0  6A36               	clrf	_ColumnAct^0,c
  2664                           
  2665                           ;TAD_DISPLAY.c: 172:    if (++RowAct >= 4) RowAct = 0;
  2666   000FE2  2A37               	incf	_RowAct^0,f,c
  2667   000FE4  0E03               	movlw	3
  2668   000FE6  6437               	cpfsgt	_RowAct^0,c
  2669   000FE8  D001               	goto	l3237
  2670   000FEA  6A37               	clrf	_RowAct^0,c
  2671   000FEC                     l3237:
  2672                           
  2673                           ;TAD_DISPLAY.c: 173:    LcGotoXY(ColumnAct, RowAct);
  2674   000FEC  C037  F064         	movff	_RowAct,LcGotoXY@Row
  2675   000FF0  5036               	movf	_ColumnAct^0,w,c
  2676   000FF2  ECD8  F006         	call	_LcGotoXY
  2677   000FF6  0012               	return	
  2678   000FF8                     l3239:
  2679                           
  2680                           ;TAD_DISPLAY.c: 176:  if (Rows == 2) {
  2681   000FF8  0E02               	movlw	2
  2682   000FFA  1839               	xorwf	_Rows^0,w,c
  2683   000FFC  A4D8               	btfss	status,2,c
  2684   000FFE  D00F               	goto	l3251
  2685                           
  2686                           ;TAD_DISPLAY.c: 177:   if (ColumnAct >= 40) {
  2687   001000  0E27               	movlw	39
  2688   001002  6436               	cpfsgt	_ColumnAct^0,c
  2689   001004  0012               	return	
  2690                           
  2691                           ;TAD_DISPLAY.c: 178:    ColumnAct = 0;
  2692   001006  6A36               	clrf	_ColumnAct^0,c
  2693                           
  2694                           ;TAD_DISPLAY.c: 179:    if (++RowAct >= 2) RowAct = 0;
  2695   001008  2A37               	incf	_RowAct^0,f,c
  2696   00100A  0E01               	movlw	1
  2697   00100C  6437               	cpfsgt	_RowAct^0,c
  2698   00100E  D001               	goto	l3249
  2699   001010  6A37               	clrf	_RowAct^0,c
  2700   001012                     l3249:
  2701                           
  2702                           ;TAD_DISPLAY.c: 180:    LcGotoXY(ColumnAct, RowAct);
  2703   001012  C037  F064         	movff	_RowAct,LcGotoXY@Row
  2704   001016  5036               	movf	_ColumnAct^0,w,c
  2705   001018  ECD8  F006         	call	_LcGotoXY
  2706   00101C  0012               	return	
  2707   00101E                     l3251:
  2708                           
  2709                           ;TAD_DISPLAY.c: 183:  if (RowAct == 1) {
  2710   00101E  0437               	decf	_RowAct^0,w,c
  2711   001020  A4D8               	btfss	status,2,c
  2712   001022  0012               	return	
  2713                           
  2714                           ;TAD_DISPLAY.c: 184:   if (ColumnAct >= 40) ColumnAct = 0;
  2715   001024  0E27               	movlw	39
  2716   001026  6436               	cpfsgt	_ColumnAct^0,c
  2717   001028  D001               	goto	l3257
  2718   00102A  6A36               	clrf	_ColumnAct^0,c
  2719   00102C                     l3257:
  2720                           
  2721                           ;TAD_DISPLAY.c: 185:   LcGotoXY(ColumnAct, RowAct);
  2722   00102C  C037  F064         	movff	_RowAct,LcGotoXY@Row
  2723   001030  5036               	movf	_ColumnAct^0,w,c
  2724   001032  ECD8  F006         	call	_LcGotoXY
  2725   001036  0012               	return		;funcret
  2726   001038                     __end_of_LcPutChar:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _LcGotoXY *****************
  2730 ;; Defined at:
  2731 ;;		line 129 in file "TAD_DISPLAY.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  Column          1    wreg     unsigned char 
  2734 ;;  Row             1   22[COMRAM] unsigned char 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  Column          1   29[COMRAM] unsigned char 
  2737 ;;  Fisics          2   27[COMRAM] int 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1
  2747 ;;      Params:         1       0       0
  2748 ;;      Locals:         5       0       0
  2749 ;;      Temps:          2       0       0
  2750 ;;      Totals:         8       0       0
  2751 ;;Total ram usage:        8 bytes
  2752 ;; Hardware stack levels used: 1
  2753 ;; Hardware stack levels required when called: 6
  2754 ;; This function calls:
  2755 ;;		_CantaIR
  2756 ;;		_WaitForBusy
  2757 ;; This function is called by:
  2758 ;;		_LcPutChar
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text3
  2763   000DB0                     __ptext3:
  2764                           	callstack 0
  2765   000DB0                     _LcGotoXY:
  2766                           	callstack 22
  2767                           
  2768                           ;incstack = 0
  2769                           ;LcGotoXY@Column stored from wreg
  2770   000DB0  6E6B               	movwf	LcGotoXY@Column^0,c
  2771                           
  2772                           ;TAD_DISPLAY.c: 133:  int Fisics;;TAD_DISPLAY.c: 135:  switch (Rows) {
  2773   000DB2  D036               	goto	l3001
  2774   000DB4                     l2979:
  2775                           
  2776                           ;TAD_DISPLAY.c: 137:    Fisics = Column + (!Row ? 0 : 0x40); break;
  2777   000DB4  5064               	movf	LcGotoXY@Row^0,w,c
  2778   000DB6  B4D8               	btfsc	status,2,c
  2779   000DB8  D004               	goto	l2983
  2780   000DBA  0E00               	movlw	0
  2781   000DBC  6E68               	movwf	(_LcGotoXY$396+1)^0,c
  2782   000DBE  0E40               	movlw	64
  2783   000DC0  D003               	goto	L2
  2784   000DC2                     l2983:
  2785   000DC2  0E00               	movlw	0
  2786   000DC4  6E68               	movwf	(_LcGotoXY$396+1)^0,c
  2787   000DC6  0E00               	movlw	0
  2788   000DC8                     L2:
  2789   000DC8  6E67               	movwf	_LcGotoXY$396^0,c
  2790   000DCA  506B               	movf	LcGotoXY@Column^0,w,c
  2791   000DCC  2467               	addwf	_LcGotoXY$396^0,w,c
  2792   000DCE  6E69               	movwf	LcGotoXY@Fisics^0,c
  2793   000DD0  0E00               	movlw	0
  2794   000DD2  2068               	addwfc	(_LcGotoXY$396+1)^0,w,c
  2795   000DD4  6E6A               	movwf	(LcGotoXY@Fisics+1)^0,c
  2796   000DD6  D02F               	goto	l3003
  2797   000DD8                     l117:
  2798                           
  2799                           ;TAD_DISPLAY.c: 139:    Fisics = Column;
  2800   000DD8  C06B  F069         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2801   000DDC  6A6A               	clrf	(LcGotoXY@Fisics+1)^0,c
  2802                           
  2803                           ;TAD_DISPLAY.c: 140:    if (Row == 1) Fisics += 0x40; else
  2804   000DDE  0464               	decf	LcGotoXY@Row^0,w,c
  2805   000DE0  A4D8               	btfss	status,2,c
  2806   000DE2  D002               	goto	l2991
  2807   000DE4  0E40               	movlw	64
  2808   000DE6  D005               	goto	L3
  2809   000DE8                     l2991:
  2810                           
  2811                           ;TAD_DISPLAY.c: 141:    if (Row == 2) Fisics += Columns; else
  2812   000DE8  0E02               	movlw	2
  2813   000DEA  1864               	xorwf	LcGotoXY@Row^0,w,c
  2814   000DEC  A4D8               	btfss	status,2,c
  2815   000DEE  D004               	goto	l2995
  2816   000DF0  5038               	movf	_Columns^0,w,c
  2817   000DF2                     L3:
  2818   000DF2  2669               	addwf	LcGotoXY@Fisics^0,f,c
  2819   000DF4  0E00               	movlw	0
  2820   000DF6  D00E               	goto	L4
  2821   000DF8                     l2995:
  2822                           
  2823                           ;TAD_DISPLAY.c: 142:    if (Row == 3) Fisics += 0x40+Columns;
  2824   000DF8  0E03               	movlw	3
  2825   000DFA  1864               	xorwf	LcGotoXY@Row^0,w,c
  2826   000DFC  A4D8               	btfss	status,2,c
  2827   000DFE  D01B               	goto	l3003
  2828   000E00  5038               	movf	_Columns^0,w,c
  2829   000E02  6E65               	movwf	??_LcGotoXY^0,c
  2830   000E04  6A66               	clrf	(??_LcGotoXY+1)^0,c
  2831   000E06  0E40               	movlw	64
  2832   000E08  2665               	addwf	??_LcGotoXY^0,f,c
  2833   000E0A  0E00               	movlw	0
  2834   000E0C  2266               	addwfc	(??_LcGotoXY+1)^0,f,c
  2835   000E0E  5065               	movf	??_LcGotoXY^0,w,c
  2836   000E10  2669               	addwf	LcGotoXY@Fisics^0,f,c
  2837   000E12  5066               	movf	(??_LcGotoXY+1)^0,w,c
  2838   000E14                     L4:
  2839   000E14  226A               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2840                           
  2841                           ;TAD_DISPLAY.c: 143:    break;
  2842   000E16  D00F               	goto	l3003
  2843   000E18                     l124:
  2844                           
  2845                           ;TAD_DISPLAY.c: 146:    Fisics = Column; break;
  2846   000E18  C06B  F069         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2847   000E1C  6A6A               	clrf	(LcGotoXY@Fisics+1)^0,c
  2848   000E1E  D00B               	goto	l3003
  2849   000E20                     l3001:
  2850   000E20  5039               	movf	_Rows^0,w,c
  2851                           
  2852                           ; Switch size 1, requested type "simple"
  2853                           ; Number of cases is 3, Range of values is 1 to 4
  2854                           ; switch strategies available:
  2855                           ; Name         Instructions Cycles
  2856                           ; simple_byte           10     6 (average)
  2857                           ;	Chosen strategy is simple_byte
  2858   000E22  0A01               	xorlw	1	; case 1
  2859   000E24  B4D8               	btfsc	status,2,c
  2860   000E26  D7F8               	goto	l124
  2861   000E28  0A03               	xorlw	3	; case 2
  2862   000E2A  B4D8               	btfsc	status,2,c
  2863   000E2C  D7C3               	goto	l2979
  2864   000E2E  0A06               	xorlw	6	; case 4
  2865   000E30  B4D8               	btfsc	status,2,c
  2866   000E32  D7D2               	goto	l117
  2867   000E34  D7F1               	goto	l124
  2868   000E36                     l3003:
  2869                           
  2870                           ;TAD_DISPLAY.c: 149:  WaitForBusy();
  2871   000E36  EC06  F00B         	call	_WaitForBusy	;wreg free
  2872                           
  2873                           ;TAD_DISPLAY.c: 150:  CantaIR((char)(0x80 | Fisics));
  2874   000E3A  5069               	movf	LcGotoXY@Fisics^0,w,c
  2875   000E3C  0980               	iorlw	128
  2876   000E3E  EC4B  F00A         	call	_CantaIR
  2877                           
  2878                           ;TAD_DISPLAY.c: 152:  RowAct = Row;
  2879   000E42  C064  F037         	movff	LcGotoXY@Row,_RowAct
  2880                           
  2881                           ;TAD_DISPLAY.c: 153:  ColumnAct = Column;
  2882   000E46  C06B  F036         	movff	LcGotoXY@Column,_ColumnAct
  2883   000E4A  0012               	return		;funcret
  2884   000E4C                     __end_of_LcGotoXY:
  2885                           	callstack 0
  2886                           
  2887 ;; *************** function _CantaData *****************
  2888 ;; Defined at:
  2889 ;;		line 240 in file "TAD_DISPLAY.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  Data            1    wreg     unsigned char 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  Data            1    3[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1
  2903 ;;      Params:         0       0       0
  2904 ;;      Locals:         1       0       0
  2905 ;;      Temps:          0       0       0
  2906 ;;      Totals:         1       0       0
  2907 ;;Total ram usage:        1 bytes
  2908 ;; Hardware stack levels used: 1
  2909 ;; Hardware stack levels required when called: 4
  2910 ;; This function calls:
  2911 ;;		_CantaPartAlta
  2912 ;;		_CantaPartBaixa
  2913 ;; This function is called by:
  2914 ;;		_LcPutChar
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text4
  2919   001464                     __ptext4:
  2920                           	callstack 0
  2921   001464                     _CantaData:
  2922                           	callstack 24
  2923                           
  2924                           ;incstack = 0
  2925                           ;CantaData@Data stored from wreg
  2926   001464  6E51               	movwf	CantaData@Data^0,c
  2927                           
  2928                           ;TAD_DISPLAY.c: 241:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  2929   001466  9096               	bcf	150,0,c	;volatile
  2930   001468  9296               	bcf	150,1,c	;volatile
  2931   00146A  9A93               	bcf	147,5,c	;volatile
  2932   00146C  9893               	bcf	147,4,c	;volatile
  2933                           
  2934                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB3 = 1);
  2935   00146E  868A               	bsf	138,3,c	;volatile
  2936                           
  2937                           ;TAD_DISPLAY.c: 243:  (LATBbits.LATB2 = 0);
  2938   001470  948A               	bcf	138,2,c	;volatile
  2939                           
  2940                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  2941   001472  828A               	bsf	138,1,c	;volatile
  2942                           
  2943                           ;TAD_DISPLAY.c: 245:  CantaPartAlta(Data);
  2944   001474  5051               	movf	CantaData@Data^0,w,c
  2945   001476  ECBD  F008         	call	_CantaPartAlta
  2946                           
  2947                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 1);
  2948   00147A  828A               	bsf	138,1,c	;volatile
  2949                           
  2950                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 0);
  2951   00147C  928A               	bcf	138,1,c	;volatile
  2952                           
  2953                           ;TAD_DISPLAY.c: 248:  (LATBbits.LATB1 = 0);
  2954   00147E  928A               	bcf	138,1,c	;volatile
  2955                           
  2956                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  2957   001480  828A               	bsf	138,1,c	;volatile
  2958                           
  2959                           ;TAD_DISPLAY.c: 250:  CantaPartBaixa(Data);
  2960   001482  5051               	movf	CantaData@Data^0,w,c
  2961   001484  EC8B  F008         	call	_CantaPartBaixa
  2962                           
  2963                           ;TAD_DISPLAY.c: 251:  (LATBbits.LATB1 = 1);
  2964   001488  828A               	bsf	138,1,c	;volatile
  2965                           
  2966                           ;TAD_DISPLAY.c: 252:  (LATBbits.LATB1 = 0);
  2967   00148A  928A               	bcf	138,1,c	;volatile
  2968                           
  2969                           ;TAD_DISPLAY.c: 253:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  2970   00148C  8096               	bsf	150,0,c	;volatile
  2971   00148E  8296               	bsf	150,1,c	;volatile
  2972   001490  8A93               	bsf	147,5,c	;volatile
  2973   001492  8893               	bsf	147,4,c	;volatile
  2974   001494  0012               	return		;funcret
  2975   001496                     __end_of_CantaData:
  2976                           	callstack 0
  2977                           
  2978 ;; *************** function _motor_RFID *****************
  2979 ;; Defined at:
  2980 ;;		line 161 in file "TAD_RFID.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  currentUser     5   27[COMRAM] unsigned char [5]
  2985 ;;  differentUID    1   32[COMRAM] unsigned char 
  2986 ;;  flag            1   35[COMRAM] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1
  2996 ;;      Params:         0       0       0
  2997 ;;      Locals:         9       0       0
  2998 ;;      Temps:          2       0       0
  2999 ;;      Totals:        11       0       0
  3000 ;;Total ram usage:       11 bytes
  3001 ;; Hardware stack levels used: 1
  3002 ;; Hardware stack levels required when called: 9
  3003 ;; This function calls:
  3004 ;;		_getActualUID
  3005 ;;		_motor_Read
  3006 ;;		_motor_Write
  3007 ;;		_setCurrentUser
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text5
  3014   00002A                     __ptext5:
  3015                           	callstack 0
  3016   00002A                     _motor_RFID:
  3017                           	callstack 21
  3018                           
  3019                           ;TAD_RFID.c: 184:     if (operation_pending == 1) {
  3020                           
  3021                           ;incstack = 0
  3022   00002A  0426               	decf	motor_RFID@operation_pending^0,w,c
  3023   00002C  A4D8               	btfss	status,2,c
  3024   00002E  D00C               	goto	l3765
  3025                           
  3026                           ;TAD_RFID.c: 186:         flag = motor_Read(addr);
  3027   000030  5025               	movf	motor_RFID@addr^0,w,c
  3028   000032  ECA8  F005         	call	_motor_Read
  3029   000036  6E71               	movwf	motor_RFID@flag^0,c
  3030                           
  3031                           ;TAD_RFID.c: 187:         if (flag != 0xFE) {
  3032   000038  0EFE               	movlw	254
  3033   00003A  1871               	xorwf	motor_RFID@flag^0,w,c
  3034   00003C  B4D8               	btfsc	status,2,c
  3035   00003E  0012               	return	
  3036                           
  3037                           ;TAD_RFID.c: 188:             tempRegValue = flag;
  3038   000040  C071  F02A         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3039                           
  3040                           ;TAD_RFID.c: 189:             operation_pending = 0;
  3041   000044  6A26               	clrf	motor_RFID@operation_pending^0,c
  3042                           
  3043                           ;TAD_RFID.c: 190:         } else {
  3044   000046  0012               	return	
  3045   000048                     l3765:
  3046   000048  0E02               	movlw	2
  3047   00004A  1826               	xorwf	motor_RFID@operation_pending^0,w,c
  3048   00004C  A4D8               	btfss	status,2,c
  3049   00004E  D2BD               	goto	l4083
  3050                           
  3051                           ;TAD_RFID.c: 195:         flag = motor_Write(addr, value);
  3052   000050  C024  F056         	movff	motor_RFID@value,motor_Write@value
  3053   000054  5025               	movf	motor_RFID@addr^0,w,c
  3054   000056  EC55  F008         	call	_motor_Write
  3055   00005A  6E71               	movwf	motor_RFID@flag^0,c
  3056                           
  3057                           ;TAD_RFID.c: 196:         if (flag != 0) {
  3058   00005C  5071               	movf	motor_RFID@flag^0,w,c
  3059   00005E  B4D8               	btfsc	status,2,c
  3060   000060  0012               	return	
  3061                           
  3062                           ;TAD_RFID.c: 197:             operation_pending = 0;
  3063   000062  6A26               	clrf	motor_RFID@operation_pending^0,c
  3064                           
  3065                           ;TAD_RFID.c: 198:         } else {
  3066   000064  0012               	return	
  3067   000066                     l3773:
  3068                           
  3069                           ;TAD_RFID.c: 208:                         addr = 0x0D;
  3070   000066  0E0D               	movlw	13
  3071   000068  6E25               	movwf	motor_RFID@addr^0,c
  3072                           
  3073                           ;TAD_RFID.c: 209:                         value = 0x07;
  3074   00006A  0E07               	movlw	7
  3075   00006C  6E24               	movwf	motor_RFID@value^0,c
  3076                           
  3077                           ;TAD_RFID.c: 210:                         operation_pending = 2;
  3078   00006E  0E02               	movlw	2
  3079   000070  6E26               	movwf	motor_RFID@operation_pending^0,c
  3080                           
  3081                           ;TAD_RFID.c: 211:                         substate = 1;
  3082   000072  0E01               	movlw	1
  3083   000074  6E33               	movwf	motor_RFID@substate^0,c
  3084                           
  3085                           ;TAD_RFID.c: 212:                         break;
  3086   000076  0012               	return	
  3087   000078                     l3775:
  3088                           
  3089                           ;TAD_RFID.c: 214:                         TagType = 0x26;
  3090   000078  0E26               	movlw	38
  3091   00007A  6E2D               	movwf	motor_RFID@TagType^0,c
  3092                           
  3093                           ;TAD_RFID.c: 215:                         irqEn = 0x77;
  3094   00007C  0E77               	movlw	119
  3095   00007E  6E32               	movwf	motor_RFID@irqEn^0,c
  3096                           
  3097                           ;TAD_RFID.c: 216:                         waitIRq = 0x30;
  3098   000080  0E30               	movlw	48
  3099   000082  6E31               	movwf	motor_RFID@waitIRq^0,c
  3100                           
  3101                           ;TAD_RFID.c: 217:                         addr = 0x02;
  3102   000084  0E02               	movlw	2
  3103   000086  6E25               	movwf	motor_RFID@addr^0,c
  3104                           
  3105                           ;TAD_RFID.c: 218:                         value = irqEn | 0x80;
  3106   000088  5032               	movf	motor_RFID@irqEn^0,w,c
  3107   00008A  0980               	iorlw	128
  3108   00008C  6E24               	movwf	motor_RFID@value^0,c
  3109                           
  3110                           ;TAD_RFID.c: 219:                         operation_pending = 2;
  3111   00008E  0E02               	movlw	2
  3112   000090  6E26               	movwf	motor_RFID@operation_pending^0,c
  3113                           
  3114                           ;TAD_RFID.c: 220:                         substate = 2;
  3115   000092  0E02               	movlw	2
  3116   000094  6E33               	movwf	motor_RFID@substate^0,c
  3117                           
  3118                           ;TAD_RFID.c: 221:                         break;
  3119   000096  0012               	return	
  3120   000098                     l3783:
  3121                           
  3122                           ;TAD_RFID.c: 223:                         addr = 0x04;
  3123   000098  0E04               	movlw	4
  3124   00009A  6E25               	movwf	motor_RFID@addr^0,c
  3125                           
  3126                           ;TAD_RFID.c: 224:                         operation_pending = 1;
  3127   00009C  0E01               	movlw	1
  3128   00009E  6E26               	movwf	motor_RFID@operation_pending^0,c
  3129                           
  3130                           ;TAD_RFID.c: 225:                         substate = 3;
  3131   0000A0  0E03               	movlw	3
  3132   0000A2  6E33               	movwf	motor_RFID@substate^0,c
  3133                           
  3134                           ;TAD_RFID.c: 226:                         break;
  3135   0000A4  0012               	return	
  3136   0000A6                     l3785:
  3137                           
  3138                           ;TAD_RFID.c: 228:                         if (tempRegValue == 0xFF) {
  3139   0000A6  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3140   0000A8  A4D8               	btfss	status,2,c
  3141   0000AA  D002               	goto	l3789
  3142   0000AC                     u2730:
  3143                           
  3144                           ;TAD_RFID.c: 229:                             substate = 0;
  3145   0000AC  6A33               	clrf	motor_RFID@substate^0,c
  3146                           
  3147                           ;TAD_RFID.c: 230:                         } else {
  3148   0000AE  0012               	return	
  3149   0000B0                     l3789:
  3150                           
  3151                           ;TAD_RFID.c: 231:                             addr = 0x02;
  3152   0000B0  0E02               	movlw	2
  3153   0000B2  6E25               	movwf	motor_RFID@addr^0,c
  3154                           
  3155                           ;TAD_RFID.c: 232:                             value = tempRegValue & ~0x80;
  3156   0000B4  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3157   0000B6  0B7F               	andlw	127
  3158   0000B8  6E24               	movwf	motor_RFID@value^0,c
  3159                           
  3160                           ;TAD_RFID.c: 233:                             operation_pending = 2;
  3161   0000BA  0E02               	movlw	2
  3162   0000BC  6E26               	movwf	motor_RFID@operation_pending^0,c
  3163                           
  3164                           ;TAD_RFID.c: 234:                             substate = 4;
  3165   0000BE  0E04               	movlw	4
  3166   0000C0  6E33               	movwf	motor_RFID@substate^0,c
  3167   0000C2  0012               	return	
  3168   0000C4                     l3797:
  3169                           
  3170                           ;TAD_RFID.c: 238:                         addr = 0x0A;
  3171   0000C4  0E0A               	movlw	10
  3172   0000C6  6E25               	movwf	motor_RFID@addr^0,c
  3173                           
  3174                           ;TAD_RFID.c: 239:                         operation_pending = 1;
  3175   0000C8  0E01               	movlw	1
  3176   0000CA  6E26               	movwf	motor_RFID@operation_pending^0,c
  3177                           
  3178                           ;TAD_RFID.c: 240:                         substate = 5;
  3179   0000CC  0E05               	movlw	5
  3180   0000CE  6E33               	movwf	motor_RFID@substate^0,c
  3181                           
  3182                           ;TAD_RFID.c: 241:                         break;
  3183   0000D0  0012               	return	
  3184   0000D2                     l3799:
  3185                           
  3186                           ;TAD_RFID.c: 243:                         if (tempRegValue == 0xFF) {
  3187   0000D2  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3188   0000D4  B4D8               	btfsc	status,2,c
  3189   0000D6  D7EA               	goto	u2730
  3190                           
  3191                           ;TAD_RFID.c: 246:                             addr = 0x0A;
  3192   0000D8  0E0A               	movlw	10
  3193   0000DA  6E25               	movwf	motor_RFID@addr^0,c
  3194                           
  3195                           ;TAD_RFID.c: 247:                             value = tempRegValue | 0x80;
  3196   0000DC  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3197   0000DE  0980               	iorlw	128
  3198   0000E0  6E24               	movwf	motor_RFID@value^0,c
  3199                           
  3200                           ;TAD_RFID.c: 248:                             operation_pending = 2;
  3201   0000E2  0E02               	movlw	2
  3202   0000E4  6E26               	movwf	motor_RFID@operation_pending^0,c
  3203                           
  3204                           ;TAD_RFID.c: 249:                             substate = 6;
  3205   0000E6  0E06               	movlw	6
  3206   0000E8  6E33               	movwf	motor_RFID@substate^0,c
  3207   0000EA  0012               	return	
  3208   0000EC                     l3811:
  3209                           
  3210                           ;TAD_RFID.c: 253:                         addr = 0x01;
  3211   0000EC  0E01               	movlw	1
  3212   0000EE  6E25               	movwf	motor_RFID@addr^0,c
  3213                           
  3214                           ;TAD_RFID.c: 254:                         value = 0x00;
  3215   0000F0  6A24               	clrf	motor_RFID@value^0,c
  3216                           
  3217                           ;TAD_RFID.c: 255:                         operation_pending = 2;
  3218   0000F2  0E02               	movlw	2
  3219   0000F4  6E26               	movwf	motor_RFID@operation_pending^0,c
  3220                           
  3221                           ;TAD_RFID.c: 256:                         substate = 7;
  3222   0000F6  0E07               	movlw	7
  3223   0000F8  6E33               	movwf	motor_RFID@substate^0,c
  3224                           
  3225                           ;TAD_RFID.c: 257:                         break;
  3226   0000FA  0012               	return	
  3227   0000FC                     l3815:
  3228                           
  3229                           ;TAD_RFID.c: 259:                         addr = 0x09;
  3230   0000FC  0E09               	movlw	9
  3231   0000FE  6E25               	movwf	motor_RFID@addr^0,c
  3232                           
  3233                           ;TAD_RFID.c: 260:                         value = TagType;
  3234   000100  C02D  F024         	movff	motor_RFID@TagType,motor_RFID@value
  3235                           
  3236                           ;TAD_RFID.c: 261:                         operation_pending = 2;
  3237   000104  0E02               	movlw	2
  3238   000106  6E26               	movwf	motor_RFID@operation_pending^0,c
  3239                           
  3240                           ;TAD_RFID.c: 262:                         substate = 8;
  3241   000108  0E08               	movlw	8
  3242   00010A  6E33               	movwf	motor_RFID@substate^0,c
  3243                           
  3244                           ;TAD_RFID.c: 263:                         break;
  3245   00010C  0012               	return	
  3246   00010E                     l3819:
  3247                           
  3248                           ;TAD_RFID.c: 265:                         addr = 0x01;
  3249   00010E  0E01               	movlw	1
  3250   000110  6E25               	movwf	motor_RFID@addr^0,c
  3251                           
  3252                           ;TAD_RFID.c: 266:                         value = 0x0C;
  3253   000112  0E0C               	movlw	12
  3254   000114  6E24               	movwf	motor_RFID@value^0,c
  3255                           
  3256                           ;TAD_RFID.c: 267:                         operation_pending = 2;
  3257   000116  0E02               	movlw	2
  3258   000118  6E26               	movwf	motor_RFID@operation_pending^0,c
  3259                           
  3260                           ;TAD_RFID.c: 268:                         substate = 9;
  3261   00011A  0E09               	movlw	9
  3262   00011C  6E33               	movwf	motor_RFID@substate^0,c
  3263                           
  3264                           ;TAD_RFID.c: 269:                         break;
  3265   00011E  0012               	return	
  3266   000120                     l3821:
  3267                           
  3268                           ;TAD_RFID.c: 271:                         addr = 0x0D;
  3269   000120  0E0D               	movlw	13
  3270   000122  6E25               	movwf	motor_RFID@addr^0,c
  3271                           
  3272                           ;TAD_RFID.c: 272:                         operation_pending = 1;
  3273   000124  0E01               	movlw	1
  3274   000126  6E26               	movwf	motor_RFID@operation_pending^0,c
  3275                           
  3276                           ;TAD_RFID.c: 273:                         substate = 10;
  3277   000128  0E0A               	movlw	10
  3278   00012A  6E33               	movwf	motor_RFID@substate^0,c
  3279                           
  3280                           ;TAD_RFID.c: 274:                         break;
  3281   00012C  0012               	return	
  3282   00012E                     l3823:
  3283                           
  3284                           ;TAD_RFID.c: 276:                         if (tempRegValue == 0xFF) {
  3285   00012E  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3286   000130  B4D8               	btfsc	status,2,c
  3287   000132  D7BC               	goto	u2730
  3288                           
  3289                           ;TAD_RFID.c: 279:                             addr = 0x0D;
  3290   000134  0E0D               	movlw	13
  3291   000136  6E25               	movwf	motor_RFID@addr^0,c
  3292                           
  3293                           ;TAD_RFID.c: 280:                             value = tempRegValue | 0x80;
  3294   000138  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3295   00013A  0980               	iorlw	128
  3296   00013C  6E24               	movwf	motor_RFID@value^0,c
  3297                           
  3298                           ;TAD_RFID.c: 281:                             operation_pending = 2;
  3299   00013E  0E02               	movlw	2
  3300   000140  6E26               	movwf	motor_RFID@operation_pending^0,c
  3301                           
  3302                           ;TAD_RFID.c: 282:                             substate = 11;
  3303   000142  0E0B               	movlw	11
  3304   000144  6E33               	movwf	motor_RFID@substate^0,c
  3305   000146  0012               	return	
  3306   000148                     l378:
  3307                           
  3308                           ;TAD_RFID.c: 286:                         i = 0xFF;
  3309   000148  682F               	setf	motor_RFID@i^0,c
  3310                           
  3311                           ;TAD_RFID.c: 287:                         addr = 0x04;
  3312   00014A  0E04               	movlw	4
  3313   00014C  6E25               	movwf	motor_RFID@addr^0,c
  3314                           
  3315                           ;TAD_RFID.c: 288:                         operation_pending = 1;
  3316   00014E  0E01               	movlw	1
  3317   000150  6E26               	movwf	motor_RFID@operation_pending^0,c
  3318                           
  3319                           ;TAD_RFID.c: 289:                         substate = 12;
  3320   000152  0E0C               	movlw	12
  3321   000154  6E33               	movwf	motor_RFID@substate^0,c
  3322                           
  3323                           ;TAD_RFID.c: 290:                         break;
  3324   000156  0012               	return	
  3325   000158                     l3837:
  3326                           
  3327                           ;TAD_RFID.c: 292:                         if (tempRegValue == 0xFF) {
  3328   000158  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3329   00015A  B4D8               	btfsc	status,2,c
  3330   00015C  D7A7               	goto	u2730
  3331                           
  3332                           ;TAD_RFID.c: 295:                             n = tempRegValue;
  3333   00015E  C02A  F030         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3334                           
  3335                           ;TAD_RFID.c: 296:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3336   000162  B030               	btfsc	motor_RFID@n^0,0,c
  3337   000164  D007               	goto	l3845
  3338   000166  5030               	movf	motor_RFID@n^0,w,c
  3339   000168  1431               	andwf	motor_RFID@waitIRq^0,w,c
  3340   00016A  0900               	iorlw	0
  3341   00016C  A4D8               	btfss	status,2,c
  3342   00016E  D002               	goto	l3845
  3343   000170  2E2F               	decfsz	motor_RFID@i^0,f,c
  3344   000172  D007               	goto	l3847
  3345   000174                     l3845:
  3346                           
  3347                           ;TAD_RFID.c: 297:                                 addr = 0x0D;
  3348   000174  0E0D               	movlw	13
  3349   000176  6E25               	movwf	motor_RFID@addr^0,c
  3350                           
  3351                           ;TAD_RFID.c: 298:                                 operation_pending = 1;
  3352   000178  0E01               	movlw	1
  3353   00017A  6E26               	movwf	motor_RFID@operation_pending^0,c
  3354                           
  3355                           ;TAD_RFID.c: 299:                                 substate = 13;
  3356   00017C  0E0D               	movlw	13
  3357   00017E  6E33               	movwf	motor_RFID@substate^0,c
  3358                           
  3359                           ;TAD_RFID.c: 300:                             } else {
  3360   000180  0012               	return	
  3361   000182                     l3847:
  3362                           
  3363                           ;TAD_RFID.c: 301:                                 addr = 0x04;
  3364   000182  0E04               	movlw	4
  3365   000184  6E25               	movwf	motor_RFID@addr^0,c
  3366                           
  3367                           ;TAD_RFID.c: 302:                                 operation_pending = 1;
  3368   000186  0E01               	movlw	1
  3369   000188  6E26               	movwf	motor_RFID@operation_pending^0,c
  3370   00018A  0012               	return	
  3371   00018C                     l3849:
  3372                           
  3373                           ;TAD_RFID.c: 308:                         if (tempRegValue == 0xFF) {
  3374   00018C  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3375   00018E  B4D8               	btfsc	status,2,c
  3376   000190  D78D               	goto	u2730
  3377   000192  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3378   000194  B4D8               	btfsc	status,2,c
  3379   000196  D00A               	goto	l3863
  3380                           
  3381                           ;TAD_RFID.c: 311:                             addr = 0x0D;
  3382   000198  0E0D               	movlw	13
  3383   00019A  6E25               	movwf	motor_RFID@addr^0,c
  3384                           
  3385                           ;TAD_RFID.c: 312:                             value = tempRegValue & ~0x80;
  3386   00019C  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3387   00019E  0B7F               	andlw	127
  3388   0001A0  6E24               	movwf	motor_RFID@value^0,c
  3389                           
  3390                           ;TAD_RFID.c: 313:                             operation_pending = 2;
  3391   0001A2  0E02               	movlw	2
  3392   0001A4  6E26               	movwf	motor_RFID@operation_pending^0,c
  3393                           
  3394                           ;TAD_RFID.c: 314:                             substate = 14;
  3395   0001A6  0E0E               	movlw	14
  3396   0001A8  6E33               	movwf	motor_RFID@substate^0,c
  3397                           
  3398                           ;TAD_RFID.c: 315:                         } else {
  3399   0001AA  0012               	return	
  3400   0001AC                     l3863:
  3401                           
  3402                           ;TAD_RFID.c: 316:                             addr = 0x0D;
  3403   0001AC  0E0D               	movlw	13
  3404   0001AE  6E25               	movwf	motor_RFID@addr^0,c
  3405                           
  3406                           ;TAD_RFID.c: 317:                             operation_pending = 1;
  3407   0001B0  0E01               	movlw	1
  3408   0001B2  6E26               	movwf	motor_RFID@operation_pending^0,c
  3409   0001B4  0012               	return	
  3410   0001B6                     l3865:
  3411                           
  3412                           ;TAD_RFID.c: 322:                         addr = 0x06;
  3413   0001B6  0E06               	movlw	6
  3414   0001B8  6E25               	movwf	motor_RFID@addr^0,c
  3415                           
  3416                           ;TAD_RFID.c: 323:                         operation_pending = 1;
  3417   0001BA  0E01               	movlw	1
  3418   0001BC  6E26               	movwf	motor_RFID@operation_pending^0,c
  3419                           
  3420                           ;TAD_RFID.c: 324:                         substate = 15;
  3421   0001BE  0E0F               	movlw	15
  3422   0001C0  6E33               	movwf	motor_RFID@substate^0,c
  3423                           
  3424                           ;TAD_RFID.c: 325:                         break;
  3425   0001C2  0012               	return	
  3426   0001C4                     l3867:
  3427                           
  3428                           ;TAD_RFID.c: 327:                         if (tempRegValue == 0xFF) {
  3429   0001C4  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3430   0001C6  B4D8               	btfsc	status,2,c
  3431   0001C8  D771               	goto	u2730
  3432   0001CA  502F               	movf	motor_RFID@i^0,w,c
  3433   0001CC  B4D8               	btfsc	status,2,c
  3434   0001CE  D00D               	goto	l395
  3435   0001D0  C02A  F067         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3436   0001D4  0E1B               	movlw	27
  3437   0001D6  1667               	andwf	??_motor_RFID^0,f,c
  3438   0001D8  A4D8               	btfss	status,2,c
  3439   0001DA  D007               	goto	l395
  3440                           
  3441                           ;TAD_RFID.c: 330:                             addr = 0x0A;
  3442   0001DC  0E0A               	movlw	10
  3443   0001DE  6E25               	movwf	motor_RFID@addr^0,c
  3444                           
  3445                           ;TAD_RFID.c: 331:                             operation_pending = 1;
  3446   0001E0  0E01               	movlw	1
  3447   0001E2  6E26               	movwf	motor_RFID@operation_pending^0,c
  3448                           
  3449                           ;TAD_RFID.c: 332:                             substate = 16;
  3450   0001E4  0E10               	movlw	16
  3451   0001E6  6E33               	movwf	motor_RFID@substate^0,c
  3452                           
  3453                           ;TAD_RFID.c: 333:                         } else {
  3454   0001E8  0012               	return	
  3455   0001EA                     l395:
  3456                           
  3457                           ;TAD_RFID.c: 334:                             state = substate = 0;
  3458   0001EA  6A33               	clrf	motor_RFID@substate^0,c
  3459   0001EC  6A34               	clrf	motor_RFID@state^0,c
  3460   0001EE  0012               	return	
  3461   0001F0                     l3877:
  3462                           
  3463                           ;TAD_RFID.c: 338:                         if (tempRegValue == 0xFF) {
  3464   0001F0  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3465   0001F2  B4D8               	btfsc	status,2,c
  3466   0001F4  D75B               	goto	u2730
  3467                           
  3468                           ;TAD_RFID.c: 341:                             fifoLevel = tempRegValue;
  3469   0001F6  C02A  F028         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3470                           
  3471                           ;TAD_RFID.c: 342:                             addr = 0x0C;
  3472   0001FA  0E0C               	movlw	12
  3473   0001FC  6E25               	movwf	motor_RFID@addr^0,c
  3474                           
  3475                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3476   0001FE  0E01               	movlw	1
  3477   000200  6E26               	movwf	motor_RFID@operation_pending^0,c
  3478                           
  3479                           ;TAD_RFID.c: 344:                             substate = 17;
  3480   000202  0E11               	movlw	17
  3481   000204  6E33               	movwf	motor_RFID@substate^0,c
  3482   000206  0012               	return	
  3483   000208                     l3883:
  3484                           
  3485                           ;TAD_RFID.c: 348:                         if (tempRegValue == 0xFF) {
  3486   000208  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3487   00020A  B4D8               	btfsc	status,2,c
  3488   00020C  D74F               	goto	u2730
  3489                           
  3490                           ;TAD_RFID.c: 351:                             lastBitsVal = tempRegValue & 0x07;
  3491   00020E  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3492   000210  0B07               	andlw	7
  3493   000212  6E29               	movwf	motor_RFID@lastBitsVal^0,c
  3494                           
  3495                           ;TAD_RFID.c: 352:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3496   000214  5029               	movf	motor_RFID@lastBitsVal^0,w,c
  3497   000216  A4D8               	btfss	status,2,c
  3498   000218  D007               	goto	l3893
  3499   00021A  5028               	movf	motor_RFID@fifoLevel^0,w,c
  3500   00021C  0D08               	mullw	8
  3501   00021E  CFF3 F06F          	movff	prodl,_motor_RFID$700
  3502   000222  CFF4 F070          	movff	prodh,_motor_RFID$700+1
  3503   000226  D016               	goto	l3895
  3504   000228                     l3893:
  3505   000228  5029               	movf	motor_RFID@lastBitsVal^0,w,c
  3506   00022A  C028  F067         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3507   00022E  6A68               	clrf	(??_motor_RFID+1)^0,c
  3508   000230  90D8               	bcf	status,0,c
  3509   000232  3667               	rlcf	??_motor_RFID^0,f,c
  3510   000234  3668               	rlcf	(??_motor_RFID+1)^0,f,c
  3511   000236  90D8               	bcf	status,0,c
  3512   000238  3667               	rlcf	??_motor_RFID^0,f,c
  3513   00023A  3668               	rlcf	(??_motor_RFID+1)^0,f,c
  3514   00023C  90D8               	bcf	status,0,c
  3515   00023E  3667               	rlcf	??_motor_RFID^0,f,c
  3516   000240  3668               	rlcf	(??_motor_RFID+1)^0,f,c
  3517   000242  2667               	addwf	??_motor_RFID^0,f,c
  3518   000244  0E00               	movlw	0
  3519   000246  2268               	addwfc	(??_motor_RFID+1)^0,f,c
  3520   000248  0EF8               	movlw	248
  3521   00024A  2467               	addwf	??_motor_RFID^0,w,c
  3522   00024C  6E6F               	movwf	_motor_RFID$700^0,c
  3523   00024E  0EFF               	movlw	255
  3524   000250  2068               	addwfc	(??_motor_RFID+1)^0,w,c
  3525   000252  6E70               	movwf	(_motor_RFID$700+1)^0,c
  3526   000254                     l3895:
  3527   000254  C06F  F027         	movff	_motor_RFID$700,motor_RFID@backBitsCalc
  3528                           
  3529                           ;TAD_RFID.c: 353:                             if (backBitsCalc == 0x10) {
  3530   000258  0E10               	movlw	16
  3531   00025A  1827               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3532   00025C  A4D8               	btfss	status,2,c
  3533   00025E  D7C5               	goto	l395
  3534                           
  3535                           ;TAD_RFID.c: 354:                                 state = 1;
  3536   000260  0E01               	movlw	1
  3537   000262  6E34               	movwf	motor_RFID@state^0,c
  3538   000264  D723               	goto	u2730
  3539   000266                     l3903:
  3540   000266  5033               	movf	motor_RFID@substate^0,w,c
  3541                           
  3542                           ; Switch size 1, requested type "simple"
  3543                           ; Number of cases is 18, Range of values is 0 to 17
  3544                           ; switch strategies available:
  3545                           ; Name         Instructions Cycles
  3546                           ; simple_byte           55    28 (average)
  3547                           ;	Chosen strategy is simple_byte
  3548   000268  0A00               	xorlw	0	; case 0
  3549   00026A  B4D8               	btfsc	status,2,c
  3550   00026C  D6FC               	goto	l3773
  3551   00026E  0A01               	xorlw	1	; case 1
  3552   000270  B4D8               	btfsc	status,2,c
  3553   000272  D702               	goto	l3775
  3554   000274  0A03               	xorlw	3	; case 2
  3555   000276  B4D8               	btfsc	status,2,c
  3556   000278  D70F               	goto	l3783
  3557   00027A  0A01               	xorlw	1	; case 3
  3558   00027C  B4D8               	btfsc	status,2,c
  3559   00027E  D713               	goto	l3785
  3560   000280  0A07               	xorlw	7	; case 4
  3561   000282  B4D8               	btfsc	status,2,c
  3562   000284  D71F               	goto	l3797
  3563   000286  0A01               	xorlw	1	; case 5
  3564   000288  B4D8               	btfsc	status,2,c
  3565   00028A  D723               	goto	l3799
  3566   00028C  0A03               	xorlw	3	; case 6
  3567   00028E  B4D8               	btfsc	status,2,c
  3568   000290  D72D               	goto	l3811
  3569   000292  0A01               	xorlw	1	; case 7
  3570   000294  B4D8               	btfsc	status,2,c
  3571   000296  D732               	goto	l3815
  3572   000298  0A0F               	xorlw	15	; case 8
  3573   00029A  B4D8               	btfsc	status,2,c
  3574   00029C  D738               	goto	l3819
  3575   00029E  0A01               	xorlw	1	; case 9
  3576   0002A0  B4D8               	btfsc	status,2,c
  3577   0002A2  D73E               	goto	l3821
  3578   0002A4  0A03               	xorlw	3	; case 10
  3579   0002A6  B4D8               	btfsc	status,2,c
  3580   0002A8  D742               	goto	l3823
  3581   0002AA  0A01               	xorlw	1	; case 11
  3582   0002AC  B4D8               	btfsc	status,2,c
  3583   0002AE  D74C               	goto	l378
  3584   0002B0  0A07               	xorlw	7	; case 12
  3585   0002B2  B4D8               	btfsc	status,2,c
  3586   0002B4  D751               	goto	l3837
  3587   0002B6  0A01               	xorlw	1	; case 13
  3588   0002B8  B4D8               	btfsc	status,2,c
  3589   0002BA  D768               	goto	l3849
  3590   0002BC  0A03               	xorlw	3	; case 14
  3591   0002BE  B4D8               	btfsc	status,2,c
  3592   0002C0  D77A               	goto	l3865
  3593   0002C2  0A01               	xorlw	1	; case 15
  3594   0002C4  B4D8               	btfsc	status,2,c
  3595   0002C6  D77E               	goto	l3867
  3596   0002C8  0A1F               	xorlw	31	; case 16
  3597   0002CA  B4D8               	btfsc	status,2,c
  3598   0002CC  D791               	goto	l3877
  3599   0002CE  0A01               	xorlw	1	; case 17
  3600   0002D0  A4D8               	btfss	status,2,c
  3601   0002D2  0012               	return	
  3602   0002D4  D799               	goto	l3883
  3603   0002D6                     l3905:
  3604                           
  3605                           ;TAD_RFID.c: 367:                         addr = 0x0D;
  3606   0002D6  0E0D               	movlw	13
  3607   0002D8  6E25               	movwf	motor_RFID@addr^0,c
  3608                           
  3609                           ;TAD_RFID.c: 368:                         value = 0x00;
  3610   0002DA  6A24               	clrf	motor_RFID@value^0,c
  3611                           
  3612                           ;TAD_RFID.c: 369:                         operation_pending = 2;
  3613   0002DC  0E02               	movlw	2
  3614   0002DE  6E26               	movwf	motor_RFID@operation_pending^0,c
  3615                           
  3616                           ;TAD_RFID.c: 370:                         substate = 1;
  3617   0002E0  0E01               	movlw	1
  3618   0002E2  6E33               	movwf	motor_RFID@substate^0,c
  3619                           
  3620                           ;TAD_RFID.c: 371:                         break;
  3621   0002E4  0012               	return	
  3622   0002E6                     l3909:
  3623                           
  3624                           ;TAD_RFID.c: 373:                         UID[0] = 0x93;
  3625   0002E6  0E93               	movlw	147
  3626   0002E8  6E01               	movwf	motor_RFID@UID^0,c
  3627                           
  3628                           ;TAD_RFID.c: 374:                         UID[1] = 0x20;
  3629   0002EA  0E20               	movlw	32
  3630   0002EC  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3631                           
  3632                           ;TAD_RFID.c: 375:                         addr = 0x08;
  3633   0002EE  0E08               	movlw	8
  3634   0002F0  6E25               	movwf	motor_RFID@addr^0,c
  3635                           
  3636                           ;TAD_RFID.c: 376:                         operation_pending = 1;
  3637   0002F2  0E01               	movlw	1
  3638   0002F4  6E26               	movwf	motor_RFID@operation_pending^0,c
  3639                           
  3640                           ;TAD_RFID.c: 377:                         substate = 2;
  3641   0002F6  0E02               	movlw	2
  3642   0002F8  6E33               	movwf	motor_RFID@substate^0,c
  3643                           
  3644                           ;TAD_RFID.c: 378:                         break;
  3645   0002FA  0012               	return	
  3646   0002FC                     l3911:
  3647                           
  3648                           ;TAD_RFID.c: 380:                         if (tempRegValue == 0xFF) {
  3649   0002FC  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3650   0002FE  B4D8               	btfsc	status,2,c
  3651   000300  D774               	goto	l395
  3652                           
  3653                           ;TAD_RFID.c: 383:                             addr = 0x08;
  3654   000302  0E08               	movlw	8
  3655   000304  6E25               	movwf	motor_RFID@addr^0,c
  3656                           
  3657                           ;TAD_RFID.c: 384:                             value = tempRegValue & ~0x08;
  3658   000306  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3659   000308  0BF7               	andlw	247
  3660   00030A  6E24               	movwf	motor_RFID@value^0,c
  3661                           
  3662                           ;TAD_RFID.c: 385:                             operation_pending = 2;
  3663   00030C  0E02               	movlw	2
  3664   00030E  6E26               	movwf	motor_RFID@operation_pending^0,c
  3665                           
  3666                           ;TAD_RFID.c: 386:                             substate = 3;
  3667   000310  0E03               	movlw	3
  3668   000312  6E33               	movwf	motor_RFID@substate^0,c
  3669   000314  0012               	return	
  3670   000316                     l3923:
  3671                           
  3672                           ;TAD_RFID.c: 390:                         irqEn = 0x77;
  3673   000316  0E77               	movlw	119
  3674   000318  6E32               	movwf	motor_RFID@irqEn^0,c
  3675                           
  3676                           ;TAD_RFID.c: 391:                         waitIRq = 0x30;
  3677   00031A  0E30               	movlw	48
  3678   00031C  6E31               	movwf	motor_RFID@waitIRq^0,c
  3679                           
  3680                           ;TAD_RFID.c: 392:                         addr = 0x02;
  3681   00031E  0E02               	movlw	2
  3682   000320  6E25               	movwf	motor_RFID@addr^0,c
  3683                           
  3684                           ;TAD_RFID.c: 393:                         value = irqEn | 0x80;
  3685   000322  5032               	movf	motor_RFID@irqEn^0,w,c
  3686   000324  0980               	iorlw	128
  3687   000326  D6C8               	goto	L5
  3688   000328                     l3931:
  3689                           
  3690                           ;TAD_RFID.c: 398:                         addr = 0x04;
  3691   000328  0E04               	movlw	4
  3692   00032A  6E25               	movwf	motor_RFID@addr^0,c
  3693                           
  3694                           ;TAD_RFID.c: 399:                         operation_pending = 1;
  3695   00032C  0E01               	movlw	1
  3696   00032E  6E26               	movwf	motor_RFID@operation_pending^0,c
  3697                           
  3698                           ;TAD_RFID.c: 400:                         substate = 5;
  3699   000330  0E05               	movlw	5
  3700   000332  6E33               	movwf	motor_RFID@substate^0,c
  3701                           
  3702                           ;TAD_RFID.c: 401:                         break;
  3703   000334  0012               	return	
  3704   000336                     l3933:
  3705                           
  3706                           ;TAD_RFID.c: 403:                         if (tempRegValue == 0xFF) {
  3707   000336  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3708   000338  B4D8               	btfsc	status,2,c
  3709   00033A  D757               	goto	l395
  3710                           
  3711                           ;TAD_RFID.c: 406:                             addr = 0x04;
  3712   00033C  0E04               	movlw	4
  3713   00033E  6E25               	movwf	motor_RFID@addr^0,c
  3714                           
  3715                           ;TAD_RFID.c: 407:                             value = tempRegValue & ~0x80;
  3716   000340  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3717   000342  0B7F               	andlw	127
  3718   000344  D6CD               	goto	L6
  3719   000346                     l3945:
  3720                           
  3721                           ;TAD_RFID.c: 413:                         addr = 0x0A;
  3722   000346  0E0A               	movlw	10
  3723   000348  6E25               	movwf	motor_RFID@addr^0,c
  3724                           
  3725                           ;TAD_RFID.c: 414:                         operation_pending = 1;
  3726   00034A  0E01               	movlw	1
  3727   00034C  6E26               	movwf	motor_RFID@operation_pending^0,c
  3728                           
  3729                           ;TAD_RFID.c: 415:                         substate = 7;
  3730   00034E  0E07               	movlw	7
  3731   000350  6E33               	movwf	motor_RFID@substate^0,c
  3732                           
  3733                           ;TAD_RFID.c: 416:                         break;
  3734   000352  0012               	return	
  3735   000354                     l3947:
  3736                           
  3737                           ;TAD_RFID.c: 418:                         if (tempRegValue == 0xFF) {
  3738   000354  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3739   000356  B4D8               	btfsc	status,2,c
  3740   000358  D748               	goto	l395
  3741                           
  3742                           ;TAD_RFID.c: 421:                             addr = 0x0A;
  3743   00035A  0E0A               	movlw	10
  3744   00035C  6E25               	movwf	motor_RFID@addr^0,c
  3745                           
  3746                           ;TAD_RFID.c: 422:                             value = tempRegValue | 0x80;
  3747   00035E  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3748   000360  0980               	iorlw	128
  3749   000362  6E24               	movwf	motor_RFID@value^0,c
  3750                           
  3751                           ;TAD_RFID.c: 423:                             operation_pending = 2;
  3752   000364  0E02               	movlw	2
  3753   000366  6E26               	movwf	motor_RFID@operation_pending^0,c
  3754                           
  3755                           ;TAD_RFID.c: 424:                             substate = 8;
  3756   000368  0E08               	movlw	8
  3757   00036A  6E33               	movwf	motor_RFID@substate^0,c
  3758   00036C  0012               	return	
  3759   00036E                     l3959:
  3760                           
  3761                           ;TAD_RFID.c: 428:                         addr = 0x01;
  3762   00036E  0E01               	movlw	1
  3763   000370  6E25               	movwf	motor_RFID@addr^0,c
  3764                           
  3765                           ;TAD_RFID.c: 429:                         value = 0x00;
  3766   000372  6A24               	clrf	motor_RFID@value^0,c
  3767                           
  3768                           ;TAD_RFID.c: 430:                         operation_pending = 2;
  3769   000374  0E02               	movlw	2
  3770   000376  6E26               	movwf	motor_RFID@operation_pending^0,c
  3771                           
  3772                           ;TAD_RFID.c: 431:                         substate = 9;
  3773   000378  0E09               	movlw	9
  3774   00037A  6E33               	movwf	motor_RFID@substate^0,c
  3775                           
  3776                           ;TAD_RFID.c: 432:                         break;
  3777   00037C  0012               	return	
  3778   00037E                     l3963:
  3779                           
  3780                           ;TAD_RFID.c: 434:                         addr = 0x09;
  3781   00037E  0E09               	movlw	9
  3782   000380  6E25               	movwf	motor_RFID@addr^0,c
  3783                           
  3784                           ;TAD_RFID.c: 435:                         value = UID[0];
  3785   000382  C001  F024         	movff	motor_RFID@UID,motor_RFID@value
  3786                           
  3787                           ;TAD_RFID.c: 436:                         operation_pending = 2;
  3788   000386  0E02               	movlw	2
  3789   000388  6E26               	movwf	motor_RFID@operation_pending^0,c
  3790                           
  3791                           ;TAD_RFID.c: 437:                         substate = 10;
  3792   00038A  0E0A               	movlw	10
  3793   00038C  6E33               	movwf	motor_RFID@substate^0,c
  3794                           
  3795                           ;TAD_RFID.c: 438:                         break;
  3796   00038E  0012               	return	
  3797   000390                     l3967:
  3798                           
  3799                           ;TAD_RFID.c: 440:                         addr = 0x09;
  3800   000390  0E09               	movlw	9
  3801   000392  6E25               	movwf	motor_RFID@addr^0,c
  3802                           
  3803                           ;TAD_RFID.c: 441:                         value = UID[1];
  3804   000394  C002  F024         	movff	motor_RFID@UID+1,motor_RFID@value
  3805                           
  3806                           ;TAD_RFID.c: 442:                         operation_pending = 2;
  3807   000398  0E02               	movlw	2
  3808   00039A  6E26               	movwf	motor_RFID@operation_pending^0,c
  3809                           
  3810                           ;TAD_RFID.c: 443:                         substate = 11;
  3811   00039C  0E0B               	movlw	11
  3812   00039E  6E33               	movwf	motor_RFID@substate^0,c
  3813                           
  3814                           ;TAD_RFID.c: 444:                         break;
  3815   0003A0  0012               	return	
  3816   0003A2                     l3971:
  3817                           
  3818                           ;TAD_RFID.c: 446:                         addr = 0x01;
  3819   0003A2  0E01               	movlw	1
  3820   0003A4  6E25               	movwf	motor_RFID@addr^0,c
  3821                           
  3822                           ;TAD_RFID.c: 447:                         value = 0x0C;
  3823   0003A6  0E0C               	movlw	12
  3824   0003A8  6E24               	movwf	motor_RFID@value^0,c
  3825                           
  3826                           ;TAD_RFID.c: 448:                         operation_pending = 2;
  3827   0003AA  0E02               	movlw	2
  3828   0003AC  6E26               	movwf	motor_RFID@operation_pending^0,c
  3829                           
  3830                           ;TAD_RFID.c: 449:                         substate = 12;
  3831   0003AE  0E0C               	movlw	12
  3832   0003B0  6E33               	movwf	motor_RFID@substate^0,c
  3833                           
  3834                           ;TAD_RFID.c: 450:                         break;
  3835   0003B2  0012               	return	
  3836   0003B4                     l3975:
  3837                           
  3838                           ;TAD_RFID.c: 457:                         if (tempRegValue == 0xFF) {
  3839   0003B4  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3840   0003B6  B4D8               	btfsc	status,2,c
  3841   0003B8  D718               	goto	l395
  3842                           
  3843                           ;TAD_RFID.c: 460:                             addr = 0x0D;
  3844   0003BA  0E0D               	movlw	13
  3845   0003BC  6E25               	movwf	motor_RFID@addr^0,c
  3846                           
  3847                           ;TAD_RFID.c: 461:                             value = tempRegValue | 0x80;
  3848   0003BE  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3849   0003C0  0980               	iorlw	128
  3850   0003C2  D6EE               	goto	L7
  3851   0003C4                     l435:
  3852                           
  3853                           ;TAD_RFID.c: 467:                         i = 0xFF;
  3854   0003C4  682F               	setf	motor_RFID@i^0,c
  3855                           
  3856                           ;TAD_RFID.c: 468:                         addr = 0x04;
  3857   0003C6  0E04               	movlw	4
  3858   0003C8  6E25               	movwf	motor_RFID@addr^0,c
  3859                           
  3860                           ;TAD_RFID.c: 469:                         operation_pending = 1;
  3861   0003CA  0E01               	movlw	1
  3862   0003CC  6E26               	movwf	motor_RFID@operation_pending^0,c
  3863                           
  3864                           ;TAD_RFID.c: 470:                         substate = 15;
  3865   0003CE  0E0F               	movlw	15
  3866   0003D0  6E33               	movwf	motor_RFID@substate^0,c
  3867                           
  3868                           ;TAD_RFID.c: 471:                         break;
  3869   0003D2  0012               	return	
  3870   0003D4                     l3989:
  3871                           
  3872                           ;TAD_RFID.c: 473:                         if (tempRegValue == 0xFF) {
  3873   0003D4  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3874   0003D6  B4D8               	btfsc	status,2,c
  3875   0003D8  D708               	goto	l395
  3876                           
  3877                           ;TAD_RFID.c: 476:                             n = tempRegValue;
  3878   0003DA  C02A  F030         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3879                           
  3880                           ;TAD_RFID.c: 477:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3881   0003DE  B030               	btfsc	motor_RFID@n^0,0,c
  3882   0003E0  D007               	goto	l3997
  3883   0003E2  5030               	movf	motor_RFID@n^0,w,c
  3884   0003E4  1431               	andwf	motor_RFID@waitIRq^0,w,c
  3885   0003E6  0900               	iorlw	0
  3886   0003E8  A4D8               	btfss	status,2,c
  3887   0003EA  D002               	goto	l3997
  3888   0003EC  2E2F               	decfsz	motor_RFID@i^0,f,c
  3889   0003EE  D6C9               	goto	l3847
  3890   0003F0                     l3997:
  3891                           
  3892                           ;TAD_RFID.c: 478:                                 addr = 0x0D;
  3893   0003F0  0E0D               	movlw	13
  3894   0003F2  6E25               	movwf	motor_RFID@addr^0,c
  3895                           
  3896                           ;TAD_RFID.c: 479:                                 operation_pending = 1;
  3897   0003F4  0E01               	movlw	1
  3898   0003F6  6E26               	movwf	motor_RFID@operation_pending^0,c
  3899                           
  3900                           ;TAD_RFID.c: 480:                                 substate = 16;
  3901   0003F8  0E10               	movlw	16
  3902   0003FA  6E33               	movwf	motor_RFID@substate^0,c
  3903                           
  3904                           ;TAD_RFID.c: 481:                             } else {
  3905   0003FC  0012               	return	
  3906   0003FE                     l4001:
  3907                           
  3908                           ;TAD_RFID.c: 489:                         if (tempRegValue == 0xFF) {
  3909   0003FE  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3910   000400  B4D8               	btfsc	status,2,c
  3911   000402  D6F3               	goto	l395
  3912                           
  3913                           ;TAD_RFID.c: 492:                             addr = 0x0D;
  3914   000404  0E0D               	movlw	13
  3915   000406  6E25               	movwf	motor_RFID@addr^0,c
  3916                           
  3917                           ;TAD_RFID.c: 493:                             value = tempRegValue & ~0x80;
  3918   000408  502A               	movf	motor_RFID@tempRegValue^0,w,c
  3919   00040A  0B7F               	andlw	127
  3920   00040C  6E24               	movwf	motor_RFID@value^0,c
  3921                           
  3922                           ;TAD_RFID.c: 494:                             operation_pending = 2;
  3923   00040E  0E02               	movlw	2
  3924   000410  6E26               	movwf	motor_RFID@operation_pending^0,c
  3925                           
  3926                           ;TAD_RFID.c: 495:                             substate = 17;
  3927   000412  0E11               	movlw	17
  3928   000414  6E33               	movwf	motor_RFID@substate^0,c
  3929   000416  0012               	return	
  3930   000418                     l4013:
  3931                           
  3932                           ;TAD_RFID.c: 499:                         addr = 0x06;
  3933   000418  0E06               	movlw	6
  3934   00041A  6E25               	movwf	motor_RFID@addr^0,c
  3935                           
  3936                           ;TAD_RFID.c: 500:                         operation_pending = 1;
  3937   00041C  0E01               	movlw	1
  3938   00041E  6E26               	movwf	motor_RFID@operation_pending^0,c
  3939                           
  3940                           ;TAD_RFID.c: 501:                         substate = 18;
  3941   000420  0E12               	movlw	18
  3942   000422  6E33               	movwf	motor_RFID@substate^0,c
  3943                           
  3944                           ;TAD_RFID.c: 502:                         break;
  3945   000424  0012               	return	
  3946   000426                     l4015:
  3947                           
  3948                           ;TAD_RFID.c: 504:                         if (tempRegValue == 0xFF) {
  3949   000426  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3950   000428  B4D8               	btfsc	status,2,c
  3951   00042A  D6DF               	goto	l395
  3952   00042C  502F               	movf	motor_RFID@i^0,w,c
  3953   00042E  B4D8               	btfsc	status,2,c
  3954   000430  D6DC               	goto	l395
  3955   000432  C02A  F067         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3956   000436  0E1B               	movlw	27
  3957   000438  1667               	andwf	??_motor_RFID^0,f,c
  3958   00043A  A4D8               	btfss	status,2,c
  3959   00043C  D6D6               	goto	l395
  3960                           
  3961                           ;TAD_RFID.c: 507:                             addr = 0x09;
  3962   00043E  0E09               	movlw	9
  3963   000440  6E25               	movwf	motor_RFID@addr^0,c
  3964                           
  3965                           ;TAD_RFID.c: 508:                             operation_pending = 1;
  3966   000442  0E01               	movlw	1
  3967   000444  6E26               	movwf	motor_RFID@operation_pending^0,c
  3968                           
  3969                           ;TAD_RFID.c: 509:                             substate = 19;
  3970   000446  0E13               	movlw	19
  3971   000448  6E33               	movwf	motor_RFID@substate^0,c
  3972                           
  3973                           ;TAD_RFID.c: 510:                         } else {
  3974   00044A  0012               	return	
  3975   00044C                     l4025:
  3976                           
  3977                           ;TAD_RFID.c: 515:                         if (tempRegValue == 0xFF) {
  3978   00044C  282A               	incf	motor_RFID@tempRegValue^0,w,c
  3979   00044E  B4D8               	btfsc	status,2,c
  3980   000450  D6CC               	goto	l395
  3981                           
  3982                           ;TAD_RFID.c: 518:                             UID[0] = tempRegValue;
  3983   000452  C02A  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  3984                           
  3985                           ;TAD_RFID.c: 519:                             addr = 0x09;
  3986   000456  0E09               	movlw	9
  3987   000458  6E25               	movwf	motor_RFID@addr^0,c
  3988                           
  3989                           ;TAD_RFID.c: 520:                             operation_pending = 1;
  3990   00045A  0E01               	movlw	1
  3991   00045C  6E26               	movwf	motor_RFID@operation_pending^0,c
  3992                           
  3993                           ;TAD_RFID.c: 521:                             substate = 20;
  3994   00045E  0E14               	movlw	20
  3995   000460  6E33               	movwf	motor_RFID@substate^0,c
  3996   000462  0012               	return	
  3997   000464                     l4031:
  3998                           
  3999                           ;TAD_RFID.c: 525:                         if (tempRegValue == 0xFF) {
  4000   000464  282A               	incf	motor_RFID@tempRegValue^0,w,c
  4001   000466  B4D8               	btfsc	status,2,c
  4002   000468  D6C0               	goto	l395
  4003                           
  4004                           ;TAD_RFID.c: 528:                             UID[1] = tempRegValue;
  4005   00046A  C02A  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4006                           
  4007                           ;TAD_RFID.c: 529:                             addr = 0x09;
  4008   00046E  0E09               	movlw	9
  4009   000470  6E25               	movwf	motor_RFID@addr^0,c
  4010                           
  4011                           ;TAD_RFID.c: 530:                             operation_pending = 1;
  4012   000472  0E01               	movlw	1
  4013   000474  6E26               	movwf	motor_RFID@operation_pending^0,c
  4014                           
  4015                           ;TAD_RFID.c: 531:                             substate = 21;
  4016   000476  0E15               	movlw	21
  4017   000478  6E33               	movwf	motor_RFID@substate^0,c
  4018   00047A  0012               	return	
  4019   00047C                     l4037:
  4020                           
  4021                           ;TAD_RFID.c: 535:                         if (tempRegValue == 0xFF) {
  4022   00047C  282A               	incf	motor_RFID@tempRegValue^0,w,c
  4023   00047E  B4D8               	btfsc	status,2,c
  4024   000480  D6B4               	goto	l395
  4025                           
  4026                           ;TAD_RFID.c: 538:                             UID[2] = tempRegValue;
  4027   000482  C02A  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4028                           
  4029                           ;TAD_RFID.c: 539:                             addr = 0x09;
  4030   000486  0E09               	movlw	9
  4031   000488  6E25               	movwf	motor_RFID@addr^0,c
  4032                           
  4033                           ;TAD_RFID.c: 540:                             operation_pending = 1;
  4034   00048A  0E01               	movlw	1
  4035   00048C  6E26               	movwf	motor_RFID@operation_pending^0,c
  4036                           
  4037                           ;TAD_RFID.c: 541:                             substate = 22;
  4038   00048E  0E16               	movlw	22
  4039   000490  6E33               	movwf	motor_RFID@substate^0,c
  4040   000492  0012               	return	
  4041   000494                     l4043:
  4042                           
  4043                           ;TAD_RFID.c: 545:                         if (tempRegValue == 0xFF) {
  4044   000494  282A               	incf	motor_RFID@tempRegValue^0,w,c
  4045   000496  B4D8               	btfsc	status,2,c
  4046   000498  D6A8               	goto	l395
  4047                           
  4048                           ;TAD_RFID.c: 548:                             UID[3] = tempRegValue;
  4049   00049A  C02A  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4050                           
  4051                           ;TAD_RFID.c: 549:                             addr = 0x09;
  4052   00049E  0E09               	movlw	9
  4053   0004A0  6E25               	movwf	motor_RFID@addr^0,c
  4054                           
  4055                           ;TAD_RFID.c: 550:                             operation_pending = 1;
  4056   0004A2  0E01               	movlw	1
  4057   0004A4  6E26               	movwf	motor_RFID@operation_pending^0,c
  4058                           
  4059                           ;TAD_RFID.c: 551:                             substate = 23;
  4060   0004A6  0E17               	movlw	23
  4061   0004A8  6E33               	movwf	motor_RFID@substate^0,c
  4062   0004AA  0012               	return	
  4063   0004AC                     l4049:
  4064                           
  4065                           ;TAD_RFID.c: 555:                         if (tempRegValue == 0xFF) {
  4066   0004AC  282A               	incf	motor_RFID@tempRegValue^0,w,c
  4067   0004AE  B4D8               	btfsc	status,2,c
  4068   0004B0  D69C               	goto	l395
  4069                           
  4070                           ;TAD_RFID.c: 558:                             UID[4] = tempRegValue;
  4071   0004B2  C02A  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4072                           
  4073                           ;TAD_RFID.c: 559:                             UID[5] = 0;
  4074   0004B6  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4075                           
  4076                           ;TAD_RFID.c: 560:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4077   0004B8  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4078   0004BA  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4079   0004BC  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4080   0004BE  1801               	xorwf	motor_RFID@UID^0,w,c
  4081   0004C0  6E2C               	movwf	motor_RFID@checksum^0,c
  4082                           
  4083                           ;TAD_RFID.c: 561:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4084   0004C2  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4085   0004C4  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4086   0004C6  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4087   0004C8  1001               	iorwf	motor_RFID@UID^0,w,c
  4088   0004CA  0900               	iorlw	0
  4089   0004CC  A4D8               	btfss	status,2,c
  4090   0004CE  D002               	goto	u3040
  4091   0004D0  0E01               	movlw	1
  4092   0004D2  D001               	goto	u3050
  4093   0004D4                     u3040:
  4094   0004D4  0E00               	movlw	0
  4095   0004D6                     u3050:
  4096   0004D6  6E2B               	movwf	motor_RFID@allZero^0,c
  4097                           
  4098                           ;TAD_RFID.c: 562:                             substate = 24;
  4099   0004D8  0E18               	movlw	24
  4100   0004DA  6E33               	movwf	motor_RFID@substate^0,c
  4101   0004DC  0012               	return	
  4102   0004DE                     l4057:
  4103                           
  4104                           ;TAD_RFID.c: 566:                         if (checksum != UID[4] || allZero) {
  4105   0004DE  502C               	movf	motor_RFID@checksum^0,w,c
  4106   0004E0  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4107   0004E2  A4D8               	btfss	status,2,c
  4108   0004E4  D682               	goto	l395
  4109   0004E6  502B               	movf	motor_RFID@allZero^0,w,c
  4110   0004E8  A4D8               	btfss	status,2,c
  4111   0004EA  D67F               	goto	l395
  4112                           
  4113                           ;TAD_RFID.c: 569:                             char differentUID = 1;
  4114   0004EC  0E01               	movlw	1
  4115   0004EE  6E6E               	movwf	motor_RFID@differentUID^0,c
  4116                           
  4117                           ;TAD_RFID.c: 570:                             unsigned char currentUser[5];;TAD_RFID.c: 
      +                          571:                             getActualUID(currentUser, 0xFF);
  4118   0004F0  0E69               	movlw	low motor_RFID@currentUser
  4119   0004F2  6E4F               	movwf	getActualUID@UID^0,c
  4120   0004F4  0EFF               	movlw	255
  4121   0004F6  6E50               	movwf	getActualUID@userIndex^0,c
  4122   0004F8  EC69  F007         	call	_getActualUID	;wreg free
  4123                           
  4124                           ;TAD_RFID.c: 573:                             if(currentUser[0] != UID[0]) {
  4125   0004FC  5001               	movf	motor_RFID@UID^0,w,c
  4126   0004FE  1869               	xorwf	motor_RFID@currentUser^0,w,c
  4127   000500  B4D8               	btfsc	status,2,c
  4128   000502  D00B               	goto	l4069
  4129                           
  4130                           ;TAD_RFID.c: 574:                                 setCurrentUser(UID[0], UID[1], UID[2],
      +                           UID[3], UID[4]);
  4131   000504  C002  F062         	movff	motor_RFID@UID+1,setCurrentUser@UID1
  4132   000508  C003  F063         	movff	motor_RFID@UID+2,setCurrentUser@UID2
  4133   00050C  C004  F064         	movff	motor_RFID@UID+3,setCurrentUser@UID3
  4134   000510  C005  F065         	movff	motor_RFID@UID+4,setCurrentUser@UID4
  4135   000514  5001               	movf	motor_RFID@UID^0,w,c
  4136   000516  EC64  F00A         	call	_setCurrentUser
  4137   00051A                     l4069:
  4138                           
  4139                           ;TAD_RFID.c: 576:                             addr = 0x0D;
  4140   00051A  0E0D               	movlw	13
  4141   00051C  6E25               	movwf	motor_RFID@addr^0,c
  4142                           
  4143                           ;TAD_RFID.c: 577:                             value = 0x00;
  4144   00051E  6A24               	clrf	motor_RFID@value^0,c
  4145                           
  4146                           ;TAD_RFID.c: 578:                             operation_pending = 2;
  4147   000520  0E02               	movlw	2
  4148   000522  6E26               	movwf	motor_RFID@operation_pending^0,c
  4149                           
  4150                           ;TAD_RFID.c: 579:                             substate = 25;
  4151   000524  0E19               	movlw	25
  4152   000526  6E33               	movwf	motor_RFID@substate^0,c
  4153   000528  0012               	return	
  4154   00052A                     l4079:
  4155   00052A  5033               	movf	motor_RFID@substate^0,w,c
  4156                           
  4157                           ; Switch size 1, requested type "simple"
  4158                           ; Number of cases is 26, Range of values is 0 to 25
  4159                           ; switch strategies available:
  4160                           ; Name         Instructions Cycles
  4161                           ; simple_byte           79    40 (average)
  4162                           ;	Chosen strategy is simple_byte
  4163   00052C  0A00               	xorlw	0	; case 0
  4164   00052E  B4D8               	btfsc	status,2,c
  4165   000530  D6D2               	goto	l3905
  4166   000532  0A01               	xorlw	1	; case 1
  4167   000534  B4D8               	btfsc	status,2,c
  4168   000536  D6D7               	goto	l3909
  4169   000538  0A03               	xorlw	3	; case 2
  4170   00053A  B4D8               	btfsc	status,2,c
  4171   00053C  D6DF               	goto	l3911
  4172   00053E  0A01               	xorlw	1	; case 3
  4173   000540  B4D8               	btfsc	status,2,c
  4174   000542  D6E9               	goto	l3923
  4175   000544  0A07               	xorlw	7	; case 4
  4176   000546  B4D8               	btfsc	status,2,c
  4177   000548  D6EF               	goto	l3931
  4178   00054A  0A01               	xorlw	1	; case 5
  4179   00054C  B4D8               	btfsc	status,2,c
  4180   00054E  D6F3               	goto	l3933
  4181   000550  0A03               	xorlw	3	; case 6
  4182   000552  B4D8               	btfsc	status,2,c
  4183   000554  D6F8               	goto	l3945
  4184   000556  0A01               	xorlw	1	; case 7
  4185   000558  B4D8               	btfsc	status,2,c
  4186   00055A  D6FC               	goto	l3947
  4187   00055C  0A0F               	xorlw	15	; case 8
  4188   00055E  B4D8               	btfsc	status,2,c
  4189   000560  D706               	goto	l3959
  4190   000562  0A01               	xorlw	1	; case 9
  4191   000564  B4D8               	btfsc	status,2,c
  4192   000566  D70B               	goto	l3963
  4193   000568  0A03               	xorlw	3	; case 10
  4194   00056A  B4D8               	btfsc	status,2,c
  4195   00056C  D711               	goto	l3967
  4196   00056E  0A01               	xorlw	1	; case 11
  4197   000570  B4D8               	btfsc	status,2,c
  4198   000572  D717               	goto	l3971
  4199   000574  0A07               	xorlw	7	; case 12
  4200   000576  B4D8               	btfsc	status,2,c
  4201   000578  D5FD               	goto	l3845
  4202   00057A  0A01               	xorlw	1	; case 13
  4203   00057C  B4D8               	btfsc	status,2,c
  4204   00057E  D71A               	goto	l3975
  4205   000580  0A03               	xorlw	3	; case 14
  4206   000582  B4D8               	btfsc	status,2,c
  4207   000584  D71F               	goto	l435
  4208   000586  0A01               	xorlw	1	; case 15
  4209   000588  B4D8               	btfsc	status,2,c
  4210   00058A  D724               	goto	l3989
  4211   00058C  0A1F               	xorlw	31	; case 16
  4212   00058E  B4D8               	btfsc	status,2,c
  4213   000590  D736               	goto	l4001
  4214   000592  0A01               	xorlw	1	; case 17
  4215   000594  B4D8               	btfsc	status,2,c
  4216   000596  D740               	goto	l4013
  4217   000598  0A03               	xorlw	3	; case 18
  4218   00059A  B4D8               	btfsc	status,2,c
  4219   00059C  D744               	goto	l4015
  4220   00059E  0A01               	xorlw	1	; case 19
  4221   0005A0  B4D8               	btfsc	status,2,c
  4222   0005A2  D754               	goto	l4025
  4223   0005A4  0A07               	xorlw	7	; case 20
  4224   0005A6  B4D8               	btfsc	status,2,c
  4225   0005A8  D75D               	goto	l4031
  4226   0005AA  0A01               	xorlw	1	; case 21
  4227   0005AC  B4D8               	btfsc	status,2,c
  4228   0005AE  D766               	goto	l4037
  4229   0005B0  0A03               	xorlw	3	; case 22
  4230   0005B2  B4D8               	btfsc	status,2,c
  4231   0005B4  D76F               	goto	l4043
  4232   0005B6  0A01               	xorlw	1	; case 23
  4233   0005B8  B4D8               	btfsc	status,2,c
  4234   0005BA  D778               	goto	l4049
  4235   0005BC  0A0F               	xorlw	15	; case 24
  4236   0005BE  B4D8               	btfsc	status,2,c
  4237   0005C0  D78E               	goto	l4057
  4238   0005C2  0A01               	xorlw	1	; case 25
  4239   0005C4  A4D8               	btfss	status,2,c
  4240   0005C6  0012               	return	
  4241   0005C8  D610               	goto	l395
  4242   0005CA                     l4083:
  4243   0005CA  5034               	movf	motor_RFID@state^0,w,c
  4244                           
  4245                           ; Switch size 1, requested type "simple"
  4246                           ; Number of cases is 2, Range of values is 0 to 1
  4247                           ; switch strategies available:
  4248                           ; Name         Instructions Cycles
  4249                           ; simple_byte            7     4 (average)
  4250                           ;	Chosen strategy is simple_byte
  4251   0005CC  0A00               	xorlw	0	; case 0
  4252   0005CE  B4D8               	btfsc	status,2,c
  4253   0005D0  D64A               	goto	l3903
  4254   0005D2  0A01               	xorlw	1	; case 1
  4255   0005D4  A4D8               	btfss	status,2,c
  4256   0005D6  0012               	return	
  4257   0005D8  D7A8               	goto	l4079
  4258   0005DA                     __end_of_motor_RFID:
  4259                           	callstack 0
  4260                           
  4261 ;; *************** function _setCurrentUser *****************
  4262 ;; Defined at:
  4263 ;;		line 99 in file "TAD_DATOS.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  UID0            1    wreg     unsigned char 
  4266 ;;  UID1            1   20[COMRAM] unsigned char 
  4267 ;;  UID2            1   21[COMRAM] unsigned char 
  4268 ;;  UID3            1   22[COMRAM] unsigned char 
  4269 ;;  UID4            1   23[COMRAM] unsigned char 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  UID0            1   24[COMRAM] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1
  4281 ;;      Params:         4       0       0
  4282 ;;      Locals:         1       0       0
  4283 ;;      Temps:          0       0       0
  4284 ;;      Totals:         5       0       0
  4285 ;;Total ram usage:        5 bytes
  4286 ;; Hardware stack levels used: 1
  4287 ;; Hardware stack levels required when called: 8
  4288 ;; This function calls:
  4289 ;;		_checkUserUID
  4290 ;;		_printfUID
  4291 ;; This function is called by:
  4292 ;;		_motor_RFID
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text6
  4297   0014C8                     __ptext6:
  4298                           	callstack 0
  4299   0014C8                     _setCurrentUser:
  4300                           	callstack 21
  4301                           
  4302                           ;incstack = 0
  4303                           ;setCurrentUser@UID0 stored from wreg
  4304   0014C8  6E66               	movwf	setCurrentUser@UID0^0,c
  4305                           
  4306                           ;TAD_DATOS.c: 100:     currentUser[0] = UID0;
  4307   0014CA  C066  F03A         	movff	setCurrentUser@UID0,_currentUser
  4308                           
  4309                           ;TAD_DATOS.c: 101:     currentUser[1] = UID1;
  4310   0014CE  C062  F03B         	movff	setCurrentUser@UID1,_currentUser+1
  4311                           
  4312                           ;TAD_DATOS.c: 102:     currentUser[2] = UID2;
  4313   0014D2  C063  F03C         	movff	setCurrentUser@UID2,_currentUser+2
  4314                           
  4315                           ;TAD_DATOS.c: 103:     currentUser[3] = UID3;
  4316   0014D6  C064  F03D         	movff	setCurrentUser@UID3,_currentUser+3
  4317                           
  4318                           ;TAD_DATOS.c: 104:     currentUser[4] = UID4;
  4319   0014DA  C065  F03E         	movff	setCurrentUser@UID4,_currentUser+4
  4320                           
  4321                           ;TAD_DATOS.c: 105:     new_user = 1;
  4322   0014DE  0E01               	movlw	1
  4323   0014E0  6E18               	movwf	_new_user^0,c
  4324                           
  4325                           ;TAD_DATOS.c: 106:     index = checkUserUID();
  4326   0014E2  ECEF  F008         	call	_checkUserUID	;wreg free
  4327   0014E6  6E17               	movwf	_index^0,c
  4328                           
  4329                           ;TAD_DATOS.c: 107:     printfUID(currentUser, index);
  4330   0014E8  0E3A               	movlw	low _currentUser
  4331   0014EA  6E55               	movwf	printfUID@currentUser^0,c
  4332   0014EC  C017  F056         	movff	_index,printfUID@userIndex
  4333   0014F0  EC48  F004         	call	_printfUID	;wreg free
  4334   0014F4  0012               	return		;funcret
  4335   0014F6                     __end_of_setCurrentUser:
  4336                           	callstack 0
  4337                           
  4338 ;; *************** function _checkUserUID *****************
  4339 ;; Defined at:
  4340 ;;		line 80 in file "TAD_DATOS.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  j               1    7[COMRAM] unsigned char 
  4345 ;;  match           1    5[COMRAM] unsigned char 
  4346 ;;  i               1    6[COMRAM] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      unsigned char 
  4349 ;; Registers used:
  4350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1
  4356 ;;      Params:         0       0       0
  4357 ;;      Locals:         3       0       0
  4358 ;;      Temps:          4       0       0
  4359 ;;      Totals:         7       0       0
  4360 ;;Total ram usage:        7 bytes
  4361 ;; Hardware stack levels used: 1
  4362 ;; Hardware stack levels required when called: 3
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_setCurrentUser
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text7
  4371   0011DE                     __ptext7:
  4372                           	callstack 0
  4373   0011DE                     _checkUserUID:
  4374                           	callstack 25
  4375                           
  4376                           ;TAD_DATOS.c: 82:     if(!currentUser[0]) return 0;
  4377                           
  4378                           ;incstack = 0
  4379   0011DE  503A               	movf	_currentUser^0,w,c
  4380   0011E0  A4D8               	btfss	status,2,c
  4381   0011E2  D002               	goto	l752
  4382   0011E4                     u2050:
  4383   0011E4  0E00               	movlw	0
  4384   0011E6  0012               	return	
  4385   0011E8                     l752:
  4386                           
  4387                           ;TAD_DATOS.c: 85:     for(char i = 0; i < 4; i++) {
  4388   0011E8  6A54               	clrf	checkUserUID@i^0,c
  4389   0011EA                     l3177:
  4390                           
  4391                           ;TAD_DATOS.c: 86:         char match = 1;
  4392   0011EA  0E01               	movlw	1
  4393   0011EC  6E53               	movwf	checkUserUID@match^0,c
  4394                           
  4395                           ;TAD_DATOS.c: 87:         for(char j = 0; j < 5; j++) {
  4396   0011EE  6A55               	clrf	checkUserUID@j^0,c
  4397   0011F0                     l3185:
  4398                           
  4399                           ;TAD_DATOS.c: 88:             if(currentUser[j] != userUIDs[i][j]) {
  4400   0011F0  5054               	movf	checkUserUID@i^0,w,c
  4401   0011F2  0D10               	mullw	16
  4402   0011F4  0E00               	movlw	low _userUIDs
  4403   0011F6  24F3               	addwf	243,w,c
  4404   0011F8  6E4F               	movwf	??_checkUserUID^0,c
  4405   0011FA  0E01               	movlw	high _userUIDs
  4406   0011FC  20F4               	addwfc	prodh,w,c
  4407   0011FE  6E50               	movwf	(??_checkUserUID+1)^0,c
  4408   001200  5055               	movf	checkUserUID@j^0,w,c
  4409   001202  244F               	addwf	??_checkUserUID^0,w,c
  4410   001204  6ED9               	movwf	fsr2l,c
  4411   001206  0E00               	movlw	0
  4412   001208  2050               	addwfc	(??_checkUserUID+1)^0,w,c
  4413   00120A  6EDA               	movwf	fsr2h,c
  4414   00120C  5055               	movf	checkUserUID@j^0,w,c
  4415   00120E  0F3A               	addlw	low _currentUser
  4416   001210  6EE1               	movwf	fsr1l,c
  4417   001212  6AE2               	clrf	fsr1h,c
  4418   001214  50DE               	movf	postinc2,w,c
  4419   001216  18E6               	xorwf	postinc1,w,c
  4420   001218  B4D8               	btfsc	status,2,c
  4421   00121A  D002               	goto	l3189
  4422                           
  4423                           ;TAD_DATOS.c: 89:                 match = 0;
  4424   00121C  6A53               	clrf	checkUserUID@match^0,c
  4425                           
  4426                           ;TAD_DATOS.c: 90:                 break;
  4427   00121E  D004               	goto	u2070
  4428   001220                     l3189:
  4429                           
  4430                           ;TAD_DATOS.c: 92:         }
  4431   001220  2A55               	incf	checkUserUID@j^0,f,c
  4432   001222  0E04               	movlw	4
  4433   001224  6455               	cpfsgt	checkUserUID@j^0,c
  4434   001226  D7E4               	goto	l3185
  4435   001228                     u2070:
  4436                           
  4437                           ;TAD_DATOS.c: 93:         if(match) return i;
  4438   001228  5053               	movf	checkUserUID@match^0,w,c
  4439   00122A  B4D8               	btfsc	status,2,c
  4440   00122C  D002               	goto	l3199
  4441   00122E  5054               	movf	checkUserUID@i^0,w,c
  4442   001230  0012               	return	
  4443   001232                     l3199:
  4444                           
  4445                           ;TAD_DATOS.c: 94:     }
  4446   001232  2A54               	incf	checkUserUID@i^0,f,c
  4447   001234  0E03               	movlw	3
  4448   001236  6454               	cpfsgt	checkUserUID@i^0,c
  4449   001238  D7D8               	goto	l3177
  4450   00123A  D7D4               	goto	u2050
  4451   00123C                     __end_of_checkUserUID:
  4452                           	callstack 0
  4453                           
  4454 ;; *************** function _motorTerminal *****************
  4455 ;; Defined at:
  4456 ;;		line 131 in file "TAD_TERMINAL.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  buffer         20   20[COMRAM] unsigned char [20]
  4461 ;;  ptr             1   41[COMRAM] PTR unsigned char 
  4462 ;;		 -> motorTerminal@buffer(20), 
  4463 ;;  opcion          1   40[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1
  4473 ;;      Params:         0       0       0
  4474 ;;      Locals:        22       0       0
  4475 ;;      Temps:          0       0       0
  4476 ;;      Totals:        22       0       0
  4477 ;;Total ram usage:       22 bytes
  4478 ;; Hardware stack levels used: 1
  4479 ;; Hardware stack levels required when called: 8
  4480 ;; This function calls:
  4481 ;;		_Terminal_RXAvailable
  4482 ;;		_Terminal_ReceiveChar
  4483 ;;		_Terminal_SendChar
  4484 ;;		_getActualUID
  4485 ;;		_motor_SendString
  4486 ;;		_motor_StartSendString
  4487 ;;		_printfUID
  4488 ;;		_saveHourToData
  4489 ;; This function is called by:
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text8
  4495   0005DA                     __ptext8:
  4496                           	callstack 0
  4497   0005DA                     _motorTerminal:
  4498                           	callstack 22
  4499                           
  4500                           ;TAD_TERMINAL.c: 132:  static char state = 0;;TAD_TERMINAL.c: 133:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 134:  static char index = 0;;TAD_TERMINAL.c: 135:  st
      +                          atic unsigned char leds[6];;TAD_TERMINAL.c: 136:  static unsigned char currentUser[5];;T
      +                          AD_TERMINAL.c: 137:  static char userNumber = 0;;TAD_TERMINAL.c: 139:  if (sending_strin
      +                          g) {
  4501                           
  4502                           ;incstack = 0
  4503   0005DA  501D               	movf	_sending_string^0,w,c
  4504   0005DC  B4D8               	btfsc	status,2,c
  4505   0005DE  D135               	goto	l3753
  4506                           
  4507                           ;TAD_TERMINAL.c: 140:   if (motor_SendString() == 1) {
  4508   0005E0  EC1C  F008         	call	_motor_SendString	;wreg free
  4509   0005E4  06E8               	decf	wreg,f,c
  4510   0005E6  A4D8               	btfss	status,2,c
  4511   0005E8  0012               	return	
  4512                           
  4513                           ;TAD_TERMINAL.c: 141:    sending_string = 0;
  4514   0005EA  6A1D               	clrf	_sending_string^0,c
  4515                           
  4516                           ;TAD_TERMINAL.c: 142:   } else {
  4517   0005EC  D12E               	goto	l3753
  4518   0005EE                     l3577:
  4519                           
  4520                           ;TAD_TERMINAL.c: 149:    if (Terminal_RXAvailable() && Terminal_ReceiveChar() == 0x1B ||
      +                           hashtag_pressed) {
  4521   0005EE  EC26  F00B         	call	_Terminal_RXAvailable	;wreg free
  4522   0005F2  0900               	iorlw	0
  4523   0005F4  B4D8               	btfsc	status,2,c
  4524   0005F6  D005               	goto	u2520
  4525   0005F8  EC38  F00B         	call	_Terminal_ReceiveChar	;wreg free
  4526   0005FC  0A1B               	xorlw	27
  4527   0005FE  B4D8               	btfsc	status,2,c
  4528   000600  D003               	goto	u2530
  4529   000602                     u2520:
  4530   000602  501E               	movf	_hashtag_pressed^0,w,c
  4531   000604  B4D8               	btfsc	status,2,c
  4532   000606  0012               	return	
  4533   000608                     u2530:
  4534                           
  4535                           ;TAD_TERMINAL.c: 150:     motor_StartSendString("---------------\r\n");
  4536   000608  0EDB               	movlw	low STR_1
  4537   00060A  6E53               	movwf	motor_StartSendString@str^0,c
  4538   00060C  0E1F               	movlw	high STR_1
  4539   00060E  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4540   000610  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4541                           
  4542                           ;TAD_TERMINAL.c: 151:     sending_string = 1;
  4543   000614  0E01               	movlw	1
  4544   000616  6E1D               	movwf	_sending_string^0,c
  4545                           
  4546                           ;TAD_TERMINAL.c: 152:     state = 10;
  4547   000618  0E0A               	movlw	10
  4548   00061A  6E1C               	movwf	motorTerminal@state^0,c
  4549                           
  4550                           ;TAD_TERMINAL.c: 153:     hashtag_pressed = 0;
  4551   00061C  6A1E               	clrf	_hashtag_pressed^0,c
  4552   00061E  0012               	return	
  4553   000620                     l3591:
  4554                           
  4555                           ;TAD_TERMINAL.c: 158:    if (!sending_string) {
  4556   000620  501D               	movf	_sending_string^0,w,c
  4557   000622  A4D8               	btfss	status,2,c
  4558   000624  0012               	return	
  4559                           
  4560                           ;TAD_TERMINAL.c: 159:     motor_StartSendString("Menú principal\r\n---------------\r\nTr
      +                          ia una opció:\r\n");
  4561   000626  0E24               	movlw	low STR_2
  4562   000628  6E53               	movwf	motor_StartSendString@str^0,c
  4563   00062A  0E1F               	movlw	high STR_2
  4564   00062C  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4565   00062E  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4566                           
  4567                           ;TAD_TERMINAL.c: 160:     sending_string = 1;
  4568   000632  0E01               	movlw	1
  4569   000634  6E1D               	movwf	_sending_string^0,c
  4570                           
  4571                           ;TAD_TERMINAL.c: 161:     state = 13;
  4572   000636  0E0D               	movlw	13
  4573   000638  6E1C               	movwf	motorTerminal@state^0,c
  4574   00063A  0012               	return	
  4575   00063C                     l3599:
  4576                           
  4577                           ;TAD_TERMINAL.c: 166:    if (!sending_string) {
  4578   00063C  501D               	movf	_sending_string^0,w,c
  4579   00063E  A4D8               	btfss	status,2,c
  4580   000640  0012               	return	
  4581                           
  4582                           ;TAD_TERMINAL.c: 167:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpció: ");
  4583   000642  0EC6               	movlw	low STR_3
  4584   000644  6E53               	movwf	motor_StartSendString@str^0,c
  4585   000646  0E1E               	movlw	high STR_3
  4586   000648  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4587   00064A  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4588                           
  4589                           ;TAD_TERMINAL.c: 168:     sending_string = 1;
  4590   00064E  0E01               	movlw	1
  4591   000650  6E1D               	movwf	_sending_string^0,c
  4592                           
  4593                           ;TAD_TERMINAL.c: 169:     state = 1;
  4594   000652  0E01               	movlw	1
  4595   000654  6E1C               	movwf	motorTerminal@state^0,c
  4596   000656  0012               	return	
  4597   000658                     l3607:
  4598                           
  4599                           ;TAD_TERMINAL.c: 174:    if(Terminal_RXAvailable()) {
  4600   000658  EC26  F00B         	call	_Terminal_RXAvailable	;wreg free
  4601   00065C  0900               	iorlw	0
  4602   00065E  B4D8               	btfsc	status,2,c
  4603   000660  0012               	return	
  4604                           
  4605                           ;TAD_TERMINAL.c: 175:     char opcion = Terminal_ReceiveChar();
  4606   000662  EC38  F00B         	call	_Terminal_ReceiveChar	;wreg free
  4607   000666  6E76               	movwf	motorTerminal@opcion^0,c
  4608                           
  4609                           ;TAD_TERMINAL.c: 176:     if (opcion >= '1' && opcion <= '3') {
  4610   000668  0E30               	movlw	48
  4611   00066A  6476               	cpfsgt	motorTerminal@opcion^0,c
  4612   00066C  D011               	goto	l3621
  4613   00066E  0E34               	movlw	52
  4614   000670  6076               	cpfslt	motorTerminal@opcion^0,c
  4615   000672  D00E               	goto	l3621
  4616                           
  4617                           ;TAD_TERMINAL.c: 177:      motor_StartSendString("\r\n");
  4618   000674  0EEA               	movlw	low (STR_1+15)
  4619   000676  6E53               	movwf	motor_StartSendString@str^0,c
  4620   000678  0E1F               	movlw	high (STR_1+15)
  4621   00067A  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4622   00067C  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4623                           
  4624                           ;TAD_TERMINAL.c: 178:      sending_string = 1;
  4625   000680  0E01               	movlw	1
  4626   000682  6E1D               	movwf	_sending_string^0,c
  4627                           
  4628                           ;TAD_TERMINAL.c: 179:      state = (opcion - '1') * 10 + 20;
  4629   000684  5076               	movf	motorTerminal@opcion^0,w,c
  4630   000686  0D0A               	mullw	10
  4631   000688  50F3               	movf	243,w,c
  4632   00068A  0F2A               	addlw	42
  4633   00068C  6E1C               	movwf	motorTerminal@state^0,c
  4634                           
  4635                           ;TAD_TERMINAL.c: 180:     } else {
  4636   00068E  0012               	return	
  4637   000690                     l3621:
  4638                           
  4639                           ;TAD_TERMINAL.c: 181:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  4640   000690  0E78               	movlw	low STR_5
  4641   000692  6E53               	movwf	motor_StartSendString@str^0,c
  4642   000694  0E1F               	movlw	high STR_5
  4643   000696  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4644   000698  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4645   00069C                     l3623:
  4646                           
  4647                           ;TAD_TERMINAL.c: 182:      sending_string = 1;
  4648   00069C  0E01               	movlw	1
  4649   00069E  6E1D               	movwf	_sending_string^0,c
  4650   0006A0                     l3625:
  4651                           
  4652                           ;TAD_TERMINAL.c: 183:      state = 0;
  4653   0006A0  6A1C               	clrf	motorTerminal@state^0,c
  4654   0006A2  0012               	return	
  4655   0006A4                     l3627:
  4656                           
  4657                           ;TAD_TERMINAL.c: 189:    if (!sending_string) {
  4658   0006A4  501D               	movf	_sending_string^0,w,c
  4659   0006A6  A4D8               	btfss	status,2,c
  4660   0006A8  0012               	return	
  4661                           
  4662                           ;TAD_TERMINAL.c: 190:     getActualUID(currentUser, 0xFF);
  4663   0006AA  0E3F               	movlw	low motorTerminal@currentUser
  4664   0006AC  6E4F               	movwf	getActualUID@UID^0,c
  4665   0006AE  0EFF               	movlw	255
  4666   0006B0  6E50               	movwf	getActualUID@userIndex^0,c
  4667   0006B2  EC69  F007         	call	_getActualUID	;wreg free
  4668                           
  4669                           ;TAD_TERMINAL.c: 191:     if (currentUser[0]) {
  4670   0006B6  503F               	movf	motorTerminal@currentUser^0,w,c
  4671   0006B8  B4D8               	btfsc	status,2,c
  4672   0006BA  D007               	goto	l3635
  4673                           
  4674                           ;TAD_TERMINAL.c: 193:      printfUID(currentUser, 0xFF);
  4675   0006BC  0E3F               	movlw	low motorTerminal@currentUser
  4676   0006BE  6E55               	movwf	printfUID@currentUser^0,c
  4677   0006C0  0EFF               	movlw	255
  4678   0006C2  6E56               	movwf	printfUID@userIndex^0,c
  4679   0006C4  EC48  F004         	call	_printfUID	;wreg free
  4680                           
  4681                           ;TAD_TERMINAL.c: 194:     } else {
  4682   0006C8  D008               	goto	l3639
  4683   0006CA                     l3635:
  4684                           
  4685                           ;TAD_TERMINAL.c: 195:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  4686   0006CA  0E57               	movlw	low STR_6
  4687   0006CC  6E53               	movwf	motor_StartSendString@str^0,c
  4688   0006CE  0E1F               	movlw	high STR_6
  4689   0006D0  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4690   0006D2  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4691                           
  4692                           ;TAD_TERMINAL.c: 196:      sending_string = 1;
  4693   0006D6  0E01               	movlw	1
  4694   0006D8  6E1D               	movwf	_sending_string^0,c
  4695   0006DA                     l3639:
  4696                           
  4697                           ;TAD_TERMINAL.c: 198:     state = 25;
  4698   0006DA  0E19               	movlw	25
  4699   0006DC  6E1C               	movwf	motorTerminal@state^0,c
  4700   0006DE  0012               	return	
  4701   0006E0                     l3641:
  4702                           
  4703                           ;TAD_TERMINAL.c: 203:    if (!sending_string) {
  4704   0006E0  501D               	movf	_sending_string^0,w,c
  4705   0006E2  A4D8               	btfss	status,2,c
  4706   0006E4  0012               	return	
  4707                           
  4708                           ;TAD_TERMINAL.c: 204:     motor_StartSendString("\r\n");
  4709   0006E6  0EEA               	movlw	low (STR_1+15)
  4710   0006E8  6E53               	movwf	motor_StartSendString@str^0,c
  4711   0006EA  0E1F               	movlw	high (STR_1+15)
  4712   0006EC  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4713   0006EE  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4714   0006F2  D7D4               	goto	l3623
  4715   0006F4                     l3649:
  4716                           
  4717                           ;TAD_TERMINAL.c: 211:    if (!sending_string) {
  4718   0006F4  501D               	movf	_sending_string^0,w,c
  4719   0006F6  A4D8               	btfss	status,2,c
  4720   0006F8  0012               	return	
  4721                           
  4722                           ;TAD_TERMINAL.c: 212:     motor_StartSendString("Configuracions:\r\n");
  4723   0006FA  0EED               	movlw	low STR_8
  4724   0006FC  6E53               	movwf	motor_StartSendString@str^0,c
  4725   0006FE  0E1F               	movlw	high STR_8
  4726   000700  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4727   000702  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4728                           
  4729                           ;TAD_TERMINAL.c: 213:     sending_string = 1;
  4730   000706  0E01               	movlw	1
  4731   000708  6E1D               	movwf	_sending_string^0,c
  4732                           
  4733                           ;TAD_TERMINAL.c: 214:     userNumber = 0;
  4734   00070A  6A1A               	clrf	motorTerminal@userNumber^0,c
  4735   00070C                     l3657:
  4736                           
  4737                           ;TAD_TERMINAL.c: 215:     state = 31;
  4738   00070C  0E1F               	movlw	31
  4739   00070E  6E1C               	movwf	motorTerminal@state^0,c
  4740   000710  0012               	return	
  4741   000712                     l3659:
  4742                           
  4743                           ;TAD_TERMINAL.c: 220:    if (!sending_string) {
  4744   000712  501D               	movf	_sending_string^0,w,c
  4745   000714  A4D8               	btfss	status,2,c
  4746   000716  0012               	return	
  4747                           
  4748                           ;TAD_TERMINAL.c: 221:     if (userNumber < 4) {
  4749   000718  0E04               	movlw	4
  4750   00071A  601A               	cpfslt	motorTerminal@userNumber^0,c
  4751   00071C  D7C1               	goto	l3625
  4752                           
  4753                           ;TAD_TERMINAL.c: 223:      char buffer[20];;TAD_TERMINAL.c: 224:      char *ptr = buffer
      +                          ;
  4754   00071E  0E62               	movlw	low motorTerminal@buffer
  4755   000720  6E77               	movwf	motorTerminal@ptr^0,c
  4756                           
  4757                           ;TAD_TERMINAL.c: 225:      *ptr++ = 'U';
  4758   000722  5077               	movf	motorTerminal@ptr^0,w,c
  4759   000724  6ED9               	movwf	fsr2l,c
  4760   000726  6ADA               	clrf	fsr2h,c
  4761   000728  0E55               	movlw	85
  4762   00072A  6EDF               	movwf	indf2,c
  4763   00072C  2A77               	incf	motorTerminal@ptr^0,f,c
  4764                           
  4765                           ;TAD_TERMINAL.c: 226:      *ptr++ = 's';
  4766   00072E  5077               	movf	motorTerminal@ptr^0,w,c
  4767   000730  6ED9               	movwf	fsr2l,c
  4768   000732  6ADA               	clrf	fsr2h,c
  4769   000734  0E73               	movlw	115
  4770   000736  6EDF               	movwf	indf2,c
  4771   000738  2A77               	incf	motorTerminal@ptr^0,f,c
  4772                           
  4773                           ;TAD_TERMINAL.c: 227:      *ptr++ = 'u';
  4774   00073A  5077               	movf	motorTerminal@ptr^0,w,c
  4775   00073C  6ED9               	movwf	fsr2l,c
  4776   00073E  6ADA               	clrf	fsr2h,c
  4777   000740  0E75               	movlw	117
  4778   000742  6EDF               	movwf	indf2,c
  4779   000744  2A77               	incf	motorTerminal@ptr^0,f,c
  4780                           
  4781                           ;TAD_TERMINAL.c: 228:      *ptr++ = 'a';
  4782   000746  5077               	movf	motorTerminal@ptr^0,w,c
  4783   000748  6ED9               	movwf	fsr2l,c
  4784   00074A  6ADA               	clrf	fsr2h,c
  4785   00074C  0E61               	movlw	97
  4786   00074E  6EDF               	movwf	indf2,c
  4787   000750  2A77               	incf	motorTerminal@ptr^0,f,c
  4788                           
  4789                           ;TAD_TERMINAL.c: 229:      *ptr++ = 'r';
  4790   000752  5077               	movf	motorTerminal@ptr^0,w,c
  4791   000754  6ED9               	movwf	fsr2l,c
  4792   000756  6ADA               	clrf	fsr2h,c
  4793   000758  0E72               	movlw	114
  4794   00075A  6EDF               	movwf	indf2,c
  4795   00075C  2A77               	incf	motorTerminal@ptr^0,f,c
  4796                           
  4797                           ;TAD_TERMINAL.c: 230:      *ptr++ = 'i';
  4798   00075E  5077               	movf	motorTerminal@ptr^0,w,c
  4799   000760  6ED9               	movwf	fsr2l,c
  4800   000762  6ADA               	clrf	fsr2h,c
  4801   000764  0E69               	movlw	105
  4802   000766  6EDF               	movwf	indf2,c
  4803   000768  2A77               	incf	motorTerminal@ptr^0,f,c
  4804                           
  4805                           ;TAD_TERMINAL.c: 231:      *ptr++ = ' ';
  4806   00076A  5077               	movf	motorTerminal@ptr^0,w,c
  4807   00076C  6ED9               	movwf	fsr2l,c
  4808   00076E  6ADA               	clrf	fsr2h,c
  4809   000770  0E20               	movlw	32
  4810   000772  6EDF               	movwf	indf2,c
  4811   000774  2A77               	incf	motorTerminal@ptr^0,f,c
  4812                           
  4813                           ;TAD_TERMINAL.c: 232:      *ptr++ = '1' + userNumber;
  4814   000776  5077               	movf	motorTerminal@ptr^0,w,c
  4815   000778  6ED9               	movwf	fsr2l,c
  4816   00077A  6ADA               	clrf	fsr2h,c
  4817   00077C  501A               	movf	motorTerminal@userNumber^0,w,c
  4818   00077E  0F31               	addlw	49
  4819   000780  6EDF               	movwf	indf2,c
  4820   000782  2A77               	incf	motorTerminal@ptr^0,f,c
  4821                           
  4822                           ;TAD_TERMINAL.c: 233:      *ptr++ = ':';
  4823   000784  5077               	movf	motorTerminal@ptr^0,w,c
  4824   000786  6ED9               	movwf	fsr2l,c
  4825   000788  6ADA               	clrf	fsr2h,c
  4826   00078A  0E3A               	movlw	58
  4827   00078C  6EDF               	movwf	indf2,c
  4828   00078E  2A77               	incf	motorTerminal@ptr^0,f,c
  4829                           
  4830                           ;TAD_TERMINAL.c: 234:      *ptr++ = '\r';
  4831   000790  5077               	movf	motorTerminal@ptr^0,w,c
  4832   000792  6ED9               	movwf	fsr2l,c
  4833   000794  6ADA               	clrf	fsr2h,c
  4834   000796  0E0D               	movlw	13
  4835   000798  6EDF               	movwf	indf2,c
  4836   00079A  2A77               	incf	motorTerminal@ptr^0,f,c
  4837                           
  4838                           ;TAD_TERMINAL.c: 235:      *ptr++ = '\n';
  4839   00079C  5077               	movf	motorTerminal@ptr^0,w,c
  4840   00079E  6ED9               	movwf	fsr2l,c
  4841   0007A0  6ADA               	clrf	fsr2h,c
  4842   0007A2  0E0A               	movlw	10
  4843   0007A4  6EDF               	movwf	indf2,c
  4844   0007A6  2A77               	incf	motorTerminal@ptr^0,f,c
  4845                           
  4846                           ;TAD_TERMINAL.c: 236:      *ptr = '\0';
  4847   0007A8  5077               	movf	motorTerminal@ptr^0,w,c
  4848   0007AA  6ED9               	movwf	fsr2l,c
  4849   0007AC  6ADA               	clrf	fsr2h,c
  4850   0007AE  6ADF               	clrf	indf2,c
  4851                           
  4852                           ;TAD_TERMINAL.c: 238:      motor_StartSendString(buffer);
  4853   0007B0  0E62               	movlw	low motorTerminal@buffer
  4854   0007B2  6E53               	movwf	motor_StartSendString@str^0,c
  4855   0007B4  6A54               	clrf	(motor_StartSendString@str+1)^0,c
  4856   0007B6  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4857                           
  4858                           ;TAD_TERMINAL.c: 239:      sending_string = 1;
  4859   0007BA  0E01               	movlw	1
  4860   0007BC  6E1D               	movwf	_sending_string^0,c
  4861                           
  4862                           ;TAD_TERMINAL.c: 240:      state = 32;
  4863   0007BE  0E20               	movlw	32
  4864   0007C0  6E1C               	movwf	motorTerminal@state^0,c
  4865                           
  4866                           ;TAD_TERMINAL.c: 241:     } else {
  4867   0007C2  0012               	return	
  4868   0007C4                     l3717:
  4869                           
  4870                           ;TAD_TERMINAL.c: 248:    if (!sending_string) {
  4871   0007C4  501D               	movf	_sending_string^0,w,c
  4872   0007C6  A4D8               	btfss	status,2,c
  4873   0007C8  0012               	return	
  4874                           
  4875                           ;TAD_TERMINAL.c: 250:     getActualUID(currentUser, userNumber);
  4876   0007CA  0E3F               	movlw	low motorTerminal@currentUser
  4877   0007CC  6E4F               	movwf	getActualUID@UID^0,c
  4878   0007CE  C01A  F050         	movff	motorTerminal@userNumber,getActualUID@userIndex
  4879   0007D2  EC69  F007         	call	_getActualUID	;wreg free
  4880                           
  4881                           ;TAD_TERMINAL.c: 252:     printfUID(currentUser, userNumber);
  4882   0007D6  0E3F               	movlw	low motorTerminal@currentUser
  4883   0007D8  6E55               	movwf	printfUID@currentUser^0,c
  4884   0007DA  C01A  F056         	movff	motorTerminal@userNumber,printfUID@userIndex
  4885   0007DE  EC48  F004         	call	_printfUID	;wreg free
  4886                           
  4887                           ;TAD_TERMINAL.c: 254:     userNumber++;
  4888   0007E2  2A1A               	incf	motorTerminal@userNumber^0,f,c
  4889   0007E4  D793               	goto	l3657
  4890   0007E6                     l3727:
  4891                           
  4892                           ;TAD_TERMINAL.c: 260:    if (!sending_string) {
  4893   0007E6  501D               	movf	_sending_string^0,w,c
  4894   0007E8  A4D8               	btfss	status,2,c
  4895   0007EA  0012               	return	
  4896                           
  4897                           ;TAD_TERMINAL.c: 261:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  4898   0007EC  0EBA               	movlw	low STR_9
  4899   0007EE  6E53               	movwf	motor_StartSendString@str^0,c
  4900   0007F0  0E1F               	movlw	high STR_9
  4901   0007F2  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4902   0007F4  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4903                           
  4904                           ;TAD_TERMINAL.c: 262:     sending_string = 1;
  4905   0007F8  0E01               	movlw	1
  4906   0007FA  6E1D               	movwf	_sending_string^0,c
  4907                           
  4908                           ;TAD_TERMINAL.c: 263:     state = 2;
  4909   0007FC  0E02               	movlw	2
  4910   0007FE  6E1C               	movwf	motorTerminal@state^0,c
  4911                           
  4912                           ;TAD_TERMINAL.c: 264:     index = 0;
  4913   000800  6A1B               	clrf	motorTerminal@index^0,c
  4914   000802  0012               	return	
  4915   000804                     l3737:
  4916                           
  4917                           ;TAD_TERMINAL.c: 269:    if(Terminal_RXAvailable()) {
  4918   000804  EC26  F00B         	call	_Terminal_RXAvailable	;wreg free
  4919   000808  0900               	iorlw	0
  4920   00080A  B4D8               	btfsc	status,2,c
  4921   00080C  0012               	return	
  4922                           
  4923                           ;TAD_TERMINAL.c: 270:     hour[index] = Terminal_ReceiveChar();
  4924   00080E  501B               	movf	motorTerminal@index^0,w,c
  4925   000810  0F7A               	addlw	low motorTerminal@hour
  4926   000812  6ED9               	movwf	fsr2l,c
  4927   000814  6ADA               	clrf	fsr2h,c
  4928   000816  EC38  F00B         	call	_Terminal_ReceiveChar	;wreg free
  4929   00081A  6EDF               	movwf	indf2,c
  4930                           
  4931                           ;TAD_TERMINAL.c: 271:     Terminal_SendChar(hour[index]);
  4932   00081C  501B               	movf	motorTerminal@index^0,w,c
  4933   00081E  0F7A               	addlw	low motorTerminal@hour
  4934   000820  6ED9               	movwf	fsr2l,c
  4935   000822  6ADA               	clrf	fsr2h,c
  4936   000824  50DF               	movf	indf2,w,c
  4937   000826  ECF2  F00A         	call	_Terminal_SendChar
  4938                           
  4939                           ;TAD_TERMINAL.c: 272:     if(++index == 4) {
  4940   00082A  2A1B               	incf	motorTerminal@index^0,f,c
  4941   00082C  0E04               	movlw	4
  4942   00082E  181B               	xorwf	motorTerminal@index^0,w,c
  4943   000830  A4D8               	btfss	status,2,c
  4944   000832  0012               	return	
  4945                           
  4946                           ;TAD_TERMINAL.c: 273:      saveHourToData(hour);
  4947   000834  0E7A               	movlw	low motorTerminal@hour
  4948   000836  6E4F               	movwf	saveHourToData@hour^0,c
  4949   000838  EC90  F00A         	call	_saveHourToData	;wreg free
  4950                           
  4951                           ;TAD_TERMINAL.c: 274:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  4952   00083C  0E99               	movlw	low STR_10
  4953   00083E  6E53               	movwf	motor_StartSendString@str^0,c
  4954   000840  0E1F               	movlw	high STR_10
  4955   000842  6E54               	movwf	(motor_StartSendString@str+1)^0,c
  4956   000844  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  4957   000848  D729               	goto	l3623
  4958   00084A                     l3753:
  4959   00084A  501C               	movf	motorTerminal@state^0,w,c
  4960                           
  4961                           ; Switch size 1, requested type "simple"
  4962                           ; Number of cases is 11, Range of values is 0 to 40
  4963                           ; switch strategies available:
  4964                           ; Name         Instructions Cycles
  4965                           ; simple_byte           34    18 (average)
  4966                           ;	Chosen strategy is simple_byte
  4967   00084C  0A00               	xorlw	0	; case 0
  4968   00084E  B4D8               	btfsc	status,2,c
  4969   000850  D6CE               	goto	l3577
  4970   000852  0A01               	xorlw	1	; case 1
  4971   000854  B4D8               	btfsc	status,2,c
  4972   000856  D700               	goto	l3607
  4973   000858  0A03               	xorlw	3	; case 2
  4974   00085A  B4D8               	btfsc	status,2,c
  4975   00085C  D7D3               	goto	l3737
  4976   00085E  0A08               	xorlw	8	; case 10
  4977   000860  B4D8               	btfsc	status,2,c
  4978   000862  D6DE               	goto	l3591
  4979   000864  0A07               	xorlw	7	; case 13
  4980   000866  B4D8               	btfsc	status,2,c
  4981   000868  D6E9               	goto	l3599
  4982   00086A  0A19               	xorlw	25	; case 20
  4983   00086C  B4D8               	btfsc	status,2,c
  4984   00086E  D71A               	goto	l3627
  4985   000870  0A0D               	xorlw	13	; case 25
  4986   000872  B4D8               	btfsc	status,2,c
  4987   000874  D735               	goto	l3641
  4988   000876  0A07               	xorlw	7	; case 30
  4989   000878  B4D8               	btfsc	status,2,c
  4990   00087A  D73C               	goto	l3649
  4991   00087C  0A01               	xorlw	1	; case 31
  4992   00087E  B4D8               	btfsc	status,2,c
  4993   000880  D748               	goto	l3659
  4994   000882  0A3F               	xorlw	63	; case 32
  4995   000884  B4D8               	btfsc	status,2,c
  4996   000886  D79E               	goto	l3717
  4997   000888  0A08               	xorlw	8	; case 40
  4998   00088A  A4D8               	btfss	status,2,c
  4999   00088C  0012               	return	
  5000   00088E  D7AB               	goto	l3727
  5001   000890                     __end_of_motorTerminal:
  5002                           	callstack 0
  5003                           
  5004 ;; *************** function _saveHourToData *****************
  5005 ;; Defined at:
  5006 ;;		line 74 in file "TAD_DATOS.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5009 ;;		 -> motorTerminal@hour(4), 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  i               1    2[COMRAM] unsigned char 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  1    wreg      void 
  5014 ;; Registers used:
  5015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1
  5021 ;;      Params:         1       0       0
  5022 ;;      Locals:         1       0       0
  5023 ;;      Temps:          0       0       0
  5024 ;;      Totals:         2       0       0
  5025 ;;Total ram usage:        2 bytes
  5026 ;; Hardware stack levels used: 1
  5027 ;; Hardware stack levels required when called: 3
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_motorTerminal
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text9
  5036   001520                     __ptext9:
  5037                           	callstack 0
  5038   001520                     _saveHourToData:
  5039                           	callstack 26
  5040                           
  5041                           ;TAD_DATOS.c: 75:     if(!hour) return;
  5042                           
  5043                           ;incstack = 0
  5044   001520  504F               	movf	saveHourToData@hour^0,w,c
  5045   001522  B4D8               	btfsc	status,2,c
  5046   001524  0012               	return	
  5047                           
  5048                           ;TAD_DATOS.c: 76:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5049   001526  6A50               	clrf	saveHourToData@i^0,c
  5050   001528                     l3425:
  5051   001528  504F               	movf	saveHourToData@hour^0,w,c
  5052   00152A  2450               	addwf	saveHourToData@i^0,w,c
  5053   00152C  6ED9               	movwf	fsr2l,c
  5054   00152E  6ADA               	clrf	fsr2h,c
  5055   001530  5050               	movf	saveHourToData@i^0,w,c
  5056   001532  0FF4               	addlw	low _currentTime
  5057   001534  6EE1               	movwf	fsr1l,c
  5058   001536  6AE2               	clrf	fsr1h,c
  5059   001538  CFDF FFE7          	movff	indf2,indf1
  5060   00153C  2A50               	incf	saveHourToData@i^0,f,c
  5061   00153E  0E03               	movlw	3
  5062   001540  6450               	cpfsgt	saveHourToData@i^0,c
  5063   001542  D7F2               	goto	l3425
  5064   001544  0012               	return	
  5065   001546                     __end_of_saveHourToData:
  5066                           	callstack 0
  5067                           
  5068 ;; *************** function _printfUID *****************
  5069 ;; Defined at:
  5070 ;;		line 68 in file "TAD_TERMINAL.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5073 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5074 ;;  userIndex       1    8[COMRAM] unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  val             1   17[COMRAM] unsigned char 
  5077 ;;  leds            6   11[COMRAM] unsigned char [6]
  5078 ;;  ptr             1   19[COMRAM] PTR unsigned char 
  5079 ;;		 -> printfUID@buffer(50), 
  5080 ;;  i               1   18[COMRAM] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1
  5090 ;;      Params:         2       0       0
  5091 ;;      Locals:         9       0       0
  5092 ;;      Temps:          2       0       0
  5093 ;;      Totals:        13       0       0
  5094 ;;Total ram usage:       13 bytes
  5095 ;; Hardware stack levels used: 1
  5096 ;; Hardware stack levels required when called: 7
  5097 ;; This function calls:
  5098 ;;		_getActualLeds
  5099 ;;		_motor_StartSendString
  5100 ;; This function is called by:
  5101 ;;		_motorTerminal
  5102 ;;		_setCurrentUser
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text10
  5107   000890                     __ptext10:
  5108                           	callstack 0
  5109   000890                     _printfUID:
  5110                           	callstack 21
  5111                           
  5112                           ;TAD_TERMINAL.c: 70:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 7
      +                          2:     static char buffer[50];;TAD_TERMINAL.c: 73:     char *ptr = buffer;
  5113                           
  5114                           ;incstack = 0
  5115   000890  0EB6               	movlw	low printfUID@buffer
  5116   000892  6E61               	movwf	printfUID@ptr^0,c
  5117                           
  5118                           ;TAD_TERMINAL.c: 74:     *ptr++ = '\t';
  5119   000894  5061               	movf	printfUID@ptr^0,w,c
  5120   000896  6ED9               	movwf	fsr2l,c
  5121   000898  6ADA               	clrf	fsr2h,c
  5122   00089A  0E09               	movlw	9
  5123   00089C  6EDF               	movwf	indf2,c
  5124   00089E  2A61               	incf	printfUID@ptr^0,f,c
  5125                           
  5126                           ;TAD_TERMINAL.c: 75:     *ptr++ = 'U';
  5127   0008A0  5061               	movf	printfUID@ptr^0,w,c
  5128   0008A2  6ED9               	movwf	fsr2l,c
  5129   0008A4  6ADA               	clrf	fsr2h,c
  5130   0008A6  0E55               	movlw	85
  5131   0008A8  6EDF               	movwf	indf2,c
  5132   0008AA  2A61               	incf	printfUID@ptr^0,f,c
  5133                           
  5134                           ;TAD_TERMINAL.c: 76:     *ptr++ = 'I';
  5135   0008AC  5061               	movf	printfUID@ptr^0,w,c
  5136   0008AE  6ED9               	movwf	fsr2l,c
  5137   0008B0  6ADA               	clrf	fsr2h,c
  5138   0008B2  0E49               	movlw	73
  5139   0008B4  6EDF               	movwf	indf2,c
  5140   0008B6  2A61               	incf	printfUID@ptr^0,f,c
  5141                           
  5142                           ;TAD_TERMINAL.c: 77:     *ptr++ = 'D';
  5143   0008B8  5061               	movf	printfUID@ptr^0,w,c
  5144   0008BA  6ED9               	movwf	fsr2l,c
  5145   0008BC  6ADA               	clrf	fsr2h,c
  5146   0008BE  0E44               	movlw	68
  5147   0008C0  6EDF               	movwf	indf2,c
  5148   0008C2  2A61               	incf	printfUID@ptr^0,f,c
  5149                           
  5150                           ;TAD_TERMINAL.c: 78:     *ptr++ = ':';
  5151   0008C4  5061               	movf	printfUID@ptr^0,w,c
  5152   0008C6  6ED9               	movwf	fsr2l,c
  5153   0008C8  6ADA               	clrf	fsr2h,c
  5154   0008CA  0E3A               	movlw	58
  5155   0008CC  6EDF               	movwf	indf2,c
  5156   0008CE  2A61               	incf	printfUID@ptr^0,f,c
  5157                           
  5158                           ;TAD_TERMINAL.c: 79:     *ptr++ = ' ';
  5159   0008D0  5061               	movf	printfUID@ptr^0,w,c
  5160   0008D2  6ED9               	movwf	fsr2l,c
  5161   0008D4  6ADA               	clrf	fsr2h,c
  5162   0008D6  0E20               	movlw	32
  5163   0008D8  6EDF               	movwf	indf2,c
  5164   0008DA  2A61               	incf	printfUID@ptr^0,f,c
  5165                           
  5166                           ;TAD_TERMINAL.c: 82:     char i;;TAD_TERMINAL.c: 83:     for(i = 0; i < 5; i++) {
  5167   0008DC  6A60               	clrf	printfUID@i^0,c
  5168   0008DE                     l3071:
  5169                           
  5170                           ;TAD_TERMINAL.c: 84:         if (currentUser == 0 || *currentUser == 0) {
  5171   0008DE  5055               	movf	printfUID@currentUser^0,w,c
  5172   0008E0  B4D8               	btfsc	status,2,c
  5173   0008E2  D006               	goto	u2000
  5174   0008E4  5055               	movf	printfUID@currentUser^0,w,c
  5175   0008E6  6ED9               	movwf	fsr2l,c
  5176   0008E8  6ADA               	clrf	fsr2h,c
  5177   0008EA  50DF               	movf	indf2,w,c
  5178   0008EC  A4D8               	btfss	status,2,c
  5179   0008EE  D00C               	goto	l3081
  5180   0008F0                     u2000:
  5181                           
  5182                           ;TAD_TERMINAL.c: 85:             *ptr++ = '0';
  5183   0008F0  5061               	movf	printfUID@ptr^0,w,c
  5184   0008F2  6ED9               	movwf	fsr2l,c
  5185   0008F4  6ADA               	clrf	fsr2h,c
  5186   0008F6  0E30               	movlw	48
  5187   0008F8  6EDF               	movwf	indf2,c
  5188   0008FA  2A61               	incf	printfUID@ptr^0,f,c
  5189                           
  5190                           ;TAD_TERMINAL.c: 86:             *ptr++ = '0';
  5191   0008FC  5061               	movf	printfUID@ptr^0,w,c
  5192   0008FE  6ED9               	movwf	fsr2l,c
  5193   000900  6ADA               	clrf	fsr2h,c
  5194   000902  0E30               	movlw	48
  5195   000904  6EDF               	movwf	indf2,c
  5196   000906  D027               	goto	l3089
  5197   000908                     l3081:
  5198                           
  5199                           ;TAD_TERMINAL.c: 88:             unsigned char val = currentUser[i];
  5200   000908  5055               	movf	printfUID@currentUser^0,w,c
  5201   00090A  2460               	addwf	printfUID@i^0,w,c
  5202   00090C  6ED9               	movwf	fsr2l,c
  5203   00090E  6ADA               	clrf	fsr2h,c
  5204   000910  50DF               	movf	indf2,w,c
  5205   000912  6E5F               	movwf	printfUID@val^0,c
  5206                           
  5207                           ;TAD_TERMINAL.c: 89:             *ptr++ = hex[val >> 4];
  5208   000914  385F               	swapf	printfUID@val^0,w,c
  5209   000916  0B0F               	andlw	15
  5210   000918  6E57               	movwf	??_printfUID^0,c
  5211   00091A  6A58               	clrf	(??_printfUID+1)^0,c
  5212   00091C  0EA9               	movlw	low printfUID@hex
  5213   00091E  2457               	addwf	??_printfUID^0,w,c
  5214   000920  6EF6               	movwf	tblptrl,c
  5215   000922  0E1E               	movlw	high printfUID@hex
  5216   000924  2058               	addwfc	(??_printfUID+1)^0,w,c
  5217   000926  6EF7               	movwf	tblptrh,c
  5218   000928                     	if	0	;There are less than 3 active tblptr bytes
  5219   000928                     	endif
  5220   000928  5061               	movf	printfUID@ptr^0,w,c
  5221   00092A  6ED9               	movwf	fsr2l,c
  5222   00092C  6ADA               	clrf	fsr2h,c
  5223   00092E  0008               	tblrd		*
  5224   000930  CFF5 FFDF          	movff	tablat,indf2
  5225   000934  2A61               	incf	printfUID@ptr^0,f,c
  5226                           
  5227                           ;TAD_TERMINAL.c: 90:             *ptr++ = hex[val & 0x0F];
  5228   000936  505F               	movf	printfUID@val^0,w,c
  5229   000938  0B0F               	andlw	15
  5230   00093A  6E57               	movwf	??_printfUID^0,c
  5231   00093C  6A58               	clrf	(??_printfUID+1)^0,c
  5232   00093E  0EA9               	movlw	low printfUID@hex
  5233   000940  2457               	addwf	??_printfUID^0,w,c
  5234   000942  6EF6               	movwf	tblptrl,c
  5235   000944  0E1E               	movlw	high printfUID@hex
  5236   000946  2058               	addwfc	(??_printfUID+1)^0,w,c
  5237   000948  6EF7               	movwf	tblptrh,c
  5238   00094A                     	if	0	;There are less than 3 active tblptr bytes
  5239   00094A                     	endif
  5240   00094A  5061               	movf	printfUID@ptr^0,w,c
  5241   00094C  6ED9               	movwf	fsr2l,c
  5242   00094E  6ADA               	clrf	fsr2h,c
  5243   000950  0008               	tblrd		*
  5244   000952  CFF5 FFDF          	movff	tablat,indf2
  5245   000956                     l3089:
  5246   000956  2A61               	incf	printfUID@ptr^0,f,c
  5247                           
  5248                           ;TAD_TERMINAL.c: 92:         if(i < 4) *ptr++ = '-';
  5249   000958  0E04               	movlw	4
  5250   00095A  6060               	cpfslt	printfUID@i^0,c
  5251   00095C  D006               	goto	l3097
  5252   00095E  5061               	movf	printfUID@ptr^0,w,c
  5253   000960  6ED9               	movwf	fsr2l,c
  5254   000962  6ADA               	clrf	fsr2h,c
  5255   000964  0E2D               	movlw	45
  5256   000966  6EDF               	movwf	indf2,c
  5257   000968  2A61               	incf	printfUID@ptr^0,f,c
  5258   00096A                     l3097:
  5259                           
  5260                           ;TAD_TERMINAL.c: 93:     }
  5261   00096A  2A60               	incf	printfUID@i^0,f,c
  5262   00096C  0E04               	movlw	4
  5263   00096E  6460               	cpfsgt	printfUID@i^0,c
  5264   000970  D7B6               	goto	l3071
  5265                           
  5266                           ;TAD_TERMINAL.c: 94:     *ptr++ = '\r';
  5267   000972  5061               	movf	printfUID@ptr^0,w,c
  5268   000974  6ED9               	movwf	fsr2l,c
  5269   000976  6ADA               	clrf	fsr2h,c
  5270   000978  0E0D               	movlw	13
  5271   00097A  6EDF               	movwf	indf2,c
  5272   00097C  2A61               	incf	printfUID@ptr^0,f,c
  5273                           
  5274                           ;TAD_TERMINAL.c: 95:     *ptr++ = '\n';
  5275   00097E  5061               	movf	printfUID@ptr^0,w,c
  5276   000980  6ED9               	movwf	fsr2l,c
  5277   000982  6ADA               	clrf	fsr2h,c
  5278   000984  0E0A               	movlw	10
  5279   000986  6EDF               	movwf	indf2,c
  5280   000988  2A61               	incf	printfUID@ptr^0,f,c
  5281                           
  5282                           ;TAD_TERMINAL.c: 96:     *ptr++ = '\t';
  5283   00098A  5061               	movf	printfUID@ptr^0,w,c
  5284   00098C  6ED9               	movwf	fsr2l,c
  5285   00098E  6ADA               	clrf	fsr2h,c
  5286   000990  0E09               	movlw	9
  5287   000992  6EDF               	movwf	indf2,c
  5288   000994  2A61               	incf	printfUID@ptr^0,f,c
  5289                           
  5290                           ;TAD_TERMINAL.c: 98:     unsigned char leds[6];;TAD_TERMINAL.c: 99:     getActualLeds(le
      +                          ds, userIndex);
  5291   000996  0E59               	movlw	low printfUID@leds
  5292   000998  6E4F               	movwf	getActualLeds@leds^0,c
  5293   00099A  C056  F050         	movff	printfUID@userIndex,getActualLeds@userIndex
  5294   00099E  EC4C  F009         	call	_getActualLeds	;wreg free
  5295                           
  5296                           ;TAD_TERMINAL.c: 103:     for(i = 0; i < 6; i++) {
  5297   0009A2  6A60               	clrf	printfUID@i^0,c
  5298   0009A4                     l3119:
  5299                           
  5300                           ;TAD_TERMINAL.c: 105:         *ptr++ = 'L';
  5301   0009A4  5061               	movf	printfUID@ptr^0,w,c
  5302   0009A6  6ED9               	movwf	fsr2l,c
  5303   0009A8  6ADA               	clrf	fsr2h,c
  5304   0009AA  0E4C               	movlw	76
  5305   0009AC  6EDF               	movwf	indf2,c
  5306   0009AE  2A61               	incf	printfUID@ptr^0,f,c
  5307                           
  5308                           ;TAD_TERMINAL.c: 106:         *ptr++ = '0' + i;
  5309   0009B0  5061               	movf	printfUID@ptr^0,w,c
  5310   0009B2  6ED9               	movwf	fsr2l,c
  5311   0009B4  6ADA               	clrf	fsr2h,c
  5312   0009B6  5060               	movf	printfUID@i^0,w,c
  5313   0009B8  0F30               	addlw	48
  5314   0009BA  6EDF               	movwf	indf2,c
  5315   0009BC  2A61               	incf	printfUID@ptr^0,f,c
  5316                           
  5317                           ;TAD_TERMINAL.c: 107:         *ptr++ = ':';
  5318   0009BE  5061               	movf	printfUID@ptr^0,w,c
  5319   0009C0  6ED9               	movwf	fsr2l,c
  5320   0009C2  6ADA               	clrf	fsr2h,c
  5321   0009C4  0E3A               	movlw	58
  5322   0009C6  6EDF               	movwf	indf2,c
  5323   0009C8  2A61               	incf	printfUID@ptr^0,f,c
  5324                           
  5325                           ;TAD_TERMINAL.c: 108:         *ptr++ = ' ';
  5326   0009CA  5061               	movf	printfUID@ptr^0,w,c
  5327   0009CC  6ED9               	movwf	fsr2l,c
  5328   0009CE  6ADA               	clrf	fsr2h,c
  5329   0009D0  0E20               	movlw	32
  5330   0009D2  6EDF               	movwf	indf2,c
  5331   0009D4  2A61               	incf	printfUID@ptr^0,f,c
  5332                           
  5333                           ;TAD_TERMINAL.c: 109:         *ptr++ = hex[leds[i] & 0x0F];
  5334   0009D6  5060               	movf	printfUID@i^0,w,c
  5335   0009D8  0F59               	addlw	low printfUID@leds
  5336   0009DA  6ED9               	movwf	fsr2l,c
  5337   0009DC  6ADA               	clrf	fsr2h,c
  5338   0009DE  50DF               	movf	indf2,w,c
  5339   0009E0  0B0F               	andlw	15
  5340   0009E2  6E57               	movwf	??_printfUID^0,c
  5341   0009E4  6A58               	clrf	(??_printfUID+1)^0,c
  5342   0009E6  0EA9               	movlw	low printfUID@hex
  5343   0009E8  2457               	addwf	??_printfUID^0,w,c
  5344   0009EA  6EF6               	movwf	tblptrl,c
  5345   0009EC  0E1E               	movlw	high printfUID@hex
  5346   0009EE  2058               	addwfc	(??_printfUID+1)^0,w,c
  5347   0009F0  6EF7               	movwf	tblptrh,c
  5348   0009F2                     	if	0	;There are less than 3 active tblptr bytes
  5349   0009F2                     	endif
  5350   0009F2  5061               	movf	printfUID@ptr^0,w,c
  5351   0009F4  6ED9               	movwf	fsr2l,c
  5352   0009F6  6ADA               	clrf	fsr2h,c
  5353   0009F8  0008               	tblrd		*
  5354   0009FA  CFF5 FFDF          	movff	tablat,indf2
  5355   0009FE  2A61               	incf	printfUID@ptr^0,f,c
  5356                           
  5357                           ;TAD_TERMINAL.c: 112:         if(i < 5) {
  5358   000A00  0E05               	movlw	5
  5359   000A02  6060               	cpfslt	printfUID@i^0,c
  5360   000A04  D012               	goto	l3151
  5361                           
  5362                           ;TAD_TERMINAL.c: 113:             *ptr++ = ' ';
  5363   000A06  5061               	movf	printfUID@ptr^0,w,c
  5364   000A08  6ED9               	movwf	fsr2l,c
  5365   000A0A  6ADA               	clrf	fsr2h,c
  5366   000A0C  0E20               	movlw	32
  5367   000A0E  6EDF               	movwf	indf2,c
  5368   000A10  2A61               	incf	printfUID@ptr^0,f,c
  5369                           
  5370                           ;TAD_TERMINAL.c: 114:             *ptr++ = '-';
  5371   000A12  5061               	movf	printfUID@ptr^0,w,c
  5372   000A14  6ED9               	movwf	fsr2l,c
  5373   000A16  6ADA               	clrf	fsr2h,c
  5374   000A18  0E2D               	movlw	45
  5375   000A1A  6EDF               	movwf	indf2,c
  5376   000A1C  2A61               	incf	printfUID@ptr^0,f,c
  5377                           
  5378                           ;TAD_TERMINAL.c: 115:             *ptr++ = ' ';
  5379   000A1E  5061               	movf	printfUID@ptr^0,w,c
  5380   000A20  6ED9               	movwf	fsr2l,c
  5381   000A22  6ADA               	clrf	fsr2h,c
  5382   000A24  0E20               	movlw	32
  5383   000A26  6EDF               	movwf	indf2,c
  5384   000A28  2A61               	incf	printfUID@ptr^0,f,c
  5385   000A2A                     l3151:
  5386                           
  5387                           ;TAD_TERMINAL.c: 117:     }
  5388   000A2A  2A60               	incf	printfUID@i^0,f,c
  5389   000A2C  0E05               	movlw	5
  5390   000A2E  6460               	cpfsgt	printfUID@i^0,c
  5391   000A30  D7B9               	goto	l3119
  5392                           
  5393                           ;TAD_TERMINAL.c: 120:     *ptr++ = '\r';
  5394   000A32  5061               	movf	printfUID@ptr^0,w,c
  5395   000A34  6ED9               	movwf	fsr2l,c
  5396   000A36  6ADA               	clrf	fsr2h,c
  5397   000A38  0E0D               	movlw	13
  5398   000A3A  6EDF               	movwf	indf2,c
  5399   000A3C  2A61               	incf	printfUID@ptr^0,f,c
  5400                           
  5401                           ;TAD_TERMINAL.c: 121:     *ptr++ = '\n';
  5402   000A3E  5061               	movf	printfUID@ptr^0,w,c
  5403   000A40  6ED9               	movwf	fsr2l,c
  5404   000A42  6ADA               	clrf	fsr2h,c
  5405   000A44  0E0A               	movlw	10
  5406   000A46  6EDF               	movwf	indf2,c
  5407   000A48  2A61               	incf	printfUID@ptr^0,f,c
  5408                           
  5409                           ;TAD_TERMINAL.c: 122:     *ptr = '\0';
  5410   000A4A  5061               	movf	printfUID@ptr^0,w,c
  5411   000A4C  6ED9               	movwf	fsr2l,c
  5412   000A4E  6ADA               	clrf	fsr2h,c
  5413   000A50  6ADF               	clrf	indf2,c
  5414                           
  5415                           ;TAD_TERMINAL.c: 125:     motor_StartSendString(buffer);
  5416   000A52  0EB6               	movlw	low printfUID@buffer
  5417   000A54  6E53               	movwf	motor_StartSendString@str^0,c
  5418   000A56  6A54               	clrf	(motor_StartSendString@str+1)^0,c
  5419   000A58  ECC2  F00A         	call	_motor_StartSendString	;wreg free
  5420                           
  5421                           ;TAD_TERMINAL.c: 126:     sending_string = 1;
  5422   000A5C  0E01               	movlw	1
  5423   000A5E  6E1D               	movwf	_sending_string^0,c
  5424   000A60  0012               	return		;funcret
  5425   000A62                     __end_of_printfUID:
  5426                           	callstack 0
  5427                           
  5428 ;; *************** function _motor_StartSendString *****************
  5429 ;; Defined at:
  5430 ;;		line 58 in file "TAD_TERMINAL.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  str             2    5[COMRAM] PTR const unsigned char 
  5433 ;;		 -> STR_10(33), STR_9(33), motorTerminal@buffer(20), STR_8(18), 
  5434 ;;		 -> STR_7(3), STR_6(33), STR_5(33), STR_4(3), 
  5435 ;;		 -> STR_3(94), STR_2(51), STR_1(18), printfUID@buffer(50), 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1
  5447 ;;      Params:         2       0       0
  5448 ;;      Locals:         0       0       0
  5449 ;;      Temps:          0       0       0
  5450 ;;      Totals:         2       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used: 1
  5453 ;; Hardware stack levels required when called: 6
  5454 ;; This function calls:
  5455 ;;		_motor_SendString
  5456 ;; This function is called by:
  5457 ;;		_printfUID
  5458 ;;		_motorTerminal
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text11
  5463   001584                     __ptext11:
  5464                           	callstack 0
  5465   001584                     _motor_StartSendString:
  5466                           	callstack 21
  5467                           
  5468                           ;TAD_TERMINAL.c: 59:  if (motor_SendString() == 1) {
  5469                           
  5470                           ;incstack = 0
  5471   001584  EC1C  F008         	call	_motor_SendString	;wreg free
  5472   001588  06E8               	decf	wreg,f,c
  5473   00158A  A4D8               	btfss	status,2,c
  5474   00158C  0012               	return	
  5475                           
  5476                           ;TAD_TERMINAL.c: 60:   str_ptr = str;
  5477   00158E  C053  F00B         	movff	motor_StartSendString@str,_str_ptr
  5478   001592  C054  F00C         	movff	motor_StartSendString@str+1,_str_ptr+1
  5479                           
  5480                           ;TAD_TERMINAL.c: 61:   state_str = 1;
  5481   001596  0E01               	movlw	1
  5482   001598  6E1F               	movwf	_state_str^0,c
  5483   00159A  0012               	return		;funcret
  5484   00159C                     __end_of_motor_StartSendString:
  5485                           	callstack 0
  5486                           
  5487 ;; *************** function _motor_SendString *****************
  5488 ;; Defined at:
  5489 ;;		line 44 in file "TAD_TERMINAL.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;		None
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      unsigned char 
  5496 ;; Registers used:
  5497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1
  5503 ;;      Params:         0       0       0
  5504 ;;      Locals:         0       0       0
  5505 ;;      Temps:          0       0       0
  5506 ;;      Totals:         0       0       0
  5507 ;;Total ram usage:        0 bytes
  5508 ;; Hardware stack levels used: 1
  5509 ;; Hardware stack levels required when called: 5
  5510 ;; This function calls:
  5511 ;;		_motor_SendChar
  5512 ;; This function is called by:
  5513 ;;		_motor_StartSendString
  5514 ;;		_motorTerminal
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text12
  5519   001038                     __ptext12:
  5520                           	callstack 0
  5521   001038                     _motor_SendString:
  5522                           	callstack 21
  5523                           
  5524                           ;TAD_TERMINAL.c: 45:     switch(state_str) {
  5525                           
  5526                           ;incstack = 0
  5527   001038  D030               	goto	l2913
  5528   00103A                     l2891:
  5529   00103A  0E01               	movlw	1
  5530   00103C  0012               	return	
  5531   00103E                     l2895:
  5532                           
  5533                           ;TAD_TERMINAL.c: 48:    if (!*str_ptr) {
  5534   00103E  C00B  FFF6         	movff	_str_ptr,tblptrl
  5535   001042  C00C  FFF7         	movff	_str_ptr+1,tblptrh
  5536   001046  6AF8               	clrf	tblptru,c
  5537   001048  0E01               	movlw	(high __ramtop+-1)
  5538   00104A  64F7               	cpfsgt	tblptrh,c
  5539   00104C  D003               	bra	u1827
  5540   00104E  0008               	tblrd		*
  5541   001050  50F5               	movf	tablat,w,c
  5542   001052  D005               	bra	u1820
  5543   001054                     u1827:
  5544   001054  CFF6 FFE1          	movff	tblptrl,fsr1l
  5545   001058  CFF7 FFE2          	movff	tblptrh,fsr1h
  5546   00105C  50E7               	movf	indf1,w,c
  5547   00105E                     u1820:
  5548   00105E  0900               	iorlw	0
  5549   001060  A4D8               	btfss	status,2,c
  5550   001062  D002               	goto	l2903
  5551                           
  5552                           ;TAD_TERMINAL.c: 49:     state_str = 0;
  5553   001064  6A1F               	clrf	_state_str^0,c
  5554   001066  D7E9               	goto	l2891
  5555   001068                     l2903:
  5556                           
  5557                           ;TAD_TERMINAL.c: 52:    if (motor_SendChar(*str_ptr)) str_ptr++;
  5558   001068  C00B  FFF6         	movff	_str_ptr,tblptrl
  5559   00106C  C00C  FFF7         	movff	_str_ptr+1,tblptrh
  5560   001070  6AF8               	clrf	tblptru,c
  5561   001072  0E01               	movlw	(high __ramtop+-1)
  5562   001074  64F7               	cpfsgt	tblptrh,c
  5563   001076  D003               	bra	u1847
  5564   001078  0008               	tblrd		*
  5565   00107A  50F5               	movf	tablat,w,c
  5566   00107C  D005               	bra	u1840
  5567   00107E                     u1847:
  5568   00107E  CFF6 FFE1          	movff	tblptrl,fsr1l
  5569   001082  CFF7 FFE2          	movff	tblptrh,fsr1h
  5570   001086  50E7               	movf	indf1,w,c
  5571   001088                     u1840:
  5572   001088  ECB5  F00A         	call	_motor_SendChar
  5573   00108C  0900               	iorlw	0
  5574   00108E  B4D8               	btfsc	status,2,c
  5575   001090  D002               	goto	l2907
  5576   001092  4A0B               	infsnz	_str_ptr^0,f,c
  5577   001094  2A0C               	incf	(_str_ptr+1)^0,f,c
  5578   001096                     l2907:
  5579                           
  5580                           ;TAD_TERMINAL.c: 53:    return 0;
  5581   001096  0E00               	movlw	0
  5582   001098  0012               	return	
  5583   00109A                     l2913:
  5584   00109A  501F               	movf	_state_str^0,w,c
  5585                           
  5586                           ; Switch size 1, requested type "simple"
  5587                           ; Number of cases is 2, Range of values is 0 to 1
  5588                           ; switch strategies available:
  5589                           ; Name         Instructions Cycles
  5590                           ; simple_byte            7     4 (average)
  5591                           ;	Chosen strategy is simple_byte
  5592   00109C  0A00               	xorlw	0	; case 0
  5593   00109E  B4D8               	btfsc	status,2,c
  5594   0010A0  D7CC               	goto	l2891
  5595   0010A2  0A01               	xorlw	1	; case 1
  5596   0010A4  B4D8               	btfsc	status,2,c
  5597   0010A6  D7CB               	goto	l2895
  5598   0010A8  D7F6               	goto	l2907
  5599   0010AA                     __end_of_motor_SendString:
  5600                           	callstack 0
  5601                           
  5602 ;; *************** function _motor_SendChar *****************
  5603 ;; Defined at:
  5604 ;;		line 37 in file "TAD_TERMINAL.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  c               1    wreg     unsigned char 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  c               1    4[COMRAM] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      unsigned char 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2, status,0, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1
  5618 ;;      Params:         0       0       0
  5619 ;;      Locals:         1       0       0
  5620 ;;      Temps:          0       0       0
  5621 ;;      Totals:         1       0       0
  5622 ;;Total ram usage:        1 bytes
  5623 ;; Hardware stack levels used: 1
  5624 ;; Hardware stack levels required when called: 4
  5625 ;; This function calls:
  5626 ;;		_Terminal_TXAvailable
  5627 ;; This function is called by:
  5628 ;;		_motor_SendString
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text13
  5633   00156A                     __ptext13:
  5634                           	callstack 0
  5635   00156A                     _motor_SendChar:
  5636                           	callstack 21
  5637                           
  5638                           ;incstack = 0
  5639                           ;motor_SendChar@c stored from wreg
  5640   00156A  6E52               	movwf	motor_SendChar@c^0,c
  5641                           
  5642                           ;TAD_TERMINAL.c: 38:  if (!Terminal_TXAvailable()) return 0;
  5643   00156C  ECFC  F00A         	call	_Terminal_TXAvailable	;wreg free
  5644   001570  504F               	movf	?_Terminal_TXAvailable^0,w,c
  5645   001572  1050               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5646   001574  A4D8               	btfss	status,2,c
  5647   001576  D002               	goto	l602
  5648   001578  0E00               	movlw	0
  5649   00157A  0012               	return	
  5650   00157C                     l602:
  5651                           
  5652                           ;TAD_TERMINAL.c: 39:  TXREG = c;
  5653   00157C  C052  FFAD         	movff	motor_SendChar@c,4013	;volatile
  5654                           
  5655                           ;TAD_TERMINAL.c: 40:  return 1;
  5656   001580  0E01               	movlw	1
  5657   001582  0012               	return		;funcret
  5658   001584                     __end_of_motor_SendChar:
  5659                           	callstack 0
  5660                           
  5661 ;; *************** function _getActualLeds *****************
  5662 ;; Defined at:
  5663 ;;		line 54 in file "TAD_DATOS.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  leds            1    1[COMRAM] PTR unsigned char 
  5666 ;;		 -> printfUID@leds(6), ActualLeds(6), 
  5667 ;;  userIndex       1    2[COMRAM] unsigned char 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               1    4[COMRAM] unsigned char 
  5670 ;;  i               1    3[COMRAM] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1
  5680 ;;      Params:         2       0       0
  5681 ;;      Locals:         2       0       0
  5682 ;;      Temps:          0       0       0
  5683 ;;      Totals:         4       0       0
  5684 ;;Total ram usage:        4 bytes
  5685 ;; Hardware stack levels used: 1
  5686 ;; Hardware stack levels required when called: 3
  5687 ;; This function calls:
  5688 ;;		Nothing
  5689 ;; This function is called by:
  5690 ;;		_printfUID
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text14
  5695   001298                     __ptext14:
  5696                           	callstack 0
  5697   001298                     _getActualLeds:
  5698                           	callstack 24
  5699                           
  5700                           ;TAD_DATOS.c: 55:     if(!leds) return;
  5701                           
  5702                           ;incstack = 0
  5703   001298  504F               	movf	getActualLeds@leds^0,w,c
  5704   00129A  B4D8               	btfsc	status,2,c
  5705   00129C  0012               	return	
  5706                           
  5707                           ;TAD_DATOS.c: 56:     if(userIndex == 20) {
  5708   00129E  0E14               	movlw	20
  5709   0012A0  1850               	xorwf	getActualLeds@userIndex^0,w,c
  5710   0012A2  A4D8               	btfss	status,2,c
  5711   0012A4  D013               	goto	l735
  5712                           
  5713                           ;TAD_DATOS.c: 58:         for(char i = 0; i < 6; i++) {
  5714   0012A6  6A51               	clrf	getActualLeds@i^0,c
  5715   0012A8                     l2951:
  5716                           
  5717                           ;TAD_DATOS.c: 59:             leds[i] = configurations[index][i];
  5718   0012A8  5017               	movf	_index^0,w,c
  5719   0012AA  0D06               	mullw	6
  5720   0012AC  50F3               	movf	243,w,c
  5721   0012AE  0F80               	addlw	low _configurations
  5722   0012B0  2451               	addwf	getActualLeds@i^0,w,c
  5723   0012B2  6ED9               	movwf	fsr2l,c
  5724   0012B4  6ADA               	clrf	fsr2h,c
  5725   0012B6  504F               	movf	getActualLeds@leds^0,w,c
  5726   0012B8  2451               	addwf	getActualLeds@i^0,w,c
  5727   0012BA  6EE1               	movwf	fsr1l,c
  5728   0012BC  6AE2               	clrf	fsr1h,c
  5729   0012BE  CFDF FFE7          	movff	indf2,indf1
  5730                           
  5731                           ;TAD_DATOS.c: 60:         }
  5732   0012C2  2A51               	incf	getActualLeds@i^0,f,c
  5733   0012C4  0E05               	movlw	5
  5734   0012C6  6451               	cpfsgt	getActualLeds@i^0,c
  5735   0012C8  D7EF               	goto	l2951
  5736   0012CA  0012               	return	
  5737   0012CC                     l735:
  5738                           
  5739                           ;TAD_DATOS.c: 63:         for(char i = 0; i < 6; i++) {
  5740   0012CC  6A52               	clrf	getActualLeds@i_865^0,c
  5741   0012CE                     l2961:
  5742                           
  5743                           ;TAD_DATOS.c: 64:             leds[i] = configurations[userIndex][i];
  5744   0012CE  5050               	movf	getActualLeds@userIndex^0,w,c
  5745   0012D0  0D06               	mullw	6
  5746   0012D2  50F3               	movf	243,w,c
  5747   0012D4  0F80               	addlw	low _configurations
  5748   0012D6  2452               	addwf	getActualLeds@i_865^0,w,c
  5749   0012D8  6ED9               	movwf	fsr2l,c
  5750   0012DA  6ADA               	clrf	fsr2h,c
  5751   0012DC  504F               	movf	getActualLeds@leds^0,w,c
  5752   0012DE  2452               	addwf	getActualLeds@i_865^0,w,c
  5753   0012E0  6EE1               	movwf	fsr1l,c
  5754   0012E2  6AE2               	clrf	fsr1h,c
  5755   0012E4  CFDF FFE7          	movff	indf2,indf1
  5756                           
  5757                           ;TAD_DATOS.c: 65:         }
  5758   0012E8  2A52               	incf	getActualLeds@i_865^0,f,c
  5759   0012EA  0E05               	movlw	5
  5760   0012EC  6452               	cpfsgt	getActualLeds@i_865^0,c
  5761   0012EE  D7EF               	goto	l2961
  5762   0012F0  0012               	return	
  5763   0012F2                     __end_of_getActualLeds:
  5764                           	callstack 0
  5765                           
  5766 ;; *************** function _getActualUID *****************
  5767 ;; Defined at:
  5768 ;;		line 34 in file "TAD_DATOS.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  UID             1    1[COMRAM] PTR unsigned char 
  5771 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  5772 ;;  userIndex       1    2[COMRAM] unsigned char 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  i               1    5[COMRAM] unsigned char 
  5775 ;;  i               1    6[COMRAM] unsigned char 
  5776 ;;  i               1    7[COMRAM] unsigned char 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1
  5786 ;;      Params:         2       0       0
  5787 ;;      Locals:         3       0       0
  5788 ;;      Temps:          2       0       0
  5789 ;;      Totals:         7       0       0
  5790 ;;Total ram usage:        7 bytes
  5791 ;; Hardware stack levels used: 1
  5792 ;; Hardware stack levels required when called: 3
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		_motor_RFID
  5797 ;;		_motorTerminal
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text15
  5802   000ED2                     __ptext15:
  5803                           	callstack 0
  5804   000ED2                     _getActualUID:
  5805                           	callstack 26
  5806                           
  5807                           ;TAD_DATOS.c: 35:     if(!UID) return;
  5808                           
  5809                           ;incstack = 0
  5810   000ED2  504F               	movf	getActualUID@UID^0,w,c
  5811   000ED4  B4D8               	btfsc	status,2,c
  5812   000ED6  0012               	return	
  5813                           
  5814                           ;TAD_DATOS.c: 36:     if (userIndex == 0xFF) {
  5815   000ED8  2850               	incf	getActualUID@userIndex^0,w,c
  5816   000EDA  A4D8               	btfss	status,2,c
  5817   000EDC  D01E               	goto	l721
  5818                           
  5819                           ;TAD_DATOS.c: 37:         if (currentUser[0]) {
  5820   000EDE  503A               	movf	_currentUser^0,w,c
  5821   000EE0  B4D8               	btfsc	status,2,c
  5822   000EE2  D010               	goto	l722
  5823                           
  5824                           ;TAD_DATOS.c: 38:             for(unsigned char i = 0; i < 5; i++) {
  5825   000EE4  6A54               	clrf	getActualUID@i^0,c
  5826   000EE6                     l3371:
  5827                           
  5828                           ;TAD_DATOS.c: 39:                 UID[i] = currentUser[i];
  5829   000EE6  5054               	movf	getActualUID@i^0,w,c
  5830   000EE8  0F3A               	addlw	low _currentUser
  5831   000EEA  6ED9               	movwf	fsr2l,c
  5832   000EEC  6ADA               	clrf	fsr2h,c
  5833   000EEE  504F               	movf	getActualUID@UID^0,w,c
  5834   000EF0  2454               	addwf	getActualUID@i^0,w,c
  5835   000EF2  6EE1               	movwf	fsr1l,c
  5836   000EF4  6AE2               	clrf	fsr1h,c
  5837   000EF6  CFDF FFE7          	movff	indf2,indf1
  5838                           
  5839                           ;TAD_DATOS.c: 40:             }
  5840   000EFA  2A54               	incf	getActualUID@i^0,f,c
  5841   000EFC  0E04               	movlw	4
  5842   000EFE  6454               	cpfsgt	getActualUID@i^0,c
  5843   000F00  D7F2               	goto	l3371
  5844   000F02  0012               	return	
  5845   000F04                     l722:
  5846                           
  5847                           ;TAD_DATOS.c: 42:             for(unsigned char i = 0; i < 5; i++) {
  5848   000F04  6A53               	clrf	getActualUID@i_859^0,c
  5849   000F06                     l3381:
  5850                           
  5851                           ;TAD_DATOS.c: 43:                 UID[i] = 0x00;
  5852   000F06  504F               	movf	getActualUID@UID^0,w,c
  5853   000F08  2453               	addwf	getActualUID@i_859^0,w,c
  5854   000F0A  6ED9               	movwf	fsr2l,c
  5855   000F0C  6ADA               	clrf	fsr2h,c
  5856   000F0E  6ADF               	clrf	indf2,c
  5857                           
  5858                           ;TAD_DATOS.c: 44:             }
  5859   000F10  2A53               	incf	getActualUID@i_859^0,f,c
  5860   000F12  0E04               	movlw	4
  5861   000F14  6453               	cpfsgt	getActualUID@i_859^0,c
  5862   000F16  D7F7               	goto	l3381
  5863   000F18  0012               	return	
  5864   000F1A                     l721:
  5865                           
  5866                           ;TAD_DATOS.c: 47:         for(unsigned char i = 0; i < 5; i++) {
  5867   000F1A  6A55               	clrf	getActualUID@i_860^0,c
  5868   000F1C                     l3391:
  5869                           
  5870                           ;TAD_DATOS.c: 48:             UID[i] = userUIDs[userIndex][i];
  5871   000F1C  5050               	movf	getActualUID@userIndex^0,w,c
  5872   000F1E  0D10               	mullw	16
  5873   000F20  0E00               	movlw	low _userUIDs
  5874   000F22  24F3               	addwf	243,w,c
  5875   000F24  6E51               	movwf	??_getActualUID^0,c
  5876   000F26  0E01               	movlw	high _userUIDs
  5877   000F28  20F4               	addwfc	prodh,w,c
  5878   000F2A  6E52               	movwf	(??_getActualUID+1)^0,c
  5879   000F2C  5055               	movf	getActualUID@i_860^0,w,c
  5880   000F2E  2451               	addwf	??_getActualUID^0,w,c
  5881   000F30  6ED9               	movwf	fsr2l,c
  5882   000F32  0E00               	movlw	0
  5883   000F34  2052               	addwfc	(??_getActualUID+1)^0,w,c
  5884   000F36  6EDA               	movwf	fsr2h,c
  5885   000F38  504F               	movf	getActualUID@UID^0,w,c
  5886   000F3A  2455               	addwf	getActualUID@i_860^0,w,c
  5887   000F3C  6EE1               	movwf	fsr1l,c
  5888   000F3E  6AE2               	clrf	fsr1h,c
  5889   000F40  CFDF FFE7          	movff	indf2,indf1
  5890                           
  5891                           ;TAD_DATOS.c: 49:         }
  5892   000F44  2A55               	incf	getActualUID@i_860^0,f,c
  5893   000F46  0E04               	movlw	4
  5894   000F48  6455               	cpfsgt	getActualUID@i_860^0,c
  5895   000F4A  D7E8               	goto	l3391
  5896   000F4C  0012               	return	
  5897   000F4E                     __end_of_getActualUID:
  5898                           	callstack 0
  5899                           
  5900 ;; *************** function _Terminal_SendChar *****************
  5901 ;; Defined at:
  5902 ;;		line 25 in file "TAD_TERMINAL.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  c               1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  c               1    4[COMRAM] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      void 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1
  5916 ;;      Params:         0       0       0
  5917 ;;      Locals:         1       0       0
  5918 ;;      Temps:          0       0       0
  5919 ;;      Totals:         1       0       0
  5920 ;;Total ram usage:        1 bytes
  5921 ;; Hardware stack levels used: 1
  5922 ;; Hardware stack levels required when called: 4
  5923 ;; This function calls:
  5924 ;;		_Terminal_TXAvailable
  5925 ;; This function is called by:
  5926 ;;		_motorTerminal
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text16
  5931   0015E4                     __ptext16:
  5932                           	callstack 0
  5933   0015E4                     _Terminal_SendChar:
  5934                           	callstack 25
  5935                           
  5936                           ;incstack = 0
  5937                           ;Terminal_SendChar@c stored from wreg
  5938   0015E4  6E52               	movwf	Terminal_SendChar@c^0,c
  5939   0015E6                     
  5940                           ;TAD_TERMINAL.c: 26:  while (!Terminal_TXAvailable());
  5941   0015E6  ECFC  F00A         	call	_Terminal_TXAvailable	;wreg free
  5942   0015EA  504F               	movf	?_Terminal_TXAvailable^0,w,c
  5943   0015EC  1050               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  5944   0015EE  B4D8               	btfsc	status,2,c
  5945   0015F0  D7FA               	goto	l3413
  5946                           
  5947                           ;TAD_TERMINAL.c: 27:  TXREG = c;
  5948   0015F2  C052  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  5949   0015F6  0012               	return		;funcret
  5950   0015F8                     __end_of_Terminal_SendChar:
  5951                           	callstack 0
  5952                           
  5953 ;; *************** function _Terminal_TXAvailable *****************
  5954 ;; Defined at:
  5955 ;;		line 20 in file "TAD_TERMINAL.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;		None
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;		None
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  2    1[COMRAM] int 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1
  5969 ;;      Params:         2       0       0
  5970 ;;      Locals:         0       0       0
  5971 ;;      Temps:          1       0       0
  5972 ;;      Totals:         3       0       0
  5973 ;;Total ram usage:        3 bytes
  5974 ;; Hardware stack levels used: 1
  5975 ;; Hardware stack levels required when called: 3
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_Terminal_SendChar
  5980 ;;		_motor_SendChar
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text17
  5985   0015F8                     __ptext17:
  5986                           	callstack 0
  5987   0015F8                     _Terminal_TXAvailable:
  5988                           	callstack 21
  5989                           
  5990                           ;incstack = 0
  5991   0015F8  A89E               	btfss	158,4,c	;volatile
  5992   0015FA  D003               	goto	u1630
  5993   0015FC  6A51               	clrf	??_Terminal_TXAvailable^0,c
  5994   0015FE  2A51               	incf	??_Terminal_TXAvailable^0,f,c
  5995   001600  D001               	goto	u1638
  5996   001602                     u1630:
  5997   001602  6A51               	clrf	??_Terminal_TXAvailable^0,c
  5998   001604                     u1638:
  5999   001604  5051               	movf	??_Terminal_TXAvailable^0,w,c
  6000   001606  6E4F               	movwf	?_Terminal_TXAvailable^0,c
  6001   001608  6A50               	clrf	(?_Terminal_TXAvailable+1)^0,c
  6002   00160A  0012               	return		;funcret
  6003   00160C                     __end_of_Terminal_TXAvailable:
  6004                           	callstack 0
  6005                           
  6006 ;; *************** function _Terminal_ReceiveChar *****************
  6007 ;; Defined at:
  6008 ;;		line 22 in file "TAD_TERMINAL.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      unsigned char 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1
  6022 ;;      Params:         0       0       0
  6023 ;;      Locals:         0       0       0
  6024 ;;      Temps:          0       0       0
  6025 ;;      Totals:         0       0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 3
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_motorTerminal
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text18
  6037   001670                     __ptext18:
  6038                           	callstack 0
  6039   001670                     _Terminal_ReceiveChar:
  6040                           	callstack 26
  6041                           
  6042                           ;incstack = 0
  6043   001670  50AE               	movf	174,w,c	;volatile
  6044   001672  0012               	return		;funcret
  6045   001674                     __end_of_Terminal_ReceiveChar:
  6046                           	callstack 0
  6047                           
  6048 ;; *************** function _Terminal_RXAvailable *****************
  6049 ;; Defined at:
  6050 ;;		line 21 in file "TAD_TERMINAL.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      unsigned char 
  6057 ;; Registers used:
  6058 ;;		wreg
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1
  6064 ;;      Params:         0       0       0
  6065 ;;      Locals:         0       0       0
  6066 ;;      Temps:          0       0       0
  6067 ;;      Totals:         0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used: 1
  6070 ;; Hardware stack levels required when called: 3
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_motorTerminal
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text19
  6079   00164C                     __ptext19:
  6080                           	callstack 0
  6081   00164C                     _Terminal_RXAvailable:
  6082                           	callstack 26
  6083                           
  6084                           ;incstack = 0
  6085   00164C  AA9E               	btfss	158,5,c	;volatile
  6086   00164E  D002               	goto	u780
  6087   001650  0E01               	movlw	1
  6088   001652  0012               	return	
  6089   001654                     u780:
  6090   001654  0E00               	movlw	0
  6091   001656  0012               	return		;funcret
  6092   001658                     __end_of_Terminal_RXAvailable:
  6093                           	callstack 0
  6094                           
  6095 ;; *************** function _initTeclado *****************
  6096 ;; Defined at:
  6097 ;;		line 30 in file "TAD_TECLADO.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1
  6111 ;;      Params:         0       0       0
  6112 ;;      Locals:         0       0       0
  6113 ;;      Temps:          0       0       0
  6114 ;;      Totals:         0       0       0
  6115 ;;Total ram usage:        0 bytes
  6116 ;; Hardware stack levels used: 1
  6117 ;; Hardware stack levels required when called: 4
  6118 ;; This function calls:
  6119 ;;		_TI_NewTimer
  6120 ;; This function is called by:
  6121 ;;		_main
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text20
  6126   00159C                     __ptext20:
  6127                           	callstack 0
  6128   00159C                     _initTeclado:
  6129                           	callstack 26
  6130                           
  6131                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  6132                           
  6133                           ;incstack = 0
  6134   00159C  0E0F               	movlw	15
  6135   00159E  6E95               	movwf	149,c	;volatile
  6136                           
  6137                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  6138   0015A0  6A8C               	clrf	140,c	;volatile
  6139                           
  6140                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  6141   0015A2  6A20               	clrf	_state^0,c
  6142   0015A4  6A21               	clrf	_tecla^0,c
  6143   0015A6  6A22               	clrf	_Columnas^0,c
  6144   0015A8  6A23               	clrf	_Filas^0,c
  6145                           
  6146                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer);
  6147   0015AA  0E44               	movlw	low _timer@TAD_TECLADO$F720
  6148   0015AC  6E4F               	movwf	TI_NewTimer@TimerHandle^0,c
  6149   0015AE  ECDD  F009         	call	_TI_NewTimer	;wreg free
  6150   0015B2  0012               	return		;funcret
  6151   0015B4                     __end_of_initTeclado:
  6152                           	callstack 0
  6153                           
  6154 ;; *************** function _initRFID *****************
  6155 ;; Defined at:
  6156 ;;		line 123 in file "TAD_RFID.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  regVal          1   12[COMRAM] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1
  6170 ;;      Params:         0       0       0
  6171 ;;      Locals:         1       0       0
  6172 ;;      Temps:          0       0       0
  6173 ;;      Totals:         1       0       0
  6174 ;;Total ram usage:        1 bytes
  6175 ;; Hardware stack levels used: 1
  6176 ;; Hardware stack levels required when called: 6
  6177 ;; This function calls:
  6178 ;;		_delay_us
  6179 ;;		_motor_Read
  6180 ;;		_motor_Write
  6181 ;; This function is called by:
  6182 ;;		_main
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text21
  6187   000CEA                     __ptext21:
  6188                           	callstack 0
  6189   000CEA                     _initRFID:
  6190                           	callstack 24
  6191                           
  6192                           ;TAD_RFID.c: 125:     TRISCbits.TRISC0 = 1;
  6193                           
  6194                           ;incstack = 0
  6195   000CEA  8094               	bsf	148,0,c	;volatile
  6196                           
  6197                           ;TAD_RFID.c: 126:     TRISCbits.TRISC1 = 0;
  6198   000CEC  9294               	bcf	148,1,c	;volatile
  6199                           
  6200                           ;TAD_RFID.c: 127:     TRISCbits.TRISC2 = 0;
  6201   000CEE  9494               	bcf	148,2,c	;volatile
  6202                           
  6203                           ;TAD_RFID.c: 128:     TRISCbits.TRISC3 = 0;
  6204   000CF0  9694               	bcf	148,3,c	;volatile
  6205                           
  6206                           ;TAD_RFID.c: 129:     TRISCbits.TRISC4 = 0;
  6207   000CF2  9894               	bcf	148,4,c	;volatile
  6208                           
  6209                           ;TAD_RFID.c: 131:     state_read = state_write = 0;
  6210   000CF4  6A4A               	clrf	_state_write^0,c
  6211   000CF6  6A4B               	clrf	_state_read^0,c
  6212                           
  6213                           ;TAD_RFID.c: 132:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6214   000CF8  848B               	bsf	139,2,c	;volatile
  6215   000CFA  868B               	bsf	139,3,c	;volatile
  6216                           
  6217                           ;TAD_RFID.c: 133:     LATCbits.LATC4 = 1;
  6218   000CFC  888B               	bsf	139,4,c	;volatile
  6219                           
  6220                           ;TAD_RFID.c: 134:     delay_us(1);
  6221   000CFE  0E01               	movlw	1
  6222   000D00  ECDA  F00A         	call	_delay_us
  6223                           
  6224                           ;TAD_RFID.c: 135:     LATCbits.LATC4 = 0;
  6225   000D04  988B               	bcf	139,4,c	;volatile
  6226                           
  6227                           ;TAD_RFID.c: 136:     delay_us(1);
  6228   000D06  0E01               	movlw	1
  6229   000D08  ECDA  F00A         	call	_delay_us
  6230                           
  6231                           ;TAD_RFID.c: 137:     LATCbits.LATC4 = 1;
  6232   000D0C  888B               	bsf	139,4,c	;volatile
  6233                           
  6234                           ;TAD_RFID.c: 138:     delay_us(1);
  6235   000D0E  0E01               	movlw	1
  6236   000D10  ECDA  F00A         	call	_delay_us
  6237   000D14                     l3465:
  6238   000D14  0E0F               	movlw	15
  6239   000D16  6E56               	movwf	motor_Write@value^0,c
  6240   000D18  0E01               	movlw	1
  6241   000D1A  EC55  F008         	call	_motor_Write
  6242   000D1E  0900               	iorlw	0
  6243   000D20  B4D8               	btfsc	status,2,c
  6244   000D22  D7F8               	goto	l3465
  6245                           
  6246                           ;TAD_RFID.c: 142:     delay_us(1);
  6247   000D24  0E01               	movlw	1
  6248   000D26  ECDA  F00A         	call	_delay_us
  6249   000D2A                     l3469:
  6250   000D2A  0E8D               	movlw	141
  6251   000D2C  6E56               	movwf	motor_Write@value^0,c
  6252   000D2E  0E2A               	movlw	42
  6253   000D30  EC55  F008         	call	_motor_Write
  6254   000D34  0900               	iorlw	0
  6255   000D36  B4D8               	btfsc	status,2,c
  6256   000D38  D7F8               	goto	l3469
  6257   000D3A                     u2370:
  6258   000D3A  0E3E               	movlw	62
  6259   000D3C  6E56               	movwf	motor_Write@value^0,c
  6260   000D3E  0E2B               	movlw	43
  6261   000D40  EC55  F008         	call	_motor_Write
  6262   000D44  0900               	iorlw	0
  6263   000D46  B4D8               	btfsc	status,2,c
  6264   000D48  D7F8               	goto	u2370
  6265   000D4A                     u2380:
  6266   000D4A  0E1E               	movlw	30
  6267   000D4C  6E56               	movwf	motor_Write@value^0,c
  6268   000D4E  0E2D               	movlw	45
  6269   000D50  EC55  F008         	call	_motor_Write
  6270   000D54  0900               	iorlw	0
  6271   000D56  B4D8               	btfsc	status,2,c
  6272   000D58  D7F8               	goto	u2380
  6273   000D5A                     u2390:
  6274   000D5A  0E00               	movlw	0
  6275   000D5C  6E56               	movwf	motor_Write@value^0,c
  6276   000D5E  0E2C               	movlw	44
  6277   000D60  EC55  F008         	call	_motor_Write
  6278   000D64  0900               	iorlw	0
  6279   000D66  B4D8               	btfsc	status,2,c
  6280   000D68  D7F8               	goto	u2390
  6281   000D6A                     u2400:
  6282   000D6A  0E40               	movlw	64
  6283   000D6C  6E56               	movwf	motor_Write@value^0,c
  6284   000D6E  0E15               	movlw	21
  6285   000D70  EC55  F008         	call	_motor_Write
  6286   000D74  0900               	iorlw	0
  6287   000D76  B4D8               	btfsc	status,2,c
  6288   000D78  D7F8               	goto	u2400
  6289   000D7A                     u2410:
  6290   000D7A  0E3D               	movlw	61
  6291   000D7C  6E56               	movwf	motor_Write@value^0,c
  6292   000D7E  0E11               	movlw	17
  6293   000D80  EC55  F008         	call	_motor_Write
  6294   000D84  0900               	iorlw	0
  6295   000D86  B4D8               	btfsc	status,2,c
  6296   000D88  D7F8               	goto	u2410
  6297   000D8A                     u2420:
  6298                           
  6299                           ;TAD_RFID.c: 155:         regVal = motor_Read(0x14);
  6300   000D8A  0E14               	movlw	20
  6301   000D8C  ECA8  F005         	call	_motor_Read
  6302   000D90  6E5A               	movwf	initRFID@regVal^0,c
  6303                           
  6304                           ;TAD_RFID.c: 156:     } while (regVal == 0xFE);
  6305   000D92  0EFE               	movlw	254
  6306   000D94  185A               	xorwf	initRFID@regVal^0,w,c
  6307   000D96  B4D8               	btfsc	status,2,c
  6308   000D98  D7F8               	goto	u2420
  6309                           
  6310                           ;TAD_RFID.c: 157:     regVal |= 0x03;
  6311   000D9A  0E03               	movlw	3
  6312   000D9C  125A               	iorwf	initRFID@regVal^0,f,c
  6313   000D9E                     l3487:
  6314   000D9E  C05A  F056         	movff	initRFID@regVal,motor_Write@value
  6315   000DA2  0E14               	movlw	20
  6316   000DA4  EC55  F008         	call	_motor_Write
  6317   000DA8  0900               	iorlw	0
  6318   000DAA  A4D8               	btfss	status,2,c
  6319   000DAC  0012               	return	
  6320   000DAE  D7F7               	goto	l3487
  6321   000DB0                     __end_of_initRFID:
  6322                           	callstack 0
  6323                           
  6324 ;; *************** function _motor_Write *****************
  6325 ;; Defined at:
  6326 ;;		line 43 in file "TAD_RFID.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  addr            1    wreg     unsigned char 
  6329 ;;  value           1    8[COMRAM] unsigned char 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;  addr            1    9[COMRAM] unsigned char 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      unsigned char 
  6334 ;; Registers used:
  6335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1
  6341 ;;      Params:         1       0       0
  6342 ;;      Locals:         1       0       0
  6343 ;;      Temps:          0       0       0
  6344 ;;      Totals:         2       0       0
  6345 ;;Total ram usage:        2 bytes
  6346 ;; Hardware stack levels used: 1
  6347 ;; Hardware stack levels required when called: 5
  6348 ;; This function calls:
  6349 ;;		_processBit
  6350 ;; This function is called by:
  6351 ;;		_initRFID
  6352 ;;		_motor_RFID
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text22
  6357   0010AA                     __ptext22:
  6358                           	callstack 0
  6359   0010AA                     _motor_Write:
  6360                           	callstack 24
  6361                           
  6362                           ;incstack = 0
  6363                           ;motor_Write@addr stored from wreg
  6364   0010AA  6E57               	movwf	motor_Write@addr^0,c
  6365                           
  6366                           ;TAD_RFID.c: 44:     static char bit_count = 0;;TAD_RFID.c: 45:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 46:     static unsigned char ucValue;;TAD_RFID.c: 48:     switch (s
      +                          tate_write) {
  6367   0010AC  D028               	goto	l3283
  6368   0010AE                     l249:
  6369                           
  6370                           ;TAD_RFID.c: 50:             LATCbits.LATC2 = 0;
  6371   0010AE  948B               	bcf	139,2,c	;volatile
  6372                           
  6373                           ;TAD_RFID.c: 51:             LATCbits.LATC3 = 0;
  6374   0010B0  968B               	bcf	139,3,c	;volatile
  6375                           
  6376                           ;TAD_RFID.c: 52:             ucAddr = ((addr << 1) & 0x7E);
  6377   0010B2  5057               	movf	motor_Write@addr^0,w,c
  6378   0010B4  2457               	addwf	motor_Write@addr^0,w,c
  6379   0010B6  0B7E               	andlw	126
  6380   0010B8  6E48               	movwf	motor_Write@ucAddr^0,c
  6381                           
  6382                           ;TAD_RFID.c: 53:             ucValue = value;
  6383   0010BA  C056  F047         	movff	motor_Write@value,motor_Write@ucValue
  6384                           
  6385                           ;TAD_RFID.c: 54:             bit_count = 0;
  6386   0010BE  6A49               	clrf	motor_Write@bit_count^0,c
  6387                           
  6388                           ;TAD_RFID.c: 55:             state_write = 1;
  6389   0010C0  0E01               	movlw	1
  6390   0010C2  6E4A               	movwf	_state_write^0,c
  6391                           
  6392                           ;TAD_RFID.c: 56:             break;
  6393   0010C4  D026               	goto	l3285
  6394   0010C6                     l3269:
  6395                           
  6396                           ;TAD_RFID.c: 59:             processBit(&ucAddr, &bit_count, &state_write, 2);
  6397   0010C6  0E48               	movlw	low motor_Write@ucAddr
  6398   0010C8  6E51               	movwf	processBit@val^0,c
  6399   0010CA  0E49               	movlw	low motor_Write@bit_count
  6400   0010CC  6E52               	movwf	processBit@bit_count^0,c
  6401   0010CE  0E4A               	movlw	low _state_write
  6402   0010D0  6E53               	movwf	processBit@state^0,c
  6403   0010D2  0E02               	movlw	2
  6404   0010D4  6E54               	movwf	processBit@next_state^0,c
  6405   0010D6  EC1E  F009         	call	_processBit	;wreg free
  6406                           
  6407                           ;TAD_RFID.c: 60:             break;
  6408   0010DA  D01B               	goto	l3285
  6409   0010DC                     l3271:
  6410                           
  6411                           ;TAD_RFID.c: 63:             processBit(&ucValue, &bit_count, &state_write, 0);
  6412   0010DC  0E47               	movlw	low motor_Write@ucValue
  6413   0010DE  6E51               	movwf	processBit@val^0,c
  6414   0010E0  0E49               	movlw	low motor_Write@bit_count
  6415   0010E2  6E52               	movwf	processBit@bit_count^0,c
  6416   0010E4  0E4A               	movlw	low _state_write
  6417   0010E6  6E53               	movwf	processBit@state^0,c
  6418   0010E8  0E00               	movlw	0
  6419   0010EA  6E54               	movwf	processBit@next_state^0,c
  6420   0010EC  EC1E  F009         	call	_processBit	;wreg free
  6421                           
  6422                           ;TAD_RFID.c: 64:             if (state_write == 0) {
  6423   0010F0  504A               	movf	_state_write^0,w,c
  6424   0010F2  A4D8               	btfss	status,2,c
  6425   0010F4  D00E               	goto	l3285
  6426                           
  6427                           ;TAD_RFID.c: 65:                 LATCbits.LATC3 = 1;
  6428   0010F6  868B               	bsf	139,3,c	;volatile
  6429                           
  6430                           ;TAD_RFID.c: 66:                 LATCbits.LATC2 = 1;
  6431   0010F8  848B               	bsf	139,2,c	;volatile
  6432                           
  6433                           ;TAD_RFID.c: 67:                 return 1;
  6434   0010FA  0E01               	movlw	1
  6435   0010FC  0012               	return	
  6436   0010FE                     l3283:
  6437   0010FE  504A               	movf	_state_write^0,w,c
  6438                           
  6439                           ; Switch size 1, requested type "simple"
  6440                           ; Number of cases is 3, Range of values is 0 to 2
  6441                           ; switch strategies available:
  6442                           ; Name         Instructions Cycles
  6443                           ; simple_byte           10     6 (average)
  6444                           ;	Chosen strategy is simple_byte
  6445   001100  0A00               	xorlw	0	; case 0
  6446   001102  B4D8               	btfsc	status,2,c
  6447   001104  D7D4               	goto	l249
  6448   001106  0A01               	xorlw	1	; case 1
  6449   001108  B4D8               	btfsc	status,2,c
  6450   00110A  D7DD               	goto	l3269
  6451   00110C  0A03               	xorlw	3	; case 2
  6452   00110E  B4D8               	btfsc	status,2,c
  6453   001110  D7E5               	goto	l3271
  6454   001112                     l3285:
  6455                           
  6456                           ;TAD_RFID.c: 71:     return 0;
  6457   001112  0E00               	movlw	0
  6458   001114  0012               	return		;funcret
  6459   001116                     __end_of_motor_Write:
  6460                           	callstack 0
  6461                           
  6462 ;; *************** function _motor_Read *****************
  6463 ;; Defined at:
  6464 ;;		line 75 in file "TAD_RFID.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  addr            1    wreg     unsigned char 
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  addr            1    9[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      unsigned char 
  6471 ;; Registers used:
  6472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1
  6478 ;;      Params:         0       0       0
  6479 ;;      Locals:         3       0       0
  6480 ;;      Temps:          1       0       0
  6481 ;;      Totals:         4       0       0
  6482 ;;Total ram usage:        4 bytes
  6483 ;; Hardware stack levels used: 1
  6484 ;; Hardware stack levels required when called: 5
  6485 ;; This function calls:
  6486 ;;		_delay_us
  6487 ;;		_processBit
  6488 ;; This function is called by:
  6489 ;;		_initRFID
  6490 ;;		_motor_RFID
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text23
  6495   000B50                     __ptext23:
  6496                           	callstack 0
  6497   000B50                     _motor_Read:
  6498                           	callstack 24
  6499                           
  6500                           ;incstack = 0
  6501                           ;motor_Read@addr stored from wreg
  6502   000B50  6E57               	movwf	motor_Read@addr^0,c
  6503                           
  6504                           ;TAD_RFID.c: 76:     static char bit_count = 0;;TAD_RFID.c: 77:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 78:     static unsigned char ucResult;;TAD_RFID.c: 79:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 80:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 82:     if (++timeout_counter > MAX_TIMEOUT) {
  6505   000B52  4A0F               	infsnz	motor_Read@timeout_counter^0,f,c
  6506   000B54  2A10               	incf	(motor_Read@timeout_counter+1)^0,f,c
  6507   000B56  0EE9               	movlw	233
  6508   000B58  5C0F               	subwf	motor_Read@timeout_counter^0,w,c
  6509   000B5A  0E03               	movlw	3
  6510   000B5C  5810               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  6511   000B5E  A0D8               	btfss	status,0,c
  6512   000B60  D053               	goto	l3351
  6513                           
  6514                           ;TAD_RFID.c: 83:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6515   000B62  848B               	bsf	139,2,c	;volatile
  6516   000B64  868B               	bsf	139,3,c	;volatile
  6517                           
  6518                           ;TAD_RFID.c: 84:         state_read = 0;
  6519   000B66  6A4B               	clrf	_state_read^0,c
  6520                           
  6521                           ;TAD_RFID.c: 85:         timeout_counter = 0;
  6522   000B68  0E00               	movlw	0
  6523   000B6A  6E10               	movwf	(motor_Read@timeout_counter+1)^0,c
  6524   000B6C  0E00               	movlw	0
  6525   000B6E  6E0F               	movwf	motor_Read@timeout_counter^0,c
  6526                           
  6527                           ;TAD_RFID.c: 86:         return 0xFF;
  6528   000B70  0EFF               	movlw	255
  6529   000B72  0012               	return	
  6530   000B74                     l3299:
  6531                           
  6532                           ;TAD_RFID.c: 91:             timeout_counter = 0;
  6533   000B74  0E00               	movlw	0
  6534   000B76  6E10               	movwf	(motor_Read@timeout_counter+1)^0,c
  6535   000B78  0E00               	movlw	0
  6536   000B7A  6E0F               	movwf	motor_Read@timeout_counter^0,c
  6537                           
  6538                           ;TAD_RFID.c: 92:             LATCbits.LATC2 = 0;
  6539   000B7C  948B               	bcf	139,2,c	;volatile
  6540                           
  6541                           ;TAD_RFID.c: 93:             LATCbits.LATC3 = 0;
  6542   000B7E  968B               	bcf	139,3,c	;volatile
  6543                           
  6544                           ;TAD_RFID.c: 94:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  6545   000B80  5057               	movf	motor_Read@addr^0,w,c
  6546   000B82  2457               	addwf	motor_Read@addr^0,w,c
  6547   000B84  0B7E               	andlw	126
  6548   000B86  0980               	iorlw	128
  6549   000B88  6E45               	movwf	motor_Read@ucAddr^0,c
  6550                           
  6551                           ;TAD_RFID.c: 95:             ucResult = 0;
  6552   000B8A  6A35               	clrf	motor_Read@ucResult^0,c
  6553                           
  6554                           ;TAD_RFID.c: 96:             bit_count = 0;
  6555   000B8C  6A46               	clrf	motor_Read@bit_count^0,c
  6556                           
  6557                           ;TAD_RFID.c: 97:             state_read = 1;
  6558   000B8E  0E01               	movlw	1
  6559   000B90  6E4B               	movwf	_state_read^0,c
  6560   000B92                     l3313:
  6561                           
  6562                           ;TAD_RFID.c: 98:             return 0xFE;
  6563   000B92  0EFE               	movlw	254
  6564   000B94  0012               	return	
  6565   000B96                     l3317:
  6566                           
  6567                           ;TAD_RFID.c: 101:             processBit(&ucAddr, &bit_count, &state_read, 2);
  6568   000B96  0E45               	movlw	low motor_Read@ucAddr
  6569   000B98  6E51               	movwf	processBit@val^0,c
  6570   000B9A  0E46               	movlw	low motor_Read@bit_count
  6571   000B9C  6E52               	movwf	processBit@bit_count^0,c
  6572   000B9E  0E4B               	movlw	low _state_read
  6573   000BA0  6E53               	movwf	processBit@state^0,c
  6574   000BA2  0E02               	movlw	2
  6575   000BA4  6E54               	movwf	processBit@next_state^0,c
  6576   000BA6  EC1E  F009         	call	_processBit	;wreg free
  6577   000BAA  D7F3               	goto	l3313
  6578   000BAC                     l272:
  6579                           
  6580                           ;TAD_RFID.c: 105:             LATCbits.LATC2 = 1;
  6581   000BAC  848B               	bsf	139,2,c	;volatile
  6582                           
  6583                           ;TAD_RFID.c: 106:             delay_us(5);
  6584   000BAE  0E05               	movlw	5
  6585   000BB0  ECDA  F00A         	call	_delay_us
  6586                           
  6587                           ;TAD_RFID.c: 107:             ucResult = (ucResult << 1) | PORTCbits.RC0;
  6588   000BB4  A082               	btfss	130,0,c	;volatile
  6589   000BB6  D003               	goto	u2220
  6590   000BB8  6A56               	clrf	??_motor_Read^0,c
  6591   000BBA  2A56               	incf	??_motor_Read^0,f,c
  6592   000BBC  D001               	goto	u2228
  6593   000BBE                     u2220:
  6594   000BBE  6A56               	clrf	??_motor_Read^0,c
  6595   000BC0                     u2228:
  6596   000BC0  5035               	movf	motor_Read@ucResult^0,w,c
  6597   000BC2  2435               	addwf	motor_Read@ucResult^0,w,c
  6598   000BC4  1056               	iorwf	??_motor_Read^0,w,c
  6599   000BC6  6E35               	movwf	motor_Read@ucResult^0,c
  6600                           
  6601                           ;TAD_RFID.c: 108:             LATCbits.LATC2 = 0;
  6602   000BC8  948B               	bcf	139,2,c	;volatile
  6603                           
  6604                           ;TAD_RFID.c: 109:             delay_us(5);
  6605   000BCA  0E05               	movlw	5
  6606   000BCC  ECDA  F00A         	call	_delay_us
  6607                           
  6608                           ;TAD_RFID.c: 111:             if (++bit_count >= 8) {
  6609   000BD0  2A46               	incf	motor_Read@bit_count^0,f,c
  6610   000BD2  0E07               	movlw	7
  6611   000BD4  6446               	cpfsgt	motor_Read@bit_count^0,c
  6612   000BD6  D7DD               	goto	l3313
  6613                           
  6614                           ;TAD_RFID.c: 112:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  6615   000BD8  848B               	bsf	139,2,c	;volatile
  6616   000BDA  868B               	bsf	139,3,c	;volatile
  6617                           
  6618                           ;TAD_RFID.c: 113:                 state_read = 0;
  6619   000BDC  6A4B               	clrf	_state_read^0,c
  6620                           
  6621                           ;TAD_RFID.c: 114:                 timeout_counter = 0;
  6622   000BDE  0E00               	movlw	0
  6623   000BE0  6E10               	movwf	(motor_Read@timeout_counter+1)^0,c
  6624   000BE2  0E00               	movlw	0
  6625   000BE4  6E0F               	movwf	motor_Read@timeout_counter^0,c
  6626                           
  6627                           ;TAD_RFID.c: 115:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  6628   000BE6  0EFE               	movlw	254
  6629   000BE8  1835               	xorwf	motor_Read@ucResult^0,w,c
  6630   000BEA  B4D8               	btfsc	status,2,c
  6631   000BEC  D007               	goto	l3341
  6632   000BEE  2835               	incf	motor_Read@ucResult^0,w,c
  6633   000BF0  B4D8               	btfsc	status,2,c
  6634   000BF2  D004               	goto	l3341
  6635   000BF4  C035  F058         	movff	motor_Read@ucResult,_motor_Read$666
  6636   000BF8  6A59               	clrf	(_motor_Read$666+1)^0,c
  6637   000BFA  D004               	goto	l277
  6638   000BFC                     l3341:
  6639   000BFC  0E00               	movlw	0
  6640   000BFE  6E59               	movwf	(_motor_Read$666+1)^0,c
  6641   000C00  0EFD               	movlw	253
  6642   000C02  6E58               	movwf	_motor_Read$666^0,c
  6643   000C04                     l277:
  6644   000C04  5058               	movf	_motor_Read$666^0,w,c
  6645   000C06  0012               	return	
  6646   000C08                     l3351:
  6647   000C08  504B               	movf	_state_read^0,w,c
  6648                           
  6649                           ; Switch size 1, requested type "simple"
  6650                           ; Number of cases is 3, Range of values is 0 to 2
  6651                           ; switch strategies available:
  6652                           ; Name         Instructions Cycles
  6653                           ; simple_byte           10     6 (average)
  6654                           ;	Chosen strategy is simple_byte
  6655   000C0A  0A00               	xorlw	0	; case 0
  6656   000C0C  B4D8               	btfsc	status,2,c
  6657   000C0E  D7B2               	goto	l3299
  6658   000C10  0A01               	xorlw	1	; case 1
  6659   000C12  B4D8               	btfsc	status,2,c
  6660   000C14  D7C0               	goto	l3317
  6661   000C16  0A03               	xorlw	3	; case 2
  6662   000C18  B4D8               	btfsc	status,2,c
  6663   000C1A  D7C8               	goto	l272
  6664   000C1C  D7BA               	goto	l3313
  6665   000C1E                     __end_of_motor_Read:
  6666                           	callstack 0
  6667                           
  6668 ;; *************** function _processBit *****************
  6669 ;; Defined at:
  6670 ;;		line 29 in file "TAD_RFID.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  val             1    3[COMRAM] PTR unsigned char 
  6673 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  6674 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  6675 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  6676 ;;  state           1    5[COMRAM] PTR unsigned char 
  6677 ;;		 -> state_read(1), state_write(1), 
  6678 ;;  next_state      1    6[COMRAM] unsigned char 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1
  6690 ;;      Params:         4       0       0
  6691 ;;      Locals:         0       0       0
  6692 ;;      Temps:          1       0       0
  6693 ;;      Totals:         5       0       0
  6694 ;;Total ram usage:        5 bytes
  6695 ;; Hardware stack levels used: 1
  6696 ;; Hardware stack levels required when called: 4
  6697 ;; This function calls:
  6698 ;;		_delay_us
  6699 ;; This function is called by:
  6700 ;;		_motor_Write
  6701 ;;		_motor_Read
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text24
  6706   00123C                     __ptext24:
  6707                           	callstack 0
  6708   00123C                     _processBit:
  6709                           	callstack 24
  6710                           
  6711                           ;TAD_RFID.c: 30:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  6712                           
  6713                           ;incstack = 0
  6714   00123C  5051               	movf	processBit@val^0,w,c
  6715   00123E  6ED9               	movwf	fsr2l,c
  6716   001240  6ADA               	clrf	fsr2h,c
  6717   001242  AEDF               	btfss	indf2,7,c
  6718   001244  D003               	goto	u1960
  6719   001246  6A55               	clrf	??_processBit^0,c
  6720   001248  2A55               	incf	??_processBit^0,f,c
  6721   00124A  D001               	goto	u1978
  6722   00124C                     u1960:
  6723   00124C  6A55               	clrf	??_processBit^0,c
  6724   00124E                     u1978:
  6725   00124E  4655               	rlncf	??_processBit^0,f,c
  6726   001250  508B               	movf	139,w,c	;volatile
  6727   001252  1855               	xorwf	??_processBit^0,w,c
  6728   001254  0BFD               	andlw	-3
  6729   001256  1855               	xorwf	??_processBit^0,w,c
  6730   001258  6E8B               	movwf	139,c	;volatile
  6731                           
  6732                           ;TAD_RFID.c: 31:     LATCbits.LATC2 = 1;
  6733   00125A  848B               	bsf	139,2,c	;volatile
  6734                           
  6735                           ;TAD_RFID.c: 32:     *val <<= 1;
  6736   00125C  5051               	movf	processBit@val^0,w,c
  6737   00125E  6ED9               	movwf	fsr2l,c
  6738   001260  6ADA               	clrf	fsr2h,c
  6739   001262  90D8               	bcf	status,0,c
  6740   001264  36DF               	rlcf	indf2,f,c
  6741                           
  6742                           ;TAD_RFID.c: 33:     delay_us(5);
  6743   001266  0E05               	movlw	5
  6744   001268  ECDA  F00A         	call	_delay_us
  6745                           
  6746                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 0;
  6747   00126C  948B               	bcf	139,2,c	;volatile
  6748                           
  6749                           ;TAD_RFID.c: 35:     delay_us(5);
  6750   00126E  0E05               	movlw	5
  6751   001270  ECDA  F00A         	call	_delay_us
  6752                           
  6753                           ;TAD_RFID.c: 36:     if (++(*bit_count) == 8) {
  6754   001274  5052               	movf	processBit@bit_count^0,w,c
  6755   001276  6ED9               	movwf	fsr2l,c
  6756   001278  6ADA               	clrf	fsr2h,c
  6757   00127A  2ADF               	incf	indf2,f,c
  6758   00127C  0E08               	movlw	8
  6759   00127E  18DE               	xorwf	postinc2,w,c
  6760   001280  A4D8               	btfss	status,2,c
  6761   001282  0012               	return	
  6762                           
  6763                           ;TAD_RFID.c: 37:         *bit_count = 0;
  6764   001284  5052               	movf	processBit@bit_count^0,w,c
  6765   001286  6ED9               	movwf	fsr2l,c
  6766   001288  6ADA               	clrf	fsr2h,c
  6767   00128A  6ADF               	clrf	indf2,c
  6768                           
  6769                           ;TAD_RFID.c: 38:         *state = next_state;
  6770   00128C  5053               	movf	processBit@state^0,w,c
  6771   00128E  6ED9               	movwf	fsr2l,c
  6772   001290  6ADA               	clrf	fsr2h,c
  6773   001292  C054  FFDF         	movff	processBit@next_state,indf2
  6774   001296  0012               	return		;funcret
  6775   001298                     __end_of_processBit:
  6776                           	callstack 0
  6777                           
  6778 ;; *************** function _delay_us *****************
  6779 ;; Defined at:
  6780 ;;		line 23 in file "TAD_RFID.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  howMany         1    wreg     unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  howMany         1    1[COMRAM] unsigned char 
  6785 ;;  x               1    2[COMRAM] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, prodl, prodh
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1
  6795 ;;      Params:         0       0       0
  6796 ;;      Locals:         2       0       0
  6797 ;;      Temps:          0       0       0
  6798 ;;      Totals:         2       0       0
  6799 ;;Total ram usage:        2 bytes
  6800 ;; Hardware stack levels used: 1
  6801 ;; Hardware stack levels required when called: 3
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_processBit
  6806 ;;		_motor_Read
  6807 ;;		_initRFID
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text25
  6812   0015B4                     __ptext25:
  6813                           	callstack 0
  6814   0015B4                     _delay_us:
  6815                           	callstack 24
  6816                           
  6817                           ;incstack = 0
  6818                           ;delay_us@howMany stored from wreg
  6819   0015B4  6E4F               	movwf	delay_us@howMany^0,c
  6820                           
  6821                           ;TAD_RFID.c: 24:     char x = howMany * 8;
  6822   0015B6  504F               	movf	delay_us@howMany^0,w,c
  6823   0015B8  0D08               	mullw	8
  6824   0015BA  CFF3 F050          	movff	prodl,delay_us@x
  6825                           
  6826                           ;TAD_RFID.c: 25:     while(x--) __nop();
  6827   0015BE  D001               	goto	l2969
  6828   0015C0                     l233:
  6829   0015C0  0000               	nop	
  6830   0015C2                     l2969:
  6831   0015C2  0650               	decf	delay_us@x^0,f,c
  6832   0015C4  2850               	incf	delay_us@x^0,w,c
  6833   0015C6  B4D8               	btfsc	status,2,c
  6834   0015C8  0012               	return	
  6835   0015CA  D7FA               	goto	l233
  6836   0015CC                     __end_of_delay_us:
  6837                           	callstack 0
  6838                           
  6839 ;; *************** function _initPorts *****************
  6840 ;; Defined at:
  6841 ;;		line 63 in file "main.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1
  6855 ;;      Params:         0       0       0
  6856 ;;      Locals:         0       0       0
  6857 ;;      Temps:          0       0       0
  6858 ;;      Totals:         0       0       0
  6859 ;;Total ram usage:        0 bytes
  6860 ;; Hardware stack levels used: 1
  6861 ;; Hardware stack levels required when called: 3
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_main
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text26
  6870   001662                     __ptext26:
  6871                           	callstack 0
  6872   001662                     _initPorts:
  6873                           	callstack 27
  6874                           
  6875                           ;incstack = 0
  6876   001662  0E0F               	movlw	15
  6877   001664  6EC1               	movwf	193,c	;volatile
  6878   001666  9496               	bcf	150,2,c	;volatile
  6879   001668  0012               	return		;funcret
  6880   00166A                     __end_of_initPorts:
  6881                           	callstack 0
  6882                           
  6883 ;; *************** function _initLeds *****************
  6884 ;; Defined at:
  6885 ;;		line 9 in file "TAD_LEDS.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1
  6899 ;;      Params:         0       0       0
  6900 ;;      Locals:         0       0       0
  6901 ;;      Temps:          0       0       0
  6902 ;;      Totals:         0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used: 1
  6905 ;; Hardware stack levels required when called: 4
  6906 ;; This function calls:
  6907 ;;		_TI_NewTimer
  6908 ;; This function is called by:
  6909 ;;		_main
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text27
  6914   001630                     __ptext27:
  6915                           	callstack 0
  6916   001630                     _initLeds:
  6917                           	callstack 26
  6918                           
  6919                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  6920                           
  6921                           ;incstack = 0
  6922   001630  6A92               	clrf	146,c	;volatile
  6923                           
  6924                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  6925   001632  6A96               	clrf	150,c	;volatile
  6926                           
  6927                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  6928   001634  0E4C               	movlw	low _timer
  6929   001636  6E4F               	movwf	TI_NewTimer@TimerHandle^0,c
  6930   001638  ECDD  F009         	call	_TI_NewTimer	;wreg free
  6931   00163C  0012               	return		;funcret
  6932   00163E                     __end_of_initLeds:
  6933                           	callstack 0
  6934                           
  6935 ;; *************** function _initData *****************
  6936 ;; Defined at:
  6937 ;;		line 25 in file "TAD_DATOS.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;		None
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;  j               1    2[COMRAM] unsigned char 
  6942 ;;  i               1    3[COMRAM] unsigned char 
  6943 ;;  i               1    1[COMRAM] unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1
  6953 ;;      Params:         0       0       0
  6954 ;;      Locals:         3       0       0
  6955 ;;      Temps:          0       0       0
  6956 ;;      Totals:         3       0       0
  6957 ;;Total ram usage:        3 bytes
  6958 ;; Hardware stack levels used: 1
  6959 ;; Hardware stack levels required when called: 3
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_main
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text28
  6968   00137E                     __ptext28:
  6969                           	callstack 0
  6970   00137E                     _initData:
  6971                           	callstack 27
  6972                           
  6973                           ;TAD_DATOS.c: 26:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  6974                           
  6975                           ;incstack = 0
  6976   00137E  6A4F               	clrf	initData@i^0,c
  6977   001380                     l3547:
  6978   001380  504F               	movf	initData@i^0,w,c
  6979   001382  0F3A               	addlw	low _currentUser
  6980   001384  6ED9               	movwf	fsr2l,c
  6981   001386  6ADA               	clrf	fsr2h,c
  6982   001388  6ADF               	clrf	indf2,c
  6983   00138A  2A4F               	incf	initData@i^0,f,c
  6984   00138C  0E04               	movlw	4
  6985   00138E  644F               	cpfsgt	initData@i^0,c
  6986   001390  D7F7               	goto	l3547
  6987                           
  6988                           ;TAD_DATOS.c: 27:     for(char i = 0; i < 4; i++) {
  6989   001392  6A51               	clrf	initData@i_853^0,c
  6990   001394                     l712:
  6991                           
  6992                           ;TAD_DATOS.c: 28:         for(char j = 0; j < 6; j++) {
  6993   001394  6A50               	clrf	initData@j^0,c
  6994   001396                     l3561:
  6995                           
  6996                           ;TAD_DATOS.c: 29:             configurations[i][j] = i;
  6997   001396  5051               	movf	initData@i_853^0,w,c
  6998   001398  0D06               	mullw	6
  6999   00139A  50F3               	movf	243,w,c
  7000   00139C  0F80               	addlw	low _configurations
  7001   00139E  2450               	addwf	initData@j^0,w,c
  7002   0013A0  6ED9               	movwf	fsr2l,c
  7003   0013A2  6ADA               	clrf	fsr2h,c
  7004   0013A4  C051  FFDF         	movff	initData@i_853,indf2
  7005                           
  7006                           ;TAD_DATOS.c: 30:         }
  7007   0013A8  2A50               	incf	initData@j^0,f,c
  7008   0013AA  0E05               	movlw	5
  7009   0013AC  6450               	cpfsgt	initData@j^0,c
  7010   0013AE  D7F3               	goto	l3561
  7011                           
  7012                           ;TAD_DATOS.c: 31:     }
  7013   0013B0  2A51               	incf	initData@i_853^0,f,c
  7014   0013B2  0E03               	movlw	3
  7015   0013B4  6451               	cpfsgt	initData@i_853^0,c
  7016   0013B6  D7EE               	goto	l712
  7017   0013B8  0012               	return	
  7018   0013BA                     __end_of_initData:
  7019                           	callstack 0
  7020                           
  7021 ;; *************** function _Terminal_Init *****************
  7022 ;; Defined at:
  7023 ;;		line 11 in file "TAD_TERMINAL.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;		None
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      void 
  7030 ;; Registers used:
  7031 ;;		wreg, status,2
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1
  7037 ;;      Params:         0       0       0
  7038 ;;      Locals:         0       0       0
  7039 ;;      Temps:          0       0       0
  7040 ;;      Totals:         0       0       0
  7041 ;;Total ram usage:        0 bytes
  7042 ;; Hardware stack levels used: 1
  7043 ;; Hardware stack levels required when called: 3
  7044 ;; This function calls:
  7045 ;;		Nothing
  7046 ;; This function is called by:
  7047 ;;		_main
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text29
  7052   001620                     __ptext29:
  7053                           	callstack 0
  7054   001620                     _Terminal_Init:
  7055                           	callstack 27
  7056                           
  7057                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  7058                           
  7059                           ;incstack = 0
  7060   001620  0E24               	movlw	36
  7061   001622  6EAC               	movwf	172,c	;volatile
  7062                           
  7063                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  7064   001624  0E90               	movlw	144
  7065   001626  6EAB               	movwf	171,c	;volatile
  7066                           
  7067                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  7068   001628  68AF               	setf	175,c	;volatile
  7069                           
  7070                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  7071   00162A  6AB8               	clrf	184,c	;volatile
  7072                           
  7073                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  7074   00162C  6A1E               	clrf	_hashtag_pressed^0,c
  7075   00162E  0012               	return		;funcret
  7076   001630                     __end_of_Terminal_Init:
  7077                           	callstack 0
  7078                           
  7079 ;; *************** function _TI_Init *****************
  7080 ;; Defined at:
  7081 ;;		line 32 in file "TAD_TIMER.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  counter         1    1[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1
  7095 ;;      Params:         0       0       0
  7096 ;;      Locals:         1       0       0
  7097 ;;      Temps:          0       0       0
  7098 ;;      Totals:         1       0       0
  7099 ;;Total ram usage:        1 bytes
  7100 ;; Hardware stack levels used: 1
  7101 ;; Hardware stack levels required when called: 3
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_main
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text30
  7110   0014F6                     __ptext30:
  7111                           	callstack 0
  7112   0014F6                     _TI_Init:
  7113                           	callstack 27
  7114                           
  7115                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  7116                           
  7117                           ;incstack = 0
  7118   0014F6  6A4F               	clrf	TI_Init@counter^0,c
  7119   0014F8                     l3437:
  7120                           
  7121                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  7122   0014F8  504F               	movf	TI_Init@counter^0,w,c
  7123   0014FA  0D05               	mullw	5
  7124   0014FC  50F3               	movf	243,w,c
  7125   0014FE  0F9C               	addlw	low (_Timers+4)
  7126   001500  6ED9               	movwf	fsr2l,c
  7127   001502  6ADA               	clrf	fsr2h,c
  7128   001504  6ADF               	clrf	indf2,c
  7129                           
  7130                           ;TAD_TIMER.c: 35:  }
  7131   001506  2A4F               	incf	TI_Init@counter^0,f,c
  7132   001508  0E03               	movlw	3
  7133   00150A  644F               	cpfsgt	TI_Init@counter^0,c
  7134   00150C  D7F5               	goto	l3437
  7135                           
  7136                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  7137   00150E  0E82               	movlw	130
  7138   001510  6ED5               	movwf	213,c	;volatile
  7139                           
  7140                           ;TAD_TIMER.c: 37:     TMR0=63036;
  7141   001512  0EF6               	movlw	246
  7142   001514  6ED7               	movwf	215,c	;volatile
  7143   001516  0E3C               	movlw	60
  7144   001518  6ED6               	movwf	214,c	;volatile
  7145                           
  7146                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  7147   00151A  94F2               	bcf	242,2,c	;volatile
  7148                           
  7149                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  7150   00151C  8AF2               	bsf	242,5,c	;volatile
  7151   00151E  0012               	return		;funcret
  7152   001520                     __end_of_TI_Init:
  7153                           	callstack 0
  7154                           
  7155 ;; *************** function _LcInit *****************
  7156 ;; Defined at:
  7157 ;;		line 68 in file "TAD_DISPLAY.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  rows            1    wreg     unsigned char 
  7160 ;;  columns         1   22[COMRAM] unsigned char 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;  rows            1   23[COMRAM] unsigned char 
  7163 ;;  i               2   24[COMRAM] int 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1
  7173 ;;      Params:         1       0       0
  7174 ;;      Locals:         3       0       0
  7175 ;;      Temps:          0       0       0
  7176 ;;      Totals:         4       0       0
  7177 ;;Total ram usage:        4 bytes
  7178 ;; Hardware stack levels used: 1
  7179 ;; Hardware stack levels required when called: 6
  7180 ;; This function calls:
  7181 ;;		_CantaIR
  7182 ;;		_EscriuPrimeraOrdre
  7183 ;;		_Espera
  7184 ;;		_TI_NewTimer
  7185 ;;		_WaitForBusy
  7186 ;; This function is called by:
  7187 ;;		_main
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text31
  7192   000A62                     __ptext31:
  7193                           	callstack 0
  7194   000A62                     _LcInit:
  7195                           	callstack 24
  7196                           
  7197                           ;incstack = 0
  7198                           ;LcInit@rows stored from wreg
  7199   000A62  6E65               	movwf	LcInit@rows^0,c
  7200                           
  7201                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  7202   000A64  0E4D               	movlw	low _Timer
  7203   000A66  6E4F               	movwf	TI_NewTimer@TimerHandle^0,c
  7204   000A68  ECDD  F009         	call	_TI_NewTimer	;wreg free
  7205                           
  7206                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  7207   000A6C  C065  F039         	movff	LcInit@rows,_Rows
  7208   000A70  C064  F038         	movff	LcInit@columns,_Columns
  7209                           
  7210                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  7211   000A74  6A36               	clrf	_ColumnAct^0,c
  7212   000A76  6A37               	clrf	_RowAct^0,c
  7213                           
  7214                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  7215   000A78  9293               	bcf	147,1,c	;volatile
  7216   000A7A  9493               	bcf	147,2,c	;volatile
  7217   000A7C  9693               	bcf	147,3,c	;volatile
  7218                           
  7219                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  7220   000A7E  0E00               	movlw	0
  7221   000A80  6E67               	movwf	(LcInit@i+1)^0,c
  7222   000A82  0E00               	movlw	0
  7223   000A84  6E66               	movwf	LcInit@i^0,c
  7224   000A86                     l3509:
  7225                           
  7226                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  7227   000A86  C04D  F05C         	movff	_Timer,Espera@Timer
  7228   000A8A  6A5D               	clrf	(Espera@Timer+1)^0,c
  7229   000A8C  0E00               	movlw	0
  7230   000A8E  6E5F               	movwf	(Espera@ms+1)^0,c
  7231   000A90  0E64               	movlw	100
  7232   000A92  6E5E               	movwf	Espera@ms^0,c
  7233   000A94  EC18  F00A         	call	_Espera	;wreg free
  7234                           
  7235                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7236   000A98  0E03               	movlw	3
  7237   000A9A  ECA7  F007         	call	_EscriuPrimeraOrdre
  7238                           
  7239                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 4);
  7240   000A9E  C04D  F05C         	movff	_Timer,Espera@Timer
  7241   000AA2  6A5D               	clrf	(Espera@Timer+1)^0,c
  7242   000AA4  0E00               	movlw	0
  7243   000AA6  6E5F               	movwf	(Espera@ms+1)^0,c
  7244   000AA8  0E04               	movlw	4
  7245   000AAA  6E5E               	movwf	Espera@ms^0,c
  7246   000AAC  EC18  F00A         	call	_Espera	;wreg free
  7247                           
  7248                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7249   000AB0  0E03               	movlw	3
  7250   000AB2  ECA7  F007         	call	_EscriuPrimeraOrdre
  7251                           
  7252                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  7253   000AB6  C04D  F05C         	movff	_Timer,Espera@Timer
  7254   000ABA  6A5D               	clrf	(Espera@Timer+1)^0,c
  7255   000ABC  0E00               	movlw	0
  7256   000ABE  6E5F               	movwf	(Espera@ms+1)^0,c
  7257   000AC0  0E01               	movlw	1
  7258   000AC2  6E5E               	movwf	Espera@ms^0,c
  7259   000AC4  EC18  F00A         	call	_Espera	;wreg free
  7260                           
  7261                           ;TAD_DISPLAY.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7262   000AC8  0E03               	movlw	3
  7263   000ACA  ECA7  F007         	call	_EscriuPrimeraOrdre
  7264                           
  7265                           ;TAD_DISPLAY.c: 88:   Espera(Timer, 1);
  7266   000ACE  C04D  F05C         	movff	_Timer,Espera@Timer
  7267   000AD2  6A5D               	clrf	(Espera@Timer+1)^0,c
  7268   000AD4  0E00               	movlw	0
  7269   000AD6  6E5F               	movwf	(Espera@ms+1)^0,c
  7270   000AD8  0E01               	movlw	1
  7271   000ADA  6E5E               	movwf	Espera@ms^0,c
  7272   000ADC  EC18  F00A         	call	_Espera	;wreg free
  7273                           
  7274                           ;TAD_DISPLAY.c: 91:   EscriuPrimeraOrdre(0x02);
  7275   000AE0  0E02               	movlw	2
  7276   000AE2  ECA7  F007         	call	_EscriuPrimeraOrdre
  7277                           
  7278                           ;TAD_DISPLAY.c: 92:   Espera(Timer, 1);
  7279   000AE6  C04D  F05C         	movff	_Timer,Espera@Timer
  7280   000AEA  6A5D               	clrf	(Espera@Timer+1)^0,c
  7281   000AEC  0E00               	movlw	0
  7282   000AEE  6E5F               	movwf	(Espera@ms+1)^0,c
  7283   000AF0  0E01               	movlw	1
  7284   000AF2  6E5E               	movwf	Espera@ms^0,c
  7285   000AF4  EC18  F00A         	call	_Espera	;wreg free
  7286                           
  7287                           ;TAD_DISPLAY.c: 93:   CantaIR(0x20 | 0x08);
  7288   000AF8  0E28               	movlw	40
  7289   000AFA  EC4B  F00A         	call	_CantaIR
  7290                           
  7291                           ;TAD_DISPLAY.c: 96:   WaitForBusy(); CantaIR(0x08);
  7292   000AFE  EC06  F00B         	call	_WaitForBusy	;wreg free
  7293   000B02  0E08               	movlw	8
  7294   000B04  EC4B  F00A         	call	_CantaIR
  7295                           
  7296                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x01);
  7297   000B08  EC06  F00B         	call	_WaitForBusy	;wreg free
  7298   000B0C  0E01               	movlw	1
  7299   000B0E  EC4B  F00A         	call	_CantaIR
  7300                           
  7301                           ;TAD_DISPLAY.c: 98:   Espera(Timer,2);
  7302   000B12  C04D  F05C         	movff	_Timer,Espera@Timer
  7303   000B16  6A5D               	clrf	(Espera@Timer+1)^0,c
  7304   000B18  0E00               	movlw	0
  7305   000B1A  6E5F               	movwf	(Espera@ms+1)^0,c
  7306   000B1C  0E02               	movlw	2
  7307   000B1E  6E5E               	movwf	Espera@ms^0,c
  7308   000B20  EC18  F00A         	call	_Espera	;wreg free
  7309                           
  7310                           ;TAD_DISPLAY.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7311   000B24  EC06  F00B         	call	_WaitForBusy	;wreg free
  7312   000B28  0E06               	movlw	6
  7313   000B2A  EC4B  F00A         	call	_CantaIR
  7314                           
  7315                           ;TAD_DISPLAY.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7316   000B2E  EC06  F00B         	call	_WaitForBusy	;wreg free
  7317   000B32  0E0F               	movlw	15
  7318   000B34  EC4B  F00A         	call	_CantaIR
  7319                           
  7320                           ;TAD_DISPLAY.c: 101:  }
  7321   000B38  4A66               	infsnz	LcInit@i^0,f,c
  7322   000B3A  2A67               	incf	(LcInit@i+1)^0,f,c
  7323   000B3C  BE67               	btfsc	(LcInit@i+1)^0,7,c
  7324   000B3E  D7A3               	goto	l3509
  7325   000B40  5067               	movf	(LcInit@i+1)^0,w,c
  7326   000B42  E105               	bnz	u2450
  7327   000B44  0E02               	movlw	2
  7328   000B46  5C66               	subwf	LcInit@i^0,w,c
  7329   000B48  B0D8               	btfsc	status,0,c
  7330   000B4A  0012               	return	
  7331   000B4C  D79C               	goto	l3509
  7332   000B4E                     u2450:
  7333   000B4E  0012               	return		;funcret
  7334   000B50                     __end_of_LcInit:
  7335                           	callstack 0
  7336                           
  7337 ;; *************** function _WaitForBusy *****************
  7338 ;; Defined at:
  7339 ;;		line 256 in file "TAD_DISPLAY.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  Busy            1    0        unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      void 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1
  7353 ;;      Params:         0       0       0
  7354 ;;      Locals:         0       0       0
  7355 ;;      Temps:          0       0       0
  7356 ;;      Totals:         0       0       0
  7357 ;;Total ram usage:        0 bytes
  7358 ;; Hardware stack levels used: 1
  7359 ;; Hardware stack levels required when called: 5
  7360 ;; This function calls:
  7361 ;;		_Espera
  7362 ;; This function is called by:
  7363 ;;		_LcInit
  7364 ;;		_LcGotoXY
  7365 ;;		_LcPutChar
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text32
  7370   00160C                     __ptext32:
  7371                           	callstack 0
  7372   00160C                     _WaitForBusy:
  7373                           	callstack 23
  7374                           
  7375                           ;TAD_DISPLAY.c: 257:  Espera(Timer, 2);
  7376                           
  7377                           ;incstack = 0
  7378   00160C  C04D  F05C         	movff	_Timer,Espera@Timer
  7379   001610  6A5D               	clrf	(Espera@Timer+1)^0,c
  7380   001612  0E00               	movlw	0
  7381   001614  6E5F               	movwf	(Espera@ms+1)^0,c
  7382   001616  0E02               	movlw	2
  7383   001618  6E5E               	movwf	Espera@ms^0,c
  7384   00161A  EC18  F00A         	call	_Espera	;wreg free
  7385   00161E  0012               	return		;funcret
  7386   001620                     __end_of_WaitForBusy:
  7387                           	callstack 0
  7388                           
  7389 ;; *************** function _Espera *****************
  7390 ;; Defined at:
  7391 ;;		line 205 in file "TAD_DISPLAY.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  Timer           2   14[COMRAM] int 
  7394 ;;  ms              2   16[COMRAM] int 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1
  7406 ;;      Params:         4       0       0
  7407 ;;      Locals:         0       0       0
  7408 ;;      Temps:          4       0       0
  7409 ;;      Totals:         8       0       0
  7410 ;;Total ram usage:        8 bytes
  7411 ;; Hardware stack levels used: 1
  7412 ;; Hardware stack levels required when called: 4
  7413 ;; This function calls:
  7414 ;;		_TI_GetTics
  7415 ;;		_TI_ResetTics
  7416 ;; This function is called by:
  7417 ;;		_LcInit
  7418 ;;		_WaitForBusy
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text33
  7423   001430                     __ptext33:
  7424                           	callstack 0
  7425   001430                     _Espera:
  7426                           	callstack 23
  7427                           
  7428                           ;TAD_DISPLAY.c: 206:  TI_ResetTics((unsigned char)Timer);
  7429                           
  7430                           ;incstack = 0
  7431   001430  505C               	movf	Espera@Timer^0,w,c
  7432   001432  ECA3  F00A         	call	_TI_ResetTics
  7433   001436                     l2883:
  7434   001436  C05E  F060         	movff	Espera@ms,??_Espera
  7435   00143A  C05F  F061         	movff	Espera@ms+1,??_Espera+1
  7436   00143E  0E00               	movlw	0
  7437   001440  BE61               	btfsc	(??_Espera+1)^0,7,c
  7438   001442  0EFF               	movlw	255
  7439   001444  6E62               	movwf	(??_Espera+2)^0,c
  7440   001446  6E63               	movwf	(??_Espera+3)^0,c
  7441   001448  505C               	movf	Espera@Timer^0,w,c
  7442   00144A  EC79  F009         	call	_TI_GetTics
  7443   00144E  5060               	movf	??_Espera^0,w,c
  7444   001450  5C4F               	subwf	?_TI_GetTics^0,w,c
  7445   001452  5061               	movf	(??_Espera+1)^0,w,c
  7446   001454  5850               	subwfb	(?_TI_GetTics+1)^0,w,c
  7447   001456  5062               	movf	(??_Espera+2)^0,w,c
  7448   001458  5851               	subwfb	(?_TI_GetTics+2)^0,w,c
  7449   00145A  5063               	movf	(??_Espera+3)^0,w,c
  7450   00145C  5852               	subwfb	(?_TI_GetTics+3)^0,w,c
  7451   00145E  B0D8               	btfsc	status,0,c
  7452   001460  0012               	return	
  7453   001462  D7E9               	goto	l2883
  7454   001464                     __end_of_Espera:
  7455                           	callstack 0
  7456                           
  7457 ;; *************** function _TI_ResetTics *****************
  7458 ;; Defined at:
  7459 ;;		line 53 in file "TAD_TIMER.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  TimerHandle     1    wreg     unsigned char 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1
  7473 ;;      Params:         0       0       0
  7474 ;;      Locals:         1       0       0
  7475 ;;      Temps:          0       0       0
  7476 ;;      Totals:         1       0       0
  7477 ;;Total ram usage:        1 bytes
  7478 ;; Hardware stack levels used: 1
  7479 ;; Hardware stack levels required when called: 3
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_Espera
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text34
  7488   001546                     __ptext34:
  7489                           	callstack 0
  7490   001546                     _TI_ResetTics:
  7491                           	callstack 23
  7492                           
  7493                           ;incstack = 0
  7494                           ;TI_ResetTics@TimerHandle stored from wreg
  7495   001546  6E4F               	movwf	TI_ResetTics@TimerHandle^0,c
  7496                           
  7497                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  7498   001548  9EF2               	bcf	242,7,c	;volatile
  7499   00154A  504F               	movf	TI_ResetTics@TimerHandle^0,w,c
  7500   00154C  0D05               	mullw	5
  7501   00154E  50F3               	movf	243,w,c
  7502   001550  0F98               	addlw	low _Timers
  7503   001552  6ED9               	movwf	fsr2l,c
  7504   001554  6ADA               	clrf	fsr2h,c
  7505   001556  C007  FFDE         	movff	_Tics,postinc2	;volatile
  7506   00155A  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  7507   00155E  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  7508   001562  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  7509   001566  8EF2               	bsf	242,7,c	;volatile
  7510   001568  0012               	return		;funcret
  7511   00156A                     __end_of_TI_ResetTics:
  7512                           	callstack 0
  7513                           
  7514 ;; *************** function _TI_GetTics *****************
  7515 ;; Defined at:
  7516 ;;		line 61 in file "TAD_TIMER.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  TimerHandle     1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  7521 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  4    1[COMRAM] unsigned long 
  7524 ;; Registers used:
  7525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1
  7531 ;;      Params:         4       0       0
  7532 ;;      Locals:         5       0       0
  7533 ;;      Temps:          4       0       0
  7534 ;;      Totals:        13       0       0
  7535 ;;Total ram usage:       13 bytes
  7536 ;; Hardware stack levels used: 1
  7537 ;; Hardware stack levels required when called: 3
  7538 ;; This function calls:
  7539 ;;		Nothing
  7540 ;; This function is called by:
  7541 ;;		_Espera
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text35
  7546   0012F2                     __ptext35:
  7547                           	callstack 0
  7548   0012F2                     _TI_GetTics:
  7549                           	callstack 23
  7550                           
  7551                           ;incstack = 0
  7552                           ;TI_GetTics@TimerHandle stored from wreg
  7553   0012F2  6E5B               	movwf	TI_GetTics@TimerHandle^0,c
  7554                           
  7555                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  7556   0012F4  9EF2               	bcf	242,7,c	;volatile
  7557   0012F6  C007  F057         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  7558   0012FA  C008  F058         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  7559   0012FE  C009  F059         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  7560   001302  C00A  F05A         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  7561   001306  8EF2               	bsf	242,7,c	;volatile
  7562                           
  7563                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  7564   001308  505B               	movf	TI_GetTics@TimerHandle^0,w,c
  7565   00130A  0D05               	mullw	5
  7566   00130C  50F3               	movf	243,w,c
  7567   00130E  0F98               	addlw	low _Timers
  7568   001310  6ED9               	movwf	fsr2l,c
  7569   001312  6ADA               	clrf	fsr2h,c
  7570   001314  CFDE F053          	movff	postinc2,??_TI_GetTics
  7571   001318  CFDE F054          	movff	postinc2,??_TI_GetTics+1
  7572   00131C  CFDE F055          	movff	postinc2,??_TI_GetTics+2
  7573   001320  CFDE F056          	movff	postinc2,??_TI_GetTics+3
  7574   001324  5053               	movf	??_TI_GetTics^0,w,c
  7575   001326  5C57               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  7576   001328  6E4F               	movwf	?_TI_GetTics^0,c
  7577   00132A  5054               	movf	(??_TI_GetTics+1)^0,w,c
  7578   00132C  5858               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  7579   00132E  6E50               	movwf	(?_TI_GetTics+1)^0,c
  7580   001330  5055               	movf	(??_TI_GetTics+2)^0,w,c
  7581   001332  5859               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  7582   001334  6E51               	movwf	(?_TI_GetTics+2)^0,c
  7583   001336  5056               	movf	(??_TI_GetTics+3)^0,w,c
  7584   001338  585A               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  7585   00133A  6E52               	movwf	(?_TI_GetTics+3)^0,c
  7586   00133C  0012               	return		;funcret
  7587   00133E                     __end_of_TI_GetTics:
  7588                           	callstack 0
  7589                           
  7590 ;; *************** function _TI_NewTimer *****************
  7591 ;; Defined at:
  7592 ;;		line 43 in file "TAD_TIMER.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  7595 ;;		 -> timer@TAD_TECLADO$F720(1), timer(1), Timer(1), 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  Comptador       1    3[COMRAM] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      unsigned char 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1
  7607 ;;      Params:         1       0       0
  7608 ;;      Locals:         1       0       0
  7609 ;;      Temps:          1       0       0
  7610 ;;      Totals:         3       0       0
  7611 ;;Total ram usage:        3 bytes
  7612 ;; Hardware stack levels used: 1
  7613 ;; Hardware stack levels required when called: 3
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_LcInit
  7618 ;;		_initLeds
  7619 ;;		_initTeclado
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text36
  7624   0013BA                     __ptext36:
  7625                           	callstack 0
  7626   0013BA                     _TI_NewTimer:
  7627                           	callstack 26
  7628                           
  7629                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  7630                           
  7631                           ;incstack = 0
  7632   0013BA  6A51               	clrf	TI_NewTimer@Comptador^0,c
  7633                           
  7634                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7635   0013BC  D005               	goto	l3213
  7636   0013BE                     l3209:
  7637                           
  7638                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  7639   0013BE  2A51               	incf	TI_NewTimer@Comptador^0,f,c
  7640   0013C0  0E04               	movlw	4
  7641   0013C2  1851               	xorwf	TI_NewTimer@Comptador^0,w,c
  7642   0013C4  B4D8               	btfsc	status,2,c
  7643   0013C6  0012               	return	
  7644   0013C8                     l3213:
  7645                           
  7646                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  7647   0013C8  5051               	movf	TI_NewTimer@Comptador^0,w,c
  7648   0013CA  0D05               	mullw	5
  7649   0013CC  50F3               	movf	243,w,c
  7650   0013CE  0F9C               	addlw	low (_Timers+4)
  7651   0013D0  6ED9               	movwf	fsr2l,c
  7652   0013D2  6ADA               	clrf	fsr2h,c
  7653   0013D4  04DE               	decf	postinc2,w,c
  7654   0013D6  B4D8               	btfsc	status,2,c
  7655   0013D8  D7F2               	goto	l3209
  7656                           
  7657                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  7658   0013DA  5051               	movf	TI_NewTimer@Comptador^0,w,c
  7659   0013DC  0D05               	mullw	5
  7660   0013DE  50F3               	movf	243,w,c
  7661   0013E0  0F9C               	addlw	low (_Timers+4)
  7662   0013E2  6ED9               	movwf	fsr2l,c
  7663   0013E4  6ADA               	clrf	fsr2h,c
  7664   0013E6  0E01               	movlw	1
  7665   0013E8  6EDF               	movwf	indf2,c
  7666                           
  7667                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  7668   0013EA  504F               	movf	TI_NewTimer@TimerHandle^0,w,c
  7669   0013EC  6ED9               	movwf	fsr2l,c
  7670   0013EE  6ADA               	clrf	fsr2h,c
  7671   0013F0  C051  FFDF         	movff	TI_NewTimer@Comptador,indf2
  7672   0013F4  0012               	return		;funcret
  7673   0013F6                     __end_of_TI_NewTimer:
  7674                           	callstack 0
  7675                           
  7676 ;; *************** function _EscriuPrimeraOrdre *****************
  7677 ;; Defined at:
  7678 ;;		line 260 in file "TAD_DISPLAY.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  ordre           1    wreg     unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  ordre           1    2[COMRAM] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1
  7692 ;;      Params:         0       0       0
  7693 ;;      Locals:         1       0       0
  7694 ;;      Temps:          1       0       0
  7695 ;;      Totals:         2       0       0
  7696 ;;Total ram usage:        2 bytes
  7697 ;; Hardware stack levels used: 1
  7698 ;; Hardware stack levels required when called: 3
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_LcInit
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text37
  7707   000F4E                     __ptext37:
  7708                           	callstack 0
  7709   000F4E                     _EscriuPrimeraOrdre:
  7710                           	callstack 26
  7711                           
  7712                           ;incstack = 0
  7713                           ;EscriuPrimeraOrdre@ordre stored from wreg
  7714   000F4E  6E50               	movwf	EscriuPrimeraOrdre@ordre^0,c
  7715                           
  7716                           ;TAD_DISPLAY.c: 262:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  7717   000F50  9096               	bcf	150,0,c	;volatile
  7718   000F52  9296               	bcf	150,1,c	;volatile
  7719   000F54  9A93               	bcf	147,5,c	;volatile
  7720   000F56  9893               	bcf	147,4,c	;volatile
  7721   000F58  968A               	bcf	138,3,c	;volatile
  7722   000F5A  948A               	bcf	138,2,c	;volatile
  7723                           
  7724                           ;TAD_DISPLAY.c: 263:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  7725   000F5C  828A               	bsf	138,1,c	;volatile
  7726   000F5E  828A               	bsf	138,1,c	;volatile
  7727                           
  7728                           ;TAD_DISPLAY.c: 264:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  7729   000F60  A650               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  7730   000F62  D003               	goto	u500
  7731   000F64  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7732   000F66  2A4F               	incf	??_EscriuPrimeraOrdre^0,f,c
  7733   000F68  D001               	goto	u518
  7734   000F6A                     u500:
  7735   000F6A  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7736   000F6C                     u518:
  7737   000F6C  508D               	movf	141,w,c	;volatile
  7738   000F6E  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7739   000F70  0BFE               	andlw	-2
  7740   000F72  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7741   000F74  6E8D               	movwf	141,c	;volatile
  7742                           
  7743                           ;TAD_DISPLAY.c: 265:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  7744   000F76  A450               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  7745   000F78  D003               	goto	u520
  7746   000F7A  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7747   000F7C  2A4F               	incf	??_EscriuPrimeraOrdre^0,f,c
  7748   000F7E  D001               	goto	u538
  7749   000F80                     u520:
  7750   000F80  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7751   000F82                     u538:
  7752   000F82  464F               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7753   000F84  508D               	movf	141,w,c	;volatile
  7754   000F86  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7755   000F88  0BFD               	andlw	-3
  7756   000F8A  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7757   000F8C  6E8D               	movwf	141,c	;volatile
  7758                           
  7759                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  7760   000F8E  A250               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  7761   000F90  D003               	goto	u540
  7762   000F92  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7763   000F94  2A4F               	incf	??_EscriuPrimeraOrdre^0,f,c
  7764   000F96  D001               	goto	u558
  7765   000F98                     u540:
  7766   000F98  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7767   000F9A                     u558:
  7768   000F9A  3A4F               	swapf	??_EscriuPrimeraOrdre^0,f,c
  7769   000F9C  464F               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7770   000F9E  508A               	movf	138,w,c	;volatile
  7771   000FA0  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7772   000FA2  0BDF               	andlw	-33
  7773   000FA4  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7774   000FA6  6E8A               	movwf	138,c	;volatile
  7775                           
  7776                           ;TAD_DISPLAY.c: 267:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  7777   000FA8  A050               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  7778   000FAA  D003               	goto	u560
  7779   000FAC  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7780   000FAE  2A4F               	incf	??_EscriuPrimeraOrdre^0,f,c
  7781   000FB0  D001               	goto	u578
  7782   000FB2                     u560:
  7783   000FB2  6A4F               	clrf	??_EscriuPrimeraOrdre^0,c
  7784   000FB4                     u578:
  7785   000FB4  3A4F               	swapf	??_EscriuPrimeraOrdre^0,f,c
  7786   000FB6  508A               	movf	138,w,c	;volatile
  7787   000FB8  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7788   000FBA  0BEF               	andlw	-17
  7789   000FBC  184F               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7790   000FBE  6E8A               	movwf	138,c	;volatile
  7791                           
  7792                           ;TAD_DISPLAY.c: 268:  (LATBbits.LATB1 = 0);
  7793   000FC0  928A               	bcf	138,1,c	;volatile
  7794   000FC2  0012               	return		;funcret
  7795   000FC4                     __end_of_EscriuPrimeraOrdre:
  7796                           	callstack 0
  7797                           
  7798 ;; *************** function _CantaIR *****************
  7799 ;; Defined at:
  7800 ;;		line 224 in file "TAD_DISPLAY.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  IR              1    wreg     unsigned char 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  IR              1    3[COMRAM] unsigned char 
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      void 
  7807 ;; Registers used:
  7808 ;;		wreg, status,2, status,0, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMRAM   BANK0   BANK1
  7814 ;;      Params:         0       0       0
  7815 ;;      Locals:         1       0       0
  7816 ;;      Temps:          0       0       0
  7817 ;;      Totals:         1       0       0
  7818 ;;Total ram usage:        1 bytes
  7819 ;; Hardware stack levels used: 1
  7820 ;; Hardware stack levels required when called: 4
  7821 ;; This function calls:
  7822 ;;		_CantaPartAlta
  7823 ;;		_CantaPartBaixa
  7824 ;; This function is called by:
  7825 ;;		_LcInit
  7826 ;;		_LcGotoXY
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text38
  7831   001496                     __ptext38:
  7832                           	callstack 0
  7833   001496                     _CantaIR:
  7834                           	callstack 23
  7835                           
  7836                           ;incstack = 0
  7837                           ;CantaIR@IR stored from wreg
  7838   001496  6E51               	movwf	CantaIR@IR^0,c
  7839                           
  7840                           ;TAD_DISPLAY.c: 225:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  7841   001498  9096               	bcf	150,0,c	;volatile
  7842   00149A  9296               	bcf	150,1,c	;volatile
  7843   00149C  9A93               	bcf	147,5,c	;volatile
  7844   00149E  9893               	bcf	147,4,c	;volatile
  7845                           
  7846                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB3 = 0);
  7847   0014A0  968A               	bcf	138,3,c	;volatile
  7848                           
  7849                           ;TAD_DISPLAY.c: 227:  (LATBbits.LATB2 = 0);
  7850   0014A2  948A               	bcf	138,2,c	;volatile
  7851                           
  7852                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  7853   0014A4  828A               	bsf	138,1,c	;volatile
  7854                           
  7855                           ;TAD_DISPLAY.c: 229:  CantaPartAlta(IR);
  7856   0014A6  5051               	movf	CantaIR@IR^0,w,c
  7857   0014A8  ECBD  F008         	call	_CantaPartAlta
  7858                           
  7859                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 1);
  7860   0014AC  828A               	bsf	138,1,c	;volatile
  7861                           
  7862                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 0);
  7863   0014AE  928A               	bcf	138,1,c	;volatile
  7864                           
  7865                           ;TAD_DISPLAY.c: 232:  (LATBbits.LATB1 = 0);
  7866   0014B0  928A               	bcf	138,1,c	;volatile
  7867                           
  7868                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  7869   0014B2  828A               	bsf	138,1,c	;volatile
  7870                           
  7871                           ;TAD_DISPLAY.c: 234:  CantaPartBaixa(IR);
  7872   0014B4  5051               	movf	CantaIR@IR^0,w,c
  7873   0014B6  EC8B  F008         	call	_CantaPartBaixa
  7874                           
  7875                           ;TAD_DISPLAY.c: 235:  (LATBbits.LATB1 = 1);
  7876   0014BA  828A               	bsf	138,1,c	;volatile
  7877                           
  7878                           ;TAD_DISPLAY.c: 236:  (LATBbits.LATB1 = 0);
  7879   0014BC  928A               	bcf	138,1,c	;volatile
  7880                           
  7881                           ;TAD_DISPLAY.c: 237:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  7882   0014BE  8096               	bsf	150,0,c	;volatile
  7883   0014C0  8296               	bsf	150,1,c	;volatile
  7884   0014C2  8A93               	bsf	147,5,c	;volatile
  7885   0014C4  8893               	bsf	147,4,c	;volatile
  7886   0014C6  0012               	return		;funcret
  7887   0014C8                     __end_of_CantaIR:
  7888                           	callstack 0
  7889                           
  7890 ;; *************** function _CantaPartBaixa *****************
  7891 ;; Defined at:
  7892 ;;		line 217 in file "TAD_DISPLAY.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  c               1    wreg     unsigned char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  c               1    2[COMRAM] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1
  7906 ;;      Params:         0       0       0
  7907 ;;      Locals:         1       0       0
  7908 ;;      Temps:          1       0       0
  7909 ;;      Totals:         2       0       0
  7910 ;;Total ram usage:        2 bytes
  7911 ;; Hardware stack levels used: 1
  7912 ;; Hardware stack levels required when called: 3
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		_CantaIR
  7917 ;;		_CantaData
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text39
  7922   001116                     __ptext39:
  7923                           	callstack 0
  7924   001116                     _CantaPartBaixa:
  7925                           	callstack 23
  7926                           
  7927                           ;incstack = 0
  7928                           ;CantaPartBaixa@c stored from wreg
  7929   001116  6E50               	movwf	CantaPartBaixa@c^0,c
  7930                           
  7931                           ;TAD_DISPLAY.c: 218:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  7932   001118  A650               	btfss	CantaPartBaixa@c^0,3,c
  7933   00111A  D003               	goto	u1740
  7934   00111C  6A4F               	clrf	??_CantaPartBaixa^0,c
  7935   00111E  2A4F               	incf	??_CantaPartBaixa^0,f,c
  7936   001120  D001               	goto	u1758
  7937   001122                     u1740:
  7938   001122  6A4F               	clrf	??_CantaPartBaixa^0,c
  7939   001124                     u1758:
  7940   001124  508D               	movf	141,w,c	;volatile
  7941   001126  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7942   001128  0BFE               	andlw	-2
  7943   00112A  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7944   00112C  6E8D               	movwf	141,c	;volatile
  7945                           
  7946                           ;TAD_DISPLAY.c: 219:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  7947   00112E  A450               	btfss	CantaPartBaixa@c^0,2,c
  7948   001130  D003               	goto	u1760
  7949   001132  6A4F               	clrf	??_CantaPartBaixa^0,c
  7950   001134  2A4F               	incf	??_CantaPartBaixa^0,f,c
  7951   001136  D001               	goto	u1778
  7952   001138                     u1760:
  7953   001138  6A4F               	clrf	??_CantaPartBaixa^0,c
  7954   00113A                     u1778:
  7955   00113A  464F               	rlncf	??_CantaPartBaixa^0,f,c
  7956   00113C  508D               	movf	141,w,c	;volatile
  7957   00113E  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7958   001140  0BFD               	andlw	-3
  7959   001142  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7960   001144  6E8D               	movwf	141,c	;volatile
  7961                           
  7962                           ;TAD_DISPLAY.c: 220:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  7963   001146  A250               	btfss	CantaPartBaixa@c^0,1,c
  7964   001148  D003               	goto	u1780
  7965   00114A  6A4F               	clrf	??_CantaPartBaixa^0,c
  7966   00114C  2A4F               	incf	??_CantaPartBaixa^0,f,c
  7967   00114E  D001               	goto	u1798
  7968   001150                     u1780:
  7969   001150  6A4F               	clrf	??_CantaPartBaixa^0,c
  7970   001152                     u1798:
  7971   001152  3A4F               	swapf	??_CantaPartBaixa^0,f,c
  7972   001154  464F               	rlncf	??_CantaPartBaixa^0,f,c
  7973   001156  508A               	movf	138,w,c	;volatile
  7974   001158  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7975   00115A  0BDF               	andlw	-33
  7976   00115C  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7977   00115E  6E8A               	movwf	138,c	;volatile
  7978                           
  7979                           ;TAD_DISPLAY.c: 221:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  7980   001160  A050               	btfss	CantaPartBaixa@c^0,0,c
  7981   001162  D003               	goto	u1800
  7982   001164  6A4F               	clrf	??_CantaPartBaixa^0,c
  7983   001166  2A4F               	incf	??_CantaPartBaixa^0,f,c
  7984   001168  D001               	goto	u1818
  7985   00116A                     u1800:
  7986   00116A  6A4F               	clrf	??_CantaPartBaixa^0,c
  7987   00116C                     u1818:
  7988   00116C  3A4F               	swapf	??_CantaPartBaixa^0,f,c
  7989   00116E  508A               	movf	138,w,c	;volatile
  7990   001170  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7991   001172  0BEF               	andlw	-17
  7992   001174  184F               	xorwf	??_CantaPartBaixa^0,w,c
  7993   001176  6E8A               	movwf	138,c	;volatile
  7994   001178  0012               	return		;funcret
  7995   00117A                     __end_of_CantaPartBaixa:
  7996                           	callstack 0
  7997                           
  7998 ;; *************** function _CantaPartAlta *****************
  7999 ;; Defined at:
  8000 ;;		line 210 in file "TAD_DISPLAY.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;  c               1    wreg     unsigned char 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  c               1    2[COMRAM] unsigned char 
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      void 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2, status,0
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1
  8014 ;;      Params:         0       0       0
  8015 ;;      Locals:         1       0       0
  8016 ;;      Temps:          1       0       0
  8017 ;;      Totals:         2       0       0
  8018 ;;Total ram usage:        2 bytes
  8019 ;; Hardware stack levels used: 1
  8020 ;; Hardware stack levels required when called: 3
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_CantaIR
  8025 ;;		_CantaData
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text40
  8030   00117A                     __ptext40:
  8031                           	callstack 0
  8032   00117A                     _CantaPartAlta:
  8033                           	callstack 23
  8034                           
  8035                           ;incstack = 0
  8036                           ;CantaPartAlta@c stored from wreg
  8037   00117A  6E50               	movwf	CantaPartAlta@c^0,c
  8038                           
  8039                           ;TAD_DISPLAY.c: 211:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  8040   00117C  AE50               	btfss	CantaPartAlta@c^0,7,c
  8041   00117E  D003               	goto	u1660
  8042   001180  6A4F               	clrf	??_CantaPartAlta^0,c
  8043   001182  2A4F               	incf	??_CantaPartAlta^0,f,c
  8044   001184  D001               	goto	u1678
  8045   001186                     u1660:
  8046   001186  6A4F               	clrf	??_CantaPartAlta^0,c
  8047   001188                     u1678:
  8048   001188  508D               	movf	141,w,c	;volatile
  8049   00118A  184F               	xorwf	??_CantaPartAlta^0,w,c
  8050   00118C  0BFE               	andlw	-2
  8051   00118E  184F               	xorwf	??_CantaPartAlta^0,w,c
  8052   001190  6E8D               	movwf	141,c	;volatile
  8053                           
  8054                           ;TAD_DISPLAY.c: 212:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  8055   001192  AC50               	btfss	CantaPartAlta@c^0,6,c
  8056   001194  D003               	goto	u1680
  8057   001196  6A4F               	clrf	??_CantaPartAlta^0,c
  8058   001198  2A4F               	incf	??_CantaPartAlta^0,f,c
  8059   00119A  D001               	goto	u1698
  8060   00119C                     u1680:
  8061   00119C  6A4F               	clrf	??_CantaPartAlta^0,c
  8062   00119E                     u1698:
  8063   00119E  464F               	rlncf	??_CantaPartAlta^0,f,c
  8064   0011A0  508D               	movf	141,w,c	;volatile
  8065   0011A2  184F               	xorwf	??_CantaPartAlta^0,w,c
  8066   0011A4  0BFD               	andlw	-3
  8067   0011A6  184F               	xorwf	??_CantaPartAlta^0,w,c
  8068   0011A8  6E8D               	movwf	141,c	;volatile
  8069                           
  8070                           ;TAD_DISPLAY.c: 213:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  8071   0011AA  AA50               	btfss	CantaPartAlta@c^0,5,c
  8072   0011AC  D003               	goto	u1700
  8073   0011AE  6A4F               	clrf	??_CantaPartAlta^0,c
  8074   0011B0  2A4F               	incf	??_CantaPartAlta^0,f,c
  8075   0011B2  D001               	goto	u1718
  8076   0011B4                     u1700:
  8077   0011B4  6A4F               	clrf	??_CantaPartAlta^0,c
  8078   0011B6                     u1718:
  8079   0011B6  3A4F               	swapf	??_CantaPartAlta^0,f,c
  8080   0011B8  464F               	rlncf	??_CantaPartAlta^0,f,c
  8081   0011BA  508A               	movf	138,w,c	;volatile
  8082   0011BC  184F               	xorwf	??_CantaPartAlta^0,w,c
  8083   0011BE  0BDF               	andlw	-33
  8084   0011C0  184F               	xorwf	??_CantaPartAlta^0,w,c
  8085   0011C2  6E8A               	movwf	138,c	;volatile
  8086                           
  8087                           ;TAD_DISPLAY.c: 214:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  8088   0011C4  A850               	btfss	CantaPartAlta@c^0,4,c
  8089   0011C6  D003               	goto	u1720
  8090   0011C8  6A4F               	clrf	??_CantaPartAlta^0,c
  8091   0011CA  2A4F               	incf	??_CantaPartAlta^0,f,c
  8092   0011CC  D001               	goto	u1738
  8093   0011CE                     u1720:
  8094   0011CE  6A4F               	clrf	??_CantaPartAlta^0,c
  8095   0011D0                     u1738:
  8096   0011D0  3A4F               	swapf	??_CantaPartAlta^0,f,c
  8097   0011D2  508A               	movf	138,w,c	;volatile
  8098   0011D4  184F               	xorwf	??_CantaPartAlta^0,w,c
  8099   0011D6  0BEF               	andlw	-17
  8100   0011D8  184F               	xorwf	??_CantaPartAlta^0,w,c
  8101   0011DA  6E8A               	movwf	138,c	;volatile
  8102   0011DC  0012               	return		;funcret
  8103   0011DE                     __end_of_CantaPartAlta:
  8104                           	callstack 0
  8105                           
  8106 ;; *************** function _LowRSI *****************
  8107 ;; Defined at:
  8108 ;;		line 34 in file "main.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		None
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1
  8122 ;;      Params:         0       0       0
  8123 ;;      Locals:         0       0       0
  8124 ;;      Temps:          1       0       0
  8125 ;;      Totals:         1       0       0
  8126 ;;Total ram usage:        1 bytes
  8127 ;; Hardware stack levels used: 1
  8128 ;; Hardware stack levels required when called: 2
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		Interrupt level 1
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	intcodelo
  8137   000018                     __pintcodelo:
  8138                           	callstack 0
  8139   000018                     _LowRSI:
  8140                           	callstack 21
  8141                           
  8142                           ;incstack = 0
  8143   000018  807E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8144   00001A  CFE0 F04E          	movff	bsr,??_LowRSI
  8145   00001E  C04E  FFE0         	movff	??_LowRSI,bsr
  8146   000022  907E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  8147   000024  0010               	retfie	
  8148   000026                     __end_of_LowRSI:
  8149                           	callstack 0
  8150                           
  8151 ;; *************** function _HighRSI *****************
  8152 ;; Defined at:
  8153 ;;		line 30 in file "main.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1
  8167 ;;      Params:         0       0       0
  8168 ;;      Locals:         0       0       0
  8169 ;;      Temps:          0       0       0
  8170 ;;      Totals:         0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used: 1
  8173 ;; Hardware stack levels required when called: 1
  8174 ;; This function calls:
  8175 ;;		_RSI_Timer0
  8176 ;; This function is called by:
  8177 ;;		Interrupt level 2
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	intcode
  8182   000008                     __pintcode:
  8183                           	callstack 0
  8184   000008                     _HighRSI:
  8185                           	callstack 21
  8186                           
  8187                           ;incstack = 0
  8188   000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8189   00000A  EF2C  F00B         	goto	int_func
  8190                           
  8191                           	psect	intcode_body
  8192   001658                     __pintcode_body:
  8193                           	callstack 21
  8194   001658                     int_func:
  8195                           	callstack 21
  8196                           
  8197                           ;main.c: 32:      motor_RFID();
  8198   001658  B4F2               	btfsc	242,2,c	;volatile
  8199   00165A  ECE6  F00A         	call	_RSI_Timer0	;wreg free
  8200   00165E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8201   001660  0011               	retfie		f
  8202   001662                     __end_of_HighRSI:
  8203                           	callstack 0
  8204                           
  8205 ;; *************** function _RSI_Timer0 *****************
  8206 ;; Defined at:
  8207 ;;		line 25 in file "TAD_TIMER.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1
  8221 ;;      Params:         0       0       0
  8222 ;;      Locals:         0       0       0
  8223 ;;      Temps:          0       0       0
  8224 ;;      Totals:         0       0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used: 1
  8227 ;; This function calls:
  8228 ;;		Nothing
  8229 ;; This function is called by:
  8230 ;;		_HighRSI
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text43
  8235   0015CC                     __ptext43:
  8236                           	callstack 0
  8237   0015CC                     _RSI_Timer0:
  8238                           	callstack 21
  8239                           
  8240                           ;TAD_TIMER.c: 27:     TMR0=63036;
  8241                           
  8242                           ;incstack = 0
  8243   0015CC  0EF6               	movlw	246
  8244   0015CE  6ED7               	movwf	215,c	;volatile
  8245   0015D0  0E3C               	movlw	60
  8246   0015D2  6ED6               	movwf	214,c	;volatile
  8247                           
  8248                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  8249   0015D4  94F2               	bcf	4082,2,c	;volatile
  8250                           
  8251                           ;TAD_TIMER.c: 29:     Tics++;
  8252   0015D6  0E01               	movlw	1
  8253   0015D8  2607               	addwf	_Tics^0,f,c	;volatile
  8254   0015DA  0E00               	movlw	0
  8255   0015DC  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  8256   0015DE  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  8257   0015E0  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  8258   0015E2  0012               	return		;funcret
  8259   0015E4                     __end_of_RSI_Timer0:
  8260                           	callstack 0
  8261                           
  8262                           	psect	rparam
  8263   000001                     ___rparam_used  equ	1
  8264   000000                     ___param_bank   equ	0
  8265   000000                     __Lparam        equ	__Lrparam
  8266   000000                     __Hparam        equ	__Hrparam
  8267                           
  8268                           	psect	temp
  8269   00007E                     btemp:
  8270                           	callstack 0
  8271   00007E                     	ds	1
  8272   00007E                     int$flags       set	btemp
  8273   00007F                     wtemp8          set	btemp+1
  8274   00007F                     ttemp5          set	btemp+1
  8275   000082                     ttemp6          set	btemp+4
  8276   000086                     ttemp7          set	btemp+8
  8277                           
  8278                           	psect	idloc
  8279                           
  8280                           ;Config register IDLOC0 @ 0x200000
  8281                           ;	unspecified, using default values
  8282   200000                     	org	2097152
  8283   200000  FF                 	db	255
  8284                           
  8285                           ;Config register IDLOC1 @ 0x200001
  8286                           ;	unspecified, using default values
  8287   200001                     	org	2097153
  8288   200001  FF                 	db	255
  8289                           
  8290                           ;Config register IDLOC2 @ 0x200002
  8291                           ;	unspecified, using default values
  8292   200002                     	org	2097154
  8293   200002  FF                 	db	255
  8294                           
  8295                           ;Config register IDLOC3 @ 0x200003
  8296                           ;	unspecified, using default values
  8297   200003                     	org	2097155
  8298   200003  FF                 	db	255
  8299                           
  8300                           ;Config register IDLOC4 @ 0x200004
  8301                           ;	unspecified, using default values
  8302   200004                     	org	2097156
  8303   200004  FF                 	db	255
  8304                           
  8305                           ;Config register IDLOC5 @ 0x200005
  8306                           ;	unspecified, using default values
  8307   200005                     	org	2097157
  8308   200005  FF                 	db	255
  8309                           
  8310                           ;Config register IDLOC6 @ 0x200006
  8311                           ;	unspecified, using default values
  8312   200006                     	org	2097158
  8313   200006  FF                 	db	255
  8314                           
  8315                           ;Config register IDLOC7 @ 0x200007
  8316                           ;	unspecified, using default values
  8317   200007                     	org	2097159
  8318   200007  FF                 	db	255
  8319                           
  8320                           	psect	config
  8321                           
  8322                           ; Padding undefined space
  8323   300000                     	org	3145728
  8324   300000  FF                 	db	255
  8325                           
  8326                           ;Config register CONFIG1H @ 0x300001
  8327                           ;	Oscillator
  8328                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8329                           ;	Fail-Safe Clock Monitor Enable bit
  8330                           ;	FCMEN = 0x0, unprogrammed default
  8331                           ;	Internal/External Oscillator Switchover bit
  8332                           ;	IESO = 0x0, unprogrammed default
  8333   300001                     	org	3145729
  8334   300001  06                 	db	6
  8335                           
  8336                           ;Config register CONFIG2L @ 0x300002
  8337                           ;	Power-up Timer Enable bit
  8338                           ;	PWRT = OFF, PWRT disabled
  8339                           ;	Brown-out Reset Enable bits
  8340                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8341                           ;	Brown-out Reset Voltage bits
  8342                           ;	BORV = 0x3, unprogrammed default
  8343   300002                     	org	3145730
  8344   300002  19                 	db	25
  8345                           
  8346                           ;Config register CONFIG2H @ 0x300003
  8347                           ;	Watchdog Timer Enable bit
  8348                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8349                           ;	Watchdog Timer Postscale Select bits
  8350                           ;	WDTPS = 0xF, unprogrammed default
  8351   300003                     	org	3145731
  8352   300003  1E                 	db	30
  8353                           
  8354                           ; Padding undefined space
  8355   300004                     	org	3145732
  8356   300004  FF                 	db	255
  8357                           
  8358                           ;Config register CONFIG3H @ 0x300005
  8359                           ;	CCP2 MUX bit
  8360                           ;	CCP2MX = 0x1, unprogrammed default
  8361                           ;	PORTB A/D Enable bit
  8362                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8363                           ;	Low-Power Timer1 Oscillator Enable bit
  8364                           ;	LPT1OSC = 0x0, unprogrammed default
  8365                           ;	MCLR Pin Enable bit
  8366                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8367   300005                     	org	3145733
  8368   300005  81                 	db	129
  8369                           
  8370                           ;Config register CONFIG4L @ 0x300006
  8371                           ;	Stack Full/Underflow Reset Enable bit
  8372                           ;	STVREN = 0x1, unprogrammed default
  8373                           ;	Single-Supply ICSP Enable bit
  8374                           ;	LVP = OFF, Single-Supply ICSP disabled
  8375                           ;	Boot Block Size Select bits
  8376                           ;	BBSIZ = 0x0, unprogrammed default
  8377                           ;	Extended Instruction Set Enable bit
  8378                           ;	XINST = 0x0, unprogrammed default
  8379                           ;	Background Debugger Enable bit
  8380                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8381   300006                     	org	3145734
  8382   300006  81                 	db	129
  8383                           
  8384                           ; Padding undefined space
  8385   300007                     	org	3145735
  8386   300007  FF                 	db	255
  8387                           
  8388                           ;Config register CONFIG5L @ 0x300008
  8389                           ;	unspecified, using default values
  8390                           ;	Code Protection bit
  8391                           ;	CP0 = 0x1, unprogrammed default
  8392                           ;	Code Protection bit
  8393                           ;	CP1 = 0x1, unprogrammed default
  8394   300008                     	org	3145736
  8395   300008  03                 	db	3
  8396                           
  8397                           ;Config register CONFIG5H @ 0x300009
  8398                           ;	unspecified, using default values
  8399                           ;	Boot Block Code Protection bitProtect Boot
  8400                           ;	CPB = 0x1, unprogrammed default
  8401                           ;	Data EEPROM Code Protection bit
  8402                           ;	CPD = 0x1, unprogrammed default
  8403   300009                     	org	3145737
  8404   300009  C0                 	db	192
  8405                           
  8406                           ;Config register CONFIG6L @ 0x30000A
  8407                           ;	unspecified, using default values
  8408                           ;	Write Protection bit
  8409                           ;	WRT0 = 0x1, unprogrammed default
  8410                           ;	Write Protection bit
  8411                           ;	WRT1 = 0x1, unprogrammed default
  8412   30000A                     	org	3145738
  8413   30000A  03                 	db	3
  8414                           
  8415                           ;Config register CONFIG6H @ 0x30000B
  8416                           ;	unspecified, using default values
  8417                           ;	Configuration Register Write Protection bit
  8418                           ;	WRTC = 0x1, unprogrammed default
  8419                           ;	Boot Block Write Protection bit
  8420                           ;	WRTB = 0x1, unprogrammed default
  8421                           ;	Data EEPROM Write Protection bit
  8422                           ;	WRTD = 0x1, unprogrammed default
  8423   30000B                     	org	3145739
  8424   30000B  E0                 	db	224
  8425                           
  8426                           ;Config register CONFIG7L @ 0x30000C
  8427                           ;	unspecified, using default values
  8428                           ;	Table Read Protection bit
  8429                           ;	EBTR0 = 0x1, unprogrammed default
  8430                           ;	Table Read Protection bit
  8431                           ;	EBTR1 = 0x1, unprogrammed default
  8432   30000C                     	org	3145740
  8433   30000C  03                 	db	3
  8434                           
  8435                           ;Config register CONFIG7H @ 0x30000D
  8436                           ;	unspecified, using default values
  8437                           ;	Boot Block Table Read Protection bit
  8438                           ;	EBTRB = 0x1, unprogrammed default
  8439   30000D                     	org	3145741
  8440   30000D  40                 	db	64
  8441                           tosu	equ	0xFFF
  8442                           tosh	equ	0xFFE
  8443                           tosl	equ	0xFFD
  8444                           stkptr	equ	0xFFC
  8445                           pclatu	equ	0xFFB
  8446                           pclath	equ	0xFFA
  8447                           pcl	equ	0xFF9
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           indf0	equ	0xFEF
  8455                           postinc0	equ	0xFEE
  8456                           postdec0	equ	0xFED
  8457                           preinc0	equ	0xFEC
  8458                           plusw0	equ	0xFEB
  8459                           fsr0h	equ	0xFEA
  8460                           fsr0l	equ	0xFE9
  8461                           wreg	equ	0xFE8
  8462                           indf1	equ	0xFE7
  8463                           postinc1	equ	0xFE6
  8464                           postdec1	equ	0xFE5
  8465                           preinc1	equ	0xFE4
  8466                           plusw1	equ	0xFE3
  8467                           fsr1h	equ	0xFE2
  8468                           fsr1l	equ	0xFE1
  8469                           bsr	equ	0xFE0
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           preinc2	equ	0xFDC
  8474                           plusw2	equ	0xFDB
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8

Data Sizes:
    Strings     313
    Constant    29
    Data        83
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     42     125
    BANK0           128      0     123
    BANK1           256      0      64

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(BANK0[6]), printfUID@leds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 94
		 -> motorTerminal@buffer(COMRAM[20]), printfUID@buffer(BANK0[50]), STR_1(CODE[18]), STR_10(CODE[33]), 
		 -> STR_2(CODE[51]), STR_3(CODE[94]), STR_4(CODE[3]), STR_5(CODE[33]), 
		 -> STR_6(CODE[33]), STR_7(CODE[3]), STR_8(CODE[18]), STR_9(CODE[33]), 

    motorTerminal@ptr	PTR unsigned char  size(1) Largest target is 20
		 -> motorTerminal@buffer(COMRAM[20]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(COMRAM[5]), 

    printfUID@ptr	PTR unsigned char  size(1) Largest target is 50
		 -> printfUID@buffer(BANK0[50]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(COMRAM[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 94
		 -> motorTerminal@buffer(COMRAM[20]), printfUID@buffer(BANK0[50]), STR_1(CODE[18]), STR_10(CODE[33]), 
		 -> STR_2(CODE[51]), STR_3(CODE[94]), STR_4(CODE[3]), STR_5(CODE[33]), 
		 -> STR_6(CODE[33]), STR_7(CODE[3]), STR_8(CODE[18]), STR_9(CODE[33]), 
		 -> NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_TECLADO$F720(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motorTerminal
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_setCurrentUser
    _setCurrentUser->_printfUID
    _motorTerminal->_printfUID
    _printfUID->_motor_StartSendString
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _Terminal_SendChar->_Terminal_TXAvailable
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8494
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                      _motorTerminal
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          3     3      0    1326
                                             31 COMRAM     3     3      0
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1212
                                             30 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     732
                                             22 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                          11    11      0    2732
                                             25 COMRAM    11    11      0
                       _getActualUID
                         _motor_Read
                        _motor_Write
                     _setCurrentUser
 ---------------------------------------------------------------------------------
 (2) _setCurrentUser                                       5     1      4    1645
                                             20 COMRAM     5     1      4
                       _checkUserUID
                          _printfUID
 ---------------------------------------------------------------------------------
 (3) _checkUserUID                                         7     7      0     204
                                              1 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                       22    22      0    2375
                                             20 COMRAM    22    22      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           13    11      2    1320
                                              7 COMRAM    13    11      2
                      _getActualLeds
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      63
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _getActualLeds                                        4     2      2     292
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         7     5      2     386
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     655
                                             12 COMRAM     1     1      0
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     114
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             3     3      0     226
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     884
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     161
                             _Espera
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4     161
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (5) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     114
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _getActualLeds
       _motor_StartSendString
     _saveHourToData
   _motor_RFID
     _getActualUID
     _motor_Read
     _motor_Write
     _setCurrentUser
       _checkUserUID
       _printfUID
   _motor_datos
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _WaitForBusy

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      64     25.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0     123     96.1%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     42     125     99.2%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     312      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Mar 28 02:53:15 2025

       _timer@TAD_TECLADO$F720 0044          ?_Terminal_ReceiveChar 004E                     _RSI_Timer0 15CC  
         __end_of_checkUserUID 123C                     _TI_GetTics 12F2                             bsr 0FE0  
                  _state_write 004A                            l124 0E18                            l117 0DD8  
                          l233 15C0                            l272 0BAC                            l249 10AE  
                          l602 157C                            l435 03C4                            l277 0C04  
                          l712 1394                            l721 0F1A                            l722 0F04  
                          l378 0148                            l395 01EA                            l735 12CC  
                          l752 11E8                            l782 0C62                            l777 0C36  
                          l787 0CC8                            u500 0F6A                            u520 0F80  
                          u540 0F98                            u518 0F6C                            u560 0FB2  
                          u538 0F82                            u558 0F9A                            u578 0FB4  
                          u780 1654                   printfUID@hex 1EA9                   printfUID@val 005F  
             ??_CantaPartBaixa 004F                   printfUID@ptr 0061                            prod 0FF3  
                          wreg 0FE8                           l3001 0E20                           l3003 0E36  
                         l4001 03FE                           l3213 13C8                           l4013 0418  
                         l3151 0A2A                           l3119 09A4                           l3071 08DE  
                         l4031 0464                           l4015 0426                           l3209 13BE  
                         l3313 0B92                           l3081 0908                           l4025 044C  
                         l4043 0494                           l3251 101E                           l4115 0C7E  
                         l3341 0BFC                           l3317 0B96                           l3413 15E6  
                         l4037 047C                           l3237 0FEC                           l4125 0C94  
                         l4109 0C64                           l4133 0CCE                           l3351 0C08  
                         l3271 10DC                           l3239 0FF8                           l3097 096A  
                         l3089 0956                           l3425 1528                           l3185 11F0  
                         l3177 11EA                           l4057 04DE                           l4049 04AC  
                         l3257 102C                           l3249 1012                           l3283 10FE  
                         l3371 0EE6                           l4083 05CA                           l3509 0A86  
                         l3437 14F8                           l3269 10C6                           l3285 1112  
                         l3381 0F06                           l3621 0690                           l3189 1220  
                         l4069 051A                           l3391 0F1C                           l2903 1068  
                         l3623 069C                           l3607 0658                           l3199 1232  
                         l4079 052A                           l4087 0C20                           l4159 1420  
                         l3561 1396                           l3465 0D14                           l2913 109A  
                         l3641 06E0                           l3625 06A0                           l4097 0C44  
                  _TI_NewTimer 13BA                           l3547 1380                           l3299 0B74  
                         l2907 1096                           l3635 06CA                           l3627 06A4  
                         l3811 00EC                           l3469 0D2A                           l3717 07C4  
                         l3821 0120                           l3487 0D9E                           l2951 12A8  
                         l3727 07E6                           l3639 06DA                           l3591 0620  
                         l3911 02FC                           l3903 0266                           l3823 012E  
                         l3815 00FC                           l2961 12CE                           l3737 0804  
                         l3657 070C                           l3649 06F4                           l3577 05EE  
                         l3753 084A                           l3905 02D6                           l2883 1436  
                         l2891 103A                           l3659 0712                           l3931 0328  
                         l3923 0316                           l3819 010E                           l3933 0336  
                         l3909 02E6                           l3845 0174                           l3837 0158  
                         l3773 0066                           l3765 0048                           l2895 103E  
                         l3599 063C                           l3863 01AC                           l3847 0182  
                         l3783 0098                           l3775 0078                           l2991 0DE8  
                         l2983 0DC2                           l2969 15C2                           l3945 0346  
                         l3865 01B6                           l3849 018C                           l3785 00A6  
                         l3971 03A2                           l3963 037E                           l3947 0354  
                         l3883 0208                           l3867 01C4                           l2995 0DF8  
                         l2979 0DB4                           l3893 0228                           l3877 01F0  
                         l3797 00C4                           l3789 00B0                           l3975 03B4  
                         l3967 0390                           l3959 036E                           l3895 0254  
                         l3799 00D2                           l3997 03F0                           l3989 03D4  
                         STR_1 1FDB                           STR_2 1F24                           STR_3 1EC6  
                         STR_4 1FEA                           STR_5 1F78                           STR_6 1F57  
                         STR_7 1FEA                           STR_8 1FED                           STR_9 1FBA  
                         u2000 08F0                           u2050 11E4                           u2220 0BBE  
                         u3100 0C2C                           _LATA 0F89                           u2070 1228  
                         u2400 0D6A                           u3040 04D4                           _LATD 0F8C  
                         u2410 0D7A                           u3050 04D6                           u1700 11B4  
                         u2228 0BC0                           u2420 0D8A                           u1630 1602  
                         u1720 11CE                           u1800 116A                           u2520 0602  
                         u2450 0B4E                           u2370 0D3A                           u2530 0608  
                         u1660 1186                           u1740 1122                           u2380 0D4A  
                         u1820 105E                           u1718 11B6                           u2390 0D5A  
                         u1638 1604                           u1680 119C                           u1760 1138  
                         u1840 1088                           u1738 11D0                           u1818 116C  
                         u2730 00AC                           u1827 1054                           u1780 1150  
                         u1678 1188                           u1758 1124                           u1847 107E  
                         u1960 124C                           u1698 119E                           u1778 113A  
                         u1798 1152                           u1978 124E                           _TMR0 0FD6  
                   _ActualLeds 00E8                           _Tics 0007                           _Rows 0039  
             motor_datos@state 0016                           _main 13F6                  printfUID@leds 0059  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf1 0FE7  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 007E                __end_of_TI_Init 1520                           prodh 0FF4  
                         prodl 0FF3                           start 0026                __end_of_CantaIR 14C8  
              __end_of_HighRSI 1662                  LcInit@columns 0064             setCurrentUser@UID0 0066  
           setCurrentUser@UID1 0062             setCurrentUser@UID2 0063             setCurrentUser@UID3 0064  
           setCurrentUser@UID4 0065                   ___param_bank 0000                   ?_initTeclado 004E  
                processBit@val 0051                    Espera@Timer 005C                          ?_main 004E  
                        STR_10 1F99                          _T0CON 0FD5                          _RCREG 0FAE  
                        _RCSTA 0FAB                          _SPBRG 0FAF                          _TRISA 0F92  
                        _TRISD 0F95                          _TRISE 0F96                          _TXREG 0FAD  
                        _TXSTA 0FAC           __end_of_getActualUID 0F4E                          _Filas 0023  
                        _Timer 004D                motor_RFID@irqEn 0032                          _index 0017  
              motor_RFID@unLen 000D                   _TI_ResetTics 1546                          _tecla 0021  
              motor_RFID@value 0024             getActualLeds@i_865 0052                motor_RFID@state 0034  
                        _timer 004C                          _state 0020                setLed@userIndex 0011  
          motor_Read@bit_count 0046                          tablat 0FF5                          ttemp5 007F  
                        ttemp6 0082                          ttemp7 0086                 _saveHourToData 1520  
                        status 0FD8                          wtemp8 007F             Terminal_SendChar@c 0052  
             __end_of_LcGotoXY 0E4C        EscriuPrimeraOrdre@ordre 0050         ??_Terminal_ReceiveChar 004F  
              __initialization 0E4C                   __end_of_main 1430                 _setCurrentUser 14C8  
                  ?_RSI_Timer0 004E                 TI_Init@counter 004F                    ?_TI_GetTics 004F  
        _motor_StartSendString 1584                         ??_main 0078                  __activetblptr 0002  
                       _ADCON1 0FC1                      ??_TI_Init 004F         __end_of_saveHourToData 1546  
                    ??_CantaIR 0051                 LcGotoXY@Fisics 0069                 LcGotoXY@Column 006B  
                ??_WaitForBusy 0064                         _TMR0IF 7F92                      ??_HighRSI 004E  
            checkUserUID@match 0053                         _LcInit 0A62          __end_of_getActualLeds 12F2  
             __end_of_delay_us 15CC                 getActualLeds@i 0051                         _Espera 1430  
                       _LowRSI 0018         __end_of_setCurrentUser 14F6                   _LcGotoXY$396 0067  
                       _RowAct 0037                         _Timers 0098             motor_datos@pointer 0015  
             __end_of_initRFID 0DB0             motorTerminal@index 001B               __end_of_initData 13BA  
             __end_of_initLeds 163E                _motor_datos$885 006D             motorTerminal@state 001C  
                       _keymap 1EBA                         clear_0 0EB2                         clear_1 0EBE  
              printfUID@buffer 00B6                   ?_motor_Write 0056                         isa$std 0001  
                 ?_motor_datos 004E                   __pdataCOMRAM 0078                   __mediumconst 1EA8  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
            __end_of_CantaData 1496          __end_of_Terminal_Init 1630         motor_RFID@differentUID 006E  
              ?_saveHourToData 004F                   _checkUserUID 11DE                     __accesstop 0080  
      __end_of__initialization 0EC4              __end_of_LcPutChar 1038                delay_us@howMany 004F  
                ___rparam_used 0001                  checkUserUID@i 0054                  checkUserUID@j 0055  
                setLed@modeLED 0013                ?_setCurrentUser 0062                 __pcstackCOMRAM 004E  
          __end_of_WaitForBusy 1620                   __pidataBANK0 163E                   __pidataBANK1 133E  
       ?_motor_StartSendString 0053           TI_NewTimer@Comptador 0051    motor_RFID@operation_pending 0026  
             _motor_SendString 1038            processBit@bit_count 0052                      ?_LcGotoXY 0064  
                 ?_TI_NewTimer 004F                     __pbssBANK0 0080          __end_of_motorTerminal 0890  
                      ?_LcInit 0064                  _CantaPartAlta 117A         TI_NewTimer@TimerHandle 004F  
                      ?_Espera 005C                        ?_LowRSI 004E                   _getActualUID 0ED2  
              processBit@state 0053        TI_ResetTics@TimerHandle 004F                        _BAUDCON 0FB8  
               _sending_string 001D                motor_SendChar@c 0052                        LcInit@i 0066  
                   ??_LcGotoXY 0065                      ?_delay_us 004E                getActualUID@UID 004F  
            _Terminal_SendChar 15E4                        _TI_Init 14F6             ?_Terminal_SendChar 004E  
                      _CantaIR 1496                      ?_initRFID 004E                      ?_initData 004E  
                    ?_initLeds 004E                        _HighRSI 0008                    _WaitForBusy 160C  
               ?_CantaPartAlta 004E                        _Columns 0038            motor_datos@lastChar 0014  
            motor_RFID@TagType 002D            ??_Terminal_SendChar 0052                        __Hparam 0000  
                      __Lparam 0000                   ??_RSI_Timer0 004E                   ??_TI_GetTics 0053  
            motor_RFID@allZero 002B                        __pcinit 0E4C            motorTerminal@buffer 0062  
                      __ramtop 0200              motor_RFID@_status 002E                        __ptext0 13F6  
                      __ptext1 0C1E                        __ptext2 0FC4                        __ptext3 0DB0  
                      __ptext4 1464                        __ptext5 002A                        __ptext6 14C8  
                      __ptext7 11DE                        __ptext8 05DA                        __ptext9 1520  
          motorTerminal@opcion 0076                      CantaIR@IR 0051              __end_of_initPorts 166A  
    __end_of_Terminal_SendChar 15F8              motor_RFID@waitIRq 0031       motorTerminal@currentUser 003F  
                   ??_delay_us 004F                        _str_ptr 000B                 __pintcode_body 1658  
         end_of_initialization 0EC4                    motor_RFID@i 002F                    motor_RFID@n 0030  
                   ??_initRFID 005A                     ??_initData 004F             __end_of_RSI_Timer0 15E4  
                   ??_initLeds 0052                  __Lmediumconst 1EA8                        int_func 1658  
           __end_of_TI_GetTics 133E             saveHourToData@hour 004F                motor_Write@addr 0057  
            __end_of_printfUID 0A62                     _motor_RFID 002A                        postdec1 0FE5  
                   _motor_Read 0B50                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE              getActualUID@i_860 0055              getActualUID@i_859 0053  
                    _PORTCbits 0F82                     _processBit 123C                 _motor_RFID$700 006F  
        TI_GetTics@TimerHandle 005B               ??_saveHourToData 0050                      _TRISBbits 0F93  
                    _TRISCbits 0F94                      _TRISEbits 0F96                     _state_read 004B  
               setLed@ledIndex 0012                ??_CantaPartAlta 004F               ??_setCurrentUser 0066  
                    _CantaData 1464       motor_StartSendString@str 0053       __end_of_motor_SendString 10AA  
               __end_of_LcInit 0B50        ??_motor_StartSendString 0055                      _LcPutChar 0FC4  
               __end_of_Espera 1464                 __end_of_LowRSI 0026   __end_of_Terminal_RXAvailable 1658  
   __end_of_EscriuPrimeraOrdre 0FC4                  __pidataCOMRAM 166A      motor_Read@timeout_counter 000F  
               _motor_Read$666 0058                 motor_RFID@addr 0025                 motor_RFID@flag 0071  
                    _ColumnAct 0036                 __end_of_keymap 1EC6                saveHourToData@i 0050  
            getActualLeds@leds 004F            start_initialization 0E4C                 _motor_SendChar 156A  
           motor_Read@ucResult 0035   __end_of_Terminal_TXAvailable 160C          motor_Read@MAX_TIMEOUT 0078  
                   ?_CantaData 004E                       ??_LcInit 0065                  getActualUID@i 0054  
                     ??_Espera 0060                       ??_LowRSI 004E                     ?_LcPutChar 004E  
                initData@i_853 0051                    ?_motor_RFID 004E              motorTerminal@leds 00AC  
            motorTerminal@hour 007A                    ?_motor_Read 004E                  ??_initTeclado 0052  
                  __pdataBANK0 00EE                    __pdataBANK1 0100                    ?_processBit 0051  
       __end_of_motor_SendChar 1584                    __pbssCOMRAM 0001                  ?_TI_ResetTics 004E  
             motor_Read@ucAddr 0045                       ?_TI_Init 004E                       ?_CantaIR 004E  
               _CantaPartBaixa 1116                       ?_HighRSI 004E                   ?_WaitForBusy 004E  
               motor_Read@addr 0057            motor_RFID@fifoLevel 0028                  _getActualLeds 1298  
                    __pintcode 0008                  __pmediumconst 1EA8                      _colValues 00F8  
              CantaPartBaixa@c 0050                    __pintcodelo 0018             motor_Write@ucValue 0047  
                  __smallconst 1EA8            __end_of_initTeclado 15B4                ?_motor_SendChar 004E  
               ??_TI_ResetTics 004F           processBit@next_state 0054                      _initPorts 1662  
       __end_of_CantaPartBaixa 117A                  _Terminal_Init 1620           _Terminal_RXAvailable 164C  
           motor_LEDs@lastTics 00B2                    ??_CantaData 0051                       _LATBbits 0F8A  
                     _LATCbits 0F8B                       _LATEbits 0F8D                      delay_us@x 0050  
         motor_Write@bit_count 0049                 ?_getActualLeds 004F                _hashtag_pressed 001E  
                     _PIR1bits 0F9E                    ??_LcPutChar 006C          motor_RFID@lastBitsVal 0029  
                    _printfUID 0890                  ??_motor_Write 0057           _Terminal_TXAvailable 15F8  
                ??_motor_datos 006D                      _state_str 001F                     printfUID@i 0060  
       motor_RFID@tempRegValue 002A                       Espera@ms 005E                       _LcGotoXY 0DB0  
 __end_of_Terminal_ReceiveChar 1674                     ?_initPorts 004E                  motor_RFID@UID 0001  
               ?_Terminal_Init 004E                    LcGotoXY@Row 0064                      copy_data0 0E60  
                    copy_data1 0E80                      copy_data2 0EA0                ?_CantaPartBaixa 004E  
                     _Columnas 0022          ?_Terminal_RXAvailable 004E                  ?_checkUserUID 004E  
        motor_RFID@currentUser 0069                      initData@i 004F                      initData@j 0050  
                _motorTerminal 05DA           __end_ofprintfUID@hex 1EBA              ?_motor_SendString 004E  
                     __Hrparam 0000             printfUID@userIndex 0056                       __Lrparam 0000  
           ??_motor_SendString 0053               motorTerminal@ptr 0077  __end_of_motor_StartSendString 159C  
                   ?_printfUID 0055                    _initTeclado 159C          ?_Terminal_TXAvailable 004F  
      motorTerminal@userNumber 001A             motor_RFID@checksum 002C                    _currentTime 00F4  
                  _currentUser 003A            __end_of_motor_Write 1116                       _delay_us 15B4  
          __end_of_motor_datos 0CEA                       __ptext10 0890                       __ptext11 1584  
           _EscriuPrimeraOrdre 0F4E                       __ptext20 159C                       __ptext12 1038  
                     __ptext21 0CEA                       __ptext13 156A                       __ptext30 14F6  
                     __ptext22 10AA                       __ptext14 1298                       __ptext31 0A62  
                     __ptext23 0B50                       __ptext15 0ED2                       __ptext40 117A  
                     __ptext32 160C                       __ptext24 123C                       __ptext16 15E4  
                     __ptext33 1430                       __ptext25 15B4                       __ptext17 15F8  
                     __ptext34 1546                       __ptext26 1662                       __ptext18 1670  
                     __ptext43 15CC                       __ptext35 12F2                       __ptext27 1630  
                     __ptext19 164C                       __ptext36 13BA                       __ptext28 137E  
                     __ptext37 0F4E                       __ptext29 1620                       __ptext38 1496  
                     __ptext39 1116                  ??_TI_NewTimer 0050                 CantaPartAlta@c 0050  
            motor_Write@ucAddr 0048                 ??_checkUserUID 004F                       _initRFID 0CEA  
                     _initData 137E          getActualUID@userIndex 0050                       _initLeds 1630  
              ??_getActualLeds 0051            ?_EscriuPrimeraOrdre 004E                 ?_motorTerminal 004E  
        __end_of_CantaPartAlta 11DE                  CantaData@Data 0051                       _new_user 0018  
                ?_getActualUID 004F                   ??_motor_RFID 0067                       isa$xinst 0000  
                 ??_motor_Read 0056           __end_of_TI_ResetTics 156A                       int$flags 007E  
           motor_RFID@substate 0033                       _userUIDs 0100              controlLED@ledBits 00EE  
         ??_EscriuPrimeraOrdre 004F                     LcInit@rows 0065                   ??_processBit 0055  
                   _INTCONbits 0FF2                ??_Terminal_Init 004F      TI_GetTics@CopiaTicsActual 0057  
            _new_configuration 0019                    ??_initPorts 004F         ??_Terminal_RXAvailable 004F  
               _configurations 0080             __end_of_motor_RFID 05DA         getActualLeds@userIndex 0050  
                     intlevel1 0000                       intlevel2 0000             __end_of_motor_Read 0C1E  
                   LcPutChar@c 006C               motor_Write@value 0056            __end_of_TI_NewTimer 13F6  
               ??_getActualUID 0051             __end_of_processBit 1298         ??_Terminal_TXAvailable 0051  
                 motor_datos@i 006F           _Terminal_ReceiveChar 1670                    ??_printfUID 0057  
             ??_motor_SendChar 0052                    _motor_Write 10AA                    _motor_datos 0C1E  
       motor_RFID@backBitsCalc 0027                ??_motorTerminal 0062           printfUID@currentUser 0055  
               initRFID@regVal 005A  
